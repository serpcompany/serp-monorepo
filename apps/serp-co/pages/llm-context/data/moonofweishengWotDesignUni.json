[
  {
    "owner": "moonofweisheng",
    "repo": "wot-design-uni",
    "content": "TITLE: ConfigProvider Theme Variables Implementation\nDESCRIPTION: Complete example of using ConfigProvider with custom theme variables including button implementation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-config-provider :theme-vars=\"themeVars\">\n  <div style=\"margin: 16px\">\n    <wd-button round block type=\"primary\">Submit</wd-button>\n  </div>\n</wd-config-provider>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref, reactive } from 'vue'\n\nexport default {\n  setup() {\n    const themeVars = reactive({\n      buttonPrimaryBgColor: '#07c160',\n      buttonPrimaryColor: '#07c160'\n    })\n    return {\n      themeVars\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Implementation with Vue and TypeScript\nDESCRIPTION: Demonstrates basic form setup with username and password fields using wd-form component. Includes validation rules and submission handling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/form.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-form ref=\"form\" :model=\"model\">\n  <wd-cell-group border>\n    <wd-input\n      label=\"Username\"\n      label-width=\"100px\"\n      prop=\"value1\"\n      clearable\n      v-model=\"model.value1\"\n      placeholder=\"Please enter username\"\n      :rules=\"[{ required: true, message: 'Please enter username' }]\"\n    />\n    <wd-input\n      label=\"Password\"\n      label-width=\"100px\"\n      prop=\"value2\"\n      show-password\n      clearable\n      v-model=\"model.value2\"\n      placeholder=\"Please enter password\"\n      :rules=\"[{ required: true, message: 'Please enter password' }]\"\n    />\n  </wd-cell-group>\n  <view class=\"footer\">\n    <wd-button type=\"primary\" size=\"large\" @click=\"handleSubmit\" block>Submit</wd-button>\n  </view>\n</wd-form>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { success: showSuccess } = useToast()\n\nconst model = reactive<{\n  value1: string\n  value2: string\n}>({ \n  value1: '',\n  value2: ''\n})\n\nconst form = ref()\n\nfunction handleSubmit() {\n  form.value\n    .validate()\n    .then(({ valid, errors }) => {\n      if (valid) {\n        showSuccess({\n          msg: 'Validation passed'\n        })\n      }\n    })\n    .catch((error) => {\n      console.log(error, 'error')\n    })\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.footer {\n  padding: 12px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project with Wot Design Uni Template\nDESCRIPTION: Command for using create-uni to quickly scaffold a new project with the wot-demo template that includes Wot Design Uni integration.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm create uni@latest -t wot-demo <your project name>\n```\n\n----------------------------------------\n\nTITLE: Using useCountDown Hook in TypeScript\nDESCRIPTION: Basic example showing how to import and use the useCountDown hook for managing countdown functionality, including starting, pausing, resetting, and accessing current time values.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/use-count-down.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCountDown } from '@/uni_modules/wot-design-uni'\n\nconst { start, pause, reset, current } = useCountDown({\n  time: 60 * 1000,\n  onChange(current) {\n    console.log('Remaining time', current)\n  },\n  onFinish() {\n    console.log('Countdown finished')\n  }\n})\n\n// Start countdown\nstart()\n\n// Pause countdown\npause()\n\n// Reset countdown\nreset()\n\n// Get current time\nconsole.log(current.value)\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Usage in HTML and TypeScript\nDESCRIPTION: Demonstrates the basic usage of the Calendar component with a single date selection. It shows how to bind a value and handle the confirm event.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar v-model=\"value\" label=\"Date Selection\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Style Isolation in Vue 3.2 Components\nDESCRIPTION: Configuration to enable the styleIsolation: 'shared' option in Vue 3.2 and below for allowing style overrides in custom components.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/common-problems.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<wd-button type=\"primary\">Primary Button</wd-button>\n```\n\nLANGUAGE: ts\nCODE:\n```\n// vue\n<script lang=\"ts\">\nexport default {\n  options: {\n    styleIsolation: 'shared'\n  }\n}\n</script>\n<script lang=\"ts\" setup>\n</script>\n```\n\nLANGUAGE: scss\nCODE:\n```\n/* Component style */\n:deep(.wd-button) {\n  color: red !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Form Template in Vue 3\nDESCRIPTION: This snippet shows the HTML template for a complex form using WOT Design UI components. It includes various input fields, pickers, and custom styling for a comprehensive form layout.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/form.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<view>\n  <wd-message-box />\n  <wd-toast />\n  <wd-form ref=\"form\" :model=\"model\" :rules=\"rules\">\n    <wd-cell-group custom-class=\"group\" title=\"基础信息\" border>\n      <wd-input\n        label=\"优惠券名称\"\n        label-width=\"100px\"\n        :maxlength=\"20\"\n        show-word-limit\n        prop=\"couponName\"\n        required\n        suffix-icon=\"warn-bold\"\n        clearable\n        v-model=\"model.couponName\"\n        placeholder=\"请输入优惠券名称\"\n        @clicksuffixicon=\"handleIconClick\"\n      />\n      <wd-select-picker\n        label=\"推广平台\"\n        label-width=\"100px\"\n        prop=\"platform\"\n        v-model=\"model.platform\"\n        :columns=\"platformList\"\n        placeholder=\"请选择推广平台\"\n      />\n      <wd-picker\n        label=\"优惠方式\"\n        placeholder=\"请选择优惠方式\"\n        label-width=\"100px\"\n        prop=\"promotion\"\n        v-model=\"model.promotion\"\n        :columns=\"promotionlist\"\n      />\n      <wd-cell prop=\"threshold\" title=\"券面额\" required title-width=\"100px\" custom-value-class=\"cell-left\">\n        <view style=\"text-align: left\">\n          <view class=\"inline-txt\" style=\"margin-left: 0\">满</view>\n          <wd-input\n            no-border\n            custom-style=\"display: inline-block; width: 70px; vertical-align: middle\"\n            placeholder=\"请输入金额\"\n            v-model=\"model.threshold\"\n          />\n          <view class=\"inline-txt\">减</view>\n          <wd-input\n            no-border\n            custom-style=\"display: inline-block; width: 70px; vertical-align: middle\"\n            placeholder=\"请输入金额\"\n            v-model=\"model.price\"\n          />\n        </view>\n      </wd-cell>\n    </wd-cell-group>\n    <wd-cell-group custom-class=\"group\" title=\"时间和地址\" border>\n      <wd-datetime-picker label=\"时间\" label-width=\"100px\" placeholder=\"请选择时间\" prop=\"time\" v-model=\"model.time\" />\n      <wd-calendar label=\"日期\" label-width=\"100px\" placeholder=\"请选择日期\" prop=\"date\" v-model=\"model.date\" />\n\n      <wd-col-picker\n        label=\"地址\"\n        placeholder=\"请选择地址\"\n        label-width=\"100px\"\n        prop=\"address\"\n        v-model=\"model.address\"\n        :columns=\"area\"\n        :column-change=\"areaChange\"\n      />\n    </wd-cell-group>\n    <wd-cell-group custom-class=\"group\" title=\"其他信息\" border>\n      <wd-textarea\n        label=\"活动细则\"\n        label-width=\"100px\"\n        type=\"textarea\"\n        v-model=\"model.content\"\n        :maxlength=\"300\"\n        show-word-limit\n        placeholder=\"请输入活动细则信息\"\n        clearable\n        prop=\"content\"\n      />\n      <wd-cell title=\"发货数量\" title-width=\"100px\" prop=\"count\">\n        <view style=\"text-align: left\">\n          <wd-input-number v-model=\"model.count\" />\n        </view>\n      </wd-cell>\n      <wd-cell title=\"开启折扣\" title-width=\"100px\" prop=\"switchVal\" center>\n        <view style=\"text-align: left\">\n          <wd-switch v-model=\"model.switchVal\" />\n        </view>\n      </wd-cell>\n      <wd-input\n        label=\"歪比巴卜\"\n        label-width=\"100px\"\n        prop=\"cardId\"\n        suffix-icon=\"camera\"\n        placeholder=\"请输入歪比巴卜\"\n        clearable\n        v-model=\"model.cardId\"\n      />\n      <wd-input label=\"玛卡巴卡\" label-width=\"100px\" prop=\"phone\" placeholder=\"请输入玛卡巴卡\" clearable v-model=\"model.phone\" />\n      <wd-cell title=\"活动图片\" title-width=\"100px\" prop=\"fileList\">\n        <wd-upload :file-list=\"model.fileList\" action=\"https://ftf.jd.com/api/uploadImg\" @change=\"handleFileChange\"></wd-upload>\n      </wd-cell>\n    </wd-cell-group>\n    <view class=\"tip\">\n      <wd-checkbox v-model=\"model.read\" prop=\"read\" custom-label-class=\"label-class\">\n        已阅读并同意\n        <text style=\"color: #4d80f0\">《巴拉巴拉吧啦协议》</text>\n      </wd-checkbox>\n    </view>\n    <view class=\"footer\">\n      <wd-button type=\"primary\" size=\"large\" @click=\"handleSubmit\" block>提交</wd-button>\n    </view>\n  </wd-form>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Search Functionality in HTML and TypeScript\nDESCRIPTION: Demonstrates the basic usage of the Search component with v-model binding and various event handlers. It includes both HTML template and TypeScript code for handling events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/search.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-search v-model=\"value\" @focus=\"focus\" @blur=\"blur\" @search=\"search\" @clear=\"clear\" @cancel=\"cancel\" @change=\"change\" maxlength=\"10\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\n\nfunction focus() {\n  console.log('Focus')\n}\nfunction blur() {\n  console.log('Blur')\n}\nfunction search() {\n  console.log('Search')\n}\nfunction clear() {\n  console.log('Reset')\n}\nfunction cancel() {\n  console.log('Cancel')\n}\nfunction change({ value }) {\n  console.log('Input', value)\n}\n```\n\n----------------------------------------\n\nTITLE: Button Size Variations\nDESCRIPTION: Demonstrates different button sizes using the size attribute with small, medium, and large options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-button size=\"small\">Small Button</wd-button>\n<wd-button size=\"medium\">Medium Button</wd-button>\n<wd-button size=\"large\">Large Button</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Cell Component with Icons - HTML/SCSS\nDESCRIPTION: Examples showing how to add icons to Cell components using both icon property and custom slots\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/cell.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell-group>\n  <wd-cell title=\"标题文字\" value=\"内容\" icon=\"setting\" />\n  <wd-cell title=\"标题文字\" value=\"内容\">\n    <template #icon>\n      <view class=\"cell-icon\"></view>\n    </template>\n  </wd-cell>\n</wd-cell-group>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.cell-icon {\n  display: block;\n  box-sizing: border-box;\n  width: 16px;\n  height: 16px;\n  margin-right: 4px;\n  background: url('https://img10.360buyimg.com/jmadvertisement/jfs/t1/71075/7/3762/1820/5d1f26d1E0d600b9e/a264c901943080ac.png') no-repeat;\n  background-size: cover;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useNotify in Vue Components\nDESCRIPTION: Shows how to include the wd-notify component in a template and use the useNotify hook to display a basic notification.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/use-notify.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-notify />\n<wd-button @click=\"showNotify\">notify</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNotify } from '@/uni_modules/wot-design-uni'\n\nconst { showNotify } = useNotify()\n\nfunction showNotify() {\n  showNotify('Notification content')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prompt Dialog with useMessage in WOT Design Uni\nDESCRIPTION: Demonstrates implementation of a prompt dialog with input validation using regular expressions and error handling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-message.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"prompt\">prompt</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction prompt() {\n  message\n    .prompt({\n      title: '请输入邮箱',\n      inputPattern: /.+@.+\\..+/i,\n      inputError: '邮箱格式不正确'\n    })\n    .then((resp) => {\n      console.log(resp)\n    })\n    .catch((error) => {\n      console.log(error)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useUpload Composable for File Handling in Wot Design Uni\nDESCRIPTION: This snippet demonstrates how to use the useUpload composable to handle file selection and upload operations. It shows importing the composable, choosing files with options, starting an upload with callbacks for success, error, and progress events, and how to abort an upload.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/use-upload.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUpload } from '@/uni_modules/wot-design-uni'\n\nconst { startUpload, abort, chooseFile, UPLOAD_STATUS } = useUpload()\n\n// Choose files\nconst files = await chooseFile({\n  accept: 'image',\n  multiple: true,\n  maxCount: 9\n})\n\n// Start upload\nconst file = {\n  url: 'file://temp/image.png',\n  status: UPLOAD_STATUS.PENDING,\n  percent: 0\n}\n\nstartUpload(file, {\n  action: 'https://upload-url',\n  onSuccess(res) {\n    console.log('Upload successful', res)\n  },\n  onError(err) {\n    console.log('Upload failed', err) \n  },\n  onProgress(progress) {\n    console.log('Upload progress', progress)\n  }\n})\n\n// Abort upload\nabort()\n```\n\n----------------------------------------\n\nTITLE: Targeted Field Validation in Vue Form\nDESCRIPTION: Shows how to perform validation on specific form fields using the validate method with prop parameters.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/form.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<wd-form ref=\"form\" :model=\"model\" errorType=\"toast\">\n  <wd-cell-group border>\n    <wd-input\n      label=\"用户名\"\n      label-width=\"100px\"\n      prop=\"value1\"\n      clearable\n      v-model=\"model.value1\"\n      placeholder=\"请输入用户名\"\n      :rules=\"[{ required: true, message: '请填写用户名' }]\"\n    />\n    <wd-input\n      label=\"密码\"\n      label-width=\"100px\"\n      prop=\"value2\"\n      show-password\n      clearable\n      v-model=\"model.value2\"\n      placeholder=\"请输入密码\"\n      :rules=\"[{ required: true, message: '请填写密码' }]\"\n    />\n  </wd-cell-group>\n  <view class=\"footer\">\n    <wd-button type=\"primary\" size=\"large\" @click=\"handleSubmit\" block>提交</wd-button>\n    <wd-button type=\"primary\" size=\"large\" @click=\"handleValidate\" block>校验用户名和密码</wd-button>\n  </view>\n</wd-form>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useToast } from '@/uni_modules/wot-design-uni'\nimport type { FormInstance } from '@/uni_modules/wot-design-uni/components/wd-form/types'\nimport { reactive, ref } from 'vue'\n\nconst { success: showSuccess } = useToast()\nconst model = reactive<{\n  value1: string\n  value2: string\n}>({\n  value1: '',\n  value2: ''\n})\n\nconst form = ref<FormInstance>()\n\nfunction handleSubmit() {\n  form\n    .value!.validate()\n    .then(({ valid, errors }) => {\n      if (valid) {\n        showSuccess({\n          msg: '校验通过'\n        })\n      }\n    })\n    .catch((error) => {\n      console.log(error, 'error')\n    })\n}\n\nfunction handleValidate() {\n  form\n    .value!.validate(['value1', 'value2'])\n    .then(({ valid, errors }) => {\n      if (valid) {\n        showSuccess({\n          msg: '校验通过'\n        })\n      }\n    })\n    .catch((error) => {\n      console.log(error, 'error')\n    })\n}\n</script>\n```\n\nLANGUAGE: css\nCODE:\n```\n.footer {\n  padding: 12px;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Wot Design Uni Component Styles in Vue Page\nDESCRIPTION: Example showing how to override styles for Wot Design Uni components directly in a page's style file. The example demonstrates using the :deep() selector to target component styles.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<wd-button type=\"primary\">主要按钮</wd-button>\n```\n\nLANGUAGE: scss\nCODE:\n```\n/* 页面样式 */\n:deep(.wd-button) {\n  color: red !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Form Logic in TypeScript\nDESCRIPTION: This snippet contains the TypeScript logic for the complex form. It includes form model definition, validation rules, data for select options, and methods for handling form submission and file changes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/form.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useToast } from '@/uni_modules/wot-design-uni'\nimport { isArray } from '@/uni_modules/wot-design-uni/components/common/util'\nimport { FormRules } from '@/uni_modules/wot-design-uni/components/wd-form/types'\nimport { reactive, ref } from 'vue'\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst model = reactive<{\n  couponName: string\n  platform: any[]\n  promotion: string\n  threshold: string\n  price: string\n  time: number | string\n  date: null | number\n  address: string[]\n  count: number\n  content: string\n  switchVal: boolean\n  cardId: string\n  phone: string\n  read: boolean\n  fileList: Record<string, string>[]\n}>({\n  couponName: '',\n  platform: [],\n  promotion: '',\n  threshold: '',\n  price: '',\n  date: null,\n  time: '',\n  address: [],\n  count: 1,\n  content: '',\n  switchVal: true,\n  cardId: '',\n  phone: '',\n  read: false,\n  fileList: []\n})\n\nconst rules: FormRules = {\n  couponName: [\n    {\n      required: true,\n      pattern: /\\d{6}/,\n      message: '优惠券名称6个字以上',\n      validator: (value) => {\n        if (value) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject('请输入优惠券名称')\n        }\n      }\n    }\n  ],\n  content: [\n    {\n      required: true,\n      message: '请输入活动细则信息',\n      validator: (value) => {\n        if (value && value.length > 2) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject('请输入活动细则信息')\n        }\n      }\n    }\n  ],\n  threshold: [\n    {\n      required: true,\n      message: '请输入满减金额',\n      validator: (value) => {\n        if (value && model.price) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject()\n        }\n      }\n    }\n  ],\n  platform: [\n    {\n      required: true,\n      message: '请选择推广平台',\n      validator: (value) => {\n        if (value && isArray(value) && value.length) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject('请选择推广平台')\n        }\n      }\n    }\n  ],\n  promotion: [\n    {\n      required: true,\n      message: '请选择推广平台',\n      validator: (value) => {\n        if (value) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject('请选择推广平台')\n        }\n      }\n    }\n  ],\n  time: [\n    {\n      required: true,\n      message: '请选择时间',\n      validator: (value) => {\n        if (value) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject('请选择时间')\n        }\n      }\n    }\n  ],\n  date: [\n    {\n      required: true,\n      message: '请选择日期',\n      validator: (value) => {\n        if (value) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject()\n        }\n      }\n    }\n  ],\n  address: [\n    {\n      required: true,\n      message: '请选择地址',\n      validator: (value) => {\n        if (isArray(value) && value.length) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject('请选择地址')\n        }\n      }\n    }\n  ],\n  count: [\n    {\n      required: true,\n      message: '发货数量需要大于1',\n      validator: (value) => {\n        if (Number(value) > 1) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject('发货数量需要大于1')\n        }\n      }\n    }\n  ],\n  cardId: [\n    {\n      required: true,\n      message: '请输入歪比巴卜',\n      validator: (value) => {\n        if (value) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject('请输入歪比巴卜')\n        }\n      }\n    }\n  ],\n  phone: [\n    {\n      required: true,\n      message: '请输入玛卡巴卡',\n      validator: (value) => {\n        if (value) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject()\n        }\n      }\n    }\n  ],\n  fileList: [\n    {\n      required: true,\n      message: '请选择活动图片',\n      validator: (value) => {\n        if (isArray(value) && value.length) {\n          return Promise.resolve()\n        } else {\n          return Promise.reject()\n        }\n      }\n    }\n  ]\n}\n\nconst platformList = ref<any>([\n  {\n    value: '1',\n    label: '京东'\n  },\n  {\n    value: '2',\n    label: '开普勒'\n  },\n  {\n    value: '3',\n    label: '手Q'\n  },\n  {\n    value: '4',\n    label: '微信'\n  },\n  {\n    value: '5',\n    label: '1号店'\n  },\n  {\n    value: '6',\n    label: '十元街'\n  },\n  {\n    value: '7',\n    label: '京东极速版'\n  }\n])\nconst promotionlist = ref<any[]>([\n  {\n    value: '1',\n    label: '满减'\n  },\n  {\n    value: '2',\n    label: '无门槛'\n  }\n])\n\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  })\n])\nconst areaChange: ColPickerColumnChange = ({ selectedItem, resolve, finish }) => {\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\n\nconst toast = useToast()\nconst form = ref()\n\nfunction handleFileChange({ fileList }) {\n  model.fileList = fileList\n}\n\nfunction handleSubmit() {\n  form.value\n    .validate()\n    .then(({ valid, errors }) => {\n      console.log(valid)\n      console.log(errors)\n    })\n    .catch((error) => {\n      console.log(error, 'error')\n    })\n}\n\nfunction handleIconClick() {\n  toast.info('优惠券提示信息')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog with useMessage in WOT Design Uni\nDESCRIPTION: Demonstrates how to create a basic alert dialog using the useMessage hook. Shows both the component template and the function implementation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-message.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box></wd-message-box>\n<wd-button @click=\"alert\">alert</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction alert() {\n  message.alert('操作成功')\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Search Component in HTML and TypeScript\nDESCRIPTION: Demonstrates the basic implementation of the search component with v-model binding and various event handlers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/search.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-search v-model=\"value\" @focus=\"focus\" @blur=\"blur\" @search=\"search\" @clear=\"clear\" @cancel=\"cancel\" @change=\"change\" maxlength=\"10\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\n\nfunction focus() {\n  console.log('聚焦')\n}\nfunction blur() {\n  console.log('失焦')\n}\nfunction search() {\n  console.log('搜索')\n}\nfunction clear() {\n  console.log('重置')\n}\nfunction cancel() {\n  console.log('取消')\n}\nfunction change({ value }) {\n  console.log('输入', value)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FloatingPanel in HTML and JavaScript\nDESCRIPTION: Demonstrates the basic implementation of the FloatingPanel component with a list of cells. The panel's initial height is set to 100px and can be expanded to 60% of the screen height.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/floating-panel.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-floating-panel>\n  <wd-cell-group border>\n    <wd-cell v-for=\"item in data\" :key=\"item\" :title=\"item\" />\n  </wd-cell-group>\n</wd-floating-panel>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n```\n\n----------------------------------------\n\nTITLE: Form Validation Error Display Methods\nDESCRIPTION: Shows different ways to display validation errors including message, toast, and none options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/form.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-form ref=\"form\" :model=\"model\" :errorType=\"errorType\">\n  <wd-cell-group border>\n    <wd-input\n      label=\"Username\"\n      label-width=\"100px\"\n      prop=\"value1\"\n      clearable\n      v-model=\"model.value1\"\n      placeholder=\"Please enter username\"\n      :rules=\"[{ required: true, message: 'Please enter username' }]\"\n    />\n    <wd-input\n      label=\"Password\"\n      label-width=\"100px\"\n      prop=\"value2\"\n      show-password\n      clearable\n      v-model=\"model.value2\"\n      placeholder=\"Please enter password\"\n      :rules=\"[{ required: true, message: 'Please enter password' }]\"\n    />\n  </wd-cell-group>\n  <view class=\"footer\">\n    <wd-button type=\"primary\" size=\"large\" @click=\"handleSubmit\" block>Submit</wd-button>\n  </view>\n</wd-form>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { success: showSuccess } = useToast()\nconst errorType = ref<string>('message')\nconst model = reactive<{\n  value1: string\n  value2: string\n}>({ \n  value1: '',\n  value2: ''\n})\n\nconst form = ref()\n\nfunction handleSubmit() {\n  form.value\n    .validate()\n    .then(({ valid, errors }) => {\n      if (valid) {\n        showSuccess({\n          msg: 'Validation passed'\n        })\n      }\n    })\n    .catch((error) => {\n      console.log(error, 'error')\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Picker Component in Vue\nDESCRIPTION: Demonstrates the basic setup of a Picker component with a single column of options. It shows how to set the data source, handle the confirm event, and bind the selected value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"单列选项\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = ref(['选项1', '选项2', '选项3', '选项4', '选项5', '选项6', '选项7'])\nconst value = ref('选项1')\n\nfunction handleConfirm({ value }) {\n  value.value = value\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Usage with Vue and TypeScript\nDESCRIPTION: Demonstrates basic form usage with input fields for username and password, including validation rules and submit handling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/form.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<wd-form ref=\"form\" :model=\"model\">\n  <wd-cell-group border>\n    <wd-input\n      label=\"用户名\"\n      label-width=\"100px\"\n      prop=\"value1\"\n      clearable\n      v-model=\"model.value1\"\n      placeholder=\"请输入用户名\"\n      :rules=\"[{ required: true, message: '请填写用户名' }]\"\n    />\n    <wd-input\n      label=\"密码\"\n      label-width=\"100px\"\n      prop=\"value2\"\n      show-password\n      clearable\n      v-model=\"model.value2\"\n      placeholder=\"请输入密码\"\n      :rules=\"[{ required: true, message: '请填写密码' }]\"\n    />\n  </wd-cell-group>\n  <view class=\"footer\">\n    <wd-button type=\"primary\" size=\"large\" @click=\"handleSubmit\" block>提交</wd-button>\n  </view>\n</wd-form>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nconst { success: showSuccess } = useToast()\n\nconst model = reactive<{\n  value1: string\n  value2: string\n}>({\n  value1: '',\n  value2: ''\n})\n\nconst form = ref()\n\nfunction handleSubmit() {\n  form.value\n    .validate()\n    .then(({ valid, errors }) => {\n      if (valid) {\n        showSuccess({\n          msg: '校验通过'\n        })\n      }\n    })\n    .catch((error) => {\n      console.log(error, 'error')\n    })\n}\n</script>\n```\n\nLANGUAGE: css\nCODE:\n```\n.footer {\n  padding: 12px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring vite-plugin-uni-components\nDESCRIPTION: Vite configuration that sets up automatic component imports using vite-plugin-uni-components with the WotResolver for Wot Design Uni components.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from \"vite\";\nimport uni from \"@dcloudio/vite-plugin-uni\";\n\nimport Components from '@uni-helper/vite-plugin-uni-components'\nimport { WotResolver } from '@uni-helper/vite-plugin-uni-components/resolvers'\n\n\nexport default defineConfig({\n  plugins: [\n    // make sure put it before `Uni()`\n    Components({\n    resolvers: [WotResolver()]\n  }), uni()],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Countdown with useCountDown Hook in TypeScript\nDESCRIPTION: Demonstrates the basic usage of useCountDown hook to create and control a countdown timer. Shows how to initialize, start, pause, and reset the countdown while handling time changes and completion.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-count-down.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCountDown } from '@/uni_modules/wot-design-uni'\n\nconst { start, pause, reset, current } = useCountDown({\n  time: 60 * 1000,\n  onChange(current) {\n    console.log('剩余时间', current)\n  },\n  onFinish() {\n    console.log('倒计时结束')\n  }\n})\n\n// 开始倒计时\nstart()\n\n// 暂停倒计时\npause()\n\n// 重置倒计时\nreset()\n\n// 获取当前时间\nconsole.log(current.value)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Signature Component in HTML and TypeScript\nDESCRIPTION: Demonstrates the basic implementation of the signature component with export scale and background color settings. Includes TypeScript functions for handling confirm and clear events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/signature.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature @confirm=\"confirm\" @clear=\"clear\" :export-scale=\"2\" background-color=\"#ffffff\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst img = ref<Partial<SignatureResult>>({})\n\nfunction confirm(result: SignatureResult) {\n  if (result.success) {\n    uni.previewImage({\n      urls: [result.tempFilePath]\n    })\n  }\n}\n\nfunction clear() {\n  img.value = {}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Group Implementation in HTML and TypeScript\nDESCRIPTION: Basic implementation of a radio group with two radio options and a display of the current selected value. Uses v-model for two-way binding to the selected value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/radio.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<demo-block title=\"基本用法\">\n  <wd-radio-group v-model=\"value\">\n    <wd-radio :value=\"1\">单选框1</wd-radio>\n    <wd-radio :value=\"2\">单选框2</wd-radio>\n  </wd-radio-group>\n  <view>当前选中的值为:{{value}}</view>\n</demo-block>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Programmatically Controlling Swipe Action State with v-model in Uni-app\nDESCRIPTION: Explains how to control the open/closed state of the `wd-swipe-action` component programmatically using the `v-model` directive. Binds the component's state to a reactive variable (`value`) and provides buttons to change this state to 'left', 'close', or 'right'. Requires `ref` from Vue and a function to update the state.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swipe-action.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-swipe-action v-model=\"value\">\n  <template #left>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #C8C7CD;\">Action1</view>\n      <view class=\"button\" style=\"background: #FFB300;\">Action2</view>\n      <view class=\"button\" style=\"background: #E2231A;\">Action3</view>\n    </view>\n  </template>\n  <wd-cell title=\"Title Text\" value=\"Content\" />\n  <template #right>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #cdb86e;\">Action4</view>\n      <view class=\"button\" style=\"background: #42ffd1;\">Action5</view>\n      <view class=\"button\" style=\"background: #383fe2;\">Action6</view>\n    </view>\n  </template>\n</wd-swipe-action>\n\n<view class=\"button-group\">\n  <wd-button @click=\"changeState('left')\">Open Left</wd-button>\n  <wd-button @click=\"changeState('close')\">Close All</wd-button>\n  <wd-button @click=\"changeState('right')\">Open Right</wd-button>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('close')\nfunction changeState(position: string) {\n  value.value = position\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Input Implementation in Vue\nDESCRIPTION: Basic usage of the input component with v-model binding for value management.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\" placeholder=\"Please enter content\"></wd-input>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive, toRefs } from 'vue'\n\nexport default {\n  setup() {\n    const state = reactive({\n      value: ''\n    })\n\n    return {\n      ...toRefs(state)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Left Slot in HTML, TypeScript, and SCSS\nDESCRIPTION: Shows how to customize the left side of the search box using a slot, including a popover menu for search type selection. Includes HTML, TypeScript, and SCSS code.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/search.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-search v-model=\"value\">\n  <template #prefix>\n    <wd-popover mode=\"menu\" :content=\"menu\" @menuclick=\"changeSearchType\">\n      <view class=\"search-type\">\n        <text>{{ searchType }}</text>\n        <wd-icon custom-class=\"icon-arrow\" name=\"fill-arrow-down\"></wd-icon>\n      </view>\n    </wd-popover>\n  </template>\n</wd-search>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchType = ref<string>('All')\nconst value = ref<string>('')\nconst menu = ref([\n  {\n    content: 'All'\n  },\n  {\n    content: 'Order Number'\n  },\n  {\n    content: 'Refund Number'\n  }\n])\n\nfunction changeSearchType({ item, index }) {\n  searchType.value = item.content\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n.search-type {\n  position: relative;\n  height: 30px;\n  line-height: 30px;\n  padding: 0 8px 0 16px;\n}\n.search-type::after {\n  position: absolute;\n  content: '';\n  width: 1px;\n  right: 0;\n  top: 5px;\n  bottom: 5px;\n  background: rgba(0, 0, 0, 0.25);\n}\n.search-type {\n  :deep(.icon-arrow) {\n    display: inline-block;\n    font-size: 20px;\n    vertical-align: middle;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Swiper Implementation in HTML and TypeScript\nDESCRIPTION: Shows basic setup of the Swiper component with autoplay enabled, current slide binding, and event handlers for click and change events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swiper.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-swiper :list=\"swiperList\" autoplay v-model:current=\"current\" @click=\"handleClick\" @change=\"onChange\"></wd-swiper>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst current = ref<number>(0)\n\nconst swiperList = ref([\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/redpanda.jpg',\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/capybara.jpg',\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/panda.jpg',\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/moon.jpg',\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/meng.jpg'\n])\nfunction handleClick(e) {\n  console.log(e)\n}\nfunction onChange(e) {\n  console.log(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Implementation with Click Outside Handling\nDESCRIPTION: Shows basic implementation of Popover component with click outside handling using useQueue hook. Includes both template and script setup.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/popover.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<view @click=\"closeOutside\">\n  <wd-popover content=\"This is a message.\" @change=\"handleChange\">\n    <wd-button>Click to show</wd-button>\n  </wd-popover>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueue } from '@/uni_modules/wot-design-uni'\n\nconst { closeOutside } = useQueue()\nfunction handleChange({ show }) {\n  console.log(show)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting in Table Component\nDESCRIPTION: Demonstrates how to implement sorting functionality by adding the 'sortable' property to columns and handling the sort-method event to perform custom sorting logic.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/table.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" @sort-method=\"handleSort\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"Name\"></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"School\" sortable></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"Major\"></wd-table-col>\n</wd-table>\n```\n\nLANGUAGE: ts\nCODE:\n```\nfunction handleSort(e) {\n  console.log('This is the sorting event')\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Control CountDown\nDESCRIPTION: Implementation of countdown with manual control methods for start, pause, and reset functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/count-down.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-count-down ref=\"countDown\" :time=\"3000\" millisecond :auto-start=\"false\" format=\"ss:SSS\" @finish=\"onFinish\"></wd-count-down>\n<wd-grid clickable border>\n  <wd-grid-item text=\"Start\" icon=\"play-circle-stroke\" @itemclick=\"start\" />\n  <wd-grid-item text=\"Pause\" icon=\"pause-circle\" @itemclick=\"pause\" />\n  <wd-grid-item text=\"Reset\" icon=\"refresh\" @itemclick=\"reset\" />\n</wd-grid>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\n\nconst countDown = ref<any>(null)\n\nconst start = () => {\n  countDown.value.start()\n}\nconst pause = () => {\n  countDown.value.pause()\n}\nconst reset = () => {\n  countDown.value.reset()\n}\nconst onFinish = () => showToast('Countdown ended')\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Implementation in Vue\nDESCRIPTION: Basic usage of the pagination component using v-model to bind current page number. Demonstrates the basic setup and change event handling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-pagination v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Styled CountDown\nDESCRIPTION: Implementation of countdown with custom styling using slots and CSS.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/count-down.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-count-down :time=\"time\">\n  <template #default=\"{ current }\">\n    <span class=\"custom-count-down\">{{ current.hours }}</span>\n    <span class=\"custom-count-down-colon\">:</span>\n    <span class=\"custom-count-down\">{{ current.minutes }}</span>\n    <span class=\"custom-count-down-colon\">:</span>\n    <span class=\"custom-count-down\">{{ current.seconds }}</span>\n  </template>\n</wd-count-down>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst time = ref<number>(30 * 60 * 60 * 1000)\n```\n\nLANGUAGE: css\nCODE:\n```\n.custom-count-down {\n  display: inline-block;\n  width: 22px;\n  color: #fff;\n  font-size: 12px;\n  text-align: center;\n  background-color: #f0883a;\n  border-radius: 2px;\n}\n\n.custom-count-down-colon {\n  display: inline-block;\n  margin: 0 4px;\n  color: #f0883a;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Component Styles in Pages\nDESCRIPTION: Example of how to override Wot Design Uni component styles directly in a page's style file using the :deep() selector.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/common-problems.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<wd-button type=\"primary\">Primary Button</wd-button>\n```\n\nLANGUAGE: scss\nCODE:\n```\n/* Page style */\n:deep(.wd-button) {\n  color: red !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Reinitializing Components Inside Popups for WeChat Mini Program\nDESCRIPTION: Example demonstrating how to reinitialize components like Slider when used inside Popup components in WeChat Mini Programs to avoid rendering issues.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup v-model=\"show\" position=\"bottom\" closable custom-style=\"height: 200px;\" @after-enter=\"handleOpened\">\n<wd-slider v-model=\"value\" ref=\"slider\"></wd-slider>\n</wd-popup>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst slider = ref()\n\nfunction handleOpened() {\n  slider.value!.initSlider()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring easycom for Automatic Component Import\nDESCRIPTION: JSON configuration for pages.json that enables automatic component import using easycom specification, eliminating the need to manually import components.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n// pages.json\n{\n \"easycom\": {\n  \"autoscan\": true,\n  \"custom\": {\n    \"^wd-(.*)\": \"wot-design-uni/components/wd-$1/wd-$1.vue\"\n  }\n },\n \n // This is the existing content\n \"pages\": [\n  // ......\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic IndexBar with Search Functionality\nDESCRIPTION: Shows how to implement a searchable IndexBar component with dynamic data updates and filtering capabilities.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/index-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <wd-search hide-cancel placeholder=\"我要去哪里？\" v-model=\"keyword\" @search=\"handleSearch\" @clear=\"handleClear\" />\n    <view class=\"wraper\">\n      <wd-index-bar sticky v-if=\"showList.length\">\n        <view v-for=\"item in showList\" :key=\"item.index\">\n          <wd-index-anchor :index=\"item.index\" />\n          <wd-cell border clickable v-for=\"city in item.data\" :key=\"city\" :title=\"city\" @click=\"handleClick(item.index, city)\"></wd-cell>\n        </view>\n      </wd-index-bar>\n    </view>\n</template>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useToast } from '@/uni_modules/wot-design-uni'\nimport { nextTick, onMounted, ref } from 'vue'\nconst { show: showToast } = useToast()\n\nonMounted(() => {\n  handleSearch()\n})\n\nconst keyword = ref('')\nconst showList = ref<any>([])\n\nconst indexList = [\n  {\n    index: 'A',\n    data: ['阿坝', '阿拉善', '阿里', '安康', '安庆', '鞍山', '安顺', '安阳', '澳门']\n  },\n  // ... additional data\n]\n\nfunction handleClick(index: string, city: string) {\n  showToast(`当前点击项：${index}，城市：${city}`)\n}\n\nfunction handleSearch() {\n  showList.value = []\n  nextTick(() => {\n    if (keyword.value) {\n      showList.value = indexList.filter((item) => {\n        return item.data.some((city) => {\n          return city.includes(keyword.value)\n        })\n      })\n    } else {\n      showList.value = indexList\n    }\n  })\n}\n\nfunction handleClear() {\n  keyword.value = ''\n  handleSearch()\n}\n</script>\n```\n\nLANGUAGE: css\nCODE:\n```\n.wraper {\n  height: calc(100vh - var(--window-top));\n  height: calc(100vh - var(--window-top) - constant(safe-area-inset-bottom));\n  height: calc(100vh - var(--window-top) - env(safe-area-inset-bottom));\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Collapse Implementation\nDESCRIPTION: Full implementation of async collapse functionality with data loading and validation\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/collapse.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-collapse v-model=\"value\">\n  <wd-collapse-item v-for=\"(item, index) in itemList\" :before-expend=\"beforeExpend\" :key=\"index\" :title=\"item.title\" :name=\"item.name\">\n    {{ item.body }}\n  </wd-collapse-item>\n</wd-collapse>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nconst toast = useToast()\nconst value = ref<string[]>(['item1'])\n\nconst itemList = ref<Record<string, any>[]>([\n  {\n    title: 'Label 1',\n    name: 'item1',\n    body: 'If the order is in a paused state, go to the \"My Orders\" page, find the order you want to cancel, click the \"Cancel Order\" button; select the reason for cancellation, then click \"Next\" to submit the application.'\n  },\n  {\n    title: 'Label 1',\n    name: 'item2',\n    body: 'Generally, buyers can only apply for a refund to the merchant. After the merchant confirms that a refund can be made, they can initiate a refund application to WeChat Pay through the interface or merchant platform.'\n  },\n  {\n    title: 'Label 1',\n    name: 'item3',\n    body: 'Upload photos of products with quality issues or order screenshots to the WeChat public account (follow Lianhua Huashang public account on WeChat), our staff will help you process it as soon as possible.'\n  },\n  {\n    title: 'Label 1',\n    name: 'item4',\n    body: 'Seven-day no-reason return and exchange policy, all products can be returned or exchanged within 7 days (based on courier receipt) if they do not affect second-hand sales.'\n  },\n  {\n    title: 'Label 1',\n    name: 'item5',\n    body: 'Q1: Coupon usage details? Details page [My] - [My Benefits] - [Coupon Rules Description].'\n  }\n])\n\nfunction beforeExpend(name) {\n  const index = itemList.value.findIndex((item) => {\n    return item.name === name\n  })\n  if (index > -1) {\n    itemList.value[index].body =\n      'Q1: Seven-day no-reason return and exchange policy, all products can be returned or exchanged within 7 days (based on courier receipt) if they do not affect second-hand sales. Seven-day no-reason return and exchange policy, all products can be returned or exchanged within 7 days (based on courier receipt) if they do not affect second-hand sales. Seven-day no-reason return and exchange policy, all products can be returned or exchanged within 7 days (based on courier receipt) if they do not affect second-hand sales. Seven-day no-reason return and exchange policy, all products can be returned or exchanged within 7 days (based on courier receipt) if they do not affect second-hand sales. Seven-day no-reason return and exchange policy, all products can be returned or exchanged within 7 days (based on courier receipt) if they do not affect second-hand sales. Seven-day no-reason return and exchange policy, all products can be returned or exchanged within 7 days (based on courier receipt) if they do not affect second-hand sales.'\n  }\n\n  return new Promise((reslove, reject) => {\n    toast.loading('Loading')\n    setTimeout(() => {\n      toast.close()\n      reslove(true)\n    }, 500)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Types Implementation\nDESCRIPTION: Demonstrates the basic button types including primary, success, info, warning and error variants.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-button>Primary Button</wd-button>\n<wd-button type=\"success\">Success Button</wd-button>\n<wd-button type=\"info\">Info Button</wd-button>\n<wd-button type=\"warning\">Warning Button</wd-button>\n<wd-button type=\"error\">Danger Button</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Usage with HTML and TypeScript\nDESCRIPTION: Demonstrates the basic implementation of a Tooltip component with top placement, including the necessary setup to close the tooltip when clicking outside using the useQueue hook.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<view @click=\"closeOutside\">\n  <wd-tooltip @change=\"handleChange\" placement=\"top\" content=\"top prompt text\">\n    <wd-button>top</wd-button>\n  </wd-tooltip>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueue } from '@/uni_modules/wot-design-uni'\n\nconst { closeOutside } = useQueue()\n\nconst show = ref<boolean>(false)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Layout with 24-column Grid System in HTML\nDESCRIPTION: Demonstrates the basic usage of the Layout component with various column spans using wd-row and wd-col elements. This snippet shows how to create different column layouts within the 24-column grid system.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/layout.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-row>\n  <wd-col :span=\"24\"><view class=\"bg-dark1\">span: 24</view></wd-col>\n</wd-row>\n<wd-row>\n  <wd-col :span=\"12\"><view class=\"bg-dark\">span: 12</view></wd-col>\n  <wd-col :span=\"12\"><view class=\"bg-light\">span: 12</view></wd-col>\n</wd-row>\n<wd-row>\n  <wd-col :span=\"8\"><view class=\"bg-dark\">span: 8</view></wd-col>\n  <wd-col :span=\"8\"><view class=\"bg-light\">span: 8</view></wd-col>\n  <wd-col :span=\"8\"><view class=\"bg-dark\">span: 8</view></wd-col>\n</wd-row>\n<wd-row>\n  <wd-col :span=\"6\"><view class=\"bg-dark\">span: 6</view></wd-col>\n  <wd-col :span=\"6\"><view class=\"bg-light\">span: 6</view></wd-col>\n  <wd-col :span=\"6\"><view class=\"bg-dark\">span: 6</view></wd-col>\n  <wd-col :span=\"6\"><view class=\"bg-light\">span: 6</view></wd-col>\n</wd-row>\n```\n\n----------------------------------------\n\nTITLE: Image Cropper with Upload Integration\nDESCRIPTION: Implementation of image cropper with automatic upload functionality using useUpload hook. Includes progress tracking and error handling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/img-cropper.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  @confirm=\"handleConfirmUpload\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { useUpload, useToast } from '@/uni_modules/wot-design-uni'\nimport { type UploadFileItem } from '@/uni_modules/wot-design-uni/components/wd-upload/types'\n\nconst { startUpload, UPLOAD_STATUS } = useUpload()\nconst { show: showToast } = useToast()\n\nconst show = ref(false)\nconst src = ref('')\nconst imgSrc = ref('')\n\nasync function handleConfirmUpload(event) {\n  const { tempFilePath } = event\n  \n  // Build upload file object\n  const file: UploadFileItem = {\n    url: tempFilePath,\n    status: UPLOAD_STATUS.PENDING,\n    percent: 0,\n    uid: new Date().getTime()\n  }\n\n  try {\n    // Start upload\n    await startUpload(file, {\n      action: 'https://your-upload-url',\n      onSuccess() {\n        imgSrc.value = tempFilePath\n        showToast({\n          msg: 'Upload successful'\n        })\n      },\n      onError() {\n        showToast({\n          msg: 'Upload failed'\n        })\n      },\n      onProgress(res) {\n        console.log('Upload progress:', res.progress)\n      }\n    })\n  } catch (error) {\n    console.error('Upload failed:', error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Picker Component in Vue\nDESCRIPTION: Demonstrates how to use the Picker component with a single column of options. It shows setting up the data source, handling the confirm event, and binding the selected value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"Single Column\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = ref(['Option 1', 'Option 2', 'Option 3', 'Option 4', 'Option 5', 'Option 6', 'Option 7'])\nconst value = ref('Option 1')\n\nfunction handleConfirm({ value }) {\n  value.value = value\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Menu Options with Flex Layout in Vue 3\nDESCRIPTION: Demonstrates how to create custom filter display using flex layout, combining DropMenu with SortButton for a customized filtering interface.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/drop-menu.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<view style=\"display: flex; background: #fff; text-align: center;\">\n  <wd-drop-menu style=\"flex: 1; min-width: 0;\">\n    <wd-drop-menu-item v-model=\"value1\" :options=\"option\" @change=\"handleChange1\" />\n  </wd-drop-menu>\n  <view style=\"flex: 1;\">\n    <wd-sort-button v-model=\"value2\" title=\"Listing Time\" @change=\"handleChange2\" />\n  </view>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Allowing Null Values and Setting Placeholder in InputNumber\nDESCRIPTION: Shows how to allow null values and set a placeholder for the InputNumber component using allow-null and placeholder attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" allow-null placeholder=\"不限\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number|string>('')\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: 基本用法的DatetimePicker示例\nDESCRIPTION: 展示DatetimePicker的基本用法，使用v-model绑定值并添加确认事件处理。绑定值为时间戳类型。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"日期选择\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Signature Component in Popup\nDESCRIPTION: Shows how to use the signature component within a popup, including initialization in the after-enter event. Includes HTML, TypeScript, and SCSS for complete implementation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/signature.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"primary\" @click=\"show = true\">Open Signature Pad</wd-button>\n\n<wd-popup \n  v-model=\"show\" \n  closable\n  safe-area-inset-bottom\n  position=\"bottom\"\n  custom-style=\"padding: 48px 20px 20px 20px; border-radius: 16px 16px 0 0;\"\n  @after-enter=\"signatureRef?.init()\"\n>\n  <wd-signature \n    ref=\"signatureRef\"\n    :height=\"300\"\n    enable-history\n    pressure\n    background-color=\"#f5f5f5\"\n    @confirm=\"handleConfirm\" \n  />\n</wd-popup>\n\n<wd-img v-if=\"img.tempFilePath\" mode=\"widthFix\" width=\"100%\" :src=\"img.tempFilePath\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport type { SignatureInstance, SignatureResult } from '@/uni_modules/wot-design-uni/components/wd-signature/types'\n\nconst show = ref(false)\nconst img = ref<Partial<SignatureResult>>({})\nconst signatureRef = ref<SignatureInstance>()\n\nfunction handleConfirm(result: SignatureResult) {\n  show.value = false\n  if (result.success) {\n    uni.previewImage({\n      urls: [result.tempFilePath]\n    })\n  }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n.popup-footer {\n  margin-top: 16px;\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n}\n```\n\n----------------------------------------\n\nTITLE: Password Input with Error Handling\nDESCRIPTION: Implementation showing how to display info and error messages, with validation logic for incorrect passwords.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/password-input.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- 密码输入框 -->\n<wd-password-input v-model=\"value\" info=\"密码为 6 位数字\" :error-info=\"errorInfo\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n<!-- 数字键盘 -->\n<wd-number-keyboard v-model=\"value\" :show=\"showKeyboard\" :maxlength=\"6\" @blur=\"showKeyboard = false\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref, watch } from 'vue'\n\nconst value = ref('123')\nconst errorInfo = ref('')\nconst showKeyboard = ref(true)\n\nwatch(value, (newVal) => {\n  if (newVal.length === 6 && newVal !== '123456') {\n    errorInfo.value = '密码错误'\n  } else {\n    errorInfo.value = ''\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirm Dialog with useMessage in WOT Design Uni\nDESCRIPTION: Shows how to implement a confirmation dialog with promise-based response handling for confirm and cancel actions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-message.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"confirm\">confirm</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction confirm() {\n  message\n    .confirm({\n      msg: '提示文案',\n      title: '标题'\n    })\n    .then(() => {\n      console.log('点击了确定按钮')\n    })\n    .catch(() => {\n      console.log('点击了取消按钮')\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Overlay Usage in HTML\nDESCRIPTION: Shows how to implement a basic overlay with show/hide functionality using the wd-overlay component. The overlay is controlled by a button and closes when clicked.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/overlay.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"primary\" @click=\"show = true\">显示遮罩层</wd-button>\n<wd-overlay :show=\"show\" @click=\"show = false\" />\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Value Change in InputNumber Component\nDESCRIPTION: Demonstrates how to implement asynchronous value changes in the InputNumber component using the before-change attribute for validation and interception.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" :before-change=\"beforeChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { useToast } from '@/uni_modules/wot-design-uni'\nimport type { InputNumberBeforeChange } from '@/uni_modules/wot-design-uni/components/wd-input-number/types'\nconst { loading, close } = useToast()\n\nconst value = ref<number>(1)\n \nconst beforeChange: InputNumberBeforeChange = (value) => {\n  loading({ msg: `正在更新到${value}...` })\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      close()\n      resolve(true)\n    }, 500)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Display Formatting for Calendar Component\nDESCRIPTION: Uses display-format and inner-display-format functions to customize how selected dates are displayed both in the form and within the calendar panel for range selections.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar\n  label=\"自定义展示\"\n  type=\"daterange\"\n  v-model=\"value\"\n  :display-format=\"displayFormat\"\n  :inner-display-format=\"innerDisplayFormat\"\n  @confirm=\"handleConfirm\"\n/>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dayjs } from '@/uni_modules/wot-design-uni'\n\nconst value = ref<string>('')\n\nconst displayFormat = (value) => {\n  return dayjs(value[0]).format('YY年MM月DD日') + ' - ' + dayjs(value[1]).format('YY年MM月DD日')\n}\n\nconst innerDisplayFormat = (value, rangeType) => {\n  if (!value) {\n    return rangeType === 'start' ? '活动开始时间' : '活动结束时间'\n  }\n\n  return dayjs(value).format('YY年MM月DD日')\n}\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Steps Progress Bar - Wot Design - HTML\nDESCRIPTION: Demonstrates the basic usage of the wd-steps and wd-step components in a Vue template, where the active prop controls which step is highlighted. Each wd-step acts as a step segment. Requires importing and registering wd-steps and wd-step in your Vue project. The active property is expected to be a number corresponding to the current progress index.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/steps.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\\\"active\\\">\\n  <wd-step />\\n  <wd-step />\\n  <wd-step />\\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Custom Internal Format in DatetimePicker\nDESCRIPTION: Shows how to customize the internal format of date/time components using a formatter function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"Internal Format\" :formatter=\"formatter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\nconst formatter = (type, value) => {\n  switch (type) {\n    case 'year':\n      return value + ' Year'\n    case 'month':\n      return value + ' Month'\n    case 'date':\n      return value + ' Day'\n    case 'hour':\n      return value + ' Hour'\n    case 'minute':\n      return value + ' Minute'\n    default:\n      return value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic NoticeBar Implementation in HTML\nDESCRIPTION: Shows the basic implementation of the NoticeBar component with text content and a left icon (prefix).\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar text=\"这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息\" prefix=\"warn-bold\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Sidebar Switching in TypeScript\nDESCRIPTION: Demonstrates the implementation of the beforeChange function for asynchronous sidebar switching with loading indication.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nimport type { SidebarBeforeChange } from '@/uni_modules/wot-design-uni/components/wd-sidebar/types'\nimport { ref } from 'vue'\nconst { loading: showLoading, close: closeLoading } = useToast()\n\nconst toast = useToast()\nconst active = ref<number>(1)\n\nconst beforeChange: SidebarBeforeChange = ({ value, resolve }) => {\n  showLoading('Switching')\n  setTimeout(() => {\n    closeLoading()\n    resolve(true)\n  }, 2000)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTime Selection with Custom Time Filtering\nDESCRIPTION: Advanced datetime selection with options to hide seconds and customize time filtering. The timeFilter function filters available minute options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"datetime\" v-model=\"value\" @confirm=\"handleConfirm\" hide-second :time-filter=\"timeFilter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\n\nfunction timeFilter({ type, values }) {\n  if (type === 'minute') {\n    // 只展示 0,10,20,30,40,50 分钟选项\n    return values.filter((item) => {\n      return item % 10 === 0\n    })\n  }\n  return values\n}\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Menu Content in DropMenu with Vue 3\nDESCRIPTION: Shows how to create a custom menu content using the default slot of DropMenuItem. It includes a slider, cells, and a button. The close method is used to manually control the menu's closure.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/drop-menu.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-drop-menu>\n  <wd-drop-menu-item v-model=\"value\" :options=\"option\" @change=\"handleChange\" />\n  <wd-drop-menu-item title=\"Filter\" ref=\"dropMenu\" @opened=\"handleOpened\">\n    <view>\n      <wd-slider v-model=\"sliderValue\" ref=\"slider\" />\n      <wd-cell title=\"Title Text\" value=\"Content\" />\n      <wd-cell title=\"Title Text\" label=\"Description\" value=\"Content\" />\n      <wd-button block size=\"large\" suck @click=\"confirm\">Primary Button</wd-button>\n    </view>\n  </wd-drop-menu-item>\n</wd-drop-menu>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst dropMenu = ref()\nconst slider = ref<SliderInstance>() // slider 1.2.25 supported\n\nconst value = ref<number>(0)\nconst sliderValue = ref<number>(30)\nconst option = ref<Record<string, any>[]>([\n  { label: 'All Products', value: 0 },\n  { label: 'New Products', value: 1 },\n  { label: 'Promotional Products', value: 2 }\n])\nfunction handleChange({ value }) {\n  console.log(value)\n}\n\nfunction confirm() {\n  dropMenu.value.close()\n}\n\nfunction handleOpened() {\n  slider.value?.initSlider()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ActionSheet Options in TypeScript\nDESCRIPTION: TypeScript implementation for ActionSheet's basic functionality, including state management with ref, defining action options, and handling events like showing the action sheet, closing it, and responding to item selection.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst show = ref<boolean>(false)\nconst actions = ref([\n  {\n    name: '选项1'\n  },\n  {\n    name: '选项2'\n  },\n  {\n    name: '选项3',\n    subname: '描述信息'\n  }\n])\n\nfunction showActions() {\n  show.value = true\n}\n\nfunction close() {\n  show.value = false\n}\n\nconst toast = useToast()\n\nfunction select({ item, index }) {\n  toast.show(`当前选中项: ${item.title}, 下标: ${index}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scrolling with Loadmore Component\nDESCRIPTION: A complete example showing how to implement infinite scrolling by combining the loadmore component with onReachBottom event. Includes HTML structure, TypeScript logic, and SCSS styling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/loadmore.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"container\">\n  <view v-for=\"index in num\" :key=\"index\" class=\"list-item\">\n    <image src=\"https://img10.360buyimg.com/jmadvertisement/jfs/t1/70325/36/14954/36690/5dcd3e3bEee5006e0/aed1ccf6d5ffc764.png\" />\n    <view class=\"right\">这是一条测试{{ index + 1 }}</view>\n  </view>\n  <wd-loadmore :state=\"state\" @reload=\"loadmore\" />\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onLoad, onReachBottom } from '@dcloudio/uni-app'\n\n\nconst state = ref<string>('loading')\nconst num = ref<number>(0)\nconst max = ref<number>(60)\n\nonReachBottom(() => {\n  if (num.value === 45) {\n    state.value = 'error'\n  } else if (num.value < max.value) {\n    loadmore()\n  } else if (num.value === max.value) {\n    state.value = 'finished'\n  }\n})\n\nonLoad(() => {\n  loadmore()\n})\n\nfunction loadmore() {\n  setTimeout(() => {\n    num.value = num.value + 15\n    state.value = 'loading'\n  }, 200)\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n.list-item {\n  position: relative;\n  display: flex;\n  padding: 10px 15px;\n  background: #fff;\n  color: #464646;\n}\n\n.list-item:after {\n  position: absolute;\n  display: block;\n  content: '';\n  height: 1px;\n  left: 0;\n  width: 100%;\n  bottom: 0;\n  background: #eee;\n  transform: scaleY(0.5);\n}\nimage {\n  display: block;\n  width: 120px;\n  height: 78px;\n  margin-right: 15px;\n}\n.right {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Form Validation Rules\nDESCRIPTION: Implements various validation rule types including regular expressions, function validation, custom error messages, and async validation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/form.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-form ref=\"form2\" :model=\"model\">\n  <wd-cell-group border>\n    <wd-input\n      label=\"Validate\"\n      label-width=\"100px\"\n      prop=\"value1\"\n      clearable\n      v-model=\"model.value1\"\n      placeholder=\"Regular Expression Validation\"\n      :rules=\"[{ required: false, pattern: /\\d{6}/, message: 'Please enter 6 digits' }]\"\n    />\n    <wd-input\n      label=\"Validate\"\n      label-width=\"100px\"\n      prop=\"value2\"\n      clearable\n      v-model=\"model.value2\"\n      placeholder=\"Function Validation\"\n      :rules=\"[\n              {\n                required: false,\n                validator: validatorMessage,\n                message: 'Please enter correct value'\n              }\n            ]\"\n    />\n    <wd-input\n      label=\"Validate\"\n      label-width=\"100px\"\n      prop=\"value3\"\n      clearable\n      v-model=\"model.value3\"\n      placeholder=\"Function Return Error Message\"\n      :rules=\"[\n              {\n                required: false,\n                validator: validatorReturnMessage\n              }\n            ]\"\n    />\n    <wd-input\n      label=\"Validate\"\n      label-width=\"100px\"\n      prop=\"value4\"\n      clearable\n      v-model=\"model.value4\"\n      placeholder=\"Async Function Validation\"\n      :rules=\"[\n              {\n                required: false,\n                validator: validatorAsync,\n                message: 'Please enter correct value'\n              }\n            ]\"\n    />\n  </wd-cell-group>\n  <view class=\"footer\">\n    <wd-button type=\"primary\" size=\"large\" @click=\"handleSubmit2\" block>Submit</wd-button>\n  </view>\n</wd-form>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst form2 = ref()\nconst model = reactive<{\n  value1: string\n  value2: string\n  value3: string\n  value4: string\n}>({ \n  value1: '',\n  value2: '',\n  value3: '',\n  value4: ''\n})\n\nfunction validatorMessage(value: string) {\n  return value === 'maka'\n}\n\nfunction validatorReturnMessage(value: string) {\n  if (value === 'maka') {\n    return true\n  }\n  return 'Please enter maka'\n}\n\nfunction validatorAsync(value: string) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(value === 'maka')\n    }, 1000)\n  })\n}\n\nfunction handleSubmit2() {\n  form2.value\n    .validate()\n    .then(({ valid, errors }) => {\n      if (valid) {\n        showSuccess({\n          msg: 'Validation passed'\n        })\n      }\n    })\n    .catch((error) => {\n      console.log(error, 'error')\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shortcut Options for Calendar Component\nDESCRIPTION: Configures shortcut options for quick date selection using the shortcuts property and onShortcutsClick handler to calculate date ranges based on selected shortcuts.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar\n  label=\"快捷选项\"\n  :shortcuts=\"shortcuts \"\n  :on-shortcuts-click=\"onShortcutsClick\"\n  type=\"daterange\"\n  v-model=\"value\"\n  @confirm=\"handleConfirm\"\n/>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst shortcuts = ref<Record<string, any>[]>([\n  {\n    text: '近7天',\n    id: 7\n  },\n  {\n    text: '近15天',\n    id: 15\n  },\n  {\n    text: '近30天',\n    id: 30\n  }\n])\nconst value = ref<string>('')\n\nconst onShortcutsClick = ({ item }) => {\n  const dayDiff = item.id\n  const endDate = Date.now() - 24 * 60 * 60 * 1000\n  const startDate = endDate - dayDiff * 24 * 60 * 60 * 1000\n\n  return [startDate, endDate]\n}\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Sidebar for Page Switching Implementation in HTML, TypeScript and CSS\nDESCRIPTION: A comprehensive example showing how to use the Sidebar component to switch between different pages with a sliding animation. Each page can be scrolled independently.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"wraper\">\n  <wd-sidebar v-model=\"active\" @change=\"handleChange\">\n    <wd-sidebar-item\n      v-for=\"(item, index) in categories\"\n      :key=\"index\"\n      :value=\"index\"\n      :label=\"item.label\"\n      :icon=\"item.icon\"\n      :disabled=\"item.disabled\"\n    />\n  </wd-sidebar>\n  <view class=\"content\" :style=\"`transform: translateY(-${active * 100}%)`\">\n    <scroll-view\n      v-for=\"(item, index) in categories\"\n      :key=\"index\"\n      class=\"category\"\n      scroll-y\n      scroll-with-animation\n      :show-scrollbar=\"false\"\n      :scroll-top=\"scrollTop\"\n      :throttle=\"false\"\n    >\n      <wd-cell-group :title=\"item.title\" border>\n        <wd-cell v-for=\"(cell, index) in item.items\" :key=\"index\" :title=\"cell.title\" :label=\"cell.label\">\n          <wd-icon name=\"github-filled\" size=\"24px\"></wd-icon>\n        </wd-cell>\n      </wd-cell-group>\n    </scroll-view>\n  </view>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { ref, nextTick } from 'vue'\n\nconst active = ref<number>(1)\nconst scrollTop = ref<number>(0)\nconst subCategories = new Array(24).fill({ title: '标题文字', label: '这是描述这是描述' }, 0, 24)\nconst categories = ref([\n  {\n    label: '分类一',\n    title: '标题一',\n    icon: 'thumb-up',\n    items: subCategories,\n    disabled: false\n  },\n  {\n    label: '分类二',\n    title: '标题二',\n    icon: 'thumb-up',\n    items: subCategories,\n    disabled: false\n  },\n  {\n    label: '分类三',\n    title: '标题三',\n    icon: 'thumb-up',\n    items: subCategories.slice(0, 18),\n    disabled: false\n  },\n  {\n    label: '分类四',\n    title: '标题四',\n    icon: 'thumb-up',\n    items: subCategories.slice(0, 21),\n    disabled: false\n  },\n  {\n    label: '分类五',\n    title: '标题五',\n    icon: 'thumb-up',\n    items: subCategories,\n    disabled: false\n  },\n  {\n    label: '分类六',\n    title: '标题六',\n    icon: 'thumb-up',\n    items: subCategories.slice(0, 18),\n    disabled: false\n  },\n  {\n    label: '分类七',\n    title: '标题七',\n    icon: 'thumb-up',\n    items: subCategories,\n    disabled: true\n  }\n])\n\nfunction handleChange({ value }) {\n  active.value = value\n  scrollTop.value = -1\n  nextTick(() => {\n    scrollTop.value = 0\n  })\n}\n</script>\n```\n\nLANGUAGE: css\nCODE:\n```\n.wraper {\n  display: flex;\n  height: calc(100vh - var(--window-top));\n  height: calc(100vh - var(--window-top) - constant(safe-area-inset-bottom));\n  height: calc(100vh - var(--window-top) - env(safe-area-inset-bottom));\n  overflow: hidden;\n}\n.content {\n  flex: 1;\n  background: #fff;\n  transition: transform 0.3s ease;\n}\n.category {\n  box-sizing: border-box;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useUpload Hook for File Upload in TypeScript\nDESCRIPTION: Demonstrates how to use the useUpload hook to choose files, start uploads, and handle upload events. It shows file selection, upload initiation with progress tracking, and how to abort an upload.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-upload.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUpload } from '@/uni_modules/wot-design-uni'\n\nconst { startUpload, abort, chooseFile, UPLOAD_STATUS } = useUpload()\n\n// 选择文件\nconst files = await chooseFile({\n  accept: 'image',\n  multiple: true,\n  maxCount: 9\n})\n\n// 开始上传\nconst file = {\n  url: 'file://temp/image.png',\n  status: UPLOAD_STATUS.PENDING,\n  percent: 0\n}\n\nstartUpload(file, {\n  action: 'https://upload-url',\n  onSuccess(res) {\n    console.log('上传成功', res)\n  },\n  onError(err) {\n    console.log('上传失败', err) \n  },\n  onProgress(progress) {\n    console.log('上传进度', progress)\n  }\n})\n\n// 中断上传\nabort()\n```\n\n----------------------------------------\n\nTITLE: Implementing Prompt Dialog with useMessage in WOT Design Uni\nDESCRIPTION: Example of creating a Prompt dialog using the useMessage utility. Prompt dialogs display an input box and can perform input validation such as email validation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/use-message.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"prompt\">prompt</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction prompt() {\n  message\n    .prompt({\n      title: 'Please enter email',\n      inputPattern: /.+@.+\\..+/i,\n      inputError: 'Invalid email format'\n    })\n    .then((resp) => {\n      console.log(resp)\n    })\n    .catch((error) => {\n      console.log(error)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tabbar Implementation in Vue\nDESCRIPTION: Shows the basic implementation of a Tabbar component with v-model binding to control the selected tab using index values.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabbar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\">\n  <wd-tabbar-item title=\"Home\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"Category\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"My\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog with Title\nDESCRIPTION: Demonstrates alert dialog implementation with a custom title and message\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/message-box.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"alert\">alert</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction alert() {\n  message.alert({\n    msg: '提示文案',\n    title: '标题'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Implementation in Vue\nDESCRIPTION: Basic radio button group implementation using v-model for value binding.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/radio.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<demo-block title=\"Basic Usage\">\n  <wd-radio-group v-model=\"value\">\n    <wd-radio :value=\"1\">Radio 1</wd-radio>\n    <wd-radio :value=\"2\">Radio 2</wd-radio>\n  </wd-radio-group>\n  <view>Current selected value: {{value}}</view>\n</demo-block>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Rules in Vue Form\nDESCRIPTION: Shows how to implement custom validation rules including regex, function-based, and asynchronous validators.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/form.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<wd-form ref=\"form2\" :model=\"model\">\n  <wd-cell-group border>\n    <wd-input\n      label=\"校验\"\n      label-width=\"100px\"\n      prop=\"value1\"\n      clearable\n      v-model=\"model.value1\"\n      placeholder=\"正则校验\"\n      :rules=\"[{ required: false, pattern: /\\d{6}/, message: '请输入6位字符' }]\"\n    />\n    <wd-input\n      label=\"校验\"\n      label-width=\"100px\"\n      prop=\"value2\"\n      clearable\n      v-model=\"model.value2\"\n      placeholder=\"函数校验\"\n      :rules=\"[\n              {\n                required: false,\n                validator: validatorMessage,\n                message: '请输入正确的玛卡巴卡'\n              }\n            ]\"\n    />\n    <wd-input\n      label=\"校验\"\n      label-width=\"100px\"\n      prop=\"value3\"\n      clearable\n      v-model=\"model.value3\"\n      placeholder=\"校验函数返回错误提示\"\n      :rules=\"[\n              {\n                required: false,\n                message: '请输入内容',\n                validator: validator\n              }\n            ]\"\n    />\n    <wd-input\n      label=\"校验\"\n      label-width=\"100px\"\n      prop=\"value4\"\n      clearable\n      v-model=\"model.value4\"\n      placeholder=\"异步函数校验\"\n      :rules=\"[{ required: false, validator: asyncValidator, message: '请输入1234' }]\"\n    />\n  </wd-cell-group>\n  <view class=\"footer\">\n    <wd-button type=\"primary\" size=\"large\" @click=\"handleSubmit\" block>提交</wd-button>\n  </view>\n</wd-form>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nconst model = reactive<{\n  value1: string\n  value2: string\n  value3: string\n  value4: string\n}>({\n  value1: '',\n  value2: '',\n  value3: '',\n  value4: ''\n})\n\nconst { success: showSuccess } = useToast()\n\nconst form = ref()\n\nconst validatorMessage = (val) => {\n  return /1\\d{10}/.test(val)\n}\n\nconst validator = (val) => {\n  if (String(val).length >= 4) {\n    return Promise.resolve()\n  } else {\n    return Promise.reject('长度不得小于4')\n  }\n}\n\n// 校验函数可以返回 Promise，实现异步校验\nconst asyncValidator = (val) =>\n  new Promise((resolve) => {\n    showLoading('验证中...')\n\n    setTimeout(() => {\n      closeToast()\n      resolve(val === '1234')\n    }, 1000)\n  })\n\nfunction handleSubmit() {\n  form.value\n    .validate()\n    .then(({ valid, errors }) => {\n      if (valid) {\n        showSuccess({\n          msg: '提交成功'\n        })\n      }\n    })\n    .catch((error) => {\n      console.log(error, 'error')\n    })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of InputNumber Component in Vue\nDESCRIPTION: Demonstrates how to use the InputNumber component with v-model binding and change event handling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Selector UI for Calendar Component\nDESCRIPTION: Demonstrates how to use the default slot to create a custom selector UI rather than using the default cell-type display.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<view style=\"margin-bottom: 10px;\">当前选中日期：{{ formatValue }}</view>\n<wd-calendar v-model=\"value\" @confirm=\"handleConfirm\">\n  <wd-button>选择日期</wd-button>\n</wd-calendar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\nconst formatValue = ref<string>('')\n\nfunction handleConfirm({ value }) {\n  formatValue.value = new Date(value).toString()\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Columns Picker Component in Vue\nDESCRIPTION: Demonstrates how to create a Picker component with multiple columns by setting 'columns' as a two-dimensional array and 'value' as an array.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"Multiple Columns\" v-model=\"value\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(['Central South University', 'Software Engineering'])\n\nconst columns = ref([\n  ['Sun Yat-sen University', 'Central South University', 'South China University of Technology'],\n  ['Computer Science and Technology', 'Software Engineering', 'Communication Engineering', 'Law', 'Economics']\n])\n```\n\n----------------------------------------\n\nTITLE: Custom Anchors FloatingPanel Implementation\nDESCRIPTION: Demonstrates FloatingPanel with custom anchor positions and height binding. Sets three anchor positions at 100px, 40%, and 70% of screen height.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/floating-panel.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-floating-panel v-model:height=\"height\" :anchors=\"anchors\" @heightChange=\"handleHeightChange\">\n  <view class=\"inner-content\">Custom Anchors {{ anchors }} - {{ height.toFixed(0) }}</view>\n</wd-floating-panel>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst height = ref<number>(0)\nconst windowHeight = ref<number>(0)\nconst anchors = ref<number[]>([])\n\nconst handleHeightChange = ({ height }: { height: number }) => {\n  console.log(height)\n}\n\nonLoad(() => {\n  windowHeight.value = uni.getSystemInfoSync().windowHeight\n  anchors.value = [100, Math.round(0.4 * windowHeight.value), Math.round(0.7 * windowHeight.value)]\n  height.value = anchors.value[1]\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n.inner-content {\n  padding: 1rem;\n  text-align: center;\n  font-size: 16px;\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Fab Implementation in Vue\nDESCRIPTION: Demonstrates basic usage of Fab component with multiple action buttons and icon settings. Shows how to configure type, position, direction and disabled states.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/fab.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-fab :disabled=\"disabled\" :type=\"type\" :position=\"position\" :direction=\"direction\">\n  <wd-button @click=\"showToast('Triple Like')\" :disabled=\"disabled\" custom-class=\"custom-button\" type=\"primary\" round>\n    <wd-icon name=\"github-filled\" size=\"22px\"></wd-icon>\n  </wd-button>\n  <wd-button @click=\"showToast('Add to Favorites')\" :disabled=\"disabled\" custom-class=\"custom-button\" type=\"success\" round>\n    <wd-icon name=\"star\" size=\"22px\"></wd-icon>\n  </wd-button>\n\n  <wd-button @click=\"showToast('Give Coin')\" :disabled=\"disabled\" custom-class=\"custom-button\" type=\"error\" round>\n    <wd-icon name=\"money-circle\" size=\"22px\"></wd-icon>\n  </wd-button>\n  <wd-button @click=\"showToast('Like')\" :disabled=\"disabled\" custom-class=\"custom-button\" type=\"warning\" round>\n    <wd-icon name=\"thumb-up\" size=\"22px\"></wd-icon>\n  </wd-button>\n</wd-fab>\n```\n\n----------------------------------------\n\nTITLE: 范围选择tab标签自定义格式的DatetimePicker\nDESCRIPTION: 使用display-format-tab-label属性自定义范围选择模式下的tab标签展示格式，接收选中项数组参数并返回自定义文本。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"范围tab展示格式\" :display-format-tab-label=\"displayFormatTabLabel\" @confirm=\"handleConfirm\"></wd-datetime-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\nconst value = ref<any[]>(['', Date.now()])\n\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n\nconst displayFormatTabLabel = (items) => {\n  return `${items[0].label}年${items[1].label}月${items[2].label}日 ${items[3].label}:${items[4].label}`\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabled Tab Implementation\nDESCRIPTION: Shows how to disable specific tabs using the disabled property. In this example, the second tab (item === 1) is disabled and cannot be selected by the user.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\">\n  <block v-for=\"item in 4\" :key=\"item\">\n    <wd-tab :title=\"`Tab ${item}`\" :disabled=\"item === 1\">\n      <view class=\"content\">Content {{ item }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\n----------------------------------------\n\nTITLE: Picker Component with Validation Before Confirmation in Vue\nDESCRIPTION: Demonstrates how to implement validation before confirming the selected value using the 'before-confirm' function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n\n<wd-picker label=\"before-confirm\" :columns=\"columns\" v-model=\"value\" :before-confirm=\"beforeConfirm\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nconst beforeConfirm = (value, resolve, picker) => {\n  picker.setLoading(true)\n  setTimeout(() => {\n    picker.setLoading(false)\n    if (['Option 2', 'Option 3'].indexOf(value) > -1) {\n      resolve(false)\n      toast.show('Option 2 and Option 3 are not allowed to be selected')\n    } else {\n      resolve(true)\n    }\n  }, 2000)\n}\n```\n\n----------------------------------------\n\nTITLE: Advancing Step Progress State - Vue Composition API - TypeScript\nDESCRIPTION: Implements reactive state for the active step index and provides a function to increment the current step. Uses Vue's ref to create a reactive number value. Intended to be bound to components such as wd-steps to update step progress on user interactions. Requires Vue 3 Composition API setup.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/steps.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = ref<number>(0)\\n\\nfunction nextStep() {\\n  active.value = active.value + 1\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Notify Hook in TypeScript\nDESCRIPTION: Shows how to import and use the notify hook to display and close notifications with a default timeout of 3 seconds.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notify.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { useNotify } from '@/uni_modules/wot-design-uni'\n\nconst { showNotify, closeNotify } = useNotify()\n\n// 3 秒后自动关闭\nshowNotify('通知内容')\n\n// 主动关闭\ncloseNotify()\n```\n\n----------------------------------------\n\nTITLE: Complete Application Implementation - HTML\nDESCRIPTION: Shows a complete implementation of the loadmore component within a scrollable list with dynamic content loading.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/loadmore.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"container\">\n  <view v-for=\"index in num\" :key=\"index\" class=\"list-item\">\n    <image src=\"https://img10.360buyimg.com/jmadvertisement/jfs/t1/70325/36/14954/36690/5dcd3e3bEee5006e0/aed1ccf6d5ffc764.png\" />\n    <view class=\"right\">This is a test {{ index + 1 }}</view>\n  </view>\n  <wd-loadmore :state=\"state\" @reload=\"loadmore\" />\n</view>\n```\n\n----------------------------------------\n\nTITLE: Multi-Level Cascading PickerView with Dynamic Data\nDESCRIPTION: Implements a multi-level cascading picker where selecting an option in one column affects the available options in subsequent columns, using the column-change handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker-view.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" v-model=\"value\" :column-change=\"onChangeDistrict\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst district = {\n  '0': [{ label: '北京', value: '110000' }, { label: '广东省', value: '440000' }],\n  '110000': [{ label: '北京', value: '110100' }],\n  '440000': [{ label: '广州市', value: '440100' }, { label: '韶关市', value: '440200' }, { label: '深圳市', value: '440300' }, { label: '珠海市', value: '440400' }, { label: '汕头市', value: '440500' }],\n  '110100': [{ label: '东城区', value: '110101' }, { label: '西城区', value: '110102' }, { label: '朝阳区', value: '110105' }, { label: '丰台区', value: '110106' }, { label: '石景山区', value: '110107' }],\n  '440100': [{ label: '荔湾区', value: '440103' }, { label: '越秀区', value: '440104' }, { label: '海珠区', value: '440105'}],\n  '440200': [{ label: '武江区', value: '440203'}],\n  '440300': [{ label: '罗湖区', value: '440303' }, { label: '福田区', value: '440304' }],\n  '440400': [{ label: '香洲区', value: '440402' }, { label: '斗门区', value: '440403' }, { label: '金湾区', value: '440404' }],\n  '440500': [{ label: '龙湖区', value: '440507' }, { label: '金平区', value: '440511' }]\n}\n\nconst value = ref(['110000', '110100', '110102'])\nconst columns = ref([district[0], district[district[0][0].value], district[district[district[0][0].value][0].value]])\n\n\nconst onChangeDistrict = (pickerView, value, columnIndex, resolve) => {\n  const item = value[columnIndex]\n  if (columnIndex === 0) {\n    pickerView.setColumnData(1, district[item.value])\n    pickerView.setColumnData(2, district[district[item.value][0].value])\n  } else if (columnIndex === 1) {\n    pickerView.setColumnData(2, district[item.value])\n  }\n  resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Range Selection in Calendar Component\nDESCRIPTION: Demonstrates how to use the Calendar component for date range selection. The value is an array representing the start and end dates of the range.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"daterange\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number[]>([])\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Time Filtering in DateTime Selection\nDESCRIPTION: Demonstrates how to customize time selection options using the hide-second and time-filter attributes. The timeFilter function filters available minute options to show only multiples of 10.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"datetime\" v-model=\"value\" @change=\"handleChange\" hide-second :time-filter=\"timeFilter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref('')\n\nconst timeFilter = ({ type, values }) => {\n  if (type === 'minute') {\n    // 只展示 0,10,20,30,40,50 分钟选项\n    return values.filter((item) => {\n      return item % 10 === 0\n    })\n  }\n\n  return values\n}\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Slider in HTML and TypeScript\nDESCRIPTION: Demonstrates how to set up a basic slider using v-model binding. The value is a number type for single slider mode.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/slider.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\"/>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(30)\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Button Implementation\nDESCRIPTION: Shows how to customize button styles using custom-class and SCSS, implementing Material Design 3 shadow effects.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"page-class\">\n  <wd-button custom-class=\"custom-shadow\">Primary Button</wd-button>\n  <wd-button type=\"success\" custom-class=\"custom-shadow\">Success Button</wd-button>\n  <wd-button type=\"info\" custom-class=\"custom-shadow\">Info Button</wd-button>\n  <wd-button type=\"warning\" custom-class=\"custom-shadow\">Warning Button</wd-button>\n  <wd-button type=\"error\" custom-class=\"custom-shadow\">Danger Button</wd-button>\n</view>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.page-class {\n  :deep() {\n    .custom-shadow {\n      box-shadow: 0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Component with Notify in Vue\nDESCRIPTION: Shows how to create a layout component that includes the Notify component and other global elements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notify.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <wd-config-provider>\n    <slot />\n    <TabBar />\n    <wd-notify />\n  </wd-config-provider>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    // #ifdef H5\n    name: 'Layout',\n    // #endif\n    options: { virtualHost: true, addGlobalClass: true, styleIsolation: 'shared' }\n  }\n</script>\n\n<script setup lang=\"ts\">\n  import TabBar from './components/tabbar.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Checkbox in Vue\nDESCRIPTION: Demonstrates how to set up a basic checkbox using v-model for two-way binding. The setup function uses Vue 3 Composition API to manage the checkbox state.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox v-model=\"value\">Option</wd-checkbox>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive, toRefs } from 'vue'\n\nexport default {\n  setup() {\n    const state = reactive({\n      value: true\n    })\n\n    return {\n      ...toRefs(state)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fraction Indicator Implementation in Swiper\nDESCRIPTION: Shows how to implement a fraction style indicator positioned at the bottom-right of the Swiper component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swiper.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-swiper\n  :list=\"swiperList\"\n  autoplay\n  v-model:current=\"current\"\n  :indicator=\"{ type: 'fraction' }\"\n  indicatorPosition=\"bottom-right\"\n  @click=\"handleClick\"\n  @change=\"onChange\"\n></wd-swiper>\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Number Keyboard in Vue.js\nDESCRIPTION: Shows how to create a keyboard with randomly arranged number keys for high-security scenarios.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/keyboard.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Random Number Keyboard\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" random-key-order @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Using Custom Image in Toast with TypeScript\nDESCRIPTION: Shows how to use a custom image in a toast by setting the iconUrl parameter in the options object passed to the show method.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst open = () => {\n  toast.show({\n    msg: 'Custom Image',\n    iconUrl: 'https://example.com/image.png'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Prompt Dialog with Validation\nDESCRIPTION: Implementation of prompt dialog with input validation using regex pattern\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/message-box.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"prompt\">prompt</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction prompt() {\n  message\n    .prompt({\n      title: '请输入邮箱',\n      inputValue: value1.value,\n      inputPattern: /.+@.+\\..+/i\n    })\n    .then((resp) => {\n      console.log(resp)\n    })\n    .catch((error) => {\n      console.log(error)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义内部格式的DatetimePicker\nDESCRIPTION: 使用formatter属性自定义弹出层内部选项的格式，接收type和value参数，返回选项的显示文本。这会关闭内置的默认display-format函数。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"内部格式\" :formatter=\"formatter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\nconst formatter = (type, value) => {\n  switch (type) {\n    case 'year':\n      return value + '年'\n    case 'month':\n      return value + '月'\n    case 'date':\n      return value + '日'\n    case 'hour':\n      return value + '时'\n    case 'minute':\n      return value + '分'\n    default:\n      return value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notify in a User Page Component (Vue)\nDESCRIPTION: Demonstrates how to use the Notify component within a specific page component, including the layout and button to trigger notifications.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notify.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <layout>\n    <view>User</view>\n    <wd-button type=\"primary\" @click=\"showNotify('Notification message')\">Notification message</wd-button>\n  </layout>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    // #ifdef H5\n    name: 'User',\n    // #endif\n    options: { virtualHost: true, addGlobalClass: true, styleIsolation: 'shared' }\n  }\n</script>\n\n<script setup lang=\"ts\">\n  import { useNotify } from '@/uni_modules/wot-design-uni'\n\n  const { showNotify } = useNotify()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Upload\nDESCRIPTION: Shows how to enable multiple file selection by setting the multiple attribute on the Upload component, allowing users to select and upload multiple files at once.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/upload.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-upload\n  :file-list=\"fileList\"\n  multiple\n  action=\"https://mockapi.eolink.com/zhTuw2P8c29bc981a741931bdd86eb04dc1e8fd64865cb5/upload\"\n  @change=\"handleChange\"\n></wd-upload>\n```\n\n----------------------------------------\n\nTITLE: Basic CountTo Animation Usage in Vue\nDESCRIPTION: Examples of basic number animation implementation with different configurations including start/end values, decimals, and styling options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/count-to.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<wd-count-to :endVal=\"2024\" suffix=\"year\" color=\"#16baaa\"></wd-count-to>\n<wd-count-to prefix=\"￥\" :startVal=\"0\" :decimals=\"2\" :endVal=\"186.321\" :fontSize=\"32\" suffix=\"%\" color=\"#1e9fff\"></wd-count-to>\n<wd-count-to prefix=\"￥\" :startVal=\"0\" :decimals=\"2\" :endVal=\"21286.321\" :fontSize=\"32\" suffix=\"%\" color=\"#ff5722\"></wd-count-to>\n<wd-count-to prefix=\"￥\" :startVal=\"0\" :decimals=\"2\" :endVal=\"21286.321\" :fontSize=\"32\" suffix=\"%\" color=\"#ffb800\" :duration=\"2000\"></wd-count-to>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode with ConfigProvider\nDESCRIPTION: Basic implementation of dark mode using the ConfigProvider component with theme property set to dark.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<wd-config-provider theme=\"dark\">...</wd-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of SortButton Component in HTML and TypeScript\nDESCRIPTION: Demonstrates how to use the SortButton component with v-model binding and a change event handler. The component displays a sorting button for 'Price' with three possible states.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sort-button.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-sort-button title=\"Price\" v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(0)\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTime Selection with Calendar Component\nDESCRIPTION: Configuration for datetime selection that includes time (hours, minutes, seconds). Sets the Calendar type to 'datetime'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"datetime\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Picker UI for Column Picker in Vue 3\nDESCRIPTION: This snippet demonstrates how to create a custom UI for the column picker using the default slot. It includes both HTML and TypeScript code for the custom implementation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<view style=\"margin-bottom: 10px;\">当前选中项: {{ displayValue }}</view>\n<wd-col-picker :use-default-slot=\"true\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\">\n  <wd-button>选择地址</wd-button>\n</wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>([])\nconst displayValue = ref('')\n\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  })\n])\n\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Index Column and Customizing Table Appearance\nDESCRIPTION: Shows how to add an index column and customize its appearance, as well as setting column alignment and width.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/table.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" height=\"328px\" :index=\"true\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"姓名\" sortable></wd-table-col>\n  <wd-table-col prop=\"grade\" label=\"分数\" sortable></wd-table-col>\n  <wd-table-col prop=\"hobby\" label=\"一言以蔽之\" sortable :width=\"160\"></wd-table-col>\n</wd-table>\n\n<wd-table :data=\"dataList\" height=\"328px\" :index=\"{ align: 'center', width: 200 }\">\n  <wd-table-col prop=\"name\" label=\"姓名\" sortable align=\"center\"></wd-table-col>\n  <wd-table-col prop=\"grade\" label=\"分数\" sortable align=\"center\"></wd-table-col>\n  <wd-table-col prop=\"hobby\" label=\"一言以蔽之\" sortable :width=\"160\"></wd-table-col>\n</wd-table>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Loading Component in HTML\nDESCRIPTION: Basic usage of the loading component, suitable for button loading states and page hints.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/loading.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-loading />\n```\n\n----------------------------------------\n\nTITLE: Grid for Page Navigation\nDESCRIPTION: Using grid items for page navigation with different navigation types. This example shows how to set up redirects and navigation using the link-type and url properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid clickable>\n  <wd-grid-item link-type=\"redirectTo\" url=\"/pages/button/index\" @itemclick=\"click\" icon=\"search\" text=\"Redirect to ...\" />\n  <wd-grid-item link-type=\"navigateTo\" url=\"/pages/button/index\" @itemclick=\"click\" icon=\"setting\" text=\"Navigate to ...\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: 控制Tooltip显隐逻辑 (TypeScript)\nDESCRIPTION: 实现控制Tooltip显隐的TypeScript逻辑，包括ref的使用和切换显示状态的函数。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tooltip.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst show = ref<boolean>(false)\n\nconst control = () => {\n  show.value = !show.value\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Group in Vue\nDESCRIPTION: Demonstrates how to create a checkbox group with multiple options. The v-model of the group binds to an array containing the values of selected checkboxes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\">\n  <wd-checkbox value=\"1\">Option 1</wd-checkbox>\n  <wd-checkbox value=\"2\">Option 2</wd-checkbox>\n  <wd-checkbox value=\"3\">Option 3</wd-checkbox>\n  <wd-checkbox value=\"4\">Option 4</wd-checkbox>\n</wd-checkbox-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive, toRefs } from 'vue'\n\nexport default {\n  setup() {\n    const state = reactive({\n      value: ['1', '3']\n    })\n\n    return {\n      ...toRefs(state)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Mode Popover Implementation\nDESCRIPTION: Demonstrates implementation of Popover in menu mode with custom icons and click handling. Shows how to structure menu items and handle selections.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/popover.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-popover mode=\"menu\" :content=\"menu\" @menuclick=\"link\" @change=\"handleChange\">\n  <wd-button>List</wd-button>\n</wd-popover>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nconst menu = ref<Array<Record<string, any>>>([{\n  iconClass: 'read',\n  content: 'Mark all as read'\n}, {\n  iconClass: 'delete',\n  content: 'Clear recent conversations'\n}, {\n  iconClass: 'detection',\n  content: 'Message subscription settings'\n}, {\n  iconClass: 'subscribe',\n  content: 'Message anomaly detection'\n}])\n\nfunction link(e) {\n  toast.show('Selected ' + e.item.content)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Anchor Usage for Sidebar in TypeScript\nDESCRIPTION: Provides the TypeScript implementation for the anchor usage example, including scroll handling and category management.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { onMounted, ref } from 'vue'\nimport { getRect, isArray } from '@/uni_modules/wot-design-uni/components/common/util'\n\nconst active = ref<number>(1)\nconst scrollTop = ref<number>(0)\nconst itemScrollTop = ref<number[]>([])\n\nconst subCategories = new Array(24).fill({ title: 'Title Text', label: 'This is description This is description' }, 0, 24)\nconst categories = ref([\n  {\n    label: 'Category 1',\n    title: 'Title 1',\n    items: subCategories\n  },\n  {\n    label: 'Category 2',\n    title: 'Title 2',\n    items: subCategories\n  },\n  {\n    label: 'Category 3',\n    title: 'Title 3',\n    items: subCategories.slice(0, 18)\n  },\n  {\n    label: 'Category 4',\n    title: 'Title 4',\n    items: subCategories.slice(0, 21)\n  },\n  {\n    label: 'Category 5',\n    title: 'Title 5',\n    items: subCategories\n  },\n  {\n    label: 'Category 6',\n    title: 'Title 6',\n    items: subCategories.slice(0, 18)\n  },\n  {\n    label: 'Category 7',\n    title: 'Title 7',\n    items: subCategories\n  }\n])\n\nonMounted(() => {\n  getRect('.category', true).then((rects) => {\n    if (isArray(rects)) {\n      itemScrollTop.value = rects.map((item) => item.top || 0)\n      scrollTop.value = rects[active.value].top || 0\n    }\n  })\n})\n\nfunction handleChange({ value }) {\n  active.value = value\n  scrollTop.value = itemScrollTop.value[value]\n}\nfunction onScroll(e) {\n  const { scrollTop } = e.detail\n  const threshold = 50 // Distance between the next title and the top\n  if (scrollTop < threshold) {\n    active.value = 0\n    return\n  }\n  const index = itemScrollTop.value.findIndex((top) => top > scrollTop && top - scrollTop <= threshold)\n  if (index > -1) {\n    active.value = index\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Integrating Pagination with Table Component in Vue\nDESCRIPTION: Shows how to combine a table with a pagination component, including data slicing and dynamic updates based on page changes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/table.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"paginationData\" :height=\"400\" :fixed-header=\"false\">\n  <wd-table-col prop=\"name\" label=\"姓名\" fixed align=\"center\"></wd-table-col>\n  <wd-table-col prop=\"grade\" label=\"分数\" fixed align=\"center\"></wd-table-col>\n  <wd-table-col prop=\"hobby\" label=\"一言以蔽之\" :width=\"160\"></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"求学之所\" :width=\"180\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"专业\"></wd-table-col>\n  <wd-table-col prop=\"gender\" label=\"性别\"></wd-table-col>\n</wd-table>\n<wd-pagination custom-style=\"border: 1px solid #ececec;border-top:none\" v-model=\"page\" :total=\"total\"></wd-pagination>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TableData {\n  name: string\n  school: string\n  major: string\n  gender: string\n  graduation: string\n  grade: number\n  compare: string\n  hobby: string\n}\n\nconst dataList = ref<TableData[]>([\n  // ... data array\n])\nconst page = ref<number>(1)\nconst pageSize = ref<number>(10)\n\nconst total = ref<number>(dataList.value.length)\n\nconst paginationData = computed(() => {\n  return dataList.value.slice((page.value - 1) * pageSize.value, page.value * pageSize.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Global Dark Mode Styles\nDESCRIPTION: CSS implementation for global dark mode styles affecting body text and background colors.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.wot-theme-dark body {\n  color: #f5f5f5;\n  background-color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Cascading Picker Component in Vue\nDESCRIPTION: Shows how to implement a cascading Picker with dynamic column changes based on selections. It uses the 'column-change' prop to handle column updates.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker\n  :columns=\"columns\"\n  label=\"多列联动\"\n  v-model=\"value\"\n  :column-change=\"onChangeDistrict\"\n  :display-format=\"displayFormat\"\n />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst district = {\n  '0': [{ label: '北京', value: '110000' }, { label: '广东省', value: '440000' }],\n  '110000': [{ label: '北京', value: '110100' }],\n  '440000': [{ label: '广州市', value: '440100' }, { label: '韶关市', value: '440200' }, { label: '深圳市', value: '440300' }, { label: '珠海市', value: '440400' }, { label: '汕头市', value: '440500' }],\n  '110100': [{ label: '东城区', value: '110101' }, { label: '西城区', value: '110102' }, { label: '朝阳区', value: '110105' }, { label: '丰台区', value: '110106' }, { label: '石景山区', value: '110107' }],\n  '440100': [{ label: '荔湾区', value: '440103' }, { label: '越秀区', value: '440104' }, { label: '海珠区', value: '440105'}],\n  '440200': [{ label: '武江区', value: '440203'}],\n  '440300': [{ label: '罗湖区', value: '440303' }, { label: '福田区', value: '440304' }],\n  '440400': [{ label: '香洲区', value: '440402' }, { label: '斗门区', value: '440403' }, { label: '金湾区', value: '440404' }],\n  '440500': [{ label: '龙湖区', value: '440507' }, { label: '金平区', value: '440511' }]\n}\n\nconst value = ref(['110000', '110100', '110102'])\n\nconst columns = ref([district[0], district[district[0][0].value], district[district[district[0][0].value][0].value]])\n\nconst onChangeDistrict = (pickerView, value, columnIndex, resolve) => {\n  const item = value[columnIndex]\n  if (columnIndex === 0) {\n    pickerView.setColumnData(1, district[item.value])\n    pickerView.setColumnData(2, district[district[item.value][0].value])\n  } else if (columnIndex === 1) {\n    pickerView.setColumnData(2, district[item.value])\n  }\n  resolve()\n}\n\nconst displayFormat = (items) => {\n  return items\n    .map((item) => {\n      return item.label\n    })\n    .join('-')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Date Formatting for Calendar Component\nDESCRIPTION: Uses the formatter function to customize date appearance with additional information. Adds indicators for special dates and custom labels for range selections.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"daterange\" v-model=\"value\" allow-same-day :formatter=\"formatter\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number[]>([])\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n\nconst formatter = (day) => {\n  const date = new Date(day.date)\n  const now = new Date()\n  const year = date.getFullYear()\n  const month = date.getMonth()\n  const da = date.getDate()\n  const nowYear = now.getFullYear()\n  const nowMonth = now.getMonth()\n  const nowDa = now.getDate()\n\n  if (year === nowYear && month === nowMonth && da === nowDa) {\n    day.topInfo = '今天'\n  }\n\n  if (month === 5 && da === 18) {\n    day.topInfo = '618大促'\n  }\n\n  if (month === 10 && da === 11) {\n    day.topInfo = '京东双11'\n  }\n\n  if (day.type === 'start') {\n    day.bottomInfo = '开始'\n  }\n\n  if (day.type === 'end') {\n    day.bottomInfo = '结束'\n  }\n\n  if (day.type === 'same') {\n    day.bottomInfo = '开始/结束'\n  }\n\n  return day\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Wot Design Uni Utilities with NPM Installation\nDESCRIPTION: Examples showing how to adjust import statements when using Wot Design Uni via NPM, changing from @/uni_modules/wot-design-uni path to the direct wot-design-uni import.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// useToast、useNotify等同理\nimport { useMessage } from '@/uni_modules/wot-design-uni'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from 'wot-design-uni'\n```\n\n----------------------------------------\n\nTITLE: Date Time Selection in Calendar Component\nDESCRIPTION: Shows how to use the Calendar component for datetime selection, including hours, minutes, and seconds. It also demonstrates how to filter time options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"datetime\" v-model=\"value\" @confirm=\"handleConfirm\" hide-second :time-filter=\"timeFilter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>(\"\")\n\nfunction timeFilter({ type, values }) {\n  if (type === \"minute\") {\n    // Only show 0,10,20,30,40,50 minute options\n    return values.filter((item) => {\n      return item % 10 === 0\n    })\n  }\n  return values\n}\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Data Loading with ColPicker\nDESCRIPTION: Example demonstrating how to handle asynchronous data loading in ColPicker, including error handling and loading indicators during data fetching.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>([])\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  })\n])\n\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  // 模拟异步请求\n  setTimeout(() => {\n    // 模拟请求失败\n    if (Math.random() > 0.7) {\n      finish(false)\n      toast.error.error('数据请求失败，请重试')\n      return\n    }\n    // 这里为什么用selectedItem.value作为code呢？是因为area构造的时候就是将标识放到了value字段上，同理你也可以改为其他字段，只要和area的字段对应即可\n    const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n    if (areaData && areaData.length) {\n      resolve(\n        areaData.map((item) => {\n          return {\n            value: item.value,\n            label: item.text\n          }\n        })\n      )\n    } else {\n      // 没有下一项时，执行完成\n      finish()\n    }\n  }, 300)\n}\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Color Objects in Vue\nDESCRIPTION: Implementation using an array of color objects that define specific color transitions at different percentage points.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/progress.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"percentage\" :color=\"colorObject\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage in Vue\nDESCRIPTION: Demonstrates how to use a single checkbox with v-model binding and a change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox v-model=\"value\" @change=\"handleChange\">单选框1</wd-checkbox>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(true)\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Time DatetimePickerView\nDESCRIPTION: Implementation of a time picker view that displays hour and minute in HH:mm format.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker-view.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view type=\"time\" v-model=\"value\" label=\"Hour Minute\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value4 = ref<string>('11:12')\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Selections for Checkbox Group in Vue\nDESCRIPTION: Demonstrates how to limit the maximum number of selections in a checkbox group using the max attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" :max=\"2\">\n  <wd-checkbox value=\"1\">Option 1</wd-checkbox>\n  <wd-checkbox value=\"2\">Option 2</wd-checkbox>\n  <wd-checkbox value=\"3\">Option 3</wd-checkbox>\n  <wd-checkbox value=\"4\">Option 4</wd-checkbox>\n</wd-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Defining Font-family for Cross-platform Compatibility in SCSS\nDESCRIPTION: Basic font-family declaration that ensures consistent typography across platforms, prioritizing San Francisco for iOS, Roboto for Android, followed by fallback fonts.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/typography.md#2025-04-23_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\nfont-family: \"San Francisco\", Rotobo, arial, \"PingFang SC\", \"Noto SansCJK\", \"Microsoft Yahei\", sans-serif;\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Implementation with HTML Button and TypeScript Hook\nDESCRIPTION: Demonstrates the basic implementation of a Toast component using a button to trigger it. It imports the useToast hook and shows a simple text toast when the button is clicked.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"open\">Text Toast</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from 'wot-design-uni'\n\nexport default {\n  setup() {\n    const toast = useToast()\n\n    const open = () => {\n      toast.show('This is a toast')\n    }\n\n    return {\n      open\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Table with Vue 3 and TypeScript\nDESCRIPTION: Sets up a basic table component with columns for name, school, and major. Uses reactive data for the table contents.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/table.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"姓名\"></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"求学之所\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"专业\"></wd-table-col>\n</wd-table>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataList = reactive([\n  {\n    name: '赵云',\n    school: '武汉市阳逻妇幼保健学院',\n    major: '计算机科学与技术专业'\n  },\n  {\n    name: '孔明',\n    school: '武汉市阳逻卧龙学院',\n    major: '计算机科学与技术专业'\n  },\n  {\n    name: '刘备',\n    school: '武汉市阳逻编织学院',\n    major: '计算机科学与技术专业'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Sidebar Switching in HTML\nDESCRIPTION: Shows how to use the before-change property for asynchronous switching between sidebar items.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\" :before-change=\"beforeChange\">\n  <wd-sidebar-item :value=\"0\" label=\"Label Name\" />\n  <wd-sidebar-item :value=\"1\" label=\"Label Name\" disabled />\n  <wd-sidebar-item :value=\"2\" label=\"Label Name\" />\n</wd-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Using Badge Props with Tabs\nDESCRIPTION: Demonstrates how to add badges to tabs using the badge-props attribute. This example creates tabs with different badge styles: a normal numeric badge, a badge with max value, and a dot badge.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tabWithBadge\" @change=\"handleChange\">\n  <wd-tab v-for=\"(item, index) in tabsWithBadge\" :key=\"index\" :title=\"`${item.title}`\" :badge-props=\"item.badgeProps\">\n    <view class=\"content\">{{ item.title }} Badge</view>\n  </wd-tab>\n</wd-tabs>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tabWithBadge = ref(0)\nconst tabsWithBadge = ref([\n  {\n    title: 'Normal Value',\n    badgeProps: {\n      modelValue: 10,\n      right: '-8px'\n    }\n  },\n  {\n    title: 'Max Value',\n    badgeProps: {\n      modelValue: 100,\n      max: 99,\n      right: '-8px'\n    }\n  },\n  {\n    title: 'Dot',\n    badgeProps: {\n      isDot: true,\n      right: '-8px',\n      showZero: true\n    }\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Segmented Component in Vue\nDESCRIPTION: Demonstrates how to use the Segmented component with a list of options and v-model binding.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/segmented.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\"></wd-segmented>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = ref<string[]>(['Comments', 'Likes', 'Contributions', 'Rewards'])\n\nconst current = ref('Likes')\n```\n\n----------------------------------------\n\nTITLE: Filtering Options in DatetimePicker\nDESCRIPTION: Demonstrates how to filter the available options in the DatetimePicker using a filter function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"Filter Options\" :filter=\"filter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\nconst filter = (type, values) => {\n  if (type === 'minute') {\n    return values.filter((value) => value % 5 === 0)\n  }\n  return values\n}\n```\n\n----------------------------------------\n\nTITLE: Year-Month类型DatetimePicker示例\nDESCRIPTION: 使用type=\"year-month\"属性，只展示年月选择器。绑定值为时间戳类型。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker type=\"year-month\" v-model=\"value\" label=\"年月\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group with Cell Integration in Vue\nDESCRIPTION: Demonstrates how to integrate checkboxes with Cell components and use the toggle method.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell-group border>\n  <wd-checkbox-group v-model=\"value\" size=\"large\">\n    <wd-cell title=\"点赞\" center clickable @click=\"handleCheck1\">\n      <view @click.stop=\"noop\">\n        <wd-checkbox model-value=\"1\" ref=\"checkBox1\" custom-style=\"margin:0;\"></wd-checkbox>\n      </view>\n    </wd-cell>\n    <wd-cell title=\"投币\" center clickable @click=\"handleCheck2\">\n      <view @click.stop=\"noop\">\n        <wd-checkbox model-value=\"2\" ref=\"checkBox2\" custom-style=\"margin:0;\"></wd-checkbox>\n      </view>\n    </wd-cell>\n    <wd-cell title=\"一键三连\" center clickable @click=\"handleCheck3\">\n      <view @click.stop=\"noop\">\n        <wd-checkbox model-value=\"3\" ref=\"checkBox3\" custom-style=\"margin:0;\"></wd-checkbox>\n      </view>\n    </wd-cell>\n  </wd-checkbox-group>\n</wd-cell-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nconst value = ref<string[]>([])\nconst checkBox1 = ref<CheckboxInstance>()\nconst checkBox2 = ref<CheckboxInstance>()\nconst checkBox3 = ref<CheckboxInstance>()\n\nfunction handleCheck1() {\n  checkBox1.value && checkBox1.value.toggle()\n}\n\nfunction handleCheck2() {\n  checkBox2.value && checkBox2.value.toggle()\n}\nfunction handleCheck3() {\n  checkBox3.value && checkBox3.value.toggle()\n}\n\nfunction noop() {}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tag Management - TypeScript\nDESCRIPTION: Implements tag management functionality with add and remove capabilities\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tag.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tags = ref(['标签一', '标签二'])\n\nfunction handleClose(order) {\n  tags.value = tags.value.filter((value, index) => index !== order)\n  console.log('close:index' + order)\n}\n\nfunction handleConfirm({ value }) {\n  if (!value) return\n  tags.value = [...tags.value, value]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CalendarView in Vue\nDESCRIPTION: Demonstrates the basic implementation of the CalendarView component with a single date selection. The value is bound using v-model and changes are captured with the change event.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(Date.now())\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Upload Implementation with HTML and TypeScript\nDESCRIPTION: Demonstrates basic file upload functionality with a file list and change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-upload :file-list=\"fileList\" image-mode=\"aspectFill\" :action=\"action\" @change=\"handleChange\"></wd-upload>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileList = ref<any[]>([\n  {\n    url: 'https://img12.360buyimg.com//n0/jfs/t1/29118/6/4823/55969/5c35c16bE7c262192/c9fdecec4b419355.jpg'\n  }\n])\n\nconst action: string = 'https://mockapi.eolink.com/zhTuw2P8c29bc981a741931bdd86eb04dc1e8fd64865cb5/upload'\n\nfunction handleChange({ fileList: files }) {\n  fileList.value = files\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Content Using Slots\nDESCRIPTION: Demonstrates how to use slots to customize dialog content with a rating component example.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/message-box.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box selector=\"wd-message-box-slot\">\n  <wd-rate custom-class=\"custom-rate-class\" v-model=\"rate\" />\n</wd-message-box>\n\n<wd-button @click=\"withSlot\">custom</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst rate = ref<number>(1)\nconst message = useMessage('wd-message-box-slot')\n\nfunction withSlot() {\n  message\n    .confirm({\n      title: 'Rating'\n    })\n    .then(() => {\n      message.alert(`Your rating is: ${rate.value} points`)\n    })\n    .catch((error) => {\n      console.log(error)\n    })\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.custom-rate-class) {\n  display: block;\n  height: 22px;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Cropper Implementation in Vue\nDESCRIPTION: Basic implementation of the image cropper component with upload functionality. Uses v-model for display control and handles image upload through uni.chooseImage.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/img-cropper.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  @confirm=\"handleConfirm\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n<view class=\"profile\">\n  <view v-if=\"!imgSrc\" class=\"img\" @click=\"upload\">\n    <wd-icon name=\"fill-camera\" custom-class=\"img-icon\"></wd-icon>\n  </view>\n  <wd-img v-if=\"imgSrc\" round width=\"200px\" height=\"200px\" :src=\"imgSrc\" mode=\"aspectFit\" custom-class=\"profile-img\" @click=\"upload\" />\n  <view style=\"font-size: 14px;\">Click to upload avatar</view>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst src = ref<string>('')\nconst imgSrc = ref<string>('')\nconst show = ref<boolean>(false)\n\nfunction upload() {\n  uni.chooseImage({\n    count: 1,\n    success: (res) => {\n      const tempFilePaths = res.tempFilePaths[0]\n      src.value = tempFilePaths\n      show.value = true\n    }\n  })\n}\nfunction handleConfirm(event) {\n  const { tempFilePath } = event\n  imgSrc.value = tempFilePath\n}\nfunction imgLoaderror(res) {\n  console.log('Loading failed', res)\n}\nfunction imgLoaded(res) {\n  console.log('Loading successful', res)\n}\nfunction handleCancel(event) {\n  console.log('Cancel', event)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ImgCropper Component in Vue\nDESCRIPTION: Demonstrates the basic implementation of the ImgCropper component with image selection functionality. The example shows how to bind the component to a v-model for visibility control and handle cropping confirmation events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img-cropper.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  @confirm=\"handleConfirm\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n<view class=\"profile\">\n  <view v-if=\"!imgSrc\" class=\"img\" @click=\"upload\">\n    <wd-icon name=\"fill-camera\" custom-class=\"img-icon\"></wd-icon>\n  </view>\n  <wd-img v-if=\"imgSrc\" round width=\"200px\" height=\"200px\" :src=\"imgSrc\" mode=\"aspectFit\" custom-class=\"profile-img\" @click=\"upload\" />\n  <view style=\"font-size: 14px;\">点击上传头像</view>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst src = ref<string>('')\nconst imgSrc = ref<string>('')\nconst show = ref<boolean>(false)\n\nfunction upload() {\n  uni.chooseImage({\n    count: 1,\n    success: (res) => {\n      const tempFilePaths = res.tempFilePaths[0]\n      src.value = tempFilePaths\n      show.value = true\n    }\n  })\n}\nfunction handleConfirm(event) {\n  const { tempFilePath } = event\n  imgSrc.value = tempFilePath\n}\nfunction imgLoaderror(res) {\n  console.log('加载失败', res)\n}\nfunction imgLoaded(res) {\n  console.log('加载成功', res)\n}\nfunction handleCancel(event) {\n  console.log('取消', event)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wot Design Uni via Package Managers\nDESCRIPTION: Commands for installing Wot Design Uni using different package managers (npm, yarn, pnpm).\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i wot-design-uni\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add wot-design-uni\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add wot-design-uni\n```\n\n----------------------------------------\n\nTITLE: Dynamic Form Fields in Vue\nDESCRIPTION: Demonstrates how to create a form with dynamically added and removed fields, including validation for these dynamic fields.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/form.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<wd-form ref=\"form\" :model=\"model\">\n  <wd-cell-group border>\n    <wd-input\n      label=\"用户名\"\n      label-width=\"100px\"\n      prop=\"name\"\n      clearable\n      v-model=\"model.name\"\n      placeholder=\"请输入用户名\"\n      :rules=\"[{ required: true, message: '请填写用户名' }]\"\n    />\n    <wd-input\n      v-for=\"(item, index) in model.phoneNumbers\"\n      :key=\"item.key\"\n      :label=\"'玛卡巴卡单号' + index\"\n      :prop=\"'phoneNumbers.' + index + '.value'\"\n      label-width=\"100px\"\n      clearable\n      v-model=\"item.value\"\n      placeholder=\"玛卡巴卡单号\"\n      :rules=\"[{ required: true, message: '请填写玛卡巴卡单号' + index }]\"\n    />\n\n    <wd-cell title-width=\"0px\">\n      <view class=\"footer\">\n        <wd-button size=\"small\" type=\"info\" plain @click=\"addPhone\">添加</wd-button>\n        <wd-button size=\"small\" type=\"info\" plain @click=\"removePhone\">删除</wd-button>\n        <wd-button size=\"small\" type=\"info\" plain @click=\"reset\">重置</wd-button>\n        <wd-button type=\"primary\" size=\"small\" @click=\"submit\">提交</wd-button>\n      </view>\n    </wd-cell>\n  </wd-cell-group>\n</wd-form>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useToast } from '@/uni_modules/wot-design-uni'\nimport { reactive, ref } from 'vue'\n\ninterface PhoneItem {\n  key: number\n  value: string\n}\n\nconst model = reactive<{\n  name: string\n  phoneNumbers: PhoneItem[]\n}>({\n  name: '',\n  phoneNumbers: [\n    {\n      key: Date.now(),\n      value: ''\n    }\n  ]\n})\n\nconst { success: showSuccess } = useToast()\nconst form = ref()\n\nconst removePhone = () => {\n  model.phoneNumbers.splice(model.phoneNumbers.length - 1, 1)\n}\n\nconst addPhone = () => {\n  model.phoneNumbers.push({\n    key: Date.now(),\n    value: ''\n  })\n}\n\nconst reset = () => {\n  form.value.reset()\n}\n\nconst submit = () => {\n  form.value.validate().then(({ valid, errors }) => {\n    if (valid) {\n      showSuccess('校验通过')\n    }\n  })\n}\n</script>\n```\n\nLANGUAGE: css\nCODE:\n```\n.footer {\n  text-align: left;\n  :deep(.wd-button) {\n    &:not(:last-child) {\n      margin-right: 12px;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Event Handler for SwipeAction in TypeScript\nDESCRIPTION: This TypeScript code implements the click event handler for the SwipeAction component, showing a toast message with the clicked position.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nfunction handleClick({ value }) {\n  toast.show(`点击${value}关闭操作按钮`)\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Open/Close in DropMenu with Vue 3 and TypeScript\nDESCRIPTION: Demonstrates how to use the before-toggle function for asynchronous open/close operations. It uses a message box to confirm the action before opening or closing the dropdown menu.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/drop-menu.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box></wd-message-box>\n<wd-drop-menu>\n  <wd-drop-menu-item v-model=\"value\" :options=\"option\" :before-toggle=\"handleBeforeToggle\" />\n</wd-drop-menu>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst messageBox = useMessage()\n\nconst value = ref<number>(0)\n\nconst option = ref<Record<string, any>[]>([\n  { label: 'All Products', value: 0 },\n  { label: 'New Products', value: 1 },\n  { label: 'Promotional Products', value: 2 }\n])\n\n// Confirm whether to open/close the dropdown menu through dialog\nconst handleBeforeToggle: DropMenuItemBeforeToggle = ({ status, resolve }) => {\n  messageBox\n    .confirm({\n      title: `Asynchronous ${status ? 'Open' : 'Close'}`,\n      msg: `Are you sure you want to ${status ? 'open' : 'close'} the dropdown menu?`\n    })\n    .then(() => {\n      resolve(true)\n    })\n    .catch(() => {\n      resolve(false)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Collapse Component Structure\nDESCRIPTION: Demonstrates the basic structure of a collapse component with multiple collapsible items and custom title slot\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/collapse.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-collapse v-model=\"value\">\n  <wd-collapse-item title=\"Label 1\" name=\"item1\">This is a simple example text.</wd-collapse-item>\n  <wd-collapse-item title=\"Label 2\" name=\"item2\">This is a simple example text.</wd-collapse-item>\n  <wd-collapse-item name=\"item3\">\n    <template #title=\"{ expanded, disabled, isFirst }\">\n      <view class=\"header\">\n        <text style=\"color: red\">Custom title through slot</text>\n        <text>{{ expanded ? 'I am expanded' : 'I am collapsed' }}</text>\n      </view>\n    </template>\n    This is a simple example text.\n  </wd-collapse-item>\n</wd-collapse>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Cell Component in HTML\nDESCRIPTION: Basic usage of the Cell component with title and value attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Title\" value=\"Content\"></wd-cell>\n```\n\n----------------------------------------\n\nTITLE: Clearable Picker Component in Vue\nDESCRIPTION: Shows how to add a clear button to the Picker component by setting the 'clearable' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"Clear\" v-model=\"value\" clearable />\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Dialog Implementation\nDESCRIPTION: Shows how to implement a basic alert dialog with a confirm button using the MessageBox component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/message-box.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box></wd-message-box>\n<wd-button @click=\"alert\">alert</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction alert() {\n  message.alert('Operation successful')\n}\n```\n\n----------------------------------------\n\nTITLE: Sidebar as Anchor Navigation Implementation in HTML, TypeScript and CSS\nDESCRIPTION: A complete example showing how to use the Sidebar component for anchor navigation in a long page. It handles both clicking on sidebar items and scrolling to update the active state.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"wraper\">\n  <wd-sidebar v-model=\"active\" @change=\"handleChange\">\n    <wd-sidebar-item v-for=\"(item, index) in categories\" :key=\"index\" :value=\"index\" :label=\"item.label\" />\n  </wd-sidebar>\n  <scroll-view class=\"content\" scroll-y scroll-with-animation :scroll-top=\"scrollTop\" :throttle=\"false\" @scroll=\"onScroll\">\n    <view v-for=\"(item, index) in categories\" :key=\"index\" class=\"category\">\n      <wd-cell-group :title=\"item.title\" border>\n        <wd-cell v-for=\"(cell, index) in item.items\" :key=\"index\" :title=\"cell.title\" :label=\"cell.label\">\n          <wd-icon name=\"github-filled\" size=\"24px\"></wd-icon>\n        </wd-cell>\n      </wd-cell-group>\n    </view>\n  </scroll-view>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { onMounted, ref } from 'vue'\nimport { getRect, isArray } from '@/uni_modules/wot-design-uni/components/common/util'\n\nconst active = ref<number>(1)\nconst scrollTop = ref<number>(0)\nconst itemScrollTop = ref<number[]>([])\n\nconst subCategories = new Array(24).fill({ title: '标题文字', label: '这是描述这是描述' }, 0, 24)\nconst categories = ref([\n  {\n    label: '分类一',\n    title: '标题一',\n    items: subCategories\n  },\n  {\n    label: '分类二',\n    title: '标题二',\n    items: subCategories\n  },\n  {\n    label: '分类三',\n    title: '标题三',\n    items: subCategories.slice(0, 18)\n  },\n  {\n    label: '分类四',\n    title: '标题四',\n    items: subCategories.slice(0, 21)\n  },\n  {\n    label: '分类五',\n    title: '标题五',\n    items: subCategories\n  },\n  {\n    label: '分类六',\n    title: '标题六',\n    items: subCategories.slice(0, 18)\n  },\n  {\n    label: '分类七',\n    title: '标题七',\n    items: subCategories\n  }\n])\n\nonMounted(() => {\n  getRect('.category', true).then((rects) => {\n    if (isArray(rects)) {\n      itemScrollTop.value = rects.map((item) => item.top || 0)\n      scrollTop.value = rects[active.value].top || 0\n    }\n  })\n})\n\nfunction handleChange({ value }) {\n  active.value = value\n  scrollTop.value = itemScrollTop.value[value]\n}\nfunction onScroll(e) {\n  const { scrollTop } = e.detail\n  const threshold = 50 // 下一个标题与顶部的距离\n  if (scrollTop < threshold) {\n    active.value = 0\n    return\n  }\n  const index = itemScrollTop.value.findIndex((top) => top > scrollTop && top - scrollTop <= threshold)\n  if (index > -1) {\n    active.value = index\n  }\n}\n</script>\n```\n\nLANGUAGE: css\nCODE:\n```\n.wraper {\n  display: flex;\n  height: calc(100vh - var(--window-top));\n  height: calc(100vh - var(--window-top) - constant(safe-area-inset-bottom));\n  height: calc(100vh - var(--window-top) - env(safe-area-inset-bottom));\n}\n\n.content {\n  flex: 1;\n  background: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirm Dialog with useMessage in WOT Design Uni\nDESCRIPTION: Example of creating a Confirm dialog using the useMessage utility. Confirm dialogs have both confirm and cancel buttons, and are used to prompt user operations.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/use-message.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"confirm\">confirm</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction confirm() {\n  message\n    .confirm({\n      msg: 'Prompt text',\n      title: 'Title'\n    })\n    .then(() => {\n      console.log('Clicked confirm button')\n    })\n    .catch(() => {\n      console.log('Clicked cancel button')\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip with Custom Content Using Slots\nDESCRIPTION: Shows how to use named slots to display formatted content in a Tooltip instead of using the content property. The useContentSlot property must be set to enable the content slot.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-tooltip placement=\"right\" useContentSlot>\n  <wd-button>Multiple Lines</wd-button>\n  <template #content>\n    <view style=\"color: red; padding: 5px; width: 90px\">\n      <view>Multiple Line 1</view>\n      <view>Multiple Line 2</view>\n      <view>Multiple Line 3</view>\n    </view>\n  </template>\n</wd-tooltip>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueue } from '@/uni_modules/wot-design-uni'\n\nconst { closeOutside } = useQueue()\nconst show = ref<boolean>(false)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Skeleton Styles in HTML\nDESCRIPTION: Demonstrates how to use different skeleton themes including avatar, image, text, and paragraph.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/skeleton.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n// Avatar skeleton\n<wd-skeleton theme=\"avatar\" />\n// Image skeleton\n<wd-skeleton theme=\"image\" />\n// Text skeleton\n<wd-skeleton theme=\"text\" />\n// Paragraph skeleton\n<wd-skeleton theme=\"paragraph\" />\n```\n\n----------------------------------------\n\nTITLE: Programmatically Closing Toast in TypeScript\nDESCRIPTION: Demonstrates how to programmatically close a toast by calling the close method. This example shows a loading toast that is closed after 2 seconds using setTimeout.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst open = () => {\n  toast.loading('Loading')\n  setTimeout(() => {\n    toast.close()\n  }, 2000)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Week Selection with Calendar Component\nDESCRIPTION: Configuration for week-based selection by setting the Calendar type to 'week'. Recommends setting first-day-of-week to 1 (Monday) when there's an initial value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"week\" v-model=\"value\" :first-day-of-week=\"1\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Input Implementation with v-model\nDESCRIPTION: Basic implementation of the input component with v-model binding and change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-input type=\"text\" v-model=\"value\" placeholder=\"请输入用户名\" @change=\"handleChange\" />\n```\n\n----------------------------------------\n\nTITLE: Multi-column Picker Component in Vue\nDESCRIPTION: Demonstrates how to create a multi-column Picker by setting the 'columns' prop to a two-dimensional array and 'value' to an array.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"多列\" v-model=\"value\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(['中南大学', '软件工程'])\n\nconst columns = ref([\n  ['中山大学', '中南大学', '华南理工大学'],\n  ['计算机科学与技术', '软件工程', '通信工程', '法学', '经济学']\n])\n```\n\n----------------------------------------\n\nTITLE: Async DropMenu Toggle with Confirmation\nDESCRIPTION: Demonstrates how to implement async opening/closing of DropMenu with confirmation using the before-toggle function and MessageBox component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/drop-menu.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box></wd-message-box>\n<wd-drop-menu>\n  <wd-drop-menu-item v-model=\"value\" :options=\"option\" :before-toggle=\"handleBeforeToggle\" />\n</wd-drop-menu>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst messageBox = useMessage()\n\nconst value = ref<number>(0)\n\nconst option = ref<Record<string, any>[]>([\n  { label: '全部商品', value: 0 },\n  { label: '新款商品', value: 1 },\n  { label: '活动商品', value: 2 }\n])\n\n// 通过对话框确认是否打开/关闭下拉菜单\nconst handleBeforeToggle: DropMenuItemBeforeToggle = ({ status, resolve }) => {\n  messageBox\n    .confirm({\n      title: `异步${status ? '打开' : '关闭'}`,\n      msg: `确定要${status ? '打开' : '关闭'}下拉菜单吗？`\n    })\n    .then(() => {\n      resolve(true)\n    })\n    .catch(() => {\n      resolve(false)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Columns Grid in HTML\nDESCRIPTION: Shows how to customize the number of columns in the Grid component using the column property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid :column=\"3\">\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring ActionSheet with Option States in TypeScript\nDESCRIPTION: TypeScript implementation for ActionSheet with option states, defining options with custom color, disabled state, and loading state along with show/close functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst show = ref<boolean>(false)\nconst actions = ref([\n  {\n    name: '颜色',\n    color: '#0083ff'\n  },\n  {\n    name: '禁用',\n    disabled: true\n  },\n  {\n    loading: true\n  }\n])\nfunction showActions() {\n  show.value = true\n}\n\nfunction close() {\n  show.value = false\n}\n```\n\n----------------------------------------\n\nTITLE: Managing SwipeAction State in TypeScript\nDESCRIPTION: This TypeScript code manages the state of the SwipeAction component, allowing programmatic control of its open/closed state.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('close')\nfunction changeState(position: string) {\n  value.value = position\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Password Input Implementation with Keyboard\nDESCRIPTION: Shows basic usage of password input component with a number keyboard integration. Demonstrates two-way binding of value and keyboard visibility.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/password-input.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- 密码输入框 -->\n<wd-password-input v-model=\"value\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n<!-- 数字键盘 -->\n<wd-number-keyboard v-model=\"value\" v-model:visible=\"showKeyboard\" :maxlength=\"4\" @blur=\"showKeyboard = false\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst value = ref<string>('123')\nconst showKeyboard = ref<boolean>(true)\n```\n\n----------------------------------------\n\nTITLE: Sidebar Component Logic Implementation in TypeScript\nDESCRIPTION: This TypeScript code sets up the data structure and logic for the Sidebar component. It manages the active sidebar item, handles scrolling, and populates the categories with sample data. It also includes methods for handling sidebar item changes and scroll events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { onMounted, ref } from 'vue'\nimport { getRect, isArray } from '@/uni_modules/wot-design-uni/components/common/util'\n\nconst active = ref<number>(1)\nconst scrollTop = ref<number>(0)\nconst itemScrollTop = ref<number[]>([])\n\nconst subCategories = new Array(24).fill({ title: '标题文字', label: '这是描述这是描述' }, 0, 24)\nconst categories = ref([\n  {\n    label: '分类一',\n    title: '标题一',\n    icon: 'thumb-up',\n    items: subCategories\n  },\n  {\n    label: '分类二',\n    title: '标题二',\n    icon: 'qrcode',\n    items: subCategories\n  },\n  {\n    label: '分类三',\n    title: '标题三',\n    icon: 'location',\n    items: subCategories.slice(0, 18)\n  },\n  {\n    label: '分类四',\n    title: '标题四',\n    icon: 'ie',\n    items: subCategories.slice(0, 21)\n  },\n  {\n    label: '分类五',\n    title: '标题五',\n    icon: 'github-filled',\n    items: subCategories\n  },\n  {\n    label: '分类六',\n    title: '标题六',\n    icon: 'chrome',\n    items: subCategories.slice(0, 18)\n  },\n  {\n    label: '分类七',\n    title: '标题七',\n    icon: 'android',\n    items: subCategories\n  }\n])\n\nonMounted(() => {\n  getRect('.category', true).then((rects) => {\n    if (isArray(rects)) {\n      itemScrollTop.value = rects.map((item) => item.top || 0)\n      scrollTop.value = rects[active.value].top || 0\n    }\n  })\n})\n\nfunction handleChange({ value }) {\n  active.value = value\n  scrollTop.value = itemScrollTop.value[value]\n}\nfunction onScroll(e) {\n  const { scrollTop } = e.detail\n  const threshold = 50 // 下一个标题与顶部的距离\n  if (scrollTop < threshold) {\n    active.value = 0\n    return\n  }\n  const index = itemScrollTop.value.findIndex((top) => top > scrollTop && top - scrollTop <= threshold)\n  if (index > -1) {\n    active.value = index\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Display Format in DatetimePicker\nDESCRIPTION: Demonstrates how to customize the display format of the selected date/time using a displayFormat function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"Display Format\" :displayFormat=\"displayFormat\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nconst displayFormat = (items) => {\n  return `${items[0].label}Year${items[1].label}Month${items[2].label}Day ${items[3].label}:${items[4].label}`\n}\n```\n\n----------------------------------------\n\nTITLE: Styling SwipeAction Buttons with SCSS\nDESCRIPTION: This SCSS code styles the action buttons within the SwipeAction component, setting their layout and appearance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.action {\n  height: 100%;\n}\n.button {\n  display: inline-block;\n  padding: 0 11px;\n  height: 100%;\n  color: white;\n  line-height: 42px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Before Confirmation for Calendar Component\nDESCRIPTION: Uses before-confirm function to validate selected dates before confirming. Demonstrates integration with Toast component to show error messages for invalid selections.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n\n<wd-calendar label=\"before-confirm\" v-model=\"value\" :before-confirm=\"beforeConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nconst value = ref<string>('')\n\nconst beforeConfirm = ({ value, resolve }) => {\n  if (value > Date.now()) {\n    toast.error('该日期暂无数据')\n    resolve(false)\n  } else {\n    resolve(true)\n  }\n}\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up DatetimePickerView for Time Type in Vue\nDESCRIPTION: Demonstrates the configuration of DatetimePickerView to show only hour and minute using the 'time' type. The binding value is in 'HH:mm' format.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker-view.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view type=\"time\" v-model=\"value\" label=\"时分\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value4 = ref<string>('11:12')\n```\n\n----------------------------------------\n\nTITLE: Basic Signature Implementation - Vue Template\nDESCRIPTION: Basic electronic signature implementation showing how to set up the signature component with export scale and background color options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/signature.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature @confirm=\"confirm\" @clear=\"clear\" :export-scale=\"2\" background-color=\"#ffffff\" />\n```\n\n----------------------------------------\n\nTITLE: Loading State for PickerView Component\nDESCRIPTION: Demonstrates how to display a loading state in the PickerView component while data is being fetched or processed.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker-view.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" loading />\n```\n\n----------------------------------------\n\nTITLE: Multi-level Linkage Picker Component in Vue\nDESCRIPTION: Shows how to implement a multi-level linkage Picker component using the 'column-change' property and 'setColumnData' method.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker\n  :columns=\"columns\"\n  label=\"Multi-level Linkage\"\n  v-model=\"value\"\n  :column-change=\"onChangeDistrict\"\n  :display-format=\"displayFormat\"\n />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst district = {\n  '0': [{ label: 'Beijing', value: '110000' }, { label: 'Guangdong Province', value: '440000' }],\n  '110000': [{ label: 'Beijing', value: '110100' }],\n  '440000': [{ label: 'Guangzhou', value: '440100' }, { label: 'Shaoguan', value: '440200' }, { label: 'Shenzhen', value: '440300' }, { label: 'Zhuhai', value: '440400' }, { label: 'Shantou', value: '440500' }],\n  '110100': [{ label: 'Dongcheng District', value: '110101' }, { label: 'Xicheng District', value: '110102' }, { label: 'Chaoyang District', value: '110105' }, { label: 'Fengtai District', value: '110106' }, { label: 'Shijingshan District', value: '110107' }],\n  '440100': [{ label: 'Liwan District', value: '440103' }, { label: 'Yuexiu District', value: '440104' }, { label: 'Haizhu District', value: '440105'}],\n  '440200': [{ label: 'Wujiang District', value: '440203'}],\n  '440300': [{ label: 'Luohu District', value: '440303' }, { label: 'Futian District', value: '440304' }],\n  '440400': [{ label: 'Xiangzhou District', value: '440402' }, { label: 'Doumen District', value: '440403' }, { label: 'Jinwan District', value: '440404' }],\n  '440500': [{ label: 'Longhu District', value: '440507' }, { label: 'Jinping District', value: '440511' }]\n}\n\nconst value = ref(['110000', '110100', '110102'])\n\nconst columns = ref([district[0], district[district[0][0].value], district[district[district[0][0].value][0].value]])\n\nconst onChangeDistrict = (pickerView, value, columnIndex, resolve) => {\n  const item = value[columnIndex]\n  if (columnIndex === 0) {\n    pickerView.setColumnData(1, district[item.value])\n    pickerView.setColumnData(2, district[district[item.value][0].value])\n  } else if (columnIndex === 1) {\n    pickerView.setColumnData(2, district[item.value])\n  }\n  resolve()\n}\n\nconst displayFormat = (items) => {\n  return items\n    .map((item) => {\n      return item.label\n    })\n    .join('-')\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ColPicker Implementation with Vue\nDESCRIPTION: Example showing the basic usage of ColPicker component with Vue, including the template and script for handling column changes and user confirmations.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>([])\n\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  })\n])\n\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tab Usage with Numeric Index in Wot Design Uni\nDESCRIPTION: Demonstrates basic usage of the Tab component with v-model binding to a numeric index. This example creates 4 tabs dynamically using v-for, with each tab displaying its corresponding content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\">\n  <block v-for=\"item in 4\" :key=\"item\">\n    <wd-tab :title=\"`Tab ${item}`\">\n      <view class=\"content\">Content {{ item }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tab = ref<number>(0)\n```\n\nLANGUAGE: scss\nCODE:\n```\n.content {\n  line-height: 120px;\n  text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cell Skeleton Screens in HTML\nDESCRIPTION: Demonstrates how to create cell-style skeleton screens using wd-skeleton components with custom styles and configurations.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/skeleton.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<view style=\"display: flex\">\n  <wd-skeleton :row-col=\"[{ size: '48px', type: 'circle' }]\" />\n  <wd-skeleton :custom-style=\"{ width: '100%', marginLeft: '12px' }\" :row-col=\"[{ width: '50%' }, { width: '100%' }]\" />\n</view>\n<view style=\"display: flex; margin-top: 20px\">\n  <wd-skeleton :row-col=\"[{ size: '48px', type: 'rect' }]\" />\n  <wd-skeleton :custom-style=\"{ width: '100%', marginLeft: '12px' }\" :row-col=\"[{ width: '50%' }, { width: '100%' }]\" />\n</view>\n```\n\n----------------------------------------\n\nTITLE: Multi-color Progress Bar in Vue\nDESCRIPTION: Shows how to implement a progress bar with multiple colors that automatically calculates color segments based on percentage.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/progress.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"100\" :color=\"['#00c740', '#ffb300', '#e2231a', '#0083ff']\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Date Formatting with CalendarView in Vue\nDESCRIPTION: Shows how to use the formatter property to customize the appearance and information of calendar days, including adding top and bottom information and handling different day types.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar-view.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"daterange\" v-model=\"value\" allow-same-day :formatter=\"formatter\" @change=\"handleChange\"></wd-calendar-view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref([])\n\nconst formatter = (day) => {\n  const date = new Date(day.date)\n  const now = new Date()\n\n  const year = date.getFullYear()\n  const month = date.getMonth()\n  const da = date.getDate()\n  const nowYear = now.getFullYear()\n  const nowMonth = now.getMonth()\n  const nowDa = now.getDate()\n\n  if (year === nowYear && month === nowMonth && da === nowDa) {\n    day.topInfo = 'Today'\n  }\n\n  if (month === 5 && da === 18) {\n    day.topInfo = '618 Sale'\n  }\n\n  if (month === 10 && da === 11) {\n    day.topInfo = 'JD 11.11'\n  }\n\n  if (day.type === 'start') {\n    day.bottomInfo = 'Start'\n  }\n\n  if (day.type === 'end') {\n    day.bottomInfo = 'End'\n  }\n\n  if (day.type === 'same') {\n    day.bottomInfo = 'Selected'\n  }\n\n  return day\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering DatetimePickerView Options in Vue\nDESCRIPTION: Demonstrates how to use a custom filter function to modify the available options in the DatetimePickerView component. The filter function receives 'type' and 'values' parameters and returns the filtered options array.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker-view.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view v-model=\"value\" label=\"过滤选项\" :filter=\"filter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\nconst filter = (type, values) => {\n  if (type === 'minute') {\n    return values.filter((value) => value % 5 === 0)\n  }\n  return values\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Management Functions\nDESCRIPTION: TypeScript functions for managing tags, including adding and removing tags.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst tags = ref(['Tag 1', 'Tag 2'])\n\nfunction handleClose(order) {\n  tags.value = tags.value.filter((value, index) => index !== order)\n  console.log('close:index' + order)\n}\n\nfunction handleConfirm({ value }) {\n  if (!value) return\n  tags.value = [...tags.value, value]\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Spacing Configuration\nDESCRIPTION: Demonstrates how to set custom spacing between password input grids using the gutter property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/password-input.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Password input box -->\n<wd-password-input v-model=\"value\" :gutter=\"10\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n```\n\n----------------------------------------\n\nTITLE: Same Day Selection in Range for Calendar Component\nDESCRIPTION: Demonstrates how to allow selection of the same day, week, or month in range selection mode of the Calendar component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"daterange\" v-model=\"value\" allow-same-day @confirm=\"handleConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: ImgCropper with Automatic Upload Integration\nDESCRIPTION: Implementation of the ImgCropper component that automatically uploads the cropped image using the useUpload hook. This example demonstrates how to handle the cropped image and initiate an upload process.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img-cropper.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  @confirm=\"handleConfirmUpload\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { useUpload, useToast } from '@/uni_modules/wot-design-uni'\nimport { type UploadFileItem } from '@/uni_modules/wot-design-uni/components/wd-upload/types'\n\nconst { startUpload, UPLOAD_STATUS } = useUpload()\nconst { show: showToast } = useToast()\n\nconst show = ref(false)\nconst src = ref('')\nconst imgSrc = ref('')\n\nasync function handleConfirmUpload(event) {\n  const { tempFilePath } = event\n  \n  // 构建上传文件对象\n  const file: UploadFileItem = {\n    url: tempFilePath,\n    status: UPLOAD_STATUS.PENDING,\n    percent: 0,\n    uid: new Date().getTime()\n  }\n\n  try {\n    // 开始上传\n    await startUpload(file, {\n      action: 'https://your-upload-url',\n      onSuccess() {\n        imgSrc.value = tempFilePath\n        showToast({\n          msg: '上传成功'\n        })\n      },\n      onError() {\n        showToast({\n          msg: '上传失败'\n        })\n      },\n      onProgress(res) {\n        console.log('上传进度:', res.progress)\n      }\n    })\n  } catch (error) {\n    console.error('上传失败:', error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Curtain Component in Vue\nDESCRIPTION: Demonstrates how to use the Curtain component with v-model for visibility control, src for image URL, and to for link destination.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/curtain.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">展示幕帘</wd-button>\n<wd-curtain v-model=\"value\" :src=\"img\" :to=\"link\"></wd-curtain>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(false)\nconst img = ref<string>('https://img20.360buyimg.com/da/jfs/t1/141592/25/8861/261559/5f68d8c1E33ed78ab/698ad655bfcfbaed.png')\nconst link = ref<string>('/pages/index/index')\n\nfunction handleClick() {\n  value.value = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Date Selection with Calendar Component in Vue\nDESCRIPTION: Basic usage of the Calendar component with a date type (default). Sets up a v-model binding and confirm event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar v-model=\"value\" label=\"日期选择\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Unmasked Password Display\nDESCRIPTION: Demonstrates how to show unmasked input content by setting mask property to false.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/password-input.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 密码输入框 -->\n<wd-password-input v-model=\"value\" :mask=\"false\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n```\n\n----------------------------------------\n\nTITLE: Basic DropMenu Implementation in HTML with TypeScript\nDESCRIPTION: Shows the basic implementation of DropMenu with two menu items. Uses the useQueue hook to handle outside clicks that should close the menu.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/drop-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<view @click=\"closeOutside\">\n  <wd-drop-menu>\n    <wd-drop-menu-item v-model=\"value1\" :options=\"option1\" @change=\"handleChange1\" />\n    <wd-drop-menu-item v-model=\"value2\" :options=\"option2\" @change=\"handleChange2\" />\n  </wd-drop-menu>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueue } from '@/uni_modules/wot-design-uni'\n\nconst { closeOutside } = useQueue()\nconst value1 = ref<number>(0)\nconst value2 = ref<number>(0)\n\nconst option1 = ref<Record<string, any>[]>([\n  { label: '全部商品', value: 0 },\n  { label: '新款商品', value: 1 },\n  { label: '活动商品', value: 2 }\n])\nconst option2 = ref<Record<string, any>[]>([\n  { label: '综合', value: 0 },\n  { label: '销量', value: 1 },\n  { label: '上架时间', value: 2 }\n])\n\nfunction handleChange1({ value }) {\n  console.log(value)\n}\nfunction handleChange2({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Language Pack in Wot Design Uni\nDESCRIPTION: Example of how to modify or extend specific text in language packs using the Locale.add method. The example shows changing the calendar title text in Chinese.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/locale.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Locale } from 'wot-design-uni'\n\nconst messages = {\n  'zh-CN': {\n    calendar: {\n      title: '请选择日期' // 将'选择日期'修改为'请选择日期'\n    }\n  }\n}\n\nLocale.add(messages)\n```\n\n----------------------------------------\n\nTITLE: Picker Component with Confirmation Validation in Vue\nDESCRIPTION: Demonstrates how to add a validation step before confirming the selection in the Picker component using the 'before-confirm' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n\n<wd-picker label=\"before-confirm\" :columns=\"columns\" v-model=\"value\" :before-confirm=\"beforeConfirm\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nconst beforeConfirm = (value, resolve, picker) => {\n  picker.setLoading(true)\n  setTimeout(() => {\n    picker.setLoading(false)\n    if (['选项2', '选项3'].indexOf(value) > -1) {\n      resolve(false)\n      toast.error('选项校验不通过，请重新选择')\n    } else {\n      resolve(true)\n    }\n  }, 2000)\n}\n\nconst columns = ref(['选项1', '选项2', '选项3', '选项4', '选项5', '选项6', '选项7'])\nconst value = ref('')\n\nconst beforeConfirm = (value, resolve, picker) => {\n  picker.setLoading(true)\n  setTimeout(() => {\n    picker.setLoading(false)\n    if (['选项2', '选项3'].indexOf(value) > -1) {\n      resolve(false)\n      toast.error('选项校验不通过，请重新选择')\n    } else {\n      resolve(true)\n    }\n  }, 2000)\n}\n\nfunction handleConfirm({ value }) {\n  value.value = value\n}\n```\n\n----------------------------------------\n\nTITLE: Gesture Swipe Support for Tabs\nDESCRIPTION: Shows how to enable gesture swipe support for tabs with the swipeable property. This allows users to swipe horizontally to navigate between tabs.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\" swipeable>\n  <block v-for=\"item in 4\" :key=\"item\">\n    <wd-tab :title=\"`Tab ${item}`\">\n      <view class=\"content\">Content {{ item }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Single-Row Panel for ActionSheet in TypeScript\nDESCRIPTION: TypeScript implementation for a custom single-row panel ActionSheet, defining panel options with icon URLs and titles, along with event handling functions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst show = ref<boolean>(false)\nconst panels = ref([\n  {\n    iconUrl: '//img12.360buyimg.com/imagetools/jfs/t1/122016/33/6657/1362/5f0692a1E8708d245/e47299e5945a6956.png',\n    title: '微信好友'\n  }\n])\nfunction showActions() {\n  show.value = true\n}\n\nfunction close() {\n  show.value = false\n}\nconst toast = useToast()\n\nfunction select({ item, index }) {\n  toast.show(`当前选中项: ${item.title}, 下标: ${index}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Day/Week/Month Switching in Calendar Component\nDESCRIPTION: Demonstrates how to enable switching between day, week, and month views in the Calendar component using the show-type-switch property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar label=\"Day/Week/Month Switch\" :first-day-of-week=\"1\" show-type-switch v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Both Left and Right Swipe Actions in Uni-app\nDESCRIPTION: Illustrates how to configure the `wd-swipe-action` component to display actionable buttons on both the left and right sides using the `#left` and `#right` slots respectively. Contains sample buttons with inline background styles.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swipe-action.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-swipe-action>\n  <template #left>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #C8C7CD;\">Action1</view>\n      <view class=\"button\" style=\"background: #FFB300;\">Action2</view>\n      <view class=\"button\" style=\"background: #E2231A;\">Action3</view>\n    </view>\n  </template>\n  <wd-cell title=\"Title Text\" value=\"Content\" />\n  <template #right>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #cdb86e;\">Action4</view>\n      <view class=\"button\" style=\"background: #42ffd1;\">Action5</view>\n      <view class=\"button\" style=\"background: #383fe2;\">Action6</view>\n    </view>\n  </template>\n</wd-swipe-action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard with Right Sidebar in Vue.js\nDESCRIPTION: Shows how to set up a keyboard with a right sidebar, commonly used for inputting amounts.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Keyboard with Right Sidebar\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" mode=\"custom\" extra-key=\".\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\"></wd-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Before Confirmation in SelectPicker\nDESCRIPTION: Shows how to implement validation before confirming the selection using the before-confirm property. It includes a function that checks the selected value and resolves accordingly.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/select-picker.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-select-picker label=\"Validation Before Confirmation\" v-model=\"value\" :columns=\"columns\" :before-confirm=\"beforeConfirm\"></wd-select-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = ref<Record<string, any>>([{\n  value: '101',\n  label: 'Men\\'s Clothing'\n}, {\n  value: '102',\n  label: 'Luxury Goods'\n}, {\n  value: '103',\n  label: 'Women\\'s Clothing'\n}])\nconst value = ref<string[]>(['101'])\n\nconst beforeConfirm = (value, resolve) => {\n  if (value.length > 0) {\n    toast.error('Unable to select products at this time')\n    resolve(false)\n  } else {\n    resolve(true)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling History Record in Signature Component\nDESCRIPTION: Shows how to enable the history record feature in the signature component, allowing undo and redo operations.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/signature.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature enable-history background-color=\"#f5f5f5\" />\n```\n\n----------------------------------------\n\nTITLE: Button with Icon Implementation\nDESCRIPTION: Demonstrates how to add an icon to a regular button using the icon attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-button icon=\"edit-outline\"></wd-button>\n```\n\n----------------------------------------\n\nTITLE: Overriding Language Pack in Wot Design Uni\nDESCRIPTION: This snippet shows how to override specific text entries in a language pack using the Locale.add method.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/locale.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Locale } from 'wot-design-uni'\n\nconst messages = {\n  'zh-CN': {\n    calendar: {\n      title: 'Please select date' // Change 'Select date' to 'Please select date'\n    }\n  }\n}\n\nLocale.add(messages)\n```\n\n----------------------------------------\n\nTITLE: Advanced App Setup with Default Notify Options\nDESCRIPTION: App.vue setup that configures default options for all Notify instances including safe height and event handlers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notify.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n// App.vue\n<script setup lang=\"ts\">\n  import { onLaunch } from '@dcloudio/uni-app'\n  import { setNotifyDefaultOptions } from '@/uni_modules/wot-design-uni'\n\n  onLaunch(() => {\n    setNotifyDefaultOptions({\n      // #ifdef H5\n      safeHeight: 44,\n      // #endif\n      onClick: (event) => console.log('onClick', event),\n      onClosed: () => console.log('onClosed'),\n      onOpened: () => console.log('onOpened')\n    })\n    // 隐藏原生tabBar\n    uni.hideTabBar()\n  })\n</script>\n\n<style lang=\"scss\">\n  :root, page {\n    // 品牌色\n    --wot-color-theme: #1989fa;\n\n    // 模块标题/重要正文\n    --wot-color-title: #323233;\n    // // 副标题\n    // --color-content: #969799;\n    // // 次内容\n    // --nut-text-color: #c8c9cc;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Appearance and Behavior\nDESCRIPTION: Shows how to customize a notification's color, background, position, and duration. These options allow for tailored notification experiences.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/use-notify.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshowNotify({\n  message: 'Custom color',\n  color: '#ad0000',\n  background: '#ffe1e1'\n})\n\nshowNotify({\n  message: 'Custom position',\n  position: 'bottom'\n})\n\nshowNotify({\n  message: 'Custom duration',\n  duration: 1000\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Date Selection with CalendarView\nDESCRIPTION: Shows how to configure the CalendarView for multiple date selection by setting type to 'dates'. The value becomes an array to store multiple selected dates.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"dates\" v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref([])\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Watermark Component in HTML\nDESCRIPTION: Basic example of using the Watermark component with text content. The width and height parameters control the size of a single watermark instance that repeats across the screen.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/watermark.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-watermark content=\"wot-design-uni\" :width=\"130\" :height=\"130\"></wd-watermark>\n```\n\n----------------------------------------\n\nTITLE: Two-way Binding Upload Implementation\nDESCRIPTION: Shows how to implement two-way binding with v-model for the file list.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-upload v-model:file-list=\"fileList1\" image-mode=\"aspectFill\" :action=\"action\"></wd-upload>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileList = ref<any[]>([\n  {\n    url: 'https://img12.360buyimg.com//n0/jfs/t1/29118/6/4823/55969/5c35c16bE7c262192/c9fdecec4b419355.jpg'\n  }\n])\n\nconst action: string = 'https://mockapi.eolink.com/zhTuw2P8c29bc981a741931bdd86eb04dc1e8fd64865cb5/upload'\n```\n\n----------------------------------------\n\nTITLE: Adding Title to Keyboard in Vue.js\nDESCRIPTION: Demonstrates how to add a title to the keyboard component using the title property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/keyboard.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Keyboard with Title\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" title=\"Enter Password\" extra-key=\".\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Implementing Month Selection with Calendar Component\nDESCRIPTION: Setup for month-based selection by setting the Calendar type to 'month'. When value is provided, it represents the first day of the selected month.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"month\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Two-way Binding for Keyboard in Vue.js\nDESCRIPTION: Demonstrates how to use two-way binding with the keyboard component and limit input length.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/keyboard.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Two-way Binding\" :value=\"value1\" is-link @click=\"showKeyBoard\" />\n<wd-keyboard\n  v-model=\"value1\"\n  :maxlength=\"6\"\n  v-model:visible=\"visible\"\n  title=\"Keyboard Title\"\n  extra-key=\".\"\n  close-text=\"Done\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n></wd-keyboard>\n```\n\n----------------------------------------\n\nTITLE: NoticeBar Type Modifications in HTML\nDESCRIPTION: Demonstrates how to modify the notification types (info, warning, danger) of the NoticeBar component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar text=\"这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息\" prefix=\"warn-bold\" custom-class=\"space\" />\n<wd-notice-bar text=\"这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息\" prefix=\"check-outline\" type=\"info\" custom-class=\"space\" />\n<wd-notice-bar text=\"这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息\" prefix=\"wifi-error\" type=\"danger\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Complex Form with CSS\nDESCRIPTION: This snippet contains the CSS styles for the complex form. It includes custom styling for inline text, group margins, tip and footer sections, and label classes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/form.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.inline-txt {\n  display: inline-block;\n  font-size: 14px;\n  margin: 0 8px;\n  color: rgba(0, 0, 0, 0.45);\n  vertical-align: middle;\n}\n:deep(.group) {\n  margin-top: 12px;\n}\n.tip {\n  margin: 10px 15px 21px;\n  color: #999;\n  font-size: 12px;\n}\n.footer {\n  padding: 0 25px 21px;\n}\n:deep(.label-class) {\n  color: #999 !important;\n  font-size: 12px !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Backtop Component Implementation\nDESCRIPTION: Shows the basic implementation of the backtop component with scroll position monitoring. Requires passing scrollTop value from page's onPageScroll lifecycle method.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/backtop.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-backtop :scrollTop=\"scrollTop\"></wd-backtop>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst scrollTop = ref<number>(0)\nonPageScroll((e) => {\n  scrollTop.value = e.scrollTop\n})\n```\n\n----------------------------------------\n\nTITLE: Sticky Tab Layout Implementation\nDESCRIPTION: Demonstrates how to create sticky tabs that remain fixed at the top of the viewport when scrolling. The sticky property enables this behavior, and offset-top can be used to adjust the distance from the top.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\" sticky>\n  <block v-for=\"item in 4\" :key=\"item\">\n    <wd-tab :title=\"`Tab ${item}`\">\n      <view class=\"content\">Content {{ item }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\n----------------------------------------\n\nTITLE: Button-shaped Radio Group with Change Event\nDESCRIPTION: Implementation of a radio group with button-shaped radios. The 'shape' attribute is set to 'button' and includes a change event handler to log selection changes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/radio.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- button 按钮式单选 -->\n<wd-radio-group v-model=\"value\" shape=\"button\" @change=\"change\">\n  <wd-radio :value=\"1\">沃特</wd-radio>\n  <wd-radio :value=\"2\">商家后台</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n\nfunction change(e) {\n  console.log(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom DropMenu Content Implementation\nDESCRIPTION: Demonstrates how to customize DropMenuItem content using the default slot. Includes slider and button components within the custom content and shows how to manually control the menu closure.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/drop-menu.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-drop-menu>\n  <wd-drop-menu-item v-model=\"value\" :options=\"option\" @change=\"handleChange\" />\n  <wd-drop-menu-item title=\"筛选\" ref=\"dropMenu\" @opened=\"handleOpened\">\n    <view>\n      <wd-slider v-model=\"sliderValue\" ref=\"slider\" />\n      <wd-cell title=\"标题文字\" value=\"内容\" />\n      <wd-cell title=\"标题文字\" label=\"描述信息\" value=\"内容\" />\n      <wd-button block size=\"large\" suck @click=\"confirm\">主要按钮</wd-button>\n    </view>\n  </wd-drop-menu-item>\n</wd-drop-menu>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst dropMenu = ref()\nconst slider = ref<SliderInstance>() // slider 1.2.25支持\n\nconst value = ref<number>(0)\nconst sliderValue = ref<number>(30)\nconst option = ref<Record<string, any>[]>([\n  { label: '全部商品', value: 0 },\n  { label: '新款商品', value: 1 },\n  { label: '活动商品', value: 2 }\n])\nfunction handleChange({ value }) {\n  console.log(value)\n}\n\nfunction confirm() {\n  dropMenu.value.close()\n}\n\nfunction handleOpened() {\n  slider.value?.initSlider()\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Format CountDown Implementation\nDESCRIPTION: Customizing the countdown format using the format property for days, hours, minutes and seconds display.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/count-down.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-count-down :time=\"time\" :format=\"format\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst format = ref<string>('DD Days HH Hours mm Minutes ss Seconds')\nconst time = ref<number>(30 * 60 * 60 * 1000)\n```\n\n----------------------------------------\n\nTITLE: Implementing Before-Change Hook for Switch\nDESCRIPTION: Implementation of a confirmation dialog before the switch value changes using the before-change hook. The example includes both the component template and the supporting TypeScript code.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/switch.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" :before-change=\"beforeChange\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\n\nconst message = useMessage()\n\nconst beforeChange = ({ value, resolve }) => {\n  message\n    .confirm('Do you want to toggle the switch?')\n    .then(() => {\n      resolve(true)\n    })\n    .catch(() => {\n      resolve(false)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Disabled State for Checkbox Group in Vue\nDESCRIPTION: Demonstrates how to disable all checkboxes within a group by setting the disabled attribute on the checkbox group.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" disabled>\n  <wd-checkbox value=\"1\">Option 1</wd-checkbox>\n  <wd-checkbox value=\"2\">Option 2</wd-checkbox>\n  <wd-checkbox value=\"3\">Option 3</wd-checkbox>\n  <wd-checkbox value=\"4\">Option 4</wd-checkbox>\n</wd-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Prompt Dialog with Validation\nDESCRIPTION: Implementation of a prompt dialog with input validation using regex pattern matching for email addresses.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/message-box.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"prompt\">prompt</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction prompt() {\n  message\n    .prompt({\n      title: 'Please enter email',\n      inputValue: value1.value,\n      inputPattern: /.+@.+\\..+/i\n    })\n    .then((resp) => {\n      console.log(resp)\n    })\n    .catch((error) => {\n      console.log(error)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pressure Effect in Signature Component\nDESCRIPTION: Demonstrates how to enable the pressure mode in the signature component to simulate real writing effects.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/signature.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature pressure :height=\"300\" />\n```\n\n----------------------------------------\n\nTITLE: Validation Before Confirmation in DatetimePicker\nDESCRIPTION: Illustrates how to implement custom validation before confirming the selected date/time using the before-confirm function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast></wd-toast>\n<wd-datetime-picker label=\"before-confirm\" v-model=\"value\" :before-confirm=\"beforeConfirm\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\n\nconst toast = useToast()\nconst beforeConfirm = (value, resolve, picker) => {\n  picker.setLoading(true)\n  setTimeout(() => {\n    picker.setLoading(false)\n    if (value > Date.now()) {\n      resolve(false)\n      toast.error('Cannot select a date later than today')\n    } else {\n      resolve(true)\n    }\n  }, 2000)\n}\n\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling styleIsolation in Vue Custom Components for Vue 3.3+\nDESCRIPTION: Code showing how to enable the styleIsolation: 'shared' option in Vue 3.3+ using defineOptions when using Wot Design Uni components in a custom component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\ndefineOptions({\n  options: {\n    styleIsolation: 'shared'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Input with Icon Click Handling\nDESCRIPTION: Implementation of input with prefix and suffix icons and their click event handlers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-input\n  v-model=\"value\"\n  label=\"Click Icon\"\n  prefix-icon=\"search\"\n  suffix-icon=\"search\"\n  @click-prefix-icon=\"handleClickIcon\"\n  @click-suffix-icon=\"handleClickIcon\"\n></wd-input>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive, toRefs } from 'vue'\n\nexport default {\n  setup() {\n    const state = reactive({\n      value: ''\n    })\n\n    const handleClickIcon = () => {\n      console.log('click icon')\n    }\n\n    return {\n      ...toRefs(state),\n      handleClickIcon\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义展示格式的DatetimePicker\nDESCRIPTION: 使用displayFormat属性自定义选择器的展示格式，通过传入函数接收所有选中项数组，返回自定义的文本内容。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"展示格式\" :displayFormat=\"displayFormat\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nconst displayFormat = (items) => {\n  return `${items[0].label}年${items[1].label}月${items[2].label}日 ${items[3].label}:${items[4].label}`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Upload Component in Vue\nDESCRIPTION: Demonstrates the basic implementation of the Upload component with file-list to display uploaded files and an action URL for the upload destination. The handleChange event updates the fileList when files are added or removed.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/upload.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-upload :file-list=\"fileList\" image-mode=\"aspectFill\" :action=\"action\" @change=\"handleChange\"></wd-upload>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileList = ref<any[]>([\n  {\n    url: 'https://img12.360buyimg.com//n0/jfs/t1/29118/6/4823/55969/5c35c16bE7c262192/c9fdecec4b419355.jpg'\n  }\n])\n\nconst action: string = 'https://mockapi.eolink.com/zhTuw2P8c29bc981a741931bdd86eb04dc1e8fd64865cb5/upload'\n\nfunction handleChange({ fileList: files }) {\n  fileList.value = files\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal Precision for InputNumber in Vue\nDESCRIPTION: Demonstrates how to set decimal precision for the InputNumber component using the precision attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" :precision=\"2\" :step=\"0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Range Limit in CalendarView\nDESCRIPTION: Shows how to set a maximum limit for the number of days that can be selected in a range using the max-range attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"daterange\" :max-range=\"3\" v-model=\"value\" @change=\"handleChange\" />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Content Controller - TypeScript\nDESCRIPTION: TypeScript logic for controlling dynamic content visibility in sticky component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sticky.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst show = ref<boolean>(false)\n\nfunction display() {\n  show.value = true\n}\n\nonShow(() => {\n  setTimeout(display, 5000)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Operation Mode for Calendar Component\nDESCRIPTION: Disables the confirm button for immediate selection by setting show-confirm to false. Only applicable for certain calendar types.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar label=\"快捷操作\" :show-confirm=\"false\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Pressure-Sensitive Signature - Vue Template\nDESCRIPTION: Basic pressure-sensitive signature implementation with custom height setting.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/signature.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature pressure :height=\"300\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Toast in TypeScript\nDESCRIPTION: Shows how to display a warning toast by using the warning shorthand method on the toast instance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst open = () => {\n  toast.warning('Warning')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Date Selection with Calendar Component\nDESCRIPTION: Example of using the Calendar component for selecting multiple dates by setting the type to 'dates'. The v-model is bound to an array.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"dates\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number[]>([])\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Fab Configuration in TypeScript\nDESCRIPTION: TypeScript configuration for Fab component including type definitions for position, direction, and state management using refs.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/fab.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nconst { show: showToast } = useToast()\nconst type = ref<'primary' | 'success' | 'info' | 'warning' | 'error' | 'default'>('primary')\nconst position = ref<'left-top'\n  | 'right-top'\n  | 'left-bottom'\n  | 'right-bottom'\n  | 'left-center'\n  | 'right-center'\n  | 'top-center'\n  | 'bottom-center'>('left-bottom')\nconst direction = ref<'top' | 'right' | 'bottom' | 'left'>('top')\nconst disabled = ref<boolean>(false)\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Selection with Calendar Component\nDESCRIPTION: Configuration for date range selection using the 'daterange' type. The v-model is bound to an array to store the start and end dates.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"daterange\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number[]>([])\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: User Page with Notify Integration\nDESCRIPTION: Example of a user page that uses the Layout component and includes a button to trigger notifications using the useNotify hook.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notify.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n// /pages/user.vue\n<template>\n  <layout>\n    <view>User</view>\n    <wd-button type=\"primary\" @click=\"showNotify('消息通知')\">消息通知</wd-button>\n  </layout>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    // #ifdef H5\n    name: 'User',\n    // #endif\n    options: { virtualHost: true, addGlobalClass: true, styleIsolation: 'shared' }\n  }\n</script>\n\n<script setup lang=\"ts\">\n  import { useNotify } from '@/uni_modules/wot-design-uni'\n\n  const { showNotify } = useNotify()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Signature in Modal - Vue Template and TypeScript\nDESCRIPTION: Implementation showing how to use the signature component within a popup modal with proper initialization.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/signature.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"primary\" @click=\"show = true\">打开签名板</wd-button>\n\n<wd-popup \n  v-model=\"show\" \n  closable\n  safe-area-inset-bottom\n  position=\"bottom\"\n  custom-style=\"padding: 48px 20px 20px 20px; border-radius: 16px 16px 0 0;\"\n  @after-enter=\"signatureRef?.init()\"\n>\n  <wd-signature \n    ref=\"signatureRef\"\n    :height=\"300\"\n    enable-history\n    pressure\n    background-color=\"#f5f5f5\"\n    @confirm=\"handleConfirm\" \n  />\n</wd-popup>\n\n<wd-img v-if=\"img.tempFilePath\" mode=\"widthFix\" width=\"100%\" :src=\"img.tempFilePath\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport type { SignatureInstance, SignatureResult } from '@/uni_modules/wot-design-uni/components/wd-signature/types'\n\nconst show = ref(false)\nconst img = ref<Partial<SignatureResult>>({})\nconst signatureRef = ref<SignatureInstance>()\n\nfunction handleConfirm(result: SignatureResult) {\n  show.value = false\n  if (result.success) {\n    uni.previewImage({\n      urls: [result.tempFilePath]\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Step Multiples in InputNumber\nDESCRIPTION: Shows how to enforce strict step multiples for the InputNumber component using the step-strictly attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" step-strictly :step=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Two-way Binding for Upload Component\nDESCRIPTION: Shows how to implement two-way binding with v-model for the file-list property. This eliminates the need for a separate change event handler as operations like uploading and deleting automatically synchronize data.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/upload.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-upload v-model:file-list=\"fileList1\" image-mode=\"aspectFill\" :action=\"action\"></wd-upload>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileList = ref<any[]>([\n  {\n    url: 'https://img12.360buyimg.com//n0/jfs/t1/29118/6/4823/55969/5c35c16bE7c262192/c9fdecec4b419355.jpg'\n  }\n])\n\nconst action: string = 'https://mockapi.eolink.com/zhTuw2P8c29bc981a741931bdd86eb04dc1e8fd64865cb5/upload'\n```\n\n----------------------------------------\n\nTITLE: Loadmore Logic Implementation - TypeScript\nDESCRIPTION: Contains the TypeScript logic for handling scroll events, state management, and loading more content when needed.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/loadmore.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onLoad, onReachBottom } from '@dcloudio/uni-app'\n\n\nconst state = ref<string>('loading')\nconst num = ref<number>(0)\nconst max = ref<number>(60)\n\nonReachBottom(() => {\n  if (num.value === 45) {\n    state.value = 'error'\n  } else if (num.value < max.value) {\n    loadmore()\n  } else if (num.value === max.value) {\n    state.value = 'finished'\n  }\n})\n\nonLoad(() => {\n  loadmore()\n})\n\nfunction loadmore() {\n  setTimeout(() => {\n    num.value = num.value + 15\n    state.value = 'loading'\n  }, 200)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Implementation\nDESCRIPTION: Demonstrates the basic button types including primary, success, info, warning and error variants.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-button>主要按钮</wd-button>\n<wd-button type=\"success\">成功按钮</wd-button>\n<wd-button type=\"info\">信息按钮</wd-button>\n<wd-button type=\"warning\">警告按钮</wd-button>\n<wd-button type=\"error\">危险按钮</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Implementation\nDESCRIPTION: Basic usage of the Grid component with clickable items and icons. This example shows a simple one-row grid with three items.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid clickable>\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Step Size for InputNumber in Vue\nDESCRIPTION: Shows how to set the step size for the InputNumber component using the step prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" :step=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events on Swipe Action Closure in Uni-app\nDESCRIPTION: Shows how to handle the `click` event, which fires when the swipe action is closed by clicking either the action buttons ('left'/'right') or the main content area ('inside'). The `handleClick` function receives the clicked position as an argument and uses `useToast` to display it.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swipe-action.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-swipe-action @click=\"handleClick\">\n  <wd-cell title=\"Title Text\" value=\"Content\" />\n  <template #right>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #C8C7CD;\">Action1</view>\n      <view class=\"button\" style=\"background: #FFB300;\">Action2</view>\n      <view class=\"button\" style=\"background: #E2231A;\">Action3</view>\n    </view>\n  </template>\n</wd-swipe-action>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nfunction handleClick(position: string) {\n  toast.show(`Clicked ${position}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Cell Mode Radio Group Implementation\nDESCRIPTION: Implementation of a radio group in cell mode for form-style presentation. The 'cell' attribute enables form mode display with multiple radio options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/radio.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" cell>\n  <wd-radio value=\"1\">选项一</wd-radio>\n  <wd-radio value=\"2\">选项二</wd-radio>\n  <wd-radio value=\"3\">选项三</wd-radio>\n  <wd-radio value=\"4\">选项四</wd-radio>\n  <wd-radio value=\"5\">选项五</wd-radio>\n  <wd-radio value=\"6\">选项六</wd-radio>\n  <wd-radio value=\"7\">选项七</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Basic FloatingPanel Implementation with Cell Group\nDESCRIPTION: Shows basic implementation of FloatingPanel with a list of cells. The panel starts at 100px height and can be dragged up to 60% of screen height.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/floating-panel.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-floating-panel>\n  <wd-cell-group border>\n    <wd-cell v-for=\"item in data\" :key=\"item\" :title=\"item\" />\n  </wd-cell-group>\n</wd-floating-panel>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n```\n\n----------------------------------------\n\nTITLE: Using Slots for Custom Loading and Error States\nDESCRIPTION: Example showing how to use the loading and error slots to provide custom content during image loading and on load failure. Includes styling for both states and demonstrates the use of a loading component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <wd-img :width=\"100\" :height=\"100\" src=\"https://www.123.com/a.jpg\">\n    <template #error>\n      <view class=\"error-wrap\">加载失败</view>\n    </template>\n    <template #loading>\n      <view class=\"loading-wrap\">\n        <wd-loading />\n      </view>\n    </template>\n  </wd-img>\n</template>\n\n<style>\n.error-wrap {\n  width: 100%;\n  height: 100%;\n  background-color: red;\n  color: white;\n  line-height: 100px;\n  text-align: center;\n}\n\n.loading-wrap {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Dynamic IndexBar with Search Functionality\nDESCRIPTION: Implementation showing how to update IndexBar list data dynamically based on search input, including search and clear functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/index-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <wd-search hide-cancel placeholder=\"Where do I want to go?\" v-model=\"keyword\" @search=\"handleSearch\" @clear=\"handleClear\" />\n    <view class=\"wraper\">\n      <wd-index-bar sticky v-if=\"showList.length\">\n        <view v-for=\"item in showList\" :key=\"item.index\">\n          <wd-index-anchor :index=\"item.index\" />\n          <wd-cell border clickable v-for=\"city in item.data\" :key=\"city\" :title=\"city\" @click=\"handleClick(item.index, city)\"></wd-cell>\n        </view>\n      </wd-index-bar>\n    </view>\n</template>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useToast } from '@/uni_modules/wot-design-uni'\nimport { nextTick, onMounted, ref } from 'vue'\nconst { show: showToast } = useToast()\n\nonMounted(() => {\n  handleSearch()\n})\n\nconst keyword = ref('')\n\nconst showList = ref<any>([])\n\nconst indexList = [\n  {\n    index: 'A',\n    data: ['Aba', 'Alxa', 'Ali', 'Ankang', 'Anqing', 'Anshan', 'Anshun', 'Anyang', 'Macau']\n  },\n  {\n    index: 'B',\n    data: ['Beijing', 'Baiyin', 'Baoding', 'Baoji', 'Baoshan', 'Baotou', 'Bazhong', 'Beihai', 'Bengbu', 'Benxi', 'Bijie', 'Binzhou', 'Baise', 'Bozhou']\n  },\n  {\n    index: 'C',\n    data: [\n      'Chongqing',\n      'Chengdu',\n      'Changsha',\n      'Changchun',\n      'Cangzhou',\n      'Changde',\n      'Changdu',\n      'Changzhi',\n      'Changzhou',\n      'Chaohu',\n      'Chaozhou',\n      'Chengde',\n      'Chenzhou',\n      'Chifeng',\n      'Chizhou',\n      'Chongzuo',\n      'Chuxiong',\n      'Chuzhou',\n      'Chaoyang'\n    ]\n  }\n]\n\nfunction handleSearch() {\n  if (!keyword.value) {\n    showList.value = indexList\n    return\n  }\n  const list = indexList.map((item) => {\n    return {\n      index: item.index,\n      data: item.data.filter((city) => city.toLowerCase().includes(keyword.value.toLowerCase()))\n    }\n  })\n  showList.value = list.filter((item) => item.data.length)\n}\n\nfunction handleClear() {\n  handleSearch()\n}\n\nfunction handleClick(index: string, city: string) {\n  showToast({\n    msg: `${index}-${city}`\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Theme Switching Implementation\nDESCRIPTION: Vue component setup for dynamically switching between light and dark themes\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<wd-config-provider :theme=\"theme\">...</wd-config-provider>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const theme = ref('light')\n\n    setTimeout(() => {\n      theme.value = 'dark'\n    }, 1000)\n\n    return { theme }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grid with Custom Styles in HTML and SCSS\nDESCRIPTION: Illustrates how to apply custom styles to Grid items using the custom-class attribute and associated SCSS.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid>\n  <wd-grid-item\n    custom-class=\"custom-item\"\n    icon=\"search\"\n    text=\"JD.COM - A professional comprehensive online shopping mall, selling over 40.2 million products from tens of thousands of brands, covering 13 major categories including home appliances, phones, computers, mother & baby products, clothing, etc.\"\n  />\n  <wd-grid-item custom-class=\"custom-item\" icon=\"person\" text=\"Adhering to the customer-first philosophy, JD's products are genuine goods, with nationwide warranty and machine-printed invoices.\" />\n</wd-grid>\n```\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.custom-item) {\n  height: 80px !important;\n  color: #e2231a;\n  padding-left: 20px;\n  text-align: left !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Display Formatting for SelectPicker in HTML and TypeScript\nDESCRIPTION: Demonstrates how to use the display-format property to customize the display of selected items. It includes a function that formats the display string based on selected items and columns.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/select-picker.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-select-picker label=\"Display Formatting\" v-model=\"value\" :columns=\"columns\" :display-format=\"displayFormat\"></wd-select-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = ref<Record<string, any>>([{\n  value: '101',\n  label: 'Men\\'s Clothing',\n  disabled: true\n}, {\n  value: '102',\n  label: 'Luxury Goods'\n}, {\n  value: '103',\n  label: 'Women\\'s Clothing'\n}])\nconst value = ref<string[]>(['101'])\n\nconst displayFormat = (items, columns) => {\n  let showValue = ''\n  columns.forEach((column) => {\n    items.forEach((item, index) => {\n      if (column.value === item) {\n        showValue += `${item}: ${column.label} ${index + 1 < items.length ? '--' : ''} `\n      }\n    })\n  })\n  return showValue\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Options in ColPicker\nDESCRIPTION: Example demonstrating how to disable specific options within the columns array by setting the disabled property on individual items.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>([])\n\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text,\n      disabled: item.value === '140000'\n    }\n  })\n])\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tab Name Matching with String Identifiers\nDESCRIPTION: Shows how to use named tabs with string identifiers. This example sets unique name properties for each tab and binds v-model to a string value that matches one of the tab names.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\">\n  <block v-for=\"item in tabs\" :key=\"item\">\n    <wd-tab :title=\"`${item}`\" :name=\"item\">\n      <view class=\"content\">Content {{ item }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tabs = ref(['This', 'Is', 'An', 'Example'])\nconst tab = ref('Example')\n```\n\nLANGUAGE: scss\nCODE:\n```\n.content {\n  line-height: 120px;\n  text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Keyboard with Right Sidebar in Vue\nDESCRIPTION: Shows how to create a keyboard with a right sidebar by setting the mode to 'custom', useful for inputting currency amounts.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"带右侧栏的键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" mode=\"custom\" extra-key=\".\" close-text=\"完成\" @input=\"onInput\" @delete=\"onDelete\"></wd-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Column in Table Component\nDESCRIPTION: Demonstrates how to display an index column using the 'index' property. The property can be set to true for default configuration or passed an object with additional settings like alignment and width.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/table.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" height=\"328px\" :index=\"true\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"Name\" sortable></wd-table-col>\n  <wd-table-col prop=\"grade\" label=\"Score\" sortable></wd-table-col>\n  <wd-table-col prop=\"hobby\" label=\"Description\" sortable :width=\"160\"></wd-table-col>\n</wd-table>\n\n<wd-table :data=\"dataList\" height=\"328px\" :index=\"{ align: 'center', width: 200 }\">\n  <wd-table-col prop=\"name\" label=\"Name\" sortable align=\"center\"></wd-table-col>\n  <wd-table-col prop=\"grade\" label=\"Score\" sortable align=\"center\"></wd-table-col>\n  <wd-table-col prop=\"hobby\" label=\"Description\" sortable :width=\"160\"></wd-table-col>\n</wd-table>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Custom Colors\nDESCRIPTION: Demonstrates how to customize the active and inactive colors of tabbar items using the active-color and inactive-color properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabbar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\" active-color=\"#ee0a24\" inactive-color=\"#7d7e80\">\n  <wd-tabbar-item is-dot :value=\"2\" title=\"Dot\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"2\" icon=\"cart\" title=\"Category\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"30\" title=\"My\" icon=\"user\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"200\" title=\"Max Value\" icon=\"photo\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"10\" title=\"Service\" icon=\"chat\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: 引入useQueue hook (TypeScript)\nDESCRIPTION: 展示如何引入和使用useQueue hook来实现点击页面其他地方自动关闭tooltip的功能。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueue } from '@/uni_modules/wot-design-uni'\n\nconst { closeOutside } = useQueue()\n\nconst show = ref<boolean>(false)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DropMenu in Vue 3 with TypeScript\nDESCRIPTION: Demonstrates the basic setup of a DropMenu component with two DropMenuItems. It uses v-model for value binding and options for menu items. The useQueue hook is used to handle outside clicks.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/drop-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<view @click=\"closeOutside\">\n  <wd-drop-menu>\n    <wd-drop-menu-item v-model=\"value1\" :options=\"option1\" @change=\"handleChange1\" />\n    <wd-drop-menu-item v-model=\"value2\" :options=\"option2\" @change=\"handleChange2\" />\n  </wd-drop-menu>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueue } from '@/uni_modules/wot-design-uni'\n\nconst { closeOutside } = useQueue()\nconst value1 = ref<number>(0)\nconst value2 = ref<number>(0)\n\nconst option1 = ref<Record<string, any>[]>([\n  { label: 'All Products', value: 0 },\n  { label: 'New Products', value: 1 },\n  { label: 'Promotional Products', value: 2 }\n])\nconst option2 = ref<Record<string, any>[]>([\n  { label: 'Comprehensive', value: 0 },\n  { label: 'Sales', value: 1 },\n  { label: 'Listing Time', value: 2 }\n])\n\nfunction handleChange1({ value }) {\n  console.log(value)\n}\nfunction handleChange2({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Textarea with Clear Button and Character Limit\nDESCRIPTION: Implements a textarea with a clear button and character limit functionality by using the clearable, maxlength, and show-word-limit properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" :maxlength=\"120\" clearable show-word-limit />\n```\n\n----------------------------------------\n\nTITLE: Implementing Before-Close Hook for SwipeAction in HTML\nDESCRIPTION: This HTML snippet shows how to use the before-close hook with the SwipeAction component to execute custom logic before closing the swipe actions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<demo-block transparent title=\"切换按钮\">\n  <wd-swipe-action v-model=\"value\" :before-close=\"beforeClose\">\n    <template #left>\n      <view class=\"action\">\n        <view class=\"button\" style=\"background: #C8C7CD;\">操作1</view>\n        <view class=\"button\" style=\"background: #FFB300;\">操作2</view>\n        <view class=\"button\" style=\"background: #E2231A;\">操作3</view>\n      </view>\n    </template>\n    <wd-cell title=\"标题文字\" value=\"内容\" />\n    <template #right>\n      <view class=\"action\">\n        <view class=\"button\" style=\"background: #cdb86e;\">操作4</view>\n        <view class=\"button\" style=\"background: #42ffd1;\">操作5</view>\n        <view class=\"button\" style=\"background: #383fe2;\">操作6</view>\n      </view>\n    </template>\n  </wd-swipe-action>\n\n  <view class=\"button-group\">\n    <wd-button @click=\"changeState('left')\">打开左边</wd-button>\n    <wd-button @click=\"changeState('close')\">关闭所有</wd-button>\n    <wd-button @click=\"changeState('right')\">打开右边</wd-button>\n  </view>\n</demo-block>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ColPicker Component in Vue.js\nDESCRIPTION: Demonstrates the basic setup and usage of the ColPicker component, including data binding, event handling, and column change functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/col-picker.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"Select Address\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData can be referenced from the introduction at the top of this section\n// Adjust the import path according to your actual situation, don't just copy and paste\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>([])\n\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  })\n])\n\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Date Range Selection with CalendarView in Vue\nDESCRIPTION: Shows the implementation of date range selection using the CalendarView component by setting the type to 'daterange'. The v-model is bound to an array for start and end dates.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar-view.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"daterange\" v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref([])\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Picker Component with Custom Title in Vue\nDESCRIPTION: Demonstrates how to set a custom title for the Picker component using the 'title' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"Title\" :columns=\"columns\" title=\"Title Text\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Styles in TypeScript\nDESCRIPTION: Illustrates how to customize the notification's appearance and behavior, including color, position, and duration.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-notify.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nshowNotify({\n  message: '自定义颜色',\n  color: '#ad0000',\n  background: '#ffe1e1'\n})\n\nshowNotify({\n  message: '自定义位置',\n  position: 'bottom'\n})\n\nshowNotify({\n  message: '自定义时长',\n  duration: 1000\n})\n```\n\n----------------------------------------\n\nTITLE: Form Mode Radio Implementation\nDESCRIPTION: Implementation of radio group in form mode with multiple options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/radio.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" cell>\n  <wd-radio value=\"1\">Option 1</wd-radio>\n  <wd-radio value=\"2\">Option 2</wd-radio>\n  <wd-radio value=\"3\">Option 3</wd-radio>\n  <wd-radio value=\"4\">Option 4</wd-radio>\n  <wd-radio value=\"5\">Option 5</wd-radio>\n  <wd-radio value=\"6\">Option 6</wd-radio>\n  <wd-radio value=\"7\">Option 7</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Grid for Page Navigation in HTML\nDESCRIPTION: Demonstrates how to use the Grid component for page navigation with clickable items and custom link types.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid :column=\"3\">\n  <wd-grid-item icon=\"picture\" text=\"Text\" :url=\"/pages/index/index\" link-type=\"redirectTo\" clickable />\n  <wd-grid-item icon=\"picture\" text=\"Text\" :url=\"/pages/button/index\" link-type=\"redirectTo\" clickable />\n  <wd-grid-item icon=\"picture\" text=\"Text\" :url=\"/pages/icon/index\" link-type=\"redirectTo\" clickable />\n  <wd-grid-item icon=\"picture\" text=\"Text\" :url=\"/pages/toast/index\" link-type=\"redirectTo\" clickable />\n  <wd-grid-item icon=\"picture\" text=\"Text\" :url=\"/pages/action-sheet/index\" link-type=\"redirectTo\" clickable />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ActionSheet in Vue\nDESCRIPTION: Demonstrates the basic usage of the ActionSheet component with a button to trigger it and handling select events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/action-sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"show = true\">Open ActionSheet</wd-button>\n<wd-action-sheet :visible.sync=\"show\" :actions=\"actions\" @select=\"handleSelect\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive, toRefs } from 'vue'\n\nexport default {\n  setup() {\n    const state = reactive({\n      show: false,\n      actions: [\n        {\n          name: 'Option 1'\n        },\n        {\n          name: 'Option 2'\n        },\n        {\n          name: 'Option 3',\n          color: '#4D80F0'\n        }\n      ]\n    })\n\n    const handleSelect = item => {\n      console.log(item)\n    }\n\n    return {\n      ...toRefs(state),\n      handleSelect\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Column Templates in Vue Table\nDESCRIPTION: Demonstrates how to use scoped slots to create custom column templates, including complex layouts and conditional rendering.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/table.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" @sort-method=\"handleSort\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"姓名\" fixed=\"true\" width=\"320rpx\" sortable></wd-table-col>\n  <wd-table-col prop=\"grade\" label=\"分数\" width=\"220rpx\" sortable>\n    <template #value=\"{row}\">\n      <view class=\"custom-class\">\n        <text>{{ row.grade }}</text>\n        <text>同比{{ row.compare }}</text>\n      </view>\n    </template>\n  </wd-table-col>\n  <wd-table-col prop=\"hobby\" label=\"一言以蔽之\" sortable></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"求学之所\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"专业\"></wd-table-col>\n  <wd-table-col prop=\"gender\" label=\"性别\"></wd-table-col>\n  <wd-table-col prop=\"graduation\" label=\"学成时间\"></wd-table-col>\n</wd-table>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\ninterface TableData {\n  name: string\n  school: string\n  major: string\n  gender: string\n  graduation: string\n  grade: number\n  compare: string\n  hobby: string\n}\n\nconst dataList = ref<TableData[]>([\n  {\n    name: '张飞',\n    school: '武汉市阳逻杀猪学院',\n    major: '计算机科学与技术专业',\n    gender: '男',\n    graduation: '2022年1月12日',\n    grade: 56,\n    compare: '10%',\n    hobby: '燕人张飞在此！'\n  },\n  // ... more data\n])\n\nfunction handleSort(e) {\n  dataList.value = dataList.value.reverse()\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.custom-class {\n  height: 80rpx;\n  width: 220rpx;\n  display: flex;\n  flex-direction: col;\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Grid with Gutters\nDESCRIPTION: Adding spacing between grid items using the gutter property. This example creates a 3-column grid with 10px spacing between each item.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid :gutter=\"10\" :column=\"3\">\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Random Number Keyboard in Vue\nDESCRIPTION: Shows how to create a keyboard with randomly ordered number keys for enhanced security.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"随机数字键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" random-key-order @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Controlling SwipeAction State with v-model in HTML\nDESCRIPTION: This HTML code demonstrates how to use v-model to control the state of the SwipeAction component, along with buttons to change the state programmatically.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-swipe-action v-model=\"value\">\n  <template #left>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #C8C7CD;\">操作1</view>\n      <view class=\"button\" style=\"background: #FFB300;\">操作2</view>\n      <view class=\"button\" style=\"background: #E2231A;\">操作3</view>\n    </view>\n  </template>\n  <wd-cell title=\"标题文字\" value=\"内容\" />\n  <template #right>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #cdb86e;\">操作4</view>\n      <view class=\"button\" style=\"background: #42ffd1;\">操作5</view>\n      <view class=\"button\" style=\"background: #383fe2;\">操作6</view>\n    </view>\n  </template>\n</wd-swipe-action>\n\n<view class=\"button-group\">\n  <wd-button @click=\"changeState('left')\">打开左边</wd-button>\n  <wd-button @click=\"changeState('close')\">关闭所有</wd-button>\n  <wd-button @click=\"changeState('right')\">打开右边</wd-button>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Configuring Volar TypeScript Support\nDESCRIPTION: TypeScript configuration that provides Volar support for Wot Design Uni components, enabling proper type checking and autocompletion.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"types\": [\"wot-design-uni/global\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Usage with v-model in Vue\nDESCRIPTION: Basic implementation of the Switch component with v-model binding to a boolean value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/switch.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst checked = ref<boolean>(true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Two-way Binding in NumberKeyboard for Vue\nDESCRIPTION: Shows how to use v-model for two-way binding of the input value and how to limit input length using the maxlength property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/number-keyboard.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Two-way Binding\" :value=\"value1\" is-link @click=\"showKeyBoard\" />\n<wd-number-keyboard\n  v-model=\"value1\"\n  :maxlength=\"6\"\n  v-model:visible=\"visible\"\n  title=\"Keyboard Title\"\n  extra-key=\".\"\n  close-text=\"Done\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n></wd-number-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\nconst value1 = ref<string>('')\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ActionSheet with Vue in HTML\nDESCRIPTION: Basic implementation of ActionSheet component with a button trigger and event handlers for close and select actions. Displays a menu with three options, including a descriptive subname for the third option.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n<wd-button @click=\"showActions\">弹出菜单</wd-button>\n<wd-action-sheet v-model=\"show\" :actions=\"actions\" @close=\"close\" @select=\"select\" />\n```\n\n----------------------------------------\n\nTITLE: 分栏偏移布局实现 (HTML)\nDESCRIPTION: 通过设置 offset 属性实现栅格列的偏移效果。示例展示了如何设置列的偏移量，偏移计算方式与 span 相同，可以灵活控制布局中列的位置。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/layout.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-row>\n  <wd-col :span=\"4\"><view class=\"bg-dark\">span: 4</view></wd-col>\n  <wd-col :span=\"8\" :offset=\"4\"><view class=\"bg-light\">span: 8 offset: 4</view></wd-col>\n</wd-row>\n<wd-row>\n  <wd-col :span=\"8\" :offset=\"4\"><view class=\"bg-dark\">span: 8 offset: 4</view></wd-col>\n  <wd-col :span=\"8\" :offset=\"4\"><view class=\"bg-dark\">span: 8 offset: 4</view></wd-col>\n</wd-row>\n```\n\n----------------------------------------\n\nTITLE: Configuring SortButton for Reset in HTML\nDESCRIPTION: Shows how to set up the SortButton component to allow resetting to an unselected state in double arrow mode using the allow-reset attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sort-button.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-sort-button title=\"Price\" allow-reset/>\n```\n\n----------------------------------------\n\nTITLE: Basic IndexBar Implementation in Vue\nDESCRIPTION: Demonstrates the basic setup of an IndexBar component with IndexAnchor subcomponents to create a navigable list of Chinese cities grouped by their initial letters.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/index-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <view class=\"wraper\">\n    <wd-index-bar sticky>\n      <view v-for=\"item in data\" :key=\"item.index\">\n        <wd-index-anchor :index=\"item.index\" />\n        <wd-cell border clickable v-for=\"city in item.data\" :key=\"city\" :title=\"city\" @click=\"handleClick(item.index, city)\"></wd-cell>\n      </view>\n    </wd-index-bar>\n  </view>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\nimport { onMounted } from 'vue'\n\nconst data = ref([\n  {\n    index: 'A',\n    data: ['阿坝', '阿拉善', '阿里', '安康', '安庆', '鞍山', '安顺', '安阳', '澳门']\n  },\n  // ... additional data\n])\n</script>\n\n<style lang=\"scss\">\n.wraper {\n  height: calc(100vh - var(--window-top));\n  height: calc(100vh - var(--window-top) - constant(safe-area-inset-bottom));\n  height: calc(100vh - var(--window-top) - env(safe-area-inset-bottom));\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Signature Event Handlers - TypeScript\nDESCRIPTION: TypeScript implementation of signature confirmation and clear handlers with image preview functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/signature.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst img = ref<Partial<SignatureResult>>({})\n\nfunction confirm(result: SignatureResult) {\n  if (result.success) {\n    uni.previewImage({\n      urls: [result.tempFilePath]\n    })\n  }\n}\n\nfunction clear() {\n  img.value = {}\n}\n```\n\n----------------------------------------\n\nTITLE: DateTime Selection in CalendarView\nDESCRIPTION: Shows how to configure the CalendarView for datetime selection by setting type to 'datetime'. This allows selection of time down to seconds in addition to date.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"datetime\" v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref('')\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Toast Message Types\nDESCRIPTION: Demonstrates different types of toast messages including success, error, warning, and info variants\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoast.show('提示信息')\ntoast.success('操作成功')\ntoast.error('手机验证码输入错误，请重新输入')\ntoast.warning('提示信息')\ntoast.info('常规提示信息')\n```\n\n----------------------------------------\n\nTITLE: Implementing Display Formatting for Column Picker in Vue 3\nDESCRIPTION: This snippet shows how to use the display-format attribute to customize the display of selected items in a column picker. It includes both the HTML template and the TypeScript code for handling the formatting logic.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker\n  label=\"展示格式化\"\n  v-model=\"value\"\n  :columns=\"area\"\n  :column-change=\"columnChange\"\n  :display-format=\"displayFormat\"\n  @confirm=\"handleConfirm\"\n></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>(['130000', '130200', '130204'])\n\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  }),\n  findChildrenByCode(colPickerData, '130000')!.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  }),\n  findChildrenByCode(colPickerData, '130200')!.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  })\n])\n\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\n// 格式化方法\nconst displayFormat = (selectedItems: Record<string, any>[]) => {\n  return selectedItems[selectedItems.length - 2].label + '-' + selectedItems[selectedItems.length - 1].label\n}\n```\n\n----------------------------------------\n\nTITLE: Handling SwipeAction Events in TypeScript\nDESCRIPTION: This TypeScript code handles the action clicks and uses the useQueue and useToast hooks for managing the SwipeAction component's behavior.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast, useQueue } from '@/uni_modules/wot-design-uni'\n\nconst { closeOutside } = useQueue()\n\nconst toast = useToast()\n\nfunction handleAction(action: string) {\n  toast.show(`点击了${action}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Props Priority Radio Implementation\nDESCRIPTION: Implementation showing props priority between radio group and individual radio buttons.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/radio.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" shape=\"button\" disabled checked-color=\"#f00\">\n    <wd-radio value=\"1\" :disabled=\"false\" checked-color=\"#000\">Merchant Backend</wd-radio>\n    <wd-radio value=\"2\" :disabled=\"false\">WOT</wd-radio>\n    <wd-radio value=\"3\">Merchant Intelligence</wd-radio>\n  </wd-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Inline Radio Implementation\nDESCRIPTION: Implementation of radio buttons displayed inline on the same line.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/radio.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" inline>\n  <wd-radio value=\"1\">Radio 1</wd-radio>\n  <wd-radio value=\"2\">Radio 2</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Multiple Text Carousel in NoticeBar using HTML and JavaScript\nDESCRIPTION: Demonstrates how to implement a multiple text carousel in NoticeBar and handle the next event.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notice-bar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar :text=\"textArray\" prefix=\"check-outline\" @next=\"onNext\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst textArray = ref([\n  'Welcome to wot design uni',\n  'This component library is built based on uniapp ->Vue3, ts',\n  'Project address: https://github.com/Moonofweisheng/wot-design-uni',\n  'Our goal is to create the strongest uniapp component library',\n  'Sincerely invite everyone to build together',\n  'This is a message notification, this is a message notification, this is a message notification, this is a message notification, this is a message notification'\n])\n\nconst onNext = (index: number) => {\n  console.log('Show next, index: ', index)\n  console.log('Text is: ' + textArray.value[index])\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Buttons in Signature Component\nDESCRIPTION: Shows how to customize bottom buttons using the footer slot in the signature component. Includes HTML template and TypeScript for button functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/signature.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature :disabled=\"disabled\" enable-history :step=\"3\">\n  <template #footer=\"{ clear, confirm, currentStep, restore, revoke, historyList }\">\n    <wd-button block @click=\"changeDisabled\" v-if=\"disabled\">Start Signing</wd-button>\n    <block v-if=\"!disabled\">\n      <wd-button size=\"small\" plain @click=\"revoke\" :disabled=\"currentStep <= 0\">Undo</wd-button>\n      <wd-button size=\"small\" plain @click=\"restore\" :disabled=\"currentStep >= historyList.length\">Redo</wd-button>\n      <wd-button size=\"small\" plain @click=\"clear\">Clear</wd-button>\n      <wd-button size=\"small\" @click=\"confirm\">Confirm</wd-button>\n    </block>\n  </template>\n</wd-signature>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst disabled = ref(true)\n\nfunction changeDisabled() {\n  disabled.value = false\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Adjusting Bottom Line Width for Tabs\nDESCRIPTION: Shows how to use the auto-line-width property to make the bottom indicator line automatically adjust its width to match the text content width of each tab.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\" @change=\"handleChange\" auto-line-width>\n  <block v-for=\"item in tabs\" :key=\"item\">\n    <wd-tab :title=\"`${item}`\" :name=\"item\">\n      <view class=\"content\">Content {{ tab }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tabs = ref(['Wot', 'Design', 'Uni'])\nconst tab = ref('Design')\n```\n\n----------------------------------------\n\nTITLE: Customizing Notify Appearance and Behavior in TypeScript\nDESCRIPTION: Demonstrates how to customize the color, background, position, and duration of notifications using the showNotify function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notify.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nshowNotify({\n  message: 'Custom color',\n  color: '#ad0000',\n  background: '#ffe1e1'\n})\n\nshowNotify({\n  message: 'Custom position',\n  position: 'bottom'\n})\n\nshowNotify({\n  message: 'Custom duration',\n  duration: 1000\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Switch Component with v-model in HTML\nDESCRIPTION: Basic usage of the Switch component with v-model binding to a boolean value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/switch.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Skeleton Layout in HTML and TypeScript\nDESCRIPTION: Shows how to create a grid skeleton layout using the row-col attribute and defining the grid structure in TypeScript.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/skeleton.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-skeleton :row-col=\"grid\" />\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst grid = [\n  [\n    { width: '48px', height: '48px' },\n    { width: '48px', height: '48px' },\n    { width: '48px', height: '48px' },\n    { width: '48px', height: '48px' },\n    { width: '48px', height: '48px' }\n  ],\n  [\n    { width: '48px', height: '16px' },\n    { width: '48px', height: '16px' },\n    { width: '48px', height: '16px' },\n    { width: '48px', height: '16px' },\n    { width: '48px', height: '16px' }\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing DatetimePickerView Format with Formatter in Vue\nDESCRIPTION: Shows how to use a custom formatter function to modify the display format of the DatetimePickerView component. The formatter function receives 'type' and 'value' parameters and returns the display text.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker-view.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view v-model=\"value\" label=\"内部格式\" :formatter=\"formatter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\nconst formatter = (type, value) => {\n  switch (type) {\n    case 'year':\n      return value + '年'\n    case 'month':\n      return value + '月'\n    case 'date':\n      return value + '日'\n    case 'hour':\n      return value + '时'\n    case 'minute':\n      return value + '分'\n    default:\n      return value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom DropMenu Layout with SortButton\nDESCRIPTION: Shows how to implement a custom layout by combining DropMenu with SortButton using flex layout for a filtering interface.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/drop-menu.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<view style=\"display: flex; background: #fff; text-align: center;\">\n  <wd-drop-menu style=\"flex: 1; min-width: 0;\">\n    <wd-drop-menu-item v-model=\"value1\" :options=\"option\" @change=\"handleChange1\" />\n  </wd-drop-menu>\n  <view style=\"flex: 1;\">\n    <wd-sort-button v-model=\"value2\" title=\"上架时间\" @change=\"handleChange2\" />\n  </view>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Custom Layout NumberKeyboard with Sidebar\nDESCRIPTION: Implementation of number keyboard with a custom layout including a sidebar, commonly used for monetary input scenarios.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/number-keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"带右侧栏的键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" mode=\"custom\" extra-key=\".\" close-text=\"完成\" @input=\"onInput\" @delete=\"onDelete\"></wd-number-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Notify Options in Vue (App.vue)\nDESCRIPTION: Demonstrates how to set global default options for Notify and customize the app's appearance in the main App.vue file.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notify.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  import { onLaunch } from '@dcloudio/uni-app'\n  import { setNotifyDefaultOptions } from '@/uni_modules/wot-design-uni'\n\n  onLaunch(() => {\n    setNotifyDefaultOptions({\n      // #ifdef H5\n      safeHeight: 44,\n      // #endif\n      onClick: (event) => console.log('onClick', event),\n      onClosed: () => console.log('onClosed'),\n      onOpened: () => console.log('onOpened')\n    })\n    // Hide native tabBar\n    uni.hideTabBar()\n  })\n</script>\n\n<style lang=\"scss\">\n  :root, page {\n    // Brand color\n    --wot-color-theme: #1989fa;\n\n    // Module title/important text\n    --wot-color-title: #323233;\n    // // Subtitle\n    // --color-content: #969799;\n    // // Secondary content\n    // --nut-text-color: #c8c9cc;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Badge Component in HTML\nDESCRIPTION: Demonstrates how to use the Badge component to display new message counts. The modelValue property accepts both Number and String types.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/badge.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge modelValue=\"12\">\n  <wd-button size=\"small\">评论</wd-button>\n</wd-badge>\n\n<wd-badge modelValue=\"12px\">\n  <wd-button size=\"small\">评论</wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Auto Height Textarea Implementation\nDESCRIPTION: Shows how to create a textarea that automatically adjusts its height based on content by using the auto-height property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" auto-height />\n```\n\n----------------------------------------\n\nTITLE: Implementing Left and Right Swipe Actions in HTML\nDESCRIPTION: This HTML snippet shows how to implement both left and right swipe actions for the SwipeAction component, with multiple action buttons on each side.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-swipe-action>\n  <template #left>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #C8C7CD;\">操作1</view>\n      <view class=\"button\" style=\"background: #FFB300;\">操作2</view>\n      <view class=\"button\" style=\"background: #E2231A;\">操作3</view>\n    </view>\n  </template>\n  <wd-cell title=\"标题文字\" value=\"内容\" />\n  <template #right>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #cdb86e;\">操作4</view>\n      <view class=\"button\" style=\"background: #42ffd1;\">操作5</view>\n      <view class=\"button\" style=\"background: #383fe2;\">操作6</view>\n    </view>\n  </template>\n</wd-swipe-action>\n```\n\n----------------------------------------\n\nTITLE: Grid with Individual Icon and Text Slots\nDESCRIPTION: Using separate slots for icon and text elements in GridItem. This demonstrates how to customize just the icon or just the text part while keeping the overall layout structure.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid>\n  <wd-grid-item use-icon-slot text=\"文字\" v-for=\"index in 3\" :key=\"index\" icon-size=\"36px\">\n    <template #icon>\n      <image class=\"slot-img\" :src=\"joy\" />\n    </template>\n  </wd-grid-item>\n</wd-grid>\n<wd-grid>\n  <wd-grid-item use-text-slot icon=\"picture\" v-for=\"index in 3\" :key=\"index\">\n    <template #text>\n      <view class=\"text\">自定义文字插槽</view>\n    </template>\n  </wd-grid-item>\n</wd-grid>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.slot-img {\n  height: 36px;\n  width: 36px;\n  border-radius: 4px;\n}\n.text {\n  color: #ffb300;\n  margin-top: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Sidebar Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the Sidebar component wrapper and content area. It ensures the component takes up the full viewport height, accounting for any top window padding and safe area insets on mobile devices.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.wraper {\n  display: flex;\n  height: calc(100vh - var(--window-top));\n  height: calc(100vh - var(--window-top) - constant(safe-area-inset-bottom));\n  height: calc(100vh - var(--window-top) - env(safe-area-inset-bottom));\n}\n.content {\n  flex: 1;\n  background: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionSheet with Title and Custom Content in HTML\nDESCRIPTION: HTML implementation for ActionSheet with a title and custom content area, allowing for more complex content beyond simple menu options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-action-sheet v-model=\"show\" title=\"标题\" @close=\"close\">\n  <view style=\"padding: 15px 15px 150px 15px;\">内容</view>\n</wd-action-sheet>\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading Toast in TypeScript\nDESCRIPTION: Shows how to display a loading toast notification and customize its appearance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-toast.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntoast.loading('加载中...')\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoast.loading({\n  loadingType: 'ring',\n  msg: '加载中...'\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoast.close()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Container Size for Sticky Region (Wot Design Uni, SCSS)\nDESCRIPTION: Sets the .container class to a specific height (150px) and width (100vw) using SCSS to establish a fixed-size region for sticky elements. Ensures the parent container is appropriately sized to allow sticky calculations and visual consistency.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sticky.md#2025-04-23_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n.container{\\n    height: 150px;width: 100vw;\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of InputNumber Component in Vue\nDESCRIPTION: Demonstrates how to use the InputNumber component with v-model for binding input value and handling change events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Date Formatting in CalendarView\nDESCRIPTION: Demonstrates custom date formatting using the formatter function. This example adds special indicators for today, promotional dates, and range selection markers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"daterange\" v-model=\"value\" allow-same-day :formatter=\"formatter\" @change=\"handleChange\"></wd-calendar-view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref([])\n\nconst formatter = (day) => {\n  const date = new Date(day.date)\n  const now = new Date()\n\n  const year = date.getFullYear()\n  const month = date.getMonth()\n  const da = date.getDate()\n  const nowYear = now.getFullYear()\n  const nowMonth = now.getMonth()\n  const nowDa = now.getDate()\n\n  if (year === nowYear && month === nowMonth && da === nowDa) {\n    day.topInfo = '今天'\n  }\n\n  if (month === 5 && da === 18) {\n    day.topInfo = '618大促'\n  }\n\n  if (month === 10 && da === 11) {\n    day.topInfo = '京东双11'\n  }\n\n  if (day.type === 'start') {\n    day.bottomInfo = '开始'\n  }\n\n  if (day.type === 'end') {\n    day.bottomInfo = '结束'\n  }\n\n  if (day.type === 'same') {\n    day.bottomInfo = '开始/结束'\n  }\n\n  return day\n}\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Grid with Custom Content Slot in HTML and SCSS\nDESCRIPTION: Demonstrates how to use custom content in Grid items using the default slot and associated SCSS styling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid>\n  <wd-grid-item use-slot>\n    <image class=\"img\" :src=\"joy\" />\n  </wd-grid-item>\n  <wd-grid-item use-slot>\n    <image class=\"img\" :src=\"joy\" />\n  </wd-grid-item>\n  <wd-grid-item use-slot>\n    <image class=\"img\" :src=\"joy\" />\n  </wd-grid-item>\n</wd-grid>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.img {\n  width: 100%;\n  height: 90px;\n}\n```\n\n----------------------------------------\n\nTITLE: Card Style Swiper with Multiple Items\nDESCRIPTION: Implementation of card-style swiper with custom margins and multiple items display\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swiper.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"card-swiper\">\n  <wd-swiper\n    autoplay\n    v-model:current=\"current\"\n    :display-multiple-items=\"2\"\n    custom-indicator-class=\"custom-indicator-class\"\n    custom-image-class=\"custom-image\"\n    custom-next-image-class=\"custom-image-prev\"\n    custom-prev-image-class=\"custom-image-prev\"\n    :indicator=\"{ type: 'dots' }\"\n    :list=\"swiperList\"\n    previousMargin=\"24px\"\n    nextMargin=\"24px\"\n  ></wd-swiper>\n</view>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.card-swiper {\n  --wot-swiper-radius: 0;\n  --wot-swiper-item-padding: 0 24rpx;\n  --wot-swiper-nav-dot-color: #e7e7e7;\n  --wot-swiper-nav-dot-active-color: #4d80f0;\n  padding-bottom: 24rpx;\n  :deep(.custom-indicator-class) {\n    bottom: -16px;\n  }\n  :deep(.custom-image) {\n    border-radius: 12rpx;\n  }\n  :deep(.custom-image-prev) {\n    height: 168px !important;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Toast Implementation\nDESCRIPTION: Examples of using custom icons in toast messages with internal and external icon options\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/toast.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 使用组件库内部图标\ntoast.show({\n  iconClass: 'star',\n  msg: '使用组件库内部图标'\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// 使用自定义图标\ntoast.show({\n  iconClass: 'kehuishouwu',\n  classPrefix: 'fish',\n  msg: '使用自定义图标'\n})\n```\n\n----------------------------------------\n\nTITLE: Using auto-complete for Dynamic Data Loading in ColPicker\nDESCRIPTION: Implementation showing how to use the auto-complete attribute with ColPicker to dynamically load data based on the initial value, even when the columns array is empty.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" auto-complete></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nconst value = ref<string[]>([])\n\nconst area = ref<any[]>([])\n\nonMounted(async () => {\n  toast.loading('数据加载中')\n  // 模拟异步请求\n  await sleep()\n  toast.close()\n  value.value = ['150000', '150100', '150121']\n})\n\nconst columnChange: ColPickerColumnChange = async ({ selectedItem, resolve, finish }) => {\n  // 模拟异步请求\n\n  await sleep(0.3)\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\n\nfunction sleep(second: number = 1) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true)\n    }, 1000 * second)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Notify Functions in TypeScript\nDESCRIPTION: Demonstrates how to import and use the showNotify and closeNotify functions from the wot-design-uni module.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notify.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNotify } from '@/uni_modules/wot-design-uni'\n\nconst { showNotify, closeNotify } = useNotify()\n\n// Automatically close after 3 seconds\nshowNotify('Notification content')\n\n// Actively close\ncloseNotify()\n```\n\n----------------------------------------\n\nTITLE: Configuring DatetimePickerView for Date Type in Vue\nDESCRIPTION: Shows how to set up the DatetimePickerView component to display only year, month, and day using the 'date' type.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker-view.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view type=\"date\" v-model=\"value\" label=\"年月日\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n```\n\n----------------------------------------\n\nTITLE: Required Input Field\nDESCRIPTION: Input field with required styling when a label is set, using the required attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\" placeholder=\"请输入...\" label=\"必填\" required></wd-input>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Columns in Table Component\nDESCRIPTION: Demonstrates how to set a fixed column in the table using the 'fixed' attribute on a table column.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/table.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"姓名\" fixed></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"求学之所\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"专业\"></wd-table-col>\n</wd-table>\n```\n\n----------------------------------------\n\nTITLE: Fixed Navbar with Safe Area Support\nDESCRIPTION: Demonstrates how to create a fixed Navbar with placeholder space and top safe area inset support.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/navbar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar fixed placeholder title=\"Navbar 导航条\" left-arrow safeAreaInsetTop></wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Basic NumberKeyboard Implementation\nDESCRIPTION: Basic implementation of the number keyboard with visibility control and event handlers for input and delete actions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/number-keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"默认键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" @input=\"onInput\" @delete=\"onDelete\"></wd-number-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: PNPM Configuration for Component Auto-import\nDESCRIPTION: NPMRC configuration required when using pnpm with unplugin-vue-components to ensure proper hoisting of Vue-related packages.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n// .npmrc\npublic-hoist-pattern[]=@vue*\n// or\n// shamefully-hoist = true\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic PickerView in HTML and TypeScript\nDESCRIPTION: Demonstrates basic usage of PickerView with a single column of string options. It includes setting up the component, binding a value, and handling the change event.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker-view.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" v-model=\"value\" @change=\"onChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nconst toast = useToast()\nconst columns = ref(['Option 1', 'Option 2', 'Option 3', 'Option 4', 'Option 5', 'Option 6', 'Option 7'])\nconst value3 = ref<string>('')\nfunction onChange({picker, value, index}) {\n  toast.show(`Current selected: ${value}, Index: ${index}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Different Notification Types in TypeScript\nDESCRIPTION: Shows how to use different notification types (primary, success, danger, warning) with the showNotify function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-notify.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 主要通知\nshowNotify({ type: 'primary', message: '通知内容' })\n\n// 成功通知\nshowNotify({ type: 'success', message: '通知内容' })\n\n// 危险通知\nshowNotify({ type: 'danger', message: '通知内容' })\n\n// 警告通知\nshowNotify({ type: 'warning', message: '通知内容' })\n```\n\n----------------------------------------\n\nTITLE: Custom Left Slot in Search Component\nDESCRIPTION: Shows how to use a custom left slot in the search component with a popover menu for search type selection.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/search.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-search v-model=\"value\">\n  <template #prefix>\n    <wd-popover mode=\"menu\" :content=\"menu\" @menuclick=\"changeSearchType\">\n      <view class=\"search-type\">\n        <text>{{ searchType }}</text>\n        <wd-icon custom-class=\"icon-arrow\" name=\"fill-arrow-down\"></wd-icon>\n      </view>\n    </wd-popover>\n  </template>\n</wd-search>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchType = ref<string>('全部')\nconst value = ref<string>('')\nconst menu = ref([\n  {\n    content: '全部'\n  },\n  {\n    content: '订单号'\n  },\n  {\n    content: '退款单号'\n  }\n])\n\nfunction changeSearchType({ item, index }) {\n  searchType.value = item.content\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n.search-type {\n  position: relative;\n  height: 30px;\n  line-height: 30px;\n  padding: 0 8px 0 16px;\n}\n.search-type::after {\n  position: absolute;\n  content: '';\n  width: 1px;\n  right: 0;\n  top: 5px;\n  bottom: 5px;\n  background: rgba(0, 0, 0, 0.25);\n}\n.search-type {\n  :deep(.icon-arrow) {\n    display: inline-block;\n    font-size: 20px;\n    vertical-align: middle;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useColPickerData Hook in TypeScript\nDESCRIPTION: A custom hook that uses @vant/area-data to construct and manage data for the ColPicker component. It includes functions for finding child nodes by code.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/col-picker.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// You can place this code in src/hooks/useColPickerData.ts in your project\nimport { useCascaderAreaData } from '@vant/area-data'\n\nexport type CascaderOption = {\n  text: string\n  value: string\n  children?: CascaderOption[]\n}\n\n/**\n * Use '@vant/area-data' as data source to construct ColPicker component data\n * @returns\n */\nexport function useColPickerData() {\n  // '@vant/area-data' data source\n  const colPickerData: CascaderOption[] = useCascaderAreaData()\n\n  // Find child nodes by code, return all nodes if no code provided\n  function findChildrenByCode(data: CascaderOption[], code?: string): CascaderOption[] | null {\n    if (!code) {\n      return data\n    }\n    for (const item of data) {\n      if (item.value === code) {\n        return item.children || null\n      }\n      if (item.children) {\n        const childrenResult = findChildrenByCode(item.children, code)\n        if (childrenResult) {\n          return childrenResult\n        }\n      }\n    }\n    return null\n  }\n\n  return { colPickerData, findChildrenByCode }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Type DatetimePickerView\nDESCRIPTION: Implementation of a date-only picker view that displays year, month, and day.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker-view.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view type=\"date\" v-model=\"value\" label=\"Year Month Day\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n```\n\n----------------------------------------\n\nTITLE: Custom Range Selection Tab Label in DatetimePicker\nDESCRIPTION: Shows how to customize the display format of the range selection tab labels using a display-format-tab-label function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"Range Tab Display Format\" :display-format-tab-label=\"displayFormatTabLabel\" @confirm=\"handleConfirm\"></wd-datetime-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<any[]>(['', Date.now()])\n\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n\nconst displayFormatTabLabel = (items) => {\n  return `${items[0].label}Year${items[1].label}Month${items[2].label}Day ${items[3].label}:${items[4].label}`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popup Implementation - HTML\nDESCRIPTION: Demonstrates the basic usage of the popup component with bottom positioning and content display.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/popup.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup :visible.sync=\"show\" position=\"bottom\">\n  <view style=\"height: 200px; text-align: center; line-height: 200px;\">\n    Content\n  </view>\n</wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Toast in TypeScript\nDESCRIPTION: Shows how to display a success toast by setting the type parameter to 'success'. This uses the success shorthand method on the toast instance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst open = () => {\n  toast.success('Success')\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling styleIsolation in Vue Custom Components for Vue 3.2 and Below\nDESCRIPTION: Code showing how to enable the styleIsolation: 'shared' option in Vue 3.2 and below when using Wot Design Uni components in a custom component to allow overriding styles.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<wd-button type=\"primary\">主要按钮</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// vue\n<script lang=\"ts\">\nexport default {\n  options: {\n    styleIsolation: 'shared'\n  }\n}\n</script>\n<script lang=\"ts\" setup>\n</script>\n```\n\nLANGUAGE: scss\nCODE:\n```\n/* 组件样式 */\n:deep(.wd-button) {\n  color: red !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Implementation in Vue\nDESCRIPTION: Shows basic usage of the Toast component with a button trigger and component import\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n<wd-button @click=\"showToast\">toast</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nfunction showToast() {\n  toast.show('提示信息')\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Usage in HTML\nDESCRIPTION: Demonstrates the basic implementation of tags with different types (default, primary, danger, warning, success).\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag custom-class=\"space\">Tag</wd-tag>\n<wd-tag custom-class=\"space\" type=\"primary\">Tag</wd-tag>\n<wd-tag custom-class=\"space\" type=\"danger\">Tag</wd-tag>\n<wd-tag custom-class=\"space\" type=\"warning\">Tag</wd-tag>\n<wd-tag custom-class=\"space\" type=\"success\">Tag</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Skeleton Styles in HTML\nDESCRIPTION: Demonstrates how to use the wd-skeleton component with different themes like avatar, image, text, and paragraph.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/skeleton.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n// 头像骨架屏\n<wd-skeleton theme=\"avatar\" />\n// 图片骨架屏\n<wd-skeleton theme=\"image\" />\n// 文本骨架屏\n<wd-skeleton theme=\"text\" />\n// 段落骨架屏\n<wd-skeleton theme=\"paragraph\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of SortButton in HTML and TypeScript\nDESCRIPTION: Demonstrates the basic implementation of the SortButton component using v-model for state binding. The value represents the sorting state: -1 for descending, 0 for unselected, and 1 for ascending order.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sort-button.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-sort-button title=\"价格\" v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(0)\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Different Toast Types in TypeScript\nDESCRIPTION: Shows how to use various toast types including success, error, warning, and info.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-toast.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoast.show('提示信息')\ntoast.success('操作成功')\ntoast.error('手机验证码输入错误，请重新输入')\ntoast.warning('提示信息')\ntoast.info('常规提示信息')\n```\n\n----------------------------------------\n\nTITLE: Customizing Notify Types in TypeScript\nDESCRIPTION: Shows how to use different notification types (primary, success, warning, danger) with the showNotify function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notify.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Primary notification\nshowNotify({ type: 'primary', message: 'Notification content' })\n\n// Success notification\nshowNotify({ type: 'success', message: 'Notification content' })\n\n// Danger notification\nshowNotify({ type: 'danger', message: 'Notification content' })\n\n// Warning notification\nshowNotify({ type: 'warning', message: 'Notification content' })\n```\n\n----------------------------------------\n\nTITLE: Custom Input with Prefix and Suffix\nDESCRIPTION: Implementation showing how to add custom content before and after the input field using slots.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\" label=\"Custom Input\">\n  <template #prefix>\n    <view style=\"padding: 0 10px;\">Prefix</view>\n  </template>\n  <template #suffix>\n    <view style=\"padding: 0 10px;\">Suffix</view>\n  </template>\n</wd-input>\n```\n\n----------------------------------------\n\nTITLE: Disabled DropMenu Item Implementation\nDESCRIPTION: Demonstrates how to disable a DropMenuItem using the disabled property while keeping other menu items active.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/drop-menu.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-drop-menu>\n  <wd-drop-menu-item v-model=\"value1\" disabled :options=\"option2\" @change=\"handleChange1\" />\n  <wd-drop-menu-item v-model=\"value2\" :options=\"option1\" @change=\"handleChange2\" />\n</wd-drop-menu>\n```\n\n----------------------------------------\n\nTITLE: ID Card NumberKeyboard Implementation\nDESCRIPTION: Special keyboard configuration for ID card input with 'X' as an extra key.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/number-keyboard.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"身份证键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" extra-key=\"X\" close-text=\"完成\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Grid with Individual Slots in HTML and SCSS\nDESCRIPTION: Shows how to use individual icon and text slots in Grid items, along with associated SCSS styling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid>\n  <wd-grid-item use-icon-slot text=\"Text\" v-for=\"index in 3\" :key=\"index\" icon-size=\"36px\">\n    <template #icon>\n      <image class=\"slot-img\" :src=\"joy\" />\n    </template>\n  </wd-grid-item>\n</wd-grid>\n<wd-grid>\n  <wd-grid-item use-text-slot icon=\"picture\" v-for=\"index in 3\" :key=\"index\">\n    <template #text>\n      <view class=\"text\">Custom Text Slot</view>\n    </template>\n  </wd-grid-item>\n</wd-grid>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.slot-img {\n  height: 36px;\n  width: 36px;\n  border-radius: 4px;\n}\n.text {\n  color: #ffb300;\n  margin-top: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Slot Content with Skeleton in HTML and JavaScript\nDESCRIPTION: Shows how to use slot content with the skeleton component, which is displayed when loading is complete.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/skeleton.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-skeleton \n  :row-col=\"[\n    [\n      { width: '48px', height: '48px' },\n      { width: '48px', height: '48px' },\n      { width: '48px', height: '48px' },\n      { width: '48px', height: '48px' },\n      { width: '48px', height: '48px' }\n    ],\n    [\n      { width: '48px', height: '16px' },\n      { width: '48px', height: '16px' },\n      { width: '48px', height: '16px' },\n      { width: '48px', height: '16px' },\n      { width: '48px', height: '16px' }\n    ]\n  ]\" \n  :loading=\"showContent\"\n>\n  <wd-grid>\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"Text\" />\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"Text\" />\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"Text\" />\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"Text\" />\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"Text\" />\n  </wd-grid>\n</wd-skeleton>\n```\n\nLANGUAGE: js\nCODE:\n```\nconst showContent = ref(true)\n```\n\n----------------------------------------\n\nTITLE: Custom Length Password Input\nDESCRIPTION: Implementation showing how to customize the password input length using the length property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/password-input.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- 密码输入框 -->\n<wd-password-input v-model=\"value\" :length=\"4\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n<wd-number-keyboard v-model=\"value\" v-model:visible=\"showKeyboard\" :maxlength=\"4\" @blur=\"showKeyboard = false\"></wd-number-keyboard>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic SelectPicker in HTML and TypeScript\nDESCRIPTION: Demonstrates the basic usage of SelectPicker component with a label, v-model binding, and columns data. It also includes a change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/select-picker.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-select-picker label=\"Basic Usage\" v-model=\"value\" :columns=\"columns\" @change=\"handleChange\"></wd-select-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = ref<Record<string, any>>([{\n  value: '101',\n  label: 'Men\\'s Clothing'\n}, {\n  value: '102',\n  label: 'Luxury Goods'\n}, {\n  value: '103',\n  label: 'Women\\'s Clothing'\n}])\nconst value = ref<string[]>(['101'])\n\nfunction handleChange({ value }) {\n  toast.show('Selected ' + value)\n}\n```\n\n----------------------------------------\n\nTITLE: Using virtualHost in Vue 2 for Mini Program Component Rendering\nDESCRIPTION: Configuration to enable virtualHost in Vue 2 to improve component rendering in WeChat mini programs by removing extra wrapper nodes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/common-problems.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Using virtualHost in vue2\nexport default {\n  data() {\n    return {}\n  },\n  options: {\n    virtualHost: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 基本用法弹出层实现 (HTML)\nDESCRIPTION: 展示基本弹出层的实现方式，使用v-model绑定显示状态，通过自定义样式设置圆角。包含关闭事件处理。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/popup.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup v-model=\"show\" custom-style=\"border-radius:32rpx;\" @close=\"handleClose\">\n  <text class=\"custom-txt\">弹弹弹</text>\n</wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Upward Direction DropMenu Implementation\nDESCRIPTION: Shows how to configure DropMenu to expand upward instead of the default downward direction using the direction property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/drop-menu.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-drop-menu direction=\"up\">\n  <wd-drop-menu-item v-model=\"value1\" :options=\"option1\" @change=\"handleChange1\" />\n  <wd-drop-menu-item v-model=\"value2\" :options=\"option2\" @change=\"handleChange2\" />\n</wd-drop-menu>\n```\n\n----------------------------------------\n\nTITLE: Basic Password Input Implementation with Number Keyboard\nDESCRIPTION: Shows the basic setup of password input component with number keyboard integration, demonstrating the core functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/password-input.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Password input box -->\n<wd-password-input v-model=\"value\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n<!-- Number keyboard -->\n<wd-number-keyboard v-model=\"value\" v-model:visible=\"showKeyboard\" :maxlength=\"4\" @blur=\"showKeyboard = false\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst value = ref<string>('123')\nconst showKeyboard = ref<boolean>(true)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons in Toast Notifications\nDESCRIPTION: Demonstrates how to use custom icons in toast notifications, including both internal and external icons.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-toast.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 使用组件库内部图标\ntoast.show({\n  iconClass: 'star',\n  msg: '使用组件库内部图标'\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// 使用自定义图标\ntoast.show({\n  iconClass: 'kehuishouwu',\n  classPrefix: 'fish',\n  msg: '使用自定义图标'\n})\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for UniKuRoot\nDESCRIPTION: Vite configuration setup for using uni-ku-root plugin\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport UniKuRoot from '@uni-ku/root'\nimport Uni from '@dcloudio/vite-plugin-uni'\n\nexport default defineConfig({\n  plugins: [\n    UniKuRoot(),\n    Uni()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Notify Component with Custom Content in Vue\nDESCRIPTION: Shows how to use the Notify component directly in a Vue template, allowing for custom content and styling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notify.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"primary\" @click=\"showNotify\">Call using Notify component</wd-button>\n<wd-notify type=\"success\" :safe-height=\"safeHeight\" v-model:visible=\"visible\">\n  <wd-icon name=\"check-outline\" size=\"inherit\" color=\"inherit\" />\n  Success notification\n</wd-notify>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref, onMounted } from 'vue'\n\nlet timer: ReturnType<typeof setTimeout>\nexport default {\n  setup() {\n    const visible = ref(false)\n    const safeHeight = ref(0)\n\n    const showNotify = () => {\n      visible.value = true\n      if (timer) clearTimeout(timer)\n      timer = setTimeout(() => {\n        visible.value = false\n      }, 3000)\n    }\n\n    onMounted(() => {\n      // #ifdef H5\n      safeHeight.value = 44\n      // #endif\n    })\n\n    return {\n      visible,\n      showNotify,\n      safeHeight\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 禁用遮罩的弹出层 (HTML)\nDESCRIPTION: 通过设置modal属性为false，完全禁用遮罩层，使用户可以与底层内容交互。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/popup.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup v-model=\"show\" position=\"bottom\" :modal=\"false\" closable custom-style=\"height: 200px;\" @close=\"handleClose\"></wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Notification Types in TypeScript\nDESCRIPTION: Demonstrates the four supported notification types: primary, success, warning, and danger, with danger being the default.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notify.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// 主要通知\nshowNotify({ type: 'primary', message: '通知内容' })\n\n// 成功通知\nshowNotify({ type: 'success', message: '通知内容' })\n\n// 危险通知\nshowNotify({ type: 'danger', message: '通知内容' })\n\n// 警告通知\nshowNotify({ type: 'warning', message: '通知内容' })\n```\n\n----------------------------------------\n\nTITLE: Modifying Loading Indicator Type in HTML\nDESCRIPTION: Changes the type of loading indicator to 'outline', which is suitable for general module loading.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/loading.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-loading type=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: Using useToast Hook in TypeScript\nDESCRIPTION: Demonstrates how to import and use the useToast hook to display a basic toast notification.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nfunction showToast() {\n  toast.show('提示信息')\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Toast in TypeScript\nDESCRIPTION: Shows how to display an error toast by using the error shorthand method on the toast instance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst open = () => {\n  toast.error('Error')\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Grid Items\nDESCRIPTION: Using custom-class to apply custom styling to GridItems. This example demonstrates how to modify the height, color, padding, and text alignment of grid items.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid>\n  <wd-grid-item\n    custom-class=\"custom-item\"\n    icon=\"search\"\n    text=\"京东JD.COM-专业的综合网上购物商城，销售超数万品牌、4020万种商品，囊括家电、手机、电脑、母婴、服装等13大品类。\"\n  />\n  <wd-grid-item custom-class=\"custom-item\" icon=\"person\" text=\"秉承客户为先的理念，京东所售商品为正品行货、全国联保、机打发票。\" />\n</wd-grid>\n```\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.custom-item) {\n  height: 80px !important;\n  color: #e2231a;\n  padding-left: 20px;\n  text-align: left !important;\n}\n```\n\n----------------------------------------\n\nTITLE: History-Enabled Signature - Vue Template\nDESCRIPTION: Implementation of signature component with history tracking enabled for undo/redo operations.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/signature.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature enable-history background-color=\"#f5f5f5\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Icons in Sidebar Component with Vue 3\nDESCRIPTION: This snippet demonstrates how to use custom icons in a Sidebar component. It sets up a sidebar with multiple items, each having a custom icon. The content area uses a scroll view to display categorized information corresponding to each sidebar item.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"wraper\">\n  <wd-sidebar v-model=\"active\" @change=\"handleChange\">\n    <wd-sidebar-item v-for=\"(item, index) in categories\" :key=\"index\" :value=\"index\" :label=\"item.label\" :icon=\"item.icon\" />\n  </wd-sidebar>\n  <scroll-view class=\"content\" scroll-y scroll-with-animation :scroll-top=\"scrollTop\" :throttle=\"false\" @scroll=\"onScroll\">\n    <view v-for=\"(item, index) in categories\" :key=\"index\" class=\"category\">\n      <wd-cell-group :title=\"item.title\" border>\n        <wd-cell v-for=\"(cell, index) in item.items\" :key=\"index\" :title=\"cell.title\" :label=\"cell.label\">\n          <wd-icon name=\"github-filled\" size=\"24px\"></wd-icon>\n        </wd-cell>\n      </wd-cell-group>\n    </view>\n  </scroll-view>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Setting Active Sidebar Item in TypeScript\nDESCRIPTION: Shows how to set the active sidebar item using a ref in TypeScript.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = ref(0)\n```\n\n----------------------------------------\n\nTITLE: Interactive Cell Component - HTML/TypeScript\nDESCRIPTION: Implementation of clickable cells with toast notifications\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/cell.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n<wd-cell title=\"标题文字\" value=\"内容\" clickable @click=\"toast\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nconst toast = useToast()\n\nfunction showToast() {\n  toast.show('点击')\n}\n```\n\n----------------------------------------\n\nTITLE: Basic IndexBar Implementation in Vue\nDESCRIPTION: Shows basic implementation of the IndexBar component with static data. Demonstrates wrapping with wd-index-bar and using wd-index-anchor for index classification.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/index-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <view class=\"wraper\">\n    <wd-index-bar sticky>\n      <view v-for=\"item in data\" :key=\"item.index\">\n        <wd-index-anchor :index=\"item.index\" />\n        <wd-cell border clickable v-for=\"city in item.data\" :key=\"city\" :title=\"city\" @click=\"handleClick(item.index, city)\"></wd-cell>\n      </view>\n    </wd-index-bar>\n  </view>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\nimport { onMounted } from 'vue'\n\nconst data = ref([\n  {\n    index: 'A',\n    data: ['Aba', 'Alxa', 'Ali', 'Ankang', 'Anqing', 'Anshan', 'Anshun', 'Anyang', 'Macau']\n  },\n  {\n    index: 'B',\n    data: ['Beijing', 'Baiyin', 'Baoding', 'Baoji', 'Baoshan', 'Baotou', 'Bazhong', 'Beihai', 'Bengbu', 'Benxi', 'Bijie', 'Binzhou', 'Baise', 'Bozhou']\n  }\n])\n</script>\n\n<style lang=\"scss\">\n.wraper {\n  height: calc(100vh - var(--window-top));\n  height: calc(100vh - var(--window-top) - constant(safe-area-inset-bottom));\n  height: calc(100vh - var(--window-top) - env(safe-area-inset-bottom));\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for InputNumber in Vue\nDESCRIPTION: Demonstrates setting minimum and maximum values for the InputNumber component using min and max props.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" :min=\"3\" :max=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Steps with Custom Icons\nDESCRIPTION: Shows how to customize step icons using the icon property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/steps.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\"1\" align-center>\n  <wd-step icon=\"invite\" />\n  <wd-step icon=\"link\" />\n  <wd-step icon=\"clock\" />\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Rectangle Card Implementation in HTML\nDESCRIPTION: Demonstrates a more complex rectangle card type with custom title, content with image and text, and footer with multiple buttons.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/card.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-card type=\"rectangle\">\n  <template #title>\n    <view class=\"title\">\n      <view>Service expires on 2020-02-03</view>\n      <view class=\"title-tip\">\n        <wd-icon name=\"warning\" size=\"14px\" custom-style=\"vertical-align: bottom\" />\n        You can use this service on your computer\n      </view>\n    </view>\n  </template>\n  <view style=\"height: 40px;\" class=\"content\">\n    <image\n      src=\"https://img11.360buyimg.com/imagetools/jfs/t1/143248/37/5695/265818/5f3a8546E98d998a4/745897ca9c9e474b.jpg\"\n      width=\"40\"\n      height=\"40\"\n      alt=\"joy\"\n      style=\"border-radius: 4px; margin-right: 12px;\"\n    />\n    <view>\n      <view style=\"color: rgba(0,0,0,0.85); font-size: 16px;\">Smart Marketing</view>\n      <view style=\"color: rgba(0,0,0,0.25); font-size: 12px;\">Premium Version - Quick Fan Growth | One Year Period</view>\n    </view>\n  </view>\n\n  <template #footer>\n    <view>\n      <wd-button size=\"small\" style=\"margin-right: 8px;\">Rate</wd-button>\n      <wd-button size=\"small\" plain>Use Now</wd-button>\n    </view>\n  </template>\n</wd-card>\n```\n\n----------------------------------------\n\nTITLE: Tags with Icons\nDESCRIPTION: Shows how to add icons to tags using both icon property and icon slot.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag custom-class=\"space\" icon=\"clock\" mark>Tag</wd-tag>\n<wd-tag custom-class=\"space\" mark use-icon-slot>\n  <text>Slot</text>\n  <template #icon>\n    <wd-icon name=\"clock\" />\n  </template>\n</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Custom Content Popover with Styling\nDESCRIPTION: Shows how to implement a Popover with custom nested content using slots and custom styling. Includes both template and style definitions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/popover.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-popover use-content-slot>\n  <template #content>\n    <view class=\"pop-content\">This is content with custom style.</view>\n  </template>\n  <wd-button>Click to show</wd-button>\n</wd-popover>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.pop-content {\n  /* Required start */\n  position: relative;\n  z-index: 500;\n  border-radius: 4px;\n  /* Required end */\n  background: #fff;\n  color: #8268de;\n  font-weight: bolder;\n  padding: 10px;\n  width: 150px;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Component Usage in Wot Design Uni\nDESCRIPTION: Example of basic Img component usage with width and height properties. This demonstrates how to use the component with base64 encoded image data.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" :src=\"joy\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// import { joy } from '../images/joy'\nconst joy = 'data:image/jpeg;base64,...' // 图片文件base64\n```\n\n----------------------------------------\n\nTITLE: Custom Loading and Error Slots in Vue\nDESCRIPTION: Example showing how to implement custom loading and error states using slots with loading indicator and error message.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/img.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <wd-img :width=\"100\" :height=\"100\" src=\"https://www.123.com/a.jpg\">\n    <template #error>\n      <view class=\"error-wrap\">Loading Failed</view>\n    </template>\n    <template #loading>\n      <view class=\"loading-wrap\">\n        <wd-loading />\n      </view>\n    </template>\n  </wd-img>\n</template>\n\n<style>\n.error-wrap {\n  width: 100%;\n  height: 100%;\n  background-color: red;\n  color: white;\n  line-height: 100px;\n  text-align: center;\n}\n\n.loading-wrap {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Vertical Steps Layout - Wot Design - HTML\nDESCRIPTION: Shows usage of the vertical attribute to switch the wd-steps bar from horizontal to vertical orientation. Each step includes a description. Suitable for processes better visualized top-down. Requires Vue with Wot Design components.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/steps.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\\\"1\\\" vertical>\\n  <wd-step description=\\\"Register an account\\\" />\\n  <wd-step description=\\\"Login and bind phone number\\\" />\\n  <wd-step description=\\\"Complete personal information\\\" />\\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Left-aligned Tabs with Horizontal Scrolling\nDESCRIPTION: Shows how to create left-aligned tabs with horizontal scrolling capability using the slidable=\"always\" property. This is useful when you have many tabs that would otherwise overflow the container.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\" slidable=\"always\">\n  <block v-for=\"item in 5\" :key=\"item\">\n    <wd-tab :title=\"`Large Tab ${item}`\">\n      <view class=\"content\">Content {{ item }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\n----------------------------------------\n\nTITLE: Square Grid Implementation\nDESCRIPTION: Creating a grid with square-shaped items using the square property. This ensures all grid items have equal width and height regardless of content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid square :column=\"3\">\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Fab Custom Styles in SCSS\nDESCRIPTION: Custom SCSS styling for Fab buttons including dimensions, border radius and spacing adjustments.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/fab.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.custom-button) {\n  min-width: auto !important;\n  box-sizing: border-box;\n  width: 32px !important;\n  height: 32px !important;\n  border-radius: 16px !important;\n  margin: 8rpx;\n}\n\n:deep(.custom-radio) {\n  height: 32px !important;\n  line-height: 32px !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the before-close Hook in Swipe Action for Uni-app\nDESCRIPTION: Demonstrates how to use the `before-close` prop to execute custom logic before the swipe action closes. The provided `beforeClose` function receives the `reason` for closing ('click', 'swipe', 'value') and the `position` ('left', 'right') and displays a toast message indicating the cause. Requires `useToast` from the library and `ref` from Vue.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swipe-action.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<demo-block transparent title=\"Toggle Buttons\">\n  <wd-swipe-action v-model=\"value\" :before-close=\"beforeClose\">\n    <template #left>\n      <view class=\"action\">\n        <view class=\"button\" style=\"background: #C8C7CD;\">Action1</view>\n        <view class=\"button\" style=\"background: #FFB300;\">Action2</view>\n        <view class=\"button\" style=\"background: #E2231A;\">Action3</view>\n      </view>\n    </template>\n    <wd-cell title=\"Title Text\" value=\"Content\" />\n    <template #right>\n      <view class=\"action\">\n        <view class=\"button\" style=\"background: #cdb86e;\">Action4</view>\n        <view class=\"button\" style=\"background: #42ffd1;\">Action5</view>\n        <view class=\"button\" style=\"background: #383fe2;\">Action6</view>\n      </view>\n    </template>\n  </wd-swipe-action>\n\n  <view class=\"button-group\">\n    <wd-button @click=\"changeState('left')\">Open Left</wd-button>\n    <wd-button @click=\"changeState('close')\">Close All</wd-button>\n    <wd-button @click=\"changeState('right')\">Open Right</wd-button>\n  </view>\n</demo-block>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nconst value = ref<string>('close')\nfunction changeState(position: string) {\n  value.value = position\n}\n\nconst beforeClose = (reason, position) => {\n  if (reason === 'click') {\n    toast.show(`${reason} ${position} caused sliding button to close`)\n  } else {\n    toast.show(`${reason} caused ${position} sliding button to close`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Usage in HTML\nDESCRIPTION: Demonstrates the basic usage of the Grid component with icon and text properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid>\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog with Title\nDESCRIPTION: Demonstrates how to create an alert dialog with both title and message content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/message-box.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"alert\">alert</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction alert() {\n  message.alert({\n    msg: 'Prompt text',\n    title: 'Title'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Overlay in HTML\nDESCRIPTION: Demonstrates the basic usage of the Overlay component, controlled by the 'show' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/overlay.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"primary\" @click=\"show = true\">Show Overlay</wd-button>\n<wd-overlay :show=\"show\" @click=\"show = false\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Buttons\nDESCRIPTION: Demonstrates custom styling using custom-class and SCSS for Material Design 3 shadow effect.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"page-class\">\n  <wd-button custom-class=\"custom-shadow\">主要按钮</wd-button>\n  <wd-button type=\"success\" custom-class=\"custom-shadow\">成功按钮</wd-button>\n  <wd-button type=\"info\" custom-class=\"custom-shadow\">信息按钮</wd-button>\n  <wd-button type=\"warning\" custom-class=\"custom-shadow\">警告按钮</wd-button>\n  <wd-button type=\"error\" custom-class=\"custom-shadow\">危险按钮</wd-button>\n</view>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.page-class {\n  :deep() {\n    .custom-shadow {\n      box-shadow: 0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Notification Configuration in TypeScript\nDESCRIPTION: Shows how to customize the appearance and behavior of notifications including custom colors, position, and display duration.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notify.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nshowNotify({\n  message: '自定义颜色',\n  color: '#ad0000',\n  background: '#ffe1e1'\n})\n\nshowNotify({\n  message: '自定义位置',\n  position: 'bottom'\n})\n\nshowNotify({\n  message: '自定义时长',\n  duration: 1000\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Row Panel ActionSheet in HTML\nDESCRIPTION: HTML implementation for ActionSheet with multi-row panels, allowing for grouped menu options with icons and titles across multiple rows.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"showActions\">弹出菜单</wd-button>\n<wd-action-sheet v-model=\"show\" :panels=\"panels\" @close=\"close\" @select=\"select\" />\n```\n\n----------------------------------------\n\nTITLE: Theme Toggle Component\nDESCRIPTION: Vue component implementation for theme toggling\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTheme } from '@/composables/useTheme'\n\nconst { theme, toggleTheme } = useTheme()\n</script>\n\n<template>\n  <button @click=\"toggleTheme\">\n    切换主题，当前模式：{{ theme }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Navbar with Right Button\nDESCRIPTION: Implementation of a Navbar with both left and right buttons, integrated with Toast functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/navbar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast></wd-toast>\n\n<wd-navbar title=\"标题\" left-text=\"返回\" left-arrow right-text=\"按钮\" @click-left=\"handleClickLeft\" @click-right=\"handleClickRight\"></wd-navbar>\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst { show: showToast } = useToast()\n\n\nfunction handleClickRight() {\n  showToast('按钮')\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CountTo Usage with Vue\nDESCRIPTION: Demonstrates basic usage of CountTo component with various configurations including endVal, prefix, suffix, decimals, and color customization.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/count-to.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<wd-count-to :endVal=\"2024\" suffix=\"年\" color=\"#16baaa\"></wd-count-to>\n<wd-count-to prefix=\"￥\" :startVal=\"0\" :decimals=\"2\" :endVal=\"186.321\" :fontSize=\"32\" suffix=\"%\" color=\"#1e9fff\"></wd-count-to>\n<wd-count-to prefix=\"￥\" :startVal=\"0\" :decimals=\"2\" :endVal=\"21286.321\" :fontSize=\"32\" suffix=\"%\" color=\"#ff5722\"></wd-count-to>\n<wd-count-to prefix=\"￥\" :startVal=\"0\" :decimals=\"2\" :endVal=\"21286.321\" :fontSize=\"32\" suffix=\"%\" color=\"#ffb800\" :duration=\"2000\"></wd-count-to>\n```\n\n----------------------------------------\n\nTITLE: Customizing Step Icons - Wot Design - HTML\nDESCRIPTION: Demonstrates how to assign icons to steps via the icon property on wd-step, using predefined icon names. The align-center attribute is used for horizontal centering. Requires the Wot Design icon set and the Vue framework setup.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/steps.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\\\"1\\\" align-center>\\n  <wd-step icon=\\\"invite\\\" />\\n  <wd-step icon=\\\"link\\\" />\\n  <wd-step icon=\\\"clock\\\" />\\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Columns PickerView in HTML and TypeScript\nDESCRIPTION: Shows how to set up a PickerView with multiple columns using a two-dimensional array for columns and an array for the selected value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker-view.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" v-model=\"value\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(['Central South University', 'Software Engineering'])\n\nconst columns = ref([\n  ['Sun Yat-sen University', 'Central South University', 'South China University of Technology'],\n  ['Computer Science and Technology', 'Software Engineering', 'Communication Engineering', 'Law', 'Economics']\n])\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Implementation in HTML\nDESCRIPTION: Shows how to implement basic badge functionality with numeric values on buttons and icons\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/badge.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge value=\"12\">\n  <wd-button>Button</wd-button>\n</wd-badge>\n<wd-badge value=\"24\">\n  <wd-button icon=\"cart-o\"></wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Using Different Animation Types in Transition Component\nDESCRIPTION: Demonstrates how to use built-in animation types like 'slide' in the wd-transition component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/transition.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-transition :show=\"show\" name=\"slide\">Content</wd-transition>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Single-Row Panel ActionSheet in HTML\nDESCRIPTION: HTML implementation for ActionSheet with custom single-row panels. Each panel has an icon and title, providing a more visual menu interface.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"showActions\">弹出菜单</wd-button>\n<wd-action-sheet v-model=\"show\" :panels=\"panels\" @close=\"close\" @select=\"select\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Add Tag Style\nDESCRIPTION: Shows how to customize the add tag appearance using the add slot.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag custom-class=\"space\" round dynamic @confirm=\"handleConfirm\">\n  <template #add>\n    <wd-icon name=\"pin\" size=\"12px\"></wd-icon>\n    <text style=\"margin-left: 4px\">Custom</text>\n  </template>\n</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Nested Collapse Implementation\nDESCRIPTION: Implementation of nested collapse components with custom styling\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/collapse.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"collapse\">\n  <wd-collapse v-model=\"collapseRoot\">\n    <wd-collapse-item custom-body-style=\"padding:0 0 0 14px\" v-for=\"item in 5\" :key=\"item\" :title=\"`Label${item}`\" :name=\"`${item}`\">\n      <wd-collapse v-model=\"collapseList[item - 1]\">\n        <wd-collapse-item\n          v-for=\"(item, index) in itemList\"\n          :custom-class=\"index === 0 ? 'no-border' : ''\"\n          :key=\"index\"\n          :title=\"item.title\"\n          :name=\"item.name\"\n        >\n          {{ item.body }}\n        </wd-collapse-item>\n      </wd-collapse>\n    </wd-collapse-item>\n  </wd-collapse>\n</view>\n```\n\nLANGUAGE: css\nCODE:\n```\n.collapse {\n  :deep() {\n    .no-border {\n      &::after {\n        display: none;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ID Card Keyboard in Vue.js\nDESCRIPTION: Demonstrates how to configure the keyboard for ID card input with a custom extra key.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/keyboard.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"ID Card Keyboard\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" extra-key=\"X\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Change in InputNumber\nDESCRIPTION: Demonstrates how to implement asynchronous change functionality in the InputNumber component using the before-change prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" :before-change=\"beforeChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { useToast } from '@/uni_modules/wot-design-uni'\nimport type { InputNumberBeforeChange } from '@/uni_modules/wot-design-uni/components/wd-input-number/types'\nconst { loading, close } = useToast()\n\nconst value = ref<number>(1)\n \nconst beforeChange: InputNumberBeforeChange = (value) => {\n  loading({ msg: `Updating to ${value}...` })\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      close()\n      resolve(true)\n    }, 500)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-level Linkage in PickerView with HTML and TypeScript\nDESCRIPTION: Demonstrates how to implement multi-level linkage in PickerView using the column-change property and setColumnData method.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker-view.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" v-model=\"value\" :column-change=\"onChangeDistrict\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst district = {\n  '0': [{ label: 'Beijing', value: '110000' }, { label: 'Guangdong Province', value: '440000' }],\n  '110000': [{ label: 'Beijing', value: '110100' }],\n  '440000': [{ label: 'Guangzhou', value: '440100' }, { label: 'Shaoguan', value: '440200' }, { label: 'Shenzhen', value: '440300' }, { label: 'Zhuhai', value: '440400' }, { label: 'Shantou', value: '440500' }],\n  '110100': [{ label: 'Dongcheng District', value: '110101' }, { label: 'Xicheng District', value: '110102' }, { label: 'Chaoyang District', value: '110105' }, { label: 'Fengtai District', value: '110106' }, { label: 'Shijingshan District', value: '110107' }],\n  '440100': [{ label: 'Liwan District', value: '440103' }, { label: 'Yuexiu District', value: '440104' }, { label: 'Haizhu District', value: '440105'}],\n  '440200': [{ label: 'Wujiang District', value: '440203'}],\n  '440300': [{ label: 'Luohu District', value: '440303' }, { label: 'Futian District', value: '440304' }],\n  '440400': [{ label: 'Xiangzhou District', value: '440402' }, { label: 'Doumen District', value: '440403' }, { label: 'Jinwan District', value: '440404' }],\n  '440500': [{ label: 'Longhu District', value: '440507' }, { label: 'Jinping District', value: '440511' }]\n}\n\nconst value = ref(['110000', '110100', '110102'])\nconst columns = ref([district[0], district[district[0][0].value], district[district[district[0][0].value][0].value]])\n\nconst onChangeDistrict = (pickerView, value, columnIndex, resolve) => {\n  const item = value[columnIndex]\n  if (columnIndex === 0) {\n    pickerView.setColumnData(1, district[item.value])\n    pickerView.setColumnData(2, district[district[item.value][0].value])\n  } else if (columnIndex === 1) {\n    pickerView.setColumnData(2, district[item.value])\n  }\n  resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Control Implementation\nDESCRIPTION: Example of manually controlling the CountTo component with start, pause, and reset functionality using a grid interface.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/count-to.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-count-to\n  ref=\"countTo\"\n  :auto-start=\"false\"\n  prefix=\"￥\"\n  :startVal=\"1000\"\n  :decimals=\"3\"\n  :endVal=\"9999.32\"\n  :fontSize=\"32\"\n  suffix=\"%\"\n  color=\"#1e9fff\"\n></wd-count-to>\n<wd-grid clickable border>\n  <wd-grid-item text=\"开始\" icon=\"play-circle-stroke\" @itemclick=\"start\" />\n  <wd-grid-item text=\"暂停\" icon=\"pause-circle\" @itemclick=\"pause\" />\n  <wd-grid-item text=\"重置\" icon=\"refresh\" @itemclick=\"reset\" />\n</wd-grid>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CountToInstance } from '@/uni_modules/wot-design-uni/components/wd-count-to/types'\n\nconst countTo = ref<CountToInstance>()\n\nconst start = () => {\n  countTo.value!.start()\n}\nconst pause = () => {\n  countTo.value!.pause()\n}\nconst reset = () => {\n  countTo.value!.reset()\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Rate Component Icons in HTML\nDESCRIPTION: Demonstrates how to modify the unselected and selected icons of the Rate component using the icon and active-icon properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/rate.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" icon=\"wd-icon-dong\" active-icon=\"wd-icon-dong\" active-color=\"#4D80F0\"/>\n```\n\n----------------------------------------\n\nTITLE: Dot Variant Vertical Steps - Wot Design - HTML\nDESCRIPTION: Configures wd-steps to show dot-style progress indicators by using both vertical and dot properties. Useful for minimalistic vertical step displays. Expects wd-steps and wd-step components available in Vue.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/steps.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\\\"1\\\" vertical dot>\\n  <wd-step description=\\\"Register an account\\\" />\\n  <wd-step description=\\\"Login and bind phone number\\\" />\\n  <wd-step description=\\\"Complete personal information\\\" />\\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Defining FormItemRule Structure in Markdown\nDESCRIPTION: This snippet outlines the data structure for form validation rules (FormItemRule). It includes properties for required fields, error messages, custom validators, and pattern matching.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| 键名      | 说明                                                    | 类型                                  |\n| --------- | ------------------------------------------------------- | ------------------------------------- |\n| required  | 是否为必选字段                                          | `boolean`                             |\n| message   | 错误提示文案                                            | `string`                              |\n| validator | 通过函数进行校验，可以返回一个 `Promise` 来进行异步校验 | `(value, rule) => boolean \\| Promise` |\n| pattern   | 通过正则表达式进行校验，正则无法匹配表示校验不通过      | `RegExp`                              |\n```\n\n----------------------------------------\n\nTITLE: Date类型DatetimePicker示例\nDESCRIPTION: 使用type=\"date\"属性，只展示年月日选择器。绑定值为时间戳类型。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker type=\"date\" v-model=\"value\" label=\"年月日\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\nconst value = ref<number>(Date.now())\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog with useMessage in WOT Design Uni\nDESCRIPTION: Example of creating an Alert dialog using the useMessage utility. Alert dialogs only have a confirm button and are used for strong reminders to users.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/use-message.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box></wd-message-box>\n<wd-button @click=\"alert\">alert</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction alert() {\n  message.alert('Operation successful')\n}\n```\n\n----------------------------------------\n\nTITLE: Grid with Badge Notifications\nDESCRIPTION: Adding notification badges to grid items using is-dot, value, and max properties. This example shows a dot badge and a numbered badge with maximum value handling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid>\n  <wd-grid-item is-dot icon=\"goods\" text=\"文字\" />\n  <wd-grid-item value=\"100\" :max=\"99\" icon=\"computer\" text=\"文字\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Before-Close Hook Logic in TypeScript\nDESCRIPTION: This TypeScript code implements the before-close hook logic for the SwipeAction component, showing toast messages based on the close reason and position.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\n\nconst value = ref<string>('close')\nfunction changeState(position: string) {\n  value.value = position\n}\n\nconst beforeClose = (reason, position) => {\n  if (reason === 'click') {\n    toast.show(`${reason} ${position}导致滑动按钮关闭`)\n  } else {\n    toast.show(`${reason}导致${position}滑动按钮关闭`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SwipeAction Component with Right Actions in HTML\nDESCRIPTION: This snippet demonstrates the basic usage of the SwipeAction component with right-side actions. It includes a cell component and custom action buttons.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<view @click.stop=\"closeOutside\">\n  <wd-swipe-action>\n    <wd-cell title=\"标题文字\" value=\"内容\"/>\n    <template #right>\n      <view class=\"action\">\n        <view class=\"button\" style=\"background: #C8C7CD;\" @click=\"handleAction('操作1')\">操作1</view>\n        <view class=\"button\" style=\"background: #FFB300;\" @click=\"handleAction('操作2')\">操作2</view>\n        <view class=\"button\" style=\"background: #E2231A;\" @click=\"handleAction('操作3')\">操作3</view>\n      </view>\n    </template>\n  </wd-swipe-action>\n</view>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Theme Configuration\nDESCRIPTION: TypeScript implementation using ConfigProviderThemeVars type\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ConfigProviderThemeVars } from 'wot-design-uni';\n\nconst themeVars: ConfigProviderThemeVars = {\n  colorTheme: 'red'\n}\n```\n\n----------------------------------------\n\nTITLE: Draggable Fab Implementation\nDESCRIPTION: Example of implementing a draggable Fab button with automatic edge snapping.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/fab.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-fab :draggable=\"true\"></wd-fab>\n```\n\n----------------------------------------\n\nTITLE: ImgCropper with 16:10 Aspect Ratio for Landscapes\nDESCRIPTION: Implementation of the ImgCropper component with a 16:10 aspect ratio, which is ideal for landscape photos or movie posters. This wider format is set using the aspect-ratio property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img-cropper.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  aspect-ratio=\"16:10\"\n  @confirm=\"handleConfirm\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n```\n\n----------------------------------------\n\nTITLE: Navbar with Custom Slots\nDESCRIPTION: Shows how to use the left and right slots to customize the Navbar's content, specifically adding a search icon.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/navbar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"标题\" left-text=\"返回\" left-arrow>\n  <template #right>\n    <wd-icon name=\"search\" size=\"18\" />\n  </template>\n</wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Navbar with Capsule Navigation\nDESCRIPTION: Implementation of a Navbar with a custom capsule navigation component for back and home functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/navbar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"标题\" left-text=\"返回\" right-text=\"设置\" left-arrow>\n  <template #capsule>\n    <wd-navbar-capsule @back=\"handleBack\" @back-home=\"handleBackHome\" />\n  </template>\n</wd-navbar>\n```\n\nLANGUAGE: ts\nCODE:\n```\nfunction handleBack() {\n  uni.navigateBack({})\n}\n\nfunction handleBackHome() {\n  uni.reLaunch({ url: '/pages/index/Index' })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Pressure Parameters - Vue Template\nDESCRIPTION: Implementation with customized pressure sensitivity parameters for fine-tuned signature experience.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/signature.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature \n  pressure \n  :height=\"300\" \n  :min-width=\"1\" \n  :max-width=\"6\" \n  :min-speed=\"1.5\"\n  background-color=\"#f5f5f5\"\n/>\n<view class=\"tip-text\">快速书写产生细线条，慢速书写产生粗线条</view>\n```\n\n----------------------------------------\n\nTITLE: Fab Active State Control\nDESCRIPTION: Implementation of active state control for Fab menu expansion using v-model directive.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/fab.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-fab v-model:active=\"active\"></wd-fab>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = ref<boolean>(false)\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Implementation - HTML\nDESCRIPTION: Demonstrates basic tag implementation with different types including default, primary, danger, warning and success variants.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tag.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag custom-class=\"space\">标签</wd-tag>\n<wd-tag custom-class=\"space\" type=\"primary\">标签</wd-tag>\n<wd-tag custom-class=\"space\" type=\"danger\">标签</wd-tag>\n<wd-tag custom-class=\"space\" type=\"warning\">标签</wd-tag>\n<wd-tag custom-class=\"space\" type=\"success\">标签</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Customizing Rate Component Colors in HTML\nDESCRIPTION: Shows how to modify the unselected and selected colors of the Rate component using the color and active-color properties. Also demonstrates using gradient colors and color arrays.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/rate.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" active-color=\"linear-gradient(180deg, rgba(255,238,0,1) 0%,rgba(250,176,21,1) 100%)\" />\n<wd-rate v-model=\"value\" :active-color=\"['linear-gradient(180deg, rgba(255,238,0,1) 0%,rgba(250,176,21,1) 100%)', 'linear-gradient(315deg, rgba(245,34,34,1) 0%,rgba(255,117,102,1) 100%)']\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of Segmented Labels in Vue\nDESCRIPTION: Shows how to use a custom template to render Segmented labels with images and text.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/segmented.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" :vibrate-short=\"true\">\n  <template #label=\"{ option }\">\n    <view class=\"section-slot\">\n      <image style=\"border-radius: 50%; width: 32px; height: 32px\" :src=\"option.payload.avatar\" />\n      <view class=\"name\">{{ option.value }}</view>\n    </view>\n  </template>\n</wd-segmented>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = ref([\n  {\n    value: 'Li Lei',\n    disabled: false,\n    payload: {\n      avatar: 'https://registry.npmmirror.com/wot-design-uni-assets/*/files/redpanda.jpg'\n    }\n  },\n  {\n    value: 'Han Meimei',\n    disabled: false,\n    payload: {\n      avatar: 'https://registry.npmmirror.com/wot-design-uni-assets/*/files/capybara.jpg'\n    }\n  }\n])\n```\n\nLANGUAGE: scss\nCODE:\n```\n.section {\n  width: 100%;\n  padding: 0 24rpx;\n  box-sizing: border-box;\n  &-slot {\n    padding: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Navbar Implementation\nDESCRIPTION: Example of a fixed navbar with placeholder space and safe area inset top adaptation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/navbar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar fixed placeholder title=\"Navbar\" left-arrow safeAreaInsetTop></wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Grid with Custom Content using Slots\nDESCRIPTION: Using the default slot to completely customize the content of each GridItem. This example shows using images within grid items by enabling the use-slot property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid>\n  <wd-grid-item use-slot>\n    <image class=\"img\" :src=\"joy\" />\n  </wd-grid-item>\n  <wd-grid-item use-slot>\n    <image class=\"img\" :src=\"joy\" />\n  </wd-grid-item>\n  <wd-grid-item use-slot>\n    <image class=\"img\" :src=\"joy\" />\n  </wd-grid-item>\n</wd-grid>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.img {\n  width: 100%;\n  height: 90px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event to Text Component in HTML\nDESCRIPTION: Demonstrates how to handle click events on the text component using the @click directive to trigger a function.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-text\n  text=\"Reed leaves fill the sandbar, cold sand carries shallow streams. Twenty years later, passing the south tower again. The boat tied under willows is not yet steady, how many days until mid-autumn comes again? Yellow crane at the broken cliff, has my old friend been here? The old rivers and mountains are all filled with new sorrows. Wanting to buy osmanthus flowers and bring wine, but it's never like the wanderings of youth.\"\n  @click=\"clickTest\"\n></wd-text>\n```\n\n----------------------------------------\n\nTITLE: Animation Reset Implementation in TypeScript\nDESCRIPTION: Implements the reset functionality for the NoticeBar animation using TypeScript, which helps resolve animation issues in certain scenarios.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// uni_modules\nimport { type NoticeBarInstance } from '@/uni_modules/wot-design-uni/components/wd-notice-bar/types'\n// npm\n// import { type NoticeBarInstance } from 'wot-design-uni/components/wd-notice-bar/types'\n\nconst notice = ref<NoticeBarInstance>()\n\nconst textArray = ref([\n  '欢迎使用wot design uni',\n  '该组件库基于uniapp ->Vue3, ts构建',\n  '项目地址：https://github.com/Moonofweisheng/wot-design-uni',\n  '我们的目标是打造最强uniapp组件库',\n  '诚挚邀请大家共同建设',\n  '这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息'\n])\n\nfunction handleReset() {\n  notice.value?.reset()\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Sidebar Change Event in TypeScript\nDESCRIPTION: Implements the handleChange function to process sidebar item changes and display a toast message.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\nconst active = ref<number>(1)\n\nfunction handleChange({ value, label }) {\n  toast.show(`Current Label Name ${label}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Step Status - Wot Design - HTML\nDESCRIPTION: Demonstrates changing the status of steps using the status prop, supporting 'finished', 'process', and 'error' values. In this example, the first step is set to 'error' and remaining steps use default processing. Expects Vue and Wot Design setup.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/steps.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\\\"1\\\" align-center>\\n  <wd-step title=\\\"Bind Phone\\\" status=\\\"error\\\" />\\n  <wd-step title=\\\"Rebind Phone\\\" />\\n  <wd-step title=\\\"Step 3\\\" />\\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Enabling Mask Click to Close Curtain in Vue\nDESCRIPTION: Demonstrates how to allow closing the Curtain component by clicking on the mask using the close-on-click-modal attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/curtain.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">Show Curtain</wd-button>\n<wd-curtain v-model=\"value\" :src=\"img\" :to=\"link\" close-position=\"bottom-right\" width=\"280\" close-on-click-modal></wd-curtain>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(false)\nconst img = ref<string>('https://img20.360buyimg.com/da/jfs/t1/141592/25/8861/261559/5f68d8c1E33ed78ab/698ad655bfcfbaed.png')\nconst link = ref<string>('/pages/index/index')\n\nfunction handleClick() {\n  value.value = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Number Keyboard in Vue\nDESCRIPTION: Demonstrates how to create a NumberKeyboard with randomly arranged keys for enhanced security.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/number-keyboard.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Random Number Keyboard\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" random-key-order @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Rate Component\nDESCRIPTION: Shows how to use custom icons for the rate component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/rate.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" icon=\"wd-icon-dong\" active-icon=\"wd-icon-dong\" active-color=\"#4D80F0\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Transition Component in HTML\nDESCRIPTION: Shows how to wrap content in a wd-transition tag, using the 'show' prop to control visibility and 'name' to specify animation type.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/transition.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-transition :show=\"show\" name=\"fade\">Content</wd-transition>\n```\n\n----------------------------------------\n\nTITLE: Notify Component Setup with Timer in TypeScript\nDESCRIPTION: Setup script for the Notify component with visibility control and a timer for automatic closing after 3 seconds.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notify.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ref, onMounted } from 'vue'\n\nlet timer: ReturnType<typeof setTimeout>\nexport default {\n  setup() {\n    const visible = ref(false)\n    const safeHeight = ref(0)\n\n    const showNotify = () => {\n      visible.value = true\n      if (timer) clearTimeout(timer)\n      timer = setTimeout(() => {\n        visible.value = false\n      }, 3000)\n    }\n\n    onMounted(() => {\n      // #ifdef H5\n      safeHeight.value = 44\n      // #endif\n    })\n\n    return {\n      visible,\n      showNotify,\n      safeHeight\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Header-Only Draggable FloatingPanel\nDESCRIPTION: Shows how to implement FloatingPanel with dragging restricted to the header area only by setting contentDraggable to false.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/floating-panel.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-floating-panel :contentDraggable=\"false\">\n  <view class=\"inner-content\">Content area cannot be dragged</view>\n</wd-floating-panel>\n```\n\nLANGUAGE: css\nCODE:\n```\n.inner-content {\n  padding: 1rem;\n  text-align: center;\n  font-size: 16px;\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual Slider in HTML and TypeScript\nDESCRIPTION: Shows how to create a dual slider by using an array type for the v-model value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/slider.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number[]>([10, 30])\n```\n\n----------------------------------------\n\nTITLE: Week Selection in CalendarView\nDESCRIPTION: Demonstrates week-based selection by setting type to 'week'. It's recommended to set first-day-of-week to 1 (Monday) when using this mode with an initial value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"week\" v-model=\"value\" :first-day-of-week=\"1\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(Date.now())\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Confirm Dialog Implementation\nDESCRIPTION: Shows how to implement a confirmation dialog with promise-based response handling\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/message-box.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"confirm\">confirm</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction confirm() {\n  message\n    .confirm({\n      msg: '提示文案',\n      title: '标题'\n    })\n    .then(() => {\n      console.log('点击了确定按钮')\n    })\n    .catch(() => {\n      console.log('点击了取消按钮')\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Confirm Dialog Implementation\nDESCRIPTION: Shows how to implement a confirmation dialog with both confirm and cancel buttons, handling both success and cancel scenarios.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/message-box.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box />\n<wd-button @click=\"confirm\">confirm</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction confirm() {\n  message\n    .confirm({\n      msg: 'Prompt text',\n      title: 'Title'\n    })\n    .then(() => {\n      console.log('Clicked confirm button')\n    })\n    .catch(() => {\n      console.log('Clicked cancel button')\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Colored Rate Component\nDESCRIPTION: Examples of customizing the rate component colors using gradients and color arrays.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/rate.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" active-color=\"linear-gradient(180deg, rgba(255,238,0,1) 0%,rgba(250,176,21,1) 100%)\" />\n<wd-rate v-model=\"value\" :active-color=\"['linear-gradient(180deg, rgba(255,238,0,1) 0%,rgba(250,176,21,1) 100%)', 'linear-gradient(315deg, rgba(245,34,34,1) 0%,rgba(255,117,102,1) 100%)']\" />\n```\n\n----------------------------------------\n\nTITLE: Using Notify Component with Custom Content in HTML\nDESCRIPTION: Shows how to use the Notify component directly in the template to display custom content using slots.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notify.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"primary\" @click=\"showNotify\">使用 Notify 组件调用</wd-button>\n<wd-notify type=\"success\" :safe-height=\"safeHeight\" v-model:visible=\"visible\">\n  <wd-icon name=\"check-outline\" size=\"inherit\" color=\"inherit\" />\n  成功通知\n</wd-notify>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Change Event Handling\nDESCRIPTION: Shows how to listen to tab switching events using the @change event handler to get the value of the selected tab.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabbar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\" @change=\"handleChange\" active-color=\"#ee0a24\" inactive-color=\"#7d7e80\">\n  <wd-tabbar-item title=\"Home\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"Category\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"My\" icon=\"user\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"Photos\" icon=\"photo\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"Service\" icon=\"chat\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n\nfunction handleChange({ value }: { value: string }) {\n  show(`Selected tab:${value}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Swipe Action with Right Buttons in Uni-app\nDESCRIPTION: Demonstrates the basic setup of the `wd-swipe-action` component, including defining right-side action buttons using the `#right` slot. Shows how to handle button clicks using a `handleAction` function and suggests using `useQueue`'s `closeOutside` method, bound to a parent element's click event with `.stop` modifier, to close the swipe action when clicking outside the component. Includes necessary SCSS for styling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swipe-action.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<view @click.stop=\"closeOutside\">\n  <wd-swipe-action>\n    <wd-cell title=\"Title Text\" value=\"Content\"/>\n    <template #right>\n      <view class=\"action\">\n        <view class=\"button\" style=\"background: #C8C7CD;\" @click=\"handleAction('Action1')\">Action1</view>\n        <view class=\"button\" style=\"background: #FFB300;\" @click=\"handleAction('Action2')\">Action2</view>\n        <view class=\"button\" style=\"background: #E2231A;\" @click=\"handleAction('Action3')\">Action3</view>\n      </view>\n    </template>\n  </wd-swipe-action>\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast, useQueue } from '@/uni_modules/wot-design-uni'\n\nconst { closeOutside } = useQueue()\n\nconst toast = useToast()\n\nfunction handleAction(action: string) {\n  toast.show(`Clicked ${action}`)\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n.action {\n  height: 100%;\n}\n.button {\n  display: inline-block;\n  padding: 0 11px;\n  height: 100%;\n  color: white;\n  line-height: 42px;\n}\n```\n\n----------------------------------------\n\nTITLE: Video Carousel Implementation in Swiper\nDESCRIPTION: Demonstrates how to create a carousel of video elements with autoplay and hidden indicators, noting platform compatibility constraints.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swiper.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-swiper :list=\"videoList\" autoplay :indicator=\"false\" indicator-position=\"bottom-right\"></wd-swiper>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst videoList = ref([\n  'https://unpkg.com/wot-design-uni-assets@1.0.3/VID_115503.mp4',\n  'https://unpkg.com/wot-design-uni-assets@1.0.3/VID_150752.mp4',\n  'https://unpkg.com/wot-design-uni-assets@1.0.3/VID_155516.mp4',\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/moon.jpg'\n])\n```\n\n----------------------------------------\n\nTITLE: Block Button Implementation\nDESCRIPTION: Demonstrates how to create a full-width button using the block attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-button block>Primary Button</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Root Component Implementation\nDESCRIPTION: Vue component implementation for global theme configuration using App.ku.vue.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTheme } from './composables/useTheme'\n\nconst { theme, themeVars } = useTheme({\n  buttonPrimaryBgColor: '#07c160',\n  buttonPrimaryColor: '#07c160'\n})\n</script>\n\n<template>\n  <div>Hello AppKuVue</div>\n  <!-- Assuming WdConfigProvider component is registered -->\n  <WdConfigProvider :theme=\"theme\" :theme-vars=\"themeVars\">\n    <KuRootView />\n  </WdConfigProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Navbar with Custom Slots\nDESCRIPTION: Shows how to use slots to customize the content on both sides of the navbar.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/navbar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"Title\" left-text=\"Back\" left-arrow>\n  <template #right>\n    <wd-icon name=\"search\" size=\"18\" />\n  </template>\n</wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Custom Image Content for StatusTip Component in HTML\nDESCRIPTION: Shows how to use the image slot to provide custom image content for the StatusTip component. This example uses an icon component as the custom image.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/status-tip.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-status-tip tip=\"Custom image content\">\n  <template #image>\n    <wd-icon name=\"ie-filled\" size=\"100px\"></wd-icon>\n  </template>\n</wd-status-tip>\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Icons in HTML\nDESCRIPTION: Shows how to use custom image icons by setting the custom attribute and providing an image URL.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/icon.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-icon custom name=\"https://example.com/icon.png\"></wd-icon>\n```\n\n----------------------------------------\n\nTITLE: Maximum Upload Limit\nDESCRIPTION: Demonstrates how to set a maximum limit on the number of files that can be uploaded using the limit attribute, restricting users from uploading more than the specified number of files.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/upload.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-upload\n  :file-list=\"fileList\"\n  :limit=\"3\"\n  action=\"https://mockapi.eolink.com/zhTuw2P8c29bc981a741931bdd86eb04dc1e8fd64865cb5/upload\"\n  @change=\"handleChange\"\n></wd-upload>\n```\n\n----------------------------------------\n\nTITLE: Date Type Configuration in DatetimePicker\nDESCRIPTION: Illustrates how to configure the DatetimePicker for date-only selection.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker type=\"date\" v-model=\"value\" label=\"Year Month Day\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n```\n\n----------------------------------------\n\nTITLE: Two-way Binding in Keyboard Component\nDESCRIPTION: Demonstrates how to use v-model for two-way binding of the keyboard's input value and limit input length using maxlength.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"双向绑定\" :value=\"value1\" is-link @click=\"showKeyBoard\" />\n<wd-keyboard\n  v-model=\"value1\"\n  :maxlength=\"6\"\n  v-model:visible=\"visible\"\n  title=\"键盘标题\"\n  extra-key=\".\"\n  close-text=\"完成\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n></wd-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\nconst value1 = ref<string>('')\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Enabling Modal Click to Close Curtain in Vue\nDESCRIPTION: Shows how to allow closing the Curtain component by clicking on the modal overlay using the close-on-click-modal attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/curtain.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">展示幕帘</wd-button>\n<wd-curtain v-model=\"value\" :src=\"img\" :to=\"link\" close-position=\"bottom-right\" width=\"280\" close-on-click-modal></wd-curtain>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(false)\nconst img = ref<string>('https://img20.360buyimg.com/da/jfs/t1/141592/25/8861/261559/5f68d8c1E33ed78ab/698ad655bfcfbaed.png')\nconst link = ref<string>('/pages/index/index')\n\nfunction handleClick() {\n  value.value = true\n}\n```\n\n----------------------------------------\n\nTITLE: Textarea with Label in Cell Group\nDESCRIPTION: Shows how to create a textarea with a label within a cell group, which provides a structured form-like appearance with borders.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell-group border>\n  <wd-textarea label=\"Basic Usage\" clearable v-model=\"value\" placeholder=\"Please enter...\" />\n</wd-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Setting Up DatetimePickerView for Year-Month Type in Vue\nDESCRIPTION: Demonstrates the configuration of DatetimePickerView to show only year and month using the 'year-month' type.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker-view.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view type=\"year-month\" v-model=\"value\" label=\"年月\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual Slider in HTML and TypeScript\nDESCRIPTION: Shows how to create a dual slider by binding an array to v-model. The value is an array of two numbers representing the positions of both sliders.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/slider.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number[]>([10, 30])\n```\n\n----------------------------------------\n\nTITLE: Circle Progress Color Customization\nDESCRIPTION: Demonstrates color customization for both the progress bar and track color.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/circle.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" color=\"#1C64FD\" layer-color=\"#EBEEF5\"></wd-circle>\n```\n\n----------------------------------------\n\nTITLE: Custom Size and Spacing Rate Component\nDESCRIPTION: Demonstrates how to customize the size and spacing of rating icons.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/rate.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" size=\"30px\" space=\"10px\"/>\n```\n\n----------------------------------------\n\nTITLE: Maximum Value Badge Implementation in HTML\nDESCRIPTION: Demonstrates how to set maximum values for badges with overflow handling using the max attribute\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/badge.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge value=\"12\" max=\"10\">\n  <wd-button>Button</wd-button>\n</wd-badge>\n<wd-badge value=\"1024\" max=\"999\">\n  <wd-button icon=\"cart-o\"></wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Toast Position Configuration\nDESCRIPTION: Shows how to position toast messages at different locations on the screen\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/toast.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 顶部提示\ntoast.show({\n  position: 'top',\n  msg: '提示信息'\n})\n\n// 局中提示\ntoast.show({\n  position: 'middle',\n  msg: '提示信息'\n})\n\n// 底部提示\ntoast.show({\n  position: 'bottom',\n  msg: '提示信息'\n})\n```\n\n----------------------------------------\n\nTITLE: Price Formatting with Text Component in HTML\nDESCRIPTION: Demonstrates how to format prices with currency symbol and text decoration using the price mode and decoration property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-text\n  text=\"16354.156\"\n  mode=\"price\"\n  type=\"success\"\n  decoration=\"line-through\"\n  prefix=\"￥\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Implementation in Vue\nDESCRIPTION: Basic implementation of a progress bar component with a fixed percentage value of 30%.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/progress.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"30\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Backtop Component in HTML and TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage of the Backtop component. It shows how to include the component in HTML and how to update its scrollTop property using the onPageScroll lifecycle in TypeScript.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/backtop.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-backtop :scrollTop=\"scrollTop\"></wd-backtop>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst scrollTop = ref<number>(0)\nonPageScroll((e) => {\n  scrollTop.value = e.scrollTop\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar with Badge Tips in HTML\nDESCRIPTION: Illustrates how to add badge tips to sidebar items using is-dot and badge properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\">\n  <wd-sidebar-item :value=\"0\" label=\"Label Name\" is-dot />\n  <wd-sidebar-item :value=\"1\" label=\"Label Name\" badge=\"5\" />\n  <wd-sidebar-item :value=\"2\" label=\"Label Name\" />\n</wd-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Cell-based Checkbox Group in Vue\nDESCRIPTION: Demonstrates how to create a form-style checkbox group using the cell attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value1\" cell>\n  <wd-checkbox modelValue=\"jingmai\">沃特</wd-checkbox>\n  <wd-checkbox modelValue=\"shop\">商家后台</wd-checkbox>\n</wd-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of StatusTip Component in HTML\nDESCRIPTION: Demonstrates how to use the StatusTip component with different image types and custom tip text. The image property can be set to various predefined values or a custom URL.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/status-tip.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-status-tip image=\"search\" tip=\"No search results\" />\n<wd-status-tip image=\"network\" tip=\"This page is currently inaccessible\" />\n<wd-status-tip image=\"content\" tip=\"No content\" />\n<wd-status-tip image=\"collect\" tip=\"No collections\" />\n<wd-status-tip image=\"comment\" tip=\"No contact list currently~\" />\n<wd-status-tip image=\"halo\" tip=\"Payment failed, please reorder\" />\n<wd-status-tip image=\"message\" tip=\"Subscribed to all messages\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Circle Progress Bar Implementation\nDESCRIPTION: Demonstrates basic usage of the circle progress component using v-model for progress value and text property for center content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/circle.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :text=\"`Progress: ${current}%`\"></wd-circle>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst current = ref<number>(10)\n```\n\n----------------------------------------\n\nTITLE: Popup Dialog with Tabs\nDESCRIPTION: Example showing tabs implementation within a popup dialog with proper style updates\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabs.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">打开弹窗</wd-button>\n<wd-popup v-model=\"showPopup\" position=\"bottom\" @after-enter=\"handlePopupShow\" closable custom-style=\"height: 200px;padding: 0 24rpx;\">\n  <view class=\"title\">在弹出框中使用</view>\n  <wd-tabs v-model=\"tab\" ref=\"tabsRef\">\n    <wd-tab v-for=\"item in tabs\" :key=\"item\" :title=\"`${item}`\" :name=\"item\">\n      <view class=\"content\">内容{{ tab }}</view>\n    </wd-tab>\n  </wd-tabs>\n</wd-popup>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tab = ref<number>(3)\nconst tabs = ref(['这', '是', '一', '个', '例子'])\n\nconst showPopup = ref(false)\nconst tabsRef = ref<TabsInstance>()\n\nfunction handleOpenClick() {\n  showPopup.value = true\n}\n\nfunction handlePopupShow() {\n  tabsRef.value?.updateLineStyle(false)\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.title {\n  display: flex;\n  font-size: 32rpx;\n  align-items: center;\n  justify-content: center;\n  padding: 24rpx 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Navbar with Search Bar\nDESCRIPTION: Example showing how to integrate a search bar into the navbar using the title slot.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/navbar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar left-text=\"Back\" right-text=\"Settings\" left-arrow>\n  <template #title>\n    <view class=\"search-box\">\n      <wd-search v-model=\"keyword\" hide-cancel placeholder-left></wd-search>\n    </view>\n  </template>\n</wd-navbar>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.search-box {\n  display: flex;\n  height: 100%;\n  align-items: center;\n  --wot-search-padding: 0;\n  --wot-search-side-padding: 0;\n  :deep() {\n    .wd-search {\n      background: transparent;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Theme-based CountTo Implementation\nDESCRIPTION: Shows how to use different theme types (primary, error, success, warning, info) with the CountTo component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/count-to.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-count-to type=\"primary\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n<wd-count-to type=\"error\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n<wd-count-to type=\"success\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n<wd-count-to type=\"warning\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n<wd-count-to type=\"info\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n```\n\n----------------------------------------\n\nTITLE: Switching to Another Language in Wot Design Uni\nDESCRIPTION: Code example showing how to switch the current language to English using the Locale.use method. This requires importing both the Locale component and the desired language pack.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/locale.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Locale } from 'wot-design-uni'\n// 引入英文语言包\nimport enUS from 'wot-design-uni/locale/lang/en-US'\n\nLocale.use('en-US', enUS)\n```\n\n----------------------------------------\n\nTITLE: Date Range Selection in CalendarView\nDESCRIPTION: Demonstrates date range selection by setting type to 'daterange'. The value is an array containing the start and end dates of the selected range.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"daterange\" v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref([])\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Closable NoticeBar in HTML\nDESCRIPTION: Demonstrates how to make the NoticeBar closable by setting the closable property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notice-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar text=\"This is a message notification, this is a message notification, this is a message notification\" closable />\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Icon Shape in Vue\nDESCRIPTION: Shows how to modify the shape of the checkbox icon using the shape attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox :modelValue=\"true\" shape=\"square\">沃特</wd-checkbox>\n<wd-checkbox :modelValue=\"true\" shape=\"button\">沃特</wd-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of StatusTip Component in HTML\nDESCRIPTION: Demonstrates the basic usage of the StatusTip component with different image types and custom tip messages.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/status-tip.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-status-tip image=\"search\" tip=\"当前搜索无结果\" />\n<wd-status-tip image=\"network\" tip=\"该页面暂时无法访问\" />\n<wd-status-tip image=\"content\" tip=\"暂无内容\" />\n<wd-status-tip image=\"collect\" tip=\"暂无收藏\" />\n<wd-status-tip image=\"comment\" tip=\"当前没有联系人名单哦～\" />\n<wd-status-tip image=\"halo\" tip=\"支付失败，请重新订购\" />\n<wd-status-tip image=\"message\" tip=\"已订阅全部消息\" />\n```\n\n----------------------------------------\n\nTITLE: View More Collapse Implementation\nDESCRIPTION: Implementation of a view more collapse type with customizable line count\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/collapse.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-collapse viewmore v-model=\"value\">\n  This is a simple example text. This is a simple example text. This is a simple example text. This is a simple example text. This is a simple example text. This is a simple example text. This is a simple example text. This is a simple example text.\n</wd-collapse>\n```\n\n----------------------------------------\n\nTITLE: Required Textarea Component in HTML\nDESCRIPTION: Shows how to display a required style for the textarea component using the required attribute when a label is set.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" placeholder=\"请输入...\" label=\"必填\" required></wd-textarea>\n```\n\n----------------------------------------\n\nTITLE: Dot Style Radio Implementation\nDESCRIPTION: Implementation of radio buttons with dot style shape and change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/radio.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" shape=\"dot\" @change=\"change\">\n  <wd-radio :value=\"1\">WOT</wd-radio>\n  <wd-radio :value=\"2\">Merchant Backend</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n\nfunction change(e) {\n  console.log(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Counter-Clockwise Progress Direction\nDESCRIPTION: Shows how to change the progress direction to counter-clockwise.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/circle.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :clockwise=\"false\"></wd-circle>\n```\n\n----------------------------------------\n\nTITLE: Loading Button Implementation\nDESCRIPTION: Shows how to create a loading state button that is disabled from being clicked.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-button loading>Loading</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Custom Label Rendering for Segmented Component in Vue\nDESCRIPTION: Shows how to use the label slot to customize the rendering of segment labels, including images and text.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/segmented.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" :vibrate-short=\"true\">\n  <template #label=\"{ option }\">\n    <view class=\"section-slot\">\n      <image style=\"border-radius: 50%; width: 32px; height: 32px\" :src=\"option.payload.avatar\" />\n      <view class=\"name\">{{ option.value }}</view>\n    </view>\n  </template>\n</wd-segmented>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = ref([\n  {\n    value: '李雷',\n    disabled: false,\n    payload: {\n      avatar: 'https://registry.npmmirror.com/wot-design-uni-assets/*/files/redpanda.jpg'\n    }\n  },\n  {\n    value: '韩梅梅',\n    disabled: false,\n    payload: {\n      avatar: 'https://registry.npmmirror.com/wot-design-uni-assets/*/files/capybara.jpg'\n    }\n  }\n])\n```\n\nLANGUAGE: scss\nCODE:\n```\n.section {\n  width: 100%;\n  padding: 0 24rpx;\n  box-sizing: border-box;\n  &-slot {\n    padding: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Duration for Toast in TypeScript\nDESCRIPTION: Demonstrates how to set a custom display duration for a toast by setting the duration parameter in milliseconds. Setting it to 0 will prevent the toast from automatically closing.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst open = () => {\n  toast.show({\n    msg: 'Custom Duration',\n    duration: 5000\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: 确定前校验的DatetimePicker示例\nDESCRIPTION: 使用before-confirm函数在用户点击确定按钮时进行校验，可以控制选择器的关闭并提供自定义验证逻辑。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast></wd-toast>\n<wd-datetime-picker label=\"before-confirm\" v-model=\"value\" :before-confirm=\"beforeConfirm\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\n\nconst toast = useToast()\nconst beforeConfirm = (value, resolve, picker) => {\n  picker.setLoading(true)\n  setTimeout(() => {\n    picker.setLoading(false)\n    if (value > Date.now()) {\n      resolve(false)\n      toast.error('不能选择大于今天的日期')\n    } else {\n      resolve(true)\n    }\n  }, 2000)\n}\n\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n```\n\n----------------------------------------\n\nTITLE: Named Tabs Implementation\nDESCRIPTION: Implementation of tabs with named identifiers for each tab\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabs.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\">\n  <block v-for=\"item in tabs\" :key=\"item\">\n    <wd-tab :title=\"`${item}`\" :name=\"item\">\n      <view class=\"content\">内容{{ item }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tabs = ref(['这', '是', '一', '个', '例子'])\nconst tab = ref('例子')\n```\n\n----------------------------------------\n\nTITLE: Basic Cell Component Usage - HTML\nDESCRIPTION: Basic usage examples of Cell component both standalone and within CellGroup wrapper\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/cell.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"标题文字\" value=\"内容\" />\n\n<wd-cell-group>\n  <wd-cell title=\"标题文字\" value=\"内容\" />\n  <wd-cell title=\"标题文字\" label=\"描述信息\" value=\"内容\" />\n</wd-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Sidebar with Badge Notifications in HTML\nDESCRIPTION: Shows how to add badge notifications to sidebar items. The is-dot attribute displays a small red dot, while the badge attribute displays a numeric badge.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\">\n  <wd-sidebar-item :value=\"0\" label=\"标签名称\" is-dot />\n  <wd-sidebar-item :value=\"1\" label=\"标签名称\" badge=\"5\" />\n  <wd-sidebar-item :value=\"2\" label=\"标签名称\" />\n</wd-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Skeleton Screen in HTML and TypeScript\nDESCRIPTION: Shows how to create a grid-style skeleton screen using the wd-skeleton component with a custom row-col configuration.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/skeleton.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-skeleton :row-col=\"grid\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst grid = [\n  [\n    { width: '48px', height: '48px' },\n    { width: '48px', height: '48px' },\n    { width: '48px', height: '48px' },\n    { width: '48px', height: '48px' },\n    { width: '48px', height: '48px' }\n  ],\n  [\n    { width: '48px', height: '16px' },\n    { width: '48px', height: '16px' },\n    { width: '48px', height: '16px' },\n    { width: '48px', height: '16px' },\n    { width: '48px', height: '16px' }\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Loadmore Component Usage - HTML\nDESCRIPTION: Demonstrates the basic implementation of the loadmore component with different states including loading, finished, and error states.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/loadmore.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-loadmore custom-class=\"loadmore\" state=\"loading\" />\n\n<wd-loadmore custom-class=\"loadmore\" state=\"finished\" />\n\n<wd-loadmore custom-class=\"loadmore\" state=\"error\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Rate Component in HTML and TypeScript\nDESCRIPTION: Demonstrates how to use the Rate component with v-model for two-way binding and a change event handler. The TypeScript code shows how to define the initial value and handle the change event.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/rate.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n\nfunction changeValue({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Pen Color and Width in Signature Component\nDESCRIPTION: Demonstrates how to customize the pen color and width in the signature component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/signature.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature pen-color=\"#0083ff\" :line-width=\"4\" />\n```\n\n----------------------------------------\n\nTITLE: Hiding Min and Max Values in Slider HTML\nDESCRIPTION: Illustrates how to hide the minimum and maximum values of the slider using the hide-min-max attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/slider.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" hide-min-max />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic NumberKeyboard in Vue\nDESCRIPTION: Demonstrates the basic usage of the NumberKeyboard component with input and delete event handlers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/number-keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Default Keyboard\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" @input=\"onInput\" @delete=\"onDelete\"></wd-number-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Handling Resize Event and Dynamic Sizing (TypeScript)\nDESCRIPTION: This TypeScript snippet provides the logic for the corresponding HTML example using Vue 3 Composition API and UniApp. It initializes reactive variables 'width' and 'height' using 'ref'. The 'onReady' lifecycle hook (UniApp specific) simulates a change in the wrapped view's dimensions after a 1.5-second delay. The 'handleResize' function is defined to capture the event detail object, which contains the new dimensions ('width', 'height') and position ('top', 'right', 'bottom', 'left'), and logs them to the console.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/resize.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst width = ref<string>('')\nconst height = ref<string>('')\n\nonReady(() => {\n  setTimeout(() => {\n    width.value = '100px'\n    height.value = '100px'\n  }, 1500)\n})\n\nfunction handleResize(detail: Record<string, string | number>) {\n  const { height, width, top, right, bottom, left } = detail\n  console.log(height, width, top, right, bottom, left)\n}\n```\n\n----------------------------------------\n\nTITLE: Circle Progress Width Control\nDESCRIPTION: Shows how to control the progress bar width using the strokeWidth property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/circle.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :strokeWidth=\"15\"></wd-circle>\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider Theme Customization\nDESCRIPTION: Implementation of custom theme variables using ConfigProvider component\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-config-provider :theme-vars=\"themeVars\">\n  <div style=\"margin: 16px\">\n    <wd-button round block type=\"primary\">提交</wd-button>\n  </div>\n</wd-config-provider>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref, reactive } from 'vue'\n\nexport default {\n  setup() {\n    const themeVars = reactive({\n      buttonPrimaryBgColor: '#07c160',\n      buttonPrimaryColor: '#07c160'\n    })\n    return {\n      themeVars\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring License Plate Keyboard in Vue.js\nDESCRIPTION: Shows how to set up a keyboard specifically for inputting license plate numbers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/keyboard.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"License Plate Keyboard\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" mode=\"car\" @input=\"onInput\" @delete=\"onDelete\"></wd-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Button with Icon\nDESCRIPTION: Demonstrates how to add an icon to a regular button using the icon attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-button icon=\"edit-outline\"></wd-button>\n```\n\n----------------------------------------\n\nTITLE: Pagination Component with Text Prompts in Vue.js\nDESCRIPTION: Illustrates the use of the pagination component with text prompts by setting the show-message attribute, along with total and page-size props.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/pagination.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-pagination \n  v-model=\"value\" \n  :total=\"total\" \n  :page-size=\"page\" \n  @change=\"handleChange\" \n  show-icon \n  show-message\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic CountDown Implementation in Vue\nDESCRIPTION: Basic usage of the CountDown component with a time property in milliseconds.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/count-down.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-count-down :time=\"time\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst time = ref<number>(30 * 60 * 60 * 1000)\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Button Implementation\nDESCRIPTION: Shows how to use custom icons with classPrefix attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-button classPrefix=\"fish\" icon=\"kehuishouwu\">Recyclable</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Creating useColPickerData Hook with @vant/area-data\nDESCRIPTION: Implementation of a helper hook that wraps @vant/area-data to provide formatted data for the ColPicker component, including a utility to find children by code.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 可以将此代码放置于项目src/hooks/useColPickerData.ts中\nimport { useCascaderAreaData } from '@vant/area-data'\n\nexport type CascaderOption = {\n  text: string\n  value: string\n  children?: CascaderOption[]\n}\n\n/**\n * 使用'@vant/area-data'作为数据源，构造ColPicker组件的数据\n * @returns\n */\nexport function useColPickerData() {\n  // '@vant/area-data' 数据源\n  const colPickerData: CascaderOption[] = useCascaderAreaData()\n\n  // 根据code查找子节点，不传code则返回所有节点\n  function findChildrenByCode(data: CascaderOption[], code?: string): CascaderOption[] | null {\n    if (!code) {\n      return data\n    }\n    for (const item of data) {\n      if (item.value === code) {\n        return item.children || null\n      }\n      if (item.children) {\n        const childrenResult = findChildrenByCode(item.children, code)\n        if (childrenResult) {\n          return childrenResult\n        }\n      }\n    }\n    return null\n  }\n\n  return { colPickerData, findChildrenByCode }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Image Preview\nDESCRIPTION: Shows how to enable image preview functionality which allows users to click on the image to see a larger version. This uses the enable-preview property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" :src=\"joy\" :enable-preview=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Upload with Preview Interception\nDESCRIPTION: Implements preview functionality with confirmation before showing the preview.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-upload\n  :file-list=\"fileList\"\n  action=\"https://mockapi.eolink.com/zhTuw2P8c29bc981a741931bdd86eb04dc1e8fd64865cb5/upload\"\n  @change=\"handleChange\"\n  :before-preview=\"beforePreview\"\n></wd-upload>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast, useMessage } from '@/uni_modules/wot-design-uni'\n\nconst messageBox = useMessage()\nconst toast = useToast()\nconst fileList = ref<any[]>([\n  {\n    url: 'https://img12.360buyimg.com//n0/jfs/t1/29118/6/4823/55969/5c35c16bE7c262192/c9fdecec4b419355.jpg'\n  }\n])\n\nconst beforePreview = ({ file, resolve }) => {\n  messageBox\n    .confirm({\n      msg: '是否预览图片',\n      title: '提示'\n    })\n    .then(() => {\n      resolve(true)\n    })\n    .catch(() => {\n      toast.show('取消预览操作')\n    })\n}\n\nfunction handleChange({ fileList }) {\n  fileList.value = fileList\n}\n```\n\n----------------------------------------\n\nTITLE: Input with Clear Button\nDESCRIPTION: Input field with a clearable button that allows users to quickly erase content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\" clearable @change=\"handleChange\"/>\n```\n\n----------------------------------------\n\nTITLE: 时间范围选择的DatetimePicker示例\nDESCRIPTION: 当v-model为Array类型时，开启时间范围选择功能，可以选择开始和结束时间。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker label=\"日期选择\" v-model=\"value\" @confirm=\"handleConfirm\" />\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<any[]>(['', Date.now()])\n\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sidebar with Disabled Options in HTML\nDESCRIPTION: Demonstrates how to disable specific sidebar items using the disabled attribute, preventing user selection of those items.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\">\n  <wd-sidebar-item :value=\"0\" label=\"标签名称\" />\n  <wd-sidebar-item :value=\"1\" label=\"标签名称\" disabled />\n  <wd-sidebar-item :value=\"2\" label=\"标签名称\" />\n</wd-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Component Method Signatures\nDESCRIPTION: TypeScript method signatures showing the exposed functions setActive, scrollIntoView, and updateLineStyle.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabs.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetActive(value: number | string, init: boolean, setScroll: boolean): void;\nscrollIntoView(): void;\nupdateLineStyle(animation: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: BeforeConfirm Processing Implementation\nDESCRIPTION: Shows how to implement pre-confirmation processing with loading state and async operations.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/message-box.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n<wd-message-box />\n<wd-button @click=\"beforeConfirm\">beforeConfirm</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage, useToast } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\nconst toast = useToast()\n\nfunction beforeConfirm() {\n  message\n    .confirm({\n      msg: 'Confirm deletion',\n      title: 'Prompt',\n      beforeConfirm: ({ resolve }) => {\n        toast.loading('Deleting...')\n        setTimeout(() => {\n          toast.close()\n          resolve(true)\n          toast.success('Deleted successfully')\n        }, 2000)\n      }\n    })\n    .then(() => {})\n    .catch((error) => {\n      console.log(error)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum and Minimum Values for Slider in HTML\nDESCRIPTION: Demonstrates how to set custom minimum and maximum values for the slider using min and max attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/slider.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" :min=\"4\" :max=\"1000\" />\n```\n\n----------------------------------------\n\nTITLE: 基本用法 - Fab 悬浮按钮\nDESCRIPTION: 展示Fab悬浮按钮的基本使用方法，包括设置类型、位置、方向和禁用状态。通过点击按钮可展开一组动作按钮（一键三连、收藏、投币、点赞）。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/fab.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-fab :disabled=\"disabled\" :type=\"type\" :position=\"position\" :direction=\"direction\">\n  <wd-button @click=\"showToast('一键三连')\" :disabled=\"disabled\" custom-class=\"custom-button\" type=\"primary\" round>\n    <wd-icon name=\"github-filled\" size=\"22px\"></wd-icon>\n  </wd-button>\n  <wd-button @click=\"showToast('我要收藏')\" :disabled=\"disabled\" custom-class=\"custom-button\" type=\"success\" round>\n    <wd-icon name=\"star\" size=\"22px\"></wd-icon>\n  </wd-button>\n\n  <wd-button @click=\"showToast('我要投币')\" :disabled=\"disabled\" custom-class=\"custom-button\" type=\"error\" round>\n    <wd-icon name=\"money-circle\" size=\"22px\"></wd-icon>\n  </wd-button>\n  <wd-button @click=\"showToast('我要点赞')\" :disabled=\"disabled\" custom-class=\"custom-button\" type=\"warning\" round>\n    <wd-icon name=\"thumb-up\" size=\"22px\"></wd-icon>\n  </wd-button>\n</wd-fab>\n```\n\n----------------------------------------\n\nTITLE: Input with Label\nDESCRIPTION: Input field with a label title, which can be used with cell-group to create a cell display type.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-input type=\"text\" label=\"基本用法\" v-model=\"value\" placeholder=\"请输入...\" />\n```\n\n----------------------------------------\n\nTITLE: Resetting NoticeBar Animation in HTML\nDESCRIPTION: Shows how to reset the NoticeBar animation using a ref and a reset button.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar ref=\"notice\" prefix=\"warn-bold\" direction=\"vertical\" :text=\"textArray\" :delay=\"3\" />\n<wd-button @click=\"handleReset\">重置播放动画</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Grouping Cell Components\nDESCRIPTION: Example of grouping multiple cells using the wd-cell-group component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell-group title=\"Group 1\">\n  <wd-cell title=\"Title\" value=\"Content\"></wd-cell>\n  <wd-cell title=\"Title\" value=\"Content\"></wd-cell>\n</wd-cell-group>\n<wd-cell-group title=\"Group 2\">\n  <wd-cell title=\"Title\" value=\"Content\"></wd-cell>\n  <wd-cell title=\"Title\" value=\"Content\"></wd-cell>\n</wd-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Custom Content using Slots\nDESCRIPTION: Shows how to use slots to customize dialog content with a rating component\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/message-box.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box selector=\"wd-message-box-slot\">\n  <wd-rate custom-class=\"custom-rate-class\" v-model=\"rate\" />\n</wd-message-box>\n\n<wd-button @click=\"withSlot\">custom</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst rate = ref<number>(1)\nconst message = useMessage('wd-message-box-slot')\n\nfunction withSlot() {\n  message\n    .confirm({\n      title: '评分'\n    })\n    .then(() => {\n      message.alert(`你的评分为：${rate.value}分`)\n    })\n    .catch((error) => {\n      console.log(error)\n    })\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.custom-rate-class) {\n  display: block;\n  height: 22px;\n}\n```\n\n----------------------------------------\n\nTITLE: Image Preview Implementation\nDESCRIPTION: Shows how to enable image preview functionality with optional preview source.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/img.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" :src=\"joy\" :enable-preview=\"true\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" :src=\"joy\" :preview-src=\"img\" :enable-preview=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring SelectPicker for Single Selection in HTML and TypeScript\nDESCRIPTION: Shows how to set up the SelectPicker for single selection mode by setting the type to 'radio'. The value type changes accordingly.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/select-picker.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-select-picker label=\"Type Switch\" v-model=\"value\" :columns=\"columns\" type=\"radio\"></wd-select-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = ref<Record<string, any>>([{\n  value: '101',\n  label: 'Men\\'s Clothing'\n}, {\n  value: '102',\n  label: 'Luxury Goods'\n}, {\n  value: '103',\n  label: 'Women\\'s Clothing'\n}])\nconst value = ref<string[]>(['101'])\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionSheet with Option States in HTML\nDESCRIPTION: HTML implementation for ActionSheet with different option states including custom color, disabled state, and loading state. Displays options with visual indicators for each state.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"showActions\">弹出菜单</wd-button>\n<wd-action-sheet v-model=\"show\" :actions=\"actions\" @close=\"close\" />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Content Sticky Implementation\nDESCRIPTION: Implementation showing dynamic content insertion into sticky component with conditional rendering.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sticky.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<view style=\"margin-top: 20px;\">\n  <wd-button type=\"error\" v-if=\"show\">点击插入</wd-button>\n  <wd-sticky>\n    <wd-button type=\"success\" v-if=\"show\">动态插入</wd-button>\n  </wd-sticky>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Half-Star Rate Component\nDESCRIPTION: Shows how to implement half-star rating functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/rate.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" allow-half />\n```\n\n----------------------------------------\n\nTITLE: Global Dark Mode CSS Styling\nDESCRIPTION: CSS configuration for applying dark mode styles globally\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.wot-theme-dark body {\n  color: #f5f5f5;\n  background-color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Tabbar Implementation\nDESCRIPTION: Tabbar implementation with custom icon using template slot.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabbar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\">\n  <wd-tabbar-item :value=\"2\" title=\"首页\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"2\" icon=\"cart\" title=\"分类\">\n    <template #icon>\n      <wd-img round height=\"40rpx\" width=\"40rpx\" src=\"https://registry.npmmirror.com/wot-design-uni-assets/*/files/panda.jpg\"></wd-img>\n    </template>\n  </wd-tabbar-item>\n  <wd-tabbar-item :value=\"3\" title=\"我的\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Ghost Button Implementation\nDESCRIPTION: Demonstrates how to create a ghost button using the plain attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-button plain>主要按钮</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Basic PickerView Implementation with HTML and TypeScript\nDESCRIPTION: Demonstrates the basic setup of a PickerView component with a single column of options. The example shows how to bind data using v-model and handle change events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker-view.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" v-model=\"value\" @change=\"onChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nconst toast = useToast()\nconst columns = ref(['选项1', '选项2', '选项3', '选项4', '选项5', '选项6', '选项7'])\nconst value3 = ref<string>('')\nfunction onChange({picker, value, index}) {\n  toast.show(`当前选中项: ${value}, 下标: ${index}`)\n}\n\n```\n\n----------------------------------------\n\nTITLE: ImgCropper with 3:2 Aspect Ratio for Photos\nDESCRIPTION: Implementation of the ImgCropper component with a 3:2 aspect ratio, which is suitable for standard photo formats. This ratio is configured using the aspect-ratio property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img-cropper.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  aspect-ratio=\"3:2\"\n  @confirm=\"handleConfirm\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n```\n\n----------------------------------------\n\nTITLE: Inline Radio Group Implementation\nDESCRIPTION: Implementation of a radio group with inline display. The 'inline' attribute enables horizontal display of radio options in a single row.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/radio.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" inline>\n  <wd-radio value=\"1\">单选框1</wd-radio>\n  <wd-radio value=\"2\">单选框2</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Circular Image Display\nDESCRIPTION: Demonstrates how to display an image in a circular shape using the round property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" round :src=\"joy\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TableColumn Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes for individual columns in the Table component, including field mapping, styling, and sorting options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/table.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数     | 说明                        | 类型            | 可选值              | 默认值 | 最低版本 |\n| -------- | --------------------------- | --------------- | ------------------- | ------ | -------- |\n| prop     | 字段名称,对应列内容的字段名 | string          | -                   | -      | 0.0.39   |\n| label    | 显示的标题                  | string          | -                   | -      | 0.0.39   |\n| width    | 对应列的宽度，单位为 px     | number / string | -                   | 100    | 0.0.39   |\n| sortable | 是否开启列排序              | boolean         | -                   | false  | 0.0.39   |\n| fixed    | 是否固定本列                | boolean         | -                   | false  | 0.0.39   |\n| align    | 列的对齐方式                | AlignType       | left, center, right | left   | 0.0.39   |\n```\n\n----------------------------------------\n\nTITLE: Steps with Title and Description\nDESCRIPTION: Implementation of steps with custom titles and descriptions, including a next step button.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/steps.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\"active\" align-center>\n  <wd-step title=\"步骤1\" description=\"注册1个账号\" />\n  <wd-step title=\"步骤2\" description=\"登录账号并绑定手机\" />\n  <wd-step title=\"步骤3\" description=\"完善个人信息\" />\n</wd-steps>\n<wd-button size=\"small\" @click=\"nextStep\">下一步</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = ref<number>(0)\n\nfunction nextStep() {\n  active.value = active.value + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Background Color Grid Implementation\nDESCRIPTION: Setting a custom background color for the grid using the bg-color property. This example shows a grid with a light black background color.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid bg-color=\"rgba(0, 0, 0, 0.02)\">\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Disabled Radio Implementation\nDESCRIPTION: Implementation of disabled radio button group.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/radio.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" disabled>\n  <wd-radio value=\"1\">WOT</wd-radio>\n  <wd-radio value=\"2\">Merchant Backend</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Initializing DatetimePickerView with Basic Usage in Vue\nDESCRIPTION: Demonstrates the basic usage of DatetimePickerView component with v-model binding and change event handling. The default type is 'datetime' which displays year, month, day, hour, and minute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker-view.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n\n<wd-datetime-picker-view v-model=\"value\" label=\"日期选择\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nconst toast = useToast()\nconst value = ref<number>(Date.now())\n\nfunction onChange1({ value }) {\n  toast.show('选择了' + new Date(value))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Collapse State with TypeScript\nDESCRIPTION: Sets up the initial state for a collapse component using Vue ref\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/collapse.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string[]>(['item1'])\n```\n\n----------------------------------------\n\nTITLE: Large Size Cell Component\nDESCRIPTION: Demonstrates setting a larger cell size using the size attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Title\" value=\"Content\" size=\"large\"></wd-cell>\n```\n\n----------------------------------------\n\nTITLE: Input with Character Limit\nDESCRIPTION: Input field with maximum character limit and visible counter using maxlength and show-word-limit attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\" :maxlength=\"20\" show-word-limit @change=\"handleChange\"/>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Custom Icon Using Slots\nDESCRIPTION: Shows how to customize a tabbar item's icon using named slots to replace the default icon with custom content like an image.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabbar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\">\n  <wd-tabbar-item :value=\"2\" title=\"Home\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"2\" icon=\"cart\" title=\"Category\">\n    <template #icon>\n      <wd-img round height=\"40rpx\" width=\"40rpx\" src=\"https://registry.npmmirror.com/wot-design-uni-assets/*/files/panda.jpg\"></wd-img>\n    </template>\n  </wd-tabbar-item>\n  <wd-tabbar-item :value=\"3\" title=\"My\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Gradient Color Progress Implementation\nDESCRIPTION: Shows how to implement gradient colors in the progress bar using object notation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/circle.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :color=\"gradientColor\"></wd-circle>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst gradientColor = {\n  '0%': '#ffd01e',\n  '100%': '#ee0a24'\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Implementation\nDESCRIPTION: Demonstrates using a custom icon with class-prefix attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/icon.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-icon class-prefix=\"fish\" name=\"kehuishouwu\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Display for Checkbox Group in Vue\nDESCRIPTION: Shows how to display checkboxes horizontally within a group using the inline attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" inline>\n  <wd-checkbox value=\"1\">Option 1</wd-checkbox>\n  <wd-checkbox value=\"2\">Option 2</wd-checkbox>\n  <wd-checkbox value=\"3\">Option 3</wd-checkbox>\n  <wd-checkbox value=\"4\">Option 4</wd-checkbox>\n</wd-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Using Segmented Component in Popup for WeChat Mini Program\nDESCRIPTION: Demonstrates how to use the Segmented component within a Popup in WeChat Mini Program, including updating the component's style after the popup opens.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/segmented.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">Open Popup</wd-button>\n<wd-popup v-model=\"showPopup\" position=\"bottom\" @after-enter=\"handlePopupShow\" closable custom-style=\"height: 200px;padding: 0 24rpx;\">\n  <view class=\"title\">Using in Popup</view>\n  <wd-segmented :options=\"list\" v-model:value=\"current\" ref=\"segmentedRef\"></wd-segmented>\n</wd-popup>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = ref<string[]>(['Comments', 'Likes', 'Contributions', 'Rewards'])\nconst current = ref('Likes')\n\nconst segmentedRef = ref<SegmentedInstance>() // Get segmented instance\nconst showPopup = ref(false) // Control popup display\n/**\n * Click button to open popup\n */\nfunction handleClick() {\n  showPopup.value = true\n}\n/**\n * Update segmented style after popup opens\n */\nfunction handlePopupShow() {\n  segmentedRef.value?.updateActiveStyle()\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.title {\n  display: flex;\n  font-size: 32rpx;\n  align-items: center;\n  justify-content: center;\n  padding: 24rpx 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Colors with active-color and inactive-color\nDESCRIPTION: Example demonstrating how to change the background colors for active and inactive states of the switch.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/switch.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" active-color=\"#13ce66\" inactive-color=\"#f00\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Notify Component in HTML\nDESCRIPTION: Shows how to include the wd-notify component in the HTML and set up a button to trigger the notification.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-notify.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-notify />\n<wd-button @click=\"showNotify\">notify</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group with Min and Max Selections in Vue\nDESCRIPTION: Demonstrates how to set minimum and maximum selection limits for a checkbox group.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" :min=\"1\" :max=\"3\">\n  <wd-checkbox modelValue=\"jd\">京东</wd-checkbox>\n  <wd-checkbox modelValue=\"jingmai\">沃特</wd-checkbox>\n  <wd-checkbox modelValue=\"shop\">商家后台</wd-checkbox>\n  <wd-checkbox modelValue=\"market\">营销中心</wd-checkbox>\n</wd-checkbox-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(['jd'])\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Badge Notifications\nDESCRIPTION: Shows how to add badge notifications to tabbar items using the value property and is-dot attribute for displaying numeric badges or dot indicators.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabbar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\">\n  <wd-tabbar-item is-dot :value=\"2\" title=\"Dot\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"2\" icon=\"cart\" title=\"Category\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"30\" title=\"My\" icon=\"user\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"200\" title=\"Max Value\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Disabled Input Field\nDESCRIPTION: Implementation of a disabled input field using the disabled attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Using Toast Component in SFC for Mini Program\nDESCRIPTION: Example of how to properly use Toast and similar components in uni-app SFC (Single File Components), which must be explicitly included in the template.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/common-problems.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast></wd-toast>\n```\n\n----------------------------------------\n\nTITLE: Custom Content Rendering in Divider Component\nDESCRIPTION: Demonstrates how to insert custom content, such as an icon, in the middle of the dividing line using the default slot.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/divider.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider>\n  <wd-icon name=\"arrow-down\" size=\"20\" color=\"#1989fa\" />\n</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Custom Content Badge Implementation in HTML\nDESCRIPTION: Shows how to use string values for custom badge content instead of numbers\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/badge.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge value=\"new\">\n  <wd-button>Button</wd-button>\n</wd-badge>\n<wd-badge value=\"hot\">\n  <wd-button icon=\"cart-o\"></wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Using Slot Content with Skeleton Screens in HTML and JavaScript\nDESCRIPTION: Shows how to use slot content with the wd-skeleton component, displaying the content when loading is complete.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/skeleton.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-skeleton \n  :row-col=\"[\n    [\n      { width: '48px', height: '48px' },\n      { width: '48px', height: '48px' },\n      { width: '48px', height: '48px' },\n      { width: '48px', height: '48px' },\n      { width: '48px', height: '48px' }\n    ],\n    [\n      { width: '48px', height: '16px' },\n      { width: '48px', height: '16px' },\n      { width: '48px', height: '16px' },\n      { width: '48px', height: '16px' },\n      { width: '48px', height: '16px' }\n    ]\n  ]\" \n  :loading=\"showContent\"\n>\n  <wd-grid>\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"文字\" />\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"文字\" />\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"文字\" />\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"文字\" />\n    <wd-grid-item icon-size=\"32px\" icon=\"picture\" text=\"文字\" />\n  </wd-grid>\n</wd-skeleton>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst showContent = ref(true)\n```\n\n----------------------------------------\n\nTITLE: Custom Column Count Grid Implementation\nDESCRIPTION: Customizing the number of columns in a grid using the column property. This example shows a grid with 3 columns that automatically arranges items into appropriate rows.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid :column=\"3\">\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Customizing Shape for Checkbox Group in Vue\nDESCRIPTION: Shows how to set a custom shape for all checkboxes within a group using the shape attribute on the checkbox group.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" shape=\"square\">\n  <wd-checkbox value=\"1\">Option 1</wd-checkbox>\n  <wd-checkbox value=\"2\">Option 2</wd-checkbox>\n  <wd-checkbox value=\"3\">Option 3</wd-checkbox>\n  <wd-checkbox value=\"4\">Option 4</wd-checkbox>\n</wd-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Manual Control Implementation\nDESCRIPTION: Example of manually controlling the CountTo animation with start, pause, and reset functionality using a grid interface.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/count-to.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-count-to\n  ref=\"countTo\"\n  :auto-start=\"false\"\n  prefix=\"￥\"\n  :startVal=\"1000\"\n  :decimals=\"3\"\n  :endVal=\"9999.32\"\n  :fontSize=\"32\"\n  suffix=\"%\"\n  color=\"#1e9fff\"\n></wd-count-to>\n<wd-grid clickable border>\n  <wd-grid-item text=\"Start\" icon=\"play-circle-stroke\" @itemclick=\"start\" />\n  <wd-grid-item text=\"Pause\" icon=\"pause-circle\" @itemclick=\"pause\" />\n  <wd-grid-item text=\"Reset\" icon=\"refresh\" @itemclick=\"reset\" />\n</wd-grid>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CountToInstance } from '@/uni_modules/wot-design-uni/components/wd-count-to/types'\n\nconst countTo = ref<CountToInstance>()\n\nconst start = () => {\n  countTo.value!.start()\n}\nconst pause = () => {\n  countTo.value!.pause()\n}\nconst reset = () => {\n  countTo.value!.reset()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Keyboard Usage in Vue\nDESCRIPTION: Demonstrates how to use the basic keyboard component with v-model:visible for controlling visibility and event handlers for input and delete actions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"默认键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" @input=\"onInput\" @delete=\"onDelete\"></wd-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Round Tag Implementation\nDESCRIPTION: Demonstrates how to create round-style tags with different types.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag round>Tag</wd-tag>\n<wd-tag type=\"primary\" round>Tag</wd-tag>\n<wd-tag type=\"danger\" round>Tag</wd-tag>\n<wd-tag type=\"warning\" round>Tag</wd-tag>\n<wd-tag type=\"success\" round>Tag</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Custom Preview Source\nDESCRIPTION: Example of setting a different image for preview than what is displayed, using the preview-src property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" :src=\"joy\" :preview-src=\"img\" :enable-preview=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Implementation in HTML and TypeScript\nDESCRIPTION: Demonstrates the basic usage of the Sidebar component with three sidebar items. The active item is controlled through v-model binding to an index reference.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\">\n  <wd-sidebar-item :value=\"0\" label=\"标签名称\" />\n  <wd-sidebar-item :value=\"1\" label=\"标签名称\" />\n  <wd-sidebar-item :value=\"2\" label=\"标签名称\" />\n</wd-sidebar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = ref(0)\n```\n\n----------------------------------------\n\nTITLE: Hairline Plain Button Implementation\nDESCRIPTION: Shows how to create a hairline plain button using both plain and hairline attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-button plain hairline>Primary Button</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-confirmation Validation for Column Picker in Vue 3\nDESCRIPTION: This snippet shows how to use the before-confirm attribute to perform validation before confirming the selection in a column picker. It includes both HTML and TypeScript code for the validation logic.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker\n  label=\"before-confirm\"\n  v-model=\"value\"\n  :columns=\"area\"\n  :column-change=\"columnChange\"\n  :before-confirm=\"beforeConfirm\"\n  @confirm=\"handleConfirm\"\n></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>([])\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  })\n])\n\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\nconst beforeConfirm = (value: (string | number)[], selectedItems: Record<string, any>[], resolve: (isPass: boolean) => void) => {\n  if (parseInt(String(value[2])) > 120000) {\n    toast.error('该地区库存不足')\n    resolve(false)\n  } else {\n    resolve(true)\n  }\n}\n\nfunction handleConfirm({ selectedItems }: any) {\n  displayValue.value = selectedItems\n    .map((item: any) => {\n      return item.label\n    })\n    .join('')\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Swiper Navigation Controls\nDESCRIPTION: Shows how to implement manual navigation controls in the Swiper component by disabling autoplay and enabling control buttons in the indicator.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swiper.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-swiper\n  :list=\"swiperList\"\n  :autoplay=\"false\"\n  v-model:current=\"current\"\n  :indicator=\"{ showControls: true }\"\n  :loop=\"false\"\n  @click=\"handleClick\"\n  @change=\"onChange\"\n></wd-swiper>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tag Addition\nDESCRIPTION: Demonstrates how to implement an add tag feature with the dynamic property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag v-for=\"(tag, index) in tags\" :key=\"index\" custom-class=\"space\" round closable @close=\"handleClose(index)\">{{item}}</wd-tag>\n<wd-tag custom-class=\"space\" round dynamic @confirm=\"handleConfirm\"></wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Icon Button Implementation\nDESCRIPTION: Shows how to create an icon-only button using type=\"icon\" and icon property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"icon\" icon=\"picture\"></wd-button>\n```\n\n----------------------------------------\n\nTITLE: Input with Prefix and Suffix Icons\nDESCRIPTION: Input field with custom icons at the beginning and end of the field using prefix-icon and suffix-icon attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-input\n  v-model=\"value\"\n  prefix-icon=\"dong\"\n  suffix-icon=\"list\"\n  @change=\"handleChange\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Loadmore Component in WOT Design Uni\nDESCRIPTION: Demonstrates the three basic states of the loadmore component: loading, finished, and error. Each state displays appropriate loading indication at the bottom of a list.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/loadmore.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-loadmore custom-class=\"loadmore\" state=\"loading\" />\n\n<wd-loadmore custom-class=\"loadmore\" state=\"finished\" />\n\n<wd-loadmore custom-class=\"loadmore\" state=\"error\" />\n```\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.loadmore) {\n  background-color: #f4f4f4;\n  margin: 20px 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Steps Implementation\nDESCRIPTION: Demonstrates vertical orientation of steps using the vertical property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/steps.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\"1\" vertical>\n  <wd-step description=\"注册1个账号\" />\n  <wd-step description=\"登录账号并绑定手机\" />\n  <wd-step description=\"完善个人信息\" />\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Circle Progress Color Customization\nDESCRIPTION: Demonstrates color customization for both the progress bar and track.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/circle.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" color=\"#1C64FD\" layer-color=\"#EBEEF5\"></wd-circle>\n```\n\n----------------------------------------\n\nTITLE: Text Carousel Configuration with Vue\nDESCRIPTION: Sets up the text array for the carousel and implements the onNext handler to track which text is currently displayed.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst textArray = ref([\n  '欢迎使用wot design uni',\n  '该组件库基于uniapp ->Vue3, ts构建',\n  '项目地址：https://github.com/Moonofweisheng/wot-design-uni',\n  '我们的目标是打造最强uniapp组件库',\n  '诚挚邀请大家共同建设',\n  '这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息'\n])\n\nconst onNext = (index: number) => {\n  console.log('展示下一条，index: ', index)\n  console.log('文本是：' + textArray.value[index])\n}\n```\n\n----------------------------------------\n\nTITLE: Popup with Close Button - HTML\nDESCRIPTION: Shows how to implement a popup with a closable button for user interaction.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/popup.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup :visible.sync=\"show\" position=\"bottom\" closable>\n  <view style=\"height: 200px; text-align: center; line-height: 200px;\">\n    Content\n  </view>\n</wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Inline Checkbox Group in Vue\nDESCRIPTION: Demonstrates how to display checkboxes in a single line using the inline attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" inline>\n  <wd-checkbox modelValue=\"jingmai\">沃特</wd-checkbox>\n  <wd-checkbox modelValue=\"shop\">商家后台</wd-checkbox>\n</wd-checkbox-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(['jingmai'])\n```\n\n----------------------------------------\n\nTITLE: Adding Title to NumberKeyboard in Vue\nDESCRIPTION: Shows how to add a title to the NumberKeyboard component using the title property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/number-keyboard.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Keyboard with Title\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" title=\"Enter Password\" extra-key=\".\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Toast Instances with Different Selectors\nDESCRIPTION: Example showing how to use multiple instances of hooks like useToast by specifying different selectors. This is useful when components need their own toast instances.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast></wd-toast>\n<wd-toast selector=\"my-toast\"></wd-toast>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst toast = useToast()\nconst myToast = useToast('my-toast')\n```\n\n----------------------------------------\n\nTITLE: Styled Backtop Component Implementation\nDESCRIPTION: Shows how to apply custom styles to the backtop component using the customStyle attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/backtop.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-backtop :scrollTop=\"scrollTop\" customStyle=\"background: #007aff;color:white;\"></wd-backtop>\n```\n\n----------------------------------------\n\nTITLE: Handling Error State Reload in Loadmore Component\nDESCRIPTION: Demonstrates how to set up event handling for the error state, allowing users to retry loading when they click on the error message.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/loadmore.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-loadmore custom-class=\"loadmore\" state=\"error\" @reload=\"loadmore\" />\n```\n\n----------------------------------------\n\nTITLE: Navbar with Capsule Style\nDESCRIPTION: Implementation of a navbar with a custom return capsule using the navbar-capsule component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/navbar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"Title\" left-text=\"Back\" right-text=\"Settings\" left-arrow>\n  <template #capsule>\n    <wd-navbar-capsule @back=\"handleBack\" @back-home=\"handleBackHome\" />\n  </template>\n</wd-navbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handleBack() {\n  uni.navigateBack({})\n}\n\nfunction handleBackHome() {\n  uni.reLaunch({ url: '/pages/index/Index' })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prefix and Suffix with Text Component in HTML\nDESCRIPTION: Shows two approaches to add prefix and suffix to text: using properties and using named slots for more complex content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-text\n  text=\"12345678901\"\n  mode=\"phone\"\n  format\n  type=\"primary\"\n  prefix=\"Prefix\"\n  suffix=\"Suffix\"\n/>\n\n<wd-text text=\"12345678901\" mode=\"phone\" format type=\"primary\">\n  <template #prefix>\n    <text>Prefix</text>\n  </template>\n  <template #suffix>Suffix</template>\n</wd-text>\n```\n\n----------------------------------------\n\nTITLE: Button Size Variants\nDESCRIPTION: Demonstrates different button sizes - small, medium, and large.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-button size=\"small\">小号按钮</wd-button>\n<wd-button size=\"medium\">中号按钮</wd-button>\n<wd-button size=\"large\">大号按钮</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Component Usage in HTML\nDESCRIPTION: Shows how to use the wd-text component to display a paragraph of text content using the text property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-text\n  text=\"Reed leaves fill the sandbar, cold sand carries shallow streams. Twenty years later, passing the south tower again. The boat tied under willows is not yet steady, how many days until mid-autumn comes again? Yellow crane at the broken cliff, has my old friend been here? The old rivers and mountains are all filled with new sorrows. Wanting to buy osmanthus flowers and bring wine, but it's never like the wanderings of youth.\"\n></wd-text>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Segmented Component in Vue\nDESCRIPTION: Demonstrates how to use the Segmented component with a list of options and v-model binding for the current selection.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/segmented.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\"></wd-segmented>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = ref<string[]>(['评论', '点赞', '贡献', '打赏'])\n\nconst current = ref('点赞')\n```\n\n----------------------------------------\n\nTITLE: Using Custom Image URL in StatusTip Component\nDESCRIPTION: Demonstrates how to use a custom image URL with the StatusTip component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/status-tip.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-status-tip image=\"https://registry.npmmirror.com/wot-design-uni-assets/*/files/panda.jpg\" tip=\"查看我的头像\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Transparent Background in Navbar\nDESCRIPTION: Example showing how to set a transparent background for the navbar using custom styles.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/navbar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"Title\" custom-style=\"background-color: transparent !important;\"></wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Using Slide Animation with Transition Component in HTML\nDESCRIPTION: Shows how to use the 'slide' animation type with the wd-transition component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/transition.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-transition :show=\"show\" name=\"slide\">内容</wd-transition>\n```\n\n----------------------------------------\n\nTITLE: Independent Badge Implementation in HTML\nDESCRIPTION: Demonstrates how to use badges independently without wrapping other elements\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/badge.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge value=\"12\"></wd-badge>\n<wd-badge value=\"primary\" type=\"primary\"></wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Plain Button Implementation\nDESCRIPTION: Demonstrates how to create a plain styled button using the plain attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-button plain>Primary Button</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger Slot in DatetimePicker\nDESCRIPTION: Shows how to use a custom trigger slot to modify how the DatetimePicker is activated.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\">\n  <wd-button>Trigger with Slot</wd-button>\n</wd-datetime-picker>\n```\n\n----------------------------------------\n\nTITLE: Using virtualHost in Vue 3 Script Setup for Mini Program Component Rendering\nDESCRIPTION: Configuration to enable virtualHost in Vue 3 using script setup to improve component rendering in WeChat mini programs by removing extra wrapper nodes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/common-problems.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n<script lang=\"ts\">\nexport default {\n  // Set custom nodes as virtual to make them behave more like Vue components and remove the extra outermost tag of WeChat mini program custom components\n  options: {\n    virtualHost: true\n  }\n}\n</script>\n<script lang=\"ts\" setup>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vertically Centered Input Field\nDESCRIPTION: Input field with label vertically centered using the center attribute instead of the default top alignment.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<wd-input type=\"text\" label=\"基本用法\" v-model=\"value\" center />\n```\n\n----------------------------------------\n\nTITLE: Customizing Text in Loadmore Component\nDESCRIPTION: Shows how to customize the text displayed for each state by setting the loading-text, finished-text, and error-text properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/loadmore.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-loadmore custom-class=\"loadmore\" state=\"loading\" loading-text=\"自定义加载文案\" />\n\n<wd-loadmore custom-class=\"loadmore\" state=\"finished\" finished-text=\"自定义完成文案\" />\n\n<wd-loadmore custom-class=\"loadmore\" state=\"error\" error-text=\"自定义错误文案\" />\n```\n\n----------------------------------------\n\nTITLE: Animated Tab Transitions\nDESCRIPTION: Demonstrates how to add transition animations when switching between tabs using the animated property. This creates a smoother user experience when navigating between tab contents.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\" animated>\n  <block v-for=\"item in 4\" :key=\"item\">\n    <wd-tab :title=\"`Tab ${item}`\">\n      <view class=\"content\">Content {{ item }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\n----------------------------------------\n\nTITLE: Icon Button Implementation\nDESCRIPTION: Shows how to create an icon-only button using type=\"icon\" and the icon attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"icon\" icon=\"picture\"></wd-button>\n```\n\n----------------------------------------\n\nTITLE: Custom Anchors for FloatingPanel in HTML, JavaScript, and CSS\nDESCRIPTION: Shows how to set custom anchor points for the FloatingPanel using the 'anchors' property and control the panel's height with 'v-model:height'. The panel can be anchored at 100px, 40% and 70% of the screen height.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/floating-panel.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-floating-panel v-model:height=\"height\" :anchors=\"anchors\" @heightChange=\"handleHeightChange\">\n  <view class=\"inner-content\">自定义锚点 {{ anchors }} - {{ height.toFixed(0) }}</view>\n</wd-floating-panel>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst height = ref<number>(0)\nconst windowHeight = ref<number>(0)\nconst anchors = ref<number[]>([])\n\nconst handleHeightChange = ({ height }: { height: number }) => {\n  console.log(height)\n}\n\nonLoad(() => {\n  windowHeight.value = uni.getSystemInfoSync().windowHeight\n  anchors.value = [100, Math.round(0.4 * windowHeight.value), Math.round(0.7 * windowHeight.value)]\n  height.value = anchors.value[1]\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n.inner-content {\n  padding: 1rem;\n  text-align: center;\n  font-size: 16px;\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Segmented Component in Vue\nDESCRIPTION: Demonstrates how to disable the Segmented component by setting the disabled attribute to true.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/segmented.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" disabled></wd-segmented>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Usage in Vue\nDESCRIPTION: Shows how to use a checkbox group with v-model binding for multiple selections.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\">\n  <wd-checkbox modelValue=\"jingmai\">沃特</wd-checkbox>\n  <wd-checkbox modelValue=\"shop\">商家后台</wd-checkbox>\n</wd-checkbox-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number[]>([])\n```\n\n----------------------------------------\n\nTITLE: Time Range Selection in DatetimePicker\nDESCRIPTION: Demonstrates how to enable time range selection by using an array as the v-model value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker label=\"Date Selection\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<any[]>(['', Date.now()])\n\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Font Size for Text Component in HTML\nDESCRIPTION: Shows how to set a custom font size for the text component using the size property with a CSS size value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-text\n  text=\"Reed leaves fill the sandbar, cold sand carries shallow streams. Twenty years later, passing the south tower again. The boat tied under willows is not yet steady, how many days until mid-autumn comes again? Yellow crane at the broken cliff, has my old friend been here? The old rivers and mountains are all filled with new sorrows. Wanting to buy osmanthus flowers and bring wine, but it's never like the wanderings of youth.\"\n  size=\"16px\"\n></wd-text>\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading Toast in TypeScript\nDESCRIPTION: Shows how to display a loading toast by using the loading shorthand method on the toast instance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst open = () => {\n  toast.loading('Loading')\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Color NoticeBar in HTML\nDESCRIPTION: Shows how to customize the text, icon, and background colors of the NoticeBar.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notice-bar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar\n  text=\"This is a message notification, this is a message notification, this is a message notification\"\n  prefix=\"check-outline\"\n  closable\n  color=\"#34D19D\"\n  background-color=\"#f0f9eb\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabled Radio Group Implementation\nDESCRIPTION: Implementation of a disabled radio group. The 'disabled' attribute prevents user interaction with all radio options in the group.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/radio.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" disabled>\n  <wd-radio value=\"1\">沃特</wd-radio>\n  <wd-radio value=\"2\">商家后台</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Custom Checked Color Radio Group\nDESCRIPTION: Implementation of a radio group with custom checked color. The 'checked-color' attribute changes the color of the selected radio to #fa4350.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/radio.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" checked-color=\"#fa4350\">\n  <wd-radio value=\"1\">沃特</wd-radio>\n  <wd-radio value=\"2\">商家后台</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Local Watermark Configuration in HTML\nDESCRIPTION: Demonstrates how to create a local watermark instead of a full-screen one by setting the full-screen property to false.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/watermark.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-watermark content=\"wot-design-uni\" :full-screen=\"false\"></wd-watermark>\n```\n\n----------------------------------------\n\nTITLE: Status-based Progress Bars in Vue\nDESCRIPTION: Shows how to set different statuses on progress bars to indicate success or danger states.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/progress.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"100\" hide-text status=\"success\" />\n<wd-progress :percentage=\"70\" hide-text status=\"danger\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Card Usage with Title and Footer Slot\nDESCRIPTION: Demonstrates basic usage of the card component with a title attribute and content in the default slot. The example also shows how to use the footer slot to add a button.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/card.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-card title=\"经营分析\">\n  一般的，检举内容由承办的党的委员会或纪律检查委员会将处理意见或复议、复查结论同申诉人见面，听取其意见。复议、复查的结论和决定，应交给申诉人一份。\n  <template #footer>\n    <wd-button size=\"small\" plain>查看详情</wd-button>\n  </template>\n</wd-card>\n```\n\n----------------------------------------\n\nTITLE: Custom Length Password Input Configuration\nDESCRIPTION: Example of setting custom length for password input using the length property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/password-input.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Password input box -->\n<wd-password-input v-model=\"value\" :length=\"4\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n<wd-number-keyboard v-model=\"value\" v-model:visible=\"showKeyboard\" :maxlength=\"4\" @blur=\"showKeyboard = false\"></wd-number-keyboard>\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events for SwipeAction in HTML\nDESCRIPTION: This HTML code demonstrates how to handle click events on the SwipeAction component, which are triggered when closing the swipe buttons.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-swipe-action @click=\"handleClick\">\n  <wd-cell title=\"标题文字\" value=\"内容\" />\n  <template #right>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #C8C7CD;\">操作1</view>\n      <view class=\"button\" style=\"background: #FFB300;\">操作2</view>\n      <view class=\"button\" style=\"background: #E2231A;\">操作3</view>\n    </view>\n  </template>\n</wd-swipe-action>\n```\n\n----------------------------------------\n\nTITLE: Large Size Input Field\nDESCRIPTION: Input field with larger size (16px font) by setting the size attribute to 'large'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-input type=\"text\" label=\"基本用法\" size=\"large\" v-model=\"value\" placeholder=\"请输入...\" />\n```\n\n----------------------------------------\n\nTITLE: Pagination with Text Tips\nDESCRIPTION: Enhanced pagination implementation with both icons and text messages, including total items and page size configuration.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/pagination.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-pagination \n  v-model=\"value\" \n  :total=\"total\" \n  :page-size=\"page\" \n  @change=\"handleChange\" \n  show-icon \n  show-message\n/>\n```\n\n----------------------------------------\n\nTITLE: Left-aligned Placeholder in Search Component\nDESCRIPTION: Demonstrates how to align the placeholder text to the left in the search component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/search.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-search placeholder-left />\n```\n\n----------------------------------------\n\nTITLE: Implementing Day/Week/Month Switching with Calendar Component\nDESCRIPTION: Sets up Calendar with the ability to switch between day, week, and month views using the show-type-switch property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar label=\"日周月切换\" :first-day-of-week=\"1\" show-type-switch v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard Title Using Slot in Vue.js\nDESCRIPTION: Shows how to use a slot to create a custom title for the keyboard component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/keyboard.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Custom Title Using Slot\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" extra-key=\".\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\">\n  <template #title>\n    <text style=\"color: red\">Custom Title</text>\n  </template>\n</wd-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Custom Color Tags\nDESCRIPTION: Demonstrates how to create tags with custom text color and background color.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag color=\"#0083ff\" bg-color=\"#d0e8ff\">Tag</wd-tag>\n<wd-tag color=\"#FAA21E\" bg-color=\"#FAA21E\" plain>Tag</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Applying Cell Style to Checkbox Group in Vue\nDESCRIPTION: Shows how to display checkboxes in a cell style within a group using the cell attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" cell>\n  <wd-checkbox value=\"1\">Option 1</wd-checkbox>\n  <wd-checkbox value=\"2\">Option 2</wd-checkbox>\n  <wd-checkbox value=\"3\">Option 3</wd-checkbox>\n  <wd-checkbox value=\"4\">Option 4</wd-checkbox>\n</wd-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Modifying Input Field Width in InputNumber\nDESCRIPTION: Demonstrates how to modify the width of the input field in the InputNumber component using the input-width attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" input-width=\"70px\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Color for Checkbox Group in Vue\nDESCRIPTION: Demonstrates how to set a custom color for all checked checkboxes within a group using the checked-color attribute on the checkbox group.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" checked-color=\"#4D80F0\">\n  <wd-checkbox value=\"1\">Option 1</wd-checkbox>\n  <wd-checkbox value=\"2\">Option 2</wd-checkbox>\n  <wd-checkbox value=\"3\">Option 3</wd-checkbox>\n  <wd-checkbox value=\"4\">Option 4</wd-checkbox>\n</wd-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Image Watermark Usage in HTML\nDESCRIPTION: Shows how to use an image as a watermark by specifying the image URL and dimensions. Note that DingTalk mini-program only supports network images.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/watermark.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-watermark image=\"https://wot-design-uni.cn/logo.png\" :image-width=\"38\" :image-height=\"38\"></wd-watermark>\n```\n\n----------------------------------------\n\nTITLE: Custom Title Slot in Keyboard Component\nDESCRIPTION: Shows how to use a slot to customize the title of the keyboard.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"使用 slot 自定义标题\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" extra-key=\".\" close-text=\"完成\" @input=\"onInput\" @delete=\"onDelete\">\n  <template #title>\n    <text style=\"color: red\">自定义标题</text>\n  </template>\n</wd-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Using Different Notification Types\nDESCRIPTION: Demonstrates how to display notifications with different types: primary, success, warning, and danger. Each type has a different visual appearance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/use-notify.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Primary notification\nshowNotify({ type: 'primary', message: 'Notification content' })\n\n// Success notification\nshowNotify({ type: 'success', message: 'Notification content' })\n\n// Danger notification\nshowNotify({ type: 'danger', message: 'Notification content' })\n\n// Warning notification\nshowNotify({ type: 'warning', message: 'Notification content' })\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Shape in Vue\nDESCRIPTION: Demonstrates how to customize the shape of checkboxes using the shape attribute, with options for square and button styles.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox v-model=\"value1\" shape=\"square\">Square Checkbox</wd-checkbox>\n<wd-checkbox v-model=\"value2\" shape=\"button\">Button Checkbox</wd-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Advancing Step Progress State - Vue Composition API - TypeScript\nDESCRIPTION: Defines the reactive active step index and the nextStep function for a Steps component in a typical Wot Design Vue application. Identical in function to previous TypeScript snippets, the setup enables user-driven step progress with reactivity. Vue 3 Composition API is the required dependency.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/steps.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = ref<number>(0)\\n\\nfunction nextStep() {\\n  active.value = active.value + 1\\n}\n```\n\n----------------------------------------\n\nTITLE: Popup with Custom Close Icon - HTML\nDESCRIPTION: Shows how to implement a popup with a custom close icon using the check icon.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/popup.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup :visible.sync=\"show\" position=\"bottom\" closable close-icon=\"check\">\n  <view style=\"height: 200px; text-align: center; line-height: 200px;\">\n    Content\n  </view>\n</wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Light Theme Search Component in HTML\nDESCRIPTION: Shows how to implement a light theme for the search component by setting the 'light' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/search.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-search light />\n```\n\n----------------------------------------\n\nTITLE: Dot-shaped Radio Group Implementation\nDESCRIPTION: Implementation of a radio group with dot-shaped radios. The 'shape' attribute is set to 'dot' and includes a change event handler to log selection changes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/radio.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- dot 点状单选 -->\n<wd-radio-group v-model=\"value\" shape=\"dot\" @change=\"change\">\n  <wd-radio :value=\"1\">沃特</wd-radio>\n  <wd-radio :value=\"2\">商家后台</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n\nfunction change(e) {\n  console.log(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Sidebar with Change Event Handling in HTML and TypeScript\nDESCRIPTION: Shows how to listen for and handle changes in the selected sidebar item using the change event. The event handler displays a toast with the current label.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\" @change=\"handleChange\">\n  <wd-sidebar-item :value=\"0\" label=\"标签名称 1\" />\n  <wd-sidebar-item :value=\"1\" label=\"标签名称 2\" />\n  <wd-sidebar-item :value=\"2\" label=\"标签名称 3\" />\n</wd-sidebar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst toast = useToast()\nconst active = ref<number>(1)\n\nfunction handleChange({ value, label }) {\n  toast.show(`当前标签名 ${label}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Dot-style Steps\nDESCRIPTION: Shows implementation of dot-style steps with vertical orientation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/steps.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\"1\" vertical dot>\n  <wd-step description=\"注册1个账号\" />\n  <wd-step description=\"登录账号并绑定手机\" />\n  <wd-step description=\"完善个人信息\" />\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Gradient Color Implementation\nDESCRIPTION: Shows how to implement gradient colors using an object format for the color property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/circle.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :color=\"gradientColor\"></wd-circle>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst gradientColor = {\n  '0%': '#ffd01e',\n  '100%': '#ee0a24'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transparent Background for Navbar\nDESCRIPTION: A code snippet showing how to make the Navbar background transparent using the custom-style attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/navbar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"标题\" custom-style=\"background-color: transparent !important;\"></wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Hiding Labels on Slider in HTML\nDESCRIPTION: Shows how to hide the current value label of the slider using the hide-label attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/slider.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" hide-label/>\n```\n\n----------------------------------------\n\nTITLE: Setting Curtain Image Width in Vue\nDESCRIPTION: Shows how to set the width of the Curtain component's image. The height is automatically calculated based on the original image ratio.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/curtain.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">展示幕帘</wd-button>\n<wd-curtain v-model=\"value\" :src=\"img\" :to=\"link\" width=\"280\"></wd-curtain>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(false)\nconst img = ref<string>('https://img20.360buyimg.com/da/jfs/t1/141592/25/8861/261559/5f68d8c1E33ed78ab/698ad655bfcfbaed.png')\nconst link = ref<string>('/pages/index/index')\n\nfunction handleClick() {\n  value.value = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Keyboard in Vue.js\nDESCRIPTION: Demonstrates basic usage of the Keyboard component with visibility control and input handling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Default Keyboard\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" @input=\"onInput\" @delete=\"onDelete\"></wd-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Centered Cell Content\nDESCRIPTION: Demonstrates vertical centering of cell content using the center attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Title\" value=\"Content\" center></wd-cell>\n```\n\n----------------------------------------\n\nTITLE: Disabled Search Component in HTML\nDESCRIPTION: Demonstrates how to disable the search component using the 'disabled' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/search.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-search disabled />\n```\n\n----------------------------------------\n\nTITLE: Using Calendar Component Instance Methods\nDESCRIPTION: Demonstrates accessing Calendar component instance methods via ref to programmatically control the calendar. Uses with-cell property to hide the internal cell selector.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"openCalendar\">打开日历</wd-button>\n\n<wd-calendar ref=\"calendar\" :with-cell=\"false\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport type { CalendarInstance } from '@/uni_modules/wot-design-uni/components/wd-calendar/types'\n\nconst calendar = ref<CalendarInstance>()\nconst value = ref<number>(Date.now())\n\nfunction openCalendar() {\n  calendar.value?.open()\n}\n\nfunction closeCalendar() {\n  calendar.value?.close()\n}\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NumberKeyboard with Right Sidebar in Vue\nDESCRIPTION: Shows how to set up a NumberKeyboard with a right sidebar, commonly used for amount input scenarios.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/number-keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Keyboard with Right Sidebar\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" mode=\"custom\" extra-key=\".\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\"></wd-number-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Dots Bar Indicator Implementation in Swiper\nDESCRIPTION: Demonstrates how to configure a dots bar style indicator for the Swiper component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swiper.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-swiper :list=\"swiperList\" autoplay v-model:current=\"current\" :indicator=\"{ type: 'dots-bar' }\" @click=\"handleClick\" @change=\"onChange\"></wd-swiper>\n```\n\n----------------------------------------\n\nTITLE: Read-only Textarea Component in HTML\nDESCRIPTION: Demonstrates how to make the textarea component read-only using the readonly attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" readonly></wd-textarea>\n```\n\n----------------------------------------\n\nTITLE: Setting Step for InputNumber Component in Vue\nDESCRIPTION: Shows how to set the step attribute for the InputNumber component, which determines the absolute value of each change in value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" :step=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Aspect Ratio Image Cropper Examples\nDESCRIPTION: Examples of implementing the image cropper with different aspect ratios including 3:2, 16:9, and 16:10 ratios.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/img-cropper.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  aspect-ratio=\"3:2\"\n  @confirm=\"handleConfirm\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n```\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  aspect-ratio=\"16:9\"\n  @confirm=\"handleConfirm\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n```\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  aspect-ratio=\"16:10\"\n  @confirm=\"handleConfirm\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Click Events\nDESCRIPTION: Demonstrates how to listen for click events on tabs using the @click event handler. This allows for custom actions to be executed when a tab is clicked.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabs.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\" @click=\"handleClick\">\n  <block v-for=\"item in 4\" :key=\"item\">\n    <wd-tab :title=\"`Tab ${item}`\">\n      <view class=\"content\">Content {{ item }}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Extra Keys in Vue.js\nDESCRIPTION: Demonstrates how to set up multiple extra keys for the keyboard in custom mode.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/keyboard.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Multiple Extra Keys\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" mode=\"custom\" :extra-key=\"['00', '.']\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Implementing Same Day Selection for Range Calendar\nDESCRIPTION: Allows selection of the same day/week/month in range selection mode by setting the allow-same-day property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"daterange\" v-model=\"value\" allow-same-day @confirm=\"handleConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Layout Columns with SCSS\nDESCRIPTION: Defines SCSS styles for the layout columns, including background colors, border radius, and text formatting. These styles are applied to the column elements to visually distinguish different spans and improve readability.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/layout.md#2025-04-23_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n.bg-dark1,\n.bg-dark,\n.bg-light{\n  border-radius: 4px;\n  min-height: 30px;\n  text-align: center;\n  line-height: 30px;\n  font-size: 12px;\n  margin-bottom: 10px;\n  color: rgba(0, 0, 0, 0.45);\n}\n.bg-dark1 {\n  background: #99a9bf;\n  color: #fff;\n}\n.bg-dark {\n  background: #d3dce6;\n}\n.bg-light {\n  background: #e5e9f2;\n}\n```\n\n----------------------------------------\n\nTITLE: Year-Month Type in DatetimePicker\nDESCRIPTION: Demonstrates setting up the DatetimePicker for year and month selection only.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker type=\"year-month\" v-model=\"value\" label=\"Year Month\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n```\n\n----------------------------------------\n\nTITLE: Basic Circle Progress Implementation\nDESCRIPTION: Demonstrates basic usage of the Circle component with v-model for progress control and text display.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/circle.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :text=\"`进度：${current}%`\"></wd-circle>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst current = ref<number>(10)\n```\n\n----------------------------------------\n\nTITLE: Closable NoticeBar Implementation in HTML\nDESCRIPTION: Makes the NoticeBar closable by adding the closable attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar text=\"这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息\" closable />\n```\n\n----------------------------------------\n\nTITLE: Customizing Placeholder and Cancel Text in HTML\nDESCRIPTION: Demonstrates how to customize the placeholder text and cancel button text using the 'placeholder' and 'cancel-txt' properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/search.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-search placeholder=\"Please enter order number/order name\" cancel-txt=\"Search\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Animation Implementation with Transition Component\nDESCRIPTION: Shows how to implement custom animations by setting specific class names for different animation states and custom duration.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/transition.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-transition\n  :show=\"customShow\"\n  :duration=\"{ enter: 700, leave: 1000 }\"\n  enter-class=\"custom-enter\"\n  enter-active-class=\"custom-enter-active\"\n  enter-to-class=\"custom-enter-to\"\n  leave-class=\"custom-leave\"\n  leave-active-class=\"custom-leave-active\"\n  leave-to-class=\"custom-leave-to\"\n  custom-class=\"block\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Icon in TypeScript\nDESCRIPTION: Demonstrates how to customize the icon of a toast by setting the icon parameter in the options object passed to the show method.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst open = () => {\n  toast.show({\n    msg: 'Custom Icon',\n    icon: 'check-outline'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Label with Icon\nDESCRIPTION: Example of using a custom label slot to combine text and icon in the input label.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\">\n  <template #label>\n    <view style=\"display: inline-flex; align-items: center;\">\n      <view>Custom Label</view>\n      <wd-icon name=\"question-fill\" style=\"margin-left: 4px; color: #4D80F0;\"></wd-icon>\n    </view>\n  </template>\n</wd-input>\n```\n\n----------------------------------------\n\nTITLE: Circle Progress Width Configuration\nDESCRIPTION: Shows how to customize the progress bar stroke width using the strokeWidth property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/circle.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :strokeWidth=\"15\"></wd-circle>\n```\n\n----------------------------------------\n\nTITLE: Date Time Selection with CalendarView in Vue\nDESCRIPTION: Illustrates how to use the CalendarView component for datetime selection, including hours, minutes, and seconds. It also shows how to customize time filtering.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar-view.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"datetime\" v-model=\"value\" @change=\"handleChange\" hide-second :time-filter=\"timeFilter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref('')\n\nconst timeFilter = ({ type, values }) => {\n  if (type === 'minute') {\n    // Only show 0,10,20,30,40,50 minute options\n    return values.filter((item) => {\n      return item % 10 === 0\n    })\n  }\n\n  return values\n}\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Gutter Spacing\nDESCRIPTION: Shows how to adjust spacing between input grid cells using the gutter property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/password-input.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- 密码输入框 -->\n<wd-password-input v-model=\"value\" :gutter=\"10\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring SortButton for Reset in HTML\nDESCRIPTION: Shows how to allow resetting the button to an unselected state when in double arrow mode by setting the allow-reset attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sort-button.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-sort-button title=\"价格\" allow-reset/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Offset in Layout with HTML\nDESCRIPTION: Shows how to use the offset property to create space between columns. This example demonstrates offsetting columns by 4 spans within the 24-column grid system.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/layout.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-row>\n  <wd-col :span=\"4\"><view class=\"bg-dark\">span: 4</view></wd-col>\n  <wd-col :span=\"8\" :offset=\"4\"><view class=\"bg-light\">span: 8 offset: 4</view></wd-col>\n</wd-row>\n<wd-row>\n  <wd-col :span=\"8\" :offset=\"4\"><view class=\"bg-dark\">span: 8 offset: 4</view></wd-col>\n  <wd-col :span=\"8\" :offset=\"4\"><view class=\"bg-dark\">span: 8 offset: 4</view></wd-col>\n</wd-row>\n```\n\n----------------------------------------\n\nTITLE: Radio Group with Individual Radio Props Overrides\nDESCRIPTION: Implementation demonstrating how individual Radio component props override RadioGroup props. Individual Radio components can have their own disabled and checked-color settings.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/radio.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n  <wd-radio-group v-model=\"value\" shape=\"button\" disabled checked-color=\"#f00\">\n    <wd-radio value=\"1\" :disabled=\"false\" checked-color=\"#000\">商家后台</wd-radio>\n    <wd-radio value=\"2\" :disabled=\"false\">沃特</wd-radio>\n    <wd-radio value=\"3\">商家智能</wd-radio>\n  </wd-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Disabled Rate Component\nDESCRIPTION: Demonstrates how to create a disabled rating component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/rate.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate :modelValue=\"2\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Basic Input Component State Management\nDESCRIPTION: TypeScript code that sets up a reactive input value and a change handler function to manage the input state and log changes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\nfunction handleChange(event) {\n  console.log(event)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Left-aligned Placeholder in HTML\nDESCRIPTION: Demonstrates how to align the placeholder text to the left using the 'placeholder-left' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/search.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-search placeholder-left />\n```\n\n----------------------------------------\n\nTITLE: Multiple Extra Keys in Keyboard\nDESCRIPTION: Demonstrates how to configure multiple extra keys when the mode is set to 'custom'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"多个额外按键\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" mode=\"custom\" :extra-key=\"['00', '.']\" close-text=\"完成\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Sass Version for Compatibility\nDESCRIPTION: Commands to install a specific version of Sass (1.78.0) to avoid compatibility issues with Dart Sass 3.0.0, which has deprecated APIs that the component library hasn't updated for yet.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/common-problems.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sass@1.78.0 -D\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sass@1.78.0 -D\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add sass@1.78.0 -D\n```\n\n----------------------------------------\n\nTITLE: Keyboard with Title in Vue\nDESCRIPTION: Demonstrates how to add a title to the keyboard using the title attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"带标题的键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" title=\"输入密码\" extra-key=\".\" close-text=\"完成\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: ImgCropper with 16:9 Aspect Ratio for Videos\nDESCRIPTION: Implementation of the ImgCropper component with a 16:9 aspect ratio, which is suitable for widescreen video content. This configuration uses the aspect-ratio property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img-cropper.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-img-cropper\n  v-model=\"show\"\n  :img-src=\"src\"\n  aspect-ratio=\"16:9\"\n  @confirm=\"handleConfirm\"\n  @cancel=\"handleCancel\"\n>\n</wd-img-cropper>\n```\n\n----------------------------------------\n\nTITLE: Loading Toast Implementation\nDESCRIPTION: Examples of implementing loading indicators with different configurations\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/toast.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntoast.loading('加载中...')\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoast.loading({\n  loadingType: 'ring',\n  msg: '加载中...'\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoast.close()\n```\n\n----------------------------------------\n\nTITLE: Clearable Picker Component in Vue\nDESCRIPTION: Shows how to add a clear button to the Picker component by setting the 'clearable' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"清空\" v-model=\"value\" clearable />\n```\n\n----------------------------------------\n\nTITLE: Configuring ActionSheet Options with Different States\nDESCRIPTION: Shows how to set different states for ActionSheet options, including disabled and loading states.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/action-sheet.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-action-sheet :visible.sync=\"show\" :actions=\"actions\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      show: false,\n      actions: [\n        {\n          name: 'Option 1',\n          disabled: true\n        },\n        {\n          name: 'Option 2',\n          loading: true\n        },\n        {\n          name: 'Option 3'\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Information Tips Implementation\nDESCRIPTION: Example of implementing information and error tips for password input validation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/password-input.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Password input box -->\n<wd-password-input v-model=\"value\" info=\"Password is 6 digits\" :error-info=\"errorInfo\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n<!-- Number keyboard -->\n<wd-number-keyboard v-model=\"value\" :show=\"showKeyboard\" :maxlength=\"6\" @blur=\"showKeyboard = false\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref, watch } from 'vue'\n\nconst value = ref('123')\nconst errorInfo = ref('')\nconst showKeyboard = ref(true)\n\nwatch(value, (newVal) => {\n  if (newVal.length === 6 && newVal !== '123456') {\n    errorInfo.value = 'Incorrect password'\n  } else {\n    errorInfo.value = ''\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay with Embedded Content in HTML\nDESCRIPTION: Shows how to use the Overlay component with embedded content, including a wrapper and a block element.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/overlay.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"primary\" @click=\"show = true\">Embedded Content</wd-button>\n<wd-overlay :show=\"show\" @click=\"show = false\">\n  <view class=\"wrapper\">\n    <view class=\"block\" @click.stop=\"\" />\n  </view>\n</wd-overlay>\n```\n\n----------------------------------------\n\nTITLE: Header-Only Dragging for FloatingPanel in HTML and CSS\nDESCRIPTION: Demonstrates how to disable content area dragging for the FloatingPanel by setting the 'contentDraggable' property to false. This allows dragging only from the header area.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/floating-panel.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-floating-panel :contentDraggable=\"false\">\n  <view class=\"inner-content\">内容区不可以拖拽</view>\n</wd-floating-panel>\n```\n\nLANGUAGE: css\nCODE:\n```\n.inner-content {\n  padding: 1rem;\n  text-align: center;\n  font-size: 16px;\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Plain Tag Implementation - HTML\nDESCRIPTION: Shows implementation of ghost/plain style tags with different types\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tag.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag plain>标签</wd-tag>\n<wd-tag type=\"primary\" plain>标签</wd-tag>\n<wd-tag type=\"danger\" plain>标签</wd-tag>\n<wd-tag type=\"warning\" plain>标签</wd-tag>\n<wd-tag type=\"success\" plain>标签</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: NoticeBar with Custom Colors in HTML\nDESCRIPTION: Customizes the text color and background color of the NoticeBar component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar\n  text=\"这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息\"\n  prefix=\"check-outline\"\n  closable\n  color=\"#34D19D\"\n  background-color=\"#f0f9eb\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Input with Non-Focusing Clear Button\nDESCRIPTION: Input field where clicking the clear button doesn't automatically focus the field using the focus-when-clear attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-input type=\"text\" :focus-when-clear=\"false\" v-model=\"value\" clearable />\n```\n\n----------------------------------------\n\nTITLE: Basic Card Implementation in HTML\nDESCRIPTION: Shows basic usage of the Card component with a title and footer slot containing a button.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/card.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-card title=\"Business Analysis\">\n  Generally, the disciplinary inspection committee or the party committee handling the report will meet with the complainant to discuss the handling opinions or review conclusions. A copy of the review conclusions and decisions should be given to the complainant.\n  <template #footer>\n    <wd-button size=\"small\" plain>View Details</wd-button>\n  </template>\n</wd-card>\n```\n\n----------------------------------------\n\nTITLE: Counter-clockwise Progress Direction\nDESCRIPTION: Shows how to change the progress bar direction to counter-clockwise using the clockwise property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/circle.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :clockwise=\"false\"></wd-circle>\n```\n\n----------------------------------------\n\nTITLE: Allow Same Day Selection in Range Mode\nDESCRIPTION: Shows how to allow selection of the same day, week, or month in range selection mode by using the allow-same-day attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"daterange\" v-model=\"value\" allow-same-day @change=\"handleChange\" />\n```\n\n----------------------------------------\n\nTITLE: Tag Event Handler Implementation\nDESCRIPTION: TypeScript implementation of tag event handlers for click and close events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst tags = ref([\n  {\n    plain: true,\n    closable: true,\n    type: 'primary',\n    value: 'Tag 1'\n  }\n])\n\nfunction handleClick(index) {\n  console.log('click:index' + index)\n}\nfunction handleClose(order) {\n  tags.value = tags.value.filter((value, index) => index !== order)\n  console.log('close:index' + order)\n}\n```\n\n----------------------------------------\n\nTITLE: Read-only Textarea Implementation\nDESCRIPTION: Shows how to create a read-only textarea using the readonly property. This allows users to see but not modify the content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" readonly></wd-textarea>\n```\n\n----------------------------------------\n\nTITLE: Image Watermark Implementation in HTML\nDESCRIPTION: Example of creating an image-based watermark using a network image. The image-width and image-height parameters control the dimensions of the watermark image. Note that DingTalk Mini Program only supports network images.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/watermark.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-watermark image=\"https://wot-design-uni.cn/logo.png\" :image-width=\"38\" :image-height=\"38\"></wd-watermark>\n```\n\n----------------------------------------\n\nTITLE: Disabling SwipeAction in HTML\nDESCRIPTION: This HTML snippet shows how to disable the SwipeAction component using the disabled attribute, preventing any swipe interactions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swipe-action.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-swipe-action disabled>\n  <wd-cell title=\"标题文字\" value=\"内容\" />\n  <template #right>\n    <view class=\"action\">\n      <view class=\"button\" style=\"background: #C8C7CD;\">操作1</view>\n      <view class=\"button\" style=\"background: #FFB300;\">操作2</view>\n      <view class=\"button\" style=\"background: #E2231A;\">操作3</view>\n    </view>\n  </template>\n</wd-swipe-action>\n```\n\n----------------------------------------\n\nTITLE: Read-only Rate Component in HTML\nDESCRIPTION: Shows how to create a read-only Rate component by setting the readonly property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/rate.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" readonly />\n```\n\n----------------------------------------\n\nTITLE: External Style Classes - Markdown Table\nDESCRIPTION: Table listing external CSS classes that can be used to customize the component's appearance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| 类名                 | 说明                     | 最低版本 |\n| -------------------- | ------------------------ | -------- |\n| custom-class         | 根节点样式类             | -        |\n| custom-evoke-class   | 自定义上传按钮样式类     | -        |\n| custom-preview-class | 自定义预览图片列表样式类 | -        |\n```\n\n----------------------------------------\n\nTITLE: Tag Event Handling\nDESCRIPTION: HTML and TypeScript code for handling tag click and close events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag v-for=\"(tag, index) in tags\" :key=\"index\" round closable @click=\"handleClick(index)\" @close=\"handleClose(index)\">{{tag.value}}</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: 可拖动按钮配置 - Fab组件\nDESCRIPTION: 启用Fab组件的拖动功能，通过draggable属性设置按钮可以在页面中自由拖动。拖动后组件会自动吸边并根据位置计算弹出方向。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/fab.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-fab :draggable=\"true\"></wd-fab>\n```\n\n----------------------------------------\n\nTITLE: Year-Month DatetimePickerView\nDESCRIPTION: Implementation of a picker view that only displays year and month options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker-view.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view type=\"year-month\" v-model=\"value\" label=\"Year Month\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n```\n\n----------------------------------------\n\nTITLE: License Plate Keyboard in Vue\nDESCRIPTION: Shows how to create a keyboard for inputting license plate numbers by setting the mode to 'car'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"车牌号键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" mode=\"car\" @input=\"onInput\" @delete=\"onDelete\"></wd-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Custom Color Radio Implementation\nDESCRIPTION: Implementation of radio buttons with custom selected color.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/radio.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" checked-color=\"#fa4350\">\n  <wd-radio value=\"1\">WOT</wd-radio>\n  <wd-radio value=\"2\">Merchant Backend</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Column Spacing in Layout with HTML\nDESCRIPTION: Demonstrates how to use the gutter property to set spacing between column elements. This example sets a 20px gutter between columns in a row.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/layout.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-row gutter=\"20\">\n  <wd-col :span=\"8\"><view class=\"bg-dark\">span: 8</view></wd-col>\n  <wd-col :span=\"8\"><view class=\"bg-light\">span: 8</view></wd-col>\n  <wd-col :span=\"8\"><view class=\"bg-dark\">span: 8</view></wd-col>\n</wd-row>\n```\n\n----------------------------------------\n\nTITLE: Colored Progress Bar in Vue\nDESCRIPTION: Demonstrates how to customize the progress bar color using the color property with a hex color value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/progress.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"80\" color=\"#00c740\"></wd-progress>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Panel in ActionSheet\nDESCRIPTION: Demonstrates how to use a slot to create a custom panel in the ActionSheet component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/action-sheet.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-action-sheet :visible.sync=\"show\" title=\"Custom Panel\">\n  <view style=\"padding: 15px 15px 150px 15px; color: #333333; font-size: 16px;\">\n    Custom Content\n  </view>\n</wd-action-sheet>\n```\n\n----------------------------------------\n\nTITLE: Disabled Textarea Component in HTML\nDESCRIPTION: Shows how to disable the textarea component using the disabled attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" disabled></wd-textarea>\n```\n\n----------------------------------------\n\nTITLE: Multi-line Display of NoticeBar in HTML\nDESCRIPTION: Shows how to enable multi-line display by setting the wrapable property and disabling scrolling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notice-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar text=\"This is a message notification, this is a message notification, this is a message notification\" wrapable :scrollable=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Textarea with Label in Cell Group in HTML\nDESCRIPTION: Demonstrates how to use the textarea component with a label inside a cell group for a cell-like display.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell-group border>\n  <wd-textarea label=\"基本用法\" clearable v-model=\"value\" placeholder=\"请输入...\" />\n</wd-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Using Different Languages in Wot Design Uni\nDESCRIPTION: This code demonstrates how to switch the current language in Wot Design Uni using the Locale.use method by importing a language pack.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/locale.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Locale } from 'wot-design-uni'\n// Import English language pack\nimport enUS from 'wot-design-uni/locale/lang/en-US'\n\nLocale.use('en-US', enUS)\n```\n\n----------------------------------------\n\nTITLE: Custom Color Tabbar Implementation\nDESCRIPTION: Tabbar with custom active and inactive colors.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabbar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\" active-color=\"#ee0a24\" inactive-color=\"#7d7e80\">\n  <wd-tabbar-item is-dot :value=\"2\" title=\"点状\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"2\" icon=\"cart\" title=\"分类\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"30\" title=\"我的\" icon=\"user\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"200\" title=\"最大值\" icon=\"photo\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"10\" title=\"客服\" icon=\"chat\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Switch Size\nDESCRIPTION: Example showing how to customize the size of the switch component using the size property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/switch.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" size=\"24px\" />\n```\n\n----------------------------------------\n\nTITLE: Using Color Object Array for Progress Bar in HTML\nDESCRIPTION: Demonstrates how to use an array of color objects with specific percentages for the progress bar.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/progress.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"percentage\" :color=\"colorObject\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useNotify in TypeScript\nDESCRIPTION: Demonstrates how to import the useNotify function and use it to show a basic notification.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-notify.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNotify } from '@/uni_modules/wot-design-uni'\n\nconst { showNotify } = useNotify()\n\nfunction showNotify() {\n  showNotify('通知内容')\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Required Style for Column Picker in Vue 3\nDESCRIPTION: This snippet shows how to set the required style for a column picker using the required attribute. It displays the required style indicator.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" v-model=\"value\" required :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\n----------------------------------------\n\nTITLE: Plain Mark Tag Implementation\nDESCRIPTION: Shows how to combine both mark and plain properties for tags.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag mark plain>Tag</wd-tag>\n<wd-tag type=\"primary\" mark plain>Tag</wd-tag>\n<wd-tag type=\"danger\" mark plain>Tag</wd-tag>\n<wd-tag type=\"warning\" mark plain>Tag</wd-tag>\n<wd-tag type=\"success\" mark plain>Tag</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Clearable Textarea with Word Limit in HTML\nDESCRIPTION: Shows how to add a clear button and word limit to the textarea component using clearable, show-word-limit, and maxlength attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" :maxlength=\"120\" clearable show-word-limit />\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Indicator Color in HTML\nDESCRIPTION: Demonstrates how to modify the color of the loading indicator to white with a custom class for background styling. Note that only hexadecimal color values are accepted.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/loading.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-loading color=\"#ffffff\" custom-class=\"loading-black\" />\n\n<!-- 以下为错误写法 -->\n<wd-loading color=\"#fff\" />\n<wd-loading color=\"green\" />\n<wd-loading color=\"rgba(255,255,255,1)\" />\n```\n\n----------------------------------------\n\nTITLE: Readonly Input Field\nDESCRIPTION: Implementation of a readonly input field using the readonly attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\" readonly />\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Font Family in wot-design-uni\nDESCRIPTION: A SCSS snippet defining the standard font-family stack to be used across the project, with fallbacks for various operating systems and language support.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/typography.md#2025-04-23_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\nfont-family: \"San Francisco\", Rotobo, arial, \"PingFang SC\", \"Noto SansCJK\", \"Microsoft Yahei\", sans-serif;\n```\n\n----------------------------------------\n\nTITLE: NoticeBar with Custom Slots in HTML\nDESCRIPTION: Shows how to use custom slots in the NoticeBar component for prefix and suffix content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar>\n  <template #prefix>\n    <wd-icon class=\"prefix\" name=\"warn-bold\">占位符</wd-icon>\n  </template>\n  通知被禁或时段内消息屏蔽可能造成消…\n  <template #suffix>\n    <div style=\"color: #4d80f0\">查看</div>\n  </template>\n</wd-notice-bar>\n```\n\n----------------------------------------\n\nTITLE: Adding Cancel Button to ActionSheet\nDESCRIPTION: Shows how to add a cancel button to the ActionSheet by setting the cancel-text attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/action-sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-action-sheet :visible.sync=\"show\" :actions=\"actions\" cancel-text=\"Cancel\" />\n```\n\n----------------------------------------\n\nTITLE: Input with Focus-Triggered Clear Button\nDESCRIPTION: Input field where the clear button appears only when the field is focused, using the clear-trigger attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\" clear-trigger=\"focus\" clearable @change=\"handleChange\"/>\n```\n\n----------------------------------------\n\nTITLE: Loading State for Picker Component in Vue\nDESCRIPTION: Shows how to display a loading state in the Picker component by setting the 'loading' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" loading />\n```\n\n----------------------------------------\n\nTITLE: Customizing NumberKeyboard Title with Slot in Vue\nDESCRIPTION: Demonstrates how to use a slot to create a custom title for the NumberKeyboard component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/number-keyboard.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Custom Title Using Slot\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" extra-key=\".\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\">\n  <template #title>\n    <text style=\"color: red\">Custom Title</text>\n  </template>\n</wd-number-keyboard>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: NoticeBar with Text Carousel in HTML\nDESCRIPTION: Implements a multi-text carousel by passing an array to the text property and handling the next event.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar :text=\"textArray\" prefix=\"check-outline\" @next=\"onNext\" />\n```\n\n----------------------------------------\n\nTITLE: Right-aligned Picker Component in Vue\nDESCRIPTION: Shows how to align the selected value to the right in the Picker component by setting the 'align-right' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"单列选项\" align-right :columns=\"columns\" v-model=\"value\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring DatetimePickerView for Year Type in Vue\nDESCRIPTION: Shows how to set up the DatetimePickerView component to display only the year using the 'year' type.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker-view.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view type=\"year\" v-model=\"value\" label=\"年\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for InputNumber in Vue\nDESCRIPTION: Demonstrates setting minimum and maximum values for the InputNumber component using min and max attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" :min=\"3\" :max=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Pagination Component in Vue.js\nDESCRIPTION: Demonstrates how to use the basic pagination component with v-model binding and a change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-pagination v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Themed CountTo Components\nDESCRIPTION: Implementation of CountTo components with different theme types including primary, error, success, warning, and info.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/count-to.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-count-to type=\"primary\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n<wd-count-to type=\"error\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n<wd-count-to type=\"success\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n<wd-count-to type=\"warning\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n<wd-count-to type=\"info\" prefix=\"￥\" :startVal=\"0\" :endVal=\"888888\" suffix=\"%\"></wd-count-to>\n```\n\n----------------------------------------\n\nTITLE: Setting Table Height with Fixed Header\nDESCRIPTION: Shows how to set a fixed height for the table using the 'height' property. When height is set, the table header will automatically remain fixed while the body content becomes scrollable.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/table.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"Name\"></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"School\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"Major\"></wd-table-col>\n</wd-table>\n```\n\n----------------------------------------\n\nTITLE: Required Textarea with Label\nDESCRIPTION: Creates a textarea with a required indicator by setting both the label and required properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" placeholder=\"Please enter...\" label=\"Required\" required></wd-textarea>\n```\n\n----------------------------------------\n\nTITLE: Form Integration with Cell - HTML/TypeScript\nDESCRIPTION: Examples of Cell components used in form contexts with Rate and Slider components\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/cell.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"必填\" required>\n  <wd-rate v-model=\"rate\" change=\"handleRateChange\"></wd-rate>\n</wd-cell>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst rate = ref(0)\n\nfunction handleRateChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Image Group Skeleton in HTML and TypeScript\nDESCRIPTION: Shows how to create an image group skeleton layout using HTML and defining the structure in TypeScript.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/skeleton.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<view>\n  <wd-skeleton :row-col=\"imageGroup\" />\n  <wd-skeleton :custom-style=\"{ marginTop: '20px' }\" :row-col=\"imageGroup\" />\n</view>\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst imageGroup = [\n  { height: '171px' }, 1, { width: '107px' }, \n  [{ width: '93px' }, { width: '32px', marginLeft: '41px' }]\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Colors in HTML\nDESCRIPTION: Changing the active and inactive colors of the Switch component using custom color attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/switch.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" active-color=\"#13ce66\" inactive-color=\"#f00\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Values with active-value and inactive-value\nDESCRIPTION: Example showing how to modify the values when the switch is in active or inactive state using properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/switch.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" active-value=\"Wot\" inactive-value=\"Merchant Backend\" />\n```\n\n----------------------------------------\n\nTITLE: Theme Composition Function\nDESCRIPTION: Implementation of theme control composition function\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ConfigProviderThemeVars } from 'wot-design-uni'\nimport { ref } from 'vue'\n\nconst theme = ref<'light' | 'dark'>()\nconst themeVars = ref<ConfigProviderThemeVars>()\n\nexport function useTheme(vars?: ConfigProviderThemeVars) {\n  vars && (themeVars.value = vars)\n\n  function toggleTheme(mode?: 'light' | 'dark') {\n    theme.value = mode || (theme.value === 'light' ? 'dark' : 'light')\n  }\n\n  return {\n    theme,\n    themeVars,\n    toggleTheme,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navbar with Search Component\nDESCRIPTION: Shows how to integrate a search component in the Navbar's title slot with custom styling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/navbar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar left-text=\"返回\" right-text=\"设置\" left-arrow>\n  <template #title>\n    <view class=\"search-box\">\n      <wd-search v-model=\"keyword\" hide-cancel placeholder-left></wd-search>\n    </view>\n  </template>\n</wd-navbar>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.search-box {\n  display: flex;\n  height: 100%;\n  align-items: center;\n  --wot-search-padding: 0;\n  --wot-search-side-padding: 0;\n  :deep() {\n    .wd-search {\n      background: transparent;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon in DropMenu\nDESCRIPTION: Shows how to customize the icon in the DropMenu by setting the icon and icon-size properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/drop-menu.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-drop-menu>\n  <wd-drop-menu-item title=\"地图\" icon=\"location\" icon-size=\"24px\" />\n</wd-drop-menu>\n```\n\n----------------------------------------\n\nTITLE: Custom Menu Icon in DropMenu\nDESCRIPTION: Shows how to set a custom icon for the DropMenuItem using the icon and icon-size properties. This feature is available from version 1.3.7.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/drop-menu.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-drop-menu>\n  <wd-drop-menu-item title=\"Map\" icon=\"location\" icon-size=\"24px\" />\n</wd-drop-menu>\n```\n\n----------------------------------------\n\nTITLE: Quick Operation in Calendar Component\nDESCRIPTION: Shows how to configure the Calendar component for quick operation by hiding the confirm button. This is applicable for specific calendar types.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar label=\"Quick Operation\" :show-confirm=\"false\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Font Icons in HTML\nDESCRIPTION: Demonstrates how to use custom font icons by setting the class-prefix attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/icon.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-icon class-prefix=\"my-icon\" name=\"my-icon-name\"></wd-icon>\n```\n\n----------------------------------------\n\nTITLE: 栅格布局样式定义 (SCSS)\nDESCRIPTION: 为栅格布局示例定义样式，包括背景色、边框圆角、高度、文本对齐方式等。提供了三种不同的背景样式用于区分不同的栅格列。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/layout.md#2025-04-23_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n.bg-dark1,\n.bg-dark,\n.bg-light{\n  border-radius: 4px;\n  min-height: 30px;\n  text-align: center;\n  line-height: 30px;\n  font-size: 12px;\n  margin-bottom: 10px;\n  color: rgba(0, 0, 0, 0.45);\n}\n.bg-dark1 {\n  background: #99a9bf;\n  color: #fff;\n}\n.bg-dark {\n  background: #d3dce6;\n}\n.bg-light {\n  background: #e5e9f2;\n}\n```\n\n----------------------------------------\n\nTITLE: Small Segmented Component in Vue\nDESCRIPTION: Demonstrates creating a small-sized Segmented component by setting the size attribute to 'small'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/segmented.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" size=\"small\"></wd-segmented>\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup for Communication Group Page\nDESCRIPTION: This script handles the interaction logic for the communication group page, including importing necessary components, managing the checkbox state, and implementing a click handler that shows a warning message when users attempt to view group QR codes without agreeing to the guidelines.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/join-group.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { ref } from 'vue'\nimport QQ1 from '/QQ1.jpg'\nimport QQ2 from '/QQ2.jpg'\nimport QQ3 from '/QQ3.jpg'\nimport wechatPublicAccount from '/wechatPublicAccount.png'\n\nconst checked = ref(false)\n\nfunction handleClick() {\n  if (!checked.value) {\n  ElMessageBox.alert('Please read the communication examples and tips above and check \"I have read\" below, promising to follow the relevant guidelines when asking questions. By joining the group chat in any form, you agree to comply with the relevant guidelines, please be aware', 'Tip', {\n    confirmButtonText: 'I understand',\n  })\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sidebar with Asynchronous Switching in HTML and TypeScript\nDESCRIPTION: Demonstrates how to implement asynchronous switching between sidebar items using the before-change attribute. This allows for custom logic to execute before the navigation occurs.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sidebar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\" :before-change=\"beforeChange\">\n  <wd-sidebar-item :value=\"0\" label=\"标签名称\" />\n  <wd-sidebar-item :value=\"1\" label=\"标签名称\" disabled />\n  <wd-sidebar-item :value=\"2\" label=\"标签名称\" />\n</wd-sidebar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nimport type { SidebarBeforeChange } from '@/uni_modules/wot-design-uni/components/wd-sidebar/types'\nimport { ref } from 'vue'\nconst { loading: showLoading, close: closeLoading } = useToast()\n\nconst toast = useToast()\nconst active = ref<number>(1)\n\nconst beforeChange: SidebarBeforeChange = ({ value, resolve }) => {\n  showLoading('切换中')\n  setTimeout(() => {\n    closeLoading()\n    resolve(true)\n  }, 2000)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Size for Checkbox Group in Vue\nDESCRIPTION: Shows how to set a custom size for all checkboxes within a group using the size attribute on the checkbox group.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" size=\"large\">\n  <wd-checkbox value=\"1\">Option 1</wd-checkbox>\n  <wd-checkbox value=\"2\">Option 2</wd-checkbox>\n  <wd-checkbox value=\"3\">Option 3</wd-checkbox>\n  <wd-checkbox value=\"4\">Option 4</wd-checkbox>\n</wd-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Keyboard with Overlay in Vue\nDESCRIPTION: Shows how to configure the keyboard with an overlay using hideOnClickOutside and modal properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"双向绑定\" :value=\"value1\" is-link @click=\"showKeyBoard\" />\n<wd-keyboard :modal=\"true\" :hide-on-click-outside=\"true\" v-model:visible=\"visible\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\nconst value1 = ref<string>('')\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Error State Picker Component in Vue\nDESCRIPTION: Demonstrates how to display the Picker component in an error state by setting the 'error' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"Single Column\" error :columns=\"columns\" v-model=\"value\"/>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Switch Size in HTML\nDESCRIPTION: Setting a custom size for the Switch component using the size attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/switch.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" size=\"24px\" />\n```\n\n----------------------------------------\n\nTITLE: Local Watermark Configuration in HTML\nDESCRIPTION: Example of creating a non-fullscreen watermark. By setting full-screen to false, the watermark will only appear in the component's container rather than covering the entire screen.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/watermark.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-watermark content=\"wot-design-uni\" :full-screen=\"false\"></wd-watermark>\n```\n\n----------------------------------------\n\nTITLE: Setting Loading Indicator Size in HTML\nDESCRIPTION: Examples of adjusting the size of the loading indicator using both number and string values.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/loading.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-loading :size=\"20\" />\n<wd-loading :size=\"30\" />\n<wd-loading size=\"50px\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Steps Implementation\nDESCRIPTION: Demonstrates basic usage of steps component with active state tracking. Uses a counter to advance through steps.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/steps.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\"active\">\n  <wd-step />\n  <wd-step />\n  <wd-step />\n</wd-steps>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = ref<number>(0)\n\nfunction nextStep() {\n  active.value = active.value + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Anchor Usage for Sidebar in HTML\nDESCRIPTION: Provides an example of using the sidebar component as an anchor for navigation on long pages.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"wraper\">\n  <wd-sidebar v-model=\"active\" @change=\"handleChange\">\n    <wd-sidebar-item v-for=\"(item, index) in categories\" :key=\"index\" :value=\"index\" :label=\"item.label\" />\n  </wd-sidebar>\n  <scroll-view class=\"content\" scroll-y scroll-with-animation :scroll-top=\"scrollTop\" :throttle=\"false\" @scroll=\"onScroll\">\n    <view v-for=\"(item, index) in categories\" :key=\"index\" class=\"category\">\n      <wd-cell-group :title=\"item.title\" border>\n        <wd-cell v-for=\"(cell, index) in item.items\" :key=\"index\" :title=\"cell.title\" :label=\"cell.label\">\n          <wd-icon name=\"github-filled\" size=\"24px\"></wd-icon>\n        </wd-cell>\n      </wd-cell-group>\n    </view>\n  </scroll-view>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Animations in HTML\nDESCRIPTION: Demonstrates how to add gradient and flashed loading animations to skeleton components.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/skeleton.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-skeleton animation=\"gradient\" theme=\"paragraph\" />\n<view style=\"display: flex\">\n  <wd-skeleton :row-col=\"[{ size: '48px', type: 'circle' }]\" />\n  <wd-skeleton :custom-style=\"{ width: '100%', marginLeft: '12px' }\" animation=\"flashed\" theme=\"paragraph\" />\n</view>\n```\n\n----------------------------------------\n\nTITLE: Custom Value and Text Keys Swiper\nDESCRIPTION: Implementation showing how to use custom value and text keys for swiper items\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swiper.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-swiper value-key=\"url\" text-key=\"title\" :custom-text-style=\"color:#fff\" :list=\"customSwiperList\" autoplay v-model:current=\"current\" @click=\"handleClick\" @change=\"onChange\"></wd-swiper>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst current = ref<number>(0)\n\nconst customSwiperList = ref([\n  { url: 'https://registry.npmmirror.com/wot-design-uni-assets/*/files/redpanda.jpg', title: '小熊猫！' },\n  { url: 'https://registry.npmmirror.com/wot-design-uni-assets/*/files/capybara.jpg', title: '卡！皮！巴！拉！' },\n  { url: 'https://registry.npmmirror.com/wot-design-uni-assets/*/files/panda.jpg', title: '大熊猫！' },\n  { url: 'https://registry.npmmirror.com/wot-design-uni-assets/*/files/moon.jpg', title: '诗画中国！' }\n])\n```\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.customTextClass) {\n  position: absolute;\n  top: 24rpx;\n  right: 24rpx;\n  color: #ffffff;\n  font-size: 24rpx;\n  text-shadow: 0 0 8rpx #000000;\n}\n```\n\n----------------------------------------\n\nTITLE: Button Style Radio Implementation\nDESCRIPTION: Implementation of radio buttons with button style shape and change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/radio.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" shape=\"button\" @change=\"change\">\n  <wd-radio :value=\"1\">WOT</wd-radio>\n  <wd-radio :value=\"2\">Merchant Backend</wd-radio>\n</wd-radio-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n\nfunction change(e) {\n  console.log(e)\n}\n```\n\n----------------------------------------\n\nTITLE: New Features\nDESCRIPTION: New features added including config provider customization options, form validation improvements, and component enhancements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/changelog.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### ✨ Features | 新功能\n\n* ✨ config-provider 支持customClass 与 customeStyle\n* ✨ Form设置提示模式为toast时优先显示顺序靠前的表单项的错误提示\n* ✨ img 图片组件click事件增加mouseEvent参数\n* ✨ Text支持传入number类型的text\n```\n\n----------------------------------------\n\nTITLE: Basic Navbar Implementation\nDESCRIPTION: Demonstrates the most basic usage of the Navbar component with just a title.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/navbar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"标题\"></wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Color in Vue\nDESCRIPTION: Demonstrates how to change the color of the checked state using the checked-color attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox v-model=\"value\" checked-color=\"#f00\">沃特</wd-checkbox>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(true)\n```\n\n----------------------------------------\n\nTITLE: Rendering Donor Table in Vue.js\nDESCRIPTION: A Vue template that conditionally renders a table of donors with their names, messages, and links. The table is displayed only if donor data is available.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/reward/donor.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<table v-if=\"data&&data.donor\">\n  <thead>\n    <tr>\n      <th>Donor</th>\n      <th>Message</th>\n      <th>Link</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"(donor,index) in data.donor\">\n      <td>{{donor.name}}</td>\n      <td>{{donor.message}}</td>\n      <td>\n          <el-link v-if=\"donor.link!=='-'\" :href=\"donor.link\" target=\"_blank\">{{donor.link}}</el-link>\n          <span v-else>-</span>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Navbar with Back Navigation\nDESCRIPTION: Shows how to implement a back navigation button in the Navbar with a left arrow and text.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/navbar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"标题\" left-text=\"返回\" left-arrow @click-left=\"handleClickLeft\"></wd-navbar>\n```\n\nLANGUAGE: ts\nCODE:\n```\nfunction handleClickLeft() {\n  uni.navigateBack()\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Button Implementation\nDESCRIPTION: Shows how to create a disabled button using the disabled attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-button disabled>Default Button</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Button\nDESCRIPTION: Shows how to use custom icons with classPrefix property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-button classPrefix=\"fish\" icon=\"kehuishouwu\">可回收</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Picker Component with Custom Title in Vue\nDESCRIPTION: Demonstrates how to set a custom title for the Picker component using the 'title' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"标题\" :columns=\"columns\" title=\"文案标题\"/>\n```\n\n----------------------------------------\n\nTITLE: Block Button Implementation\nDESCRIPTION: Shows how to create a full-width block button.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-button block>主要按钮</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Readonly Rate Component\nDESCRIPTION: Shows how to implement a readonly rating display.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/rate.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" readonly />\n```\n\n----------------------------------------\n\nTITLE: Week Selection in Calendar Component\nDESCRIPTION: Demonstrates how to set up the Calendar component for week selection. It recommends setting the first day of the week to Monday for consistency.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"week\" v-model=\"value\" :first-day-of-week=\"1\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Image Content Using Slot in StatusTip Component\nDESCRIPTION: Shows how to use a slot to provide custom image content for the StatusTip component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/status-tip.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-status-tip tip=\"自定义图片内容\">\n  <template #image>\n    <wd-icon name=\"ie-filled\" size=\"100px\"></wd-icon>\n  </template>\n</wd-status-tip>\n```\n\n----------------------------------------\n\nTITLE: Adding Tips to ColPicker Options\nDESCRIPTION: Example showing how to add informational tip messages to specific options in the ColPicker by setting the tip property on individual items.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>([])\n\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text,\n      disabled: item.value === '140000',\n      tip: item.value === '140000' ? '该地区无货，暂时无法选择' : item.value === '150000' ? '该地区配送时间可能较长' : ''\n    }\n  })\n])\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rectangular Card Implementation with Custom Title and Content\nDESCRIPTION: Shows how to create a rectangular card by setting the type property to 'rectangle'. This example uses custom title and content slots with more complex layout including an image and styled text elements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/card.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-card type=\"rectangle\">\n  <template #title>\n    <view class=\"title\">\n      <view>2020-02-03服务到期</view>\n      <view class=\"title-tip\">\n        <wd-icon name=\"warning\" size=\"14px\" custom-style=\"vertical-align: bottom\" />\n        您可以去电脑上使用该服务\n      </view>\n    </view>\n  </template>\n  <view style=\"height: 40px;\" class=\"content\">\n    <image\n      src=\"https://img11.360buyimg.com/imagetools/jfs/t1/143248/37/5695/265818/5f3a8546E98d998a4/745897ca9c9e474b.jpg\"\n      width=\"40\"\n      height=\"40\"\n      alt=\"joy\"\n      style=\"border-radius: 4px; margin-right: 12px;\"\n    />\n    <view>\n      <view style=\"color: rgba(0,0,0,0.85); font-size: 16px;\">智催评营销</view>\n      <view style=\"color: rgba(0,0,0,0.25); font-size: 12px;\">高级版-快速吸粉 | 周期一年</view>\n    </view>\n  </view>\n\n  <template #footer>\n    <view>\n      <wd-button size=\"small\" style=\"margin-right: 8px;\">评价</wd-button>\n      <wd-button size=\"small\" plain>立即使用</wd-button>\n    </view>\n  </template>\n</wd-card>\n```\n\n----------------------------------------\n\nTITLE: Loading State for Picker Component in Vue\nDESCRIPTION: Shows how to display a loading state in the Picker component by setting the 'loading' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" loading />\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Slider in HTML and TypeScript\nDESCRIPTION: Demonstrates how to use the basic slider component with v-model binding. The value is a number for a single slider.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/slider.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\"/>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(30)\n```\n\n----------------------------------------\n\nTITLE: Defining Reactive Boolean State in TypeScript\nDESCRIPTION: Creating a reactive boolean state using ref for the Switch component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/switch.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst checked = ref<boolean>(true)\n```\n\n----------------------------------------\n\nTITLE: Disabled Tooltip Implementation\nDESCRIPTION: Shows how to disable the Tooltip functionality using the disabled property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tooltip.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-tooltip placement=\"right-end\" content=\"Disabled\" disabled>\n  <wd-button>Disabled</wd-button>\n</wd-tooltip>\n```\n\n----------------------------------------\n\nTITLE: Implementing Maximum Range Limitation for Calendar Component\nDESCRIPTION: Sets a maximum range limit of 3 days for date range selection using the max-range property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"daterange\" :max-range=\"3\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Size in StatusTip Component\nDESCRIPTION: Shows how to customize the image size of the StatusTip component using the image-size attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/status-tip.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-status-tip\n  :image-size=\"{\n          height: 200,\n          width: 300\n  }\"\n  image=\"search\"\n  tip=\"当前搜索无结果\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Formatter DatetimePickerView\nDESCRIPTION: Implementation of a datetime picker view with custom formatting for internal display values.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker-view.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view v-model=\"value\" label=\"Internal Format\" :formatter=\"formatter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\nconst formatter = (type, value) => {\n  switch (type) {\n    case 'year':\n      return value + ' Year'\n    case 'month':\n      return value + ' Month'\n    case 'date':\n      return value + ' Day'\n    case 'hour':\n      return value + ' Hour'\n    case 'minute':\n      return value + ' Minute'\n    default:\n      return value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义高度的 Gap 间隔槽\nDESCRIPTION: 同时自定义 wd-gap 组件的背景色和高度，设置高度为 120rpx，背景色为蓝色。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/gap.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-gap bg-color=\"#4D80F0\" height=\"120rpx\"></wd-gap>\n```\n\n----------------------------------------\n\nTITLE: Slot Demo for NoticeBar in HTML and SCSS\nDESCRIPTION: Illustrates how to use slots for custom content in the NoticeBar component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notice-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar>\n  <template #prefix>\n    <wd-icon class=\"prefix\" name=\"warn-bold\">Placeholder</wd-icon>\n  </template>\n  Notifications may be blocked due to disabled notifications or time period filtering...\n  <template #suffix>\n    <div style=\"color: #4d80f0\">View</div>\n  </template>\n</wd-notice-bar>\n```\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.prefix) {\n  font-size: 18px;\n  padding-right: 4px;\n  width: 18px;\n  height: 18px;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value in DatetimePicker\nDESCRIPTION: Shows how to set a default value for the DatetimePicker using the default-value prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" :default-value=\"defaultValue\" label=\"Date Selection\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\nconst defaultValue = ref<number>(Date.now())\n\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JD Zheng HT Fonts with @font-face in SCSS\nDESCRIPTION: SCSS implementation showing how to load JD Zheng HT fonts via @font-face declarations and create utility classes for bold and light font variants.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/typography.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@font-face {\n  font-family: 'JDZhengHT-Bold';\n  src: url('https://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Bold.woff') format('woff'), /* chrome, firefox */\n       url('https://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Bold.ttf') format('truetype'); /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/\n  font-weight: normal;\n  font-style: normal\n}\n@font-face {\n  font-family: 'JDZhengHT-Light';\n  src: url('https://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Light.woff') format('woff'), /* chrome, firefox */\n       url('https://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Light.ttf') format('truetype'); /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/\n  font-weight: normal;\n  font-style: normal\n}\n\n.type-JDZhengHT {\n  font-family: 'JDZhengHT-Light';\n}\n.type-JDZhengHT-Semibold {\n  font-family: 'JDZhengHT-Bold';\n}\n```\n\n----------------------------------------\n\nTITLE: Closable Tag\nDESCRIPTION: Shows how to implement a closable tag that can be removed.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag closable round type=\"primary\">Tag</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Customizing Badge Background Color in HTML\nDESCRIPTION: Shows how to modify the background color of the Badge using the type attribute, bg-color property, or custom-class for component styling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/badge.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge custom-class=\"badge\" modelValue=\"3\" bg-color=\"pink\">\n  <wd-button size=\"small\">回复</wd-button>\n</wd-badge>\n<wd-badge custom-class=\"badge\" modelValue=\"1\" type=\"primary\">\n  <wd-button size=\"small\">评论</wd-button>\n</wd-badge>\n<wd-badge custom-class=\"badge\" modelValue=\"2\" type=\"warning\">\n  <wd-button size=\"small\">回复</wd-button>\n</wd-badge>\n<wd-badge custom-class=\"badge\" modelValue=\"1\" type=\"success\">\n  <wd-button size=\"small\">评论</wd-button>\n</wd-badge>\n<wd-badge custom-class=\"badge\" modelValue=\"2\" type=\"info\">\n  <wd-button size=\"small\">回复</wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Bottom Safe Area Gap\nDESCRIPTION: Shows how to implement a gap that respects the bottom safe area of the device.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/gap.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-gap safe-area-bottom height=\"0\"></wd-gap>\n```\n\n----------------------------------------\n\nTITLE: Making ColPicker Component Read-only\nDESCRIPTION: Example of setting the ColPicker to read-only mode using the readonly attribute, preventing user interaction while still displaying the selected values.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"禁用\" readonly v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\n----------------------------------------\n\nTITLE: Round Image Implementation\nDESCRIPTION: Demonstrates how to create circular images using the round property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/img.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" round :src=\"joy\" />\n```\n\n----------------------------------------\n\nTITLE: Hiding Underline in SortButton Component in HTML\nDESCRIPTION: Shows how to hide the underline of the SortButton component by setting the line attribute to false, which is useful when there's only one sort button.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sort-button.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-sort-button v-model=\"value\" :line=\"false\" title=\"Price\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling virtualHost in Vue 2 for WeChat Mini Program\nDESCRIPTION: Code showing how to set virtualHost to true in Vue 2 to solve the extra wrapper node issue in WeChat Mini Programs, making components render more like Vue components.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// vue2使用virtualHost\nexport default {\n  data() {\n    return {}\n  },\n  options: {\n    virtualHost: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Line Height for Text Component in HTML\nDESCRIPTION: Demonstrates how to customize the line height of text using the lineHeight property with a CSS size value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-text :text=\"text\" lineHeight=\"20px\"></wd-text>\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Usage in HTML\nDESCRIPTION: Demonstrates how to use the basic icon component by setting the name attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/icon.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-icon name=\"add-circle\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Title to ActionSheet\nDESCRIPTION: Demonstrates how to add a title to the ActionSheet by setting the title attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/action-sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-action-sheet :visible.sync=\"show\" :actions=\"actions\" title=\"Title\" />\n```\n\n----------------------------------------\n\nTITLE: Pagination Component with Icon Display in Vue.js\nDESCRIPTION: Shows how to use the pagination component with icon navigation by setting the show-icon attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-pagination v-model=\"value\" @change=\"handleChange\" show-icon ></wd-pagination>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Inserting Sticky Content (Wot Design Uni, HTML)\nDESCRIPTION: Illustrates how to use wd-sticky to wrap dynamically generated content (conditioned by a variable), placing a button inside the sticky area only if the state variable is true. All content to be wrapped must have a minimum of 1px height and width for reliable behavior. Inline styles demonstrate margin application.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sticky.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<view style=\\\"margin-top: 20px;\\\">\\n  <wd-button type=\\\"error\\\" v-if=\\\"show\\\">Click to Insert</wd-button>\\n  <wd-sticky>\\n    <wd-button type=\\\"success\\\" v-if=\\\"show\\\">Dynamic Insert</wd-button>\\n  </wd-sticky>\\n</view>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite to Exclude wot-design-uni from Pre-bundling\nDESCRIPTION: A Vite configuration snippet that excludes the wot-design-uni module from pre-bundling in development mode for H5 platform. This is necessary for proper internationalization functionality when not using uni_modules mode.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/locale.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport uni from '@dcloudio/vite-plugin-uni'\n\nexport default defineConfig({\n  ...\n  optimizeDeps: {\n    exclude: process.env.UNI_PLATFORM === 'h5' && process.env.NODE_ENV === 'development' ? ['wot-design-uni'] : []\n  }\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Table Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes for the Table component, including data source, styling options, dimensions, and display settings.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/table.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数            | 说明                                                | 类型                         | 可选值 | 默认值 | 最低版本         |\n| --------------- | --------------------------------------------------- | ---------------------------- | ------ | ------ | ---------------- |\n| data            | 显示的数据                                          | Array                        | -      | -      | 0.0.39           |\n| border          | 是否带有边框                                        | boolean                      | -      | true   | 0.0.39           |\n| stripe          | 是否为斑马纹表                                      | boolean                      | -      | true   | 0.0.39           |\n| height          | Table 的高度，无默认值，设置后自动开启固定表头。        | `number / string`            | -      | -      | 0.0.39           |\n| rowHeight       | 行高                                                | `number / string`            | -      | 50     | 0.0.39           |\n| showHeader      | 是否显示表头                                        | boolean                      | -      | true   | 0.0.39           |\n| ellipsis        | 是否超出 2 行隐藏                                   | boolean                      | -      | true   | 0.0.39           |\n| index           | 是否显示索引列，可传入`boolean`也可传入 column 配置 | `boolean / TableColumnProps` |        | false  | 1.2.19           |\n| fixed-header    | 是否固定表头，需要结合`height`才可以实现固定表头的效果。      | boolean                      | -      | true   | 1.5.0 |\n```\n\n----------------------------------------\n\nTITLE: Large Size Picker Component in Vue\nDESCRIPTION: Demonstrates how to create a large-sized Picker component by setting the 'size' property to 'large'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"Single Column\" size=\"large\" v-model=\"value\" :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: Image Fill Mode Implementation\nDESCRIPTION: Shows how to use the mode property to control image filling behavior.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/img.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" mode=\"center\" :src=\"joy\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding Content in Overlay in HTML\nDESCRIPTION: Demonstrates how to embed custom content within the overlay component. The example shows a centered white block that prevents the overlay from closing when clicked (using click.stop).\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/overlay.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"primary\" @click=\"show = true\">嵌入内容</wd-button>\n<wd-overlay :show=\"show\" @click=\"show = false\">\n  <view class=\"wrapper\">\n    <view class=\"block\" @click.stop=\"\" />\n  </view>\n</wd-overlay>\n```\n\n----------------------------------------\n\nTITLE: Time Type in DatetimePicker\nDESCRIPTION: Illustrates setting up the DatetimePicker for time selection in HH:mm format.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker type=\"time\" v-model=\"value\" label=\"Hour Minute\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value4 = ref<string>('09:20')\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger Slot for Picker Component in Vue\nDESCRIPTION: Shows how to use a custom trigger slot to modify the way the Picker component is activated by enabling 'use-default-slot'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" v-model=\"value\" use-default-slot>\n  <wd-button>插槽唤起</wd-button>\n</wd-picker>\n```\n\n----------------------------------------\n\nTITLE: Project Structure for uni_modules Installation\nDESCRIPTION: Folder structure showing how to organize Wot Design Uni when using uni_modules installation method.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n- uni_modules\n- - - wot-design-uni \n```\n\n----------------------------------------\n\nTITLE: Initializing Notify Component in HTML (Vue)\nDESCRIPTION: Basic usage of the Notify component, showing how to import and mount it in a Vue template.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notify.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-notify />\n```\n\n----------------------------------------\n\nTITLE: Button-style Checkbox Group in Vue\nDESCRIPTION: Shows how to create a button-style checkbox group by combining cell and shape attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value2\" cell shape=\"button\">\n  <wd-checkbox modelValue=\"1\" disabled>选项一</wd-checkbox>\n  <wd-checkbox modelValue=\"2\">选项二</wd-checkbox>\n  <wd-checkbox modelValue=\"3\">选项三</wd-checkbox>\n  <wd-checkbox modelValue=\"4\">选项四</wd-checkbox>\n  <wd-checkbox modelValue=\"5\">选项五</wd-checkbox>\n  <wd-checkbox modelValue=\"6\">选项六</wd-checkbox>\n  <wd-checkbox modelValue=\"7\">选项七</wd-checkbox>\n</wd-checkbox-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(['jingmai'])\nconst value1 = ref(['jingmai'])\nconst value2 = ref(['1'])\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Vertical Divider Container\nDESCRIPTION: Provides CSS styling for the container of vertical dividers to ensure proper spacing.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/divider.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.content {\n  padding: 12rpx 15px;\n}\n```\n\n----------------------------------------\n\nTITLE: 设置列间距的栅格布局 (HTML)\nDESCRIPTION: 通过 wd-row 的 gutter 属性设置列元素之间的间距，单位为像素。这个例子展示了如何给三个等宽的列设置20像素的间距。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/layout.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-row gutter=\"20\">\n  <wd-col :span=\"8\"><view class=\"bg-dark\">span: 8</view></wd-col>\n  <wd-col :span=\"8\"><view class=\"bg-light\">span: 8</view></wd-col>\n  <wd-col :span=\"8\"><view class=\"bg-dark\">span: 8</view></wd-col>\n</wd-row>\n```\n\n----------------------------------------\n\nTITLE: Grid with Border in HTML\nDESCRIPTION: Shows how to enable border lines in the Grid component using the border attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid border :column=\"3\">\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Week Type Selection with CalendarView in Vue\nDESCRIPTION: Illustrates the setup for week-based selection in the CalendarView component. It sets the type to 'week' and configures the first day of the week.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar-view.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"week\" v-model=\"value\" :first-day-of-week=\"1\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(Date.now())\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Change Event Listener to Sidebar in HTML\nDESCRIPTION: Demonstrates how to listen for change events when switching between sidebar items.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\" @change=\"handleChange\">\n  <wd-sidebar-item :value=\"0\" label=\"Label Name 1\" />\n  <wd-sidebar-item :value=\"1\" label=\"Label Name 2\" />\n  <wd-sidebar-item :value=\"2\" label=\"Label Name 3\" />\n</wd-sidebar>\n```\n\n----------------------------------------\n\nTITLE: 动作菜单展开/收起控制 - Fab组件\nDESCRIPTION: 通过v-model:active双向绑定控制Fab动作按钮菜单的展开和收起状态，实现受控的组件行为。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/fab.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-fab v-model:active=\"active\"></wd-fab>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = ref<boolean>(false)\n```\n\n----------------------------------------\n\nTITLE: Setting Priority Switch to Descending Order in HTML\nDESCRIPTION: Demonstrates how to configure the SortButton to prioritize switching to descending order using the desc-first attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sort-button.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-sort-button v-model=\"value\" desc-first title=\"Price\" />\n```\n\n----------------------------------------\n\nTITLE: 带关闭按钮的底部弹出层 (HTML)\nDESCRIPTION: 从底部弹出的弹出层，启用了关闭按钮功能，通过closable属性控制。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/popup.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup v-model=\"show\" position=\"bottom\" closable custom-style=\"height: 200px;\" @close=\"handleClose\"></wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage Layout for Wot Design Uni Documentation\nDESCRIPTION: A YAML-based configuration for the homepage of Wot Design Uni documentation site. It defines the page structure including title, hero section with actions, and feature highlights such as multi-platform support, component library, TypeScript support, internationalization, documentation, and theming capabilities.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\n\ntitle: Wot Design Uni\ntitleTemplate: 一个基于Vue3+TS开发的uni-app组件库，提供70+高质量组件，支持暗黑模式、国际化和自定义主题。\n\nhero:\n  name: Wot Design Uni\n  text: 高颜值、轻量化的uni-app组件库\n  tagline: 基于Vue3+TS开发，提供70+高质量组件，支持暗黑模式、国际化和自定义主题。\n  image:\n    src: /logo.png\n    alt: Wot Design\n  actions:\n    - theme: brand\n      text: 起步 🚀\n      link: /guide/introduction\n    - theme: alt\n      text: 常见问题\n      link: /guide/common-problems\n    - theme: alt\n      text: 组件列表\n      link: /component/button\n    - theme: brand\n      text: 🥤一杯咖啡\n      link: /reward/reward\n    - theme: alt\n      text: ⭐ 优秀案例\n      link: /guide/cases\n\nfeatures:\n  - icon: 🎯\n    title: 多平台覆盖\n    details: 支持 微信小程序、支付宝小程序、钉钉小程序、H5、APP 等平台。\n  - icon: 🚀\n    title: 70+ 组件\n    details: 超过 70 个高质量组件，覆盖移动端主流场景。\n  - icon: 💪\n    title: TypeScript 支持\n    details: 使用 Typescript 构建，提供良好的组件类型系统。\n  - icon: 🌍\n    title: 支持国际化\n    details: 支持国际化，内置 15 种语言包。\n  - icon: 📖\n    title: 提供丰富的文档和组件示例\n    details: 文档和组件示例为开发者提供稳定的后勤保障。\n  - icon: 🍭\n    title: 支持暗黑模式和主题定制\n    details: 可以定制css变量以及组件的样式自定义。\n\nfooter: false\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Cell Component\nDESCRIPTION: Shows how to add an icon to the Cell component using the icon attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Title\" value=\"Content\" icon=\"setting\"></wd-cell>\n```\n\n----------------------------------------\n\nTITLE: Basic Notify Implementation in HTML\nDESCRIPTION: Basic implementation that shows how to include the Notify component in your template as a mounting point.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notify.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-notify />\n```\n\n----------------------------------------\n\nTITLE: Textarea with Prefix Icon in HTML\nDESCRIPTION: Shows how to add a prefix icon to the textarea component using the prefix-icon attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" prefix-icon=\"dong\"></wd-textarea>\n```\n\n----------------------------------------\n\nTITLE: Implementing Resize Component in HTML and TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage of the Resize component. It wraps a view element whose dimensions are dynamically changed after a delay. The component triggers a resize event which is handled to log the new dimensions and position.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/resize.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-resize @resize=\"handleResize\">\n  <view :style=\"`background: #4d80f0; width: ${width};height: ${height}`\"></view>\n</wd-resize>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst width = ref<string>('')\nconst height = ref<string>('')\n\nonReady(() => {\n  setTimeout(() => {\n    width.value = '100px'\n    height.value = '100px'\n  }, 1500)\n})\n\nfunction handleResize(detail: Record<string, string | number>) {\n  const { height, width, top, right, bottom, left } = detail\n  console.log(height, width, top, right, bottom, left)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Border in Table Component\nDESCRIPTION: Demonstrates how to remove the default border from the table by setting the 'border' property to false. By default, tables have borders around cells.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/table.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" :border=\"false\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"Name\"></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"School\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"Major\"></wd-table-col>\n</wd-table>\n```\n\n----------------------------------------\n\nTITLE: Read-only Picker Component in Vue\nDESCRIPTION: Demonstrates how to make the Picker component read-only by setting the 'readonly' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"只读\" v-model=\"value\" readonly />\n```\n\n----------------------------------------\n\nTITLE: Floating Tabbar Implementation\nDESCRIPTION: Round-shaped floating tabbar implementation with badges.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabbar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar shape=\"round\" v-model=\"tabbar\">\n  <wd-tabbar-item title=\"首页\" is-dot :value=\"2\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"分类\" :value=\"2\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"相册\" :value=\"30\" icon=\"photo\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"我的\" :value=\"200\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Large Size Picker Component in Vue\nDESCRIPTION: Demonstrates how to increase the size of the Picker component by setting the 'size' attribute to 'large'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"单列选项\" size=\"large\" v-model=\"value\" :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: Textarea without Auto-focus on Clear in HTML\nDESCRIPTION: Shows how to prevent auto-focus when clearing the textarea using the focus-when-clear attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" :focus-when-clear=\"false\" :maxlength=\"120\" clearable show-word-limit />\n```\n\n----------------------------------------\n\nTITLE: Component Configuration Documentation in Markdown\nDESCRIPTION: Markdown tables defining component attributes, form validation rules, and data structure for picker options. Includes detailed specifications for props, validation, and styling options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/select-picker.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Attributes\n\n| 参数                   | 说明                                                                                                     | 类型                              | 可选值           | 默认值   | 最低版本         |\n| ---------------------- | -------------------------------------------------------------------------------------------------------- | --------------------------------- | ---------------- | -------- | ---------------- |\n| v-model                | 选中项，`type`类型为`checkbox`时，类型为 array；`type`为`radio` 时 ，类型为 number / boolean / string    | array / number / boolean / string | -                | -        | -                |\n| columns                | 选择器数据，一维数组                                                                                     | array                             | -                | -        | -                |\n| type                   | 单复选选择器类型                                                                                         | string                            | checkbox / radio | checkbox | -                |\n[...more attributes...]\n\n### FormItemRule 数据结构\n\n| 键名      | 说明                                                    | 类型                                  |\n| --------- | ------------------------------------------------------- | ------------------------------------- |\n| required  | 是否为必选字段                                          | `boolean`                             |\n| message   | 错误提示文案                                            | `string`                              |\n| validator | 通过函数进行校验，可以返回一个 `Promise` 来进行异步校验 | `(value, rule) => boolean \\| Promise` |\n| pattern   | 通过正则表达式进行校验，正则无法匹配表示校验不通过      | `RegExp`                              |\n```\n\n----------------------------------------\n\nTITLE: 基本使用Tooltip组件 (HTML)\nDESCRIPTION: 展示Tooltip组件的基本用法，包括placement属性和content属性的使用。同时介绍了useQueue hook的使用，用于自动关闭tooltip。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<view @click=\"closeOutside\">\n  <wd-tooltip @change=\"handleChange\" placement=\"top\" content=\"top 提示文字\">\n    <wd-button>top</wd-button>\n  </wd-tooltip>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Attributes Table for Calendar Component in Markdown\nDESCRIPTION: A markdown table listing all available attributes for the calendar component, including their descriptions, types, possible values, default values, and minimum version requirements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数              | 说明                                                                                                                                                                                               | 类型                  | 可选值                                                                                      | 默认值                | 最低版本 |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------- | ------------------------------------------------------------------------------------------- | --------------------- | -------- |\n| v-model           | 选中值，为 13 位时间戳或时间戳数组                                                                                                                                                                 | null / number / array | -                                                                                           | -                     | -        |\n| type              | 日期类型                                                                                                                                                                                           | string                | date / dates / datetime / week / month / daterange / datetimerange / weekrange / monthrange | date                  | -        |\n| min-date          | 最小日期，为 13 位时间戳                                                                                                                                                                           | number                | -                                                                                           | 当前日期往前推 6 个月 | -        |\n| max-date          | 最大日期，为 13 位时间戳                                                                                                                                                                           | number                | -                                                                                           | 当前日期往后推 6 个月 | -        |\n| first-day-of-week | 周起始天                                                                                                                                                                                           | number                | -                                                                                           | 0                     | -        |\n| formatter         | 日期格式化函数                                                                                                                                                                                     | function              | -                                                                                           | -                     | -        |\n| max-range         | type 为范围选择时有效，最大日期范围                                                                                                                                                                | number                | -                                                                                           | -                     | -        |\n| range-prompt      | type 为范围选择时有效，选择超出最大日期范围时的错误提示文案                                                                                                                                        | string                | -                                                                                           | 选择天数不能超过 x 天 | -        |\n| allow-same-day    | type 为范围选择时有效，是否允许选择同一天                                                                                                                                                          | boolean               | -                                                                                           | false                 | -        |\n| show-panel-title  | 是否展示面板标题，自动计算当前滚动的日期月份                                                                                                                                                       | boolean               | -                                                                                           | true                  | -        |\n| default-time      | 选中日期所使用的当日内具体时刻                                                                                                                                                                     | string / array        | -                                                                                           | 00:00:00              | -        |\n| panel-height      | 可滚动面板的高度                                                                                                                                                                                   | number                | -                                                                                           | 378                   | -        |\n| time-filter       | type 为 'datetime' 或 'datetimerange' 时有效，用于过滤时间选择器的数据                                                                                                                             | function              | -                                                                                           | -                     | -        |\n| hide-second       | type 为 'datetime' 或 'datetimerange' 时有效，是否不展示秒修改                                                                                                                                     | boolean               | -                                                                                           | false                 | -        |\n| immediate-change  | type 为 'datetime' 或 'datetimerange' 时有，是否在手指松开时立即触发 picker-view 的 change 事件。若不开启则会在滚动动画结束后触发 change 事件，1.2.25 版本起提供，仅微信小程序和支付宝小程序支持。 | boolean               | -                                                                                           | false                 | 1.2.25   |\n```\n\n----------------------------------------\n\nTITLE: Card Style Swiper Implementation\nDESCRIPTION: Demonstrates how to create a card-style carousel effect using margin settings and custom CSS classes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swiper.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"card-swiper\">\n  <wd-swiper\n    autoplay\n    v-model:current=\"current\"\n    custom-indicator-class=\"custom-indicator-class\"\n    custom-image-class=\"custom-image\"\n    custom-next-image-class=\"custom-image-prev\"\n    custom-prev-image-class=\"custom-image-prev\"\n    :indicator=\"{ type: 'dots' }\"\n    :list=\"swiperList\"\n    previousMargin=\"24px\"\n    nextMargin=\"24px\"\n  ></wd-swiper>\n</view>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.card-swiper {\n  --wot-swiper-radius: 0;\n  --wot-swiper-item-padding: 0 24rpx;\n  --wot-swiper-nav-dot-color: #e7e7e7;\n  --wot-swiper-nav-dot-active-color: #4d80f0;\n  padding-bottom: 24rpx;\n  :deep(.custom-indicator-class) {\n    bottom: -16px;\n  }\n  :deep(.custom-image) {\n    border-radius: 12rpx;\n  }\n  :deep(.custom-image-prev) {\n    height: 168px !important;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Bottom Tabbar Implementation\nDESCRIPTION: Fixed position tabbar with placeholder and safe area inset.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabbar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar fixed v-model=\"tabbar\" bordered safeAreaInsetBottom placeholder>\n  <wd-tabbar-item :value=\"2\" is-dot title=\"首页\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"分类\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"我的\" icon=\"user\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"200\" title=\"相册\" icon=\"photo\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"10\" title=\"客服\" icon=\"chat\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: External Style Classes Table for Calendar Component in Markdown\nDESCRIPTION: A markdown table listing the available external style classes for the calendar component, including the class name, description, and minimum version requirements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| 类名         | 说明       | 最低版本 |\n| ------------ | ---------- | -------- |\n| custom-class | 根节点样式 | -        |\n```\n\n----------------------------------------\n\nTITLE: 控制Tooltip显隐 (HTML)\nDESCRIPTION: 展示如何通过v-model绑定来控制Tooltip的显示和隐藏。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tooltip.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-button plain @click=\"control\" size=\"small\" class=\"button-control\">\n  {{ show ? '关闭' : '打开' }}\n</wd-button>\n\n<wd-tooltip placement=\"top\" content=\"控制显隐\" v-model=\"show\">\n  <wd-button :round=\"false\">top</wd-button>\n</wd-tooltip>\n```\n\n----------------------------------------\n\nTITLE: Vibrating Segmented Component in Vue\nDESCRIPTION: Shows how to add a short vibration effect when switching options by setting the vibrate-short attribute to true.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/segmented.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" :vibrate-short=\"true\"></wd-segmented>\n```\n\n----------------------------------------\n\nTITLE: Month Selection in Calendar Component\nDESCRIPTION: Shows how to configure the Calendar component for month selection. The selected value represents the first day of the chosen month.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"month\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Dialog Implementation\nDESCRIPTION: Shows how to implement a basic alert dialog with a button trigger using the MessageBox component\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/message-box.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-message-box></wd-message-box>\n<wd-button @click=\"alert\">alert</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\nconst message = useMessage()\n\nfunction alert() {\n  message.alert('操作成功')\n}\n```\n\n----------------------------------------\n\nTITLE: 使用插槽定制Tooltip内容 (HTML)\nDESCRIPTION: 演示如何使用具名插槽来自定义Tooltip的内容，包括多行文本和自定义样式。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tooltip.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-tooltip placement=\"right\" useContentSlot>\n  <wd-button>多行文本</wd-button>\n  <template #content>\n    <view style=\"color: red; padding: 5px; width: 90px\">\n      <view>多行文本1</view>\n      <view>多行文本2</view>\n      <view>多行文本3</view>\n    </view>\n  </template>\n</wd-tooltip>\n```\n\n----------------------------------------\n\nTITLE: Custom Image for StatusTip Component in HTML\nDESCRIPTION: Demonstrates how to use a custom image URL with the StatusTip component. Any valid image URL can be passed to the image property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/status-tip.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-status-tip image=\"https://registry.npmmirror.com/wot-design-uni-assets/*/files/panda.jpg\" tip=\"View my avatar\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Horizontal Divider in HTML\nDESCRIPTION: Demonstrates the basic usage of the Divider component to render a horizontal divider line.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/divider.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider></wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Disabling Search Component in HTML\nDESCRIPTION: Demonstrates how to disable the Search component using the 'disabled' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/search.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-search disabled />\n```\n\n----------------------------------------\n\nTITLE: Steps with Title and Description - Wot Design - HTML\nDESCRIPTION: Shows how to provide titles and descriptions for each step using the title and description props on wd-step components. Also includes a button that triggers advancing to the next step. This expects a Vue environment with the steps and button components properly registered. The button uses a click event to call nextStep.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/steps.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\\\"active\\\" align-center>\\n  <wd-step title=\\\"Step 1\\\" description=\\\"Register an account\\\" />\\n  <wd-step title=\\\"Step 2\\\" description=\\\"Login and bind phone number\\\" />\\n  <wd-step title=\\\"Step 3\\\" description=\\\"Complete personal information\\\" />\\n</wd-steps>\\n<wd-button size=\\\"small\\\" @click=\\\"nextStep\\\">Next Step</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Card Styling with SCSS for Layout Control\nDESCRIPTION: Provides the SCSS styling needed for the rectangular card example, defining flexbox layouts for content and title areas with specific alignment and spacing properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/card.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.content,\n.title {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n}\n.content {\n  justify-content: flex-start;\n}\n.title {\n  justify-content: space-between;\n}\n.title-tip {\n  color: rgba(0, 0, 0, 0.25);\n  font-size: 12px;\n}\n```\n\n----------------------------------------\n\nTITLE: Year Type Configuration in DatetimePicker\nDESCRIPTION: Shows how to configure the DatetimePicker for year-only selection.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker type=\"year\" v-model=\"value\" label=\"Year\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n```\n\n----------------------------------------\n\nTITLE: Event Handling Tabbar Implementation\nDESCRIPTION: Tabbar implementation with change event handling.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabbar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\" @change=\"handleChange\" active-color=\"#ee0a24\" inactive-color=\"#7d7e80\">\n  <wd-tabbar-item title=\"首页\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"分类\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"我的\" icon=\"user\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"相册\" icon=\"photo\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"客服\" icon=\"chat\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n\nfunction handleChange({ value }: { value: string }) {\n  show(`选中标签:${value}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Video Playback in Swiper\nDESCRIPTION: Shows configuration for manual video playback control (autoplay disabled) with fraction indicators positioned at the top-right.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swiper.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-swiper :list=\"videoList\" autoplay :autoplayVideo=\"false\" :indicator=\"{ type: 'fraction' }\" indicator-position=\"top-right\"></wd-swiper>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst videoList = ref([\n  'https://unpkg.com/wot-design-uni-assets/VID_115503.mp4',\n  'https://unpkg.com/wot-design-uni-assets/VID_150752.mp4',\n  'https://unpkg.com/wot-design-uni-assets/VID_155516.mp4'\n])\n```\n\n----------------------------------------\n\nTITLE: Basic Tabbar Implementation\nDESCRIPTION: Basic implementation of a tabbar with three items using v-model for selection binding.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabbar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\">\n  <wd-tabbar-item title=\"首页\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"分类\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"我的\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Data Masking with Text Component in HTML\nDESCRIPTION: Demonstrates how to apply data masking for sensitive information like names and phone numbers using the format property with appropriate modes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-text text=\"Li Si\" mode=\"name\" :format=\"true\"></wd-text>\n<wd-text text=\"Zhang Chang San\" mode=\"name\" :format=\"true\"></wd-text>\n<wd-text text=\"18888888888\" mode=\"phone\" :format=\"true\"></wd-text>\n```\n\n----------------------------------------\n\nTITLE: Correct Tooltip Position Control Example\nDESCRIPTION: Shows the correct way to position Tooltips by applying styles to the Tooltip component itself rather than its children.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tooltip.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-tooltip placement=\"top\" content=\"top prompt text\" custom-style=\"margin-left: 100px\">\n  <wd-button>top</wd-button>\n</wd-tooltip>\n<wd-tooltip placement=\"top\" content=\"top prompt text\" custom-style=\"position: absolute; left: 100px;\">\n  <wd-button>top</wd-button>\n</wd-tooltip>\n```\n\n----------------------------------------\n\nTITLE: Custom Button Style Override\nDESCRIPTION: CSS override for button background color using custom variables.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n:root,\npage {\n  --wot-button-normal-bg: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionSheet with Cancel Button in HTML\nDESCRIPTION: HTML implementation for ActionSheet with a cancel button, which appears at the bottom of the menu when the cancel-text attribute is specified.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-action-sheet v-model=\"show\" :actions=\"actions\" @close=\"close\" cancel-text=\"取消\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ID Card NumberKeyboard in Vue\nDESCRIPTION: Demonstrates how to configure the NumberKeyboard for ID card input by setting the extra key to 'X'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/number-keyboard.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"ID Card Keyboard\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" extra-key=\"X\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Tooltip Position Control Example\nDESCRIPTION: Demonstrates the incorrect way to control Tooltip positioning by applying styles directly to the inner button component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tooltip.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-tooltip placement=\"top\" content=\"top prompt text\">\n  <wd-button custom-style=\"margin-left: 100px\">top</wd-button>\n</wd-tooltip>\n<wd-tooltip placement=\"top\" content=\"top prompt text\">\n  <wd-button custom-style=\"position: absolute; left: 100px;\">top</wd-button>\n</wd-tooltip>\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Hidden Text in Vue\nDESCRIPTION: Implementation of a progress bar that hides the percentage text display using the hide-text property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/progress.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"60\" hide-text></wd-progress>\n```\n\n----------------------------------------\n\nTITLE: Custom Text in Search Component\nDESCRIPTION: Demonstrates how to customize the placeholder and cancel button text in the search component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/search.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-search placeholder=\"请输入订单号/订单名称\" cancel-txt=\"搜索\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Color Badge Implementation in HTML\nDESCRIPTION: Shows how to customize badge colors using different type values including primary, success, warning, danger, and info\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/badge.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge value=\"12\">\n  <wd-button>Danger</wd-button>\n</wd-badge>\n<wd-badge value=\"12\" type=\"primary\">\n  <wd-button>Primary</wd-button>\n</wd-badge>\n<wd-badge value=\"12\" type=\"success\">\n  <wd-button>Success</wd-button>\n</wd-badge>\n<wd-badge value=\"12\" type=\"warning\">\n  <wd-button>Warning</wd-button>\n</wd-badge>\n<wd-badge value=\"12\" type=\"info\">\n  <wd-button>Info</wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version Updates\nDESCRIPTION: Changelog entries documenting version updates, new features, and bug fixes for the Wot Design Uni library. Includes version numbers, commit hashes, and issue references.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/changelog.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### ✨ Features | 新功能\n\n* ✨ 新增Notify组件、演示demo、文档 ([#9](https://github.com/Moonofweisheng/wot-design-uni/issues/9)) ([996fc39](https://github.com/Moonofweisheng/wot-design-uni/commit/996fc39d708699214faf2e54224b8d38a8a706f7))\n* ✨ 新增Skeleton组件、演示demo、文档 ([#12](https://github.com/Moonofweisheng/wot-design-uni/issues/12)) ([a49e22c](https://github.com/Moonofweisheng/wot-design-uni/commit/a49e22c370163ec3c93bbeb360cc89b3b3c0abc0))\n\n### [0.0.9](https://github.com/Moonofweisheng/wot-design-uni/compare/v0.0.8...v0.0.9) (2023-08-25)\n\n### 🐛 Bug Fixes | Bug 修复\n\n* 🐛 修复Cell 单格组件 is-link 不触发 click ([ece5568](https://github.com/Moonofweisheng/wot-design-uni/commit/ece5568ecc03fd8470c2c02120b94c1ee27d55e7))\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of wd-resize Component (HTML)\nDESCRIPTION: This HTML snippet shows the basic implementation of the 'wd-resize' component. It wraps a 'view' element, whose dimensions are dynamically controlled by the 'width' and 'height' variables via inline styles. The '@resize' directive listens for the 'resize' event emitted by the component and calls the 'handleResize' function when triggered.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/resize.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-resize @resize=\"handleResize\">\n  <view :style=\"`background: #4d80f0; width: ${width};height: ${height}`\"></view>\n</wd-resize>\n```\n\n----------------------------------------\n\nTITLE: Using wd-sticky for Basic Element Fixing (Wot Design Uni, HTML)\nDESCRIPTION: Wrap your UI content (such as buttons) inside the wd-sticky component to fix them at a desired scroll position. No additional logic or parameters are needed for basic usage. The width and height of the wrapped elements should avoid percentage units, using vh/vw instead, to ensure proper sticky positioning.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sticky.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-sticky>\\n  <wd-button type=\\\"success\\\">Basic Usage</wd-button>\\n</wd-sticky>\n```\n\n----------------------------------------\n\nTITLE: 值靠右展示的DatetimePicker示例\nDESCRIPTION: 使用align-right属性使选择器的值靠右对齐展示。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker label=\"日期选择\" align-right v-model=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TableColumn Slot in Markdown\nDESCRIPTION: This snippet defines the slot for customizing column content in the Table component, including available parameters.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/table.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| name  | 说明                                   | 参数                             | 最低版本 |\n| ----- | -------------------------------------- | -------------------------------- | -------- |\n| value | 自定义列的内容，1.2.16 新增`index`参数 | `{ row: Object, index: number }` | 0.1.22   |\n```\n\n----------------------------------------\n\nTITLE: Basic Dark Mode Configuration in Vue\nDESCRIPTION: Basic implementation of dark mode using ConfigProvider component\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<wd-config-provider theme=\"dark\">...</wd-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Custom Title Slot in Cell\nDESCRIPTION: Shows how to use the title slot to create a custom title with subtitle.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell value=\"Content\">\n  <view slot=\"title\">\n    <view>Title</view>\n    <view style=\"margin-top: 5px; font-size: 12px; color: #999;\">Subtitle</view>\n  </view>\n</wd-cell>\n```\n\n----------------------------------------\n\nTITLE: Hiding Cancel Button in HTML\nDESCRIPTION: Shows how to hide the cancel button in the Search component using the 'hide-cancel' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/search.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-search hide-cancel />\n```\n\n----------------------------------------\n\nTITLE: Multi-line NoticeBar Display in HTML\nDESCRIPTION: Configures a NoticeBar to display text in multiple lines by enabling wrapable and disabling scrollable properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar text=\"这是一条消息提示信息，这是一条消息提示信息，这是一条消息提示信息\" wrapable :scrollable=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Error State Textarea Component in HTML\nDESCRIPTION: Shows how to display the textarea in an error state using the error attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" placeholder=\"请输入用户名\" error />\n```\n\n----------------------------------------\n\nTITLE: Mark Type Tag Implementation\nDESCRIPTION: Demonstrates how to create mark-style tags with different types.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag mark>Tag</wd-tag>\n<wd-tag type=\"primary\" mark>Tag</wd-tag>\n<wd-tag type=\"danger\" mark>Tag</wd-tag>\n<wd-tag type=\"warning\" mark>Tag</wd-tag>\n<wd-tag type=\"success\" mark>Tag</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Vertical Scrolling NoticeBar in HTML\nDESCRIPTION: Shows how to implement vertical scrolling in NoticeBar component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notice-bar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar prefix=\"warn-bold\" direction=\"vertical\" :text=\"textArray\" :delay=\"3\" custom-class=\"space\" />\n<wd-notice-bar prefix=\"warn-bold\" direction=\"vertical\" text=\"Single message won't scroll\" :delay=\"3\" custom-class=\"space\" />\n```\n\n----------------------------------------\n\nTITLE: Vertical Scrolling NoticeBar in HTML\nDESCRIPTION: Configures NoticeBar for vertical scrolling by setting the direction property to 'vertical'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar prefix=\"warn-bold\" direction=\"vertical\" :text=\"textArray\" :delay=\"3\" custom-class=\"space\" />\n<wd-notice-bar prefix=\"warn-bold\" direction=\"vertical\" text=\"只有一条消息不会滚动\" :delay=\"3\" custom-class=\"space\" />\n```\n\n----------------------------------------\n\nTITLE: Steps with Custom Status\nDESCRIPTION: Demonstrates how to set custom status for steps including error states.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/steps.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\"1\" align-center>\n  <wd-step title=\"绑定手机\" status=\"error\" />\n  <wd-step title=\"重新绑定手机\" />\n  <wd-step title=\"步骤3\" />\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Curtain Component in Vue\nDESCRIPTION: Demonstrates how to use the Curtain component with v-model for display control, src for image URL, and to for navigation link.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/curtain.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">Show Curtain</wd-button>\n<wd-curtain v-model=\"value\" :src=\"img\" :to=\"link\"></wd-curtain>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(false)\nconst img = ref<string>('https://img20.360buyimg.com/da/jfs/t1/141592/25/8861/261559/5f68d8c1E33ed78ab/698ad655bfcfbaed.png')\nconst link = ref<string>('/pages/index/index')\n\nfunction handleClick() {\n  value.value = true\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Pressure Mode and History Record in Signature Component\nDESCRIPTION: Demonstrates how to combine pressure mode with history record functionality in the signature component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/signature.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature \n  pressure \n  enable-history \n  :height=\"300\" \n  :min-width=\"1\" \n  :max-width=\"6\"\n  background-color=\"#f5f5f5\" \n/>\n<view class=\"tip-text\">Combined with history record, supporting undo and redo of pressure effects</view>\n```\n\n----------------------------------------\n\nTITLE: Horizontally Centering Step Bar - Wot Design - HTML\nDESCRIPTION: Illustrates usage of the align-center attribute with wd-steps for centering the steps horizontally. Only effective with horizontal step bars. This template expects wd-steps and wd-step Vue components to be available.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/steps.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\\\"0\\\" align-center>\\n  <wd-step />\\n  <wd-step />\\n  <wd-step />\\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Disabling Slider in HTML\nDESCRIPTION: Shows how to disable the slider using the disabled attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/slider.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Navbar with Back Navigation\nDESCRIPTION: Implementation of a navbar with back navigation functionality including a back button and arrow.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/navbar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"Title\" left-text=\"Back\" left-arrow @click-left=\"handleClickLeft\"></wd-navbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handleClickLeft() {\n  uni.navigateBack()\n}\n```\n\n----------------------------------------\n\nTITLE: Square Grid in HTML\nDESCRIPTION: Demonstrates how to create a square grid layout using the square attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid square :column=\"3\">\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: 配置Fab组件属性 - TypeScript\nDESCRIPTION: 定义Fab组件所需的响应式属性，包括按钮类型、位置、展开方向和禁用状态。使用useToast钩子创建提示信息功能。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/fab.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nconst { show: showToast } = useToast()\nconst type = ref<'primary' | 'success' | 'info' | 'warning' | 'error' | 'default'>('primary')\nconst position = ref<'left-top'\n  | 'right-top'\n  | 'left-bottom'\n  | 'right-bottom'\n  | 'left-center'\n  | 'right-center'\n  | 'top-center'\n  | 'bottom-center'>('left-bottom')\nconst direction = ref<'top' | 'right' | 'bottom' | 'left'>('top')\nconst disabled = ref<boolean>(false)\n```\n\n----------------------------------------\n\nTITLE: Accordion Mode Implementation\nDESCRIPTION: Shows how to implement accordion-style collapse where only one panel can be open at a time\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/collapse.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-collapse v-model=\"value\" accordion>\n  <wd-collapse-item title=\"Label 1\" name=\"item1\">This is a simple example text.</wd-collapse-item>\n  <wd-collapse-item title=\"Label 2\" name=\"item2\">This is a simple example text.</wd-collapse-item>\n  <wd-collapse-item title=\"Label 3\" name=\"item3\">This is a simple example text.</wd-collapse-item>\n</wd-collapse>\n```\n\n----------------------------------------\n\nTITLE: Implementing JDZhengHT Custom Fonts with @font-face in SCSS\nDESCRIPTION: SCSS implementation for loading JDZhengHT custom fonts from CDN sources, defining font-face rules and utility classes for bold and light font variants.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/typography.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@font-face {\n  font-family: 'JDZhengHT-Bold';\n  src: url('https://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Bold.woff') format('woff'), /* chrome, firefox */\n       url('https://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Bold.ttf') format('truetype'); /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/\n  font-weight: normal;\n  font-style: normal\n}\n@font-face {\n  font-family: 'JDZhengHT-Light';\n  src: url('https://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Light.woff') format('woff'), /* chrome, firefox */\n       url('https://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Light.ttf') format('truetype'); /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/\n  font-weight: normal;\n  font-style: normal\n}\n\n.type-JDZhengHT {\n  font-family: 'JDZhengHT-Light';\n}\n.type-JDZhengHT-Semibold {\n  font-family: 'JDZhengHT-Bold';\n}\n```\n\n----------------------------------------\n\nTITLE: Password Input Field\nDESCRIPTION: Input field for password entry with a toggle to show/hide the password using the show-password attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-input v-model=\"value\" clearable show-password @change=\"handleChange\"/>\n```\n\n----------------------------------------\n\nTITLE: Link Cell Component\nDESCRIPTION: Shows how to create a cell that acts as a navigation link.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Title\" value=\"Content\" is-link url=\"/pages/index/index\" link-type=\"switchTab\"></wd-cell>\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Theme Search in HTML\nDESCRIPTION: Shows how to set the light theme for the Search component using the 'light' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/search.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-search light />\n```\n\n----------------------------------------\n\nTITLE: Disabled Picker Component in Vue\nDESCRIPTION: Shows how to disable the Picker component by setting the 'disabled' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"禁用\" v-model=\"value\" disabled />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref('选项3')\n\nconst columns = ref(['选项1', '选项2', '选项3', '选项4', '选项5', '选项6', '选项7'])\n```\n\n----------------------------------------\n\nTITLE: Defining InputMode Options in Markdown\nDESCRIPTION: This snippet defines the available options for the 'inputmode' attribute of the textarea component. It includes various input types such as text, numeric, and email, along with their descriptions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| 值      | 说明                                                                                                                 |\n|---------|----------------------------------------------------------------------------------------------------------------------|\n| none    | 无虚拟键盘。在应用程序或者站点需要实现自己的键盘输入控件时很有用。                                                   |\n| text    | 使用用户本地区域设置的标准文本输入键盘。                                                                             |\n| decimal | 小数输入键盘，包含数字和分隔符（通常是\" . \"或者\" , \"），设备可能也可能不显示减号键。                                 |\n| numeric | 数字输入键盘，所需要的就是 0 到 9 的数字，设备可能也可能不显示减号键。                                               |\n| tel     | 电话输入键盘，包含 0 到 9 的数字、星号（*）和井号（#）键。表单输入里面的电话输入通常应该使用 <input type=\"tel\"> 。   |\n| search  | 为搜索输入优化的虚拟键盘，比如，返回键可能被重新标记为\"搜索\"，也可能还有其他的优化。                                 |\n| email   | 为邮件地址输入优化的虚拟键盘，通常包含\"@\"符号和其他优化。表单里面的邮件地址输入应该使用 <input type=\"email\">。       |\n| url     | 为网址输入优化的虚拟键盘，比如，\"/\"键会更加明显、历史记录访问等。表单里面的网址输入通常应该使用 <input type=\"url\">。 |\n```\n\n----------------------------------------\n\nTITLE: Plain Tag Implementation\nDESCRIPTION: Shows how to create plain style tags with different types.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag plain>Tag</wd-tag>\n<wd-tag type=\"primary\" plain>Tag</wd-tag>\n<wd-tag type=\"danger\" plain>Tag</wd-tag>\n<wd-tag type=\"warning\" plain>Tag</wd-tag>\n<wd-tag type=\"success\" plain>Tag</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Navbar with Right Button\nDESCRIPTION: Example showing how to add a clickable button on the right side of the navbar with toast functionality.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/navbar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast></wd-toast>\n\n<wd-navbar title=\"Title\" left-text=\"Back\" left-arrow right-text=\"Button\" @click-left=\"handleClickLeft\" @click-right=\"handleClickRight\"></wd-navbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\n\nconst { show: showToast } = useToast()\n\n\nfunction handleClickRight() {\n  showToast('Button')\n}\n```\n\n----------------------------------------\n\nTITLE: Type Modification of NoticeBar in HTML and SCSS\nDESCRIPTION: Shows how to modify the notification type and apply custom styles using SCSS.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notice-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar text=\"This is a message notification, this is a message notification, this is a message notification\" prefix=\"warn-bold\" custom-class=\"space\" />\n<wd-notice-bar text=\"This is a message notification, this is a message notification, this is a message notification\" prefix=\"check-outline\" type=\"info\" custom-class=\"space\" />\n<wd-notice-bar text=\"This is a message notification, this is a message notification, this is a message notification\" prefix=\"wifi-error\" type=\"danger\" />\n```\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.space) {\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Notify Integration\nDESCRIPTION: Layout component that provides a consistent structure for pages, including the Notify component for global notifications.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notify.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n// /components/layout/layout.vue\n<template>\n  <wd-config-provider>\n    <slot />\n    <TabBar />\n    <wd-notify />\n  </wd-config-provider>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    // #ifdef H5\n    name: 'Layout',\n    // #endif\n    options: { virtualHost: true, addGlobalClass: true, styleIsolation: 'shared' }\n  }\n</script>\n\n<script setup lang=\"ts\">\n  import TabBar from './components/tabbar.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: JD Zheng HT Font CDN URLs\nDESCRIPTION: Bash snippet listing the CDN URLs for accessing JD Zheng HT font files in both TTF and WOFF formats, with Light and Bold variants.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/typography.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# CDN Address\nhttps://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Light.ttf\nhttps://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Light.woff\nhttps://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Bold.ttf\nhttps://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Bold.woff\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color in HTML\nDESCRIPTION: Shows how to set a custom color for an icon using the color attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/icon.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-icon name=\"add-circle\" color=\"#0083ff\"></wd-icon>\n```\n\n----------------------------------------\n\nTITLE: Disabled Button Implementation\nDESCRIPTION: Shows how to create a disabled button using the disabled attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-button disabled>默认按钮</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Tag Spacing Styles - SCSS\nDESCRIPTION: Defines spacing styles for tags using SCSS with deep selector\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tag.md#2025-04-23_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.space) {\n  margin: 0 10px 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Text Decoration with Text Component in HTML\nDESCRIPTION: Shows how to apply text decorations such as underline to the text using the decoration property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-text :text=\"text\" type=\"warning\" decoration=\"underline\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Checkbox in Vue\nDESCRIPTION: Shows how to create a disabled checkbox by adding the disabled attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox v-model=\"value\" disabled>Disabled Option</wd-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Large Segmented Component in Vue\nDESCRIPTION: Shows how to create a large-sized Segmented component using the size property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/segmented.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" size=\"large\"></wd-segmented>\n```\n\n----------------------------------------\n\nTITLE: Setting Image Fill Mode\nDESCRIPTION: Example of setting the image fill mode using the mode property. This controls how the image is displayed within its container.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/img.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" mode=\"center\" :src=\"joy\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Textarea Component in HTML\nDESCRIPTION: Demonstrates how to use the wd-textarea component with v-model for two-way binding and placeholder for hint text.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" placeholder=\"请填写评价\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\n```\n\n----------------------------------------\n\nTITLE: Vertical Divider Usage in HTML\nDESCRIPTION: Demonstrates various configurations of vertical dividers, including dashed, non-hairline, and custom color options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/divider.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"content\">\n  Text\n  <wd-divider vertical />\n  Text\n  <wd-divider vertical dashed />\n  Text\n  <wd-divider vertical :hairline=\"false\" />\n  Text\n  <wd-divider vertical color=\"#1989fa\" />\n  Text\n</view>\n```\n\n----------------------------------------\n\nTITLE: Multi-Column PickerView Implementation\nDESCRIPTION: Shows how to create a PickerView with multiple columns by providing a two-dimensional array of options and binding to an array value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker-view.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" v-model=\"value\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(['中南大学', '软件工程'])\n\nconst columns = ref([\n  ['中山大学', '中南大学', '华南理工大学'],\n  ['计算机科学与技术', '软件工程', '通信工程', '法学', '经济学']\n])\n\n```\n\n----------------------------------------\n\nTITLE: Version History Changelog Entry\nDESCRIPTION: Git commit history entries documenting bug fixes and improvements for various components like DatePicker, Picker, Textarea and others.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### 🐛 Bug Fixes | Bug 修复\n\n* 🐛 修复DatePicker占位符展示缺失的问题 ([8fbca94])\n* 🐛 修复DateTimePicker区域选择极值计算错误的问题 ([a1e9530])\n* 🐛 修复picker-view初始化报错的问题 ([2102f38])\n* 🐛 修复picker选择器在APP端包装二维数组逻辑错误导致无法实现多列选择器的问题 ([ed5d7ac])\n* 🐛 移除文件移动时volar变更文件路径错误导致.vue文件中多出的无用路径字符串 ([1f8f8ae])\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Status in HTML\nDESCRIPTION: Illustrates how to set different statuses for the progress bar using the status attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/progress.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"100\" hide-text status=\"success\" />\n<wd-progress :percentage=\"70\" hide-text status=\"danger\" />\n```\n\n----------------------------------------\n\nTITLE: Popup with Disabled Mask Click - HTML\nDESCRIPTION: Shows how to disable the closing of popup when clicking on the mask overlay.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/popup.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup :visible.sync=\"show\" position=\"bottom\" :close-on-click-modal=\"false\">\n  <view style=\"height: 200px; text-align: center; line-height: 200px;\">\n    Content\n  </view>\n</wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Values in HTML\nDESCRIPTION: Modifying the active and inactive values of the Switch component using custom attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/switch.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" active-value=\"沃特\" inactive-value=\"商家后台\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Slots for Textarea Component in Markdown\nDESCRIPTION: This snippet describes the available slots for the textarea component, including 'label' for the left-side title and 'prefix' for the prefix content. It specifies the slot names, descriptions, and minimum version requirements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| name   | 说明         | 最低版本 |\n| ------ | ------------ | -------- |\n| label  | 左侧标题插槽 | -        |\n| prefix | 前置插槽     | -        |\n```\n\n----------------------------------------\n\nTITLE: Adjusting Icon Size in HTML\nDESCRIPTION: Illustrates how to customize the size of icons using the size attribute with different pixel values.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/icon.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-icon name=\"add-circle\" size=\"20px\"></wd-icon>\n<wd-icon name=\"add-circle\" size=\"25px\"></wd-icon>\n<wd-icon name=\"add-circle\" size=\"30px\"></wd-icon>\n```\n\n----------------------------------------\n\nTITLE: Floating Round Tabbar Implementation\nDESCRIPTION: Demonstrates how to create a floating rounded tabbar using the shape property set to 'round'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabbar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar shape=\"round\" v-model=\"tabbar\">\n  <wd-tabbar-item title=\"Home\" is-dot :value=\"2\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"Category\" :value=\"2\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"Photos\" :value=\"30\" icon=\"photo\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"My\" :value=\"200\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for Slider in HTML\nDESCRIPTION: Demonstrates how to set minimum and maximum values for the slider using min and max attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/slider.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" :min=\"4\" :max=\"1000\" />\n```\n\n----------------------------------------\n\nTITLE: Navbar with Disabled Buttons\nDESCRIPTION: Shows how to disable both left and right buttons in the Navbar by setting the respective disabled properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/navbar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"标题\" left-text=\"返回\" right-text=\"按钮\" left-arrow left-disabled right-disabled></wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Dot Notation in Badge Component\nDESCRIPTION: Demonstrates how to use the is-dot attribute to display a red dot instead of a number, useful for highlighting content that needs attention.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/badge.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge is-dot>数据查询</wd-badge>\n<wd-badge is-dot>\n  <wd-button class=\"share-button\" ></wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Custom Styles for Transition Animation in SCSS\nDESCRIPTION: Defines custom styles for the transition animation, including positioning, dimensions, and transform effects.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/transition.md#2025-04-23_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n:deep(button) {\n  margin: 0 10px 10px 0;\n}\n:deep(.block) {\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  margin: -50px 0 0 -50px;\n  width: 100px;\n  height: 100px;\n  background: #0083ff;\n}\n\n:deep(.custom-enter-active),\n:deep(.custom-leave-active) {\n  transition-property: background, transform;\n}\n:deep(.custom-enter) {\n  transform: translate3d(-100px, -100px, 0) rotate(-180deg);\n  background: #ff0000;\n}\n:deep(.custom-leave-to) {\n  transform: translate3d(100px, 100px, 0) rotate(180deg);\n  background: #ff0000;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Backtop Component Icon in HTML\nDESCRIPTION: This snippet shows how to customize the icon of the Backtop component by adding custom content inside the component tags.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/backtop.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-backtop :scrollTop=\"scrollTop\">\n  <text>TOP<text>\n</wd-backtop>\n```\n\n----------------------------------------\n\nTITLE: 带底部安全区的 Gap 间隔槽\nDESCRIPTION: 使用 wd-gap 组件创建一个高度为0的底部安全区间隔，通过 safe-area-bottom 属性启用底部安全区适配。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/gap.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-gap safe-area-bottom height=\"0\"></wd-gap>\n```\n\n----------------------------------------\n\nTITLE: Styling NoticeBar Prefix Icon with SCSS\nDESCRIPTION: Styles the prefix icon in the NoticeBar component with custom font size and padding.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.prefix) {\n  font-size: 18px;\n  padding-right: 4px;\n  width: 18px;\n  height: 18px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Row Panel for ActionSheet in TypeScript\nDESCRIPTION: TypeScript implementation for a multi-row panel ActionSheet. The panels are defined as a two-dimensional array where each inner array represents a row of panel options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/action-sheet.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst show = ref<boolean>(false)\nconst panels = ref([\n  [\n    {\n      iconUrl: '//img12.360buyimg.com/imagetools/jfs/t1/122016/33/6657/1362/5f0692a1E8708d245/e47299e5945a6956.png',\n      title: '微信好友'\n    }\n  ],\n  [\n    {\n      iconUrl: '//img12.360buyimg.com/imagetools/jfs/t1/122016/33/6657/1362/5f0692a1E8708d245/e47299e5945a6956.png',\n      title: '微信好友'\n    }\n  ]\n])\n\nfunction showActions() {\n  show.value = true\n}\n\nfunction close() {\n  show.value = false\n}\nconst toast = useToast()\n\nfunction select({ item, index }) {\n  toast.show(`当前选中项: ${item.title}, 下标: ${index}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Named Tabbar Implementation\nDESCRIPTION: Implementation of tabbar using name attributes for item selection.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabbar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\">\n  <wd-tabbar-item name=\"home\" title=\"首页\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item name=\"cart\" title=\"分类\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item name=\"setting\" title=\"设置\" icon=\"setting\"></wd-tabbar-item>\n  <wd-tabbar-item name=\"user\" title=\"我的\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref('home')\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Step Multiples in InputNumber\nDESCRIPTION: Shows how to enforce strict step multiples in the InputNumber component using the step-strictly prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" step-strictly :step=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Disabled Textarea Implementation\nDESCRIPTION: Demonstrates how to create a disabled textarea by setting the disabled property. This prevents user interaction with the textarea.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" disabled></wd-textarea>\n```\n\n----------------------------------------\n\nTITLE: 设置默认值的DatetimePicker示例\nDESCRIPTION: 使用default-value属性设置默认日期，打开面板时自动选中默认日期。此示例展示如何在v-model为空时提供默认选项。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" :default-value=\"defaultValue\" label=\"日期选择\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\nconst defaultValue = ref<number>(Date.now())\n\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Progress Color Objects\nDESCRIPTION: TypeScript implementation defining color transition points with specific colors and percentages for a progress bar.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/progress.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ProgressColor } from '@/uni_modules/wot-design-uni/components/wd-progress/types'\n\nconst colorObject = ref<ProgressColor>([\n  {\n    color: 'yellow',\n    percentage: 30\n  },\n  {\n    color: 'red',\n    percentage: 60\n  },\n  {\n    color: 'blue',\n    percentage: 80\n  },\n  {\n    color: 'black',\n    percentage: 90\n  }\n])\nconst percentage = ref<number>(100)\n```\n\n----------------------------------------\n\nTITLE: Popup with Rounded Corners - HTML\nDESCRIPTION: Demonstrates how to add custom border radius to the popup component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/popup.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup :visible.sync=\"show\" position=\"bottom\" border-radius=\"16px\">\n  <view style=\"height: 200px; text-align: center; line-height: 200px;\">\n    Content\n  </view>\n</wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Stopping Carousel During Video Playback\nDESCRIPTION: Demonstrates how to configure the Swiper to stop auto-advancing when a video is being played.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swiper.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-swiper\n  :list=\"videoList\"\n  autoplay\n  stopAutoplayWhenVideoPlay\n  :autoplayVideo=\"false\"\n  :indicator=\"{ type: 'fraction' }\"\n  indicator-position=\"top-right\"\n></wd-swiper>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst videoList = ref([\n  'https://unpkg.com/wot-design-uni-assets/VID_115503.mp4',\n  'https://unpkg.com/wot-design-uni-assets/VID_150752.mp4',\n  'https://unpkg.com/wot-design-uni-assets/VID_155516.mp4'\n])\n```\n\n----------------------------------------\n\nTITLE: Custom Animation Configuration for Transition Component in HTML\nDESCRIPTION: Demonstrates how to set custom animation classes and durations for enter and leave transitions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/transition.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-transition\n  :show=\"customShow\"\n  :duration=\"{ enter: 700, leave: 1000 }\"\n  enter-class=\"custom-enter\"\n  enter-active-class=\"custom-enter-active\"\n  enter-to-class=\"custom-enter-to\"\n  leave-class=\"custom-leave\"\n  leave-active-class=\"custom-leave-active\"\n  leave-to-class=\"custom-leave-to\"\n  custom-class=\"block\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Descending Order in SortButton HTML\nDESCRIPTION: Illustrates how to set the SortButton to prioritize switching to descending order by using the desc-first attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sort-button.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-sort-button v-model=\"value\" desc-first title=\"价格\" />\n```\n\n----------------------------------------\n\nTITLE: Disabled Upload Component\nDESCRIPTION: Demonstrates how to disable the Upload component by setting the disabled attribute, preventing users from selecting and uploading new files.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/upload.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-upload\n  :file-list=\"fileList\"\n  action=\"https://mockapi.eolink.com/zhTuw2P8c29bc981a741931bdd86eb04dc1e8fd64865cb5/upload\"\n  @change=\"handleChange\"\n  disabled\n></wd-upload>\n```\n\n----------------------------------------\n\nTITLE: Custom Content in Cell Component\nDESCRIPTION: Examples of using different slots to customize cell content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Title\">\n  <view>Custom Content</view>\n</wd-cell>\n```\n\n----------------------------------------\n\nTITLE: Error State Picker Component in Vue\nDESCRIPTION: Demonstrates how to display the Picker component in an error state by setting the 'error' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"单列选项\" error :columns=\"columns\" v-model=\"value\"/>\n```\n\n----------------------------------------\n\nTITLE: Disabled Picker Component in Vue\nDESCRIPTION: Shows how to create a disabled Picker component by setting the 'disabled' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"Disabled\" v-model=\"value\" disabled />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref('Option 3')\n\nconst columns = ref(['Option 1', 'Option 2', 'Option 3', 'Option 4', 'Option 5', 'Option 6', 'Option 7'])\n```\n\n----------------------------------------\n\nTITLE: Textarea with Clear Button on Focus in HTML\nDESCRIPTION: Demonstrates how to show the clear button only when the textarea is focused using the clear-trigger attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea clear-trigger=\"focus\" v-model=\"value14\" :maxlength=\"120\" clearable show-word-limit />\n```\n\n----------------------------------------\n\nTITLE: Custom Container Implementation - HTML\nDESCRIPTION: Implementation showing sticky component usage within a custom container using wd-sticky-box.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sticky.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-sticky-box>\n  <view class=\"container\">\n    <wd-sticky>\n      <wd-button type=\"warning\">指定容器</wd-button>\n    </wd-sticky>\n  </view>\n</wd-sticky-box>\n```\n\n----------------------------------------\n\nTITLE: Enabling Long Press for Increment/Decrement in InputNumber\nDESCRIPTION: Shows how to enable long press functionality for increment and decrement buttons in the InputNumber component using the long-press attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" long-press @change=\"handleChange\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Transition Component in HTML\nDESCRIPTION: Demonstrates how to wrap content in a wd-transition tag and use the 'show' and 'name' attributes to control visibility and animation type.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/transition.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-transition :show=\"show\" name=\"fade\">内容</wd-transition>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Options for ColPicker Component\nDESCRIPTION: Shows how to set initial options for the ColPicker component, ensuring the columns array matches the value array length.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/col-picker.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"Select Address\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\"></wd-col-picker>\n```\n\n----------------------------------------\n\nTITLE: Disabled Collapse Items\nDESCRIPTION: Example of disabling specific collapse panels using the disabled property\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/collapse.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-collapse v-model=\"value\">\n  <wd-collapse-item title=\"Label 1\" name=\"item1\">This is a simple example text.</wd-collapse-item>\n  <wd-collapse-item title=\"Label 2\" name=\"item2\" disabled>This is a simple example text.</wd-collapse-item>\n  <wd-collapse-item title=\"Label 3\" name=\"item3\">This is a simple example text.</wd-collapse-item>\n</wd-collapse>\n```\n\n----------------------------------------\n\nTITLE: Rendering Donor Table with Vue in HTML\nDESCRIPTION: A Vue-enhanced HTML table that displays donor information including name, message, and link. The table conditionally renders only when donor data is available and handles links appropriately using el-link when provided or displays a dash when not available.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/reward/donor.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<table v-if=\"data&&data.donor\">\n  <thead>\n    <tr>\n      <th>捐赠者</th>\n      <th>留言</th>\n      <th>链接</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"(donor,index) in data.donor\">\n      <td>{{donor.name}}</td>\n      <td>{{donor.message}}</td>\n      <td>\n          <el-link v-if=\"donor.link!=='-'\" :href=\"donor.link\" target=\"_blank\">{{donor.link}}</el-link>\n          <span v-else>-</span>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Multiple Date Selection with CalendarView in Vue\nDESCRIPTION: Shows how to configure the CalendarView component for multiple date selection by setting the type to 'dates'. The v-model is bound to an array in this case.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar-view.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"dates\" v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref([])\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Component Themes in HTML\nDESCRIPTION: Demonstrates how to set different theme types for the text component including primary, error, success, warning, and default.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-text type=\"primary\" text=\"Primary\"></wd-text>\n<wd-text type=\"error\" text=\"Error\"></wd-text>\n<wd-text type=\"success\" text=\"Success\"></wd-text>\n<wd-text type=\"warning\" text=\"Warning\"></wd-text>\n<wd-text text=\"Default\"></wd-text>\n```\n\n----------------------------------------\n\nTITLE: Custom Column Templates with Scoped Slots\nDESCRIPTION: Shows how to customize column content using scoped slots. This example demonstrates accessing row data within the template to create custom layouts for table cells, including combining multiple data points in a single column.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/table.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" @sort-method=\"handleSort\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"Name\" fixed=\"true\" width=\"320rpx\" sortable></wd-table-col>\n  <wd-table-col prop=\"grade\" label=\"Score\" width=\"220rpx\" sortable>\n    <template #value=\"{row}\">\n      <view class=\"custom-class\">\n        <text>{{ row.grade }}</text>\n        <text>YoY {{ row.compare }}</text>\n      </view>\n    </template>\n  </wd-table-col>\n  <wd-table-col prop=\"hobby\" label=\"Description\" sortable></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"School\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"Major\"></wd-table-col>\n  <wd-table-col prop=\"gender\" label=\"Gender\"></wd-table-col>\n  <wd-table-col prop=\"graduation\" label=\"Graduation Time\"></wd-table-col>\n</wd-table>\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { ref } from 'vue'\ninterface TableData {\n  name: string\n  school: string\n  major: string\n  gender: string\n  graduation: string\n  grade: number\n  compare: string\n  hobby: string\n}\n\nconst dataList = ref<TableData[]>([\n  {\n    name: 'Zhang Fei',\n    school: 'Wuhan Yanglo Butcher College',\n    major: 'Computer Science and Technology',\n    gender: 'Male',\n    graduation: 'January 12, 2022',\n    grade: 56,\n    compare: '10%',\n    hobby: 'Zhang Fei of Yan is here!'\n  },\n  {\n    name: 'Guan Yu',\n    school: 'Wuhan Yanglo Mung Bean College',\n    major: 'Computer Science and Technology',\n    gender: 'Male',\n    graduation: 'January 12, 2022',\n    grade: 66,\n    compare: '11%',\n    hobby: 'Yan Liang and Wen Chou, in my view, are mere clay chickens and pottery dogs.'\n  },\n  {\n    name: 'Liu Bei',\n    school: 'Wuhan Yanglo Weaving College',\n    major: 'Computer Science and Technology',\n    gender: 'Male',\n    graduation: 'January 12, 2022',\n    grade: 45,\n    compare: '1%',\n    hobby: 'I have found my Ming, like a fish finding water'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Disabling Input Field in InputNumber Component\nDESCRIPTION: Demonstrates how to disable only the input field of the InputNumber component using the disable-input attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" disable-input />\n```\n\n----------------------------------------\n\nTITLE: Required Picker Component in Vue\nDESCRIPTION: Shows how to display the Picker component as a required field by setting the 'required' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"必填属性\" error :columns=\"columns\" v-model=\"value\" required/>\n```\n\n----------------------------------------\n\nTITLE: Badge Tabbar Implementation\nDESCRIPTION: Tabbar implementation with badge notifications and dot indicators.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabbar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\">\n  <wd-tabbar-item is-dot :value=\"2\" title=\"点状\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"2\" icon=\"cart\" title=\"分类\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"30\" title=\"我的\" icon=\"user\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"200\" title=\"最大值\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Component Slots - Markdown Table\nDESCRIPTION: Table defining available slots for customizing the upload component's appearance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| name    | 说明             | 最低版本 |\n| ------- | ---------------- | -------- |\n| default | 上传唤起插槽样式 | -        |\n| preview-cover | 自定义覆盖在预览区域上方的内容 |   1.3.12   |\n```\n\n----------------------------------------\n\nTITLE: Hiding Current Value Label in Slider HTML\nDESCRIPTION: Shows how to hide the current value label of the slider using the hide-label attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/slider.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" hide-label/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Watermark Component in HTML\nDESCRIPTION: Demonstrates how to use the wd-watermark component with content, width, and height properties to display a full-screen watermark.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/watermark.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-watermark content=\"wot-design-uni\" :width=\"130\" :height=\"130\"></wd-watermark>\n```\n\n----------------------------------------\n\nTITLE: Colored Icon Implementation\nDESCRIPTION: Shows how to customize the icon color using the color attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/icon.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-icon name=\"add-circle\" color=\"#0083ff\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Zero Value in Badge Component\nDESCRIPTION: Shows how to use the show-zero attribute to control the display of zero values. Note that the is-dot attribute takes precedence over show-zero.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/badge.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge modelValue=\"0\" max=\"99\" show-zero>\n  <wd-button size=\"small\">评论</wd-button>\n</wd-badge>\n<wd-badge modelValue=\"0\" max=\"10\">\n  <wd-button size=\"small\">回复</wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Setting Error State for Column Picker in Vue 3\nDESCRIPTION: This snippet demonstrates how to set the error state for a column picker using the error attribute. When set, the picker's value is displayed in red.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" v-model=\"value\" error :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\n----------------------------------------\n\nTITLE: Read-only Picker Component in Vue\nDESCRIPTION: Demonstrates how to create a read-only Picker component by setting the 'readonly' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker :columns=\"columns\" label=\"Read-only\" v-model=\"value\" readonly />\n```\n\n----------------------------------------\n\nTITLE: Titled NumberKeyboard Implementation\nDESCRIPTION: Number keyboard with a custom title header.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/number-keyboard.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"带标题的键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" title=\"输入密码\" extra-key=\".\" close-text=\"完成\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Basic Sticky Layout Implementation - HTML\nDESCRIPTION: Basic implementation of the sticky component by wrapping content in wd-sticky component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sticky.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-sticky>\n  <wd-button type=\"success\">基础用法</wd-button>\n</wd-sticky>\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Animations in HTML\nDESCRIPTION: Demonstrates how to add loading animations to skeleton screens using the 'animation' attribute with 'gradient' and 'flashed' options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/skeleton.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-skeleton animation=\"gradient\" theme=\"paragraph\" />\n<view style=\"display: flex\">\n  <wd-skeleton :row-col=\"[{ size: '48px', type: 'circle' }]\" />\n  <wd-skeleton :custom-style=\"{ width: '100%', marginLeft: '12px' }\" animation=\"flashed\" theme=\"paragraph\" />\n</view>\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Font CSS Configuration\nDESCRIPTION: CSS configuration for implementing custom icons using external icon font files including font-face definition and class styles.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/icon.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: \"fish\";\n  src: url('//at.alicdn.com/t/c/font_4626013_vwpx4thmin.woff2?t=1721314121733') format('woff2'),\n       url('//at.alicdn.com/t/c/font_4626013_vwpx4thmin.woff?t=1721314121733') format('woff'),\n       url('//at.alicdn.com/t/c/font_4626013_vwpx4thmin.ttf?t=1721314121733') format('truetype');\n}\n\n.fish {\n  font-family: \"fish\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.fish-kehuishouwu:before {\n  content: \"\\e627\";\n}\n```\n\n----------------------------------------\n\nTITLE: Year类型DatetimePicker示例\nDESCRIPTION: 使用type=\"year\"属性，只展示年份选择器。绑定值为时间戳类型。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker type=\"year\" v-model=\"value\" label=\"年\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\n```\n\n----------------------------------------\n\nTITLE: Basic Image Implementation in HTML\nDESCRIPTION: Shows basic usage of the wd-img component with width, height, and src attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/img.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-img :width=\"100\" :height=\"100\" :src=\"joy\" />\n```\n\n----------------------------------------\n\nTITLE: Grid with Borders\nDESCRIPTION: Enabling borders between grid items using the border property. This example shows a 3-column grid with border lines between each item.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/grid.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid border :column=\"3\">\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n  <wd-grid-item icon=\"picture\" text=\"文字\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Modifying Close Button Position in Curtain Component\nDESCRIPTION: Demonstrates how to change the position of the close button in the Curtain component using the close-position attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/curtain.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">展示幕帘</wd-button>\n<wd-curtain v-model=\"value\" :src=\"img\" :to=\"link\" close-position=\"top\" width=\"280\"></wd-curtain>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(false)\nconst img = ref<string>('https://img20.360buyimg.com/da/jfs/t1/141592/25/8861/261559/5f68d8c1E33ed78ab/698ad655bfcfbaed.png')\nconst link = ref<string>('/pages/index/index')\n\nfunction handleClick() {\n  value.value = true\n}\n```\n\n----------------------------------------\n\nTITLE: Image Source Setup in TypeScript\nDESCRIPTION: Demonstrates how to set up the image source using base64 encoded data.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/img.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// import { joy } from '../images/joy'\nconst joy = 'data:image/jpeg;base64,...' // Image file base64\n```\n\n----------------------------------------\n\nTITLE: File Data Structure - Markdown Table\nDESCRIPTION: Table describing the structure of file data including unique identifiers, URLs, and status information.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| 键名     | 类型            | 说明                                                  | 最低版本 |\n| -------- | --------------- | ----------------------------------------------------- | -------- |\n| uid      | number          | 当前上传文件在列表中的唯一标识                        | -        |\n| url      | string          | 上传图片地址                                          | -        |\n| action   | string          | 上传的地址                                            | -        |\n| percent  | number          | 上传进度                                              | -        |\n| size     | number          | 响文件尺寸应码                                        | -        |\n| status   | string          | 当前图片上传状态。若自定义了 status-key，应取对应字段 | -        |\n| response | string / object | 后端返回的内容，可能是对象，也可能是字符串            | -        |\n```\n\n----------------------------------------\n\nTITLE: Vertically Centered Textarea with Label\nDESCRIPTION: Creates a textarea with vertically centered label and input field by using the center property instead of the default top alignment.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea label=\"Basic Usage\" v-model=\"value\" center />\n```\n\n----------------------------------------\n\nTITLE: Initializing Toast Component in HTML\nDESCRIPTION: Shows how to include the wd-toast component in the HTML template as a mounting point for toast notifications.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-toast.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n<wd-button @click=\"showToast\">toast</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Custom Size Configuration\nDESCRIPTION: Demonstrates how to customize the circle diameter using the size property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/circle.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :size=\"300\"></wd-circle>\n```\n\n----------------------------------------\n\nTITLE: Styling Badge Component with SCSS\nDESCRIPTION: Applies custom styling to the Badge component using SCSS, setting margin and display properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/badge.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.badge) {\n    margin: 0 30px 20px 0;\n    display: inline-block;\n}\n```\n\n----------------------------------------\n\nTITLE: Textarea with Clear Button on Focus\nDESCRIPTION: Creates a textarea where the clear button only appears when the component is focused by setting the clear-trigger property to \"focus\".\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea clear-trigger=\"focus\" v-model=\"value14\" :maxlength=\"120\" clearable show-word-limit />\n```\n\n----------------------------------------\n\nTITLE: Reset Play Animation in NoticeBar using HTML and TypeScript\nDESCRIPTION: Demonstrates how to reset the play animation of NoticeBar using a method call.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notice-bar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar ref=\"notice\" prefix=\"warn-bold\" direction=\"vertical\" :text=\"textArray\" :delay=\"3\" />\n<wd-button @click=\"handleReset\">Reset Play Animation</wd-button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// uni_modules\nimport { type NoticeBarInstance } from '@/uni_modules/wot-design-uni/components/wd-notice-bar/types'\n// npm\n// import { type NoticeBarInstance } from 'wot-design-uni/components/wd-notice-bar/types'\n\nconst notice = ref<NoticeBarInstance>()\n\nconst textArray = ref([\n  'Welcome to wot design uni',\n  'This component library is built based on uniapp ->Vue3, ts',\n  'Project address: https://github.com/Moonofweisheng/wot-design-uni',\n  'Our goal is to create the strongest uniapp component library',\n  'Sincerely invite everyone to build together',\n  'This is a message notification, this is a message notification, this is a message notification, this is a message notification, this is a message notification'\n])\n\nfunction handleReset() {\n  notice.value?.reset()\n}\n```\n\n----------------------------------------\n\nTITLE: 顶部弹出位置设置 (HTML)\nDESCRIPTION: 通过position属性设置弹出层从顶部弹出，并通过custom-style设置高度。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/popup.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup v-model=\"show\" position=\"top\" custom-style=\"height: 200px;\" @close=\"handleClose\"></wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Click Event Handler Function in TypeScript\nDESCRIPTION: Defines a click event handler function that logs to the console when the text component is clicked.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clickTest() {\n  console.log(1)\n}\n```\n\n----------------------------------------\n\nTITLE: SCSS Styling for Custom Transition Animations\nDESCRIPTION: Defines the CSS styles for custom transition animations, including transform and background color changes during transitions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/transition.md#2025-04-23_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n:deep(button) {\n  margin: 0 10px 10px 0;\n}\n:deep(.block) {\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  margin: -50px 0 0 -50px;\n  width: 100px;\n  height: 100px;\n  background: #0083ff;\n}\n\n:deep(.custom-enter-active),\n:deep(.custom-leave-active) {\n  transition-property: background, transform;\n}\n:deep(.custom-enter) {\n  transform: translate3d(-100px, -100px, 0) rotate(-180deg);\n  background: #ff0000;\n}\n:deep(.custom-leave-to) {\n  transform: translate3d(100px, 100px, 0) rotate(180deg);\n  background: #ff0000;\n}\n```\n\n----------------------------------------\n\nTITLE: Small Segmented Component in Vue\nDESCRIPTION: Demonstrates creating a small-sized Segmented component using the size property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/segmented.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" size=\"small\"></wd-segmented>\n```\n\n----------------------------------------\n\nTITLE: Customizing Watermark Opacity in HTML\nDESCRIPTION: Example of adjusting the watermark's opacity. This allows for controlling how prominently the watermark appears on the page, with lower values making it more subtle.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/watermark.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-watermark content=\"wot-design-uni\" :opacity=\"0.4\"></wd-watermark>\n```\n\n----------------------------------------\n\nTITLE: 使用插槽唤起的DatetimePicker示例\nDESCRIPTION: 通过默认插槽自定义唤起选择器的组件，例如使用按钮代替默认的单元格样式。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker  v-model=\"value\">\n  <wd-button>插槽唤起</wd-button>\n</wd-datetime-picker>\n```\n\n----------------------------------------\n\nTITLE: Hiding Input Box in InputNumber Component\nDESCRIPTION: Shows how to hide the input box in the InputNumber component using the without-input prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" without-input />\n```\n\n----------------------------------------\n\nTITLE: 开启底部安全区的弹出层 (HTML)\nDESCRIPTION: 通过设置safe-area-inset-bottom属性为true，确保弹出层在底部显示时不会被底部安全区域遮挡。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/popup.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup v-model=\"show\" position=\"bottom\" :safe-area-inset-bottom=\"true\" custom-style=\"height: 200px;\" @close=\"handleClose\"></wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Upward Expanding DropMenu in Vue 3\nDESCRIPTION: Shows how to configure the DropMenu to expand upwards using the direction property set to 'up'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/drop-menu.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-drop-menu direction=\"up\">\n  <wd-drop-menu-item v-model=\"value1\" :options=\"option1\" @change=\"handleChange1\" />\n  <wd-drop-menu-item v-model=\"value2\" :options=\"option2\" @change=\"handleChange2\" />\n</wd-drop-menu>\n```\n\n----------------------------------------\n\nTITLE: Positioning Toast in TypeScript\nDESCRIPTION: Shows how to customize the position of a toast by setting the position parameter to 'top', 'middle', or 'bottom', with 'middle' being the default.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/toast.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst open = () => {\n  toast.show({\n    msg: 'Custom Position',\n    position: 'top'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Build Platforms in uni-app package.json\nDESCRIPTION: Example of package.json configuration for adding a custom compile platform (DingTalk Mini Program) in uni-app.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uni-app\": {\n    \"scripts\": {\n      \"mp-dingtalk\": {\n        \"title\": \"钉钉小程序\",\n        \"env\": {\n          \"UNI_PLATFORM\": \"mp-alipay\"\n        },\n        \"define\": {\n          \"MP-DINGTALK\": true\n        }\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Content Positioning in Divider Component\nDESCRIPTION: Shows how to specify the content position using the 'content-position' attribute, with options for center, left, and right alignment.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/divider.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider>Center</wd-divider>\n<wd-divider content-position=\"left\">Left</wd-divider>\n<wd-divider content-position=\"right\">Right</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Wot Design Uni Documentation Home Page\nDESCRIPTION: YAML front matter configuration for the documentation home page of Wot Design Uni component library. The configuration includes page metadata, hero section elements, feature highlights with icons, and footer settings.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\n\ntitle: Wot Design Uni\ntitleTemplate: A uni-app component library based on Vue3+TS, providing 70+ high-quality components, supporting dark mode, internationalization, and custom themes.\n\nhero:\n  name: Wot Design Uni\n  text: A Beautiful and Lightweight uni-app Component Library\n  tagline: Built with Vue3+TS, providing 70+ high-quality components, supporting dark mode, internationalization, and custom themes.\n  image:\n    src: /logo.png\n    alt: Wot Design\n  actions:\n    - theme: brand\n      text: Get Started 🚀\n      link: /en-US/guide/introduction\n    - theme: alt\n      text: Common Problems\n      link: /en-US/guide/common-problems\n    - theme: alt\n      text: Components\n      link: /en-US/component/button\n    - theme: brand\n      text: 🥤Buy Me a Coffee\n      link: /en-US/reward/reward\n    - theme: alt\n      text: ⭐ Showcase\n      link: /en-US/guide/cases\n\nfeatures:\n  - icon: 🎯\n    title: Multi-Platform Support\n    details: Supports WeChat Mini Program, Alipay Mini Program, DingTalk Mini Program, H5, APP, and more platforms.\n  - icon: 🚀\n    title: 70+ Components\n    details: Over 70 high-quality components covering mainstream mobile scenarios.\n  - icon: 💪\n    title: TypeScript Support\n    details: Built with TypeScript, providing a robust component type system.\n  - icon: 🌍\n    title: Internationalization\n    details: Supports internationalization with 15 built-in language packs.\n  - icon: 📖\n    title: Rich Documentation and Examples\n    details: Comprehensive documentation and component examples provide stable support for developers.\n  - icon: 🍭\n    title: Dark Mode and Theme Customization\n    details: Customize CSS variables and component styles for your needs.\n\nfooter: false\n---\n```\n\n----------------------------------------\n\nTITLE: Customizing Watermark Opacity in HTML\nDESCRIPTION: Shows how to customize the opacity of the watermark using the opacity property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/watermark.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-watermark content=\"wot-design-uni\" :opacity=\"0.4\"></wd-watermark>\n```\n\n----------------------------------------\n\nTITLE: 禁用遮罩点击关闭的弹出层 (HTML)\nDESCRIPTION: 通过设置close-on-click-modal属性为false，禁用点击遮罩关闭弹出层的功能。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/popup.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup v-model=\"show\" position=\"bottom\" :close-on-click-modal=\"false\" closable custom-style=\"height: 200px;\" @close=\"handleClose\"></wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Icon-based Pagination Navigation\nDESCRIPTION: Implementation of pagination with icon-based navigation using the show-icon property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-pagination v-model=\"value\" @change=\"handleChange\" show-icon ></wd-pagination>\n```\n\n----------------------------------------\n\nTITLE: Auto-height Textarea Component in HTML\nDESCRIPTION: Demonstrates how to create an auto-height textarea using the auto-height attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" auto-height />\n```\n\n----------------------------------------\n\nTITLE: Disabling Slider in HTML\nDESCRIPTION: Shows how to disable the slider component using the disabled attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/slider.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Sidebar in HTML\nDESCRIPTION: Demonstrates the basic usage of the Sidebar component with v-model binding for the active item.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\">\n  <wd-sidebar-item :value=\"0\" label=\"Label Name\" />\n  <wd-sidebar-item :value=\"1\" label=\"Label Name\" />\n  <wd-sidebar-item :value=\"2\" label=\"Label Name\" />\n</wd-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled PickerView in HTML and TypeScript\nDESCRIPTION: Shows how to create a disabled PickerView component with predefined options and a selected value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker-view.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" v-model=\"value\" disabled />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = ref(['Option 1', 'Option 2', 'Option 3', 'Option 4', 'Option 5', 'Option 6', 'Option 7'])\nconst value = ref('Option 3')\n```\n\n----------------------------------------\n\nTITLE: Card Styling in SCSS\nDESCRIPTION: Defines the styling for content and title sections of the card using flexbox layouts.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/card.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.content,\n.title {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n}\n.content {\n  justify-content: flex-start;\n}\n.title {\n  justify-content: space-between;\n}\n.title-tip {\n  color: rgba(0, 0, 0, 0.25);\n  font-size: 12px;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Height Gap\nDESCRIPTION: Demonstrates setting a custom height for the gap component using the height property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/gap.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-gap bg-color=\"#4D80F0\" height=\"120rpx\"></wd-gap>\n```\n\n----------------------------------------\n\nTITLE: Custom Text Loadmore Implementation - HTML\nDESCRIPTION: Shows how to customize the text displayed for different states using loading-text, finished-text, and error-text properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/loadmore.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-loadmore custom-class=\"loadmore\" state=\"loading\" loading-text=\"Custom Loading Text\" />\n\n<wd-loadmore custom-class=\"loadmore\" state=\"finished\" finished-text=\"Custom Finished Text\" />\n\n<wd-loadmore custom-class=\"loadmore\" state=\"error\" error-text=\"Custom Error Text\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Font Color for Text Component in HTML\nDESCRIPTION: Shows how to customize the font color of the text component using the color property with a hex color value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-text\n  text=\"Reed leaves fill the sandbar, cold sand carries shallow streams. Twenty years later, passing the south tower again. The boat tied under willows is not yet steady, how many days until mid-autumn comes again? Yellow crane at the broken cliff, has my old friend been here? The old rivers and mountains are all filled with new sorrows. Wanting to buy osmanthus flowers and bring wine, but it's never like the wanderings of youth.\"\n  color=\"#36B8C2\"\n></wd-text>\n```\n\n----------------------------------------\n\nTITLE: CurrentTime Type Definition in TypeScript\nDESCRIPTION: Defines the structure of the CurrentTime type used in the useCountDown hook, specifying the properties for days, hours, minutes, seconds, milliseconds, and total time.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/use-count-down.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CurrentTime = {\n  days: number\n  hours: number\n  total: number\n  minutes: number\n  seconds: number\n  milliseconds: number\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Style Isolation in Vue 3.3+ Components\nDESCRIPTION: Using defineOptions to enable the styleIsolation: 'shared' option in Vue 3.3+ for allowing style overrides in custom components.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/common-problems.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n<script lang=\"ts\" setup>\ndefineOptions({\n  options: {\n    styleIsolation: 'shared'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling InputNumber Component in Vue\nDESCRIPTION: Shows how to disable the InputNumber component using the disabled prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Progress Bar in HTML\nDESCRIPTION: Demonstrates how to use the wd-progress component with a basic percentage value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/progress.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"30\" />\n```\n\n----------------------------------------\n\nTITLE: Tooltip with Close Button\nDESCRIPTION: Demonstrates how to display a close button inside the Tooltip using the show-close property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tooltip.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-tooltip content=\"Show Close Button\" show-close>\n  <wd-button>Show Close Button</wd-button>\n</wd-tooltip>\n```\n\n----------------------------------------\n\nTITLE: Styling Vertical Divider Container in CSS\nDESCRIPTION: Provides CSS styling for the container of vertical dividers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/divider.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.content {\n  padding: 12rpx 15px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before-Change Hook for Switch in HTML and TypeScript\nDESCRIPTION: Using the before-change attribute to add a confirmation step before changing the Switch state.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/switch.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-switch v-model=\"checked\" :before-change=\"beforeChange\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessage } from '@/uni_modules/wot-design-uni'\n\nconst message = useMessage()\n\nconst beforeChange = ({ value, resolve }) => {\n  message\n    .confirm('是否切换开关')\n    .then(() => {\n      resolve(true)\n    })\n    .catch(() => {\n      resolve(false)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading in ColPicker Component\nDESCRIPTION: Illustrates how to implement asynchronous data loading for the ColPicker component, including error handling and simulated API requests.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/col-picker.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"Select Address\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData can be referenced from the introduction at the top of this section\n// Adjust the import path according to your actual situation, don't just copy and paste\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>([])\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  })\n])\n\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  // Simulate asynchronous request\n  setTimeout(() => {\n    // Simulate request failure\n    if (Math.random() > 0.7) {\n      finish(false)\n      toast.error.error('Data request failed, please try again')\n      return\n    }\n    // Why use selectedItem.value as code? Because when constructing area, we put the identifier in the value field, similarly you can change it to other fields as long as they correspond to area's fields\n    const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n    if (areaData && areaData.length) {\n      resolve(\n        areaData.map((item) => {\n          return {\n            value: item.value,\n            label: item.text\n          }\n        })\n      )\n    } else {\n      // When there are no more items, complete the operation\n      finish()\n    }\n  }, 300)\n}\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: 基本栅格布局实现 (HTML)\nDESCRIPTION: 展示了24列栅格的基本使用方法，通过在 wd-col 上设置 span 属性控制每一列的宽度。示例展示了分别占满24列、12列、8列和6列的布局方式。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/layout.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-row>\n  <wd-col :span=\"24\"><view class=\"bg-dark1\">span: 24</view></wd-col>\n</wd-row>\n<wd-row>\n  <wd-col :span=\"12\"><view class=\"bg-dark\">span: 12</view></wd-col>\n  <wd-col :span=\"12\"><view class=\"bg-light\">span: 12</view></wd-col>\n</wd-row>\n<wd-row>\n  <wd-col :span=\"8\"><view class=\"bg-dark\">span: 8</view></wd-col>\n  <wd-col :span=\"8\"><view class=\"bg-light\">span: 8</view></wd-col>\n  <wd-col :span=\"8\"><view class=\"bg-dark\">span: 8</view></wd-col>\n</wd-row>\n<wd-row>\n  <wd-col :span=\"6\"><view class=\"bg-dark\">span: 6</view></wd-col>\n  <wd-col :span=\"6\"><view class=\"bg-light\">span: 6</view></wd-col>\n  <wd-col :span=\"6\"><view class=\"bg-dark\">span: 6</view></wd-col>\n  <wd-col :span=\"6\"><view class=\"bg-light\">span: 6</view></wd-col>\n</wd-row>\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Color in HTML\nDESCRIPTION: Demonstrates how to modify the color of the progress bar using the color attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/progress.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"80\" color=\"#00c740\"></wd-progress>\n```\n\n----------------------------------------\n\nTITLE: 弹出层自定义样式 (CSS)\nDESCRIPTION: 为弹出层内容定义的CSS样式，设置了颜色、尺寸、弹性布局和圆角等属性。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/popup.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-txt {\n  color: black;\n  width: 400rpx;\n  height: 400rpx;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 40rpx;\n  border-radius: 32rpx;\n}\n```\n\n----------------------------------------\n\nTITLE: List Item Styling - SCSS\nDESCRIPTION: Defines the styling for list items including layout, borders, and image dimensions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/loadmore.md#2025-04-23_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n.list-item {\n  position: relative;\n  display: flex;\n  padding: 10px 15px;\n  background: #fff;\n  color: #464646;\n}\n\n.list-item:after {\n  position: absolute;\n  display: block;\n  content: '';\n  height: 1px;\n  left: 0;\n  width: 100%;\n  bottom: 0;\n  background: #eee;\n  transform: scaleY(0.5);\n}\nimage {\n  display: block;\n  width: 120px;\n  height: 78px;\n  margin-right: 15px;\n}\n.right {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Time类型DatetimePicker示例\nDESCRIPTION: 使用type=\"time\"属性，只展示时分选择器。绑定值为HH:mm格式的字符串。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker type=\"time\" v-model=\"value\" label=\"时分\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value4 = ref<string>('09:20')\n\n```\n\n----------------------------------------\n\nTITLE: Dot Badge Implementation in HTML\nDESCRIPTION: Demonstrates how to create a simple dot badge without any content using the is-dot attribute\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/badge.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge is-dot>\n  <wd-button>Button</wd-button>\n</wd-badge>\n<wd-badge is-dot>\n  <wd-button icon=\"cart-o\"></wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Large Size Radio Group Implementation\nDESCRIPTION: Implementation of a radio group with large size. The 'size' attribute is set to 'large' to increase the size of all radio options.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/radio.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-radio-group v-model=\"value\" size=\"large\">\n  <wd-radio value=\"1\">沃特</wd-radio>\n  <wd-radio value=\"2\">商家后台</wd-radio>\n</wd-radio-group>\n```\n\n----------------------------------------\n\nTITLE: 错误状态DatetimePicker示例\nDESCRIPTION: 使用error属性设置选择器显示错误状态，此时值会以红色显示。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker label=\"日期选择\" error v-model=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Anchor Usage Example for Sidebar in CSS\nDESCRIPTION: Provides CSS styles for the anchor usage example of the sidebar component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.wraper {\n  display: flex;\n  height: 100vh;\n  overflow: hidden;\n}\n.content {\n  flex: 1;\n  height: 100%;\n}\n.category {\n  background: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Large Size Textarea Implementation\nDESCRIPTION: Shows how to create a larger textarea by setting the size property to \"large\", which increases the font size to 16px.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea label=\"Basic Usage\" size=\"large\" v-model=\"value\" placeholder=\"Please enter...\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Textarea Component in HTML and TypeScript\nDESCRIPTION: Shows how to implement a basic textarea with two-way data binding using v-model and a placeholder text. The TypeScript code initializes an empty string ref for the value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" placeholder=\"Please enter your comment\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<string>('')\n```\n\n----------------------------------------\n\nTITLE: Removing Underline from SortButton in HTML\nDESCRIPTION: Demonstrates how to remove the underline display from the SortButton, typically used when there's only one sort button, by setting the line attribute to false.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sort-button.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-sort-button v-model=\"value\" :line=\"false\" title=\"价格\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying Input Box Width in InputNumber\nDESCRIPTION: Demonstrates how to modify the input box width in the InputNumber component using the input-width prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" input-width=\"70px\" />\n```\n\n----------------------------------------\n\nTITLE: ID Card Keyboard Configuration in Vue\nDESCRIPTION: Demonstrates how to set up a keyboard for inputting ID card numbers by setting the extra-key to 'X'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/keyboard.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"身份证键盘\" is-link @click=\"showKeyBoard\" />\n\n<wd-keyboard v-model:visible=\"visible\" extra-key=\"X\" close-text=\"完成\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('删除')\n```\n\n----------------------------------------\n\nTITLE: Tabs with Badges\nDESCRIPTION: Implementation showing how to add badges to tabs with different configurations\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabs.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tabWithBadge\" @change=\"handleChange\">\n  <wd-tab v-for=\"(item, index) in tabsWithBadge\" :key=\"index\" :title=\"`${item.title}`\" :badge-props=\"item.badgeProps\">\n    <view class=\"content\">{{ item.title }}徽标</view>\n  </wd-tab>\n</wd-tabs>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tabWithBadge = ref(0)\nconst tabsWithBadge = ref([\n  {\n    title: '普通数值',\n    badgeProps: {\n      modelValue: 10,\n      right: '-8px'\n    }\n  },\n  {\n    title: '最大值',\n    badgeProps: {\n      modelValue: 100,\n      max: 99,\n      right: '-8px'\n    }\n  },\n  {\n    title: '点状',\n    badgeProps: {\n      isDot: true,\n      right: '-8px',\n      showZero: true\n    }\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Image Group Skeleton Screens in HTML and TypeScript\nDESCRIPTION: Shows how to implement image group skeleton screens using wd-skeleton components with custom row-col configurations.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/skeleton.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<view>\n  <wd-skeleton :row-col=\"imageGroup\" />\n  <wd-skeleton :custom-style=\"{ marginTop: '20px' }\" :row-col=\"imageGroup\" />\n</view>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst imageGroup = [\n  { height: '171px' }, 1, { width: '107px' }, \n  [{ width: '93px' }, { width: '32px', marginLeft: '41px' }]\n]\n```\n\n----------------------------------------\n\nTITLE: Line Limiting in Text Component in HTML\nDESCRIPTION: Shows how to limit the number of text lines displayed using the lines property, which will add ellipsis when content exceeds the specified number of lines.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-text :text=\"text\" :lines=\"2\" size=\"16px\"></wd-text>\n```\n\n----------------------------------------\n\nTITLE: Collapse Header Styling\nDESCRIPTION: CSS styles for the custom header in collapse component\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/collapse.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n```\n\n----------------------------------------\n\nTITLE: Large Segmented Component in Vue\nDESCRIPTION: Shows how to create a large-sized Segmented component by setting the size attribute to 'large'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/segmented.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" size=\"large\"></wd-segmented>\n```\n\n----------------------------------------\n\nTITLE: Basic DatetimePickerView Implementation\nDESCRIPTION: Basic setup of a datetime picker view with a timestamp value binding and change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker-view.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast />\n\n<wd-datetime-picker-view v-model=\"value\" label=\"Date Selection\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToast } from '@/uni_modules/wot-design-uni'\nconst toast = useToast()\nconst value = ref<number>(Date.now())\n\nfunction onChange1({ value }) {\n  toast.show('Selected ' + new Date(value))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Internationalization in Wot Design Uni\nDESCRIPTION: This code snippet shows how to configure vite.config.ts to exclude wot-design-uni from pre-building dependencies when using internationalization in non-uni_modules mode.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/locale.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport uni from '@dcloudio/vite-plugin-uni'\n\nexport default defineConfig({\n  ...\n  optimizeDeps: {\n    exclude: process.env.UNI_PLATFORM === 'h5' && process.env.NODE_ENV === 'development' ? ['wot-design-uni'] : []\n  }\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Text in Divider Component\nDESCRIPTION: Uses the default slot to insert text content in the middle of the dividing line.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/divider.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider>Display Text</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Version Release Headers - Markdown\nDESCRIPTION: Markdown headers showing version releases with links to compare versions\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/changelog.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### [0.1.47](https://github.com/Moonofweisheng/wot-design-uni/compare/v0.1.46...v0.1.47) (2023-11-02)\n\n### [0.1.46](https://github.com/Moonofweisheng/wot-design-uni/compare/v0.1.45...v0.1.46) (2023-11-02)\n\n### [0.1.45](https://github.com/Moonofweisheng/wot-design-uni/compare/v0.1.44...v0.1.45) (2023-11-01)\n```\n\n----------------------------------------\n\nTITLE: Documenting ButtonOpenType Properties in Markdown\nDESCRIPTION: This snippet defines a markdown table listing various ButtonOpenType properties and their descriptions. It covers open capabilities such as feedback, share, getUserInfo, and others, explaining their functionalities in the context of the wot-design-uni project.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性                      | 说明                                                                                       |\n| ------------------------- | ------------------------------------------------------------------------------------------ |\n| feedback                  | 打开\"意见反馈\"页面，用户可提交反馈内容并上传日志。                                         |\n| share                     | 触发用户转发                                                                               |\n| getUserInfo               | 获取用户信息，可以从@getuserinfo 回调中获取到用户信息                                      |\n| contact                   | 打开客服会话，如果用户在会话中点击消息卡片后返回应用，可以从 @contact 回调中获得具体信息   |\n| getPhoneNumber            | 获取用户手机号，可以从@getphonenumber 回调中获取到用户信息                                 |\n| launchApp                 | 小程序中打开 APP，可以通过 app-parameter 属性设定向 APP 传的参数                           |\n| openSetting               | 打开授权设置页                                                                             |\n| chooseAvatar              | 获取用户头像，可以从@chooseavatar 回调中获取到头像信息                                     |\n| getAuthorize              | 支持小程序授权，支付宝小程序配合`scope`使用，可以实现`getPhoneNumber`和`getUserInfo`功能。 |\n| lifestyle                 | 关注生活号，支付宝小程序                                                                   |\n| contactShare              | 分享到通讯录好友，支付宝小程序                                                             |\n| agreePrivacyAuthorization | 用户同意隐私协议按钮。可通过 @agreeprivacyauthorization 监听用户同意隐私协议事件。         |\n```\n\n----------------------------------------\n\nTITLE: Custom Size for StatusTip Component in HTML\nDESCRIPTION: Shows how to customize the image size of the StatusTip component using the image-size property. The size can be specified as an object with height and width properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/status-tip.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-status-tip\n  :image-size=\"{\n          height: 200,\n          width: 300\n  }\"\n  image=\"search\"\n  tip=\"No search results\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Size in Vue\nDESCRIPTION: Demonstrates how to set a custom size for the checkbox using the size attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox v-model=\"value\" size=\"large\">Large Checkbox</wd-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Modifying Size and Spacing of Rate Component in HTML\nDESCRIPTION: Shows how to adjust the icon size and spacing between icons in the Rate component using the size and space properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/rate.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" size=\"30px\" space=\"10px\"/>\n```\n\n----------------------------------------\n\nTITLE: Text Button Implementation\nDESCRIPTION: Demonstrates text-only button variant using type=\"text\".\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"text\">文字按钮</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Defining Color Object Array in TypeScript\nDESCRIPTION: Shows how to define a color object array for the progress bar, including color and percentage for each segment.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/progress.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ProgressColor } from '@/uni_modules/wot-design-uni/components/wd-progress/types'\n\nconst colorObject = ref<ProgressColor>([\n  {\n    color: 'yellow',\n    percentage: 30\n  },\n  {\n    color: 'red',\n    percentage: 60\n  },\n  {\n    color: 'blue',\n    percentage: 80\n  },\n  {\n    color: 'black',\n    percentage: 90\n  }\n])\nconst percentage = ref<number>(100)\n```\n\n----------------------------------------\n\nTITLE: Error State Input Field\nDESCRIPTION: Input field in error state, displaying the value in red color using the error attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<wd-input type=\"text\" v-model=\"value\" placeholder=\"请输入用户名\" error />\n```\n\n----------------------------------------\n\nTITLE: Styling Embedded Overlay Content with SCSS\nDESCRIPTION: Defines the styling for the embedded content in the overlay. Creates a centered flex container and a white block element with specific dimensions.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/overlay.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n}\n\n.block {\n  width: 120px;\n  height: 120px;\n  background-color: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Segmented Component in a Popup for WeChat Mini Program\nDESCRIPTION: Demonstrates how to use the Segmented component within a popup in WeChat Mini Program, including updating the component's style after the popup opens.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/segmented.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">打开弹窗</wd-button>\n<wd-popup v-model=\"showPopup\" position=\"bottom\" @after-enter=\"handlePopupShow\" closable custom-style=\"height: 200px;padding: 0 24rpx;\">\n  <view class=\"title\">在弹出框中使用</view>\n  <wd-segmented :options=\"list\" v-model:value=\"current\" ref=\"segmentedRef\"></wd-segmented>\n</wd-popup>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = ref<string[]>(['评论', '点赞', '贡献', '打赏'])\nconst current = ref('点赞')\n\nconst segmentedRef = ref<SegmentedInstance>() // 获取分段器实例\nconst showPopup = ref(false) // 控制popup显示\n/**\n * 点击按钮打开popup\n */\nfunction handleClick() {\n  showPopup.value = true\n}\n/**\n * popup打开后更新分段器样式\n */\nfunction handlePopupShow() {\n  segmentedRef.value?.updateActiveStyle()\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.title {\n  display: flex;\n  font-size: 32rpx;\n  align-items: center;\n  justify-content: center;\n  padding: 24rpx 0;\n}\n```\n\n----------------------------------------\n\nTITLE: 基本使用 Gap 间隔槽组件\nDESCRIPTION: 使用 wd-gap 组件创建一个基本的间隔槽，通过 bg-color 属性设置背景色为白色。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/gap.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-gap bg-color=\"#FFFFFF\"></wd-gap>\n```\n\n----------------------------------------\n\nTITLE: Multiple Date Selection in Calendar Component\nDESCRIPTION: Shows how to configure the Calendar component for multiple date selection by setting the type to 'dates'. The value is an array of selected dates.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar type=\"dates\" v-model=\"value\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number[]>([])\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Loading State for PickerView in HTML\nDESCRIPTION: Demonstrates how to set the loading state for a PickerView component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker-view.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" loading />\n```\n\n----------------------------------------\n\nTITLE: 自定义触发器 - Fab组件\nDESCRIPTION: 使用trigger插槽自定义Fab组件的触发器，并通过expandable属性控制点击触发器时是否展开/收起动作按钮菜单。设置为false时可以完全自定义点击行为。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/fab.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-fab position=\"left-bottom\" :expandable=\"false\">\n  <template #trigger>\n    <wd-button @click=\"handleClick\" icon=\"share\" type=\"error\">分享给朋友</wd-button>\n  </template>\n</wd-fab>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleClick = () => {\n  console.log('点击了')\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Size Circle Progress\nDESCRIPTION: Demonstrates how to customize the circle diameter using the size property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/circle.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-circle v-model=\"current\" :size=\"300\"></wd-circle>\n```\n\n----------------------------------------\n\nTITLE: Navbar with Disabled Buttons\nDESCRIPTION: Shows how to disable buttons on both sides of the navbar using left-disabled and right-disabled properties.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/navbar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"Title\" left-text=\"Back\" right-text=\"Button\" left-arrow left-disabled right-disabled></wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Enabling virtualHost in Vue 3 for WeChat Mini Program\nDESCRIPTION: Code showing how to set virtualHost to true in Vue 3 to solve the extra wrapper node issue in WeChat Mini Programs, making components render more like Vue components.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\nexport default {\n  // 将自定义节点设置成虚拟的，更加接近Vue组件的表现，可以去掉微信小程序自定义组件多出的最外层标签\n  options: {\n    virtualHost: true\n  }\n}\n</script>\n<script lang=\"ts\" setup>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Divider Component in HTML\nDESCRIPTION: Renders a default horizontal dividing line without any content.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/divider.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider></wd-divider>\n```\n\n----------------------------------------\n\nTITLE: 必填属性DatetimePicker示例\nDESCRIPTION: 使用required属性开启表单必填标识。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker label=\"必填属性\" error v-model=\"value\" required/>\n```\n\n----------------------------------------\n\nTITLE: Centered Horizontal Steps\nDESCRIPTION: Shows how to center-align steps horizontally using the align-center property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/steps.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-steps :active=\"0\" align-center>\n  <wd-step />\n  <wd-step />\n  <wd-step />\n</wd-steps>\n```\n\n----------------------------------------\n\nTITLE: Text Button Implementation\nDESCRIPTION: Demonstrates how to create a text-only button using type=\"text\".\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/button.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-button type=\"text\">Text Button</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Dependency\nDESCRIPTION: Commands for installing Sass as a development dependency using different package managers, which is required by Wot Design Uni.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sass -D\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sass -D\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add sass -D\n```\n\n----------------------------------------\n\nTITLE: Recent Documentation Updates\nDESCRIPTION: Recent documentation updates including path adjustments, demo corrections, and example optimizations.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### ✏️ Documentation | 文档\n\n* ✏️  调整数字滚动组件文档路径\n* ✏️  更正form demo 方法名不一致 \n* ✏️  优化MessageBox示例demo\n* ✏️  增加安卓演示demo下载二维码\n* ✏️ 更正text组件doc的type属性默认值\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Markdown formatted changelog entries detailing bug fixes and features, including commit references and issue links.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/changelog.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### 🐛 Bug Fixes | Bug 修复\n\n* 🐛 修复时间选择器设置minDate之后选择器显示值和实际选择值不一致的问题 ([3c0284f](https://github.com/Moonofweisheng/wot-design-uni/commit/3c0284f1f27b743ea3bdb7eeac5c489939057e13)), closes [#339](https://github.com/Moonofweisheng/wot-design-uni/issues/339)\n* 🐛 修复ImgCropper未暴露resetImg和setRoate方法的问题 ([e58f111](https://github.com/Moonofweisheng/wot-design-uni/commit/e58f1111f2ae8e2da23e60c0ed60130373117970)), closes [#354](https://github.com/Moonofweisheng/wot-design-uni/issues/354)\n* 🐛 修复Tag在钉钉小程序平台close方法不执行的问题 ([242d2f2](https://github.com/Moonofweisheng/wot-design-uni/commit/242d2f25c6ac829b5d20d63d520b1f8c8ae921a8)), closes [#359](https://github.com/Moonofweisheng/wot-design-uni/issues/359)\n```\n\n----------------------------------------\n\nTITLE: Year DatetimePickerView\nDESCRIPTION: Implementation of a picker view that only displays year selection.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker-view.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view type=\"year\" v-model=\"value\" label=\"Year\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n```\n\n----------------------------------------\n\nTITLE: Disabling Input Box in InputNumber Component\nDESCRIPTION: Demonstrates how to disable the input box within the InputNumber component using the disable-input prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" disable-input />\n```\n\n----------------------------------------\n\nTITLE: 自定义背景色的 Gap 间隔槽\nDESCRIPTION: 设置 wd-gap 组件的背景色为蓝色 (#4D80F0)，创建一个有特定颜色的间隔槽。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/gap.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-gap bg-color=\"#4D80F0\"></wd-gap>\n```\n\n----------------------------------------\n\nTITLE: Modifying Close Button Position in Curtain Component\nDESCRIPTION: Illustrates how to change the position of the close button in the Curtain component using the close-position attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/curtain.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">Show Curtain</wd-button>\n<wd-curtain v-model=\"value\" :src=\"img\" :to=\"link\" close-position=\"top\" width=\"280\"></wd-curtain>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(false)\nconst img = ref<string>('https://img20.360buyimg.com/da/jfs/t1/141592/25/8861/261559/5f68d8c1E33ed78ab/698ad655bfcfbaed.png')\nconst link = ref<string>('/pages/index/index')\n\nfunction handleClick() {\n  value.value = true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Swiper Implementation\nDESCRIPTION: Basic implementation of swiper component with autoplay and click handlers\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/swiper.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-swiper :list=\"swiperList\" autoplay v-model:current=\"current\" @click=\"handleClick\" @change=\"onChange\"></wd-swiper>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst current = ref<number>(0)\n\nconst swiperList = ref([\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/redpanda.jpg',\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/capybara.jpg',\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/panda.jpg',\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/moon.jpg',\n  'https://registry.npmmirror.com/wot-design-uni-assets/*/files/meng.jpg'\n])\nfunction handleClick(e) {\n  console.log(e)\n}\nfunction onChange(e) {\n  console.log(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Long Press for Increment/Decrement in InputNumber\nDESCRIPTION: Shows how to enable long press functionality for increment/decrement in the InputNumber component using the long-press prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" long-press @change=\"handleChange\" />\n```\n\n----------------------------------------\n\nTITLE: Error State Click Handler - HTML\nDESCRIPTION: Demonstrates how to handle click events when the loadmore component is in an error state.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/loadmore.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-loadmore custom-class=\"loadmore\" state=\"error\" @reload=\"loadmore\" />\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-uni-components\nDESCRIPTION: Commands for installing the vite-plugin-uni-components package which provides an alternative method for automatic component imports.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @uni-helper/vite-plugin-uni-components -D\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @uni-helper/vite-plugin-uni-components -D\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @uni-helper/vite-plugin-uni-components -D\n```\n\n----------------------------------------\n\nTITLE: Release Version Update Entries in Markdown\nDESCRIPTION: Changelog entries showing version updates, documentation changes, bug fixes and new features using conventional commit format with commit hashes and issue references.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/changelog.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### ✏️ Documentation | 文档\n\n* ✏️  修复select-picker组件绑定值描述错误的问题 ([b287111](https://github.com/Moonofweisheng/wot-design-uni/commit/b2871114311656580ade25c25f0775d9246f32b7)), closes [#178](https://github.com/Moonofweisheng/wot-design-uni/issues/178)\n* ✏️  增加Button细边框幽灵按钮的使用说明 ([366c34b](https://github.com/Moonofweisheng/wot-design-uni/commit/366c34b69faedee4874221c604d1a6d5c8c1a8e0))\n```\n\n----------------------------------------\n\nTITLE: Month Selection in CalendarView\nDESCRIPTION: Shows month-based selection configuration by setting type to 'month'. When a value is provided, it represents the first day of the selected month.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"month\" v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(Date.now())\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Component Events - Markdown Table\nDESCRIPTION: Table listing all available events that can be handled by the upload component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| 事件名称    | 说明                   | 参数                                                                                 | 最低版本 |\n| ----------- | ---------------------- | ------------------------------------------------------------------------------------ | -------- |\n| success     | 上传成功时触发         | event = { file, fileList,formData } file 为当前选上传的文件，'fileList' 上传图片列表 | -        |\n| fail        | 上传失败时触发         | event = { error, file,formData } error 错误信息，file 上传失败的文件                 | -        |\n| progress    | 上传中时触发           | event = { response, file } response 上传中响应信息，file 为当前选上传的文件          | -        |\n| chooseerror | 选择图片失败时触发     | event = { error } error 选择图片失败的错误信息                                       | -        |\n| change      | 上传列表修改时触发     | 选中的值 event = { fileList } 'fileList' 上传图片列表                                | -        |\n| remove      | 移除图片时触发         | event = { file } file: 移除的文件信息                                                | -        |\n| oversize    | 文件大小超过限制时触发 | event = { file } file: 尺寸超出的文件信息                                            | -        |\n```\n\n----------------------------------------\n\nTITLE: Root Component Implementation\nDESCRIPTION: Implementation of root component with theme configuration\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTheme } from './composables/useTheme'\n\nconst { theme, themeVars } = useTheme({\n  buttonPrimaryBgColor: '#07c160',\n  buttonPrimaryColor: '#07c160'\n})\n</script>\n\n<template>\n  <div>Hello AppKuVue</div>\n  <wd-config-provider :theme=\"theme\" :theme-vars=\"themeVars\">\n    <KuRootView />\n  </wd-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Documenting ButtonOpenType Events in Markdown\nDESCRIPTION: This snippet presents a markdown table detailing the events associated with ButtonOpenType. It includes event names, descriptions, parameters, and version information for various interactions such as click, getuserinfo, and others.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| 事件名称       | 说明                                                         | 参数     | 最低版本 |\n| -------------- | ------------------------------------------------------------ | -------- | -------- |\n| click          | 点击事件                                                     | `event`  | -        |\n| getuserinfo    | 获取用户信息                                                 | `detail` | -        |\n| contact        | 客服消息回调，open-type=\"contact\"时有效                      | `detail` | -        |\n| getphonenumber | 获取用户手机号回调，open-type=getPhoneNumber 时有效          | `detail` | -        |\n| error          | 当使用开放能力时，发生错误的回调，open-type=launchApp 时有效 | `detail` | -        |\n| launchapp      | 打开 APP 成功的回调，open-type=launchApp 时有效              | `detail` | -        |\n| opensetting    | 在打开授权设置页后回调，open-type=openSetting 时有效         | `detail` | -        |\n```\n\n----------------------------------------\n\nTITLE: Overwrite Upload\nDESCRIPTION: Shows how to enable the reupload attribute which automatically replaces the previous file when a new one is selected, rather than adding it to the file list.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/upload.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-upload\n  :file-list=\"fileList\"\n  :reupload=\"true\"\n  action=\"https://mockapi.eolink.com/zhTuw2P8c29bc981a741931bdd86eb04dc1e8fd64865cb5/upload\"\n  @change=\"handleChange\"\n></wd-upload>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Extra Keys in NumberKeyboard for Vue\nDESCRIPTION: Shows how to set up multiple extra keys in the NumberKeyboard component when in custom mode.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/number-keyboard.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Multiple Extra Keys\" is-link @click=\"showKeyBoard\" />\n\n<wd-number-keyboard v-model:visible=\"visible\" mode=\"custom\" :extra-key=\"['00', '.']\" close-text=\"Done\" @input=\"onInput\" @delete=\"onDelete\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { show: showToast } = useToast()\nconst visible = ref<boolean>(false)\n\nfunction showKeyBoard() {\n  visible.value = true\n}\n\nconst onInput = (value) => showToast(`${value}`)\nconst onDelete = () => showToast('Delete')\n```\n\n----------------------------------------\n\nTITLE: Creating Dashed Divider in HTML\nDESCRIPTION: Demonstrates how to use the 'dashed' attribute to render the divider as a dashed line.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/divider.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider dashed>虚线分割</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to Backtop Component in HTML\nDESCRIPTION: This snippet demonstrates how to apply custom styles to the Backtop component using the customStyle attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/backtop.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-backtop :scrollTop=\"scrollTop\" customStyle=\"background: #007aff;color:white;\"></wd-backtop>\n```\n\n----------------------------------------\n\nTITLE: Issue References in Markdown\nDESCRIPTION: Markdown syntax for referencing GitHub issues with links\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n([#680](https://github.com/Moonofweisheng/wot-design-uni/issues/680))\n```\n\n----------------------------------------\n\nTITLE: Version Commit Link\nDESCRIPTION: Example of a version comparison URL\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/changelog.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[0.1.21](https://github.com/Moonofweisheng/wot-design-uni/compare/v0.1.20...v0.1.21)\n```\n\n----------------------------------------\n\nTITLE: Styling Loading Indicator Background with SCSS\nDESCRIPTION: SCSS styling for the custom loading indicator that creates a black background with padding and rounded corners.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/loading.md#2025-04-23_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.loading-black) {\n  background: rgba(0, 0, 0, 0.7);\n  padding: 10px;\n  border-radius: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Segmented Component in Vue\nDESCRIPTION: Demonstrates how to disable the entire Segmented component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/segmented.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" disabled></wd-segmented>\n```\n\n----------------------------------------\n\nTITLE: Positioning Content in Divider using HTML\nDESCRIPTION: Shows how to use the 'content-position' attribute to specify the position of the content within the divider.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/divider.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider>中间</wd-divider>\n<wd-divider content-position=\"left\">左侧</wd-divider>\n<wd-divider content-position=\"right\">右侧</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Customizing Curtain Image Dimensions in Vue\nDESCRIPTION: Shows how to set a custom width for the Curtain component, which automatically calculates the height based on the original image ratio.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/curtain.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-button @click=\"handleClick\">Show Curtain</wd-button>\n<wd-curtain v-model=\"value\" :src=\"img\" :to=\"link\" width=\"280\"></wd-curtain>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<boolean>(false)\nconst img = ref<string>('https://img20.360buyimg.com/da/jfs/t1/141592/25/8861/261559/5f68d8c1E33ed78ab/698ad655bfcfbaed.png')\nconst link = ref<string>('/pages/index/index')\n\nfunction handleClick() {\n  value.value = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Value for Badge in HTML\nDESCRIPTION: Demonstrates how to set a maximum value for the Badge using the max attribute. This only works when modelValue is a Number.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/badge.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge modelValue=\"200\" max=\"99\">\n  <wd-button size=\"small\">评论</wd-button>\n</wd-badge>\n<wd-badge modelValue=\"100\" max=\"10\">\n  <wd-button size=\"small\">回复</wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Global Sharing\nDESCRIPTION: Vite configuration setup for implementing global sharing with UniKuRoot plugin.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport UniKuRoot from '@uni-ku/root'\nimport Uni from '@dcloudio/vite-plugin-uni'\n\nexport default defineConfig({\n  plugins: [\n    // ...plugins\n    UniKuRoot(),\n    Uni()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker Attributes in Markdown Table\nDESCRIPTION: A markdown table listing all available attributes for the DatePicker component, including their descriptions, types, possible values, default values, and version information.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数                    | 说明                                                                                                                                                                                               | 类型                  | 可选值                                                                                      | 默认值                | 最低版本         |\n| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------- | ------------------------------------------------------------------------------------------- | --------------------- | ---------------- |\n| v-model                 | 选中值，为 13 位时间戳或时间戳数组                                                                                                                                                                 | null / number / array | -                                                                                           | -                     | -                |\n| type                    | 日期类型                                                                                                                                                                                           | string                | date / dates / datetime / week / month / daterange / datetimerange / weekrange / monthrange | date                  | -                |\n| min-date                | 最小日期，为 13 位时间戳                                                                                                                                                                           | number                | -                                                                                           | 当前日期往前推 6 个月 | -                |\n| max-date                | 最大日期，为 13 位时间戳                                                                                                                                                                           | number                | -                                                                                           | 当前日期往后推 6 个月 | -                |\n| first-day-of-week       | 周起始天                                                                                                                                                                                           | number                | -                                                                                           | 0                     | -                |\n| formatter               | 日期格式化函数                                                                                                                                                                                     | function              | -                                                                                           | -                     | -                |\n| max-range               | type 为范围选择时有效，最大日期范围                                                                                                                                                                | number                | -                                                                                           | -                     | -                |\n| range-prompt            | type 为范围选择时有效，选择超出最大日期范围时的错误提示文案                                                                                                                                        | string                | -                                                                                           | 选择天数不能超过 x 天 | -                |\n| allow-same-day          | type 为范围选择时有效，是否允许选择同一天                                                                                                                                                          | boolean               | -                                                                                           | false                 | -                |\n| default-time            | 选中日期所使用的当日内具体时刻                                                                                                                                                                     | string / array        | -                                                                                           | 00:00:00              | -                |\n| time-filter             | type 为 'datetime' 或 'datetimerange' 时有效，用于过滤时间选择器的数据                                                                                                                             | function              | -                                                                                           | -                     | -                |\n| hide-second             | type 为 'datetime' 或 'datetimerange' 时有效，是否不展示秒修改                                                                                                                                     | boolean               | -                                                                                           | false                 | -                |\n| show-confirm            | 是否显示确定按钮                                                                                                                                                                                   | boolean               | -                                                                                           | true                  | -                |\n| show-type-switch        | 是否显示类型切换功能                                                                                                                                                                               | boolean               | -                                                                                           | false                 | -                |\n| shortcuts               | 快捷选项，为对象数组，其中对象的 `text` 必传                                                                                                                                                       | array                 | -                                                                                           | -                     | -                |\n| title                   | 弹出层标题                                                                                                                                                                                         | string                | -                                                                                           | 选择日期              | -                |\n| label                   | 选择器左侧文案                                                                                                                                                                                     | string                | -                                                                                           | -                     | -                |\n| placeholder             | 选择器占位符                                                                                                                                                                                       | string                | -                                                                                           | 请选择                | -                |\n| disabled                | 禁用                                                                                                                                                                                               | boolean               | -                                                                                           | false                 | -                |\n| readonly                | 只读                                                                                                                                                                                               | boolean               | -                                                                                           | false                 | -                |\n| display-format          | 自定义展示文案的格式化函数，返回一个字符串                                                                                                                                                         | function              | -                                                                                           | -                     | -                |\n| inner-display-format    | 自定义范围选择类型的面板内部回显，返回一个字符串                                                                                                                                                   | function              | -                                                                                           | -                     | -                |\n| size                    | 设置选择器大小                                                                                                                                                                                     | string                | large                                                                                       | -                     | -                |\n| label-width             | 设置左侧标题宽度                                                                                                                                                                                   | string                | -                                                                                           | 33%                   | -                |\n```\n\n----------------------------------------\n\nTITLE: Methods Table for Calendar Component in Markdown\nDESCRIPTION: A markdown table listing the available methods for the calendar component, including the method name, description, parameters, and minimum version requirements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| 方法名称       | 说明                                                                                                         | 参数 | 最低版本 |\n| -------------- | ------------------------------------------------------------------------------------------------------------ | ---- | -------- |\n| scrollIntoView | 使当前日期或者选中日期滚动到可视区域，并监听滚动，在面板从 隐藏状态（如 display: none） 切换为展示状态时调用 | -    |\n```\n\n----------------------------------------\n\nTITLE: Styling Embedded Content in SCSS\nDESCRIPTION: Provides SCSS styles for the wrapper and block elements used in the Overlay with embedded content example.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/overlay.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n}\n\n.block {\n  width: 120px;\n  height: 120px;\n  background-color: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Icons in HTML\nDESCRIPTION: Demonstrates how to use the wd-icon component with different built-in icon names.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/icon.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-icon name=\"add-circle\"></wd-icon>\n<wd-icon name=\"add\"></wd-icon>\n<wd-icon name=\"arrow-down\"></wd-icon>\n<wd-icon name=\"arrow-right\"></wd-icon>\n<wd-icon name=\"camera\"></wd-icon>\n```\n\n----------------------------------------\n\nTITLE: Hidden Cancel Button in Search Component\nDESCRIPTION: Shows how to hide the cancel button in the search component using the 'hide-cancel' attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/search.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-search hide-cancel />\n```\n\n----------------------------------------\n\nTITLE: Close Toast Programmatically\nDESCRIPTION: Shows how to manually close a toast message\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/toast.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntoast.close()\n```\n\n----------------------------------------\n\nTITLE: Segmented Component with Vibration Effect in Vue\nDESCRIPTION: Shows how to enable vibration effect when switching options in the Segmented component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/segmented.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-segmented :options=\"list\" v-model:value=\"current\" :vibrate-short=\"true\"></wd-segmented>\n```\n\n----------------------------------------\n\nTITLE: Textarea with Disabled Auto Focus After Clearing\nDESCRIPTION: Configures a textarea to not automatically focus after the clear button is clicked by setting focus-when-clear to false.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" :focus-when-clear=\"false\" :maxlength=\"120\" clearable show-word-limit />\n```\n\n----------------------------------------\n\nTITLE: Customizing Size of Column Picker in Vue 3\nDESCRIPTION: This snippet demonstrates how to customize the size of a column picker using the size attribute. Setting size to 'large' increases the font size to 16px.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" v-model=\"value\" size=\"large\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\n----------------------------------------\n\nTITLE: Events Table for Calendar Component in Markdown\nDESCRIPTION: A markdown table listing the available events for the calendar component, including the event name, description, parameters, and minimum version requirements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| 事件名称 | 说明             | 参数        | 最低版本 |\n| -------- | ---------------- | ----------- | -------- |\n| change   | 绑定值变化时触发 | `{ value }` | -        |\n```\n\n----------------------------------------\n\nTITLE: Inserting Custom Content in Divider using HTML\nDESCRIPTION: Demonstrates how to use the default slot to insert custom content, such as an icon, in the middle of the divider.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/divider.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider>\n  <wd-icon name=\"arrow-down\" size=\"20\" color=\"#1989fa\" />\n</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Color for Checkbox in Vue\nDESCRIPTION: Shows how to set a custom color for the checked state of a checkbox using the checked-color attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox v-model=\"value\" checked-color=\"#4D80F0\">Custom Color</wd-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Accept Valid Values - Markdown Table\nDESCRIPTION: Table listing the valid values for the accept property, including supported file types across different platforms.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| name  | 说明                                                                                   | 最低版本 |\n| ----- | -------------------------------------------------------------------------------------- | -------- |\n| image | 图片，全平台支持                                                                       | -        |\n| video | 视频，全平台支持                                                                       | 1.3.0    |\n| media | 图片和视频，仅微信支持，使用`chooseMedia`实现                                          | 1.3.0    |\n| file  | 从客户端会话选择图片和视频以外的文件，仅微信支持，使用`chooseMessageFile`实现          | 1.3.0    |\n| all   | 全部类型的文件，仅微信和 H5 支持，微信使用`chooseMessageFile`，H5 使用`chooseFile`实现 | 1.3.0    |\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Dividers in HTML\nDESCRIPTION: Demonstrates how to use the 'vertical' attribute to render vertical dividers with various styles.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/divider.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"content\">\n  文本\n  <wd-divider vertical />\n  文本\n  <wd-divider vertical dashed />\n  文本\n  <wd-divider vertical :hairline=\"false\" />\n  文本\n  <wd-divider vertical color=\"#1989fa\" />\n  文本\n</view>\n```\n\n----------------------------------------\n\nTITLE: Installing Global Sharing Dependencies\nDESCRIPTION: Package installation commands for uni-ku-root dependency using different package managers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @uni-ku/root\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @uni-ku/root\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @uni-ku/root\n```\n\n----------------------------------------\n\nTITLE: Hairline Ghost Button\nDESCRIPTION: Shows implementation of a ghost button with thin border using the hairline attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-button plain hairline>主要按钮</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Error State Textarea Implementation\nDESCRIPTION: Demonstrates how to display a textarea in an error state by setting the error property, which shows the input text in red.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" placeholder=\"Please enter username\" error />\n```\n\n----------------------------------------\n\nTITLE: Styling Case Showcase Grid with CSS\nDESCRIPTION: CSS styling for creating a responsive grid layout to display showcase cases. The styles define a card-based grid system with proper spacing, font styling for titles and descriptions, and image formatting.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/cases.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.cases-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin: 20px 0;\n}\n\n.case-title {\n  font-size: 18px;\n  font-weight: 500;\n}\n\n.case-description {\n  margin-left: 10px;\n  font-size: 14px;\n  color: #999;\n}\n\n:deep(.el-card__body .el-image) {\n  width: 100%;\n  border-radius: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Donor Data with Vue Composition API\nDESCRIPTION: A Vue.js script block that uses the composition API to fetch sponsor data. It imports a useSponsor composable function from the theme directory to retrieve donor information.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/reward/donor.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSponsor } from '../../.vitepress/theme/composables/sponsor'\nconst { data } = useSponsor()\n```\n\n----------------------------------------\n\nTITLE: Required Field Picker Component in Vue\nDESCRIPTION: Shows how to display a required style for the Picker component by setting the 'required' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"Required Field\" error :columns=\"columns\" v-model=\"value\" required/>\n```\n\n----------------------------------------\n\nTITLE: Month Type Selection with CalendarView in Vue\nDESCRIPTION: Demonstrates how to configure the CalendarView component for month-based selection by setting the type to 'month'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar-view.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"month\" v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(Date.now())\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Items Display in Swiper\nDESCRIPTION: Shows how to display multiple carousel items simultaneously using the display-multiple-items property, with custom styling for a card-like appearance.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/swiper.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<view class=\"card-swiper\">\n  <wd-swiper\n    autoplay\n    v-model:current=\"current\"\n    :display-multiple-items=\"2\"\n    custom-indicator-class=\"custom-indicator-class\"\n    custom-image-class=\"custom-image\"\n    custom-next-image-class=\"custom-image-prev\"\n    custom-prev-image-class=\"custom-image-prev\"\n    :indicator=\"{ type: 'dots' }\"\n    :list=\"swiperList\"\n    previousMargin=\"24px\"\n    nextMargin=\"24px\"\n  ></wd-swiper>\n</view>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.card-swiper {\n  --wot-swiper-radius: 0;\n  --wot-swiper-item-padding: 0 24rpx;\n  --wot-swiper-nav-dot-color: #e7e7e7;\n  --wot-swiper-nav-dot-active-color: #4d80f0;\n  padding-bottom: 24rpx;\n  :deep(.custom-indicator-class) {\n    bottom: -16px;\n  }\n  :deep(.custom-image) {\n    border-radius: 12rpx;\n  }\n  :deep(.custom-image-prev) {\n    height: 168px !important;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/area-data Package for Geographic Data\nDESCRIPTION: Various package manager commands to install the Vant area data package which provides Chinese province/city/district data as a data source for ColPicker.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 npm\nnpm i @vant/area-data\n\n# 通过 yarn\nyarn add @vant/area-data\n\n# 通过 pnpm\npnpm add @vant/area-data\n\n# 通过 Bun\nbun add @vant/area-data\n```\n\n----------------------------------------\n\nTITLE: Styling Space Between NoticeBar Components with SCSS\nDESCRIPTION: Adds margin to the bottom of elements with the 'space' class to create spacing between multiple NoticeBar components.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/notice-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.space) {\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring styleIsolation for Alipay Mini Program in manifest.json\nDESCRIPTION: JSON configuration to set styleIsolation to 'shared' in manifest.json for Alipay Mini Program. This fixes the issue where Popup component's mask doesn't display correctly in Alipay Mini Program.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"mp-alipay\": {\n    // ...\n    \"styleIsolation\": \"shared\"\n    // ...\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Panel Title in CalendarView\nDESCRIPTION: Demonstrates how to hide the automatically generated panel title by setting the show-panel-title attribute to false.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/calendar-view.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"daterange\" :show-panel-title=\"false\" v-model=\"value\" @change=\"handleChange\" />\n```\n\n----------------------------------------\n\nTITLE: Offset Top Implementation - HTML\nDESCRIPTION: Example of setting offset distance from top using offset-top property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sticky.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-sticky :offset-top=\"50\">\n  <wd-button>吸顶距离</wd-button>\n</wd-sticky>\n```\n\n----------------------------------------\n\nTITLE: Feature Commit ID\nDESCRIPTION: Example of a feature commit hash link\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/changelog.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[cf9fe98](https://github.com/Moonofweisheng/wot-design-uni/commit/cf9fe9807efe863e786bc56eedf506647ac143d2)\n```\n\n----------------------------------------\n\nTITLE: Defining External Style Classes for Textarea Component in Markdown\nDESCRIPTION: This snippet outlines the external style classes available for customizing the textarea component. It includes classes for the root node, textarea container, and textarea itself, along with their descriptions and minimum version requirements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| 类名                            | 说明                        | 最低版本 |\n| ------------------------------- | --------------------------- | -------- |\n| custom-class                    | 根节点样式                  | -        |\n| custom-textarea-container-class | textarea 容器外部自定义样式 | -        |\n| custom-textarea-class           | textarea 外部自定义样式     | -        |\n```\n\n----------------------------------------\n\nTITLE: Disabling ColPicker Component\nDESCRIPTION: Example showing how to disable the entire ColPicker component by setting the disabled attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"禁用\" disabled v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Title for Column Picker in Vue 3\nDESCRIPTION: This snippet demonstrates how to set a custom title for the column picker using the title attribute. It modifies the title of the popup layer.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"标题\" v-model=\"value\" title=\"选择地址\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\n----------------------------------------\n\nTITLE: Hiding Min and Max Values on Slider in HTML\nDESCRIPTION: Demonstrates how to hide the minimum and maximum value labels using the hide-min-max attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/slider.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-slider v-model=\"value\" hide-min-max />\n```\n\n----------------------------------------\n\nTITLE: Vue Component for Community Group Display with Checkbox Validation\nDESCRIPTION: A Vue component that displays QQ group and WeChat public account images with a blur effect that clears when users check a box confirming they've read the guidelines. Includes a click handler that shows an alert when images are clicked before checking the box.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/join-group.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { ref } from 'vue'\nimport QQ1 from '/QQ1.jpg'\nimport QQ2 from '/QQ2.jpg'\nimport QQ3 from '/QQ3.jpg'\nimport wechatPublicAccount from '/wechatPublicAccount.png'\n\n\nconst checked = ref(false)\n\nfunction handleClick() {\n  if (!checked.value) {\n  ElMessageBox.alert('请阅读以上沟通案例和小技巧并在下方勾选我已阅读，保证提问时遵守相关规范后可以加群。以任何形式加入到群聊，即表示同意遵守相关规范，请知悉', '提示', {\n    confirmButtonText: '我知道了',\n  })\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Bold Text Configuration in HTML\nDESCRIPTION: Demonstrates how to make text bold by adding the bold property to the text component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/text.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-text\n  text=\"Reed leaves fill the sandbar, cold sand carries shallow streams. Twenty years later, passing the south tower again. The boat tied under willows is not yet steady, how many days until mid-autumn comes again? Yellow crane at the broken cliff, has my old friend been here? The old rivers and mountains are all filled with new sorrows. Wanting to buy osmanthus flowers and bring wine, but it's never like the wanderings of youth.\"\n  bold\n></wd-text>\n```\n\n----------------------------------------\n\nTITLE: Using External Style Classes with Wot Design Uni Components\nDESCRIPTION: Example demonstrating how to use custom style classes provided by Wot Design Uni components. Using the deep selector with !important ensures proper style priority.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<wd-button custom-class=\"custom-button\" type=\"primary\">主要按钮</wd-button>\n```\n\nLANGUAGE: scss\nCODE:\n```\n/* 组件样式 */\n:deep(.custom-button) {\n  color: red !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Clickable Cell Component\nDESCRIPTION: Example of making a cell clickable with visual feedback.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Title\" value=\"Content\" clickable></wd-cell>\n```\n\n----------------------------------------\n\nTITLE: Same Day Range Selection with CalendarView in Vue\nDESCRIPTION: Demonstrates how to allow same day selection in range mode by setting the allow-same-day property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar-view.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view type=\"daterange\" v-model=\"value\" allow-same-day @change=\"handleChange\" />\n```\n\n----------------------------------------\n\nTITLE: Container Styling - SCSS\nDESCRIPTION: SCSS styling for the custom container implementation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sticky.md#2025-04-23_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n.container{\n    height: 150px;width: 100vw;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Background Color Gap\nDESCRIPTION: Shows how to create a gap with a custom background color using the bg-color property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/gap.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-gap bg-color=\"#4D80F0\"></wd-gap>\n```\n\n----------------------------------------\n\nTITLE: Basic Rate Component Usage\nDESCRIPTION: Demonstrates the basic implementation of the rate component with v-model binding and change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/rate.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(1)\n\nfunction changeValue({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up Donation QR Code Images in Vue\nDESCRIPTION: This Vue component imports QR code images for WeChat and Alipay payment methods and makes them available in the component's data for rendering in the donation page.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/reward/reward.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport WxQrcode from '/weixinQrcode.jpg'\nimport AlipayQrcode from '/alipayQrcode.jpg'\n\nexport default {\n  data () {\n    return {\n      WxQrcode,\n      AlipayQrcode\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Striped Style in Table Component\nDESCRIPTION: Shows how to disable the default striped appearance of the table by setting the 'stripe' property to false. By default, tables have alternating row colors.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/table.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" :stripe=\"false\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"Name\"></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"School\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"Major\"></wd-table-col>\n</wd-table>\n```\n\n----------------------------------------\n\nTITLE: Upload Component Properties - Markdown Table\nDESCRIPTION: Table defining the main properties of the upload component including camera options, success status codes, and auto-upload settings.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| camera                        | 使用前置或者后置相机，当 accept 为 video \\| media 时生效                                                                                                                       | UploadCameraType                       | **front**                                      | **back**                   | 1.3.0            |\n| successStatus                 | 接口响应的成功状态（statusCode）值                                                                                                                                             | number                                 | -                                              | 200                        | 1.3.4            |\n| auto-upload                   | 是否选择文件后自动上传。为 false 时应手动调用 submit() 方法开始上传                                                                                                            | boolean                                | -                                              | true                       | 1.3.8 |\n| upload-method                 | 自定义上传方法                                                                                                                                                     | UploadMethod                                | -                                              | -                       | 1.3.8 |\n| extension | 根据文件拓展名过滤(H5支持全部类型过滤,微信小程序支持all和file时过滤,其余平台不支持) | string[] | - | - | $LOWEST_VERSION$ |\n```\n\n----------------------------------------\n\nTITLE: Right-aligned Picker Component in Vue\nDESCRIPTION: Shows how to align the Picker component value to the right by setting the 'align-right' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/picker.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker label=\"Single Column\" align-right :columns=\"columns\" v-model=\"value\"/>\n```\n\n----------------------------------------\n\nTITLE: Documentation Section Header\nDESCRIPTION: Section header for documentation related changes\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/src/uni_modules/wot-design-uni/changelog.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### ✏️ Documentation | 文档\n```\n\n----------------------------------------\n\nTITLE: Enabling Half-Star Selection in Rate Component\nDESCRIPTION: Demonstrates how to allow half-star selection in the Rate component by setting the allowHalf property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/rate.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate v-model=\"value\" allow-half />\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/area-data Package\nDESCRIPTION: Commands for installing the @vant/area-data package using different package managers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/col-picker.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# via npm\nnpm i @vant/area-data\n\n# via yarn\nyarn add @vant/area-data\n\n# via pnpm\npnpm add @vant/area-data\n\n# via Bun\nbun add @vant/area-data\n```\n\n----------------------------------------\n\nTITLE: Custom Content in Badge Component\nDESCRIPTION: Illustrates how to display custom text content in the Badge by setting modelValue to a String type.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/badge.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-badge modelValue=\"new\">\n  <wd-button size=\"small\">评论</wd-button>\n</wd-badge>\n<wd-badge modelValue=\"hot\">\n  <wd-button size=\"small\">回复</wd-button>\n</wd-badge>\n```\n\n----------------------------------------\n\nTITLE: Features Section Header\nDESCRIPTION: Section header for new features and enhancements\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/src/uni_modules/wot-design-uni/changelog.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### ✨ Features | 新功能\n```\n\n----------------------------------------\n\nTITLE: Vertically Centered Textarea Component in HTML\nDESCRIPTION: Demonstrates how to vertically center the label and input of the textarea component using the center attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea label=\"基本用法\" v-model=\"value\" center />\n```\n\n----------------------------------------\n\nTITLE: 过滤选项的DatetimePicker示例\nDESCRIPTION: 使用filter属性自定义过滤弹出层的选项，接收type和values参数，返回过滤后的选项列表。示例中过滤分钟只显示5的倍数。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"过滤选项\" :filter=\"filter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\nconst filter = (type, values) => {\n  if (type === 'minute') {\n    return values.filter((value) => value % 5 === 0)\n  }\n  return values\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom True and False Values for Checkbox in Vue\nDESCRIPTION: Shows how to set custom values for the checked and unchecked states of a checkbox using true-value and false-value attributes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/checkbox.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox v-model=\"value\" true-value=\"yes\" false-value=\"no\">Custom Value</wd-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Release Version Header\nDESCRIPTION: Release version header with version number and commit comparison link\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/src/uni_modules/wot-design-uni/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### [1.3.8](https://github.com/Moonofweisheng/wot-design-uni/compare/v1.3.7...v1.3.8) (2024-08-18)\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger Fab Implementation\nDESCRIPTION: Implementation of custom trigger for Fab using slots and expandable property control.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/fab.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-fab position=\"left-bottom\" :expandable=\"false\">\n  <template #trigger>\n    <wd-button @click=\"handleClick\" icon=\"share\" type=\"error\">Share with Friends</wd-button>\n  </template>\n</wd-fab>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleClick = () => {\n  console.log('Clicked')\n}\n```\n\n----------------------------------------\n\nTITLE: Component Methods - Markdown Table\nDESCRIPTION: Table describing available methods that can be called on the upload component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/upload.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| 方法名称 | 说明         | 参数 | 最低版本         |\n| -------- | ------------ | ---- | ---------------- |\n| submit   | 手动开始上传 | -    | 1.3.8 |\n```\n\n----------------------------------------\n\nTITLE: Custom Color Divider in HTML\nDESCRIPTION: Shows how to set a custom color for the divider using the 'color' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/divider.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider color=\"#4D80F0\">Custom Color</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: CSS Button Style Override\nDESCRIPTION: Example of overriding button styles using CSS variables\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n:root,\npage {\n  --wot-button-normal-bg: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup for QR Code Images\nDESCRIPTION: Script setup section that imports QR code images for WeChat, Alipay, H5, and Android platforms to be used in the introduction page.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport WxQrcode from '/wx.jpg'\nimport AlipayQrcode from '/alipay.png'\nimport H5Qrcode from '/h5.png'\nimport AndroidQrcode from '/android.png'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Aligning Column Picker Value to Right in Vue 3\nDESCRIPTION: This snippet shows how to align the value of a column picker to the right using the align-right attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" align-right v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\" @confirm=\"handleConfirm\"></wd-col-picker>\n```\n\n----------------------------------------\n\nTITLE: Large Size Textarea Component in HTML\nDESCRIPTION: Demonstrates how to change the size of the textarea component using the size attribute set to 'large'.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea label=\"基本用法\" size=\"large\" v-model=\"value\" placeholder=\"请输入...\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling InputNumber Component in Vue\nDESCRIPTION: Shows how to disable the InputNumber component using the disabled attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" disabled />\n```\n\n----------------------------------------\n\nTITLE: InputNumber Component Without Input Field in Vue\nDESCRIPTION: Shows how to use the InputNumber component without displaying the input field by setting the without-input attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/input-number.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" without-input />\n```\n\n----------------------------------------\n\nTITLE: Commit Log - Bug Fixes\nDESCRIPTION: Git commit log entries documenting bug fixes, documentation updates and feature additions across multiple versions\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### 🐛 Bug Fixes | Bug 修复\n\n* 🐛 修复时间选择器设置minDate之后选择器显示值和实际选择值不一致的问题 ([3c0284f](https://github.com/Moonofweisheng/wot-design-uni/commit/3c0284f1f27b743ea3bdb7eeac5c489939057e13)), closes [#339](https://github.com/Moonofweisheng/wot-design-uni/issues/339)\n* 🐛 修复ImgCropper未暴露resetImg和setRoate方法的问题 ([e58f111](https://github.com/Moonofweisheng/wot-design-uni/commit/e58f1111f2ae8e2da23e60c0ed60130373117970)), closes [#354](https://github.com/Moonofweisheng/wot-design-uni/issues/354)\n* 🐛 修复Tag在钉钉小程序平台close方法不执行的问题 ([242d2f2](https://github.com/Moonofweisheng/wot-design-uni/commit/242d2f25c6ac829b5d20d63d520b1f8c8ae921a8)), closes [#359](https://github.com/Moonofweisheng/wot-design-uni/issues/359)\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Style Import\nDESCRIPTION: Shows how to import custom icon styles in the app.vue file.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/icon.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n@import '@/iconfont/index.css';\n</style>\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Definition\nDESCRIPTION: Definition of CSS variables for theme customization\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/config-provider.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n:root,\npage {\n  --wot-color-success: red;\n  --wot-color-warning: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: Commit References in Markdown\nDESCRIPTION: Markdown syntax for referencing git commits with links\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n([20148a7](https://github.com/Moonofweisheng/wot-design-uni/commit/20148a7800d12376adedadb32bf29239f02baef3))\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Textarea Component in Markdown\nDESCRIPTION: This snippet lists the events emitted by the textarea component, including input, focus, blur, clear, linechange, confirm, keyboardheightchange, clickprefixicon, and clicksuffixicon. It details the event names, descriptions, parameters, and minimum version requirements.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/textarea.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| 事件名称             | 说明                             | 参数                                         | 最低版本 |\n| -------------------- | -------------------------------- | -------------------------------------------- | -------- |\n| input                | 监听输入框 input 事件            | ` {value, cursor, keyCode}`                  | -        |\n| focus                | 监听输入框 focus 事件            | ` { value, height }`, height 为键盘高度      | -        |\n| blur                 | 监听输入框 blur 事件             | ` { value }`                                 | -        |\n| clear                | 监听输入框清空按钮事件           | -                                            | -        |\n| linechange           | 监听输入框行数变化               | ` { height: 0, heightRpx: 0, lineCount: 0 }` | -        |\n| confirm              | 点击完成时， 触发 confirm 事件   | ` { value }`                                 | -        |\n| keyboardheightchange | 键盘高度发生变化的时候触发此事件 | ` { height, duration }`                      | -        |\n| clickprefixicon      | 点击前置图标时触发               | -                                            | -        |\n| clicksuffixicon      | 点击后置图标时触发               | -                                            | -        |\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Slot in Cell\nDESCRIPTION: Demonstrates using a custom icon slot in the cell component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/cell.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-cell title=\"Title\" value=\"Content\">\n  <view slot=\"icon\" class=\"custom-icon\"></view>\n</wd-cell>\n```\n\n----------------------------------------\n\nTITLE: Displaying Text in Divider using HTML\nDESCRIPTION: Shows how to use the default slot to insert text content in the middle of the divider.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/divider.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider>展示文本</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Name-Based Selection\nDESCRIPTION: Demonstrates how to use named tabs in the Tabbar component, allowing selection by name rather than index.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabbar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar v-model=\"tabbar\">\n  <wd-tabbar-item name=\"home\" title=\"Home\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item name=\"cart\" title=\"Category\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item name=\"setting\" title=\"Settings\" icon=\"setting\"></wd-tabbar-item>\n  <wd-tabbar-item name=\"user\" title=\"My\" icon=\"user\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref('home')\n```\n\n----------------------------------------\n\nTITLE: Allowing Empty Value and Setting Placeholder in InputNumber\nDESCRIPTION: Shows how to allow empty values and set a placeholder in the InputNumber component using allow-null and placeholder props.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" allow-null placeholder=\"No limit\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number|string>('')\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered Options DatetimePickerView\nDESCRIPTION: Implementation of a datetime picker view with custom filtering of option values.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker-view.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker-view v-model=\"value\" label=\"Filter Options\" :filter=\"filter\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\n\nconst filter = (type, values) => {\n  if (type === 'minute') {\n    return values.filter((value) => value % 5 === 0)\n  }\n  return values\n}\n```\n\n----------------------------------------\n\nTITLE: Large Size Checkbox Group in Vue\nDESCRIPTION: Shows how to use the large size variant of the checkbox group.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" size=\"large\">\n  <wd-checkbox modelValue=\"1\">沃特</wd-checkbox>\n  <wd-checkbox modelValue=\"2\">商家后台</wd-checkbox>\n</wd-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: 使用page-meta解决滚动穿透问题 (HTML)\nDESCRIPTION: 通过page-meta组件动态修改页面overflow属性，解决弹出层的滚动穿透问题。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/popup.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- page-meta 只能是页面内的第一个节点 -->\n<page-meta :page-style=\"`overflow:${show ? 'hidden' : 'visible'};`\"></page-meta>\n\n<wd-popup v-model=\"show\" lock-scroll position=\"bottom\" :safe-area-inset-bottom=\"true\" custom-style=\"height: 200px;\" @close=\"handleClose\"></wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Plain Text Display Configuration\nDESCRIPTION: Shows how to display input as plain text instead of masked characters, useful for verification codes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/password-input.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Password input box -->\n<wd-password-input v-model=\"value\" :mask=\"false\" :focused=\"showKeyboard\" @focus=\"showKeyboard = true\" />\n```\n\n----------------------------------------\n\nTITLE: 大尺寸DatetimePicker示例\nDESCRIPTION: 使用size=\"large\"属性设置选择器的大小，large模式下字号为16px。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/datetime-picker.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker label=\"日期选择\" size=\"large\" v-model=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Gap Usage in HTML\nDESCRIPTION: Demonstrates the basic usage of the Gap component with default white background color.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/gap.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-gap bg-color=\"#FFFFFF\"></wd-gap>\n```\n\n----------------------------------------\n\nTITLE: Page Styling - SCSS\nDESCRIPTION: Basic SCSS styling for the page to enable scrolling demonstration.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/sticky.md#2025-04-23_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\npage{\n  height: 200vh;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Options in ColPicker\nDESCRIPTION: Example showing how to set initial values in ColPicker by ensuring columns data is pre-populated with appropriate options corresponding to the initial value.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/col-picker.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-col-picker label=\"选择地址\" v-model=\"value\" :columns=\"area\" :column-change=\"columnChange\"></wd-col-picker>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useColPickerData可以参考本章节顶部的介绍\n// 导入路径根据自己实际情况调整，万不可一贴了之\nimport { useColPickerData } from '@/hooks/useColPickerData'\nconst { colPickerData, findChildrenByCode } = useColPickerData()\n\nconst value = ref<string[]>(['150000', '150100', '150121'])\n\nconst area = ref<any[]>([\n  colPickerData.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  }),\n  findChildrenByCode(colPickerData, '150000')!.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  }),\n  findChildrenByCode(colPickerData, '150100')!.map((item) => {\n    return {\n      value: item.value,\n      label: item.text\n    }\n  })\n])\n\nconst columnChange = ({ selectedItem, resolve, finish }) => {\n  const areaData = findChildrenByCode(colPickerData, selectedItem.value)\n  if (areaData && areaData.length) {\n    resolve(\n      areaData.map((item) => {\n        return {\n          value: item.value,\n          label: item.text\n        }\n      })\n    )\n  } else {\n    finish()\n  }\n}\n\nfunction handleConfirm({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Mark Tag Implementation - HTML\nDESCRIPTION: Demonstrates marked style tags with different types\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tag.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-tag mark>标签</wd-tag>\n<wd-tag type=\"primary\" mark>标签</wd-tag>\n<wd-tag type=\"danger\" mark>标签</wd-tag>\n<wd-tag type=\"warning\" mark>标签</wd-tag>\n<wd-tag type=\"success\" mark>标签</wd-tag>\n```\n\n----------------------------------------\n\nTITLE: Toggling Sticky Content Display (Wot Design Uni, TypeScript)\nDESCRIPTION: Defines a TypeScript setup for toggling content visibility in conjunction with the sticky component. It uses a ref variable, a display function to show the button, and an onShow event to delay the appearance of sticky content by 5 seconds. This logic is typically placed in a Vue 3 setup() block, depending on Vue's reactivity and lifecycle.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sticky.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst show = ref<boolean>(false)\\n\\nfunction display() {\\n  show.value = true\\n}\\n\\nonShow(() => {\\n  setTimeout(display, 5000)\\n})\n```\n\n----------------------------------------\n\nTITLE: Adjusting Sticky Offset from Top (Wot Design Uni, HTML)\nDESCRIPTION: Shows how to configure the offset-top property on wd-sticky, allowing the sticky element to remain a specified distance (e.g., 50px) from the top while fixed. Pay attention to navigation bar height adjustments on H5 platforms: sticky distance could be increased by 44px, requiring offset correction if using custom navbars.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sticky.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-sticky :offset-top=\\\"50\\\">\\n  <wd-button>Offset Top</wd-button>\\n</wd-sticky>\n```\n\n----------------------------------------\n\nTITLE: Custom Spacing Styles with SCSS\nDESCRIPTION: Defines custom spacing for tags using SCSS deep selector.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tag.md#2025-04-23_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.space) {\n  margin: 0 10px 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled PickerView Options\nDESCRIPTION: Shows how to create a PickerView with a disabled state, preventing user interaction with the component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/picker-view.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-picker-view :columns=\"columns\" v-model=\"value\" disabled />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = ref(['选项1', '选项2', '选项3', '选项4', '选项5', '选项6', '选项7'])\nconst value = ref('选项3')\n```\n\n----------------------------------------\n\nTITLE: Setting Page Height for Sticky Demonstration (Wot Design Uni, SCSS)\nDESCRIPTION: Increases the main page's height to 200vh using SCSS so that sticky behavior can be demonstrated while scrolling. There are no dependencies apart from SCSS processing. The layout ensures the sticky component demonstrates the expected scroll-based fixing.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sticky.md#2025-04-23_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\npage{\\n  height: 200vh;\\n}\n```\n\n----------------------------------------\n\nTITLE: Sized Icon Implementation\nDESCRIPTION: Demonstrates setting custom icon size using the size attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/icon.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-icon name=\"add-circle\" size=\"20px\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Divider Color in HTML\nDESCRIPTION: Shows how to use the 'color' attribute to set a custom color for the divider.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/divider.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider color=\"#4D80F0\">自定义颜色</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Backtop Implementation\nDESCRIPTION: Demonstrates how to customize the backtop button content by adding custom text inside the component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/backtop.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-backtop :scrollTop=\"scrollTop\">\n  <text>TOP<text>\n</wd-backtop>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vue Sponsor Data Fetching Script\nDESCRIPTION: A Vue script setup that imports and uses the 'useSponsor' composable to fetch donor data. This data is then made available to the template for rendering the donor table.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/reward/donor.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { useSponsor } from '../.vitepress/theme/composables/sponsor'\nconst { data } = useSponsor()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Table Events in Markdown\nDESCRIPTION: This snippet defines the events that can be triggered by the Table component, including sorting and row click events.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/table.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| 事件名称    | 说明                                                               | 参数                             | 最低版本 |\n| ----------- | ------------------------------------------------------------------ | -------------------------------- | -------- |\n| sort-method | 指定数据按照哪个属性进行排序，仅当 sortable 设置为 true 的时候有效 | `TableColumn：当前点击列数据`    | 0.0.39   |\n| row-click   | 当某一行被点击时会触发该事件                                       | `{rowIndex:number} 点击行的下标` | 0.0.39   |\n```\n\n----------------------------------------\n\nTITLE: Using wd-sticky with a Custom Container (Wot Design Uni, HTML)\nDESCRIPTION: Demonstrates wrapping a wd-sticky component inside a custom container and further inside wd-sticky-box. This pattern is useful for scoping sticky behavior to a specific region. Ensure the custom container uses non-percentage dimensions (vh/vw recommended) for proper sticky calculation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sticky.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-sticky-box>\\n  <view class=\\\"container\\\">\\n    <wd-sticky>\\n      <wd-button type=\\\"warning\\\">Specify Container</wd-button>\\n    </wd-sticky>\\n  </view>\\n</wd-sticky-box>\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Sass Version for Compatibility with Wot Design Uni\nDESCRIPTION: Commands to install a specific version of Sass (1.78.0) that is compatible with Wot Design Uni. This is needed because Dart Sass 3.0.0 deprecated some APIs that the component library still uses.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/common-problems.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sass@1.78.0 -D\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sass@1.78.0 -D\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add sass@1.78.0 -D\n```\n\n----------------------------------------\n\nTITLE: CurrentTime Type Definition\nDESCRIPTION: Type definition for the CurrentTime structure returned by the useCountDown hook, showing all available time properties including days, hours, minutes, seconds, and milliseconds.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/use-count-down.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CurrentTime = {\n  days: number\n  hours: number\n  total: number\n  minutes: number\n  seconds: number\n  milliseconds: number\n}\n```\n\n----------------------------------------\n\nTITLE: JDZhengHT Font CDN Resources Configuration in Bash\nDESCRIPTION: CDN URLs for JDZhengHT font resources in both TTF and WOFF formats, providing Light and Bold variants for custom typography implementation.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/guide/typography.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# CDN 地址\nhttps://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Light.ttf\nhttps://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Light.woff\nhttps://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Bold.ttf\nhttps://static.360buyimg.com/bus/fonts/JDZhengHT/JDZhengHT-Bold.woff\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Default Theme Configuration\nDESCRIPTION: Setting default theme colors using CSS variables for success and warning states.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n:root,\npage {\n  --wot-color-success: red;\n  --wot-color-warning: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Theme Configuration\nDESCRIPTION: TypeScript implementation using ConfigProviderThemeVars type for theme configuration.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ConfigProviderThemeVars } from 'wot-design-uni';\n\nconst themeVars: ConfigProviderThemeVars = {\n  colorTheme: 'red'\n}\n```\n\n----------------------------------------\n\nTITLE: Textarea with Prefix Icon\nDESCRIPTION: Demonstrates adding a prefix icon to a textarea using the prefix-icon property, which accepts an icon class name.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/textarea.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-textarea v-model=\"value\" prefix-icon=\"dong\"></wd-textarea>\n```\n\n----------------------------------------\n\nTITLE: Vertical Layout Toast\nDESCRIPTION: Example of implementing a vertically arranged toast message\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/toast.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 纵向排版\ntoast.success({\n  msg: '纵向排版',\n  direction: 'vertical'\n})\n```\n\n----------------------------------------\n\nTITLE: Documenting ButtonOpenType External Style Classes in Markdown\nDESCRIPTION: This snippet shows a markdown table describing the external style class available for ButtonOpenType. It specifies the class name, its purpose, and version information for customizing the root node style.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| 类名         | 说明       | 最低版本 |\n| ------------ | ---------- | -------- |\n| custom-class | 根节点样式 | -        |\n```\n\n----------------------------------------\n\nTITLE: Empty Vue Setup Script\nDESCRIPTION: An empty Vue setup script block used as a component script section. This is a placeholder for potential JavaScript logic that might be needed for the showcase page.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/cases.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Basic Table Implementation in wot-design-uni\nDESCRIPTION: Demonstrates the basic setup of a table component with simple data. The example shows how to define columns using wd-table-col components with properties like 'prop' for data binding and 'label' for column headers.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/table.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"Name\"></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"School\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"Major\"></wd-table-col>\n</wd-table>\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst dataList = reactive([\n  {\n    name: 'Zhao Yun',\n    school: 'Wuhan Yanglo Maternal and Child Health College',\n    major: 'Computer Science and Technology'\n  },\n  {\n    name: 'Kong Ming',\n    school: 'Wuhan Yanglo Wolong College',\n    major: 'Computer Science and Technology'\n  },\n  {\n    name: 'Liu Bei',\n    school: 'Wuhan Yanglo Weaving College',\n    major: 'Computer Science and Technology'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Fixed Bottom Tabbar with Placeholder\nDESCRIPTION: Demonstrates how to fix the tabbar to the bottom of the screen using the fixed property and create a placeholder element with the same height.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tabbar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabbar fixed v-model=\"tabbar\" bordered safeAreaInsetBottom placeholder>\n  <wd-tabbar-item :value=\"2\" is-dot title=\"Home\" icon=\"home\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"Category\" icon=\"cart\"></wd-tabbar-item>\n  <wd-tabbar-item title=\"My\" icon=\"user\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"200\" title=\"Photos\" icon=\"photo\"></wd-tabbar-item>\n  <wd-tabbar-item :value=\"10\" title=\"Service\" icon=\"chat\"></wd-tabbar-item>\n</wd-tabbar>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst tabbar = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cell Skeleton Layout in HTML\nDESCRIPTION: Demonstrates how to create cell-like skeleton layouts with circular and rectangular shapes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/skeleton.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<view style=\"display: flex\">\n  <wd-skeleton :row-col=\"[{ size: '48px', type: 'circle' }]\" />\n  <wd-skeleton :custom-style=\"{ width: '100%', marginLeft: '12px' }\" :row-col=\"[{ width: '50%' }, { width: '100%' }]\" />\n</view>\n<view style=\"display: flex; margin-top: 20px\">\n  <wd-skeleton :row-col=\"[{ size: '48px', type: 'rect' }]\" />\n  <wd-skeleton :custom-style=\"{ width: '100%', marginLeft: '12px' }\" :row-col=\"[{ width: '50%' }, { width: '100%' }]\" />\n</view>\n```\n\n----------------------------------------\n\nTITLE: Fixed Columns Configuration in Table Component\nDESCRIPTION: Shows how to configure fixed columns in a table by using the 'fixed' property on the wd-table-col component. Currently only supports fixing columns on the left side of the table.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/table.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-table :data=\"dataList\" :height=\"400\">\n  <wd-table-col prop=\"name\" label=\"Name\" fixed></wd-table-col>\n  <wd-table-col prop=\"school\" label=\"School\"></wd-table-col>\n  <wd-table-col prop=\"major\" label=\"Major\"></wd-table-col>\n</wd-table>\n```\n\n----------------------------------------\n\nTITLE: Using External Style Classes in Mini Programs\nDESCRIPTION: Example of applying custom style classes to Wot Design Uni components and how to properly override them with the :deep() selector.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/common-problems.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<wd-button custom-class=\"custom-button\" type=\"primary\">Primary Button</wd-button>\n```\n\nLANGUAGE: scss\nCODE:\n```\n/* Component style */\n:deep(.custom-button) {\n  color: red !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Grid with Gap in HTML\nDESCRIPTION: Shows how to set a gap between grid items using the gutter property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid :gutter=\"10\" :column=\"3\">\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Controlling Tooltip Visibility Programmatically\nDESCRIPTION: Shows how to control the visibility of a Tooltip by binding v-model and toggling it with a button click.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/tooltip.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-button plain @click=\"control\" size=\"small\" class=\"button-control\">\n  {{ show ? 'Close' : 'Open' }}\n</wd-button>\n\n<wd-tooltip placement=\"top\" content=\"Control Visibility\" v-model=\"show\">\n  <wd-button :round=\"false\">top</wd-button>\n</wd-tooltip>\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { ref } from 'vue'\n\nconst show = ref<boolean>(false)\n\nconst control = () => {\n  show.value = !show.value\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Background Color Grid in HTML\nDESCRIPTION: Illustrates how to set a custom background color for the Grid component using the bg-color attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/grid.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-grid bg-color=\"rgba(0, 0, 0, 0.02)\">\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n  <wd-grid-item icon=\"picture\" text=\"Text\" />\n</wd-grid>\n```\n\n----------------------------------------\n\nTITLE: Custom Pressure Parameters in Signature Component\nDESCRIPTION: Shows how to customize pressure effect parameters like min-width, max-width, and min-speed in the signature component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/signature.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-signature \n  pressure \n  :height=\"300\" \n  :min-width=\"1\" \n  :max-width=\"6\" \n  :min-speed=\"1.5\"\n  background-color=\"#f5f5f5\"\n/>\n<view class=\"tip-text\">Fast writing produces thin lines, slow writing produces thick lines</view>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CalendarView Component in Vue\nDESCRIPTION: Demonstrates the basic implementation of the CalendarView component with a single date selection. It uses v-model for data binding and includes a change event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/calendar-view.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-calendar-view v-model=\"value\" @change=\"handleChange\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(Date.now())\n\nfunction handleChange({ value }) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Toast Component in SFC\nDESCRIPTION: HTML code showing how to use the Toast component in a Single File Component, which requires explicit declaration in the template.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/guide/quick-use.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<wd-toast></wd-toast>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of NoticeBar in HTML\nDESCRIPTION: Demonstrates how to use the NoticeBar component with basic text content and a prefix icon.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/notice-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-notice-bar text=\"This is a message notification, this is a message notification, this is a message notification\" prefix=\"warn-bold\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation in Vue\nDESCRIPTION: Basic implementation of tabs component with v-model binding and dynamic tab generation\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/tabs.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-tabs v-model=\"tab\">\n  <block v-for=\"item in 4\" :key=\"item\">\n    <wd-tab :title=\"`标签${item}`\">\n      <view class=\"content\">内容{{ item}}</view>\n    </wd-tab>\n  </block>\n</wd-tabs>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tab = ref<number>(0)\n```\n\nLANGUAGE: scss\nCODE:\n```\n.content {\n  line-height: 120px;\n  text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义按钮样式 - SCSS\nDESCRIPTION: 为Fab组件内的按钮定义自定义样式，设置统一的尺寸、样式和边距，使用深度选择器(:deep)确保样式能正确应用到组件内部元素。\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/fab.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.custom-button) {\n  min-width: auto !important;\n  box-sizing: border-box;\n  width: 32px !important;\n  height: 32px !important;\n  border-radius: 16px !important;\n  margin: 8rpx;\n}\n\n:deep(.custom-radio) {\n  height: 32px !important;\n  line-height: 32px !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled DropMenuItem in Vue 3\nDESCRIPTION: Demonstrates how to disable a DropMenuItem using the disabled property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/drop-menu.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-drop-menu>\n  <wd-drop-menu-item v-model=\"value1\" disabled :options=\"option2\" @change=\"handleChange1\" />\n  <wd-drop-menu-item v-model=\"value2\" :options=\"option1\" @change=\"handleChange2\" />\n</wd-drop-menu>\n```\n\n----------------------------------------\n\nTITLE: Using Color Array for Progress Bar in HTML\nDESCRIPTION: Shows how to use an array of colors for the progress bar, automatically calculating boundaries.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/progress.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"100\" :color=\"['#00c740', '#ffb300', '#e2231a', '#0083ff']\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Sidebar Options in HTML\nDESCRIPTION: Shows how to disable specific sidebar options using the disabled property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/sidebar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<wd-sidebar v-model=\"active\">\n  <wd-sidebar-item :value=\"0\" label=\"Label Name\" />\n  <wd-sidebar-item :value=\"1\" label=\"Label Name\" disabled />\n  <wd-sidebar-item :value=\"2\" label=\"Label Name\" />\n</wd-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Popup with Custom Close Button Position - HTML\nDESCRIPTION: Illustrates how to customize the close button position in the popup component.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/popup.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-popup :visible.sync=\"show\" position=\"bottom\" closable close-position=\"top-left\">\n  <view style=\"height: 200px; text-align: center; line-height: 200px;\">\n    Content\n  </view>\n</wd-popup>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DatetimePicker in Vue\nDESCRIPTION: Demonstrates the basic implementation of the DatetimePicker component with a v-model binding and a confirm event handler.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/datetime-picker.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<wd-datetime-picker v-model=\"value\" label=\"Date Selection\" @confirm=\"handleConfirm\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref<number>(Date.now())\nfunction handleConfirm({ value }) {\n  console.log(new Date(value))\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Theme Switching Implementation\nDESCRIPTION: Vue component setup demonstrating dynamic theme switching using ref and setTimeout.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/config-provider.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<wd-config-provider :theme=\"theme\">...</wd-config-provider>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const theme = ref('light')\n\n    setTimeout(() => {\n      theme.value = 'dark'\n    }, 1000)\n\n    return { theme }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal Precision for InputNumber in Vue\nDESCRIPTION: Demonstrates how to set decimal precision for the InputNumber component using the precision prop.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/input-number.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<wd-input-number v-model=\"value\" @change=\"handleChange\" :precision=\"2\" :step=\"0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox Group in Vue\nDESCRIPTION: Shows how to disable an entire checkbox group or individual checkboxes.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/checkbox.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<wd-checkbox-group v-model=\"value\" disabled>\n  <wd-checkbox modelValue=\"jingmai\">沃特</wd-checkbox>\n  <wd-checkbox modelValue=\"shop\">商家后台</wd-checkbox>\n</wd-checkbox-group>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ref(['jingmai'])\n```\n\n----------------------------------------\n\nTITLE: Loadmore Component Styling - SCSS\nDESCRIPTION: Defines the basic styling for the loadmore component with background color and margin.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/loadmore.md#2025-04-23_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.loadmore) {\n  background-color: #f4f4f4;\n  margin: 20px 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Version Links in Markdown\nDESCRIPTION: Markdown version reference links using compare URLs\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [1.3.13](https://github.com/Moonofweisheng/wot-design-uni/compare/v1.3.12...v1.3.13)\n```\n\n----------------------------------------\n\nTITLE: Dashed Line Divider in HTML\nDESCRIPTION: Demonstrates how to render the dividing line as a dashed line using the 'dashed' property.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/divider.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<wd-divider dashed>Dashed Divider</wd-divider>\n```\n\n----------------------------------------\n\nTITLE: Disabled Rate Component in HTML\nDESCRIPTION: Demonstrates how to disable the Rate component by setting the disabled property and specifying a disabled color.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/rate.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-rate :modelValue=\"2\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Custom View More Slot Styling\nDESCRIPTION: SCSS styling for custom view more slot in collapse component\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/collapse.md#2025-04-23_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n:deep(.more-slot) {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Progress Text in HTML\nDESCRIPTION: Shows how to hide the progress text using the hide-text attribute.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/progress.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-progress :percentage=\"60\" hide-text></wd-progress>\n```\n\n----------------------------------------\n\nTITLE: Loading Button State\nDESCRIPTION: Shows how to implement a loading state button which is disabled while loading.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/component/button.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<wd-button loading>加载中</wd-button>\n```\n\n----------------------------------------\n\nTITLE: Basic Navbar Implementation\nDESCRIPTION: Basic usage example showing how to create a navbar with a title.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/navbar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<wd-navbar title=\"Title\"></wd-navbar>\n```\n\n----------------------------------------\n\nTITLE: Millisecond-enabled CountDown\nDESCRIPTION: Implementing countdown with millisecond precision rendering enabled.\nSOURCE: https://github.com/moonofweisheng/wot-design-uni/blob/master/docs/en-US/component/count-down.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<wd-count-down :time=\"time\" :millisecond=\"true\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst time = ref<number>(30 * 60 * 60 * 1000)\n```"
  }
]