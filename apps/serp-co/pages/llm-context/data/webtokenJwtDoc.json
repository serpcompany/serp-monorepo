[
  {
    "owner": "web-token",
    "repo": "jwt-doc",
    "content": "TITLE: Managing JSON Web Key Sets (JWKSet) in PHP\nDESCRIPTION: Demonstrates how to work with JWKSet objects including retrieving keys, checking existence, counting, adding/removing keys, selecting keys based on criteria, iteration, and JSON serialization. Note that JWKSet objects are immutable, so methods like 'with' and 'without' return new instances rather than modifying the original.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-set-management.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Returns all keys\n$jwkset->all();\n\n// Check if the key set has the key with the key ID 'KEY ID'.\n$jwkset->has('KEY ID');\n\n// Retreive the key with the key ID 'KEY ID'.\n$jwkset->get('KEY ID');\n\n// Counts the keys in the key set.\n$jwkset->count(); // The method count($jwkset) has the same behaviour.\n\n// Adds a key to the key set.\n// /!\\ As the JWKSet object is immutable, this method will create a new key set. The previous key set is unchanged.\n$new_jwkset = $jwkset->with($jwk);\n\n// Removes a key to the key set.\n// /!\\ As the JWKSet object is immutable, this method will create a new key set. The previous key set is unchanged.\n$new_jwkset = $jwkset->without('KEY ID');\n\n// Selects a key according to the requirements.\n// The first argument is the key usage (\"sig\" of \"enc\")\n// The second argument is the algorithm to be used (optional)\n// The third argument is an associative array this constraints (optional)\n$key = $jwkset->selectKey('sig', $algorithm, ['kid' => 'KEY ID']);\n\n// You can iterate on a key set\nforeach($jwkset as $kid => $jwk) {\n    // Action with the key done here\n}\n\n// The JWKSet object can be serialized into JSON\njson_encode($jwkset);\n```\n\n----------------------------------------\n\nTITLE: Implementing ChaCha20-Poly1305 Key Encryption for JWT in PHP\nDESCRIPTION: Custom implementation of the ChaCha20 + Poly 1305 (IETF variant) encryption algorithm as a Key Encryption Algorithm for JWT. The class implements key encryption and decryption methods, key validation, and header parameter management for JWT operations.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/custom-algorithm.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Acme\\Algorithm;\n\nuse Base64Url\\Base64Url;\nuse Jose\\Component\\Core\\JWK;\nuse const Sodium\\CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES;\n\n/**\n * This algorithm is a custom algorithm that use the ChaCha20 + Poly 1305 with a 192 bits nonce (IETF variant).\n */\nfinal class ChaCha20Poly1305IETF implements KeyEncryption //The algorithm acts as a Key Encryption algorithm\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function name(): string\n    {\n        return 'ChaCha20+Poly1305+IETF'; // The name of our algorithm. This name will be used in our JWE headers\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function allowedKeyTypes(): array\n    {\n        return ['oct']; // Key types for this algorithm are octet keys\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function encryptKey(JWK $key, string $cek, array $completeHeader, array &$additionalHeader): string\n    {\n        $this->checkKey($key); // We check the key\n        $kek = Base64Url::decode($key->get('k')); // We retrieve the secret\n        $nonce = random_bytes(CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES); // We create a nonce\n        $additionalHeader['nonce'] = Base64Url::encode($nonce); // We add the nonce to the header\n\n        return sodium_crypto_aead_chacha20poly1305_ietf_encrypt($cek, '', $nonce, $kek); // We return the encrypted CEK\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function decryptKey(JWK $key, string $encrypted_cek, array $header): string\n    {\n        $this->checkKey($key); // We check the key\n        $this->checkAdditionalParameters($header); // We verify the nonce is in the headers\n        $nonce = Base64Url::decode($header['nonce']); // We retrieve the nonce\n        $kek = Base64Url::decode($key->get('k')); // an the secret\n\n        $decrypted = sodium_crypto_aead_chacha20poly1305_ietf_decrypt($encrypted_cek, '', $nonce, $kek); // We try to decrypt the CEK\n        if (false === $decrypted) { // If it fails we throw an exception\n            throw new \\RuntimeException('Unable to decrypt.');\n        }\n\n        return $decrypted; // Otherwise we return the decrypted CEK\n    }\n\n    /**\n     * @param JWK $key\n     */\n    protected function checkKey(JWK $key)\n    {\n        if (!in_array($key->get('kty'), $this->allowedKeyTypes())) {\n            throw new \\InvalidArgumentException('Wrong key type.');\n        }\n        if (!$key->has('k')) {\n            throw new \\InvalidArgumentException('The key parameter \"k\" is missing.');\n        }\n    }\n\n    /**\n     * @param array $header\n     */\n    protected function checkAdditionalParameters(array $header)\n    {\n        foreach (['nonce'] as $k) {\n            if (!array_key_exists($k, $header)) {\n                throw new \\InvalidArgumentException(sprintf('Parameter \"%s\" is missing.', $k));\n            }\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getKeyManagementMode(): string\n    {\n        return self::MODE_ENCRYPT; //Key Management Mode is 'enc'.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing and Verifying JWS Token in PHP\nDESCRIPTION: Demonstrates how to deserialize a JWS token using the Compact Serializer and verify its signature using a provided key. This snippet continues from the JWS creation section and uses a predefined token.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-loading.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Core\\JWK;\nuse Jose\\Component\\Signature\\Serializer\\JWSSerializerManager;\nuse Jose\\Component\\Signature\\Serializer\\CompactSerializer;\n\n// Our key.\n$jwk = JWK::create([\n    'kty' => 'oct',\n    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',\n]);\n\n// The JSON Converter.\n$jsonConverter = new StandardConverter();\n\n// The serializer manager. We only use the JWS Compact Serialization Mode.\n$serializerManager = JWSSerializerManager::create([\n    new CompactSerializer($jsonConverter),\n]);\n\n// The input we want to check\n$token = 'eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1MDc4OTY5OTIsIm5iZiI6MTUwNzg5Njk5MiwiZXhwIjoxNTA3OTAwNTkyLCJpc3MiOiJNeSBzZXJ2aWNlIiwiYXVkIjoiWW91ciBhcHBsaWNhdGlvbiJ9.eycp9PTdgO4WA-68-AMoHPwsKDr68NhjIQKz4lUkiI0';\n\n// We try to load the token.\n$jws = $serializerManager->unserialize($token);\n\n// We verify the signature. This method does NOT check the header.\n// The arguments are:\n// - The JWS object,\n// - The key,\n// - The index of the signature to check. See \n$isVerified = $jwsVerifier->verifyWithKey($jws, $jwk, 0);\n```\n\n----------------------------------------\n\nTITLE: Creating a Claim Checker Manager for JWT Validation\nDESCRIPTION: Initializes a ClaimCheckerManager with standard checkers for audience, issued at, not before, and expiration claims.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Checker\\ClaimCheckerManager;\nuse Jose\\Component\\Checker;\n\n$claimCheckerManager = ClaimCheckerManager::create(\n    [\n        new Checker\\IssuedAtChecker(),\n        new Checker\\NotBeforeChecker(),\n        new Checker\\ExpirationTimeChecker(),\n        new Checker\\AudienceChecker('Audience'),\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Decrypting JWE Tokens - Current Approach\nDESCRIPTION: Modern approach for decrypting JWE tokens using the component-based architecture. It demonstrates initialization of necessary components and serializer managers to process and decrypt a token.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/encrypted-tokens-jwe.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Encryption\\Algorithm\\KeyEncryption\\RSAOAEP256;\nuse Jose\\Component\\Encryption\\Algorithm\\ContentEncryption\\A256CBCHS512;\nuse Jose\\Component\\Encryption\\Compression\\CompressionMethodManager;\nuse Jose\\Component\\Encryption\\Compression\\Deflate;\nuse Jose\\Component\\Encryption\\JWEBuilder;\nuse Jose\\Component\\Encryption\\Serializer\\CompactSerializer;\nuse Jose\\Component\\Encryption\\Serializer\\JWESerializerManager;\n\n$keyEncryptionAlgorithmManager = AlgorithmManager::create([\n    new RSAOAEP256(),\n]);\n\n$contentEncryptionAlgorithmManager = AlgorithmManager::create([\n    new A256CBCHS512(),\n]);\n\n$compressionMethodManager = CompressionMethodManager::create([\n    new Deflate(),\n]);\n\n$jsonConverter = new StandardConverter();\n\n$jweBuilder = new JWEBuilder(\n    $jsonConverter,\n    $keyEncryptionAlgorithmManager,\n    $contentEncryptionAlgorithmManager,\n    $compressionMethodManager\n);\n\n$serializerManager = JWESerializerManager::create([\n    new CompactSerializer($jsonConverter),\n]);\n\n$token = 'eyJhbGciOiJBMjU2S1ciLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwiemlwIjoiREVGIn0.9RLpf3Gauf05QPNCMzPcH4XNBLmH0s3e-YWwOe57MTG844gnc-g2ywfXt_R0Q9qsR6WhkmQEhdLk2CBvfqr4ob4jFlvJK0yW.CCvfoTKO9tQlzCvbAuFAJg.PxrDlsbSRcxC5SuEJ84i9E9_R3tCyDQsEPTIllSCVxVcHiPOC2EdDlvUwYvznirYP6KMTdKMgLqxB4BwI3CWtys0fceSNxrEIu_uv1WhzJg.4DnyeLEAfB4I8Eq0UobnP8ymlX1UIfSSADaJCXr3RlU';\n\n$jwe = $serializerManager->unserialize($token);\n\n$jwe = $jweDecrypter->decryptUsingKey($jwe, $jwk);\n```\n\n----------------------------------------\n\nTITLE: Verifying Signed Tokens (JWS) with Current Approach\nDESCRIPTION: Modern implementation for verifying signed JWTs using component-based architecture. It sets up header checkers, algorithm manager, JWS verifier, and claim checkers to validate the token and extract claims.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/signed-tokens-jws.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Checker\\ClaimCheckerManager;\nuse Jose\\Component\\Checker\\HeaderCheckerManager;\nuse Jose\\Component\\Checker\\AlgorithmChecker;\nuse Jose\\Component\\Checker\\ExpirationTimeChecker;\nuse Jose\\Component\\Signature\\JWSVerifier;\nuse Jose\\Component\\Signature\\Algorithm\\RS256;\nuse Jose\\Component\\Signature\\Serializer\\CompactSerializer;\nuse Jose\\Component\\Signature\\JWSTokenSupport;\n\n$jsonConverter = new StandardConverter();\n$serializer = new CompactSerializer($jsonConverter);\n\n$jws = $serializer->unserialize($input);\n\n$headerChecker = HeaderCheckerManager::create(\n    [new AlgorithmChecker(['RS256'])], // A list of header checkers\n    [new JWSTokenSupport()]            // A list of token support services (we only use the JWS token type here)\n);\n\n$algorithmManager = AlgorithmManager::create([\n    new RS256(),\n]);\n$jwsVerifier = new JWSVerifier($algorithmManager);\n\n$claimChecker = ClaimCheckerManager::create(\n    [new ExpirationTimeChecker()] // A list of claim checkers\n);\n\n// We check all signatures\n$isVerified = false;\nfor ($i = 0; $i < $jws->count(); $i++) {\n    try {\n        $headerChecker->check($jws, 0); // We check the header of the first (index=0) signature.        \n        if ($jwsVerifier->verifyWithKey($jws, $key, 0)) { // We verify the signature\n            $isVerified = true;\n            break;\n        }\n    } catch (\\Exception $e) {\n        continue;\n    }\n}\n\nif (!$isVerified) {\n    //Unable to check the token. The header or the signature verification failed.\n} else {\n    // We check the claims.\n    // If everything is ok, claims can be used.\n    $claims = $jsonConverter->decode($jws->getPayload());\n    $claimChecker->check($claims); // We check the claims.\n}\n```\n\n----------------------------------------\n\nTITLE: Building Nested JWT Tokens with Multiple Parameters\nDESCRIPTION: Demonstrates how to create a nested token with the NestedTokenBuilder. This comprehensive example shows configuration for signatures, headers, encryption, and serialization modes with support for multiple recipients.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$token = $builder->create(\n    $payload,                                     // The payload to protect\n    [[                                            // A list of signatures. 'key' is mandatory and at least one of 'protected_header'/'header' has to be set.\n        'key'              => $signature_key,     // The key used to sign. Mandatory.\n        'protected_header' => ['alg' => 'PS256'], // The protected header. Optional.\n        'header'           => ['foo' => 'bar'],   // The unprotected header. Optional.\n    ]],\n    'jws_json_flattened',                         // The serialization mode for the JWS\n    ['alg' => 'RSA-OAEP', 'enc' => 'A128GCM'],    // The shared protected header. Optional.\n    ['foo' => 'bar'],                             // The shared unprotected header. Optional.\n    [[                                            // A list of recipients. 'key' is mandatory.\n        'key'    => $encryption_key,              // The recipient key.\n        'header' => ['bar' => 'foo'],             // The recipient unprotected header.\n    ]],\n    'jwe_json_flattened'                          // The serialization mode for the JWE.\n    '1, 2, 3, 4'                                  // Additional Authenticated Data (AAD). Optional.\n);\n```\n\n----------------------------------------\n\nTITLE: Basic JWK Operations in PHP\nDESCRIPTION: Demonstrates core JWK object operations including parameter checking, retrieval, thumbprint calculation, and public key conversion.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Check if the key has a parameter.\n$jwk->has('kty');\n\n// Retrieve the key parameter.\n$jwk->get('kty');\n\n// Retrieve all key parameters.\n$jwk->all();\n\n// Calculate the thumbprint of the key. Acceptable hash algorithms are those returned by the PHP function \"hash_algos\".\n$jwk->thumbprint('sha256');\n\n// If the key is a private key (RSA, EC, OKP), it can be converted into public:\n$public_key = $jwk->toPublic();\n\n// The JWK object can be serialized into JSON\njson_encode($jwk);\n```\n\n----------------------------------------\n\nTITLE: Initializing JWEDecrypter for Token Decryption in PHP\nDESCRIPTION: This snippet demonstrates how to set up the necessary components for JWE decryption, including algorithm managers for key and content encryption, and a compression method manager.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-loading.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Encryption\\Algorithm\\KeyEncryption\\A256KW;\nuse Jose\\Component\\Encryption\\Algorithm\\ContentEncryption\\A256CBCHS512;\nuse Jose\\Component\\Encryption\\Compression\\CompressionMethodManager;\nuse Jose\\Component\\Encryption\\Compression\\Deflate;\nuse Jose\\Component\\Encryption\\JWEDecrypter;\n\n// The key encryption algorithm manager with the A256KW algorithm.\n$keyEncryptionAlgorithmManager = AlgorithmManager::create([\n    new A256KW(),\n]);\n\n// The content encryption algorithm manager with the A256CBC-HS256 algorithm.\n$contentEncryptionAlgorithmManager = AlgorithmManager::create([\n    new A256CBCHS512(),\n]);\n\n// The compression method manager with the DEF (Deflate) method.\n$compressionMethodManager = CompressionMethodManager::create([\n    new Deflate(),\n]);\n\n// We instantiate our JWE Decrypter.\n$jweDecrypter = new JWEDecrypter(\n    $keyEncryptionAlgorithmManager,\n    $contentEncryptionAlgorithmManager,\n    $compressionMethodManager\n);\n```\n\n----------------------------------------\n\nTITLE: Validating JWT Claims with Claim Checker Manager\nDESCRIPTION: Converts JWT payload to a claims array and validates it using the ClaimCheckerManager.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\n\n$jsonConverter = new StandardConverter();\n\n$claims = $jsonConverter->decode($jwt->getPayload());\n$claimCheckerManager->check($claims);\n```\n\n----------------------------------------\n\nTITLE: Initializing Algorithm Manager with Multiple Encryption Algorithms in PHP\nDESCRIPTION: Creates an Algorithm Manager instance with A128KW, PBES2HS256A128KW, and A128CBCHS256 encryption algorithms. This example demonstrates how to properly instantiate and configure the Algorithm Manager with various encryption algorithms.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/encryption-algorithms.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Encryption\\Algorithm\\KeyEncryption\\A128KW;\nuse Jose\\Component\\Encryption\\Algorithm\\KeyEncryption\\PBES2HS256A128KW;\nuse Jose\\Component\\Encryption\\Algorithm\\ContentEncryption\\A128CBCHS256;\n\n$algorithmManager = AlgorithmManager::create([\n    new A128KW(),\n    new PBES2HS256A128KW(),\n    new A128CBCHS256(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using JWELoader for Simplified JWE Token Handling in PHP\nDESCRIPTION: This snippet demonstrates the usage of the JWELoader object, which combines serialization, header checking, and decryption operations for JWE tokens into a single method call.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-loading.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Encryption\\JWELoader;\n\n$jweLoader = new JWELoader(\n    $serializerManager,\n    $jweDecrypter,\n    $headerCheckerManager\n);\n\n$jwe = $jweLoader->loadAndDecryptWithKey($token, $key, $recipient);\n```\n\n----------------------------------------\n\nTITLE: Setting Up an Algorithm Manager Factory for Multiple Use Cases\nDESCRIPTION: Demonstrates how to create an Algorithm Manager Factory that can handle multiple algorithms for different purposes. This allows registering algorithms with different configurations under unique aliases.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/algorithm-management-jwa.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManagerFactory;\nuse Jose\\Component\\Signature\\Algorithm\\PS256;\nuse Jose\\Component\\Encryption\\Algorithm\\KeyEncryption\\PBES2HS512A256KW;\nuse Jose\\Component\\Encryption\\Algorithm\\ContentEncryption\\A128CBCHS256;\n\n$algorithm_manager_factory = new AlgorithmManagerFactory();\n$algorithm_manager_factory\n    ->add('PS256', new PS256())\n    ->add('A128CBC-HS256', new A128CBCHS256())\n    ->add('PBES2-HS512+A256KW', new PBES2HS512A256KW())\n    ->add('PBES2-HS512+A256KW with custom configuration', new PBES2HS512A256KW(128, 8192))\n;\n```\n\n----------------------------------------\n\nTITLE: Deserializing and Decrypting JWE Token in PHP\nDESCRIPTION: This code snippet shows how to deserialize a JWE token using a serializer manager and decrypt it using the JWEDecrypter. It includes setting up the necessary components such as the encryption key and serializer.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-loading.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Core\\JWK;\nuse Jose\\Component\\Encryption\\Serializer\\JWESerializerManager;\nuse Jose\\Component\\Encryption\\Serializer\\CompactSerializer;\n\n// Our key.\n$jwk = JWK::create([\n    'kty' => 'oct',\n    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',\n]);\n\n// The JSON Converter.\n$jsonConverter = new StandardConverter();\n\n// The serializer manager. We only use the JWE Compact Serialization Mode.\n$serializerManager = JWESerializerManager::create([\n    new CompactSerializer($jsonConverter),\n]);\n\n// The input we want to decrypt\n$token = 'eyJhbGciOiJBMjU2S1ciLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwiemlwIjoiREVGIn0.9RLpf3Gauf05QPNCMzPcH4XNBLmH0s3e-YWwOe57MTG844gnc-g2ywfXt_R0Q9qsR6WhkmQEhdLk2CBvfqr4ob4jFlvJK0yW.CCvfoTKO9tQlzCvbAuFAJg.PxrDlsbSRcxC5SuEJ84i9E9_R3tCyDQsEPTIllSCVxVcHiPOC2EdDlvUwYvznirYP6KMTdKMgLqxB4BwI3CWtys0fceSNxrEIu_uv1WhzJg.4DnyeLEAfB4I8Eq0UobnP8ymlX1UIfSSADaJCXr3RlU';\n\n// We try to load the token.\n$jwe = $serializerManager->unserialize($token);\n\n// We decrypt the token. This method does NOT check the header.\n$jwe = $jweDecrypter->decryptUsingKey($jwe, $jwk);\n```\n\n----------------------------------------\n\nTITLE: Creating JWE Tokens - Current Approach\nDESCRIPTION: Modern approach for creating JWE tokens using the component-based architecture. It demonstrates initialization of algorithm managers, compression methods, and the step-by-step token building process.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/encrypted-tokens-jwe.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Encryption\\Algorithm\\KeyEncryption\\RSAOAEP256;\nuse Jose\\Component\\Encryption\\Algorithm\\ContentEncryption\\A256CBCHS512;\nuse Jose\\Component\\Encryption\\Compression\\CompressionMethodManager;\nuse Jose\\Component\\Encryption\\Compression\\Deflate;\nuse Jose\\Component\\Encryption\\JWEBuilder;\nuse Jose\\Component\\Encryption\\Serializer\\CompactSerializer;\n\n$keyEncryptionAlgorithmManager = AlgorithmManager::create([\n    new RSAOAEP256(),\n]);\n\n$contentEncryptionAlgorithmManager = AlgorithmManager::create([\n    new A256CBCHS512(),\n]);\n\n$compressionMethodManager = CompressionMethodManager::create([\n    new Deflate(),\n]);\n\n$jsonConverter = new StandardConverter();\n\n$jweBuilder = new JWEBuilder(\n    $jsonConverter,\n    $keyEncryptionAlgorithmManager,\n    $contentEncryptionAlgorithmManager,\n    $compressionMethodManager\n);\n\n$message = 'Today, 8:00PM, train station.';\n\n$jwe = $jweBuilder\n    ->create()\n    ->withPayload($message)\n    ->withSharedProtectedHeader([\n        'alg' => 'RSA-OAEP-256',\n        'enc' => 'A256CBC-HS512',\n        'zip' => 'DEF'\n    ])\n    ->addRecipient($jwk)\n    ->build();\n\n$serializer = new CompactSerializer($jsonConverter);\n\n$token = $serializer->serialize($jwe, 0);\n```\n\n----------------------------------------\n\nTITLE: Using the Header Checker Manager in PHP\nDESCRIPTION: Shows how to use the HeaderCheckerManager's check method to validate a JWT's headers. It can also check for mandatory header parameters.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/header-checker.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$headerCheckerManager->check($jwt, 0);\n```\n\nLANGUAGE: php\nCODE:\n```\n$headerCheckerManager->check($jwt, 0, ['alg', 'enc', 'crit']);\n```\n\n----------------------------------------\n\nTITLE: Setting Up JWT Signature Algorithm Manager in PHP\nDESCRIPTION: Example of creating an Algorithm Manager with various signature algorithms. This shows how to initialize the AlgorithmManager with PS256, ES512, and None algorithms, which is necessary for JWT signing operations.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/signature-algorithms.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Signature\\Algorithm\\PS256;\nuse Jose\\Component\\Signature\\Algorithm\\ES512;\nuse Jose\\Component\\Signature\\Algorithm\\None;\n\n$algorithm_manager = AlgorithmManager::create([\n    new PS256(),\n    new ES512(),\n    new None(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating JWS Object with Payload in PHP\nDESCRIPTION: Creates a JWS object by setting a payload with claims (iat, nbf, exp, iss, aud) and adding a signature using the HS256 algorithm. Demonstrates the builder pattern for JWS creation.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-creation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// The payload we want to sign. The payload MUST be a string hence we use our JSON Converter.\n$payload = $jsonConverter->encode([\n    'iat' => time(),\n    'nbf' => time(),\n    'exp' => time() + 3600,\n    'iss' => 'My service',\n    'aud' => 'Your application',\n]);\n\n$jws = $jwsBuilder\n    ->create()                               // We want to create a new JWS\n    ->withPayload($payload)                  // We set the payload\n    ->addSignature($jwk, ['alg' => 'HS256']) // We add a signature with a simple protected header\n    ->build();                               // We build it\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Claim Checker for JWT Validation\nDESCRIPTION: Implements a custom claim checker for the 'foo' claim that validates string values against allowed options.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Acme\\Checker;\n\nuse Jose\\Component\\Checker\\ClaimChecker;\nuse Jose\\Component\\Checker\\InvalidClaimException;\n\n/**\n * Class FooChecker.\n */\nfinal class FooChecker implements ClaimCheckerInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function checkClaim($value)\n    {\n        if (!is_string($value)) { // If the value is not a string, then we throw an exception\n            throw new InvalidClaimException('The claim \"foo\" must be a string.', 'foo', $value);\n        }\n        if (!in_array($value, ['bar', 'bat'])) { // Check if the value is allowed\n            throw new InvalidClaimException('The claim \"foo\" must be \"bar\" or \"bat\".', 'foo', $value);\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function supportedClaim(): string\n    {\n        return 'foo'; //The claim to check.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Header Checker Manager in PHP\nDESCRIPTION: Demonstrates how to create a Header Checker Manager with an AlgorithmChecker for JWS tokens. It checks the 'alg' header parameter for the 'HS256' algorithm.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/header-checker.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Checker\\HeaderCheckerManager;\nuse Jose\\Component\\Checker\\AlgorithmChecker;\nuse Jose\\Component\\Signature\\JWSTokenSupport;\n\n$headerCheckerManager = HeaderCheckerManager::create(\n    [\n        new AlgorithmChecker(['HS256']), // We check the header \"alg\" (algorithm)\n    ],\n    [\n        new JWSTokenSupport(), // Adds JWS token type support\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating JWEBuilder with Specific Algorithms in PHP\nDESCRIPTION: This code shows how to create a JWEBuilder using the JWEBuilderFactory. It specifies key encryption algorithms, content encryption algorithms, and compression methods.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-creation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$jweBuilder = $jweBuilderFactory->create(\n    ['A256GCMKW'],\n    ['A256CBC-HS256'],\n    ['DEF'] // Compression methods\n);\n```\n\n----------------------------------------\n\nTITLE: Using JWSLoader for Simplified Token Verification in PHP\nDESCRIPTION: Demonstrates the JWSLoader object which combines serialization, verification, and header checking in one simplified interface. This reduces code duplication and streamlines the verification process.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-loading.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Signature\\JWSLoader;\n\n$jwsLoader = new JWSLoader(\n    $serializerManager,\n    $jwsVerifier,\n    $headerCheckerManager\n);\n\n$jws = $jwsLoader->loadAndVerifyWithKey($token, $jwk, $signature, $payload);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Claim Checker Manager Factory for Multiple Contexts\nDESCRIPTION: Creates a factory that registers multiple claim checkers with aliases, allowing creation of context-specific managers.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Checker\\ClaimCheckerManagerFactory;\nuse Jose\\Component\\Checker;\n\n$claimCheckerManagerFactory = new ClaimCheckerManagerFactory();\n$claimCheckerManagerFactory\n    ->add('iat', new Checker\\IssuedAtChecker())\n    ->add('nbf', new Checker\\NotBeforeChecker())\n    ->add('exp', new Checker\\ExpirationTimeChecker())\n    ->add('aud1', new Checker\\AudienceChecker('Audience for service #1'))\n    ->add('aud2', new Checker\\AudienceChecker('Audience for service #2'));\n\n$claimCheckerManager1 = $claimCheckerManagerFactory->create(['iat', 'exp', 'aud2']);\n$claimCheckerManager2 = $claimCheckerManagerFactory->create(['aud1', 'exp']);\n```\n\n----------------------------------------\n\nTITLE: Creating Algorithm Managers from Factory for Specific Use Cases\nDESCRIPTION: Shows how to create algorithm managers for specific use cases from a factory by specifying which algorithms to include by their aliases. This allows creating tailored algorithm sets for different security requirements.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/algorithm-management-jwa.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$signature_algorithm_manager = $algorithm_manager_factory->create(['PS256']);\n$encryption_algorithm_manager = $algorithm_manager_factory->create(['A128CBC-HS256', 'PBES2-HS512+A256KW']);\n$encryption_algorithm_manager_for_paranoid = $algorithm_manager_factory->create(['A128CBC-HS256', 'PBES2-HS512+A256KW with custom configuration']);\n```\n\n----------------------------------------\n\nTITLE: Initializing Claim Checker Manager in web-token/jwt-checker\nDESCRIPTION: This code snippet shows how to set up and use the ClaimCheckerManager in the web-token/jwt-checker component. It demonstrates adding claim checkers and checking claims using the new approach.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/claim-checking.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Checker\\ClaimCheckerManager;\nuse Jose\\Component\\Checker\\ExpirationTimeChecker;\nuse Jose\\Component\\Checker\\IssuedAtChecker;\nuse Jose\\Component\\Checker\\NotBeforeChecker;\n\n$claimCheckerManager = new ClaimCheckerManager();\n$claimCheckerManager->add(new ExpirationTimeChecker());\n$claimCheckerManager->add(new IssuedAtChecker());\n$claimCheckerManager->add(new NotBeforeChecker());\n\n$claimCheckerManager->check($claims);\n```\n\n----------------------------------------\n\nTITLE: Initializing NestedTokenBuilder in PHP\nDESCRIPTION: Creates a new instance of NestedTokenBuilder that builds nested JWT tokens (signed then encrypted). This builder requires JWE and JWS builders and serializer managers to properly construct nested tokens.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Jose\\Component\\Encryption\\NestedTokenBuilder;\n\n$nestedTokenBuilder = new NestedTokenBuilder($jweLoader, $jweSerializerManager, $jwsLoader, $jwsSerializerManager);\n```\n\n----------------------------------------\n\nTITLE: Creating Encrypted JWT with Unprotected Headers in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create an encrypted JWT token for multiple recipients using the JWE builder. It shows the usage of shared protected headers, shared unprotected headers, and per-recipient unprotected headers. The resulting JWE object includes payload encryption and recipient-specific information.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/encrypted-tokens-and/unprotected-headers.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$jwe = $jweBuilder\n    ->create()\n    ->withPayload('...')\n    ->withSharedProtectedHeader(['enc' => 'A256GCM', 'alg' => 'A256KW'])\n    ->withSharedHeader(['author' => 'John Doe'])\n    ->addRecipient($recipient_public_key_1, ['message' => 'Hello World!'])\n    ->addRecipient($recipient_public_key_2, ['description' => 'Nice song for you'])\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Creating an Algorithm Manager for JWT Signatures\nDESCRIPTION: Example of creating an algorithm manager that handles PS256 and ES512 signature algorithms. The algorithm manager is used to manage algorithms for signing JWT tokens.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/algorithm-management-jwa.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Signature\\Algorithm\\PS256;\nuse Jose\\Component\\Signature\\Algorithm\\ES512;\n\n$algorithm_manager = AlgorithmManager::create([\n    new PS256(),\n    new ES512(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring PBES2 Encryption Algorithm with Custom Parameters in PHP\nDESCRIPTION: Demonstrates how to initialize the PBES2HS256A128KW algorithm with custom salt size (16 bytes) and iteration count (1024). This example shows how to override the default values (64 bytes salt and 4096 iterations) for specific security requirements.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/encryption-algorithms.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Encryption\\Algorithm\\KeyEncryption\\PBES2HS256A128KW;\n\n$algorithmManager = AlgorithmManager::create([\n    new PBES2HS256A128KW(16, 1024),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating JWELoader with JWELoaderFactory in PHP\nDESCRIPTION: This code snippet shows how to use the JWELoaderFactory to create a JWELoader object on demand, specifying the required serializers, algorithms, and header checkers.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-loading.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Encryption\\JWELoaderFactory;\n\n$jweLoaderFactory = new JWELoaderFactory(\n    $jweSerializerManagerFactory,\n    $jweDecrypterFactory,\n    $headerCheckerManagerFactory\n);\n\n$jweLoader = $jweLoaderFactory->create(\n    ['jwe_compact'], // List of serializer aliases\n    ['A128KW'],      // List of key encryption algorithm aliases\n    ['A128KW'],      // List of content encryption algorithm aliases\n    ['DEF'],         // List of compression method aliases\n    ['alg', 'enc']   // Optional list of header checker aliases\n);\n```\n\n----------------------------------------\n\nTITLE: Creating JWS with Detached Payload in PHP\nDESCRIPTION: This snippet demonstrates how to create a JWS token with a detached payload using the JWT Framework. It configures the algorithm manager, creates a key, sets up the payload, and builds the JWS with the detached payload flag set to true.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/detached-payload.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Core\\JWK;\nuse Jose\\Component\\Signature\\Algorithm\\HS256;\nuse Jose\\Component\\Signature\\JWSBuilder;\n\n// The algorithm manager with the HS256 algorithm.\n$algorithmManager = AlgorithmManager::create([\n    new HS256(),\n]);\n\n// Our key.\n$jwk = JWK::create([\n    'kty' => 'oct',\n    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',\n]);\n\n// The JSON Converter.\n$jsonConverter = new StandardConverter();\n\n// We instantiate our JWS Builder.\n$jwsBuilder = new JWSBuilder(\n    $jsonConverter,\n    $algorithmManager\n);\n\n// The payload we want to sign\n$payload = $jsonConverter->encode([\n    'iat' => time(),\n    'nbf' => time(),\n    'exp' => time() + 3600,\n    'iss' => 'My service',\n    'aud' => 'Your application',\n]);\n\n$jws = $jwsBuilder\n    ->create()                               // We want to create a new JWS\n    ->withPayload($payload, true)            // /!\\ Here is the change! We set the payload and we indicate it is detached\n    ->addSignature($jwk, ['alg' => 'HS256']) // We add a signature with a simple protected header\n    ->build();\n\n```\n\n----------------------------------------\n\nTITLE: Loading and Verifying Nested JWT Tokens\nDESCRIPTION: Demonstrates how to load a nested token using the NestedTokenLoader. This method verifies both the encryption and signature, requiring the appropriate key sets for each operation.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$jws = $nestedTokenLoader->load($token, $encryptionKeySet, $signatureKeySet, $signature);\n```\n\n----------------------------------------\n\nTITLE: Configuring JWE Decrypter Service in YAML\nDESCRIPTION: YAML configuration for creating a JWE decrypter as a service. This configuration defines a decrypter with A256GCMKW key encryption, A256CBC-HS256 content encryption, and DEF compression method.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jwe:\n        decrypters:\n            decrypter1:\n                key_encryption_algorithms: ['A256GCMKW']\n                content_encryption_algorithms: ['A256CBC-HS256']\n                compression_methods: ['DEF']\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Header Checker in PHP\nDESCRIPTION: Shows how to create a custom header checker that validates a 'custom' header parameter. It checks if the value is an array containing either 'foo' or 'bar'.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/header-checker.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\Checker;\n\nuse Jose\\Component\\Checker\\HeaderChecker;\nuse Jose\\Component\\Checker\\InvalidHeaderException;\n\n/**\n * Class CustomChecker.\n */\nfinal class CustomChecker implements HeaderChecker\n{\n    public function checkHeader($value)\n    {\n        if (!is_array($value) || !in_array($value, ['foo', 'bar'])) {\n            throw new InvalidHeaderException('Invalid header \"custom\".', 'custom', $value);\n        }\n    }\n\n    // This header parameter name.\n    public function supportedHeader(): string\n    {\n        return 'custom';\n    }\n\n    // This method indicates if this parameter must be in the protected header or not.\n    public function protectedHeaderOnly(): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Elliptic Curve Key in PHP\nDESCRIPTION: Shows how to create an EC (Elliptic Curve) key using the P-256 curve.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$key = JWKFactory::createECKey('P-256');\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Checker with web-token/jwt-checker\nDESCRIPTION: Example of how to create and use a HeaderCheckerManager with the new web-token/jwt-checker component. This demonstrates adding an AudienceChecker and TokenSupport handler, noting that the 'crit' header is always checked automatically.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/header-checking.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Checker\\AudienceChecker;\nuse Jose\\Component\\Checker\\HeaderCheckerManager;\nuse Jose\\Component\\Signature\\JWSTokenSupport;\n\n$checkerManager = new HeaderCheckerManager();\n$checkerManager->add(new AudienceChecker('My Service'));\n$checkerManager->addTokenTypeSupport(new TokenSupport());\n```\n\n----------------------------------------\n\nTITLE: Creating JWE Loader with ConfigurationHelper in PHP\nDESCRIPTION: Code example showing how to create a JWE loader using the ConfigurationHelper. This is an alternative to the YAML configuration approach.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Bundle\\JoseFramework\\Helper\\ConfigurationHelper;\n\n...\nConfigurationHelper::addJWELoader($container, 'jwe_loader1', ['jwe_compact'], ['A256GCMKW'], ['A256CBC-HS256'], ['DEF'], ['alg', 'enc'], true);\n```\n\n----------------------------------------\n\nTITLE: Creating JWSLoader Objects with JWSLoaderFactory in PHP\nDESCRIPTION: Demonstrates the JWSLoaderFactory introduced in version 1.1, which dynamically creates JWSLoader objects on demand. It requires serializer, verifier, and optional header checker factories.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-loading.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Signature\\JWSLoaderFactory;\n\n$jwsLoaderFactory = new JWSLoaderFactory(\n    $jwsSerializerManagerFactory,\n    $jwsVerifierFactory,\n    $headerCheckerManagerFactory\n);\n\n$jwsLoader = $jwsLoaderFactory->create(\n    ['jws_compact'], // List of serializer aliases\n    ['HS256'],       // List of signature algorithm aliases\n    ['alg']          // Optional list of header checker aliases\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Keys from PKCS#1/PKCS#8 Key File in YAML\nDESCRIPTION: Method to load a JWT key from a PKCS#1 or PKCS#8 key file. This approach allows specifying the file path, an optional password if the key is encrypted, and additional values.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    keys:\n        key_name:\n            file: # Method\n                path: '/path/to/your/key/file'\n                password: 'secret' # Optional. Only if the key is encrypted\n                additional_values: # Optional values.\n                    use: 'sig'\n                    alg: 'RS256'\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Signatures for JWT in PHP\nDESCRIPTION: This code snippet shows how to create a JWS object with three different signatures using HS256, RS384, and ES512 algorithms. It utilizes the JWS Builder to add multiple signatures to a single payload.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/multiple-signatures.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$jws = $jwsBuilder\n    ->create()\n    ->withPayload('...')\n    ->addSignature($signature_key1, ['alg' => 'HS256'])\n    ->addSignature($signature_key2, ['alg' => 'RS384'])\n    ->addSignature($signature_key3, ['alg' => 'ES512'])\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using JWK Objects (Updated Implementation)\nDESCRIPTION: This snippet demonstrates the updated way of creating and using a JWK object using the Jose\\Component\\Core\\JWK class. It shows the same operations as the legacy implementation with minor changes in method names.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/keys-jwk.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\JWK;\n\n$key = new JWK([\n    'kty' => 'RSA',\n    'n' => '0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw',\n    'e' => 'AQAB',\n    'alg' => 'RS256',\n    'kid' => '2011-04-29',\n]);\n\n$key->has('kty'); // Unchanged\n$key->get('kty'); // Unchanged\n$key->thumbprint('sha256'); // Unchanged\njson_encode($key); // Unchanged\n$key->toPublic(); // Unchanged\n$key->all(); // The method name changed.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Header Checker Manager Factory in PHP\nDESCRIPTION: Demonstrates how to create a Header Checker Manager Factory to generate multiple Header Checker Managers with different configurations for signatures and encryption.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/header-checker.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Checker\\HeaderCheckerManagerFactory;\nuse Jose\\Component\\Checker\\AlgorithmChecker;\nuse Jose\\Component\\Encryption\\JWETokenSupport;\nuse Jose\\Component\\Signature\\JWSTokenSupport;\n\n$headerCheckerManagerFactory = new HeaderCheckerManagerFactory();\n$headerCheckerManagerFactory\n    ->add('signature_alg', new AlgorithmChecker(['HS256']))\n    ->add('key_encryption_alg', new AlgorithmChecker(['RSA1_5']))\n    ->addTokenTypeSupport(new JWSTokenSupport())\n    ->addTokenTypeSupport(new JWETokenSupport());\n\n$headerCheckerManagerForSignatures = $headerCheckerManagerFactory->create(['signature_alg']);\n$headerCheckerManagerForEncryption = $headerCheckerManagerFactory->create(['key_encryption_alg']);\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Keys from X509 Certificate File in YAML\nDESCRIPTION: Method to load a JWT key from an X509 Certificate file. This approach allows specifying the file path along with optional additional values like 'use' and 'alg'.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    keys:\n        key_name:\n            certificate: # Method\n                path: '/path/to/your/X509/certificate'\n                additional_values: # Optional values\n                    use: 'sig'\n                    alg: 'RS256'\n```\n\n----------------------------------------\n\nTITLE: Initializing JWE Builder with Algorithm Managers and Compression Methods in PHP\nDESCRIPTION: Sets up the JWE builder with required components including key encryption algorithm manager (A256KW), content encryption algorithm manager (A256CBCHS512), compression method manager (Deflate), and JSON converter. These services are necessary for the JWE creation process.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-creation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Encryption\\Algorithm\\KeyEncryption\\A256KW;\nuse Jose\\Component\\Encryption\\Algorithm\\ContentEncryption\\A256CBCHS512;\nuse Jose\\Component\\Encryption\\Compression\\CompressionMethodManager;\nuse Jose\\Component\\Encryption\\Compression\\Deflate;\nuse Jose\\Component\\Encryption\\JWEBuilder;\n\n// The key encryption algorithm manager with the A256KW algorithm.\n$keyEncryptionAlgorithmManager = AlgorithmManager::create([\n    new A256KW(),\n]);\n\n// The content encryption algorithm manager with the A256CBC-HS256 algorithm.\n$contentEncryptionAlgorithmManager = AlgorithmManager::create([\n    new A256CBCHS512(),\n]);\n\n// The compression method manager with the DEF (Deflate) method.\n$compressionMethodManager = CompressionMethodManager::create([\n    new Deflate(),\n]);\n\n// The JSON Converter.\n$jsonConverter = new StandardConverter();\n\n// We instantiate our JWE Builder.\n$jweBuilder = new JWEBuilder(\n    $jsonConverter,\n    $keyEncryptionAlgorithmManager,\n    $contentEncryptionAlgorithmManager,\n    $compressionMethodManager\n);\n```\n\n----------------------------------------\n\nTITLE: Using Algorithm Manager Factory in PHP\nDESCRIPTION: Example of how to get the Algorithm Manager Factory service from the container and create an Algorithm Manager with specific algorithms.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/algorithm-management.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManagerFactory;\n\n$algorithmManagerFactory = $container->get(AlgorithmManagerFactory::class);\n$algorithmManager = $algorithmManagerFactory->create(['RS256', 'HS512']);\n```\n\n----------------------------------------\n\nTITLE: Creating RSA Key Pair in PHP\nDESCRIPTION: Demonstrates creation of an RSA key pair with specified key size and usage parameters.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$private_key = JWKFactory::createRSAKey(\n    4096, // Size in bits of the key. We recommend at least 2048 bits.\n    [\n        'alg' => 'RSA-OAEP-256', // This key must only be used with the RSA-OAEP-256 algorithm\n        'use' => 'enc'    // This key is used for encryption/decryption operations only\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Configuring JWS Builder in YAML\nDESCRIPTION: YAML configuration for creating a JWS builder service with multiple signature algorithms. Defines a public builder service with HS256, RS256, and ES256 algorithms.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-creation.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jws:\n        builders:\n            builder1:\n                signature_algorithms: ['HS256', 'RS256', 'ES256']\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Creating a JWE Object with Payload and Recipient in PHP\nDESCRIPTION: Demonstrates how to create a JWE object with a payload, setting protected headers including algorithm specifications and compression, and adding a recipient using a JWK (JSON Web Key). The payload is a JSON object containing token claims like expiration time and issuer.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-creation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Jose\\Component\\Core\\JWK;\n\n// Our key.\n$jwk = JWK::create([\n    'kty' => 'oct',\n    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',\n]);\n\n// The payload we want to encrypt. The payload MUST be a string hence we use our JSON Converter.\n$payload = $jsonConverter->encode([\n    'iat' => time(),\n    'nbf' => time(),\n    'exp' => time() + 3600,\n    'iss' => 'My service',\n    'aud' => 'Your application',\n]);\n\n$jwe = $jweBuilder\n    ->create()              // We want to create a new JWE\n    ->withPayload($payload) // We set the payload\n    ->withSharedProtectedHeader([\n        'alg' => 'A256KW',        // Key Encryption Algorithm\n        'enc' => 'A256CBC-HS512', // Content Encryption Algorithm\n        'zip' => 'DEF'            // We enable the compression (irrelevant as the payload is small, just for the example).\n    ])\n    ->addRecipient($jwk)    // We add a recipient (a shared key or public key).\n    ->build();              // We build it\n```\n\n----------------------------------------\n\nTITLE: JWE Serializer Manager Implementation\nDESCRIPTION: PHP implementation of JWE Serializer Manager for handling multiple encryption serialization modes\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Encryption\\Serializer;\n\n$jsonConverter = new StandardConverter();\n\n$manager = Serializer\\JWESerializerManager::create([\n    new Serializer\\CompactSerializer($jsonConverter),\n    new Serializer\\JSONFlattenedSerializer($jsonConverter),\n    new Serializer\\JSONGeneralSerializer($jsonConverter),\n]);\n\n// Serializes the second recipient (index = 1) of the variable $jwe (JWE object) into JSON Flattened serialization mode.\n$token = $manager->serialize('jwe_json_flattened', $jwe, 1);\n\n// Retrieve the JWE object from a token\n$jwe = $manager->unserialize($token);\n```\n\n----------------------------------------\n\nTITLE: Creating JWK from X.509 Certificate in PHP\nDESCRIPTION: Creates a JWK from an X.509 certificate file, which contains only public keys.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$key = JWKFactory::createFromCertificateFile(\n    '/path/to/my/key/file.crt', // The filename\n    [\n        'use' => 'sig',         // Additional parameters\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring JWE Builder as Service in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up a JWE Builder as a service using bundle configuration. It specifies encryption algorithms, compression methods, and sets the service as public.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-creation.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jwe:\n        builders:\n            builder1:\n                key_encryption_algorithms: ['A256GCMKW']\n                content_encryption_algorithms: ['A256CBC-HS256']\n                compression_methods: ['DEF']\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Initializing JWS Builder Components in PHP\nDESCRIPTION: Sets up the necessary components for JWS creation including AlgorithmManager with HS256, JWK key configuration, and JSON converter initialization. Creates a JWSBuilder instance with required dependencies.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-creation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Core\\JWK;\nuse Jose\\Component\\Signature\\Algorithm\\HS256;\nuse Jose\\Component\\Signature\\JWSBuilder;\n\n// The algorithm manager with the HS256 algorithm.\n$algorithmManager = AlgorithmManager::create([\n    new HS256(),\n]);\n\n// Our key.\n$jwk = JWK::create([\n    'kty' => 'oct',\n    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',\n]);\n\n// The JSON Converter.\n$jsonConverter = new StandardConverter();\n\n// We instantiate our JWS Builder.\n$jwsBuilder = new JWSBuilder(\n    $jsonConverter,\n    $algorithmManager\n);\n```\n\n----------------------------------------\n\nTITLE: Creating JWK from Key File in PHP\nDESCRIPTION: Creates a JWK from a PKCS#1 or PKCS#8 key file with optional encryption.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$key = JWKFactory::createFromKeyFile(\n    '/path/to/my/key/file.pem', // The filename\n    'Secret',                   // Secret if the key is encrypted\n    [\n        'use' => 'sig',         // Additional parameters\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating JWT with Unencoded Payload in PHP\nDESCRIPTION: Example of creating a JWS (JSON Web Signature) with an unencoded payload using the b64 and crit header parameters. The b64 parameter is set to false to enable unencoded payload, and it must be listed in the crit array as per RFC7797 requirements.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/unencoded-payload.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$jws = $jwsBuilder\n    ->create()\n    ->withPayload('Hello World!')\n    ->addSignature($jwk, ['alg' => 'HS256', 'b64' => false, 'crit' => ['b64']])\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Configuring JWS Loader Service\nDESCRIPTION: YAML configuration for creating a JWS Loader service with specific serializers, algorithms, and header checkers.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jws:\n        loaders:\n            jws_loader1:\n                serializers: ['jws_compact']\n                signature_algorithms: ['HS256']\n                header_checkers: ['alg']\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Creating JWE with Multiple Recipients in PHP\nDESCRIPTION: Example of using the JWE Builder to create an encrypted token for multiple recipients, each using a different key encryption algorithm but sharing the same content encryption algorithm.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/encrypted-tokens-and/multiple-recipients.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$jweBuilder\n    ->create()\n    ->withPayload('...')\n    ->withSharedProtectedHeader(['enc' => 'A128GCM'])\n    ->addRecipient($recipient_key_1, ['alg' => 'RSA1_5'])\n    ->addRecipient($recipient_key_2, ['alg' => 'RSA-OAEP-256'])\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Creating JWK from PKCS#12 Certificate in PHP\nDESCRIPTION: Creates a JWK from a PKCS#12 certificate file with optional encryption.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$key = JWKFactory::createFromPKCS12CertificateFile(\n    '/path/to/my/key/file.p12', // The filename\n    'Secret',                   // Secret if the key is encrypted\n    [\n        'use' => 'sig',         // Additional parameters\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Octet String Key in PHP\nDESCRIPTION: Example of creating an oct (symmetric) key with specified size and usage parameters.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$key = JWKFactory::createOctKey(\n    1024, // Size in bits of the key. We recommend at least 128 bits.\n    [\n        'alg' => 'HS256', // This key must only be used with the HS256 algorithm\n        'use' => 'sig'    // This key is used for signature/verification operations only\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring PBES2 Algorithm with Custom Parameters\nDESCRIPTION: YAML configuration for creating a PBES2 algorithm service with custom salt size and count parameters, then tagging it to make it available through the algorithm manager factory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/algorithm-management.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    Jose\\Component\\Encryption\\Algorithm\\KeyEncryption\\PBES2HS256A128KW:\n        arguments:\n            - 128   # salt size\n            - 10240 # counts\n        tags:\n            - {'name': 'jose.algorithm', 'alias': 'Ultra-Secured PBES2-HS256+A128KW'}\n```\n\n----------------------------------------\n\nTITLE: Loading and Verifying JWS with Detached Payload in PHP\nDESCRIPTION: This code demonstrates how to load and verify a JWS token that has a detached payload. It sets up the necessary components including the algorithm manager, key, and verifier, then shows how to pass the detached payload during verification.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/detached-payload.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Core\\JWK;\nuse Jose\\Component\\Signature\\Algorithm\\HS256;\nuse Jose\\Component\\Signature\\JWSVerifier;\nuse Jose\\Component\\Signature\\Serializer\\JWSSerializerManager;\nuse Jose\\Component\\Signature\\Serializer\\CompactSerializer;\n\n// The algorithm manager with the HS256 algorithm.\n$algorithmManager = AlgorithmManager::create([\n    new HS256(),\n]);\n\n// Our key.\n$jwk = JWK::create([\n    'kty' => 'oct',\n    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',\n]);\n\n// The JSON Converter.\n$jsonConverter = new StandardConverter();\n\n// The serializer manager. We only use the JWS Compact Serialization Mode.\n$serializerManager = JWSSerializerManager::create([\n    new CompactSerializer($jsonConverter),\n]);\n\n// We instantiate our JWS Verifier.\n$jwsVerifier = new JWSVerifier(\n    $algorithmManager\n);\n\n// The detached payload\n$payload = '{\"iat\":1507896992,\"nbf\":1507896992,\"exp\":1507900592,\"iss\":\"My service\",\"aud\":\"Your application\"}';\n\n// The input we want to check\n$token = 'eyJhbGciOiJIUzI1NiJ9..eycp9PTdgO4WA-68-AMoHPwsKDr68NhjIQKz4lUkiI0';\n\n// We try to load the token.\n$jws = $serializerManager->unserialize($token);\n\n// We verify the signature.\n// /!\\ The third argument is the detached payload.\n$jwsVerifier->verifyWithKey($jws, $jwk, $payload);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JWS Verifier Service\nDESCRIPTION: YAML configuration for creating a public JWS Verifier service with multiple signature algorithms.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jws:\n        verifiers:\n            verifier1:\n                signature_algorithms: ['HS256', 'RS256', 'ES256']\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Creating JWK from Values in PHP\nDESCRIPTION: Creates a JWK using pre-existing key values and parameters.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$key = JWKFactory::createFromValues([\n    'kid' => '71ee230371d19630bc17fb90ccf20ae632ad8cf8',\n    'kty' => 'RSA',\n    'alg' => 'RS256',\n    'use' => 'sig',\n    'n' => 'vnMTRCMvsS04M1yaKR112aB8RxOkWHFixZO68wCRlVLxK4ugckXVD_Ebcq-kms1T2XpoWntVfBuX40r2GvcD9UsTFt_MZlgd1xyGwGV6U_tfQUll5mKxCPjr60h83LXKJ_zmLXIqkV8tAoIg78a5VRWoms_0Bn09DKT3-RBWFjk=',\n    'e' => 'AQAB',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Checker Managers in YAML\nDESCRIPTION: YAML configuration to create public Header and Claim Checker Managers with selected checkers. This configuration creates services named 'jose.header_checker.checker1' and 'jose.claim_checker.checker1'.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/header-and-claim-checker-management.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    checkers:\n        claims:\n            checker1:\n                is_public: true\n                claims: [...]\n        headers:\n            checker1:\n                is_public: true\n                headers: [...]\n```\n\n----------------------------------------\n\nTITLE: Implementing AAD in JWE with PHP\nDESCRIPTION: Demonstrates how to add Additional Authentication Data to a JWE build operation. The example shows setting encryption parameters, protected headers, and adding a recipient key along with AAD. Note that using AAD makes Compact Serialization unavailable.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/encrypted-tokens-and/additional-authentication-data-aad.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$jwe = $jweBuilder\n    ->create()\n    ->withPayload('...')\n    ->withSharedProtectedHeader([\n        'enc' => 'A256CBC-HS512',\n        'alg' => 'RSA-OAEP-256',\n        'zip' => 'DEF',\n    ])\n    ->addRecipient($recipient_key)\n    ->withAAD('A,B,C,D')\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Using JWT Checker Factory Services in PHP\nDESCRIPTION: Example showing how to access and use the HeaderCheckerManagerFactory and ClaimCheckerManagerFactory from the service container to create checker managers.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/header-and-claim-checker-management.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Checker\\HeaderCheckerManagerFactory;\nuse Jose\\Component\\Checker\\ClaimCheckerManagerFactory;\n\n$headerCheckerManagerFactory = $container->get(HeaderCheckerManagerFactory::class);\n$headerCheckerManager = $headerCheckerManagerFactory->create([...]);\n\n$claimCheckerManagerFactory = $container->get(ClaimCheckerManagerFactory::class);\n$claimCheckerManager = $claimCheckerManagerFactory->create([...]);\n```\n\n----------------------------------------\n\nTITLE: Configuring JKU (JWK Url) Key Set in YAML for JWT Framework\nDESCRIPTION: Example of configuring a key set to be loaded from a JKU (JWK Url). It specifies the URL from which to load the JWKSet object.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    key_sets:\n        key_name:\n            jku: # Method\n                url: 'https://login.microsoftonline.com/common/discovery/keys'\n```\n\n----------------------------------------\n\nTITLE: Configuring X5U (X509 Certificates Url) Key Set in YAML for JWT Framework\nDESCRIPTION: Example of configuring a key set to be loaded from an X5U (X509 Certificates Url). It specifies the URL from which to load the list of X509 certificates.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    key_sets:\n        key_name:\n            x5u: # Method\n                url: 'https://www.googleapis.com/oauth2/v1/certs'\n```\n\n----------------------------------------\n\nTITLE: Creating JWT with Unprotected Header Parameters in PHP\nDESCRIPTION: Example of creating a signed JWT token with unprotected header parameters using the JWS Builder. The code demonstrates adding a signature with HS256 algorithm and includes unprotected header parameters for description and author information.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/unprotected-header.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$jws = $jwsBuilder\n    ->create()\n    ->withPayload('...')\n    ->addSignature($jwk, ['alg' => 'HS256'], ['description' => 'Small description here', 'author' => 'John Doe'])\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configured JWE Decrypter Service in PHP\nDESCRIPTION: Code showing how to retrieve a configured JWE decrypter service from the container. This uses the service that was defined in the YAML configuration.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$jweDecrypter = $container->get('jose.jwe_decrypter.decrypter1');\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Key Sets in YAML for JWT Framework\nDESCRIPTION: Configuration for sharing a key set through a URL in the JWT Framework. It sets up a public key set and configures how it should be shared, including the path and cache settings.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    key_sets:\n        public_keyset: # The key set we want to share\n            jwkset:\n                value: '{\"keys\":[{\"kty\":\"OKP\",\"crv\":\"X25519\",\"x\":\"ovuZiVcMXBN4r0VgCvJy_ChAsBv4YPJGC5w56PzndXY\"},{\"kty\":\"OKP\",\"crv\":\"X25519\",\"x\":\"4qyOJ4T9RkdciIn6LDxb2LdM1Ov-dtBSuj0jh6nCuyc\"}]}'\n    jwk_uris:\n        shared_keyset:\n            id: 'jose.key_set.public_keyset' # The key set service to share\n            path: '/certs' # Path of the key set. Final path is hostname/route_prefix/path: https://www.foo.com/keys/certs\n            max_age: 1000 # Set the HTTP cache max age of this key set\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Keys from Shared Secret in YAML\nDESCRIPTION: Method to configure a JWT key using a direct shared secret. This approach allows specifying the secret value along with optional additional properties like 'use' and 'alg'.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    keys:\n        key_name:\n            secret: # Method\n                secret: 'This is my shared secret'\n                additional_values:\n                    use: 'sig'\n                    alg: 'RS512'\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Tokens (JWS) with Current Approach\nDESCRIPTION: Modern implementation for creating a signed JWT using component-based architecture. It demonstrates setting up the algorithm manager, JSON converter, JWS builder, and serializing the token in compact format.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/signed-tokens-jws.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Signature\\JWSBuilder;\nuse Jose\\Component\\Signature\\Algorithm\\RS256;\nuse Jose\\Component\\Signature\\Serializer\\CompactSerializer;\n\n// This converter wraps json_encode/json_decode with some parameters\n$jsonConverter = new StandardConverter();\n\n// This managers handles all algorithms we need to use. \n$algorithmManager = AlgorithmManager::create([\n    new RS256(),\n]);\n\n// The JWS Builder\n$jwsBuilder = new JWSBuilder($jsonConverter, $algorithmManager);\n\n// First we have to encode the payload. Now only strings are accepted.\n$payload = $jsonConverter->encode($claims);\n\n// We build our JWS object\n$jws = $jwsBuilder\n    ->create()                    // Indicates we want to create a new token\n    ->withPayload($payload)       // We set the payload\n    ->addSignature($key, $header) // We add a signature\n    ->build();                    // We compute the JWS\n\n// We need to serialize the token.\n// In this example we will use the compact serialization mode (most common mode).\n$serializer = new CompactSerializer($jsonConverter);\n$token = $serializer->serialize($jws);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configured JWE Builder from Container in PHP\nDESCRIPTION: This snippet shows how to retrieve a pre-configured JWE Builder service from the container using its service name.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-creation.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$jweBuilder = $container->get('jose.jwe_builder.builder1');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configured JWS Builder Service\nDESCRIPTION: Shows how to retrieve a pre-configured JWS builder service from the container using its service identifier.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-creation.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$jwsBuilder = $container->get('jose.jws_builder.builder1');\n```\n\n----------------------------------------\n\nTITLE: Initializing JWS Verifier with HS256 Algorithm in PHP\nDESCRIPTION: Creates an algorithm manager with the HS256 algorithm and initializes a JWS Verifier for signature verification.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-loading.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Signature\\Algorithm\\HS256;\nuse Jose\\Component\\Signature\\JWSVerifier;\n\n// The algorithm manager with the HS256 algorithm.\n$algorithmManager = AlgorithmManager::create([\n    new HS256(),\n]);\n\n// We instantiate our JWS Verifier.\n$jwsVerifier = new JWSVerifier(\n    $algorithmManager\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Signed Tokens (JWS) with Legacy Approach\nDESCRIPTION: Example of loading and verifying a JWT using the old approach with the Loader class. It demonstrates signature verification with a key and checking claims/headers with CheckerManagerFactory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/signed-tokens-jws.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Checker\\AudienceChecker;\nuse Jose\\Factory\\CheckerManagerFactory;\nuse Jose\\Loader;\n\n// The loader\n$loader = new Loader();\n\n// We load and verify the input\n$jws = $loader->loadAndVerifySignatureUsingKey(\n    $input,\n    $key,\n    ['RS256'],\n    $signature_index\n);\n\n// We prepare the claim/header checker\n$checker = CheckerManagerFactory::createClaimCheckerManager(\n    ['iat', 'nbf'], // We should enable 'exp', but this example will fail as the token has already expired\n    ['crit']\n);\n\n// We check the token\n$checker->checkJWS($jws, 0);\n```\n\n----------------------------------------\n\nTITLE: Using JKUFactory Service in a Class\nDESCRIPTION: PHP example showing how to inject and use the JKUFactory service to load key sets from remote URLs.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Jose\\Component\\Core\\JWKSet;\nuse Jose\\Component\\KeyManagement\\JKUFactory;\n\nclass MyClass\n{\n    private $jkuFactory;\n\n    public function __construct(JKUFactory $jkuFactory)\n    {\n        $this->client = $client;\n        $this->jkuFactory= $jkuFactory;\n    }\n\n    public function getKeySet(): JWKSet\n    {\n        return $this->jkuFactory->loadFromUrl($url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JWS Builder Instance with Algorithm\nDESCRIPTION: Demonstrates creating a JWS Builder instance with a specific signature algorithm (HS256) using the factory method.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-creation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$jwsBuilder = $jwsBuilderFactory->create(['HS256']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Checker with spomky-labs/jose\nDESCRIPTION: Example of how to create and use a CheckerManager with header checkers in the previous spomky-labs/jose library. This shows adding an AudienceChecker and CriticalHeaderChecker to validate JWT headers.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/header-checking.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Checker\\CheckerManager;\nuse Jose\\Checker\\AudienceChecker;\nuse Jose\\Checker\\CriticalHeaderChecker;\n\n$checkerManager = new CheckerManager();\n$checkerManager->addHeaderChecker(new AudienceChecker('My Server'));\n$checkerManager->addHeaderChecker(new CriticalHeaderChecker());\n\n$checkerManager->checkJWS($jws, $signature_index);\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Tokens (JWS) with Legacy Approach\nDESCRIPTION: Example of creating a signed JWT using the old Jose Factory classes. This approach uses JWKFactory and JWSFactory to create a JWS token in compact JSON format with an RS256 algorithm.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/signed-tokens-jws.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Factory\\JWKFactory;\nuse Jose\\Factory\\JWSFactory;\n\n$header = [\n  'alg' => 'RS256',\n];\n\n$jws = JWSFactory::createJWSToCompactJSON(\n    $claims, // The payload\n    $key,    // The private/shared key used to sign\n    $header  // The token protected header\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Required Claims in JWT Payload\nDESCRIPTION: Validates claims while also ensuring specific required claims are present in the token.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$claimCheckerManager->check($claims, ['iss', 'sub', 'aud']);\n```\n\n----------------------------------------\n\nTITLE: Initializing JWS Verifier Factory\nDESCRIPTION: Demonstrates how to retrieve the JWSVerifierFactory service from the container and create a JWS verifier with specific algorithms.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Component\\Signature\\JWSVerifierFactory;\n\n$jwsVerifierFactory = $container->get(JWSVerifierFactory::class);\n```\n\nLANGUAGE: php\nCODE:\n```\n$jwsVerifier = $jwsVerifierFactory->create(['HS256']);\n```\n\n----------------------------------------\n\nTITLE: JWS Serializer Manager Implementation\nDESCRIPTION: PHP implementation of JWS Serializer Manager that handles multiple serialization modes\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Signature\\Serializer;\n\n$jsonConverter = new StandardConverter();\n\n$manager = Serializer\\JWSSerializerManager::create([\n    new Serializer\\CompactSerializer($jsonConverter),\n    new Serializer\\JSONFlattenedSerializer($jsonConverter),\n    new Serializer\\JSONGeneralSerializer($jsonConverter),\n]);\n\n// Serializes the second signature (index = 1) of the variable $jws (JWS object) into JSON Flattened serialization mode.\n$token = $manager->serialize('jws_json_flattened', $jws, 1);\n\n// Retrieve the JWS object from a token\n$jws = $manager->unserialize($token);\n```\n\n----------------------------------------\n\nTITLE: Initializing NestedTokenLoader in PHP\nDESCRIPTION: Creates a new instance of NestedTokenLoader that handles JWT tokens which are both signed and encrypted. This loader requires pre-configured JWE and JWS loaders to properly process nested tokens.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Jose\\Component\\Encryption\\NestedTokenLoader;\n\n$nestedTokenLoader = new NestedTokenLoader($jweLoader, $jwsLoader);\n```\n\n----------------------------------------\n\nTITLE: Using Custom PBES2 Algorithm Alias\nDESCRIPTION: PHP example demonstrating how to use a custom PBES2 algorithm alias with the algorithm manager factory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/algorithm-management.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$algorithmManager = $algorithmManagerFactory->create(['Ultra-Secured PBES2-HS256+A128KW']);\n```\n\n----------------------------------------\n\nTITLE: Initializing JWS Loader Factory\nDESCRIPTION: Demonstrates how to retrieve the JWSLoaderFactory from the container for creating JWSLoader objects.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Component\\Signature\\JWSLoaderFactory;\n\n$jwsLoaderFactory = $container->get(JWSLoaderFactory::class);\n```\n\n----------------------------------------\n\nTITLE: JWS JSON Flattened Format Example\nDESCRIPTION: Example of a JWS token in JSON Flattened format, which supports unprotected headers\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"payload\": \"SW4gb3VyIHZpbGxhZ2UsIGZvbGtzIHNheSBHb2QgY3J1bWJsZXMgdXAgdGhlIG9sZCBtb29uIGludG8gc3RhcnMu\",\n  \"protected\": \"eyJhbGciOiJFUzI1NiJ9\",\n  \"header\": {\n    \"kid\": \"myEcKey\"\n  },\n  \"signature\": \"b7V2UpDPytr-kMnM_YjiQ3E0J2ucOI9LYA7mt57vccrK1rb84j9areqgQcJwOA00aWGoz4hf6sMTBfobdcJEGg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing JWS Token with Compact Serialization in PHP\nDESCRIPTION: Demonstrates how to serialize a JWS object using the Compact Serialization mode, which produces a URL-safe string format suitable for web contexts.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-creation.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Jose\\Component\\Signature\\Serializer\\CompactSerializer;\n\n$serializer = new CompactSerializer($jsonConverter); // The serializer\n\n$token = $serializer->serialize($jws, 0); // We serialize the signature at index 0 (we only have one signature).\n```\n\n----------------------------------------\n\nTITLE: Decrypting JWE Tokens - Legacy Approach\nDESCRIPTION: Example of decrypting a JWE token using the older Loader-based approach. It shows how to load, validate and decrypt a token string using a JWK key.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/encrypted-tokens-jwe.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Factory\\JWKFactory;\nuse Jose\\Loader;\n\n// We create our loader.\n$loader = new Loader();\n\n// This is the input we want to load verify.\n$input = 'eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0.rT99rwrBTbTI7IJM8fU3Eli7226HEB7IchCxNuh7lCiud48LxeolRdtFF4nzQibeYOl5S_PJsAXZwSXtDePz9hk-BbtsTBqC2UsPOdwjC9NhNupNNu9uHIVftDyucvI6hvALeZ6OGnhNV4v1zx2k7O1D89mAzfw-_kT3tkuorpDU-CpBENfIHX1Q58-Aad3FzMuo3Fn9buEP2yXakLXYa15BUXQsupM4A1GD4_H4Bd7V3u9h8Gkg8BpxKdUV9ScfJQTcYm6eJEBz3aSwIaK4T3-dwWpuBOhROQXBosJzS1asnuHtVMt2pKIIfux5BC6huIvmY7kzV7W7aIUrpYm_3H4zYvyMeq5pGqFmW2k8zpO878TRlZx7pZfPYDSXZyS0CfKKkMozT_qiCwZTSz4duYnt8hS4Z9sGthXn9uDqd6wycMagnQfOTs_lycTWmY-aqWVDKhjYNRf03NiwRtb5BE-tOdFwCASQj3uuAgPGrO2AWBe38UjQb0lvXn1SpyvYZ3WFc7WOJYaTa7A8DRn6MC6T-xDmMuxC0G7S2rscw5lQQU06MvZTlFOt0UvfuKBa03cxA_nIBIhLMjY2kOTxQMmpDPTr6Cbo8aKaOnx6ASE5Jx9paBpnNmOOKH35j_QlrQhDWUN6A2Gg8iFayJ69xDEdHAVCGRzN3woEI2ozDRs.-nBoKLH0YkLZPSI9.o4k2cnGN8rSSw3IDo1YuySkqeS_t2m1GXklSgqBdpACm6UJuJowOHC5ytjqYgRL-I-soPlwqMUf4UgRWWeaOGNw6vGW-xyM01lTYxrXfVzIIaRdhYtEMRBvBWbEwP7ua1DRfvaOjgZv6Ifa3brcAM64d8p5lhhNcizPersuhw5f-pGYzseva-TUaL8iWnctc-sSwy7SQmRkfhDjwbz0fz6kFovEgj64X1I5s7E6GLp5fnbYGLa1QUiML7Cc2GxgvI7zqWo0YIEc7aCflLG1-8BboVWFdZKLK9vNoycrYHumwzKluLWEbSVmaPpOslY2n525DxDfWaVFUfKQxMF56vn4B9QMpWAbnypNimbM8zVOw.UCGiqJxhBI3IFVdPalHHvA';\n\n// The payload is decrypted using our key.\n$jwe = $loader->loadAndDecryptUsingKey(\n    $input,            // The input to load and decrypt\n    $jwk,              // The symmetric or private key \n    ['RSA-OAEP'],      // A list of allowed key encryption algorithms\n    ['A256GCM'],       // A list of allowed content encryption algorithms\n    $recipient_index   // If decrypted, this variable will be set with the recipient index used to decrypt\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing JWE Serializer Manager Factory in PHP\nDESCRIPTION: Demonstrates how to retrieve the JWESerializerManagerFactory from a container service.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-serializers.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Component\\Encryption\\JWESerializerManagerFactory;\n\n$jweSerializerManagerFactory = $container->get(JWESerializerManagerFactory::class);\n```\n\n----------------------------------------\n\nTITLE: Generating Octet Key Pair (OKP) Key\nDESCRIPTION: This command generates an Octet Key Pair (OKP) with the specified curve. Supported curves are X25519 (for encryption) and Ed25519 (for signature). The output is a JWK representation.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:generate:okp 256\n\n{\"kty\":\"OKP\",\"crv\":\"X25519\",\"x\":\"TgTD7RS0KF3eU8HdTM6ACxu365uco3x2Cee9SBXiu2I\",\"d\":\"BypCXV7KUai-zrwrdoAmgnHX6Kosw0sVpDVPwrXoNKY\"}\n```\n\n----------------------------------------\n\nTITLE: Serializing a JWE Object Using Compact Serialization in PHP\nDESCRIPTION: Shows how to serialize a JWE object using the CompactSerializer to produce a URL-safe, compact token string. The serializer is initialized with the JSON converter and serializes the JWE for the specified recipient (in this case, the first recipient at index 0).\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-creation.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Jose\\Component\\Encryption\\Serializer\\CompactSerializer;\n\n$serializer = new CompactSerializer($jsonConverter); // The serializer\n\n$token = $serializer->serialize($jwe, 0); // We serialize the recipient at index 0 (we only have one recipient).\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWELoaderFactory Service in PHP\nDESCRIPTION: Example demonstrating how to retrieve the JWELoaderFactory from the container. This factory helps create JWELoader objects on demand.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Component\\Encryption\\JWELoaderFactory;\n\n$jweLoaderFactory = $container->get(JWELoaderFactory::class);\n```\n\n----------------------------------------\n\nTITLE: Initializing JWS Serializer Manager Factory in PHP\nDESCRIPTION: Shows how to retrieve the JWSSerializerManagerFactory from the application container. This factory service is used to create JWS serializer managers.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-serializers.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Component\\Signature\\JWSSerializerManagerFactory;\n\n$jwsSerializerManagerFactory = $container->get(JWSSerializerManagerFactory::class);\n```\n\n----------------------------------------\n\nTITLE: Loading and Converting PEM/DER Key to JWK\nDESCRIPTION: This command loads and converts a DER/PEM key file into a JWK. It supports encrypted keys, PKCS#1 and PKCS#8 encodings for public/private keys.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:load:key /path/to/file.pem \"This is my secret to decrypt the key\"\n\n{\"kty\":\"OKP\",\"crv\":\"X25519\",\"x\":\"TgTD7RS0KF3eU8HdTM6ACxu365uco3x2Cee9SBXiu2I\",\"d\":\"BypCXV7KUai-zrwrdoAmgnHX6Kosw0sVpDVPwrXoNKY\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring JKU Factory with HTTPlug in Symfony\nDESCRIPTION: Symfony configuration for the JKU Factory service with HTTPlug client for remote key set retrieval, including cache configuration.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jku_factory:\n        enabled: true # We enable the JKU factory\n        client: 'httplug.client.my_client' # We indicate the Httplug client to use\n        request_factory: 'AppBundle\\Service\\RequestFactory' # See hereafter the corresponding class\n\nhttplug:\n    plugins:\n        cache: # We use the cache plugin\n            cache_pool: 'cache.app' # We use the PSR-6 Cache service of the application\n            config:\n                default_ttl: 1800 # TTL set to 30 min\n    clients:\n        my_client: # Our client based on Guzzle 6. The corresponding service will be `httplug.client.my_client`\n            factory: 'httplug.factory.guzzle6'\n            plugins: ['httplug.plugin.cache'] # We enable the cache plugin for that client\n```\n\n----------------------------------------\n\nTITLE: Creating JWS Serializer Manager Instance in PHP\nDESCRIPTION: Demonstrates how to create a JWS Serializer Manager with specific serialization modes using the factory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-serializers.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$jwsSerializerManager = $jwsSerializerManagerFactory->create(['jws_compact']);\n```\n\n----------------------------------------\n\nTITLE: Creating Octet Key Pair in PHP\nDESCRIPTION: Example of creating an OKP (Octet Key Pair) key using the X25519 curve.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$key = JWKFactory::createOKPKey('X25519');\n```\n\n----------------------------------------\n\nTITLE: Creating JWEDecrypter with Factory in PHP\nDESCRIPTION: Example showing how to create a JWEDecrypter instance using the JWEDecrypterFactory. This creates a decrypter that supports the HS256 algorithm.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$jweDecrypter = $jweDecrypterFactory->create(['HS256']);\n```\n\n----------------------------------------\n\nTITLE: Implementing a PSR-7 Request Factory for JKUFactory\nDESCRIPTION: Implementation of a PSR-7 RequestFactory service for use with the JKUFactory in the JWT framework, using GuzzleHttp's PSR-7 implementation.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n# app/AppBundle/Service/RequestFactory.php\n\nnamespace AppBundle\\Service;\n\nuse GuzzleHttp\\Psr7\\Request;\nuse Http\\Message\\RequestFactory as Psr7RequestFactory;\n\nfinal class RequestFactory implements Psr7RequestFactory\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function createRequest($method, $uri, array $headers = [], $body = null, $protocolVersion = '1.1')\n    {\n        return new Request($method, $uri, $headers, $body, $protocolVersion);\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    AppBundle\\Service\\RequestFactory: ~\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Key from a Key Set in YAML\nDESCRIPTION: Method to retrieve a JWT key from a JWKSet service. This approach allows specifying a JWKSet service ID and the index of the desired key within that set.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    keys:\n        key_name:\n            jwkset: # Method\n                key_set: 'jose.key_set.my_key_set' # JWKSet service\n                index: 0 # Use key at index 0\n```\n\n----------------------------------------\n\nTITLE: Creating JWK from Secret in PHP\nDESCRIPTION: Creates a JWK from an existing shared secret with optional additional parameters.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$jwk = JWKFactory::createFromSecret(\n    'My Secret Key',       // The shared secret\n    [                      // Optional additional members\n        'alg' => 'HS256',\n        'use' => 'sig'\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWEBuilderFactory from Container in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the JWEBuilderFactory service from the application container. This factory is used to create JWE builders with specific configurations.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-creation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Component\\Encryption\\JWEBuilderFactory;\n\n$jweBuilderFactory = $container->get(JWEBuilderFactory::class);\n```\n\n----------------------------------------\n\nTITLE: Configuring JWS Serializer in YAML\nDESCRIPTION: Shows YAML configuration for creating a public JWS Serializer Manager service with specified serialization modes. This creates a service named 'jose.jws_serializer.serializer1'.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-serializers.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jws:\n        serializers:\n            serializer1:\n                serializers: ['jws_compact']\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Generating Elliptic Curve (EC) Key\nDESCRIPTION: This command generates an Elliptic Curve cryptographic key for the specified curve. Supported curves include P-256, P-384, and P-521. The output is a JWK representation of the key.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:generate:ec P-256\n\n{\"kty\":\"EC\",\"crv\":\"P-256\",\"d\":\"BZ231BFhhHAhx-D4myu4O1hi-vUHnRqxoCsQKUKFNrA\",\"x\":\"Tv5YeQuD1CWDbfre65kYX2Lq_MGnUq0Ek2yUFixy31M\",\"y\":\"pj0FyoGaByyBlt5RbTHhBdgcC-S6cgxzLpxd6mGmsbM\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags to JWT Key Services in YAML\nDESCRIPTION: Method to add custom tags and attributes to JWT key services. This allows better service organization and identification with optional attributes for each tag.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jwe:\n        key_name:\n            jwk: # Method\n                value: '{\"kty\":\"oct\",\"k\":\"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g\"}'\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using JWK Objects (Legacy Implementation)\nDESCRIPTION: This snippet shows how to create and use a JWK object using the legacy Jose\\Object\\JWK class. It demonstrates key creation, property access, thumbprint generation, JSON conversion, and other operations.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/keys-jwk.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Object\\JWK;\n\n$key = new JWK([\n    'kty' => 'RSA',\n    'n' => '0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw',\n    'e' => 'AQAB',\n    'alg' => 'RS256',\n    'kid' => '2011-04-29',\n]);\n\n$key->has('kty'); // true\n$key->get('kty'); // RSA\n$key->thumbprint('sha256'); // The Sha-256 thumbprint of the key: \"NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs\"\njson_encode($key); // The key as a Json object: \"{\"kty\":\"RSA\",\"n\":\"0vx7agoebGcQSuuPiLJXZptN9n...8awapJzKnqDKgw\",\"e\":\"AQAB\",\"alg\":\"RS256\",\"kid\":\"2011-04-29\"}\"\n$key->toPublic(); // Converts a private key to a public one (not relevant in this example as the key is public)\n$key->getAll(); // All key parameters\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for JWK and JWKSet in Symfony\nDESCRIPTION: Configuration for loading JWK and JWKSet objects from environment variables in Symfony 3.4+. Shows how to define the parameters in YAML configuration and how to inject them into services.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    private_key_set: '%env(jwkset:PRIVATE_KEY_SET)'\n    signature_key: '%env(jwk:SIGNATURE_KEY)'\n```\n\n----------------------------------------\n\nTITLE: Generating None Key for 'none' Algorithm\nDESCRIPTION: This command generates a 'none' key type that is only used by the 'none' algorithm. The key parameters 'alg' and 'use' are automatically set in the output JWK.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:generate:none\n\n{\"kty\":\"none\",\"use\":\"sig\",\"alg\":\"none\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Keys from X509 Certificate Content in YAML\nDESCRIPTION: Method to load a JWT key from X509 Certificate content. This approach allows directly providing the certificate content along with optional additional values.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    keys:\n        key_name:\n            x5c: # Method\n                value: '-----BEGIN CERTIFICATE----- ....'\n                additional_values: # Optional values.\n                    use: 'sig'\n                    alg: 'RS256'\n```\n\n----------------------------------------\n\nTITLE: Injecting JWKSet as a Service Parameter in Symfony\nDESCRIPTION: Example of a PHP service class that accepts a JWKSet object via dependency injection, along with the corresponding Symfony service configuration.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace AppBundle\\Service;\n\nuse Jose\\Component\\Core\\JWKSet;\n\nfinal class Foo\n{\n    public function __construct(JWKSet $jwkset)\n    {\n        ...\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    AppBundle\\Service\\Foo:\n        arguments:\n            - '%private_key_set%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tags for Key Sets in YAML for JWT Framework\nDESCRIPTION: Example of adding custom tags and attributes to a key set service in the JWT Framework. It demonstrates how to add tags with and without attributes.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    key_sets:\n        key_name:\n            jku: # Method\n                url: 'https://login.microsoftonline.com/common/discovery/keys'\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Converting JWK to PKCS#1 Format\nDESCRIPTION: This command converts a JSON Web Key (JWK) into PKCS#1 format. The example shows converting an EC key, but it also works with RSA keys.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:convert:pkcs1 '{\"kty\":\"EC\",\"crv\":\"P-256\",\"d\":\"kiNCxSbRjlAbHrEbrwVKS8vIXUh6URChrmw\",\"x\":\"-wdLWDWCZP6oFYl8aGVfU0MsFlckjaSVrO7hEsc8lgk\",\"y\":\"rt8XDTalLMCRB5Tu9WQc2d0TOVwXXHkVDbI7cIig6r4\"}'\n\n-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIJIjQsUm0Y5QGx6xG68N4GrprVrFSkvLyF1IelEQoa5soAoGCCqGSM49\nAwEHoUQDQgAE+wdLWDWCZP6oFYl8aGVfU0MsFlckjaSVrO7hEsc8lgmu3xcNNqUs\nwJEHlO71ZBzZ3RM5XBdceRUNsjtwiKDqvg==\n-----END EC PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Keys from JWK Object in YAML\nDESCRIPTION: Method to load a JWT key directly from a JWK object. This approach allows using a pre-defined JWK string value as the key source.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    keys:\n        key_name:\n            jwk: # Method\n                value: '{\"kty\":\"oct\",\"k\":\"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating a JWK Service Using ConfigurationHelper\nDESCRIPTION: Example of using the ConfigurationHelper to create a JWK (JSON Web Key) service. This code adds a key named 'acme_my_key' with custom tags, and sets it as a public service that can be accessed from the container.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/configuration-helper.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nConfigurationHelper::addKey(\n    $container,\n    'acme_my_key',\n    'jwk', [\n        'value' => '{\"kty\":\"oct\",\"k\":\"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g\"}',\n        'is_public' => true,\n    ],\n    [\n        'tag_name1' => [],\n        'tag_name2' => ['attribute1' => 'foo'],\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Legacy JKU Key Set Creation\nDESCRIPTION: Example showing how to create a JWKSet from a JKU (JSON Web Key URL) using the legacy approach with JWKFactory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Factory\\JWKFactory;\n\n$jwkset = JWKFactory::createFromJKU('https://www.googleapis.com/oauth2/v3/certs');\n```\n\n----------------------------------------\n\nTITLE: Analyzing JWK for Issues and Recommendations\nDESCRIPTION: This command analyzes a provided JWK (JSON Web Key) and identifies potential issues or missing recommended parameters. It checks for missing parameters like 'alg', 'use', 'kid', and evaluates key length security.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:analyze '{\"kty\":\"oct\",\"k\":\"N2aIJSQCxTo\"}'\n\nThe parameter \"alg\" should be added.\nThe parameter \"use\" should be added.\nThe parameter \"kid\" should be added.\nThe key length is less than 128 bits.\n```\n\n----------------------------------------\n\nTITLE: Configuring JWS Verifier with Custom Tags\nDESCRIPTION: YAML configuration showing how to add custom tags and attributes to JWS Verifier services.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jws:\n        verifiers:\n            verifier1:\n                signature_algorithms: ['HS256', 'RS256', 'ES256']\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Registering JoseFrameworkBundle in Symfony Application\nDESCRIPTION: This code snippet shows how to register the JWT bundle in a Symfony application's bundle configuration. This is required when not using Symfony Flex or when manually configuring the application.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/README.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * {@inheritdoc}\n */\npublic function registerBundles()\n{\n    $bundles = [\n        ...\n        new Jose\\Bundle\\JoseFramework\\JoseFrameworkBundle(),\n    ];\n\n    return $bundles;\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent YAML Configuration for JWK Service\nDESCRIPTION: YAML configuration equivalent to the PHP ConfigurationHelper example for creating a JWK service. This shows how the helper simplifies the creation of the same configuration that would otherwise require more verbose YAML.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/configuration-helper.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    keys:\n        acme_my_key:\n            jwk:\n                value: '{\"kty\":\"oct\",\"k\":\"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g\"}'\n                is_public: true\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Example JWS Token Output\nDESCRIPTION: Shows an example of the final serialized JWS token in its compact form, containing three base64url-encoded segments separated by dots representing the header, payload, and signature.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-creation.md#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\neyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1MDc4OTY5OTIsIm5iZiI6MTUwNzg5Njk5MiwiZXhwIjoxNTA3OTAwNTkyLCJpc3MiOiJNeSBzZXJ2aWNlIiwiYXVkIjoiWW91ciBhcHBsaWNhdGlvbiJ9.eycp9PTdgO4WA-68-AMoHPwsKDr68NhjIQKz4lUkiI0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configured JWS Verifier\nDESCRIPTION: Shows how to retrieve a pre-configured JWS Verifier service from the container.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$jwsVerifier = $container->get('jose.jws_verifier.verifier1');\n```\n\n----------------------------------------\n\nTITLE: Implementing PrependExtensionInterface in Bundle Extension for Jose Configuration\nDESCRIPTION: Example of a bundle extension class that implements the PrependExtensionInterface, which is required to use the ConfigurationHelper. The prepend method is where the Jose configuration will be added.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/configuration-helper.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace AcmeBundle\\DependencyInjection;\n\nuse Jose\\Bundle\\JoseFramework\\Helper\\ConfigurationHelper;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Extension\\PrependExtensionInterface;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\Extension;\n\nfinal class AcmeExtension extends Extension implements PrependExtensionInterface\n{\n    ...\n\n    /**\n     * {@inheritdoc}\n     */\n    public function prepend(ContainerBuilder $container)\n    {\n        ... // The Helper will be called here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating JWKSet Objects (Legacy Implementation)\nDESCRIPTION: Example of how to create and manipulate JWKSet objects using the legacy approach before recent changes. Shows initialization with direct values, JSON encoding, key addition/removal, and iteration.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Object\\JWKSet;\n\n$keyset = new JWKSet(['keys' => [\n    '71ee230371d19630bc17fb90ccf20ae632ad8cf8' => [\n        'kid' => '71ee230371d19630bc17fb90ccf20ae632ad8cf8',\n        'kty' => 'RSA',\n        'alg' => 'RS256',\n        'use' => 'sig',\n        'n' => 'vnMTRCMvsS04M1yaKR112aB8RxOkWHFixZO68wCRlVLxK4ugckXVD_Ebcq-kms1T2XpoWntVfBuX40r2GvcD9UsTFt_MZlgd1xyGwGV6U_tfQUll5mKxCPjr60h83LXKJ_zmLXIqkV8tAoIg78a5VRWoms_0Bn09DKT3-RBWFjk=',\n        'e' => 'AQAB',\n]]]);\n\njson_encode($keyset); // The key as a Json object\n$keyset->addKey(new JWK(['kty' => 'none'])); // Add a key\n$keyset->removeKey(1); // Remove a key\n$keyset->prependKey(new JWK(['kty' => 'none'])); // Prepend a key\n$keyset[0]; // Access keys like arrays do\nforeach ($keyset as $key) { // Iterate on a key set\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating None Key in PHP\nDESCRIPTION: Creates a special 'none' type key used exclusively with the 'none' algorithm.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\KeyManagement\\JWKFactory;\n\n$key = JWKFactory::createNoneKey();\n```\n\n----------------------------------------\n\nTITLE: Configuring Httplug and JKU Factory in YAML for JWT Framework\nDESCRIPTION: Configuration for Httplug bundle and JKU Factory service in the JWT Framework. It sets up a client with caching and enables the JKU Factory with the specified client and request factory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttplug: # Example of client configuration\n    plugins:\n        cache: # We use the cache plugin\n            cache_pool: 'cache.app' # We use the PSR-6 Cache service of the application\n            config:\n                default_ttl: 1800 # TTL set to 30 min\n    clients:\n        acme:\n            factory: 'httplug.factory.guzzle6'\n            plugins: ['httplug.plugin.cache'] # We enable the cache plugin for that client.\n\njose:\n    jku_factory:\n        enabled: true\n        client: 'httplug.client.acme' # The Httplug client\n        request_factory: 'httplug.message_factory' # In general, you will use the same message factory as the one used by Httplug\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Token Services in Symfony YAML\nDESCRIPTION: YAML configuration for Symfony bundle that sets up nested token loaders and builders. This defines algorithms, serializers, and header checkers to create reusable services for JWT operations.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    nested_token:\n        loaders:\n            loader_1:\n                signature_algorithms: ['PS256']\n                key_encryption_algorithms: ['RSA-OAEP']\n                content_encryption_algorithms: ['A128GCM']\n                jws_serializers: ['jws_compact']\n                jws_header_checkers: [...]\n                jwe_serializers: ['jwe_compact']\n                jwe_header_checkers: [...]\n                is_public: true\n        builders:\n            builder_1:\n                signature_algorithms: ['PS256']\n                key_encryption_algorithms: ['RSA-OAEP']\n                content_encryption_algorithms: ['A128GCM']\n                jws_serializers: ['jws_compact']\n                jwe_serializers: ['jwe_compact']\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Optimizing RSA Key with CRT Parameters\nDESCRIPTION: This command optimizes an RSA key by calculating additional Chinese Remainder Theorem (CRT) parameters. This optimization can make cryptographic operations up to 10 times faster.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:optimize '{\"kty\":\"RSA\",\"n\":\"l4mLzvr6ewIWrPvP6j5PYp0yPRhtkMW1F-dbQ1VWGoB_Mq5IIuflOo7W2ERyh71exUGkmvoesWL3zCtFIOnlxw\",\"e\":\"AQAB\",\"d\":\"lxh8oLq7el9QwNasL0JF4WwgJa7vwISB1v3Gj9LM8cpZPqXnPGPeoE5QAOUi1bJsIEqzHsR-rnLHsarlTfXMIQ\"}'\n\n{\"kty\":\"RSA\",\"n\":\"l4mLzvr6ewIWrPvP6j5PYp0yPRhtkMW1F-dbQ1VWGoB_Mq5IIuflOo7W2ERyh71exUGkmvoesWL3zCtFIOnlxw\",\"e\":\"AQAB\",\"d\":\"lxh8oLq7el9QwNasL0JF4WwgJa7vwISB1v3Gj9LM8cpZPqXnPGPeoE5QAOUi1bJsIEqzHsR-rnLHsarlTfXMIQ\",\"p\":\"w0WuNlrO16rSPKHQn02FsOwzczlchC9ZpdS-00JKOr8\",\"q\":\"xqn5LMfXwhWK-RGlXkSUHKCPb-SLKV8f8p41pDkjvvk\",\"dp\":\"NGGAtfvt-FROSQ1vFQyKjEcQFhyRALRi6-UBu1HQ76k\",\"dq\":\"kUqaO4_kUcNjogivwqOxFsauYIzq4dT6Dnx6iqJnbDE\",\"qi\":\"TwJ4WOG0r1q6vZ13Kze2HPXtlnllyq9ZfClrVwovC_I\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWKSet Object in YAML for JWT Framework\nDESCRIPTION: Example of configuring a key set directly using a JWKSet object in YAML. It demonstrates how to include the JWKSet value as a JSON string.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    key_sets:\n        key_name:\n            jwkset: # Method\n                value: '{\"keys\":[{\"kty\":\"oct\",\"k\":\"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g\"},{\"kty\":\"oct\",\"k\":\"bwIAv5Nn-fo8p4LCEvM4IR9eLXgzJRs8jXCLb3xR0tDJGiZ46KheO4ip6htFKyN2aqJqlNi9-7hB6I1aLLy1IRT9-vcBoCSGu977cNAUuRLkRp7vo8s6MsxhB8WvQBDRZghV7jIYaune-3vbE7iDU2AESr8BUtorckLoO9uW__fIabaa3hJMMQIHCzYQbJKZvlCRCKWMk2H_zuS4JeDFTvyZH1skJYF_TET1DrCZHMPicw-Yk3_m2P-ilC-yidPPoVzeU8Jj3tQ6gtX3975qiQW7pt2qbgjKAuq2wsz_9hxLBtMB5rQPafFoxop7O4BklvZ9-ECcK6dfI2CAx9_tjQ\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Sets in YAML for JWT Framework\nDESCRIPTION: Basic structure for configuring key sets in the JWT Framework. It shows how to set up a key set with a method and public/private option.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njose: # Configuration of the JWT Framework\n    key_sets: # Configuration of the keys\n        keyset_name: # Unique key name\n            method_name: # Name of the method\n                ...\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Token Services with PHP Configuration Helper\nDESCRIPTION: Shows how to programmatically configure nested token services using the ConfigurationHelper in a Symfony bundle extension. This approach creates the same services as the YAML configuration but through PHP code.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass AcmeExtension extends Extension implements PrependExtensionInterface\n{\n    ...\n\n    public function prepend(ContainerBuilder $container)\n    {\n        ConfigurationHelper::addNestedTokenLoader($container, 'loader_1', ['jwe_compact'], ['RSA-OAEP'], ['A128GCM'], ['DEF'], [], ['jws_compact'], ['PS256'], [], true, []);\n        ConfigurationHelper::addNestedTokenBuilder($container, 'builder_1', ['jwe_compact'], ['RSA-OAEP'], ['A128GCM'], ['DEF'], ['jws_compact'], ['PS256'], true, []);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Key Thumbprint per RFC7638\nDESCRIPTION: This command calculates the thumbprint of a JSON Web Key according to RFC7638 specification. The default hashing algorithm is SHA-256 but other algorithms can be specified with --hash option.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:thumbprint '{\"kty\":\"RSA\",\"n\":\"l4mLzvr6ewIWrPvP6j5PYp0yPRhtkMW1F-dbQ1VWGoB_Mq5IIuflOo7W2ERyh71exUGkmvoesWL3zCtFIOnlxw\",\"e\":\"AQAB\",\"d\":\"lxh8oLq7el9QwNasL0JF4WwgJa7vwISB1v3Gj9LM8cpZPqXnPGPeoE5QAOUi1bJsIEqzHsR-rnLHsarlTfXMIQ\",\"p\":\"xqn5LMfXwhWK-RGlXkSUHKCPb-SLKV8f8p41pDkjvvk\",\"q\":\"w0WuNlrO16rSPKHQn02FsOwzczlchC9ZpdS-00JKOr8\",\"dp\":\"kUqaO4_kUcNjogivwqOxFsauYIzq4dT6Dnx6iqJnbDE\",\"dq\":\"NGGAtfvt-FROSQ1vFQyKjEcQFhyRALRi6-UBu1HQ76k\",\"qi\":\"dkguRXkQcrvYbvFcnmGrcjIs36FJa-1dtd7QCRYHTBo\"}'\n\ngNur2UtA8NMAoxJfgMYhJqnuWR8u-60aeRbKtZwj4DE\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Key Structure in YAML for JWT Framework\nDESCRIPTION: Basic structure for configuring keys in the JWT framework. This defines the general pattern where each key has a unique name, method specification, and visibility setting.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njose: # Configuration of the JWT Framework\n    keys: # Configuration of the keys\n        key_name: # Unique key name\n            method_name: # Name of the method\n                ...\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing for JWKSet Endpoints in YAML\nDESCRIPTION: Configuration to add routing for JWKSet endpoints in the JWT Framework. It includes the resource for the JWKSet controller routes.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njwkset_endpoints:\n    resource: \"@JoseFrameworkBundle/Resources/config/routing/jwkset_controller.yml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JWE Loader Service in YAML\nDESCRIPTION: YAML configuration for creating a JWELoader as a service. This defines a loader with specific algorithms, compression methods, and header checkers.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jwe:\n        loaders:\n            jwe_loader1:\n                key_encryption_algorithms: ['A256GCMKW']\n                content_encryption_algorithms: ['A256CBC-HS256']\n                compression_methods: ['DEF']\n                header_checkers: ['alg', 'enc']\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Creating Octet Key from Existing Secret\nDESCRIPTION: This command creates an octet (oct) key from an existing secret string. It can also handle binary secrets encoded in Base64 with the --is_b64 flag.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:generate:from_secret \"This is my secret\"\n```\n\n----------------------------------------\n\nTITLE: Using Configuration Helper for JWS Loader\nDESCRIPTION: Shows how to use the ConfigurationHelper to programmatically add a JWS Loader configuration.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Bundle\\JoseFramework\\Helper\\ConfigurationHelper;\n\n...\nConfigurationHelper::addJWSLoader($container, 'jws_loader1', ['jws_compact'], ['HS256'], ['alg'], true);\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration with Custom Tags\nDESCRIPTION: Advanced YAML configuration example showing how to add custom tags and attributes to JWE serializer services.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-serializers.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jwe:\n        serializers:\n            serializer1:\n                serializers: ['jwe_compact']\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWE Decrypter with Custom Tags in YAML\nDESCRIPTION: YAML configuration that adds custom tags and attributes to a JWE decrypter service. This demonstrates how to attach custom tags to the service for advanced container usage.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jwe:\n        decrypters:\n            decrypter1:\n                key_encryption_algorithms: ['A256GCMKW']\n                content_encryption_algorithms: ['A256CBC-HS256']\n                compression_methods: ['DEF']\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Loading and Converting X.509 Certificate to JWK\nDESCRIPTION: This command loads and converts a X.509 certificate file into a JWK. The resulting key will contain only public key components.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:load:x509 /path/to/file.cert\n\n{\"kty\":\"OKP\",\"crv\":\"X25519\",\"x\":\"TgTD7RS0KF3eU8HdTM6ACxu365uco3x2Cee9SBXiu2I\"}\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Configuration for JWE Serializer\nDESCRIPTION: YAML configuration example for creating a public JWE Serializer Manager service with compact serialization mode.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-serializers.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jwe:\n        serializers:\n            serializer1:\n                serializers: ['jwe_compact']\n                is_public: true\n```\n\n----------------------------------------\n\nTITLE: Creating JWE Serializer Manager Instance\nDESCRIPTION: Shows how to create a JWESerializerManager with specific serialization modes.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-serializers.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$jweSerializerManager = $jweSerializerManagerFactory->create(['jwe_compact']);\n```\n\n----------------------------------------\n\nTITLE: Configuring JWE Builder with Custom Tags in YAML\nDESCRIPTION: This YAML configuration demonstrates how to add custom tags and attributes to a JWE Builder service. This feature was introduced in version 1.1 of the library.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-creation.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jwe:\n        builders:\n            builder1:\n                key_encryption_algorithms: ['A256GCMKW']\n                content_encryption_algorithms: ['A256CBC-HS256']\n                compression_methods: ['DEF']\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key with Specified Bit Length\nDESCRIPTION: This command generates a RSA key with the specified bit length. The recommended size is 2048 bits or more, with a minimum of 384 bits. The output is a JWK representation including private components.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:generate:rsa 512\n\n{\"kty\":\"RSA\",\"n\":\"l1UPHqgOFThDUlfrP2DFnCwsD5ITls12nXer6A4YepUP_DnF9mFoXCkyflA_TOJtFiZW6NXWOY0NdE3YjzT-qQ\",\"e\":\"AQAB\",\"d\":\"CxVvxg8I-QTl6WIHGN09m_KgR4Ora6Agz-ez74sYv-GONPD3yjEWeAavdOsGK8iJX4Pe1Qss52VKddeKRQ9LAQ\",\"p\":\"xkR0kbThGGD8HYtfPUv5Ds1zE5LlQvYgBiv15eOk9ns\",\"q\":\"w2Xk86kiaRhXWXM8XPJ5Tn6bdTT6thzoqazuIO53SCs\",\"dp\":\"RCBLibGEUvMoTiKQtChByRNRQl2MR2j48gXy9W42Rbc\",\"dq\":\"T0x5910LxwUG5hl7ROluy6lcI9wFZ4Uh80JoPdspc5M\",\"qi\":\"Z73ha9Fmg6s-rgRbF0dG0QMd1aY9g1i8qnAxXp3JMus\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tags for JWS Serializer in YAML\nDESCRIPTION: Demonstrates how to add custom tags and attributes to JWS serializer services using YAML configuration. This feature was introduced in version 1.1.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-serializers.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jws:\n        serializers:\n            serializer1:\n                serializers: ['jws_compact']\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configured JWE Serializer Manager\nDESCRIPTION: Shows how to retrieve a configured JWE Serializer Manager service from the container.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-serializers.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$jweSerializerManager = $container->get('jose.jwe_serializer.serializer1');\n```\n\n----------------------------------------\n\nTITLE: Configuring a Remote JKU Key Set in Symfony\nDESCRIPTION: Symfony configuration example showing how to define a named key set that loads from a remote JKU URL.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    keys:\n        microsoft_keys:\n            jku:\n                url: 'https://login.microsoftonline.com/common/discovery/keys'\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Encryption Component with Composer\nDESCRIPTION: Command to install the web-token/jwt-encryption component using Composer. This component is required to use encrypted tokens (JWE) and automatically handles encryption algorithms through the Algorithm Manager Factory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-encryption\n```\n\n----------------------------------------\n\nTITLE: Registering Custom JWT Checkers with Service Tags\nDESCRIPTION: YAML configuration demonstrating how to register custom header and claim checkers as services with appropriate tags. The checkers are tagged as 'jose.checker.header' or 'jose.checker.claim' with aliases for later reference.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/header-and-claim-checker-management.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices\n    Acme\\Checker\\CustomHeaderChecker:\n        public: false\n        tags:\n            - { name: 'jose.checker.header', alias: 'foo' }\n    Acme\\Checker\\CustomClaimChecker:\n        public: false\n        tags:\n            - { name: 'jose.checker.claim', alias: 'bar' }\n```\n\n----------------------------------------\n\nTITLE: Configuring JWS Builder with Custom Tags\nDESCRIPTION: Advanced YAML configuration showing how to add custom tags and attributes to a JWS builder service. Demonstrates tag configuration with and without attributes.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-creation.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    jws:\n        builders:\n            builder1:\n                signature_algorithms: ['HS256', 'RS256', 'ES256']\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Signature Component\nDESCRIPTION: Command to install the jwt-signature component using Composer\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-signature\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Key Management Package\nDESCRIPTION: Command to install the web-token/jwt-key-mgmt component via Composer.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-key-mgmt\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags to JWT Checker Managers\nDESCRIPTION: YAML configuration showing how to add custom tags and attributes to claim checker managers. This feature was introduced in version 1.1 of the library.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/header-and-claim-checker-management.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njose:\n    checkers:\n        claims:\n            checker1:\n                claims: [...]\n                tags:\n                    tag_name1: ~\n                    tag_name2: {attribute1: 'foo'}\n```\n\n----------------------------------------\n\nTITLE: Initializing JWS Builder Factory in PHP\nDESCRIPTION: Shows how to retrieve the JWSBuilderFactory service from the application container. This is the foundation for creating JWS builders programmatically.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-creation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Component\\Signature\\JWSBuilderFactory;\n\n$jwsBuilderFactory = $container->get(JWSBuilderFactory::class);\n```\n\n----------------------------------------\n\nTITLE: JWS Compact Serialization Example\nDESCRIPTION: Example of a JWS token in Compact serialization format, consisting of three Base64 URL Safe encoded parts separated by dots\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\neyJhbGciOiJFUzUxMiJ9.UGF5bG9hZA.AdwMgeerwtHoh-l192l60hp9wAHZFVJbLfD_UxMi70cwnZOYaRI1bKPWROc-mZZqwqT2SI-KGDKB34XO0aw_7XdtAG8GaSwFKdCAPZgoXD2YBJZCPEX3xKpRwcdOO8KpEHwJjyqOgzDO7iKvU8vcnwNrmxYbSW9ERBXukOXolLzeO_Jn\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Standalone Application with Git and Composer\nDESCRIPTION: This snippet shows the commands to clone the jwt-app repository, navigate to the project directory, and install dependencies using Composer. It uses optimization flags for production use.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/standalone.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/web-token/jwt-app.git\ncd jwt-app\ncomposer install --no-dev --optimize-autoloader --classmap-authoritative\n```\n\n----------------------------------------\n\nTITLE: Loading JWK and JWKSet from Environment Variables with Symfony\nDESCRIPTION: Configuration for loading JWK and JWKSet objects from environment variables using Symfony's environment variable processor.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/README.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    my_private_key: '%env(jwk:MY_PRIVATE_KEY)%'\n    my_public_keyset: '%env(jwkset:MY_PUBLIC_KEYSET)%'\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWEDecrypterFactory Service in PHP\nDESCRIPTION: Code snippet demonstrating how to retrieve the JWEDecrypterFactory service from the application container. This factory is used to create JWE decrypter instances.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Jose\\Component\\Encryption\\JWEDecrypterFactory;\n\n$jweDecrypterFactory = $container->get(JWEDecrypterFactory::class);\n```\n\n----------------------------------------\n\nTITLE: Converting Private Key to Public Key in JWT\nDESCRIPTION: This command converts a private key into a public key, with no effect on shared keys like 'oct' keys. It outputs the public key in JSON Web Key (JWK) format.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:convert:public '{\"kty\":\"EC\",\"crv\":\"P-256\",\"d\":\"kiNCxSbRjlAbHrEbrwVKS8vIXUh6URChrmw\",\"x\":\"-wdLWDWCZP6oFYl8aGVfU0MsFlckjaSVrO7hEsc8lgk\",\"y\":\"rt8XDTalLMCRB5Tu9WQc2d0TOVwXXHkVDbI7cIig6r4\"}'\n\n{\"kty\":\"EC\",\"crv\":\"P-256\",\"x\":\"-wdLWDWCZP6oFYl8aGVfU0MsFlckjaSVrO7hEsc8lgk\",\"y\":\"rt8XDTalLMCRB5Tu9WQc2d0TOVwXXHkVDbI7cIig6r4\"}\n```\n\n----------------------------------------\n\nTITLE: Registering JWT Bundle in Symfony Kernel\nDESCRIPTION: PHP code to register the JWT Framework Bundle in the Symfony application kernel for non-Flex applications\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/symfony-console.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/AppKernel.php\n\nclass AppKernel extends Kernel\n{\n    public function registerBundles()\n    {\n        $bundles = [\n            ...\n            new Jose\\Bundle\\JwtFramework\\JwtFrameworkBundle(),\n        ];\n\n        return $bundles;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing web-token/jwt-signature Component using Composer\nDESCRIPTION: This command installs the web-token/jwt-signature component via Composer, which is required for working with signed tokens (JWS).\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-signature\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Algorithm with YAML Configuration\nDESCRIPTION: Example of how to tag a custom algorithm service in Symfony's service configuration to make it available through the algorithm manager factory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/algorithm-management.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    Acme\\Bundle\\Algorithm\\FooAlgorihtm:\n        tags:\n            - {'name': 'jose.algorithm', 'alias': 'FOO'}\n```\n\n----------------------------------------\n\nTITLE: Generating Octet (Symmetric) Key\nDESCRIPTION: This command generates an octet (oct) key with the specified bit length. Recommended size is 128 bits or more. The output is a JWK representation of the symmetric key.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:generate:oct 256\n\n{\"kty\":\"oct\",\"k\":\"kWpZXidz3sVVx2Jn1J-5ANXnA2IKwfIAY2CoBW1q7I0\"}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back JWT PHAR Application in Bash\nDESCRIPTION: Command to revert to the previous version of the JOSE PHAR application if there are issues with a newly updated version.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/phar-application.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar rollback\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Core Component with Composer\nDESCRIPTION: This command installs the web-token/jwt-core component, which provides the JWK and JWKSet objects for JWT operations.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-core\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating JWKSet Objects (Current Implementation)\nDESCRIPTION: Updated approach for creating and manipulating JWKSet objects. Shows three creation methods, key retrieval, counting, and the immutable operations for adding and removing keys.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Component\\Core\\JWKSet;\n\n// Create using direct values\n$keyset = JWKSet::createFromKeyData(['keys' => [\n    '71ee230371d19630bc17fb90ccf20ae632ad8cf8' => [\n        'kid' => '71ee230371d19630bc17fb90ccf20ae632ad8cf8',\n        'kty' => 'RSA',\n        'alg' => 'RS256',\n        'use' => 'sig',\n        'n' => 'vnMTRCMvsS04M1yaKR112aB8RxOkWHFixZO68wCRlVLxK4ugckXVD_Ebcq-kms1T2XpoWntVfBuX40r2GvcD9UsTFt_MZlgd1xyGwGV6U_tfQUll5mKxCPjr60h83LXKJ_zmLXIqkV8tAoIg78a5VRWoms_0Bn09DKT3-RBWFjk=',\n        'e' => 'AQAB',\n]]]);\n\n// Create using a list of JWK objects\n$keyset = JWKSet::createFromKeys([\n    JWK::create(['kty' => 'none']),\n]);\n\n// Create from a JWKSet as a Json object\n$keyset = JWKSet::createFromJson('{\"keys\":{\"71ee230371d19630bc17fb90ccf20ae632ad8cf8\":{\"kid\":\"71ee230371d19630bc17fb90ccf20ae632ad8cf8\",\"kty\":\"RSA\",\"alg\":\"RS256\",\"use\":\"sig\",\"n\":\"vnMTRCMvsS04M1yaKR112aB8RxOkW...9DKT3-RBWFjk=\",\"e\":\"AQAB\"}}}');\n$keyset->has('71ee230371d19630bc17fb90ccf20ae632ad8cf8'); // Indicates if a key with a key ID (string) or index (integer) is in the key set.\n$keyset->get('71ee230371d19630bc17fb90ccf20ae632ad8cf8'); // Retrieve a key with a key ID (string) or index (integer).\n$keyset->count(); // Number of keys in the key set.\ncount($keyset); // Number of keys in the key set.\n$keyset->all(); // An array of keys.\n$newKeyset = $keyset->with(JWK::create(['kty' => 'none'])); // Adds a key in the key set. The returned key set is a new object (immutability).\n$newKeyset = $keyset->without(0); // Removes a key from the key set. The returned key set is a new object (immutability).\n$keyset->selectKey('sig', new RS256(), ['kid' => '71ee230371d19630bc17fb90ccf20ae632ad8cf8']);\n```\n\n----------------------------------------\n\nTITLE: Loading and Converting PKCS#12 Key to JWK\nDESCRIPTION: This command loads and converts a PKCS#12 (p12/pfx) key file into a JWK format. It supports encrypted keys by providing a password for decryption.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar key:load:p12 /path/to/file.p12 \"This is my secret to decrypt the key\"\n\n{\"kty\":\"OKP\",\"crv\":\"X25519\",\"x\":\"TgTD7RS0KF3eU8HdTM6ACxu365uco3x2Cee9SBXiu2I\",\"d\":\"BypCXV7KUai-zrwrdoAmgnHX6Kosw0sVpDVPwrXoNKY\"}\n```\n\n----------------------------------------\n\nTITLE: Running Group-Specific JWT Benchmark\nDESCRIPTION: Command to run performance tests on a specific group of algorithms using the --group parameter.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/benchmarks/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/phpbench run --group GROUP --store\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Key Management Component\nDESCRIPTION: Command to install the web-token/jwt-key-mgmt component for extended key management capabilities.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-key-mgmt\n```\n\n----------------------------------------\n\nTITLE: Creating JWE Tokens - Legacy Approach\nDESCRIPTION: Example of creating an encrypted JWE token using the older JWEFactory approach. This demonstrates how to encrypt a message with specified algorithms and compression.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/encrypted-tokens-jwe.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Factory\\JWEFactory;\nuse Jose\\Factory\\JWKFactory;\n\n// We want to encrypt a very important message\n$message = 'Today, 8:00PM, train station.';\n$jwe = JWEFactory::createJWEToCompactJSON(\n    $message,                    // The message to encrypt\n    $key,                        // The key of the recipient\n    [                            // The shared protected header\n        'alg' => 'RSA-OAEP-256',\n        'enc' => 'A256CBC-HS512',\n        'zip' => 'DEF',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Console Packages via Composer\nDESCRIPTION: Commands to install the required JWT console and bundle packages using Composer package manager\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/symfony-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-console\ncomposer require web-token/jwt-bundle\n```\n\n----------------------------------------\n\nTITLE: Sample Benchmark Report Output\nDESCRIPTION: Example of the markdown-formatted benchmark report showing performance metrics for various HMAC algorithms.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/benchmarks/README.md#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nJose Performance Test Suite\n===========================\n\n### suite: 133c8a853cf321f0b7b63e4e60f819f9910e1285, date: 2017-09-20, stime: 22:05:45\n\nbenchmark | groups | subject | mean\n --- | --- | --- | --- \nHS256Bench | JWS,hmac,HS256 | benchSignature | 104.450μs\nHS256Bench | JWS,hmac,HS256 | benchVerification | 161.093μs\nHS384Bench | JWS,hmac,HS384 | benchSignature | 112.788μs\nHS384Bench | JWS,hmac,HS384 | benchVerification | 161.978μs\nHS512Bench | JWS,hmac,HS512 | benchSignature | 105.686μs\nHS512Bench | JWS,hmac,HS512 | benchVerification | 163.139μs\n```\n\n----------------------------------------\n\nTITLE: Executing JWT PHAR Application in Bash\nDESCRIPTION: Command to run the JOSE PHAR application after installation. The file can be moved to any preferred location such as /usr/local/bin for system-wide access.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/phar-application.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar\n```\n\n----------------------------------------\n\nTITLE: JWT Performance Results Table in Markdown\nDESCRIPTION: A markdown table displaying benchmark results for various JWT operations including signing, verification, encryption and decryption. The table shows the operation type, algorithm groups, and mean execution times in microseconds.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/benchmarks/result-table.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| subject | groups | mean |\n| :--- | :--- | :--- |\n| sign | JWS,EdDSA,Ed25519 | 139.323μs |\n| verify | JWS,EdDSA,Ed25519 | 169.125μs |\n| sign | JWS,ECDSA,ES256 | 139.144μs |\n| verify | JWS,ECDSA,ES256 | 223.170μs |\n```\n\n----------------------------------------\n\nTITLE: Running Symfony Console Command\nDESCRIPTION: Command to execute the Symfony console to access JWT commands after installation\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/symfony-console.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console\n```\n\n----------------------------------------\n\nTITLE: Generating Detailed Benchmark Report\nDESCRIPTION: Command to generate a detailed markdown report for a specific benchmark run using the UUID.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/benchmarks/README.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/phpbench report --report=default --output=md --uuid=133c8a853cf321f0b7b63e4e60f819f9910e1285\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Checker Component with Composer\nDESCRIPTION: Command to install the web-token/jwt-checker component using Composer package manager.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/header-checker.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-checker\n```\n\n----------------------------------------\n\nTITLE: Generating Simple Benchmark Report\nDESCRIPTION: Command to generate a simple markdown report for a specific benchmark run using the UUID.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/benchmarks/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/phpbench report --report=simple --output=md --uuid=133c8a853cf321f0b7b63e4e60f819f9910e1285\n```\n\n----------------------------------------\n\nTITLE: Running JWT Standalone Console Command\nDESCRIPTION: This command demonstrates how to run the JWT standalone console application after installation. The executable is located in the 'bin' folder of the project directory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/standalone.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/jose\n```\n\n----------------------------------------\n\nTITLE: Testing HMAC Algorithms Benchmark\nDESCRIPTION: Example command showing how to benchmark all HMAC algorithms specifically.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/benchmarks/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/phpbench run --group hmac --store\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Checker Component with Composer\nDESCRIPTION: Command to install the web-token/jwt-checker component using Composer package manager.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/header-and-claim-checker-management.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-checker\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Core Component with Composer\nDESCRIPTION: Command to install the web-token/jwt-core component which contains the algorithm management functionality.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/algorithm-management-jwa.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-core\n```\n\n----------------------------------------\n\nTITLE: Updating JWT PHAR Application in Bash\nDESCRIPTION: Command to self-update the JOSE PHAR application to the latest version. The application will automatically download any new version if available.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/phar-application.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./jose.phar selfupdate\n```\n\n----------------------------------------\n\nTITLE: Testing RSA1_5 Algorithm Benchmark\nDESCRIPTION: Example command showing how to benchmark the RSA1_5 algorithm specifically.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/benchmarks/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/phpbench run --group RSA1_5 --store\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Checker Component with Composer\nDESCRIPTION: Command to install the jwt-checker component required for JWT claim validation.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-checker\n```\n\n----------------------------------------\n\nTITLE: Running Complete JWT Algorithm Benchmark\nDESCRIPTION: Command to run performance tests on all JWT algorithms. This comprehensive test can take over 7 hours to complete.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/benchmarks/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/phpbench run --store\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Signature Package via Composer\nDESCRIPTION: Command to install the web-token/jwt-signature component required for implementing signed JSON Web Tokens (JWS). After installation, signature algorithms are automatically handled by the Algorithm Manager Factory.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-signature\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Encryption Package via Composer\nDESCRIPTION: Command to install the web-token/jwt-encryption package using Composer package manager\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require web-token/jwt-encryption\n```\n\n----------------------------------------\n\nTITLE: Downloading JWT PHAR Application Files in Bash\nDESCRIPTION: Commands to download the JOSE PHAR application executable and its associated public key from GitHub repository. These files are digitally signed for security verification.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/phar-application.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -OL https://github.com/web-token/jwt-app/raw/gh-pages/jose.phar\ncurl -OL https://github.com/web-token/jwt-app/raw/gh-pages/jose.phar.pubkey\n```\n\n----------------------------------------\n\nTITLE: Serializing Multiple JWT Signatures in PHP\nDESCRIPTION: This code demonstrates how to serialize multiple JWT signatures using different serialization methods. It creates a JWSSerializerManager with CompactSerializer, JsonFlattenedSerializer, and JsonGeneralSerializer, then uses them to produce tokens in various formats.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/multiple-signatures.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Jose\\Component\\Core\\Converter\\StandardConverter;\nuse Jose\\Component\\Signature\\Serializer;\n\n// The JSON Converter.\n$jsonConverter = new StandardConverter();\n\n$manager = Serializer\\JWSSerializerManager::create([\n    new Serializer\\CompactSerializer($jsonConverter),\n    new Serializer\\JsonFlattenedSerializer($jsonConverter),\n    new Serializer\\JsonGeneralSerializer($jsonConverter),\n]);\n\n$tokenWithAllSignatures = $manager->serialize('jws_json_general', $jws);\n$compactTokenWithSignatureAtIndex1 = $manager->serialize('jws_compact', $jws, 1);\n$flattenedTokenWithSignatureAtIndex2 = $manager->serialize('jws_json_flattened', $jws, 2);\n```\n\n----------------------------------------\n\nTITLE: Initializing Claim Checker Manager in spomky-labs/jose\nDESCRIPTION: This code snippet demonstrates how to set up and use the CheckerManager in the spomky-labs/jose library. It includes adding various claim checkers and checking a JWS.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/claim-checking.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Jose\\Checker\\CheckerManager;\nuse Jose\\Checker\\ExpirationTimeChecker;\nuse Jose\\Checker\\IssuedAtChecker;\nuse Jose\\Checker\\NotBeforeChecker;\n\n$checkerManager = new CheckerManager();\n$checkerManager->addClaimChecker(new ExpirationTimeChecker());\n$checkerManager->addClaimChecker(new IssuedAtChecker());\n$checkerManager->addClaimChecker(new NotBeforeChecker());\n\n$checkerManager->checkJWS($jws, $signature_index);\n```\n\n----------------------------------------\n\nTITLE: JWT Components Reference Links in Markdown\nDESCRIPTION: Markdown links to different JWT component documentation sections including algorithm management, header/claim checkers, key management, and token operations.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Algorithm Management](algorithm-management-jwa.md)\n* [Header Checker](header-checker.md) and [Claim Checker](claim-checker.md) \n* [Keys and key sets](key-jwk-and-key-set-jwkset/)\n\n* [Signed tokens](signed-tokens-jws/)\n* [Encrypted tokens](encrypted-tokens-jwe/)\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWS Serializer Manager Service in PHP\nDESCRIPTION: Shows how to retrieve the configured JWS Serializer Manager service from the container.\nSOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-serializers.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$jwsSerializerManager = $container->get('jose.jws_serializer.serializer1');\n```"
  }
]