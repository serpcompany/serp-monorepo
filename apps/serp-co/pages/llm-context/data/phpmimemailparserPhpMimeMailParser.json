[
  {
    "owner": "php-mime-mail-parser",
    "repo": "php-mime-mail-parser",
    "content": "TITLE: Save Attachments to Directory\nDESCRIPTION: This code saves all attachments from the email to a specified directory. The `saveAttachments()` method is called with the directory path.  Also shows the parameters to exclude inline attachments and the strategies for handling duplicate file names.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$parser->saveAttachments('/path/to/save/attachments/');\n// return all attachments saved in the directory (include inline attachments)\n\n$parser->saveAttachments('/path/to/save/attachments/', false);\n// return all attachments saved in the directory (exclude inline attachments)\n\n// Save all attachments with the strategy ATTACHMENT_DUPLICATE_SUFFIX (default)\n$parser->saveAttachments('/path/to/save/attachments/', false, PhpMimeMailParser\\Parser::ATTACHMENT_DUPLICATE_SUFFIX);\n// return all attachments saved in the directory: logo.jpg, logo_1.jpg, ..., logo_100.jpg, YY34UFHBJ.jpg\n\n// Save all attachments with the strategy ATTACHMENT_RANDOM_FILENAME\n$parser->saveAttachments('/path/to/save/attachments/', false, PhpMimeMailParser\\Parser::ATTACHMENT_RANDOM_FILENAME);\n// return all attachments saved in the directory: YY34UFHBJ.jpg and F98DBZ9FZF.jpg\n\n// Save all attachments with the strategy ATTACHMENT_DUPLICATE_THROW\n$parser->saveAttachments('/path/to/save/attachments/', false, PhpMimeMailParser\\Parser::ATTACHMENT_DUPLICATE_THROW);\n// return an exception when there is attachments duplicate.\n```\n\n----------------------------------------\n\nTITLE: Get Message Body\nDESCRIPTION: This snippet retrieves the body of the email message.  It calls the  `getMessageBody()` method with different parameters to get the text, HTML, or HTML with embedded content versions of the email body. This allows access to the email's content in various formats.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$text = $parser->getMessageBody('text');\n// return the text version\n\n$html = $parser->getMessageBody('html');\n// return the html version\n\n$htmlEmbedded = $parser->getMessageBody('htmlEmbedded');\n// return the html version with the embedded contents like images\n```\n\n----------------------------------------\n\nTITLE: Get Header Information\nDESCRIPTION: This code demonstrates fetching header information from a parsed email. It first initializes the parser then uses `getHeader()` to retrieve specific headers such as 'to' and 'from'.  It uses `getAddresses()` to retrieve the 'to' and 'from' headers as an array.  Also retrieves the subject, and raw headers.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$rawHeaderTo = $parser->getHeader('to');\n// return \"test\" <test@example.com>, \"test2\" <test2@example.com>\n\n$arrayHeaderTo = $parser->getAddresses('to');\n// return [[\"display\"=>\"test\", \"address\"=>\"test@example.com\", false]]\n\n$rawHeaderFrom = $parser->getHeader('from');\n// return \"test\" <test@example.com>\n\n$arrayHeaderFrom = $parser->getAddresses('from');\n// return [[\"display\"=>\"test\", \"address\"=>\"test@example.com\", \"is_group\"=>false]]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$subject = $parser->getHeader('subject');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$stringHeaders = $parser->getHeadersRaw();\n// return all headers as a string, no charset conversion\n\n$arrayHeaders = $parser->getHeaders();\n// return all headers as an array, with charset conversion\n```\n\n----------------------------------------\n\nTITLE: Looping Through Attachments\nDESCRIPTION: This code demonstrates how to iterate through the attachments retrieved using `getAttachments()`. The code iterates through an array of attachment objects, and for each attachment, retrieves the filename, file size, content type, MIME part string, and stream, using the attachment object methods.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nforeach ($attachments as $attachment) {\n    echo 'Filename : '.$attachment->getFilename().'<br>';\n    // return logo.jpg\n    \n    echo 'Filesize : '.filesize($attach_dir.$attachment->getFilename()).'<br>';\n    // return 1000\n    \n    echo 'Filetype : '.$attachment->getContentType().'<br>';\n    // return image/jpeg\n    \n    echo 'MIME part string : '.$attachment->getMimePartStr().'<br>';\n    // return the whole MIME part of the attachment\n    \n    $stream = $attachment->getStream();\n    // get the stream of the attachment file\n\n    $attachment->save('/path/to/save/myattachment/', PhpMimeMailParser\\Parser::ATTACHMENT_DUPLICATE_SUFFIX);\n    // return the path and the filename saved (same strategy available than saveAttachments)\n}\n```\n\n----------------------------------------\n\nTITLE: Get Attachments as Array\nDESCRIPTION: This snippet retrieves an array containing all the attachments from the email. The `getAttachments()` method is called, with an option to exclude inline attachments. The returned array provides access to each attachment's details.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$attachments = $parser->getAttachments();\n// return an array of all attachments (include inline attachments)\n\n$attachments = $parser->getAttachments(false);\n// return an array of all attachments (exclude inline attachments)\n```\n\n----------------------------------------\n\nTITLE: Loading Email from Standard Input\nDESCRIPTION: This code loads an email from standard input using a stream. It uses `fopen(\"php://stdin\", \"r\")` to create a stream representing standard input and then calls `setStream()` to load and parse the email content. This allows the parser to process emails piped to the script.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$path = 'path/to/email.eml';\n$parser = new PhpMimeMailParser\\Parser();\n\n// 4. or specify a stream to work with a mail server (stream)\n$parser->setStream(fopen(\"php://stdin\", \"r\"));\n```\n\n----------------------------------------\n\nTITLE: Loading Email with Stream\nDESCRIPTION: This snippet demonstrates how to load an email using a PHP stream. It opens the email file using `fopen()` in read mode and passes the stream resource to the `setStream()` method of the parser.  This is useful for handling emails from different sources like files or standard input.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$path = 'path/to/email.eml';\n$parser = new PhpMimeMailParser\\Parser();\n\n// 3. or specify a php file resource (stream)\n$parser->setStream(fopen($path, \"r\"));\n```\n\n----------------------------------------\n\nTITLE: Loading Email with File Path\nDESCRIPTION: This code snippet demonstrates loading an email using a file path. It requires the library to be included via an autoloader and specifies the file path to the email. The `setPath()` method is used to load the email content from the specified file.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$path = 'path/to/email.eml';\n$parser = new PhpMimeMailParser\\Parser();\n\n// 1. Either specify a file path (string)\n$parser->setPath($path); \n```\n\n----------------------------------------\n\nTITLE: Loading Email with Raw Text\nDESCRIPTION: This code snippet shows how to load an email by providing the raw MIME mail text as a string. It uses `file_get_contents()` to read the email content from a file and then passes the content to the `setText()` method of the parser. This approach is suitable when you already have the email content in a string format.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$path = 'path/to/email.eml';\n$parser = new PhpMimeMailParser\\Parser();\n\n// 2. or specify the raw mime mail text (string)\n$parser->setText(file_get_contents($path));\n```\n\n----------------------------------------\n\nTITLE: Postfix Configuration: Forwarding Emails to PHP Script\nDESCRIPTION: Adds a pipe command to /etc/postfix/master.cf to forward emails to a PHP script using the php interpreter. The command specifies the user, PHP configuration file, script path, and email details (sender, size, recipient) as arguments. The PHP script should be designed to receive and process these arguments.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_10\n\nLANGUAGE: Postfix\nCODE:\n```\nmyhook unix - n n - - pipe flags=F user=www-data argv=php -c /etc/php8/apache2/php.ini -f /var/www/test.php ${sender} ${size} ${recipient}\n```\n\n----------------------------------------\n\nTITLE: Installing PHP MIME Mail Parser\nDESCRIPTION: This snippet provides instructions for installing the PHP MIME Mail Parser using Composer.  It requires Composer to be installed on the system. The command downloads and installs the latest version of the library and its dependencies.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require php-mime-mail-parser/php-mime-mail-parser\n```\n\n----------------------------------------\n\nTITLE: Postfix Configuration: Registering the myhook\nDESCRIPTION: Registers the custom \"myhook\" filter in Postfix's smtp configuration to enable email forwarding. This involves modifying the smtp daemon configuration in /etc/postfix/master.cf to include the content_filter option.  This ensures that emails are passed through the specified filter before delivery.\nSOURCE: https://github.com/php-mime-mail-parser/php-mime-mail-parser/blob/main/README.md#_snippet_11\n\nLANGUAGE: Postfix\nCODE:\n```\nsmtp      inet  n       -       -       -       -       smtpd -o content_filter=myhook:dummy\n```"
  }
]