[
  {
    "owner": "commitizen-tools",
    "repo": "commitizen",
    "content": "TITLE: Executing Commitizen Commit Command in Shell\nDESCRIPTION: This shell snippet demonstrates the basic usage of the Commitizen CLI tool by running the commit interface with cz commit or its shortcut cz c. These commands invoke an interactive guided prompt for generating a properly formatted git commit message. No additional dependencies are required beyond Commitizen's installation. Users interactively provide commit details; no arguments are necessary unless customizing behavior.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/commit.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncz commit\ncz c\n```\n\n----------------------------------------\n\nTITLE: Signing Off Commits\nDESCRIPTION: These commands sign off the commit, adding a `Signed-off-by` line to the commit message. The `-s` option is shorthand for `--signoff`.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncz commit -- --signoff\n```\n\nLANGUAGE: bash\nCODE:\n```\ncz commit -- -s\n```\n\n----------------------------------------\n\nTITLE: Saving Commitizen-Generated Message to a File in Shell\nDESCRIPTION: This shell snippet illustrates how to output a Commitizen-generated commit message to a designated file using the --write-message-to-file argument. An optional --dry-run flag can be added to prevent an actual git commit, writing only the generated message. This approach is useful for automation workflows, such as pre-populating messages for later inspection. The argument COMMIT_MSG_FILE should be replaced with the desired file name or path.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/commit.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncz commit --write-message-to-file COMMIT_MSG_FILE\n```\n\nLANGUAGE: shell\nCODE:\n```\ncz commit --write-message-to-file COMMIT_MSG_FILE --dry-run\n```\n\n----------------------------------------\n\nTITLE: Creating a commit with Commitizen\nDESCRIPTION: Example of using `cz commit` to create a new commit, guiding the user through the process of writing a commit message according to the configured rules.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncz commit\n```\n\n----------------------------------------\n\nTITLE: Checking Commit Message from File\nDESCRIPTION: Reads and validates a commit message from a specified file path. This is especially useful when integrating with git hooks for automated validation.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/check.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncz check --commit-msg-file COMMIT_MSG_FILE\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit hooks in Git\nDESCRIPTION: This command installs the pre-commit configuration into the Git hooks, specifically targeting the commit-msg hook.  This ensures that the commitizen checks are executed before each commit.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/auto_check.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install --hook-type commit-msg\n```\n\n----------------------------------------\n\nTITLE: Avoiding Error Codes in Shell\nDESCRIPTION: Examples of how to suppress specific error codes using the `--no-raise` flag when running Commitizen commands.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncz -nr 21 bump\n```\n\n----------------------------------------\n\nTITLE: Initializing Commitizen Project Configuration Using Shell\nDESCRIPTION: Executes the shell command 'cz init' to interactively set up Commitizen in a project. This command prompts the user to select convention rules, version providers, versioning schemes, and various optional settings, then configures appropriate files (such as pyproject.toml or .cz.toml) accordingly. It is the recommended entry point to configure Commitizen for standardized commit message conventions and versioning automation.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/init.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncz init\n```\n\n----------------------------------------\n\nTITLE: Update Changelog Configuration in TOML\nDESCRIPTION: Example of enabling automatic changelog updates when bumping versions.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nupdate_changelog_on_bump = true\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Commitizen\nDESCRIPTION: These commands initiate the Commitizen commit workflow, prompting the user to provide structured commit message information. The `cz c` command is simply a shorthand version of `cz commit`.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncz commit\n```\n\nLANGUAGE: bash\nCODE:\n```\ncz c\n```\n\n----------------------------------------\n\nTITLE: Initializing Commitizen\nDESCRIPTION: This command initializes Commitizen in your project, creating a configuration file to manage commitizen settings. Running this command is the first step to using Commitizen.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncz init\n```\n\n----------------------------------------\n\nTITLE: Checking Git Commit Range with Commitizen\nDESCRIPTION: Uses the --rev-range option to check if commit messages in a specified range of commits follow the committing rules. Useful for validating multiple existing commits at once.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/check.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncz check --rev-range REV_RANGE\n```\n\n----------------------------------------\n\nTITLE: Setting Commitizen Version Scheme in pyproject.toml (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to specify the versioning scheme for commitizen within a `pyproject.toml` file. By setting `version_scheme = \"semver\"` under the `[tool.commitizen]` table, the tool will use Semantic Versioning. The default scheme is 'pep440', and 'semver2' is also available.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nversion_scheme = \"semver\"\n```\n\n----------------------------------------\n\nTITLE: Bumping Project Version\nDESCRIPTION: This command bumps the project's version according to the configured version scheme, creates a tag, and updates the changelog if configured. The version scheme and version provider can be configured in the `cz.toml` configuration file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncz bump\n```\n\n----------------------------------------\n\nTITLE: Checking Commit Message Using --message Option\nDESCRIPTION: Validates a commit message provided directly as a command line argument using the --message or -m flag.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/check.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncz check --message MESSAGE\n```\n\n----------------------------------------\n\nTITLE: Config Example JSON\nDESCRIPTION: Demonstrates a JSON configuration file for Commitizen, often preferred for NodeJS projects.  It mirrors the key configurations shown in the TOML example: the commitizen name, version, version file paths, and styling.  Dependencies:  Requires the `commitizen` library and the specific json configuration file (e.g. `.cz.json` or `cz.json`).  Inputs: None.  Outputs:  A JSON configuration file that will guide commitizen.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/config.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commitizen\": {\n    \"name\": \"cz_conventional_commits\",\n    \"version\": \"0.1.0\",\n    \"version_files\": [\"src/__version__.py\", \"pyproject.toml:version\"],\n    \"style\": [\n      [\"qmark\", \"fg:#ff9d00 bold\"],\n      [\"question\", \"bold\"],\n      [\"answer\", \"fg:#ff9d00 bold\"],\n      [\"pointer\", \"fg:#ff9d00 bold\"],\n      [\"highlighted\", \"fg:#ff9d00 bold\"],\n      [\"selected\", \"fg:#cc5454\"],\n      [\"separator\", \"fg:#cc5454\"],\n      [\"instruction\", \"\"],\n      [\"text\", \"\"],\n      [\"disabled\", \"fg:#858585 italic\"]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Commit Message Length with Commitizen in Shell\nDESCRIPTION: This code demonstrates using the '-l' or '--message-length-limit' argument to enforce a maximum length for the commit message's first line. If the subject exceeds the specified character limit, Commitizen raises an exception. The snippet shows limiting to 72 characters, following community best practices. Only the first line (type plus subject for Conventional Commits) is checked; the body and footer are not restricted.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/commit.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncz commit -l 72\n```\n\n----------------------------------------\n\nTITLE: Config Example YAML\nDESCRIPTION: Provides a YAML configuration file, suitable for projects like Go or those using Helm charts. This example is a direct translation of the settings from the other formats.  Dependencies:  Requires the `commitizen` library and specific yaml configuration file (e.g. `.cz.yaml` or `cz.yaml`).  Inputs: None.  Outputs: A YAML configuration file that will guide commitizen.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/config.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncommitizen:\n  name: cz_conventional_commits\n  version: 0.1.0\n  version_files:\n    - src/__version__.py\n    - pyproject.toml:version\n  style:\n    - - qmark\n      - fg:#ff9d00 bold\n    - - question\n      - bold\n    - - answer\n      - fg:#ff9d00 bold\n    - - pointer\n      - fg:#ff9d00 bold\n    - - highlighted\n      - fg:#ff9d00 bold\n    - - selected\n      - fg:#cc5454\n    - - separator\n      - fg:#cc5454\n    - - instruction\n      - \"\"\n    - - text\n      - \"\"\n    - - disabled\n      - fg:#858585 italic\n```\n\n----------------------------------------\n\nTITLE: Using --get-next Flag with Bump Command in Bash\nDESCRIPTION: Shows how to use the `--get-next` flag with the `cz bump` command to output the next version to stdout without actually performing the bump.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncz bump --get-next\n```\n\n----------------------------------------\n\nTITLE: Comparing Dry Run vs Get Next Output in Bash\nDESCRIPTION: Shows the difference between the `--dry-run` and `--get-next` flag outputs when determining the next version.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbump: version 3.28.0 → 3.29.0\ntag to create: v3.29.0\nincrement detected: MINOR\n```\n\n----------------------------------------\n\nTITLE: Customizing Commitizen with TOML Configuration - TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to fully customize Commitizen's prompts and commit style using the [tool.commitizen] table. Key parameters include message templates using Jinja2, custom regular expressions for commit validation, commit types, bump rules, and interactive questions for CLI prompts. Requires Commitizen installed and the config to be present in pyproject.toml; fields such as 'message_template', 'schema_pattern', and 'bump_pattern' should be adapted to match the project's desired commit and changelog conventions.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.commitizen]\nname = \"cz_customize\"\n\n[tool.commitizen.customize]\nmessage_template = \"{{change_type}}:{% if show_message %} {{message}}{% endif %}\"\nexample = \"feature: this feature enable customize through config file\"\nschema = \"<type>: <body>\"\nschema_pattern = \"(feature|bug fix):(\\\\s.*)\"\nbump_pattern = \"^(break|new|fix|hotfix)\"\nbump_map = {\"break\" = \"MAJOR\", \"new\" = \"MINOR\", \"fix\" = \"PATCH\", \"hotfix\" = \"PATCH\"}\nchange_type_order = [\"BREAKING CHANGE\", \"feat\", \"fix\", \"refactor\", \"perf\"]\ninfo_path = \"cz_customize_info.txt\"\ninfo = \"\"\"\nThis is customized info\n\"\"\"\ncommit_parser = \"^(?P<change_type>feature|bug fix):\\\\s(?P<message>.*)?\"\nchangelog_pattern = \"^(feature|bug fix)?(!)?\"\nchange_type_map = {\"feature\" = \"Feat\", \"bug fix\" = \"Fix\"}\n\n[[tool.commitizen.customize.questions]]\ntype = \"list\"\nname = \"change_type\"\nchoices = [{value = \"feature\", name = \"feature: A new feature.\"}, {value = \"bug fix\", name = \"bug fix: A bug fix.\"}]\n# choices = [\"feature\", \"fix\"]  # short version\nmessage = \"Select the type of change you are committing\"\n\n[[tool.commitizen.customize.questions]]\ntype = \"input\"\nname = \"message\"\nmessage = \"Body.\"\n\n[[tool.commitizen.customize.questions]]\ntype = \"confirm\"\nname = \"show_message\"\nmessage = \"Do you want to add body message in commit?\"\n```\n\n----------------------------------------\n\nTITLE: Get Next Output Example in Bash\nDESCRIPTION: Shows the simplified output when using the `--get-next` flag, which only returns the version number.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n3.29.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Changelog Generation on Bump\nDESCRIPTION: This TOML configuration sets the `update_changelog_on_bump` option to `true`. This ensures that the changelog is automatically updated whenever the version is bumped.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nupdate_changelog_on_bump = true\n```\n\n----------------------------------------\n\nTITLE: Config Example TOML\nDESCRIPTION: Provides an example configuration file using the TOML format for a Python project.  It sets several commitizen options, including the name, version, version files, changelog update setting, and style preferences.  Dependencies:  Requires the `commitizen` library and a `pyproject.toml` file or related config file (e.g. `.cz.toml`, `cz.toml`).  Inputs: None.  Outputs:  Configuration file that will guide commitizen.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/config.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nname = \"cz_conventional_commits\"\nversion = \"0.1.0\"\nversion_files = [\n    \"src/__version__.py\",\n    \"pyproject.toml:version\"\n]\nupdate_changelog_on_bump = true\nstyle = [\n    [\"qmark\", \"fg:#ff9d00 bold\"],\n    [\"question\", \"bold\"],\n    [\"answer\", \"fg:#ff9d00 bold\"],\n    [\"pointer\", \"fg:#ff9d00 bold\"],\n    [\"highlighted\", \"fg:#ff9d00 bold\"],\n    [\"selected\", \"fg:#cc5454\"],\n    [\"separator\", \"fg:#cc5454\"],\n    [\"instruction\", \"\"],\n    [\"text\", \"\"],\n    [\"disabled\", \"fg:#858585 italic\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Version Range Using Commitizen\nDESCRIPTION: This command generates a changelog for a specific version range, the `--dry-run` option can be used to preview the generated changelog without writing it to a file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncz changelog 0.3.0..0.4.0 --dry-run\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom Jira commitizen class in Python\nDESCRIPTION: Example of creating a custom commitizen class for Jira integration by inheriting from BaseCommitizen. This class defines custom questions and message formatting specifically for Jira issue references.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom commitizen.cz.base import BaseCommitizen\nfrom commitizen.defaults import Questions\n\n\nclass JiraCz(BaseCommitizen):\n    # Questions = Iterable[MutableMapping[str, Any]]\n    # It expects a list with dictionaries.\n    def questions(self) -> Questions:\n        \"\"\"Questions regarding the commit message.\"\"\"\n        questions = [\n            {\"type\": \"input\", \"name\": \"title\", \"message\": \"Commit title\"},\n            {\"type\": \"input\", \"name\": \"issue\", \"message\": \"Jira Issue number:\"},\n        ]\n        return questions\n\n    def message(self, answers: dict) -> str:\n        \"\"\"Generate the message with the given answers.\"\"\"\n        return \"{0} (#{1})\".format(answers[\"title\"], answers[\"issue\"])\n\n    def example(self) -> str:\n        \"\"\"Provide an example to help understand the style (OPTIONAL)\n\n        Used by `cz example`.\n        \"\"\"\n        return \"Problem with user (#321)\"\n\n    def schema(self) -> str:\n        \"\"\"Show the schema used (OPTIONAL)\n\n        Used by `cz schema`.\n        \"\"\"\n        return \"<title> (<issue>)\"\n\n    def info(self) -> str:\n        \"\"\"Explanation of the commit rules. (OPTIONAL)\n\n        Used by `cz info`.\n        \"\"\"\n        return \"We use this because is useful\"\n```\n\n----------------------------------------\n\nTITLE: Signing a Commit via Commitizen with Deprecated and Current Syntax in Shell\nDESCRIPTION: This shell command shows how to pass the git commit '-s' flag through Commitizen to sign a commit. The preferred syntax uses the double dash separator, as in cz c -- -S. The snippet notes that older approaches like cz commit --signoff or -s are deprecated, promoting more direct compatibility with git's interface. This ensures that commit signing integrates seamlessly with pre-commit hooks and signature verification tools.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/commit.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncz c -- -S\n```\n\n----------------------------------------\n\nTITLE: Bumping Version and Generating Changelog\nDESCRIPTION: This command directly bumps the version and simultaneously generates the changelog. This provides a convenient way to update both the version and the changelog in a single step.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncz bump --changelog\n```\n\n----------------------------------------\n\nTITLE: Creating a setup.py for a custom commitizen plugin in Python\nDESCRIPTION: Example setup.py file required to make a custom commitizen class available as a plugin. It defines the package metadata and entry point to register the custom commitizen class.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup\n\nsetup(\n    name=\"JiraCommitizen\",\n    version=\"0.1.0\",\n    py_modules=[\"cz_jira\"],\n    license=\"MIT\",\n    long_description=\"this is a long description\",\n    install_requires=[\"commitizen\"],\n    entry_points={\"commitizen.plugin\": [\"cz_jira = cz_jira:JiraCz\"]},\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Project Version\nDESCRIPTION: This command retrieves the project's version, as specified in the Commitizen configuration. The `-p` flag specifies that the project version is desired rather than the version of the commitizen-tools package itself.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncz version -p\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Workflow for Automatic Version Bumping with Commitizen\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that triggers on pushes to the master branch, checks out the repository, and runs Commitizen to bump the version and generate changelogs, with dependency on a personal access token stored as a secret. It includes a conditional to avoid re-triggering on bump commits.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/github_actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Bump version\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  bump-version:\n    if: \"!startsWith(github.event.head_commit.message, 'bump:')\"\n    runs-on: ubuntu-latest\n    name: \"Bump version and create changelog with commitizen\"\n    steps:\n      - name: Check out\n        uses: actions/checkout@v3\n        with:\n          token: \"${{ secrets.PERSONAL_ACCESS_TOKEN }}\"\n          fetch-depth: 0\n      - name: Create bump and changelog\n        uses: commitizen-tools/commitizen-action@master\n        with:\n          github_token: \"${{ secrets.PERSONAL_ACCESS_TOKEN }}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Commitizen with pip\nDESCRIPTION: Instructions to install Commitizen using pip with the --user flag.  This installs Commitizen for the current user.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --user -U commitizen\n```\n\n----------------------------------------\n\nTITLE: Exposing Commitizen Plugin via Setuptools Entrypoint (Python)\nDESCRIPTION: Demonstrates how to register the migrated `PluginCz` class as a Commitizen plugin using setuptools entry points in `setup.py`. The `commitizen.plugin` group is used, mapping the name 'plugin' to the class `cz_plugin:PluginCz`. This makes the plugin discoverable by Commitizen under the name 'plugin'.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup\n\nsetup(\n    name=\"MyPlugin\",\n    version=\"0.1.0\",\n    py_modules=[\"cz_plugin\"],\n    entry_points={\"commitizen.plugin\": [\"plugin = cz_plugin:PluginCz\"]},\n    ...,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Commitizen with pip in a project\nDESCRIPTION: Instructions to install Commitizen as a project dependency using pip.  This adds Commitizen to the project's requirements.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -U commitizen\n```\n\n----------------------------------------\n\nTITLE: Ignoring Non-Version Git Tags in Commitizen - TOML\nDESCRIPTION: Configures Commitizen to ignore specific tag formats (`ignored_tag_formats`) that are present in the repository but are not version tags managed by Commitizen. This prevents warnings or errors related to these tags during operations like changelog generation. Requires a Commitizen configuration file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/faq.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\ntag_format = \"v${version}\"\nignored_tag_formats = [\n    \"stable\",\n    \"component-*\",\n    \"env/*\",\n    \"v${major}.${minor}\",\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Commitizen on macOS with Homebrew\nDESCRIPTION: Instructions to install Commitizen on macOS using Homebrew. This is a common package manager for macOS.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install commitizen\n```\n\n----------------------------------------\n\nTITLE: Customizing Changelog Template in Commitizen Plugin (Python)\nDESCRIPTION: Provides an example of customizing the changelog template within a custom Commitizen class `MyPlugin`. It sets a custom template file (`CHANGELOG.md.jinja`), specifies a `PackageLoader` from Jinja2 to load the template from the plugin's package directory ('my_plugin/templates'), and adds extra variables (`template_extras`) to be passed to the template during rendering. Depends on `commitizen.cz.base.BaseCommitizen` and `jinja2.PackageLoader`.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom commitizen.cz.base import BaseCommitizen\nfrom jinja2 import PackageLoader\n\n\nclass MyPlugin(BaseCommitizen):\n    template = \"CHANGELOG.md.jinja\"\n    template_loader = PackageLoader(\"my_plugin\", \"templates\")\n    template_extras = {\"key\": \"value\"}\n```\n\n----------------------------------------\n\nTITLE: Using Extra Variables in Changelog\nDESCRIPTION: This command passes extra variables to the changelog template. The `--extra` or `-e` options can be used to define key-value pairs.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncz changelog --extra key=value -e short=\"quoted value\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Commitizen with JSON Configuration - JSON\nDESCRIPTION: This JSON snippet provides the same customization options for Commitizen as the TOML example, but is suited for using a .cz.json or similar file. It illustrates how to set commit prompts, bump mapping, message templating using Jinja2, validation patterns, and input questions via nested JSON objects. To use, save this JSON structure in a configuration file and ensure Commitizen is configured to load it; certain fields may require further tailoring depending on individual project requirements.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"commitizen\": {\n        \"name\": \"cz_customize\",\n        \"customize\": {\n            \"message_template\": \"{{change_type}}:{% if show_message %} {{message}}{% endif %}\",\n            \"example\": \"feature: this feature enable customize through config file\",\n            \"schema\": \"<type>: <body>\",\n            \"schema_pattern\": \"(feature|bug fix):(\\\\s.*)\",\n            \"bump_pattern\": \"^(break|new|fix|hotfix)\",\n            \"bump_map\": {\n                \"break\": \"MAJOR\",\n                \"new\": \"MINOR\",\n                \"fix\": \"PATCH\",\n                \"hotfix\": \"PATCH\"\n            },\n            \"change_type_order\": [\"BREAKING CHANGE\", \"feat\", \"fix\", \"refactor\", \"perf\"],\n            \"info_path\": \"cz_customize_info.txt\",\n            \"info\": \"This is customized info\",\n            \"commit_parser\": \"^(?P<change_type>feature|bug fix):\\\\s(?P<message>.*)?\",\n            \"changelog_pattern\": \"^(feature|bug fix)?(!)?\",\n            \"change_type_map\": {\"feature\": \"Feat\", \"bug fix\": \"Fix\"},\n            \"questions\": [\n                {\n                    \"type\": \"list\",\n                    \"name\": \"change_type\",\n                    \"choices\": [\n                        {\n                            \"value\": \"feature\",\n                            \"name\": \"feature: A new feature.\"\n                        },\n                        {\n                            \"value\": \"bug fix\",\n                            \"name\": \"bug fix: A bug fix.\"\n                        }\n                    ],\n                    \"message\": \"Select the type of change you are committing\"\n                },\n                {\n                    \"type\": \"input\",\n                    \"name\": \"message\",\n                    \"message\": \"Body.\"\n                },\n                {\n                    \"type\": \"confirm\",\n                    \"name\": \"show_message\",\n                    \"message\": \"Do you want to add body message in commit?\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pre-commit Hooks to Latest\nDESCRIPTION: This command updates the pre-commit hooks to the latest versions, resolving the warning against using `master` as the revision in the pre-commit configuration.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npre-commit autoupdate\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog (Dry Run)\nDESCRIPTION: This command generates a changelog using the specified version (obtained via `cz version -p`) but only performs a dry run, meaning that no changes are written to disk. This is useful for previewing the generated changelog.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncz changelog --dry-run \"$(cz version -p)\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Tag Format with Bump Command in Bash\nDESCRIPTION: Examples of using the `--tag-format` flag to customize the Git tag format for version bumping.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncz bump --tag-format=\"v$version\"\n\ncz bump --tag-format=\"v$minor.$major.$patch$prerelease.$devrelease\"\n```\n\n----------------------------------------\n\nTITLE: Generating Full Changelog Using Commitizen\nDESCRIPTION: This command generates a full changelog based on the commit rules established in the project. It parses commit messages and structures the changelog accordingly.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncz changelog\n```\n\n----------------------------------------\n\nTITLE: Creating and configuring a commit-msg Git hook\nDESCRIPTION: This snippet demonstrates how to manually create and configure a commit-msg Git hook. It creates the file, makes it executable, and adds a script that uses `cz check` to validate commit messages, aborting the commit if invalid. The `$MSG_FILE` variable contains the path to the commit message file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/auto_check.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd .git/hooks\ntouch commit-msg\nchmod +x commit-msg\n```\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\nMSG_FILE=$1\ncz check --allow-abort --commit-msg-file $MSG_FILE\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Tag Format and Version Scheme in Commitizen - YAML\nDESCRIPTION: Defines the default tag format as the exact version string and uses the PEP440 versioning scheme in Commitizen's YAML configuration. This setup generates tags like '1.0.0', recognizes these tags for versioning operations such as bumping releases and changelog generation, and identifies the current version via the SCM provider. This snippet requires Commitizen tooling and adherence to the PEP440 standard for version numbering.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/tag_format.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[tool.commitizen]\ntag_format: $version\nversion_scheme: pep440\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Unreleased Version\nDESCRIPTION: This command generates a changelog using the provided unreleased version. It is useful for creating changelogs before bumping the version, using the correct tag.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncz changelog --unreleased-version=\"v1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Changelog Start Revision\nDESCRIPTION: This command specifies a git revision from which to start generating the changelog. This can be useful to prevent parsing of older commit messages. It can be updated in the `toml` file with the key `changelog_start_rev` under `tools.commitizen`\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncz changelog --start-rev=\"v0.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Merging Prereleases in TOML\nDESCRIPTION: This TOML setting enables the merging of prerelease changes into the next non-prerelease version's changelog entry. This configuration controls how pre-release versions are handled in changelog generation.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[tools.commitizen]\n# ...\nchangelog_merge_prerelease = true\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Given Version Using Commitizen\nDESCRIPTION: This command generates a changelog for a specific version. The `--dry-run` option can be used to preview the generated changelog without writing it to a file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncz changelog 0.3.0 --dry-run\n```\n\n----------------------------------------\n\nTITLE: Setting Changelog Start Revision in TOML\nDESCRIPTION: Sets the starting git revision for changelog generation in the configuration file.  Commits before the specified revision are ignored.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[tools.commitizen]\n# ...\nchangelog_start_rev = \"v0.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Incremental Changelog Generation in TOML File\nDESCRIPTION: This TOML setting enables incremental changelog generation within the commitizen configuration. Incremental generation builds from the latest version, updates the unreleased area, and allows for manual edits to the changelog.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tools.commitizen]\n# ...\nchangelog_incremental = true\n```\n\n----------------------------------------\n\nTITLE: Specifying Changelog File Name\nDESCRIPTION: This command specifies the name of the output changelog file using the `--file-name` option. The changelog file will be a markdown file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncz changelog --file-name=\"CHANGES.md\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tag Format with Semantic Versioning in Commitizen - YAML\nDESCRIPTION: Illustrates configuring Commitizen to use a semantic versioning (semver) scheme with a 'v' prefix in tags by setting 'tag_format' to 'v${version}' and 'version_scheme' to 'semver'. This produces tags like 'v1.0.0' upon version bumps, and ensures version generation follows semver rules. Both '$version' and '${version}' syntax forms are interchangeable. This snippet assumes Commitizen installed and familiar with semver.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/tag_format.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n[tool.commitizen]\ntag_format: v${version}\nversion_scheme: semver\n```\n\n----------------------------------------\n\nTITLE: Implementing custom bump rules in Python\nDESCRIPTION: Example showing how to define custom semantic versioning bump rules by specifying a pattern to extract information from commits and a mapping to determine version increment type.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom commitizen.cz.base import BaseCommitizen\n\n\nclass StrangeCommitizen(BaseCommitizen):\n    bump_pattern = r\"^(break|new|fix|hotfix)\"\n    bump_map = {\"break\": \"MAJOR\", \"new\": \"MINOR\", \"fix\": \"PATCH\", \"hotfix\": \"PATCH\"}\n```\n\n----------------------------------------\n\nTITLE: Checking Commit Message with Allow Abort Option\nDESCRIPTION: Validates a commit message while permitting empty messages that would normally instruct Git to abort a commit. Useful for wrapper scripts that use Git's --allow-empty-message flag.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/check.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncz check --message MESSAGE --allow-abort\n```\n\n----------------------------------------\n\nTITLE: Running a custom bump command in Bash\nDESCRIPTION: Command for triggering a version bump using a custom commitizen class named 'cz_strange'.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncz -n cz_strange bump\n```\n\n----------------------------------------\n\nTITLE: Customizing Commitizen with YAML Configuration - YAML\nDESCRIPTION: This YAML example outlines how to apply the same Commitizen customization approach using a YAML configuration file. Configuration fields include commit message templates, validation patterns, bump semantic mapping, and the list of CLI questions. Save as .cz.yaml or similar and reference it from Commitizen for the changes to apply. All variables and formatting in the YAML file should be checked for correct indentation and YAML syntax compliance.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ncommitizen:\n  name: cz_customize\n  customize:\n    message_template: \"{{change_type}}:{% if show_message %} {{message}}{% endif %}\"\n    example: 'feature: this feature enable customize through config file'\n    schema: \"<type>: <body>\"\n    schema_pattern: \"(feature|bug fix):(\\\\s.*)\"\n    bump_pattern: \"^(break|new|fix|hotfix)\"\n    commit_parser: \"^(?P<change_type>feature|bug fix):\\\\s(?P<message>.*)?\"\n    changelog_pattern: \"^(feature|bug fix)?(!)?\"\n    change_type_map:\n      feature: Feat\n      bug fix: Fix\n    bump_map:\n      break: MAJOR\n      new: MINOR\n      fix: PATCH\n      hotfix: PATCH\n    change_type_order: [\"BREAKING CHANGE\", \"feat\", \"fix\", \"refactor\", \"perf\"]\n    info_path: cz_customize_info.txt\n    info: This is customized info\n    questions:\n    - type: list\n      name: change_type\n      choices:\n      - value: feature\n        name: 'feature: A new feature.'\n      - value: bug fix\n        name: 'bug fix: A bug fix.'\n      message: Select the type of change you are committing\n    - type: input\n      name: message\n      message: 'Body.'\n    - type: confirm\n      name: show_message\n      message: 'Do you want to add body message in commit?'\n```\n\n----------------------------------------\n\nTITLE: Using cz-conventional-gitmoji Commitizen Template\nDESCRIPTION: This command executes the `cz` command with the `cz_gitmoji` name to trigger the gitmoji-based commitizen workflow. Requires the `commitizen` package and the `cz-conventional-gitmoji` plugin to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncz --name cz_gitmoji commit\n```\n\n----------------------------------------\n\nTITLE: Installing conventional-JIRA Commitizen Template\nDESCRIPTION: This command installs the `conventional-JIRA` Commitizen template from PyPI.  This template restricts commit scopes to a JIRA issue format. Requires `pip` to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install conventional-JIRA\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit using pip\nDESCRIPTION: This snippet installs the pre-commit tool using pip, which is a prerequisite for automating commit message checks using the pre-commit framework. pre-commit helps manage Git hooks.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/auto_check.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install pre-commit\n```\n\n----------------------------------------\n\nTITLE: Configuring pre-commit with commitizen\nDESCRIPTION: This YAML configuration file specifies the commitizen hook within the pre-commit framework. It defines the repository, revision, and hook ID to use for commit message checks during the commit-msg stage.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/auto_check.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nrepos:\n  - repo: https://github.com/commitizen-tools/commitizen\n    rev: v1.17.0\n    hooks:\n      - id: commitizen\n        stages: [commit-msg]\n```\n\n----------------------------------------\n\nTITLE: Bumping Component Versions Independently\nDESCRIPTION: Shell commands to bump versions for specific components by targeting their individual configuration files with the commitizen CLI.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/monorepo_guidance.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncz --config library-b/.cz.toml bump --yes\ncz --config library-z/.cz.toml bump --yes\n```\n\n----------------------------------------\n\nTITLE: Installing cz-emoji Commitizen Template\nDESCRIPTION: This command installs the `cz-emoji` Commitizen template from PyPI. This template extends conventional commits with emojis. Requires `pip` to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install cz-emoji\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Workflow for Publishing Python Packages with Poetry and PyPI\nDESCRIPTION: This YAML snippet automates publishing a Python package upon tagging. It sets up Python, installs Poetry via a dedicated action, installs dependencies, and executes a bash script to publish the package to PyPI using API tokens stored as secrets. It requires configuring secrets for PyPI credentials and customizing the publish script.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/github_actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Upload Python Package\n\non:\n  push:\n    tags:\n      - \"*\" # Will trigger for every tag\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: latest\n          virtualenvs-in-project: true\n          virtualenvs-create: true\n      - name: Install dependencies\n        run: |\n          poetry --version\n          poetry install\n      - name: Build and publish\n        env:\n          PYPI_USERNAME: __token__\n          PYPI_PASSWORD: \"${{ secrets.PYPI_PASSWORD }}\"\n        run: |\n          ./scripts/publish\n```\n\n----------------------------------------\n\nTITLE: Removing Remote Git Tag - Shell\nDESCRIPTION: Shows the shell command to delete a specific tag from a remote Git repository (defaulting to `origin`). This is necessary if the tag created during a version bump was already pushed to the server. Requires push access to the remote repository.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/faq.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit push --delete origin <created_tag>\n```\n\n----------------------------------------\n\nTITLE: Pre-Bump Hooks Configuration in TOML\nDESCRIPTION: Example of configuring commands to run before committing and tagging a version bump.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\npre_bump_hooks = [\n  \"scripts/generate_documentation.sh\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Commitizen with Poetry (>= 1.2.0)\nDESCRIPTION: Instructions to install Commitizen as a development dependency using Poetry version 1.2.0 or later.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry add commitizen --group dev\n```\n\n----------------------------------------\n\nTITLE: cz bump Options\nDESCRIPTION: This snippet lists all the available options for the `cz bump` command. The options cover functionalities such as dry-run mode, changelog generation, tag formatting, pre-release management, increment control, and commit settings.  These options allow fine-grained control over the version bumping process.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/tests/commands/test_bump_command/test_bump_command_shows_description_when_use_help_option.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\noptions:\n  -h, --help            show this help message and exit\n  --dry-run             show output to stdout, no commit, no modified files\n  --files-only          bump version in the files from the config\n  --local-version       bump only the local version portion\n  --changelog, -ch      generate the changelog for the newest version\n  --no-verify           this option bypasses the pre-commit and commit-msg\n                        hooks\n  --yes                 accept automatically questions done\n  --tag-format TAG_FORMAT\n                        the format used to tag the commit and read it, use it\n                        in existing projects, wrap around simple quotes\n  --bump-message BUMP_MESSAGE\n                        template used to create the release commit, useful\n                        when working with CI\n  --prerelease, -pr {alpha,beta,rc}\n                        choose type of prerelease\n  --devrelease, -d DEVRELEASE\n                        specify non-negative integer for dev. release\n  --increment {MAJOR,MINOR,PATCH}\n                        manually specify the desired increment\n  --increment-mode {linear,exact}\n                        set the method by which the new version is chosen.\n                        'linear' (default) guesses the next version based on\n                        typical linear version progression, such that bumping\n                        of a pre-release with lower precedence than the\n                        current pre-release phase maintains the current phase\n                        of higher precedence. 'exact' applies the changes that\n                        have been specified (or determined from the commit\n                        log) without interpretation, such that the increment\n                        and pre-release are always honored\n  --check-consistency, -cc\n                        check consistency among versions defined in commitizen\n                        configuration and version_files\n  --annotated-tag, -at  create annotated tag instead of lightweight one\n  --annotated-tag-message, -atm ANNOTATED_TAG_MESSAGE\n                        create annotated tag message\n  --gpg-sign, -s        sign tag instead of lightweight one\n  --changelog-to-stdout\n                        Output changelog to the stdout\n  --git-output-to-stderr\n                        Redirect git output to stderr\n  --retry               retry commit if it fails the 1st time\n  --major-version-zero  keep major version at zero, even for breaking changes\n  --template, -t TEMPLATE\n                        changelog template file name (relative to the current\n                        working directory)\n  --extra, -e EXTRA     a changelog extra variable (in the form 'key=value')\n  --file-name FILE_NAME\n                        file name of changelog (default: 'CHANGELOG.md')\n  --prerelease-offset PRERELEASE_OFFSET\n                        start pre-releases with this offset\n  --version-scheme {pep440,semver,semver2}\n                        choose version scheme\n  --version-type {pep440,semver,semver2}\n                        Deprecated, use --version-scheme\n  --build-metadata BUILD_METADATA\n                        Add additional build-metadata to the version-number\n  --get-next            Determine the next version and write to stdout\n  --allow-no-commit     bump version without eligible commits\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Workflow for Creating Releases with Commitizen and GitHub Release Action\nDESCRIPTION: This YAML snippet modifies the previous workflow to generate a changelog output file and then uses the softprops/action-gh-release to create a GitHub release with the new version tag, sourcing the changelog content from the specified file and utilizing environment variables.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/github_actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create bump and changelog\n  uses: commitizen-tools/commitizen-action@master\n  with:\n    github_token: \"${{ secrets.PERSONAL_ACCESS_TOKEN }}\"\n    changelog_increment_filename: body.md\n- name: Release\n  uses: softprops/action-gh-release@v1\n  with:\n    body_path: \"body.md\"\n    tag_name: \"${{ env.REVISION }}\"\n  env:\n    GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Project Metadata using PEP621 - TOML\nDESCRIPTION: Shows the standard PEP621 format for defining project metadata like name and version in `pyproject.toml`. This configuration is used by tools like Commitizen to read project information. No specific dependencies other than a `pyproject.toml` file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/faq.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"spam\"\nversion = \"2.5.1\"\n```\n\n----------------------------------------\n\nTITLE: Commitizen Deno Provider Configuration\nDESCRIPTION: This YAML configuration demonstrates how to integrate the `deno-provider` into a Commitizen configuration. It sets the `version_provider` to `deno-provider` and configures other settings like `major_version_zero`, `name`, `tag_format`, `update_changelog_on_bump`, and `version_scheme`.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncommitizen:\n  major_version_zero: true\n  name: cz_conventional_commits\n  tag_format: $version\n  update_changelog_on_bump: true\n  version_provider: deno-provider\n  version_scheme: semver\n```\n\n----------------------------------------\n\nTITLE: Configuring Scope-Based Changelog Filtering\nDESCRIPTION: TOML configuration for filtering commits in the changelog based on conventional commit scopes, ensuring only relevant commits appear in component-specific changelogs.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/monorepo_guidance.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen.customize]\nchangelog_pattern = \"^(feat|fix)\\\\(library-b\\\\)(!)?:\" #the pattern on types can be a wild card or any types you wish to include\n```\n\n----------------------------------------\n\nTITLE: Configuring Commitizen PEP621 Version Provider - TOML\nDESCRIPTION: Configures Commitizen within `pyproject.toml` to use the `pep621` version provider. This setting tells Commitizen to read and update the project version from the `[project].version` field as defined by PEP621. Requires Commitizen and a `pyproject.toml` file with a `[project]` section.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/faq.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"spam\"\nversion = \"2.5.1\"\n\n[tool.commitizen]\nversion_provider = \"pep621\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Component-Specific Commitizen for Library Z\nDESCRIPTION: TOML configuration for library-z component defining version management, tag format with component identifier, and changelog generation settings.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/monorepo_guidance.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# library-z/.cz.toml\n[tool.commitizen]\nname = \"cz_customize\"\nversion = \"0.0.0\"\ntag_format = \"${version}-library-z\"\nignored_tag_formats = [\"${version}-library-*\"] # Avoid noise from other tags\nupdate_changelog_on_bump = true\n```\n\n----------------------------------------\n\nTITLE: Monorepo Directory Structure Examples\nDESCRIPTION: Shows two possible directory structures for organizing a monorepo with multiple independent libraries, each having their own commitizen configuration file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/monorepo_guidance.md#_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n.\n├── library-b\n│   └── .cz.toml\n└── library-z\n    └── .cz.toml\n```\n\nLANGUAGE: shell-session\nCODE:\n```\nsrc\n├── library-b\n│   └── .cz.toml\n└── library-z\n    └── .cz.toml\n```\n\n----------------------------------------\n\nTITLE: Bumping version with Commitizen\nDESCRIPTION: Example of how to use the `cz bump` command to automatically bump the project's version based on conventional commits.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncz bump\n```\n\n----------------------------------------\n\nTITLE: Creating Dev Releases using GitHub Run ID\nDESCRIPTION: Shows how to use the GitHub Actions environment variable `GITHUB_RUN_ID` with the `--devrelease` flag. This leverages the unique ID assigned to each workflow run by GitHub to generate a distinct developmental tag (e.g., `1.3.2.dev6048584598`).\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/dev_releases.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n--devrelease ${GITHUB_RUN_ID}\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Declarative Pipeline for Releases\nDESCRIPTION: This Groovy snippet defines a Jenkins declarative pipeline used for automating software releases. It includes environment setup and a conditional stage that uses the `useCz` helper to run the Commitizen bump command within a Docker container only on the primary branch and if the last commit wasn't a bump commit.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/jenkins_pipeline.md#_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\npipeline {\n  agent {\n    any\n  }\n  environment {\n    CI = 'true'\n  }\n  stages {\n    stage('Bump version') {\n      when {\n        beforeAgent true\n        expression { env.BRANCH_IS_PRIMARY }\n        not {\n          changelog '^bump:.+'\n        }\n      }\n      steps {\n        script {\n          useCz {\n            sh \"cz bump --changelog\"\n          }\n         // Here push back to your repository the new commit and tag\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrative PEP440 Developmental Release Format\nDESCRIPTION: Shows the general format for a PEP440 developmental release tag, where 'X.Y' is the base version and 'N' is a non-negative integer unique to the build.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/dev_releases.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nX.Y.devN\n```\n\n----------------------------------------\n\nTITLE: Checking Commit Message Using Pipe\nDESCRIPTION: Validates a commit message by piping the message content to the cz check command, providing an alternative method to the --message option.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/check.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho MESSAGE | cz check\n```\n\n----------------------------------------\n\nTITLE: Example GitHub Dev Release Output\nDESCRIPTION: An example of a developmental release tag generated using the GitHub workflow run ID method.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/dev_releases.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n1.3.2.dev6048584598\n```\n\n----------------------------------------\n\nTITLE: Creating Dev Releases using Unix Timestamp\nDESCRIPTION: Illustrates using the current Unix timestamp (seconds since epoch, obtained via `date +%s`) with the `--devrelease` flag. This provides a generally unique identifier for the developmental tag (e.g., `1.3.2.dev1696238452`), although there's a slight possibility of collision if builds start in the exact same second.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/dev_releases.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n--devrelease $(date +%s)\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Pipeline Configuration (YAML)\nDESCRIPTION: This YAML configuration defines a GitLab CI pipeline with two stages: test and auto-bump. The test stage runs the application's tests using docker-compose. The auto-bump stage, triggered on the master branch, installs commitizen, sets up SSH keys and git configuration for pushing changes, and automatically bumps the software version. The new version is extracted, set to an artifact, and a tag is created and pushed. The pipeline uses Docker and various Python packages. Dependencies include docker, docker-compose, and commitizen.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/gitlab_ci.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: docker:latest\n\nservices:\n  - docker:dind\n\nvariables:\n  API_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME\n\nbefore_script:\n  - apk add --no-cache py-pip\n  - pip install docker-compose\n\nstages:\n  - test\n  - auto-bump\n\ntest:\n  stage: test\n  script:\n    - docker-compose run -e DJANGO_ENVIRONMENT=dev your_project python manage.py test # run tests\n\nauto-bump:\n  stage: auto-bump\n  image: python:3.9\n  before_script:\n    - \"which ssh-agent || ( apt-get update -qy && apt-get install openssh-client -qqy )\"\n    - eval `ssh-agent -s`\n    - echo \"${SSH_PRIVATE_KEY}\" | tr -d '\\r' | ssh-add - > /dev/null # add ssh key\n    - pip3 install -U commitizen # install commitizen\n    - mkdir -p ~/.ssh\n    - chmod 700 ~/.ssh\n    - echo \"$SSH_PUBLIC_KEY\" >> ~/.ssh/id_rsa.pub\n    - '\\[ -f /.dockerenv \\] && echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config'\n  dependencies:\n    - test\n  script:\n    - git remote set-url origin git@gitlab.com:discover/rentee-core.git # git configuration\n    - git config --global user.email \"${CI_EMAIL}\" && git config --global user.name \"${CI_USERNAME}\"\n    - 'exists=`git show-ref refs/heads/master` && if [ -n \"$exists\" ]; then git branch -D master; fi'\n    - git checkout -b master\n    - cz bump --yes # execute auto bump and push to master\n    - git push origin master:$CI_COMMIT_REF_NAME\n    - TAG=$(head -n 1 VERSION) # get the new software version and save into artifacts\n    - echo \"#!/bin/sh\" >> variables\n    - echo \"export TAG='$TAG'\" >> variables\n    - git push origin $TAG\n  only:\n    refs:\n      - master\n  artifacts:\n    paths:\n      - variables\n```\n\n----------------------------------------\n\nTITLE: Using cookiecutter to create a custom commitizen template in Bash\nDESCRIPTION: Command to generate a new custom commitizen template using cookiecutter, which automates the setup process for creating a custom commitizen class.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter gh:commitizen-tools/commitizen_cz_template\n```\n\n----------------------------------------\n\nTITLE: Tag Format Configuration in TOML\nDESCRIPTION: Example of configuring custom tag format in the project configuration file for Commitizen.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\ntag_format = \"v$major.$minor.$patch$prerelease\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Commitizen Exceptions (Python)\nDESCRIPTION: Illustrates how to define a custom exception class, `NoSubjectProvidedException`, by inheriting from `commitizen.cz.exception.CzException`. This allows Commitizen to catch this specific exception type and display its message gracefully to the user.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom commitizen.cz.exception import CzException\n\n\nclass NoSubjectProvidedException(CzException):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks\nDESCRIPTION: This command installs the Commitizen hooks specified in the pre-commit configuration.  `--hook-type commit-msg` specifies that the commitizen hook should be installed for commit message linting, while `--hook-type pre-push` specifies that the commitizen-branch hook should be installed for pre-push branch name checking.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npre-commit install --hook-type commit-msg --hook-type pre-push\n```\n\n----------------------------------------\n\nTITLE: Setup Script for Registering Custom Provider with Entry Point\nDESCRIPTION: A setup.py example illustrating how to register a custom version provider so that Commitizen can recognize and utilize it. It specifies the package name, version, modules, dependencies, and entry points for integration.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/config.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom setuptools import setup\n\nsetup(\n    name=\"my-commitizen-provider\",\n    version=\"0.1.0\",\n    py_modules=[\"my_provider\"],\n    install_requires=[\"commitizen\"],\n    entry_points={\n        \"commitizen.provider\": [\n            \"my-provider = my_provider:MyProvider\",\n        ]\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Reverting Local Git Tag and Commit - Shell\nDESCRIPTION: Provides shell commands to revert the last local Git tag and the commit that updated version files (like `.cz.toml` or `CHANGELOG`). This is useful if a bump operation needs to be undone before pushing changes. Requires a Git repository and the last tag name.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/faq.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit tag --delete <created_tag>\ngit reset HEAD~\ngit reset --hard HEAD\n```\n\n----------------------------------------\n\nTITLE: Commitizen Initialization CLI Usage\nDESCRIPTION: This snippet shows the usage of the `cz init` command. It's used to initialize the Commitizen configuration file within a project. This sets up the tool and makes it ready for use. The `-h` or `--help` option provides information about the command.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/tests/commands/test_init_command/test_init_command_shows_description_when_use_help_option.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusage: cz init [-h]\n\ninit commitizen configuration\n\noptions:\n  -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Commitizen Help\nDESCRIPTION: Output of the `cz --help` command, displaying available options and subcommands for Commitizen.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ cz --help\nusage: cz [-h] [--debug] [-n NAME] [-nr NO_RAISE] {init,commit,c,ls,example,info,schema,bump,changelog,ch,check,version} ...\n\nCommitizen is a cli tool to generate conventional commits.\nFor more information about the topic go to https://conventionalcommits.org/\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --config              the path of configuration file\n  --debug               use debug mode\n  -n NAME, --name NAME  use the given commitizen (default: cz_conventional_commits)\n  -nr NO_RAISE, --no-raise NO_RAISE\n                        comma separated error codes that won't rise error, e.g: cz -nr 1,2,3 bump. See codes at https://commitizen-\n                        tools.github.io/commitizen/exit_codes/\n\ncommands:\n  {init,commit,c,ls,example,info,schema,bump,changelog,ch,check,version}\n    init                init commitizen configuration\n    commit (c)          create new commit\n    ls                  show available commitizens\n    example             show commit example\n    info                show information about the cz\n    schema              show commit schema\n    bump                bump semantic version based on the git log\n    changelog (ch)      generate changelog (note that it will overwrite existing file)\n    check               validates that a commit message matches the commitizen schema\n    version             get the version of the installed commitizen or the current project (default: installed commitizen)\n```\n\n----------------------------------------\n\nTITLE: Bump Message Configuration in TOML\nDESCRIPTION: Example of configuring the commit message template used when bumping versions.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nbump_message = \"release $current_version → $new_version [skip-ci]\"\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage for Cz Info\nDESCRIPTION: This snippet showcases the command-line usage for the `cz info` command. It provides the basic structure of the command, highlighting its purpose: to display information about the Commitizen tool.  The `-h` or `--help` option is available to display help messages.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/tests/commands/test_info_command/test_info_command_shows_description_when_use_help_option.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusage: cz info [-h]\n\nshow information about the cz\n\noptions:\n  -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: GPG Sign Configuration in TOML\nDESCRIPTION: Example of enabling GPG signing for Git tags when bumping versions.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\ngpg_sign = true\n```\n\n----------------------------------------\n\nTITLE: cz bump Positional Argument: MANUAL_VERSION\nDESCRIPTION: This snippet describes the positional argument `MANUAL_VERSION` for the `cz bump` command.  It allows the user to manually specify the version to bump to (e.g., 1.5.3). No specific dependencies are required, as it's a direct command-line input.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/tests/commands/test_bump_command/test_bump_command_shows_description_when_use_help_option.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npositional arguments:\n  MANUAL_VERSION        bump to the given version (e.g: 1.5.3)\n```\n\n----------------------------------------\n\nTITLE: Customizing Changelog Generation in Commitizen (Python)\nDESCRIPTION: Demonstrates creating a custom Commitizen class `StrangeCommitizen` by inheriting from `BaseCommitizen`. It customizes changelog generation by defining `changelog_pattern`, `commit_parser`, `change_type_map`, and implementing hooks like `changelog_message_builder_hook` to modify commit messages, `changelog_release_hook` to enrich release data, and `changelog_hook` to perform actions after generation (e.g., notifications). Depends on `commitizen.cz.base.BaseCommitizen`, `git`, and potentially external modules (`chat`, `compliance`).\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom commitizen.cz.base import BaseCommitizen\nimport chat\nimport compliance\nimport git\nfrom typing import Optional\n\n\nclass StrangeCommitizen(BaseCommitizen):\n    changelog_pattern = r\"^(break|new|fix|hotfix)\"\n    commit_parser = r\"^(?P<change_type>feat|fix|refactor|perf|BREAKING CHANGE)(?:\\((?P<scope>[^()\\r\\n]*)\\)|\\()?(?P<breaking>!)?:\\s(?P<message>.*)?\"\n    change_type_map = {\n        \"feat\": \"Features\",\n        \"fix\": \"Bug Fixes\",\n        \"refactor\": \"Code Refactor\",\n        \"perf\": \"Performance improvements\",\n    }\n\n    def changelog_message_builder_hook(\n        self, parsed_message: dict, commit: git.GitCommit\n    ) -> dict | list | None:\n        rev = commit.rev\n        m = parsed_message[\"message\"]\n        parsed_message[\n            \"message\"\n        ] = f\"{m} {rev} [{commit.author}]({commit.author_email})\"\n        return parsed_message\n\n    def changelog_release_hook(self, release: dict, tag: git.GitTag) -> dict:\n        release[\"author\"] = tag.author\n        return release\n\n    def changelog_hook(\n        self, full_changelog: str, partial_changelog: Optional[str]\n    ) -> str:\n        \"\"\"Executed at the end of the changelog generation\n\n        full_changelog: it's the output about to being written into the file\n        partial_changelog: it's the new stuff, this is useful to send slack messages or\n                           similar\n\n        Return:\n            the new updated full_changelog\n        \"\"\"\n        if partial_changelog:\n            chat.room(\"#committers\").notify(partial_changelog)\n        if full_changelog:\n            compliance.send(full_changelog)\n        full_changelog.replace(\" fix \", \" **fix** \")\n        return full_changelog\n```\n\n----------------------------------------\n\nTITLE: Prerelease Offset Configuration in TOML\nDESCRIPTION: Example of configuring the offset for prerelease versioning.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nprerelease_offset = 1\n```\n\n----------------------------------------\n\nTITLE: Post-Bump Hooks Configuration in TOML\nDESCRIPTION: Example of configuring commands to run after committing and tagging a version bump.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\npost_bump_hooks = [\n  \"scripts/slack_notification.sh\"\n]\n```\n\n----------------------------------------\n\nTITLE: Syntax for JIRA Workflow Transitions via Smart Commit\nDESCRIPTION: Explains the syntax for changing the workflow status of a JIRA Software issue using a Smart Commit. The specific transition is triggered by using its name prefixed with '#', optionally followed by a comment related to the transition.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/commitizen/cz/jira/jira_info.txt#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n<ignored text> ISSUE_KEY <ignored text> #<transition_name> <comment_string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Commitizen Tag Formats - TOML\nDESCRIPTION: Configures Commitizen to specify the format for newly created tags (`tag_format`) and list older formats (`legacy_tag_formats`) that should still be recognized for tasks like changelog generation and version calculation. Useful when changing the version tag format over time. Requires a Commitizen configuration file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/faq.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\ntag_format = \"v${version}\"\nlegacy_tag_formats = [\n    \"${version}\",\n    \"myproject-$version\",\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Revert Commit - Shell\nDESCRIPTION: Demonstrates the standard Git commands for creating a revert commit. It first reverts the specified commit SHA without immediately committing, then creates a new commit with a conventional commit message indicating the revert. Requires the SHA of the commit to be reverted.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/faq.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit revert --no-commit <SHA>\ngit commit -m \"revert: foo bar\"\n```\n\n----------------------------------------\n\nTITLE: Example of Logging Time via Smart Commit\nDESCRIPTION: Illustrates how to use the `#time` Smart Commit command to log work. This example logs 1 week, 2 days, 4 hours, and 30 minutes against issue JRA-34, accompanied by the comment 'Total work logged'.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/commitizen/cz/jira/jira_info.txt#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nJRA-34 #time 1w 2d 4h 30m Total work logged\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pull Request Workflow with Mermaid\nDESCRIPTION: This Mermaid code block describes the states and transitions for pull requests in the commitizen GitHub repository. It illustrates the PR lifecycle from creation through review, modification, and merging, including conditional paths based on review outcomes. Requires a markdown renderer that supports Mermaid diagrams.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/contributing.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    input[/pull request created/] -->\n    wait-for-review\n    --start reviewing -->\n    reviewing\n    --finish review -->\n    reviewed{approved}\n\n    reviewed --Y-->\n    wait-for-merge -->\n    output[/merge/]\n\n    reviewed --n-->\n    require-more-information{require more information}\n\n    require-more-information --y-->\n    wait-for-response\n    --response-->\n    require-more-information\n\n    require-more-information --n-->\n    wait-for-modification\n    --modification-received-->\n    review\n```\n\n----------------------------------------\n\nTITLE: Installing Commitizen with conda\nDESCRIPTION: Instructions to install Commitizen using conda. This leverages the conda-forge channel for package management.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge commitizen\n```\n\n----------------------------------------\n\nTITLE: Enabling Incremental Changelog Generation\nDESCRIPTION: This command enables incremental changelog generation using the `--incremental` flag. This feature allows to build the changelog from the latest version found, update the unreleased area, and manually touch the changelog without rewriting it.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncz changelog --incremental\n```\n\n----------------------------------------\n\nTITLE: Defining Issue Workflow with Mermaid\nDESCRIPTION: This Mermaid code block defines the states and transitions for issues in the commitizen GitHub repository. It visualizes the issue lifecycle from creation to closure, including triage, responses, implementation, and linking to PRs. Requires a markdown renderer that supports Mermaid diagrams.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/contributing.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    input[/issue created/] -->\n    needs-triage\n    needs-triage --triage--> close(wont-implement, wont-fix, duplicate, invalid)\n\n    needs-triage --triage--> wait-for-implementation\n    needs-triage --triage--> wait-for-response\n\n    wait-for-response --response--> needs-triage\n\n    wait-for-implementation --PR-created--> pr-created --PR-merged--> output[/close/]\n\n    close --> output[/close/]\n```\n\n----------------------------------------\n\nTITLE: Commitizen cz bump Command Usage\nDESCRIPTION: This code snippet describes the usage of the `cz bump` command in Commitizen. It shows available options and arguments for bumping the semantic version of a project based on the git log. It also includes options for generating changelogs, managing prereleases, and controlling commit behavior.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/tests/commands/test_bump_command/test_bump_command_shows_description_when_use_help_option.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusage: cz bump [-h] [--dry-run] [--files-only] [--local-version] [--changelog]\n               [--no-verify] [--yes] [--tag-format TAG_FORMAT]\n               [--bump-message BUMP_MESSAGE] [--prerelease {alpha,beta,rc}]\n               [--devrelease DEVRELEASE] [--increment {MAJOR,MINOR,PATCH}]\n               [--increment-mode {linear,exact}] [--check-consistency]\n               [--annotated-tag]\n               [--annotated-tag-message ANNOTATED_TAG_MESSAGE] [--gpg-sign]\n               [--changelog-to-stdout] [--git-output-to-stderr] [--retry]\n               [--major-version-zero] [--template TEMPLATE] [--extra EXTRA]\n               [--file-name FILE_NAME] [--prerelease-offset PRERELEASE_OFFSET]\n               [--version-scheme {pep440,semver,semver2}]\n               [--version-type {pep440,semver,semver2}]\n               [--build-metadata BUILD_METADATA] [--get-next]\n               [--allow-no-commit]\n               [MANUAL_VERSION]\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair\nDESCRIPTION: This bash snippet generates an SSH key pair using ssh-keygen.  It creates a private key (deploy_key) and a public key (deploy_key.pub), which are used for secure access to the Git repository from the GitLab CI runner. The -N \"\" option creates the key without a passphrase.  No further dependencies are needed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/gitlab_ci.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -f deploy_key -N \"\"\n```\n\n----------------------------------------\n\nTITLE: Installing commitizen-emoji Commitizen Template\nDESCRIPTION: This command installs the `commitizen-emoji` Commitizen template from PyPI.  This template extends conventional commits with emojis and optional time/task tracking. Requires `pip` to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npip install commitizen-emoji\n```\n\n----------------------------------------\n\nTITLE: Passing Git Commit Arguments through Commitizen in Shell\nDESCRIPTION: This shell snippet provides the syntax for passing native git commit CLI arguments through Commitizen with the use of a double dash -- separator. It allows users to leverage git features such as signing commits or adding files, which are not natively handled by Commitizen. The snippet shows both the generic syntax and an example adding -a and -S options for staging files and signing the commit, respectively. Requires Commitizen installed and git available in the environment.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/commit.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncz commit <commitizen-args> -- <git-cli-args>\n\n# e.g., cz commit --dry-run -- -a -S\n```\n\n----------------------------------------\n\nTITLE: Changing Tag Format with Legacy Tag Support in Commitizen - YAML\nDESCRIPTION: Demonstrates how to change the primary tag format in Commitizen to 'component-${version}' while preserving legacy tags formatted as 'v${version}'. The 'legacy_tag_formats' setting enables recognition of previous tags ensuring continuity in version history, changelog generation, and SCM version detection despite format changes. This requires proper Commitizen setup and understanding of tag format implications on versioning workflows.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/tag_format.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n[tool.commitizen]\ntag_format: component-${version}\nlegacy_tag_formats:\n - v${version}\n```\n\n----------------------------------------\n\nTITLE: Helper to Run Commitizen Commands in Docker\nDESCRIPTION: This Groovy helper function provides a convenient way to execute commands using Commitizen within a specified Docker container. It handles mounting the workspace and configuring Git user information inside the container before executing the provided script block, enabling consistent execution of Commitizen commands like `cz bump`.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/jenkins_pipeline.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\ndef useCz(String authorName = 'Jenkins CI Server', String authorEmail = 'your-jenkins@email.com', String image =  'registry.hub.docker.com/commitizen/commitizen:latest', Closure body) {\n    docker\n    .image(image)\n    .inside(\"-u 0 -v $WORKSPACE:/workspace -w /workspace -e GIT_AUTHOR_NAME='${authorName}' -e GIT_AUTHOR_EMAIL='${authorEmail}' -entrypoint='/bin/sh'\") {\n        sh 'git config --global --add safe.directory \"*\"'\n        sh \"git config --global user.email '${authorName}'\"\n        sh \"git config --global user.name '${authorEmail}'\"\n        body()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Commitizen with Poetry (< 1.2.0)\nDESCRIPTION: Instructions to install Commitizen as a development dependency using Poetry version less than 1.2.0.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry add commitizen --dev\n```\n\n----------------------------------------\n\nTITLE: Merging Prereleases into Next Release\nDESCRIPTION: Collects changes from prereleases into the next non-prerelease.  This means that if you have a prerelease version, and then a normal release, the changelog will show the prerelease changes as part of the changes of the normal release.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncz changelog --merge-prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing cz-github-jira-conventional Commitizen Template\nDESCRIPTION: This command installs the `cz-github-jira-conventional` Commitizen template from PyPI. This template requires a JIRA issue ID and creates links to GitHub commits and JIRA issues in the CHANGELOG. Requires `pip` to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install cz-github-jira-conventional\n```\n\n----------------------------------------\n\nTITLE: Checking Error Codes in Shell\nDESCRIPTION: Shows how to check which error code was raised and how to suppress specific error codes.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\necho $?\n\n# Output example\n3\n\n# Suppressing the error\ncz --no-raise 3\n\n# Suppressing multiple errors\ncz --no-raise 3,4,5\n```\n\n----------------------------------------\n\nTITLE: Defining a Legacy Commitizen Plugin (Python - Deprecated)\nDESCRIPTION: Shows the deprecated method for defining a Commitizen plugin. A class `PluginCz` inherits from `BaseCommitizen`, and an instance of this class is assigned to the `discover_this` variable to make it discoverable by Commitizen. This format requires migration.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom commitizen.cz.base import BaseCommitizen\n\n\nclass PluginCz(BaseCommitizen):\n    ...\n\n\ndiscover_this = PluginCz\n```\n\n----------------------------------------\n\nTITLE: Syntax for the #time Smart Commit Command\nDESCRIPTION: Details the syntax required to log work time against a JIRA Software issue using the `#time` command. Time durations are specified using 'w' for weeks, 'd' for days, 'h' for hours, and 'm' for minutes, followed by an optional comment about the work logged.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/commitizen/cz/jira/jira_info.txt#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n<ignored text> ISSUE_KEY <ignored text> #time <value>w <value>d <value>h <value>m <comment_string>\n```\n\n----------------------------------------\n\nTITLE: Permanent Commitizen argcomplete Activation\nDESCRIPTION: Command to permanently activate argcomplete for Commitizen for the current user by adding the necessary configuration to the .bashrc file.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nregister-python-argcomplete cz >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Configuring Component-Specific Commitizen for Library B\nDESCRIPTION: TOML configuration for library-b component defining version management, tag format with component identifier, and changelog generation settings.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/monorepo_guidance.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# library-b/.cz.toml\n[tool.commitizen]\nname = \"cz_customize\"\nversion = \"0.0.0\"\ntag_format = \"${version}-library-b\" # the component name can be a prefix or suffix with or without a separator\nignored_tag_formats = [\"${version}-library-*\"] # Avoid noise from other tags\nupdate_changelog_on_bump = true\n```\n\n----------------------------------------\n\nTITLE: Retrying the Last Commit Message with Commitizen in Shell\nDESCRIPTION: This shell snippet explains the Commitizen '--retry' option to reuse the previous commit message for a failed commit. The configuration key retry_after_failure can also be set to automatically retry. Conversely, the --no-retry flag forces Commitizen to prompt for a new message, bypassing this behavior. This supports smoother workflows when dealing with failed commits or message corrections.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/commit.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncz commit --retry\n```\n\nLANGUAGE: shell\nCODE:\n```\ncz commit --no-retry\n```\n\n----------------------------------------\n\nTITLE: Integrating Commitizen with Pre-commit\nDESCRIPTION: This YAML configuration integrates Commitizen with pre-commit to lint commit messages and branch names. It defines a repository with two hooks: `commitizen` for commit message checks and `commitizen-branch` for branch name checks, which run during the `commit-msg` and `pre-push` stages, respectively.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\nrepos:\n  - repo: https://github.com/commitizen-tools/commitizen\n    rev: master\n    hooks:\n      - id: commitizen\n      - id: commitizen-branch\n        stages: [pre-push]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Tag Formats in Commitizen Configuration - YAML\nDESCRIPTION: Shows how to configure Commitizen to ignore certain tags that are not relevant for versioning or belong to other components by listing them under 'ignored_tag_formats'. Wildcards (e.g., 'prefix-*') allow ignoring tags by prefix. This prevents Commitizen from issuing warnings on unknown tags and helps maintain clean versioning contexts. Requires Commitizen's YAML configuration support and understanding of wildcard patterns in ignored tags.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/tag_format.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n[tool.commitizen]\nignored_tag_formats:\n  - prod\n  - other-component-${version}\n  - prefix-*\n```\n\n----------------------------------------\n\nTITLE: Custom Version Provider Class in Python\nDESCRIPTION: A Python class example demonstrating how to create a custom version provider by extending the VersionProvider base class. This provider reads the version from a 'VERSION' file and writes updates back to it. It requires commitizen.providers.VersionProvider as a dependency.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/config.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path\nfrom commitizen.providers import VersionProvider\n\nclass MyProvider(VersionProvider):\n    file = Path() / \"VERSION\"\n\n    def get_version(self) -> str:\n        return self.file.read_text()\n\n    def set_version(self, version: str):\n        self.file.write_text(version)\n```\n\n----------------------------------------\n\nTITLE: Checking Commit Message with Custom Allowed Prefixes\nDESCRIPTION: Validates a commit message with custom allowed prefixes that bypass normal validation rules. By default, 'Merge', 'Revert', 'Pull request', 'fixup!' and 'squash!' are allowed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/check.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncz check --message MESSAGE --allowed-prefixes 'Merge' 'Revert' 'Custom Prefix'\n```\n\n----------------------------------------\n\nTITLE: Using --allow-no-commit Flag in Shell\nDESCRIPTION: Demonstrates how to use the `--allow-no-commit` flag to bump versions even when there are no eligible commits.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# bump a minor version even when there's only bug fixes, documentation changes or even no commits\ncz bump --incremental MINOR --allow-no-commit\n\n# bump version to 2.0.0 even when there's no breaking changes changes or even no commits\ncz bump --allow-no-commit 2.0.0\n```\n\n----------------------------------------\n\nTITLE: Example of a JIRA Workflow Transition via Smart Commit\nDESCRIPTION: Shows a concrete example of transitioning a JIRA issue. This commit message uses the `#close` command to move issue JRA-090 to the 'close' status and adds the comment 'Fixed this today'.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/commitizen/cz/jira/jira_info.txt#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nJRA-090 #close Fixed this today\n```\n\n----------------------------------------\n\nTITLE: Commitizen Configuration File\nDESCRIPTION: This TOML configuration file defines the Commitizen settings for a project, including the version and whether to update the changelog on version bumps. The `version` parameter is the current version of your project. `update_changelog_on_bump` dictates whether the changelog should be updated on version bumps.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/getting_started.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nversion = \"0.1.0\"\nupdate_changelog_on_bump = true\n```\n\n----------------------------------------\n\nTITLE: Installing commitizen-deno-provider\nDESCRIPTION: This command installs the `commitizen-deno-provider` from PyPI. This allows Commitizen to read and write version information from Deno projects (deno.json and jsr.json). Requires `pip` to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npip install commitizen-deno-provider\n```\n\n----------------------------------------\n\nTITLE: Example of Adding a JIRA Comment via Smart Commit\nDESCRIPTION: Provides a practical example of using the `#comment` Smart Commit command. This specific commit message adds the comment 'corrected indent issue' to the JIRA issue identified by the key JRA-34.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/commitizen/cz/jira/jira_info.txt#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nJRA-34 #comment corrected indent issue\n```\n\n----------------------------------------\n\nTITLE: Creating Dev Releases using CircleCI Build Number\nDESCRIPTION: Demonstrates passing the CircleCI environment variable `CIRCLE_BUILD_NUM` to the `--devrelease` flag. This uses the unique build number generated by CircleCI for each job run to create a unique developmental tag (e.g., `1.3.2.dev2478`).\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/dev_releases.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n--devrelease ${CIRCLE_BUILD_NUM}\n```\n\n----------------------------------------\n\nTITLE: Installing cz-conventional-gitmoji Commitizen Template\nDESCRIPTION: This command installs the `cz-conventional-gitmoji` Commitizen template from PyPI.  This template uses gitmojis in conventional commits and includes a pre-commit hook. Requires `pip` to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install cz-conventional-gitmoji\n```\n\n----------------------------------------\n\nTITLE: Installing Commitizen with pipx\nDESCRIPTION: Instructions to install Commitizen using pipx, the recommended approach. This ensures Commitizen is isolated from other Python packages.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx ensurepath\npipx install commitizen\npipx upgrade commitizen\n```\n\n----------------------------------------\n\nTITLE: Defining Version Variable in Python\nDESCRIPTION: A Python variable assignment that sets the version number to '1.2.10'. This is likely used to specify the current version of the Commitizen tool throughout the codebase.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/tests/test_bump_update_version_in_files/test_version_bump_increase_string_length.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nversion = \"1.2.10\"\n```\n\n----------------------------------------\n\nTITLE: Installing Commitizen Git Hooks via Bash\nDESCRIPTION: Downloads the `prepare-commit-msg` and `post-commit` Python hook scripts from the Commitizen GitHub repository using `wget` and makes them executable using `chmod` within the local repository's `.git/hooks` directory. This setup enables automatic commit message formatting by integrating Commitizen with Git.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/auto_prepare_commit_message.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -O .git/hooks/prepare-commit-msg https://raw.githubusercontent.com/commitizen-tools/commitizen/master/hooks/prepare-commit-msg.py\nchmod +x .git/hooks/prepare-commit-msg\nwget -O .git/hooks/post-commit https://raw.githubusercontent.com/commitizen-tools/commitizen/master/hooks/post-commit.py\nchmod +x .git/hooks/post-commit\n```\n\n----------------------------------------\n\nTITLE: Version Files Configuration in TOML\nDESCRIPTION: Example of configuring which files should be updated with the new version when bumping.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nversion_files = [\n    \"src/__version__.py\",\n    \"setup.py:version\"\n]\n```\n\n----------------------------------------\n\nTITLE: Syntax for the #comment Smart Commit Command\nDESCRIPTION: Specifies the syntax for adding a comment to a specific JIRA Software issue using the `#comment` command within a commit message. The committer's email must correspond to a JIRA user with permission to comment on the target issue.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/commitizen/cz/jira/jira_info.txt#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<ignored text> ISSUE_KEY <ignored text> #comment <comment_string>\n```\n\n----------------------------------------\n\nTITLE: Major Version Zero Configuration in TOML\nDESCRIPTION: Example of configuring Commitizen to keep the major version at zero during initial development.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nmajor_version_zero = true\n```\n\n----------------------------------------\n\nTITLE: Using commitizen-emoji Commitizen Template\nDESCRIPTION: This command executes the `cz` command with the `cz_commitizen_emoji` name to trigger the emoji-based commitizen workflow. Requires the `commitizen` package and the `commitizen-emoji` plugin to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncz --name cz_commitizen_emoji commit\n```\n\n----------------------------------------\n\nTITLE: Activating global argcomplete\nDESCRIPTION: Command to globally activate argcomplete for Commitizen when installed globally. This requires sudo privileges.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo activate-global-python-argcomplete\n```\n\n----------------------------------------\n\nTITLE: Annotated Tag Configuration in TOML\nDESCRIPTION: Example of enabling annotated Git tags for version bumping.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/bump.md#_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[tool.commitizen]\nannotated_tag = true\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Smart Commit Syntax\nDESCRIPTION: Outlines the fundamental syntax structure for a Smart Commit message. It requires an issue key followed by a command, potentially with arguments. Any text before the issue key or between the key and the command is disregarded by the system.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/commitizen/cz/jira/jira_info.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<ignored text> <ISSUE_KEY> <ignored text> #<COMMAND> <optional COMMAND_ARGUMENTS>\n```\n\n----------------------------------------\n\nTITLE: Using cz-emoji Commitizen Template\nDESCRIPTION: This command executes the `cz` command with the `cz_emoji` name to trigger the emoji-based commitizen workflow.  Requires the `commitizen` package and the `cz-emoji` plugin to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncz --name cz_emoji commit\n```\n\n----------------------------------------\n\nTITLE: Example Unix Time Dev Release Output\nDESCRIPTION: An example of a developmental release tag generated using the Unix timestamp method.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/dev_releases.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n1.3.2.dev1696238452\n```\n\n----------------------------------------\n\nTITLE: Changelog Markdown Structure\nDESCRIPTION: This markdown structure displays the general format of a changelog generated by commitizen.  It includes version, date, change type, scope, and message.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/commands/changelog.md#_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n# <version> (<date>)\n\n## <change_type>\n\n- **<scope>**: <message>\n```\n\n----------------------------------------\n\nTITLE: Migrating Legacy Commitizen Plugin (Python)\nDESCRIPTION: Shows the first step in migrating a legacy Commitizen plugin to the new format. The `discover_this` assignment is removed, leaving only the class definition that inherits from `BaseCommitizen`. The next step involves defining an entry point.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/customization.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom commitizen.cz.base import BaseCommitizen\n\n\nclass PluginCz(BaseCommitizen):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing cz_legacy Commitizen Template\nDESCRIPTION: This command installs the `cz_legacy` Commitizen template from PyPI.  This template extends conventional commits with legacy change types in the changelog. Requires `pip` to be installed.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/third-party-commitizen.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npip install cz_legacy\n```\n\n----------------------------------------\n\nTITLE: One-time Commitizen argcomplete activation\nDESCRIPTION: Command to activate argcomplete for Commitizen for the current shell session only. This is a temporary activation.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(register-python-argcomplete cz)\"\n```\n\n----------------------------------------\n\nTITLE: Example CircleCI Dev Release Output\nDESCRIPTION: An example of a developmental release tag generated using the CircleCI build number method.\nSOURCE: https://github.com/commitizen-tools/commitizen/blob/master/docs/tutorials/dev_releases.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n1.3.2.dev2478\n```"
  }
]