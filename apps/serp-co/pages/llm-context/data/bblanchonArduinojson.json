[
  {
    "owner": "bblanchon",
    "repo": "arduinojson",
    "content": "TITLE: Updating MemberProxy Usage Example in C++\nDESCRIPTION: Shows how to update code to handle breaking changes in v7.3.0 regarding MemberProxy and ElementProxy becoming non-copyable. Demonstrates both reading from and writing to JSON documents.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nauto value = doc[\"key\"];\n```\n\nLANGUAGE: cpp\nCODE:\n```\nauto config = doc[\"config\"].as<JsonObject>();\nconst char* name = config[\"name\"];\n```\n\nLANGUAGE: cpp\nCODE:\n```\nauto config = doc[\"config\"].to<JsonObject>();\nconfig[\"name\"] = \"ArduinoJson\";\n```\n\n----------------------------------------\n\nTITLE: Replacing containsKey() with is<T>() in C++\nDESCRIPTION: Demonstrates how to update code after the deprecation of containsKey() method in v7.2.0, showing the new recommended pattern using is<T>() for type-safe key checking.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Before\nif (doc.containsKey(\"value\")) {\n  int value = doc[\"value\"];\n  // ...\n}\n\n// After\nif (doc[\"value\"].is<int>()) {\n  int value = doc[\"value\"];\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Array and Object Creation in C++\nDESCRIPTION: Demonstrates the new syntax for creating nested arrays and objects in ArduinoJson 7, replacing createNestedArray() and createNestedObject() with add<T>() and to<T>().\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// ArduinoJson 6\narr.createNestedArray();\narr.createNestedObject();\n\n// ArduinoJson 7\narr.add<JsonArray>();\narr.add<JsonObject>();\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// ArduinoJson 6\nobj.createNestedArray(\"array\");\nobj.createNestedObject(\"object\");\n\n// ArduinoJson 7\nobj[\"array\"].to<JsonArray>();\nobj[\"object\"].to<JsonObject>();\n```\n\n----------------------------------------\n\nTITLE: Configuring ArduinoJson Build with CMake\nDESCRIPTION: This CMake script configures the build for ArduinoJson. It sets the minimum CMake version, handles ESP-IDF builds, sets up the project, and configures testing if applicable. The script also adds subdirectories for source files and tests.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nif(ESP_PLATFORM)\n\t# Build ArduinoJson as an ESP-IDF component\n\tidf_component_register(INCLUDE_DIRS src)\n\treturn()\nendif()\n\nproject(ArduinoJson VERSION 7.4.1)\n\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n\tinclude(CTest)\nendif()\n\nadd_subdirectory(src)\n\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)\n\tinclude(extras/CompileOptions.cmake)\n\tadd_subdirectory(extras/tests)\n\tadd_subdirectory(extras/fuzzing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Custom Allocator Implementation in C++\nDESCRIPTION: Shows the transition from ArduinoJson 6 to 7 for implementing custom allocators, demonstrating the new requirement to inherit from ArduinoJson::Allocator and pass a pointer to the JsonDocument constructor.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// ArduinoJson 6\nclass MyAllocator {\n  // ...\n};\nBasicJsonDocument<MyAllocator> doc(256);\n\n// ArduinoJson 7\nclass MyAllocator : public ArduinoJson::Allocator {\n  // ...\n};\nMyAllocator myAllocator;\nJsonDocument doc(&myAllocator);\n```\n\n----------------------------------------\n\nTITLE: Creating Fuzzer Targets with Clang Compiler Check\nDESCRIPTION: Conditionally creates JSON and MessagePack fuzzer targets only when using Clang 6+ compiler, with a workaround for Clang 11 on GitHub Actions due to a known bug.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/fuzzing/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Needs Clang 6+ to compile\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 6)\n\tif(DEFINED ENV{GITHUB_ACTIONS} AND CMAKE_CXX_COMPILER_VERSION MATCHES \"^11\\\\.\")\n\t\t# Clang 11 fails on GitHub Actions with the following error:\n\t\t# > ERROR: UndefinedBehaviorSanitizer failed to allocate 0x0 (0) bytes of SetAlternateSignalStack (error code: 22)\n\t\t# > Sanitizer CHECK failed: /build/llvm-toolchain-11-mnvtwk/llvm-toolchain-11-11.1.0/compiler-rt/lib/sanitizer_common/sanitizer_common.cpp:54 ((0 && \"unable to mmap\")) != (0) (0, 0)\n\t\tmessage(WARNING \"Fuzzing is disabled on GitHub Actions to workaround a bug in Clang 11\")\n\t\treturn()\n\tendif()\n\n\tadd_fuzzer(json)\n\tadd_fuzzer(msgpack)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating ArduinoJson as an Interface Library in CMake\nDESCRIPTION: Creates ArduinoJson as a CMake interface library with no implementation, only interface properties. This approach follows the pattern described at dominikberner.ch for interface libraries.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(ArduinoJson INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Defining a Failing Build Test Macro in CMake for ArduinoJson\nDESCRIPTION: Defines a CMake macro named 'add_failing_build' that creates a test that is expected to fail compilation. The macro creates an executable from a source file, excludes it from normal builds, and adds a test that attempts to build it expecting the build to fail, which is useful for testing compiler errors.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/FailingBuilds/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_failing_build source_file)\n\tget_filename_component(target ${source_file} NAME_WE)\n\n\tadd_executable(${target} ${source_file})\n\n\tset_target_properties(${target}\n\t\tPROPERTIES\n\t\t\tEXCLUDE_FROM_ALL TRUE\n\t\t\tEXCLUDE_FROM_DEFAULT_BUILD TRUE\n\t)\n\tadd_test(\n\t\tNAME ${target}\n\t\t\tCOMMAND ${CMAKE_COMMAND} --build . --target ${target} --config $<CONFIGURATION>\n\t\t\tWORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n\t)\n\tset_tests_properties(${target}\n\t\tPROPERTIES\n\t\t\tWILL_FAIL TRUE\n\t\t\tLABELS \"WillFail\"\n\t)\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Adding Failing Build Tests for ArduinoJson Edge Cases in CMake\nDESCRIPTION: Uses the previously defined 'add_failing_build' macro to add several failing build tests for specific edge cases and issues in the ArduinoJson library. Each test is expected to fail compilation, which verifies that certain error conditions are properly caught at compile time.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/FailingBuilds/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_failing_build(Issue978.cpp)\nadd_failing_build(read_long_long.cpp)\nadd_failing_build(write_long_long.cpp)\nadd_failing_build(variant_as_char.cpp)\nadd_failing_build(assign_char.cpp)\nadd_failing_build(deserialize_object.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing ArduinoJson Header Files\nDESCRIPTION: Installs the main ArduinoJson header files to the include directory for use by client projects.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n\tFILES\n\t\tArduinoJson.h\n\t\tArduinoJson.hpp\n\tDESTINATION\n\t\tinclude\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for ArduinoJson\nDESCRIPTION: Configures compilation definitions for ArduinoJson, enabling debug mode conditionally based on the current CMake configuration.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(ArduinoJson\n\tINTERFACE\n\t\tARDUINOJSON_DEBUG=$<CONFIG:Debug>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for ArduinoJson\nDESCRIPTION: Sets up the include directories for the ArduinoJson library, differentiating between build-time and install-time paths using generator expressions.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(ArduinoJson\n\tINTERFACE\n\t\t$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n\t\t$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ArduinoJson Include Directory\nDESCRIPTION: Installs the entire ArduinoJson directory containing all header files to the include directory for use by client projects.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n\tDIRECTORY\n\t\t\"${CMAKE_CURRENT_SOURCE_DIR}/ArduinoJson\"\n\tDESTINATION\n\t\tinclude\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ArduinoJson Library Targets\nDESCRIPTION: Configures the installation of ArduinoJson library artifacts to the appropriate destination directories defined by GNUInstallDirs.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n\tTARGETS\n\t\tArduinoJson\n\tEXPORT\n\t\tArduinoJson_Targets\n\tARCHIVE DESTINATION\n\t\t${CMAKE_INSTALL_LIBDIR}\n\tLIBRARY DESTINATION\n\t\t${CMAKE_INSTALL_LIBDIR}\n\tRUNTIME DESTINATION\n\t\t${CMAKE_INSTALL_BINDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ArduinoJson Export Targets\nDESCRIPTION: Installs the exported targets file for ArduinoJson to allow other CMake projects to import and use the library properly.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n\tEXPORT\n\t\tArduinoJson_Targets\n\tFILE\n\t\tArduinoJsonTargets.cmake\n\tDESTINATION\n\t\t${CMAKE_INSTALL_DATAROOTDIR}/ArduinoJson/cmake\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Add_Fuzzer Macro for Creating Fuzzer Targets\nDESCRIPTION: Creates a CMake macro that simplifies the creation of fuzzer targets with appropriate compiler flags, test settings, and corpus directories.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/fuzzing/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_fuzzer name)\n\tset(FUZZER \"${name}_fuzzer\")\n\tset(CORPUS_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/${name}_corpus\")\n\tset(SEED_CORPUS_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/${name}_seed_corpus\")\n\tadd_executable(\"${FUZZER}\"\n\t\t\"${name}_fuzzer.cpp\"\n\t)\n\ttarget_link_libraries(\"${FUZZER}\"\n\t\tArduinoJson\n\t)\n\tset_target_properties(\"${FUZZER}\"\n\t\tPROPERTIES\n\t\t\tCOMPILE_FLAGS \"-fprofile-instr-generate -fcoverage-mapping -fsanitize=fuzzer -fno-sanitize-recover=all\"\n\t\t\tLINK_FLAGS \"-fprofile-instr-generate -fcoverage-mapping -fsanitize=fuzzer -fno-sanitize-recover=all\"\n\t)\n\n\tadd_test(\n\t\tNAME \"${FUZZER}\"\n\t\tCOMMAND \"${FUZZER}\" \"${CORPUS_DIR}\" \"${SEED_CORPUS_DIR}\" -max_total_time=5 -timeout=1\n\t)\n\n\tset_tests_properties(\"${FUZZER}\"\n\t\tPROPERTIES\n\t\tLABELS \"Fuzzing\"\n\t)\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Installing ArduinoJson CMake Configuration Files\nDESCRIPTION: Installs the generated CMake configuration and version files to the appropriate data directory for use by client projects.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n\tFILES\n\t\t\"${PROJECT_BINARY_DIR}/ArduinoJsonConfig.cmake\"\n\t\t\"${PROJECT_BINARY_DIR}/ArduinoJsonConfigVersion.cmake\"\n\tDESTINATION\n\t\t\"${CMAKE_INSTALL_DATAROOTDIR}/ArduinoJson/cmake\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Version Configuration File for ArduinoJson\nDESCRIPTION: Generates a version configuration file for ArduinoJson with compatibility information. Uses architecture-independent setting if CMake version is greater than 3.14.0.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${CMAKE_VERSION} VERSION_GREATER \"3.14.0\")\n\tset(ARCH_INDEPENDENT \"ARCH_INDEPENDENT\")\nendif()\n\nwrite_basic_package_version_file(\n\t\t\"${PROJECT_BINARY_DIR}/ArduinoJsonConfigVersion.cmake\"\n\tVERSION\n\t\t${PROJECT_VERSION}\n\tCOMPATIBILITY\n\t\tSameMajorVersion\n\t${ARCH_INDEPENDENT}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonDocument Test Suite in CMake\nDESCRIPTION: Creates a CMake target for JsonDocument tests by specifying source files, creating an executable, adding it as a test, and setting test properties. All test files focus on different aspects of the JsonDocument functionality within the ArduinoJson library.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonDocument/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(JsonDocumentTests\n\tadd.cpp\n\tassignment.cpp\n\tcast.cpp\n\tclear.cpp\n\tcompare.cpp\n\tconstructor.cpp\n\tElementProxy.cpp\n\tisNull.cpp\n\tissue1120.cpp\n\tMemberProxy.cpp\n\tnesting.cpp\n\toverflowed.cpp\n\tremove.cpp\n\tset.cpp\n\tshrinkToFit.cpp\n\tsize.cpp\n\tsubscript.cpp\n\tswap.cpp\n)\n\nadd_test(JsonDocument JsonDocumentTests)\n\nset_tests_properties(JsonDocument\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Configuration for ArduinoJson\nDESCRIPTION: Creates package configuration file for ArduinoJson from a template, specifying installation destinations for config files.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/src/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_package_config_file(\n\t\t\"${PROJECT_SOURCE_DIR}/extras/ArduinoJsonConfig.cmake.in\"\n\t\t\"${PROJECT_BINARY_DIR}/ArduinoJsonConfig.cmake\"\n\tINSTALL_DESTINATION\n\t\t${CMAKE_INSTALL_DATAROOTDIR}/ArduinoJson/cmake\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standard and Linking ArduinoJson Library in CMake\nDESCRIPTION: Sets the C++ standard to C++11, makes it required, and links the ArduinoJson library for the project. It also adds subdirectories for failing builds and the Catch testing framework.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nlink_libraries(ArduinoJson)\n\n# Failing builds should only link with ArduinoJson, not catch\nadd_subdirectory(FailingBuilds)\n\nadd_subdirectory(catch)\nlink_libraries(catch)\n```\n\n----------------------------------------\n\nTITLE: Configuring ArduinoJson Integration Tests in CMake\nDESCRIPTION: Defines and configures the ArduinoJson integration test executable with its source files, compiler options for GNU compilers 6+, and test properties. The configuration handles single-precision constant issues and labels the tests appropriately.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/IntegrationTests/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(IntegrationTests\n\tgbathree.cpp\n\tissue772.cpp\n\tround_trip.cpp\n\topenweathermap.cpp\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID MATCHES \"GNU\" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 6)\n\ttarget_compile_options(IntegrationTests\n\t\tPUBLIC\n\t\t\t-fsingle-precision-constant # issue 544\n\t)\nendif()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(IntegrationTests IntegrationTests)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset_tests_properties(IntegrationTests\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonObject Test Suite in CMake for ArduinoJson\nDESCRIPTION: Sets up a CMake test executable for the JsonObject component of ArduinoJson. The configuration adds multiple test files to the executable, registers it as a test, and applies the 'Catch' label to identify it as using the Catch testing framework.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonObject/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(JsonObjectTests\n\tclear.cpp\n\tcompare.cpp\n\tequals.cpp\n\tisNull.cpp\n\titerator.cpp\n\tnesting.cpp\n\tremove.cpp\n\tset.cpp\n\tsize.cpp\n\tstd_string.cpp\n\tsubscript.cpp\n\tunbound.cpp\n)\n\nadd_test(JsonObject JsonObjectTests)\n\nset_tests_properties(JsonObject\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonSerializerTests in CMake for ArduinoJson\nDESCRIPTION: This CMake configuration creates an executable for JsonSerializer tests, defines the source files to include, adds it as a test target, and sets the test properties. The test includes various serialization components like JsonArray, JsonObject, and JsonVariant.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonSerializer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(JsonSerializerTests\n\tCustomWriter.cpp\n\tJsonArray.cpp\n\tJsonArrayPretty.cpp\n\tJsonObject.cpp\n\tJsonObjectPretty.cpp\n\tJsonVariant.cpp\n\tmisc.cpp\n\tstd_stream.cpp\n\tstd_string.cpp\n)\n\nadd_test(JsonSerializer JsonSerializerTests)\n\nset_tests_properties(JsonSerializer\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TextFormatter Test Suite in CMake\nDESCRIPTION: Creates and configures a test executable for the TextFormatter component. Sets up three test files for float, integer, and string writing functionality, disables unity build, and configures test properties with Catch label.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/TextFormatter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(TextFormatterTests\n\twriteFloat.cpp\n\twriteInteger.cpp\n\twriteString.cpp\n)\n\nset_target_properties(TextFormatterTests PROPERTIES UNITY_BUILD OFF)\n\nadd_test(TextFormatter TextFormatterTests)\n\nset_tests_properties(TextFormatter\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MiscTests Executable with CMake for ArduinoJson\nDESCRIPTION: This CMake snippet configures the MiscTests executable for the ArduinoJson project. It adds source files for various test cases, disables unity builds for the target, and sets up the test with appropriate properties for the Catch testing framework.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Misc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(MiscTests\n\tarithmeticCompare.cpp\n\tconflicts.cpp\n\tissue1967.cpp\n\tissue2129.cpp\n\tissue2166.cpp\n\tJsonString.cpp\n\tNoArduinoHeader.cpp\n\tprintable.cpp\n\tReaders.cpp\n\tStringAdapters.cpp\n\tStringWriter.cpp\n\tTypeTraits.cpp\n\tunsigned_char.cpp\n\tUtf16.cpp\n\tUtf8.cpp\n\tversion.cpp\n)\n\nset_target_properties(MiscTests PROPERTIES UNITY_BUILD OFF)\n\nadd_test(Misc MiscTests)\n\nset_tests_properties(Misc\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonDeserializerTests Executable in CMake\nDESCRIPTION: This CMake snippet defines the JsonDeserializerTests executable, specifies its source files, and sets up test properties. It includes various test files for different aspects of JSON deserialization, disables unity build, and configures the test with the 'Catch' label.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonDeserializer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(JsonDeserializerTests\n\tarray.cpp\n\tDeserializationError.cpp\n\tdestination_types.cpp\n\terrors.cpp\n\tfilter.cpp\n\tinput_types.cpp\n\tmisc.cpp\n\tnestingLimit.cpp\n\tnumber.cpp\n\tobject.cpp\n\tstring.cpp\n)\n\nset_target_properties(JsonDeserializerTests PROPERTIES UNITY_BUILD OFF)\n\nadd_test(JsonDeserializer JsonDeserializerTests)\n\nset_tests_properties(JsonDeserializer\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Requirements for ArduinoJson C++20 Tests in CMake\nDESCRIPTION: This snippet checks for minimum compiler versions required to run C++20 tests. It exits early if the compiler doesn't meet the requirements.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Cpp20/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC_VERSION LESS 1910)\n\treturn()\nendif()\n\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 10)\n\treturn()\nendif()\n\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 10)\n\treturn()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standard for ArduinoJson Tests\nDESCRIPTION: Sets the C++ standard to C++17 without making it a hard requirement for the build system.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/catch/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED OFF)\n```\n\n----------------------------------------\n\nTITLE: Checking MSVC Compiler Version Compatibility for C++17 Tests\nDESCRIPTION: Checks if the Microsoft Visual C++ compiler version is at least 15.7 (MSVC 1910) and returns from the script if the version is too old to support C++17 features.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Cpp17/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC_VERSION LESS 1910)\n\treturn()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ResourceManager Test Executable in CMake\nDESCRIPTION: Creates an executable for ResourceManager tests by specifying source files, adding compile definitions to reduce memory requirements, setting up test execution, and configuring test properties with labels.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/ResourceManager/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(ResourceManagerTests\n\tallocVariant.cpp\n\tclear.cpp\n\tsaveString.cpp\n\tshrinkToFit.cpp\n\tsize.cpp\n\tStringBuffer.cpp\n\tStringBuilder.cpp\n\tswap.cpp\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_compile_definitions(ResourceManagerTests\n\tARDUINOJSON_SLOT_ID_SIZE=1 # require less RAM for overflow tests\n\tARDUINOJSON_POOL_CAPACITY=16\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(ResourceManager ResourceManagerTests)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset_tests_properties(ResourceManager\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ArduinoJson Number Tests in CMake\nDESCRIPTION: This CMake script configures the NumbersTests executable for the ArduinoJson project. It adds source files related to number parsing and conversion, registers it as a test, and sets the 'Catch' label property for the test.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Numbers/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(NumbersTests\n\tconvertNumber.cpp\n\tdecomposeFloat.cpp\n\tparseDouble.cpp\n\tparseFloat.cpp\n\tparseInteger.cpp\n\tparseNumber.cpp\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(Numbers NumbersTests)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset_tests_properties(Numbers\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonArrayConst Test Suite with CMake\nDESCRIPTION: Sets up a CMake test executable for JsonArrayConst tests in the ArduinoJson library. The configuration adds source files for testing various aspects like equality checking, null validation, iteration, nesting, size determination, and subscript operations. The test is registered with the 'Catch' label.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonArrayConst/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(JsonArrayConstTests\n\tequals.cpp\n\tisNull.cpp\n\titerator.cpp\n\tnesting.cpp\n\tsize.cpp\n\tsubscript.cpp\n)\n\nadd_test(JsonArrayConst JsonArrayConstTests)\n\nset_tests_properties(JsonArrayConst\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonObjectConst Test Executable in CMake\nDESCRIPTION: Sets up the JsonObjectConstTests executable with its source files, adds it as a test, and configures test properties. The test is labeled as \"Catch\", indicating it uses the Catch testing framework.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonObjectConst/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(JsonObjectConstTests\n\tequals.cpp\n\tisNull.cpp\n\titerator.cpp\n\tnesting.cpp\n\tsize.cpp\n\tsubscript.cpp\n)\n\nadd_test(JsonObjectConst JsonObjectConstTests)\n\nset_tests_properties(JsonObjectConst\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MsgPackSerializer Test Executable in CMake\nDESCRIPTION: Defines the MsgPackSerializerTests executable and its source files. It also adds the test to the project and sets its properties, including the 'Catch' label.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/MsgPackSerializer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(MsgPackSerializerTests\n\tdestination_types.cpp\n\tmeasure.cpp\n\tmisc.cpp\n\tserializeArray.cpp\n\tserializeObject.cpp\n\tserializeVariant.cpp\n)\n\nadd_test(MsgPackSerializer MsgPackSerializerTests)\n\nset_tests_properties(MsgPackSerializer\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonArray Test Suite Build in CMake\nDESCRIPTION: Creates an executable target for JsonArray tests by compiling multiple test source files. Sets up test properties and labels for the test suite execution.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonArray/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(JsonArrayTests\n\tadd.cpp\n\tclear.cpp\n\tcompare.cpp\n\tcopyArray.cpp\n\tequals.cpp\n\tisNull.cpp\n\titerator.cpp\n\tnesting.cpp\n\tremove.cpp\n\tsize.cpp\n\tsubscript.cpp\n\tunbound.cpp\n)\n\nadd_test(JsonArray JsonArrayTests)\n\nset_tests_properties(JsonArray\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonVariant Test Executable in CMake\nDESCRIPTION: Sets up the JsonVariantTests executable with a list of source files. This snippet defines all the test cases that will be compiled into the test suite for the JsonVariant component.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonVariant/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(JsonVariantTests\n\tadd.cpp\n\tas.cpp\n\tclear.cpp\n\tcompare.cpp\n\tconverters.cpp\n\tcopy.cpp\n\tis.cpp\n\tisnull.cpp\n\tmisc.cpp\n\tnesting.cpp\n\tnullptr.cpp\n\tor.cpp\n\toverflow.cpp\n\tremove.cpp\n\tset.cpp\n\tsize.cpp\n\tstl_containers.cpp\n\tsubscript.cpp\n\ttypes.cpp\n\tunbound.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MsgPackDeserializerTests Executable in CMake\nDESCRIPTION: This CMake snippet defines the MsgPackDeserializerTests executable, specifying its source files. It includes various test files for different aspects of MsgPack deserialization in ArduinoJson.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/MsgPackDeserializer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(MsgPackDeserializerTests\n\tdeserializeArray.cpp\n\tdeserializeObject.cpp\n\tdeserializeVariant.cpp\n\tdestination_types.cpp\n\tdoubleToFloat.cpp\n\terrors.cpp\n\tfilter.cpp\n\tinput_types.cpp\n\tnestingLimit.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Catch Testing Library Target\nDESCRIPTION: Defines a library target for the Catch testing framework, including the necessary source files.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/catch/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(catch\n\tcatch.hpp\n\tcatch.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonVariantConst Executable and Tests in CMake\nDESCRIPTION: This CMake script sets up the JsonVariantConstTests executable, adds it as a test, and configures test properties. It includes multiple source files for different test cases and labels the test suite as \"Catch\".\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonVariantConst/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(JsonVariantConstTests\n\tas.cpp\n\tis.cpp\n\tisnull.cpp\n\tnesting.cpp\n\tsize.cpp\n\tsubscript.cpp\n)\n\nadd_test(JsonVariantConst JsonVariantConstTests)\n\nset_tests_properties(JsonVariantConst\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting C++20 Standard for ArduinoJson Tests in CMake\nDESCRIPTION: This snippet sets the C++ standard to C++20 and makes it required for the build.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Cpp20/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n----------------------------------------\n\nTITLE: Setting C++17 Standard Requirements for Tests\nDESCRIPTION: Configures the C++ standard to C++17 and makes it required for building the test executable.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Cpp17/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++20 Test Executable for ArduinoJson in CMake\nDESCRIPTION: This snippet adds an executable for C++20 tests and configures it as a test with the 'Catch' label.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Cpp20/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(Cpp20Tests\n\tsmoke_test.cpp\n)\n\nadd_test(Cpp20 Cpp20Tests)\n\nset_tests_properties(Cpp20\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MessagePack Reproducer Executable\nDESCRIPTION: Defines a CMake executable target for the MessagePack reproducer, specifying its source files and linking it with the ArduinoJson library.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/fuzzing/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(msgpack_reproducer\n\tmsgpack_fuzzer.cpp\n\treproducer.cpp\n)\ntarget_link_libraries(msgpack_reproducer\n\tArduinoJson\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ArduinoJson Mixed Configuration Tests Executable in CMake\nDESCRIPTION: This snippet defines the MixedConfigurationTests executable, specifying its source files. It includes various test cases for different configurations and features of ArduinoJson.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/MixedConfiguration/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(MixedConfigurationTests\n\tdecode_unicode_0.cpp\n\tdecode_unicode_1.cpp\n\tenable_alignment_0.cpp\n\tenable_alignment_1.cpp\n\tenable_comments_0.cpp\n\tenable_comments_1.cpp\n\tenable_infinity_0.cpp\n\tenable_infinity_1.cpp\n\tenable_nan_0.cpp\n\tenable_nan_1.cpp\n\tenable_progmem_1.cpp\n\tissue1707.cpp\n\tstring_length_size_1.cpp\n\tstring_length_size_2.cpp\n\tstring_length_size_4.cpp\n\tuse_double_0.cpp\n\tuse_double_1.cpp\n\tuse_long_long_0.cpp\n\tuse_long_long_1.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Properties for ArduinoJson Mixed Configuration Tests\nDESCRIPTION: This snippet sets specific properties for the MixedConfigurationTests target. It disables unity build for the target and adds it as a test with the 'Catch' label.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/MixedConfiguration/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(MixedConfigurationTests PROPERTIES UNITY_BUILD OFF)\n\nadd_test(MixedConfiguration MixedConfigurationTests)\n\nset_tests_properties(MixedConfiguration\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for GCC and Clang in CMake\nDESCRIPTION: Configures compiler options for GCC and Clang compilers, disabling all warnings.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Deprecated/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID MATCHES \"(GNU|Clang)\")\n\tadd_compile_options(\n\t\t-w\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard Configuration in CMake\nDESCRIPTION: Configures the C++ standard to C++11 and makes it required for all targets in the project.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/fuzzing/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n----------------------------------------\n\nTITLE: Defining DeprecatedTests Executable in CMake\nDESCRIPTION: Creates an executable target named DeprecatedTests, including various source files for deprecated feature tests.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Deprecated/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(DeprecatedTests\n\tadd.cpp\n\tBasicJsonDocument.cpp\n\tcontainsKey.cpp\n\tcreateNestedArray.cpp\n\tcreateNestedObject.cpp\n\tDynamicJsonDocument.cpp\n\tmacros.cpp\n\tmemoryUsage.cpp\n\tshallowCopy.cpp\n\tStaticJsonDocument.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectories in CMake\nDESCRIPTION: Includes the Helpers directory and adds various subdirectories for different components of the ArduinoJson project, such as JsonArray, JsonObject, JsonSerializer, and more.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(Helpers)\nadd_subdirectory(Cpp17)\nadd_subdirectory(Cpp20)\nadd_subdirectory(Deprecated)\nadd_subdirectory(IntegrationTests)\nadd_subdirectory(JsonArray)\nadd_subdirectory(JsonArrayConst)\nadd_subdirectory(JsonDeserializer)\nadd_subdirectory(JsonDocument)\nadd_subdirectory(JsonObject)\nadd_subdirectory(JsonObjectConst)\nadd_subdirectory(JsonSerializer)\nadd_subdirectory(JsonVariant)\nadd_subdirectory(JsonVariantConst)\nadd_subdirectory(ResourceManager)\nadd_subdirectory(Misc)\nadd_subdirectory(MixedConfiguration)\nadd_subdirectory(MsgPackDeserializer)\nadd_subdirectory(MsgPackSerializer)\nadd_subdirectory(Numbers)\nadd_subdirectory(TextFormatter)\n```\n\n----------------------------------------\n\nTITLE: Checking Clang Compiler Version Compatibility for C++17 Tests\nDESCRIPTION: Verifies if the Clang compiler version is at least 5.0 and returns from the script if the version is too old to support C++17 features.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Cpp17/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5)\n\treturn()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for MSVC in CMake\nDESCRIPTION: Configures compiler options for Microsoft Visual C++ compiler, disabling specific warning 4996.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Deprecated/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n\tadd_compile_options(\n\t\t/wd4996\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking GCC Compiler Version Compatibility for C++17 Tests\nDESCRIPTION: Checks if the GNU C++ compiler version is at least 7.0 and returns from the script if the version is too old to support C++17 features.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Cpp17/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7)\n\treturn()\nendif()\n```\n\n----------------------------------------\n\nTITLE: MinGW-specific Compiler Options\nDESCRIPTION: Adds special compiler options for MinGW to handle large object files and prevent 'too many sections' error.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/catch/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(MINGW)\n\t# prevent \"too many sections (32837)\" with MinGW\n\ttarget_compile_options(catch PRIVATE -Wa,-mbig-obj)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Reproducer Executable\nDESCRIPTION: Defines a CMake executable target for the JSON reproducer, specifying its source files and linking it with the ArduinoJson library.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/fuzzing/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(json_reproducer\n\tjson_fuzzer.cpp\n\treproducer.cpp\n)\ntarget_link_libraries(json_reproducer\n\tArduinoJson\n)\n```\n\n----------------------------------------\n\nTITLE: Adding MSVC-Specific Compiler Options\nDESCRIPTION: Adds a compiler option specifically for Microsoft Visual C++ to disable secure CRT warnings.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/fuzzing/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n\tadd_compile_options(-D_CRT_SECURE_NO_WARNINGS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding JsonVariant Test to CMake Test Suite\nDESCRIPTION: Adds the JsonVariantTests executable as a test to the CMake test suite. This allows the test to be run as part of the project's test suite.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonVariant/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(JsonVariant JsonVariantTests)\n```\n\n----------------------------------------\n\nTITLE: Defining C++17 Test Executable\nDESCRIPTION: Creates an executable target named 'Cpp17Tests' that includes the string_view.cpp test file.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Cpp17/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(Cpp17Tests\n\tstring_view.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++17 Test Properties\nDESCRIPTION: Adds the test to CMake's test system and sets the 'Catch' label property for the test.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Cpp17/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(Cpp17 Cpp17Tests)\n\nset_tests_properties(Cpp17\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding MsgPackDeserializer Test in CMake\nDESCRIPTION: This CMake command adds the MsgPackDeserializer test to the project's test suite. It associates the test with the previously defined MsgPackDeserializerTests executable.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/MsgPackDeserializer/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(MsgPackDeserializer MsgPackDeserializerTests)\n```\n\n----------------------------------------\n\nTITLE: Setting JsonVariant Test Properties in CMake\nDESCRIPTION: Configures properties for the JsonVariant test. In this case, it sets the test label to \"Catch\", which may indicate that the Catch2 testing framework is being used.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/JsonVariant/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_tests_properties(JsonVariant\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting MsgPackDeserializer Test Properties in CMake\nDESCRIPTION: This CMake snippet sets properties for the MsgPackDeserializer test. It labels the test as \"Catch\", which likely indicates the use of the Catch testing framework for these tests.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/MsgPackDeserializer/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_tests_properties(MsgPackDeserializer\n\tPROPERTIES\n\t\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Deprecated Test to CMake Test Suite\nDESCRIPTION: Adds the DeprecatedTests executable as a test named 'Deprecated' to the CMake test suite.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Deprecated/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(Deprecated DeprecatedTests)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties in CMake\nDESCRIPTION: Sets properties for the 'Deprecated' test, labeling it as a 'Catch' test.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/Deprecated/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_tests_properties(Deprecated\n\tPROPERTIES\n\tLABELS \"Catch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Catch\nDESCRIPTION: Configures the include directories for the Catch testing framework, making them publicly accessible.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/tests/catch/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(catch\n\tPUBLIC\n\t\t${CMAKE_CURRENT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ArduinoJson ESP-IDF Example\nDESCRIPTION: This CMake script sets the minimum required CMake version, includes the ESP-IDF project configuration, and defines the project name. It's designed for use with the ArduinoJson library in an ESP-IDF environment.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/ci/espidf/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(example)\n```\n\n----------------------------------------\n\nTITLE: Registering ArduinoJson Component with ESP-IDF\nDESCRIPTION: Registers an ESP-IDF component using idf_component_register command. Specifies main.cpp as the source file and sets up empty include directories.\nSOURCE: https://github.com/bblanchon/arduinojson/blob/7.x/extras/ci/espidf/main/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n\tSRCS \"main.cpp\"\n\tINCLUDE_DIRS \"\"\n)\n```"
  }
]