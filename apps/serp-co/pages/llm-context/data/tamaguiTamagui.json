[
  {
    "owner": "tamagui",
    "repo": "tamagui",
    "content": "TITLE: Complete Example of Tamagui Theme Implementation\nDESCRIPTION: A full example showing how to set up tokens, themes, and use them with styled components. Demonstrates inline styling with theme variables and theme switching.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TamaguiProvider, createTokens, createTamagui, View, Theme } from 'tamagui'\n\nconst tokens = createTokens({\n  color: {\n    darkRed: '#550000'\n    lightRed: '#ff0000'\n  }\n  // ... see configuration docs for required tokens\n})\n\nconst config = createTamagui({\n  tokens,\n  themes: {\n    dark: {\n      red: tokens.color.darkRed,\n    },\n    light: {\n      red: tokens.color.lightRed,\n    }\n  }\n})\n\nexport const App = () => (\n  <TamaguiProvider config={config} defaultTheme=\"light\">\n    <View backgroundColor=\"$red\" />\n    <Theme name=\"dark\">\n      <View backgroundColor=\"$red\" />\n    </Theme>\n  </TamaguiProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui with createTamagui\nDESCRIPTION: Shows how to create a Tamagui configuration using createTamagui, defining tokens, themes, media queries, shorthands, and settings, plus TypeScript configuration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/tamagui.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTamagui, getConfig } from '@tamagui/core'\n\nexport const config = createTamagui({\n  // act like CSS variables at your root\n  tokens: {\n    // width=\"$sm\"\n    size: { sm: 8, md: 12, lg: 20 },\n    // margin=\"$-sm\"\n    space: { '-sm': 8 },\n    // radius=\"$none\"\n    radius: { none: 0, sm: 3 },\n    color: { white: '#fff', black: '#000' },\n  },\n\n  themes: {\n    light: {\n      bg: '#f2f2f2',\n      color: '#fff',\n    },\n    dark: {\n      bg: '#111',\n      color: '#000',\n    },\n  },\n\n  // media query definitions can be used to style,\n  // but also can be used with \"groups\" to do container queries by size:\n  media: {\n    sm: { maxWidth: 860 },\n    gtSm: { minWidth: 860 + 1 },\n    short: { maxHeight: 820 },\n    hoverNone: { hover: 'none' },\n    pointerCoarse: { pointer: 'coarse' },\n  },\n\n  shorthands: {\n    // <View px={20} />\n    px: 'paddingHorizontal',\n  },\n\n  settings: {\n    disableSSR: true, // for client-side apps gains a bit of performance\n    allowedStyleValues: 'somewhat-strict-web', // if targeting only web\n  },\n})\n\n// in other files use this:\nconsole.log(`config is`, getConfig())\n\n// get typescript types on @tamagui/core imports:\ntype AppConfig = typeof config\ndeclare module '@tamagui/core' {\n  interface TamaguiCustomConfig extends AppConfig {}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Token Values and Variables in Tamagui\nDESCRIPTION: This snippet demonstrates how to access the raw value and CSS variable name of a token using the val and variable properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/tokens.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ngetTokens().size.small.val // returns 10\ngetTokens().size.small.variable // returns something like (--size-small), which matches the CSS rule inserted\n```\n\n----------------------------------------\n\nTITLE: Configuring TamaguiProvider in React\nDESCRIPTION: Example of how to set up the TamaguiProvider component in a React application, including importing necessary modules and applying a configuration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TamaguiProvider, View } from '@tamagui/core'\nimport config from './tamagui.config' // your configuration\n\nexport default function App() {\n  return (\n  <TamaguiProvider config={config}>\n    <View width={200} height={200} backgroundColor=\"$background\" />\n  </TamaguiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Data with Toast Controller in TypeScript\nDESCRIPTION: Demonstrates how to pass and retrieve custom data with toasts using the useToastController hook. It also shows how to add TypeScript auto-completion for custom fields using module augmentation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.15.15.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst toastController = useToastController()\ntoastController.show(\"Title\", { myPreset: 'error' }) // or toastController.show(\"Title\", { customData: { myPreset: 'error' } })\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst toastState = useToastState()\ntoastState.myPreset // or toastState.customData.myPreset\n```\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@tamagui/toast' {\n  interface CustomData {\n    myPreset: 'error' | 'success' | 'warning'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Compound Button Component with Tamagui\nDESCRIPTION: This code snippet defines a complete Button component using Tamagui's compound components pattern. It includes a ButtonContext, styled components for the button frame and text, and a ButtonIcon component. The Button is exported with static properties for easy usage.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSize, getSpace } from '@tamagui/get-token'\nimport {\n  GetProps,\n  SizeTokens,\n  View,\n  Text,\n  createStyledContext,\n  styled,\n  useTheme,\n  withStaticProperties,\n} from '@tamagui/web'\nimport { cloneElement, isValidElement, useContext } from 'react'\n\nexport const ButtonContext = createStyledContext({\n  size: '$md' as SizeTokens,\n})\n\nexport const ButtonFrame = styled(View, {\n  name: 'Button',\n  context: ButtonContext,\n  backgroundColor: '$background',\n  alignItems: 'center',\n  flexDirection: 'row',\n\n  hoverStyle: {\n    backgroundColor: '$backgroundHover',\n  },\n\n  pressStyle: {\n    backgroundColor: '$backgroundPress',\n  },\n\n  variants: {\n    size: {\n      '...size': (name, { tokens }) => {\n        return {\n          height: tokens.size[name],\n          borderRadius: tokens.radius[name],\n          // note the getSpace and getSize helpers will let you shift down/up token sizes\n          // whereas with gap we just multiply by 0.2\n          // this is a stylistic choice, and depends on your design system values\n          gap: tokens.space[name].val * 0.2,\n          paddingHorizontal: getSpace(name, {\n            shift: -1,\n          }),\n        }\n      },\n    },\n  } as const,\n\n  defaultVariants: {\n    size: '$md',\n  },\n})\n\ntype ButtonProps = GetProps<typeof ButtonFrame>\n\nexport const ButtonText = styled(Text, {\n  name: 'ButtonText',\n  context: ButtonContext,\n  color: '$color',\n  userSelect: 'none',\n\n  variants: {\n    size: {\n      '...fontSize': (name, { font }) => ({\n        fontSize: font?.size[name],\n      }),\n    },\n  } as const,\n})\n\nconst ButtonIcon = (props: { children: any }) => {\n  const { size } = useContext(ButtonContext.context)\n  const smaller = getSize(size, {\n    shift: -2,\n  })\n  const theme = useTheme()\n  return isValidElement(props.children) ? cloneElement(props.children, {\n    size: smaller.val * 0.5,\n    color: theme.color.get(),\n  }) : null\n}\n\nexport const Button = withStaticProperties(ButtonFrame, {\n  Props: ButtonContext.Provider,\n  Text: ButtonText,\n  Icon: ButtonIcon,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Themes with createThemes in Tamagui\nDESCRIPTION: This snippet shows a more complex usage of createThemes, generating a production-grade theme suite with accent themes and child themes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThemes } from '@tamagui/theme-builder'\nimport * as Colors from '@tamagui/colors'\n\nexport const themes = createThemes({\n  base: {\n    palette: {\n      dark: ['#000', '#fff',],\n      light: ['#fff', '#000'],\n    },\n  },\n\n  accent: {\n    palette: {\n      dark: ['#fff', '#000'],\n      light: ['#000', '#fff',],\n    },\n  }\n\n  childrenThemes: {\n    warning: {\n      palette: {\n        dark: Object.values(Colors.yellowDark),\n        light: Object.values(Colors.yellow),\n      },\n    },\n\n    error: {\n      palette: {\n        dark: Object.values(Colors.redDark),\n        light: Object.values(Colors.red),\n      },\n    },\n\n    success: {\n      palette: {\n        dark: Object.values(Colors.greenDark),\n        light: Object.values(Colors.green),\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Button.Props Provider for External Control\nDESCRIPTION: Example demonstrating how to use the Button.Props provider to control variants from higher in the component tree. This allows sharing styles across multiple Button instances.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from './OurButton'\n\nexport default () => (\n  <Button.Props size=\"$md\">\n    <Button>\n      <Button.Text>\n        Hello world\n      </Button.Text>\n    </Button>\n  </Button.Props>\n)\n```\n\n----------------------------------------\n\nTITLE: Minimal Tamagui Configuration Setup\nDESCRIPTION: Example of a minimal Tamagui configuration including tokens, themes, media queries, and shorthands with TypeScript support.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTamagui, getConfig } from '@tamagui/core'\n\nexport const config = createTamagui({\n  tokens: {\n    size: { sm: 8, md: 12, lg: 20 },\n    space: { '-sm': 8 },\n    radius: { none: 0, sm: 3 },\n    color: { white: '#fff', black: '#000' },\n  },\n\n  themes: {\n    light: {\n      bg: '#f2f2f2',\n      color: '#fff',\n    },\n    dark: {\n      bg: '#111',\n      color: '#000',\n    },\n  },\n\n  media: {\n    sm: { maxWidth: 860 },\n    gtSm: { minWidth: 860 + 1 },\n    short: { maxHeight: 820 },\n    hoverNone: { hover: 'none' },\n    pointerCoarse: { pointer: 'coarse' },\n  },\n\n  shorthands: {\n    px: 'paddingHorizontal',\n  },\n\n  settings: {\n    disableSSR: true,\n    allowedStyleValues: 'somewhat-strict-web',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Circle Component with Variants in Tamagui\nDESCRIPTION: Demonstrates creating a styled Circle component with pin, centered, and size variants. Shows how to implement position-based, boolean, and dynamic size variants.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/variants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from 'tamagui' // or '@tamagui/core'\n\nexport const Circle = styled(View, {\n  borderRadius: 100_000_000,\n\n  variants: {\n    pin: {\n      top: {\n        position: 'absolute',\n        top: 0,\n      },\n    },\n\n    centered: {\n      true: {\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n    },\n\n    size: {\n      '...size': (size, { tokens }) => {\n        return {\n          width: tokens.size[size] ?? size,\n          height: tokens.size[size] ?? size,\n        }\n      },\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a NextTamaguiProvider Component for Next.js App Router\nDESCRIPTION: A client component that sets up TamaguiProvider with proper server-side CSS insertion using useServerInsertedHTML. It handles both react-native-web styles and Tamagui styles for server-side rendering.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport '@tamagui/core/reset.css'\nimport '@tamagui/polyfill-dev'\n\nimport { ReactNode } from 'react'\nimport { StyleSheet } from 'react-native'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { NextThemeProvider } from '@tamagui/next-theme'\nimport { TamaguiProvider } from 'tamagui'\nimport tamaguiConfig from '../tamagui.config'\n\nexport const NextTamaguiProvider = ({ children }: { children: ReactNode }) => {\n\n  useServerInsertedHTML(() => {\n    // @ts-ignore\n    const rnwStyle = StyleSheet.getSheet()\n    return (\n      <>\n        <style\n          dangerouslySetInnerHTML={{ __html: rnwStyle.textContent }}\n          id={rnwStyle.id}\n        />\n        <style\n          dangerouslySetInnerHTML={{\n            // the first time this runs you'll get the full CSS including all themes\n            // after that, it will only return CSS generated since the last call\n            __html: tamaguiConfig.getNewCSS(),\n          }}\n        />\n      </>\n    )\n  })\n\n  return (\n    <NextThemeProvider skipNextHead>\n      <TamaguiProvider config={tamaguiConfig} disableRootThemeClass>\n        {children}\n      </TamaguiProvider>\n    </NextThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Variant Implementation in Tamagui\nDESCRIPTION: Shows how to implement a boolean variant for user selection control using true/false keys.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/variants.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from 'tamagui' // or '@tamagui/core'\n\nexport const MyView = styled(View, {\n  variants: {\n    selectable: {\n      true: {\n        userSelect: 'auto',\n      },\n      false: {\n        userSelect: 'none',\n      },\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui Vite Plugin for CSS Output\nDESCRIPTION: This configuration shows how to set up the Tamagui Vite plugin to output CSS to a single file that can be shared between all pages for better optimization.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tamaguiPlugin } from '@tamagui/vite-plugin'\n\nexport default {\n  plugins: [\n    tamaguiPlugin({\n      config: './src/tamagui.config.ts',\n      outputCSS: './src/tamagui.css'\n    }),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Theme Generation with createThemes\nDESCRIPTION: Demonstrates using @tamagui/config/v4 to create a comprehensive theme system with light/dark modes, color palettes, shadows, and dynamic theme generation with production optimization.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/tamagui.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Colors from '@tamagui/colors'\nimport { createThemes, defaultComponentThemes } from '@tamagui/config/v4'\n\nconst darkPalette = [\n  '#050505',\n  '#151515',\n  '#191919',\n  '#232323',\n  '#282828',\n  '#323232',\n  '#424242',\n  '#494949',\n  '#545454',\n  '#626262',\n  '#a5a5a5',\n  '#fff',\n]\n\nconst lightPalette = [\n  '#fff',\n  '#f8f8f8',\n  'hsl(0, 0%, 96.3%)',\n  'hsl(0, 0%, 94.1%)',\n  'hsl(0, 0%, 92.0%)',\n  'hsl(0, 0%, 90.0%)',\n  'hsl(0, 0%, 88.5%)',\n  'hsl(0, 0%, 81.0%)',\n  'hsl(0, 0%, 56.1%)',\n  'hsl(0, 0%, 50.3%)',\n  'hsl(0, 0%, 42.5%)',\n  'hsl(0, 0%, 9.0%)',\n]\n\nconst lightShadows = {\n  shadow1: 'rgba(0,0,0,0.04)',\n  shadow2: 'rgba(0,0,0,0.08)',\n  shadow3: 'rgba(0,0,0,0.16)',\n  shadow4: 'rgba(0,0,0,0.24)',\n  shadow5: 'rgba(0,0,0,0.32)',\n  shadow6: 'rgba(0,0,0,0.4)',\n}\n\nconst darkShadows = {\n  shadow1: 'rgba(0,0,0,0.2)',\n  shadow2: 'rgba(0,0,0,0.3)',\n  shadow3: 'rgba(0,0,0,0.4)',\n  shadow4: 'rgba(0,0,0,0.5)',\n  shadow5: 'rgba(0,0,0,0.6)',\n  shadow6: 'rgba(0,0,0,0.7)',\n}\n\nconst extraColors = {\n  black1: darkPalette[0],\n  black2: darkPalette[1],\n  black3: darkPalette[2],\n  black4: darkPalette[3],\n  black5: darkPalette[4],\n  black6: darkPalette[5],\n  black7: darkPalette[6],\n  black8: darkPalette[7],\n  black9: darkPalette[8],\n  black10: darkPalette[9],\n  black11: darkPalette[10],\n  black12: darkPalette[11],\n  white1: lightPalette[0],\n  white2: lightPalette[1],\n  white3: lightPalette[2],\n  white4: lightPalette[3],\n  white5: lightPalette[4],\n  white6: lightPalette[5],\n  white7: lightPalette[6],\n  white8: lightPalette[7],\n  white9: lightPalette[8],\n  white10: lightPalette[9],\n  white11: lightPalette[10],\n  white12: lightPalette[11],\n}\n\nconst generatedThemes = createThemes({\n  componentThemes: defaultComponentThemes,\n  \n  base: {\n    palette: {\n      dark: darkPalette,\n      light: lightPalette,\n    },\n\n    // for values we don't want being inherited onto sub-themes\n    extra: {\n      light: {\n        ...Colors.blue,\n        ...Colors.green,\n        ...Colors.red,\n        ...Colors.yellow,\n        ...lightShadows,\n        ...extraColors,\n        shadowColor: lightShadows.shadow1,\n      },\n      dark: {\n        ...Colors.blueDark,\n        ...Colors.greenDark,\n        ...Colors.redDark,\n        ...Colors.yellowDark,\n        ...darkShadows,\n        ...extraColors,\n        shadowColor: darkShadows.shadow1,\n      },\n    },\n  },\n\n  // inverse accent theme\n  accent: {\n    palette: {\n      dark: lightPalette,\n      light: darkPalette,\n    },\n  },\n\n  childrenThemes: {\n    blue: {\n      palette: {\n        dark: Object.values(Colors.blueDark),\n        light: Object.values(Colors.blue),\n      },\n    },\n    red: {\n      palette: {\n        dark: Object.values(Colors.redDark),\n        light: Object.values(Colors.red),\n      },\n    },\n    yellow: {\n      palette: {\n        dark: Object.values(Colors.yellowDark),\n        light: Object.values(Colors.yellow),\n      },\n    },\n    green: {\n      palette: {\n        dark: Object.values(Colors.greenDark),\n        light: Object.values(Colors.green),\n      },\n    },\n  },\n})\n\nexport type TamaguiThemes = typeof generatedThemes\n\n/**\n * This is an optional production optimization: themes JS can get to 20Kb or more.\n * Tamagui has ~1Kb of logic to hydrate themes from CSS, so you can remove the JS.\n * So long as you server render your Tamagui CSS, this will save you bundle size:\n */\nexport const themes: TamaguiThemes =\n  process.env.TAMAGUI_ENVIRONMENT === 'client' &&\n  process.env.NODE_ENV === 'production'\n    ? {}\n    : (generatedThemes as any)\n```\n\n----------------------------------------\n\nTITLE: Sizing Tamagui Button with Theme Values\nDESCRIPTION: Shows how to adjust the button size using theme values. The size prop affects padding, border radius, font size, and icon sizes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default () => <Button size=\"$6\">Lorem ipsum</Button>\n```\n\n----------------------------------------\n\nTITLE: Media Query and Pseudo Styles in Variants\nDESCRIPTION: Shows how to implement responsive styling with media queries and pseudo-selectors within variants.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/variants.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst SizedText = styled(Text, {\n  variants: {\n    size: {\n      md: {\n        fontSize: '$sm',\n\n        $gtMd: {\n          fontSize: '$md',\n        },\n\n        $gt2xl: {\n          fontSize: '$lg',\n        },\n      },\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Tamagui Configuration\nDESCRIPTION: Complete example of a custom Tamagui configuration including fonts, tokens, themes, media queries, and shorthands with full TypeScript support.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFont, createTamagui, createTokens, isWeb } from 'tamagui'\n\nconst systemFont = createFont({\n  family: isWeb ? 'Helvetica, Arial, sans-serif' : 'System',\n  size: {\n    1: 12,\n    2: 14,\n    3: 15,\n  },\n  lineHeight: {\n    2: 22,\n  },\n  weight: {\n    1: '300',\n    3: '600',\n  },\n  letterSpacing: {\n    1: 0,\n    2: -1,\n  },\n  face: {\n    300: { normal: 'InterLight', italic: 'InterItalic' },\n    600: { normal: 'InterBold' },\n  },\n})\n\nconst size = {\n  0: 0,\n  1: 5,\n  2: 10,\n}\n\nexport const tokens = createTokens({\n  size,\n  space: { ...size, '-1': -5, '-2': -10 },\n  radius: { 0: 0, 1: 3 },\n  zIndex: { 0: 0, 1: 100, 2: 200 },\n  color: {\n    white: '#fff',\n    black: '#000',\n  },\n})\n\nconst config = createTamagui({\n  fonts: {\n    heading: systemFont,\n    body: systemFont,\n  },\n  tokens,\n  themes: {\n    light: {\n      bg: '#f2f2f2',\n      color: tokens.color.black,\n    },\n    dark: {\n      bg: '#111',\n      color: tokens.color.white,\n    },\n  },\n  media: {\n    sm: { maxWidth: 860 },\n    gtSm: { minWidth: 860 + 1 },\n    short: { maxHeight: 820 },\n    hoverNone: { hover: 'none' },\n    pointerCoarse: { pointer: 'coarse' },\n  },\n  shorthands: {\n    px: 'paddingHorizontal',\n    f: 'flex',\n    m: 'margin',\n    w: 'width',\n  } as const,\n  defaultProps: {\n    Text: {\n      color: 'green',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Font Tokens with createFont\nDESCRIPTION: This example shows how to define custom font tokens using createFont with various properties like family, size, lineHeight, weight, and letterSpacing, including configuration for native platforms.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst interFont = createFont({\n  family: 'Inter, Helvetica, Arial, sans-serif',\n  size: {\n    1: 12,\n    2: 14,\n    3: 15,\n    // ...\n  },\n  lineHeight: {\n    1: 17,\n    2: 22,\n    3: 25,\n    // ...\n  },\n  weight: {\n    4: '300',\n    6: '600',\n  },\n  letterSpacing: {\n    4: 0,\n    8: -1,\n  },\n\n  // for native only, alternate family based on weight/style\n  face: {\n    // pass in weights as keys\n    700: { normal: 'InterBold', italic: 'InterBold-Italic' },\n    800: { normal: 'InterBold', italic: 'InterBold-Italic' },\n    900: { normal: 'InterBold', italic: 'InterBold-Italic' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout with NextTamaguiProvider\nDESCRIPTION: Sets up the root layout component for Next.js app router that includes the NextTamaguiProvider, handling page metadata and the HTML structure.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next'\nimport { NextTamaguiProvider } from './NextTamaguiProvider'\n\nexport const metadata: Metadata = {\n  title: 'Your page title',\n  description: 'Your page description',\n  icons: '/favicon.ico',\n}\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NextTamaguiProvider>{children}</NextTamaguiProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Button Customization in Tamagui\nDESCRIPTION: Demonstrates how to create a custom Button component by extending Tamagui's ButtonFrame and ButtonText components. This approach allows for more control over styling and behavior.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { forwardRef } from 'react'\nimport {\n  ButtonFrame,\n  ButtonText,\n  GetProps,\n  ButtonProps as TamaguiButtonProps,\n  styled,\n  themeable,\n  useButton,\n} from 'tamagui'\n\nconst CustomButtonFrame = styled(ButtonFrame, {\n  // ...\n})\n\nconst CustomButtonText = styled(ButtonText, {\n  // ...\n})\n\n// to capture the custom variant types you define\ntype CustomButtonFrameProps = GetProps<typeof CustomButtonFrame>\ntype CustomButtonTextProps = GetProps<typeof CustomButtonText>\n\nexport type CustomButtonProps = TamaguiButtonProps &\n  CustomButtonFrameProps &\n  CustomButtonTextProps\n\nexport const Button = CustomButtonFrame.styleable<CustomButtonProps>((propsIn, ref) => {\n  const { props } = useButton(propsIn, { Text: CustomButtonText })\n  return <CustomButtonFrame {...props} ref={ref} />\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Default Tokens in Tamagui Configuration\nDESCRIPTION: This code snippet defines the default tokens for size, space, zIndex, and radius in Tamagui. It includes various size units, negative space values, z-index levels, and border radius options.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/config-v4.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const size = {\n  $0: 0,\n  '$0.25': 2,\n  '$0.5': 4,\n  '$0.75': 8,\n  $1: 20,\n  '$1.5': 24,\n  $2: 28,\n  '$2.5': 32,\n  $3: 36,\n  '$3.5': 40,\n  $4: 44,\n  $true: 44,\n  '$4.5': 48,\n  $5: 52,\n  $6: 64,\n  $7: 74,\n  $8: 84,\n  $9: 94,\n  $10: 104,\n  $11: 124,\n  $12: 144,\n  $13: 164,\n  $14: 184,\n  $15: 204,\n  $16: 224,\n  $17: 224,\n  $18: 244,\n  $19: 264,\n  $20: 284,\n}\n\nexport const space = {\n  // ... space is the same as size, but also defines \"negative\" values for every size, like:\n  '$-1': -20,\n}\n\nexport const zIndex = {\n  0: 0,\n  1: 100,\n  2: 200,\n  3: 300,\n  4: 400,\n  5: 500,\n}\n\nexport const radius = {\n  0: 0,\n  1: 3,\n  2: 5,\n  3: 7,\n  4: 9,\n  true: 9,\n  5: 10,\n  6: 16,\n  7: 19,\n  8: 22,\n  9: 26,\n  10: 34,\n  11: 42,\n  12: 50,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Font Tokens with createTokens\nDESCRIPTION: This example shows how to create non-font tokens like colors using createTokens which can then be used with $ prefixes in style values.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// passed into createTamagui\nconst tokens = createTokens({\n  color: {\n    white: '#fff',\n    black: '#000',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ScrollView to Accept Tamagui Style Objects\nDESCRIPTION: Creates a styled ScrollView component that can accept Tamagui style objects for the 'contentContainerStyle' prop. This transforms Tamagui style objects into React Native style objects required by ScrollView's contentContainerStyle prop.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/styled.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyScrollView = styled(ScrollView, {}, {\n  accept: {\n    contentContainerStyle: 'style' // or 'textStyle'\n  } as const\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Button Component in Tamagui\nDESCRIPTION: Demonstrates how to import and use the Button component from Tamagui. The Button component is a simple, customizable button that can contain text.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.0.0-alpha.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default () => <Button>Lorem ipsum</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Component with a Named Theme in Tamagui\nDESCRIPTION: This snippet shows how to create a styled component with a named theme, allowing for component-specific theming.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from '@tamagui/core'\n\nconst Square = styled(View, {\n  name: 'Square',\n  backgroundColor: '$background',\n  width: 100,\n  height: 100,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Toggle Button Component\nDESCRIPTION: A component that implements a theme toggle button using useThemeSetting and useRootTheme hooks from @tamagui/next-theme, with handling for server-side rendering.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react'\nimport { Button, useIsomorphicLayoutEffect } from 'tamagui'\nimport { useThemeSetting, useRootTheme } from '@tamagui/next-theme'\n\nexport const SwitchThemeButton = () => {\n  const themeSetting = useThemeSetting()\n  const [theme] = useRootTheme()\n\n  const [clientTheme, setClientTheme] = useState<string | undefined>('light')\n\n  useIsomorphicLayoutEffect(() => {\n    setClientTheme(themeSetting.forcedTheme || themeSetting.current || theme)\n  }, [themeSetting.current, themeSetting.resolvedTheme])\n\n  return <Button onPress={themeSetting.toggle}>Change theme: {clientTheme}</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Starter Template\nDESCRIPTION: Command to create a new Tamagui project using the starter template.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/create-tamagui-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create tamagui@latest\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Usage in Tamagui\nDESCRIPTION: Demonstrates how to use the Theme component to change themes in a Tamagui application. It shows wrapping a Button component with a dark theme.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/theme.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Theme } from 'tamagui' // or '@tamagui/core'\n\nexport default () => (\n  <Theme name=\"dark\">\n    <Button>I'm a dark button</Button>\n  </Theme>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of View and Text Components in Tamagui\nDESCRIPTION: Demonstrates the basic usage of View and Text components from Tamagui or @tamagui/core. The View component is used for layout with a margin, while the Text component displays styled text.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/stack-and-text.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'tamagui' // or '@tamagui/core'\n\nexport default () => (\n  <View margin={10}>\n    <Text color=\"$color\">Hello</Text>\n  </View>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating custom themes with createThemes\nDESCRIPTION: Demonstrates how to use the createThemes function to generate a suite of themes, including light, dark, and accent themes. It also shows how to define palettes, shadows, and component themes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/config-v4.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Colors from '@tamagui/colors'\nimport { createThemes, defaultComponentThemes } from '@tamagui/config/v4'\n\nconst darkPalette = [\n  '#050505',\n  '#151515',\n  '#191919',\n  '#232323',\n  '#282828',\n  '#323232',\n  '#424242',\n  '#494949',\n  '#545454',\n  '#626262',\n  '#a5a5a5',\n  '#fff',\n]\n\nconst lightPalette = [\n  '#fff',\n  '#f8f8f8',\n  'hsl(0, 0%, 96.3%)',\n  'hsl(0, 0%, 94.1%)',\n  'hsl(0, 0%, 92.0%)',\n  'hsl(0, 0%, 90.0%)',\n  'hsl(0, 0%, 88.5%)',\n  'hsl(0, 0%, 81.0%)',\n  'hsl(0, 0%, 56.1%)',\n  'hsl(0, 0%, 50.3%)',\n  'hsl(0, 0%, 42.5%)',\n  'hsl(0, 0%, 9.0%)',\n]\n\nconst lightShadows = {\n  shadow1: 'rgba(0,0,0,0.04)',\n  shadow2: 'rgba(0,0,0,0.08)',\n  shadow3: 'rgba(0,0,0,0.16)',\n  shadow4: 'rgba(0,0,0,0.24)',\n  shadow5: 'rgba(0,0,0,0.32)',\n  shadow6: 'rgba(0,0,0,0.4)',\n}\n\nconst darkShadows = {\n  shadow1: 'rgba(0,0,0,0.2)',\n  shadow2: 'rgba(0,0,0,0.3)',\n  shadow3: 'rgba(0,0,0,0.4)',\n  shadow4: 'rgba(0,0,0,0.5)',\n  shadow5: 'rgba(0,0,0,0.6)',\n  shadow6: 'rgba(0,0,0,0.7)',\n}\n\nconst extraColors = {\n  black1: darkPalette[0],\n  black2: darkPalette[1],\n  black3: darkPalette[2],\n  black4: darkPalette[3],\n  black5: darkPalette[4],\n  black6: darkPalette[5],\n  black7: darkPalette[6],\n  black8: darkPalette[7],\n  black9: darkPalette[8],\n  black10: darkPalette[9],\n  black11: darkPalette[10],\n  black12: darkPalette[11],\n  white1: lightPalette[0],\n  white2: lightPalette[1],\n  white3: lightPalette[2],\n  white4: lightPalette[3],\n  white5: lightPalette[4],\n  white6: lightPalette[5],\n  white7: lightPalette[6],\n  white8: lightPalette[7],\n  white9: lightPalette[8],\n  white10: lightPalette[9],\n  white11: lightPalette[10],\n  white12: lightPalette[11],\n}\n\nconst generatedThemes = createThemes({\n  componentThemes: defaultComponentThemes,\n  \n  base: {\n    palette: {\n      dark: darkPalette,\n      light: lightPalette,\n    },\n\n    // for values we don't want being inherited onto sub-themes\n    extra: {\n      light: {\n        ...Colors.blue,\n        ...Colors.green,\n        ...Colors.red,\n        ...Colors.yellow,\n        ...lightShadows,\n        ...extraColors,\n        shadowColor: lightShadows.shadow1,\n      },\n      dark: {\n        ...Colors.blueDark,\n        ...Colors.greenDark,\n        ...Colors.redDark,\n        ...Colors.yellowDark,\n        ...darkShadows,\n        ...extraColors,\n        shadowColor: darkShadows.shadow1,\n      },\n    },\n  },\n\n  // inverse accent theme\n  accent: {\n    palette: {\n      dark: lightPalette,\n      light: darkPalette,\n    },\n  },\n\n  childrenThemes: {\n    blue: {\n      palette: {\n        dark: Object.values(Colors.blueDark),\n        light: Object.values(Colors.blue),\n      },\n    },\n    red: {\n      palette: {\n        dark: Object.values(Colors.redDark),\n        light: Object.values(Colors.red),\n      },\n    },\n    yellow: {\n      palette: {\n        dark: Object.values(Colors.yellowDark),\n        light: Object.values(Colors.yellow),\n      },\n    },\n    green: {\n      palette: {\n        dark: Object.values(Colors.greenDark),\n        light: Object.values(Colors.green),\n      },\n    },\n  },\n})\n\nexport type TamaguiThemes = typeof generatedThemes\n\n/**\n * This is an optional production optimization: themes JS can get to 20Kb or more.\n * Tamagui has ~1Kb of logic to hydrate themes from CSS, so you can remove the JS.\n * So long as you server render your Tamagui CSS, this will save you bundle size:\n */\nexport const themes: TamaguiThemes =\n  process.env.TAMAGUI_ENVIRONMENT === 'client' &&\n  process.env.NODE_ENV === 'production'\n    ? {}\n    : (generatedThemes as any)\n```\n\n----------------------------------------\n\nTITLE: AnimatePresence Implementation in Tamagui\nDESCRIPTION: Example showing how to use AnimatePresence for enter/exit animations with styled components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/animations.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatePresence, View } from 'tamagui'\n\nexport const MyComponent = ({ isVisible }) => (\n  <AnimatePresence>\n    {isVisible && (\n      <View\n        key=\"my-square\"\n        animation=\"bouncy\"\n        backgroundColor=\"green\"\n        size={50}\n        enterStyle={{\n          opacity: 0,\n          y: 10,\n          scale: 0.9,\n        }}\n        exitStyle={{\n          opacity: 0,\n          y: -10,\n          scale: 0.9,\n        }}\n      />\n    )}\n  </AnimatePresence>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Dark Theme for Tamagui UI Kit\nDESCRIPTION: Demonstrates how to create a minimal dark theme with standard keys used by the Tamagui UI kit, including hover, press, and focus states for background and text colors.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst dark = {\n  // Standard keys for all components\n  background: '#000',\n  backgroundHover: '#111',\n  backgroundPress: '#222',\n  backgroundFocus: '#333',\n  backgroundStrong: '#444',\n  backgroundTransparent: 'rgba(0, 0, 0, 0.5)',\n  color: '#fff',\n  colorHover: '#eee',\n  colorPress: '#ddd',\n  colorFocus: '#ccc',\n  colorTransparent: 'rgba(255, 255, 255, 0.5)',\n  borderColor: '#555',\n  borderColorHover: '#666',\n  borderColorFocus: '#777',\n  borderColorPress: '#888',\n  placeholderColor: '#999',\n  outlineColor: '#aaa',\n  // Custom tokens like \"brand\"\n  brandBackground: '#000', // You can add your own tokens like \"brand\"\n  brandColor: '#fff', // and use them in your components\n}\n\nconst light = {\n  // Standard keys for all components\n  background: '#fff',\n  backgroundHover: '#f5f5f5',\n  backgroundPress: '#e0e0e0',\n  backgroundFocus: '#d5d5d5',\n  backgroundStrong: '#ccc',\n  backgroundTransparent: 'rgba(255, 255, 255, 0.5)',\n  color: '#000',\n  colorHover: '#111',\n  colorPress: '#222',\n  colorFocus: '#333',\n  colorTransparent: 'rgba(0, 0, 0, 0.5)',\n  borderColor: '#444',\n  borderColorHover: '#555',\n  borderColorFocus: '#666',\n  borderColorPress: '#777',\n  placeholderColor: '#888',\n  outlineColor: '#999',\n  // Custom tokens like \"brand\"\n  brandBackground: '#000', // You can add your own tokens like \"brand\"\n  brandColor: '#fff', // and use them in your components\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Media Queries in Tamagui\nDESCRIPTION: Shows how to define media queries in Tamagui's configuration and use them in components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ncreateTamagui({\n  media: {\n    sm: { maxWidth: 800 },\n  },\n})\n\n<Text color=\"red\" $sm={{ color: 'blue' }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Toast Viewports in React with TypeScript\nDESCRIPTION: Shows how to set up and use multiple named toast viewports within a Tamagui application.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.13.0.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <ToastProvider>\n      <ToastViewport /> {/* name will be \"default\" */}\n      <ToastViewport name=\"viewport-custom\" />\n    </ToastProvider>\n  )\n}\n\nconst MyComponent = () => {\n  return <Toast>{/* goes to default viewport */}</Toast>\n}\n\nconst MyComponent2 = () => {\n  return <Toast viewportName=\"viewport-custom\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Styled Component in Tamagui\nDESCRIPTION: Demonstrates how to create a new component by extending an existing one using styled(). It also shows how to use GetProps to derive the component's prop types.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/styled.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetProps, View, styled } from '@tamagui/core'\n\nexport const RoundedSquare = styled(View, {\n  borderRadius: 20,\n})\n\n// helper to get props for any TamaguiComponent\nexport type RoundedSquareProps = GetProps<typeof RoundedSquare>\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Area for Toast Viewport in React Native\nDESCRIPTION: Demonstrates how to use react-native-safe-area-context to position the toast viewport within the device's safe area. It uses the useSafeAreaInsets hook to get the safe area insets.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.15.15.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\nconst SafeToastViewport = () => {\n  const { left, top, right } = useSafeAreaInsets()\n  return (\n    <ToastViewport flexDirection=\"column-reverse\" top={top} left={left} right={right} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced NextTamaguiProvider with Theme Support\nDESCRIPTION: An advanced implementation of NextTamaguiProvider that includes theme switching capabilities using useRootTheme from @tamagui/next-theme, with font imports and CSS handling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport '@tamagui/core/reset.css'\nimport '@tamagui/font-inter/css/400.css'\nimport '@tamagui/font-inter/css/700.css'\nimport '@tamagui/polyfill-dev'\n\nimport { ReactNode } from 'react'\nimport { StyleSheet } from 'react-native'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { NextThemeProvider, useRootTheme } from '@tamagui/next-theme'\nimport { TamaguiProvider } from 'tamagui'\nimport tamaguiConfig from '../tamagui.config'\n\nexport const NextTamaguiProvider = ({ children }: { children: ReactNode }) => {\n  const [theme, setTheme] = useRootTheme()\n\n  useServerInsertedHTML(() => {\n    // @ts-ignore\n    const rnwStyle = StyleSheet.getSheet()\n    return (\n      <>\n        <style\n          dangerouslySetInnerHTML={{ __html: rnwStyle.textContent }}\n          id={rnwStyle.id}\n        />\n        <style\n          dangerouslySetInnerHTML={{\n            __html: tamaguiConfig.getCSS({\n              // if you are using \"outputCSS\" option, you should use this \"exclude\"\n              // if not, then you can leave the option out\n              exclude: process.env.NODE_ENV === 'production' ? 'design-system' : null,\n            }),\n          }}\n        />\n      </>\n    )\n  })\n\n  return (\n    <NextThemeProvider\n      skipNextHead\n      // change default theme (system) here:\n      // defaultTheme=\"light\"\n      onChangeTheme={(next) => {\n        setTheme(next as any)\n      }}\n    >\n      <TamaguiProvider config={tamaguiConfig} disableRootThemeClass defaultTheme={theme}>\n        {children}\n      </TamaguiProvider>\n    </NextThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Component with Variants in Tamagui\nDESCRIPTION: Demonstrates how to use the styled() function to create a Circle component with variants for position and size. Shows how to access tokens, use media queries, and implement conditional styles.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, styled } from 'tamagui' // or '@tamagui/core'\n\nexport const Circle = styled(Stack, {\n  // access your tokens and theme values easily with $ props\n  backgroundColor: '$background',\n  borderRadius: '$4',\n\n  // media and pseudo styles - this would take 15+ lines of brittle JS in RN\n  $gtSm: {\n    pressStyle: {\n      borderRadius: '$6',\n    },\n  },\n\n  variants: {\n    // define variants <Circle pin=\"top\" />\n    // these will flatten, even when nesting multiple styled() calls\n    pin: {\n      top: {\n        position: 'absolute',\n        top: 0,\n      },\n    },\n\n    size: {\n      // functional variants give incredible power and save bundle size\n      '...size': (size, { tokens }) => {\n        return {\n          width: tokens.size[size] ?? size,\n          height: tokens.size[size] ?? size,\n        }\n      },\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Using createThemeBuilder API in Tamagui\nDESCRIPTION: This snippet showcases the full usage of the createThemeBuilder API to create complex theme structures with palettes, templates, and child themes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThemeBuilder } from '@tamagui/theme-builder'\n\nconst themesBuilder = createThemeBuilder()\n  .addPalettes({\n    dark: ['#000', '#111', '#222', '#999', '#ccc', '#eee', '#fff'],\n    light: ['#fff', '#eee', '#ccc', '#999', '#222', '#111', '#000'],\n  })\n  .addTemplates({\n    base: {\n      background: 0,\n      color: -0,\n    },\n    subtle: {\n      background: 1,\n      color: -1,\n    }\n  })\n  .addThemes({\n    light: {\n      template: 'base',\n      palette: 'light',\n    },\n    dark: {\n      template: 'base',\n      palette: 'dark',\n    },\n  })\n  .addChildThemes({\n    subtle: {\n      template: 'subtle',\n    },\n  })\n\nexport const themes = themesBuilder.build()\n```\n\n----------------------------------------\n\nTITLE: Implementing TamaguiProvider in a React Application\nDESCRIPTION: This code demonstrates how to set up the TamaguiProvider at the root of your application with a configuration and default theme.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TamaguiProvider } from 'tamagui'\nimport { config } from './tamagui.config'\n\nexport default function App() {\n  return (\n    <TamaguiProvider config={config} defaultTheme=\"light\">\n      <AppContents />\n    </TamaguiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sized Button Usage in Tamagui\nDESCRIPTION: Shows how to use the 'size' prop to adjust the button's dimensions. The size prop affects padding, border radius, font size, and icon sizes based on the theme.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.0.0-beta.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default () => <Button size=\"$6\">Lorem ipsum</Button>\n```\n\n----------------------------------------\n\nTITLE: Select Component Basic Anatomy\nDESCRIPTION: Demonstrates the basic structure and composition of a Tamagui Select component with all its sub-components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/select/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Select } from 'tamagui' // or '@tamagui/select'\n\nexport default () => (\n  <Select defaultValue=\"\">\n    <Select.Trigger>\n      <Select.Value placeholder=\"Search...\" />\n    </Select.Trigger>\n    <Select.Content>\n      <Select.ScrollUpButton />\n      <Select.Viewport>\n        <Select.Group>\n          <Select.Label />\n          <Select.Item>\n            <Select.ItemText />\n          </Select.Item>\n        </Select.Group>\n      </Select.Viewport>\n      <Select.ScrollDownButton />\n    </Select.Content>\n  </Select>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Theme in Tamagui\nDESCRIPTION: Demonstrates how to define a basic dark theme with background and color properties. Themes in Tamagui map to CSS variables and are used for contextual styling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst dark = {\n  background: '#000',\n  color: '#fff',\n  // define any key to any string or number value\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui Performance Options in Next.js\nDESCRIPTION: Configuration for next.config.js to optimize Tamagui performance with outputCSS for production and disableExtraction for development mode.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst tamaguiPlugin = withTamagui({\n  config: './tamagui.config.ts',\n  components: ['tamagui'],\n  outputCSS: process.env.NODE_ENV === 'production' ? './public/tamagui.css' : null,\n  disableExtraction: process.env.NODE_ENV === 'development\" \n})\n```\n\n----------------------------------------\n\nTITLE: Styled Text Component with Theme Values\nDESCRIPTION: Shows how to use Text component with theme values, direct styling, and hover effects.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/text/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, XStack, YStack } from 'tamagui'\n\nexport default () => (\n  <>\n    <Text\n      // can add theme values\n      color=\"$white\"\n      fontFamily=\"$body\"\n      // or just use direct values\n      fontSize={20}\n      hoverStyle={{\n        color: '$colorHover',\n      }}\n    >\n      Lorem ipsum\n    </Text>\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Implementation\nDESCRIPTION: Example showing how to implement Toast with ToastProvider, CurrentToast component, and usage in a page component. Demonstrates native platform support and basic toast functionality.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.13.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toast, ToastProvider, useToastController, useToastState } from '@tamagui/toast'\nimport { Button } from 'tamagui' // or '@tamagui/button'\n\nexport default () => (\n  <ToastProvider native={['mobile']}>\n    <CurrentToast />\n    <MyPage />\n    <ToastViewport />\n  </ToastProvider>\n)\n\nconst CurrentToast = () => {\n  const toast = useToastState()\n\n  // only show the component if it's present and not handled by native toast\n  if (!toast || toast.isHandledNatively) {\n    return null\n  }\n\n  return (\n    <Toast key={toast.id}>\n      <Toast.Title>{toast.title}</Toast.Title>\n      <Toast.Description>{toast.message}</Toast.Description>\n    </Toast>\n  )\n}\n\nconst MyPage = () => {\n  const { show } = useToastController()\n\n  return (\n    <Button onPress={() => show('Done!', { message: 'Form submitted successfully.' })}>\n      Show Toast\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Theme Optimization in Tamagui\nDESCRIPTION: Shows how to optimize bundle size by conditionally including theme definitions only on the server side. For production client builds, an empty themes object is used, and Tamagui will hydrate by scanning CSS in browser environments.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { themes as themesIn } from './your-themes-file'\n\n// We leave this value empty for production client side bundles to save on bundle size.\n// The `@tamagui/next-plugin` sets TAMAGUI_IS_SERVER automatically.\n// If you pass an empty themes object Tamagui will try to hydrate by scanning CSS in browser environments.\n// It typically takes low single-digit ms to scan and can save significantly on JS size.\n\nconst themes =\n  process.env.TAMAGUI_IS_SERVER || process.env.NODE_ENV !== 'production'\n    ? themesIn\n    : ({} as typeof themesIn)\n\nexport const config = createTamagui({\n  themes,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Tamagui Design System\nDESCRIPTION: Sets up the TypeScript configuration for a Tamagui design system project, specifying compiler options and file inclusions/exclusions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/design-systems.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": [\"node\", \"react\"],\n  \"lib\": [\"dom\", \"esnext\"],\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"dist\"\n  },\n  \"include\": [\"./**/*.ts\"],\n  \"exclude\": [\n    \"node_modules/**/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Select Component in Tamagui\nDESCRIPTION: This snippet demonstrates the basic structure and usage of the Select component in Tamagui. It includes the main Select wrapper, Trigger, Value, Content, and various subcomponents for structuring the select options.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/select/1.19.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Select } from 'tamagui' // or '@tamagui/select'\n\nexport default () => (\n  <Select defaultValue=\"\">\n    <Select.Trigger>\n      <Select.Value placeholder=\"Search...\" />\n    </Select.Trigger>\n    <Select.Content>\n      <Select.ScrollUpButton />\n      <Select.Viewport>\n        <Select.Group>\n          <Select.Label />\n          <Select.Item>\n            <Select.ItemText />\n          </Select.Item>\n        </Select.Group>\n      </Select.Viewport>\n      <Select.ScrollDownButton />\n    </Select.Content>\n  </Select>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Sheet Component in TSX\nDESCRIPTION: This snippet demonstrates the basic structure and usage of the Sheet component in Tamagui. It shows how to import the component and its subcomponents, and how to use them to create a sheet with an overlay, handle, and content frame.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.21.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sheet } from 'tamagui' // or '@tamagui/sheet'\n\nexport default () => (\n  <Sheet>\n    <Sheet.Overlay />\n    <Sheet.Handle />\n    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Data with Toast Controller in TypeScript\nDESCRIPTION: These snippets show how to pass and retrieve custom data with toasts, and how to add TypeScript type definitions for custom fields using module augmentation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst toastController = useToastController()\ntoastController.show(\"Title\", { myPreset: 'error' }) // or toastController.show(\"Title\", { customData: { myPreset: 'error' } })\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst toastState = useToastState()\ntoastState.myPreset // or toastState.customData.myPreset\n```\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@tamagui/toast' {\n  interface CustomData {\n    myPreset: 'error' | 'success' | 'warning'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Usage in Tamagui\nDESCRIPTION: Example of how to use the Form component from Tamagui or @tamagui/form, including the Form.Trigger for submission.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/form/1.3.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from 'tamagui' // or '@tamagui/form'\n\nexport default () => (\n  <Form>\n    {/* ... */}\n    <Form.Trigger asChild>\n      <Button />\n    </Form.Trigger>\n  </Form>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Toast Viewports in Tamagui\nDESCRIPTION: Shows how to set up multiple toast viewports in a Tamagui application. It demonstrates creating a default viewport and a custom named viewport.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.15.15.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <ToastProvider>\n      <ToastViewport /> {/* default viewport */}\n      <ToastViewport name=\"viewport-custom\" />\n    </ToastProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Language Fonts in Tamagui\nDESCRIPTION: Demonstrates how to configure language-specific fonts using createFont and FontLanguage component. Shows setup for English and Mandarin font variants.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst bodyFontEn = createFont({\n  family: '\"Helvetica\"',\n  // ... per-font design tokens\n})\n\nconst bodyFontMandarin = createFont({\n  family: '\"Helvetica Mandarin\"',\n  // ... per-font design tokens\n})\n\nexport const config = createTamagui({\n  fonts: {\n    body: bodyFontEn,\n    body_mandarin: bodyFontMandarin,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Safe Themes in Tamagui with TypeScript\nDESCRIPTION: Demonstrates how to structure theme definitions in a separate file with proper TypeScript typing. Uses a base theme type to ensure consistency across different theme variations, and TypeScript's satisfies operator to validate all themes against the base type.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { tokens } from './tokens'\n\nconst light = {\n  background: '#fff',\n  backgroundHover: tokens.color.gray3,\n  backgroundPress: tokens.color.gray4,\n  backgroundFocus: tokens.color.gray5,\n  borderColor: tokens.color.gray4,\n  borderColorHover: tokens.color.gray6,\n  color: tokens.color.gray12,\n  colorHover: tokens.color.gray11,\n  colorPress: tokens.color.gray10,\n  colorFocus: tokens.color.gray6,\n  shadowColor: tokens.color.grayA5,\n  shadowColorHover: tokens.color.grayA6,\n}\n\n// note: we set up a single consistent base type to validate the rest:\ntype BaseTheme = typeof light\n\n// the rest of the themes use BaseTheme\nconst dark: BaseTheme = {\n  background: '#000',\n  backgroundHover: tokens.color.gray2Dark,\n  backgroundPress: tokens.color.gray3Dark,\n  backgroundFocus: tokens.color.gray4Dark,\n  borderColor: tokens.color.gray3Dark,\n  borderColorHover: tokens.color.gray4Dark,\n  color: '#ddd',\n  colorHover: tokens.color.gray11Dark,\n  colorPress: tokens.color.gray10Dark,\n  colorFocus: tokens.color.gray6Dark,\n  shadowColor: tokens.color.grayA6,\n  shadowColorHover: tokens.color.grayA7,\n}\n\nconst dark_translucent: BaseTheme = {\n  ...dark,\n  background: 'rgba(0,0,0,0.7)',\n  backgroundHover: 'rgba(0,0,0,0.5)',\n  backgroundPress: 'rgba(0,0,0,0.25)',\n  backgroundFocus: 'rgba(0,0,0,0.1)',\n}\n\nconst light_translucent: BaseTheme = {\n  ...light,\n  background: 'rgba(255,255,255,0.85)',\n  backgroundHover: 'rgba(250,250,250,0.85)',\n  backgroundPress: 'rgba(240,240,240,0.85)',\n  backgroundFocus: 'rgba(240,240,240,0.7)',\n}\n\nexport const allThemes = {\n  dark,\n  light,\n  dark_translucent,\n  light_translucent,\n} satisfies {[key: string]: BaseTheme}\n// note: `satisfies` was introduced with TypeScript 4.9\n```\n\n----------------------------------------\n\nTITLE: Creating a Tamagui Build Configuration File\nDESCRIPTION: This snippet demonstrates how to set up a build configuration file for Tamagui to generate CSS using the Tamagui CLI.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TamaguiBuildOptions } from 'tamagui'\n\nexport default {\n  components: ['tamagui'],\n  config: './config/tamagui.config.ts',\n  outputCSS: './tamagui.css',\n} satisfies TamaguiBuildOptions\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Component Structure\nDESCRIPTION: Complete example showing the anatomy of a Popover component implementation, including trigger, content, arrow, close button, and adaptive sheet functionality for smaller screens.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popover } from 'tamagui' // or '@tamagui/popover'\n\nexport default () => (\n  <Popover>\n    <Popover.Trigger />\n\n    <Popover.Content>\n      <Popover.Arrow />\n      <Popover.Close />\n      {/* ScrollView is optional, can just put any contents inside if not scrollable */}\n      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>\n      {/* ... */}\n    </Popover.Content>\n\n    {/* optionally change to sheet when small screen */}\n    <Popover.Adapt when=\"maxMd\">\n      <Popover.Sheet>\n        <Popover.Sheet.Overlay />\n        <Popover.Sheet.Frame>\n          <Popover.Sheet.ScrollView>\n            <Popover.Adapt.Contents />\n          </Popover.Sheet.ScrollView>\n        </Popover.Sheet.Frame>\n      </Popover.Sheet>\n    </Popover.Adapt>\n  </Popover>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui with Default Config\nDESCRIPTION: Example of how to set up Tamagui using the default configuration, including type declarations for custom config.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/installation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TamaguiProvider, createTamagui } from '@tamagui/core'\nimport { defaultConfig } from '@tamagui/config/v4'\n\n// you usually export this from a tamagui.config.ts file\nconst config = createTamagui(defaultConfig)\n\ntype Conf = typeof config\n\n// make imports typed\ndeclare module '@tamagui/core' {\n  interface TamaguiCustomConfig extends Conf {}\n}\n\nexport default () => {\n  return (\n    <TamaguiProvider config={config}>\n      {/* your app here */}\n    </TamaguiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Toast.Close Component in Tamagui\nDESCRIPTION: Toast.Close is a subcomponent of Toast that extends the Stack component. It can be customized with the asChild prop to use a custom Button inside.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.8.0.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast.Close asChild>\n  <Button>Close</Button>\n</Toast.Close>\n```\n\n----------------------------------------\n\nTITLE: Defining Fonts in Tamagui Configuration\nDESCRIPTION: This code snippet shows how to define fonts in the Tamagui configuration. It includes setting up font families, sizes, line heights, and weights for consistent typography across the application.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/compiler/static/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = createTamagui({\n  fonts: {\n    heading: {\n      family: 'Inter, Helvetica, Arial, sans-serif',\n      size: {\n        4: 14,\n        5: 16,\n        6: 18,\n      },\n      lineHeight: {\n        4: 18,\n        5: 22,\n        6: 25,\n      },\n      weight: {\n        4: '400',\n        5: '500',\n        6: '600',\n      },\n      letterSpacing: {\n        4: 0,\n        5: -0.5,\n        6: -0.75,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Support in One with Tamagui\nDESCRIPTION: Updates the root layout to support light and dark modes using One's color scheme support and Tamagui's theming system.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/one.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TamaguiProvider, Theme } from 'tamagui'\nimport { Slot } from 'one'\nimport { useColorScheme } from 'react-native'\nimport config from '../tamagui.config'\n\nexport default function Layout() {\n  const colorScheme = useColorScheme()\n\n  return (\n    <TamaguiProvider config={config} defaultTheme={colorScheme}>\n      <Theme name={colorScheme}>\n        <Slot />\n      </Theme>\n    </TamaguiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Components with styled()\nDESCRIPTION: Demonstrates how to use the styled() function to create a custom component with base styles and variants, extending a View component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/tamagui.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled, View } from 'tamagui'\n\nconst CustomView = styled(View, {\n  margin: 10,\n\n  variants: {\n    spaced: {\n      true: {\n        margin: 20\n      }\n    }\n  } as const\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting a Compound Button Component with Static Properties\nDESCRIPTION: Combines ButtonFrame and ButtonText into a single Button component using withStaticProperties for easier importing and usage.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withStaticProperties } from '@tamagui/core'\n\nexport const Button = withStaticProperties(ButtonFrame, {\n  Text: ButtonText,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Tamagui Design System\nDESCRIPTION: Shows how to create a Tamagui design system configuration using createTamagui() with fonts, tokens, themes, media queries, and shorthands. This setup establishes the foundation for a type-safe styling system.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFont, createTamagui, createTokens } from 'tamagui' // or '@tamagui/core'\n\nconst interFont = createFont({\n  family: 'Inter, Helvetica, Arial, sans-serif',\n  size: { 1: 12, 2: 14 /* ... */ },\n  // ... lineHeight, weight, letterSpacing, transform, style, color, face\n})\n\nconst size = { 0: 0, 1: 5, 2: 10 /* ... */ }\n\nconst tokens = createTokens({\n  size,\n  space: { ...size, '-1': -5, '-2': -10 },\n  radius: { 0: 0, 1: 3 },\n  zIndex: { 0: 0, 1: 100, 2: 200 },\n  color: { white: '#fff', black: '#000' },\n})\n\nexport default createTamagui({\n  fonts: {\n    heading: interFont,\n    body: interFont,\n  },\n  tokens,\n  themes: {\n    light: { bg: '#f2f2f2', color: tokens.color.black },\n    dark: { bg: '#111', color: tokens.color.white },\n  },\n  media: {\n    sm: { maxWidth: 860 },\n    gtSm: { minWidth: 860 + 1 },\n  },\n  shorthands: {\n    px: 'paddingHorizontal',\n    f: 'flex',\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage with Icons\nDESCRIPTION: Example showing how to use the Checkbox component with a Check icon from @tamagui/lucide-icons.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.89.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Check } from '@tamagui/lucide-icons'\nimport { Checkbox } from 'tamagui'\n\nexport default () => (\n  <Checkbox size=\"$4\">\n    <Checkbox.Indicator>\n      <Check />\n    </Checkbox.Indicator>\n  </Checkbox>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Animations for Tamagui\nDESCRIPTION: This example demonstrates how to set up animations for Tamagui using React Native's animation system by defining presets like 'bouncy' and 'lazy' with specific animation properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAnimations } from '@tamagui/animations-react-native'\n\n// pass this exported `animations` to your `createTamagui` call:\nexport const animations = createAnimations({\n    bouncy: {\n      damping: 9,\n      mass: 0.9,\n      stiffness: 150,\n    },\n    lazy: {\n      damping: 18,\n      stiffness: 50,\n    },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Granular Animations in Tamagui\nDESCRIPTION: Example of implementing granular animations with custom configurations per property.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/animations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { YStack } from 'tamagui'\n\nexport default () => (\n  <YStack\n    animation={{\n      // only x and y will apply animations\n      x: 'bouncy',\n      y: {\n        type: 'bouncy',\n        overshootClamping: true,\n      },\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Area-Aware Toast Viewport for Mobile\nDESCRIPTION: This code example shows how to implement a toast viewport that respects safe area insets on mobile devices by using react-native-safe-area-context to position toasts within the safe viewing area.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.9.1.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\nconst SafeToastViewport = () => {\n  const { left, top, right } = useSafeAreaInsets()\n  return (\n    <ToastViewport flexDirection=\"column-reverse\" top={top} left={left} right={right} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tamagui Configuration with Tokens and Themes\nDESCRIPTION: Sets up the Tamagui configuration with custom tokens for sizes, spaces, and radii, as well as themes for light mode and a Button sub-theme.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTamagui, createTokens } from '@tamagui/core'\n\nexport default createTamagui({\n  tokens: createTokens({\n    size: {\n      sm: 38,\n      md: 46,\n      lg: 60,\n    },\n    space: {\n      sm: 15,\n      md: 20,\n      lg: 25,\n    },\n    radius: {\n      sm: 4,\n      md: 8,\n      lg: 12,\n    },\n    // ... the rest of your tokens\n  }),\n\n  themes: {\n    light: {\n      background: '#fff',\n      color: '#000',\n    },\n\n    // define a Button sub-theme, see the Themes docs for more\n    light_Button: {\n      background: '#ccc',\n      backgroundPress: '#bbb', // darker background on press\n      backgroundHover: '#ddd', // lighter background on hover\n      color: '#222'\n    },\n  },\n\n  // ... the rest of your tamagui.config.ts\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Native Rendering with untilMeasured Property\nDESCRIPTION: Example showing how to use the untilMeasured property in native environments to control visibility during the initial render and measurement phase. The 'hide' option makes the container invisible until dimensions are measured.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<View group untilMeasured=\"hide\">\n  <Text\n    $group-sm={{\n      color: 'white',\n    }}\n  />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in Tamagui\nDESCRIPTION: A simple example showing how to import and use the Button component from Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.28.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default () => <Button>Lorem ipsum</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Compound Button using createStyledContext\nDESCRIPTION: Full implementation of a compound Button component using Tamagui's createStyledContext. This approach connects ButtonFrame and ButtonText components through the ButtonContext, allowing size properties to propagate automatically.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled, createStyledContext } from '@tamagui/core'\n\nexport const ButtonContext = createStyledContext({\n  size: '$md' as SizeTokens,\n})\n\nconst ButtonFrame = styled(View, {\n  name: 'Button',\n  context: ButtonContext,\n  backgroundColor: '$background',\n  alignItems: 'center',\n  flexDirection: 'row',\n\n  variants: {\n    size: {\n      '...size': (name, { tokens }) => {\n        return {\n          height: tokens.size[name],\n          borderRadius: tokens.radius[name],\n          gap: tokens.space[name].val * 0.2,\n        }\n      },\n    },\n  } as const,\n})\n\nconst ButtonText = styled(Text, {\n  name: 'ButtonText',\n  context: ButtonContext,\n  color: '$color',\n  userSelect: 'none',\n\n  variants: {\n    size: {\n      '...fontSize': (name, { font }) => ({\n        fontSize: font?.size[name],\n      }),\n    },\n  } as const,\n})\n\nexport const Button = withStaticProperties(ButtonFrame, {\n  Text: ButtonText,\n  Props: ButtonContext.Provider,\n})\n```\n\n----------------------------------------\n\nTITLE: Single Toast Implementation\nDESCRIPTION: Demonstrates how to implement a single toast notification with animation and state management.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.8.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [open, setOpen] = React.useState(false)\n  const timerRef = React.useRef(0)\n\n  React.useEffect(() => {\n    return () => clearTimeout(timerRef.current)\n  }, [])\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setOpen(false)\n          window.clearTimeout(timerRef.current)\n          timerRef.current = window.setTimeout(() => {\n            setOpen(true)\n          }, 150)\n        }}\n      >\n        Single Toast\n      </Button>\n      <Toast\n        onOpenChange={setOpen}\n        open={open}\n        animation=\"100ms\"\n        enterStyle={{ x: -20, opacity: 0 }}\n        exitStyle={{ x: -20, opacity: 0 }}\n        opacity={1}\n        x={0}\n      >\n        <Toast.Title>Subscribed!</Toast.Title>\n        <Toast.Description>We'll be in touch.</Toast.Description>\n      </Toast>\n    </YStack>\n  )\n```\n\n----------------------------------------\n\nTITLE: Rendering Group Components with Items in React\nDESCRIPTION: Demonstrates how to use XGroup with Group.Item to create a horizontal group of buttons. This approach allows for more control over spacing and separators.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage with Item:\nexport default () => (\n  <XGroup>\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Imperative Toast Creation\nDESCRIPTION: Demonstrates how to create and use toasts imperatively using createToast utility.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.8.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\nimport { Toast, ToastProvider, createToast } from 'tamagui'\n\nexport const { ImperativeToastProvider, useToast } = createToast()\n\nexport default () => (\n  <ToastProvider>\n    <ImperativeToastProvider>\n      <CurrentToast />\n      <MyPage />\n    </ImperativeToastProvider>\n\n    <ToastViewport />\n  </ToastProvider>\n)\n\nconst CurrentToast = () => {\n  const { currentToast } = useToast()\n\n  if (!currentToast) return\n  return (\n    <Toast key={currentToast.id}>\n      <Toast.Title>{currentToast.title}</Toast.Title>\n      <Toast.Description>{currentToast.message}</Toast.Description>\n    </Toast>\n  )\n}\n\nconst MyPage = () => {\n  const { show } = useToast()\n\n  return (\n    <Button onPress={() => show('Done!', { message: 'Form submitted successfully.' })}>\n      Show Toast\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Animations in Tamagui\nDESCRIPTION: Setting up CSS-based animations in Tamagui configuration using @tamagui/animations-css package with timing definitions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAnimations } from '@tamagui/animations-css'\nimport { createTamagui } from 'tamagui'\n\nexport default createTamagui({\n  animations: createAnimations({\n    fast: 'ease-in 150ms',\n    medium: 'ease-in 300ms',\n    slow: 'ease-in 450ms',\n  }),\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Group Container in Tamagui\nDESCRIPTION: A basic example showing how to use the group property on a View component to style a child Text component conditionally based on the parent's media query size. The example demonstrates using the $group-sm prefix to apply styles only when the parent matches the 'sm' breakpoint.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<View group>\n  <Text\n    $group-sm={{ color: 'white' }}\n    $group-sm-hover={{ color: 'green' }}\n  />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Tamagui Plugin\nDESCRIPTION: Setting up the Next.js configuration file to use the Tamagui plugin.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withTamagui } = require('@tamagui/next-plugin')\n\nmodule.exports = function (name, { defaultConfig }) {\n  let config = {\n    ...defaultConfig,\n    // ...your configuration\n  }\n  const tamaguiPlugin = withTamagui({\n    config: './tamagui.config.ts',\n    components: ['tamagui'],\n  })\n  return {\n    ...config,\n    ...tamaguiPlugin(config),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Shape Components Usage in Tamagui\nDESCRIPTION: Demonstrates how to use Square and Circle components with both token-based and numeric size values. Components can be imported from the tamagui package and accept size props either as token strings (\"$4\") or direct numeric values (100).\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/shapes/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Circle, Square } from 'tamagui'\n\nexport default () => (\n  <>\n    <Square size=\"$4\" />\n    <Square size={100} />\n    <Circle size=\"$4\" />\n    <Circle size={100} />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing RadioGroup Component in Tamagui\nDESCRIPTION: Command to install the RadioGroup component independently if not already included in Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/radio-group/1.3.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/radio-group\n```\n\n----------------------------------------\n\nTITLE: Creating Component-specific Themes in Tamagui\nDESCRIPTION: Demonstrates how to define component-specific themes by using the 'name' property. This creates a theme lookup for a specific component type.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, styled } from 'tamagui' // or '@tamagui/core'\n\nconst Circle = styled(Stack, {\n  name: 'Circle',\n  backgroundColor: '$background',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tamagui Configuration with Pre-built Themes\nDESCRIPTION: Shows how to import and use pre-built themes from '@tamagui/themes' package in a Tamagui configuration file. This provides a quick way to start with pre-designed themes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { color, radius, size, space, themes, zIndex } from '@tamagui/themes'\nimport { createTamagui, createTokens } from 'tamagui'\n\nconst tokens = createTokens({\n  size,\n  space,\n  zIndex,\n  color,\n  radius,\n})\n\nconst config = createTamagui({\n  themes,\n  tokens,\n  // ... see Configuration\n})\n\nexport type Conf = typeof config\n\ndeclare module 'tamagui' {\n  interface TamaguiCustomConfig extends Conf {}\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Structure\nDESCRIPTION: Demonstrates the basic anatomy of a Select component including trigger, content, viewport, and item elements.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/select/1.40.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Select } from 'tamagui' // or '@tamagui/select'\n\nexport default () => (\n  <Select defaultValue=\"\">\n    <Select.Trigger>\n      <Select.Value placeholder=\"Search...\" />\n    </Select.Trigger>\n    <Select.Content>\n      <Select.ScrollUpButton />\n      <Select.Viewport>\n        <Select.Group>\n          <Select.Label />\n          <Select.Item>\n            <Select.ItemText />\n          </Select.Item>\n        </Select.Group>\n      </Select.Viewport>\n      <Select.ScrollDownButton />\n    </Select.Content>\n  </Select>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Stack Layout Example in Tamagui\nDESCRIPTION: Demonstrates basic usage of XStack and YStack components with gap spacing between elements.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/stacks/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { XStack, YStack } from 'tamagui'\n\nexport default () => (\n  <XStack gap=\"$2\">\n    <YStack />\n    <YStack />\n    <YStack />\n  </XStack>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Usage with Tamagui YStack\nDESCRIPTION: Demonstrates basic usage of useTheme hook to apply theme colors to a YStack component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-theme.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { YStack, useTheme } from 'tamagui'\n\nconst App = () => {\n  const theme = useTheme()\n\n  return <YStack backgroundColor={theme.color1.val} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exit Animations with AnimatePresence in Tamagui\nDESCRIPTION: This snippet demonstrates how to use the 'custom' prop in AnimatePresence to create directional exit animations for a gallery component. It includes state management for tracking the current page and animation direction.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/animations.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatePresence } from '@tamagui/animate-presence'\nimport { ArrowLeft, ArrowRight } from '@tamagui/lucide-icons'\nimport { useState } from 'react'\nimport { Button, Image, XStack, YStack, styled } from 'tamagui'\n\nconst GalleryItem = styled(YStack, {\n  zIndex: 1,\n  x: 0,\n  opacity: 1,\n  fullscreen: true,\n\n  variants: {\n    // 1 = right, 0 = nowhere, -1 = left\n    going: {\n      ':number': (going) => ({\n        enterStyle: {\n          x: going > 0 ? 1000 : -1000,\n          opacity: 0,\n        },\n        exitStyle: {\n          zIndex: 0,\n          x: going < 0 ? 1000 : -1000,\n          opacity: 0,\n        },\n      }),\n    },\n  } as const,\n})\n\nconst photos = [\n  'https://picsum.photos/500/300',\n  'https://picsum.photos/501/300',\n  'https://picsum.photos/502/300',\n]\n\nconst wrap = (min: number, max: number, v: number) => {\n  const rangeSize = max - min\n  return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min\n}\n\nexport function Demo() {\n  const [[page, going], setPage] = useState([0, 0])\n\n  const imageIndex = wrap(0, photos.length, page)\n  const paginate = (going: number) => {\n    setPage([page + going, going])\n  }\n\n  return (\n    <XStack\n      overflow=\"hidden\"\n      backgroundColor=\"#000\"\n      position=\"relative\"\n      height={300}\n      width=\"100%\"\n      alignItems=\"center\"\n    >\n      <AnimatePresence initial={false} custom={{ going }}>\n        <GalleryItem key={page} animation=\"slowest\" going={going}>\n          <Image source={{ uri: photos[imageIndex], width: 500, height: 300 }} />\n        </GalleryItem>\n      </AnimatePresence>\n\n      <Button\n        accessibilityLabel=\"Carousel left\"\n        icon={ArrowLeft}\n        size=\"$5\"\n        position=\"absolute\"\n        left=\"$4\"\n        circular\n        elevate\n        onPress={() => paginate(-1)}\n        zi={100}\n      />\n      <Button\n        accessibilityLabel=\"Carousel right\"\n        icon={ArrowRight}\n        size=\"$5\"\n        position=\"absolute\"\n        right=\"$4\"\n        circular\n        elevate\n        onPress={() => paginate(1)}\n        zi={100}\n      />\n    </XStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Tamagui\nDESCRIPTION: Example of a Next.js configuration file (next.config.js) with Tamagui plugin and various options.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/compiler-install.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst withPlugins = require('next-compose-plugins')\nconst { withTamagui } = require('@tamagui/next-plugin')\n\nexport default withPlugins([\n  withTamagui({\n    config: './tamagui.config.ts',\n    components: ['tamagui'],\n\n    // rest are all optional:\n\n    // disable static extraction, faster to iterate in dev mode (default false)\n    disableExtraction: process.env.NODE_ENV === 'development',\n\n    // Exclude react-native-web modules to lighten bundle\n    excludeReactNativeWebExports: ['Switch', 'ProgressBar', 'Picker'],\n\n    // By default, we configure webpack to pass anything inside your root or design system\n    // to the Tamagui loader. If you are importing files from an external package, use this:\n    shouldExtract: (path: string, projectRoot: string) => {\n      if (path.includes('../packages/myapp')) {\n        return true\n      }\n    },\n\n    // Advanced:\n\n    // Many packages give difficulty to the nextjs server-side (node) runtime when un-bundled.\n    // for example, tamagui configures aliases like react-native => react-native-web.\n    // if you're running into a module that has errors importing react-native, you'll want to\n    // use a custom shouldExcludeFromServer function to include it (or override the default).\n    // this is the exact same return type as webpack.externals.\n    // returning undefined will let tamagui handle it, boolean or other values to override.\n    shouldExcludeFromServer: ({ fullPath, request }) => {\n      if (fullPath.includes('my-module')) {\n        return 'commonjs ' + commonjs\n      }\n      if (request === 'some-hard-to-bundle-package') {\n        return true\n      }\n    },\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Positioning Toast Viewport in Tamagui\nDESCRIPTION: Shows how to position the toast viewport for native and custom toasts. For iOS, it demonstrates setting the 'from' option. For custom toasts, it shows positioning examples for top-right and bottom-center.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.15.15.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastProvider burntOptions={{ from: 'bottom' }}>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column-reverse\" top={0} right={0} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column\" bottom={0} left={0} right={0} />\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Component Implementation\nDESCRIPTION: Demonstrates using useTheme with custom theme and component names for subset theming.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-theme.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent(props) {\n  const theme = useTheme(props.theme, 'MyComponent')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Component to Accept Color Tokens in Tamagui\nDESCRIPTION: Creates a styled SVG component that accepts theme color tokens for the 'fill' property. The 'accept' option maps the 'fill' prop to Tamagui's color token system, allowing the component to receive and resolve color token values.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/styled.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst StyledSVG = styled(SVG, {}, {\n  accept: {\n    fill: 'color'\n  } as const\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Tamagui CSS Reset\nDESCRIPTION: Import statement for Tamagui's CSS reset that helps normalize styling across browsers for more consistent appearance.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@tamagui/core/reset.css'\n```\n\n----------------------------------------\n\nTITLE: Adding Variants to a Styled Component in Tamagui\nDESCRIPTION: Demonstrates how to add variants to a styled component, including position, centering, and dynamic sizing based on tokens.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/styled.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from '@tamagui/core'\n\nexport const RoundedSquare = styled(View, {\n  borderRadius: 20,\n\n  variants: {\n    pin: {\n      top: {\n        position: 'absolute',\n        top: 0,\n      },\n    },\n\n    centered: {\n      true: {\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n    },\n\n    size: {\n      '...size': (size, { tokens }) => {\n        return {\n          width: tokens.size[size] ?? size,\n          height: tokens.size[size] ?? size,\n        }\n      },\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Select Component with Sheet Adaptation\nDESCRIPTION: Shows how to implement Select with Sheet adaptation for mobile platforms using Adapt component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/select/1.40.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Select } from 'tamagui' // or '@tamagui/select'\n\nexport default () => (\n  <Select defaultValue=\"\">\n    <Select.Trigger>\n      <Select.Value placeholder=\"Search...\" />\n    </Select.Trigger>\n\n    <Adapt when=\"maxMd\" platform=\"touch\">\n      <Sheet>\n        <Sheet.Frame>\n          <Adapt.Contents />\n        </Sheet.Frame>\n        <Sheet.Overlay />\n      </Sheet>\n    </Adapt>\n\n    <Select.Content>\n      <Select.ScrollUpButton />\n      <Select.Viewport>\n        <Select.Group>\n          <Select.Label />\n          <Select.Item>\n            <Select.ItemText />\n          </Select.Item>\n        </Select.Group>\n      </Select.Viewport>\n      <Select.ScrollDownButton />\n    </Select.Content>\n  </Select>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Switch - Tamagui TSX\nDESCRIPTION: Demonstrates the basic implementation of a Switch component with customizable thumb animation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from 'tamagui'\n\nexport default () => (\n  <Switch size=\"$4\">\n    <Switch.Thumb animation=\"bouncy\" />\n  </Switch>\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Size Variants to ButtonFrame using Spread Variants\nDESCRIPTION: Enhances the ButtonFrame component with size variants using Tamagui's Spread Variants feature for dynamic sizing based on design tokens.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from '@tamagui/core'\n\nconst ButtonFrame = styled(View, {\n  name: 'Button',\n  backgroundColor: '$background',\n  alignItems: 'center',\n  flexDirection: 'row',\n\n  variants: {\n    size: {\n      '...size': (name, { tokens }) => {\n        return {\n          height: tokens.size[name],\n          borderRadius: tokens.radius[name],\n          gap: tokens.space[name].val * 0.2,\n        }\n      },\n    },\n  } as const,\n})\n\nexport const ButtonText = styled(Text, {\n  name: 'ButtonText',\n  color: '$color',\n  userSelect: 'none',\n\n  variants: {\n    size: {\n      '...fontSize': (name, { font }) => ({\n        fontSize: font?.size[name],\n      }),\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ButtonFrame Component with Tamagui\nDESCRIPTION: Defines a ButtonFrame component using Tamagui's styled function, incorporating theme-based styling and hover/press states.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from '@tamagui/core'\n\nconst ButtonFrame = styled(View, {\n  name: 'Button',\n  alignItems: 'center',\n  flexDirection: 'row',\n  backgroundColor: '$background',\n  hoverStyle: {\n    backgroundColor: '$backgroundHover',\n  },\n  pressStyle: {\n    backgroundColor: '$backgroundPress',\n  },\n  height: '$md',\n  borderRadius: '$md',\n  paddingHorizontal: '$sm',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Styled Switch Component in Tamagui\nDESCRIPTION: Example of how to import and use the styled Switch component from Tamagui. This snippet demonstrates creating a basic switch with custom size and animation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.89.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Switch } from 'tamagui' // or '@tamagui/switch'\n\nexport default () => (\n  <Switch size=\"$4\">\n    <Switch.Thumb animation=\"bouncy\" />\n  </Switch>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Tamagui Themes with Sub-themes\nDESCRIPTION: This snippet shows how to create Tamagui themes including a sub-theme for a subtle variation of the dark theme.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst dark = {\n  background: 'black',\n  color: 'white',\n}\n\nconst dark_subtle = {\n  background: '#222', // not as dark as black\n  color: '#ccc', // not as light as white\n}\n\ncreateTamagui({\n  themes: {\n    dark,\n    dark_subtle,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Progress Component in React with Tamagui\nDESCRIPTION: Example of how to use the Progress component in a React application with Tamagui. It demonstrates setting a value and using the Indicator subcomponent with animation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/progress/1.48.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Progress } from 'tamagui'\n\nexport default () => (\n  <Progress value={60}>\n    <Progress.Indicator animation=\"bouncy\" />\n  </Progress>\n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Toast Implementation\nDESCRIPTION: Shows how to handle multiple toast notifications using array mapping.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.8.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [savedCount, setSavedCount] = React.useState(0)\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setSavedCount((old) => old + 1)\n        }}\n      >\n        Show toast\n      </Button>\n      {[...Array(savedCount)].map((_, index) => (\n        <Toast\n          key={index}\n          animation=\"100ms\"\n          enterStyle={{ x: -20, opacity: 0 }}\n          exitStyle={{ x: -20, opacity: 0 }}\n          opacity={1}\n          x={0}\n        >\n          <Toast.Title>Subscribed!</Toast.Title>\n          <Toast.Description>We'll be in touch.</Toast.Description>\n        </Toast>\n      ))}\n    </YStack>\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Tokens in Tamagui Configuration\nDESCRIPTION: This code snippet shows how to define tokens in the Tamagui configuration. Tokens are used for consistent styling across the application, including colors, spacing, and other design values.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/compiler/static/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = createTamagui({\n  tokens: {\n    color: {\n      white: '#fff',\n      black: '#000',\n    },\n    space: {\n      0: 0,\n      1: 5,\n      2: 10,\n    },\n    size: {\n      0: 0,\n      1: 5,\n      2: 10,\n    },\n    radius: {\n      0: 0,\n      1: 3,\n    },\n    zIndex: {\n      0: 0,\n      1: 100,\n      2: 200,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Logic in Tamagui Config\nDESCRIPTION: Illustrates conditional logic related to static rendering in the Tamagui configuration. The code checks if a style should be retained based on a `shouldRetain` variable or the `IS_STATIC` environment variable.  The `process.env.IS_STATIC` check is crucial for determining whether to retain or skip certain styles during static site generation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/next.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (shouldRetain || !(process.env.IS_STATIC === 'is_static')) {\n```\n\n----------------------------------------\n\nTITLE: Defining Shorthands for Tamagui Style Properties\nDESCRIPTION: This example shows how to define shorthand properties for Tamagui that allow for more concise styling code by mapping short aliases to full CSS property names.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// the as const ensures types work with the optional `onlyAllowShorthands` option\nconst shorthands = {\n  ac: 'alignContent',\n  ai: 'alignItems',\n  als: 'alignSelf',\n  bblr: 'borderBottomLeftRadius',\n  bbrr: 'borderBottomRightRadius',\n  bg: 'backgroundColor',\n  br: 'borderRadius',\n  btlr: 'borderTopLeftRadius',\n  btrr: 'borderTopRightRadius',\n  f: 'flex',\n  // ...\n} as const\n\nexport default createTamagui({\n  shorthands,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Tamagui Design System\nDESCRIPTION: Sets up the package.json file for a custom Tamagui design system, including dependencies, build scripts, and file configurations.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/design-systems.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@ourapp/components\",\n  \"types\": \"./types/index.d.ts\",\n  \"main\": \"dist/cjs\",\n  \"module\": \"dist/esm\",\n  \"module:jsx\": \"dist/jsx\",\n  \"files\": [\"types\", \"src\", \"dist\"],\n  \"sideEffects\": [\"*.css\"],\n  \"dependencies\": {\n    \"@tamagui/core\": \"*\"\n  },\n  \"scripts\": {\n    \"build\": \"tamagui-build\",\n    \"watch\": \"tamagui-build --watch\"\n  },\n  \"devDependencies\": {\n    \"@tamagui/build\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Toast Content with useToastState in React\nDESCRIPTION: This snippet demonstrates how to use the useToastState hook to render custom toast content. It checks if a toast is present and not handled natively before rendering the Toast component with title and description.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst CurrentToast = () => {\n  const toast = useToastState()\n\n  // don't show any toast if no toast is present or it's handled natively\n  if (!toast || toast.isHandledNatively) {\n    return null\n  }\n\n  return (\n    <Toast key={toast.id} duration={toast.duration} viewport={toast.viewport}>\n      <Toast.Title>{toast.title}</Toast.Title>\n      <Toast.Description>{toast.message}</Toast.Description>\n    </Toast>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using createThemeBuilder in Tamagui\nDESCRIPTION: This snippet demonstrates how to use createThemeBuilder to generate a suite of themes including light, dark, and subtle variations.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThemeBuilder } from '@tamagui/theme-builder'\n\nconst themesBuilder = createThemeBuilder()\n  .addPalettes({\n    dark: ['#000', '#111', '#222', '#999', '#ccc', '#eee', '#fff'],\n    light: ['#fff', '#eee', '#ccc', '#999', '#222', '#111', '#000'],\n  })\n  .addTemplates({\n    base: {\n      background: 0,\n      color: -0,\n    },\n    subtle: {\n      background: 1,\n      color: -1,\n    }\n  })\n  .addThemes({\n    light: {\n      template: 'base',\n      palette: 'light',\n    },\n    dark: {\n      template: 'base',\n      palette: 'dark',\n    },\n  })\n  .addChildThemes({\n    subtle: {\n      template: 'subtle',\n    },\n  })\n\nexport const themes = themesBuilder.build()\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Implementation\nDESCRIPTION: Example showing how to implement a basic progress bar with animation using the Progress component. The progress value is set to 60% and uses a bouncy animation on the indicator.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/progress/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Progress } from 'tamagui'\n\nexport default () => (\n  <Progress value={60}>\n    <Progress.Indicator animation=\"bouncy\" />\n  </Progress>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Styled RadioGroup Component in Tamagui\nDESCRIPTION: Example of how to use the styled RadioGroup component in a React component. It demonstrates creating a RadioGroup with two items.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/radio-group/1.2.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RadioGroup } from 'tamagui'\n\nexport default () => (\n  <RadioGroup value=\"foo\" gap=\"$2\">\n    <RadioGroup.Item value=\"foo\" id=\"foo-radio-item\">\n      <RadioGroup.Indicator />\n    </RadioGroup.Item>\n    <RadioGroup.Item value=\"bar\" id=\"bar-radio-item\">\n      <RadioGroup.Indicator />\n    </RadioGroup.Item>\n  </RadioGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Dialog Inside Native Modals\nDESCRIPTION: Demonstrates how to make Dialog work within native modal contexts by wrapping the screen in a PortalProvider.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/dialog/1.0.0.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from 'tamagui'\n\n// this component used in react-navigation/expo-router with `presentation: \"modal\"`\nexport function Page() {\n  return (\n    <PortalProvider>\n      {/* rest of your page, including the Dialog... */}\n    </PortalProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Tamagui Optimizing Compiler Example in React Native/Web\nDESCRIPTION: Shows how the Tamagui compiler transforms styled components and hooks into optimized code. The compiler extracts styling to CSS, flattens component trees, and converts dynamic theme and media query hooks into efficient CSS variables and media queries.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/why-a-compiler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TamaguiExamplesCode />\n```\n\n----------------------------------------\n\nTITLE: Allowing Collapsing of All Items in Accordion\nDESCRIPTION: Example of using the collapsible prop to allow all items to be closed in a single-type Accordion.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/accordion/1.0.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion type=\"single\" __collapsible__>\n  <Accordion.Item value=\"item-1\">…</Accordion.Item>\n  <Accordion.Item value=\"item-2\">…</Accordion.Item>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Structure\nDESCRIPTION: Displays the basic anatomy of the Dialog component with all its subcomponents in a typical implementation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/dialog/1.0.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from 'tamagui' // or '@tamagui/dialog'\n\nexport default () => (\n  <Dialog>\n    <Dialog.Trigger />\n    <Dialog.Portal>\n      <Dialog.Overlay />\n      <Dialog.Content>\n        <Dialog.Title />\n        <Dialog.Description />\n        <Dialog.Close />\n        {/* ... */}\n      </Dialog.Content>\n    </Dialog.Portal>\n  </Dialog>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Single Controlled Toast in React with TypeScript\nDESCRIPTION: Demonstrates how to create a single, controlled toast with custom animation and timing using React hooks.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.13.0.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [open, setOpen] = React.useState(false)\n  const timerRef = React.useRef(0)\n\n  React.useEffect(() => {\n    return () => clearTimeout(timerRef.current)\n  }, [])\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setOpen(false)\n          window.clearTimeout(timerRef.current)\n          timerRef.current = window.setTimeout(() => {\n            setOpen(true)\n          }, 150)\n        }}\n      >\n        Single Toast\n      </Button>\n      <Toast\n        onOpenChange={setOpen}\n        open={open}\n        animation=\"100ms\"\n        enterStyle={{ x: -20, opacity: 0 }}\n        exitStyle={{ x: -20, opacity: 0 }}\n        opacity={1}\n        x={0}\n      >\n        <Toast.Title>Subscribed!</Toast.Title>\n        <Toast.Description>We'll be in touch.</Toast.Description>\n      </Toast>\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Area-Aware Toast Viewport in React Native\nDESCRIPTION: This code creates a custom ToastViewport component that respects safe area insets on mobile devices, ensuring toasts are displayed within the visible screen area.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.11.3.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\nconst SafeToastViewport = () => {\n  const { left, top, right } = useSafeAreaInsets()\n  return (\n    <ToastViewport flexDirection=\"column-reverse\" top={top} left={left} right={right} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tamagui configuration file\nDESCRIPTION: TypeScript configuration file for Tamagui, creating a custom configuration based on the default config.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultConfig } from '@tamagui/config/v4'\nimport { createTamagui } from 'tamagui'\n\nexport const tamaguiConfig = createTamagui(defaultConfig)\n\nexport default tamaguiConfig\n\nexport type Conf = typeof tamaguiConfig\n\ndeclare module 'tamagui' {\n  interface TamaguiCustomConfig extends Conf {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Themes with Shared Template in Tamagui\nDESCRIPTION: This snippet demonstrates how to create multiple themes using the same template but different palettes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst colorTemplate = {\n  background: 0,\n  color: 12,\n}\n\nconst blue_theme = createTheme(bluePalette, colorTemplate)\nconst red_theme = createTheme(redPalette, colorTemplate)\n```\n\n----------------------------------------\n\nTITLE: Customized Slider Implementation\nDESCRIPTION: Example demonstrating how to create a custom styled slider component using Tamagui's styled utility\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/slider/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider, styled } from 'tamagui'\n\nconst CustomSliderTrack = styled(Slider.Track, {\n  backgroundColor: 'red',\n})\n\nexport default () => (\n  <Slider size=\"$4\" width={200} defaultValue={[50]} max={100} step={1}>\n    <CustomSliderTrack>\n      <Slider.TrackActive />\n    </CustomSliderTrack>\n    <Slider.Thumb circular index={0} />\n  </Slider>\n)\n```\n\n----------------------------------------\n\nTITLE: Token Value Access Examples\nDESCRIPTION: Examples showing how to access token values using getToken and getTokenValue functions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/exports.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ngetToken('$size.small') // returns on web var(--size-small), native 14\ngetToken('$small', 'size') // returns on web var(--size-small), native 14\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetTokenValue('$size.small') // returns 14\ngetTokenValue('$small', 'size') // returns 14\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog with Sheet Adaptation\nDESCRIPTION: Shows how to implement a Dialog that adapts to a Sheet component on smaller screens using the Adapt feature.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/dialog/1.0.0.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from 'tamagui' // or '@tamagui/dialog'\n\nexport default () => (\n  <Dialog>\n    <Dialog.Trigger />\n\n    <Dialog.Portal>\n      <Dialog.Overlay />\n      <Dialog.Content>\n        <Dialog.Title />\n        <Dialog.Description />\n        <Dialog.Close />\n        {/* ... */}\n      </Dialog.Content>\n    </Dialog.Portal>\n\n    {/* optionally change to sheet when small screen */}\n    <Dialog.Adapt when=\"maxMd\">\n      <Dialog.Sheet>\n        <Dialog.Sheet.Frame>\n          <Dialog.Adapt.Contents />\n        </Dialog.Sheet.Frame>\n        <Dialog.Sheet.Overlay />\n      </Dialog.Sheet>\n    </Dialog.Adapt>\n  </Dialog>\n)\n```\n\n----------------------------------------\n\nTITLE: Using useMediaPropsActive Hook for Responsive Styles\nDESCRIPTION: Demonstrates how to use useMediaPropsActive hook to handle responsive styling in custom components with media query support.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, StackProps, useMediaPropsActive } from 'tamagui' // or '@tamagui/core'\n\nconst CustomWidget = (props: StackProps) => {\n  const activeProps = useMediaPropsActive(props)\n\n  console.log(`The current color for this screen size is`, activeProps.backgroundColor)\n\n  return <Stack {...modifyProps(activeProps)} />\n}\n\nexport default () => (\n  <CustomWidget\n    backgroundColor=\"red\"\n    $large={{\n      backgroundColor: 'green',\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Implementation\nDESCRIPTION: Example showing how to implement a circular Avatar component with an image source and fallback. Uses size prop and demonstrates basic usage of Avatar.Image and Avatar.Fallback subcomponents.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/avatar/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from 'tamagui'\n\nexport default () => (\n  <Avatar circular size=\"$6\">\n    <Avatar.Image src=\"http://picsum.photos/200/300\" />\n    <Avatar.Fallback bc=\"red\" />\n  </Avatar>\n)\n```\n\n----------------------------------------\n\nTITLE: Positioning Toast Viewport in Tamagui\nDESCRIPTION: These snippets show how to position the ToastViewport component for custom toasts. It demonstrates top-right and bottom-center positioning using flexbox properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column-reverse\" top={0} right={0} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column\" bottom={0} left={0} right={0} />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Component with styled() in Tamagui\nDESCRIPTION: Demonstrates how to use styled() to create a custom Circle component based on View. The component includes variants for positioning, centering, and size, showcasing the power of Tamagui's styling system.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/stack-and-text.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from 'tamagui' // or '@tamagui/core'\n\nexport const Circle = styled(View, {\n  borderRadius: 100_000_000,\n\n  variants: {\n    pin: {\n      top: {\n        position: 'absolute',\n        top: 0,\n      },\n    },\n\n    centered: {\n      true: {\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n    },\n\n    size: {\n      '...size': (size, { tokens }) => {\n        return {\n          width: tokens.size[size] ?? size,\n          height: tokens.size[size] ?? size,\n        }\n      },\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Runtime Theme Usage Example\nDESCRIPTION: Shows how to use theme values at runtime with optimization considerations.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-theme.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { theme, View } from '@tamagui/core'\n\nexport default () => {\n  const theme = useTheme()\n\n  // access the value\n  console.log(theme.bg.val)\n\n  return (\n    <View backgroundColor={theme.color1} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ButtonText Component in Tamagui\nDESCRIPTION: Creates a ButtonText component using Tamagui's styled function, with theme-based text styling and user selection disabled.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, styled } from '@tamagui/core'\n\nexport const ButtonText = styled(Text, {\n  name: 'ButtonText',\n  color: '$color',\n  fontFamily: '$body',\n  fontSize: '$md',\n  lineHeight: '$md',\n  userSelect: 'none',\n})\n```\n\n----------------------------------------\n\nTITLE: Tamagui Theme Generation Pattern\nDESCRIPTION: Example of how Tamagui v4 themes are generated with color palettes. This pattern shows the creation of base themes (light/dark), accent themes, and color-specific themes like blue, red, yellow, and green with their respective light and dark variants.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/config-v4.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst darkPalette = [\n  '#050505',\n  '#151515',\n  '#191919',\n  '#232323',\n  '#282828',\n  '#323232',\n  '#424242',\n  '#494949',\n  '#545454',\n  '#626262',\n  '#a5a5a5',\n  '#fff',\n]\n\nconst lightPalette = [\n  '#fff',\n  '#f2f2f2',\n  'hsl(0, 0%, 93%)',\n  'hsl(0, 0%, 91%)',\n  'hsl(0, 0%, 88%)',\n  'hsl(0, 0%, 85%)',\n  'hsl(0, 0%, 82%)',\n  'hsl(0, 0%, 76%)',\n  'hsl(0, 0%, 56%)',\n  'hsl(0, 0%, 50%)',\n  'hsl(0, 0%, 42%)',\n  'hsl(0, 0%, 9%)',\n]\n\nconst lightShadows = {\n  shadow1: 'rgba(0,0,0,0.04)',\n  shadow2: 'rgba(0,0,0,0.08)',\n  shadow3: 'rgba(0,0,0,0.16)',\n  shadow4: 'rgba(0,0,0,0.24)',\n  shadow5: 'rgba(0,0,0,0.32)',\n  shadow6: 'rgba(0,0,0,0.4)',\n}\n\nconst darkShadows = {\n  shadow1: 'rgba(0,0,0,0.2)',\n  shadow2: 'rgba(0,0,0,0.3)',\n  shadow3: 'rgba(0,0,0,0.4)',\n  shadow4: 'rgba(0,0,0,0.5)',\n  shadow5: 'rgba(0,0,0,0.6)',\n  shadow6: 'rgba(0,0,0,0.7)',\n}\n\nconst blackColors = {\n  black1: darkPalette[0],\n  black2: darkPalette[1],\n  black3: darkPalette[2],\n  black4: darkPalette[3],\n  black5: darkPalette[4],\n  black6: darkPalette[5],\n  black7: darkPalette[6],\n  black8: darkPalette[7],\n  black9: darkPalette[8],\n  black10: darkPalette[9],\n  black11: darkPalette[10],\n  black12: darkPalette[11],\n}\n\nconst whiteColors = {\n  white1: lightPalette[0],\n  white2: lightPalette[1],\n  white3: lightPalette[2],\n  white4: lightPalette[3],\n  white5: lightPalette[4],\n  white6: lightPalette[5],\n  white7: lightPalette[6],\n  white8: lightPalette[7],\n  white9: lightPalette[8],\n  white10: lightPalette[9],\n  white11: lightPalette[10],\n  white12: lightPalette[11],\n}\n\nconst generatedThemes = createThemes({\n  componentThemes: defaultComponentThemes,\n\n  base: {\n    palette: {\n      dark: darkPalette,\n      light: lightPalette,\n    },\n\n    // for values we don't want being inherited onto sub-themes\n    extra: {\n      light: {\n        ...Colors.blue,\n        ...Colors.green,\n        ...Colors.red,\n        ...Colors.yellow,\n        ...lightShadows,\n        ...blackColors,\n        ...whiteColors,\n        shadowColor: lightShadows.shadow1,\n      },\n      dark: {\n        ...Colors.blueDark,\n        ...Colors.greenDark,\n        ...Colors.redDark,\n        ...Colors.yellowDark,\n        ...darkShadows,\n        ...blackColors,\n        ...whiteColors,\n        shadowColor: darkShadows.shadow1,\n      },\n    },\n  },\n\n  // inverse accent theme\n  accent: {\n    palette: {\n      dark: lightPalette,\n      light: darkPalette,\n    },\n  },\n\n  childrenThemes: {\n    black: {\n      palette: {\n        dark: Object.values(blackColors),\n        light: Object.values(blackColors),\n      },\n    },\n    white: {\n      palette: {\n        dark: Object.values(whiteColors),\n        light: Object.values(whiteColors),\n      },\n    },\n\n    blue: {\n      palette: {\n        dark: Object.values(Colors.blueDark),\n        light: Object.values(Colors.blue),\n      },\n    },\n    red: {\n      palette: {\n        dark: Object.values(Colors.redDark),\n        light: Object.values(Colors.red),\n      },\n    },\n    yellow: {\n      palette: {\n        dark: Object.values(Colors.yellowDark),\n        light: Object.values(Colors.yellow),\n      },\n    },\n    green: {\n      palette: {\n        dark: Object.values(Colors.greenDark),\n        light: Object.values(Colors.green),\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Tokens Using getTokens in Tamagui\nDESCRIPTION: This snippet shows how to access tokens using the getTokens function from @tamagui/core. It demonstrates accessing the small size token.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/tokens.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getTokens } from '@tamagui/core'\n\ngetTokens().size.small\n```\n\n----------------------------------------\n\nTITLE: Using Variants in a Styled Component\nDESCRIPTION: Shows how to use the defined variants when rendering the component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/styled.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RoundedSquare pin=\"top\" centered size=\"$lg\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js _app.tsx with Tamagui Provider\nDESCRIPTION: Setting up the Next.js _app.tsx file to include the Tamagui Provider and theme support.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Optional: add the reset to get more consistent styles across browsers\nimport '@tamagui/core/reset.css'\n\nimport { NextThemeProvider, useRootTheme } from '@tamagui/next-theme'\nimport { AppProps } from 'next/app'\nimport Head from 'next/head'\nimport React, { useMemo } from 'react'\nimport { TamaguiProvider, createTamagui } from 'tamagui'\n\n// import the config you just exported from the tamagui.config.ts file\nimport { config } from './tamagui.config'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  // memo to avoid re-render on dark/light change\n  const contents = useMemo(() => {\n    return <Component {...pageProps} />\n  }, [pageProps])\n\n  return (\n    <>\n      <Head>\n        <title>Your page title</title>\n        <meta name=\"description\" content=\"Your page description\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <NextThemeProvider>\n        <TamaguiProvider config={tamaguiConfig} disableInjectCSS disableRootThemeClass>\n          {contents}\n        </TamaguiProvider>\n      </NextThemeProvider>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Style Override Behavior with Prop Order\nDESCRIPTION: Example demonstrating how prop order affects style precedence. By placing fontSize after the spread operator, this component ensures that fontSize will always be 36 regardless of what props are passed in.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyCalendarHeader = (props: CalHeaderProps) => {\n  return (\n    <CalHeader isHero {...props} fontSize={36}>\n      {monthName}\n    </CalHeader>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Label Component Usage with Input in Tamagui\nDESCRIPTION: Demonstrates how to use the Label component from Tamagui to create an accessible form label connected to an input element using htmlFor/id binding.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/label/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Label } from 'tamagui'\n\nexport default () => (\n  <>\n    <Label htmlFor=\"name\">Name</Label>\n    <Input id=\"name\" defaultValue=\"Nate Wienert\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Text Component Usage in Tamagui\nDESCRIPTION: Demonstrates basic usage of the Text component with theme values, direct styling, and hover effects. Shows how to apply colors, font families, and interactive styles.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/text/1.0.0-alpha.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, XStack, YStack } from 'tamagui'\n\nexport default () => (\n  <>\n    <Text\n      // can add theme values\n      color=\"$white\"\n      fontFamily=\"$body\"\n      // or just use direct values\n      fontSize={20}\n      hoverStyle={{\n        color: '$color2',\n      }}\n    >\n      Lorem ipsum\n    </Text>\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Toast Viewports with Custom Naming\nDESCRIPTION: This example demonstrates how to set up multiple toast viewports with custom names and how to target specific viewports when creating toast components using the viewportName property.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.9.1.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <ToastProvider>\n      <ToastViewport /> // name will be \"default\"\n      <ToastViewport name=\"viewport-custom\" />\n    </ToastProvider>\n  )\n}\n\nconst MyComponent = () => {\n  return <Toast> // goes to default viewport // ...</Toast>\n}\n\nconst MyComponent2 = () => {\n  return <Toast viewportName=\"viewport-custom\">// ...</Toast>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sub-themes in Tamagui\nDESCRIPTION: Demonstrates how to use sub-themes in Tamagui. It shows nesting Theme components to apply a base theme (dark) and a sub-theme (pink).\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/theme.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Theme } from 'tamagui'\n\nexport default () => {\n  return (\n    <Theme name=\"dark\">\n      <Button>I have the theme dark</Button>\n      <Theme name=\"pink\">\n        <Button>I have the theme pink-dark</Button>\n      </Theme>\n    </Theme>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Non-Native Toasts with ToastViewport in TypeScript\nDESCRIPTION: Shows how to position non-native toasts using the ToastViewport component, with examples for top-right and bottom-center placement.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.13.0.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column-reverse\" top={0} right={0} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column\" bottom={0} left={0} right={0} />\n```\n\n----------------------------------------\n\nTITLE: Installing Webpack Dev Server\nDESCRIPTION: Command to install webpack-dev-server as a development dependency using Yarn for local development.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/webpack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D webpack-dev-server\n```\n\n----------------------------------------\n\nTITLE: Basic Sheet Implementation\nDESCRIPTION: Basic structure of a Sheet component with its essential parts - Overlay, Handle, and Frame\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.116.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sheet } from 'tamagui' // or '@tamagui/sheet'\n\nexport default () => (\n  <Sheet>\n    <Sheet.Overlay />\n    <Sheet.Handle />\n    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Tamagui Client Component in App Router\nDESCRIPTION: A basic client component using Tamagui's Button component to demonstrate using Tamagui in the Next.js app directory.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { Button } from 'tamagui'\n\nexport default function Home() {\n  return <Button>Hello world!</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Usage\nDESCRIPTION: Example showing basic implementation of the Switch component with size prop and animated thumb\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.58.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from 'tamagui' // or '@tamagui/switch'\n\nexport default () => (\n  <Switch size=\"$4\">\n    <Switch.Thumb animation=\"bouncy\" />\n  </Switch>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tokens in Tamagui\nDESCRIPTION: This snippet shows how to create custom tokens, specifically for icon sizes, using the createTokens function.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/tokens.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst tokens = createTokens({\n  // ...other tokens\n  icon: {\n    small: 16,\n    medium: 24,\n    large: 32,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using RadioGroup Component in React\nDESCRIPTION: Example of how to use the RadioGroup component in a React application. It demonstrates creating a radio group with two items and their indicators.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/radio-group/1.3.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RadioGroup } from 'tamagui'\n\nexport default () => (\n  <RadioGroup value=\"foo\" gap=\"$2\">\n    <RadioGroup.Item value=\"foo\" id=\"foo-radio-item\">\n      <RadioGroup.Indicator />\n    </RadioGroup.Item>\n    <RadioGroup.Item value=\"bar\" id=\"bar-radio-item\">\n      <RadioGroup.Indicator />\n    </RadioGroup.Item>\n  </RadioGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Specific Tokens in Tamagui Components\nDESCRIPTION: This snippet demonstrates how to use specific tokens (like custom icon sizes) in Tamagui components using the new specific tokens syntax.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/tokens.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => (\n  <Stack\n    // access with the category first:\n    width=\"$icon.small\"\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Using Media Queries with Inline Props\nDESCRIPTION: Demonstrates how to use media queries with inline $ prefixed props for responsive styling. Shows mobile-first design approach with dynamic style changes based on viewport size.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-media.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XStack, useMedia } from 'tamagui'\n\nexport default () => {\n  const [x, setX] = useState(0)\n  return (\n    <XStack\n      backgroundColor=\"red\"\n      $gtSm={{\n        backgroundColor: 'blue',\n      }}\n      $gtMd={{\n        backgroundColor: x > 0.5 ? 'green' : 'yellow',\n      }}\n    >\n      <Button onPress={() => setX(Math.random())}>Hello</Button>\n    </XStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App Router with Tamagui\nDESCRIPTION: Setting up the Next.js configuration for the App Router with Tamagui support.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withTamagui } = require('@tamagui/next-plugin')\n\nmodule.exports = function (name, { defaultConfig }) {\n  let config = {\n    ...defaultConfig,\n    // ...your configuration\n  }\n\n  const tamaguiPlugin = withTamagui({\n    config: './tamagui.config.ts',\n    components: ['tamagui'],\n    appDir: true,\n  })\n\n  return {\n    ...config,\n    ...tamaguiPlugin(config),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Tamagui Web Support\nDESCRIPTION: This snippet demonstrates how to configure Metro for Tamagui web support. It includes settings for CSS extraction, component optimization, and specifying the Tamagui configuration file.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require('expo/metro-config')\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // [Web-only]: Enables CSS support in Metro.\n  isCSSEnabled: true,\n})\n\n// add nice web support with optimizing compiler + CSS extraction\nconst { withTamagui } = require('@tamagui/metro-plugin')\nmodule.exports = withTamagui(config, {\n  components: ['tamagui'],\n  config: './tamagui.config.ts',\n  outputCSS: './tamagui-web.css',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Toasts with Barebone API\nDESCRIPTION: Demonstrates how to implement multiple toast notifications simultaneously using array mapping and state management.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.9.1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [savedCount, setSavedCount] = React.useState(0)\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setSavedCount((old) => old + 1)\n        }}\n      >\n        Show toast\n      </Button>\n      {[...Array(savedCount)].map((_, index) => (\n        <Toast\n          key={index}\n          animation=\"100ms\"\n          enterStyle={{ x: -20, opacity: 0 }}\n          exitStyle={{ x: -20, opacity: 0 }}\n          opacity={1}\n          x={0}\n        >\n          <Toast.Title>Subscribed!</Toast.Title>\n          <Toast.Description>We'll be in touch.</Toast.Description>\n        </Toast>\n      ))}\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sheet with createSheet\nDESCRIPTION: Example of creating a custom sheet component using createSheet with styled components for Handle, Overlay, and Frame.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.59.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, styled } from '@tamagui/core'\nimport { createSheet } from '@tamagui/sheet'\n\nconst Handle = styled(Stack, {\n  variants: {\n    open: {\n      true: {\n        opacity: 0.35,\n      },\n      false: {\n        opacity: 0.5,\n      },\n    },\n  } as const,\n})\n\nconst Overlay = styled(Stack, {\n  variants: {\n    open: {\n      true: {\n        opacity: 1,\n        pointerEvents: 'auto',\n      },\n      false: {\n        opacity: 0,\n        pointerEvents: 'none',\n      },\n    },\n  } as const,\n})\n\nconst Frame = styled(Stack, {\n  backgroundColor: '$background',\n  // can add open variant as well\n})\n\nexport const Sheet = createSheet({\n  Frame,\n  Handle,\n  Overlay,\n})\n```\n\n----------------------------------------\n\nTITLE: Using ScrollView Component with Tamagui\nDESCRIPTION: This snippet demonstrates how to use the ScrollView component from Tamagui. It imports necessary components and creates a scrollable list of items using YStack and ListItem components within the ScrollView.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/scroll-view/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScrollView, YStack, ListItem } from 'tamagui'\n\nexport default () => (\n  <ScrollView>\n    <YStack>\n      <ListItem>1</ListItem>\n      <ListItem>2</ListItem>\n      <ListItem>3</ListItem>\n      <ListItem>4</ListItem>\n    </YStack>\n  </ScrollView>\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Stack Layout with Styling in Tamagui\nDESCRIPTION: Shows advanced usage of XStack and YStack components with various styling properties, media queries, and hover effects.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/stacks/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, XStack, YStack } from 'tamagui'\n\nexport default () => (\n  <XStack\n    flex={1}\n    flexWrap=\"wrap\"\n    backgroundColor=\"#fff\"\n    hoverStyle={{\n      backgroundColor: 'red',\n    }}\n    // media query\n    $gtSm={{\n      flexDirection: 'column',\n      flexWrap: 'nowrap',\n    }}\n  >\n    <YStack gap=\"$3\">\n      <Text>Hello</Text>\n      <Text>World</Text>\n    </YStack>\n  </XStack>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Select with Sheet for Native Platforms in Tamagui\nDESCRIPTION: This snippet shows how to use the Select component with Sheet for native platforms. It demonstrates the usage of Adapt component to render Select as a sheet on mobile devices, which is the recommended approach for native platforms.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/select/1.19.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Select } from 'tamagui' // or '@tamagui/select'\n\nexport default () => (\n  <Select defaultValue=\"\">\n    <Select.Trigger>\n      <Select.Value placeholder=\"Search...\" />\n    </Select.Trigger>\n\n    <Adapt when=\"maxMd\" platform=\"touch\">\n      {/* or <Select.Sheet> */}\n      <Sheet>\n        <Sheet.Frame>\n          <SheetContents />\n        </Sheet.Frame>\n        <Sheet.Overlay />\n      </Sheet>\n    </Adapt>\n\n    <Select.Content>\n      <Select.ScrollUpButton />\n      <Select.Viewport>\n        <Select.Group>\n          <Select.Label />\n          <Select.Item>\n            <Select.ItemText />\n          </Select.Item>\n        </Select.Group>\n      </Select.Viewport>\n      <Select.ScrollDownButton />\n    </Select.Content>\n  </Select>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Component Structure\nDESCRIPTION: Complete anatomy of a Popover component including trigger, content, arrow, and adaptive sheet functionality.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.125.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popover, Adapt } from 'tamagui' // or '@tamagui/popover'\n\nexport default () => (\n  <Popover>\n    <Popover.Trigger />\n\n    <Popover.Content>\n      <Popover.Arrow />\n      <Popover.Close />\n      {/* ScrollView is optional, can just put any contents inside if not scrollable */}\n      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>\n      {/* ... */}\n    </Popover.Content>\n\n    {/* optionally change to sheet when small screen */}\n    {/* you can also use <Popover.Adapt /> */}\n    <Adapt when=\"maxMd\">\n      <Popover.Sheet>\n        <Popover.Sheet.Overlay />\n        <Popover.Sheet.Frame>\n          <Popover.Sheet.ScrollView>\n            <Adapt.Contents />\n          </Popover.Sheet.ScrollView>\n        </Popover.Sheet.Frame>\n      </Popover.Sheet>\n    </Adapt>\n  </Popover>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Media Queries with useMedia Hook\nDESCRIPTION: Shows how to use the useMedia hook for responsive styling with conditional logic and spread operators. The hook can be optimized away at compile time for web targets.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-media.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XStack, useMedia } from 'tamagui'\n\nexport default () => {\n  const media = useMedia()\n\n  return (\n    <XStack\n      backgroundColor={media.sm ? 'red' : 'blue'}\n      {...(media.lg && {\n        x: 10,\n        y: 10,\n      })}\n    >\n      <Button>Hello</Button>\n    </XStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Tamagui in Expo\nDESCRIPTION: Babel configuration for Expo projects using Tamagui, including the Tamagui babel plugin and optionally the Reanimated plugin.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true)\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        '@tamagui/babel-plugin',\n        {\n          components: ['tamagui'],\n          config: './tamagui.config.ts',\n          logTimings: true,\n          disableExtraction: process.env.NODE_ENV === 'development',\n        },\n      ],\n\n      // NOTE: this is only necessary if you are using reanimated for animations\n      'react-native-reanimated/plugin',\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js _document.tsx for Tamagui\nDESCRIPTION: Modifying the Next.js _document.tsx file to include Tamagui and React Native Web styles.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextDocument, {\n  DocumentContext,\n  Head,\n  Html,\n  Main,\n  NextScript,\n} from 'next/document'\nimport { StyleSheet } from 'react-native'\n\n// import the config you just exported from the tamagui.config.ts file\nimport { config } from './tamagui.config'\n\nexport default class Document extends NextDocument {\n  static async getInitialProps({ renderPage }: DocumentContext) {\n    const page = await renderPage()\n\n    // @ts-ignore RN doesn't have this type\n    const rnwStyle = StyleSheet.getSheet()\n\n    return {\n      ...page,\n      styles: (\n        <>\n          <style\n            id={rnwStyle.id}\n            dangerouslySetInnerHTML={{ __html: rnwStyle.textContent }}\n          />\n          <style\n            dangerouslySetInnerHTML={{\n              __html: tamaguiConfig.getCSS(),\n            }}\n          />\n        </>\n      ),\n    }\n  }\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head>\n          <meta id=\"theme-color\" name=\"theme-color\" />\n          <meta name=\"color-scheme\" content=\"light dark\" />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Properties in Tamagui Components\nDESCRIPTION: This example demonstrates how to use the shorthand properties in Tamagui components, where 'br' expands to 'borderRadius' and accepts a token value.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<View br=\"$myToken\" />\n```\n\n----------------------------------------\n\nTITLE: Using Unspaced Component in Tamagui with TSX\nDESCRIPTION: This code snippet demonstrates how to use the Unspaced component in Tamagui to prevent spacing for specific children within a container that has spacing applied. It shows a View with space applied, containing regular Views and an Unspaced component with absolute positioning.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/unspaced/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, Unspaced, View } from '@tamagui/core'\n\nexport default () => (\n  <View position=\"relative\" space>\n    <View width={20} height={20} />\n    {/* space */}\n    <View width={20} height={20} />\n    {/* no */}\n    <Unspaced>\n      <Text position=\"absolute\">Some absolute positioned text</Text>\n    </Unspaced>\n  </View>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Toast Viewports in React\nDESCRIPTION: This example shows how to set up multiple toast viewports and reference them by name when displaying toasts in different parts of the application.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.11.3.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <ToastProvider>\n      <ToastViewport /> {/* name will be \"default\" */}\n      <ToastViewport name=\"viewport-custom\" />\n    </ToastProvider>\n  )\n}\n\nconst MyComponent = () => {\n  return <Toast>{/* goes to default viewport */}</Toast>\n}\n\nconst MyComponent2 = () => {\n  return <Toast viewportName=\"viewport-custom\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sheet Component Structure\nDESCRIPTION: Demonstrates the basic anatomy of a Sheet component with its essential subcomponents including Overlay, Handle, and Frame.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.123.18.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sheet } from 'tamagui' // or '@tamagui/sheet'\n\nexport default () => (\n  <Sheet>\n    <Sheet.Overlay />\n    <Sheet.Handle />\n    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing AnimatePresence with Sliding Pane Animation in Tamagui\nDESCRIPTION: A pseudo-code example demonstrating how to use AnimatePresence to animate components as they enter and exit the DOM. This pattern allows for directional animations with custom variants based on state.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/animations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n  // you would have your own logic for the \"direction\" here:\n  const towards = isGoingRight ? -1 : 1\n  \n  return (\n    <AnimatePresence custom={{ towards }} initial={false}>\n      {/* note the key changes when you need to \"run\" the animation: */}\n      <SlidingPane key={currentPane} animation=\"200ms\">\n        {/* Contents of your pane */}\n      </SlidingPane>\n    </AnimatePresence>\n  )\n}\n\nconst SlidingPane = styled(View, {\n  x: 0,\n  opacity: 1,\n\n  variants: {\n    towards: (dir: Direction) => ({\n      enterStyle: {\n        x: dir === -1 ? -10 : 10,\n        opacity: 0,\n      },\n      exitStyle: {\n        x: dir === -1 ? 10 : -10,\n        opacity: 0,\n      },\n    }),\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Styled Component with Variants in Tamagui\nDESCRIPTION: Example of creating a styled Text component with a variant. The 'isHero' variant applies multiple style properties including fontSize, backgroundColor, and color when set to true.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst CalHeader = styled(Text, {\n  variants: {\n    isHero: {\n      true: {\n        fontSize: 36,\n        backgroundColor: 'blue',\n        color: 'white',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Component in React with Tamagui\nDESCRIPTION: Example of how to use the Toast component in a React application. It demonstrates setting up the ToastProvider, creating a custom CurrentToast component, and using the useToast hook to display toasts.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.11.3.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui' // or '@tamagui/button'\nimport { Toast, ToastProvider, useToast } from '@tamagui/toast'\n\nexport default () => (\n  <ToastProvider native={['mobile']}>\n    <CurrentToast />\n    <MyPage />\n    <ToastViewport />\n  </ToastProvider>\n)\n\nconst CurrentToast = () => {\n  const { currentToast } = useToast()\n\n  // only show the component if it's present and not handled by native toast\n  if (!currentToast || currentToast.isHandledNatively) return null\n  return (\n    <Toast key={currentToast.id}>\n      <Toast.Title>{currentToast.title}</Toast.Title>\n      <Toast.Description>{currentToast.message}</Toast.Description>\n    </Toast>\n  )\n}\n\nconst MyPage = () => {\n  const { show } = useToast()\n\n  return (\n    <Button onPress={() => show('Done!', { message: 'Form submitted successfully.' })}>\n      Show Toast\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Component with Themed Styles\nDESCRIPTION: This example shows how to create an interactive component using styled() that uses theme values for background colors with different states like hover and press.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nexport const InteractiveFrame = styled(XStack, {\n  borderRadius: '$1',\n  paddingVertical: '$2',\n  paddingHorizontal: '$3',\n  backgroundColor: '$background',\n  justifyContent: 'center',\n  alignItems: 'center',\n  cursor: 'pointer',\n  flexWrap: 'nowrap',\n  flexDirection: 'row',\n  flexShrink: 1,\n\n  hoverStyle: {\n    backgroundColor: '$backgroundHover',\n  },\n\n  pressStyle: {\n    backgroundColor: '$backgroundPress',\n  },\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui Compiler for Theme Building\nDESCRIPTION: This snippet shows how to configure the Tamagui compiler to automatically watch and build themes at build-time, saving bundle size.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nwithTamagui({\n  config: './tamagui.config.ts',\n  components: ['tamagui'],\n\n  themeBuilder: {\n    input: './themes-input.tsx',\n    output: './themes.tsx',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Toast with Barebone API\nDESCRIPTION: Shows implementation of a single toast notification using the barebone API with animation and timeout control.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.9.1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [open, setOpen] = React.useState(false)\n  const timerRef = React.useRef(0)\n\n  React.useEffect(() => {\n    return () => clearTimeout(timerRef.current)\n  }, [])\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setOpen(false)\n          window.clearTimeout(timerRef.current)\n          timerRef.current = window.setTimeout(() => {\n            setOpen(true)\n          }, 150)\n        }}\n      >\n        Single Toast\n      </Button>\n      <Toast\n        onOpenChange={setOpen}\n        open={open}\n        animation=\"100ms\"\n        enterStyle={{ x: -20, opacity: 0 }}\n        exitStyle={{ x: -20, opacity: 0 }}\n        opacity={1}\n        x={0}\n      >\n        <Toast.Title>Subscribed!</Toast.Title>\n        <Toast.Description>We'll be in touch.</Toast.Description>\n      </Toast>\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Component in Tamagui with TSX\nDESCRIPTION: Demonstrates how to import and use the Input component from Tamagui. The example shows how to apply size and styling properties directly to the component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/inputs/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from 'tamagui'\n\nexport const App = () => (\n  // Accepts size and style properties directly\n  <Input size=\"$4\" borderWidth={2} />\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of VisuallyHidden Component in Tamagui\nDESCRIPTION: Demonstrates how to use the VisuallyHidden component to wrap content that should be hidden visually but remain accessible to screen readers.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/visually-hidden/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, VisuallyHidden } from 'tamagui'\n\nexport default () => (\n  <VisuallyHidden>\n    <Text>Add annotations here</Text>\n  </VisuallyHidden>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Area Toast Viewport in React Native with TypeScript\nDESCRIPTION: Demonstrates how to create a ToastViewport that respects safe area insets in React Native using react-native-safe-area-context.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.13.0.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\nconst SafeToastViewport = () => {\n  const { left, top, right } = useSafeAreaInsets()\n  return (\n    <ToastViewport flexDirection=\"column-reverse\" top={top} left={left} right={right} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Toasts with createToast in Tamagui\nDESCRIPTION: The createToast function provides an alternative way to work with toasts. It returns an ImperativeToastProvider and a useToast hook for managing toasts throughout the app.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.8.0.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ImperativeToastProvider, useToast } = createToast({\n  native: false\n});\n\n// Wrap your app with the provider\n<ImperativeToastProvider>\n  <App />\n</ImperativeToastProvider>\n\n// Use the hook in your components\nconst { show, currentToast } = useToast();\nshow('Hello, Toast!', { duration: 3000 });\n```\n\n----------------------------------------\n\nTITLE: Conditional Animation Setup in Tamagui Components\nDESCRIPTION: This snippet shows how to set up conditional animations in Tamagui components. It demonstrates the recommended approach for disabling animations while maintaining the ability to animate the component in the future.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/animations.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<View animation={condition ? 'animation-name' : null} />\n```\n\n----------------------------------------\n\nTITLE: Adding Global Font Family to NextTamaguiProvider\nDESCRIPTION: Code to add a global style for setting the font family in the NextTamaguiProvider component using useServerInsertedHTML.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<style jsx global>{`\n  html {\n    font-family: 'Inter';\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Minimal Manual Webpack Configuration for Tamagui\nDESCRIPTION: A more detailed webpack configuration that includes setup for react-native-web, environment variables, and file extensions for web development.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/webpack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// some stuff for react-native\nconfig.plugins.push(\n  new webpack.DefinePlugin({\n    process: {\n      env: {\n        __DEV__: process.env.NODE_ENV === 'development' ? 'true' : 'false',\n        NODE_ENV: JSON.stringify(process.env.NODE_ENV),\n      },\n    },\n  })\n)\n\nconfig.resolve.alias['react-native$'] = 'react-native-web'\n\n// set up web extensions\ncompiler.options.resolve.extensions = [\n  '.web.tsx',\n  '.web.ts',\n  '.web.js',\n  '.ts',\n  '.tsx',\n  '.js',\n]\n```\n\n----------------------------------------\n\nTITLE: Using TamaguiPlugin for Webpack\nDESCRIPTION: Alternative Webpack configuration using the TamaguiPlugin for simplified setup.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/compiler-install.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { TamaguiPlugin } = require('tamagui-loader')\n\nmodule.exports = {\n  plugins: [\n    new TamaguiPlugin({\n      config: './tamagui.config.ts',\n      components: ['tamagui'],\n      importsWhitelist: ['constants.js', 'colors.js'],\n      logTimings: true,\n      disableExtraction: process.env.NODE_ENV === 'development',\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tamagui Usage Without Configuration\nDESCRIPTION: Simple example showing basic Tamagui usage without any configuration, demonstrating View and Text components that can be optimized for web or React Native.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, styled } from '@tamagui/core'\n\nexport default () => (\n  <View width={200} height={200} backgroundColor=\"rgba(0,0,0,0.2)\">\n    <Text color=\"#f2f2f2\" fontSize={24}>\n      Tamagui can optimize this to div + span or View + Text on React Native.\n    </Text>\n  </View>\n)\n```\n\n----------------------------------------\n\nTITLE: Positioning Toasts at Bottom Center with ToastViewport\nDESCRIPTION: This snippet demonstrates how to configure the ToastViewport component to position toasts at the bottom center of the screen by setting appropriate position properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.9.1.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column\" bottom={0} left={0} right={0} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Toasts in React with TypeScript\nDESCRIPTION: Shows how to create and manage multiple toasts using React state, with a button to trigger new toasts.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.13.0.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [savedCount, setSavedCount] = React.useState(0)\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setSavedCount((old) => old + 1)\n        }}\n      >\n        Show toast\n      </Button>\n      {[...Array(savedCount)].map((_, index) => (\n        <Toast\n          key={index}\n          animation=\"100ms\"\n          enterStyle={{ x: -20, opacity: 0 }}\n          exitStyle={{ x: -20, opacity: 0 }}\n          opacity={1}\n          x={0}\n        >\n          <Toast.Title>Subscribed!</Toast.Title>\n          <Toast.Description>We'll be in touch.</Toast.Description>\n        </Toast>\n      ))}\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tokens with Themes in Tamagui\nDESCRIPTION: Shows how to share values from tokens to themes. Tokens act as fallback values for themes, similar to global CSS variables versus scoped ones.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst tokens = createTokens({\n  color: {\n    black: '#000',\n    white: '#fff',\n  },\n})\n\n// theme:\nconst dark = {\n  background: tokens.color.black,\n  color: tokens.color.white,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tamagui Heading Components\nDESCRIPTION: Demonstrates basic usage of all heading components including H1-H6 and the base Heading component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/headings/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H1, H2, H3, H4, H5, H6, Heading } from 'tamagui'\n\nexport default () => (\n  <>\n    <H1>Heading 1</H1>\n    <H2>Heading 2</H2>\n    <H3>Heading 3</H3>\n    <H4>Heading 4</H4>\n    <H5>Heading 5</H5>\n    <H6>Heading 6</H6>\n    <Heading>Heading</Heading>\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Input Component with Focus Styles\nDESCRIPTION: Example showcasing the Input component with focusStyle prop support, which works similarly to pressStyle and hoverStyle for styling components based on focus state.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/tamagui-enters-beta-themes-and-animations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Inputs\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in React with Tamagui\nDESCRIPTION: Demonstrates how to import and use the Button component from Tamagui library in a React component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default () => <Button>Lorem ipsum</Button>\n```\n\n----------------------------------------\n\nTITLE: Basic Sheet Component Structure in Tamagui\nDESCRIPTION: Demonstrates the basic structure and anatomy of the Sheet component in Tamagui, including Overlay, Handle, and Frame subcomponents.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.27.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sheet } from 'tamagui' // or '@tamagui/sheet'\n\nexport default () => (\n  <Sheet>\n    <Sheet.Overlay />\n    <Sheet.Handle />\n    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Context with createStyledContext\nDESCRIPTION: Simple example showing how to create a styled context using Tamagui's createStyledContext API. This returns a modified React Context that can be used for sharing styling properties with automatic memoization.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStyledContext } from '@tamagui/core'\n\nexport const ButtonContext = createStyledContext({\n  size: '$md' as SizeTokens,\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Styles for ToggleGroup.Item in Tamagui\nDESCRIPTION: Example of how to customize the active styles of a ToggleGroup.Item using Tamagui's styled function. This creates a new component with a red background when active.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toggle-group/1.10.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ToggleGroup } from '@tamagui/toggle-group'\nimport { styled } from 'tamagui'\n\nconst MyToggleGroupItem = styled(ToggleGroup.Item, {\n  variants: {\n    active: {\n      true: {\n        backgroundColor: 'red'\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Inline Styling with Shorthands in Tamagui Components\nDESCRIPTION: Shows how to use inline styles with shorthands in Tamagui components. This approach leads to easy styling, and the Tamagui optimizing compiler ensures optimal performance.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/stack-and-text.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'tamagui' // or '@tamagui/core'\n\nexport default () => (\n  <View mx=\"$sm\" scale={1.2}>\n    <Text c=\"$color\">Hello</Text>\n  </View>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Themes in Tamagui\nDESCRIPTION: Demonstrates how to use nested themes in component tree. Tamagui supports theme nesting with parent-child relationships through naming conventions like 'parentName_subName'.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Theme name=\"dark\">\n  <Theme name=\"green\">\n    <Button theme=\"subtle\">Hello world</Button>\n  </Theme>\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Using Tokens in Tamagui Component Styles\nDESCRIPTION: This example demonstrates how to use tokens in Tamagui components by prefixing values with $ to access the appropriate token based on the style property.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => (\n  <Text fontSize=\"$lg\" lineHeight=\"$lg\" fontFamily=\"$mono\" color=\"$white\">\n    Hello world\n  </Text>\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Variants with Tamagui styled()\nDESCRIPTION: Illustrates complex variant definitions including string values, boolean toggles, and functional size variants that work with design tokens.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/tamagui.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from '@tamagui/core'\n\nexport const RoundedSquare = styled(View, {\n  borderRadius: 20,\n\n  variants: {\n    pin: {\n      // string values\n      top: {\n        position: 'absolute',\n        top: 0,\n      },\n    },\n\n    centered: {\n      // boolean\n      true: {\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      false: {\n        alignItems: 'flex-start'\n      }\n    },\n\n    size: {\n      // functional that take all \"size\" tokens, so <View size=\"$sm\" /> passes into here\n      '...size': (size, { tokens }) => {\n        return {\n          width: tokens.size[size] ?? size,\n          height: tokens.size[size] ?? size,\n        }\n      },\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PortalProvider\nDESCRIPTION: Setup for PortalProvider at the root of the application to enable portal-based rendering of popovers.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.125.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Theme in Tamagui\nDESCRIPTION: Shows how to use the reset prop on the Theme component to revert to the grandparent's theme value in a nested theme structure.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/theme.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Theme name=\"dark\">\n  <Theme name=\"pink\">\n    <Theme reset>\n      {/* This square and all children will have theme \"dark\" */}\n      <Square bg=\"$background\" size={10} />\n    </Theme>\n  </Theme>\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Button Hero Template\nDESCRIPTION: A template for demonstrating the Button component in hero examples.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.28.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Button\n```\n\n----------------------------------------\n\nTITLE: Using the Button with Icon Component\nDESCRIPTION: Example showing how to use the Button component with the Icon subcomponent. The Icon automatically adopts the appropriate size and color based on the Button's context.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyIcon } from 'some-icon-library'\n\nexport default () => (\n  <Button size=\"$lg\">\n    <Button.Icon>\n      <MyIcon />\n    </Button.Icon>\n    <Button.Text>\n      Hello world\n    </Button.Text>\n  </Button>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation\nDESCRIPTION: Example showing the basic structure and anatomy of a Tooltip component implementation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.105.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip } from 'tamagui' // or '@tamagui/tooltip'\n\nexport default () => (\n  <Tooltip>\n    <Tooltip.Trigger />\n    <Tooltip.Content>\n      <Tooltip.Arrow />\n      {/* ... */}\n    </Tooltip.Content>\n  </Tooltip>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sheet Structure in Tamagui\nDESCRIPTION: Demonstrates the basic structure of a Sheet component, including Overlay, Handle, and Frame sub-components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sheet } from 'tamagui' // or '@tamagui/sheet'\n\nexport default () => (\n  <Sheet>\n    <Sheet.Overlay />\n    <Sheet.Handle />\n    <Sheet.Frame>\n      {/* ...inner contents */}\n    </Sheet.Frame>\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: String Variant Implementation in Tamagui\nDESCRIPTION: Demonstrates how to create a string-based variant for dynamic color styling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/variants.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from 'tamagui' // or '@tamagui/core'\n\nexport const ColorfulView = styled(View, {\n  variants: {\n    color: {\n      ':string': (color) => {\n        // color is of type \"string\"\n        return {\n          color,\n          borderColor: color,\n        }\n      },\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Paragraph Component Implementation in Tamagui\nDESCRIPTION: Shows how Paragraph component extends SizableText with default theme values for font family, color, and size using styled utility.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/text/1.0.0-alpha.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Paragraph = styled(SizableText, {\n  fontFamily: '$body',\n  color: '$color',\n  // note tamagui uses a generic \"true\" token that your sizes should set to be the same as the default on your scale\n  size: '$true',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component in React with Tamagui\nDESCRIPTION: Example of how to import and use the Switch component in a React component with Tamagui. This snippet demonstrates creating a Switch with a custom size and an animated thumb.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.28.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from 'tamagui' // or '@tamagui/switch'\n\nexport default () => (\n  <Switch size=\"$4\">\n    <Switch.Thumb animation=\"bouncy\" />\n  </Switch>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Toast Placement for iOS with BurntOptions\nDESCRIPTION: This snippet demonstrates how to customize toast placement on iOS by configuring the 'from' property in burntOptions for the ToastImperativeProvider component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.9.1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastImperativeProvider options={{ burntOptions: { from: 'bottom' } }}>\n```\n\n----------------------------------------\n\nTITLE: Rendering Toast Contents with useToastState in React\nDESCRIPTION: Demonstrates how to use the useToastState hook to render toast contents conditionally based on the current toast state. It checks if a toast is present and not handled natively before rendering.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.15.15.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst CurrentToast = () => {\n  const toast = useToastState()\n\n  // don't show any toast if no toast is present or it's handled natively\n  if (!toast || toast.isHandledNatively) {\n    return null\n  }\n\n  return (\n    <Toast key={toast.id} duration={toast.duration} viewport={toast.viewport}>\n      <Toast.Title>{toast.title}</Toast.Title>\n      <Toast.Description>{toast.message}</Toast.Description>\n    </Toast>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui in TypeScript\nDESCRIPTION: Setting up the Tamagui configuration file with default settings and type declarations.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultConfig } from '@tamagui/config/v4'\nimport { createTamagui } from 'tamagui' // or '@tamagui/core'\n\nconst appConfig = createTamagui(defaultConfig)\n\nexport type AppConfig = typeof appConfig\n\ndeclare module 'tamagui' {\n  // or '@tamagui/core'\n  // overrides TamaguiCustomConfig so your custom types\n  // work everywhere you import `tamagui`\n  interface TamaguiCustomConfig extends AppConfig {}\n}\n\nexport default appConfig\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Dependencies\nDESCRIPTION: Command for installing the Toast component and its native dependency Burnt\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/toast burnt\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sheet with createSheet\nDESCRIPTION: Example of creating a custom sheet implementation using createSheet with styled components\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.116.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Stack, styled } from '@tamagui/core'\nimport { createSheet } from '@tamagui/sheet'\n\nconst Handle = styled(Stack, {\n  variants: {\n    open: {\n      true: {\n        opacity: 0.35,\n      },\n      false: {\n        opacity: 0.5,\n      },\n    },\n  } as const,\n})\n\nconst Overlay = styled(Stack, {\n  variants: {\n    open: {\n      true: {\n        opacity: 1,\n        pointerEvents: 'auto',\n      },\n      false: {\n        opacity: 0,\n        pointerEvents: 'none',\n      },\n    },\n  } as const,\n})\n\nconst Frame = styled(Stack, {\n  backgroundColor: '$background',\n  // can add open variant as well\n})\n\nexport const Sheet = createSheet({\n  Frame,\n  Handle,\n  Overlay,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Tokens with Prefixed Keys in Tamagui\nDESCRIPTION: This snippet demonstrates an alternative way to access tokens using a prefixed key ($) with the getTokens function.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/tokens.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ngetTokens().size['$small']\n```\n\n----------------------------------------\n\nTITLE: Customizing ListItem Component in Tamagui\nDESCRIPTION: Advanced example of customizing the ListItem component, including custom styling for frame, title, subtitle, and text.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/list-item/1.0.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { forwardRef } from 'react'\nimport {\n  ListItemFrame,\n  ListItemText,\n  ListItemTitle,\n  ListItemSubtitle,\n  styled,\n  themeable,\n  useListItem,\n} from 'tamagui'\n\nconst CustomListItemFrame = styled(ListItemFrame, {\n  backgroundColor: 'orange', // or \"$color\", etc.\n})\n\nconst CustomListItemTitle = styled(ListItemTitle, {\n  color: 'blue',\n})\n\nconst CustomListItemSubtitle = styled(ListItemSubtitle, {\n  color: 'pink',\n})\n\nconst CustomListItemText = styled(ListItemText, {\n  color: 'red',\n})\n\nexport const ListItem = CustomListItemFrame.styleable((propsIn, ref) => {\n  const { props } = useListItem(propsIn, {\n    Title: CustomListItemTitle,\n    Text: CustomListItemText,\n    Subtitle: CustomListItemSubtitle,\n  })\n\n  return <CustomListItemFrame {...props} ref={ref} />\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up PortalProvider for Dialog\nDESCRIPTION: Demonstrates how to configure the PortalProvider at the root of an application to enable Dialog functionality.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/dialog/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Basic Group Usage with Items\nDESCRIPTION: Example showing how to use XGroup component with Group.Item wrapper for buttons\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.6.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage with Item:\nexport default () => (\n  <XGroup>\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic FontLanguage Usage with Text Component\nDESCRIPTION: Demonstrates basic usage of FontLanguage component with conditional font selection based on language.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/font-language.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FontLanguage body={isFrench ? 'french' : 'default'}>\n  <Text fontfamily=\"$body\">Hello world</Text>\n</FontLanguage>\n```\n\n----------------------------------------\n\nTITLE: Configuring Themes in Tamagui\nDESCRIPTION: This snippet demonstrates how to set up themes in Tamagui. Themes allow for consistent styling across the application and can be used to create light and dark modes or other variations.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/compiler/static/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = createTamagui({\n  themes: {\n    light: {\n      background: '#fff',\n      color: '#000',\n    },\n    dark: {\n      background: '#000',\n      color: '#fff',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Specific Tokens in Styled Components in Tamagui\nDESCRIPTION: This snippet shows how to use specific tokens in styled components created with Tamagui's styled function.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/tokens.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled, Stack } from '@tamagui/core'\n\nexport const MyStack = styled(Stack, {\n  width: '$icon.small'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Checkbox Component\nDESCRIPTION: Command to install the checkbox component package independently from Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.3.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/checkbox\n```\n\n----------------------------------------\n\nTITLE: Importing Tamagui CSS in One Layout\nDESCRIPTION: Updates the root layout to import the generated Tamagui CSS file for optimized styling in production.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/one.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport '../public/tamagui.css'\n// ... rest of your imports and component\n```\n\n----------------------------------------\n\nTITLE: Using Tamagui TextArea Component in React\nDESCRIPTION: Example of how to import and use the TextArea component from Tamagui for multi-line input fields in a React application. This snippet shows basic usage with custom styling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/new-inputs/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextArea } from 'tamagui'\n\nexport const App = () => (\n  // Accepts size and style properties directly\n  <TextArea gap=\"$4\" borderWidth={2} />\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Tamagui Component in App\nDESCRIPTION: Demonstrates how to import and use a custom Circle component from the design system package in an app.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/design-systems.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Circle } from '@ourapp/components'\n\nexport default () => <Circle size=\"$large\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Components using React Context\nDESCRIPTION: Example of implementing compound components with standard React Context to share size properties between Button components. This approach uses createContext and requires styleable wrapper functions for proper style merging.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext } from 'react'\nimport { SizeTokens, GetProps, withStaticProperties } from '@tamagui/core'\nimport { Button } from './OurButton'\n\nconst SizeContext = createContext<SizeTokens>('$md')\n\nconst ButtonFrame = Button.styleable(\n  ({ size = '$md', ...props }: GetProps<typeof OGB.ButtonFrame>) => {\n    return (\n      <SizeContext.Provider value={size}>\n        <Button size={size} {...props} />\n      </SizeContext.Provider>\n    )\n  },\n)\n\nconst ButtonText = Button.Text.styleable(\n  (props: GetProps<typeof OGB.ButtonText>) => {\n    const size = useContext(SizeContext)\n    return <Button.Text size={size} {...props} />\n  },\n)\n\nexport const NewButton = withStaticProperties(ButtonFrame, {\n  Text: ButtonText,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Tamagui Themes and Sub-themes in Components\nDESCRIPTION: This example demonstrates how to apply Tamagui themes and sub-themes to components using the Theme component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Theme, styled } from '@tamagui/core'\n\nconst Square = styled(View, {\n  background: '$background',\n  width: 100,\n  height: 100,\n})\n\nexport default () => (\n  <Theme name=\"dark\">\n    {/* this will have a background of black */}\n    <Square />\n\n    <Theme name=\"subtle\">\n      {/* this will have a background of #222 */}\n      <Square />\n    </Theme>\n  </Theme>\n)\n```\n\n----------------------------------------\n\nTITLE: Toast Component Structure\nDESCRIPTION: Basic anatomy of the Toast component showing the required structure with ToastProvider, Toast elements, and ToastViewport\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastProvider>\n  <Toast>\n    <Toast.Title />\n    <Toast.Description />\n    <Toast.Action />\n    <Toast.Close />\n  </Toast>\n\n  <ToastViewport />\n</ToastProvider>\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for @tamagui/build\nDESCRIPTION: Example package.json configuration for using @tamagui/build. It includes necessary fields for source, output directories, scripts, exports, and tamagui-specific settings.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/build/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"src/index.tsx\",\n  \"types\": \"./types/index.d.ts\",\n  \"main\": \"dist/cjs\",\n  \"module\": \"dist/esm\",\n  \"removeSideEffects\": \"true\",\n  \"scripts\": {\n    \"build\": \"tamagui-build\",\n    \"watch\": \"tamagui-build --watch\",\n    \"clean\": \"tamagui-build clean\"\n  },\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"react-native-import\": \"./dist/esm/index.native.js\",\n      \"react-native\": \"./dist/cjs/index.native.js\",\n      \"types\": \"./types/index.d.ts\",\n      \"import\": \"./dist/esm/index.mjs\",\n      \"require\": \"./dist/cjs/index.js\"\n    }\n  },\n  \"devDependencies\": {\n    \"@tamagui/build\": \"latest\"\n  },\n  \"tamagui\": {\n    \"build\": {\n      \"skipEnvToMeta\": true,\n      \"bundle.native\": \"./src/index.ts\",\n      \"bundle.native.test\": \"./src/index.ts\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Component in Tamagui\nDESCRIPTION: Demonstrates how to use the Card component in Tamagui. The Card component allows displaying content with a header, footer, background image, title, subtitle, and description.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Card\n```\n\n----------------------------------------\n\nTITLE: Quick Start Configuration with Default Settings\nDESCRIPTION: Quick start configuration using Tamagui's default configuration with type support.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/config\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defaultConfig } from '@tamagui/config/v4'\nimport { createTamagui } from '@tamagui/core'\n\nexport const config = createTamagui(defaultConfig)\n\ntype CustomConfig = typeof config\n\ndeclare module 'tamagui' {\n  interface TamaguiCustomConfig extends CustomConfig {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Tamagui\nDESCRIPTION: Example of a Webpack configuration file (webpack.config.js) with Tamagui loader and optimization settings.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/compiler-install.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { shouldExclude } = require('tamagui-loader')\n\nconst tamaguiOptions = {\n  config: './tamagui.config.ts',\n  components: ['tamagui'],\n  importsWhitelist: ['constants.js', 'colors.js'],\n  logTimings: true,\n  disableExtraction: process.env.NODE_ENV === 'development',\n  // optional advanced optimization of styled() definitions within your app itself, not just ones in your components option\n  // default is false\n  enableDynamicEvaluation: false,\n}\n\nmodule.exports = {\n  resolve: {\n    alias: {\n      // Resolve react-native to react-native-web\n      'react-native$': require.resolve('react-native-web'),\n      // optional, for lighter svg icons on web\n      'react-native-svg': require.resolve('@tamagui/react-native-svg'),\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.[jt]sx?$/,\n        // you'll likely want to adjust this helper function,\n        // but it serves as a decent start that you can copy/paste from\n        exclude: path => shouldExclude(path, __dirname, tamaguiOptions),\n        use: [\n          // optionally thread-loader for significantly faster compile!\n          'thread-loader',\n\n          // works nicely alongside esbuild\n          {\n            loader: 'esbuild-loader',\n          },\n\n          {\n            loader: 'tamagui-loader',\n            options: tamaguiOptions,\n          },\n        ]\n      }\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components with Parent Variants in Tamagui\nDESCRIPTION: This example demonstrates how to define styled components that can access their parent components' variants. It shows a parent component (ColorfulText) with color and size variants, and a child component (MyParagraph) that inherits and utilizes these variants.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/variants.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst ColorfulText = styled(Text, {\n  variants: {\n    colored: {\n      true: {\n        color: '$color',\n      },\n    },\n\n    large: {\n      true: {\n        fontSize: '$8',\n      },\n    },\n  } as const,\n})\n\nconst MyParagraph = styled(ColorfulText, {\n  colored: true,\n\n  variants: {\n    hero: {\n      true: {\n        large: true,\n      },\n    },\n  } as const,\n})\n```\n\n----------------------------------------\n\nTITLE: Popover Component Anatomy in React\nDESCRIPTION: Example of the basic structure and components of a Popover in Tamagui, including optional adaptation to a Sheet for smaller screens.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.43.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popover } from 'tamagui' // or '@tamagui/popover'\n\nexport default () => (\n  <Popover>\n    <Popover.Trigger />\n\n    <Popover.Content>\n      <Popover.Arrow />\n      <Popover.Close />\n      {/* ScrollView is optional, can just put any contents inside if not scrollable */}\n      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>\n      {/* ... */}\n    </Popover.Content>\n\n    {/* optionally change to sheet when small screen */}\n    <Popover.Adapt when=\"maxMd\">\n      <Popover.Sheet>\n        <Popover.Sheet.Overlay />\n        <Popover.Sheet.Frame>\n          <Popover.Sheet.ScrollView>\n            <Popover.Adapt.Contents />\n          </Popover.Sheet.ScrollView>\n        </Popover.Sheet.Frame>\n      </Popover.Sheet>\n    </Popover.Adapt>\n  </Popover>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Group with Item Components in Tamagui\nDESCRIPTION: Example of using XGroup with XGroup.Item components to create a horizontal group of buttons with automatic border radius handling and spacing.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.56.1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage with Item:\nexport default () => (\n  <XGroup>\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Package\nDESCRIPTION: Commands for installing the Tooltip component and its portal dependency.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/tooltip\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Using Tamagui Image Component\nDESCRIPTION: Example showing how to use the Image component with proper source configuration including width, height, and URI. The component supports both container styling and source dimensions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/image/1.13.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => (\n  <Image\n    source={{ width: 200, height: 200, uri: 'https://...' }}\n    width=\"100%\"\n    height=\"100%\"\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Limited Animation Properties in Tamagui\nDESCRIPTION: Demonstrates two approaches to limit which properties are animated: using the animateOnly prop to specify properties, or using the array-style configuration object to control per-style animation values with customization options.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/animations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// animate only background using animateOnly\n<View animation=\"100ms\" animateOnly={['background']} />\n\n// alternative, more powerful syntax to control per-style animation values\n<View\n  animation={[\n    // this is the default animation\n    '100ms',\n    {\n      // now you can override per-prop using a preset\n      background: '200ms',\n      // or by defining a custom animation that matches the reanimated syntax:\n      // note that `transform` covers all the flat transform animations (x, y, scale, etc), and you can't target those individually yet\n      transform: {\n        type: 'spring',\n        delay: 100,\n        mass: 1,\n        // ...\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Group without Item Components in Tamagui\nDESCRIPTION: Simplified example of XGroup usage without XGroup.Item components, where spacing and border radius are applied directly to children components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.56.1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage without Item:\nexport default () => (\n  <XGroup>\n    <Button>First</Button>\n    <Button>Second</Button>\n    <Button>Third</Button>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing create-tamagui using npm\nDESCRIPTION: A command to create a new Tamagui project using npm's create command. This sets up a monorepo structure based on the blank template from the Tamagui repository.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/core/create-tamagui/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create tamagui\n```\n\n----------------------------------------\n\nTITLE: Basic Text Component Usage in Tamagui\nDESCRIPTION: Demonstrates basic usage of Text, SizableText, and Paragraph components in a React component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/text/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => (\n  <>\n    <Text>Text</Text>\n    <SizableText>Sizable Text</SizableText>\n    <Paragraph>Paragraph</Paragraph>\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Sizing a Button in Tamagui\nDESCRIPTION: Example showing how to adjust the size of a Button using the size prop, which can accept a theme token or a numeric value.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.28.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default () => <Button size=\"$6\">Lorem ipsum</Button>\n```\n\n----------------------------------------\n\nTITLE: Add PortalProvider in App.tsx\nDESCRIPTION: This code snippet demonstrates how to integrate the `PortalProvider` component at the root of your application. This is necessary when using `modal={true}` with the Tooltip and ensures that the Tooltip renders correctly in a portal.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.122.0.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Basic Group Usage with Item Components\nDESCRIPTION: Example of using XGroup with XGroup.Item components to create a horizontal group of buttons with automatically managed spacing and border radius.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.7.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage with Item:\nexport default () => (\n  <XGroup>\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component in Tamagui\nDESCRIPTION: Command to install the Popover component independently if not using the full Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.43.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/popover\n```\n\n----------------------------------------\n\nTITLE: Defining Component-specific Theme Variables for Light and Dark Modes\nDESCRIPTION: Shows how to create specific theme variables for a component in both light and dark modes. Component themes must have the first letter capitalized.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst dark_Circle = {\n  background: 'darkred',\n  color: 'white',\n}\n\nconst light_Circle = {\n  background: 'lightred',\n  color: 'black',\n}\n```\n\n----------------------------------------\n\nTITLE: Sized Group Component in React\nDESCRIPTION: Illustrates how to use the size property with XGroup to apply appropriate border radius to children using design tokens.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\nexport default () => (\n  <XGroup size=\"$6\">\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Group Usage without Items\nDESCRIPTION: Simplified example of XGroup usage without Group.Item wrappers, spacing direct children\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.6.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage without Item:\nexport default () => (\n  <XGroup>\n    <Button>First</Button>\n    <Button>Second</Button>\n    <Button>Third</Button>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Group with Size Token for Consistent Spacing\nDESCRIPTION: Example showing how to use the size property with XGroup to apply token-based sizing for consistent border radius values across grouped elements.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.7.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\nexport default () => (\n  <XGroup size=\"$6\">\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui Plugin in Webpack\nDESCRIPTION: Example configuration for using the Tamagui plugin in webpack.config.js. It sets up the plugin with a config file path and specifies components to be included.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/webpack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { TamaguiPlugin } = require('tamagui-loader')\n\nconfig.plugins.push(\n  new TamaguiPlugin({\n    config: './src/tamagui.config.ts',\n    components: ['tamagui'],\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Sheet Component Usage with Props in TSX\nDESCRIPTION: This code snippet is a template for using the Sheet component with various props. It's marked as a 'hero' example, suggesting it's a primary demonstration of the component's capabilities. The actual implementation details are not provided in the snippet.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.21.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx hero template=Sheet\n\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Loader for Webpack\nDESCRIPTION: Command to install the Tamagui loader package for Webpack.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/compiler-install.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add tamagui-loader\n```\n\n----------------------------------------\n\nTITLE: Icon Customization with Props\nDESCRIPTION: Demonstrates how to customize icons using inline props for color and size.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/lucide-icons/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Icon.AlertCircle color=\"red\" size={48} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Toast Without Hooks in React\nDESCRIPTION: This example shows how to implement a single toast component without using hooks, managing the toast's open state and animation manually.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [open, setOpen] = React.useState(false)\n  const timerRef = React.useRef(0)\n\n  React.useEffect(() => {\n    return () => clearTimeout(timerRef.current)\n  }, [])\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setOpen(false)\n          window.clearTimeout(timerRef.current)\n          timerRef.current = window.setTimeout(() => {\n            setOpen(true)\n          }, 150)\n        }}\n      >\n        Single Toast\n      </Button>\n      <Toast\n        onOpenChange={setOpen}\n        open={open}\n        animation=\"100ms\"\n        enterStyle={{ x: -20, opacity: 0 }}\n        exitStyle={{ x: -20, opacity: 0 }}\n        opacity={1}\n        x={0}\n      >\n        <Toast.Title>Subscribed!</Toast.Title>\n        <Toast.Description>We'll be in touch.</Toast.Description>\n      </Toast>\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Popover Component Structure\nDESCRIPTION: Complete anatomy of the Popover component showing all possible sub-components and adaptive layout options.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.110.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popover, Adapt } from 'tamagui' // or '@tamagui/popover'\n\nexport default () => (\n  <Popover>\n    <Popover.Trigger />\n\n    <Popover.Content>\n      <Popover.Arrow />\n      <Popover.Close />\n      {/* ScrollView is optional, can just put any contents inside if not scrollable */}\n      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>\n      {/* ... */}\n    </Popover.Content>\n\n    {/* optionally change to sheet when small screen */}\n    {/* you can also use <Popover.Adapt /> */}\n    <Adapt when=\"maxMd\">\n      <Popover.Sheet>\n        <Popover.Sheet.Overlay />\n        <Popover.Sheet.Frame>\n          <Popover.Sheet.ScrollView>\n            <Adapt.Contents />\n          </Popover.Sheet.ScrollView>\n        </Popover.Sheet.Frame>\n      </Popover.Sheet>\n    </Adapt>\n  </Popover>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Separator Component in TSX\nDESCRIPTION: This snippet demonstrates how to use the Separator component within an XStack layout. It shows the creation of vertical separators between text elements.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/separator/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => (\n  <XStack alignItems=\"center\">\n    <Paragraph>Blog</Paragraph>\n    <Separator alignSelf=\"stretch\" vertical />\n    <Paragraph>Docs</Paragraph>\n    <Separator alignSelf=\"stretch\" vertical />\n    <Paragraph>Source</Paragraph>\n  </XStack>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle Component with Tamagui\nDESCRIPTION: Defines a Circle component using Tamagui's styled function, including size variants and prop types.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/design-systems.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetProps, YStack, styled } from 'tamagui' // or '@tamagui/core' if extending just that\n\nexport const Circle = styled(YStack, {\n  alignItems: 'center',\n  justifyContent: 'center',\n  borderRadius: 100_000_000,\n  overflow: 'hidden',\n\n  variants: {\n    size: {\n      '...size': (size, { tokens }) => {\n        return {\n          width: tokens.size[size] ?? size,\n          height: tokens.size[size] ?? size,\n        }\n      },\n    },\n  },\n})\n\nexport type CircleProps = GetProps<typeof Circle>\n```\n\n----------------------------------------\n\nTITLE: Tamagui Configuration with Language Variants\nDESCRIPTION: Configuration example showing how to set up language-specific font variants in tamagui.config.ts.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/font-language.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFont, createTamagui, createTokens } from 'tamagui'\n\nexport default createTamagui({\n  fonts: {\n    body: createFont({\n      family: 'Inter, Helvetica, Arial, sans-serif',\n      // ...\n    }),\n    body_cn: createFont({\n      family: 'Inter-CN',\n      // ...\n    }),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation\nDESCRIPTION: Basic example showing how to implement a slider component with default configuration including track and thumb elements\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/slider/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from 'tamagui'\n\nexport default () => (\n  <Slider size=\"$4\" width={200} defaultValue={[50]} max={100} step={1}>\n    <Slider.Track>\n      <Slider.TrackActive />\n    </Slider.Track>\n    <Slider.Thumb circular index={0} />\n  </Slider>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing AlertDialog in Native Modals\nDESCRIPTION: Example showing how to properly implement AlertDialog within native modal contexts.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/alert-dialog/1.0.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from 'tamagui'\n\n// this component used in react-navigation/expo-router with `presentation: \"modal\"`\nexport function Page() {\n  return (\n    <PortalProvider>\n      {/* rest of your page, including the Dialog... */}\n    </PortalProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using styleable for Higher-Order Components\nDESCRIPTION: Shows how to use the styleable method to properly style higher-order components that wrap Tamagui-styled components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/styled.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst StyledText = styled(Text)\n\n// note the styleable wrapper here:\nconst HigherOrderStyledText = StyledText.styleable((props, ref) => (\n  <StyledText ref={ref} {...props} />\n))\n\nconst StyledHigherOrderStyledText = styled(HigherOrderStyledText, {\n  variants: {\n    // variants now merge correctly\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lucide Icons with Theming in Tamagui\nDESCRIPTION: Example of using Lucide icons from the @tamagui/lucide-icons package, showing how they work with themes and sizing. The Button component passes theme and size props automatically to icons.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/tamagui-enters-beta-themes-and-animations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Play } from '@tamagui/lucide-icons'\nimport { Button } from 'tamagui'\n\n// theme and size are properly passed from Button to icons automatically\nexport default () => <Button size=\"$6\" icon={Play} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Toasts without Hooks in React\nDESCRIPTION: Demonstrates how to implement multiple toasts without using hooks in React. It uses useState to manage the count of toasts and maps over the count to render multiple Toast components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.15.15.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [savedCount, setSavedCount] = React.useState(0)\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setSavedCount((old) => old + 1)\n        }}\n      >\n        Show toast\n      </Button>\n      {[...Array(savedCount)].map((_, index) => (\n        <Toast\n          key={index}\n          animation=\"100ms\"\n          enterStyle={{ x: -20, opacity: 0 }}\n          exitStyle={{ x: -20, opacity: 0 }}\n          opacity={1}\n          x={0}\n        >\n          <Toast.Title>Subscribed!</Toast.Title>\n          <Toast.Description>We'll be in touch.</Toast.Description>\n        </Toast>\n      ))}\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Image Component Hero Template\nDESCRIPTION: Template placeholder for the Image component demo in Tamagui. This component combines React Native Web Image capabilities with Tamagui styling props, supporting both web and native platforms with SSR functionality.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/image/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Image\n```\n\n----------------------------------------\n\nTITLE: Implementing a Single Controlled Toast in React\nDESCRIPTION: This code demonstrates how to create a single, controlled toast with custom animation and timing. It uses React hooks to manage the toast's open state and includes a button to trigger the toast.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.11.3.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [open, setOpen] = React.useState(false)\n  const timerRef = React.useRef(0)\n\n  React.useEffect(() => {\n    return () => clearTimeout(timerRef.current)\n  }, [])\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setOpen(false)\n          window.clearTimeout(timerRef.current)\n          timerRef.current = window.setTimeout(() => {\n            setOpen(true)\n          }, 150)\n        }}\n      >\n        Single Toast\n      </Button>\n      <Toast\n        onOpenChange={setOpen}\n        open={open}\n        animation=\"100ms\"\n        enterStyle={{ x: -20, opacity: 0 }}\n        exitStyle={{ x: -20, opacity: 0 }}\n        opacity={1}\n        x={0}\n      >\n        <Toast.Title>Subscribed!</Toast.Title>\n        <Toast.Description>We'll be in touch.</Toast.Description>\n      </Toast>\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Variable Structure Example\nDESCRIPTION: Shows the structure of a parsed theme object with variables and their properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-theme.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  background: {\n    val: '#000',\n    variable: 'var(--background)',\n    name: 'background',\n    isVar: true,\n  },\n  color: {\n    val: '#fff',\n    variable: 'var(--color)',\n    name: 'color',\n    isVar: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TextArea Component in Tamagui with TSX\nDESCRIPTION: Shows how to import and use the TextArea component from Tamagui for multi-line text inputs. The example demonstrates applying size and border styling properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/inputs/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextArea } from 'tamagui'\n\nexport const App = () => (\n  // Accepts size and style properties directly\n  <TextArea size=\"$4\" borderWidth={2} />\n)\n```\n\n----------------------------------------\n\nTITLE: Sizing ListItem Component in Tamagui\nDESCRIPTION: Example of using the size prop to adjust the ListItem's dimensions and styling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/list-item/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from 'tamagui'\n\nexport default () => <ListItem size=\"$6\">Lorem ipsum</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Setting up Tamagui Provider in One Layout\nDESCRIPTION: Configures the root layout file to wrap the application with TamaguiProvider, enabling Tamagui styling throughout the app.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/one.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TamaguiProvider } from 'tamagui'\nimport { Slot } from 'one'\nimport config from '../tamagui.config'\n\nexport default function Layout() {\n  return (\n    <TamaguiProvider config={config}>\n      <Slot />\n    </TamaguiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Non-Native Toasts at Bottom Center in TSX\nDESCRIPTION: This snippet demonstrates how to position non-native toasts to appear at the bottom center of the screen using the ToastViewport component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.11.3.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column\" bottom={0} left={0} right={0} />\n```\n\n----------------------------------------\n\nTITLE: Install Styled Checkbox with npm\nDESCRIPTION: Installs the styled Checkbox component from the @tamagui/checkbox package using npm. This component includes Tamagui's default styles.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.85.0.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/checkbox\n```\n\n----------------------------------------\n\nTITLE: Using Styled Components with Props in Tamagui\nDESCRIPTION: Example showing how to use a styled component with props in a functional component. The CalHeader component accepts isHero and fontSize properties which determine its styling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyCalendar = (props: { isHero?: boolean; headerFontSize?: number }) => {\n  return (\n    <>\n      {/* ... some other components... */}\n      <CalHeader isHero={props.isHero} fontSize={props.headerFontSize}>\n        {monthName}\n      </CalHeader>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Area Toast Viewport in React Native\nDESCRIPTION: This snippet shows how to create a SafeToastViewport component that respects the device's safe area insets using react-native-safe-area-context.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\nconst SafeToastViewport = () => {\n  const { left, top, right } = useSafeAreaInsets()\n  return (\n    <ToastViewport flexDirection=\"column-reverse\" top={top} left={left} right={right} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Expo Router layout with Tamagui\nDESCRIPTION: Example of how to update the Expo Router layout file to include Tamagui provider and theme configuration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport '../tamagui-web.css'\n\nimport { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native'\nimport { Stack } from 'expo-router'\nimport { useColorScheme } from 'react-native'\nimport { TamaguiProvider } from 'tamagui'\n\nimport { tamaguiConfig } from '../tamagui.config'\n\nexport default function RootLayout() {\n  const colorScheme = useColorScheme()\n\n  return (\n    // add this\n    <TamaguiProvider config={tamaguiConfig} defaultTheme={colorScheme!}>\n      <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n        <Stack>\n          <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n          <Stack.Screen name=\"modal\" options={{ presentation: 'modal' }} />\n        </Stack>\n      </ThemeProvider>\n    </TamaguiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Base Heading Component Definition\nDESCRIPTION: Shows how the base Heading component is defined in Tamagui, extending from Paragraph with specific styling and accessibility properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/headings/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Heading = styled(Paragraph, {\n  tag: 'span',\n  name: 'Heading',\n  accessibilityRole: 'header',\n  fontFamily: '$heading',\n  size: '$8',\n  margin: 0,\n})\n```\n\n----------------------------------------\n\nTITLE: Positioning Non-Native Toasts from Top Right in TSX\nDESCRIPTION: This code shows how to position non-native toasts to appear from the top right corner of the screen using the ToastViewport component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.11.3.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column-reverse\" top={0} right={0} />\n```\n\n----------------------------------------\n\nTITLE: Building Native Apps\nDESCRIPTION: Commands to build native applications for Android and iOS platforms.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Android\nyarn kitchen-sink:build:android\n\n# iOS\nyarn kitchen-sink:build:ios\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Package\nDESCRIPTION: Commands for installing the Tamagui Popover component and its portal dependency.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.110.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/popover\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Sheet Component in Tamagui\nDESCRIPTION: Command to install the Sheet component independently in a Tamagui project.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.27.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/sheet\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in Tamagui\nDESCRIPTION: Demonstrates how to import and use the Button component from Tamagui. This snippet shows the simplest way to create a button with text content.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.0.0-beta.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default () => <Button>Lorem ipsum</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Portal Provider\nDESCRIPTION: Setup for PortalProvider at the root of the application to enable modal functionality\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.116.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Tamagui ViewStyle Type Definition\nDESCRIPTION: Defines the ViewStyle type in Tamagui, which extends React Native's ViewStyle with additional properties for web, transforms, and various style states.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewStyle as RNViewStyle } from 'react-native'\n\ntype BaseViewStyle = RNViewStyle & FlatTransformStyles & WebOnlyStyles\n\n// these are accepted but only render on web:\ntype WebOnlyStyles =  {\n  contain?: Properties['contain']\n  touchAction?: Properties['touchAction']\n  cursor?: Properties['cursor']\n  outlineColor?: Properties['outlineColor']\n  outlineOffset?: SpaceValue\n  outlineStyle?: Properties['outlineStyle']\n  outlineWidth?: SpaceValue\n  userSelect?: Properties['userSelect']\n  filter?: Properties['filter']\n  backdropFilter?: Properties['backdropFilter']\n  mixBlendMode?: Properties['mixBlendMode']\n  backgroundImage?: Properties['backgroundImage']\n  backgroundOrigin: Properties['backgroundOrigin'],\n  backgroundPosition: Properties['backgroundPosition'],\n  backgroundRepeat: Properties['backgroundRepeat'],\n  backgroundSize: Properties['backgroundSize']\n  backgroundColor: Properties['backgroundColor']\n  backgroundClip: Properties['backgroundClip']\n  backgroundBlendMode: Properties['backgroundBlendMode']\n  backgroundAttachment: Properties['backgroundAttachment']\n  background: Properties['background']\n  clipPath: Properties['clipPath'],\n  caretColor: Properties['caretColor']\n  transformStyle: Properties['transformStyle'],\n  mask: Properties['mask'],\n  maskImage: Properties['maskImage'],\n  textEmphasis: Properties['textEmphasis'],\n  borderImage: Properties['borderImage'],\n  float: Properties['float']\n  content: Properties['content']\n  overflowBlock: Properties['overflowBlock']\n  overflowInline: Properties['overflowInline']\n  maskBorder: Properties['maskBorder']\n  maskBorderMode: Properties['maskBorderMode']\n  maskBorderOutset: Properties['maskBorderOutset']\n  maskBorderRepeat: Properties['maskBorderRepeat']\n  maskBorderSlice: Properties['maskBorderSlice']\n  maskBorderSource: Properties['maskBorderSource']\n  maskBorderWidth: Properties['maskBorderWidth']\n  maskClip: Properties['maskClip']\n  maskComposite: Properties['maskComposite']\n  maskMode: Properties['maskMode']\n  maskOrigin: Properties['maskOrigin']\n  maskPosition: Properties['maskPosition']\n  maskRepeat: Properties['maskRepeat']\n  maskSize: Properties['maskSize']\n  maskType: Properties['maskType']\n}\n\n// these turn into the equivalent transform style props:\ntype FlatTransformStyles = {\n  x?: number\n  y?: number\n  perspective?: number\n  scale?: number\n  scaleX?: number\n  scaleY?: number\n  skewX?: string\n  skewY?: string\n  matrix?: number[]\n  rotate?: string\n  rotateY?: string\n  rotateX?: string\n  rotateZ?: string\n}\n\n// add the pseudo and enter/exit style states\ntype WithStates = BaseViewStyle & {\n  hoverStyle?: BaseViewStyle\n  pressStyle?: BaseViewStyle\n  focusStyle?: BaseViewStyle\n  focusVisibleStyle?: BaseViewStyle\n  disabledStyle?: BaseViewStyle\n  enterStyle?: BaseViewStyle\n  exitStyle?: BaseViewStyle\n}\n\n// final View style props\ntype ViewStyle = WithStates & {\n  // add media queries\n  $sm?: WithStates\n\n  // add group queries\n  $group-hover?: WithStates\n  $group-focus?: WithStates\n  $group-press?: WithStates\n\n  // add group + container queries\n  $group-sm-hover?: WithStates\n  $group-sm-focus?: WithStates\n  $group-sm-press?: WithStates\n\n  // add named group queries\n  $group-tabs?: WithStates\n  $group-tabs-hover?: WithStates\n  $group-tabs-focus?: WithStates\n  $group-tabs-press?: WithStates\n\n  // add named group + container queries\n  $group-tabs-sm?: WithStates\n  $group-tabs-sm-hover?: WithStates\n  $group-tabs-sm-focus?: WithStates\n  $group-tabs-sm-press?: WithStates\n\n  // add theme queries\n  $theme-light?: WithStates\n  $theme-dark?: WithStates\n\n  // add platform queries\n  $platform-native?: WithStates\n  $platform-ios?: WithStates\n  $platform-android?: WithStates\n  $platform-web?: WithStates\n}\n\n// Text style starts with this base but builds up the same:\ntype TextStyleBase = BaseViewStyle & {\n  color?: string,\n  fontFamily?: string,\n  fontSize?: string,\n  fontStyle?: string,\n  fontWeight?: string,\n  letterSpacing?: string,\n  lineHeight?: string,\n  textAlign?: string,\n  textDecorationColor?: string,\n  textDecorationLine?: string,\n  textDecorationStyle?: string,\n  textShadowColor?: string,\n  textShadowOffset?: string,\n  textShadowRadius?: string,\n  textTransform?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: SizableText Usage with Theme Sizes\nDESCRIPTION: Example of using SizableText with themed size values.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/text/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<SizableText size=\"$small\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Tamagui and One\nDESCRIPTION: Updates the Vite configuration to include One and Tamagui plugins, and sets necessary build options for optimal performance.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/one.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { one } from 'one/vite'\nimport { tamaguiPlugin } from '@tamagui/vite-plugin'\nimport type { UserConfig } from 'vite'\n\nexport default {\n  plugins: [\n    one({\n      web: {\n        defaultRenderMode: 'ssg',\n      },\n    }),\n    tamaguiPlugin({\n      config: './tamagui.config.ts',\n      components: ['tamagui'],\n    }),\n  ],\n\n  // Vite 6 style configuration\n  ssr: {\n    noExternal: true,\n  },\n\n  optimizeDeps: {\n    include: [\n      '@tamagui/core',\n      '@tamagui/config',\n    ],\n  },\n\n  build: {\n    cssTarget: 'safari15',\n  },\n} satisfies UserConfig\n```\n\n----------------------------------------\n\nTITLE: Using Tamagui Components in One App\nDESCRIPTION: Demonstrates how to use Tamagui components within a One application, showcasing basic styling and component usage.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/one.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Text, YStack } from 'tamagui'\n\nexport default function Home() {\n  return (\n    <YStack f={1} jc=\"center\" ai=\"center\" p=\"$4\" space>\n      <Text fontSize=\"$6\">Welcome to Tamagui with One!</Text>\n      <Button>Click me</Button>\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sheet Component\nDESCRIPTION: Commands for installing the Sheet component and its portal dependency\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.116.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/sheet\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Building a Compound Component with Component-specific Themes\nDESCRIPTION: Shows how to build a compound component with multiple styled sub-components that can each have their own theme. Uses the 'extractable' pattern for optimizing with the Tamagui compiler.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetProps, Stack, Text, styled } from 'tamagui' // or '@tamagui/core'\n\nconst ButtonFrame = styled(Stack, {\n  name: 'Button',\n  backgroundColor: '$background',\n})\n\nconst ButtonText = styled(Text, {\n  name: 'ButtonText',\n  color: '$color',\n})\n\ntype ButtonProps = GetProps<typeof ButtonFrame>\n\n// note: extractable will tell the tamagui compiler to optimize usages of this:\nexport const Button = ButtonFrame.extractable(({ children, ...props }: ButtonProps) => {\n  return (\n    <ButtonFrame {...props}>\n      <ButtonText>{children}</ButtonText>\n    </ButtonFrame>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Using AnimatePresence Component in Tamagui\nDESCRIPTION: Example of using the AnimatePresence component for animation transitions. This component is forked from Framer Motion and works with exitStyle and variants for complex animations.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/tamagui-enters-beta-themes-and-animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=AnimationsPresence\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Babel Plugin\nDESCRIPTION: Command to install the Tamagui Babel plugin package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/compiler-install.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/babel-plugin\n```\n\n----------------------------------------\n\nTITLE: Setting Default Expanded Item in Accordion\nDESCRIPTION: Example of using the defaultValue prop to set an item expanded by default in a single-type Accordion.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/accordion/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion type=\"single\" __defaultValue__=\"item-2\">\n  <Accordion.Item value=\"item-1\">…</Accordion.Item>\n  <Accordion.Item value=\"item-2\">…</Accordion.Item>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Structuring Accordion Component in React\nDESCRIPTION: Example of how to import and structure the Accordion component with its subcomponents in a React application.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/accordion/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion } from 'tamagui';\n\nexport default () => (\n  <Accordion>\n    <Accordion.Item>\n      <Accordion.Header>\n        <Accordion.Trigger />\n      </Accordion.Header>\n      <Accordion.Content />\n    </Accordion.Item>\n  </Accordion>\n)\n```\n\n----------------------------------------\n\nTITLE: Select Component with Sheet Adaptation\nDESCRIPTION: Shows how to implement a Select component that adapts to use a Sheet component on mobile platforms using the Adapt component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/select/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Select } from 'tamagui' // or '@tamagui/select'\n\nexport default () => (\n  <Select defaultValue=\"\">\n    <Select.Trigger>\n      <Select.Value placeholder=\"Search...\" />\n    </Select.Trigger>\n\n    <Adapt when=\"maxMd\" platform=\"touch\">\n      <Sheet>\n        <Sheet.Frame>\n          <SheetContents />\n        </Sheet.Frame>\n        <Sheet.Overlay />\n      </Sheet>\n    </Adapt>\n\n    <Select.Content>\n      <Select.ScrollUpButton />\n      <Select.Viewport>\n        <Select.Group>\n          <Select.Label />\n          <Select.Item>\n            <Select.ItemText />\n          </Select.Item>\n        </Select.Group>\n      </Select.Viewport>\n      <Select.ScrollDownButton />\n    </Select.Content>\n  </Select>\n)\n```\n\n----------------------------------------\n\nTITLE: Paragraph Component Definition\nDESCRIPTION: Shows the styled configuration for the Paragraph component which extends SizableText.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/text/1.0.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Paragraph = styled(SizableText, {\n  name: 'Paragraph',\n  tag: 'p',\n  userSelect: 'auto',\n  color: '$color',\n  size: '$true',\n  whiteSpace: 'normal',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Tamagui\nDESCRIPTION: Configuration for vite.config.ts to set up Tamagui plugin with React and optimization options.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport react from '@vitejs/plugin-react-swc'\nimport { tamaguiPlugin } from '@tamagui/vite-plugin'\n\nexport default {\n  plugins: [\n    react(),\n    tamaguiPlugin({\n      // points to your tamagui config file\n      config: 'src/tamagui.config.ts',\n      // points to any linked packages or node_modules\n      // that have tamagui components to optimize\n      components: ['tamagui'],\n      // turns on the optimizing compiler\n      optimize: true,\n    }),\n  ].filter(Boolean),\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Underdamped Spring Velocity in TypeScript for Tamagui\nDESCRIPTION: This function calculates the velocity of an underdamped spring system at a given time. It uses the parameters from the calcSpring function and initial conditions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/ui/animate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function calcUnderdampedSpringVelocity(\n  t: number,\n  init: number,\n  target: number,\n  { w0, zeta, wd, a, b }: ReturnType<typeof calcSpring>\n) {\n  const envelope = Math.exp(-zeta * w0 * t)\n  const x0 = init - target\n  const m1 = x0 * wd\n  const m2 = zeta * w0 * x0 + 1 * wd\n  const cos = Math.cos(wd * t)\n  const sin = Math.sin(wd * t)\n  const tsin = t * sin\n  const tcos = t * cos\n\n  return (\n    envelope * (m1 * cos + m2 * sin) +\n    zeta * w0 * envelope * (m1 * tsin - m2 * tcos) -\n    wd * envelope * (m1 * tcos + m2 * tsin)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Group-Based Styling in Tamagui\nDESCRIPTION: Illustrates how to use group-based styling in Tamagui, including nested groups and pseudo-state targeting.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<View group=\"header\">\n  <Text $group-header={{ color: 'white' }} />\n</View>\n\n<View group>\n  <Text $group-hover={{ color: 'white' }} />\n</View>\n\n<View group=\"card\">\n  <Text>Outer</Text>\n  <View group>\n    <Text $group-card-hover={{ color: 'blue' }}>Inner</Text>\n    <Text $group-hover={{ color: 'green' }}>Sibling</Text>\n  </View>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Component Structure\nDESCRIPTION: Shows the basic anatomy of the Toast component with its provider and subcomponents.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.8.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toast, ToastProvider, ToastViewport } from 'tamagui'\n\nexport default () => (\n  <ToastProvider>\n    <Toast>\n      <Toast.Title />\n      <Toast.Description />\n      <Toast.Action />\n      <Toast.Close />\n    </Toast>\n\n    <ToastViewport />\n  </ToastProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts in React Native with Expo\nDESCRIPTION: This example demonstrates how to load custom fonts in a React Native application using Expo's useFonts hook before rendering the main application.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFonts } from 'expo-font'\n\nfunction App() {\n  const [loaded] = useFonts({\n    Inter: require('@tamagui/font-inter/otf/Inter-Medium.otf'),\n    InterBold: require('@tamagui/font-inter/otf/Inter-Bold.otf'),\n  })\n\n  useEffect(() => {\n    if (loaded) {\n      // can hide splash screen here\n    }\n  }, [loaded])\n\n  if (!loaded) {\n    return null\n  }\n\n  return <MyApp />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reanimated Animations in Tamagui\nDESCRIPTION: Setting up Reanimated animations through Moti in Tamagui configuration with spring parameters.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/animations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAnimations } from '@tamagui/animations-moti'\nimport { createTamagui } from 'tamagui'\n\nexport default createTamagui({\n  animations: createAnimations({\n    fast: {\n      type: 'spring',\n      damping: 20,\n      mass: 1.2,\n      stiffness: 250,\n    },\n    medium: {\n      type: 'spring',\n      damping: 10,\n      mass: 0.9,\n      stiffness: 100,\n    },\n    slow: {\n      type: 'spring',\n      damping: 20,\n      stiffness: 60,\n    },\n  }),\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation\nDESCRIPTION: Basic example showing how to implement a Slider component with default configuration including track and thumb elements.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/slider/1.45.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from 'tamagui'\n\nexport default () => (\n  <Slider size=\"$4\" width={200} defaultValue={[50]} max={100} step={1}>\n    <Slider.Track>\n      <Slider.TrackActive />\n    </Slider.Track>\n    <Slider.Thumb circular index={0} />\n  </Slider>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Tamagui\nDESCRIPTION: Configures Next.js to use Tamagui with custom components and configuration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/design-systems.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default withPlugins([\n  withTamagui({\n    config: './tamagui.config.ts',\n    components: ['@ourapp/components', 'tamagui'],\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Loading Tamagui fonts in Expo\nDESCRIPTION: Example of how to load Tamagui fonts using the useFonts hook from expo-font in an Expo app.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFonts } from 'expo-font'\n\nfunction App() {\n  const [loaded] = useFonts({\n    Inter: require('@tamagui/font-inter/otf/Inter-Medium.otf'),\n    InterBold: require('@tamagui/font-inter/otf/Inter-Bold.otf'),\n  })\n\n  useEffect(() => {\n    if (loaded) {\n      // can hide splash screen here\n    }\n  }, [loaded])\n\n  if (!loaded) {\n    return null\n  }\n\n  return <MyApp />\n}\n```\n\n----------------------------------------\n\nTITLE: Usage of Styled Checkbox\nDESCRIPTION: Demonstrates the basic usage of the styled Checkbox component from Tamagui, including importing the Check icon and Checkbox component, and rendering a Checkbox with an indicator.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.85.0.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Check } from '@tamagui/lucide-icons'\nimport { Checkbox } from 'tamagui'\n\nexport default () => (\n  <Checkbox size=\"$4\">\n    <Checkbox.Indicator>\n      <Check />\n    </Checkbox.Indicator>\n  </Checkbox>\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Product Access in Subscription Eligibility Logic\nDESCRIPTION: TypeScript function that determines if a user has access to a specific product by checking their subscription status and associated products in Supabase.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/doc/stripe-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst hasProductAccess = (subscriptions, productName) =>\\n  subscriptions?.some(\\n    (sub) =>\\n      (sub.status === 'active' || sub.status === 'trialing') &&\\n      sub.subscription_items?.some((item) => item.price?.product?.name === productName)\\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Elements Package\nDESCRIPTION: Command to install the @tamagui/elements package using npm. This package provides HTML element components for Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/html-elements/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/elements\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation\nDESCRIPTION: Example showing how to implement a basic checkbox with an indicator using the Check icon from lucide-icons.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.3.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Check } from '@tamagui/lucide-icons'\nimport { Checkbox } from 'tamagui'\n\nexport default () => (\n  <Checkbox size=\"$4\">\n    <Checkbox.Indicator>\n      <Check />\n    </Checkbox.Indicator>\n  </Checkbox>\n)\n```\n\n----------------------------------------\n\nTITLE: Card Component Anatomy in Tamagui\nDESCRIPTION: Demonstrates the basic structure of the Card component with its subcomponents: Header, Footer, and Background.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/card/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from 'tamagui' // or '@tamagui/card'\n\nexport default () => (\n  <Card>\n    <Card.Header />\n    <Card.Footer />\n    {/* any other components */}\n    <Card.Background />\n  </Card>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Vite Plugin\nDESCRIPTION: Command to add the Tamagui Vite plugin to your project using yarn.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ToggleGroup Component in React\nDESCRIPTION: Example of how to use the ToggleGroup component in a React application. It demonstrates creating a single-type ToggleGroup with two items.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toggle-group/1.10.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ToggleGroup } from 'tamagui'\n\nexport default () => {\n  return (\n    <ToggleGroup type=\"single\">\n      <ToggleGroup.Item value=\"foo\"></ToggleGroup.Item>\n      <ToggleGroup.Item value=\"bar\"></ToggleGroup.Item>\n    </ToggleGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Toast without Hooks in React\nDESCRIPTION: Shows how to implement a single toast without using hooks in React. It uses useState for managing the toast's open state and useRef for handling the timer.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.15.15.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [open, setOpen] = React.useState(false)\n  const timerRef = React.useRef(0)\n\n  React.useEffect(() => {\n    return () => clearTimeout(timerRef.current)\n  }, [])\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setOpen(false)\n          window.clearTimeout(timerRef.current)\n          timerRef.current = window.setTimeout(() => {\n            setOpen(true)\n          }, 150)\n        }}\n      >\n        Single Toast\n      </Button>\n      <Toast\n        onOpenChange={setOpen}\n        open={open}\n        animation=\"100ms\"\n        enterStyle={{ x: -20, opacity: 0 }}\n        exitStyle={{ x: -20, opacity: 0 }}\n        opacity={1}\n        x={0}\n      >\n        <Toast.Title>Subscribed!</Toast.Title>\n        <Toast.Description>We'll be in touch.</Toast.Description>\n      </Toast>\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui in TypeScript\nDESCRIPTION: Creates a Tamagui configuration file using the default config and exports the necessary types for TypeScript integration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/one.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultConfig } from '@tamagui/config/v4'\nimport { createTamagui } from 'tamagui'\n\nconst tamaguiConfig = createTamagui(defaultConfig)\n\nexport default tamaguiConfig\n\n// this is important!\nexport type Conf = typeof tamaguiConfig\n\ndeclare module 'tamagui' {\n  interface TamaguiCustomConfig extends Conf {}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Usage in React with Tamagui\nDESCRIPTION: Demonstrates how to create a basic tabs component using Tamagui's Tabs. It shows the structure with Tabs.List, Tabs.Tab, and Tabs.Content components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tabs/1.125.35.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SizableText, Tabs } from \"tamagui\";\n\nexport default () => (\n  <Tabs defaultValue=\"tab1\" width={400}>\n    <Tabs.List space>\n      <Tabs.Tab value=\"tab1\">\n        <SizableText>Tab 1</SizableText>\n      </Tabs.Tab>\n      <Tabs.Tab value=\"tab2\">\n        <SizableText>Tab 2</SizableText>\n      </Tabs.Tab>\n    </Tabs.List>\n\n    <Tabs.Content value=\"tab1\">\n      <H5>Tab 1</H5>\n    </Tabs.Content>\n    <Tabs.Content value=\"tab2\">\n      <H5>Tab 2</H5>\n    </Tabs.Content>\n  </Tabs>\n);\n```\n\n----------------------------------------\n\nTITLE: Empty Hero Template\nDESCRIPTION: Empty template for Toast hero demonstration\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.13.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Starting Webpack Dev Server\nDESCRIPTION: Command to start the webpack development server using Yarn.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/webpack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn run webpack serve\n```\n\n----------------------------------------\n\nTITLE: Installing Lucide Icons for Tamagui\nDESCRIPTION: Command to install the necessary packages for using Lucide Icons with Tamagui. It includes react-native-svg for SVG support and the Tamagui-specific Lucide Icons package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/lucide-icons/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-native-svg @tamagui/lucide-icons\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Component with Name in Tamagui\nDESCRIPTION: Demonstrates how to create a styled View component with a named identifier that generates helpful CSS classes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/developing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyButton = styled(View, {\n  name: 'MyButton',\n  backgroundColor: 'red',\n})\n```\n\n----------------------------------------\n\nTITLE: Simplified Group Component Usage in React\nDESCRIPTION: Shows a simpler usage of XGroup without Group.Item, where spacing is applied based on direct children. This is useful for backwards compatibility and simpler use cases.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage without Item:\nexport default () => (\n  <XGroup>\n    <Button>First</Button>\n    <Button>Second</Button>\n    <Button>Third</Button>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Combined Media and Theme Usage\nDESCRIPTION: Demonstrates combining useMedia and useTheme hooks with conditional styling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-theme.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { YStack, useMedia, useTheme } from 'tamagui'\n\nconst App = () => {\n  const theme = useTheme()\n  const media = useMedia()\n\n  return (\n    <YStack\n      y={media.sm ? 10 : 0}\n      backgroundColor={media.lg ? theme.red : theme.blue}\n      {...(media.xl && {\n        y: theme.space2,\n      })}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lucide Icons in Tamagui Buttons\nDESCRIPTION: Demonstrates how to import and use Lucide Icons within Tamagui components, specifically with a Button. It shows automatic size/theme passing and manual control of icon properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/lucide-icons/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\nimport { Plus } from '@tamagui/lucide-icons'\n\n// Button will automatically pass size/theme to icon\nexport default () => (\n  <Button icon={Plus}>\n    Hello world\n  </Button>\n)\n\n// or you can control it\nexport default () => (\n  <Button icon={<Plus size=\"$4\" />}>\n    Hello world\n  </Button>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Component Structure in Tamagui\nDESCRIPTION: Demonstrates the basic structure and anatomy of a Popover component in Tamagui, including optional adaptation for smaller screens.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.83.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popover, Adapt } from 'tamagui' // or '@tamagui/popover'\n\nexport default () => (\n  <Popover>\n    <Popover.Trigger />\n\n    <Popover.Content>\n      <Popover.Arrow />\n      <Popover.Close />\n      {/* ScrollView is optional, can just put any contents inside if not scrollable */}\n      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>\n      {/* ... */}\n    </Popover.Content>\n\n    {/* optionally change to sheet when small screen */}\n    {/* you can also use <Popover.Adapt /> */}\n    <Adapt when=\"maxMd\">\n      <Popover.Sheet>\n        <Popover.Sheet.Overlay />\n        <Popover.Sheet.Frame>\n          <Popover.Sheet.ScrollView>\n            <Adapt.Contents />\n          </Popover.Sheet.ScrollView>\n        </Popover.Sheet.Frame>\n      </Popover.Sheet>\n    </Adapt>\n  </Popover>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Toasts in React\nDESCRIPTION: This example shows how to create and display multiple toasts dynamically. It uses a state variable to keep track of the number of toasts and renders them in a loop with custom animation properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.11.3.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [savedCount, setSavedCount] = React.useState(0)\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setSavedCount((old) => old + 1)\n        }}\n      >\n        Show toast\n      </Button>\n      {[...Array(savedCount)].map((_, index) => (\n        <Toast\n          key={index}\n          animation=\"100ms\"\n          enterStyle={{ x: -20, opacity: 0 }}\n          exitStyle={{ x: -20, opacity: 0 }}\n          opacity={1}\n          x={0}\n        >\n          <Toast.Title>Subscribed!</Toast.Title>\n          <Toast.Description>We'll be in touch.</Toast.Description>\n        </Toast>\n      ))}\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Generated by Tamagui\nDESCRIPTION: Shows the CSS variables that would be generated by Tamagui from the theme configuration. Demonstrates how themes are converted to CSS variables.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --colors-dark-red: #550000;\n  --colors-light-red: #ff0000;\n}\n\n.tui_dark {\n  --red: var(--colors-dark-red);\n}\n\n.tui_light {\n  --red: var(--colors-light-red);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project\nDESCRIPTION: Command to create a new Expo project with TypeScript support using the blank template.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx create-expo-app -t expo-template-blank-typescript\n```\n\n----------------------------------------\n\nTITLE: CommonJS Icon Import\nDESCRIPTION: Demonstrates how to import icons using CommonJS require() syntax for environments that don't support ES6 imports.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/lucide-icons/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar Camera = require('@tamagui/lucide-icons/dist/icons/camera').default;\n\nvar MyComponent = React.createClass({\n  render: function () {\n    return (\n      <Camera />\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Tamagui Performance with CSS Output\nDESCRIPTION: Configures the Tamagui Vite plugin to output CSS for production builds, improving performance.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/one.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntamaguiPlugin({\n  config: './tamagui.config.ts',\n  components: ['tamagui'],\n  outputCSS: process.env.NODE_ENV === 'production' ? './public/tamagui.css' : null,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Tamagui Tokens in TSX Components\nDESCRIPTION: A simple example showing how to use Tamagui tokens in a React component. The example demonstrates applying a size token ($4.5) to the width property of a View component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/config-v4.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'tamagui'\n\nexport default () => <View width=\"$4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Animation in Tamagui View Component\nDESCRIPTION: Shows how to add a simple duration-based animation to a Tamagui View component. When defined this way, Tamagui will animate all supported animatable properties when they change.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'tamagui'\n\n<View animation=\"100ms\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Toasts Without Hooks in React\nDESCRIPTION: This example demonstrates how to implement multiple toasts without using hooks, dynamically rendering toasts based on a counter state.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => {\n  const [savedCount, setSavedCount] = React.useState(0)\n\n  return (\n    <YStack ai=\"center\">\n      <Button\n        onPress={() => {\n          setSavedCount((old) => old + 1)\n        }}\n      >\n        Show toast\n      </Button>\n      {[...Array(savedCount)].map((_, index) => (\n        <Toast\n          key={index}\n          animation=\"100ms\"\n          enterStyle={{ x: -20, opacity: 0 }}\n          exitStyle={{ x: -20, opacity: 0 }}\n          opacity={1}\n          x={0}\n        >\n          <Toast.Title>Subscribed!</Toast.Title>\n          <Toast.Description>We'll be in touch.</Toast.Description>\n        </Toast>\n      ))}\n    </YStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Converting between Units in TypeScript for Tamagui\nDESCRIPTION: This set of functions handles conversions between different units (pixels, percent, degrees) and calculates progress within ranges. These are likely used for animation calculations in Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/ui/animate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const px = (v: string | number) => (typeof v === 'number' ? `${v}px` : v)\n\nexport const degrees = (v: string | number) =>\n  (typeof v === 'number' ? `${v}deg` : v)\n\nexport const percent = (v: string | number) =>\n  typeof v === 'number' ? `${v * 100}%` : v\n\nexport const progressPercentage = (v: number) => `${v * 100}%`\n\nexport const getValueAsType = (v: any) => (\n  typeof v === 'number' ? px(v) : v\n)\n\nconst isPercentType = (value: any) =>\n  typeof value === 'string' && value.endsWith('%')\n\nconst isPixelType = (value: any) =>\n  typeof value === 'number' || (typeof value === 'string' && value.endsWith('px'))\n\nconst clamp = (min: number, max: number, v: number) => Math.min(Math.max(v, min), max)\n\nexport const calcProgressNumber = (min: number, max: number, v: number) =>\n  clamp(0, 1, (v - min) / (max - min))\n\nexport const calcProgressValue = (min: any, max: any, v: any) => {\n  if (isPixelType(min) && isPixelType(max) && isPixelType(v)) {\n    return calcProgressNumber(\n      parseFloat(min),\n      parseFloat(max),\n      parseFloat(v)\n    )\n  } else if (isPercentType(min) && isPercentType(max) && isPercentType(v)) {\n    return calcProgressNumber(\n      parseFloat(min),\n      parseFloat(max),\n      parseFloat(v)\n    )\n  }\n  return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using VisuallyHidden with Space Property in Tamagui\nDESCRIPTION: Shows how to use the VisuallyHidden component within a stack layout, demonstrating that it avoids double-spacing when used with the space property.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/visually-hidden/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H1, Text, VisuallyHidden, YStack } from 'tamagui'\n\nexport default () => (\n  <YStack space>\n    <H1>Title</H1>\n\n    <VisuallyHidden>\n      <Text>Add annotations here</Text>\n    </VisuallyHidden>\n  </YStack>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Font package\nDESCRIPTION: Command to install the expo-font package for font handling in Expo projects.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-font\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json scripts for Expo\nDESCRIPTION: Example of package.json scripts configuration for running Expo projects with Tamagui on different platforms.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start-native\": \"expo start -c\",\n    \"start-web\": \"expo start -c\",\n    \"android\": \"yarn expo run:android\",\n    \"ios\": \"yarn expo run:ios\",\n    \"web\": \"expo start --web\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tamagui Token Category Mapping\nDESCRIPTION: Defines how Tamagui maps style properties to token categories, showing how tokens like '$sm' get resolved to the correct token types like space, radius, size, zIndex, and color.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/tamagui.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// if not specified it defaults to `space`\nexport const tokenCategories = {\n  radius: {\n    borderRadius: true,\n    borderTopLeftRadius: true,\n    borderTopRightRadius: true,\n    borderBottomLeftRadius: true,\n    borderBottomRightRadius: true,\n    borderStartStartRadius: true,\n    borderStartEndRadius: true,\n    borderEndStartRadius: true,\n    borderEndEndRadius: true,\n  },\n  size: {\n    width: true,\n    height: true,\n    minWidth: true,\n    minHeight: true,\n    maxWidth: true,\n    maxHeight: true,\n    blockSize: true,\n    minBlockSize: true,\n    maxBlockSize: true,\n    inlineSize: true,\n    minInlineSize: true,\n    maxInlineSize: true,\n  },\n  zIndex: {\n    zIndex: true,\n  },\n  color: {\n    backgroundColor: true,\n    borderColor: true,\n    borderBlockStartColor: true,\n    borderBlockEndColor: true,\n    borderBlockColor: true,\n    borderBottomColor: true,\n    borderInlineColor: true,\n    borderInlineStartColor: true,\n    borderInlineEndColor: true,\n    borderTopColor: true,\n    borderLeftColor: true,\n    borderRightColor: true,\n    borderEndColor: true,\n    borderStartColor: true,\n    shadowColor: true,\n    ...textColors,\n    ...(process.env.TAMAGUI_TARGET === 'web' && {\n      outlineColor: true,\n      caretColor: true,\n    }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Single Icon Import with Webpack\nDESCRIPTION: Shows how to import a specific icon directly from the dist folder when using Webpack to optimize bundle size.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/lucide-icons/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Camera from '@tamagui/lucide-icons/dist/icons/camera';\n\nclass MyClass extends React.Component {\n  render() {\n    return <Camera />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AllowedStyleValues Types in TypeScript for Tamagui Configuration\nDESCRIPTION: This code snippet defines TypeScript types for the `allowedStyleValues` configuration option in Tamagui. It describes the possible values for controlling style prop type strictness, with options ranging from boolean to specific strictness levels.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ntype AllowedValueSetting =\n  | boolean\n  | 'strict'\n  | 'somewhat-strict'\n  | 'strict-web'\n  | 'somewhat-strict-web'\n\ntype AllowedStyleValuesSetting =\n  | AllowedValueSetting\n  | {\n      space?: AllowedValueSetting\n      size?: AllowedValueSetting\n      radius?: AllowedValueSetting\n      zIndex?: AllowedValueSetting\n      color?: AllowedValueSetting\n    }\n```\n\n----------------------------------------\n\nTITLE: Using a Styled Component in Tamagui\nDESCRIPTION: Shows how to use the created styled component with various props.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/styled.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RoundedSquare x={10} y={10} backgroundColor=\"red\" />\n```\n\n----------------------------------------\n\nTITLE: Positioning Toasts at Top Right with ToastViewport\nDESCRIPTION: This code shows how to configure the ToastViewport component to position toasts at the top right of the screen by setting the appropriate flexDirection and position properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.9.1.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastViewport flexDirection=\"column-reverse\" top={0} right={0} />\n```\n\n----------------------------------------\n\nTITLE: Chinese Language Font Implementation\nDESCRIPTION: Example of implementing Chinese language-specific font using FontLanguage component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/font-language.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FontLanguage, Text } from 'tamagui' // or '@tamagui/core'\n\nexport default (\n  <FontLanguage body=\"cn\">\n    <Text fontFamily=\"$body\">\n      你好\n    </Text>\n  </FontLanguage>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Tamagui\nDESCRIPTION: Sets up the Webpack configuration to use the Tamagui loader with custom components and configuration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/design-systems.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  loader: 'tamagui-loader',\n  options: {\n    config: './tamagui.config.ts',\n    components: ['@ourapp/components', 'tamagui'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Webpack and Webpack CLI\nDESCRIPTION: Command to install webpack and webpack-cli as development dependencies using Yarn.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/webpack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D webpack webpack-cli\n```\n\n----------------------------------------\n\nTITLE: Basic Tamagui Image Implementation\nDESCRIPTION: Example showing basic usage of the Image component with width, height, and source properties.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tamagui-image/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => (\n  <Image\n    src='https://...'\n    width={300}\n    height={400}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Progress Hero Template\nDESCRIPTION: Empty hero template for Progress component demonstration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/progress/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Provider for Popover in Tamagui\nDESCRIPTION: Instructions for installing the Portal Provider, which is required when rendering Popover at the root of the app.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.83.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Defining Tokens and Themes in Tamagui\nDESCRIPTION: Shows how to create tokens and themes in Tamagui, including base themes (dark and light) and sub-themes (pink variations). It uses createTokens and createTamagui functions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/theme.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTamagui, createTokens } from 'tamagui'\n\nconst tokens = createTokens({\n  color: {\n    pinkDark: '#610c62',\n    pinkLight: '#f17efc',\n  },\n  // ... see configuration docs for required tokens\n})\n\nexport default createTamagui({\n  tokens,\n  themes: {\n    dark: {\n      background: '#000',\n      color: '#fff',\n    },\n    light: {\n      color: '#000',\n      background: '#fff',\n    },\n    dark_pink: {\n      background: tokens.color.pinkDark,\n      color: tokens.color.pinkLight,\n    },\n    light_pink: {\n      background: tokens.color.pinkLight,\n      color: tokens.color.pinkDark,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Tamagui Development Servers\nDESCRIPTION: Commands to start the development servers for both web and native platforms after project setup.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/create-tamagui-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd myapp\nyarn\nyarn web # Web local dev\nyarn native # Expo local dev (only for `starter-free`)\n```\n\n----------------------------------------\n\nTITLE: Planned Future Features for @tamagui/use-store Selectors and Reactions\nDESCRIPTION: This snippet outlines planned future improvements for the @tamagui/use-store package, focusing on implementing better selectors and reactions that aren't tied to a single store. It demonstrates the desired API for cross-store selectors and reactions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/use-store/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst isValid = useStoreSelector(() => {\n  return mapStore.isActive && homeStore.isActive\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  return reaction(\n    () => {\n      return homeStore.isActive && mapStore.isActive\n    },\n    isValid => {\n      // ...\n    }\n  )\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Installing Card Component in Tamagui\nDESCRIPTION: Command to install the Card component independently if not using the full Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/card/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/card\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui Provider\nDESCRIPTION: Basic setup for Tamagui provider at the root level of a React/React Native application. Uses default configuration and wraps the app with TamaguiProvider to enable features like dialogs and popovers.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/intro/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTamagui,TamaguiProvider, View } from 'tamagui'\nimport { defaultConfig } from '@tamagui/config/v4' // for quick config install this\n\nconst config = createTamagui(defaultConfig)\n\nexport default () => (\n  <TamaguiProvider config={config}>\n    <View />\n  </TamaguiProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Minimal Manual Vite Setup for React Native Web\nDESCRIPTION: A minimal configuration for Vite to add compatibility for react-native-web and handle various file extensions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconfig.define = {\n  __DEV__: `${process.env.NODE_ENV === 'development' ? true : false}`,\n  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n}\n\nconfig.resolve.alias['react-native'] = 'react-native-web'\n\n// set up web extensions\nconfig.optimizeDeps.esbuildOptions = {\n  ...config.optimizeDeps.esbuildOptions,\n  resolveExtensions: [\n    '.web.js',\n    '.web.jsx',\n    '.web.ts',\n    '.web.tsx',\n    '.mjs',\n    '.js',\n    '.mts',\n    '.ts',\n    '.jsx',\n    '.tsx',\n    '.json',\n  ],\n  loader: {\n    '.js': 'jsx',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Native Tamagui in Monorepo\nDESCRIPTION: This snippet shows how to set up a Metro configuration for a native Tamagui project in a monorepo environment. It includes options for enabling CSS support and resolving 'mjs' file extensions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require('expo/metro-config')\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // [Web-only]: Enables CSS support in Metro.\n  isCSSEnabled: true,\n})\n\n// Expo 49 issue: default metro config needs to include \"mjs\"\n// https://github.com/expo/expo/issues/23180\nconfig.resolver.sourceExts.push('mjs')\n\nmodule.exports = config\n```\n\n----------------------------------------\n\nTITLE: Configuring Toast Placement with burntOptions in TypeScript\nDESCRIPTION: Demonstrates how to change the placement of native iOS toasts using the burntOptions prop on ToastProvider.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.13.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastProvider burntOptions={{ from: 'bottom' }}>\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Next Theme Package\nDESCRIPTION: Command to install the @tamagui/next-theme package which supports SSR light/dark themes with system preference detection.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/next-theme\n```\n\n----------------------------------------\n\nTITLE: Installing Headless Switch Component in Tamagui\nDESCRIPTION: Command to install the headless Switch component, which has no dependency on @tamagui/core and allows for custom styling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.89.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/switch-headless\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Remix and Tamagui\nDESCRIPTION: Command to run the Vite development server for a Remix + Tamagui project.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/starters/remix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Tamagui Input Component in React\nDESCRIPTION: Example of how to import and use the Input component from Tamagui in a React application. This snippet demonstrates basic usage with custom styling applied.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/new-inputs/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from 'tamagui'\n\nexport const App = () => (\n  // Accepts size and style properties directly\n  <Input gap=\"$4\" borderWidth={2} />\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Component in Tamagui\nDESCRIPTION: Command to install the Toast component and its dependency, Burnt, using yarn. After installation, the React Native app needs to be rebuilt.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.11.3.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/toast burnt\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Button Component in Tamagui\nDESCRIPTION: This code snippet demonstrates how to use the custom Button component created with Tamagui. It shows examples of using the Button with an icon and text, as well as with multiple icons.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default () => (\n  <Button>\n    <Button.Icon>\n      <Moon />\n    </Button.Icon>\n    <Button.Text>hi</Button.Text>\n  </Button>\n)\n\n// multiple icons:\nexport default () => (\n  <Button>\n    <Button.Icon>\n      <Moon />\n    </Button.Icon>\n    <Button.Text>hi</Button.Text>\n    <Button.Icon>\n      <Moon />\n    </Button.Icon>\n  </Button>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component in Tamagui\nDESCRIPTION: Command to install the Switch component independently from Tamagui. This is necessary if not using the full Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.89.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/switch\n```\n\n----------------------------------------\n\nTITLE: Customized Slider Implementation\nDESCRIPTION: Example demonstrating how to create a custom styled Slider component using the styled utility from Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/slider/1.45.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider, styled } from 'tamagui'\n\nconst CustomSliderTrack = styled(Slider.Track, {\n  backgroundColor: 'red',\n})\n\nexport default () => (\n  <Slider size=\"$4\" width={200} defaultValue={[50]} max={100} step={1}>\n    <CustomSliderTrack>\n      <Slider.TrackActive />\n    </CustomSliderTrack>\n    <Slider.Thumb circular index={0} />\n  </Slider>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Input Component\nDESCRIPTION: Command to install the Tamagui input component independently using npm. This step is optional if you're already using the full Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/new-inputs/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/input\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe Webhook Listener for Local Development\nDESCRIPTION: Command to start a Stripe webhook listener that forwards Stripe events to the local development server, enabling testing of subscription flows.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/doc/stripe-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstripe listen --load-from-webhooks-api --forward-to http://localhost:8081/api/stripe/webhook\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Function in Tamagui\nDESCRIPTION: This snippet shows a simple function that combines a palette and a template to create a theme.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst createTheme = (palette: string[], colorTemplate: {\n  background: number\n  color: number\n}) => ({\n  background: palette[colorTemplate.background],\n  color: palette[colorTemplate.color],\n})\n\ncreateTheme(dark_blue, { background: 0, color: 11 })\n// => {\n//   background: 'hsl(212, 35.0%, 9.2%)',\n//   color: 'hsl(206, 98.0%, 95.8%)'\n// }\n```\n\n----------------------------------------\n\nTITLE: Installing Avatar Component\nDESCRIPTION: Command to install the Avatar component package independently if not using the full Tamagui package\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/avatar/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/avatar\n```\n\n----------------------------------------\n\nTITLE: Defining the addFont Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the function signature for Tamagui's addFont function, which registers a font for use in the system. It accepts an object with family name, face definitions, and weight/style mappings.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/core/font/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const addFont = (font: GenericFont) => {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Queries in Tamagui\nDESCRIPTION: This snippet demonstrates how to set up media queries in Tamagui for responsive design. It shows how to define breakpoints and configure responsive styles based on screen size.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/compiler/static/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = createTamagui({\n  media: {\n    xs: { maxWidth: 660 },\n    sm: { maxWidth: 800 },\n    md: { maxWidth: 1020 },\n    lg: { maxWidth: 1280 },\n    xl: { maxWidth: 1420 },\n    xxl: { maxWidth: 1600 },\n    gtXs: { minWidth: 660 + 1 },\n    gtSm: { minWidth: 800 + 1 },\n    gtMd: { minWidth: 1020 + 1 },\n    gtLg: { minWidth: 1280 + 1 },\n    short: { maxHeight: 820 },\n    tall: { minHeight: 820 },\n    hoverNone: { hover: 'none' },\n    pointerCoarse: { pointer: 'coarse' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dialog Component\nDESCRIPTION: Shows how to install the Dialog component independently of the main Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/dialog/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/dialog\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Queries in Tamagui Config\nDESCRIPTION: Shows how to define media query breakpoints and rules in the tamagui.config.ts file. Includes settings for screen sizes, hover states, and pointer types.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-media.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createTamagui({\n  media: {\n    xs: { maxWidth: 660 },\n    gtXs: { minWidth: 660 + 1 },\n    sm: { maxWidth: 860 },\n    gtSm: { minWidth: 860 + 1 },\n    md: { maxWidth: 980 },\n    gtMd: { minWidth: 980 + 1 },\n    lg: { maxWidth: 1120 },\n    gtLg: { minWidth: 1120 + 1 },\n    short: { maxHeight: 820 },\n    tall: { minHeight: 820 },\n    hoverNone: { hover: 'none' },\n    pointerCoarse: { pointer: 'coarse' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Font Family on Paragraph Component\nDESCRIPTION: Shows how to apply a font family to a Paragraph component, which generates specific font-related CSS classes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/developing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Paragraph fontFamily=\"$body\" />\n```\n\n----------------------------------------\n\nTITLE: Tamagui Configuration V4 Structure in JSON\nDESCRIPTION: A complete Tamagui v4 configuration file showing the setup for fonts, animations, media queries, tokens, and settings. This configuration uses CSS animations by default on web and React Native animations on mobile.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/config-v4.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tamaguiConfig\": {\n    \"fonts\": {\n      \"body\": {\n        \"family\": \"-apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif\",\n        \"lineHeight\": {\n          \"1\": 21, \"2\": 22, \"3\": 23, \"4\": 24, \"5\": 26, \"6\": 28,\n          \"7\": 30, \"8\": 33, \"9\": 40, \"10\": 56, \"11\": 65, \"12\": 72,\n          \"13\": 82, \"14\": 102, \"15\": 124, \"16\": 144, \"true\": 24\n        },\n        \"weight\": { \"true\": \"300\" },\n        \"letterSpacing\": { \"true\": 0 },\n        \"size\": {\n          \"1\": 11, \"2\": 12, \"3\": 13, \"4\": 14, \"5\": 16, \"6\": 18,\n          \"7\": 20, \"8\": 23, \"9\": 30, \"10\": 46, \"11\": 55, \"12\": 62,\n          \"13\": 72, \"14\": 92, \"15\": 114, \"16\": 134, \"true\": 14\n        }\n      },\n      \"heading\": {\n        \"family\": \"-apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif\",\n        \"lineHeight\": {\n          \"1\": 25.4, \"2\": 26.8, \"3\": 28.2, \"4\": 29.6, \"5\": 32.4,\n          \"6\": 35.2, \"7\": 38, \"8\": 42.2, \"9\": 52, \"10\": 74.4,\n          \"11\": 87, \"12\": 96.8, \"13\": 110.8, \"14\": 138.8, \"15\": 169.6,\n          \"16\": 197.6, \"true\": 29.6\n        },\n        \"weight\": { \"true\": \"300\" },\n        \"letterSpacing\": { \"true\": 0 },\n        \"size\": {\n          \"1\": 15.4, \"2\": 16.8, \"3\": 18.2, \"4\": 19.6, \"5\": 22.4,\n          \"6\": 25.2, \"7\": 28, \"8\": 32.2, \"9\": 42, \"10\": 64.4,\n          \"11\": 77, \"12\": 86.8, \"13\": 100.8, \"14\": 128.8, \"15\": 159.6,\n          \"16\": 187.6, \"true\": 19.6\n        }\n      }\n    },\n    \"animations\": {\n      \"75ms\": \"ease-in 75ms\", \"100ms\": \"ease-in 100ms\",\n      \"200ms\": \"ease-in 200ms\", \"bouncy\": \"ease-in 200ms\",\n      \"superBouncy\": \"ease-in 500ms\", \"lazy\": \"ease-in 1000ms\",\n      \"medium\": \"ease-in 300ms\", \"slow\": \"ease-in 500ms\",\n      \"quick\": \"cubic-bezier(0.215, 0.610, 0.355, 1.000) 400ms\",\n      \"quicker\": \"cubic-bezier(0.215, 0.610, 0.355, 1.000) 300ms\",\n      \"quickest\": \"cubic-bezier(0.215, 0.610, 0.355, 1.000) 200ms\",\n      \"tooltip\": \"ease-in 400ms\"\n    },\n    \"media\": {\n      \"2xl\": { \"minWidth\": 1536 }, \"xl\": { \"minWidth\": 1280 },\n      \"lg\": { \"minWidth\": 1024 }, \"md\": { \"minWidth\": 768 },\n      \"sm\": { \"minWidth\": 640 }, \"xs\": { \"minWidth\": 460 },\n      \"2xs\": { \"minWidth\": 340 }\n    },\n    \"tokens\": {\n      \"radius\": {\n        \"$0\": 0, \"$1\": 3, \"$2\": 5, \"$3\": 7, \"$4\": 9, \"$5\": 10,\n        \"$6\": 16, \"$7\": 19, \"$8\": 22, \"$9\": 26, \"$10\": 34,\n        \"$11\": 42, \"$12\": 50, \"$true\": 9\n      },\n      \"zIndex\": {\n        \"$0\": 0, \"$1\": 100, \"$2\": 200, \"$3\": 300, \"$4\": 400,\n        \"$5\": 500\n      },\n      \"space\": {\n        \"$0\": 0, \"$1\": 2, \"$2\": 7, \"$3\": 13, \"$4\": 18, \"$5\": 24,\n        \"$6\": 32, \"$7\": 39, \"$8\": 46, \"$9\": 53, \"$10\": 60,\n        \"$11\": 74, \"$12\": 88, \"$13\": 102, \"$14\": 116, \"$15\": 130,\n        \"$16\": 144, \"$true\": 18\n      },\n      \"size\": {\n        \"$0\": 0, \"$1\": 20, \"$2\": 28, \"$3\": 36, \"$4\": 44, \"$5\": 52,\n        \"$6\": 64, \"$7\": 74, \"$8\": 84, \"$9\": 94, \"$10\": 104,\n        \"$11\": 124, \"$12\": 144, \"$13\": 164, \"$14\": 184, \"$15\": 204,\n        \"$16\": 224, \"$true\": 44\n      }\n    },\n    \"settings\": {\n      \"defaultFont\": \"body\", \"onlyAllowShorthands\": true,\n      \"mediaQueryDefaultActive\": { \"xs\": true, \"2xs\": true },\n      \"themeClassNameOnRoot\": true, \"fastSchemeChange\": true,\n      \"shouldAddPrefersColorThemes\": true\n    },\n    \"unset\": { \"fontFamily\": \"$body\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Full Tamagui UI Kit\nDESCRIPTION: Command to install the complete Tamagui UI kit package using Yarn package manager.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add tamagui\n```\n\n----------------------------------------\n\nTITLE: Inserting Notice Component in Markdown\nDESCRIPTION: This snippet demonstrates the use of a custom Notice component within the Markdown content to highlight that Tamagui is in alpha stage.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/introducing-tamagui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Notice>Tamagui is in alpha - we'd love it if you tried it out and gave us feedback</Notice>\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Component Template\nDESCRIPTION: Empty hero template for Toast component demonstration\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx hero template=Toast\n\n```\n```\n\n----------------------------------------\n\nTITLE: Full Icon Package Import\nDESCRIPTION: Shows how to import the entire icon package and use icons as namespaced components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/lucide-icons/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Icon from '@tamagui/lucide-icons';\n\nclass MyClass extends React.Component {\n  render() {\n    return <Icon.Camera />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip Anatomy\nDESCRIPTION: This code demonstrates the basic anatomy of a Tooltip component in Tamagui. It shows how to use `Tooltip`, `Tooltip.Trigger`, `Tooltip.Content`, and `Tooltip.Arrow` to create a functional tooltip.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.122.0.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip } from 'tamagui' // or '@tamagui/tooltip'\n\nexport default () => (\n  <Tooltip>\n    <Tooltip.Trigger />\n    <Tooltip.Content>\n      <Tooltip.Arrow />\n      {/* ... */}\n    </Tooltip.Content>\n  </Tooltip>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Sheet Component\nDESCRIPTION: Commands for installing the Sheet component and its portal dependency.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.59.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/sheet\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Creating a Compound Component with createStyledContext\nDESCRIPTION: Demonstrates how to create a compound component using createStyledContext for sharing props across nested components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/styled.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SizeTokens,\n  View,\n  Text,\n  createStyledContext,\n  styled,\n  withStaticProperties,\n} from '@tamagui/core'\n\nexport const ButtonContext = createStyledContext<{\n  size: SizeTokens\n}>({\n  size: '$medium',\n})\n\nexport const ButtonFrame = styled(View, {\n  name: 'Button',\n  context: ButtonContext,\n\n  variants: {\n    size: {\n      '...size': (name, { tokens }) => {\n        return {\n          height: tokens.size[name],\n          borderRadius: tokens.radius[name],\n          gap: tokens.space[name].val * 0.2,\n        }\n      },\n    },\n  } as const,\n\n  defaultVariants: {\n    size: '$medium',\n  },\n})\n\nexport const ButtonText = styled(Text, {\n  name: 'ButtonText',\n  context: ButtonContext,\n\n  variants: {\n    size: {\n      '...fontSize': (name, { font }) => ({\n        fontSize: font?.size[name],\n      }),\n    },\n  } as const,\n})\n\nexport const Button = withStaticProperties(ButtonFrame, {\n  Props: ButtonContext.Provider,\n  Text: ButtonText,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Group Component Usage with Items\nDESCRIPTION: Demonstrates how to use XGroup component with Group.Item wrapper for structured button grouping with automatic spacing and border handling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.11.2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage with Item:\nexport default () => (\n  <XGroup>\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Core and Config Packages\nDESCRIPTION: Command to install both the Tamagui core and config packages using Yarn package manager.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/core @tamagui/config\n```\n\n----------------------------------------\n\nTITLE: Disabling Component Optimization\nDESCRIPTION: Demonstrates how to disable Tamagui compiler optimization for a specific component using the disableOptimization prop on a View component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/compiler-install.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from '@tamagui/core'\n\nexport default () => (\n  <View disableOptimization />\n)\n```\n\n----------------------------------------\n\nTITLE: Theme-Based Styling in Tamagui\nDESCRIPTION: Demonstrates how to apply styles based on the current theme in Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Text $theme-dark={{ color: 'white' }} />\n```\n\n----------------------------------------\n\nTITLE: Empty Hero Template\nDESCRIPTION: Template placeholder for WebNativeImage demo.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tamagui-image/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Installing @tamagui/colors package with Yarn\nDESCRIPTION: Command to install the @tamagui/colors package using Yarn package manager. This package provides color utilities based on Radix colors for use in Tamagui applications.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/core/colors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/colors\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Import and Usage in React Native\nDESCRIPTION: Demonstrates the standard ES6 import and usage of a single icon component in a React Native class component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/lucide-icons/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Camera } from '@tamagui/lucide-icons';\n\nclass MyClass extends React.Component {\n  render() {\n    return <Camera />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Linear Gradient Component in Tamagui\nDESCRIPTION: Command to install the Linear Gradient component package independently. Note that expo-linear-gradient is required for both vanilla React Native and Expo.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/linear-gradient/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/linear-gradient\n```\n\n----------------------------------------\n\nTITLE: Installing Accordion Component in Tamagui\nDESCRIPTION: Command to install the Accordion component independently if not using the full Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/accordion/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/accordion\n```\n\n----------------------------------------\n\nTITLE: Initializing Toast Component in TSX\nDESCRIPTION: Demonstrates the basic structure and usage of the Toast component within a ToastProvider.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.15.15.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastProvider>\n  <Toast>\n    <Toast.Title />\n    <Toast.Description />\n    <Toast.Action />\n    <Toast.Close />\n  </Toast>\n\n  <ToastViewport />\n</ToastProvider>\n```\n\n----------------------------------------\n\nTITLE: Creating Tokens in Tamagui\nDESCRIPTION: This snippet demonstrates how to create tokens using the createTokens function in Tamagui. It defines a size token for small elements.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/tokens.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst tokens = createTokens({\n  size: {\n    small: 10\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component\nDESCRIPTION: Command to install the Progress component independently from the Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/progress/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/progress\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript Files\nDESCRIPTION: Command to perform initial build of JavaScript files in the project.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:js\n```\n\n----------------------------------------\n\nTITLE: Basic Tamagui configuration setup\nDESCRIPTION: Sets up a basic Tamagui configuration using the defaultConfig from @tamagui/config/v4. It also includes type declarations to ensure proper TypeScript integration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/config-v4.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defaultConfig } from '@tamagui/config/v4'\nimport { createTamagui } from 'tamagui'\n\nexport const config = createTamagui(defaultConfig)\n\ntype CustomConfig = typeof config\n\n// ensure types work\ndeclare module 'tamagui' {\n  interface TamaguiCustomConfig extends CustomConfig {}\n}\n```\n\n----------------------------------------\n\nTITLE: Sizing Button Component in Tamagui\nDESCRIPTION: Shows how to use the size prop to adjust the Button component's size. The size prop affects padding, border radius, font size, and icon sizes. It can use theme-defined sizes or arbitrary numbers.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/button/1.0.0-alpha.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default () => <Button size=\"$6\">Lorem ipsum</Button>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for isTamaguiElement Function\nDESCRIPTION: Type definition for checking if an element is a Tamagui ReactElement. Optional name parameter for checking specific element types.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/exports.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype isTamaguiElement (child: any; name?: string) => boolean\n```\n\n----------------------------------------\n\nTITLE: Using Avatar Component in Tamagui\nDESCRIPTION: Illustrates how to use the Avatar component in Tamagui. The Avatar component is typically used for displaying user profile pictures or icons.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Avatar\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation in Tamagui\nDESCRIPTION: Demonstrates basic usage of Tabs component with two tabs and their respective content areas. Shows how to create a simple tabbed interface with SizableText components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tabs/1.7.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SizableText, Tabs } from 'tamagui'\n\nexport default () => (\n  <Tabs defaultValue=\"tab1\" width={400}>\n    <Tabs.List space>\n      <Tabs.Tab value=\"tab1\">\n        <SizableText>Tab 1</SizableText>\n      </Tabs.Tab>\n      <Tabs.Tab value=\"tab2\">\n        <SizableText>Tab 2</SizableText>\n      </Tabs.Tab>\n    </Tabs.List>\n\n    <Tabs.Content value=\"tab1\">\n      <H5>Tab 1</H5>\n    </Tabs.Content>\n    <Tabs.Content value=\"tab2\">\n      <H5>Tab 2</H5>\n    </Tabs.Content>\n  </Tabs>\n)\n```\n\n----------------------------------------\n\nTITLE: Nested FontLanguage with Default Reset\nDESCRIPTION: Demonstrates nested FontLanguage components with language switching and default font reset.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/font-language.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FontLanguage, Text } from 'tamagui' // or '@tamagui/core'\n\nexport default (\n  <FontLanguage body=\"cn\">\n    <Text fontFamily=\"$body\">\n      你好\n    </Text>\n    <FontLanguage body=\"default\">\n      <Text fontFamily=\"$body\">\n        Hello\n      </Text>\n    </FontLanguage>\n  </FontLanguage>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component\nDESCRIPTION: Command to install the Popover component independently from the Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/popover\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kitchen Sink with React 18\nDESCRIPTION: Commands to set up and run the kitchen sink demo with React 18 profile.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn profile react-18\nyarn kitchen-sink\n```\n\n----------------------------------------\n\nTITLE: Installing Pure JavaScript Dependencies\nDESCRIPTION: Commands for adding JavaScript-only dependencies that will be used across platforms in the app package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/create-tamagui-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/app\nyarn add date-fns\ncd ../..\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Select Component\nDESCRIPTION: Command to install the Select component package independently.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/select/1.40.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/select\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Tamagui Plugin\nDESCRIPTION: Shows how to set up Vite configuration with Tamagui plugin for optimization and component support.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { tamaguiPlugin } from '@tamagui/vite-plugin'\nimport react from '@vitejs/plugin-react-swc'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  clearScreen: false,\n  plugins: [\n    react(),\n    tamaguiPlugin({\n      optimize: true, // turns on the optimizing compiler\n      components: ['tamagui'],\n      config: 'tamagui.config.ts',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Image Component in Markdown\nDESCRIPTION: This snippet shows how to embed a custom Image component within the Markdown content, specifying various properties like title, source, size, and height.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/introducing-tamagui.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Image\n  title=\"Layout tools image\"\n  src=\"/blog/introducing-tamagui/hero.png\"\n  size=\"hero\"\n  height={200}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Progress Component in Tamagui\nDESCRIPTION: Shows how to use the Progress component in Tamagui. The Progress component is typically used to display the completion status of a task or operation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Progress\n```\n\n----------------------------------------\n\nTITLE: Basic Sheet Component Structure\nDESCRIPTION: Basic anatomy of the Sheet component showing the standard implementation with Overlay, Handle, and Frame components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.59.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sheet } from 'tamagui' // or '@tamagui/sheet'\n\nexport default () => (\n  <Sheet>\n    <Sheet.Overlay />\n    <Sheet.Handle />\n    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: AlertDialog Basic Structure\nDESCRIPTION: Basic implementation showing the component hierarchy and structure of AlertDialog.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/alert-dialog/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlertDialog } from 'tamagui' // or '@tamagui/alert-dialog'\n\nexport default () => (\n  <AlertDialog>\n    <AlertDialog.Trigger />\n    <AlertDialog.Portal>\n      <AlertDialog.Overlay />\n      <AlertDialog.Content>\n        <AlertDialog.Title />\n        <AlertDialog.Description />\n        <AlertDialog.Cancel />\n        {/* ... */}\n      </AlertDialog.Content>\n    </AlertDialog.Portal>\n  </AlertDialog>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Core Package\nDESCRIPTION: Command to install the core Tamagui package using Yarn package manager.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/core\n```\n\n----------------------------------------\n\nTITLE: Empty Hero Template\nDESCRIPTION: Empty template for Checkbox hero demonstration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.3.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Starting Watch Mode\nDESCRIPTION: Command to start watch mode for development, which automatically rebuilds on file changes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Implementing PortalProvider in Tamagui App\nDESCRIPTION: Example of how to add PortalProvider to the root of a Tamagui app for use with Popover.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.83.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sheet with createSheet in Tamagui\nDESCRIPTION: Example of using createSheet to create a fully custom sheet component without default styles, including custom Handle, Overlay, and Frame components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.27.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, styled } from '@tamagui/core'\nimport { createSheet } from '@tamagui/sheet'\n\nconst Handle = styled(Stack, {\n  variants: {\n    open: {\n      true: {\n        opacity: 0.35,\n      },\n      false: {\n        opacity: 0.5,\n      },\n    },\n  } as const,\n})\n\nconst Overlay = styled(Stack, {\n  variants: {\n    open: {\n      true: {\n        opacity: 1,\n        pointerEvents: 'auto',\n      },\n      false: {\n        opacity: 0,\n        pointerEvents: 'none',\n      },\n    },\n  } as const,\n})\n\nconst Frame = styled(Stack, {\n  backgroundColor: '$background',\n  // can add open variant as well\n})\n\nexport const Sheet = createSheet({\n  Frame,\n  Handle,\n  Overlay,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Package\nDESCRIPTION: Commands for installing the Tamagui Popover component and its portal dependency.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.125.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/popover\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Inspecting Styled Component Configuration\nDESCRIPTION: Example showing how to access and inspect the static configuration of a styled component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/developing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst Circle = styled(View, {\n  borderRadius: 1000,\n})\n\nconsole.log(Circle.staticConfig) // lots of helpful information\n```\n\n----------------------------------------\n\nTITLE: Installing One and Tamagui Dependencies\nDESCRIPTION: Commands to create a new One project and add Tamagui dependencies using npm and yarn.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/one.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx one\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add tamagui @tamagui/config\n```\n\n----------------------------------------\n\nTITLE: Installing Checkbox Component in Tamagui\nDESCRIPTION: Command to install the Checkbox component from the @tamagui/checkbox package using npm.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.89.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/checkbox\n```\n\n----------------------------------------\n\nTITLE: Spinner Hero Template\nDESCRIPTION: Empty hero template demonstration for the Spinner component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/spinner/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition for isTamaguiComponent Function\nDESCRIPTION: Type definition for checking if a component is a Tamagui component. Optional name parameter for checking specific component types.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/exports.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype isTamaguiComponent (component: any; name?: string) => boolean\n```\n\n----------------------------------------\n\nTITLE: Running One App in Development Mode\nDESCRIPTION: Command to start the One app in development mode using Yarn package manager.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/sandbox/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Animated in Tamagui\nDESCRIPTION: Implementing React Native Animated driver configuration in Tamagui with spring animation parameters.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/animations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAnimations } from '@tamagui/animations-react-native'\nimport { createTamagui } from 'tamagui'\n\nexport default createTamagui({\n  animations: createAnimations({\n    fast: {\n      damping: 20,\n      mass: 1.2,\n      stiffness: 250,\n    },\n    medium: {\n      damping: 10,\n      mass: 0.9,\n      stiffness: 100,\n    },\n    slow: {\n      damping: 20,\n      stiffness: 60,\n    },\n  }),\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon Component to the Compound Button\nDESCRIPTION: Implementation of a ButtonIcon component that consumes the ButtonContext to align with Button styles. This example shows how to integrate third-party components with the styled context system.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getTokens, useTheme } from '@tamagui/core'\nimport * as React from 'react'\n\nconst ButtonIcon = (props: { children: React.ReactNode }) => {\n  const { size } = React.useContext(ButtonContext)\n  const tokens = getTokens()\n  const smallerSize = tokens.size[size].val * 0.5\n  const theme = useTheme()\n  return React.cloneElement(props.children, {\n    width: smallerSize,\n    height: smallerSize,\n    color: theme.color.get(),\n  })\n}\n\n// add it to your Button:\n\nexport const Button = withStaticProperties(ButtonFrame, {\n  Text: ButtonText,\n  Icon: ButtonIcon,\n  Props: ButtonContext.Provider,\n})\n```\n\n----------------------------------------\n\nTITLE: Popover Usage in React Component\nDESCRIPTION: A placeholder for a Popover usage example in a React component. This snippet is empty but intended to showcase Popover implementation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.43.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Template in Tamagui\nDESCRIPTION: This snippet demonstrates how to define a template in Tamagui, mapping theme property names to palette indices.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  background: 0,\n  color: 12\n}\n```\n\n----------------------------------------\n\nTITLE: Using Debug Prop with Tamagui Button\nDESCRIPTION: Example of using the debug prop on a Tamagui Button component to output runtime information.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/developing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default () => <Button debug>Hello world</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Spinner Component in Tamagui\nDESCRIPTION: Demonstrates the usage of the Spinner component in Tamagui. Spinners are commonly used to indicate loading or processing states in applications.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Spinner\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignorable Modules for Tamagui in Bash\nDESCRIPTION: These commands demonstrate how to set the TAMAGUI_IGNORE_BUNDLE_ERRORS environment variable to ignore specific modules or all modules during Tamagui's compilation process.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/errors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTAMAGUI_IGNORE_BUNDLE_ERRORS=some_module_name,some_other_module_name\n# Or to disable them all (not recommended):\nTAMAGUI_IGNORE_BUNDLE_ERRORS=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Stripe and Supabase\nDESCRIPTION: Sets up the necessary environment variables in the .env file for Stripe API keys and Supabase connection details needed for local development.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/doc/stripe-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxxxxxx\\nSTRIPE_SECRET_KEY=sk_test_xxxxxxxxxxxxxxxxx\\nSUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key\\nNEXT_PUBLIC_SUPABASE_URL=http://localhost:54321\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation\nDESCRIPTION: Basic structure showing the anatomy of a Tooltip component implementation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip } from 'tamagui' // or '@tamagui/tooltip'\n\nexport default () => (\n  <Tooltip>\n    <Tooltip.Trigger />\n    <Tooltip.Content>\n      <Tooltip.Arrow />\n      {/* ... */}\n    </Tooltip.Content>\n  </Tooltip>\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering SocialLinksRow Component in JSX\nDESCRIPTION: This snippet shows the usage of the SocialLinksRow component, likely for displaying social media links.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one-release-candidate.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SocialLinksRow />\n```\n\n----------------------------------------\n\nTITLE: Configuring PortalProvider\nDESCRIPTION: Setup for PortalProvider at the root of the application to enable tooltip functionality.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.105.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Native Dependencies\nDESCRIPTION: Commands for adding native dependencies to the Expo application within the monorepo structure.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/create-tamagui-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd apps/expo\nyarn add react-native-reanimated\n\ncd ../..\nyarn\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Open Items in Accordion\nDESCRIPTION: Example of setting the type prop to 'multiple' to allow multiple items to be open simultaneously in an Accordion.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/accordion/1.0.0.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion type=\"__multiple__\">\n  <Accordion.Item value=\"item-1\">…</Accordion.Item>\n  <Accordion.Item value=\"item-2\">…</Accordion.Item>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Slider Package\nDESCRIPTION: Command to install the slider component package independently from Tamagui\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/slider/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/slider\n```\n\n----------------------------------------\n\nTITLE: Generating Native Code for iOS Build\nDESCRIPTION: Command to generate the native code required for building the One app for iOS distribution using Yarn package manager.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/sandbox/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn prebuild:native\n```\n\n----------------------------------------\n\nTITLE: Configuring Portal Provider\nDESCRIPTION: Setup for the PortalProvider component at the app root to enable floating popover functionality.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.110.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tamagui CLI to Generate CSS\nDESCRIPTION: This command shows how to use the Tamagui CLI to generate CSS based on the build configuration file.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tamagui/cli generate\n```\n\n----------------------------------------\n\nTITLE: Installing Bento Components via CLI\nDESCRIPTION: Command to install the complete Bento suite of UI components using npx. This will fetch and install all Bento-related packages and dependencies.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/bento-get/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx bento-get\n```\n\n----------------------------------------\n\nTITLE: Simplified Group Usage without Item Components\nDESCRIPTION: Example of using XGroup without XGroup.Item components for a simpler implementation, where spacing is applied directly to children. Group automatically detects if any Group.Item is inside it and adjusts its behavior accordingly.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.7.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage without Item:\nexport default () => (\n  <XGroup>\n    <Button>First</Button>\n    <Button>Second</Button>\n    <Button>Third</Button>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui Development Visualizer\nDESCRIPTION: Setup code for the Tamagui visualizer tool that provides a heads-up-display for component inspection during development.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/developing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { setupDev } from '@tamagui/core'\n\nsetupDev({\n  // can just be true as well for defaulting to key: Alt + delay: 800\n  visualizer: {\n    key: 'Alt',\n    delay: 800\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tamagui Types for Custom Groups\nDESCRIPTION: Shows how to set up TypeScript types for custom group names in Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'tamagui' {\n  interface TamaguiCustomConfig extends AppConfig {}\n\n  // if you want types for group styling props, define them like so:\n  interface TypeOverride {\n    groupNames(): 'a' | 'b' | 'c'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Tamagui\nDESCRIPTION: Example of a Babel configuration file (babel.config.js) with Tamagui plugin settings.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/compiler-install.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    [\n      '@tamagui/babel-plugin',\n      {\n        components: ['tamagui'],\n        config: './tamagui.config.ts',\n        importsWhitelist: ['constants.js', 'colors.js'],\n        logTimings: true,\n        disableExtraction: process.env.NODE_ENV === 'development',\n      }\n    ],\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Tamagui Component Extraction\nDESCRIPTION: Shows how to use the debug pragma to get detailed information on Tamagui's component extraction process.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/design-systems.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// debug\n// ^ the above pragma will direct Tamagui to output a lot of information on the extraction\nimport { Circle } from '@ourapp/components'\n\nexport default () => <Circle size=\"$large\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install all required project dependencies using Yarn package manager.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Empty Hero Template for Tabs\nDESCRIPTION: A placeholder template for demonstrating tabs functionality in the documentation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tabs/1.7.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Tabs\n```\n\n----------------------------------------\n\nTITLE: Example of Registering a Font with Multiple Weights in Tamagui\nDESCRIPTION: This example demonstrates how to register a custom font (Inter) with multiple weight variants in Tamagui. It sets up the font family name, associates each weight with a specific font file, and defines size metrics.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/core/font/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createFont, addFont } from '@tamagui/core'\n\nconst interFont = createFont({\n  family: 'Inter',\n  size: {\n    1: 12,\n    2: 14,\n    // ...\n  },\n  lineHeight: {\n    1: 17,\n    2: 22,\n    // ...\n  },\n  weight: {\n    4: '300',\n    6: '600',\n  },\n  face: {\n    300: { normal: 'InterLight', italic: 'InterItalic' },\n    600: { normal: 'InterBold' },\n  },\n})\n\naddFont(interFont)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Styled Components in Tamagui\nDESCRIPTION: Demonstrates how to create a styled component using Tamagui's styled function and apply additional styles directly as props.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, styled } from '@tamagui/core'\n\nconst StyledView = styled(View, {\n  padding: 10,\n})\n\nconst MyView = () => (\n  <StyledView\n    backgroundColor=\"red\"\n    hoverStyle={{\n      backgroundColor: 'green'\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Expo with cleared cache\nDESCRIPTION: Command to start an Expo project with a cleared cache, useful for the first run after adding Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start -c\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Babel plugin\nDESCRIPTION: Command to add the Tamagui Babel plugin to the project dependencies.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/babel-plugin\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode for Tamagui in Bash\nDESCRIPTION: This command sets the DEBUG environment variable to 'tamagui', enabling full stack trace visibility for Tamagui-related issues.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/errors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=tamagui\n```\n\n----------------------------------------\n\nTITLE: Configuring Toast Placement for iOS using burntOptions in TypeScript\nDESCRIPTION: This snippet demonstrates how to change the placement of toasts on iOS using the burntOptions prop on ToastProvider. It allows setting the toast to appear from the bottom of the screen.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.11.3.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastProvider burntOptions={{ from: 'bottom' }}>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Aliases for React Native Web Lite\nDESCRIPTION: Instructions for setting up webpack aliases to use react-native-web-lite and a custom SVG implementation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/react-native-web-lite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAlias the following\n\n- react-native-web$ => react-native-web-lite\n- react-native-svg => @tamagui/react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Setting Up Native Sheet Support in Tamagui\nDESCRIPTION: Instructions for setting up native iOS sheet support in Tamagui, including installation of dependencies and usage example.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.27.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sheet, setupNativeSheet } from '@tamagui/sheet'\nimport { ModalView } from 'react-native-ios-modal'\n\nsetupNativeSheet('ios', ModalView)\n\nexport default (\n  <Sheet native>\n    {/* The rest of your sheet views, see Anatomy, example and props API */}\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Underdamped Spring Solution in TypeScript for Tamagui\nDESCRIPTION: This function computes the solution for an underdamped spring system given initial conditions and time. It uses the parameters calculated by the calcSpring function.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/ui/animate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function calcUnderdampedSpring(\n  t: number,\n  init: number,\n  target: number,\n  { w0, zeta, wd, a, b }: ReturnType<typeof calcSpring>\n) {\n  if (w0 === 0) {\n    return target\n  }\n\n  const x0 = init - target\n  const envelope = Math.exp(-zeta * w0 * t)\n  const m1 = x0 * wd\n  const m2 = zeta * w0 * x0 + 1 * wd\n  const cos = Math.cos(wd * t)\n  const sin = Math.sin(wd * t)\n  return -(envelope * (m1 * sin - m2 * cos) - target)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Value Types in TypeScript\nDESCRIPTION: This snippet defines various types related to animation values, including scalar values, colors, and complex values. It also includes utility types for working with these animation values.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/ui/animate-presence/README.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AnimationValue = number | string\n\nexport type SingleAnimationValue = AnimationValue | CustomValue\n\nexport type AnimationValueTypes =\n  | AnimationValue\n  | CustomValue\n  | ComplexAnimationValue\n\nexport type ComplexAnimationValue = Array<AnimationValue | CustomValue>\n\nexport type CustomValue = \n  | ColorRGBA\n  | ColorHSLA\n  | ColorMix\n\nexport type ResolvedAnimationValue = number | string | ResolvedComplexAnimationValue\n\nexport type ResolvedComplexAnimationValue = Array<number | string>\n\nexport type ResolvedSingleAnimationValue = ResolvedAnimationValue\n\nexport type ResolvedValueType = string | number | null\n\nexport interface ColorRGBA {\n  red: number\n  green: number\n  blue: number\n  alpha?: number\n}\n\nexport interface ColorHSLA {\n  hue: number\n  saturation: number\n  lightness: number\n  alpha?: number\n}\n\nexport interface ColorMix {\n  color1: string\n  color2: string\n  balance: number\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tamagui Timer for Performance Measurement in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the timer utility from Tamagui to measure and log execution times in a TypeScript environment. It creates a timer instance, sets up a delayed print of results, and shows how to mark specific points within a function for timing.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/timer/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { timer } from '@tamagui/timer'\n\nconst t = timer()\n\nsetTimeout(() => {\n  t.print()\n}, 3000)\n\nfunction something() {\n  const time = t.start()\n  \n  // do stuff...\n  \n  time`firstTag`\n\n  // do stuff...\n  time`second`\n}\n```\n\n----------------------------------------\n\nTITLE: Type Helper Usage Example\nDESCRIPTION: Example showing how to use GetProps and GetRef type helpers with Tamagui components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/exports.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, GetProps, styled } from '@tamagui/core'\n\nconst X = styled(Stack, {})\n\ntype XProps = GetProps<typeof X>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, GetRef, styled } from '@tamagui/core'\n\nconst X = styled(Stack, {})\n\nconst MyComponent = () => {\n  const ref = useRef<GetRef<typeof X>>()\n  return <X ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sandbox Environment\nDESCRIPTION: Command to run the sandbox environment which works with Expo Go.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn sandbox\n```\n\n----------------------------------------\n\nTITLE: Type Definition for insertFont Function\nDESCRIPTION: Type definition for inserting a new font after initial createTamagui call. Accepts font name and font configuration, returns parsed font object.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/exports.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype insertFont = (\n  name: string,\n  fontIn: GenericFont\n) => ParsedFont\n```\n\n----------------------------------------\n\nTITLE: Building Production Version of Remix + Tamagui Project\nDESCRIPTION: Command to build the production version of a Remix + Tamagui project.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/starters/remix/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build:production\n```\n\n----------------------------------------\n\nTITLE: Loading Google Fonts in Expo\nDESCRIPTION: Example of how to load Google Fonts using the useFonts hook from @expo-google-fonts in an Expo app.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFonts, Inter_400Regular, Inter_900Black } from '@expo-google-fonts/inter'\n\nfunction App() {\n  const [loaded] = useFonts({\n    Inter_400Regular,\n    Inter_900Black,\n  })\n\n  useEffect(() => {\n    if (loaded) {\n      // can hide splash screen here\n    }\n  }, [loaded])\n\n  if (!loaded) {\n    return null\n  }\n\n  return <MyApp />\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Headless Switch Component\nDESCRIPTION: Command to install the headless switch component, which has no dependency on @tamagui/core but works with React Native APIs.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.89.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/switch-headless\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Themes with createThemes in Tamagui\nDESCRIPTION: This snippet demonstrates the simplest usage of createThemes to generate light and dark themes with a basic palette.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThemes } from '@tamagui/theme-builder'\n\nexport const themes = createThemes({\n  base: {\n    palette: {\n      dark: ['#000', '#fff'],\n      light: ['#fff', '#000'],\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Label Hero Template\nDESCRIPTION: Empty hero template placeholder for Label component demonstration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/label/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Styling in Tamagui\nDESCRIPTION: Shows how to apply platform-specific styles in Tamagui components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Text $platform-ios={{ color: 'white' }} />\n```\n\n----------------------------------------\n\nTITLE: Defining a Dark Blue Palette in Tamagui\nDESCRIPTION: This snippet shows how to define a dark blue palette using HSL color values, ranging from background to foreground colors.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst dark_blue = [\n  'hsl(212, 35.0%, 9.2%)', // background\n  'hsl(216, 50.0%, 11.8%)',\n  'hsl(214, 59.4%, 15.3%)',\n  'hsl(214, 65.8%, 17.9%)',\n  'hsl(213, 71.2%, 20.2%)',\n  'hsl(212, 77.4%, 23.1%)',\n  'hsl(211, 85.1%, 27.4%)',\n  'hsl(211, 89.7%, 34.1%)',\n  'hsl(206, 100%, 50.0%)',\n  'hsl(209, 100%, 60.6%)',\n  'hsl(210, 100%, 66.1%)',\n  'hsl(206, 98.0%, 95.8%)', // foreground\n]\n```\n\n----------------------------------------\n\nTITLE: Building One App for Web Production\nDESCRIPTION: Command to build the One app for web production using Yarn package manager.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/sandbox/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:web\n```\n\n----------------------------------------\n\nTITLE: SizableText Component Implementation\nDESCRIPTION: Details the implementation of SizableText component which provides the foundation for text sizing in Tamagui headings, including font styling variants.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/headings/1.0.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'tamagui' // or '@tamagui/core'\n\nconst SizableText = styled(Text, {\n  name: 'SizableText',\n  fontFamily: '$body',\n  color: '$color',\n\n  variants: {\n    size: {\n      '...fontSize': (val, { font, props }) => {\n        const fontSize = font.size[val]\n        const lineHeight = font.lineHeight[val]\n        const fontWeight = font.weight[val]\n        const letterSpacing = font.letterSpacing[val]\n        const fontStyle = font.style?.[val]\n        const textTransform = font.transform?.[val]\n        return {\n          fontStyle,\n          textTransform,\n          fontWeight,\n          letterSpacing,\n          fontSize,\n          lineHeight,\n        }\n      },\n    },\n  },\n\n  defaultVariants: {\n    // note tamagui uses a generic \"true\" token that your sizes should set to be the same as the default on your scale\n    size: '$true',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Imperative Toast API in Tamagui\nDESCRIPTION: Demonstrates setting up a Toast provider with native platform support using the imperative API. Shows provider setup and toast usage with a custom component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.9.1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui' // or '@tamagui/button'\nimport { Toast, ToastImperativeProvider, ToastProvider, useToast } from 'tamagui' // or '@tamagui/toast'\n\nconst options = { native: 'mobile' }\n\nexport default () => (\n  <ToastProvider>\n    <ToastImperativeProvider options={options}>\n      <CurrentToast />\n      <MyPage />\n    </ToastImperativeProvider>\n\n    <ToastViewport />\n  </ToastProvider>\n)\n\nconst CurrentToast = () => {\n  const { currentToast } = useToast()\n\n  // only show the component if it's present and not handled by native toast\n  if (!currentToast || currentToast.isHandledNatively) return null\n  return (\n    <Toast key={currentToast.id}>\n      <Toast.Title>{currentToast.title}</Toast.Title>\n      <Toast.Description>{currentToast.message}</Toast.Description>\n    </Toast>\n  )\n}\n\nconst MyPage = () => {\n  const { show } = useToast()\n\n  return (\n    <Button onPress={() => show('Done!', { message: 'Form submitted successfully.' })}>\n      Show Toast\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Install Headless Switch with npm\nDESCRIPTION: Installs the headless switch component from the @tamagui/switch-headless package using npm. This package has no dependency on `@tamagui/core`, but still works off the react-native APIs, allowing you to bring your own style library.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.85.0.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/switch-headless\n```\n\n----------------------------------------\n\nTITLE: Using Toast.Action Component in Tamagui\nDESCRIPTION: Toast.Action is a subcomponent of Toast that extends the Stack component. It can be customized with the asChild prop to use a custom Button inside.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.8.0.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast.Action asChild>\n  <Button>Action</Button>\n</Toast.Action>\n```\n\n----------------------------------------\n\nTITLE: Sized Group Component Implementation\nDESCRIPTION: Demonstrates using the size prop with XGroup to control border radius tokens and styling of grouped elements.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.11.2.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\nexport default () => (\n  <XGroup size=\"$6\">\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Install Tamagui Portal\nDESCRIPTION: This command installs the `@tamagui/portal` package using npm.  This package is required only when using `@tamagui/core` without the full `tamagui` package and is necessary for the Tooltip component to render correctly modally.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.122.0.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Filtering Tokens by Prefix in Tamagui\nDESCRIPTION: These snippets show how to filter tokens based on whether they are prefixed or not using the prefixed option in the getTokens function.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/tokens.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// only non-$\ngetTokens({ prefixed: false }).size.small\n// only $\ngetTokens({ prefixed: true }).['$size'].small\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Tamagui in React Native\nDESCRIPTION: Sets up the Babel configuration for using Tamagui in a React Native project with custom components.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/design-systems.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: [\n    [\n      '@tamagui/babel-plugin',\n      {\n        exclude: /node_modules/,\n        config: './tamagui.config.ts',\n        components: ['@ourapp/components', 'tamagui']\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Metro Plugin for Web Support\nDESCRIPTION: This snippet shows the command to install the necessary packages for enabling Tamagui web support with Metro, including the Tamagui Metro plugin.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add tamagui @tamagui/config @tamagui/metro-plugin\n```\n\n----------------------------------------\n\nTITLE: Using Group with Size Props in Tamagui\nDESCRIPTION: Example of setting a specific size token on an XGroup component, which affects the border radius values applied to children.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.56.1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\nexport default () => (\n  <XGroup size=\"$6\">\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Component in Tamagui\nDESCRIPTION: This code snippet shows the installation command for the Portal component package in Tamagui. It uses a custom InstallBanner component to display the installation instructions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/portal/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<InstallBanner name=\"@tamagui/portal\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Theme with Color Values\nDESCRIPTION: This example shows how to define a light theme with various color values that can be used in Tamagui components for consistent styling across your application.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst light = {\n  background: '#fff',\n  backgroundHover: tokens.color.gray2,\n  backgroundPress: tokens.color.gray4,\n  backgroundFocus: tokens.color.gray5,\n  borderColor: tokens.color.gray4,\n  borderColorHover: tokens.color.gray6,\n  borderColorPress: tokens.color.gray12,\n  borderColorFocus: tokens.color.gray11,\n  color: tokens.color.gray10,\n  colorHover: tokens.color.gray9,\n  colorPress: tokens.color.gray8,\n  colorFocus: tokens.color.gray8,\n  shadowColor: tokens.color.grayA4,\n  shadowColorHover: tokens.color.grayA6,\n  shadowColorPress: tokens.color.grayA8,\n  shadowColorFocus: tokens.color.grayA8,\n  ...lightColors,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Toast Viewports in Tamagui\nDESCRIPTION: This example demonstrates how to set up multiple toast viewports in a Tamagui application, allowing toasts to be sent to different areas of the UI.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.83.0.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <ToastProvider>\n      <ToastViewport /> {/* default viewport */}\n      <ToastViewport name=\"viewport-custom\" />\n    </ToastProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Group with Custom Sizing\nDESCRIPTION: Demonstration of using the size prop with XGroup to control border radius using tokens\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.6.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\nexport default () => (\n  <XGroup size=\"$6\">\n    <XGroup.Item>\n      <Button>First</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Second</Button>\n    </XGroup.Item>\n    <XGroup.Item>\n      <Button>Third</Button>\n    </XGroup.Item>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Core Component Creation in Tamagui\nDESCRIPTION: Demonstrates the creation of a core component with custom types and a property mapper function in Tamagui.  This example shows how to transform incoming props into outgoing props using the `propMapper` function. It defines the structure for creating core components within the Tamagui ecosystem.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/next.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncreateCore<CustomTypes>({ \n  propMapper(propsIn) { return propsOut }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component in Tamagui\nDESCRIPTION: Command to install the Progress component independently if not already included in Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/progress/1.48.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/progress\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui with Next.js\nDESCRIPTION: Commands to create a new Next.js project and add the Tamagui Next.js plugin.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/next-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining Sheet Component Structure in TSX\nDESCRIPTION: This snippet demonstrates the basic structure and anatomy of the Sheet component in Tamagui. It shows how to import and use the Sheet component along with its subcomponents like Overlay, Handle, and Frame.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.9.18.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sheet } from 'tamagui' // or '@tamagui/sheet'\n\nexport default () => (\n  <Sheet>\n    <Sheet.Overlay />\n    <Sheet.Handle />\n    <Sheet.Frame>\n      {/* ...inner contents */}\n    </Sheet.Frame>\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Theme in Tamagui\nDESCRIPTION: This snippet illustrates the simplest form of a theme in Tamagui, mapping property names to color values.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  background: '#000',\n  color: '#fff',\n}\n```\n\n----------------------------------------\n\nTITLE: Adding hoistingLimits configuration to package.json for iOS builds\nDESCRIPTION: This configuration snippet adds hoisting limits to package.json to make 'yarn ios' commands work successfully. However, this configuration causes issues with metro bundler and needs to be removed when building JavaScript.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/kitchen-sink/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"installConfig\": {\n    \"hoistingLimits\": \"dependencies\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Calculating Spring Animation in TypeScript for Tamagui\nDESCRIPTION: This function calculates spring animation parameters based on mass, stiffness, and damping. It returns an object with natural frequency and damping ratio.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/ui/animate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function calcSpring(mass = 1, stiffness = 100, damping = 10, velocity = 0) {\n  const w0 = Math.sqrt(stiffness / mass)\n  const zeta = damping / (2 * Math.sqrt(stiffness * mass))\n  return {\n    w0,\n    zeta,\n    wd: w0 * Math.sqrt(1 - zeta ** 2),\n    a: 1,\n    b: zeta * w0,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Tamagui Tooltip\nDESCRIPTION: This command installs the `@tamagui/tooltip` package using npm. This package provides the Tooltip component for use in Tamagui applications.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.122.0.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/tooltip\n```\n\n----------------------------------------\n\nTITLE: Configuring PortalProvider in React\nDESCRIPTION: Setup for PortalProvider at the root level of the application to enable modal functionality.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.59.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Options in Tamagui\nDESCRIPTION: This snippet demonstrates how to configure static options in Tamagui, including tokens, themes, fonts, and media queries. It shows the structure of the configuration object and provides examples for each option.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/compiler/static/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTamagui } from 'tamagui'\n\nconst config = createTamagui({\n  // see below for configuration options\n})\n\nexport type AppConfig = typeof config\ndeclare module 'tamagui' {\n  interface TamaguiCustomConfig extends AppConfig {}\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using Named Groups with Container Queries in Tamagui\nDESCRIPTION: An advanced example showing how to use named groups with container queries. This snippet demonstrates nesting group containers with specific names and applying styles to children based on different parent group conditions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/styles.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<View group=\"card\">\n  <View group>\n    <Text\n      $group-card-sm={{ color: 'white' }}\n      $group-card-sm-hover={{ color: 'green' }}\n    />\n    <Text\n      $group-sm={{ color: 'white' }}\n      $group-sm-hover={{ color: 'green' }}\n    />\n  </View>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Tamagui Compiler Output Example\nDESCRIPTION: Shows how the Tamagui compiler would transform JSX with theme references into optimized HTML and CSS for the web. Demonstrates the extraction of styling.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport const App = () => (\n  <Provider defaultTheme=\"light\">\n    <div className=\"baCo-2nesi3\" />\n    <Theme name=\"dark\">\n      <div className=\"baCo-2nesi3\" />\n    </Theme>\n  </Provider>\n)\n\n// CSS output:\n//  .color-2nesi3 { background-color: var(--red); }\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button Component by Extending the Base Button\nDESCRIPTION: Demonstrates how to create a custom Button component by extending the base Button and its subcomponents, allowing for further customization.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withStaticProperties } from '@tamagui/core'\n\nimport { Button } from './OurButton'\n\nconst CustomButtonFrame = styled(Button, {\n  // override some styles\n})\n\nconst CustomButtonText = styled(Button.Text, {\n  // override some styles\n})\n\nexport const CustomButton = withStaticProperties(CustomButtonFrame, {\n  Text: CustomButtonText,\n})\n\nexport default () => (\n  <CustomButton>\n    <CustomButton.Text>Hello world</CustomButton.Text>\n    <CustomButton.Text size=\"$sm\">(Smaller text)</CustomButton.Text>\n  </CustomButton>\n)\n```\n\n----------------------------------------\n\nTITLE: Optimized CSS Handling for NextTamaguiProvider\nDESCRIPTION: A code snippet demonstrating how to use the exclude option with getCSS in NextTamaguiProvider for better performance, especially when using outputCSS.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/next-js.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<style\n  dangerouslySetInnerHTML={{\n    __html: tamaguiConfig.getCSS({\n      // if you are using \"outputCSS\" option, you should use this \"exclude\"\n      // if not, then you can leave the option out\n      exclude: process.env.NODE_ENV === 'production' ? 'design-system' : null,\n    }),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component in Tamagui\nDESCRIPTION: Instructions for installing the Popover component independently using npm.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/popover/1.83.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/popover\n```\n\n----------------------------------------\n\nTITLE: Headless Switch Implementation\nDESCRIPTION: Example of creating a custom switch using createSwitch with custom styled components for Frame and Thumb\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.58.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, styled } from '@tamagui/core'\nimport { createSwitch } from '@tamagui/switch'\n\nconst Frame = styled(Stack, {\n  variants: {\n    checked: {\n      true: {\n        backgroundColor: 'yellow'\n      },\n      false: {\n        backgroundColor: 'green',\n      },\n    },\n  } as const,\n})\n\nconst Thumb = styled(Stack, {\n  variants: {\n    checked: {\n      true: {\n        opacity: 1,\n      },\n      false: {\n        opacity: 0.5,\n      },\n    },\n  } as const,\n})\n\nexport const Switch = createSwitch({\n  Frame,\n  Thumb,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Inline Styling with Tamagui Components\nDESCRIPTION: Shows how to use inline styling with Tamagui's View and Text components, including token references using the $ prefix for dynamic theming.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/library/tamagui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'tamagui'\n\nexport default () => (\n  <>\n    <View backgroundColor=\"red\" />\n    <Text fontSize={16} color=\"$colorToken\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Component with Spring Animations\nDESCRIPTION: Demonstration of the new Switch component working with spring animations in Tamagui. This shows how to use the component with Tamagui's animation system.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/tamagui-enters-beta-themes-and-animations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Switch\n```\n\n----------------------------------------\n\nTITLE: Customizing ListItem Text Components in Tamagui\nDESCRIPTION: Example of customizing only the text components of ListItem without modifying the frame.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/list-item/1.0.0.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ListItem = themeable(\n  forwardRef<TamaguiElement, ListItemProps>((propsIn, ref) => {\n    const { props } = useListItem(propsIn, {\n      Title: CustomListItemTitle,\n      Text: CustomListItemText,\n      Subtitle: CustomListItemSubtitle,\n    })\n\n    return <ListItemFrame {...props} ref={ref} />\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Installing RadioGroup Component in Tamagui\nDESCRIPTION: Command to install the RadioGroup component independently from Tamagui. This is not necessary if you're already using Tamagui as it comes pre-installed.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/radio-group/1.2.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/radio-group\n```\n\n----------------------------------------\n\nTITLE: Running Subscription Cancellation Script\nDESCRIPTION: Command to execute a Node.js script that cancels active subscriptions for a specific user, useful when resetting user state for testing.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/doc/stripe-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd code/tamagui.dev\\nnode ./scripts/cancel-subscription.mjs <USER_ID>\n```\n\n----------------------------------------\n\nTITLE: Configuring PortalProvider Setup\nDESCRIPTION: Implementation of PortalProvider at the root level of the application for AlertDialog functionality.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/alert-dialog/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tamagui Expo Router project\nDESCRIPTION: Command to create a new Tamagui project using the Expo Router template. Requires Yarn 4.4.0 or greater.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create tamagui@latest --template expo-router\n```\n\n----------------------------------------\n\nTITLE: Importing Linear Gradient Component in Tamagui\nDESCRIPTION: Examples of importing the Linear Gradient component either separately or using the path '/linear-gradient' in Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/linear-gradient/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinearGradient } from '@tamagui/linear-gradient'\nimport { LinearGradient } from 'tamagui/linear-gradient'\n```\n\n----------------------------------------\n\nTITLE: Installing @tamagui/form Package\nDESCRIPTION: Command to install the @tamagui/form package independently if not already included in Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/form/1.3.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/form\n```\n\n----------------------------------------\n\nTITLE: Theme Optimization with External Components\nDESCRIPTION: Shows how to use theme values optimally with external components using the get() helper function.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-theme.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, useTheme } from '@tamagui/core'\nimport { SomeExternalComponent } from 'some-external-component'\n\nconst App = () => {\n  const theme = useTheme()\n\n  const background = theme.background.get()\n  const backgroundValue = theme.background.val\n\n  return (\n    <SomeExternalComponent\n      style={{\n        backgroundColor: background,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Tamagui\nDESCRIPTION: Example of a Vite configuration file (vite.config.ts) with Tamagui plugin settings.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/compiler-install.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { tamaguiPlugin } from '@tamagui/vite-plugin'\n\nexport default defineConfig({\n  plugins: [\n    tamaguiPlugin({\n      // points to your tamagui config file\n      config: 'src/tamagui.config.ts',\n      // points to any linked packages or node_modules\n      // that have tamagui components to optimize\n      components: ['tamagui'],\n      // turns on the optimizing compiler\n      optimize: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @tamagui/config package\nDESCRIPTION: Command to install the @tamagui/config package using npm.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/config-v4.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/config\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Anchor Component Usage in JSX\nDESCRIPTION: This snippet shows how to use the Anchor component to create a link to an external website. The Anchor component extends SizableText and adds href, target, and rel attributes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/anchor/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Anchor href=\"https://example.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n  Visit Example Website\n</Anchor>\n```\n\n----------------------------------------\n\nTITLE: Basic Spinner Usage in Tamagui\nDESCRIPTION: Demonstrates basic usage of the Spinner component with size and color customization. The component extends React Native's ActivityIndicator and accepts small or large sizes along with theme colors.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/spinner/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Spinner } from 'tamagui'\n\nexport default () => <Spinner size=\"large\" color=\"$green10\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem Component in Tamagui\nDESCRIPTION: Shows the usage of the ListItem component in Tamagui. ListItem enables displaying content with a title, subtitle, before and after images or icons, and more.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=ListItem\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Google Fonts\nDESCRIPTION: Command to install a specific Google Font package for use with Expo.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/expo.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @expo-google-fonts/inter\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Demonstration Component in Markdown\nDESCRIPTION: This snippet demonstrates the usage of a custom component called ColorsDemo within a Markdown file. The component is likely responsible for displaying the color palette mentioned in the documentation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/colors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ColorsDemo />\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Sub-themes in Tamagui\nDESCRIPTION: Shows how to access a specific sub-theme directly without nesting Theme components. This provides more direct access to nested themes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/themes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Theme name=\"dark\">\n  <Button theme=\"green_subtle\">Hello world</Button>\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Installing Cubic Bezier Animator Package for Tamagui\nDESCRIPTION: Command to install the @tamagui/cubic-bezier-animator package using Yarn package manager. This package provides cubic bezier animation capabilities for Tamagui projects.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/core/cubic-bezier-animator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/cubic-bezier-animator\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive State with @tamagui/use-store in React\nDESCRIPTION: This example demonstrates basic usage of @tamagui/use-store for creating reactive state classes in React. It shows multiple methods for accessing the same store instance and how using only accessed properties causes selective re-renders.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/packages/use-store/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createUseStore, createStoreInstance, useStore, useGlobalStore } from '@tamagui/use-store'\n\nclass X {\n  y = 0\n\n  add() {\n    this.y += 1\n  }\n}\n\n// Can use it a few ways, all these will access *the same* store:\nconst useX = createUseStore(X)\nconst x = createStoreInstance(X)\n\n// all of these will be reactive, so only props you use cause re-renders\nexport function ReactComponent() {\n  const x0 = useStore(X)\n  const x1 = useX()\n  const x2 = useGlobalStore(x)\n  \n  return (\n    <>\n      <div>{x0.y}</div>\n      <button action={x0.add}>add</button>\n    </>\n  )\n}\n\n// if you want a different instance or namespace, pass props, these will also all access the same store:\nexport function ReactComponentAlt() {\n  const x0 = useStore(X, { id: 100 })\n  const x1 = useX({ id: 100 })\n  const x2 = useGlobalStore(x, { id: 100 })\n  \n  return (\n    <div>{x0.y}</div>\n  )\n}\n\n// finally, you can make selectors with\nexport function ReactComponentAlt() {\n  const xplusten0 = useStoreSelector(X, { id: 100 }, x => x.y + 10)\n  const xplusten1 = useGlobalStoreSelector(X, { id: 100 }, x => x.y + 10)\n\n  return (\n    <div>{xplusten}</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Children Group Usage\nDESCRIPTION: Shows how to use XGroup component without Group.Item wrappers, where spacing is applied directly to child elements.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.11.2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, XGroup } from 'tamagui'\n\n// usage without Item:\nexport default () => (\n  <XGroup>\n    <Button>First</Button>\n    <Button>Second</Button>\n    <Button>Third</Button>\n  </XGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Inline CSS Injection with Server-Side Layouts\nDESCRIPTION: This snippet shows how to render Tamagui CSS inline when using server-side layouts by getting the CSS from the config and injecting it in the document head.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/configuration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { config } from './tamagui.config'\n\nexport default () => (\n  <html>\n    <head>\n      <style\n        dangerouslySetInnerHTML={{\n          __html: config.getCSS(),\n        }}\n      />\n    </head>\n    <body>\n      <Slot />\n    </body>\n  </html>\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling className Support for External Components\nDESCRIPTION: Demonstrates how to enable className support for external components to optimize them for web use.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/styled.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SomeCustomComponent } from 'some-library'\nimport { styled } from 'tamagui' // or '@tamagui/core'\n\nexport const TamaguiCustomComponent = styled(SomeCustomComponent, {\n  acceptsClassName: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Headless RadioGroup Component in Tamagui\nDESCRIPTION: Command to install the headless version of the RadioGroup component. This version has no dependency on @tamagui/core and works with react-native APIs.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/radio-group/1.2.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/radio-headless\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Components in JSX\nDESCRIPTION: This snippet demonstrates the use of custom React components for rendering documentation content, including an introduction, getting started guide, and feature highlights.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsIntro />\n\n<GetStarted />\n\n#### Highlights\n\n<Highlights\n  disableLinks\n  disableTitle\n  large\n  features={[\n    `Core only has one dependency - React - but supports the full React Native View and Text API, a superset of the React Native Style API, styled(), powerful hooks, and the typed design system helpers in ~28Kb on web.`,\n    `A smart, partial-evaluating compiler gives 0-runtime performance with the ergonomics of writing your code however you want - even inline, logic-filled code is optimized.`,\n    `Every feature works at runtime and compile-time, so none of the usual limits of 0-runtime libraries, while optionally getting the same great performance.`,\n    `useTheme and useMedia hooks with signal-like granularity and dirty tracking.`,\n    `Unstyled and styled versions of all components.`,\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering IntroParagraph Component in JSX\nDESCRIPTION: This snippet demonstrates the use of the IntroParagraph component to display an introductory text about Tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one-release-candidate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<IntroParagraph>\n  Tamagui is an optimizing compiler meets universal style system for React that enables\n  highly performant styles for React Native and web.\n</IntroParagraph>\n```\n\n----------------------------------------\n\nTITLE: Adding Fonts to Tamagui Configuration\nDESCRIPTION: Example of creating a Tamagui configuration with custom fonts using the addFont function. This shows how to properly structure font families with size tokens and weights.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/core/theme/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFont, createTamagui } from 'tamagui'\nimport { addFont } from '@tamagui/core'\n\nconst interFont = createFont({\n  family: 'Inter',\n  size: {\n    1: 12,\n    2: 14,\n    3: 15,\n  },\n  lineHeight: {\n    // 1 could be 20% above size\n    1: '120%',\n    // or just straight 20\n    2: 22,\n  },\n  weight: {\n    4: '300',\n    6: '600',\n  },\n  // ... letterSpacing, style, transform, etc\n})\n\nconst systemFont = createFont({\n  family: 'System',\n  // other properties...\n})\n\nconst config = createTamagui({\n  fonts: {\n    // preferred way:\n    heading: addFont(interFont, {\n      family: {\n        // override specific weights\n        // this generates permutations of weights with the families\n        6: 'Inter-Semibold'\n      },\n      // optionally overrides the base weight map entirely\n      weight: {\n        // maps to 4-6 based on above definitions\n        4: '300',\n        5: '400', // adding more weights to the derived font\n        6: '600'\n      }\n    }),\n    body: interFont,\n    // alternate way:\n    alternate: addFont(systemFont),\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PortalProvider\nDESCRIPTION: Setup for PortalProvider at the root of the application to enable modal tooltip rendering.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider } from '@tamagui/portal'\nimport YourApp from './components/YourApp'\n\nfunction App() {\n  return (\n    <PortalProvider shouldAddRootHost>\n      <YourApp />\n    </PortalProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tamagui Button Component\nDESCRIPTION: Example of how to use a Tamagui Button component in a React application, demonstrating basic usage and theming.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/installation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'tamagui'\n\nexport default function Demo() {\n  return <Button theme=\"blue\">Hello world</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Hero Demo Template\nDESCRIPTION: Template placeholder for Linear Gradient component demonstration. This component supports Tamagui style props and works across both native and web platforms. Currently in beta with limited theme value resolution for colors property.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/linear-gradient/1.0.0-alpha.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=LinearGradient\n```\n\n----------------------------------------\n\nTITLE: Cloning Tamagui Repository\nDESCRIPTION: Command to clone the Tamagui repository from GitHub to local machine.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tamagui/tamagui\n```\n\n----------------------------------------\n\nTITLE: FontLanguage with Styled Components\nDESCRIPTION: Shows how to use FontLanguage with styled components for more efficient font management.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/font-language.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst P = styled(Text, { fontFamily: '$body' })\n\n<FontLanguage body={isFrench ? 'french' : 'default'}>\n  <P>Hello world</P>\n</FontLanguage>\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Package\nDESCRIPTION: Command to install the portal package which is required when using @tamagui/core instead of full tamagui.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.105.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Install Unstyled Checkbox with npm\nDESCRIPTION: Installs the unstyled Checkbox component from the @tamagui/checkbox package using npm.  This provides a Checkbox without default styles, allowing for full customization.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/checkbox/1.85.0.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/checkbox\n```\n\n----------------------------------------\n\nTITLE: Exporting Components in Tamagui Design System\nDESCRIPTION: Exports the Circle component from the index file of the design system package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/design-systems.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './Circle'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ListItem Component in React\nDESCRIPTION: Simple example of using the ListItem component in a React application.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/list-item/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from 'tamagui'\n\nexport default () => <ListItem>Lorem ipsum</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Package\nDESCRIPTION: Command to install the complete Tamagui UI component suite using yarn package manager.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/intro/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add tamagui\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component in Tamagui\nDESCRIPTION: Command to install the Switch component independently if not using the full Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.28.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/switch\n```\n\n----------------------------------------\n\nTITLE: Using the Compound Button Component\nDESCRIPTION: Example showing how to use the compound Button component in a React component. The size property is set on the parent Button and automatically propagates to the Button.Text component.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/how-to-build-a-button.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from './OurButton'\n\nexport default () => (\n  <Button size=\"$md\">\n    <Button.Text>\n      Hello world\n    </Button.Text>\n  </Button>\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tamagui Compiler with File Comment\nDESCRIPTION: Shows how to disable Tamagui compiler optimizations for an entire file using a special comment directive at the top of the file.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/intro/compiler-install.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// tamagui-ignore\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Package for Dialog\nDESCRIPTION: Instructions for installing the Portal package required when using Dialog independently.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/dialog/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component in JSX\nDESCRIPTION: This snippet shows how to use the Image component in JSX, setting various props like title, src, size, and dimensions.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one-release-candidate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  title=\"Tamagui v1 Release Candidate\"\n  src=\"/banner-rc0.jpg\"\n  size=\"hero\"\n  overlap\n  height={275}\n  width={761}\n  resizeMode=\"contain\"\n  mb=\"$4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing AlertDialog Package\nDESCRIPTION: Commands for installing the AlertDialog component and its portal dependency.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/alert-dialog/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/alert-dialog\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Dependencies\nDESCRIPTION: Command to install the Toast component and its dependencies\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.13.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/toast burnt\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Package\nDESCRIPTION: Command to install the tooltip package independently if not using the full tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tooltip/1.105.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/tooltip\n```\n\n----------------------------------------\n\nTITLE: Defining Style Variants with Pseudo-styles in Tamagui\nDESCRIPTION: This code snippet demonstrates how to define style variants in Tamagui, including support for pseudo-styles like `pressStyle`, `hoverStyle`, and `focusStyle`. It enables creating components with dynamically changing styles based on user interaction or component state. The style function optimizes style application on web platforms.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/next.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, style } from '@tamagui/core'\n\n// make it so style props accepts either a regular style object\n// or something like this (can be exported from core):\n\ntype StackStyle = {\n  base: ViewStyle\n  press?: ViewStyle\n  hover?: ViewStyle\n  focus?: ViewStyle\n}\n\nconst mySubStyle: StackStyle = style({\n  backgroundColor: 'red', // optimizes on web to _bg-red\n\n  pressStyle: {\n    backgroundColor: 'blue', // optimizes on web to _press-bg-blue\n  }\n})\n\nconst MyComponent = (props: { accentedStyle?: StackStyle }) => {\n  return (\n    <Stack style={[accentedStyle]} />\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing ToggleGroup Component in Tamagui\nDESCRIPTION: Command to install the ToggleGroup component independently using npm.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toggle-group/1.10.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/toggle-group\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Dependencies with Yarn\nDESCRIPTION: Command to install the required packages for using the Toast component in a Tamagui project.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/toast/1.15.15.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tamagui/toast burnt\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component\nDESCRIPTION: Command to install the Switch component package independently\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.58.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/switch\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Slider Package\nDESCRIPTION: Command to install the Slider component package independently of the main Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/slider/1.45.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/slider\n```\n\n----------------------------------------\n\nTITLE: Advanced Tabs Animation Template\nDESCRIPTION: A template reference for advanced tabs implementation with animations.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tabs/1.7.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=TabsAdvanced\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Image Package\nDESCRIPTION: Command to install the @tamagui/image package independently if not using the full Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/image/1.13.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/image\n```\n\n----------------------------------------\n\nTITLE: Native iOS Sheet Setup\nDESCRIPTION: Configuration for enabling native iOS sheet support with required dependencies\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.116.0.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sheet, setupNativeSheet } from '@tamagui/sheet'\nimport * as NativeModal from 'react-native-ios-modal'\n\nsetupNativeSheet('ios', NativeModal)\n\nexport default (\n  <Sheet native>\n    {/* ... the rest of your sheet */}\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: Using FontLanguage Component for Language-Specific Text\nDESCRIPTION: Shows how to implement language-specific font rendering using the FontLanguage component with typed font families.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/blog/version-one.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FontLanguage, Text } from 'tamagui' // or '@tamagui/core'\n\nexport default () => (\n  <FontLanguage body=\"mandarin\">\n    <Text fontFamily=\"$body\">{/* TODO hello world in mandarin */}</Text>\n  </FontLanguage>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ListItem Component in Tamagui\nDESCRIPTION: Command to install the ListItem component independently if not using the full Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/list-item/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/list-item\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Loader\nDESCRIPTION: Command to install the Tamagui loader as a development dependency using Yarn.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/webpack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D tamagui-loader\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Component-specific Themes in Tamagui\nDESCRIPTION: This example demonstrates how to define and use a component-specific theme in Tamagui configuration and application code.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/guides/theme-builder.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// in your tamagui.config.ts:\n\nconst dark_Square = {\n  background: 'darkblue',\n}\n\nexport const themes = {\n  dark,\n  dark_Square,\n}\n\n// in your app:\n\nexport default () => (\n  <>\n    <Theme name=\"dark\">\n      <Square />\n      {/*\n\n          Because Square has a name of Square it looks for a sub-theme with _Square.\n          It will find dark_Square and change the theme.\n\n          So in this case the Square backgroundColor will be 'darkblue'.\n\n        */}\n    </Theme>\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tamagui Image Component\nDESCRIPTION: Command to install the @tamagui/image-next package independently if not using the full Tamagui package.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/tamagui-image/1.0.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tamagui/image-next\n```\n\n----------------------------------------\n\nTITLE: Native iOS Sheet Implementation\nDESCRIPTION: Setup for native iOS sheet implementation using react-native-ios-modal.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.59.0.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sheet, setupNativeSheet } from '@tamagui/sheet'\nimport { ModalView } from 'react-native-ios-modal'\n\nsetupNativeSheet('ios', ModalView)\n\nexport default (\n  <Sheet native>\n    {/* The rest of your sheet views, see Anatomy, example and props API */}\n  </Sheet>\n)\n```\n\n----------------------------------------\n\nTITLE: Switch Hero Template - Tamagui TSX\nDESCRIPTION: Empty hero template placeholder for Switch component demonstration.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.0.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Switch Demo in TSX\nDESCRIPTION: An empty TSX code block intended for a Switch demo. This is likely meant to be filled with an interactive example in the actual documentation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/switch/1.28.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Sheet Component with Props in TSX\nDESCRIPTION: This code snippet is a placeholder for demonstrating the Sheet component with various props and customizations. It's intended to be filled with an example implementation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/sheet/1.9.18.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx hero template=Sheet\n\n```\n```\n\n----------------------------------------\n\nTITLE: Compiled Web Output\nDESCRIPTION: Shows the compiled output for web platforms with optimized CSS classes.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/core/use-theme.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst _cn = ' _alignItems-1oszu61 _boxSizing-deolkf _display-6koalj _flexBasis-1mlwlqe _flexDirection-eqz5dr _flexShrink-1q142lx _transform-_sm_1exagq _transform-_sm0_1wpzndr _backgroundColor-_lg_no4z4g _backgroundColor-_lg0_1qoifqd _transform-_xl_gqa6p0'\n\nimport { YStack, useMedia, useTheme } from 'tamagui'\n\nconst App = () => {\n  return <div className={_cn} />\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n._alignItems-1oszu61 {\n  -ms-flex-align: stretch;\n  -webkit-align-items: stretch;\n  -webkit-box-align: stretch;\n  align-items: stretch;\n}\n._boxSizing-deolkf {\n  box-sizing: border-box;\n}\n._display-6koalj {\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n}\n._flexBasis-1mlwlqe {\n  -ms-flex-preferred-size: auto;\n  -webkit-flex-basis: auto;\n  flex-basis: auto;\n}\n._flexDirection-eqz5dr {\n  -ms-flex-direction: column;\n  -webkit-box-direction: normal;\n  -webkit-box-orient: vertical;\n  -webkit-flex-direction: column;\n  flex-direction: column;\n}\n._flexShrink-1q142lx {\n  -ms-flex-negative: 0;\n  -webkit-flex-shrink: 0;\n  flex-shrink: 0;\n}\n@media (max-width: 860px) {\n  :root:root ._transform-_sm_1exagq {\n    -webkit-transform: translateY(10px);\n    transform: translateY(10px);\n  }\n}\n@media not all and (max-width: 860px) {\n  :root:root ._transform-_sm0_1wpzndr {\n    -webkit-transform: translateY(0px);\n    transform: translateY(0px);\n  }\n}\n@media (min-width: 1120px) {\n  :root:root:root ._backgroundColor-_lg_no4z4g {\n    background-color: var(--red);\n  }\n}\n@media not all and (min-width: 1120px) {\n  :root:root:root ._backgroundColor-_lg0_1qoifqd {\n    background-color: var(--blue);\n  }\n}\n@media (min-width: 1280px) {\n  :root:root:root:root ._transform-_xl_gqa6p0 {\n    -webkit-transform: translateY(var(--space2));\n    transform: translateY(var(--space2));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hero Component Template for Group in Tamagui\nDESCRIPTION: Template code for the Group component demo in the documentation.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/data/docs/components/group/1.56.1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nhero template=Group\n```\n\n----------------------------------------\n\nTITLE: Generating Screenshots from Tamagui Kitchen-Sink App\nDESCRIPTION: Command to generate screenshots from the kitchen-sink application in the Tamagui project using yarn.\nSOURCE: https://github.com/tamagui/tamagui/blob/main/code/tamagui.dev/public/screenshots/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn screenshot\n```"
  }
]