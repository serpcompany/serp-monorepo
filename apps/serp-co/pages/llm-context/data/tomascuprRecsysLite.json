[
  {
    "owner": "tomascupr",
    "repo": "recsys-lite",
    "content": "TITLE: Training Recommendation Models in RecSys-Lite\nDESCRIPTION: Commands for training various recommendation models including ALS, item2vec, EASE-R, text embedding, and hybrid models, along with hyperparameter optimization.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Train ALS model\nrecsys-lite train als --db recsys.db --output model_artifacts/als\n\n# Train item2vec model\nrecsys-lite train item2vec --db recsys.db --output model_artifacts/item2vec\n\n# Train EASE-R model\nrecsys-lite train ease --db recsys.db --output model_artifacts/ease\n\n# Train text embedding model (requires sentence-transformers)\nrecsys-lite train text_embedding --db recsys.db --output model_artifacts/text_embedding\n\n# Create a hybrid model (combining ALS and text embedding)\nrecsys-lite train_hybrid model_artifacts/als model_artifacts/text_embedding --output model_artifacts/hybrid\n\n# Run hyperparameter optimization\nrecsys-lite optimize als --db recsys.db --trials 20 --metric ndcg@20\n```\n\n----------------------------------------\n\nTITLE: Creating RecSys-Lite Retraining Script\nDESCRIPTION: Bash script for creating a retraining routine for RecSys-Lite models, including error handling and model replacement logic.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncat > retrain.sh << 'EOF'\n#!/bin/bash\nDATE=$(date +%Y%m%d)\nMODEL_TYPE=\"als\"  # or bpr, item2vec, lightfm\nDB_PATH=\"data/recsys.db\"\nOUTPUT_DIR=\"model_artifacts/${MODEL_TYPE}_${DATE}\"\nCURRENT_DIR=\"model_artifacts/${MODEL_TYPE}\"\n\n# Train new model\nrecsys-lite train $MODEL_TYPE \\\n  --db $DB_PATH \\\n  --output $OUTPUT_DIR\n\n# If successful, replace current model\nif [ $? -eq 0 ]; then\n  cp -r $OUTPUT_DIR/* $CURRENT_DIR/\n  echo \"Model updated successfully\"\nelse\n  echo \"Training failed, keeping current model\"\nfi\nEOF\n\nchmod +x retrain.sh\n```\n\n----------------------------------------\n\nTITLE: Training Various RecSys-Lite Models\nDESCRIPTION: Commands for training different recommendation models supported by RecSys-Lite, including ALS, item2vec, LightFM, GRU4Rec, and EASE.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrecsys-lite train als \\\n  --db data/recsys.db \\\n  --output model_artifacts/als\n\nrecsys-lite train item2vec \\\n  --db data/recsys.db \\\n  --output model_artifacts/item2vec\n\nrecsys-lite train lightfm \\\n  --db data/recsys.db \\\n  --output model_artifacts/lightfm \\\n  --use-item-features\n\nrecsys-lite train gru4rec \\\n  --db data/recsys.db \\\n  --output model_artifacts/gru4rec\n\nrecsys-lite train ease \\\n  --db data/recsys.db \\\n  --output model_artifacts/ease\n```\n\n----------------------------------------\n\nTITLE: Data Ingestion with RecSys-Lite\nDESCRIPTION: Commands for ingesting data into DuckDB, including file-based streaming and message queue-based streaming options using RabbitMQ or Kafka.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Ingest data into DuckDB\nrecsys-lite ingest --events path/to/events.parquet --items path/to/items.csv --db recsys.db\n\n# File-based streaming: continuously append new *.parquet files that appear in a directory\nrecsys-lite stream-ingest data/incremental --db recsys.db --poll-interval 5\n\n# Message queue-based streaming (requires additional dependencies)\n# Install message queue dependencies: pip install recsys-lite[mq]\n\n# RabbitMQ streaming\nrecsys-lite queue-ingest rabbitmq --db recsys.db --rabbitmq-host localhost --rabbitmq-queue events\n\n# Kafka streaming\nrecsys-lite queue-ingest kafka --db recsys.db --kafka-servers localhost:9092 --kafka-topic events\n```\n\n----------------------------------------\n\nTITLE: Data Ingestion into DuckDB\nDESCRIPTION: Command to run the data ingestion process that creates a new DuckDB database, loads event data from Parquet, imports item data from CSV, and prepares it for recommendation training.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/DEMO.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Ingest the data into a new DuckDB database\npython simple_ingest.py\n```\n\n----------------------------------------\n\nTITLE: Configuring the Worker with Environment Variables in Bash\nDESCRIPTION: Instructions for configuring the update worker using environment variables and command-line parameters, including model directory, database path, interval, batch size, and thread count.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Using environment variables\nexport MODEL_DIR=model_artifacts/als\nexport DB_PATH=data/recsys.db\nexport WORKER_INTERVAL=60\nexport BATCH_SIZE=1000\nexport THREADS=8\n\n# Start with custom configuration\nrecsys-lite worker \\\n  --model-dir $MODEL_DIR \\\n  --db $DB_PATH \\\n  --interval $WORKER_INTERVAL \\\n  --batch-size $BATCH_SIZE \\\n  --threads $THREADS\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition in SQL\nDESCRIPTION: SQL schema definition for the core tables in RecSys-Lite: events table for user-item interactions with timestamp and quantity data, and items table for product metadata including category, brand, price and image URL.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/architecture.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE events (\n  user_id VARCHAR,\n  item_id VARCHAR,\n  ts BIGINT,\n  qty INTEGER\n);\n\nCREATE TABLE items (\n  item_id VARCHAR PRIMARY KEY,\n  category VARCHAR,\n  brand VARCHAR,\n  price DOUBLE,\n  img_url VARCHAR\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the FastAPI Recommendation Server\nDESCRIPTION: Command to launch the FastAPI server that trains an ALS model and provides recommendation endpoints on port 8000.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/DEMO.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Start the API server on port 8000\npython simple_api.py\n```\n\n----------------------------------------\n\nTITLE: Initial Data Load for RecSys-Lite\nDESCRIPTION: Commands for loading initial data into the DuckDB database for RecSys-Lite, using both Docker and direct CLI methods.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Using Docker\ndocker exec -it recsys-lite_api recsys-lite ingest \\\n  --events /data/events.parquet \\\n  --items /data/items.csv \\\n  --db /data/recsys.db\n\n# Direct CLI usage\nrecsys-lite ingest \\\n  --events data/events.parquet \\\n  --items data/items.csv \\\n  --db data/recsys.db\n```\n\n----------------------------------------\n\nTITLE: Starting RecSys-Lite System with Docker Compose\nDESCRIPTION: Command to start the RecSys-Lite system using Docker Compose, followed by a curl command to verify the deployment.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker/docker-compose.yml up -d\ncurl http://localhost:8000/health\n```\n\n----------------------------------------\n\nTITLE: Implementing a New Recommender Model in Python\nDESCRIPTION: Example implementation of a new recommender model class extending the BaseRecommender, including methods for fitting, recommending, finding similar items, and model persistence.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom recsys_lite.models.base import BaseRecommender\n\nclass MyNewModel(BaseRecommender):\n    def __init__(self, params=None):\n        super().__init__(params)\n        self.params = params or {}\n        \n    def fit(self, user_items):\n        # Implementation logic\n        pass\n        \n    def recommend(self, user_id, n=10):\n        # Implementation logic\n        pass\n        \n    def similar_items(self, item_id, n=10):\n        # Implementation logic\n        pass\n        \n    def save(self, path):\n        # Implementation logic\n        pass\n        \n    @classmethod\n    def load(cls, path):\n        # Implementation logic\n        pass\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with cURL in Bash\nDESCRIPTION: Examples of how to make HTTP requests to the RecSys-Lite API endpoints using cURL, including getting user recommendations, similar items, health checks, and performance metrics.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Get recommendations for a user\ncurl \"http://localhost:8000/recommend?user_id=user123&k=10\"\n\n# Get similar items\ncurl \"http://localhost:8000/similar-items?item_id=item456&k=5\"\n\n# Check API health\ncurl \"http://localhost:8000/health\"\n\n# Get performance metrics\ncurl \"http://localhost:8000/metrics\"\n```\n\n----------------------------------------\n\nTITLE: Real-time Streaming Ingest for RecSys-Lite\nDESCRIPTION: Command to run the built-in streaming ingest loop for RecSys-Lite, which watches a directory and appends new Parquet files to the events table.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrecsys-lite stream-ingest data/incremental --db data/recsys.db\n```\n\n----------------------------------------\n\nTITLE: Creating an Automated Backup Script in Bash\nDESCRIPTION: Script for automating the backup of RecSys-Lite database and model artifacts, including cleanup of old backups and setting up as a cron job.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncat > backup.sh << 'EOF'\n#!/bin/bash\nDATE=$(date +%Y%m%d)\nBACKUP_DIR=\"backups/$DATE\"\nmkdir -p $BACKUP_DIR\n\n# Backup database\ncp data/recsys.db $BACKUP_DIR/recsys_$DATE.db\n\n# Backup models\ntar -czf $BACKUP_DIR/models_$DATE.tar.gz model_artifacts/\n\n# Clean up old backups (keep 30 days)\nfind backups -type d -mtime +30 -exec rm -rf {} \\;\nEOF\n\nchmod +x backup.sh\n\n# Run every day at 1 AM\n0 1 * * * /path/to/backup.sh >> /path/to/backup.log 2>&1\n```\n\n----------------------------------------\n\nTITLE: Hyperparameter Optimization for RecSys-Lite ALS Model\nDESCRIPTION: Command to perform hyperparameter optimization for the ALS model in RecSys-Lite, using 20 trials and NDCG@20 as the optimization metric.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrecsys-lite optimize als \\\n  --db data/recsys.db \\\n  --trials 20 \\\n  --metric \"ndcg@20\" \\\n  --output model_artifacts/als_optimized\n```\n\n----------------------------------------\n\nTITLE: Monitoring Worker Status in Bash\nDESCRIPTION: Commands to check the status of the RecSys-Lite worker process and view its logs, useful for monitoring and troubleshooting.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Check worker process\nps aux | grep \"recsys-lite worker\"\n\n# View worker logs\ntail -f logs/worker.log\n```\n\n----------------------------------------\n\nTITLE: Inspecting RecSys-Lite Database Schema\nDESCRIPTION: SQL command to inspect the schema of the RecSys-Lite DuckDB database, showing tables and columns information.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM information_schema.tables; SELECT * FROM information_schema.columns WHERE table_name = 'events';\n```\n\n----------------------------------------\n\nTITLE: Evaluating RecSys-Lite Model Performance\nDESCRIPTION: Command to evaluate the performance of a trained RecSys-Lite model, outputting various performance metrics.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrecsys-lite evaluate \\\n  --model-dir model_artifacts/als \\\n  --db data/recsys.db\n```\n\n----------------------------------------\n\nTITLE: System Architecture Diagram in Mermaid\nDESCRIPTION: A comprehensive flow diagram visualizing the RecSys-Lite system architecture including client interactions, API services, data processing components, model training, and GDPR compliance features.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/architecture.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Client[Client Browser] --> Widget[React Widget]\n    Widget --> API[FastAPI Service]\n    API --> Faiss[Faiss Index]\n    API --> Models[Model Artifacts]\n    API --> DB[DuckDB]\n    UpdateWorker[Update Worker] --> DB\n    UpdateWorker --> Faiss\n    UpdateWorker --> Models\n    CLI[CLI Tool] --> DB\n    CLI --> TrainingJob[Training Job]\n    TrainingJob --> Models\n    TrainingJob --> Optuna[Optuna HPO]\n    \n    subgraph Data Flow\n        RawData[Raw Data] --> Ingestion\n        Ingestion --> DB\n        DB --> TrainingJob\n        TrainingJob --> Models\n        Models --> Faiss\n        NewData[New Data] --> UpdateWorker\n        UpdateWorker --> Recommendations\n        API --> Recommendations\n    end\n    \n    subgraph GDPR\n        GDPRRequests[GDPR Requests] --> GDPRService[GDPR Service]\n        GDPRService --> DB\n        GDPRService --> Models\n        GDPRService --> Faiss\n    end\n```\n\n----------------------------------------\n\nTITLE: Database Recovery Commands\nDESCRIPTION: Commands for database integrity check, repair, and backup restoration\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nduckdb data/recsys.db \"SELECT 1;\"\n\nduckdb_recovery data/recsys.db\n\ncp backups/20230315/recsys_20230315.db data/recsys.db\n```\n\n----------------------------------------\n\nTITLE: Retrieving Personalized Recommendations API Response\nDESCRIPTION: JSON response schema for the recommendations endpoint showing item details, pagination info, filtering results and reranking metrics.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": \"user123\",\n  \"recommendations\": [\n    {\n      \"item_id\": \"item456\",\n      \"score\": 0.95,\n      \"title\": \"Product Title\",\n      \"category\": \"Category\",\n      \"brand\": \"Brand\",\n      \"price\": 99.99,\n      \"img_url\": \"https://example.com/image.jpg\",\n      \"explanation\": \"Recommended based on your interests\"\n    },\n    {\n      \"item_id\": \"item789\",\n      \"score\": 0.87,\n      \"title\": \"Another Product\",\n      \"category\": \"Clothing\",\n      \"brand\": \"FashionCo\", \n      \"price\": 49.99,\n      \"img_url\": \"https://example.com/image2.jpg\",\n      \"explanation\": \"Adding variety with this Clothing item\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 120,\n    \"page\": 1,\n    \"page_size\": 10,\n    \"total_pages\": 12,\n    \"has_next\": true,\n    \"has_prev\": false\n  },\n  \"filter_info\": {\n    \"original_count\": 50,\n    \"filtered_count\": 25,\n    \"filters_applied\": {\n      \"categories\": [\"Electronics\", \"Tech\"],\n      \"min_price\": 10.0,\n      \"max_price\": 100.0\n    },\n    \"cache\": {\n      \"hit\": true,\n      \"ttl\": 300,\n      \"invalidated\": false\n    },\n    \"reranking\": {\n      \"strategy\": \"hybrid\",\n      \"applied\": true,\n      \"weights\": {\n        \"diversity\": 0.2,\n        \"novelty\": 0.2,\n        \"popularity\": 0.2,\n        \"relevance\": 0.4\n      },\n      \"category_distribution\": {\n        \"Electronics\": 4,\n        \"Clothing\": 2,\n        \"Home\": 3,\n        \"Books\": 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Update Worker for Incremental Model Updates\nDESCRIPTION: Command for starting the update worker for incremental model updates in RecSys-Lite.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Start update worker for incremental model updates\nrecsys-lite worker --model model_artifacts/als --db recsys.db --interval 60\n```\n\n----------------------------------------\n\nTITLE: Testing the Recommendation API\nDESCRIPTION: Command to run a test script that makes requests to the API and displays sample recommendations.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/DEMO.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Test the recommendation API\npython test_scripts/test_api_simple.py\n```\n\n----------------------------------------\n\nTITLE: Starting the Update Worker in Bash\nDESCRIPTION: Command to start the RecSys-Lite update worker that keeps recommendations fresh by incrementally updating models with new data, specifying model directory, database path, and update interval.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Start worker\nrecsys-lite worker \\\n  --model-dir model_artifacts/als \\\n  --db data/recsys.db \\\n  --interval 60\n```\n\n----------------------------------------\n\nTITLE: Installing RecSys-Lite Using Various Methods\nDESCRIPTION: Installation instructions for RecSys-Lite using git clone, virtual environment setup, and installation via Poetry, pip, or Docker.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository\ngit clone https://github.com/tomascupr/recsys-lite.git\ncd recsys-lite\n\n# Create a virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install Python dependencies using Poetry (recommended)\npoetry install\n\n# Or install with LLM support\npoetry install -E llm\n\n# Or install using pip\npip install -e .\n\n# Or with LLM support\npip install -e \".[llm]\"\n\n# Or use Docker\ndocker compose -f docker/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Data Quality Assessment\nDESCRIPTION: SQL queries to check event, user, and item counts in the database\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nduckdb data/recsys.db \"SELECT COUNT(*) FROM events;\"\n\nduckdb data/recsys.db \"SELECT COUNT(DISTINCT user_id) FROM events; SELECT COUNT(DISTINCT item_id) FROM events;\"\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment of RecSys-Lite\nDESCRIPTION: Steps for manually deploying RecSys-Lite, including creating a virtual environment, installing dependencies, and starting the API service and update worker.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate\npip install -e .\nmkdir -p data/incremental model_artifacts/{als,bpr,item2vec,lightfm}\nrecsys-lite serve --model-dir model_artifacts/als --port 8000\n\n# In a separate terminal\nrecsys-lite worker --model-dir model_artifacts/als --db data/recsys.db --interval 60\n```\n\n----------------------------------------\n\nTITLE: Checking Health and Metrics in Bash\nDESCRIPTION: Commands to check the health status of the RecSys-Lite API and retrieve system metrics using cURL.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# Check API health\ncurl \"http://localhost:8000/health\"\n\n# Get system metrics\ncurl \"http://localhost:8000/metrics\"\n```\n\n----------------------------------------\n\nTITLE: Similar Items API Request Example\nDESCRIPTION: Example curl command to request items similar to a specific item, with a parameter to specify the number of similar items to return.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/DEMO.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:8000/similar-items?item_id=item_456&k=3\"\n```\n\n----------------------------------------\n\nTITLE: Starting API Service in RecSys-Lite\nDESCRIPTION: Command for starting the API service to serve recommendation models.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Start API service\nrecsys-lite serve --model model_artifacts/als --port 8000\n```\n\n----------------------------------------\n\nTITLE: Database Health Check Commands\nDESCRIPTION: SQL queries to verify database connection and check event counts\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nduckdb data/recsys.db \"SELECT COUNT(*) FROM events;\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nls -la model_artifacts/als/\n```\n\n----------------------------------------\n\nTITLE: Memory Optimization Commands\nDESCRIPTION: Commands to reduce memory usage through model size reduction and data sampling\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nrecsys-lite train als \\\n  --db data/recsys.db \\\n  --output model_artifacts/als \\\n  --params '{\"factors\": 50}'\n\nexport BATCH_SIZE=200\n\nrecsys-lite train als \\\n  --db data/recsys.db \\\n  --output model_artifacts/als \\\n  --sample-rate 0.5\n```\n\n----------------------------------------\n\nTITLE: Defining Items Data Structure in CSV Format\nDESCRIPTION: Specifies the expected format for items data stored in CSV, including item_id, category, brand, price, and image URL fields.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n┌────────────┬──────────────┬────────────┬───────┬───────────────────────────────┐\n│  item_id   │   category   │   brand    │ price │           img_url             │\n├────────────┼──────────────┼────────────┼───────┼───────────────────────────────┤\n│ item_67890 │ Electronics  │ TechBrand  │ 99.99 │ https://example.com/img1.jpg  │\n│ item_24680 │ Clothing     │ FashionCo  │ 49.99 │ https://example.com/img2.jpg  │\n│ item_13579 │ Home         │ HomeMakers │ 29.99 │ https://example.com/img3.jpg  │\n└────────────┴──────────────┴────────────┴───────┴───────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Size in Bash\nDESCRIPTION: Command to train an ALS model with specific factor count to balance model size and quality based on catalog size.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# Configure model size\nrecsys-lite train als \\\n  --db data/recsys.db \\\n  --output model_artifacts/als \\\n  --params '{\"factors\": 150}'\n```\n\n----------------------------------------\n\nTITLE: Similar Items API Response Format\nDESCRIPTION: Sample JSON response format for similar items, showing a list of items with their similarity scores to the requested item.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/DEMO.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"item_id\": \"item_789\", \"score\": 0.92},\n  {\"item_id\": \"item_234\", \"score\": 0.88},\n  {\"item_id\": \"item_567\", \"score\": 0.75}\n]\n```\n\n----------------------------------------\n\nTITLE: Memory Optimization Configuration in Bash\nDESCRIPTION: Environment variable settings to reduce memory usage for smaller deployments of RecSys-Lite by adjusting FAISS parameters, batch size, and cache size.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# Reduce memory usage for smaller deployments\nexport FAISS_NPROBE=5\nexport BATCH_SIZE=500\nexport CACHE_SIZE=100\n```\n\n----------------------------------------\n\nTITLE: Model Evaluation and Training\nDESCRIPTION: Commands to evaluate model performance and train alternative models\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nrecsys-lite evaluate \\\n  --model-dir model_artifacts/als \\\n  --db data/recsys.db\n```\n\nLANGUAGE: bash\nCODE:\n```\nrecsys-lite train bpr \\\n  --db data/recsys.db \\\n  --output model_artifacts/bpr\n```\n\n----------------------------------------\n\nTITLE: Exporting User Data for GDPR Compliance in Bash\nDESCRIPTION: Command to export all data associated with a specific user for GDPR compliance, creating a JSON file with the user's interactions and related item data.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n# Export a user's data\nrecsys-lite gdpr export-user \\\n  --user-id USER_ID \\\n  --db data/recsys.db \\\n  --output exports/user_USER_ID.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for RecSys-Lite\nDESCRIPTION: Creating a .env file with configuration settings for RecSys-Lite, including model type, API port, worker interval, and log level.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat > .env << EOL\nMODEL_TYPE=als\nAPI_PORT=8000\nWORKER_INTERVAL=60\nLOG_LEVEL=INFO\nEOL\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Commands\nDESCRIPTION: Bash commands for deploying the recommendation system using Docker containers.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Create directories for persistence\nmkdir -p data/incremental model_artifacts\n\n# Start the complete system\ndocker compose -f docker/docker-compose.yml up -d\n\n# Run tests\ndocker compose -f docker/docker-compose.test.yml up\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Recommendations\nDESCRIPTION: Example of the JSON response format returned by the recommendation API, showing the structure with user ID and an array of recommended items that includes scores and metadata.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": \"user123\",\n  \"recommendations\": [\n    {\n      \"item_id\": \"item789\",\n      \"score\": 0.85,\n      \"title\": \"Product Name\",\n      \"category\": \"Electronics\",\n      \"brand\": \"BrandName\",\n      \"price\": 99.99,\n      \"img_url\": \"https://example.com/images/item789.jpg\"\n    },\n    // Additional items...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Code Quality Checks in Bash\nDESCRIPTION: Commands for running tests, coverage analysis, linting, and type checking for the RecSys-Lite project.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\npytest\n\n# Run a specific test\npytest tests/test_models.py::test_als_model\n\n# Run with coverage\npytest --cov=src tests/\n\n# Run linting\nruff .\n\n# Run type checking\nmypy .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for RecSys-Lite in Bash\nDESCRIPTION: Commands for building the main RecSys-Lite application image and the worker image used for updates.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build main image\ndocker build -t recsys-lite:latest -f Dockerfile .\n\n# Build worker image\ndocker build -t recsys-lite-worker:latest -f Dockerfile.worker .\n```\n\n----------------------------------------\n\nTITLE: User Recommendations API Request Example\nDESCRIPTION: Example curl command to request recommendations for a specific user, with a parameter to specify the number of recommendations to return.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/DEMO.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:8000/recommend?user_id=user_123&k=5\"\n```\n\n----------------------------------------\n\nTITLE: Configuring API with Environment Variables in Bash\nDESCRIPTION: Instructions for configuring the RecSys-Lite API using environment variables or a .env file, including model directory, database path, logging level, and cache settings.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Update API configuration with environment variables\nexport MODEL_DIR=model_artifacts/als\nexport DB_PATH=data/recsys.db\nexport LOG_LEVEL=INFO\nexport MAX_RECOMMENDATIONS=50\nexport CACHE_EXPIRY=300\n\n# Or create a .env file\ncat > .env << EOL\nMODEL_DIR=model_artifacts/als\nDB_PATH=data/recsys.db\nLOG_LEVEL=INFO\nMAX_RECOMMENDATIONS=50\nCACHE_EXPIRY=300\nEOL\n```\n\n----------------------------------------\n\nTITLE: Similar Items API Response\nDESCRIPTION: JSON response schema for the similar items endpoint showing related items with similarity scores and filtering details.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": \"item123\",\n  \"recommendations\": [\n    {\n      \"item_id\": \"item789\",\n      \"score\": 0.92,\n      \"title\": \"Similar Product\",\n      \"category\": \"Category\",\n      \"brand\": \"Brand\",\n      \"price\": 79.99,\n      \"img_url\": \"https://example.com/similar.jpg\",\n      \"explanation\": \"Adding variety with this Category item\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 42,\n    \"page\": 1,\n    \"page_size\": 10,\n    \"total_pages\": 5,\n    \"has_next\": true,\n    \"has_prev\": false\n  },\n  \"filter_info\": {\n    \"original_count\": 30,\n    \"filtered_count\": 15,\n    \"filters_applied\": {\n      \"brands\": [\"BrandName\"],\n      \"excluded_items\": 2\n    },\n    \"cache\": {\n      \"hit\": true,\n      \"ttl\": 300,\n      \"invalidated\": false\n    },\n    \"reranking\": {\n      \"strategy\": \"diversity\",\n      \"applied\": true,\n      \"weights\": {\n        \"diversity\": 0.3,\n        \"novelty\": 0.1,\n        \"popularity\": 0.2,\n        \"relevance\": 0.4\n      },\n      \"category_distribution\": {\n        \"Category\": 3,\n        \"OtherCategory\": 2,\n        \"ThirdCategory\": 5\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Recommendation Widget Implementation\nDESCRIPTION: React component implementation for displaying recommendations in a customizable carousel interface.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RecommendationCarousel } from 'recsys-lite-widget';\n\n<RecommendationCarousel\n  apiUrl=\"https://your-api-url\"\n  userId=\"user123\"\n  count={10}\n  title=\"Recommended For You\"\n  className=\"custom-container\"\n  containerClassName=\"carousel-inner\"\n  cardClassName=\"product-card\"\n  onItemClick={(item) => console.log('Clicked item:', item)}\n  fetchItemDetails={async (itemIds) => {\n    // Optional: Fetch additional item details\n    const response = await fetch(`/api/items?ids=${itemIds.join(',')}`);    return await response.json();\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: User Recommendations API Response Format\nDESCRIPTION: Sample JSON response format for user recommendations, showing the user_id and a list of recommended items with their scores.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/DEMO.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": \"user_123\",\n  \"recommendations\": [\n    {\"item_id\": \"item_456\", \"score\": 0.85},\n    {\"item_id\": \"item_789\", \"score\": 0.72},\n    {\"item_id\": \"item_234\", \"score\": 0.65},\n    {\"item_id\": \"item_567\", \"score\": 0.58},\n    {\"item_id\": \"item_890\", \"score\": 0.51}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using RecommendationCarousel Component in React\nDESCRIPTION: Example of how to import and use the RecommendationCarousel component in a React application. It demonstrates importing styles and setting up the component with basic props.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/widget/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RecommendationCarousel } from 'recsys-lite-widget';\n\n// Import styles (required)\nimport 'recsys-lite-widget/dist/style.css';\n\nfunction App() {\n  return (\n    <div className=\"container mx-auto p-4\">\n      <RecommendationCarousel \n        apiUrl=\"https://your-recsys-lite-api.com\"\n        userId=\"user123\"\n        count={5}\n        title=\"Recommended For You\"\n        onItemClick={(item) => console.log('Clicked item:', item)}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Metrics API Response\nDESCRIPTION: JSON response schema for the metrics endpoint showing service performance statistics.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uptime_seconds\": 3600,\n  \"request_count\": 1500,\n  \"recommendation_count\": 15000,\n  \"error_count\": 5,\n  \"recommendations_per_second\": 4.16,\n  \"cache_hit_ratio\": 0.85\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Different RecSys-Lite Environments in Bash\nDESCRIPTION: Commands for launching different Docker Compose environments (development, production, and test) for the RecSys-Lite recommendation system.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Development environment\ndocker compose -f docker-compose.yml up -d\n\n# Production environment\ndocker compose -f docker-compose.prod.yml up -d\n\n# Test environment\ndocker compose -f docker-compose.test.yml up\n```\n\n----------------------------------------\n\nTITLE: Defining Events Data Structure in Parquet Format\nDESCRIPTION: Specifies the expected format for events data stored in Parquet, including user_id, item_id, timestamp, and quantity fields.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n┌────────────┬────────────┬────────────┬──────┐\n│  user_id   │  item_id   │     ts     │ qty  │\n├────────────┼────────────┼────────────┼──────┤\n│ user_12345 │ item_67890 │ 1626533119 │ 1    │\n│ user_12345 │ item_24680 │ 1626533135 │ 2    │\n│ user_67890 │ item_13579 │ 1626533257 │ 1    │\n└────────────┴────────────┴────────────┴──────┘\n```\n\n----------------------------------------\n\nTITLE: Cloning RecSys-Lite Repository and Creating Data Directories\nDESCRIPTION: Instructions for cloning the RecSys-Lite repository and creating necessary directories for data persistence.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tomascupr/recsys-lite.git\ncd recsys-lite\nmkdir -p data/incremental model_artifacts/{als,bpr,item2vec,lightfm}\n```\n\n----------------------------------------\n\nTITLE: API Service Management\nDESCRIPTION: Commands to restart the RecSys-Lite API service\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nkill $(pgrep -f \"recsys-lite serve\")\nrecsys-lite serve --model-dir model_artifacts/als --port 8000\n```\n\n----------------------------------------\n\nTITLE: Checking API Container Status\nDESCRIPTION: Commands to verify the status of the RecSys-Lite container and inspect API logs\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps | grep recsys-lite\n```\n\nLANGUAGE: bash\nCODE:\n```\ntail -f logs/api.log\n```\n\n----------------------------------------\n\nTITLE: Customizing RecommendationCarousel with CSS Classes\nDESCRIPTION: Example of customizing the RecommendationCarousel component using CSS classes. This demonstrates how to apply custom styling to the component and its sub-elements.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/widget/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<RecommendationCarousel \n  apiUrl=\"https://your-recsys-lite-api.com\"\n  userId=\"user123\"\n  className=\"bg-gray-100 p-4 rounded-lg\"\n  containerClassName=\"gap-4\"\n  cardClassName=\"border-blue-500 hover:shadow-lg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Card Component using Exposed UI Components\nDESCRIPTION: Example of creating a custom card component using UI components exposed by the RecSys-Lite Widget. This demonstrates how to build custom UI elements using the library's components.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/widget/README.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardContent, CardHeader, Button } from 'recsys-lite-widget';\n\nfunction CustomCard() {\n  return (\n    <Card>\n      <CardHeader>Custom Card</CardHeader>\n      <CardContent>\n        <p>Your custom content</p>\n        <Button variant=\"outline\">Click me</Button>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Item Details Fetching for RecommendationCarousel\nDESCRIPTION: Advanced usage example showing how to implement a custom function for fetching additional item details. This function is passed as a prop to the RecommendationCarousel component.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/widget/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<RecommendationCarousel \n  apiUrl=\"https://your-recsys-lite-api.com\"\n  userId=\"user123\"\n  fetchItemDetails={async (itemIds) => {\n    const response = await fetch(`https://your-api.com/items?ids=${itemIds.join(',')}`);\n    const data = await response.json();\n    return data.items.reduce((acc, item) => {\n      acc[item.id] = item;\n      return acc;\n    }, {});\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Recommendation Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of a recommendation item. This interface outlines the expected properties for each recommendation, including required and optional fields.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/widget/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Recommendation {\n  item_id: string;     // Required: Unique ID for the item\n  score: number;       // Required: Recommendation score/confidence\n  title?: string;      // Optional: Item title\n  image_url?: string;  // Optional: URL to item image\n  price?: number;      // Optional: Item price\n  category?: string;   // Optional: Item category\n  brand?: string;      // Optional: Item brand\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating React Widget for Recommendations\nDESCRIPTION: Instructions for installing and using the RecSys-Lite widget in a React application to display recommendations.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install the widget package\nnpm install recsys-lite-widget\n\n# Import and use in your React application\nimport { RecommendationCarousel } from 'recsys-lite-widget';\n\nfunction App() {\n  return (\n    <RecommendationCarousel\n      apiUrl=\"https://your-api-url\"\n      userId=\"user123\"\n      count={5} \n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Health Check API Response\nDESCRIPTION: JSON response schema for the health check endpoint showing service status and version information.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ok\",\n  \"version\": \"0.2.0\",\n  \"model_type\": \"als\",\n  \"uptime_seconds\": 3600\n}\n```\n\n----------------------------------------\n\nTITLE: Development Commands for RecSys-Lite Widget Project\nDESCRIPTION: A set of npm commands for development, testing, and building the RecSys-Lite Widget project. These commands cover installing dependencies, running development servers, executing tests, and building for production.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/widget/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Run Storybook\nnpm run storybook\n\n# Run tests\nnpm run test\n\n# Run tests with coverage\nnpm run test:coverage\n\n# Build for production\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: CPU Optimization Configuration in Bash\nDESCRIPTION: Environment variable settings to optimize RecSys-Lite for multi-core systems by configuring thread count and enabling thread usage in FAISS.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Optimize for multi-core systems\nexport THREADS=8\nexport FAISS_USE_THREADS=1\n```\n\n----------------------------------------\n\nTITLE: Development Commands for RecSys-Lite\nDESCRIPTION: Commands for development tasks such as installing dependencies, running linting, and executing tests.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Install development dependencies\npoetry install\n\n# Run linting\npoetry run ruff .\n\n# Run tests\npoetry run pytest\n```\n\n----------------------------------------\n\nTITLE: Configuring FAISS Index in Bash\nDESCRIPTION: Environment variable settings to configure the FAISS similarity search index for better performance, balancing speed and accuracy.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# Configure Faiss index for better performance\nexport FAISS_NLIST=100  # Number of clusters (increase for larger catalogs)\nexport FAISS_NPROBE=10  # Number of clusters to search (tradeoff between speed and accuracy)\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data with Python\nDESCRIPTION: Script command to generate synthetic user-item interaction data and item metadata. Creates events.parquet and items.csv files in the sample_data directory.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/DEMO.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Generate synthetic user-item interaction data and item metadata\npython data/sample_data/create_sample_data.py\n```\n\n----------------------------------------\n\nTITLE: Viewing Logs in Bash\nDESCRIPTION: Commands to view the API and worker logs for monitoring and troubleshooting the RecSys-Lite system.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# View API logs\ntail -f logs/api.log\n\n# View worker logs\ntail -f logs/worker.log\n```\n\n----------------------------------------\n\nTITLE: Widget CSS Styling\nDESCRIPTION: CSS styles for customizing the appearance of the recommendation widget components.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n/* Example custom styling */\n.custom-container {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.carousel-inner {\n  padding: 10px 0;\n}\n\n.product-card {\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  transition: transform 0.3s ease;\n}\n\n.product-card:hover {\n  transform: translateY(-5px);\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Configuration Response JSON Format\nDESCRIPTION: Example JSON response format for the cache configuration API endpoint showing cache statistics including size, hits, misses, and hit rate.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"cache_enabled\": true,\n  \"default_ttl\": 300,\n  \"recommendation_cache\": {\n    \"size\": 10,\n    \"hits\": 45,\n    \"misses\": 12,\n    \"hit_rate\": 0.789\n  },\n  \"similar_items_cache\": {\n    \"size\": 5,\n    \"hits\": 23,\n    \"misses\": 8,\n    \"hit_rate\": 0.742\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Test Recommendations for Development in RecommendationCarousel\nDESCRIPTION: Example of using mock data for testing and development purposes. This demonstrates how to bypass API calls and use predefined test recommendations.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/widget/README.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<RecommendationCarousel \n  apiUrl=\"https://your-recsys-lite-api.com\"\n  userId=\"user123\"\n  testRecommendations={[\n    {\n      item_id: 'item1',\n      score: 0.95,\n      title: 'Wireless Headphones',\n      price: 89.99\n    },\n    // More items...\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Metrics Response Example in JSON\nDESCRIPTION: Example JSON response from the metrics endpoint, showing various performance statistics including uptime, request counts, and cache efficiency.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uptime_seconds\": 3600,\n  \"request_count\": 1500,\n  \"recommendation_count\": 15000,\n  \"error_count\": 5,\n  \"recommendations_per_second\": 4.16,\n  \"cache_hit_ratio\": 0.85\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting the Worker in Bash\nDESCRIPTION: Series of commands to find, stop, and restart the RecSys-Lite worker process with specific configuration parameters.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Find worker process\nps aux | grep \"recsys-lite worker\"\n\n# Kill worker process\nkill <PID>\n\n# Restart worker\nrecsys-lite worker \\\n  --model-dir model_artifacts/als \\\n  --db data/recsys.db \\\n  --interval 60\n```\n\n----------------------------------------\n\nTITLE: Worker Management Commands\nDESCRIPTION: Commands to check and restart the update worker process\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nps aux | grep \"recsys-lite worker\"\n\nkill $(pgrep -f \"recsys-lite worker\")\nrecsys-lite worker --model-dir model_artifacts/als --db data/recsys.db --interval 60\n```\n\n----------------------------------------\n\nTITLE: Installing RecSys-Lite Widget using npm\nDESCRIPTION: Command to install the RecSys-Lite Widget package using npm. This is the first step to integrate the widget into a React application.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/widget/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install recsys-lite-widget\n```\n\n----------------------------------------\n\nTITLE: Database Backup in Bash\nDESCRIPTION: Command to create a backup of the RecSys-Lite DuckDB database with timestamp-based directory and filename.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# Backup DuckDB database\nmkdir -p backups/$(date +%Y%m%d)\ncp data/recsys.db backups/$(date +%Y%m%d)/recsys_$(date +%Y%m%d).db\n```\n\n----------------------------------------\n\nTITLE: Model Artifacts Backup in Bash\nDESCRIPTION: Command to create a compressed backup of RecSys-Lite model artifacts with timestamp-based directory and filename.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n# Backup model artifacts\nmkdir -p backups/$(date +%Y%m%d)\ntar -czf backups/$(date +%Y%m%d)/models_$(date +%Y%m%d).tar.gz model_artifacts/\n```\n\n----------------------------------------\n\nTITLE: Prometheus Integration Configuration in YAML\nDESCRIPTION: YAML configuration for integrating RecSys-Lite metrics with Prometheus monitoring system, including scrape interval and endpoint settings.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: 'recsys-lite'\n    scrape_interval: 15s\n    static_configs:\n      - targets: ['your-server:8000']\n    metrics_path: '/metrics'\n```\n\n----------------------------------------\n\nTITLE: Recovery Procedure in Bash\nDESCRIPTION: Commands for performing a recovery of RecSys-Lite database and model artifacts from backups, including creating safety backups of current data.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# Choose backup date\nBACKUP_DATE=20230315\n\n# Restore database\ncp backups/$BACKUP_DATE/recsys_$BACKUP_DATE.db data/recsys.db\n\n# Restore models\nmkdir -p model_artifacts_backup  # Backup current models just in case\nmv model_artifacts model_artifacts_backup\nmkdir -p model_artifacts\ntar -xzf backups/$BACKUP_DATE/models_$BACKUP_DATE.tar.gz -C .\n\n# Restart services\n# (Restart API and worker processes)\n```\n\n----------------------------------------\n\nTITLE: Setting Data Retention Policy in Bash\nDESCRIPTION: Command to configure the data retention period for RecSys-Lite, which will automatically identify and remove events older than the specified period.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n# Set 6-month retention policy (180 days)\nrecsys-lite configure \\\n  --retention-days 180\n```\n\n----------------------------------------\n\nTITLE: Docker Volume Configuration\nDESCRIPTION: YAML configuration for Docker volume mappings to enable data persistence.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - ./data:/data                         # Database and event data\n  - ./model_artifacts:/app/model_artifacts  # Trained models\n  - ./logs:/var/log                       # Log files\n```\n\n----------------------------------------\n\nTITLE: Deleting User Data for GDPR Compliance in Bash\nDESCRIPTION: Command to delete a user's data from the RecSys-Lite system for GDPR compliance, removing raw events and marking the user for removal in models.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a user's data\nrecsys-lite gdpr delete-user \\\n  --user-id USER_ID \\\n  --db data/recsys.db\n```\n\n----------------------------------------\n\nTITLE: User Data Export Example in JSON\nDESCRIPTION: Example JSON format of exported user data for GDPR compliance, showing user events with timestamps and quantities, along with related item metadata.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": \"user123\",\n  \"events\": [\n    {\n      \"item_id\": \"item456\",\n      \"timestamp\": 1626533119,\n      \"quantity\": 1\n    },\n    {\n      \"item_id\": \"item789\",\n      \"timestamp\": 1626533257,\n      \"quantity\": 2\n    }\n  ],\n  \"items\": [\n    {\n      \"item_id\": \"item456\",\n      \"category\": \"Electronics\",\n      \"brand\": \"TechBrand\",\n      \"price\": 99.99,\n      \"img_url\": \"https://example.com/images/item456.jpg\"\n    },\n    {\n      \"item_id\": \"item789\",\n      \"category\": \"Clothing\",\n      \"brand\": \"FashionCo\",\n      \"price\": 49.99,\n      \"img_url\": \"https://example.com/images/item789.jpg\"\n    }\n  ],\n  \"export_timestamp\": 1689245631,\n  \"export_date\": \"2023-07-13T12:00:31Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing GDPR Audit Log in Bash\nDESCRIPTION: Command to view the GDPR-related operations log which maintains an audit trail of data exports and deletions for compliance purposes.\nSOURCE: https://github.com/tomascupr/recsys-lite/blob/main/docs/runbook.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n# View GDPR audit log\ntail -f logs/gdpr.log\n```"
  }
]