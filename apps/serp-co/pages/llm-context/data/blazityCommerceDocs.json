[
  {
    "owner": "blazity",
    "repo": "commerce-docs",
    "content": "TITLE: Implementing A/B Test in a Page Component (Typescript)\nDESCRIPTION: This code snippet demonstrates how to implement A/B testing within a page component. It uses the `bucket` parameter to dynamically display different content based on the assigned bucket. The example shows how to vary the hero section title based on the `bucket` value.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/ab-tests.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Homepage({ params: { bucket } }) {\n  const heroTitles = {\n    a: \"Your daily trendsetting deals\",\n    b: \"Your daily top deals\",\n  }\n\n  return <HeroSection title={heroTitles[bucket]} />\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Metadata Generation Next.js Typescript\nDESCRIPTION: This snippet demonstrates how to dynamically generate metadata in a Next.js application using an async function called `generateMetadata`. It fetches page data based on the route `slug` parameter using `getPage` and constructs the metadata object with properties like `title`, `description`, `referrer`, `creator`, and `publisher`. It is intended to fetch data or perform dynamic operations before returning the metadata.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/seo.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function generateMetadata({ params: { slug } }: { params: { slug: string } }): Promise<Metadata> {\n  const page = await getPage(slug)\n\n  return {\n    title: page?.seo?.title || page?.title,\n    description: page?.seo?.description || page?.bodySummary,\n    referrer: \"origin-when-cross-origin\",\n    creator: \"Blazity\",\n    publisher: \"Blazity\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with FilterBuilder for Algolia in TypeScript\nDESCRIPTION: This code snippet showcases how to employ the FilterBuilder class to create a complex filter expression tailored for Algolia. It combines methods to specify filter conditions based on price and category, utilizing comparison and logical operators. The resulting filter expression is designed to retrieve items with a price exceeding 100 and categorized as either 'Electronics' or 'Computers'.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/filtering.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = new FilterBuilder()\n  .where(\"price\", 100, ComparisonOperators.GreaterThan)\n  .and()\n  .group((sub) =>\n    sub.where(\"category\", \"Electronics\").or().where(\"category\", \"Computers\")\n  )\n  .build();\n\n// This will generate the following filter expression:\n// price > 100 AND (category:\"Electronics\" OR category:\"Computers\")\n```\n\n----------------------------------------\n\nTITLE: Filtering with FilterBuilder for Meilisearch in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the FilterBuilder class to construct a complex filter expression for Meilisearch. It chains methods to define filter criteria based on price and category, using comparison and logical operators. The resulting filter expression targets items with a price greater than 100 and belonging to either the 'Electronics' or 'Computers' category.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/filtering.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = new FilterBuilder()\n  .where(\"price\", ComparisonOperators.GreaterThan, 100)\n  .and()\n  .group((sub) =>\n    sub\n      .where(\"category\", \"=\", \"Electronics\")\n      .or()\n      .where(\"category\", \"=\", \"Computers\")\n  )\n  .build();\n\n// This will generate the following filter expression:\n// price > 100 AND (category = \"Electronics\" OR category = \"Computers\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Template for OpenAI Embedder\nDESCRIPTION: This snippet shows the configuration required for the document template. It defines which information from each document is sent to the AI model for generating embeddings. The template is designed to extract and format product information for semantic analysis.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/ai-features/vector-search.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nA product titled '{{doc.title}}' worth '{{doc.minPrice}}' , whose description starts with {{doc.description|truncatewords: 20}}\n```\n\n----------------------------------------\n\nTITLE: Redirect Configuration Example JSON\nDESCRIPTION: This JSON snippet represents the structure of the `redirects.json` file used to configure SEO redirects. Each key is the old URL, and the value is an object containing the `destination` URL and a `permanent` flag (true for 301 redirects, false for 307).  This file is located at `[starter]/lib/redirects/redirects.json`.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/redirects.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/old\": {\n    \"destination\": \"/new\",\n    \"permanent\": true\n  },\n  \"/blog/post-old\": {\n    \"destination\": \"/blog/post-new\",\n    \"permanent\": true\n  },\n  \"/external\": {\n    \"destination\": \"https://example.com\",\n    \"permanent\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing Routes in middleware.ts (Typescript)\nDESCRIPTION: This code snippet demonstrates how to configure routes for A/B testing by modifying the `ROUTES` constant in `middleware.ts`.  It defines the page, cookie name, and available buckets for each route to be tested. Required dependencies include the `Route` and `BUCKETS` types.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/ab-tests.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ROUTES: Record<string, Route | undefined> = {\n  \"/\": {\n    page: \"/home\",\n    cookie: \"bucket-home\",\n    buckets: BUCKETS.HOME,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Image Captioning and Setting API Key in .env\nDESCRIPTION: This snippet shows how to enable the AI image captioning feature by setting the `IS_IMAGE_CAPTIONING_ENABLED` environment variable to `true` and providing the `REPLICATE_API_KEY` in the `.env` file.  The `REPLICATE_API_KEY` is required for authentication with the Replicate API.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/ai-features/image-captioning.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIS_IMAGE_CAPTIONING_ENABLED=true\nREPLICATE_API_KEY=\"your api key\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Google Analytics via .env\nDESCRIPTION: This snippet shows how to enable Google Analytics integration by setting the `IS_GTM_ENABLED` feature flag to `true` in the `.env` file. This configuration activates the Google Analytics tracking code on the Enterprise Commerce website, allowing for user behavior and traffic data analysis.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/analytics.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIS_GTM_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Categories Data Structure\nDESCRIPTION: This JSON object illustrates the data structure required to represent hierarchical categories when pushing products to a search solution.  Each level (`lvl0`, `lvl1`, `lvl2`) represents a level in the category hierarchy, with values indicating the category path.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/hierarchical-categories.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hierarchicalCategories\": {\n        \"lvl0\": [\"fashion\"],\n        \"lvl1\": [\"fashion > women\", \"fashion > men\"],\n        \"lvl2\": [\"fashion > women > skirts\", \"fashion > women > dresses\", \"fashion > men > shorts\", \"fashion > men > blazers-and-suits\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling/Enabling Vercel Analytics via .env\nDESCRIPTION: This snippet shows how to disable or enable Vercel Analytics by setting the `IS_VERCEL_ANALYTICS_ENABLED` feature flag in the `.env` file. Setting it to `false` disables Vercel Analytics, while `true` enables it. This configuration directly affects whether Vercel Analytics tracking is active on the Enterprise Commerce platform.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/analytics.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIS_VERCEL_ANALYTICS_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Products Filterable Attributes\nDESCRIPTION: Defines the filterable attributes for the Meilisearch products index.  These attributes are used for filtering and searching the storefront properly.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/providers.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n\"collections\",\n\"collections.handle\",\n\"collections.id\",\n\"flatOptions\",\n\"handle\",\n\"minPrice\",\n\"tags\",\n\"variants.availableForSale\",\n\"vendor\",\n\"hierarchicalCategories\",\n\"hierarchicalCategories.lvl0\",\n\"hierarchicalCategories.lvl1\",\n\"hierarchicalCategories.lvl2\",\n\"avgRating\"\n]\n```\n\n----------------------------------------\n\nTITLE: Algolia Products Index Attributes\nDESCRIPTION: Defines the attributes for faceting in the Algolia products index. These attributes are required for filtering and searching the storefront properly.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/providers.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\"collections.handle\",\n\"collections.id\",\n\"flatOptions.color\",\n\"handle\",\n\"minPrice\",\n\"tags\",\n\"variants.availableForSale\",\n\"vendor\",\n\"hierarchicalCategories.lvl0\",\n\"hierarchicalCategories.lvl1\",\n\"hierarchicalCategories.lvl2\",\n\"avgRating\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Commerce Project with CLI\nDESCRIPTION: These commands demonstrate how to create a new Enterprise Commerce project using the provided CLI tool, using either yarn or npm.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/setup.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn create commerce\n# or\nnpm create commerce\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Keys\nDESCRIPTION: Lists the Meilisearch keys required to integrate with the platform. These keys are required for index names, admin key and host url.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/providers.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nMEILISEARCH_PRODUCTS_INDEX\nMEILISEARCH_CATEGORIES_INDEX\nMEILISEARCH_ADMIN_KEY\nMEILISEARCH_HOST\nMEILISEARCH_REVIEWS_INDEX - only if you're using reviews feature\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Products Sortable Attributes\nDESCRIPTION: Defines the sortable attributes for the Meilisearch products index. These attributes can be used to sort the results in the storefront.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/providers.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n\"minPrice\",\n\"updatedAtTimestamp\",\n\"avgRating\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Categories Filterable Attributes\nDESCRIPTION: Defines the filterable attributes for the Meilisearch categories index.  These attributes can be used to filter the results in the storefront.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/providers.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n\"handle\",\n\"id\"\n]\n```\n\n----------------------------------------\n\nTITLE: Algolia Keys\nDESCRIPTION: Lists the Algolia keys required to integrate with the platform. These keys are required for App ID, API Key and index names.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/providers.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nALGOLIA_APP_ID\nALGOLIA_WRITE_API_KEY\nALGOLIA_PRODUCTS_INDEX\nALGOLIA_CATEGORIES_INDEX\nALGOLIA_REVIEWS_INDEX - only if you're using reviews feature\n```\n\n----------------------------------------\n\nTITLE: Shopify Keys\nDESCRIPTION: Lists the Shopify keys required to integrate with the platform. These keys are required for store domain, storefront access and admin access.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/providers.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSHOPIFY_STORE_DOMAIN\nSHOPIFY_STOREFRONT_ACCESS_TOKEN\nSHOPIFY_ADMIN_ACCESS_TOKEN\nSHOPIFY_APP_API_SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Algolia Categories Index Attributes\nDESCRIPTION: Defines the attribute for faceting in the Algolia categories index. This attribute is used to filter categories.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/providers.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhandle\n```\n\n----------------------------------------\n\nTITLE: Static Metadata Export Next.js Typescript\nDESCRIPTION: This snippet shows how to statically export metadata in a Next.js application. It defines a constant `metadata` object with `title` and `openGraph` properties. It's suitable when metadata values are fixed and do not require dynamic processing or data fetching.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/seo.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata: Metadata = {\n  title: \"Acme\",\n  openGraph: {\n    title: \"Acme\",\n    description: \"Acme is a...\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Bloom Filter Command\nDESCRIPTION: This command is used to update the Bloom filters after modifying the `redirects.json` file. Running this command ensures that the redirect system remains optimized for performance. It requires `yarn` to be installed.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/redirects.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn generate-bloom-filter\n```\n\n----------------------------------------\n\nTITLE: Generating a Feature Flags Secret\nDESCRIPTION: This command generates a secure random string using Node.js, suitable for use as a `FLAGS_SECRET` environment variable for managing feature flags.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/setup.mdx#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnode -e \"console.log(crypto.randomBytes(32).toString('base64url'))\"\n```\n\n----------------------------------------\n\nTITLE: Algolia Index Replicas Naming\nDESCRIPTION: Explains the naming convention for creating virtual replicas in Algolia for sorting purposes.  The indexName should be replaced with the name of your original index.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/providers.mdx#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{indexName}_price_desc\n{indexName}_price_asc\n{indexName}_rating_desc\n{indexName}_updated_asc\n{indexName}_updated_desc\n```\n\n----------------------------------------\n\nTITLE: Install Commerce CLI globally using npm\nDESCRIPTION: Installs the commerce-cli tool globally using npm, making it accessible from any terminal.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/cli.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g commerce-cli\n```\n\n----------------------------------------\n\nTITLE: Install Commerce CLI globally using pnpm\nDESCRIPTION: Installs the commerce-cli tool globally using pnpm, making it accessible from any terminal.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/cli.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g commerce-cli\n```\n\n----------------------------------------\n\nTITLE: Install Commerce CLI globally using yarn\nDESCRIPTION: Installs the commerce-cli tool globally using yarn, making it accessible from any terminal.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/cli.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add commerce-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI with NPM\nDESCRIPTION: This command installs the Mintlify CLI globally using npm. This allows you to use the `mintlify` command from any directory in your terminal, enabling local documentation preview and other Mintlify-related functionalities.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify in Development Mode\nDESCRIPTION: This command starts the Mintlify development server in the root directory of your documentation project. It watches for changes in your documentation files and automatically updates the preview in your browser, facilitating a rapid development cycle.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Commerce CLI Usage\nDESCRIPTION: Shows the general syntax for using the commerce-cli tool.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/cli.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncommerce-cli [command] [options]\n```\n\n----------------------------------------\n\nTITLE: Commerce CLI Help Command\nDESCRIPTION: Displays help information for the commerce-cli tool.\nSOURCE: https://github.com/blazity/commerce-docs/blob/main/features/cli.mdx#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncommerce-cli -h\n```"
  }
]