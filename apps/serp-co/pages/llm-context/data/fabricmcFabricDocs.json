[
  {
    "owner": "fabricmc",
    "repo": "fabric-docs",
    "content": "TITLE: Calling the ModItems Initialize Method from Mod Initializer\nDESCRIPTION: Shows how to call the ModItems.initialize() method from the mod's main initialization class to ensure that all items are properly registered when the mod loads.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceItems implements ModInitializer {\n\t@Override\n\tpublic void onInitialize() {\n\t\tModItems.initialize();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the ModItems Initialize Method from Mod Initializer\nDESCRIPTION: Shows how to call the ModItems.initialize() method from the mod's main initialization class to ensure that all items are properly registered when the mod loads.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceItems implements ModInitializer {\n\t@Override\n\tpublic void onInitialize() {\n\t\tModItems.initialize();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Item Model JSON in Fabric\nDESCRIPTION: Defines the model JSON for an item using the item/generated parent model with a specified texture. This connects the item to its texture file for rendering in-game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/suspicious_substance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ModBlocks Class with Registration Method in Java\nDESCRIPTION: Defines a ModBlocks class with a register method for block registration. The method registers both the block and its corresponding item, with an option to skip item registration if needed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ModBlocks {\n    private static final String MOD_ID = FabricDocsReference.MOD_ID;\n\n    public static <T extends Block> T register(String id, T block, boolean shouldRegisterItem) {\n        // Register the block\n        Identifier blockId = new Identifier(MOD_ID, id);\n        Registry.register(Registries.BLOCK, blockId, block);\n\n        // Register the block item, if requested\n        if (shouldRegisterItem) {\n            Registry.register(Registries.ITEM, blockId, new BlockItem(block, new Item.Settings()));\n        }\n\n        return block;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Initialization Method for Static Initialization\nDESCRIPTION: Adds an initialize method to the ModItems class that can be called from the mod's initializer to ensure all static fields are evaluated properly, loading the registered items into the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    // Register Method\n    public static <T extends Item> T register(T item, String name) {\n        return Registry.register(Registries.ITEM, new Identifier(\"mod_id\", name), item);\n    }\n\n    // Item Instances\n    public static final Item SUSPICIOUS_SUBSTANCE = register(new Item(new FabricItemSettings()), \"suspicious_substance\");\n\n    // Initialize Method (Called from the Mod Initializer)\n    public static void initialize() {\n        // Left empty intentionally, calling this method will load the class and initialize static fields\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to an Existing Item Group in Fabric\nDESCRIPTION: Updates the initialize method to add the registered item to the Ingredients item group using Fabric API's ItemGroupEvents. This makes the item appear in the creative inventory under that tab.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    // Register Method\n    public static <T extends Item> T register(T item, String name) {\n        return Registry.register(Registries.ITEM, new Identifier(\"mod_id\", name), item);\n    }\n\n    // Item Instances\n    public static final Item SUSPICIOUS_SUBSTANCE = register(new Item(new FabricItemSettings()), \"suspicious_substance\");\n\n    // Initialize Method (Called from the Mod Initializer)\n    public static void initialize() {\n        // Add the item to the Ingredients item group\n        ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(content -> {\n            content.add(SUSPICIOUS_SUBSTANCE);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Block in Minecraft with Fabric\nDESCRIPTION: Creating and registering a custom dirt-like block with specific block settings. This shows how to define block properties and register the block in the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/first-block.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final Block CONDENSED_DIRT = register(\"condensed_dirt\",\n        new Block(AbstractBlock.Settings.create()\n                .mapColor(MapColor.DIRT) // The color of the block on a map\n                .strength(0.5f) // How hard the block is to break\n                .sounds(BlockSoundGroup.GRAVEL)), // The sound the block makes when broken/placed\n        true);\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Sound System in Network Handling\nDESCRIPTION: Example of using the DynamicSoundManager to start and stop custom dynamic SoundInstances in response to network events.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ReceiveS2C {\n    public static void onEngineStart(EngineBlockEntity engine) {\n        DynamicSoundManager.getInstance().playSound(\n            new EngineSoundInstance(\n                ModSounds.ENGINE_RUNNING,\n                engine,\n                () -> DynamicSoundManager.getInstance().stopSound(engine.getSoundInstance())\n            )\n        );\n    }\n\n    public static void onEngineStop(EngineBlockEntity engine) {\n        if (engine.getSoundInstance() != null) {\n            engine.getSoundInstance().stopPlaying();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Loot Tables with LootTableEvents in Java\nDESCRIPTION: This code snippet shows how to use LootTableEvents.MODIFY to add eggs to the iron ore block's loot table. It demonstrates detecting loot table loading and adding items to existing loot tables.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/events.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLootTableEvents.MODIFY.register((resourceManager, lootManager, id, tableBuilder, source) -> {\n    if (source.isBuiltin() && Blocks.IRON_ORE.getLootTableId().equals(id)) {\n        LootPool.Builder poolBuilder = LootPool.builder()\n                .rolls(ConstantLootNumberProvider.create(1))\n                .with(ItemEntry.builder(Items.EGG)\n                        .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1.0f, 2.0f))));\n        tableBuilder.pool(poolBuilder);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering an Item as Fuel in Fabric\nDESCRIPTION: Demonstrates how to register an item as a fuel source using Fabric API's FuelRegistry. The integer parameter specifies the burn time in ticks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static void initialize() {\n    // Add the item to the Ingredients item group\n    ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(content -> {\n        content.add(SUSPICIOUS_SUBSTANCE);\n    });\n    \n    // Make the item a fuel\n    FuelRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 300); // 300 = 15 seconds burn time\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Attack Event Handler in Java\nDESCRIPTION: Example showing how to register an AttackBlockCallback to damage players when they hit blocks that don't drop items when mined by hand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/events.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAttackBlockCallback.EVENT.register((player, world, hand, pos, direction) -> {\n    BlockState state = world.getBlockState(pos);\n    if (!state.getBlock().getDroppedStacks(state, (ServerWorld) world, pos, player).isEmpty()) {\n        return ActionResult.PASS;\n    }\n    \n    player.damage(world.getDamageSources().generic(), 1.0f);\n    return ActionResult.SUCCESS;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ModItems Class in Fabric\nDESCRIPTION: Creates a utility class for registering items with a register method that accepts an item instance and identifier string. This pattern follows Mojang's approach in their Items class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    // Register Method\n    public static <T extends Item> T register(T item, String name) {\n        return Registry.register(Registries.ITEM, new Identifier(\"mod_id\", name), item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Item as Fuel in Fabric\nDESCRIPTION: Demonstrates how to register an item as a fuel source using Fabric API's FuelRegistry. The integer parameter specifies the burn time in ticks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static void initialize() {\n    // Add the item to the Ingredients item group\n    ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(content -> {\n        content.add(SUSPICIOUS_SUBSTANCE);\n    });\n    \n    // Make the item a fuel\n    FuelRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 300); // 300 = 15 seconds burn time\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Simple Item in Fabric\nDESCRIPTION: Creates and registers a new item with a specific identifier using the ModItems register method. The item is configured using FabricItemSettings which allows for property customization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    // Register Method\n    public static <T extends Item> T register(T item, String name) {\n        return Registry.register(Registries.ITEM, new Identifier(\"mod_id\", name), item);\n    }\n\n    // Item Instances\n    public static final Item SUSPICIOUS_SUBSTANCE = register(new Item(new FabricItemSettings()), \"suspicious_substance\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Block Item to a Custom Item Group\nDESCRIPTION: Code to add a custom block's item representation to a specific item group in the creative inventory, making it accessible to players.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/first-block.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static void initialize() {\n    // We need to add our block's item to the building blocks group\n    ItemGroupEvents.modifyEntriesEvent(ModItemGroups.FABRIC_DOCS_REFERENCE).register(content -> {\n        // Add our block's item to the item group\n        content.add(CONDENSED_DIRT);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tooltip to Item in Java\nDESCRIPTION: Overrides the appendTooltip method in a custom Item class to add a custom tooltip to the item. This example adds two lines to the tooltip.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/first-item.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void appendTooltip(ItemStack stack, @Nullable World world, List<Text> tooltip, TooltipContext context) {\n    tooltip.add(Text.translatable(\"item.fabric_docs_reference.lightning_stick.tooltip_1\"));\n    tooltip.add(Text.translatable(\"item.fabric_docs_reference.lightning_stick.tooltip_2\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Making Item a Fuel in Java\nDESCRIPTION: Uses Fabric API's FuelRegistryEvents to make the custom item a fuel. This code is added to the initialize method of the ModItems class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/first-item.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nFuelRegistryEvents.BUILD.register(builder -> {\n    builder.add(SUSPICIOUS_SUBSTANCE, 300);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget by Extending ClickableWidget in Java\nDESCRIPTION: This snippet demonstrates how to create a custom widget by extending the ClickableWidget class. It sets up position, size, text, and implements rendering functionality with custom background and text drawing.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.rendering.screens;\n\nimport net.minecraft.client.gui.DrawContext;\nimport net.minecraft.client.gui.widget.ClickableWidget;\nimport net.minecraft.text.Text;\n\npublic class CustomWidget extends ClickableWidget {\n    private static final int NORMAL_COLOR = 0xFF000000;\n    private static final int HOVERED_COLOR = 0xFF333333;\n    \n    public CustomWidget(int x, int y, int width, int height, Text message) {\n        super(x, y, width, height, message);\n    }\n\n    @Override\n    protected void renderWidget(DrawContext context, int mouseX, int mouseY, float delta) {\n        int backgroundColor = isHovered() ? HOVERED_COLOR : NORMAL_COLOR;\n        \n        // Render background\n        context.fill(getX(), getY(), getX() + width, getY() + height, backgroundColor);\n        \n        // Render text\n        int textColor = 0xFFFFFFFF; // White\n        context.drawCenteredTextWithShadow(\n            textRenderer, getMessage(), getX() + width / 2, getY() + (height - textRenderer.fontHeight) / 2, textColor\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Received Packets on the Client in Java\nDESCRIPTION: Demonstrates how to register a global receiver for handling packets sent from the server to the client. It creates a lightning entity at the specified position when the packet is received.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/networking.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nClientPlayNetworking.registerGlobalReceiver(SummonLightningS2CPayload.TYPE, (payload, context) -> {\n    BlockPos pos = payload.pos();\n    context.client().execute(() -> {\n        LightningEntity lightningEntity = EntityType.LIGHTNING_BOLT.create(context.client().world);\n        if (lightningEntity != null) {\n            lightningEntity.refreshPositionAfterTeleport(pos.getX(), pos.getY(), pos.getZ());\n            context.client().world.addEntity(lightningEntity.getId(), lightningEntity);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Command Lambda with Command Interface in Java\nDESCRIPTION: Demonstrates the basic structure of implementing the Command interface using a lambda expression that returns a success code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ko_kr/develop/commands/basics.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCommand<ServerCommandSource> command = context -> {\n    return 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Attack Block Callback in Java\nDESCRIPTION: This code registers an AttackBlockCallback that damages a player when they hit blocks that don't drop an item without tools.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/it_it/develop/events.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAttackBlockCallback.EVENT.register((player, world, hand, pos, direction) -> {\n    BlockState state = world.getBlockState(pos);\n    Block block = state.getBlock();\n    if (world.getBlockEntity(pos) == null\n        && state.getHardness(world, pos) != -1.0F\n        && !(player.getStackInHand(hand).isEmpty() && block.drops(state).isEmpty())) {\n        player.damage(world.getDamageSources().generic(), 0.5F);\n    }\n    return ActionResult.PASS;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tooltips to Items\nDESCRIPTION: Demonstrates how to override the appendTooltip method in a custom Item class to add custom tooltips that will display when hovering over the item in the inventory.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/first-item.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void appendTooltip(ItemStack stack, @Nullable World world, List<Text> tooltip, TooltipContext context) {\n    tooltip.add(Text.translatable(\"item.fabric-docs-reference.lightning_stick.tooltip.line1\"));\n    tooltip.add(Text.empty()); // An empty line\n    tooltip.add(Text.translatable(\"item.fabric-docs-reference.lightning_stick.tooltip.line2\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget by Extending ClickableWidget in Java\nDESCRIPTION: This snippet demonstrates how to create a custom widget by extending the ClickableWidget class. It sets up position, size, text, and implements rendering functionality with custom background and text drawing.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.rendering.screens;\n\nimport net.minecraft.client.gui.DrawContext;\nimport net.minecraft.client.gui.widget.ClickableWidget;\nimport net.minecraft.text.Text;\n\npublic class CustomWidget extends ClickableWidget {\n    private static final int NORMAL_COLOR = 0xFF000000;\n    private static final int HOVERED_COLOR = 0xFF333333;\n    \n    public CustomWidget(int x, int y, int width, int height, Text message) {\n        super(x, y, width, height, message);\n    }\n\n    @Override\n    protected void renderWidget(DrawContext context, int mouseX, int mouseY, float delta) {\n        int backgroundColor = isHovered() ? HOVERED_COLOR : NORMAL_COLOR;\n        \n        // Render background\n        context.fill(getX(), getY(), getX() + width, getY() + height, backgroundColor);\n        \n        // Render text\n        int textColor = 0xFFFFFFFF; // White\n        context.drawCenteredTextWithShadow(\n            textRenderer, getMessage(), getX() + width / 2, getY() + (height - textRenderer.fontHeight) / 2, textColor\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ModItems Class in Java\nDESCRIPTION: Adds an initialize method to the ModItems class to ensure static initialization. This method is called from the mod's initializer class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/first-item.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    public static void initialize() {\n        // This method is intentionally left empty\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tooltips to an Item in Fabric\nDESCRIPTION: Overrides the appendTooltip method in a custom Item class to add custom tooltip lines. This example adds both plain text and formatted text to the tooltip.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void appendTooltip(ItemStack stack, @Nullable World world, List<Text> tooltip, TooltipContext context) {\n    tooltip.add(Text.translatable(\"item.fabric-docs-reference.lightning_stick.tooltip\"));\n    tooltip.add(Text.literal(\"Charges: \" + (MAX_USES - stack.getDamage()) + \"/\" + MAX_USES)\n            .formatted(Formatting.GOLD));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Item with Component in Java\nDESCRIPTION: Shows the implementation of a custom item class that uses the previously defined click count component. This class includes methods for handling right-clicks and displaying tooltips.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class CounterItem extends Item {\n    public CounterItem(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n        ItemStack stack = user.getStackInHand(hand);\n        if (!world.isClient()) {\n            int count = stack.getOrDefault(ModComponents.CLICK_COUNT_COMPONENT, 0);\n            stack.set(ModComponents.CLICK_COUNT_COMPONENT, count + 1);\n            user.sendMessage(Text.literal(\"Clicked \" + (count + 1) + \" times\"));\n        }\n        return TypedActionResult.success(stack);\n    }\n\n    @Override\n    public void appendTooltip(ItemStack stack, World world, List<Text> tooltip, TooltipContext context) {\n        if (stack.contains(ModComponents.CLICK_COUNT_COMPONENT)) {\n            int count = stack.get(ModComponents.CLICK_COUNT_COMPONENT);\n            tooltip.add(Text.translatable(\"item.fabric-docs-reference.counter.info\", count).formatted(Formatting.GOLD));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Item in Java\nDESCRIPTION: Demonstrates how to register a custom item using the previously defined register method. It creates a new item called 'suspicious_substance' with default settings.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/first-item.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    public static final Item SUSPICIOUS_SUBSTANCE = register(\"suspicious_substance\", Item::new, new Item.Settings());\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON to BlockPos using Codec in Java\nDESCRIPTION: This snippet shows how to deserialize a JsonElement back into a BlockPos object using Mojang's Codec system. It handles potential errors and demonstrates logging the results.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// When actually writing a mod, you'll want to properly handle empty Optionals of course\nJsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// Here we have our json value, which should correspond to `[1, 2, 3]`,\n// as that's the format used by the BlockPos codec.\nLOGGER.info(\"Serialized BlockPos: {}\", json);\n\n// Now we'll deserialize the JsonElement back into a BlockPos\nDataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);\n\n// Again, we'll just grab our value from the result\nBlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// And we can see that we've successfully serialized and deserialized our BlockPos!\nLOGGER.info(\"Deserialized BlockPos: {}\", pos);\n```\n\n----------------------------------------\n\nTITLE: Generating Enchantment Data with EnchantmentGenerator\nDESCRIPTION: Data generator class for creating enchantment JSON configurations programmatically using Fabric's data generation tools.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-enchantment-effects.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class EnchantmentGenerator extends FabricEnchantmentProvider {\n    public EnchantmentGenerator(FabricDataOutput output) {\n        super(output);\n    }\n\n    @Override\n    public void generateEnchantmentData() {\n        FabricEnchantmentBuilder.create()\n            .id(\"thundering\")\n            .rarity(Rarity.RARE)\n            .maxLevel(3)\n            .applicableItems(Set.of(Items.DIAMOND_SWORD))\n            .conditions(List.of(new HitEntityEnchantmentCondition()))\n            .effects(List.of(new EnchantmentEffectEntry(ModEnchantmentEffects.LIGHTNING)))\n            .build(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component Types in Java\nDESCRIPTION: Basic template for registering a component type in the game registry. This code shows the structure needed to define a custom data component that can store values on an ItemStack.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final ComponentType<?> MY_COMPONENT_TYPE = Registry.register(\n    Registries.DATA_COMPONENT_TYPE,\n    Identifier.of(FabricDocsReference.MOD_ID, \"my_component\"),\n    ComponentType.<?>builder().codec(null).build()\n);\n```\n\n----------------------------------------\n\nTITLE: Registering an AttackBlockCallback Event in Java\nDESCRIPTION: This example registers an AttackBlockCallback to damage the player when they hit blocks that don't drop items when broken without tools. It demonstrates how to listen for an event and implement logic within the callback.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/events.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate void registerAttackBlockCallback() {\n    AttackBlockCallback.EVENT.register((player, world, hand, pos, direction) -> {\n        BlockState state = world.getBlockState(pos);\n        Block block = state.getBlock();\n        // Se il blocco ha bisogno di uno strumento ma il giocatore colpisce senza\n        if (state.isToolRequired() && player.getStackInHand(hand).isEmpty()) {\n            // Danneggia il giocatore di 1 punto di cuore\n            player.damage(player.getDamageSources().generic(), 2.0F);\n            return ActionResult.FAIL; // Annulla l'interazione\n        }\n        return ActionResult.PASS; // Lascia che il gioco gestisca normalmente\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Item Tooltip Implementation\nDESCRIPTION: Shows how to add custom tooltips to an item by overriding the appendTooltip method\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/first-item.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void appendTooltip(ItemStack stack, @Nullable World world, List<Text> tooltip, TooltipContext context) {\n    tooltip.add(Text.translatable(\"item.fabric_docs_reference.lightning_stick.tooltip\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Block to an Item Group\nDESCRIPTION: Shows how to add a block item to a custom item group in Fabric's creative inventory using ItemGroupEvents, retrieving the BlockItem instance with Block.asItem().\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nItemGroupEvents.modifyEntriesEvent(ModItemGroups.INGREDIENTS).register(content -> {\n    content.add(CONDENSED_DIRT.asItem());\n});\n```\n\n----------------------------------------\n\nTITLE: Item Group Registration\nDESCRIPTION: Example of adding an item to the ingredients ItemGroup using Fabric API events\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/first-item.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(entries -> {\n    entries.add(SUSPICIOUS_SUBSTANCE);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom Item Group in Java\nDESCRIPTION: This code demonstrates how to define a custom item group with a registry key and register it as a creative inventory tab in Minecraft using Fabric.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-item-groups.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final RegistryKey<ItemGroup> ITEM_GROUP = RegistryKey.of(RegistryKeys.ITEM_GROUP, new Identifier(\"fabric_docs_reference\"));\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Block\nDESCRIPTION: Creates a custom block class that implements BlockEntityProvider to support the counter functionality. Includes block entity creation and interaction handling.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entities.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CounterBlock extends BlockWithEntity {\n    public CounterBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public BlockEntity createBlockEntity(BlockPos pos, BlockState state) {\n        return new CounterBlockEntity(pos, state);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Block Entity Class in Fabric\nDESCRIPTION: Implementation of a CounterBlockEntity class that extends BlockEntity to store data about the number of clicks. Demonstrates the basic structure required for a block entity.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entities.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CounterBlockEntity extends BlockEntity {\n    public CounterBlockEntity(BlockPos pos, BlockState state) {\n        super(ModBlockEntities.COUNTER_BLOCK_ENTITY, pos, state);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Triangle Strip on HUD in Minecraft Fabric\nDESCRIPTION: This code example shows how to render a triangle strip on the HUD using the BufferBuilder system in Minecraft Fabric modding. It demonstrates vertex positioning, color setting, and buffer drawing.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/basic-concepts.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class RenderingConceptsEntrypoint implements ClientModInitializer {\n    @Override\n    public void onInitializeClient() {\n        HudRenderCallback.EVENT.register((drawContext, tickDelta) -> {\n            Tessellator tessellator = Tessellator.getInstance();\n            BufferBuilder bufferBuilder = tessellator.getBuffer();\n\n            Matrix4f positionMatrix = drawContext.getMatrices().peek().getPositionMatrix();\n\n            RenderSystem.enableBlend();\n            RenderSystem.setShader(GameRenderer::getPositionColorProgram);\n\n            bufferBuilder.begin(VertexFormat.DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);\n            bufferBuilder.vertex(positionMatrix, 20, 20, 0).color(255, 0, 0, 255).next(); // Red\n            bufferBuilder.vertex(positionMatrix, 5, 40, 0).color(0, 255, 0, 255).next(); // Green\n            bufferBuilder.vertex(positionMatrix, 35, 40, 0).color(0, 0, 255, 255).next(); // Blue\n            bufferBuilder.vertex(positionMatrix, 20, 60, 0).color(255, 255, 255, 255).next(); // White\n\n            tessellator.draw();\n\n            RenderSystem.disableBlend();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BlockEntityRenderer for CounterBlockEntity in Java\nDESCRIPTION: This snippet demonstrates how to create a BlockEntityRenderer class for a CounterBlockEntity. It includes the constructor and render method setup.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entity-renderer.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CounterBlockEntityRenderer implements BlockEntityRenderer<CounterBlockEntity> {\n    private final TextRenderer textRenderer;\n\n    public CounterBlockEntityRenderer(BlockEntityRendererFactory.Context ctx) {\n        this.textRenderer = ctx.getTextRenderer();\n    }\n\n    @Override\n    public void render(CounterBlockEntity entity, float tickDelta, MatrixStack matrices,\n                       VertexConsumerProvider vertexConsumers, int light, int overlay) {\n        // Rendering logic will be added here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Item Registration Example\nDESCRIPTION: Demonstrates how to register a new item using FabricItemSettings\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/first-item.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item SUSPICIOUS_SUBSTANCE = registerItem(\"suspicious_substance\",\n    new Item(new FabricItemSettings()));\n```\n\n----------------------------------------\n\nTITLE: Registering Items as Furnace Fuel\nDESCRIPTION: Demonstrates how to register an item as a furnace fuel using Fabric API's FuelRegistry. The time value represents how long the item will burn in ticks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/first-item.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic static void initialize() {\n    // Adding items to the INGREDIENTS group as an example\n    ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(entries -> {\n        entries.add(SUSPICIOUS_SUBSTANCE);\n    });\n    \n    // Register this item as compostable with a 30% chance of increasing the composter level\n    CompostingChanceRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 0.3f);\n    \n    // Register this item as a fuel that burns for 300 ticks (15 seconds)\n    FuelRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 300);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Item Group in Fabric\nDESCRIPTION: Creating a static final field to store the item group and registering it using the FabricItemGroup builder. This defines the item group's properties including icon, display name, and entries.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-item-groups.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final RegistryKey<ItemGroup> ITEM_GROUP = RegistryKey.of(RegistryKeys.ITEM_GROUP, new Identifier(\"fabric_docs_reference\", \"general\"));\n\nprivate static void registerItemGroup() {\n    ItemGroupEvents.modifyEntriesEvent(ITEM_GROUP).register(content -> {\n        content.add(RUBY);\n        content.add(RUBY_BLOCK);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the Armor Material Initialization from Mod Initializer\nDESCRIPTION: Example of calling the ModArmorMaterials.initialize() method from the mod's onInitialize method to ensure materials are registered before items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-armor.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitialize() {\n  ModArmorMaterials.initialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the Armor Material Initialization from Mod Initializer\nDESCRIPTION: Example of calling the ModArmorMaterials.initialize() method from the mod's onInitialize method to ensure materials are registered before items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-armor.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitialize() {\n  ModArmorMaterials.initialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Making Items Compostable with Fabric API\nDESCRIPTION: Shows how to register an item as compostable using Fabric API's CompostableItemRegistry. The chance parameter determines the likelihood of increasing the composter level.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/first-item.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static void initialize() {\n    // Adding items to the INGREDIENTS group as an example\n    ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(entries -> {\n        entries.add(SUSPICIOUS_SUBSTANCE);\n    });\n    \n    // Register this item as compostable with a 30% chance of increasing the composter level\n    CompostingChanceRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 0.3f);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Poisonous Apple Item with Food and Consumable Components in Java\nDESCRIPTION: This code creates a poisonous apple item that is always edible regardless of hunger level and applies Poison II effect for 6 seconds when consumed. It uses both FoodComponent and ConsumableComponent together.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/food.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item POISONOUS_APPLE = registerConsumable(\"poisonous_apple\",\n    new Item(new Item.Settings().food(new FoodComponent.Builder().alwaysEdible().build())),\n    POISONOUS_COMPONENT\n);\n```\n\n----------------------------------------\n\nTITLE: LightningStick Class Definition\nDESCRIPTION: Class definition for a custom item that can summon lightning bolts. Extends the Item class with basic initialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-item-interactions.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class LightningStick extends Item {\n    public LightningStick(Settings settings) {\n        super(settings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget by Extending ClickableWidget in Java\nDESCRIPTION: This example demonstrates how to create a custom widget class by extending ClickableWidget. It implements a simple rectangular widget with custom rendering, positioning, and dimensions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomWidget extends ClickableWidget {\n    private static final Identifier CUSTOM_WIDGET_TEXTURE = new Identifier(\"docs\", \"textures/gui/custom_widget.png\");\n\n    public CustomWidget(int x, int y, int width, int height, Text message) {\n        super(x, y, width, height, message);\n    }\n\n    @Override\n    public void renderButton(DrawContext context, int mouseX, int mouseY, float delta) {\n        // Render the background of the widget\n        context.fill(getX(), getY(), getX() + width, getY() + height, 0xFF000000);\n        \n        // Render the border of the widget\n        context.drawBorder(getX(), getY(), width, height, 0xFFFFFFFF);\n        \n        // Get the text renderer\n        TextRenderer textRenderer = MinecraftClient.getInstance().textRenderer;\n        \n        // Render the message of the widget\n        int textWidth = textRenderer.getWidth(getMessage());\n        context.drawTextWithShadow(textRenderer, getMessage(), getX() + (width - textWidth) / 2, getY() + (height - 8) / 2, 0xFFFFFFFF);\n    }\n\n    @Override\n    public void appendNarrations(NarrationMessageBuilder builder) {\n        // Add narration for accessibility\n        this.appendDefaultNarrations(builder);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering BlockEntityRenderer in a ClientModInitializer\nDESCRIPTION: This snippet demonstrates how to register a BlockEntityRenderer in a ClientModInitializer class. It uses BlockEntityRendererFactories to map a BlockEntityType to its corresponding renderer.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entity-renderer.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs;\n\nimport com.example.docs.block.entity.FabricDocsBlockEntities;\nimport com.example.docs.rendering.blockentity.CounterBlockEntityRenderer;\nimport net.fabricmc.api.ClientModInitializer;\nimport net.fabricmc.fabric.api.client.rendering.v1.BlockEntityRendererRegistry;\n\npublic class FabricDocsBlockEntityRenderer implements ClientModInitializer {\n    @Override\n    public void onInitializeClient() {\n        BlockEntityRendererRegistry.register(FabricDocsBlockEntities.COUNTER, CounterBlockEntityRenderer::new);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering BlockEntityRenderer in Fabric's entrypoint\nDESCRIPTION: This code shows how to register the BlockEntityRenderer in the mod's entrypoint using BlockEntityRendererFactories.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entity-renderer.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsBlockEntityRenderer implements ClientModInitializer {\n    @Override\n    public void onInitializeClient() {\n        BlockEntityRendererFactories.register(FabricDocsBlockEntities.COUNTER_BLOCK_ENTITY, CounterBlockEntityRenderer::new);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Item with Fabric Item Settings\nDESCRIPTION: Demonstrates how to register a custom item with specific properties using the FabricItemSettings class. This shows configuration for stack size and other item behaviors.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/first-item.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    // Our custom item instance.\n    public static final Item SUSPICIOUS_SUBSTANCE = register(new Item(new FabricItemSettings()), \"suspicious_substance\");\n\n    // A helper method to make the item registration process less repetitive.\n    private static Item register(Item item, String id) {\n        return Registry.register(Registries.ITEM, new Identifier(\"mod_id\", id), item);\n    }\n\n    // This class needs to be initialized, so we offer this method for the mod initializer to call.\n    // We don't need to do anything in it yet.\n    public static void initialize() {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Block Loot Table JSON Configuration\nDESCRIPTION: Loot table definition that determines what items drop when a block is broken or exploded. This example makes the block drop itself as an item.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"minecraft:block\",\n  \"pools\": [\n    {\n      \"rolls\": 1,\n      \"entries\": [\n        {\n          \"type\": \"minecraft:item\",\n          \"name\": \"fabric-docs-reference:condensed_dirt\"\n        }\n      ],\n      \"conditions\": [\n        {\n          \"condition\": \"minecraft:survives_explosion\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Items to Existing Item Groups\nDESCRIPTION: Shows how to add custom items to Minecraft's existing item groups (creative inventory tabs) using the Fabric API's item group events system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/first-item.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    // Our custom item instance.\n    public static final Item SUSPICIOUS_SUBSTANCE = register(new Item(new FabricItemSettings()), \"suspicious_substance\");\n\n    // A helper method to make the item registration process less repetitive.\n    private static Item register(Item item, String id) {\n        return Registry.register(Registries.ITEM, new Identifier(\"mod_id\", id), item);\n    }\n\n    // This class needs to be initialized, so we offer this method for the mod initializer to call.\n    public static void initialize() {\n        // Adding items to the INGREDIENTS group as an example\n        ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(entries -> {\n            entries.add(SUSPICIOUS_SUBSTANCE);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on Block Entity in Java using TextRenderer\nDESCRIPTION: This code snippet shows how to use TextRenderer to draw text on a block entity, including centering the text and applying color.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entity-renderer.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nText text = Text.literal(Integer.toString(entity.getCounter()));\nint width = this.textRenderer.getWidth(text);\nthis.textRenderer.draw(\n    text,\n    -width / 2f,\n    -4.5f,\n    0xFFFFFF,\n    false,\n    matrices.peek().getPositionMatrix(),\n    vertexConsumers,\n    TextRenderer.TextLayerType.NORMAL,\n    0x000000,\n    light\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Tool Items in Java\nDESCRIPTION: Demonstrates how to create custom tool items using the GuiditeMaterial. It shows the creation of a sword, pickaxe, axe, shovel, and hoe using the custom material.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-tools.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item GUIDITE_SWORD = registerItem(\"guidite_sword\", new SwordItem(GuiditeMaterial.INSTANCE, 3, -2.4F, new FabricItemSettings()));\npublic static final Item GUIDITE_PICKAXE = registerItem(\"guidite_pickaxe\", new PickaxeItem(GuiditeMaterial.INSTANCE, 1, -2.8F, new FabricItemSettings()));\npublic static final Item GUIDITE_AXE = registerItem(\"guidite_axe\", new AxeItem(GuiditeMaterial.INSTANCE, 7.0F, -3.2F, new FabricItemSettings()));\npublic static final Item GUIDITE_SHOVEL = registerItem(\"guidite_shovel\", new ShovelItem(GuiditeMaterial.INSTANCE, 1.5F, -3.0F, new FabricItemSettings()));\npublic static final Item GUIDITE_HOE = registerItem(\"guidite_hoe\", new HoeItem(GuiditeMaterial.INSTANCE, -2, -1.0F, new FabricItemSettings()));\n```\n\n----------------------------------------\n\nTITLE: Creating Equipment Asset Registry Key for Custom Armor in Java\nDESCRIPTION: Defines a registry key for the custom armor material. This key is used to locate textures for the armor.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-armor.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final RegistryKey<EquipmentAsset> GUIDITE_ARMOR_MATERIAL_KEY = RegistryKey.of(RegistryKeys.EQUIPMENT_ASSET, new Identifier(FabricDocsReference.MOD_ID, \"guidite\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Item Model JSON\nDESCRIPTION: Defines a JSON model for a custom item, specifying the parent model to inherit from and the texture to use. This uses the standard 'item/generated' model with a custom texture.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/first-item.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/suspicious_substance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Pillar Block Model in JSON\nDESCRIPTION: Defines a JSON model for a horizontal pillar block that extends the vanilla cube_column_horizontal model. It specifies textures for the end and side of the pillar.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"block/cube_column_horizontal\",\n  \"textures\": {\n    \"end\": \"fabric-docs-reference:block/condensed_oak_log_top\",\n    \"side\": \"fabric-docs-reference:block/condensed_oak_log\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect for Custom Effect Implementation in Java\nDESCRIPTION: Creates a custom effect named 'Tater' by extending the StatusEffect class. The effect adds one experience point to the entity every game tick when applied.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n\tpublic TaterEffect() {\n\t\tsuper(\n\t\t\t\tStatusEffectCategory.BENEFICIAL, // Whether the effect is beneficial (true) or harmful (false)\n\t\t\t\t0x98D98E // Color in RGB\n\t\t);\n\t}\n\n\t// This method is called every tick to check whether the effect should apply this tick\n\t@Override\n\tpublic boolean canApplyUpdateEffect(int duration, int amplifier) {\n\t\t// In our case, we just want to return true, so that the effect applies every tick\n\t\treturn true;\n\t}\n\n\t// This method is called when the effect is applied to an entity every tick\n\t@Override\n\tpublic void applyUpdateEffect(LivingEntity entity, int amplifier) {\n\t\tif (entity instanceof PlayerEntity) {\n\t\t\t// Give the player some experience every tick\n\t\t\t((PlayerEntity) entity).addExperience(1);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tool Material in Java\nDESCRIPTION: Demonstrates how to create a custom ToolMaterial object with specific properties for durability, mining speed, attack damage, and more.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-tools.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final ToolMaterial GUIDITE_TOOL_MATERIAL = new ToolMaterial(\n    ModBlockTags.NEEDS_GUIDITE_TOOL,\n    1000,\n    5.0f,\n    3.0f,\n    15,\n    ModItemTags.GUIDITE_REPAIRABLE\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lightning Tater Item with Networking\nDESCRIPTION: This code implements a custom item that sends packets to clients when used. It demonstrates proper server-side detection and player lookup to only send packets to relevant players who should receive the notification.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/networking.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class LightningTaterItem extends Item {\n    public LightningTaterItem(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n        ItemStack stack = user.getStackInHand(hand);\n\n        // Only send packets if this is running on the server\n        if (world.isClient) {\n            return TypedActionResult.pass(stack);\n        }\n\n        SummonLightningS2CPayload payload = new SummonLightningS2CPayload(user.getBlockPos());\n\n        // Send a packet to all players tracking the user\n        for (ServerPlayerEntity player : PlayerLookup.tracking(world, user.getBlockPos())) {\n            ServerPlayNetworking.send(player, payload);\n        }\n\n        return TypedActionResult.success(stack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing a JsonElement to BlockPos using Codec in Java\nDESCRIPTION: This code shows how to deserialize a JsonElement back into a BlockPos object using the BlockPos.CODEC and JsonOps. It includes error handling and logging of the results.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// When actually writing a mod, you'll want to properly handle empty Optionals of course\nJsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// Here we have our json value, which should correspond to `[1, 2, 3]`,\n// as that's the format used by the BlockPos codec.\nLOGGER.info(\"Serialized BlockPos: {}\", json);\n\n// Now we'll deserialize the JsonElement back into a BlockPos\nDataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);\n\n// Again, we'll just grab our value from the result\nBlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// And we can see that we've successfully serialized and deserialized our BlockPos!\nLOGGER.info(\"Deserialized BlockPos: {}\", pos);\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class for Custom Effect in Java\nDESCRIPTION: Creates a custom TaterEffect class that extends StatusEffect. This effect gives one experience point every game tick when applied to an entity.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n:::1\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        super(\n                StatusEffectCategory.BENEFICIAL, // whether beneficial or harmful for entity\n                0x98D982); // color in RGB\n    }\n\n    // This method is called every tick to check whether it should apply the status effect or not\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        // In our case, we just make it return true so that it applies the status effect every tick.\n        return true;\n    }\n\n    // This method is called when it applies the status effect. We implement custom functionality here.\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1); // Adds 1 experience to the player\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Preparing Item Registration Class in Java\nDESCRIPTION: Creates a dedicated ModItems class with a register method to simplify item registration. This pattern follows Mojang's own approach to item registration.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/first-item.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    // Our custom item instance.\n    public static final Item SUSPICIOUS_SUBSTANCE = register(new Item(new FabricItemSettings()), \"suspicious_substance\");\n\n    // A helper method to make the item registration process less repetitive.\n    private static Item register(Item item, String id) {\n        return Registry.register(Registries.ITEM, new Identifier(\"mod_id\", id), item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Command with Single Argument\nDESCRIPTION: Demonstrates how to create a command that accepts a single integer argument and provides feedback.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/arguments.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCommandManager.argument(\"value\", IntegerArgumentType.integer())\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.getSource().sendFeedback(() -> Text.literal(\"Called /command_with_arg with value = \" + context.getArgument(\"value\", Integer.class)), false)\n```\n\n----------------------------------------\n\nTITLE: Initializing Armor Materials Class in Fabric Mod\nDESCRIPTION: Creates a basic initialize method within the ModArmorMaterials class that should be called from the mod's initializer before registering armor items. This ensures armor materials are registered before they're needed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-armor.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Within the ModArmorMaterials class\npublic static void initialize() {};\n```\n\n----------------------------------------\n\nTITLE: Basic Food Component Creation in Java\nDESCRIPTION: Shows the basic syntax for adding a food component to an item using Item.Settings and FoodComponent.Builder.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/food.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew Item.Settings().food(new FoodComponent.Builder().build())\n```\n\n----------------------------------------\n\nTITLE: Basic Food Component Implementation in Java\nDESCRIPTION: This snippet shows the simplest way to make an item edible by adding a FoodComponent to an Item.Settings instance. Without additional configuration, this just enables the item to be eaten.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/food.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew Item.Settings().food(new FoodComponent.Builder().build())\n```\n\n----------------------------------------\n\nTITLE: Implementing Tick Method for Dynamic Sound Behavior in Java\nDESCRIPTION: Implements the tick method to apply different values and behaviors based on the current tick of the SoundInstance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void tick() {\n    this.ticksExisted++;\n    this.ticksPlayed++;\n\n    if (this.source.shouldStopSound()) {\n        if (this.transitionState != TransitionState.END) {\n            this.transitionState = TransitionState.END;\n            this.ticksPlayed = 0;\n        }\n    }\n\n    if (this.transitionState == TransitionState.START && this.ticksPlayed >= this.startTicks) {\n        this.transitionState = TransitionState.MIDDLE;\n        this.ticksPlayed = 0;\n    } else if (this.transitionState == TransitionState.END && this.ticksPlayed >= this.endTicks) {\n        this.finished = true;\n        this.finishCallback.accept(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Block Model JSON Configuration\nDESCRIPTION: Block model definition that inherits from cube_all and specifies the texture to use\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/blocks/first-block.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"parent\": \"block/cube_all\",\n    \"textures\": {\n        \"all\": \"fabric-docs-reference:block/condensed_dirt\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Subcommand Registration\nDESCRIPTION: Registration of a command with an optional subcommand that works with or without the subcommand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/basics.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"command_two\")\n    .executes(this::executeCommandSubCommandTwo)\n    .then(CommandManager.literal(\"sub_command_two\")\n        .executes(this::executeCommandSubCommandTwo)));\n```\n\n----------------------------------------\n\nTITLE: Basic Food Component Implementation in Java\nDESCRIPTION: Shows how to add a basic food component to an item using the FoodComponent.Builder. This creates a simple edible item without any special properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/food.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew Item.Settings().food(new FoodComponent.Builder().build())\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class for Custom Effect in Java\nDESCRIPTION: Creates a custom status effect called 'Tater' by extending the StatusEffect class. The effect gives one experience point per game tick.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        super(\n            StatusEffectCategory.BENEFICIAL, // whether beneficial or harmful for entities\n            0x98D982); // color in RGB\n    }\n\n    // This method is called every tick to check whether it should apply the status effect or not\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        // In our case, we just make it return true so that it applies the status effect every tick.\n        return true;\n    }\n\n    // This method is called when it applies the status effect. We implement custom functionality here.\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1 << amplifier); // Higher amplifier gives more experience\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class for Custom Effect in Java\nDESCRIPTION: Creates a custom status effect called 'Tater' by extending the StatusEffect class. The effect gives one experience point per game tick.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        super(\n            StatusEffectCategory.BENEFICIAL, // whether beneficial or harmful for entities\n            0x98D982); // color in RGB\n    }\n\n    // This method is called every tick to check whether it should apply the status effect or not\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        // In our case, we just make it return true so that it applies the status effect every tick.\n        return true;\n    }\n\n    // This method is called when it applies the status effect. We implement custom functionality here.\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1 << amplifier); // Higher amplifier gives more experience\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tool Material in Java\nDESCRIPTION: Creates a custom tool material class called GuiditeMaterial that implements ToolMaterial. It defines properties such as durability, mining speed, attack damage, mining level, enchantability, and repair ingredient.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-tools.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class GuiditeMaterial implements ToolMaterial {\n    public static final GuiditeMaterial INSTANCE = new GuiditeMaterial();\n\n    @Override\n    public int getDurability() {\n        return 1500;\n    }\n\n    @Override\n    public float getMiningSpeedMultiplier() {\n        return 7.0F;\n    }\n\n    @Override\n    public float getAttackDamage() {\n        return 3.0F;\n    }\n\n    @Override\n    public int getMiningLevel() {\n        return BlockTags.NEEDS_IRON_TOOL.id().hashCode();\n    }\n\n    @Override\n    public int getEnchantability() {\n        return 18;\n    }\n\n    @Override\n    public Ingredient getRepairIngredient() {\n        return Ingredient.ofItems(ModItems.GUIDITE_INGOT);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Entity Data Serialization in Fabric\nDESCRIPTION: Implementation of writeNbt method in CounterBlockEntity to save the clicks count to NBT data when the game saves, ensuring persistence across game sessions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entities.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void writeNbt(NbtCompound nbt) {\n    nbt.putInt(\"clicks\", clicks);\n    super.writeNbt(nbt);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Item Model JSON for Minecraft\nDESCRIPTION: Defines the model JSON for the custom item. It uses the 'item/generated' parent model and specifies the texture to use.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/first-item.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/suspicious_substance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tool Material in Java\nDESCRIPTION: Creates a custom tool material class called GuiditeMaterial that implements ToolMaterial. It defines properties such as durability, mining speed, attack damage, mining level, enchantability, and repair ingredient.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-tools.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class GuiditeMaterial implements ToolMaterial {\n    public static final GuiditeMaterial INSTANCE = new GuiditeMaterial();\n\n    @Override\n    public int getDurability() {\n        return 1500;\n    }\n\n    @Override\n    public float getMiningSpeedMultiplier() {\n        return 7.0F;\n    }\n\n    @Override\n    public float getAttackDamage() {\n        return 3.0F;\n    }\n\n    @Override\n    public int getMiningLevel() {\n        return BlockTags.NEEDS_IRON_TOOL.id().hashCode();\n    }\n\n    @Override\n    public int getEnchantability() {\n        return 18;\n    }\n\n    @Override\n    public Ingredient getRepairIngredient() {\n        return Ingredient.ofItems(ModItems.GUIDITE_INGOT);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Item Group Registration in Fabric\nDESCRIPTION: Method for registering the custom item group during mod initialization, creating the item group with specific display properties including the icon item and translation key.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-item-groups.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void registerItems() {\n    Registry.register(Registries.ITEM, new Identifier(\"fabric_docs_reference\", \"ruby\"), RUBY);\n    Registry.register(Registries.ITEM, new Identifier(\"fabric_docs_reference\", \"ruby_block\"), RUBY_BLOCK);\n    \n    Registry.register(Registries.ITEM_GROUP, ITEM_GROUP, FabricItemGroup.builder()\n            .icon(() -> new ItemStack(RUBY))\n            .displayName(Text.translatable(\"itemGroup.fabric_docs_reference\"))\n            .build());\n    \n    registerItemGroup();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FoodComponent with Properties in Java\nDESCRIPTION: Demonstrates creating a complete food item with custom properties including hunger value, saturation modifier, always edible flag, snack designation, and status effects.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/food.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final FoodComponent SUSPICIOUS_SUBSTANCE_COMPONENT = new FoodComponent.Builder()\n    .hunger(4)\n    .saturationModifier(0.3f)\n    .alwaysEdible()\n    .snack()\n    .statusEffect(new StatusEffectInstance(StatusEffects.POISON, 6 * 20, 1), 1f)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Poisonous Apple Item Implementation\nDESCRIPTION: Demonstrates creating a custom food item with advanced properties including always being edible, being classified as a snack, and applying a poison effect when consumed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/food.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item POISONOUS_APPLE = ModRegistry.register(\"poisonous_apple\", new Item(new Item.Settings().food(\n    new FoodComponent.Builder()\n        .alwaysEdible()\n        .snack()\n        .statusEffect(new StatusEffectInstance(StatusEffects.POISON, 120, 1), 1.0f)\n        .build()\n)));\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Potion and Brewing Recipe in Fabric Mod\nDESCRIPTION: This code demonstrates how to register a custom potion and its brewing recipe in a Fabric mod. It uses the FabricBrewingRecipeRegistryBuilder.BUILD event to register the potion using BrewingRecipeRegistry.registerPotionRecipe method, specifying the input potion, ingredient item, and output potion.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/potions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitialize() {\n    TATER_POTION = Registry.register(\n            Registries.POTION,\n            TATER_POTION_KEY,\n            new Potion(new StatusEffectInstance(TATER_EFFECT, 20 * 60, 0)));\n\n    FabricBrewingRecipeRegistryBuilder.BUILD.register((recipeRegistry) -> {\n        recipeRegistry.registerPotionRecipe(\n                Registries.POTION.getEntry(Potions.AWKWARD).orElseThrow(),\n                Items.POTATO,\n                TATER_POTION\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Potion and Brewing Recipe in Fabric Mod\nDESCRIPTION: This code demonstrates how to register a custom potion and its brewing recipe in a Fabric mod. It uses the FabricBrewingRecipeRegistryBuilder.BUILD event to register the potion using BrewingRecipeRegistry.registerPotionRecipe method, specifying the input potion, ingredient item, and output potion.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/potions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitialize() {\n    TATER_POTION = Registry.register(\n            Registries.POTION,\n            TATER_POTION_KEY,\n            new Potion(new StatusEffectInstance(TATER_EFFECT, 20 * 60, 0)));\n\n    FabricBrewingRecipeRegistryBuilder.BUILD.register((recipeRegistry) -> {\n        recipeRegistry.registerPotionRecipe(\n                Registries.POTION.getEntry(Potions.AWKWARD).orElseThrow(),\n                Items.POTATO,\n                TATER_POTION\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Server Packet Receiver\nDESCRIPTION: Shows how to set up a global packet receiver on the server side to handle custom packets. The example demonstrates receiving and processing a packet to apply a glowing effect to entities when interacted with using a Poisonous Potato.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/networking.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nServerPlayNetworking.registerGlobalReceiver(USE_ON_ENTITY_PACKET_ID, (server, player, handler, buf, responseSender) -> {\n    var targetEntityId = buf.readInt();\n    server.execute(() -> {\n        var targetEntity = player.getWorld().getEntityById(targetEntityId);\n        if (targetEntity == null) return;\n        if (!(targetEntity instanceof LivingEntity livingEntity)) return;\n        if (player.distanceTo(targetEntity) > 5) return;\n        livingEntity.addStatusEffect(new StatusEffectInstance(StatusEffects.GLOWING, 200));\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Block with Block Entity in Fabric\nDESCRIPTION: Implementation of CounterBlock that provides a BlockEntity. This class defines the block behavior, handles right-clicks to increment the counter, and configures the block entity ticker.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/block-entities.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.block.custom;\n\nimport com.example.docs.block.entity.ModBlockEntities;\nimport com.example.docs.block.entity.custom.CounterBlockEntity;\nimport net.minecraft.block.BlockRenderType;\nimport net.minecraft.block.BlockState;\nimport net.minecraft.block.BlockWithEntity;\nimport net.minecraft.block.entity.BlockEntity;\nimport net.minecraft.block.entity.BlockEntityTicker;\nimport net.minecraft.block.entity.BlockEntityType;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.ActionResult;\nimport net.minecraft.util.Hand;\nimport net.minecraft.util.hit.BlockHitResult;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.world.World;\nimport org.jetbrains.annotations.Nullable;\n\npublic class CounterBlock extends BlockWithEntity {\n    public CounterBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit) {\n        if (world.isClient) {\n            return ActionResult.SUCCESS;\n        }\n\n        BlockEntity blockEntity = world.getBlockEntity(pos);\n        if (!(blockEntity instanceof CounterBlockEntity counterBlockEntity)) {\n            return ActionResult.PASS;\n        }\n\n        counterBlockEntity.incrementClicks();\n        player.sendMessage(Text.translatable(\"block.tutorial.counter_block.clicks\", counterBlockEntity.getClicks()), false);\n\n        return ActionResult.SUCCESS;\n    }\n\n    @Nullable\n    @Override\n    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(World world, BlockState state, BlockEntityType<T> type) {\n        return checkType(type, ModBlockEntities.COUNTER_BLOCK_ENTITY, CounterBlockEntity::tick);\n    }\n\n    @Override\n    public BlockRenderType getRenderType(BlockState state) {\n        return BlockRenderType.MODEL;\n    }\n\n    @Nullable\n    @Override\n    public BlockEntity createBlockEntity(BlockPos pos, BlockState state) {\n        return new CounterBlockEntity(pos, state);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Status Effect to Entity in Java\nDESCRIPTION: Shows how to programmatically apply a status effect to an entity using the addStatusEffect method. It creates a StatusEffectInstance with specified parameters and applies it to the player.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void applyTaterEffect(PlayerEntity player) {\n    StatusEffectInstance effect = new StatusEffectInstance(\n            FabricDocsReferenceEffects.TATER,\n            200,    // Duration (in ticks)\n            0,      // Amplifier\n            false,  // Ambient\n            true,   // Visible (particles)\n            true    // Icon visible\n    );\n\n    player.addStatusEffect(effect);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Widget to a Screen in Java\nDESCRIPTION: This snippet demonstrates how to add a custom widget to a Minecraft screen. It initializes the widget with position, size, and text, then adds it to the screen using the addDrawableChild method within the init method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void init() {\n    super.init();\n    \n    // Add our custom widget to the screen\n    CustomWidget customWidget = new CustomWidget(\n        width / 2 - 50, // X position (centered)\n        height / 2 - 10, // Y position (centered)\n        100, // Width\n        20, // Height\n        Text.of(\"Custom Widget\") // Text to display\n    );\n    \n    addDrawableChild(customWidget);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Status Effect in Java\nDESCRIPTION: Demonstrates how to register a custom status effect using Registry.register in the mod's initializer. The effect is registered with a specific identifier and instance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/effects.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n:::1\npublic class FabricDocsReferenceEffects implements ModInitializer {\n    /*\n     * An instance of our new effect.\n     */\n    public static final StatusEffect TATER = new TaterEffect();\n\n    @Override\n    public void onInitialize() {\n        Registry.register(Registries.STATUS_EFFECT, new Identifier(\"fabric-docs-reference\", \"tater\"), TATER);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Armor Item Model in JSON\nDESCRIPTION: This JSON snippet defines the model for an armor item (helmet in this case). It specifies the parent model and the texture to be used for the item representation in the inventory.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-armor.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_helmet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Simple Client-Side Sounds with PositionedSoundInstance in Fabric\nDESCRIPTION: Demonstrates how to play a simple sound on the client side using MinecraftClient's SoundManager and PositionedSoundInstance. This approach is suitable for UI elements or one-time sound effects.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// For a single sound event, this allows playing a sound at a given position with custom pitch and volume\nMinecraftClient.getInstance().getSoundManager().play(\n    PositionedSoundInstance.master(SoundEvents.UI_BUTTON_CLICK, 1.0F, 1.0F)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumable Component with Status Effects in Java\nDESCRIPTION: This snippet shows how to implement a ConsumableComponent to add status effects to food items when consumed. It creates a component that applies a status effect to the player with specified duration, amplifier, and chance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/food.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final ConsumableComponent POISONOUS_COMPONENT = ConsumableComponent.builder()\n    .statusEffect(new StatusEffectInstance(StatusEffects.POISON, 120, 1), 1.0f)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Potion in Java for Fabric Mod\nDESCRIPTION: This snippet shows how to declare a field for a custom Potion instance in a Fabric mod. It demonstrates creating a new Potion with a custom StatusEffectInstance, specifying the effect type, duration, and amplifier.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/potions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferencePotions implements ModInitializer {\n    public static final RegistryKey<Potion> TATER_POTION_KEY =\n            RegistryKey.of(RegistryKeys.POTION, new Identifier(\"fabric-docs-reference\", \"tater_potion\"));\n\n    // This field will be initialized during onInitialize\n    public static RegistryEntry<Potion> TATER_POTION;\n\n    public static final RegistryKey<StatusEffect> TATER_EFFECT_KEY =\n            RegistryKey.of(RegistryKeys.STATUS_EFFECT, new Identifier(\"fabric-docs-reference\", \"tater_effect\"));\n\n    public static final StatusEffect TATER_EFFECT = new TaterStatusEffect();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Armor Items in Fabric\nDESCRIPTION: Demonstrates registering a complete set of armor items (helmet, chestplate, leggings, boots) using the custom armor material and setting appropriate durability values.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-armor.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item GUIDITE_HELMET = registerItem(\"guidite_helmet\",\n        new ArmorItem(\n                ModArmorMaterials.GUIDITE.value(),\n                ArmorItem.Type.HELMET,\n                new Item.Settings().maxDamage(ModArmorMaterials.ARMOR_DURABILITY_FACTOR * ModArmorMaterials.BASE_DURABILITY_HELMET)\n        ));\n\npublic static final Item GUIDITE_CHESTPLATE = registerItem(\"guidite_chestplate\",\n        new ArmorItem(\n                ModArmorMaterials.GUIDITE.value(),\n                ArmorItem.Type.CHESTPLATE,\n                new Item.Settings().maxDamage(ModArmorMaterials.ARMOR_DURABILITY_FACTOR * ModArmorMaterials.BASE_DURABILITY_CHESTPLATE)\n        ));\n\npublic static final Item GUIDITE_LEGGINGS = registerItem(\"guidite_leggings\",\n        new ArmorItem(\n                ModArmorMaterials.GUIDITE.value(),\n                ArmorItem.Type.LEGGINGS,\n                new Item.Settings().maxDamage(ModArmorMaterials.ARMOR_DURABILITY_FACTOR * ModArmorMaterials.BASE_DURABILITY_LEGGINGS)\n        ));\n\npublic static final Item GUIDITE_BOOTS = registerItem(\"guidite_boots\",\n        new ArmorItem(\n                ModArmorMaterials.GUIDITE.value(),\n                ArmorItem.Type.BOOTS,\n                new Item.Settings().maxDamage(ModArmorMaterials.ARMOR_DURABILITY_FACTOR * ModArmorMaterials.BASE_DURABILITY_BOOTS)\n        ));\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds on Entity Interaction in Minecraft Fabric\nDESCRIPTION: Example showing how to play sounds when using a custom item on entities and blocks. Uses SoundEvents from vanilla Minecraft for copper block placement and pillager sounds.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/using-sounds.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomSoundItem extends Item {\n    public CustomSoundItem(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public ActionResult useOnEntity(ItemStack stack, PlayerEntity user, LivingEntity entity, Hand hand) {\n        if (!user.getWorld().isClient()) {\n            entity.playSound(SoundEvents.BLOCK_COPPER_PLACE, 1.0f, 1.0f);\n        }\n        return ActionResult.SUCCESS;\n    }\n\n    @Override\n    public ActionResult useOnBlock(ItemUsageContext context) {\n        if (!context.getWorld().isClient()) {\n            context.getWorld().playSound(\n                    null,\n                    context.getBlockPos(),\n                    SoundEvents.ENTITY_PILLAGER_AMBIENT,\n                    SoundCategory.BLOCKS,\n                    1.0f,\n                    1.0f\n            );\n        }\n        return ActionResult.SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom HUD Layer with Color Interpolation in Fabric\nDESCRIPTION: This snippet demonstrates how to register a custom HUD layer using Fabric's HudLayerRegistrationCallback. It creates a colored square that smoothly transitions between colors over time using real-world time measurement.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/hud.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitializeClient() {\n    HudLayerRegistrationCallback.EVENT.register((dispatcher, drawers) -> {\n        drawers.add(new IdentifiedLayer(\n                new Identifier(\"docs\", \"color_square\"),\n                (drawContext, renderTickCounter) -> {\n                    // Current tick delta - this is the \"progress\" between the last tick and the next tick.\n                    float tickDelta = renderTickCounter.getTickDelta(false);\n                    \n                    // Get the current time in milliseconds\n                    long timeMs = Util.getMeasuringTimeMs();\n                    \n                    // We'll use this to lerp between colors\n                    float progress = (float) Math.sin(timeMs / 1000.0) * 0.5f + 0.5f;\n                    \n                    // Interpolate between red and blue\n                    int color = MathHelper.lerp(\n                            progress,\n                            0xFF0000FF, // Red (ARGB)\n                            0xFFFF0000  // Blue (ARGB)\n                    );\n                    \n                    // Draw a 20x20 square at coordinates (10, 10)\n                    drawContext.fill(10, 10, 30, 30, color);\n                }\n        ));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Widgets to a Screen in Java\nDESCRIPTION: This snippet demonstrates how to add a custom widget to a Minecraft screen by using the addDrawableChild method inside the init method of a Screen class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void init() {\n    super.init();\n    \n    // Add a custom widget to the screen\n    // Positioned at the center of the screen\n    this.addDrawableChild(new CustomWidget(\n        width / 2 - 50, // x position\n        height / 2 - 10, // y position\n        100, // width\n        20, // height\n        Text.literal(\"Custom Widget\") // widget text\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Server-to-Client Payload\nDESCRIPTION: This code defines a custom payload for sending data from server to client. It creates a Java Record that implements CustomPayload and specifies how to serialize/deserialize the payload's data using a PacketCodec.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/networking.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic record SummonLightningS2CPayload(BlockPos pos) implements CustomPayload {\n    public static final Identifier ID = new Identifier(\"fabric-docs-reference\", \"summon_lightning\");\n    public static final CustomPayload.Id<SummonLightningS2CPayload> PACKET_ID = new CustomPayload.Id<>(ID);\n    public static final PacketCodec<SummonLightningS2CPayload> CODEC = PacketCodec.create(SummonLightningS2CPayload::write, SummonLightningS2CPayload::new);\n\n    @Override\n    public Id<?> getId() {\n        return PACKET_ID;\n    }\n    \n    // Implementation details...\n}\n```\n\n----------------------------------------\n\nTITLE: Using HudRenderCallback with deltaTick for Animated HUD Elements in Java\nDESCRIPTION: This code snippet demonstrates how to register a HudRenderCallback in Fabric API to render a color-changing text on the Minecraft HUD. It uses deltaTick to animate the color over time, creating a pulsing effect.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/rendering/hud.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.rendering;\n\nimport net.fabricmc.api.ClientModInitializer;\nimport net.fabricmc.fabric.api.client.rendering.v1.HudRenderCallback;\nimport net.minecraft.client.gui.DrawContext;\nimport net.minecraft.text.Text;\n\npublic class HudRenderingEntrypoint implements ClientModInitializer {\n    private float deltaTickManager = 0;\n\n    @Override\n    public void onInitializeClient() {\n        // Register the HUD renderer\n        HudRenderCallback.EVENT.register((DrawContext drawContext, float deltaTick) -> {\n            // Add the delta tick to the manager\n            deltaTickManager += deltaTick;\n\n            // Clamp the delta tick manager to prevent it from getting too large\n            if (deltaTickManager > 10) {\n                deltaTickManager = 0;\n            }\n\n            // Get a value between 0 and 1 based on the delta tick manager\n            // This will be used to lerp the color\n            float alpha = (float) Math.abs(Math.sin(deltaTickManager));\n\n            // Get the width and height of the screen\n            int width = drawContext.getScaledWindowWidth();\n            int height = drawContext.getScaledWindowHeight();\n\n            // Draw the text with the lerped color\n            drawContext.drawText(\n                    drawContext.getTextRenderer(),\n                    Text.literal(\"Hello, world!\"),\n                    width / 2 - drawContext.getTextRenderer().getWidth(\"Hello, world!\") / 2,\n                    height / 2,\n                    0xFF000000 | (int) (alpha * 255) << 16 | (int) (alpha * 255) << 8 | (int) (alpha * 255),\n                    true\n            );\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Block Item Model JSON Configuration\nDESCRIPTION: Item model definition for a block that uses the block model as its parent. This ensures the item representation of the block appears correctly in inventories and when held in hand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"fabric-docs-reference:block/condensed_dirt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HudRenderCallback with Color Lerping in Java\nDESCRIPTION: This code snippet demonstrates how to register a HudRenderCallback event and use the deltaTick parameter to create a color lerping effect on the HUD. It uses a DeltaTickManager to accumulate time and MathHelper for color interpolation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/hud.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n:::1\nprivate static final DeltaTickManager deltaTickManager = new DeltaTickManager();\n\npublic static void onInitializeClient() {\n    HudRenderCallback.EVENT.register((drawContext, tickDelta) -> {\n        deltaTickManager.accumulate(tickDelta);\n\n        float time = deltaTickManager.getDeltaTick() % 1.0f;\n\n        int color = MathHelper.lerp(time, 0xFF0000, 0x0000FF);\n\n        drawContext.drawText(MinecraftClient.getInstance().textRenderer, \"Hello, World!\", 10, 10, color, true);\n    });\n}\n:::\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Status Effect in Java\nDESCRIPTION: Registers the custom 'Tater' status effect using Registry.register in the mod initializer.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/entities/effects.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceEffects implements ModInitializer {\n    /*\n     * An instance of our new effect\n     */\n    public static final StatusEffect TATER = new TaterEffect();\n\n    @Override\n    public void onInitialize() {\n        /*\n         * Register our new effect\n         */\n        Registry.register(Registries.STATUS_EFFECT, new Identifier(\"fabric-docs-reference\", \"tater\"), TATER);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Armor Items in Java\nDESCRIPTION: This snippet shows how to create armor items using the custom ArmorMaterial. It includes the creation of helmet, chestplate, leggings, and boots items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-armor.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item GUIDITE_HELMET = new ArmorItem(GuiditeArmorMaterial.GUIDITE, ArmorItem.Type.HELMET, new FabricItemSettings());\npublic static final Item GUIDITE_CHESTPLATE = new ArmorItem(GuiditeArmorMaterial.GUIDITE, ArmorItem.Type.CHESTPLATE, new FabricItemSettings());\npublic static final Item GUIDITE_LEGGINGS = new ArmorItem(GuiditeArmorMaterial.GUIDITE, ArmorItem.Type.LEGGINGS, new FabricItemSettings());\npublic static final Item GUIDITE_BOOTS = new ArmorItem(GuiditeArmorMaterial.GUIDITE, ArmorItem.Type.BOOTS, new FabricItemSettings());\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Potion for Brewing in Fabric\nDESCRIPTION: Registers the custom potion using FabricBrewingRecipeRegistryBuilder.BUILD event. This sets up the brewing recipe for the potion using a specific input potion, ingredient, and the custom output potion.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/potions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitialize() {\n    Registry.register(Registries.POTION, TATER_POTION_KEY, TATER_POTION);\n\n    FabricBrewingRecipeRegistryBuilder.BUILD.register(ctx -> {\n        BrewingRecipeRegistry.registerPotionRecipe(\n                Potions.WATER,\n                Items.POTATO,\n                TATER_POTION\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Armor Material Registration Method in Java\nDESCRIPTION: Method to register custom armor materials with all required properties including defense points, enchantability, equip sound, repair ingredient, toughness, knockback resistance, and dyeability.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/custom-armor.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Registers a new armor material.\n *\n * @param name                     The name of the material.\n * @param defensePoints             The defense points for each armor type.\n * @param enchantability            The enchantability of the armor.\n * @param equipmentSound            The sound that plays when the armor is equipped.\n * @param repairingIngredientSupplier The ingredient used to repair the armor.\n * @param toughness                 The toughness of the armor.\n * @param knockbackResistance       The knockback resistance of the armor.\n * @param dyeable                   Whether the armor is dyeable.\n * @return The registered armor material.\n */\nprivate static ArmorMaterial register(\n        String name,\n        int[] defensePoints,\n        int enchantability,\n        RegistryEntry<SoundEvent> equipmentSound,\n        Supplier<Ingredient> repairingIngredientSupplier,\n        float toughness,\n        float knockbackResistance,\n        boolean dyeable\n) {\n    Identifier identifier = new Identifier(FabricDocsReference.MOD_ID, name);\n    \n    return new CustomArmorMaterial(\n            identifier.toString(),\n            defensePoints,\n            enchantability,\n            equipmentSound,\n            repairingIngredientSupplier,\n            toughness,\n            knockbackResistance,\n            dyeable\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Widget to Screen in Fabric MC\nDESCRIPTION: Demonstrates how to add a custom widget to a Minecraft screen during initialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void init() {\n    super.init();\n    addDrawableChild(new CustomWidget(10, 10, 100, 20));\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Client-Side Commands in Fabric\nDESCRIPTION: Shows how to register client-side commands using ClientCommandManager in Fabric.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -> {\n    dispatcher.register(ClientCommandManager.literal(\"client_command\").executes(context -> {\n        context.getSource().sendFeedback(Text.literal(\"Hello from client command!\"));\n        return Command.SINGLE_SUCCESS;\n    }));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamicSoundManager Singleton in Java\nDESCRIPTION: Creation of a DynamicSoundManager class using the Singleton design pattern to manage custom SoundInstances on the client side.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class DynamicSoundManager {\n    private static DynamicSoundManager INSTANCE;\n    private final MinecraftClient client;\n    private final List<AbstractDynamicSoundInstance> playingSounds = new ArrayList<>();\n\n    private DynamicSoundManager(MinecraftClient client) {\n        this.client = client;\n    }\n\n    public static DynamicSoundManager getInstance() {\n        if (INSTANCE == null) {\n            INSTANCE = new DynamicSoundManager(MinecraftClient.getInstance());\n        }\n        return INSTANCE;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Generation Entrypoint Class (Java)\nDESCRIPTION: This Java class serves as the entrypoint for data generation. It implements FabricDataGenerator.DataGeneratorEntrypoint and sets up the onInitializeDataGenerator method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/setup.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.datagen;\n\nimport net.fabricmc.fabric.api.datagen.v1.DataGeneratorEntrypoint;\nimport net.fabricmc.fabric.api.datagen.v1.FabricDataGenerator;\n\npublic class FabricDocsReferenceDataGenerator implements DataGeneratorEntrypoint {\n\t@Override\n\tpublic void onInitializeDataGenerator(FabricDataGenerator fabricDataGenerator) {\n\t\t// We'll add providers here later\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Class for Codec Serialization in Java\nDESCRIPTION: This snippet defines a custom class 'CoolBeansClass' with fields that will be serialized using a custom Codec. It includes getters for each field to be used in the Codec construction.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CoolBeansClass {\n\n    private final int beansAmount;\n    private final Item beanType;\n    private final List<BlockPos> beanPositions;\n\n    public CoolBeansClass(int beansAmount, Item beanType, List<BlockPos> beanPositions) {...}\n\n    public int getBeansAmount() { return this.beansAmount; }\n    public Item getBeanType() { return this.beanType; }\n    public List<BlockPos> getBeanPositions() { return this.beanPositions; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Status Effect in Fabric Initializer\nDESCRIPTION: Demonstrates how to register a custom status effect in the Minecraft registry system using Fabric. The code registers the 'Tater' effect with a specific identifier.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/effects.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceEffects implements ModInitializer {\n\t// Create a status effect instance\n\tpublic static final StatusEffect TATER = new TaterEffect();\n\n\t@Override\n\tpublic void onInitialize() {\n\t\t// Register the status effect\n\t\tRegistry.register(Registries.STATUS_EFFECT, new Identifier(\"fabric-docs-reference\", \"tater\"), TATER);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tool Items in Java\nDESCRIPTION: Shows how to create custom tool items using the previously defined ToolMaterial and set their attack damage and speed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-tools.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item GUIDITE_SWORD = registerItem(\"guidite_sword\", new SwordItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new FabricItemSettings()));\npublic static final Item GUIDITE_SHOVEL = registerItem(\"guidite_shovel\", new ShovelItem(GUIDITE_TOOL_MATERIAL, 1f, 1f, new FabricItemSettings()));\npublic static final Item GUIDITE_PICKAXE = registerItem(\"guidite_pickaxe\", new PickaxeItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new FabricItemSettings()));\npublic static final Item GUIDITE_AXE = registerItem(\"guidite_axe\", new AxeItem(GUIDITE_TOOL_MATERIAL, 1f, 1f, new FabricItemSettings()));\npublic static final Item GUIDITE_HOE = registerItem(\"guidite_hoe\", new HoeItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new FabricItemSettings()));\n```\n\n----------------------------------------\n\nTITLE: Drawing Individual Lines with DrawContext\nDESCRIPTION: Demonstrates drawing horizontal and vertical lines using DrawContext line drawing methods\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/draw-context.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ncontext.drawHorizontalLine(10, 60, 10, 0xFF0000FF);\ncontext.drawVerticalLine(10, 10, 60, 0xFF0000FF);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Counter Item in Java\nDESCRIPTION: Implementation of a CounterItem class that uses the custom click count component. This item displays its usage count in the tooltip and increments the counter when used.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.item.custom;\n\nimport com.example.docs.component.ModComponents;\nimport net.minecraft.client.item.TooltipContext;\nimport net.minecraft.client.item.TooltipType;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.item.Item;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.Formatting;\nimport net.minecraft.util.Hand;\nimport net.minecraft.util.TypedActionResult;\nimport net.minecraft.world.World;\n\nimport java.util.List;\n\npublic class CounterItem extends Item {\n\n    public CounterItem(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n        ItemStack stack = user.getStackInHand(hand);\n\n        if (!world.isClient) {\n            int currentCount = stack.getOrDefault(ModComponents.CLICK_COUNT_COMPONENT, 0);\n            stack.set(ModComponents.CLICK_COUNT_COMPONENT, currentCount + 1);\n        }\n\n        return TypedActionResult.success(stack);\n    }\n\n    @Override\n    public void appendTooltip(ItemStack stack, TooltipContext context, List<Text> tooltip, TooltipType type) {\n        if (stack.contains(ModComponents.CLICK_COUNT_COMPONENT)) {\n            int count = stack.get(ModComponents.CLICK_COUNT_COMPONENT);\n            tooltip.add(Text.translatable(\"item.fabric-docs-reference.counter.info\", count).formatted(Formatting.GOLD));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Armor Material in Java\nDESCRIPTION: Example of registering a custom armor material called 'Guidite' with specific properties for defense, enchantability, repair ingredients, and other attributes.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/custom-armor.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final ArmorMaterial GUIDITE = register(\n        \"guidite\",\n        new int[]{3, 6, 8, 3}, // Defense points for each armor type\n        15, // Enchantability\n        SoundEvents.ITEM_ARMOR_EQUIP_IRON, // Equipment sound\n        () -> Ingredient.ofItems(ModItems.GUIDITE), // Repairing ingredient\n        0.0f, // Toughness\n        0.0f, // Knockback resistance\n        false // Dyeable\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Shapeless Recipes in Fabric\nDESCRIPTION: Creates shapeless crafting recipes using the ShapelessRecipeJsonBuilder. This example shows how to create a recipe that crafts gem blocks back into gems.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/recipes.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// This will create a recipe that turns the ruby block back into 9 rubies\nShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, FabricDocsReferenceItemsAndBlocks.RUBY, 9)\n        .input(FabricDocsReferenceItemsAndBlocks.RUBY_BLOCK)\n        .criterion(hasItem(FabricDocsReferenceItemsAndBlocks.RUBY_BLOCK),\n                conditionsFromItem(FabricDocsReferenceItemsAndBlocks.RUBY_BLOCK))\n        .offerTo(exporter);\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Advancement with Multiple Criteria and Rewards\nDESCRIPTION: Shows how to create an advancement with multiple criteria, custom rewards, and a parent advancement relationship.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Create an advancement with multiple criteria and rewards\nAdvancement.Builder.create()\n        .display(\n                // Use the cobblestone block as the icon\n                Items.COBBLESTONE,\n                // Display title\n                Text.literal(\"Stone Age\"),\n                // Description\n                Text.literal(\"Get some stones!\"),\n                // No background because this isn't a root advancement\n                null,\n                // This is a challenge, hide it until it's almost ready, and celebrate completion\n                AdvancementFrame.CHALLENGE, true, true, false\n        )\n        // First criterion: get cobblestone\n        .criterion(\n                \"get_cobblestone\",\n                InventoryChangedCriterion.Conditions.items(Items.COBBLESTONE)\n        )\n        // Second criterion: get stone\n        .criterion(\n                \"get_stone\",\n                InventoryChangedCriterion.Conditions.items(Items.STONE)\n        )\n        // Use custom requirements: need both criteria to complete the advancement\n        .requirements(AdvancementRequirements.allOf(List.of(\"get_cobblestone\", \"get_stone\")))\n        // Add rewards: 20 XP points\n        .rewards(AdvancementRewards.Builder.experience(20).build())\n        // Set parent to our dirt advancement\n        .parent(getDirt)\n        .build(consumer, \"fabric-docs-reference\" + \"/get_stones\");\n```\n\n----------------------------------------\n\nTITLE: Implementing AbstractDynamicSoundInstance Class in Java\nDESCRIPTION: Abstract class for custom dynamic SoundInstances. It includes properties for transition states, durations, volume and pitch limits, and tick handlers for sound progress tracking.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class AbstractDynamicSoundInstance extends TickableSoundInstance {\n    protected final DynamicSoundSource source;\n    protected final SoundInstanceCallback callback;\n    protected TransitionState state = TransitionState.INTRO;\n    protected int introDuration = 20;\n    protected int outroDuration = 20;\n    protected float minVolume = 0.0F;\n    protected float maxVolume = 1.0F;\n    protected float minPitch = 0.5F;\n    protected float maxPitch = 2.0F;\n    protected boolean finished = false;\n    protected int ticksActive = 0;\n    protected int ticksTotal = 0;\n\n    protected enum TransitionState {\n        INTRO,\n        LOOP,\n        OUTRO\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Modulation Methods in Java\nDESCRIPTION: Provides example methods for sound modulation using normalized values and linear interpolation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprotected float getTransitionVolume() {\n    if (this.transitionState == TransitionState.START) {\n        return MathHelper.lerp((float) this.ticksPlayed / this.startTicks, this.minVolume, this.maxVolume);\n    } else if (this.transitionState == TransitionState.END) {\n        return MathHelper.lerp((float) this.ticksPlayed / this.endTicks, this.maxVolume, this.minVolume);\n    }\n    return this.maxVolume;\n}\n\nprotected float getStressPitch(float stress) {\n    return MathHelper.lerp(stress, this.minPitch, this.maxPitch);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SoundInstance in Java\nDESCRIPTION: Example implementation of a custom SoundInstance class (EngineSoundInstance) that extends AbstractDynamicSoundInstance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class EngineSoundInstance extends AbstractDynamicSoundInstance {\n    public EngineSoundInstance(DynamicSoundSource source, SoundEvent sound, SoundCategory category, Consumer<AbstractDynamicSoundInstance> finishCallback) {\n        super(source, sound, category, finishCallback);\n    }\n\n    @Override\n    public boolean shouldAlwaysPlay() {\n        return true;\n    }\n\n    @Override\n    public boolean canPlay() {\n        return !this.source.isSilent();\n    }\n\n    @Override\n    public void tick() {\n        super.tick();\n\n        if (this.source.shouldStopSound()) {\n            if (this.transitionState != TransitionState.END) {\n                this.transitionState = TransitionState.END;\n                this.ticksPlayed = 0;\n            }\n        }\n    }\n\n    @Override\n    public float getVolume() {\n        return this.getTransitionVolume();\n    }\n\n    @Override\n    public float getPitch() {\n        return this.getStressPitch(this.source.getSoundStress());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Compostable Property\nDESCRIPTION: Example of making an item compostable using Fabric API's CompostingChanceRegistry\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/first-item.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nCompostingChanceRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 0.5f);\n```\n\n----------------------------------------\n\nTITLE: Advanced Component Usage Example in Java\nDESCRIPTION: Demonstrates reading, setting, checking, and removing composite components with multiple properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// read values of component\nMyCustomComponent comp = stack.get(ModComponents.MY_CUSTOM_COMPONENT);\nfloat temp = comp.temperature();\nboolean burnt = comp.burnt();\n\n// set new component values\nstack.set(ModComponents.MY_CUSTOM_COMPONENT, new MyCustomComponent(8.4f, true));\n\n// check for component\nif (stack.contains(ModComponents.MY_CUSTOM_COMPONENT)) {\n    // do something\n}\n\n// remove component\nstack.remove(ModComponents.MY_CUSTOM_COMPONENT);\n```\n\n----------------------------------------\n\nTITLE: Serializing a BlockPos to JSON using Codec in Java\nDESCRIPTION: This snippet demonstrates how to serialize a BlockPos object to a JsonElement using the BlockPos.CODEC and JsonOps. It also shows how to handle the resulting DataResult.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBlockPos pos = new BlockPos(1, 2, 3);\n\n// Serialize the BlockPos to a JsonElement\nDataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);\n```\n\n----------------------------------------\n\nTITLE: Playing Simple Client-Side Sounds with PositionedSoundInstance in Fabric\nDESCRIPTION: Demonstrates how to play a simple UI sound on the client side using the PositionedSoundInstance class. This approach is suitable for basic one-time sound effects triggered by UI interactions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMinecraftClient client = MinecraftClient.getInstance();\nSoundManager soundManager = client.getSoundManager();\n\nPositionedSoundInstance sound = PositionedSoundInstance.master(SoundEvents.UI_BUTTON_CLICK, 1.0F);\nsoundManager.play(sound);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Component Values in Item Settings\nDESCRIPTION: Shows how to set default values for a custom component when registering a new item.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item COUNTER = register(new CounterItem(\n    new Item.Settings().component(ModComponents.MY_CUSTOM_COMPONENT, new MyCustomComponent(0.0f, false))\n), \"counter\");\n```\n\n----------------------------------------\n\nTITLE: Creating an Armor Material Registry Method in Fabric\nDESCRIPTION: Defines a method for registering custom armor materials with all necessary properties including defense points, enchantability, sounds, and repair ingredients.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-armor.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ModArmorMaterials {\n    public static final String MOD_ID = \"fabric-docs-reference\";\n\n    public static void initialize() {}\n\n    private static RegistryEntry<ArmorMaterial> registerArmorMaterial(\n            String name,\n            Map<ArmorMaterial.ArmorType, Integer> defensePoints,\n            int enchantability,\n            RegistryEntry<SoundEvent> equipSound,\n            Supplier<Ingredient> repairIngredientSupplier,\n            float toughness,\n            float knockbackResistance,\n            boolean dyeable,\n            int durabilityMultiplier) {\n        ArmorMaterial armorMaterial = new ArmorMaterial(\n                new Identifier(MOD_ID, name),\n                defensePoints,\n                enchantability,\n                equipSound,\n                repairIngredientSupplier,\n                toughness,\n                knockbackResistance,\n                dyeable,\n                durabilityMultiplier\n        );\n\n        return Registry.register(Registries.ARMOR_MATERIAL, new Identifier(MOD_ID, name), armorMaterial);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Command with Subcommand\nDESCRIPTION: Shows how to register a command with a subcommand structure.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"command_one\")\n    .then(CommandManager.literal(\"sub_command_one\").executes(FabricDocsReferenceCommands::executeSubCommandOne)));\n```\n\n----------------------------------------\n\nTITLE: Creating a DynamicSoundSource Interface for Advanced Sound Systems\nDESCRIPTION: Defines an interface that provides necessary data for dynamic sound sources. This abstraction allows the sound system to work with different types of entities and block entities as sound sources.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface DynamicSoundSource {\n    /**\n     * Returns the block position of this sound source.\n     * <p>\n     * The sound will use this position as the default position to play from,\n     * but it can be overridden in specific sound implementations.\n     *\n     * @return The position of this sound source\n     */\n    BlockPos getBlockPos();\n\n    /**\n     * Returns the identifier of this sound source.\n     * <p>\n     * This is used to uniquely identify this sound source,\n     * so sounds can be correctly mapped to their sources.\n     *\n     * @return The identifier of this sound source\n     */\n    Identifier getSoundId();\n\n    /**\n     * Returns the current state of this sound source.\n     * <p>\n     * Can be used to determine if a sound should be playing or not.\n     *\n     * @return The current state\n     */\n    TransitionState getSoundState();\n\n    /**\n     * Returns the volume multiplier of this sound source.\n     * <p>\n     * Can be used to adjust the volume of sounds based on\n     * specific properties of the sound source.\n     *\n     * @return The volume multiplier\n     */\n    float getVolumeMultiplier();\n\n    /**\n     * Returns the pitch multiplier of this sound source.\n     * <p>\n     * Can be used to adjust the pitch of sounds based on\n     * specific properties of the sound source.\n     *\n     * @return The pitch multiplier\n     */\n    float getPitchMultiplier();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SoundInstance in Java\nDESCRIPTION: Example implementation of a custom SoundInstance (EngineSoundInstance) extending AbstractDynamicSoundInstance, with specific conditions for sound interruption and modulation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class EngineSoundInstance extends AbstractDynamicSoundInstance {\n    private final EngineBlockEntity engine;\n\n    public EngineSoundInstance(SoundEvent sound, EngineBlockEntity engine, SoundInstanceCallback callback) {\n        super(sound, SoundCategory.BLOCKS, engine, callback);\n        this.engine = engine;\n    }\n\n    @Override\n    protected boolean shouldContinuePlaying() {\n        return super.shouldContinuePlaying() && engine.isRunning();\n    }\n\n    @Override\n    protected void updateSound() {\n        super.updateSound();\n        volume = lerpValue(minVolume, maxVolume, getTransitionVolume());\n        pitch = lerpValue(minPitch, maxPitch, engine.getStress());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangles with DrawContext in Java\nDESCRIPTION: Demonstrates how to use the DrawContext.fill() method to draw a filled rectangle on the screen.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/draw-context.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncontext.fill(10, 10, 100, 100, 0xFF0000FF);\n```\n\n----------------------------------------\n\nTITLE: Creating Shaped Recipes with Fabric Datagen in Java\nDESCRIPTION: Shows how to define shaped recipes using a string pattern and character mappings. This example creates a recipe for crafting a wooden pickaxe.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/recipes.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, Items.WOODEN_PICKAXE)\n    .pattern(\"###\")\n    .pattern(\" / \")\n    .pattern(\" / \")\n    .input('#', ItemTags.PLANKS)\n    .input('/', Items.STICK)\n    .criterion(hasItem(Items.STICK), conditionsFromItem(Items.STICK))\n    .offerTo(exporter);\n```\n\n----------------------------------------\n\nTITLE: Making an Item Compostable in Fabric\nDESCRIPTION: Shows how to register an item as compostable using Fabric API's CompostingChanceRegistry. The float parameter determines the chance of successful composting.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/first-item.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic static void initialize() {\n    // Add the item to the Ingredients item group\n    ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(content -> {\n        content.add(SUSPICIOUS_SUBSTANCE);\n    });\n    \n    // Make the item compostable\n    CompostingChanceRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 0.65f);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Armor Durability in Java\nDESCRIPTION: Demonstrates how to calculate durability for different armor pieces based on a shared multiplier stored in the armor material.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/custom-armor.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate static final int[] BASE_DURABILITY = {11, 16, 15, 13};\npublic final int getDurability(ArmorItem.Type type) {\n    return BASE_DURABILITY[type.ordinal()] * this.durabilityMultiplier;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Loot Table Loading Events in Java\nDESCRIPTION: Registers a callback for the LootTableEvents.MODIFY event to check when the coal ore loot table is being loaded. This is the first step in adding custom drops to existing loot tables without replacing them.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/events.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Register a callback to modify the coal ore loot table\nLootTableEvents.MODIFY.register((resourceManager, lootManager, id, tableBuilder, source) -> {\n    if (Blocks.COAL_ORE.getLootTableId().equals(id)) {\n```\n\n----------------------------------------\n\nTITLE: Decrementing Item Stack After Successful Use\nDESCRIPTION: This snippet shows how to get the player's current item stack, decrement it by one (consuming an item), and return a success result. This pattern is commonly used when an item should be consumed after use.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/items/custom-item-interactions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nItemStack heldStack = user.getStackInHand(hand);\nheldStack.decrement(1);\nTypedActionResult.success(heldStack);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tool Items in Java\nDESCRIPTION: Demonstrates how to create custom tool items using the defined GuiditeMaterial. It includes examples for creating a sword, pickaxe, axe, shovel, and hoe.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/items/custom-tools.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item GUIDITE_SWORD = registerItem(\"guidite_sword\", new SwordItem(GuiditeMaterial.INSTANCE, 3, -2.4F, new FabricItemSettings()));\npublic static final Item GUIDITE_PICKAXE = registerItem(\"guidite_pickaxe\", new PickaxeItem(GuiditeMaterial.INSTANCE, 1, -2.8F, new FabricItemSettings()));\npublic static final Item GUIDITE_AXE = registerItem(\"guidite_axe\", new AxeItem(GuiditeMaterial.INSTANCE, 6.0F, -3.1F, new FabricItemSettings()));\npublic static final Item GUIDITE_SHOVEL = registerItem(\"guidite_shovel\", new ShovelItem(GuiditeMaterial.INSTANCE, 1.5F, -3.0F, new FabricItemSettings()));\npublic static final Item GUIDITE_HOE = registerItem(\"guidite_hoe\", new HoeItem(GuiditeMaterial.INSTANCE, -2, -1.0F, new FabricItemSettings()));\n```\n\n----------------------------------------\n\nTITLE: Rendering a Triangle Strip to the HUD in Minecraft\nDESCRIPTION: A complete example showing how to render a diamond shape using the BufferBuilder system with TRIANGLE_STRIP draw mode and POSITION_COLOR vertex format. This demonstrates initializing the buffer, setting vertices with positions and colors, and drawing to the HUD.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/basic-concepts.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Environment(EnvType.CLIENT)\npublic class RenderingConceptsEntrypoint implements ClientModInitializer {\n    @Override\n    public void onInitializeClient() {\n        HudRenderCallback.EVENT.register((drawContext, tickDelta) -> {\n            Tessellator tessellator = Tessellator.getInstance();\n            BufferBuilder bufferBuilder = tessellator.begin(VertexFormat.DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);\n\n            Matrix4f positionMatrix = drawContext.getMatrices().peek().getPositionMatrix();\n\n            // First vertex (top)\n            bufferBuilder.vertex(positionMatrix, 20, 20, 0).color(255, 0, 0, 255).next();\n            // Second vertex (left)\n            bufferBuilder.vertex(positionMatrix, 5, 40, 0).color(0, 255, 0, 255).next();\n            // Third vertex (right)\n            bufferBuilder.vertex(positionMatrix, 35, 40, 0).color(0, 0, 255, 255).next();\n            // Fourth vertex (bottom)\n            bufferBuilder.vertex(positionMatrix, 20, 60, 0).color(255, 255, 255, 255).next();\n\n            // At this point, we've added all our vertices, so we can draw it.\n            tessellator.draw();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Counter Block Entity\nDESCRIPTION: Defines a Counter block entity class that extends BlockEntity to store the number of clicks. Includes basic initialization and click tracking functionality.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entities.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CounterBlockEntity extends BlockEntity {\n    public static final BlockEntityType<CounterBlockEntity> COUNTER_BLOCK_ENTITY;\n\n    public CounterBlockEntity(BlockPos pos, BlockState state) {\n        super(COUNTER_BLOCK_ENTITY, pos, state);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Advancement Criterion in Java\nDESCRIPTION: Implements a custom advancement criterion called UseToolCriterion that can be used to detect when players use specific tools. Includes the criterion class and its associated conditions for checking player predicates.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class UseToolCriterion extends AbstractCriterion<UseToolCriterion.Conditions> {\n    public static final Type<UseToolCriterion> TYPE = new Type<>(UseToolCriterion::new);\n\n    @Override\n    public Type<UseToolCriterion> getType() {\n        return TYPE;\n    }\n\n    @Override\n    protected Conditions conditionsFromJson(JsonObject obj, LootContext.EntityTarget playerTarget, DeserializationContext predicateDeserializer) {\n        return new Conditions(EntityPredicate.contextPredicateFromJson(obj, \"player\", predicateDeserializer));\n    }\n\n    // Will be implemented below\n    public void trigger(ServerPlayerEntity player) {\n        // ...\n    }\n\n    public static class Conditions extends AbstractCriterionConditions {\n        private static final ContextAwarePredicate DEFAULT_PREDICATE = ContextAwarePredicate.createEmpty();\n        \n        // Codec for the Conditions class (you can ignore this for now)\n        public static final Codec<Conditions> CODEC = LootContext.EntityTarget.field_44603\n                .get(\"player\")\n                .flatXmap(\n                        type -> Codec.unit(DEFAULT_PREDICATE),\n                        predicate -> DataResult.success(LootContext.EntityTarget.PLAYER)\n                )\n                .xmap(Conditions::new, Conditions::getPlayerPredicate);\n\n        public Conditions(ContextAwarePredicate playerPredicate) {\n            super(playerPredicate);\n        }\n\n        public ContextAwarePredicate getPlayerPredicate() {\n            return this.playerPredicate;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Sound Behavior in Java\nDESCRIPTION: Core logic for dynamic sound behavior, applying various values and behaviors based on the current tick of the instance and its transition state.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprotected void updateSound() {\n    switch (state) {\n        case INTRO:\n            if (ticksActive >= introDuration) {\n                ticksActive = 0;\n                state = TransitionState.LOOP;\n            }\n            break;\n        case LOOP:\n            break;\n        case OUTRO:\n            if (ticksActive >= outroDuration) {\n                stopPlaying();\n            }\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Registry Dispatch - StringyBean Example\nDESCRIPTION: Shows the JSON output format when serializing a StringyBean using the registry dispatch codec system, including the type identifier and type-specific fields.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"example:stringy_bean\",\n  \"stringy_string\": \"This bean is stringy!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Command with Optional Second Argument\nDESCRIPTION: Shows how to implement a command that accepts two optional integer arguments with different execution paths.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/arguments.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCommandManager.argument(\"value\", IntegerArgumentType.integer())\n.then(CommandManager.argument(\"second_value\", IntegerArgumentType.integer()))\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.getSource().sendFeedback(() -> Text.literal(\"Called /command_with_two_args with values = \" + context.getArgument(\"value\", Integer.class) + \", \" + context.getArgument(\"second_value\", Integer.class)), false)\n```\n\n----------------------------------------\n\nTITLE: Registering Client-Side Commands in Fabric\nDESCRIPTION: Demonstrates how to register client-side commands using Fabric API's ClientCommandManager. This should only be used in client-side code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/basics.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -> {\n    dispatcher.register(ClientCommandManager.literal(\"clientcommand\").executes(context -> {\n        ClientCommandSource source = context.getSource();\n        source.sendFeedback(Text.literal(\"Hello from client command!\"));\n        return Command.SINGLE_SUCCESS;\n    }));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tools to Item Group in Java\nDESCRIPTION: Shows how to add the custom tool items to an item group for access in the creative inventory.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/items/custom-tools.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nitemGroup.addAfter(Items.NETHERITE_HOE,\n        GUIDITE_SWORD,\n        GUIDITE_PICKAXE,\n        GUIDITE_AXE,\n        GUIDITE_SHOVEL,\n        GUIDITE_HOE\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Counter Block Entity\nDESCRIPTION: Defines a Counter block entity class that extends BlockEntity to store the number of clicks. Includes basic initialization and click tracking functionality.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entities.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CounterBlockEntity extends BlockEntity {\n    public static final BlockEntityType<CounterBlockEntity> COUNTER_BLOCK_ENTITY;\n\n    public CounterBlockEntity(BlockPos pos, BlockState state) {\n        super(COUNTER_BLOCK_ENTITY, pos, state);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Smelting Recipes with Fabric Datagen in Java\nDESCRIPTION: Demonstrates how to create smelting recipes, including specifying experience rewards and cooking time. This example creates a recipe for smelting raw iron into iron ingots.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/recipes.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCookingRecipeJsonBuilder.create(Ingredient.ofItems(Items.RAW_IRON), RecipeCategory.MISC, Items.IRON_INGOT, 0.7f, 200, RecipeSerializer.SMELTING)\n    .criterion(hasItem(Items.RAW_IRON), conditionsFromItem(Items.RAW_IRON))\n    .offerTo(exporter);\n```\n\n----------------------------------------\n\nTITLE: Registering a Pillar Block in Fabric\nDESCRIPTION: Shows how to register a custom pillar block that can be placed along the X, Y, or Z axis using Minecraft's PillarBlock class. The example creates a 'Condensed Oak Log' block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final Block CONDENSED_OAK_LOG = registerBlock(\"condensed_oak_log\",\n        new PillarBlock(FabricBlockSettings.create().mapColor(MapColor.OAK_TAN).strength(2f)),\n        ModItemGroups.FABRIC_DOCS);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Component Values in Java\nDESCRIPTION: Shows how to set default component values when registering a new item using Item.Settings.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item COUNTER = register(new CounterItem(\n    new Item.Settings().component(ModComponents.MY_CUSTOM_COMPONENT, new MyCustomComponent(0.0f, false))\n), \"counter\");\n```\n\n----------------------------------------\n\nTITLE: Accessing ServerCommandSource in a Command\nDESCRIPTION: Shows how to access the ServerCommandSource from the CommandContext in a command lambda.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCommand<ServerCommandSource> command = context -> {\n    ServerCommandSource source = context.getSource();\n    return 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen with Previous Screen Reference in Minecraft\nDESCRIPTION: Enhanced version of the CustomScreen class that stores a reference to the previous screen. This allows returning to the previous screen when closing the current one, creating a better navigation flow.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.rendering.screens;\n\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.gui.DrawContext;\nimport net.minecraft.client.gui.screen.Screen;\nimport net.minecraft.client.gui.widget.ButtonWidget;\nimport net.minecraft.text.Text;\n\npublic class CustomScreen extends Screen {\n    private final Screen parent;\n\n    public CustomScreen(Text title, Screen parent) {\n        super(title);\n        this.parent = parent;\n    }\n\n    public CustomScreen(Text title) {\n        this(title, null);\n    }\n\n    @Override\n    protected void init() {\n        super.init();\n\n        // Create a label that says \"Hello World!\"\n        // Note: Fabric API adds the TextWidget class.\n        addDrawableChild(new net.fabricmc.fabric.api.client.screen.v1.Screens.TextWidget(\n                Text.literal(\"Hello World!\"),\n                width / 2,\n                height / 2 - 20\n        ));\n\n        // Create a button that says \"Close\"\n        // This button will close the screen when clicked\n        addDrawableChild(ButtonWidget.builder(\n                Text.literal(\"Close\"),\n                button -> close()\n        ).dimensions(\n                width / 2 - 100,\n                height / 2,\n                200, // width\n                20 // height\n        ).build());\n    }\n\n    @Override\n    public void render(DrawContext context, int mouseX, int mouseY, float delta) {\n        // Renders the background\n        renderBackground(context, mouseX, mouseY, delta);\n        // Renders all the drawable children (widgets) - required!\n        super.render(context, mouseX, mouseY, delta);\n    }\n\n    @Override\n    public void close() {\n        // Close the screen - return to the game/previous screen\n        this.client.setScreen(parent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Color Change for Custom Widgets in Java\nDESCRIPTION: This code shows how to modify the rendering of a widget to change its background color when hovered. It uses the isHovered() method from ClickableWidget to determine the widget's state.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void renderWidget(DrawContext context, int mouseX, int mouseY, float delta) {\n    int backgroundColor = isHovered() ? HOVERED_COLOR : NORMAL_COLOR;\n    \n    // Render background\n    context.fill(getX(), getY(), getX() + width, getY() + height, backgroundColor);\n    \n    // Render text\n    int textColor = 0xFFFFFFFF; // White\n    context.drawCenteredTextWithShadow(\n        textRenderer, getMessage(), getX() + width / 2, getY() + (height - textRenderer.fontHeight) / 2, textColor\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Java Class for Codec Example\nDESCRIPTION: Defines a sample Java class (CoolBeansClass) with three fields to demonstrate how to create codecs for custom classes. The class contains bean-related properties including a count, type, and positions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CoolBeansClass {\n\n    private final int beansAmount;\n    private final Item beanType;\n    private final List<BlockPos> beanPositions;\n\n    public CoolBeansClass(int beansAmount, Item beanType, List<BlockPos> beanPositions) {...}\n\n    public int getBeansAmount() { return this.beansAmount; }\n    public Item getBeanType() { return this.beanType; }\n    public List<BlockPos> getBeanPositions() { return this.beanPositions; }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Diamond Shape Using BufferBuilder in Minecraft\nDESCRIPTION: Demonstrates how to render a colored diamond shape on the HUD using BufferBuilder with TRIANGLE_STRIP draw mode and POSITION_COLOR vertex format. The example shows the complete process from getting the Tessellator to drawing the shape.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/basic-concepts.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Environment(EnvType.CLIENT)\npublic class RenderingConceptsEntrypoint implements ClientModInitializer {\n    @Override\n    public void onInitializeClient() {\n        HudRenderCallback.EVENT.register((drawContext, tickDelta) -> {\n            // Get the tessellator\n            Tessellator tessellator = Tessellator.getInstance();\n            // Get the buffer builder\n            BufferBuilder bufferBuilder = tessellator.getBuffer();\n            \n            // Initialize the buffer builder with the vertex format and draw mode\n            bufferBuilder.begin(VertexFormat.DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);\n            \n            // Get the position matrix from the DrawContext\n            Matrix4f positionMatrix = drawContext.getMatrices().peek().getPositionMatrix();\n            \n            // Add the vertices - Remember to follow the vertex format\n            // The vertex format is POSITION_COLOR, so we need to add position and color in that order\n            bufferBuilder.vertex(positionMatrix, 20, 20, 0).color(255, 0, 0, 255).next(); // red\n            bufferBuilder.vertex(positionMatrix, 5, 40, 0).color(0, 255, 0, 255).next(); // green\n            bufferBuilder.vertex(positionMatrix, 35, 40, 0).color(0, 0, 255, 255).next(); // blue\n            bufferBuilder.vertex(positionMatrix, 20, 60, 0).color(255, 255, 255, 255).next(); // white\n            \n            // Draw the buffer\n            tessellator.draw();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Item Model Description JSON for Minecraft\nDESCRIPTION: Specifies the item model description JSON, which tells Minecraft where to find the item's model file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/first-item.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": {\n    \"type\": \"minecraft:model\",\n    \"model\": \"fabric-docs-reference:item/suspicious_substance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Client-Side Commands in Fabric\nDESCRIPTION: Demonstrates how to register client-side commands using the ClientCommandRegistrationCallback from Fabric API.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ko_kr/develop/commands/basics.md#2025-04-05_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -> {\n    dispatcher.register(ClientCommandManager.literal(\"client_command\").executes(context -> {\n        context.getSource().sendFeedback(Text.literal(\"This command is only available on the client!\"));\n        return Command.SINGLE_SUCCESS;\n    }));\n});\n```\n\n----------------------------------------\n\nTITLE: Executing a Redirected Command\nDESCRIPTION: Defines the execution logic for a command that can be reached through redirection.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeRedirectedBy(CommandContext<ServerCommandSource> context) {\n    context.getSource().sendFeedback(() -> Text.literal(\"Hello from redirected command!\"), false);\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Component Operations in Java\nDESCRIPTION: Examples for reading, setting, checking existence of, and removing a custom composite component from an ItemStack.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// read values of component\nMyCustomComponent comp = stack.get(ModComponents.MY_CUSTOM_COMPONENT);\nfloat temp = comp.temperature();\nboolean burnt = comp.burnt();\n\n// set new component values\nstack.set(ModComponents.MY_CUSTOM_COMPONENT, new MyCustomComponent(8.4f, true));\n\n// check for component\nif (stack.contains(ModComponents.MY_CUSTOM_COMPONENT)) {\n    // do something\n}\n\n// remove component\nstack.remove(ModComponents.MY_CUSTOM_COMPONENT);\n```\n\n----------------------------------------\n\nTITLE: LightningStick Item Implementation\nDESCRIPTION: Example implementation of a custom item that spawns lightning bolts in front of the player when used. Demonstrates the use() event override and position calculation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-item-interactions.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class LightningStick extends Item {\n    public LightningStick(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n        if (!world.isClient) {\n            BlockPos pos = user.getBlockPos();\n            Vec3d rotation = user.getRotationVector();\n            Vec3d pos3d = user.getPos();\n\n            double x = pos3d.x + rotation.x * 10;\n            double z = pos3d.z + rotation.z * 10;\n\n            BlockPos targetPos = new BlockPos((int) x, pos.getY(), (int) z);\n            EntityType.LIGHTNING_BOLT.spawn(((ServerWorld) world), targetPos, SpawnReason.TRIGGERED);\n        }\n\n        return TypedActionResult.success(user.getStackInHand(hand));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Redirected Command\nDESCRIPTION: Defines the execution logic for a command that can be reached through redirection.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeRedirectedBy(CommandContext<ServerCommandSource> context) {\n    context.getSource().sendFeedback(() -> Text.literal(\"Hello from redirected command!\"), false);\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Pillar Block in Java\nDESCRIPTION: Code snippet showing how to register a PillarBlock for a \"Condensed Oak Log\" that can be placed in different orientations (X, Y, Z axis). It demonstrates using the vanilla PillarBlock class which provides axis property functionality.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/blockstates.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final Block CONDENSED_OAK_LOG = registerBlock(\"condensed_oak_log\",\n        new PillarBlock(FabricBlockSettings.copyOf(Blocks.OAK_LOG)));\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Component Value in Java\nDESCRIPTION: Demonstrates how to set a new value for a basic component on an ItemStack and optionally capture the old value.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nstack.set(ModComponents.CLICK_COUNT_COMPONENT, newValue);\n\nint oldValue = stack.set(ModComponents.CLICK_COUNT_COMPONENT, newValue);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Status Effect in Java\nDESCRIPTION: Demonstrates how to apply a custom status effect to a player entity using LivingEntity#addStatusEffect method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/effects.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ReferenceMethods {\n    public static void applyTaterEffect(PlayerEntity player) {\n        player.addStatusEffect(new StatusEffectInstance(\n                FabricDocsReferenceEffects.TATER,\n                200,\n                0,\n                false,\n                false,\n                true\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output for CountingBean Type\nDESCRIPTION: Shows the JSON representation of a CountingBean when serialized using the registry dispatch codec. The JSON includes a type field and the number field specific to CountingBean.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"example:counting_bean\",\n  \"counting_number\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Particle JSON Configuration\nDESCRIPTION: Defines the particle's texture configuration in JSON format, specifying which texture files to use for the particle animation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"textures\": [\n    \"fabric-docs-reference:particle/sparkle_particle_texture\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Matrix Transformations and Text Drawing in BlockEntityRenderer\nDESCRIPTION: This code shows how to implement the render method to display text on top of a block. It handles matrix transformations (translation, rotation, scaling) and uses TextRenderer to draw the counter value centered on the block's top face.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entity-renderer.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.rendering.blockentity;\n\nimport com.example.docs.block.entity.CounterBlockEntity;\nimport net.minecraft.client.font.TextRenderer;\nimport net.minecraft.client.render.VertexConsumerProvider;\nimport net.minecraft.client.render.block.entity.BlockEntityRenderer;\nimport net.minecraft.client.render.block.entity.BlockEntityRendererFactory;\nimport net.minecraft.client.util.math.MatrixStack;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.math.RotationAxis;\n\npublic class CounterBlockEntityRenderer implements BlockEntityRenderer<CounterBlockEntity> {\n    private final TextRenderer textRenderer;\n\n    public CounterBlockEntityRenderer(BlockEntityRendererFactory.Context ctx) {\n        this.textRenderer = ctx.getTextRenderer();\n    }\n\n    @Override\n    public void render(CounterBlockEntity entity, float tickDelta, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay) {\n        matrices.push();\n\n        // Move to the center of the block\n        matrices.translate(0.5, 1, 0.5);\n        // Rotate the text to be parallel with the ground\n        matrices.multiply(RotationAxis.POSITIVE_X.rotationDegrees(90));\n        // Scale it down\n        matrices.scale(1/18f, 1/18f, 1/18f);\n\n        // Get the number of clicks stored in the entity\n        int clicks = entity.getClicks();\n\n        // Create a text element from the value\n        Text text = Text.literal(Integer.toString(clicks));\n\n        // Measure the width of the text to center it\n        int textWidth = textRenderer.getWidth(text);\n\n        // Draw the text. Y is multiplied by -1 because we need it to be upside-down since we rotated it.\n        textRenderer.draw(\n                text,\n                -textWidth / 2f,\n                -4.5f,\n                0xFFFFFF, // White color\n                false, // No shadow\n                matrices.peek().getPositionMatrix(),\n                vertexConsumers,\n                TextRenderer.TextLayerType.NORMAL,\n                0x00000000, // No background\n                light // Use the same light level as the block\n        );\n\n        matrices.pop();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parameterized Trigger Method in Java\nDESCRIPTION: Enhances the trigger method to track how many times the criterion has been triggered per player. This enables creating advancements that require multiple uses of a tool.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nprivate final Map<UUID, Integer> playerCounts = new HashMap<>();\n\npublic void trigger(ServerPlayerEntity player) {\n    UUID uuid = player.getUuid();\n    int count = playerCounts.getOrDefault(uuid, 0) + 1;\n    playerCounts.put(uuid, count);\n    \n    this.trigger(player, conditions -> conditions.requirementsMet(player, count));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sounds Helper Class in Java\nDESCRIPTION: This Java class provides a structured way to manage and register multiple custom sounds for a Fabric mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/sounds/custom.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomSounds {\n    public static final SoundEvent METAL_WHISTLE = SoundEvent.of(Identifier.of(MOD_ID, \"metal_whistle\"));\n\n    public static void registerSounds() {\n        Registry.register(Registries.SOUND_EVENT, Identifier.of(MOD_ID, \"metal_whistle\"), METAL_WHISTLE);\n    }\n\n    public static void init() {\n        registerSounds();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Dedicated Server-Only Command in Fabric\nDESCRIPTION: Example showing how to register a command that only appears in dedicated server environments using environment checking.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ko_kr/develop/commands/basics.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nif (environment.equals(CommandManager.RegistrationEnvironment.DEDICATED)) {\n    dispatcher.register(CommandManager.literal(\"dedicated_command\").executes(FabricDocsReferenceCommands::executeDedicatedCommand));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Component Record with Properties\nDESCRIPTION: Definition of a custom component record with temperature and burnt properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic record MyCustomComponent(float temperature, boolean burnt) {\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Potion Instance in Java\nDESCRIPTION: This snippet shows how to declare a field to store a custom Potion instance, including creating a StatusEffectInstance with the appropriate type, duration, and amplifier.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/potions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final RegistryKey<Potion> TATER_KEY = RegistryKey.of(RegistryKeys.POTION, new Identifier(\"fabric-docs-reference\", \"tater_potion\"));\n\n/**\n * Our custom potion gives 10 seconds of our custom effect and is registered to our custom registry key.\n */\npublic static final Potion TATER_POTION = new Potion(\n        new StatusEffectInstance(\n                FabricDocsReferenceStatusEffects.TATER_EFFECT,\n                10 * 20, // Duration (in ticks)\n                0        // Amplifier (0 = level 1)\n        )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Blockstate Definition JSON\nDESCRIPTION: JSON file that defines the block state for a simple block with no variants, mapping the default state to the block model.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/first-block.md#2025-04-05_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"\": {\n      \"model\": \"fabric-docs-reference:block/condensed_dirt\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Integer Component in Java\nDESCRIPTION: Demonstrates how to register a basic integer component for tracking click counts on an item.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/custom-data-components.md#2025-04-05_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic static final ComponentType<Integer> CLICK_COUNT_COMPONENT = Registry.register(\n    Registries.DATA_COMPONENT_TYPE,\n    Identifier.of(FabricDocsReference.MOD_ID, \"click_count\"),\n    ComponentType.<Integer>builder().codec(Codec.INT).build()\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Command with Suggestions in Java\nDESCRIPTION: Example showing how to attach a suggestion provider to a command argument builder and implement the execution logic.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/suggestions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nStringArgumentType.word().suggests((context, builder) -> CommandSource.suggestMatching(SUGGESTIONS, builder));\n\npublic int run(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {\n    String value = StringArgumentType.getString(context, \"value\");\n    context.getSource().sendFeedback(Text.literal(\"You chose: \" + value), false);\n    return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data Generation Entrypoint to fabric.mod.json (JSON)\nDESCRIPTION: This JSON snippet shows how to add the data generation entrypoint to the fabric.mod.json file, enabling Fabric to recognize the datagen class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/setup.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entrypoints\": {\n    \"fabric-datagen\": [\n      \"com.exmaple.docs.datagen.FabricDocsReferenceDataGenerator\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HUD Rendering with Color Interpolation in Fabric\nDESCRIPTION: This code demonstrates how to register a HUD layer using Fabric's HudLayerRegistrationCallback. It creates a colored square that smoothly transitions between colors based on real-world time. The example shows proper initialization and implementation of a HUD rendering layer with animation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/rendering/hud.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class HudRenderingEntrypoint implements ClientModInitializer {\n    // We create a new identifier for our layer\n    private static final Identifier LAYER_ID = new Identifier(\"docs\", \"example_layer\");\n\n    @Override\n    public void onInitializeClient() {\n        // Register our hud layer\n        HudRenderCallback.EVENT.register((matrices, tickDelta) -> {\n            // This event is deprecated, and extremely limited. Don't use it.\n        });\n\n        // Register our layer using HudLayerRegistrationCallback\n        HudLayerRegistrationCallback.EVENT.register((layerRegistrar) -> {\n            // Register our layer\n            layerRegistrar.registerLayer(LAYER_ID, (IdentifiedLayer) (drawContext, renderTickCounter) -> {\n                // Get the width and height of the window\n                int width = MinecraftClient.getInstance().getWindow().getScaledWidth();\n                int height = MinecraftClient.getInstance().getWindow().getScaledHeight();\n\n                // Get the current time in milliseconds\n                long time = Util.getMeasuringTimeMs();\n\n                // Use the time to create a sin wave between 0 and 1\n                float sinWave = (float) Math.sin(time / 1000.0) * 0.5f + 0.5f;\n\n                // Lerp between two colors using the sin wave\n                int color = MathHelper.lerp(\n                        sinWave,\n                        0xFF0000FF, // Blue\n                        0xFFFF0000  // Red\n                );\n\n                // Render a square in the top right corner\n                drawContext.fill(width - 50, 10, width - 10, 50, color);\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamicSoundManager Class in Java\nDESCRIPTION: Creates a singleton class to manage dynamic sound instances. It provides methods for playing, stopping, and checking the status of sounds, as well as maintaining a list of active sound instances.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class DynamicSoundManager {\n    private static DynamicSoundManager INSTANCE;\n\n    private final List<AbstractDynamicSoundInstance> activeSounds = new ArrayList<>();\n\n    private DynamicSoundManager() {}\n\n    public static DynamicSoundManager getInstance() {\n        if (INSTANCE == null) {\n            INSTANCE = new DynamicSoundManager();\n        }\n        return INSTANCE;\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void playSound(AbstractDynamicSoundInstance sound) {\n    MinecraftClient.getInstance().getSoundManager().play(sound);\n    this.activeSounds.add(sound);\n}\n\npublic void stopSound(AbstractDynamicSoundInstance sound) {\n    sound.stopSound();\n}\n\npublic boolean isPlaying(AbstractDynamicSoundInstance sound) {\n    return this.activeSounds.contains(sound);\n}\n\npublic void onSoundFinished(AbstractDynamicSoundInstance sound) {\n    this.activeSounds.remove(sound);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Generator Entrypoint Class in Java\nDESCRIPTION: This Java class serves as the entrypoint for data generation. It implements FabricDataGenerator.Runner and contains the onInitializeDataGenerator method that will be called to set up data providers.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/setup.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// part of FabricDocsReferenceDataGenerator.java\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Food Component to an Item in Fabric\nDESCRIPTION: This snippet demonstrates how to add a basic food component to an item using FabricItemSettings. Without any configuration, this just makes the item edible without any special properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/food.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew FabricItemSettings().food(new FoodComponent.Builder().build())\n```\n\n----------------------------------------\n\nTITLE: Defining Sound Events in sounds.json\nDESCRIPTION: JSON configuration for defining custom sound events with properties like subtitle and sound files.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/custom.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metal_whistle\": {\n    \"subtitle\": \"sound.fabric-docs-reference.metal_whistle\",\n    \"sounds\": [\n      \"fabric-docs-reference:metal_whistle\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Component Value with Return\nDESCRIPTION: Demonstrates removing a component value while capturing its final value in a variable.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nint oldCount = stack.remove(ModComponents.CLICK_COUNT_COMPONENT);\n```\n\n----------------------------------------\n\nTITLE: Registering an Attack Block Event Callback in Java\nDESCRIPTION: An example that registers an AttackBlockCallback to damage the player when they hit blocks that don't drop an item when hand-mined. The callback returns SUCCESS to indicate the action was handled.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/events.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Register the callback in our mod initializer class\nAttackBlockCallback.EVENT.register((player, world, hand, pos, direction) -> {\n    BlockState state = world.getBlockState(pos);\n    ItemStack tool = player.getStackInHand(hand);\n\n    // Check if the block doesn't drop anything when mined by hand\n    if (!state.getDroppedStacks(new LootContext.Builder((ServerWorld) world)).isEmpty() || !tool.isEmpty()) {\n        return ActionResult.PASS; // Let the game continue with the normal mining behavior\n    }\n\n    // Otherwise, hurt the player\n    player.damage(world.getDamageSources().generic(), 1.0F);\n    return ActionResult.SUCCESS; // We've handled this action\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Sound Events in sounds.json\nDESCRIPTION: JSON configuration for defining custom sound events with properties like subtitle and sound files.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/custom.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metal_whistle\": {\n    \"subtitle\": \"sound.fabric-docs-reference.metal_whistle\",\n    \"sounds\": [\n      \"fabric-docs-reference:metal_whistle\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Give Command for Counter Item with Component in Minecraft\nDESCRIPTION: Minecraft command to give a player a Counter item with a click count of 5. This demonstrates how components can be specified when using the /give command.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_5\n\nLANGUAGE: mcfunction\nCODE:\n```\n/give @p fabric-docs-reference:counter[fabric-docs-reference:click_count=5]\n```\n\n----------------------------------------\n\nTITLE: Registering a Command for Dedicated Server Environment\nDESCRIPTION: Shows how to register a command that only executes in a dedicated server environment.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nif (environment.equals(CommandManager.RegistrationEnvironment.DEDICATED)) {\n    dispatcher.register(CommandManager.literal(\"dedicated_command\").executes(FabricDocsReferenceCommands::executeDedicatedCommand));\n}\n```\n\n----------------------------------------\n\nTITLE: Dedicated Server Command Registration\nDESCRIPTION: Example of registering a command that only runs on dedicated servers with feedback.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/basics.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nif (environment.equals(CommandManager.RegistrationEnvironment.DEDICATED)) {\n    dispatcher.register(CommandManager.literal(\"dedicated_command\").executes(this::executeDedicatedCommand));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConsumableComponent with Status Effects in Java\nDESCRIPTION: Example showing how to create a food component that applies status effects when consumed. This code creates a reusable component that applies Poison II effect for 6 seconds when eaten.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/items/food.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final ConsumableComponent POISONOUS_COMPONENT = new ConsumableComponent.Builder()\n        .statusEffect(new StatusEffectInstance(StatusEffects.POISON, 120, 1), 1f)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Effects for Custom Widgets in Java\nDESCRIPTION: This code shows how to implement hover effects for a custom widget by modifying the rendering method. It changes the background color when the widget is hovered over by the mouse cursor.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void renderButton(DrawContext context, int mouseX, int mouseY, float delta) {\n    // Choose a fill color based on hover state\n    int fillColor = this.isHovered() ? 0xFF444444 : 0xFF000000;\n    \n    // Render the background of the widget\n    context.fill(getX(), getY(), getX() + width, getY() + height, fillColor);\n    \n    // Render the border of the widget\n    context.drawBorder(getX(), getY(), width, height, 0xFFFFFFFF);\n    \n    // Get the text renderer\n    TextRenderer textRenderer = MinecraftClient.getInstance().textRenderer;\n    \n    // Render the message of the widget\n    int textWidth = textRenderer.getWidth(getMessage());\n    context.drawTextWithShadow(textRenderer, getMessage(), getX() + (width - textWidth) / 2, getY() + (height - 8) / 2, 0xFFFFFFFF);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translations to FabricLanguageProvider in Java\nDESCRIPTION: Demonstrates how to add various types of translations using the TranslationBuilder. This includes translations for items, blocks, entities, and custom text keys.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/translations.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ntranslationBuilder.add(FabricDocsReferenceItems.EXAMPLE_ITEM, \"Example Item\");\ntranslationBuilder.add(FabricDocsReferenceBlocks.EXAMPLE_BLOCK, \"Example Block\");\ntranslationBuilder.add(FabricDocsReferenceEntities.EXAMPLE_ENTITY, \"Example Entity\");\ntranslationBuilder.add(\"text.fabric_docs_reference.greeting\", \"Hello there!\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Method for AbstractDynamicSoundInstance in Java\nDESCRIPTION: Defines the play method that initiates sound playback and resets the sound instance's state. This method allows the sound to start fresh when played and automatically applies the intro transition state.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    public void play() {\n        this.ticks = 0;\n        this.loopTicks = 0;\n        this.state = TransitionState.INTRO;\n        this.done = false;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using and Managing Custom SoundInstance in Fabric\nDESCRIPTION: Code snippet showing how to create, play, and stop a custom SoundInstance using the client's SoundManager. Demonstrates sound management for objects that need to be tracked over time.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Example: Creating and playing the sound instance\nCustomSoundInstance customSound = new CustomSoundInstance(\n    SoundEvents.ENTITY_MINECART_RIDING, // Or your own registered sound\n    SoundCategory.AMBIENT,\n    MinecraftClient.getInstance().player\n);\n\n// Play the sound\nMinecraftClient.getInstance().getSoundManager().play(customSound);\n\n// Later, when you need to stop it:\nMinecraftClient.getInstance().getSoundManager().stop(customSound);\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Food Component to Item in Java\nDESCRIPTION: This snippet demonstrates how to add a basic food component to an item using FabricItemSettings. It creates a FoodComponent.Builder and builds it without any additional configuration.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/zh_cn/develop/items/food.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew FabricItemSettings().food(new FoodComponent.Builder().build())\n```\n\n----------------------------------------\n\nTITLE: Using and Managing Custom SoundInstance in Fabric\nDESCRIPTION: Code snippet showing how to create, play, and stop a custom SoundInstance using the client's SoundManager. Demonstrates sound management for objects that need to be tracked over time.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Example: Creating and playing the sound instance\nCustomSoundInstance customSound = new CustomSoundInstance(\n    SoundEvents.ENTITY_MINECART_RIDING, // Or your own registered sound\n    SoundCategory.AMBIENT,\n    MinecraftClient.getInstance().player\n);\n\n// Play the sound\nMinecraftClient.getInstance().getSoundManager().play(customSound);\n\n// Later, when you need to stop it:\nMinecraftClient.getInstance().getSoundManager().stop(customSound);\n```\n\n----------------------------------------\n\nTITLE: Adding Localization Entries for Counter Item in JSON\nDESCRIPTION: JSON code for localization entries for the Counter item and its tooltip. These entries are used to display the item name and usage count in the game UI.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"item.fabric-docs-reference.counter\": \"Counter\",\n  \"item.fabric-docs-reference.counter.info\": \"Used %1$s times\"\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds from Custom Items in Java\nDESCRIPTION: Example of how to play sound events when using items on entities or blocks. The code demonstrates implementing useOnEntity() and useOnBlock() methods to play copper block placement and pillager sounds.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/sounds/using-sounds.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic ActionResult useOnEntity(ItemStack stack, PlayerEntity user, LivingEntity entity, Hand hand) {\n    World world = user.getWorld();\n    if (!world.isClient()) {\n        world.playSound(\n                null, // Player - null means all players will hear the sound\n                entity.getBlockPos(), // Position to play the sound\n                SoundEvents.BLOCK_COPPER_PLACE, // The sound to play\n                SoundCategory.BLOCKS, // Sound Category\n                1f, // Volume - value between 0.0 and 1.0\n                1f // Pitch - value between 0.5 and 2.0\n        );\n    }\n    return ActionResult.SUCCESS;\n}\n\n@Override\npublic ActionResult useOnBlock(ItemUsageContext context) {\n    World world = context.getWorld();\n    if (!world.isClient()) {\n        world.playSound(\n                null,\n                context.getBlockPos(),\n                SoundEvents.ENTITY_PILLAGER_AMBIENT,\n                SoundCategory.HOSTILE,\n                1f,\n                1f\n        );\n    }\n    return ActionResult.SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties to Block State Manager\nDESCRIPTION: Overrides the appendProperties method to add a custom property to a block's state manager. This allows the block to track additional state information beyond the vanilla properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void appendProperties(StateManager.Builder<Block, BlockState> builder) {\n    builder.add(ACTIVATED);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom SoundEvent in Java\nDESCRIPTION: Java code snippet for registering a custom SoundEvent in a Fabric mod's initializer. This registers the 'metal_whistle' sound event with the game's registry.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/sounds/custom.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRegistry.register(Registries.SOUND_EVENT, Identifier.of(MOD_ID, \"metal_whistle\"),\n        SoundEvent.of(Identifier.of(MOD_ID, \"metal_whistle\")));\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Component Record in Java\nDESCRIPTION: Creates a basic record class for storing composite component data with temperature and burnt properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic record MyCustomComponent() {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SoundInstance Methods in AbstractDynamicSoundInstance\nDESCRIPTION: Implements methods from the SoundInstance interface to allow the custom SoundInstance to be played.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic Identifier getId() {\n    return this.sound.getId();\n}\n\n@Override\npublic SoundCategory getCategory() {\n    return this.category;\n}\n\n@Override\npublic boolean isRelative() {\n    return false;\n}\n\n@Override\npublic int getRepeatDelay() {\n    return 0;\n}\n\n@Override\npublic float getVolume() {\n    return this.maxVolume;\n}\n\n@Override\npublic float getPitch() {\n    return this.maxPitch;\n}\n\n@Override\npublic double getX() {\n    return this.source.getSoundX();\n}\n\n@Override\npublic double getY() {\n    return this.source.getSoundY();\n}\n\n@Override\npublic double getZ() {\n    return this.source.getSoundZ();\n}\n\n@Override\npublic AttenuationType getAttenuationType() {\n    return AttenuationType.LINEAR;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Block with Custom Light Properties in Java\nDESCRIPTION: Registers the PrismarineLampBlock with settings that include dynamic luminance based on the block's state. It uses a method reference to the getLightLevel method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/blockstates.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic static final Block PRISMARINE_LAMP = registerBlock(\"prismarine_lamp\",\n        new PrismarineLampBlock(FabricBlockSettings.of(Material.STONE)\n                .strength(1.5f)\n                .requiresTool()\n                .luminance(PrismarineLampBlock::getLightLevel)));\n```\n\n----------------------------------------\n\nTITLE: Triggering a Parameterized Custom Criterion in Java\nDESCRIPTION: Adds code to trigger the parameterized criterion when a player uses a tool. This connects the game event to the enhanced advancement system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n// In addition to the basic criterion\nModCriteria.USE_TOOL.trigger((ServerPlayerEntity) player);\n// Also trigger our parameterized criterion\nModCriteria.PARAMETERIZED_USE_TOOL.trigger((ServerPlayerEntity) player);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Particle Type in ModInitializer\nDESCRIPTION: Registers a new ParticleType in the mod's initializer class using the mod's identifier. This sets up the basic particle definition that will be used by the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nParticleType<DefaultParticleType> SPARKLE_PARTICLE = Registry.register(\n        Registries.PARTICLE_TYPE,\n        new Identifier(\"fabric-docs-reference\", \"sparkle_particle\"),\n        new DefaultParticleType(true) {\n            @Override\n            public Codec<DefaultParticleType> getCodec() {\n                return ParticleEffectExtensions.EMPTY_CODEC.xmap(particleType -> this, particleType -> this);\n            }\n        });}\n```\n\n----------------------------------------\n\nTITLE: Creating Loot Table JSON for Block Drops in Minecraft\nDESCRIPTION: Definiert eine JSON-Beutetabelle, die festlegt, dass der Block als Item droppt, wenn er abgebaut oder durch eine Explosion zerstört wird.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/first-block.md#2025-04-05_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"minecraft:block\",\n  \"pools\": [\n    {\n      \"rolls\": 1,\n      \"entries\": [\n        {\n          \"type\": \"minecraft:item\",\n          \"name\": \"fabric-docs-reference:condensed_dirt\"\n        }\n      ],\n      \"conditions\": [\n        {\n          \"condition\": \"minecraft:survives_explosion\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Poisonous Apple Item in Java\nDESCRIPTION: Demonstrates how to register a custom food item (Poisonous Apple) using the previously defined food component. The item will always be edible and will always apply Poison II for 6 seconds when consumed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/food.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item POISONOUS_APPLE = registerItem(\"poisonous_apple\",\n    new Item(new Item.Settings().food(POISONOUS_APPLE_COMPONENT)));\n```\n\n----------------------------------------\n\nTITLE: Mixin Invoker for Brewing Registry in Java\nDESCRIPTION: Defines a mixin invoker interface to access the private BrewingRecipeRegistry.registerPotionRecipe method when Fabric API is not present.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/potions.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Mixin(BrewingRecipeRegistry.class)\npublic interface BrewingRecipeRegistryInvoker {\n    @Invoker(\"registerPotionRecipe\")\n    static void invokeRegisterPotionRecipe(Potion input, Item item, Potion output) {\n        throw new AssertionError();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Custom Property to Block State Builder in Java\nDESCRIPTION: Overrides the appendProperties method to add the custom ACTIVATED property to the block state definition, making it available for the block to use.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/blockstates.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void appendProperties(StateManager.Builder<Block, BlockState> builder) {\n    builder.add(ACTIVATED);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Entrypoint in Java\nDESCRIPTION: This snippet demonstrates a simple main entrypoint implementation in Java. It implements the ModInitializer interface and logs a message to the console when the game starts. This is typically used for common code that runs on both client and server.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/getting-started/project-structure.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@[code lang=java transcludeWith=#entrypoint](@/reference/1.21/src/main/java/com/example/docs/FabricDocsReference.java)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Sounds in JSON\nDESCRIPTION: This JSON snippet defines a custom sound 'metal_whistle' in the sounds.json file, specifying its audio file and subtitle.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/sounds/custom.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metal_whistle\": {\n    \"sounds\": [\n      \"fabric-docs-reference:metal_whistle\"\n    ],\n    \"subtitle\": \"subtitles.fabric-docs-reference.metal_whistle\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Advanced Component Record in Java\nDESCRIPTION: Shows how to create a record class for an advanced component with multiple fields and a custom codec.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/custom-data-components.md#2025-04-05_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic record MyCustomComponent(float temperature, boolean burnt) {\n    public static final Codec<MyCustomComponent> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n        Codec.FLOAT.fieldOf(\"temperature\").forGetter(MyCustomComponent::temperature),\n        Codec.BOOL.fieldOf(\"burnt\").forGetter(MyCustomComponent::burnt)\n    ).apply(instance, MyCustomComponent::new));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Armor Item Model in JSON\nDESCRIPTION: Provides an example JSON model for an armor item (helmet) to be displayed in inventory.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/custom-armor.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_helmet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle Border with DrawContext\nDESCRIPTION: Shows how to draw a border around a rectangle using DrawContext.drawBorder() method\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/draw-context.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncontext.drawBorder(10, 10, 50, 50, 0xFF00FF00);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Modulation Methods in AbstractDynamicSoundInstance in Java\nDESCRIPTION: Provides utility methods for calculating dynamic volume and pitch transitions based on the current state. These methods enable smooth transitions between sound states using linear interpolation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    protected abstract void applyModulations();\n\n    protected float getTransitionVolume() {\n        return switch (this.state) {\n            case INTRO -> {\n                float progress = (float) this.loopTicks / this.introTicks;\n                yield MathHelper.lerp(progress, this.minVolume, this.maxVolume);\n            }\n            case LOOP -> this.maxVolume;\n            case OUTRO -> {\n                float progress = (float) this.loopTicks / this.outroTicks;\n                yield MathHelper.lerp(progress, this.maxVolume, this.minVolume);\n            }\n        };\n    }\n\n    protected float normalizeAndLerpValue(float value, float normalizedMin, float normalizedMax) {\n        value = MathHelper.clamp(value, 0.0F, 1.0F);\n        return MathHelper.lerp(value, normalizedMin, normalizedMax);\n    }\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring Tags with Different Methods\nDESCRIPTION: This code shows how to configure tags by adding individual items and other tags to them. It demonstrates various methods including addTag, addOptionalTag, and forceAddTag for handling tags with different loading states.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/tags.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void configure(RegistryWrapper.WrapperLookup arg) {\n    getOrCreateTagBuilder(CONCRETE)\n            .add(Items.WHITE_CONCRETE)\n            .add(Items.ORANGE_CONCRETE)\n            .add(Items.MAGENTA_CONCRETE)\n            .add(Items.LIGHT_BLUE_CONCRETE)\n            .add(Items.YELLOW_CONCRETE)\n            .add(Items.LIME_CONCRETE)\n            .add(Items.PINK_CONCRETE)\n            .add(Items.GRAY_CONCRETE)\n            .add(Items.LIGHT_GRAY_CONCRETE)\n            .add(Items.CYAN_CONCRETE)\n            .add(Items.PURPLE_CONCRETE)\n            .add(Items.BLUE_CONCRETE)\n            .add(Items.BROWN_CONCRETE)\n            .add(Items.GREEN_CONCRETE)\n            .add(Items.RED_CONCRETE)\n            .add(Items.BLACK_CONCRETE);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Criterion Trigger Method in Java\nDESCRIPTION: Implements the trigger method for the custom criterion which checks all registered advancement listeners and grants the advancement if the conditions are met. This is called when the player uses a tool.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic void trigger(ServerPlayerEntity player) {\n    this.trigger(player, conditions -> conditions.requirementsMet(player));\n}\n```\n\n----------------------------------------\n\nTITLE: Depending on Subprojects in Fabric Loom with namedElements Configuration\nDESCRIPTION: Shows how to set up dependencies on other Loom projects in a multi-project build using the namedElements configuration. This prevents remapping issues by using project outputs that have not been remapped to intermediary names.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/index.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n implementation project(path: \":name\", configuration: \"namedElements\")\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Status Effect via Command in Minecraft\nDESCRIPTION: Demonstrates how to use the /effect command to apply a custom status effect to the closest player. This is useful for quick testing during development.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/entities/effects.md#2025-04-05_snippet_4\n\nLANGUAGE: mcfunction\nCODE:\n```\neffect give @p fabric-docs-reference:tater\n```\n\n----------------------------------------\n\nTITLE: Drawing Text with DrawContext\nDESCRIPTION: Shows how to render text using DrawContext's text drawing methods\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/draw-context.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ncontext.drawText(textRenderer, \"Hello World\", 10, 10, 0xFFFFFFFF, true);\n```\n\n----------------------------------------\n\nTITLE: Implementing a FabricDocsReferenceBlocks Class with Initialization Method\nDESCRIPTION: Creates a FabricDocsReferenceBlocks class with a static initialization method that can be called from the mod's entry point to trigger static initialization of block instances.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceBlocks {\n    // This class should never be initialized\n    private FabricDocsReferenceBlocks() {\n    }\n\n    // === BLOCKS ===\n    public static final Block CONDENSED_DIRT = register(\"condensed_dirt\", new Block(AbstractBlock.Settings.create()\n            .mapColor(MapColor.DIRT)\n            .strength(0.5f)\n            .sounds(BlockSoundGroup.GRAVEL)), true);\n\n    // Register a block\n    private static <T extends Block> T register(String id, T block, boolean shouldRegisterItem) {\n        // Register the block\n        Identifier blockId = new Identifier(FabricDocsReference.MOD_ID, id);\n        Registry.register(Registries.BLOCK, blockId, block);\n\n        // Register the block item, if requested\n        if (shouldRegisterItem) {\n            Registry.register(Registries.ITEM, blockId, new BlockItem(block, new Item.Settings()));\n        }\n\n        return block;\n    }\n\n    public static void initialize() {\n        // This method is never actually called\n        // We just want the class to be loaded and have its static initializers run\n\n        FabricDocsReference.LOGGER.info(\"Initializing blocks\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Poisonous Apple Item with FoodComponent in Java\nDESCRIPTION: Complete example of registering a custom food item (poisonous apple) that uses the previously defined poisonous component and is always edible regardless of hunger level.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/items/food.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item POISONOUS_APPLE = Registry.register(\n    Registries.ITEM,\n    new Identifier(ExampleMod.MOD_ID, \"poisonous_apple\"),\n    ConsumableItem.withStatusEffects(new Item.Settings().food(\n        new FoodComponent.Builder()\n            .hunger(4)\n            .saturationModifier(0.3f)\n            .alwaysEdible()\n            .build()\n    ), POISONOUS_COMPONENT));\n```\n\n----------------------------------------\n\nTITLE: Implementing Position-Based Sound Playback\nDESCRIPTION: Example showing how to play sounds using the world instance for greater control over sound positioning. This allows specifying exact coordinates for sound origin and demonstrates playback of the Ravager roar sound.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/using-sounds.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic ActionResult useOnBlock(ItemUsageContext context) {\n    World world = context.getWorld();\n    if (!world.isClient) {\n        BlockPos blockPos = context.getBlockPos();\n        world.playSound(null, blockPos.getX(), blockPos.getY(), blockPos.getZ(), SoundEvents.ENTITY_RAVAGER_ROAR, SoundCategory.HOSTILE, 1f, 1f);\n    }\n    return ActionResult.SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Enchantment Translation in JSON\nDESCRIPTION: Demonstrates how to add a translation for the custom enchantment in the en_us.json file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-enchantment-effects.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"enchantment.FabricDocsReference.thundering\": \"Thundering\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom BlockStateSupplier for Vertical Slabs in Java\nDESCRIPTION: Implementation of a custom BlockStateSupplier method that handles block state variants, rotation options, and uvlock settings for vertical slabs. Uses VariantsBlockStateSupplier to create different block orientations based on facing direction and single/double state.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/block-models.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n:::datagen-model-custom:supplier\n```\n\n----------------------------------------\n\nTITLE: TransitionState Enum for Sound Transition Management\nDESCRIPTION: Enum defining the possible states of a dynamic sound: STARTING, RUNNING, and ENDING. Includes utility methods for serialization and lookup by identifier for networking purposes.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic enum TransitionState {\n    STARTING(new Identifier(\"example\", \"starting\")),\n    RUNNING(new Identifier(\"example\", \"running\")),\n    ENDING(new Identifier(\"example\", \"ending\"));\n\n    private final Identifier id;\n\n    TransitionState(Identifier id) {\n        this.id = id;\n    }\n\n    public Identifier getId() {\n        return id;\n    }\n\n    /**\n     * Find a transition state by its identifier.\n     * Useful when sending/receiving data over the network.\n     */\n    public static TransitionState fromId(Identifier id) {\n        for (TransitionState state : values()) {\n            if (state.id.equals(id)) {\n                return state;\n            }\n        }\n        return RUNNING; // Default fallback\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Updated Command Tree in Fabric\nDESCRIPTION: After registering or unregistering commands at runtime, you need to send the updated command tree to all players. This ensures that clients have the most up-to-date information about available commands.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/basics.md#2025-04-05_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nCommandManager.sendCommandTree(ServerPlayerEntity)\n```\n\n----------------------------------------\n\nTITLE: Applying Texture Pool to a Block Family\nDESCRIPTION: Shows how to apply a texture pool to an entire block family that was previously defined, generating models for all family members.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Register a texture pool for a block family\nblockStateModelGenerator.registerCubeAllModelTexturePool(ModBlocks.RUBY_BLOCK)\n        .family(ModBlocks.RUBY_FAMILY);\n```\n\n----------------------------------------\n\nTITLE: Basic Data Generation Configuration in Gradle for Fabric API\nDESCRIPTION: Sets up the most basic data generation configuration for Fabric API. This creates a new run configuration that enables data generation in Fabric API.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/loom/fabric-api.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureDataGeneration()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Methods for AbstractDynamicSoundInstance in Java\nDESCRIPTION: Additional utility methods for the AbstractDynamicSoundInstance class, including methods to stop playing, check if the sound should continue, and handle finishing.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic void stopPlaying() {\n    if (!finished) {\n        finished = true;\n        callback.onFinished();\n    }\n}\n\nprotected boolean shouldContinuePlaying() {\n    return !finished;\n}\n\n@Override\npublic boolean isDone() {\n    return finished;\n}\n\n@Override\npublic void close() {\n    stopPlaying();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Status Effect to Entity in Java\nDESCRIPTION: Shows how to apply a status effect to a living entity by creating a StatusEffectInstance with custom parameters. This method allows for precise control over effect duration, amplifier, and display properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void applyTaterEffect(LivingEntity entity) {\n    // Create a new instance of the status effect with custom parameters\n    StatusEffectInstance effectInstance = new StatusEffectInstance(\n            FabricDocsReferenceEffects.TATER_EFFECT, // The effect to apply\n            200,                           // Duration in ticks (10 seconds)\n            0,                             // Amplifier (level 1)\n            false,                         // Is ambient? (beacon-like)\n            true,                          // Show particles?\n            true                           // Show icon on HUD?\n    );\n\n    // Apply the effect to the entity\n    entity.addStatusEffect(effectInstance);\n\n    // Alternatively, you can use the shorter version\n    entity.addStatusEffect(new StatusEffectInstance(FabricDocsReferenceEffects.TATER_EFFECT, 200));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Block Translations in JSON\nDESCRIPTION: Defines the localized name for a custom block in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/blocks/first-block.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"block.mod_id.condensed_dirt\": \"Condensed Dirt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a Screen in Minecraft\nDESCRIPTION: Demonstrates how to close a screen by setting it to null. This returns the player to the game or previous screen.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMinecraftClient.getInstance().setScreen(null);\n```\n\n----------------------------------------\n\nTITLE: Adding Fuel Property\nDESCRIPTION: Example of making an item usable as fuel using Fabric API's FuelRegistry\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/first-item.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nFuelRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 300);\n```\n\n----------------------------------------\n\nTITLE: Implementing SoundInstanceCallback Interface in Java\nDESCRIPTION: Defines a callback interface with an onFinished method that handles signals from SoundInstance objects. This interface allows any class to receive signals when sound instances complete or change state.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.sound.instance;\n\npublic interface SoundInstanceCallback {\n    void onFinished(Object id);\n}\n```\n\n----------------------------------------\n\nTITLE: Item Stack Decrement Handler\nDESCRIPTION: Demonstrates how to decrease the quantity of an item stack and return a success result after an interaction.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-item-interactions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nItemStack heldStack = user.getStackInHand(hand);\nheldStack.decrement(1);\nTypedActionResult.success(heldStack);\n```\n\n----------------------------------------\n\nTITLE: Locating Mods Folder Paths for Different Operating Systems\nDESCRIPTION: This code block provides the file paths for the Minecraft mods folder on Windows, macOS, and Linux operating systems. Users can paste these paths into their file explorer to quickly navigate to the correct location.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/installing-mods.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: code-group\n\n```:no-line-numbers [Windows]\n%appdata%\\.minecraft\\mods\n```\n\n```:no-line-numbers [macOS]\n~/Library/Application Support/minecraft/mods\n```\n\n```:no-line-numbers [Linux]\n~/.minecraft/mods\n```\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Locating Mods Folder Paths for Different Operating Systems\nDESCRIPTION: This code block provides the file paths for the Minecraft mods folder on Windows, macOS, and Linux operating systems. Users can paste these paths into their file explorer to quickly navigate to the correct location.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/installing-mods.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: code-group\n\n```:no-line-numbers [Windows]\n%appdata%\\.minecraft\\mods\n```\n\n```:no-line-numbers [macOS]\n~/Library/Application Support/minecraft/mods\n```\n\n```:no-line-numbers [Linux]\n~/.minecraft/mods\n```\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Sheep Shear Event\nDESCRIPTION: Example implementation of the custom sheep shear event that drops a diamond instead of wool when sheep are sheared.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/events.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nSheepShearCallback.EVENT.register((player, sheep) -> {\n    if (!sheep.getWorld().isClient) {\n        sheep.dropStack(new ItemStack(Items.DIAMOND));\n    }\n    return ActionResult.SUCCESS;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mod Information in fabric.mod.json\nDESCRIPTION: The fabric.mod.json file is crucial for describing the mod to Fabric Loader. It includes essential information such as the mod's ID, name, environment, entrypoints, dependencies, and mixins. This snippet shows an example structure of the file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/getting-started/project-structure.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n@[code lang=json](@/reference/1.21/src/main/resources/fabric.mod.json)\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Status Effect with Minecraft Command\nDESCRIPTION: Shows how to apply the custom status effect using Minecraft's /effect command for quick testing during development.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/effects.md#2025-04-05_snippet_4\n\nLANGUAGE: mcfunction\nCODE:\n```\neffect give @p fabric-docs-reference:tater\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom SoundEvent in Fabric\nDESCRIPTION: Code for registering a custom sound event in the game registry using an identifier.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/custom.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRegistry.register(Registries.SOUND_EVENT, Identifier.of(MOD_ID, \"metal_whistle\"),\n        SoundEvent.of(Identifier.of(MOD_ID, \"metal_whistle\")));\n```\n\n----------------------------------------\n\nTITLE: Block State Definition JSON\nDESCRIPTION: Blockstate configuration that maps the default variant to the block model\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/blocks/first-block.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"variants\": {\n        \"\": {\n            \"model\": \"fabric-docs-reference:block/condensed_dirt\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Minecraft Game Directory on Windows\nDESCRIPTION: The path to the Minecraft game directory on Windows where logs are stored in the logs folder.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/troubleshooting/uploading-logs.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n%appdata%\\.minecraft\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Initialize Method in ModBlocks\nDESCRIPTION: Implements a simple initialize method in the ModBlocks class that triggers static initialization of the class when called from the mod's entry point.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static void initialize() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Interaction to Change Block State\nDESCRIPTION: Overrides the onUse method to toggle a custom 'activated' property when a player right-clicks on the block. Updates the block state in the world and plays a sound effect.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit) {\n    if (!world.isClient()) {\n        BlockState newState = state.cycle(ACTIVATED);\n        world.setBlockState(pos, newState);\n        world.playSound(null, pos, SoundEvents.BLOCK_AMETHYST_BLOCK_CHIME, SoundCategory.BLOCKS, 1.0f, 1.0f);\n        return ActionResult.SUCCESS;\n    }\n\n    return ActionResult.CONSUME;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Potion Recipe in Java\nDESCRIPTION: Shows how to register a brewing recipe for a custom potion using BrewingRecipeRegistry.registerPotionRecipe.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/potions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBrewingRecipeRegistry.registerPotionRecipe(Potions.AWKWARD, Items.POTATO, TATER_POTION);\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Item Group in Fabric (Java)\nDESCRIPTION: Creates a static final field for the item group and registers it using the ItemGroupEvents. This code sets up a custom item group and adds items to it.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-item-groups.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final RegistryKey<ItemGroup> ITEM_GROUP = RegistryKey.of(RegistryKeys.ITEM_GROUP, new Identifier(\"fabric_docs_reference\", \"test_group\"));\n\nItemGroupEvents.modifyEntriesEvent(ITEM_GROUP).register(content -> {\n    content.add(RUBY);\n    content.add(RUBY_BLOCK);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Utility Methods to AbstractDynamicSoundInstance in Java\nDESCRIPTION: Implements additional utility methods for the AbstractDynamicSoundInstance class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic boolean isDone() {\n    return this.finished;\n}\n\npublic void setStartTicks(int startTicks) {\n    this.startTicks = startTicks;\n}\n\npublic void setEndTicks(int endTicks) {\n    this.endTicks = endTicks;\n}\n\npublic void setMinVolume(float minVolume) {\n    this.minVolume = minVolume;\n}\n\npublic void setMaxVolume(float maxVolume) {\n    this.maxVolume = maxVolume;\n}\n\npublic void setMinPitch(float minPitch) {\n    this.minPitch = minPitch;\n}\n\npublic void setMaxPitch(float maxPitch) {\n    this.maxPitch = maxPitch;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Interaction to Change Block State\nDESCRIPTION: Overrides the onUse method to toggle a custom 'activated' property when a player right-clicks on the block. Updates the block state in the world and plays a sound effect.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit) {\n    if (!world.isClient()) {\n        BlockState newState = state.cycle(ACTIVATED);\n        world.setBlockState(pos, newState);\n        world.playSound(null, pos, SoundEvents.BLOCK_AMETHYST_BLOCK_CHIME, SoundCategory.BLOCKS, 1.0f, 1.0f);\n        return ActionResult.SUCCESS;\n    }\n\n    return ActionResult.CONSUME;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Trigger via Mixin in Java\nDESCRIPTION: A mixin that injects code into SheepEntity to trigger the custom sheep shear event when a player attempts to shear a sheep. It cancels the vanilla behavior if the event returns FAIL or processes the custom result if SUCCESS.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/events.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.mixin.event;\n\nimport com.example.docs.event.SheepShearCallback;\nimport net.minecraft.entity.passive.SheepEntity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.util.ActionResult;\nimport net.minecraft.util.Hand;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n@Mixin(SheepEntity.class)\nclass SheepEntityMixin {\n    @Inject(method = \"interactMob\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/passive/SheepEntity;sheared(Lnet/minecraft/sound/SoundCategory;)V\"), cancellable = true)\n    private void onShear(PlayerEntity player, Hand hand, CallbackInfoReturnable<Boolean> cir) {\n        ActionResult result = SheepShearCallback.EVENT.invoker().interact(player, (SheepEntity) (Object) this);\n\n        if (result == ActionResult.FAIL) {\n            cir.setReturnValue(false);\n        } else if (result == ActionResult.SUCCESS) {\n            cir.setReturnValue(true);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Trigger via Mixin in Java\nDESCRIPTION: A mixin that injects code into SheepEntity to trigger the custom sheep shear event when a player attempts to shear a sheep. It cancels the vanilla behavior if the event returns FAIL or processes the custom result if SUCCESS.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/events.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.mixin.event;\n\nimport com.example.docs.event.SheepShearCallback;\nimport net.minecraft.entity.passive.SheepEntity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.util.ActionResult;\nimport net.minecraft.util.Hand;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n@Mixin(SheepEntity.class)\nclass SheepEntityMixin {\n    @Inject(method = \"interactMob\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/passive/SheepEntity;sheared(Lnet/minecraft/sound/SoundCategory;)V\"), cancellable = true)\n    private void onShear(PlayerEntity player, Hand hand, CallbackInfoReturnable<Boolean> cir) {\n        ActionResult result = SheepShearCallback.EVENT.invoker().interact(player, (SheepEntity) (Object) this);\n\n        if (result == ActionResult.FAIL) {\n            cir.setReturnValue(false);\n        } else if (result == ActionResult.SUCCESS) {\n            cir.setReturnValue(true);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Chest Loot Tables\nDESCRIPTION: Example of generating a complex chest loot table with multiple pools, items with varying probabilities, and functions to control item counts.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/data-generation/loot-tables.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void accept(BiConsumer<ResourceLocation, LootTable.Builder> exporter) {\n\texporter.accept(\n\t\tModLootTables.EXAMPLE_CHEST.location(), \n\t\tLootTable.lootTable()\n\t\t.withPool(LootPool.lootPool()\n\t\t\t.setRolls(ConstantValue.exactly(4))\n\t\t\t.add(LootItem.lootTableItem(Items.BONE)\n\t\t\t\t.setWeight(8)\n\t\t\t\t.apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 8.0F))))\n\t\t\t.add(LootItem.lootTableItem(Items.ROTTEN_FLESH)\n\t\t\t\t.setWeight(10)\n\t\t\t\t.apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 8.0F))))\n\t\t\t.add(LootItem.lootTableItem(Items.STRING)\n\t\t\t\t.setWeight(6)\n\t\t\t\t.apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 4.0F)))))\n\t\t.withPool(LootPool.lootPool()\n\t\t\t.setRolls(ConstantValue.exactly(3))\n\t\t\t.add(LootItem.lootTableItem(Items.IRON_INGOT)\n\t\t\t\t.setWeight(3)\n\t\t\t\t.apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 4.0F))))\n\t\t\t.add(LootItem.lootTableItem(Items.GOLD_INGOT)\n\t\t\t\t.setWeight(3)\n\t\t\t\t.apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 4.0F))))\n\t\t\t.add(LootItem.lootTableItem(Items.EMERALD)\n\t\t\t\t.setWeight(2)\n\t\t\t\t.apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 4.0F)))))\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using DynamicSoundManager in Network Handling\nDESCRIPTION: Demonstrates how to use the DynamicSoundManager to start and stop custom dynamic SoundInstances in response to network events.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class ReceiveS2C {\n    public static void onEngineStartPacket(MinecraftClient client, ClientPlayNetworkHandler handler, PacketByteBuf buf, PacketSender responseSender) {\n        BlockPos pos = buf.readBlockPos();\n        client.execute(() -> {\n            DynamicSoundManager.getInstance().playSound(new EngineSoundInstance(client.world, pos));\n        });\n    }\n\n    public static void onEngineStopPacket(MinecraftClient client, ClientPlayNetworkHandler handler, PacketByteBuf buf, PacketSender responseSender) {\n        BlockPos pos = buf.readBlockPos();\n        client.execute(() -> {\n            for (AbstractDynamicSoundInstance sound : DynamicSoundManager.getInstance().getActiveSounds()) {\n                if (sound instanceof EngineSoundInstance && ((EngineSoundInstance) sound).getPos().equals(pos)) {\n                    DynamicSoundManager.getInstance().stopSound(sound);\n                    break;\n                }\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Status Effect in Java\nDESCRIPTION: Demonstrates how to register a custom status effect using Registry.register in the mod's initializer. The effect is registered to the STATUS_EFFECT registry with a specific identifier.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceEffects implements ModInitializer {\n    public static final StatusEffect TATER = Registry.register(Registries.STATUS_EFFECT,\n            new Identifier(\"fabric-docs-reference\", \"tater\"),\n            new TaterEffect());\n\n    @Override\n    public void onInitialize() {\n        // The effects are registered by invoking this class.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Advancement with Multiple Criteria and Rewards in Java\nDESCRIPTION: Demonstrates a more complex advancement that has a parent, multiple criteria, custom requirements, and grants experience as a reward. This advancement requires players to obtain both a diamond and a piece of netherite.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void generateMoreAdvancement(Consumer<Advancement> consumer) {\n    // Creating advancement for getting rich\n    var getRichDisplay = new AdvancementDisplay(\n            Items.DIAMOND.getDefaultStack(),\n            Text.translatable(\"advancements.fabric-docs-reference.get_rich.title\"),\n            Text.translatable(\"advancements.fabric-docs-reference.get_rich.description\"),\n            new Identifier(\"textures/gui/advancements/backgrounds/adventure.png\"),\n            AdvancementFrame.GOAL,\n            true,\n            true,\n            false\n    );\n\n    // Build an advancement with diamond AND netherite requirements\n    // Also add XP as a reward\n    Advancement getRich = Advancement.Builder.create()\n            .display(getRichDisplay)\n            .parent(getDirt) // This advancement is a child of the previous one\n            .criterion(\"got_diamond\", InventoryChangedCriterion.Conditions.items(Items.DIAMOND))\n            .criterion(\"got_netherite\", InventoryChangedCriterion.Conditions.items(Items.NETHERITE_INGOT))\n            .rewards(AdvancementRewards.Builder.experience(100).build())\n            .build(consumer, \"fabric-docs-reference:get_rich\");\n}\n```\n\n----------------------------------------\n\nTITLE: Blockstate Definition JSON Configuration\nDESCRIPTION: Blockstate definition that maps the default state of the block to its model. This file tells the game which model to render for different block states.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"\": {\n      \"model\": \"fabric-docs-reference:block/condensed_dirt\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Block State in Constructor\nDESCRIPTION: Initializes a custom block with a default state for its 'activated' property. This ensures the block has a valid state when placed in the world.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic PrismarineLampBlock(Settings settings) {\n    super(settings);\n    setDefaultState(getDefaultState().with(ACTIVATED, false));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Block State in Constructor\nDESCRIPTION: Initializes a custom block with a default state for its 'activated' property. This ensures the block has a valid state when placed in the world.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic PrismarineLampBlock(Settings settings) {\n    super(settings);\n    setDefaultState(getDefaultState().with(ACTIVATED, false));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Sound System with S2C Network Communication in Java\nDESCRIPTION: Shows how to trigger dynamic sound instances from server-to-client network packets. This implementation demonstrates starting engine sounds when a client receives appropriate network messages.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.network;\n\nimport com.example.docs.sound.DynamicSoundManager;\nimport com.example.docs.sound.instance.DynamicSoundSource;\nimport com.example.docs.sound.instance.EngineSoundInstance;\nimport net.minecraft.util.Identifier;\n\npublic class ReceiveS2C {\n    // Example method that would be called when receiving a network packet\n    public void onEngineStateChange(Identifier soundId, DynamicSoundSource source, boolean running) {\n        DynamicSoundManager soundManager = DynamicSoundManager.getInstance();\n        \n        if (running) {\n            // Start engine sound if not already playing\n            if (!soundManager.isPlaying(source)) {\n                EngineSoundInstance sound = new EngineSoundInstance(soundId, source, soundManager, source);\n                soundManager.play(sound);\n            }\n        } else {\n            // Stop the sound if the engine is no longer running\n            soundManager.stop(source);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Command Redirects in Fabric\nDESCRIPTION: Shows how to create command redirects (aliases) using Brigadier's redirect method. This example redirects 'oldcommand' to 'newcommand'.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/basics.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nLiteralArgumentBuilder<ServerCommandSource> newCommand = CommandManager.literal(\"newcommand\").executes(context -> {\n    context.getSource().sendFeedback(() -> Text.literal(\"New command executed\"), false);\n    return Command.SINGLE_SUCCESS;\n});\n\ndispatcher.register(newCommand);\ndispatcher.register(CommandManager.literal(\"oldcommand\").redirect(newCommand.build()));\n```\n\n----------------------------------------\n\nTITLE: Particle JSON Configuration\nDESCRIPTION: Defines the particle's texture configuration in JSON format. Specifies which texture files the particle should use and allows for potential animation sequences.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"textures\": [\n    \"fabric-docs-reference:particle/sparkle_particle_texture\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Entity Data Deserialization in Fabric\nDESCRIPTION: Implementation of readNbt method in CounterBlockEntity to load the clicks count from saved NBT data when the game loads.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entities.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void readNbt(NbtCompound nbt) {\n    super.readNbt(nbt);\n    clicks = nbt.getInt(\"clicks\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Constant Codec in Java\nDESCRIPTION: This snippet shows how to create a Codec that always deserializes to a constant value using Codec.unit().\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCodec<Integer> theMeaningOfCodec = Codec.unit(42);\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Type Conversion with comapFlatMap\nDESCRIPTION: Shows how to use comapFlatMap for safe type conversion when not all instances can be validly converted. This example demonstrates the pattern used for Minecraft's Identifier codec.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class Identifier {\n    public static final Codec<Identifier> CODEC = Codec.STRING.comapFlatMap(\n        Identifier::validate, Identifier::toString\n    );\n\n    // ...\n\n    public static DataResult<Identifier> validate(String id) {\n        try {\n            return DataResult.success(new Identifier(id));\n        } catch (InvalidIdentifierException e) {\n            return DataResult.error(\"Posizione di risorsa non valida: \" + id + \" \" + e.getMessage());\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Damage to Entities\nDESCRIPTION: Code to apply the custom damage type to entities that step on a block. This shows how to call the damage method with the custom DamageSource.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/damage-types.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nentity.damage(damageSource, 5.0F);\n```\n\n----------------------------------------\n\nTITLE: Block State Property Configuration\nDESCRIPTION: Java implementation showing how to configure block state properties through the state manager builder.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/blocks/blockstates.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"activated=false\": {\n      \"model\": \"fabric-docs-reference:block/prismarine_lamp\"\n    },\n    \"activated=true\": {\n      \"model\": \"fabric-docs-reference:block/prismarine_lamp_activated\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Effect in Java\nDESCRIPTION: Registers the custom TaterEffect in the STATUS_EFFECT registry using Registry.register. This is typically done in the mod's initializer.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/entities/effects.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceEffects implements ModInitializer {\n    /*\n     * An instance of our new effect.\n     */\n    public static final StatusEffect TATER = new TaterEffect();\n\n    @Override\n    public void onInitialize() {\n        Registry.register(Registries.STATUS_EFFECT, new Identifier(\"fabric-docs-reference\", \"tater\"), TATER);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Tag JSON Configuration\nDESCRIPTION: Tool tag definition that specifies which blocks can be efficiently mined with a particular tool\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/blocks/first-block.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"replace\": false,\n    \"values\": [\n        \"fabric-docs-reference:condensed_dirt\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Field Codecs in Java\nDESCRIPTION: Demonstrates how to create optional field codecs with and without default values. Optional fields will either deserialize as an empty Optional or with a specified default value when the field is missing from the container.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Senza un valore predefinito\nMapCodec<Optional<BlockPos>> optionalCodec = BlockPos.CODEC.optionalFieldOf(\"pos\");\n\n// Con un valore predefinito\nMapCodec<BlockPos> optionalCodec = BlockPos.CODEC.optionalFieldOf(\"pos\", BlockPos.ORIGIN);\n```\n\n----------------------------------------\n\nTITLE: Creating Blockstate JSON for a Block with Boolean Property\nDESCRIPTION: Defines a blockstate file that maps different block models to the two possible states of a boolean property ('activated'). Each state uses a different texture to represent the block's visual appearance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"activated=true\": {\n      \"model\": \"fabric-docs-reference:block/prismarine_lamp_on\"\n    },\n    \"activated=false\": {\n      \"model\": \"fabric-docs-reference:block/prismarine_lamp_off\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypedActionResult Usage in Java\nDESCRIPTION: Shows how to create a basic TypedActionResult for handling item interactions without modifying the item stack.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-item-interactions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nTypedActionResult.pass(user.getStackInHand(hand))\n```\n\n----------------------------------------\n\nTITLE: Client-Side Particle Registration with Factory\nDESCRIPTION: Registers the particle on the client side and assigns a factory that defines the particle's movement behavior. This example uses the end rod particle's factory to mimic its movement pattern.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitializeClient() {\n    //[...]\n    \n    ParticleFactoryRegistry.getInstance().register(FabricDocsReference.SPARKLE_PARTICLE, EndRodParticle.Factory::new);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version in Windows Command Prompt\nDESCRIPTION: Command to verify the installed version of Java on Windows. When executed, it displays the current Java version information if Java is installed on the system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/installing-java/windows.md#2025-04-05_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\njava -version\n```\n\n----------------------------------------\n\nTITLE: Minecraft Particle Test Command\nDESCRIPTION: Command to test the custom particle in-game by spawning it at the player's location.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_3\n\nLANGUAGE: mcfunction\nCODE:\n```\n/particle fabric-docs-reference:sparkle_particle ~ ~1 ~\n```\n\n----------------------------------------\n\nTITLE: Registering Block Entities in Fabric\nDESCRIPTION: Code to register a block entity type in Fabric. Creates and registers a BlockEntityType for the CounterBlockEntity.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entities.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ModBlockEntities {\n    public static final BlockEntityType<CounterBlockEntity> COUNTER_BLOCK_ENTITY =\n            Registry.register(\n                    Registries.BLOCK_ENTITY_TYPE,\n                    new Identifier(FabricDocsReference.MOD_ID, \"counter\"),\n                    FabricBlockEntityTypeBuilder.create(\n                            CounterBlockEntity::new,\n                            ModBlocks.COUNTER_BLOCK\n                    ).build()\n            );\n\n    public static void registerBlockEntities() {\n        FabricDocsReference.LOGGER.info(\"Registering Block Entities for \" + FabricDocsReference.MOD_ID);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Map Codec for Identifiers and Integers in Java\nDESCRIPTION: Demonstrates how to create a Codec for a map of Identifiers to Integers and use it to serialize data.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Create a codec for a map of identifiers to integers\nCodec<Map<Identifier, Integer>> mapCodec = Codec.unboundedMap(Identifier.CODEC, Codec.INT);\n\n// Use it to serialize data\nDataResult<JsonElement> result = mapCodec.encodeStart(JsonOps.INSTANCE, Map.of(\n    new Identifier(\"example\", \"number\"), 23,\n    new Identifier(\"example\", \"the_cooler_number\"), 42\n));\n```\n\n----------------------------------------\n\nTITLE: Creating a Map Codec with Identifier Keys in Java\nDESCRIPTION: Demonstrates creating a codec for a Map with Identifier keys and Integer values, using Codec.unboundedMap.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Создаём кодек для карты идентификаторов к целым числам\nCodec<Map<Identifier, Integer>> mapCodec = Codec.unboundedMap(Identifier.CODEC, Codec.INT);\n\n// Используем его для сериализации данных\nDataResult<JsonElement> result = mapCodec.encodeStart(JsonOps.INSTANCE, Map.of(\n    new Identifier(\"example\", \"number\"), 23,\n    new Identifier(\"example\", \"the_cooler_number\"), 42\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Damage Type in JSON\nDESCRIPTION: Creates a JSON file to define a custom 'Tater' damage type with specific properties such as exhaustion, scaling with difficulty, and message ID.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/damage-types.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exhaustion\": 0.1,\n  \"message_id\": \"tater\",\n  \"scaling\": \"when_caused_by_living_non_player\"\n}\n```\n\n----------------------------------------\n\nTITLE: Lightning Summoning Implementation\nDESCRIPTION: Implementation of the use() method that spawns a lightning bolt 10 blocks in front of the player when using the item.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-item-interactions.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n    if (!world.isClient) {\n        Vec3d pos = user.getPos();\n        Vec3d facing = user.getRotationVec(1.0f);\n        Vec3d targetPos = pos.add(facing.multiply(10));\n        EntityType.LIGHTNING_BOLT.spawn(\n            (ServerWorld) world,\n            targetPos,\n            SpawnReason.TRIGGERED\n        );\n    }\n    return TypedActionResult.success(user.getStackInHand(hand));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SoundInstanceCallback Interface in Java\nDESCRIPTION: Interface definition for SoundInstanceCallback, used to handle signals from SoundInstance objects. It includes an onFinished method and can be extended with custom methods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface SoundInstanceCallback {\n    void onFinished();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fabric Loader JUnit Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Fabric Loader JUnit dependency to the build.gradle file for testing Fabric mods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/automatic-testing.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation \"net.fabricmc:fabric-loader-junit:${project.loader_version}\"\n```\n\n----------------------------------------\n\nTITLE: Block Translation Entry in JSON\nDESCRIPTION: Translation entry for a custom block in the language file. This defines how the block name will appear in-game in the creative inventory and other UI elements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"block.mod_id.condensed_dirt\": \"Condensed Dirt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Block Entity Type in Fabric\nDESCRIPTION: Code that registers the CounterBlockEntity with Minecraft. This creates a BlockEntityType for the custom block entity which associates it with compatible blocks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/block-entities.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.block.entity;\n\nimport com.example.docs.ExampleMod;\nimport com.example.docs.block.ModBlocks;\nimport com.example.docs.block.entity.custom.CounterBlockEntity;\nimport net.fabricmc.fabric.api.object.builder.v1.block.entity.FabricBlockEntityTypeBuilder;\nimport net.minecraft.block.entity.BlockEntityType;\nimport net.minecraft.registry.Registries;\nimport net.minecraft.registry.Registry;\nimport net.minecraft.util.Identifier;\n\npublic class ModBlockEntities {\n    public static final BlockEntityType<CounterBlockEntity> COUNTER_BLOCK_ENTITY =\n            Registry.register(\n                    Registries.BLOCK_ENTITY_TYPE,\n                    new Identifier(ExampleMod.MOD_ID, \"counter\"),\n                    FabricBlockEntityTypeBuilder.create(\n                            CounterBlockEntity::new,\n                            ModBlocks.COUNTER_BLOCK\n                    ).build()\n            );\n\n    public static void registerBlockEntities() {\n        ExampleMod.LOGGER.info(\"Registering Block Entities for \" + ExampleMod.MOD_ID);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Event Callback Interface in Java\nDESCRIPTION: Shows how to create an event callback interface for a custom event. This example implements a SheepShearCallback that triggers when a sheep is sheared.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/uk_ua/develop/events.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.event;\n\nimport net.fabricmc.fabric.api.event.Event;\nimport net.fabricmc.fabric.api.event.EventFactory;\nimport net.minecraft.entity.passive.SheepEntity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.util.ActionResult;\n\n/**\n * Called when a sheep is sheared\n *\n * <p>Upon return:\n * <ul><li>SUCCESS cancels further processing and continues with normal shearing behavior\n * <li>PASS falls back to further processing and then normal shearing behavior\n * <li>FAIL cancels further processing and does not continue with normal shearing behavior</ul>\n */\npublic interface SheepShearCallback {\n    Event<SheepShearCallback> EVENT = EventFactory.createArrayBacked(SheepShearCallback.class,\n        (listeners) -> (player, sheep) -> {\n            for (SheepShearCallback listener : listeners) {\n                ActionResult result = listener.interact(player, sheep);\n\n                if (result != ActionResult.PASS) {\n                    return result;\n                }\n            }\n\n            return ActionResult.PASS;\n        }\n    );\n\n    ActionResult interact(PlayerEntity player, SheepEntity sheep);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Armor Material in Java\nDESCRIPTION: Shows how to define and register a custom armor material with various properties like defense points, enchantability, equip sound, repair ingredient, toughness, and knockback resistance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/custom-armor.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final ArmorMaterial GUIDITE = registerArmorMaterial(\n    \"guidite\",\n    40,\n    new int[]{5, 7, 9, 5},\n    25,\n    SoundEvents.ITEM_ARMOR_EQUIP_NETHERITE,\n    () -> Ingredient.ofItems(ModItems.GUIDITE),\n    4.0F,\n    0.3F,\n    false\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Color Change on Hover\nDESCRIPTION: Example of handling hover events in a custom widget by changing the background color when the mouse hovers over it.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void renderButton(DrawContext context, int mouseX, int mouseY, float delta) {\n    // Change color based on hover state\n    int color = isHovered() ? 0xFF_FF0000 : 0xFF_000000;\n    context.fill(getX(), getY(), getX() + width, getY() + height, color);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fields and Implementing Click Counter in Block Entity\nDESCRIPTION: Enhanced version of CounterBlockEntity with a clicks field and an incrementClicks method to track and report the number of times a block has been clicked.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entities.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate int clicks = 0;\n\npublic void incrementClicks(PlayerEntity player) {\n    if (!player.getWorld().isClient) {\n        clicks++;\n        player.sendMessage(Text.literal(\"You've clicked the block for the \" + clicks + \"th time\"), false);\n        markDirty();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Registry Dispatch Codec System\nDESCRIPTION: Demonstrates how to implement a registry dispatch system for serializing different implementations of an interface based on a type field. This example shows the setup for a Bean interface with multiple implementations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// Ora possiamo creare un codec per i tipi di fagioli\n// in base alla registry creata in precedenza\nCodec<BeanType<?>> beanTypeCodec = BeanType.REGISTRY.getCodec();\n\n// E in base a quello, ecco il nostro codec di dispatch della registry per i fagioli!\n// Il primo parametro e il nome dell'attributo per il tipo di fagiolo.\n// Se lasciato vuoto, assumerà \"type\" come valore predefinito.\nCodec<Bean> beanCodec = beanTypeCodec.dispatch(\"type\", Bean::getType, BeanType::codec);\n```\n\n----------------------------------------\n\nTITLE: Playing Entity Interaction Sounds in Minecraft\nDESCRIPTION: Example showing how to play sounds when using an item on entities and blocks. Uses pillager and copper block placement sounds with different volume and pitch settings.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/sounds/using-sounds.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomSoundItem extends Item {\n    public CustomSoundItem(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public ActionResult useOnEntity(ItemStack stack, PlayerEntity user, LivingEntity entity, Hand hand) {\n        // Play a pillager sound when using the item on an entity\n        entity.playSound(SoundEvents.ENTITY_PILLAGER_AMBIENT, 1.0f, 1.0f);\n        return ActionResult.SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Codecs with Pair in Java\nDESCRIPTION: Demonstrates how to merge two separate codecs into a pair codec that serializes to a map combining the fields of both original codecs. The example shows integer and boolean codecs being combined.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// Create two separate boxed codecs\nCodec<Integer> firstCodec = Codec.INT.fieldOf(\"i_am_number\").codec();\nCodec<Boolean> secondCodec = Codec.BOOL.fieldOf(\"this_statement_is_false\").codec();\n\n// Merge them into a pair codec\nCodec<Pair<Integer, Boolean>> pairCodec = Codec.pair(firstCodec, secondCodec);\n\n// Use it to serialize data\nDataResult<JsonElement> result = pairCodec.encodeStart(JsonOps.INSTANCE, Pair.of(23, true));\n```\n\n----------------------------------------\n\nTITLE: Lightning Stick Custom Item Implementation\nDESCRIPTION: A complete implementation of a custom item that summons lightning 10 blocks in front of the player when right-clicked. It demonstrates overriding the use() method and handling cooldowns to prevent spam.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/items/custom-item-interactions.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.item.custom;\n\nimport com.example.docs.DocsEntrypoint;\n\nimport net.minecraft.entity.EntityType;\nimport net.minecraft.entity.LightningEntity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.item.Item;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.Hand;\nimport net.minecraft.util.TypedActionResult;\nimport net.minecraft.util.math.Vec3d;\nimport net.minecraft.world.World;\n\n\npublic class LightningStick extends Item {\n    public LightningStick(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n        // If we're on the server, and the player is not on cooldown\n        if (!world.isClient && !user.getItemCooldownManager().isCoolingDown(this)) {\n            // Get the player's position and rotation\n            Vec3d userPos = user.getPos();\n            \n            // Get a normalised vector representing the direction the player is looking\n            Vec3d lookDir = user.getRotationVector().normalize();\n            \n            // Multiply the direction by 10 to get a position 10 blocks in front of the player\n            Vec3d destination = userPos.add(lookDir.multiply(10));\n            \n            // Create a new lightning entity at the destination position\n            LightningEntity lightningEntity = new LightningEntity(EntityType.LIGHTNING_BOLT, world);\n            \n            // Set the position of the lightning entity\n            lightningEntity.setPosition(destination);\n            \n            // Spawn the lightning entity in the world\n            world.spawnEntity(lightningEntity);\n\n            // Set a cooldown of 20 ticks (1 second) on the item\n            user.getItemCooldownManager().set(this, 20);\n\n            // Send a message to the player\n            user.sendMessage(Text.literal(\"Lightning!\"), true);\n        }\n\n        // Use the pattern we established earlier to return the current stack\n        // with a success result\n        return TypedActionResult.success(user.getStackInHand(hand));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumable Food Item with Status Effects in Java\nDESCRIPTION: Shows how to create a food item with a status effect by combining FoodComponent with ConsumableComponent. The example creates a component that applies a Poison II effect for 6 seconds when consumed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/food.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final FoodComponent POISONOUS_APPLE_COMPONENT = new FoodComponent.Builder()\n    .alwaysEdible()\n    .statusEffect(new StatusEffectInstance(StatusEffects.POISON, 6 * 20, 1), 1.0F)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Adding Loot Table Providers to DataGeneratorEntrypoint\nDESCRIPTION: Shows how to add block loot table providers to your data generator pack within the onInitializeDataGenerator method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/data-generation/loot-tables.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceBlockLootTableProvider::new);\npack.addProvider(FabricDocsReferenceChestLootTableProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Item Translation JSON\nDESCRIPTION: JSON configuration for item name translation\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/first-item.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"item.mod_id.suspicious_substance\": \"Suspicious Substance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Food Item with Status Effects in Fabric\nDESCRIPTION: This code snippet demonstrates how to create a fully configured food item with specific properties. It creates a food item that is always edible regardless of hunger level, classified as a snack, and always applies Poison II effect for 6 seconds when consumed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/food.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item SUSPICIOUS_SUBSTANCE = registerItem(\"suspicious_substance\",\n        new Item(new FabricItemSettings()\n                .food(new FoodComponent.Builder()\n                        .alwaysEdible()\n                        .snack()\n                        .statusEffect(new StatusEffectInstance(StatusEffects.POISON, 120, 1), 1.0f)\n                        .build())));\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Guidite Armor Material in Fabric\nDESCRIPTION: Demonstrates creating a static field for a custom 'Guidite' armor material with specific properties for defense, durability, and other attributes.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-armor.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final int GUIDITE_DURABILITY = 20;\npublic static final RegistryEntry<ArmorMaterial> GUIDITE = registerArmorMaterial(\n        \"guidite\",\n        Map.of(\n                ArmorMaterial.ArmorType.HELMET, 2,\n                ArmorMaterial.ArmorType.CHESTPLATE, 6,\n                ArmorMaterial.ArmorType.LEGGINGS, 5,\n                ArmorMaterial.ArmorType.BOOTS, 2\n        ),\n        10,\n        SoundEvents.ITEM_ARMOR_EQUIP_GOLD,\n        () -> Ingredient.ofItems(ModItems.GUIDITE),\n        1.0f,\n        0.0f,\n        false,\n        GUIDITE_DURABILITY\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Ticker Method for Block Entities in Fabric\nDESCRIPTION: Static tick method added to CounterBlockEntity to handle time-based logic for the block entity. Updates ticksSinceLast counter for rate limiting.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entities.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate int ticksSinceLast = 0;\n\npublic static void tick(World world, BlockPos blockPos, BlockState blockState, CounterBlockEntity counterBlockEntity) {\n    if (counterBlockEntity.ticksSinceLast < 10) {\n        counterBlockEntity.ticksSinceLast++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Guidite Armor Material in Fabric\nDESCRIPTION: Demonstrates creating a static field for a custom 'Guidite' armor material with specific properties for defense, durability, and other attributes.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-armor.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final int GUIDITE_DURABILITY = 20;\npublic static final RegistryEntry<ArmorMaterial> GUIDITE = registerArmorMaterial(\n        \"guidite\",\n        Map.of(\n                ArmorMaterial.ArmorType.HELMET, 2,\n                ArmorMaterial.ArmorType.CHESTPLATE, 6,\n                ArmorMaterial.ArmorType.LEGGINGS, 5,\n                ArmorMaterial.ArmorType.BOOTS, 2\n        ),\n        10,\n        SoundEvents.ITEM_ARMOR_EQUIP_GOLD,\n        () -> Ingredient.ofItems(ModItems.GUIDITE),\n        1.0f,\n        0.0f,\n        false,\n        GUIDITE_DURABILITY\n);\n```\n\n----------------------------------------\n\nTITLE: Using Scissor Manager with DrawContext in Java\nDESCRIPTION: Demonstrates how to use DrawContext.enableScissor() and DrawContext.disableScissor() to clip rendering to a specific area.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/draw-context.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncontext.enableScissor(10, 10, 100, 100);\ncontext.fillGradient(0, 0, this.width, this.height, 0xFFFF0000, 0xFF0000FF);\ncontext.disableScissor();\n```\n\n----------------------------------------\n\nTITLE: Opening Custom Screen with Previous Screen Reference\nDESCRIPTION: Code showing how to open a custom screen while maintaining reference to the previous screen for navigation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nScreen currentScreen = MinecraftClient.getInstance().currentScreen;\nMinecraftClient.getInstance().setScreen(\n  new CustomScreen(Text.empty(), currentScreen)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Block Model in JSON\nDESCRIPTION: Defines the 3D model for a custom block using the cube_all type.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/blocks/first-block.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"block/cube_all\",\n  \"textures\": {\n    \"all\": \"fabric-docs-reference:block/condensed_dirt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Map Codec\nDESCRIPTION: Shows the JSON result from serializing a Map using the map codec with Identifier keys created in the previous example.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example:number\": 23,\n  \"example:the_cooler_number\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Player Suggestion Provider in Java\nDESCRIPTION: Implementation of a custom SuggestionProvider that suggests player usernames from the server. Shows how to create a reusable suggestion provider class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/suggestions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class PlayerSuggestionProvider implements SuggestionProvider<ServerCommandSource> {\n    @Override\n    public CompletableFuture<Suggestions> getSuggestions(CommandContext<ServerCommandSource> context, SuggestionBuilder builder) {\n        return CommandSource.suggestMatching(\n            context.getSource().getServer().getPlayerManager().getPlayerList().stream()\n                .map(player -> player.getName().getString()),\n            builder\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Subcommands in Fabric\nDESCRIPTION: Shows how to create an optional subcommand where both the main command and the subcommand are valid executable commands.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/basics.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"subtater\")\n        .executes(context -> {\n            context.getSource().sendFeedback(() -> Text.literal(\"Called /subtater\"), false);\n            return Command.SINGLE_SUCCESS;\n        })\n        .then(CommandManager.literal(\"subcommand\").executes(context -> {\n            context.getSource().sendFeedback(() -> Text.literal(\"Called /subtater subcommand\"), false);\n            return Command.SINGLE_SUCCESS;\n        }))\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Food Component to an Item in Java\nDESCRIPTION: Demonstrates how to add a basic food component to an item by passing it to the Item.Settings instance, making the item edible without any special properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/food.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew Item.Settings().food(new FoodComponent.Builder().build())\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Damage in TaterBlock Class\nDESCRIPTION: Java implementation of a custom block that applies the 'Tater' damage type when an entity steps on it. It demonstrates creating a DamageSource and applying damage.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterBlock extends Block {\n    public TaterBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n        if (!world.isClient && entity instanceof LivingEntity livingEntity) {\n            DamageSource damageSource = new DamageSource(world.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(FabricDocsReferenceDamageTypes.TATER));\n            livingEntity.damage(damageSource, 5);\n        }\n        super.onSteppedOn(world, pos, state, entity);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering AttackBlockCallback in Java\nDESCRIPTION: This snippet demonstrates how to register an AttackBlockCallback to attack the player when they hit blocks that don't drop items when mined by hand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/events.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAttackBlockCallback.EVENT.register((player, world, hand, pos, direction) -> {\n    Block block = world.getBlockState(pos).getBlock();\n    if (block.getDroppedStacks(block.getDefaultState(), (ServerWorld) world, pos, player.getMainHandStack()).isEmpty()) {\n        player.damage(player.getDamageSources().generic(), 1.0f);\n        return ActionResult.SUCCESS;\n    }\n    return ActionResult.PASS;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Identifier Validation with comapFlatMap\nDESCRIPTION: Shows how to implement safe string-to-identifier conversion using comapFlatMap for proper error handling.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class Identifier {\n    public static final Codec<Identifier> CODEC = Codec.STRING.comapFlatMap(\n        Identifier::validate, Identifier::toString\n    );\n\n    public static DataResult<Identifier> validate(String id) {\n        try {\n            return DataResult.success(new Identifier(id));\n        } catch (InvalidIdentifierException e) {\n            return DataResult.error(\"Not a valid resource location: \" + id + \" \" + e.getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Boolean Block Property in Java\nDESCRIPTION: Defines a custom boolean property called 'ACTIVATED' for a custom block. This property will be used to change the block's appearance and functionality.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/blockstates.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final BooleanProperty ACTIVATED = BooleanProperty.of(\"activated\");\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Block Implementation with Damage Type\nDESCRIPTION: Full implementation of a custom block that applies the custom damage type when stepped on.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/entities/damage-types.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterBlock extends Block {\n\tpublic TaterBlock(Settings settings) {\n\t\tsuper(settings);\n\t}\n\n\t@Override\n\tpublic void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n\t\tif (!world.isClient && entity instanceof LivingEntity) {\n\t\t\t// Apply a custom damage source to the entity\n\t\t\tapplyTaterDamage(world, entity);\n\t\t}\n\t\tsuper.onSteppedOn(world, pos, state, entity);\n\t}\n\n\t/**\n\t * Applies the 'tater' damage type to the entity.\n\t *\n\t * @param world The world the entity is in\n\t * @param entity The entity to damage\n\t */\n\tprivate void applyTaterDamage(World world, Entity entity) {\n\t\t// Create a damage source using our custom damage type\n\t\tDamageSource damageSource = new DamageSource(world.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE)\n\t\t\t\t.entryOf(FabricDocsReferenceDamageTypes.TATER));\n\t\t// Apply damage to the entity\n\t\tentity.damage(damageSource, 5.0F);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Block Item to Custom Item Group in Java\nDESCRIPTION: Erweitert die Blockregistrierung, um das Block-Item einer benutzerdefinierten Itemgruppe hinzuzufügen, indem ein ItemGroupEvents.ModifyEntries-Event-Handler verwendet wird.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/first-block.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Register method for blocks, with a boolean to determine if an item should be registered for the block\nprivate static <T extends Block> T register(String id, T block, boolean shouldRegisterItem) {\n    // Register our block to the \"BLOCK\" registry\n    Registry.register(Registries.BLOCK, new Identifier(\"fabric-docs-reference\", id), block);\n\n    // If shouldRegisterItem is true, also register a BlockItem for the block.\n    if (shouldRegisterItem) {\n        BlockItem blockItem = new BlockItem(block, new FabricItemSettings());\n        // Register the BlockItem to the \"ITEM\" registry\n        Registry.register(Registries.ITEM, new Identifier(\"fabric-docs-reference\", id), blockItem);\n\n        // Add the BlockItem to our custom item group\n        // This callback will run when the item group is being populated\n        ItemGroupEvents.modifyEntriesEvent(ModItemGroups.ITEM_GROUP).register(content -> {\n            // Add the item to the item group\n            content.add(blockItem);\n        });\n    }\n\n    return block;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Custom Screen\nDESCRIPTION: Code snippet showing how to open a custom screen using MinecraftClient's setScreen method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMinecraftClient.getInstance().setScreen(\n  new CustomScreen(Text.empty())\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Block Model JSON for Minecraft Block\nDESCRIPTION: Definiert ein JSON-Blockmodellformat, das den block/cube_all-Typ verwendet und auf eine benutzerdefinierte Blocktextur verweist.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/first-block.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"minecraft:block/cube_all\",\n  \"textures\": {\n    \"all\": \"fabric-docs-reference:block/condensed_dirt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Codec for Linked List\nDESCRIPTION: Creates a recursive codec for serializing a singly-linked list structure using Codecs.createRecursive.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nCodec<ListNode> codec = Codecs.createRecursive(\n  \"ListNode\",\n  selfCodec -> {\n    return RecordCodecBuilder.create(instance ->\n      instance.group(\n        Codec.INT.fieldOf(\"value\").forGetter(ListNode::value),\n        Codecs.createStrictOptionalFieldCodec(selfCodec, \"next\", null).forGetter(ListNode::next)\n      ).apply(instance, ListNode::new)\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing JRE on Arch Linux using Pacman\nDESCRIPTION: Command to install the latest Java Runtime Environment (JRE) from the official Arch Linux repositories using pacman package manager.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/installing-java/linux.md#2025-04-05_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -S jre-openjdk\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotation Animation with Quaternions in Fabric\nDESCRIPTION: This code shows how to rotate a diamond model around the Z-axis using Quaternions via the RotationAxis utility class. The rotation angle is calculated from tickDelta to create a continuous animation effect.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/basic-concepts.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void render(MatrixStack matrices, VertexConsumerProvider vertexConsumers, double x, double y, double tickDelta) {\n    float rotation = (float) (tickDelta / 20 * Math.PI * 2);\n\n    // Push the matrix stack and translate to the correct position\n    matrices.push();\n    matrices.translate(x, y, 0);\n    matrices.multiply(RotationAxis.POSITIVE_Z.rotation(rotation));\n\n    // Get the transformation matrix from the matrix stack\n    Matrix4f matrix = matrices.peek().getPositionMatrix();\n\n    // Render the diamond\n    this.renderDiamond(matrix, vertexConsumers.getBuffer(RenderLayer.getLines()));\n\n    // Pop the matrix stack\n    matrices.pop();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SoundInstanceCallback Interface for Sound Event Handling\nDESCRIPTION: Defines a callback interface for handling sound instance events, such as when a sound finishes playing. This enables communication between sound instances and their managing systems.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Callback for SoundInstance events.\n */\npublic interface SoundInstanceCallback {\n    /**\n     * Called when a sound instance is finished.\n     *\n     * @param soundInstance The sound instance that finished\n     */\n    void onFinished(SoundInstance soundInstance);\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Particle Registration\nDESCRIPTION: Registers the particle on the client side and configures its movement behavior using the end rod particle factory. This determines how the particle will move and animate in-game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitializeClient() {\n    ParticleFactoryRegistry.getInstance().register(FabricDocsReference.SPARKLE_PARTICLE, EndRodParticle.Factory::new);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Chest Loot Tables in Java\nDESCRIPTION: Demonstrates how to generate a chest loot table with multiple pools and items using the SimpleFabricLootTableProvider.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/data-generation/loot-tables.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nexporter.accept(ModLootTables.EXAMPLE_CHEST, LootTable.builder()\n    .pool(LootPool.builder()\n        .rolls(UniformLootNumberProvider.create(2.0f, 3.0f))\n        .with(ItemEntry.builder(Items.APPLE)\n            .weight(3)\n            .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1.0f, 3.0f))))\n        .with(ItemEntry.builder(Items.COAL)\n            .weight(5)\n            .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1.0f, 5.0f))))\n    )\n    .pool(LootPool.builder()\n        .rolls(ConstantLootNumberProvider.create(1))\n        .with(ItemEntry.builder(Items.GOLDEN_APPLE))\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating DamageSource for Custom Damage Type\nDESCRIPTION: Shows how to create a DamageSource instance for the custom 'Tater' damage type within a block implementation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDamageSource damageSource = world.getDamageSources().create(FabricDocsReferenceDamageTypes.TATER);\nif (damageSource != null) {\n    entity.damage(damageSource, 5.0f);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Block with Custom Luminance Setting\nDESCRIPTION: Registers a custom block with dynamic light emission based on its block state. Uses the luminance method to set the light level based on a function that checks the block's 'activated' property.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic static final Block PRISMARINE_LAMP = registerBlock(\"prismarine_lamp\",\n        new PrismarineLampBlock(FabricBlockSettings.create().mapColor(MapColor.CYAN)\n                .strength(1.5f).luminance(PrismarineLampBlock.createLightLevelFromActivatedBlockState())),\n        ModItemGroups.FABRIC_DOCS);\n```\n\n----------------------------------------\n\nTITLE: Finding Crash Report Locations - Windows Path\nDESCRIPTION: Shows the default crash report directory location for Windows Minecraft installations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/troubleshooting/crash-reports.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n%appdata%\\.minecraft\\crash-reports\n```\n\n----------------------------------------\n\nTITLE: Creating DamageSource for Custom Damage Type\nDESCRIPTION: Shows how to create a DamageSource instance for the custom 'Tater' damage type within a block implementation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDamageSource damageSource = world.getDamageSources().create(FabricDocsReferenceDamageTypes.TATER);\nif (damageSource != null) {\n    entity.damage(damageSource, 5.0f);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom MovingSoundInstance Class in Fabric\nDESCRIPTION: Implementation of a custom SoundInstance that extends MovingSoundInstance to create a sound that follows an entity. This class allows for sounds that can be updated through the tick method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomSoundInstance extends MovingSoundInstance {\n\n    private final LivingEntity entity;\n\n    public CustomSoundInstance(SoundEvent sound, SoundCategory category, LivingEntity entity) {\n        super(sound, category, entity.world.random);\n        this.entity = entity;\n        this.repeat = true; // Make it repeat indefinitely\n        this.repeatDelay = 0; // No delay between repetitions\n        this.volume = 1.0F; // Initial volume, can be changed later\n    }\n\n    @Override\n    public void tick() {\n        // Stop the sound if the entity no longer exists or is removed\n        if (!this.entity.isAlive()) {\n            this.setDone();\n            return;\n        }\n\n        // Update the position to follow the entity\n        this.x = this.entity.getX();\n        this.y = this.entity.getY();\n        this.z = this.entity.getZ();\n\n        // Optionally update other properties based on entity state\n        // e.g., this.pitch = this.entity.isSprinting() ? 1.5F : 1.0F;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Usage Counter in CounterItem Class\nDESCRIPTION: Full implementation of a Counter item's use method that reads the current click count, increments it, and stores the updated value back in the item's component.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n    ItemStack stack = user.getStackInHand(hand);\n    if (!world.isClient) {\n        // Check if the component exists\n        int currentCount = stack.getOrDefault(ModComponents.CLICK_COUNT_COMPONENT, 0);\n        // Add one to the current count\n        int updatedCount = currentCount + 1;\n        // Set the new component value\n        stack.set(ModComponents.CLICK_COUNT_COMPONENT, updatedCount);\n    }\n    return TypedActionResult.success(stack);\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a Custom Screen in Fabric Mods\nDESCRIPTION: This code snippet demonstrates how to close a custom screen by setting it to null using MinecraftClient's setScreen method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMinecraftClient.getInstance().setScreen(null);\n```\n\n----------------------------------------\n\nTITLE: Custom Death Message Localization\nDESCRIPTION: JSON translation entry for custom death message when an entity dies from the Tater damage type.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/entities/damage-types.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"death.attack.tater\": \"%1$s died from Tater damage!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Loot Table Provider in Fabric\nDESCRIPTION: Shows the structure of a FabricBlockLootTableProvider class for generating block loot tables in a Fabric mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/loot-tables.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceBlockLootTableProvider extends FabricBlockLootTableProvider {\n    protected FabricDocsReferenceBlockLootTableProvider(FabricDataOutput dataOutput) {\n        super(dataOutput);\n    }\n\n    @Override\n    public void generate() {\n        // Add loot table generation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Chest Loot Tables in Fabric\nDESCRIPTION: Demonstrates how to generate a chest loot table with multiple items, including conditional drops and quantity ranges.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/loot-tables.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void accept(BiConsumer<Identifier, LootTable.Builder> exporter) {\n    exporter.accept(ModLootTables.RUBY_LOOT.getValue(),\n            LootTable.builder()\n                    .pool(LootPool.builder()\n                            .rolls(UniformLootNumberProvider.create(2, 3))\n                            .with(ItemEntry.builder(ModItems.RUBY).weight(5)\n                                    .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1, 2))))\n                            .with(ItemEntry.builder(Items.DIAMOND).weight(1))\n                            .conditionally(RandomChanceLootCondition.builder(0.6f))));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Collision Shape Logic for a Vertical Slab\nDESCRIPTION: Implements the getOutlineShape and getCollisionShape methods for a custom vertical slab block, returning the appropriate VoxelShape based on block state properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic VoxelShape getOutlineShape(BlockState state, BlockView world, BlockPos pos, ShapeContext context) {\n    return getShape(state);\n}\n\n@Override\npublic VoxelShape getCollisionShape(BlockState state, BlockView world, BlockPos pos, ShapeContext context) {\n    return getShape(state);\n}\n\nprivate VoxelShape getShape(BlockState state) {\n    if (state.get(SINGLE)) {\n        return switch (state.get(FACING)) {\n            case NORTH -> NORTH_SHAPE;\n            case EAST -> EAST_SHAPE; \n            case SOUTH -> SOUTH_SHAPE;\n            case WEST -> WEST_SHAPE;\n            default -> FULL_SHAPE;\n        };\n    }\n    return FULL_SHAPE;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Attack Event Handler in Java\nDESCRIPTION: Example showing how to register an AttackBlockCallback to damage players when they hit blocks that don't drop items when mined by hand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/events.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAttackBlockCallback.EVENT.register((player, world, hand, pos, direction) -> {\n    BlockState state = world.getBlockState(pos);\n    if (!state.isToolRequired() && state.getHardness() != 0.0f) {\n        player.damage(world.getDamageSources().generic(), 1.0f);\n    }\n    return ActionResult.PASS;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Parameter to Custom Criterion Conditions in Java\nDESCRIPTION: Enhances the custom criterion by adding a count parameter to track how many times a player has used a tool. This allows creating advancements that require a specific number of tool uses.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic boolean requirementsMet(ServerPlayerEntity player, int count) {\n    return count >= this.requiredTimes && this.playerPredicate.test(new LootContext.Builder(player.getServerWorld())\n            .random(player.getRandom())\n            .parameter(LootContextParameters.THIS_ENTITY, player)\n            .parameter(LootContextParameters.ORIGIN, player.getPos())\n            .build(LootContextTypes.ADVANCEMENT));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric Range Constraints in Codecs\nDESCRIPTION: Demonstrates creating codecs that only accept numeric values within a specified inclusive range. These constraints apply to both serialization and deserialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Non può essere superiore a 2\nCodec<Integer> amountOfFriendsYouHave = Codec.intRange(0, 2);\n```\n\n----------------------------------------\n\nTITLE: Tool Item Registration in ModItems Class\nDESCRIPTION: Registration of custom tool items using the previously defined tool material, including sword, pickaxe, axe, and other tools.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-tools.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item GUIDITE_SWORD = registerItem(\"guidite_sword\", new SwordItem(GuiditeMaterial.INSTANCE, 3, -2.4F, new FabricItemSettings()));\npublic static final Item GUIDITE_PICKAXE = registerItem(\"guidite_pickaxe\", new PickaxeItem(GuiditeMaterial.INSTANCE, 1, -2.8F, new FabricItemSettings()));\npublic static final Item GUIDITE_AXE = registerItem(\"guidite_axe\", new AxeItem(GuiditeMaterial.INSTANCE, 5.0F, -3.0F, new FabricItemSettings()));\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Damage Block Implementation\nDESCRIPTION: Full implementation of a block that applies the custom damage type when entities step on it. The class overrides the onSteppedOn method to apply damage.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/damage-types.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n:::1\npublic class TaterBlock extends Block {\n\tpublic TaterBlock(Settings settings) {\n\t\tsuper(settings);\n\t}\n\n\t@Override\n\tpublic void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n\t\tif (!world.isClient() && entity instanceof LivingEntity) {\n\t\t\t// Create a damage source from our damage type\n\t\t\tDamageSource damageSource = new DamageSource(\n\t\t\t\tworld.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(FabricDocsReferenceDamageTypes.TATER)\n\t\t\t);\n\t\t\t// Deal damage to the entity\n\t\t\tentity.damage(damageSource, 5.0F);\n\t\t}\n\n\t\tsuper.onSteppedOn(world, pos, state, entity);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Type in Java\nDESCRIPTION: Demonstrates how to obtain the RegistryKey for a custom damage type in Java code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/pt_br/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceDamageTypes {\n    public static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE, new Identifier(\"fabric-docs-reference\", \"tater\"));\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output for the Simple Dirt Advancement\nDESCRIPTION: Shows the generated JSON output for the dirt block advancement, including display properties, criteria, and requirements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"display\": {\n    \"icon\": {\n      \"item\": \"minecraft:dirt\"\n    },\n    \"title\": {\n      \"translate\": \"text.fabric.advancements.get_dirt.title\"\n    },\n    \"description\": {\n      \"translate\": \"text.fabric.advancements.get_dirt.description\"\n    },\n    \"background\": \"minecraft:textures/gui/advancements/backgrounds/adventure.png\",\n    \"frame\": \"task\",\n    \"show_toast\": true,\n    \"announce_to_chat\": true,\n    \"hidden\": false\n  },\n  \"criteria\": {\n    \"get_dirt\": {\n      \"trigger\": \"minecraft:inventory_changed\",\n      \"conditions\": {\n        \"items\": [\n          {\n            \"items\": [\n              \"minecraft:dirt\"\n            ]\n          }\n        ]\n      }\n    }\n  },\n  \"requirements\": [\n    [\n      \"get_dirt\"\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Block Entity Type\nDESCRIPTION: Shows registration of the Counter block entity type in the mod's initialization. Creates and registers the BlockEntityType for the counter block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entities.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ModBlockEntities {\n    public static final BlockEntityType<CounterBlockEntity> COUNTER_BLOCK_ENTITY = \n        Registry.register(\n            Registries.BLOCK_ENTITY_TYPE,\n            new Identifier(FabricDocsReference.MOD_ID, \"counter\"),\n            FabricBlockEntityTypeBuilder.create(CounterBlockEntity::new).build()\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Block Entity Type\nDESCRIPTION: Shows registration of the Counter block entity type in the mod's initialization. Creates and registers the BlockEntityType for the counter block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entities.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ModBlockEntities {\n    public static final BlockEntityType<CounterBlockEntity> COUNTER_BLOCK_ENTITY = \n        Registry.register(\n            Registries.BLOCK_ENTITY_TYPE,\n            new Identifier(FabricDocsReference.MOD_ID, \"counter\"),\n            FabricBlockEntityTypeBuilder.create(CounterBlockEntity::new).build()\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Screen Class in Java for Fabric Mods\nDESCRIPTION: This code snippet demonstrates how to create a custom screen class by extending the Screen class. It shows how to initialize components, render the screen, and handle button clicks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomScreen extends Screen {\n    private static final Text BUTTON_TEXT = Text.literal(\"Click me!\");\n    private Text labelText;\n\n    public CustomScreen(Text title) {\n        super(title);\n        this.labelText = Text.literal(\"You haven't clicked the button yet!\");\n    }\n\n    @Override\n    protected void init() {\n        super.init();\n        this.addDrawableChild(ButtonWidget.builder(BUTTON_TEXT, button -> {\n            this.labelText = Text.literal(\"You clicked the button!\");\n        }).dimensions(this.width / 2 - 75, this.height / 2 - 10, 150, 20).build());\n    }\n\n    @Override\n    public void render(DrawContext context, int mouseX, int mouseY, float delta) {\n        this.renderBackground(context);\n        context.drawCenteredTextWithShadow(this.textRenderer, this.labelText, this.width / 2, this.height / 2 - 30, 0xFFFFFF);\n        super.render(context, mouseX, mouseY, delta);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Damage Block Implementation\nDESCRIPTION: Full implementation of a block that applies the custom damage type when entities step on it. The class overrides the onSteppedOn method to apply damage.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/damage-types.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n:::1\npublic class TaterBlock extends Block {\n\tpublic TaterBlock(Settings settings) {\n\t\tsuper(settings);\n\t}\n\n\t@Override\n\tpublic void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n\t\tif (!world.isClient() && entity instanceof LivingEntity) {\n\t\t\t// Create a damage source from our damage type\n\t\t\tDamageSource damageSource = new DamageSource(\n\t\t\t\tworld.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(FabricDocsReferenceDamageTypes.TATER)\n\t\t\t);\n\t\t\t// Deal damage to the entity\n\t\t\tentity.damage(damageSource, 5.0F);\n\t\t}\n\n\t\tsuper.onSteppedOn(world, pos, state, entity);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Vertical Slab Block Model JSON Definition\nDESCRIPTION: A custom JSON model definition for a vertical slab block, defining the base model structure with texture variables that can be set by child models.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"block/block\",\n  \"textures\": {\n    \"particle\": \"#side\"\n  },\n  \"elements\": [\n    {\n      \"from\": [0, 0, 0],\n      \"to\": [8, 16, 16],\n      \"faces\": {\n        \"down\": {\"uv\": [0, 0, 8, 16], \"texture\": \"#bottom\", \"cullface\": \"down\"},\n        \"up\": {\"uv\": [0, 0, 8, 16], \"texture\": \"#top\", \"cullface\": \"up\"},\n        \"north\": {\"uv\": [8, 0, 16, 16], \"texture\": \"#side\", \"cullface\": \"north\"},\n        \"south\": {\"uv\": [0, 0, 8, 16], \"texture\": \"#side\", \"cullface\": \"south\"},\n        \"west\": {\"uv\": [0, 0, 16, 16], \"texture\": \"#side\", \"cullface\": \"west\"},\n        \"east\": {\"uv\": [0, 0, 16, 16], \"texture\": \"#side\"}\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TagKey in Fabric\nDESCRIPTION: Code to define a TagKey for items, which serves as an identifier for the tag. The TagKey uses a namespace and path to uniquely identify the tag within the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/tags.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final TagKey<Item> GEMS = TagKey.of(RegistryKeys.ITEM, new Identifier(\"fabric-docs-reference\", \"gems\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Loot Tables in Java\nDESCRIPTION: Demonstrates how to add eggs to the coal ore loot table using LootTableEvents.MODIFY event handler.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/events.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLootPool.Builder poolBuilder = LootPool.builder();\nLootTableEvents.MODIFY.register((resourceManager, lootManager, id, tableBuilder, source) -> {\n    if (Blocks.COAL_ORE.getLootTableId().equals(id)) {\n        poolBuilder.with(ItemEntry.builder(Items.EGG));\n        tableBuilder.pool(poolBuilder);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Datagen Method in ModelProvider\nDESCRIPTION: Example of calling the custom datagen method within a ModelProvider implementation to generate block and item models for vertical slabs.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/block-models.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n:::datagen-model-custom:method-call\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Advancement for Obtaining an Item in Java\nDESCRIPTION: Implements a basic advancement that triggers when a player obtains a dirt block. It demonstrates setting up advancement display properties, creating criteria, and registering the advancement with a specific ID.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate void generateItemAdvancement(Consumer<Advancement> consumer) {\n    // Display settings\n    var getDirtDisplay = new AdvancementDisplay(\n            Items.DIRT.getDefaultStack(), // Icon\n            Text.translatable(\"advancements.fabric-docs-reference.get_dirt.title\"), // Title\n            Text.translatable(\"advancements.fabric-docs-reference.get_dirt.description\"), // Description\n            new Identifier(\"textures/gui/advancements/backgrounds/adventure.png\"), // Background\n            AdvancementFrame.TASK, // Frame type\n            true, // Show toast notification\n            true, // Announce to chat\n            false // Hidden in the advancement tab\n    );\n\n    // Create an advancement with the inventory changed criterion for getting dirt\n    Advancement getDirt = Advancement.Builder.create()\n            .display(getDirtDisplay)\n            .criterion(\"got_dirt\", InventoryChangedCriterion.Conditions.items(Items.DIRT))\n            .build(consumer, \"fabric-docs-reference:get_dirt\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Entries\nDESCRIPTION: Example of adding various translation entries using the TranslationBuilder, including translations for items, blocks, and custom text keys.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/translations.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ntranslationBuilder.add(Items.DIAMOND, \"Shiny Rock\");\ntranslationBuilder.add(\"item.minecraft.diamond\", \"Shiny Rock\");\ntranslationBuilder.add(\"text.fabric_docs_reference.greeting\", \"Hello there!\");\n```\n\n----------------------------------------\n\nTITLE: Creating Tool Items in Java\nDESCRIPTION: Demonstrates how to create tool items using the custom GuiditeMaterial. Includes creation of sword, pickaxe, axe, shovel, and hoe items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/custom-tools.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item GUIDITE_SWORD = registerItem(\"guidite_sword\", new SwordItem(GuiditeMaterial.INSTANCE, 3, -2.4F, new FabricItemSettings()));\npublic static final Item GUIDITE_PICKAXE = registerItem(\"guidite_pickaxe\", new PickaxeItem(GuiditeMaterial.INSTANCE, 1, -2.8F, new FabricItemSettings()));\npublic static final Item GUIDITE_AXE = registerItem(\"guidite_axe\", new AxeItem(GuiditeMaterial.INSTANCE, 6.0F, -3.1F, new FabricItemSettings()));\npublic static final Item GUIDITE_SHOVEL = registerItem(\"guidite_shovel\", new ShovelItem(GuiditeMaterial.INSTANCE, 1.5F, -3.0F, new FabricItemSettings()));\npublic static final Item GUIDITE_HOE = registerItem(\"guidite_hoe\", new HoeItem(GuiditeMaterial.INSTANCE, -2, -1.0F, new FabricItemSettings()));\n```\n\n----------------------------------------\n\nTITLE: Creating Loot Table for Block Drops in JSON\nDESCRIPTION: Defines the loot table for a custom block, specifying what items it drops when broken.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/blocks/first-block.md#2025-04-05_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"minecraft:block\",\n  \"pools\": [\n    {\n      \"bonus_rolls\": 0.0,\n      \"conditions\": [\n        {\n          \"condition\": \"minecraft:survives_explosion\"\n        }\n      ],\n      \"entries\": [\n        {\n          \"type\": \"minecraft:item\",\n          \"name\": \"fabric-docs-reference:condensed_dirt\"\n        }\n      ],\n      \"rolls\": 1.0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Types in Java Code\nDESCRIPTION: Code to obtain a RegistryKey for a custom damage type to use it in game logic.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.damage;\n\nimport net.minecraft.entity.damage.DamageType;\nimport net.minecraft.registry.RegistryKey;\nimport net.minecraft.registry.RegistryKeys;\nimport net.minecraft.util.Identifier;\n\npublic class FabricDocsReferenceDamageTypes {\n    public static final RegistryKey<DamageType> TATER = RegistryKey.of(\n            RegistryKeys.DAMAGE_TYPE,\n            new Identifier(\"fabric-docs-reference\", \"tater\")\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Registry Dispatch Codec for Beans\nDESCRIPTION: Sets up a registry dispatch codec to handle different implementations of the Bean interface. The codec determines which specific bean codec to use based on a type field in the serialized data.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// Now we can create a codec for bean types\n// based on the previously created registry\nCodec<BeanType<?>> beanTypeCodec = BeanType.REGISTRY.getCodec();\n\n// And based on that, here's our registry dispatch codec for beans!\n// The first argument is the field name for the bean type.\n// When left out, it will default to \"type\".\nCodec<Bean> beanCodec = beanTypeCodec.dispatch(\"type\", Bean::getType, BeanType::codec);\n```\n\n----------------------------------------\n\nTITLE: Opening Screen with Previous Screen Return Logic\nDESCRIPTION: Code to open a custom screen while preserving the previous screen reference for navigation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nScreen currentScreen = MinecraftClient.getInstance().currentScreen;\nMinecraftClient.getInstance().setScreen(\n  new CustomScreen(Text.empty(), currentScreen)\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Types Through Code\nDESCRIPTION: Java code to obtain the RegistryKey for a custom damage type for later use in creating damage sources.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceDamageTypes {\n\tpublic static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE,\n\t\t\tnew Identifier(\"fabric-docs-reference\", \"tater\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Text with Minecraft Style\nDESCRIPTION: Demonstrates how to apply multiple formatting options to text using the Formatting enum.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/text-and-translations.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMutableText result = Text.literal(\"Hello World!\")\n  .formatted(Formatting.AQUA, Formatting.BOLD, Formatting.UNDERLINE);\n```\n\n----------------------------------------\n\nTITLE: Creating Item Model for Block in JSON\nDESCRIPTION: Defines the item model for a block's item representation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/blocks/first-block.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"fabric-docs-reference:block/condensed_dirt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tool Material in Java\nDESCRIPTION: Creates a custom tool material class called GuiditeMaterial, extending ToolMaterial. It defines properties such as durability, mining speed, attack damage, mining level, enchantability, and repair ingredient.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/items/custom-tools.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class GuiditeMaterial implements ToolMaterial {\n    public static final GuiditeMaterial INSTANCE = new GuiditeMaterial();\n\n    @Override\n    public int getDurability() {\n        return 1000;\n    }\n\n    @Override\n    public float getMiningSpeedMultiplier() {\n        return 7.0F;\n    }\n\n    @Override\n    public float getAttackDamage() {\n        return 3.0F;\n    }\n\n    @Override\n    public int getMiningLevel() {\n        return 2;\n    }\n\n    @Override\n    public int getEnchantability() {\n        return 18;\n    }\n\n    @Override\n    public Ingredient getRepairIngredient() {\n        return Ingredient.ofItems(ModItems.GUIDITE);\n    }\n\n    public static final ToolMaterial INSTANCE = new GuiditeMaterial();\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Loot Tables with LootTableEvents in Java\nDESCRIPTION: Shows how to add items to existing loot tables without overriding them by using the LootTableEvents.MODIFY event. The example adds eggs to coal ore loot tables.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/uk_ua/develop/events.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nif (id.equals(new Identifier(\"minecraft\", \"blocks/coal_ore\"))) {\n    // Add egg to coal ore\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds on Item Use in Minecraft Mod (Java)\nDESCRIPTION: This code snippet demonstrates how to play sounds when a custom item is used on an entity or block. It uses the 'playSound()' method with different sound events, volumes, and pitches.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/using-sounds.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic ActionResult useOnEntity(ItemStack stack, PlayerEntity user, LivingEntity entity, Hand hand) {\n    if (!user.getWorld().isClient()) {\n        entity.playSound(SoundEvents.BLOCK_COPPER_PLACE, 1.0F, 1.0F);\n    }\n    return ActionResult.SUCCESS;\n}\n\n@Override\npublic ActionResult useOnBlock(ItemUsageContext context) {\n    if (!context.getWorld().isClient()) {\n        context.getPlayer().playSound(SoundEvents.ENTITY_PILLAGER_AMBIENT, 1.0F, 1.0F);\n    }\n    return ActionResult.SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Damage Type to Bypass Armor Tag\nDESCRIPTION: JSON configuration to add the custom damage type to the 'bypasses_armor' tag. This ensures the damage ignores armor protection.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/damage-types.md#2025-04-05_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:tater\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Item Model in JSON\nDESCRIPTION: JSON model definition for a custom tool item (Guidite Sword) using the 'item/handheld' parent model.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/custom-tools.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/handheld\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_sword\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Type Through Registry\nDESCRIPTION: Java code to access the custom damage type via its RegistryKey in the DamageType registry.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/it_it/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n:::1\npublic class FabricDocsReferenceDamageTypes {\n    // Registry key for our damage type\n    public static final String TATER_DAMAGE_TYPE_ID = \"tater\";\n    public static final RegistryKey<DamageType> TATER_DAMAGE_TYPE = RegistryKey.of(\n            RegistryKeys.DAMAGE_TYPE, new Identifier(\"fabric-docs-reference\", TATER_DAMAGE_TYPE_ID)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing an Entire Texture in Minecraft Rendering\nDESCRIPTION: This snippet shows how to draw a complete texture using DrawContext.drawTexture(). It specifies the image path, position, dimensions, and texture properties to render the entire texture at once.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/draw-context.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Draw the recipe book texture in its entirety\nthis.drawContext.drawTexture(new Identifier(\"minecraft\", \"textures/gui/recipe_book.png\"), 10, 230, 0, 0, 100, 100, 256, 256);\n```\n\n----------------------------------------\n\nTITLE: Custom Death Message for Damage Type\nDESCRIPTION: JSON entry for defining a custom death message for the tater damage type in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/it_it/develop/entities/damage-types.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"death.attack.tater\": \"%1$s was destroyed by the mighty tater!\"\n```\n\n----------------------------------------\n\nTITLE: Basic JUnit Test for Fabric Codec Functionality\nDESCRIPTION: Example of a simple JUnit test class for testing codec functionality in a Fabric mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/automatic-testing.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@[code lang=java transcludeWith=:::automatic-testing:4](@/reference/latest/src/test/java/com/example/docs/codec/BeanTypeTest.java)\n```\n\n----------------------------------------\n\nTITLE: Creating Tool Items in Java\nDESCRIPTION: Demonstrates how to create and register custom tool items using the defined tool material.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/items/custom-tools.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item GUIDITE_SWORD = registerItem(\"guidite_sword\", new SwordItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new Item.Settings()));\npublic static final Item GUIDITE_SHOVEL = registerItem(\"guidite_shovel\", new ShovelItem(GUIDITE_TOOL_MATERIAL, 1f, 1f, new Item.Settings()));\npublic static final Item GUIDITE_PICKAXE = registerItem(\"guidite_pickaxe\", new PickaxeItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new Item.Settings()));\npublic static final Item GUIDITE_AXE = registerItem(\"guidite_axe\", new AxeItem(GUIDITE_TOOL_MATERIAL, 1f, 1f, new Item.Settings()));\npublic static final Item GUIDITE_HOE = registerItem(\"guidite_hoe\", new HoeItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new Item.Settings()));\n```\n\n----------------------------------------\n\nTITLE: Defining Pillar Block States JSON\nDESCRIPTION: Blockstate configuration for a pillar block, defining model variants for different axis orientations (x, y, z).\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/blocks/blockstates.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"axis=x\": {\n      \"model\": \"fabric-docs-reference:block/condensed_oak_log_horizontal\",\n      \"x\": 90,\n      \"y\": 90\n    },\n    \"axis=y\": {\n      \"model\": \"fabric-docs-reference:block/condensed_oak_log\"\n    },\n    \"axis=z\": {\n      \"model\": \"fabric-docs-reference:block/condensed_oak_log_horizontal\",\n      \"x\": 90\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ArmorMaterial Class in Java\nDESCRIPTION: This snippet shows how to create a custom ArmorMaterial class that defines properties for a new armor set. It includes implementations for durability, protection, enchantability, equip sound, repair ingredient, name, toughness, and knockback resistance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-armor.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class GuiditeArmorMaterial implements ArmorMaterial {\n    private static final int[] BASE_DURABILITY = new int[]{13, 15, 16, 11};\n    private static final int[] PROTECTION_VALUES = new int[]{3, 6, 8, 3};\n\n    @Override\n    public int getDurability(ArmorItem.Type type) {\n        return BASE_DURABILITY[type.ordinal()] * 37;\n    }\n\n    @Override\n    public int getProtection(ArmorItem.Type type) {\n        return PROTECTION_VALUES[type.ordinal()];\n    }\n\n    @Override\n    public int getEnchantability() {\n        return 15;\n    }\n\n    @Override\n    public SoundEvent getEquipSound() {\n        return SoundEvents.ITEM_ARMOR_EQUIP_DIAMOND;\n    }\n\n    @Override\n    public Ingredient getRepairIngredient() {\n        return Ingredient.ofItems(ModItems.GUIDITE);\n    }\n\n    @Override\n    public String getName() {\n        return \"guidite\";\n    }\n\n    @Override\n    public float getToughness() {\n        return 3.0F;\n    }\n\n    @Override\n    public float getKnockbackResistance() {\n        return 0.1F;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Model for Custom Tool in JSON\nDESCRIPTION: Creates a JSON model for a custom tool item (Guidite Sword) using the 'item/handheld' parent model.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/items/custom-tools.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/handheld\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_sword\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Block with Settings in Java for Fabric\nDESCRIPTION: Implementiert die Registrierung eines benutzerdefinierten Blocks mit angepassten Settings wie Material, Soundeffekten und Härte. Erstellt einen kondensierten Erdblock als Beispiel.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/first-block.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Register method for blocks, with a boolean to determine if an item should be registered for the block\nprivate static <T extends Block> T register(String id, T block, boolean shouldRegisterItem) {\n    // Register our block to the \"BLOCK\" registry\n    Registry.register(Registries.BLOCK, new Identifier(\"fabric-docs-reference\", id), block);\n\n    // If shouldRegisterItem is true, also register a BlockItem for the block.\n    if (shouldRegisterItem) {\n        BlockItem blockItem = new BlockItem(block, new FabricItemSettings());\n        // Register the BlockItem to the \"ITEM\" registry\n        Registry.register(Registries.ITEM, new Identifier(\"fabric-docs-reference\", id), blockItem);\n    }\n\n    return block;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Type in Java\nDESCRIPTION: Java code to obtain the RegistryKey for the custom 'Tater' damage type, which is used to create a DamageSource instance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceDamageTypes {\n    public static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE, new Identifier(\"fabric-docs-reference\", \"tater\"));\n}\n```\n\n----------------------------------------\n\nTITLE: SoundInstanceCallback Interface for Sound Event Handling\nDESCRIPTION: Callback interface used by custom sound instances to notify their manager when a sound finishes playing. This allows for centralized management of dynamic sounds.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic interface SoundInstanceCallback {\n    /**\n     * Called when the sound instance has finished playing.\n     * This could be because it was naturally completed or manually stopped.\n     *\n     * @param soundInstance The sound instance that has finished\n     */\n    void onFinished(SoundInstance soundInstance);\n\n    // Other potential callbacks could be added here:\n    // void onVolumeChanged(SoundInstance soundInstance, float newVolume);\n    // void onTransitionStateChanged(SoundInstance soundInstance, TransitionState newState);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scissor Manager with DrawContext\nDESCRIPTION: Shows how to use the scissor manager to clip rendering to a specific area\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/draw-context.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncontext.enableScissor(10, 10, 60, 60);\nDrawableHelper.fill(matrices, 0, 0, width, height, 0xFFFF0000);\ncontext.disableScissor();\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Transformation Matrix from DrawContext in Minecraft\nDESCRIPTION: Shows how to retrieve the position/transformation matrix from the DrawContext object, which is needed for proper vertex transformation when rendering.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/basic-concepts.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndrawContext.getMatrices().peek().getPositionMatrix();\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class for Custom Effect Implementation in Java\nDESCRIPTION: Creates a custom 'Tater' status effect by extending the StatusEffect class. This effect gives the player one experience point per game tick when applied. The implementation includes setting the effect type (beneficial) and color.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/de_de/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        // true = beneficial, 0x91D4FF is a light blue color for the effect\n        super(StatusEffectCategory.BENEFICIAL, 0x91D4FF);\n    }\n\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        // This method determines how often the effect should apply the effect logic\n        // For our tater effect, we want it to apply every tick\n        return true;\n    }\n\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        // This is where the effect logic is applied each tick\n        // For our tater effect, we want to give the player one experience point every tick\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Damage Type JSON\nDESCRIPTION: JSON configuration for creating a custom 'Tater' damage type that causes hunger exhaustion and scales with world difficulty.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/entities/damage-types.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scaling\": \"when_caused_by_living_non_player\",\n  \"exhaustion\": 0.1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ModBlocks Class in Java for Fabric Mod\nDESCRIPTION: Erstellt eine Klasse für die Registrierung benutzerdefinierter Blöcke mit einer Methode zum Registrieren von Blöcken und Block-Items unter einer bestimmten Mod-ID.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/first-block.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ModBlocks {\n    // Register all of your blocks here!\n\n    // Register method for blocks, with a boolean to determine if an item should be registered for the block\n    private static <T extends Block> T register(String id, T block, boolean shouldRegisterItem) {\n        // Register our block to the \"BLOCK\" registry\n        Registry.register(Registries.BLOCK, new Identifier(\"fabric-docs-reference\", id), block);\n\n        // If shouldRegisterItem is true, also register a BlockItem for the block.\n        if (shouldRegisterItem) {\n            BlockItem blockItem = new BlockItem(block, new FabricItemSettings());\n            // Register the BlockItem to the \"ITEM\" registry\n            Registry.register(Registries.ITEM, new Identifier(\"fabric-docs-reference\", id), blockItem);\n        }\n\n        return block;\n    }\n\n    // Initialize method to ensure the static fields are loaded.\n    public static void initialize() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tool Material in Java\nDESCRIPTION: Creates a custom ToolMaterial object with specific properties for durability, mining speed, attack damage, and repair items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/items/custom-tools.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final ToolMaterial GUIDITE_TOOL_MATERIAL = new ToolMaterial(\n    ImmutableMultimap.of(),\n    512,\n    6.5f,\n    2.0f,\n    10,\n    TagKey.create(Registries.ITEM.getKey(), new Identifier(\"fabric-docs-reference\", \"guidite_repair_items\"))\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Data Generation in Fabric API (Groovy)\nDESCRIPTION: Demonstrates advanced configuration options for data generation in Fabric API. Includes settings for output directory, run configuration creation, source set creation, mod ID, validation, resource addition, and client-side generation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/loom/fabric-api.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureDataGeneration {\n  // Contains the output directory where generated data files will be stored.\n  // Defaults to `src/main/generated`\n  outputDirectory = file(\"src/generated/resources\")\n\n  // Contains a boolean indicating whether a run configuration should be created for the data generation process.\n  // Defaults to `true`\n  createRunConfiguration = true\n\n  // Contains a boolean indicating whether a new source set should be created for the data generation process.\n  // This is useful if you do not want your datagen code to be exported in your mod jar.\n  // Defaults to `false`\n  createSourceSet = true\n\n  // Contains a string representing the mod ID associated with the data generation process. This must be set if `createSourceSet` is true.\n  // This must be the mod id of the mod used for datagen in the datagen source set and not your main mod id.\n  modId = \"example-datagen\"\n\n  // Contains a boolean indicating whether strict validation is enabled.\n  // Defaults to `false`\n  strictValidation = true\n\n  // Contains a boolean indicating whether the generated resources will be automatically added to the main source set.\n  // Defaults to `true`\n  addToResources = true\n\n  // Contains a boolean indicating whether data generation will be compiled and run with the client.\n  // Defaults to `false`\n  client = true\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Chest Loot Table Provider in Java\nDESCRIPTION: Demonstrates how to create a class that extends SimpleFabricLootTableProvider for generating chest loot tables.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/data-generation/loot-tables.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceChestLootTableProvider extends SimpleFabricLootTableProvider {\n    public FabricDocsReferenceChestLootTableProvider(FabricDataOutput output) {\n        super(output, LootContextTypes.CHEST);\n    }\n\n    @Override\n    public void accept(BiConsumer<Identifier, LootTable.Builder> exporter) {\n        // Loot table generation code goes here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Death Message for Damage Type\nDESCRIPTION: JSON entry for adding a custom death message for the 'Tater' damage type in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/damage-types.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"death.attack.tater\": \"%1$s died from Tater damage!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Armor Durability Factor in Fabric\nDESCRIPTION: Shows how to define a durability multiplier for armor materials, which will be used to calculate the actual durability for each armor piece.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-armor.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic static final int ARMOR_DURABILITY_FACTOR = 15;\npublic static final int BASE_DURABILITY_HELMET = 11;\npublic static final int BASE_DURABILITY_CHESTPLATE = 16;\npublic static final int BASE_DURABILITY_LEGGINGS = 15;\npublic static final int BASE_DURABILITY_BOOTS = 13;\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class for Custom Effect in Java\nDESCRIPTION: Creates a custom status effect called Tater by extending the StatusEffect class. This effect grants one experience point to the affected entity on each tick and is registered as a beneficial effect with a yellow color.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.effect;\n\nimport net.minecraft.entity.LivingEntity;\nimport net.minecraft.entity.effect.StatusEffect;\nimport net.minecraft.entity.effect.StatusEffectCategory;\n\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        // The first parameter is the effect category (beneficial in our case)\n        // The second parameter is the color in ARGB format\n        super(StatusEffectCategory.BENEFICIAL, 0xF2BB4C);\n    }\n\n    // This method is called every tick to check whether the effect should apply this tick\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        return true;\n    }\n\n    // This method applies the effect to the entity\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        entity.addExperience(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Type in Java\nDESCRIPTION: Demonstrates how to obtain the RegistryKey for the custom damage type to use in code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/pt_br/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceDamageTypes {\n    public static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE, new Identifier(\"fabric-docs-reference\", \"tater\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scaling Animation with MatrixStack in Fabric\nDESCRIPTION: This code demonstrates how to create a scaling animation effect for a diamond model using MatrixStack to apply transformations based on time. It properly manages the matrix stack by pushing before transformations and popping afterward.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/basic-concepts.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void render(MatrixStack matrices, VertexConsumerProvider vertexConsumers, double x, double y, double tickDelta) {\n    float scale = 0.5f + (float) Math.sin(tickDelta / 8) * 0.25f;\n\n    // Push the matrix stack and translate to the correct position\n    matrices.push();\n    matrices.translate(x, y, 0);\n    matrices.scale(scale, scale, scale);\n\n    // Get the transformation matrix from the matrix stack\n    Matrix4f matrix = matrices.peek().getPositionMatrix();\n\n    // Render the diamond\n    this.renderDiamond(matrix, vertexConsumers.getBuffer(RenderLayer.getLines()));\n\n    // Pop the matrix stack\n    matrices.pop();\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Status Effect with Minecraft Command\nDESCRIPTION: Shows how to use the /effect command to quickly test a custom status effect in-game without having to code the application logic.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/entities/effects.md#2025-04-05_snippet_4\n\nLANGUAGE: mcfunction\nCODE:\n```\neffect give @p fabric-docs-reference:tater\n```\n\n----------------------------------------\n\nTITLE: Creating Text Literals in Java\nDESCRIPTION: Demonstrates how to create literal Text objects using Text.of() and Text.literal() methods. Shows the difference between Text and MutableText instances.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/text-and-translations.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nText literal = Text.of(\"Hello, world!\");\nMutableText mutable = Text.literal(\"Hello, world!\");\n// Keep in mind that a MutableText can be used as a Text, making this valid:\nText mutableAsText = mutable;\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Custom Criterion in Java\nDESCRIPTION: Shows how to create a parameterized custom criterion that tracks the number of times a tool is used.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/advancements.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class ParameterizedUseToolCriterion extends AbstractCriterion<ParameterizedUseToolCriterion.Conditions> {\n    static final Identifier ID = new Identifier(\"fabric-docs-reference\", \"parameterized_use_tool\");\n\n    @Override\n    public Identifier getId() {\n        return ID;\n    }\n\n    public void trigger(ServerPlayerEntity player, ItemStack tool, int times) {\n        this.trigger(player, conditions -> conditions.test(player, tool, times));\n    }\n\n    public static class Conditions extends AbstractCriterionConditions {\n        private static final Codec<Conditions> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n                LootContextPredicate.CODEC.fieldOf(\"player\").forGetter(AbstractCriterionConditions::playerPredicate),\n                Codec.INT.fieldOf(\"required_times\").forGetter(conditions -> conditions.requiredTimes)\n        ).apply(instance, Conditions::new));\n\n        private final int requiredTimes;\n\n        public Conditions(LootContextPredicate playerPredicate, int requiredTimes) {\n            super(ID, playerPredicate);\n            this.requiredTimes = requiredTimes;\n        }\n\n        public boolean test(ServerPlayerEntity player, ItemStack tool, int times) {\n            return times >= requiredTimes;\n        }\n\n        @Override\n        public JsonObject toJson(SerializationContext context) {\n            JsonObject jsonObject = super.toJson(context);\n            jsonObject.addProperty(\"required_times\", requiredTimes);\n            return jsonObject;\n        }\n\n        @Override\n        public Codec<? extends AbstractCriterionConditions> codec() {\n            return CODEC;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Transformation Matrix in Minecraft Fabric\nDESCRIPTION: This snippet demonstrates how to obtain the transformation matrix (also known as position matrix or model matrix) from the DrawContext object in Minecraft Fabric modding.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/basic-concepts.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndrawContext.getMatrices().peek().getPositionMatrix();\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Generation Configuration in Fabric API\nDESCRIPTION: Shows all available configuration options for data generation, including output directory settings, source set creation, mod ID configuration, validation options, and resource handling preferences.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/fabric-api.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureDataGeneration {\n  // Contains the output directory where generated data files will be stored.\n  // Defaults to `src/main/generated`\n  outputDirectory = file(\"src/generated/resources\")\n\n  // Contains a boolean indicating whether a run configuration should be created for the data generation process.\n  // Defaults to `true`\n  createRunConfiguration = true\n\n  // Contains a boolean indicating whether a new source set should be created for the data generation process.\n  // This is useful if you do not want your datagen code to be exported in your mod jar.\n  // Defaults to `false`\n  createSourceSet = true\n\n  // Contains a string representing the mod ID associated with the data generation process. This must be set if `createSourceSet` is true.\n  // This must be the mod id of the mod used for datagen in the datagen source set and not your main mod id.\n  modId = \"example-datagen\"\n\n  // Contains a boolean indicating whether strict validation is enabled.\n  // Defaults to `false`\n  strictValidation = true\n\n  // Contains a boolean indicating whether the generated resources will be automatically added to the main source set.\n  // Defaults to `true`\n  addToResources = true\n\n  // Contains a boolean indicating whether data generation will be compiled and run with the client.\n  // Defaults to `false`\n  client = true\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Translations in JSON\nDESCRIPTION: Shows how to define translations with parameters in the language file, using placeholders for dynamic content.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/text-and-translations.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_mod.text.hello\": \"%1$s said hello!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Custom Criterion Conditions in Java\nDESCRIPTION: Adds a new parameter to the condition class that specifies how many times a player needs to use a tool to meet the requirement. This adds flexibility to custom advancement criteria.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic static class Conditions extends AbstractCriterionConditions {\n    private static final ContextAwarePredicate DEFAULT_PREDICATE = ContextAwarePredicate.createEmpty();\n    private final int requiredTimes;\n    \n    // Constructor and other code here\n    \n    public Conditions(ContextAwarePredicate playerPredicate, int requiredTimes) {\n        super(playerPredicate);\n        this.requiredTimes = requiredTimes;\n    }\n\n    // Getters and other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ArmorMaterial Instance for Custom Armor in Java\nDESCRIPTION: Initializes an ArmorMaterial instance for the custom armor, specifying durability, defense values, enchantability, sounds, toughness, knockback resistance, repair ingredients, and asset ID.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-armor.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final ArmorMaterial INSTANCE = new ArmorMaterial(\n    BASE_DURABILITY,\n    Map.of(\n        EquipmentType.BOOTS, 3,\n        EquipmentType.LEGGINGS, 6,\n        EquipmentType.CHESTPLATE, 8,\n        EquipmentType.HELMET, 3\n    ),\n    15,\n    SoundEvents.ITEM_ARMOR_EQUIP_IRON,\n    2.0f,\n    0.0f,\n    ModItemTags.GUIDITE_REPAIR_ITEMS,\n    GUIDITE_ARMOR_MATERIAL_KEY\n);\n```\n\n----------------------------------------\n\nTITLE: Drawing Portion of Texture with DrawContext in Java\nDESCRIPTION: Demonstrates how to draw a specific region of a texture using DrawContext.drawTexture() with u, v, regionWidth, and regionHeight parameters.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/draw-context.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ncontext.drawTexture(\n    TEXTURE,\n    10, 10,\n    100, 100,\n    82, 77,\n    25, 25,\n    256, 256\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Status Effect to Entity in Java\nDESCRIPTION: Demonstrates how to apply a status effect to a living entity using the addStatusEffect method. The method creates a StatusEffectInstance with specified parameters including duration, amplifier, and visual settings.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/entities/effects.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Creates a status effect instance and applies it to a living entity\nStatusEffectInstance instance = new StatusEffectInstance(\n        RegistryEntry.of(FabricDocsReferenceEffects.TATER),\n        /* duration (ticks) */ 200,\n        /* amplifier */ 2,\n        /* ambient */ false,\n        /* particles */ true,\n        /* icon */ true);\n\nboolean wasApplied = livingEntity.addStatusEffect(instance);\n// If the effect was updated, wasApplied will be true\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamicSoundManager Class in Java\nDESCRIPTION: Defines the structure of the DynamicSoundManager class using the Singleton design pattern to manage custom SoundInstances.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class DynamicSoundManager {\n    private static DynamicSoundManager INSTANCE;\n\n    private final MinecraftClient client;\n    private final List<AbstractDynamicSoundInstance> playingSounds = new ArrayList<>();\n\n    private DynamicSoundManager(MinecraftClient client) {\n        this.client = client;\n    }\n\n    public static DynamicSoundManager getInstance() {\n        if (INSTANCE == null) {\n            INSTANCE = new DynamicSoundManager(MinecraftClient.getInstance());\n        }\n        return INSTANCE;\n    }\n\n    // ... (other methods)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-to-Client Packet Sending in Java\nDESCRIPTION: Shows how to send a packet from the server to the client when a custom item (Lightning Tater) is used. It creates a payload instance and sends it to all players in the server world.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/networking.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class LightningTaterItem extends Item {\n    public LightningTaterItem(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n        if (world.isClient) {\n            return TypedActionResult.pass(user.getStackInHand(hand));\n        }\n\n        var payload = new SummonLightningS2CPayload(user.getBlockPos());\n\n        for (ServerPlayerEntity player : PlayerLookup.all((ServerWorld) world)) {\n            ServerPlayNetworking.send(player, payload);\n        }\n\n        return TypedActionResult.success(user.getStackInHand(hand));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Status Effect in Fabric\nDESCRIPTION: Registration code for the custom status effect using Registry.register to add it to the STATUS_EFFECT registry in the mod initializer.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/entities/effects.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@[code lang=java transcludeWith=:::1](@/reference/1.21/src/main/java/com/example/docs/effect/FabricDocsReferenceEffects.java)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Method to Custom Criterion Conditions\nDESCRIPTION: Implements a method to check if advancement conditions are met based on player and tool context.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic boolean requirementsMet(ServerPlayerEntity player, Item toolItem) {\n    boolean matches = true;\n    // Can add additional checks here if needed!\n    return matches;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Server-to-Client Payload in Java\nDESCRIPTION: Demonstrates how to register a server-to-client payload using PayloadTypeRegistry in the common initializer.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/networking.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPayloadTypeRegistry.playS2C().register(SummonLightningS2CPayload.TYPE, SummonLightningS2CPayload.CODEC);\n```\n\n----------------------------------------\n\nTITLE: DynamicSoundSource Interface for Advanced Sound Systems\nDESCRIPTION: Interface defining methods required for sound sources in a dynamic sound system. Provides position, status information, and identifier methods for sound handling across different entity types.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface DynamicSoundSource {\n\n    /**\n     * The position (x) of this sound source.\n     */\n    double getSoundX();\n\n    /**\n     * The position (y) of this sound source.\n     */\n    double getSoundY();\n\n    /**\n     * The position (z) of this sound source.\n     */\n    double getSoundZ();\n\n    /**\n     * Each sound source should report some unique identifier.\n     * Can be used to map the source to a specific sound instance.\n     */\n    Identifier getSoundSourceId();\n\n    /**\n     * Check if the source is running or not to determine if a sound should play.\n     */\n    boolean isSoundSourceRunning();\n\n    /**\n     * Gets the pitch for the sound. This value can change dynamically.\n     */\n    float getSoundPitch();\n\n    /**\n     * Gets the volume for the sound. This value can change dynamically.\n     */\n    float getSoundVolume();\n\n    /**\n     * Get access to client World, which can be used to determine sound occlusion\n     * or other factors that can influence the sound.\n     */\n    World getSourceWorld();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Requirements Check Method to Criterion Conditions in Java\nDESCRIPTION: Adds a helper method to test if a player meets the conditions for the custom advancement criterion. This checks against the player predicate defined in the conditions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic boolean requirementsMet(ServerPlayerEntity player) {\n    return this.playerPredicate.test(new LootContext.Builder(player.getServerWorld())\n            .random(player.getRandom())\n            .parameter(LootContextParameters.THIS_ENTITY, player)\n            .parameter(LootContextParameters.ORIGIN, player.getPos())\n            .build(LootContextTypes.ADVANCEMENT));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Block Registration in Java\nDESCRIPTION: Sets up a static initialization method for registering custom blocks in a Fabric mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/blocks/first-block.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ModBlocks {\n    // ...\n\n    public static void initialize() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Horizontal and Vertical Lines with DrawContext in Minecraft\nDESCRIPTION: This snippet demonstrates drawing individual horizontal and vertical lines using DrawContext's specialized line drawing methods. It specifies the starting and ending coordinates and color for each line.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/draw-context.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Draw a horizontal line\nthis.drawContext.drawHorizontalLine(120, 220, 10, 0xFFFFFFFF);\n\n// Draw a vertical line\nthis.drawContext.drawVerticalLine(120, 10, 110, 0xFFFFFFFF);\n```\n\n----------------------------------------\n\nTITLE: Decrementing ItemStack and Returning Success Result\nDESCRIPTION: This code shows how to decrement an item stack by 1 and return a success result, typically used when an item is consumed during use.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-item-interactions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nItemStack heldStack = user.getStackInHand(hand);\nheldStack.decrement(1);\nTypedActionResult.success(heldStack);\n```\n\n----------------------------------------\n\nTITLE: Status Effect Translation in JSON for Minecraft Localization\nDESCRIPTION: Defines the display name for the custom 'Tater' status effect in the English (US) language file. This JSON entry maps the effect identifier to its readable name that players will see in-game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/de_de/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Command in Fabric\nDESCRIPTION: Shows how to register a simple command named 'foo' using the CommandRegistrationCallback in Fabric. The command sends feedback to the executor when run.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/basics.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess, environment) -> {\n    dispatcher.register(CommandManager.literal(\"foo\")\n            .executes(context -> {\n                context.getSource().sendFeedback(() -> Text.literal(\"Called /foo with no arguments\"), false);\n                return Command.SINGLE_SUCCESS;\n            })\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Screen in Fabric Mods\nDESCRIPTION: This code snippet shows how to open a custom screen using the MinecraftClient's setScreen method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMinecraftClient.getInstance().setScreen(\n  new CustomScreen(Text.empty())\n);\n```\n\n----------------------------------------\n\nTITLE: Sheep Entity Mixin for Event Triggering\nDESCRIPTION: Mixin implementation to trigger the custom sheep shear event when a player attempts to shear a sheep.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/events.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Mixin(SheepEntity.class)\npublic class SheepEntityMixin {\n    @Inject(method = \"interactMob\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/passive/SheepEntity;sheared(Lnet/minecraft/sound/SoundCategory;)V\"), cancellable = true)\n    private void onShear(PlayerEntity player, Hand hand, CallbackInfoReturnable<ActionResult> cir) {\n        ActionResult result = SheepShearCallback.EVENT.invoker().interact(player, (SheepEntity) (Object) this);\n\n        if (result != ActionResult.PASS) {\n            cir.setReturnValue(result);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Status Effect to Living Entities in Java\nDESCRIPTION: Demonstrates how to apply a status effect to an entity using the addStatusEffect method. The code shows the parameters needed to create a StatusEffectInstance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/effects.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic boolean addStatusEffectExample() {\n\t// ...\n\treturn livingEntity.addStatusEffect(\n\t\t\tnew StatusEffectInstance(\n\t\t\t\t\tRegistryEntry.of(MyMod.MY_STATUS_EFFECT), // The registry entry\n\t\t\t\t\t200, // Duration (in ticks)\n\t\t\t\t\t0, // Amplifier\n\t\t\t\t\tfalse, // Is ambient?\n\t\t\t\t\ttrue, // Show particles?\n\t\t\t\t\ttrue // Show icon?\n\t\t\t)\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translations for Custom Effect in JSON\nDESCRIPTION: Adds a translation entry for the custom 'Tater' effect in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Item Stack Decrement Handler\nDESCRIPTION: Shows how to decrease the quantity of items in a player's hand and return a success result. Useful for consumable items or items that should be used up.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-item-interactions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nItemStack heldStack = user.getStackInHand(hand);\nheldStack.decrement(1);\nTypedActionResult.success(heldStack);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool Tag JSON for Block Mining\nDESCRIPTION: JSON file that defines which blocks can be more efficiently mined with a specific tool (shovel in this case), affecting mining speed in the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/first-block.md#2025-04-05_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    \"fabric-docs-reference:condensed_dirt\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class in Java\nDESCRIPTION: Creates a custom status effect class called TaterEffect that extends StatusEffect. It overrides the applyUpdateEffect method to add 1 experience point to the entity every game tick.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        super(StatusEffectCategory.BENEFICIAL, 0x91691E);\n    }\n\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1);\n        }\n    }\n\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Block with Settings in Java\nDESCRIPTION: Demonstrates the creation and registration of a custom block with specific material properties. The example creates a \"Condensed Dirt\" block with properties similar to vanilla dirt.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final Block CONDENSED_DIRT = register(\"condensed_dirt\", new Block(AbstractBlock.Settings.create()\n        .mapColor(MapColor.DIRT)\n        .strength(0.5f)\n        .sounds(BlockSoundGroup.GRAVEL)), true);\n```\n\n----------------------------------------\n\nTITLE: Adding Status Effect Translation in JSON\nDESCRIPTION: Shows how to add a translation entry for the custom status effect in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Component Values in Java\nDESCRIPTION: Shows how to remove a component from an ItemStack and optionally retrieve its last value before removal.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nstack.remove(ModComponents.CLICK_COUNT_COMPONENT);\n\nint oldCount = stack.remove(ModComponents.CLICK_COUNT_COMPONENT);\n```\n\n----------------------------------------\n\nTITLE: Decrementing ItemStack Count in TypedActionResult\nDESCRIPTION: Demonstrates how to reduce the quantity of an item stack by 1 and return a success result, commonly used for consumable items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/custom-item-interactions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nItemStack heldStack = user.getStackInHand(hand);\nheldStack.decrement(1);\nTypedActionResult.success(heldStack);\n```\n\n----------------------------------------\n\nTITLE: Setting Component Value on an ItemStack in Java\nDESCRIPTION: Shows how to set a custom component value on an ItemStack using the set() method and optionally capturing the old value.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nstack.set(ModComponents.CLICK_COUNT_COMPONENT, newValue);\n```\n\n----------------------------------------\n\nTITLE: Adding Status Effect Translation in JSON\nDESCRIPTION: Shows how to add a translation entry for the custom status effect in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Translation JSON Example\nDESCRIPTION: Shows how to structure a translation string with multiple variables in a language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/text-and-translations.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_mod.text.whack.item\": \"%1$s was whacked by %2$s using %3$s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SoundInstance Playback Logic in Java\nDESCRIPTION: Method to allow the SoundInstance to be played, updating its position based on the sound source and checking if it should continue playing.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void tick() {\n    if (finished) {\n        return;\n    }\n    ticksActive++;\n    ticksTotal++;\n    x = source.getX();\n    y = source.getY();\n    z = source.getZ();\n    if (!shouldContinuePlaying()) {\n        stopPlaying();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Mixin to Trigger Custom Event in Java\nDESCRIPTION: This mixin injects into the SheepEntity's interactMob method to trigger the custom SheepShearCallback event when a player tries to shear a sheep.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/it_it/develop/events.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.mixin.event;\n\nimport com.example.docs.event.SheepShearCallback;\nimport net.minecraft.entity.passive.SheepEntity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.item.ShearsItem;\nimport net.minecraft.util.ActionResult;\nimport net.minecraft.util.Hand;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n@Mixin(SheepEntity.class)\nimport com.example.docs.event.SheepShearCallback;\n\n@Mixin(SheepEntity.class)\npublic abstract class SheepEntityMixin {\n    @Shadow public abstract boolean isShearable();\n\n    @Inject(method = \"interactMob\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/passive/SheepEntity;sheared(Lnet/minecraft/sound/SoundCategory;)V\"), cancellable = true)\n    private void onShear(PlayerEntity player, Hand hand, CallbackInfoReturnable<ActionResult> cir) {\n        // The sheared() method is about to be called, which means the sheep can be sheared and the player is holding shears\n        ActionResult result = SheepShearCallback.EVENT.invoker().interact(player, (SheepEntity) (Object) this);\n\n        if (result != ActionResult.PASS) {\n            cir.setReturnValue(result);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Status Effect in Fabric Mod Initializer\nDESCRIPTION: Registers the custom TaterEffect to the STATUS_EFFECT registry. This code should be placed in the mod initializer to ensure the effect is properly registered when the mod loads.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceEffects implements ModInitializer {\n    // We declare our custom effect identifier here\n    public static final Identifier TATER = new Identifier(\"fabric-docs-reference\", \"tater\");\n\n    // We also create and store our custom effect entry\n    public static final RegistryEntry<StatusEffect> TATER_EFFECT;\n\n    @Override\n    public void onInitialize() {\n        // Registration happens in the static initialization block below\n    }\n\n    // This static block ensures that our effects are registered when the class is loaded\n    static {\n        // Use Registry.register to add our custom effect to the STATUS_EFFECT registry\n        TATER_EFFECT = Registry.register(Registries.STATUS_EFFECT, TATER, new TaterEffect());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Redirect Implementation\nDESCRIPTION: Implementation of command redirection (aliases) with argument forwarding.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/basics.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"redirected_by\")\n    .executes(this::executeRedirectedBy)\n    .redirect(dispatcher.register(CommandManager.literal(\"redirect_command\")\n        .executes(this::executeRedirectedBy))));\n```\n\n----------------------------------------\n\nTITLE: Registering Data Generator Entrypoint in fabric.mod.json\nDESCRIPTION: This JSON snippet shows how to register the data generator entrypoint class in the fabric.mod.json file under the 'fabric-datagen' entry.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/setup.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"entrypoints\": {\n    // ...\n    \"client\": [\n      // ...\n    ],\n    \"fabric-datagen\": [ // [!code ++]\n      \"com.example.docs.datagen.FabricDocsReferenceDataGenerator\" // [!code ++]\n    ] // [!code ++]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Block VoxelShapes for a Vertical Slab\nDESCRIPTION: Defines the VoxelShapes for a vertical slab block, setting up the different shapes based on the block's facing direction and whether it's a single or double slab.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nstatic {\n    NORTH_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 16.0, 16.0, 8.0);\n    EAST_SHAPE = Block.createCuboidShape(8.0, 0.0, 0.0, 16.0, 16.0, 16.0);\n    SOUTH_SHAPE = Block.createCuboidShape(0.0, 0.0, 8.0, 16.0, 16.0, 16.0);\n    WEST_SHAPE = Block.createCuboidShape(0.0, 0.0, 0.0, 8.0, 16.0, 16.0);\n    FULL_SHAPE = VoxelShapes.fullCube();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Block in Java\nDESCRIPTION: Creates and registers a custom block with specific properties, including adding it to a custom item group.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/blocks/first-block.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Block CONDENSED_DIRT = register(\"condensed_dirt\",\n        new Block(FabricBlockSettings.create()\n                .mapColor(MapColor.DIRT)\n                .strength(0.5f)\n                .sounds(BlockSoundGroup.GRAVEL)\n        ),\n        true,\n        (item) -> {\n            ModItemGroups.FABRIC_DOCS_REFERENCE_ITEMS.addItem(item);\n        }\n);\n```\n\n----------------------------------------\n\nTITLE: Transforming MatrixStack for Block Entity Rendering in Java\nDESCRIPTION: This snippet demonstrates how to transform the MatrixStack to position and rotate text for rendering on the top of a block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entity-renderer.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nmatrices.push();\nmatrices.translate(0.5, 1, 0.5);\nmatrices.multiply(RotationAxis.POSITIVE_X.rotationDegrees(90));\nmatrices.scale(1/18f, 1/18f, 1/18f);\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Test Reports\nDESCRIPTION: GitHub Actions workflow configuration to store test reports as artifacts when builds fail, facilitating debugging of test failures in CI/CD.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/automatic-testing.md#2025-04-05_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Store reports\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: reports\n    path: |\n      **/build/reports/\n      **/build/test-results/\n```\n\n----------------------------------------\n\nTITLE: Decrementing ItemStack in TypedActionResult\nDESCRIPTION: Code snippet demonstrating how to retrieve a player's held item, decrement its count by 1, and return a success result for item usage.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/items/custom-item-interactions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nItemStack heldStack = user.getStackInHand(hand);\nheldStack.decrement(1);\nTypedActionResult.success(heldStack);\n```\n\n----------------------------------------\n\nTITLE: Status Effect Translation in JSON\nDESCRIPTION: Defines the display name for the custom 'Tater' status effect in the language file. This translation will be shown to players in-game when the effect is applied.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Codec for a Complex Class in Java\nDESCRIPTION: This snippet shows how to create a custom Codec for the 'CoolBeansClass' using RecordCodecBuilder. It combines multiple field codecs and specifies getters and constructor for the class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n    Codec.INT.fieldOf(\"beans_amount\").forGetter(CoolBeansClass::getBeansAmount),\n    Registries.ITEM.getCodec().fieldOf(\"bean_type\").forGetter(CoolBeansClass::getBeanType),\n    BlockPos.CODEC.listOf().fieldOf(\"bean_positions\").forGetter(CoolBeansClass::getBeanPositions)\n    // Up to 16 fields can be declared here\n).apply(instance, CoolBeansClass::new));\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Screen in Fabric\nDESCRIPTION: Code to open a custom screen using MinecraftClient's setScreen method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMinecraftClient.getInstance().setScreen(\n  new CustomScreen(Text.empty())\n);\n```\n\n----------------------------------------\n\nTITLE: Generating a Simple Cube Block Model with cube_all Texture\nDESCRIPTION: Demonstrates how to generate a simple cube block model where all six faces use the same texture. This is one of the most commonly used block model types.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Generate a simple block model using the same texture for all faces (cube_all)\nblockStateModelGenerator.registerSimpleState(ModBlocks.STEEL_BLOCK);\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Codec for a Complex Class in Java\nDESCRIPTION: This snippet shows how to create a custom Codec for the 'CoolBeansClass' using RecordCodecBuilder. It combines multiple field codecs and specifies getters and constructor for the class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n    Codec.INT.fieldOf(\"beans_amount\").forGetter(CoolBeansClass::getBeansAmount),\n    Registries.ITEM.getCodec().fieldOf(\"bean_type\").forGetter(CoolBeansClass::getBeanType),\n    BlockPos.CODEC.listOf().fieldOf(\"bean_positions\").forGetter(CoolBeansClass::getBeanPositions)\n    // Up to 16 fields can be declared here\n).apply(instance, CoolBeansClass::new));\n```\n\n----------------------------------------\n\nTITLE: Status Effect Translation JSON Format\nDESCRIPTION: JSON snippet showing how to add a translation entry for a custom status effect. The entry follows the format \"effect.mod-id.effect-identifier\": \"Value\" in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/entities/effects.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fabric Loader JUnit Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Fabric Loader JUnit dependency to the build.gradle file, which is necessary for running unit tests with Fabric mods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/automatic-testing.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation \"net.fabricmc:fabric-loader-junit:${project.fabric_loader_version}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Chest Loot Table Provider in Fabric\nDESCRIPTION: Illustrates how to create a SimpleFabricLootTableProvider for generating chest loot tables in a Fabric mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/loot-tables.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceChestLootTableProvider extends SimpleFabricLootTableProvider {\n    public FabricDocsReferenceChestLootTableProvider(FabricDataOutput output) {\n        super(output, LootContextTypes.CHEST);\n    }\n\n    @Override\n    public void generate(BiConsumer<Identifier, LootTable.Builder> biConsumer) {\n        // Add loot table generation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Initialization for Unit Tests\nDESCRIPTION: This code demonstrates how to initialize Minecraft registries before running tests that depend on them, using the beforeAll method to set up the necessary environment.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/automatic-testing.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@BeforeAll\npublic static void beforeAll() {\n    // Initialize registries\n    Bootstrap.initialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Advancement with Rewards in Java\nDESCRIPTION: Demonstrates creating an advancement with multiple criteria, rewards, and a parent advancement.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/advancements.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nAdvancement.Builder.create()\n        .display(new AdvancementDisplay(\n                Items.DIAMOND_PICKAXE,\n                Text.literal(\"Efficiency V\"),\n                Text.literal(\"Get an Efficiency V diamond pickaxe\"),\n                null,\n                AdvancementFrame.CHALLENGE,\n                true,\n                true,\n                false\n        ))\n        .rewards(AdvancementRewards.Builder.experience(100))\n        .criterion(\"efficiency_v_pick\", InventoryChangedCriterion.Conditions.items(\n                ItemPredicate.Builder.create()\n                        .items(Items.DIAMOND_PICKAXE)\n                        .enchantment(new EnchantmentPredicate(Enchantments.EFFICIENCY, NumberRange.IntRange.atLeast(5)))\n                        .build()\n        ))\n        .parent(getDirt)\n        .build(consumer, \"fabric-docs-reference:efficiency_v_pick\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Registry for Custom Criteria in Java\nDESCRIPTION: Creates a central registry class that holds instances of all custom advancement criteria and handles their registration with the game. This makes criteria easily accessible throughout the mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class ModCriteria {\n    public static final UseToolCriterion USE_TOOL = Criteria.register(\"fabric-docs-reference:use_tool\", new UseToolCriterion());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the RecipeProvider in DataGeneratorEntrypoint\nDESCRIPTION: Adds the recipe provider to the data generator by registering it in the onInitializeDataGenerator method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/recipes.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfabricDataGenerator.addProvider(FabricDocsReferenceRecipeProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Passing the Current ItemStack in TypedActionResult\nDESCRIPTION: Shows how to create a TypedActionResult that passes the current item stack from the player's hand, indicating no changes should be made to the item.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/custom-item-interactions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nTypedActionResult.pass(user.getStackInHand(hand))\n```\n\n----------------------------------------\n\nTITLE: Implementing Identifier Codec using comapFlatMap in Java\nDESCRIPTION: Shows how to implement a Codec for Identifiers using comapFlatMap to handle potential invalid inputs.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class Identifier {\n    public static final Codec<Identifier> CODEC = Codec.STRING.comapFlatMap(\n        Identifier::validate, Identifier::toString\n    );\n\n    // ...\n\n    public static DataResult<Identifier> validate(String id) {\n        try {\n            return DataResult.success(new Identifier(id));\n        } catch (InvalidIdentifierException e) {\n            return DataResult.error(\"Not a valid resource location: \" + id + \" \" + e.getMessage());\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Effect Translations in JSON\nDESCRIPTION: Adds a translation entry for the custom effect in the language file. This sets the display name for the effect in-game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ArmorMaterial Instance in Java\nDESCRIPTION: This code demonstrates how to create an instance of the custom ArmorMaterial class. This instance can be used when creating armor items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-armor.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final ArmorMaterial GUIDITE = new GuiditeArmorMaterial();\n```\n\n----------------------------------------\n\nTITLE: Safe Type Conversion with comapFlatMap in Java\nDESCRIPTION: Shows implementation of Identifier.CODEC using comapFlatMap for safe conversion from strings, handling validation errors properly.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class Identifier {\n    public static final Codec<Identifier> CODEC = Codec.STRING.comapFlatMap(\n        Identifier::validate, Identifier::toString\n    );\n\n    // ...\n\n    public static DataResult<Identifier> validate(String id) {\n        try {\n            return DataResult.success(new Identifier(id));\n        } catch (InvalidIdentifierException e) {\n            return DataResult.error(\"Недопустимое местоположение ресурса: \" + id + \" \" + e.getMessage());\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Constant Value Codec in Java\nDESCRIPTION: This snippet shows how to create a Codec that always deserializes to a constant value, regardless of the input, using the Codec.unit method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCodec<Integer> theMeaningOfCodec = Codec.unit(42);\n```\n\n----------------------------------------\n\nTITLE: Drawing Texture Region with DrawContext\nDESCRIPTION: Demonstrates how to draw a specific portion of a texture using u,v coordinates\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/draw-context.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ncontext.drawTexture(RECIPE_BOOK_TEXTURE, 10, 10, 32, 32, 152, 182, 32, 32, 256, 256);\n```\n\n----------------------------------------\n\nTITLE: Enabling Enhanced Class Redefinition for Hotswapping\nDESCRIPTION: JVM argument to enable enhanced class redefinition when using JetBrains Runtime, which allows for more robust hotswapping capabilities including adding or removing methods and classes without restarting the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/getting-started/launching-the-game.md#2025-04-05_snippet_1\n\nLANGUAGE: no-line-numbers\nCODE:\n```\n-XX:+AllowEnhancedClassRedefinition\n```\n\n----------------------------------------\n\nTITLE: Creating BlockPos Codec using xmap in Java\nDESCRIPTION: Illustrates how to create a Codec for BlockPos by converting from Vec3d using the xmap method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nCodec<BlockPos> blockPosCodec = Vec3d.CODEC.xmap(\n    // Convert Vec3d to BlockPos\n    vec -> new BlockPos(vec.x, vec.y, vec.z),\n    // Convert BlockPos to Vec3d\n    pos -> new Vec3d(pos.getX(), pos.getY(), pos.getZ())\n);\n\n// When converting an existing class (`X` for example)\n// to your own class (`Y`) this way, it may be nice to\n// add `toX` and static `fromX` methods to `Y` and use\n// method references in your `xmap` call.\n```\n\n----------------------------------------\n\nTITLE: Defining AbstractDynamicSoundInstance Class Structure in Java\nDESCRIPTION: Defines the structure of the AbstractDynamicSoundInstance class, including properties for transition state, tick durations, volume and pitch limits, and callback functionality.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class AbstractDynamicSoundInstance implements SoundInstance {\n    protected final DynamicSoundSource source;\n    protected final SoundEvent sound;\n    protected final SoundCategory category;\n\n    protected TransitionState transitionState = TransitionState.START;\n    protected int startTicks;\n    protected int endTicks;\n\n    protected float minVolume;\n    protected float maxVolume;\n    protected float minPitch;\n    protected float maxPitch;\n\n    protected boolean finished = false;\n\n    protected int ticksExisted;\n    protected int ticksPlayed;\n\n    protected final Consumer<AbstractDynamicSoundInstance> finishCallback;\n\n    // ... (constructor and other methods)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypedActionResult Usage in Java\nDESCRIPTION: Demonstrates how to handle item stack actions using TypedActionResult in Minecraft modding. Shows passing the current item stack without modifications.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-item-interactions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nTypedActionResult.pass(user.getStackInHand(hand))\n```\n\n----------------------------------------\n\nTITLE: Validation with comapFlatMap in Java\nDESCRIPTION: Shows how to create a codec that validates during conversion using comapFlatMap. The example demonstrates the implementation of Identifier.CODEC which validates that strings are properly formatted as identifiers.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class Identifier {\n    public static final Codec<Identifier> CODEC = Codec.STRING.comapFlatMap(\n        Identifier::validate, Identifier::toString\n    );\n\n    // ...\n\n    public static DataResult<Identifier> validate(String id) {\n        try {\n            return DataResult.success(new Identifier(id));\n        } catch (InvalidIdentifierException e) {\n            return DataResult.error(\"Not a valid resource location: \" + id + \" \" + e.getMessage());\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: LightningStick Item Class Declaration\nDESCRIPTION: Class definition for a custom item that extends the base Item class, with appropriate settings in the constructor.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/custom-item-interactions.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class LightningStick extends Item {\n    public LightningStick(Settings settings) {\n        super(settings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Effect with /effect Command\nDESCRIPTION: Demonstrates how to apply the custom effect using the /effect command in Minecraft. This is useful for quick testing.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/entities/effects.md#2025-04-05_snippet_3\n\nLANGUAGE: mcfunction\nCODE:\n```\neffect give @p fabric-docs-reference:tater\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Criteria in Java\nDESCRIPTION: Shows how to register custom criteria in a ModCriteria class and initialize them in the mod's main class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/advancements.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class ModCriteria {\n    public static final UseToolCriterion USE_TOOL = Criteria.register(new UseToolCriterion());\n    public static final ParameterizedUseToolCriterion PARAMETERIZED_USE_TOOL = Criteria.register(new ParameterizedUseToolCriterion());\n\n    public static void init() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Type Conversion with xmap in Java\nDESCRIPTION: Creates a codec for BlockPos by transforming a Vec3d codec, using Codec.xmap to define bidirectional conversion functions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nCodec<BlockPos> blockPosCodec = Vec3d.CODEC.xmap(\n    // Преобразование Vec3d в BlockPos\n    vec -> new BlockPos(vec.x, vec.y, vec.z),\n    // Преобразование BlockPos в Vec3d\n    pos -> new Vec3d(pos.getX(), pos.getY(), pos.getZ())\n);\n\n// При преобразовании существующего класса (например, `X`)\n// в ваш собственный класс (`Y`) таким образом, может быть полезно\n// добавить методы `toX` и статический `fromX` в `Y` и использовать\n// ссылки на методы в вашем вызове `xmap`.\n```\n\n----------------------------------------\n\nTITLE: Creating Map Codec with Identifiers as Keys\nDESCRIPTION: Creates a codec for a map with Identifier keys and Integer values. The example demonstrates how to use Codec.unboundedMap and how the resulting JSON will be structured.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Create a codec for a map of identifiers to integers\nCodec<Map<Identifier, Integer>> mapCodec = Codec.unboundedMap(Identifier.CODEC, Codec.INT);\n\n// Use it to serialize data\nDataResult<JsonElement> result = mapCodec.encodeStart(JsonOps.INSTANCE, Map.of(\n    new Identifier(\"example\", \"number\"), 23,\n    new Identifier(\"example\", \"the_cooler_number\"), 42\n));\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle with DrawContext in Java\nDESCRIPTION: Demonstrates how to draw a filled rectangle using DrawContext.fill() method\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/draw-context.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncontext.fill(10, 10, 60, 60, 0xFFFF0000);\n```\n\n----------------------------------------\n\nTITLE: Basic Data Generation Configuration in Fabric API\nDESCRIPTION: Demonstrates the minimal setup required to enable data generation in Fabric API using the Loom Gradle plugin. This creates a new run configuration with data generation enabled.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/fabric-api.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureDataGeneration()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Light Level Based on Block State in Java\nDESCRIPTION: Creates a static method to determine the light level emitted by the block based on its 'ACTIVATED' state. This method is used with the luminance setting when registering the block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/blockstates.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static int getLightLevel(BlockState state) {\n    return state.get(ACTIVATED) ? 15 : 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AdvancementProvider to DataGeneratorEntrypoint in Java\nDESCRIPTION: Demonstrates how to add the custom AdvancementProvider to the DataGeneratorEntrypoint's onInitializeDataGenerator method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/advancements.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceAdvancementProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Implementing use() Method for LightningStick\nDESCRIPTION: Implementation of the use() method that summons lightning 10 blocks in front of the player when the item is used, with a cooldown to prevent spam.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/custom-item-interactions.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n    if (!world.isClient()) {\n        // Set a cooldown for the item (20 ticks, or 1 second)\n        user.getItemCooldownManager().set(this, 20);\n\n        // Get the rotation of the player\n        float pitch = user.getPitch();\n        float yaw = user.getYaw();\n\n        // Get the position where the lightning should be summoned\n        // In this case, 10 blocks in front of the player\n        double x = user.getX() - Math.sin(Math.toRadians(yaw)) * 10;\n        double z = user.getZ() + Math.cos(Math.toRadians(yaw)) * 10;\n\n        // Spawn the lightning bolt\n        LightningEntity lightningEntity = new LightningEntity(EntityType.LIGHTNING_BOLT, world);\n        lightningEntity.setPosition(x, user.getY(), z);\n        world.spawnEntity(lightningEntity);\n    }\n\n    return TypedActionResult.success(user.getStackInHand(hand));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom LightningStick Item Class\nDESCRIPTION: This snippet shows the class declaration for a custom LightningStick item that extends the base Item class. This structure forms the foundation for creating items with custom behavior.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-item-interactions.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class LightningStick extends Item {\n    public LightningStick(Settings settings) {\n        super(settings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Production Run Task in Groovy\nDESCRIPTION: This snippet demonstrates how to configure the client production run task, including options for using XVFB and configuring tracy-capture for profiling. It's useful for headless CI environments and performance analysis.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/production-run-tasks.md#2025-04-05_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.register(\"prodClient\", net.fabricmc.loom.task.prod.ClientProductionRunTask) {\n    // Whether to use XVFB to run the game, using a virtual framebuffer. This is useful for headless CI environments.\n    // Defaults to true only on Linux and when the \"CI\" environment variable is set.\n    // XVFB must be installed, on Debian-based systems you can install it with: `apt install xvfb`\n    useXVFB = true\n\n    // Optionally configure the tracy-capture executable.\n    tracy {\n        // The path to the tracy-capture executable.\n        tracyCapture = file(\"tracy-capture\")\n\n        // The output path of the captured tracy profile.\n        output = file(\"profile.tracy\")\n\n        // The maximum number of seconds to wait for tracy-capture to stop on its own before killing it.\n        // Defaults to 10 seconds.\n        maxShutdownWaitSeconds = 10\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Type RegistryKey in Java\nDESCRIPTION: Demonstrates how to obtain the RegistryKey for a custom damage type to use in code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceDamageTypes {\n    public static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE, new Identifier(\"fabric-docs-reference\", \"tater\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block States for Pillar Block in JSON\nDESCRIPTION: Blockstate JSON file that maps the axis property to specific models. It handles the three possible orientations (x, y, z) by using different models and rotations for each axis value.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/blockstates.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"axis=x\": {\n      \"model\": \"fabric-docs-reference:block/condensed_oak_log_horizontal\",\n      \"x\": 90,\n      \"y\": 90\n    },\n    \"axis=y\": {\n      \"model\": \"fabric-docs-reference:block/condensed_oak_log\"\n    },\n    \"axis=z\": {\n      \"model\": \"fabric-docs-reference:block/condensed_oak_log_horizontal\",\n      \"x\": 90\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sound Registration in Mod Initializer\nDESCRIPTION: Code showing how to initialize sound registration in the mod's initializer class using the helper class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/custom.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceSounds implements ModInitializer {\n\t@Override\n\tpublic void onInitialize() {\n\t\tCustomSounds.register();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing a BlockPos to JSON in Java\nDESCRIPTION: Demonstrates how to serialize a BlockPos object to a JsonElement using BlockPos.CODEC and JsonOps.INSTANCE. The code creates a BlockPos and encodes it to JSON format using Mojang's codec system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBlockPos pos = new BlockPos(1, 2, 3);\n\n// Serialize the BlockPos to a JsonElement\nDataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);\n```\n\n----------------------------------------\n\nTITLE: Pairing Codecs for JSON Serialization in Java\nDESCRIPTION: Demonstrates combining two field codecs into a pair codec that serializes to a JSON object with fields from both original codecs.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Создаём два отдельных коробочных кодека\nCodec<Integer> firstCodec = Codec.INT.fieldOf(\"i_am_number\").codec();\nCodec<Boolean> secondCodec = Codec.BOOL.fieldOf(\"this_statement_is_false\").codec();\n\n// Объединяем их в пару кодеков\nCodec<Pair<Integer, Boolean>> pairCodec = Codec.pair(firstCodec, secondCodec);\n\n// Используем её для сериализации данных\nDataResult<JsonElement> result = pairCodec.encodeStart(JsonOps.INSTANCE, Pair.of(23, true));\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Map Codec\nDESCRIPTION: Shows the resulting JSON structure when using the map codec from the previous example. The Identifiers are serialized as strings to serve as keys in the JSON object.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example:number\": 23,\n  \"example:the_cooler_number\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Border Outlines with DrawContext in Minecraft\nDESCRIPTION: This code shows how to draw a border outline around a rectangle using the DrawContext.drawBorder() method. It defines the position, dimensions, and color of the border.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/draw-context.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Draw a border around the rectangle\nthis.drawContext.drawBorder(10, 10, 100, 100, 0xFFFFFFFF);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Command Lambda in Java\nDESCRIPTION: Shows how to create a basic Command lambda that returns a success value. This lambda takes a CommandContext and returns an integer indicating success or failure.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/basics.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCommand<ServerCommandSource> command = context -> {\n    return 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Previewing Built Website\nDESCRIPTION: Command to preview the built static website locally.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/contributing.md#2025-04-05_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Replacement Logic for Vertical Slabs\nDESCRIPTION: Overrides the canReplace method to implement custom logic for when a vertical slab can be replaced by another one, allowing single slabs to become double slabs.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic boolean canReplace(BlockState state, ItemPlacementContext context) {\n    ItemStack itemStack = context.getStack();\n    if (!state.get(SINGLE) || !itemStack.isOf(this.asItem())) {\n        return false;\n    }\n    if (context.canReplaceExisting()) {\n        return false;\n    }\n    Direction direction = context.getSide();\n    if (state.get(FACING) == direction.getOpposite()) {\n        return true;\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Création d'un Codec pour Liste de BlockPos en Java\nDESCRIPTION: Exemple de création d'un codec pour une liste de BlockPos en utilisant la méthode listOf().\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/fr_fr/develop/codecs.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nCodec<List<BlockPos>> listCodec = BlockPos.CODEC.listOf();\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output of a Serialized Linked List\nDESCRIPTION: An example of how a linked list would be represented in JSON after being serialized by the recursive codec. Shows a three-node list with values 2, 3, and 5.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/codecs.md#2025-04-05_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": 2,\n  \"next\": {\n    \"value\": 3,\n    \"next\" : {\n      \"value\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Damage Source\nDESCRIPTION: Code to create a DamageSource instance using the custom damage type registry key.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDamageSource damageSource = new DamageSource(world.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(TATER));\n```\n\n----------------------------------------\n\nTITLE: Configuring Sound Definitions in sounds.json\nDESCRIPTION: JSON configuration defining sound entries with subtitles and audio file references for Minecraft mod sound resources.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/sounds/custom.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metal_whistle\": {\n    \"subtitle\": \"fabric_docs_reference.subtitle.metal_whistle\",\n    \"sounds\": [\n      \"fabric-docs-reference:metal_whistle\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Custom Screen with Button and Label\nDESCRIPTION: Example implementation of a custom screen class that extends Screen and includes a button with a label. Shows proper initialization of widgets and rendering setup.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomScreen extends Screen {\n    public CustomScreen(Text title) {\n        super(title);\n    }\n\n    @Override\n    protected void init() {\n        super.init();\n        \n        int x = width / 2 - 100; // Center the button horizontally\n        int y = height / 2 - 12; // Center the button vertically\n\n        // Add a button to the screen\n        addDrawableChild(\n            ButtonWidget.builder(Text.literal(\"Click Me!\"), button -> {\n                // Do something when clicked\n                close();\n            })\n            .dimensions(x, y, 200, 24)\n            .build()\n        );\n    }\n\n    @Override\n    public void render(DrawContext context, int mouseX, int mouseY, float delta) {\n        renderBackground(context, mouseX, mouseY, delta);\n        context.drawCenteredTextWithShadow(\n            textRenderer,\n            \"Hello World!\",\n            width / 2,\n            height / 2 - 30,\n            0xFFFFFF\n        );\n        super.render(context, mouseX, mouseY, delta);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Numeric Range Codec in Java\nDESCRIPTION: Creates a codec that accepts only integer values within an inclusive range of 0-2, using Codec.intRange.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Не может быть больше 2\nCodec<Integer> amountOfFriendsYouHave = Codec.intRange(0, 2);\n```\n\n----------------------------------------\n\nTITLE: JSON Output for StringyBean Type\nDESCRIPTION: Shows the JSON representation of a StringyBean when serialized using the registry dispatch codec. The JSON includes a type field and the string field specific to StringyBean.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"example:stringy_bean\",\n  \"stringy_string\": \"This bean is stringy!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Screen in Minecraft\nDESCRIPTION: Shows how to open a custom screen using MinecraftClient's setScreen method. This can be called from key bindings, commands, or client packet handlers.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMinecraftClient.getInstance().setScreen(\n  new CustomScreen(Text.empty())\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Stringy Bean Serialization\nDESCRIPTION: Shows the JSON output for serializing a StringyBean using the Registry Dispatch Codec.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"example:stringy_bean\",\n  \"stringy_string\": \"This bean is stringy!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Argument Type in FabricMC\nDESCRIPTION: Shows how to register a custom argument type using ArgumentTypeRegistry in the mod's initializer.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/arguments.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nArgumentTypeRegistry.registerArgumentType(new Identifier(\"fabric_docs_reference\", \"blockpos\"), BlockPosArgumentType.class, new ConstantArgumentSerializer<>(BlockPosArgumentType::blockPos));\n```\n\n----------------------------------------\n\nTITLE: Creating a Fabric Model Provider Class for Data Generation\nDESCRIPTION: Sets up the base model provider class that extends FabricModelProvider with the required abstract methods and constructor. This is the foundation for all model generation in the mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceModelProvider extends FabricModelProvider {\n    public FabricDocsReferenceModelProvider(FabricDataOutput output) {\n        super(output);\n    }\n\n    @Override\n    public void generateBlockStateModels(BlockStateModelGenerator blockStateModelGenerator) {\n        // Block states and models generation code goes here\n    }\n\n    @Override\n    public void generateItemModels(ItemModelGenerator itemModelGenerator) {\n        // Item models generation code goes here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Loot Tables in Java\nDESCRIPTION: Demonstrates how to add items (eggs) to an existing loot table (coal ore) using LootTableEvents.MODIFY event.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/events.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLootPool.Builder poolBuilder = LootPool.builder();\nLootTableEvents.MODIFY.register((resourceManager, lootManager, id, tableBuilder, source) -> {\n    // Check if we're modifying the coal ore loot table\n    if (source.isBuiltin() && Blocks.COAL_ORE.getLootTableId().equals(id)) {\n        // Add our pool builder that gives eggs\n        LootPool.Builder poolBuilder = LootPool.builder().with(ItemEntry.builder(Items.EGG));\n        tableBuilder.pool(poolBuilder);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Block Comments Example in Java\nDESCRIPTION: Shows how to use block comments for multi-line code sections and inline comments\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/ide-tips-and-tricks.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/*\nModItems.initialize();\nModSounds.initializeSounds();\nModParticles.initialize();\n*/\n\nprivate static int secondsToTicks(float seconds) {\n    return (int) (seconds * 20 /*+ 69*/);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Death Message in JSON\nDESCRIPTION: Adds a custom death message for the 'Tater' damage type in the mod's language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/damage-types.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"death.attack.tater\": \"%1$s was tater'd to death\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Sounds in Mod Initializer\nDESCRIPTION: Java code snippet showing how to initialize custom sounds using the helper class in the mod's main initializer. This simplifies the registration process to a single line of code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/sounds/custom.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceSounds implements ModInitializer {\n    @Override\n    public void onInitialize() {\n        CustomSounds.init();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Production Run Task in Gradle\nDESCRIPTION: This snippet shows how to configure the server-specific options for a production run task in Fabric Loom. It includes settings for the Fabric Installer version, Fabric Loader version, and Minecraft version.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/loom/production-run-tasks.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.register(\"prodServer\", net.fabricmc.loom.task.prod.ServerProductionRunTask) {\n    // The version of the Fabric Installer to use. This must be specified.\n    installerVersion = \"1.0.1\"\n\n    // The version of Fabric Loader to use.\n    // Defaults to the version of Fabric Loader that the project is using.\n    loaderVersion = \"0.16.10\"\n\n    // The version of Minecraft to use.\n    // Defaults to the version of Minecraft that the project is using.\n    minecraftVersion = \"1.21.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output for a Simple Block Model\nDESCRIPTION: The generated JSON output for a steel block model, showing how the cube_all model type is structured with a single texture applied to all faces.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"minecraft:block/cube_all\",\n  \"textures\": {\n    \"all\": \"fabric-docs-reference:block/steel_block\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Custom Class\nDESCRIPTION: Shows the JSON structure that would represent an instance of the CoolBeansClass. This example demonstrates how the Java object would be serialized to JSON format with fields for beans_amount, bean_type, and bean_positions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"beans_amount\": 5,\n  \"bean_type\": \"beanmod:mythical_beans\",\n  \"bean_positions\": [\n    [1, 2, 3],\n    [4, 5, 6]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Hover Effect for Custom Minecraft Widget in Java\nDESCRIPTION: Shows how to implement a color change effect when the mouse hovers over the custom widget by overriding the renderButton method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/rendering/gui/custom-widgets.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void renderButton(DrawContext context, int mouseX, int mouseY, float delta) {\n    int color = isHovered() ? 0xFF555555 : 0xFF000000;\n    context.fill(getX(), getY(), getX() + width, getY() + height, color);\n    context.drawCenteredTextWithShadow(textRenderer, getMessage(), getX() + width / 2, getY() + (height - 8) / 2, 0xFFFFFF);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Advancement Provider in DataGeneratorEntrypoint\nDESCRIPTION: Shows how to register the custom advancement provider to the data generator. This code snippet adds the provider to the DataGenerator instance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceAdvancementProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Initializing Block Registration Method in Java\nDESCRIPTION: A utility method for registering blocks and their respective block items in Minecraft. The method handles both block registration and creates a BlockItem when specified.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/first-block.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static <T extends Block> T register(String path, T block, boolean shouldRegisterItem) {\n    // We register the block with the ID constructed from our mod ID and the provided path\n    Identifier id = new Identifier(FabricDocsReference.MOD_ID, path);\n    // We register the block with the identifier we just constructed\n    Registry.register(Registries.BLOCK, id, block);\n    \n    // If shouldRegisterItem is true, we also create and register a BlockItem\n    if (shouldRegisterItem) {\n        BlockItem item = new BlockItem(block, new Item.Settings());\n        // Then we register the BlockItem\n        Registry.register(Registries.ITEM, id, item);\n    }\n    \n    // Finally, we return the block so we can store it somewhere\n    return block;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Command with Optional Subcommand\nDESCRIPTION: Defines the execution logic for a command with an optional subcommand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeCommandSubCommandTwo(CommandContext<ServerCommandSource> context) {\n    context.getSource().sendFeedback(() -> Text.literal(\"Hello from command two!\"), false);\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Fabric Mods\nDESCRIPTION: A hierarchical listing of Fabric mods and their dependencies, showing version numbers and nested requirements. The list is organized with primary mods and their sub-dependencies indented below them.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/public/assets/players/crash-report-example.txt#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nauditory: Auditory 0.0.6-1.20.1\nauditory: Auditory 0.0.6-1.20.1\nauthority: Auto HUD 6.3.2+1.20.1\n    yaclx: YetAnotherConfigLibExtensions 1.6+1.20\nautotag-convention: AutoTag Convention 2.0.2+1.20\n    autotag: AutoTag 2.0.2+1.20\nbetteradvancements: Better Advancements 0.3.2.161\nbetterdeserttemples: YUNG's Better Desert Temples 1.20-Fabric-3.0.3\n    org_reflections_reflections: reflections 0.10.2\n```\n\n----------------------------------------\n\nTITLE: Custom Death Message Localization\nDESCRIPTION: JSON entry for adding a custom death message for the tater damage type in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/entities/damage-types.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"death.attack.tater\": \"%1$s was tater'd to death\"\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds with World Instance in Minecraft Fabric\nDESCRIPTION: Advanced example of playing sounds using the World instance, providing more control over sound parameters including position and category.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/using-sounds.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncontext.getWorld().playSound(\n        null,\n        context.getBlockPos(),\n        SoundEvents.ENTITY_PILLAGER_AMBIENT,\n        SoundCategory.BLOCKS,\n        1.0f,\n        1.0f\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Status Effect with Command in Minecraft\nDESCRIPTION: Demonstrates how to apply the custom status effect using Minecraft's /effect command. This is useful for testing the effect without writing additional code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_4\n\nLANGUAGE: mcfunction\nCODE:\n```\neffect give @p fabric-docs-reference:tater\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Recursive ListNode Serialization\nDESCRIPTION: Shows the JSON output for serializing a recursive ListNode structure.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": 2,\n  \"next\": {\n    \"value\": 3,\n    \"next\": {\n      \"value\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Screen with Navigation in Fabric Mods\nDESCRIPTION: This code snippet demonstrates how to open a custom screen while preserving the previous screen for navigation purposes.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nScreen currentScreen = MinecraftClient.getInstance().currentScreen;\nMinecraftClient.getInstance().setScreen(\n  new CustomScreen(Text.empty(), currentScreen)\n);\n```\n\n----------------------------------------\n\nTITLE: Example Mixin Crash Stack Trace\nDESCRIPTION: Shows the pattern of a mixin crash in the stack trace, where modid represents the mod's ID and handlerName is the name of the mixin handler.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/troubleshooting/crash-reports.md#2025-04-05_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n... net.minecraft.class_2248.method_3821$$$modid$handlerName() ...\n```\n\n----------------------------------------\n\nTITLE: Executing an Operator-Required Command\nDESCRIPTION: Defines the execution logic for a command that requires operator permissions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeRequiredCommand(CommandContext<ServerCommandSource> context) {\n    context.getSource().sendFeedback(() -> Text.literal(\"Hello from required command!\"), false);\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Item Registration Method in Java\nDESCRIPTION: Defines a method to simplify item registration in a ModItems class. It creates an item with a provided identifier and registers it with the game's item registry.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/first-item.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ModItems {\n    public static <T extends Item> T register(String id, Function<Item.Settings, T> itemFactory, Item.Settings settings) {\n        return Registry.register(Registries.ITEM, new Identifier(\"mod_id\", id), itemFactory.apply(settings));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output for a Block with Different Textures\nDESCRIPTION: The generated JSON output for a pipe block model that uses different textures for its sides versus top and bottom faces.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"minecraft:block/cube_bottom_top\",\n  \"textures\": {\n    \"bottom\": \"fabric-docs-reference:block/pipe_block_top\",\n    \"side\": \"fabric-docs-reference:block/pipe_block\",\n    \"top\": \"fabric-docs-reference:block/pipe_block_top\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Attack Block Callback in Java\nDESCRIPTION: Demonstrates how to register an AttackBlockCallback event that damages players when they hit blocks that don't drop items when mined by hand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/uk_ua/develop/events.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static void attackBlockEvent() {\n    AttackBlockCallback.EVENT.register((player, world, hand, pos, direction) -> {\n        BlockState state = world.getBlockState(pos);\n        Block block = state.getBlock();\n\n        if (!block.getDroppedStacks(state, (ServerWorld) world, pos, null).isEmpty()) {\n            return ActionResult.PASS;\n        }\n\n        player.damage(DamageSource.GENERIC, 1);\n        return ActionResult.PASS;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Damage Type in JSON\nDESCRIPTION: JSON structure for creating a custom 'tater' damage type that causes hunger exhaustion and deals difficulty-dependent damage.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/entities/damage-types.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message_id\": \"tater\",\n  \"exhaustion\": 0.1,\n  \"scaling\": \"when_caused_by_living_non_player\",\n  \"effects\": \"harmful\",\n  \"death_message_type\": \"default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AbstractDynamicSoundInstance in Java Constructor\nDESCRIPTION: Sets up default starting values for the custom SoundInstance in the constructor of the abstract class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprotected AbstractDynamicSoundInstance(DynamicSoundSource source, SoundEvent sound, SoundCategory category, Consumer<AbstractDynamicSoundInstance> finishCallback) {\n    this.source = source;\n    this.sound = sound;\n    this.category = category;\n    this.finishCallback = finishCallback;\n\n    this.startTicks = 10;\n    this.endTicks = 10;\n\n    this.minVolume = 0.0F;\n    this.maxVolume = 1.0F;\n    this.minPitch = 0.5F;\n    this.maxPitch = 2.0F;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Counter Item with Default Component Value in Java\nDESCRIPTION: Code snippet showing how to register a Counter item with a default component value. This ensures new items start with a click count of 0.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item COUNTER = register(new CounterItem(\n    new Item.Settings().component(ModComponents.CLICK_COUNT_COMPONENT, 0)\n), \"counter\");\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON back to a BlockPos\nDESCRIPTION: Shows the complete process of handling the serialized JsonElement and converting it back to a BlockPos object using the parse method. The example demonstrates proper error handling with DataResult and logging.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/codecs.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Cuando desarrolles un mod, querrás obviamente manejar Opcionales vaciós apropiadamente\nJsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// Aquí tenemos nuestro valor json, que debería corresponder a `[1, 2, 3]`,\n// ya que es el formato usado por el codec de BlockPos.\nLOGGER.info(\"Serialized BlockPos: {}\", json);\n\n// Ahora deserializaremos nuestro el JsonElement de vuelta a un BlockPos\nDataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);\n\n// Una vez más solo agarraremos nuestro valor del resultado\nBlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// ¡Y ahora podemos ver que hemos serializado y deserializado nuestro BlockPos exitósamente!\nLOGGER.info(\"Deserialized BlockPos: {}\", pos);\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of CoolBeansClass\nDESCRIPTION: This JSON snippet shows the structure of how the CoolBeansClass would be serialized. It includes fields for beans_amount, bean_type, and bean_positions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"beans_amount\": 5,\n  \"bean_type\": \"beanmod:mythical_beans\",\n  \"bean_positions\": [\n    [1, 2, 3],\n    [4, 5, 6]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a Custom Screen in Fabric Mods\nDESCRIPTION: This code snippet shows how to close a custom screen by setting the current screen to null using MinecraftClient's setScreen method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMinecraftClient.getInstance().setScreen(null);\n```\n\n----------------------------------------\n\nTITLE: Registering Command Redirects in Fabric\nDESCRIPTION: Demonstrates how to create command redirects (aliases) in Fabric.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nLiteralCommandNode<ServerCommandSource> redirectedFrom = dispatcher.register(\n    CommandManager.literal(\"redirected_from\").executes(FabricDocsReferenceCommands::executeRedirectedBy)\n);\nLiteralCommandNode<ServerCommandSource> redirectedBy = dispatcher.register(\n    CommandManager.literal(\"redirected_by\").executes(FabricDocsReferenceCommands::executeRedirectedBy)\n);\ndispatcher.register(CommandManager.literal(\"redirect\").redirect(redirectedBy));\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Cube Block Model\nDESCRIPTION: Generates a basic cube_all block model with the same texture on all sides using BlockStateModelGenerator.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/block-models.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"minecraft:block/cube_all\",\n  \"textures\": {\n    \"all\": \"fabric-docs-reference:block/steel_block\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mixin Crash Stack Trace Example\nDESCRIPTION: Example of how a mixin crash appears in the stack trace, showing the mod-id and handler name pattern.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/troubleshooting/crash-reports.md#2025-04-05_snippet_3\n\nLANGUAGE: no-line-numbers\nCODE:\n```\n... net.minecraft.class_2248.method_3821$$$mod-id$handlerName() ...\n```\n\n----------------------------------------\n\nTITLE: Windows Crash Report Location Path\nDESCRIPTION: Windows-specific file path where Minecraft crash reports are stored.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/troubleshooting/crash-reports.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n%appdata%\\.minecraft\\crash-reports\n```\n\n----------------------------------------\n\nTITLE: Complete TaterBlock Implementation with Custom Damage\nDESCRIPTION: Full implementation of a custom block that applies the custom 'tater' damage type when stepped on by an entity.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/it_it/develop/entities/damage-types.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n:::1\npublic class TaterBlock extends Block {\n    public TaterBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n        if (entity instanceof LivingEntity) {\n            // Create a DamageSource with our custom damage type\n            DamageSource damageSource = new DamageSource(\n                    world.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(FabricDocsReferenceDamageTypes.TATER_DAMAGE_TYPE)\n            );\n            entity.damage(damageSource, 5.0f);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Interaction Methods in DynamicSoundManager\nDESCRIPTION: Methods for interacting with the sound system, including playing sounds, stopping sounds, and checking if a sound is currently playing.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic void playSound(AbstractDynamicSoundInstance sound) {\n    client.getSoundManager().play(sound);\n    playingSounds.add(sound);\n}\n\npublic void stopSound(AbstractDynamicSoundInstance sound) {\n    client.getSoundManager().stop(sound);\n    playingSounds.remove(sound);\n}\n\npublic boolean isSoundPlaying(AbstractDynamicSoundInstance sound) {\n    return playingSounds.contains(sound);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component in Java\nDESCRIPTION: Demonstrates how to register a custom data component for Minecraft items using the Fabric modding framework. This example registers an Integer component to track click count.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final ComponentType<Integer> CLICK_COUNT_COMPONENT = Registry.register(\n    Registries.DATA_COMPONENT_TYPE,\n    Identifier.of(FabricDocsReference.MOD_ID, \"click_count\"),\n    ComponentType.<Integer>builder().codec(Codec.INT).build()\n);\n```\n\n----------------------------------------\n\nTITLE: Example of Problematic Client Code in Server Environment\nDESCRIPTION: This code snippet demonstrates incorrect implementation that causes server crashes by attempting to access client-only classes from code that runs on both client and server. It shows why networking is necessary for client-server communication.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/networking.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class HighlightingWandItem extends Item {\n    public HighlightingWandItem(Item.Settings settings) {\n        super(settings);\n    }\n\n    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n        BlockPos target = ...\n\n        // BAD CODE: DON'T EVER DO THIS! // \n        ClientBlockHighlighting.highlightBlock(MinecraftClient.getInstance(), target); // \n        return super.use(world, user, hand);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a List Codec in Java\nDESCRIPTION: This snippet demonstrates how to create a Codec for a list of BlockPos objects using the listOf() method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCodec<List<BlockPos>> listCodec = BlockPos.CODEC.listOf();\n```\n\n----------------------------------------\n\nTITLE: Opening a Custom Screen with Previous Screen Reference in Fabric Mods\nDESCRIPTION: This code snippet demonstrates how to open a custom screen while passing the current screen as a reference, allowing for returning to the previous screen when closing the custom screen.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nScreen currentScreen = MinecraftClient.getInstance().currentScreen;\nMinecraftClient.getInstance().setScreen(\n  new CustomScreen(Text.empty(), currentScreen)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hero Section for Fabric Documentation\nDESCRIPTION: Defines the hero section of the documentation homepage, including the main title and tagline. This YAML configuration is likely used by a custom theme or component in the static site generator.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/index.md#2025-04-05_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhero:\n  name: Fabric Documentation\n  tagline: The official curated documentation for Fabric, a modding toolchain for Minecraft.\n\n```\n\n----------------------------------------\n\nTITLE: Creating Command Redirects (Aliases) in Fabric\nDESCRIPTION: Shows how to create command redirects or aliases by redirecting one command to another, complete with argument handling.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ko_kr/develop/commands/basics.md#2025-04-05_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nLiteralCommandNode<ServerCommandSource> redirectedTo = dispatcher.register(\n        CommandManager.literal(\"redirected_to\").executes(FabricDocsReferenceCommands::executeRedirectedBy)\n);\n\ndispatcher.register(CommandManager.literal(\"redirected_by\").executes(FabricDocsReferenceCommands::executeRedirectedBy).redirect(redirectedTo));\n```\n\n----------------------------------------\n\nTITLE: Setting Component Value with Return in Java\nDESCRIPTION: Demonstrates setting a component value while capturing the previous value in a variable.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nint oldValue = stack.set(ModComponents.CLICK_COUNT_COMPONENT, newValue);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Listener in Java\nDESCRIPTION: Demonstrates how to create a listener for a custom event. This example registers a SheepShearCallback that makes sheep drop diamonds instead of wool when sheared.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/uk_ua/develop/events.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static void sheepShearEvent() {\n    SheepShearCallback.EVENT.register((player, sheep) -> {\n        if (!sheep.world.isClient) {\n            sheep.dropStack(new ItemStack(Items.DIAMOND));\n            return ActionResult.SUCCESS;\n        }\n\n        return ActionResult.PASS;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Screen in Minecraft with Fabric\nDESCRIPTION: Extends the Screen class to create a custom GUI with a label and button. The init method adds drawable widgets to the screen, and the render method draws the screen components each frame.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.rendering.screens;\n\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.gui.DrawContext;\nimport net.minecraft.client.gui.screen.Screen;\nimport net.minecraft.client.gui.widget.ButtonWidget;\nimport net.minecraft.text.Text;\n\npublic class CustomScreen extends Screen {\n    public CustomScreen(Text title) {\n        super(title);\n    }\n\n    @Override\n    protected void init() {\n        super.init();\n\n        // Create a label that says \"Hello World!\"\n        // Note: Fabric API adds the TextWidget class.\n        addDrawableChild(new net.fabricmc.fabric.api.client.screen.v1.Screens.TextWidget(\n                Text.literal(\"Hello World!\"),\n                width / 2,\n                height / 2 - 20\n        ));\n\n        // Create a button that says \"Close\"\n        // This button will close the screen when clicked\n        addDrawableChild(ButtonWidget.builder(\n                Text.literal(\"Close\"),\n                button -> close()\n        ).dimensions(\n                width / 2 - 100,\n                height / 2,\n                200, // width\n                20 // height\n        ).build());\n    }\n\n    @Override\n    public void render(DrawContext context, int mouseX, int mouseY, float delta) {\n        // Renders the background\n        renderBackground(context, mouseX, mouseY, delta);\n        // Renders all the drawable children (widgets) - required!\n        super.render(context, mouseX, mouseY, delta);\n    }\n\n    @Override\n    public void close() {\n        // Close the screen - return to the game/previous screen\n        this.client.setScreen(null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version in Windows Command Prompt\nDESCRIPTION: This command is used to check the installed version of Java on a Windows system. It should be executed in the command prompt to display the current Java version.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/installing-java/windows.md#2025-04-05_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\njava -version\n```\n\n----------------------------------------\n\nTITLE: Adding a LanguageProvider to the DataGenerator in Java\nDESCRIPTION: Shows how to register the language provider with the Fabric data generator. This is done by adding the provider to the data generator during initialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/translations.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceEnglishLangProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Registering Particle Type in Main Class\nDESCRIPTION: Registers a new ParticleType in the mod's main initializer class using the mod ID. This establishes the base registration for the particle system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDefaultParticleType SPARKLE_PARTICLE = Registry.register(\n    Registries.PARTICLE_TYPE,\n    new Identifier(\"fabric-docs-reference\", \"sparkle_particle\"),\n    FabricParticleTypes.simple()\n);\n```\n\n----------------------------------------\n\nTITLE: Custom BlockPos Argument Type Implementation\nDESCRIPTION: Implementation of a custom argument type that parses BlockPos from a string in the format {x, y, z}.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/arguments.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class BlockPosArgumentType implements ArgumentType<BlockPos> {\n    @Override\n    public BlockPos parse(StringReader reader) throws CommandSyntaxException {\n        // Implementation details\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tools to Item Group in Java\nDESCRIPTION: Shows how to add the custom tool items to a specific item group for organization in the creative inventory.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/items/custom-tools.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nItemGroupEvents.modifyEntriesEvent(ItemGroups.TOOLS).register(content -> {\n    content.add(GUIDITE_SWORD);\n    content.add(GUIDITE_SHOVEL);\n    content.add(GUIDITE_PICKAXE);\n    content.add(GUIDITE_AXE);\n    content.add(GUIDITE_HOE);\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Complex Codec for CoolBeansClass in Java\nDESCRIPTION: This snippet shows how to create a complex Codec for the CoolBeansClass using RecordCodecBuilder. It combines multiple field codecs into a single codec for the class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n    Codec.INT.fieldOf(\"beans_amount\").forGetter(CoolBeansClass::getBeansAmount),\n    Registries.ITEM.getCodec().fieldOf(\"bean_type\").forGetter(CoolBeansClass::getBeanType),\n    BlockPos.CODEC.listOf().fieldOf(\"bean_positions\").forGetter(CoolBeansClass::getBeanPositions)\n    // Up to 16 fields can be declared here\n).apply(instance, CoolBeansClass::new));\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Screen in Minecraft with Fabric\nDESCRIPTION: Extends the Screen class to create a custom GUI with a label and button. The init method adds drawable widgets to the screen, and the render method draws the screen components each frame.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.rendering.screens;\n\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.gui.DrawContext;\nimport net.minecraft.client.gui.screen.Screen;\nimport net.minecraft.client.gui.widget.ButtonWidget;\nimport net.minecraft.text.Text;\n\npublic class CustomScreen extends Screen {\n    public CustomScreen(Text title) {\n        super(title);\n    }\n\n    @Override\n    protected void init() {\n        super.init();\n\n        // Create a label that says \"Hello World!\"\n        // Note: Fabric API adds the TextWidget class.\n        addDrawableChild(new net.fabricmc.fabric.api.client.screen.v1.Screens.TextWidget(\n                Text.literal(\"Hello World!\"),\n                width / 2,\n                height / 2 - 20\n        ));\n\n        // Create a button that says \"Close\"\n        // This button will close the screen when clicked\n        addDrawableChild(ButtonWidget.builder(\n                Text.literal(\"Close\"),\n                button -> close()\n        ).dimensions(\n                width / 2 - 100,\n                height / 2,\n                200, // width\n                20 // height\n        ).build());\n    }\n\n    @Override\n    public void render(DrawContext context, int mouseX, int mouseY, float delta) {\n        // Renders the background\n        renderBackground(context, mouseX, mouseY, delta);\n        // Renders all the drawable children (widgets) - required!\n        super.render(context, mouseX, mouseY, delta);\n    }\n\n    @Override\n    public void close() {\n        // Close the screen - return to the game/previous screen\n        this.client.setScreen(null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Windows Command Prompt\nDESCRIPTION: This command opens the Windows Command Prompt. It's executed in the Windows Run dialog to access the command line interface.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/installing-java/windows.md#2025-04-05_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ncmd.exe\n```\n\n----------------------------------------\n\nTITLE: Creating a Command with Admin Permission Requirements in Fabric\nDESCRIPTION: Shows how to create a command that requires level 2 operator permissions to execute using the require() method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ko_kr/develop/commands/basics.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"required_command\")\n        .requires(source -> source.hasPermissionLevel(2))\n        .executes(FabricDocsReferenceCommands::executeRequiredCommand));\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Initialize Method for Static Initialization\nDESCRIPTION: A method that triggers static initialization of the class, ensuring all static block instances are initialized when called from the mod's entry point.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/first-block.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ModBlocks {\n    // ...\n\n    public static void initialize() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class for Custom Effect in Java\nDESCRIPTION: Creates a custom status effect class called TaterEffect that extends StatusEffect and gives players 1 experience point per tick. The class defines the effect's properties and implements the applyUpdateEffect method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        // The first parameter is the effect type (beneficial, harmful, neutral)\n        // The second parameter is the color in ARGB format\n        super(StatusEffectType.BENEFICIAL, 0xAA6600);\n    }\n\n    // This method is called every tick to check whether the effect should be applied\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        // In our case, we want the effect to apply every tick, so we return true\n        return true;\n    }\n\n    // This method is called when the effect is applied to an entity every tick\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            // Give 1 XP point per tick\n            ((PlayerEntity) entity).addExperience(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Particle Registration\nDESCRIPTION: Registers the particle on the client side and sets up its movement behavior using the end rod particle factory.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nParticleFactoryRegistry.getInstance().register(FabricDocsReference.SPARKLE_PARTICLE, EndRodParticle.Factory::new);\n```\n\n----------------------------------------\n\nTITLE: Client-Side Particle Registration\nDESCRIPTION: Registers the particle on the client side and sets up its movement behavior using the end rod particle factory.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nParticleFactoryRegistry.getInstance().register(FabricDocsReference.SPARKLE_PARTICLE, EndRodParticle.Factory::new);\n```\n\n----------------------------------------\n\nTITLE: Linux Crash Report Location Path\nDESCRIPTION: File system path where crash reports are stored on Linux systems.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/troubleshooting/crash-reports.md#2025-04-05_snippet_2\n\nLANGUAGE: no-line-numbers\nCODE:\n```\n~/.minecraft/crash-reports\n```\n\n----------------------------------------\n\nTITLE: Creating Paired Codecs for Combined Data Types\nDESCRIPTION: Demonstrates merging two separate codecs into a pair codec that serializes both values into a combined JSON structure.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nCodec<Integer> firstCodec = Codec.INT.fieldOf(\"i_am_number\").codec();\nCodec<Boolean> secondCodec = Codec.BOOL.fieldOf(\"this_statement_is_false\").codec();\n\nCodec<Pair<Integer, Boolean>> pairCodec = Codec.pair(firstCodec, secondCodec);\n\nDataResult<JsonElement> result = pairCodec.encodeStart(JsonOps.INSTANCE, Pair.of(23, true));\n```\n\n----------------------------------------\n\nTITLE: Quaternion Rotation Animation in FabricMC\nDESCRIPTION: Shows how to implement rotation animation using Quaternions and MatrixStack. The example rotates a diamond model around the z-axis based on the tick counter.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/basic-concepts.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nmatrices.push();\nmatrices.translate(0.5f, 0.5f, 0.0f);\n\n// Rotate around the Z axis based on time\nmatrices.multiply(RotationAxis.POSITIVE_Z.rotation(tickDelta));\n\n// Render the diamond\nmatrix = matrices.peek().getPositionMatrix();\nrenderer.drawItems(matrix);\n\nmatrices.pop();\n```\n\n----------------------------------------\n\nTITLE: Executing a Dedicated Server Command\nDESCRIPTION: Defines the execution logic for a command that only runs on a dedicated server.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeDedicatedCommand(CommandContext<ServerCommandSource> context) {\n    context.getSource().sendFeedback(() -> Text.literal(\"Hello from dedicated command!\"), false);\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Item to ItemGroup in Java\nDESCRIPTION: Uses Fabric API's ItemGroupEvents to add the custom item to the Ingredients item group. This code is added to the initialize method of the ModItems class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/first-item.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static void initialize() {\n    ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(content -> {\n        content.add(SUSPICIOUS_SUBSTANCE);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Item Model JSON for Custom Armor\nDESCRIPTION: JSON model definition for a custom armor item (helmet) that uses the 'generated' parent model and references the appropriate texture file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/custom-armor.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_helmet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Translations with Text Components in Java\nDESCRIPTION: Shows how to use the generated translations in code by replacing hardcoded text with translatable text components. This enables localization support for the mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/translations.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChatHud chatHud = MinecraftClient.getInstance().inGameHud.getChatHud();\nchatHud.addMessage(Text.literal(\"Hello there!\")); // [!code --]\nchatHud.addMessage(Text.translatable(\"text.fabric_docs_reference.greeting\")); // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Particle Type in Mod Initializer\nDESCRIPTION: Registers a new ParticleType in the main mod initializer class using the mod ID. This establishes the basic particle definition that will be used throughout the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final DefaultParticleType SPARKLE_PARTICLE = FabricParticleTypes.simple();\n\n@Override\npublic void onInitialize() {\n    //[...]\n    \n    Registry.register(\n            Registries.PARTICLE_TYPE,\n            new Identifier(MOD_ID, \"sparkle_particle\"),\n            SPARKLE_PARTICLE\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation Generation in FabricLanguageProvider\nDESCRIPTION: Demonstrates various ways to add translations to the TranslationBuilder, including raw translations, block/item translations, and other game element translations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/translations.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// We can translate blocks\ntranslationBuilder.add(ModBlocks.RUBY_BLOCK, \"Block of Ruby\");\n\n// We can translate items\ntranslationBuilder.add(ModItems.RUBY, \"Ruby\");\n\n// We can translate regular strings\ntranslationBuilder.add(\"text.fabric_docs_reference.greeting\", \"Welcome to Fabric!\");\n\n// We can translate entity types, item groups, and more using the provided methods\ntranslationBuilder.add(ModEntities.RUBY_GOLEM, \"Ruby Golem\");\ntranslationBuilder.add(ModItemGroups.RUBY, \"Ruby\");\n```\n\n----------------------------------------\n\nTITLE: Locating Minecraft Logs - Windows Path\nDESCRIPTION: The file path for accessing Minecraft logs on Windows operating system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/troubleshooting/uploading-logs.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n%appdata%\\.minecraft\n```\n\n----------------------------------------\n\nTITLE: Locating Minecraft Logs - Windows Path\nDESCRIPTION: The file path for accessing Minecraft logs on Windows operating system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/troubleshooting/uploading-logs.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n%appdata%\\.minecraft\n```\n\n----------------------------------------\n\nTITLE: Building a Complex Codec with RecordCodecBuilder\nDESCRIPTION: Demonstrates how to create a complete Codec for a custom class by combining multiple field codecs. Uses RecordCodecBuilder to map JSON fields to class properties through getters and constructor.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/codecs.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n    Codec.INT.fieldOf(\"beans_amount\").forGetter(CoolBeansClass::getBeansAmount),\n    Registries.ITEM.getCodec().fieldOf(\"bean_type\").forGetter(CoolBeansClass::getBeanType),\n    BlockPos.CODEC.listOf().fieldOf(\"bean_positions\").forGetter(CoolBeansClass::getBeanPositions)\n    // El máximo de miembros que se pueden declarar aquí es 16\n).apply(instance, CoolBeansClass::new));\n```\n\n----------------------------------------\n\nTITLE: Rotating Objects with Quaternions in FabricMC\nDESCRIPTION: Shows how to implement rotation animations using Quaternions and MatrixStack, specifically rotating an object around the z-axis based on tick delta.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/basic-concepts.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nmatrices.push();\nmatrices.translate(0.5f, 0.5f, 0.5f);\n\n// Rotate around the Z axis based on time\nmatrices.multiply(RotationAxis.POSITIVE_Z.rotation((float) (tickDelta * Math.PI / 4)));\n\nmatrices.translate(-0.5f, -0.5f, -0.5f);\n\n// Get our transformation matrix and render!\nMatrix4f matrix = matrices.peek().getPositionMatrix();\nrender(matrix);\n\nmatrices.pop();\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Advancement for Getting Dirt\nDESCRIPTION: Demonstrates how to create a basic advancement for obtaining a dirt block, including setting up display properties and criteria.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nAdvancement getDirt = Advancement.Builder.create()\n        .display(\n                // Display settings determine how the advancement appears in-game\n                Items.DIRT, // Icon\n                // Display title\n                Text.translatable(\"text.fabric.advancements.get_dirt.title\"),\n                // Description text\n                Text.translatable(\"text.fabric.advancements.get_dirt.description\"),\n                // Background texture - used for root advancements, but can be null in other cases.\n                new Identifier(\"textures/gui/advancements/backgrounds/adventure.png\"),\n                // Frame style, toast (popup), announcement, and hidden status\n                AdvancementFrame.TASK, true, true, false\n        )\n        // Add the criteria for this advancement\n        .criterion(\n                // A unique string ID for this criterion\n                \"get_dirt\",\n                // Use a pre-existing vanilla criterion for obtaining an item\n                InventoryChangedCriterion.Conditions.items(Items.DIRT)\n        )\n        // No parent means this is a root advancement\n        .build(consumer, \"fabric-docs-reference\" + \"/get_dirt\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Chest Loot Table Provider\nDESCRIPTION: Shows how to create a provider for chest loot tables by extending SimpleFabricLootTableProvider. This is used for loot tables in containers like chests.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/data-generation/loot-tables.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceChestLootTableProvider extends SimpleFabricLootTableProvider {\n\tpublic FabricDocsReferenceChestLootTableProvider(FabricDataOutput output) {\n\t\t// LootContextTypes.CHEST is for containers such as chests, barrels, etc.\n\t\tsuper(output, LootContextTypes.CHEST);\n\t}\n\n\t@Override\n\tpublic void accept(BiConsumer<ResourceLocation, LootTable.Builder> exporter) {\n\t\t// Loot table generation code will go here\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Command with Single Integer Argument in FabricMC\nDESCRIPTION: Demonstrates how to create a basic command that accepts a single required integer argument and executes a corresponding action.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/arguments.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nargument(\"value\", IntegerArgumentType.integer())\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.getSource().sendFeedback(() -> Text.literal(\"Called /command_with_arg with value = \" + context.getArgument(\"value\", Integer.class)), false);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Translations in Minecraft Client Code\nDESCRIPTION: Shows how to use the generated translations in game code. This example replaces a hardcoded string with a translatable text component.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/translations.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChatHud chatHud = MinecraftClient.getInstance().inGameHud.getChatHud();\nchatHud.addMessage(Text.literal(\"Hello there!\")); // [!code --]\nchatHud.addMessage(Text.translatable(\"text.fabric_docs_reference.greeting\")); // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Installing Java 21 JDK on Fedora\nDESCRIPTION: Command to install Java 21 OpenJDK Development Kit on Fedora for mod development.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/installing-java/linux.md#2025-04-05_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install java-21-openjdk-devel\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Particle with In-game Command\nDESCRIPTION: An example command to spawn the custom particle in the game for testing. This command spawns the particle at the player's location, specifically one block above them.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_3\n\nLANGUAGE: mcfunction\nCODE:\n```\n/particle fabric-docs-reference:sparkle_particle ~ ~1 ~\n```\n\n----------------------------------------\n\nTITLE: Custom Block Damage Implementation\nDESCRIPTION: Complete implementation of a custom block that applies the Tater damage type when entities step on it.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterBlock extends Block {\n    public TaterBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n        if (!entity.bypassesSteppingEffects() && entity instanceof LivingEntity) {\n            DamageSource damageSource = world.getDamageSources().create(FabricDocsReferenceDamageTypes.TATER);\n            entity.damage(damageSource, 5.0f);\n        }\n\n        super.onSteppedOn(world, pos, state, entity);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Java 21 JDK on Fedora\nDESCRIPTION: Command to install Java 21 OpenJDK Development Kit on Fedora for mod development.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/installing-java/linux.md#2025-04-05_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install java-21-openjdk-devel\n```\n\n----------------------------------------\n\nTITLE: Definiendo una estructura de nodo de lista enlazada en Java\nDESCRIPTION: Define una clase de registro simple para representar un nodo en una lista enlazada que contiene un valor entero y una referencia al siguiente nodo.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/codecs.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic record ListNode(int value, ListNode next) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbstractDynamicSoundInstance Class in Java\nDESCRIPTION: Defines the core structure for dynamic SoundInstances, including properties for transition states, tick durations, and volume/pitch ranges. It also provides methods for sound modulation and lifecycle management.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class AbstractDynamicSoundInstance implements SoundInstance {\n    protected final DynamicSoundSource soundSource;\n    protected final SoundEvent sound;\n    protected final SoundCategory category;\n\n    protected TransitionState transitionState = TransitionState.START;\n    protected int startTicks;\n    protected int endTicks;\n\n    protected float minVolume;\n    protected float maxVolume;\n    protected float minPitch;\n    protected float maxPitch;\n\n    protected boolean finished = false;\n\n    protected int currentTick;\n    protected int currentEndTick;\n\n    protected final Consumer<AbstractDynamicSoundInstance> onFinished;\n\n    protected enum TransitionState {\n        START,\n        MIDDLE,\n        END\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nprotected AbstractDynamicSoundInstance(DynamicSoundSource soundSource, SoundEvent sound, SoundCategory category, Consumer<AbstractDynamicSoundInstance> onFinished) {\n    this.soundSource = soundSource;\n    this.sound = sound;\n    this.category = category;\n    this.onFinished = onFinished;\n\n    this.startTicks = 10;\n    this.endTicks = 10;\n\n    this.minVolume = 0.0F;\n    this.maxVolume = 1.0F;\n    this.minPitch = 0.5F;\n    this.maxPitch = 2.0F;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic boolean canPlay() {\n    return !this.finished;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void tick() {\n    if (this.finished) {\n        return;\n    }\n\n    this.currentTick++;\n\n    if (this.transitionState == TransitionState.START && this.currentTick >= this.startTicks) {\n        this.transitionState = TransitionState.MIDDLE;\n    } else if (this.transitionState == TransitionState.END) {\n        if (this.currentTick >= this.currentEndTick) {\n            this.finished = true;\n            this.onFinished.accept(this);\n            return;\n        }\n    }\n\n    this.applyModulations();\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nprotected float getVolumeMultiplier() {\n    return switch (this.transitionState) {\n        case START -> MathHelper.lerp((float) this.currentTick / this.startTicks, 0.0F, 1.0F);\n        case MIDDLE -> 1.0F;\n        case END -> MathHelper.lerp((float) (this.currentTick - (this.currentEndTick - this.endTicks)) / this.endTicks, 1.0F, 0.0F);\n    };\n}\n\nprotected float getPitchMultiplier(float stress) {\n    return MathHelper.lerp(stress, this.minPitch, this.maxPitch);\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void stopSound() {\n    if (this.transitionState != TransitionState.END) {\n        this.transitionState = TransitionState.END;\n        this.currentEndTick = this.currentTick + this.endTicks;\n    }\n}\n\n@Override\npublic boolean shouldAlwaysPlay() {\n    return false;\n}\n\n@Override\npublic boolean isRelative() {\n    return false;\n}\n\n@Override\npublic int getRepeatDelay() {\n    return 0;\n}\n\n@Override\npublic float getVolume() {\n    return MathHelper.clamp(this.getVolumeMultiplier() * this.maxVolume, this.minVolume, this.maxVolume);\n}\n\n@Override\npublic float getPitch() {\n    return this.getPitchMultiplier(this.soundSource.getStress());\n}\n\n@Override\npublic double getX() {\n    return this.soundSource.getSoundX();\n}\n\n@Override\npublic double getY() {\n    return this.soundSource.getSoundY();\n}\n\n@Override\npublic double getZ() {\n    return this.soundSource.getSoundZ();\n}\n\n@Override\npublic SoundInstance.AttenuationType getAttenuationType() {\n    return SoundInstance.AttenuationType.LINEAR;\n}\n\n@Override\npublic Identifier getId() {\n    return this.sound.getId();\n}\n\n@Override\npublic SoundCategory getCategory() {\n    return this.category;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Item Model JSON for Block Item in Minecraft\nDESCRIPTION: Definiert ein JSON-Itemmodell, das auf das parent Block-Modell verweist, damit das Item im Inventar richtig dargestellt wird.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/first-block.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"fabric-docs-reference:block/condensed_dirt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Loot Table Keys in Fabric\nDESCRIPTION: Shows how to define custom RegistryKey<LootTable> for use in chest loot table generation in a Fabric mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/loot-tables.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ModLootTables {\n    public static final RegistryKey<LootTable> EXAMPLE_CHEST = register(\"chests/example_chest\");\n\n    private static RegistryKey<LootTable> register(String id) {\n        return RegistryKey.of(RegistryKeys.LOOT_TABLE, new Identifier(FabricDocsReference.MOD_ID, id));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Optional Subcommand in Fabric\nDESCRIPTION: Implementation of the command execution that provides different feedback when executed with or without the subcommand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ko_kr/develop/commands/basics.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeCommandTwo(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {\n    context.getSource().sendFeedback(() -> Text.literal(\"You executed the command without the subcommand!\"), false);\n    return Command.SINGLE_SUCCESS;\n}\n\nprivate static int executeCommandSubCommandTwo(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {\n    context.getSource().sendFeedback(() -> Text.literal(\"You executed the command with the subcommand!\"), false);\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Translations\nDESCRIPTION: Demonstrates how to use the generated translations in code by replacing literal text with translatable text components.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/translations.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChatHud chatHud = MinecraftClient.getInstance().inGameHud.getChatHud();\nchatHud.addMessage(Text.literal(\"Hello there!\")); // [!code --]\nchatHud.addMessage(Text.translatable(\"text.fabric_docs_reference.greeting\")); // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Testing Particle with Minecraft Command\nDESCRIPTION: Command to spawn the custom particle in-game for testing purposes. The particle spawns at the player's position, slightly above their feet.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_3\n\nLANGUAGE: mcfunction\nCODE:\n```\n/particle fabric-docs-reference:sparkle_particle ~ ~1 ~\n```\n\n----------------------------------------\n\nTITLE: Generating Door and Trapdoor Block Models\nDESCRIPTION: Demonstrates how to generate models for doors and trapdoors, which require special handling for their various states (open/closed, orientation).\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// Generate door and trapdoor models\nblockStateModelGenerator.registerDoor(ModBlocks.RUBY_DOOR);\nblockStateModelGenerator.registerTrapdoor(ModBlocks.RUBY_TRAPDOOR);\n\n// Alternative: register a trapdoor with rotated textures\n// blockStateModelGenerator.registerOrientableTrapdoor(ModBlocks.RUBY_TRAPDOOR);\n```\n\n----------------------------------------\n\nTITLE: Entity Distance Check\nDESCRIPTION: Code snippet implementing a distance check between player and target entity, limiting interaction range to 5 blocks\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/networking.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nif (player.distanceTo(targetEntity) > 5) return;\n```\n\n----------------------------------------\n\nTITLE: Création d'un Codec Personnalisé pour CoolBeansClass en Java\nDESCRIPTION: Exemple de création d'un codec personnalisé pour la classe CoolBeansClass en utilisant RecordCodecBuilder.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/fr_fr/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n    Codec.INT.fieldOf(\"beans_amount\").forGetter(CoolBeansClass::getBeansAmount),\n    Registries.ITEM.getCodec().fieldOf(\"bean_type\").forGetter(CoolBeansClass::getBeanType),\n    BlockPos.CODEC.listOf().fieldOf(\"bean_positions\").forGetter(CoolBeansClass::getBeanPositions)\n    // Jusqu'à 16 champs peuvent être déclarés ici\n).apply(instance, CoolBeansClass::new));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom EngineSoundInstance in Java\nDESCRIPTION: Creates a concrete implementation of AbstractDynamicSoundInstance for an engine sound. This implementation determines playback conditions and applies specific sound modulations based on the engine's stress level.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.sound.instance;\n\nimport com.example.docs.sound.AbstractDynamicSoundInstance;\nimport net.minecraft.sound.SoundCategory;\nimport net.minecraft.util.Identifier;\n\npublic class EngineSoundInstance extends AbstractDynamicSoundInstance {\n    public EngineSoundInstance(Identifier id, DynamicSoundSource source, SoundInstanceCallback callback, Object callbackId) {\n        super(id, SoundCategory.BLOCKS, source, callback, callbackId);\n    }\n\n    @Override\n    protected boolean shouldContinuePlaying() {\n        // The engine's running state determines if the sound should continue\n        return this.source.isActive();\n    }\n\n    @Override\n    protected void applyModulations() {\n        // Apply volume based on transition state\n        this.volume = getTransitionVolume();\n        \n        // Apply pitch based on engine stress\n        float engineStress = this.source.getModulationValue();\n        this.pitch = normalizeAndLerpValue(engineStress, this.getMinPitch(), this.getMaxPitch());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Advancement Mechanic Implementation\nDESCRIPTION: Sets up a simple mechanic where the game tells players what tool they used to break blocks, used as a foundation for custom advancement criteria.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceDatagenAdvancement implements ModInitializer {\n    @Override\n    public void onInitialize() {\n        // Initializing our custom criteria (we'll add this later)\n\n        // This part's just for the tutorial - in a real mod, you'd want a better system.\n        // This is a map from players to the last tool they used to break a block\n        final Map<UUID, Item> lastTool = new HashMap<>();\n\n        // When blocks are broken, keep track of the tool used, and tell the player\n        BreakBlockCallback.EVENT.register((world, pos, state, player, context) -> {\n            ItemStack toolStack = player.getMainHandStack();\n            Item toolItem = toolStack.getItem();\n\n            // Store the tool\n            lastTool.put(player.getUuid(), toolItem);\n\n            // Tell player what they broke the block with\n            player.sendMessage(Text.literal(\"You broke that with a \" + toolItem.getName().getString() + \"!\"));\n\n            return ActionResult.PASS;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Split Environment Source Sets in Fabric Loom\nDESCRIPTION: Shows how to enable split environment source sets to separate client and common code in a Fabric mod. This prevents server crashes from accidental client-only code calls by enforcing separation at compile time. Requires Minecraft 1.18+, Loader 0.14+, and Loom 1.0+.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/index.md#2025-04-05_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nloom {\n splitEnvironmentSourceSets()\n\n mods {\n   modid {\n     sourceSet sourceSets.main\n     sourceSet sourceSets.client\n   }\n }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Loot Tables in Java\nDESCRIPTION: Demonstrates how to create a loot pool with an item entry and add it to a loot table. This example adds an egg item to the coal ore loot table.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/uk_ua/develop/events.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nLootPool.Builder poolBuilder = LootPool.builder()\n    .rolls(ConstantLootNumberProvider.create(1))\n    .conditionally(RandomChanceLootCondition.builder(0.35f))\n    .with(ItemEntry.builder(Items.EGG));\n\ntable.pool(poolBuilder);\nFabricDocsReference.LOGGER.info(\"Added egg to coal ore loot table!\");\n```\n\n----------------------------------------\n\nTITLE: Applying Status Effect Programmatically in Java\nDESCRIPTION: Shows how to apply a status effect to an entity using the LivingEntity#addStatusEffect method. This method takes a StatusEffectInstance and returns a boolean indicating success.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/entities/effects.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic static boolean applyTaterStatus(LivingEntity entity) {\n    StatusEffectInstance effect = new StatusEffectInstance(\n        FabricDocsReferenceEffects.TATER, // The effect to apply\n        200,                                // The effect's duration (in ticks)\n        0,                                  // The effect's amplifier\n        false,                              // Whether the effect is ambient\n        true,                               // Whether to show particles\n        true                                // Whether to show icon\n    );\n\n    return entity.addStatusEffect(effect);\n}\n```\n\n----------------------------------------\n\nTITLE: Language File Translation Keys\nDESCRIPTION: Example of a language file (en_us.json) containing translation keys and their corresponding text values.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/text-and-translations.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_mod.text.hello\": \"Hello!\",\n  \"my_mod.text.bye\": \"Goodbye :(\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Position Matrix from DrawContext in Minecraft\nDESCRIPTION: Shows how to obtain a transformation/position matrix from the DrawContext object, which is used to transform coordinates when rendering.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/basic-concepts.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndrawContext.getMatrices().peek().getPositionMatrix();\n```\n\n----------------------------------------\n\nTITLE: Configuring Split Environment Source Sets in Fabric Loom\nDESCRIPTION: Shows how to enable split environment source sets to separate client and common code in a Fabric mod. This prevents server crashes from accidental client-only code calls by enforcing separation at compile time. Requires Minecraft 1.18+, Loader 0.14+, and Loom 1.0+.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/index.md#2025-04-05_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nloom {\n splitEnvironmentSourceSets()\n\n mods {\n   modid {\n     sourceSet sourceSets.main\n     sourceSet sourceSets.client\n   }\n }\n }\n```\n\n----------------------------------------\n\nTITLE: Creating Pair Codecs by Combining Two Individual Codecs\nDESCRIPTION: Shows how to combine two codecs into a pair codec that serializes both values into a map containing fields from both original codecs. Works best with MapCodec conversions or Record Codecs.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Crea due codec incapsulati separati\nCodec<Integer> firstCodec = Codec.INT.fieldOf(\"i_am_number\").codec();\nCodec<Boolean> secondCodec = Codec.BOOL.fieldOf(\"this_statement_is_false\").codec();\n\n// Uniscili in un codec coppia\nCodec<Pair<Integer, Boolean>> pairCodec = Codec.pair(firstCodec, secondCodec);\n\n// Usalo per serializzare i dati\nDataResult<JsonElement> result = pairCodec.encodeStart(JsonOps.INSTANCE, Pair.of(23, true));\n```\n\n----------------------------------------\n\nTITLE: Adding Utility Methods to AbstractDynamicSoundInstance in Java\nDESCRIPTION: Provides getter and setter methods for sound properties and state management. These methods allow customization of sound parameters and provide state information to the sound manager.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    protected abstract boolean shouldContinuePlaying();\n\n    public boolean isDone() {\n        return this.done;\n    }\n\n    public void setIntroTicks(int introTicks) {\n        this.introTicks = introTicks;\n    }\n\n    public void setOutroTicks(int outroTicks) {\n        this.outroTicks = outroTicks;\n    }\n\n    public void setMinVolume(float minVolume) {\n        this.minVolume = minVolume;\n    }\n\n    public void setMaxVolume(float maxVolume) {\n        this.maxVolume = maxVolume;\n    }\n\n    public void setMinPitch(float minPitch) {\n        this.minPitch = minPitch;\n    }\n\n    public void setMaxPitch(float maxPitch) {\n        this.maxPitch = maxPitch;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Command with Operator Requirement\nDESCRIPTION: Demonstrates how to register a command that requires the executor to be an operator.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"required_command\")\n    .requires(source -> source.hasPermissionLevel(2))\n    .executes(FabricDocsReferenceCommands::executeRequiredCommand));\n```\n\n----------------------------------------\n\nTITLE: Complex Translation with Multiple Variables in Java\nDESCRIPTION: Demonstrates creating a translatable Text object with multiple variables and how to reference them in the translation string.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/text-and-translations.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nText translatable = Text.translatable(\"my_mod.text.whack.item\", victim.getDisplayName(), attacker.getDisplayName(), itemStack.toHoverableText());\n```\n\n----------------------------------------\n\nTITLE: Initializing Minecraft Registries for Testing\nDESCRIPTION: Code to initialize Minecraft registries in the test environment, enabling tests that rely on registry-dependent classes like ItemStack.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/automatic-testing.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@BeforeAll\nstatic void beforeAll() {\n    // This initializes the registries so they can be used in tests\n    Bootstrap.initialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Translatable Text in Java\nDESCRIPTION: Shows how to create translatable Text objects using Text.translatable() method, referencing translation keys from language files.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/text-and-translations.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nText translatable = Text.translatable(\"my_mod.text.hello\");\n\n// Similarly to literals, translatable text can be easily made mutable.\nMutableText mutable = Text.translatable(\"my_mod.text.bye\");\n```\n\n----------------------------------------\n\nTITLE: Ottenere la Matrice di Posizione dal DrawContext in Minecraft\nDESCRIPTION: Esempio di codice che mostra come ottenere la matrice di posizione (position matrix) dall'oggetto DrawContext usando MatrixStack in Minecraft. Questa matrice è utilizzata per trasformare le coordinate dei vertici durante il rendering.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/rendering/basic-concepts.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndrawContext.getMatrices().peek().getPositionMatrix();\n```\n\n----------------------------------------\n\nTITLE: Creating an Advancement Using Custom Criterion\nDESCRIPTION: Demonstrates how to use a custom criterion in an advancement definition, showing how to integrate custom mechanics with the advancement system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Create an advancement with our custom criterion\nAdvancement.Builder.create()\n        .display(\n                Items.IRON_PICKAXE,\n                Text.literal(\"Tool User\"),\n                Text.literal(\"Use any tool\"),\n                null,\n                AdvancementFrame.TASK, true, true, false\n        )\n        // Use our custom criterion\n        .criterion(\n                \"use_tool\",\n                // Use the static instance from ModCriteria\n                ModCriteria.USE_TOOL.conditionsFromPredicates(\n                        // Don't need any special player predicates\n                        EntityPredicate.Builder.create().build()\n                )\n        )\n        // Can still use a parent advancement\n        .parent(getDirt)\n        .build(consumer, \"fabric-docs-reference\" + \"/use_tool\");\n```\n\n----------------------------------------\n\nTITLE: Minecraft Command for Giving Item without Custom Component\nDESCRIPTION: Shows the Minecraft command to give a player the custom item with the custom component explicitly removed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_5\n\nLANGUAGE: mcfunction\nCODE:\n```\n/give @p fabric-docs-reference:counter[!fabric-docs-reference:click_count]\n```\n\n----------------------------------------\n\nTITLE: Registering a Command with Operator Requirement\nDESCRIPTION: Demonstrates how to register a command that requires the executor to be an operator.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"required_command\")\n    .requires(source -> source.hasPermissionLevel(2))\n    .executes(FabricDocsReferenceCommands::executeRequiredCommand));\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom SoundInstance Class in Fabric\nDESCRIPTION: Demonstrates how to create a custom sound instance by extending MovingSoundInstance. This implementation allows a sound to follow an entity and provides controls for volume, pitch, and repeat behavior.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomSoundInstance extends MovingSoundInstance {\n\n    private final LivingEntity entity;\n\n    public CustomSoundInstance(SoundEvent soundEvent, SoundCategory soundCategory, LivingEntity livingEntity) {\n        super(soundEvent, soundCategory, SoundInstance.createRandom());\n        this.entity = livingEntity;\n        this.volume = 1.0F;\n        this.pitch = 1.0F;\n        this.repeat = true; // Loop the sound as long as the SoundInstance is active\n        // Based on your requirements, you can use any value or even 0 here\n        this.repeatDelay = 0;\n        this.x = entity.getX();\n        this.y = entity.getY();\n        this.z = entity.getZ();\n    }\n\n    @Override\n    public void tick() {\n        // This gets called once per game tick, if registered correctly\n    \n        // Check if it's still alive\n        if (!this.entity.isAlive()) {\n            // We can stop the sound\n            this.setDone();\n            return;\n        }\n    \n        // Update the sound's position to match the entity's position\n        this.x = this.entity.getX();\n        this.y = this.entity.getY();\n        this.z = this.entity.getZ();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Text with Multiple Styles in Java\nDESCRIPTION: Shows how to apply multiple formatting styles to a MutableText object using the Formatting enum.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/text-and-translations.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nMutableText result = Text.literal(\"Hello World!\")\n  .formatted(Formatting.AQUA, Formatting.BOLD, Formatting.UNDERLINE);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Loot Table Registry Keys in Fabric\nDESCRIPTION: Shows how to create a class for defining custom loot table registry keys, which are used to identify and generate specific loot tables.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/loot-tables.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ModLootTables {\n    public static final RegistryKey<LootTable> RUBY_LOOT = registryKey(\"chests/ruby_loot\");\n\n    private static RegistryKey<LootTable> registryKey(String path) {\n        return RegistryKey.of(RegistryKeys.LOOT_TABLE, new Identifier(FabricDocsReference.MOD_ID, path));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Item Classes in Mod Entry Point\nDESCRIPTION: Demonstrates how to initialize the ModItems class from the mod's entry point to ensure static fields are computed and items are registered properly.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/first-item.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceItems implements ModInitializer {\n    @Override\n    public void onInitialize() {\n        ModItems.initialize();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FabricAdvancementProvider in Java\nDESCRIPTION: The foundation class for advancement generation that extends FabricAdvancementProvider. It includes the constructor and essential method implementations for generating advancements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceAdvancementProvider extends FabricAdvancementProvider {\n    protected FabricDocsReferenceAdvancementProvider(FabricDataOutput output, CompletableFuture<RegistryWrapper.WrapperLookup> registriesFuture) {\n        super(output, registriesFuture);\n    }\n\n    @Override\n    public void generateAdvancement(Consumer<Advancement> consumer) {\n        // Empty for now\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FabricAdvancementProvider in Java\nDESCRIPTION: The foundation class for advancement generation that extends FabricAdvancementProvider. It includes the constructor and essential method implementations for generating advancements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceAdvancementProvider extends FabricAdvancementProvider {\n    protected FabricDocsReferenceAdvancementProvider(FabricDataOutput output, CompletableFuture<RegistryWrapper.WrapperLookup> registriesFuture) {\n        super(output, registriesFuture);\n    }\n\n    @Override\n    public void generateAdvancement(Consumer<Advancement> consumer) {\n        // Empty for now\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines with DrawContext in Java\nDESCRIPTION: Illustrates how to use DrawContext.drawHorizontalLine() and DrawContext.drawVerticalLine() to draw individual lines.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/draw-context.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ncontext.drawHorizontalLine(10, 110, 60, 0xFFFFFFFF);\ncontext.drawVerticalLine(60, 10, 110, 0xFFFFFFFF);\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Persistence\nDESCRIPTION: Adds NBT data handling to save and load the counter state between game sessions. Includes methods for serialization and deserialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entities.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class CounterBlockEntity extends BlockEntity {\n    private int clicks = 0;\n    private int ticksSinceLast = 0;\n\n    @Override\n    protected void writeNbt(NbtCompound nbt) {\n        nbt.putInt(\"clicks\", clicks);\n        super.writeNbt(nbt);\n    }\n\n    @Override\n    public void readNbt(NbtCompound nbt) {\n        super.readNbt(nbt);\n        clicks = nbt.getInt(\"clicks\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Command Lambda Implementation\nDESCRIPTION: Basic implementation of a Command interface using lambda that returns a status code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/basics.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCommand<ServerCommandSource> command = context -> {\n    return 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Command with Two Optional Arguments in FabricMC\nDESCRIPTION: Shows how to create a command that handles both one and two integer arguments with different execution paths.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/arguments.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nargument(\"value\", IntegerArgumentType.integer())\n.executes(FabricDocsReferenceCommands::executeWithOneArg)\n.then(argument(\"value2\", IntegerArgumentType.integer())\n    .executes(FabricDocsReferenceCommands::executeWithTwoArgs))\n```\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeWithOneArg(CommandContext<ServerCommandSource> context) {\n    return execute(context, false);\n}\n\nprivate static int executeWithTwoArgs(CommandContext<ServerCommandSource> context) {\n    return execute(context, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Parameter Translations in JSON\nDESCRIPTION: Demonstrates how to define a translation with multiple parameters in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/text-and-translations.md#2025-04-05_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_mod.text.whack.item\": \"%1$s was whacked by %2$s using %3$s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Tag Provider with DataGenerator\nDESCRIPTION: This code shows how to add the created tag provider to the DataGenerator during initialization of the DataGeneratorEntrypoint. This registers the provider so it will be used during data generation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/tags.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceItemTagProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Registering a Parameterized Custom Criterion in Java\nDESCRIPTION: Registers the new parameterized criterion in the mod's criteria registry. This makes the criterion available for use in advancements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic static final ParameterizedUseToolCriterion PARAMETERIZED_USE_TOOL = Criteria.register(\n        \"fabric-docs-reference:parameterized_use_tool\", \n        new ParameterizedUseToolCriterion()\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing FabricAdvancementProvider in Java\nDESCRIPTION: Sets up the basic structure for a FabricAdvancementProvider class, including the constructor and generateAdvancement method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/advancements.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceAdvancementProvider extends FabricAdvancementProvider {\n    protected FabricDocsReferenceAdvancementProvider(FabricDataOutput output) {\n        super(output);\n    }\n\n    @Override\n    public void generateAdvancement(Consumer<Advancement> consumer) {\n        // We'll add our advancements here later\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Portion of a Texture in Minecraft Rendering\nDESCRIPTION: This example demonstrates drawing only a specific region of a texture by defining the texture coordinates (u, v) and region dimensions. It extracts just the magnifying glass portion from a larger recipe book texture.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/draw-context.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Texture coordinates for the magnifying glass in the recipe book texture\nint u = 29;\nint v = 18;\nint regionWidth = 11;\nint regionHeight = 11;\n\n// Draw just the magnifying glass\nthis.drawContext.drawTexture(new Identifier(\"minecraft\", \"textures/gui/recipe_book.png\"), 120, 230, u, v, regionWidth, regionHeight, 256, 256);\n```\n\n----------------------------------------\n\nTITLE: Serializing a BlockPos to JSON using Codec\nDESCRIPTION: Demonstrates how to serialize a BlockPos object to a JsonElement using BlockPos.CODEC with JsonOps.INSTANCE. The code shows the basic pattern of using encodeStart to convert a Java object to a serialized format.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/codecs.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBlockPos pos = new BlockPos(1, 2, 3);\n\n// Serializamos el BlockPos a un JsonElement\nDataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);\n```\n\n----------------------------------------\n\nTITLE: Code Region Folding in Java\nDESCRIPTION: Example of using region comments to create collapsible code blocks in IntelliJ IDEA\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/ide-tips-and-tricks.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// region collapse block name\n    ModBlocks.initialize();\n    ModBlockEntities.registerBlockEntityTypes();\n    ModItems.initialize();\n    ModSounds.initializeSounds();\n    ModParticles.initialize();\n// endregion\n```\n\n----------------------------------------\n\nTITLE: Command with Requirements\nDESCRIPTION: Registering a command with operator level requirements using requires() method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/basics.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"required_command\")\n    .requires(source -> source.hasPermissionLevel(2))\n    .executes(this::executeRequiredCommand));\n```\n\n----------------------------------------\n\nTITLE: Custom BlockPos Argument Type Implementation in FabricMC\nDESCRIPTION: Implementation of a custom argument type that parses BlockPos from a string in the format {x, y, z}.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/arguments.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class BlockPosArgumentType implements ArgumentType<BlockPos> {\n    private static final Collection<String> EXAMPLES = Arrays.asList(\"{0, 0, 0}\", \"{1, 2, 3}\");\n\n    public static BlockPosArgumentType blockPos() {\n        return new BlockPosArgumentType();\n    }\n\n    @Override\n    public BlockPos parse(StringReader reader) throws CommandSyntaxException {\n        // Skip the opening brace\n        if (!reader.canRead() || reader.peek() != '{') {\n            throw new SimpleCommandExceptionType(Text.literal(\"Expected opening brace '{'\")).create();\n        }\n        reader.skip();\n\n        // Parse x coordinate\n        int x = reader.readInt();\n        reader.skipWhitespace();\n        if (!reader.canRead() || reader.peek() != ',') {\n            throw new SimpleCommandExceptionType(Text.literal(\"Expected ','\")).create();\n        }\n        reader.skip();\n        reader.skipWhitespace();\n\n        // Parse y coordinate\n        int y = reader.readInt();\n        reader.skipWhitespace();\n        if (!reader.canRead() || reader.peek() != ',') {\n            throw new SimpleCommandExceptionType(Text.literal(\"Expected ','\")).create();\n        }\n        reader.skip();\n        reader.skipWhitespace();\n\n        // Parse z coordinate\n        int z = reader.readInt();\n        reader.skipWhitespace();\n\n        // Skip the closing brace\n        if (!reader.canRead() || reader.peek() != '}') {\n            throw new SimpleCommandExceptionType(Text.literal(\"Expected closing brace '}'\")).create();\n        }\n        reader.skip();\n\n        return new BlockPos(x, y, z);\n    }\n\n    @Override\n    public <S> CompletableFuture<Suggestions> listSuggestions(CommandContext<S> context, SuggestionsBuilder builder) {\n        return CompletableFuture.completedFuture(builder.build());\n    }\n\n    @Override\n    public Collection<String> getExamples() {\n        return EXAMPLES;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Type Through RegistryKey in Java\nDESCRIPTION: Code snippet demonstrating how to access a custom damage type by creating a RegistryKey in a Java class. This allows referencing the damage type from code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.damage;\n\nimport net.minecraft.entity.damage.DamageType;\nimport net.minecraft.registry.RegistryKey;\nimport net.minecraft.registry.RegistryKeys;\nimport net.minecraft.util.Identifier;\n\npublic class FabricDocsReferenceDamageTypes {\n    public static final RegistryKey<DamageType> TATER = RegistryKey.of(\n            RegistryKeys.DAMAGE_TYPE,\n            new Identifier(\"fabric-docs-reference\", \"tater\")\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FabricTagProvider for Items in Java\nDESCRIPTION: This snippet shows how to create a custom FabricTagProvider for Item tags. It extends FabricTagProvider<Item> and overrides the configure method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/tags.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceItemTagProvider extends FabricTagProvider<Item> {\n    public FabricDocsReferenceItemTagProvider(FabricDataOutput output, CompletableFuture<RegistryWrapper.WrapperLookup> completableFuture) {\n        super(output, RegistryKeys.ITEM, completableFuture);\n    }\n\n    @Override\n    protected void configure(RegistryWrapper.WrapperLookup arg) {\n        // We'll add tags here later\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sheep Entity Mixin for Custom Event in Java\nDESCRIPTION: Mixin implementation to trigger the custom sheep shear event from the SheepEntity class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/events.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Mixin(SheepEntity.class)\npublic class SheepEntityMixin {\n    @Inject(method = \"interactMob\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/passive/SheepEntity;sheared(Lnet/minecraft/sound/SoundCategory;)V\"))\n    private void onShear(PlayerEntity player, Hand hand, CallbackInfoReturnable<ActionResult> cir) {\n        ActionResult result = SheepShearCallback.EVENT.invoker().interact(player, (SheepEntity) (Object) this);\n\n        if (result == ActionResult.FAIL) {\n            cir.setReturnValue(ActionResult.PASS);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter to Custom Criterion Conditions\nDESCRIPTION: Modifies the conditions class to include a parameter for the required number of times an action should be performed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nprivate final LootContextPredicate playerPredicate;\nprivate final int requiredTimes;\n\npublic Conditions(LootContextPredicate playerPredicate, int requiredTimes) {\n    super(TYPE.id(), playerPredicate);\n    this.playerPredicate = playerPredicate;\n    this.requiredTimes = requiredTimes;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Screen in Fabric\nDESCRIPTION: Example of creating a simple custom screen with a button and text at the top. It extends the Screen class and overrides the init and render methods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@[code lang=java transcludeWith=:::1](@/reference/1.21/src/client/java/com/example/docs/rendering/screens/CustomScreen.java)\n```\n\n----------------------------------------\n\nTITLE: Adding Translations for Custom Status Effect in JSON\nDESCRIPTION: Shows how to add a translation entry for the custom status effect in the language file. The translation key follows the format 'effect.mod-id.effect-identifier'.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Damage Type Tag Configuration\nDESCRIPTION: JSON configuration to add the custom Tater damage type to the bypasses_armor tag without replacing existing entries.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/entities/damage-types.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:tater\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Permission-Restricted Command in Fabric\nDESCRIPTION: Implementation of a command that provides feedback when executed by a user with sufficient permissions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ko_kr/develop/commands/basics.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeRequiredCommand(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {\n    context.getSource().sendFeedback(() -> Text.literal(\"You need permission level 2 to execute this!\"), false);\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Suggestion Provider in Command\nDESCRIPTION: Example showing how to use a custom suggestion provider in a command and implement its execution logic.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/suggestions.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nStringArgumentType.word().suggests(new PlayerSuggestionProvider());\n\npublic int run(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {\n    String playerName = StringArgumentType.getString(context, \"player\");\n    context.getSource().sendFeedback(Text.literal(\"Selected player: \" + playerName), false);\n    return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Damage Type in Block Logic\nDESCRIPTION: Shows how to create a DamageSource from the custom damage type and apply it to entities stepping on a block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/pt_br/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterBlock extends Block {\n    public TaterBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n        if (!world.isClient && entity instanceof LivingEntity) {\n            DamageSource damageSource = new DamageSource(world.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(FabricDocsReferenceDamageTypes.TATER));\n            entity.damage(damageSource, 5.0f);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Composite Component\nDESCRIPTION: Code for registering an advanced composite component with the ModComponents registry, specifying the record class and its codec.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic static final ComponentType<MyCustomComponent> MY_CUSTOM_COMPONENT =\n        ComponentRegistry.register(new Identifier(NAMESPACE, \"my_custom\"), MyCustomComponent.class)\n                .codec(MyCustomComponent.CODEC);\n\n```\n\n----------------------------------------\n\nTITLE: Damage Type Tag Configuration\nDESCRIPTION: JSON configuration for adding the custom damage type to the 'bypasses_armor' tag, allowing it to ignore armor protection.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/it_it/develop/entities/damage-types.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:tater\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Block Loot Drops\nDESCRIPTION: Example of generating different types of block loot drops, including self-drops, ore drops with fortune, and conditional drops based on tool enchantments.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/data-generation/loot-tables.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void generate() {\n\t// Simply drop the block itself\n\taddDrop(ModBlocks.EXAMPLE_BLOCK);\n\t\n\t// Use a helper method for blocks that drop themselves or nothing (like with silk touch)\n\taddDrop(ModBlocks.EXAMPLE_SILK_TOUCH_BLOCK, BlockLootTableGenerator.drops(Items.DIAMOND));\n\taddDrop(ModBlocks.EXAMPLE_SILK_TOUCH_BLOCK, BlockLootTableGenerator.dropsWithSilkTouch(ModBlocks.EXAMPLE_SILK_TOUCH_BLOCK, Items.DIAMOND));\n\n\t// Create a loot table builder yourself\n\taddDrop(ModBlocks.EXAMPLE_COMPLEX_BLOCK, complexBlockDrops(ModBlocks.EXAMPLE_COMPLEX_BLOCK, Items.EMERALD, Items.DIAMOND));\n\n\t// Store loot tables for future re-use\n\tLootTable.Builder exampleOreDrops = BlockLootTableGenerator.dropsWithSilkTouch(ModBlocks.EXAMPLE_ORE, \n\t\t\tBlockLootTableGenerator.applyExplosionDecay(ModBlocks.EXAMPLE_ORE, \n\t\t\t\tLootItem.lootTableItem(Items.DIAMOND)\n\t\t\t\t.apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 2.0F)))\n\t\t\t\t.apply(ApplyBonusCount.addOreBonusCount(Enchantments.BLOCK_FORTUNE))\n\t\t\t)\n\t\t);\n\taddDrop(ModBlocks.EXAMPLE_ORE, exampleOreDrops);\n}\n\nprivate LootTable.Builder complexBlockDrops(Block block, ItemConvertible item1, ItemConvertible item2) {\n\treturn BlockLootTableGenerator.dropsWithSilkTouch(block, \n\t\t\tLootPool.builder()\n\t\t\t.with(AlternativesEntry.alternatives(\n\t\t\t\tLootItem.lootTableItem(item1)\n\t\t\t\t.when(MatchToolLootCondition.builder(ItemPredicate.Builder.item().of(ItemTags.SHOVELS))),\n\t\t\t\tLootItem.lootTableItem(item2)\n\t\t\t))\n\t\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Field Codecs in Java\nDESCRIPTION: This code demonstrates how to create optional field codecs, both with and without default values, using the optionalFieldOf method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Without a default value\nMapCodec<Optional<BlockPos>> optionalCodec = BlockPos.CODEC.optionalFieldOf(\"pos\");\n\n// With a default value\nMapCodec<BlockPos> optionalCodec = BlockPos.CODEC.optionalFieldOf(\"pos\", BlockPos.ORIGIN);\n```\n\n----------------------------------------\n\nTITLE: Basic Sound Event Registration\nDESCRIPTION: Simple approach to register a sound event using the Registry system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/custom.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRegistry.register(Registries.SOUND_EVENT, Identifier.of(MOD_ID, \"metal_whistle\"),\n        SoundEvent.of(Identifier.of(MOD_ID, \"metal_whistle\")));\n```\n\n----------------------------------------\n\nTITLE: Block and Counter Registration\nDESCRIPTION: Shows the registration of the counter block in the mod's block registry. Defines block properties and creates registry entry.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entities.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final Block COUNTER_BLOCK = registerBlock(\"counter_block\",\n    new CounterBlock(FabricBlockSettings.of(Material.METAL).strength(4.0f)));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Argument Type in Command\nDESCRIPTION: Demonstrates how to use a custom argument type in a command implementation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/arguments.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nargument(\"pos\", BlockPosArgumentType.blockPos())\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.getSource().sendFeedback(() -> Text.literal(\"Position: \" + context.getArgument(\"pos\", BlockPos.class)), false);\n```\n\n----------------------------------------\n\nTITLE: Implementing Command with Built-in Suggestions in Java\nDESCRIPTION: This snippet demonstrates how to create a command with built-in suggestions using the 'suggests' method on the argument builder. It attaches a SuggestionProvider to a StringArgumentType.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/suggestions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static LiteralArgumentBuilder<ServerCommandSource> createCommandWithSuggestions() {\n    return CommandManager.literal(\"example:my_command_with_suggestions\")\n            .then(CommandManager.argument(\"sound\", StringArgumentType.word())\n                    .suggests(SuggestionProviders.AVAILABLE_SOUNDS)\n                    .executes(FabricDocsReferenceCommands::executeCommandWithSuggestions));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Damage Type to a Tag\nDESCRIPTION: JSON configuration to add the custom 'tater' damage type to the 'bypasses_armor' tag, making it ignore armor protection.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/entities/damage-types.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:tater\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Block Class with Empty Method\nDESCRIPTION: Basic class structure with initialize() method to trigger static initialization of block instances\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/blocks/first-block.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ModBlocks {\n    // ...\n\n    public static void initialize() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Java on Arch Linux\nDESCRIPTION: Commands for installing different Java packages on Arch Linux using pacman package manager. Includes options for JRE, headless JRE, and JDK installations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/installing-java/linux.md#2025-04-05_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S jre-openjdk\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S jre-openjdk-headless\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S jdk-openjdk\n```\n\n----------------------------------------\n\nTITLE: Initializing DataGenerator for Loot Tables in Fabric\nDESCRIPTION: Demonstrates how to add loot table providers to the DataGenerator in a Fabric mod's DataGeneratorEntrypoint.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/loot-tables.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceBlockLootTableProvider::new);\npack.addProvider(FabricDocsReferenceChestLootTableProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Creating Optional MapCodecs in Java\nDESCRIPTION: This snippet demonstrates how to create optional MapCodecs using optionalFieldOf(). It shows examples with and without default values.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Without a default value\nMapCodec<Optional<BlockPos>> optionalCodec = BlockPos.CODEC.optionalFieldOf(\"pos\");\n\n// With a default value\nMapCodec<BlockPos> optionalCodec = BlockPos.CODEC.optionalFieldOf(\"pos\", BlockPos.ORIGIN);\n```\n\n----------------------------------------\n\nTITLE: Basic Sound Event Registration in Java\nDESCRIPTION: Simple approach to register a single SoundEvent in the Minecraft registry system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/sounds/custom.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRegistry.register(Registries.SOUND_EVENT, new Identifier(MOD_ID, \"metal_whistle\"),\n        SoundEvent.of(new Identifier(MOD_ID, \"metal_whistle\")));\n```\n\n----------------------------------------\n\nTITLE: Отримання матриці позиції з контексту малювання в Java\nDESCRIPTION: Демонструє як отримати матрицю позиції (або трансформації) з контексту малювання, яка використовується для перетворення координат при рендерингу.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/uk_ua/develop/rendering/basic-concepts.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndrawContext.getMatrices().peek().getPositionMatrix();\n```\n\n----------------------------------------\n\nTITLE: Implementing Command with Custom Suggestions in Java\nDESCRIPTION: This snippet shows how to create a command that uses a custom suggestion provider. It initializes a PlayerSuggestionProvider and attaches it to a string argument using the 'suggests' method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/suggestions.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate static LiteralArgumentBuilder<ServerCommandSource> createCommandWithCustomSuggestions() {\n    return CommandManager.literal(\"example:my_command_with_custom_suggestions\")\n            .then(CommandManager.argument(\"player\", StringArgumentType.word())\n                    .suggests(new PlayerSuggestionProvider())\n                    .executes(FabricDocsReferenceCommands::executeCommandWithCustomSuggestions));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Use Fabric Loader JUnit\nDESCRIPTION: Gradle task configuration that enables Fabric Loader JUnit for testing in the build.gradle file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/automatic-testing.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(Test).configureEach {\n    useJUnitPlatform()\n    jvmArgs += [\"-javaagent:${tasks.createClasspathManifest.outputs.files.singleFile}\", '-verbose:class']\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Damage Type to a Tag\nDESCRIPTION: JSON configuration for adding a custom damage type to the 'bypasses_armor' tag, allowing the damage to ignore armor protection. The 'replace' flag is set to false to prevent overriding existing entries.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/entities/damage-types.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:tater\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Registry Dispatch for CountingBean\nDESCRIPTION: Shows the JSON result from serializing a CountingBean using the registry dispatch codec created in the previous example.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"example:counting_bean\",\n  \"counting_number\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangles with DrawContext in Minecraft\nDESCRIPTION: This code demonstrates how to draw a filled rectangle with a gradient using the DrawContext.fill() method. It specifies the position, dimensions, and colors for the gradient effect.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/draw-context.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Draw a rectangle with a gradient\nthis.drawContext.fill(10, 10, 110, 110, 0xFF000000, 0xFFFF0000, 0xFFFFFFFF, 0xFF0000FF);\n```\n\n----------------------------------------\n\nTITLE: Block Loot Table Provider Implementation\nDESCRIPTION: Base class implementation for generating block loot tables extending FabricBlockLootTableProvider.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/loot-tables.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceBlockLootTableProvider extends FabricBlockLootTableProvider {\n    protected FabricDocsReferenceBlockLootTableProvider(FabricDataOutput dataOutput) {\n        super(dataOutput);\n    }\n\n    @Override\n    public void generate() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Conversion with xmap in Java\nDESCRIPTION: Demonstrates how to convert between two types (Vec3d and BlockPos) using Codec.xmap. The example provides conversion functions in both directions to create a BlockPos codec based on Vec3d's codec.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nCodec<BlockPos> blockPosCodec = Vec3d.CODEC.xmap(\n    // Convert Vec3d to BlockPos\n    vec -> new BlockPos(vec.x, vec.y, vec.z),\n    // Convert BlockPos to Vec3d\n    pos -> new Vec3d(pos.getX(), pos.getY(), pos.getZ())\n);\n\n// When converting an existing class (`X` for example)\n// to your own class (`Y`) this way, it may be nice to\n// add `toX` and static `fromX` methods to `Y` and use\n// method references in your `xmap` call.\n```\n\n----------------------------------------\n\nTITLE: Entity Existence Validation\nDESCRIPTION: Code snippet showing the validation check for entity existence using its network ID\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/networking.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nif (targetEntity == null) return;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Damage Type in JSON\nDESCRIPTION: Creates a custom 'tater' damage type with specific properties like hunger exhaustion and difficulty scaling.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/pt_br/develop/entities/damage-types.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exhaustion\": 0.1,\n  \"message_id\": \"tater\",\n  \"scaling\": \"when_caused_by_living_non_player\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Custom Suggestions in Java\nDESCRIPTION: This code shows the execution logic for a command using custom player suggestions. It retrieves the player argument and sends a message to the command source with the selected player name.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/suggestions.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeCommandWithCustomSuggestions(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {\n    ServerCommandSource source = context.getSource();\n\n    String playerName = StringArgumentType.getString(context, \"player\");\n\n    // Here you'd actually do something with the player name, but for the sake of simplicity, we'll just send a message.\n    source.sendFeedback(() -> Text.literal(\"Selected player: \" + playerName), false);\n\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Initialization Error in Tests\nDESCRIPTION: Common error that occurs when trying to access Minecraft registries in unit tests without proper initialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/automatic-testing.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@[code lang=java transcludeWith=:::automatic-testing:5](@/reference/latest/src/test/java/com/example/docs/codec/BeanTypeTest.java)\n```\n\n----------------------------------------\n\nTITLE: Custom Death Message for Damage Type\nDESCRIPTION: JSON entry for defining a custom death message when a player dies from the 'tater' damage type.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/entities/damage-types.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"death.attack.tater\": \"%1$s was taterized\"\n```\n\n----------------------------------------\n\nTITLE: Custom Block State Property Definition\nDESCRIPTION: Java code defining a custom boolean property for a block state and its default values.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/blocks/blockstates.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final BooleanProperty ACTIVATED = BooleanProperty.of(\"activated\");\n```\n\n----------------------------------------\n\nTITLE: Custom Sheep Shear Event Implementation in Java\nDESCRIPTION: Shows how to create a custom event callback interface for handling sheep shearing with action result handling.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/events.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface SheepShearCallback {\n    Event<SheepShearCallback> EVENT = EventFactory.createArrayBacked(SheepShearCallback.class,\n            (listeners) -> (player, sheep) -> {\n                for (SheepShearCallback listener : listeners) {\n                    ActionResult result = listener.interact(player, sheep);\n\n                    if (result != ActionResult.PASS) {\n                        return result;\n                    }\n                }\n\n                return ActionResult.PASS;\n            });\n\n    ActionResult interact(PlayerEntity player, SheepEntity sheep);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Block Loot Tables in Fabric\nDESCRIPTION: Demonstrates how to generate various types of block loot tables using helper methods in a Fabric mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/loot-tables.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Drop self\naddDrop(ModBlocks.JADE_BLOCK);\n\n// Silk touch\naddDrop(ModBlocks.JADE_ORE, oreDrops(ModBlocks.JADE_ORE, ModItems.RAW_JADE));\n\n// Drop multiple items\naddDrop(ModBlocks.JADE_CLUSTER, (block) -> dropsWithSilkTouch(block, LootItem.lootTableItem(ModItems.JADE_SHARD)\n        .apply(SetItemCountFunction.setCount(ConstantValue.exactly(4.0F)))\n        .apply(ApplyBonusCount.addOreBonusCount(Enchantments.BLOCK_FORTUNE))\n        .when(MatchTool.toolMatches(ItemPredicate.Builder.item().of(ItemTags.CLUSTER_MAX_HARVESTABLES)))\n        .otherwise(applyExplosionDecay(block, LootItem.lootTableItem(ModItems.JADE_SHARD)\n                .apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F)))))));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recursive Codec in Java\nDESCRIPTION: Demonstrates how to create a recursive codec for a singly-linked list structure. The codec uses the recursive method to handle the self-referential nature of the ListNode class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nCodec<ListNode> codec = Codec.recursive(\n  \"ListNode\", // a name for the codec\n  selfCodec -> {\n    // Here, `selfCodec` represents the `Codec<ListNode>`, as if it was already constructed\n    // This lambda should return the codec we wanted to use from the start,\n    // that refers to itself through `selfCodec`\n    return RecordCodecBuilder.create(instance ->\n      instance.group(\n        Codec.INT.fieldOf(\"value\").forGetter(ListNode::value),\n         // the `next` field will be handled recursively with the self-codec\n        Codecs.createStrictOptionalFieldCodec(selfCodec, \"next\", null).forGetter(ListNode::next)\n      ).apply(instance, ListNode::new)\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class in Java\nDESCRIPTION: Creates a custom effect class called TaterEffect by extending the StatusEffect base class. This effect gives the player one experience point per game tick.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        super(\n            StatusEffectCategory.BENEFICIAL, // Whether the effect is beneficial or harmful to the player\n            0x98D982 // Color in RGB\n        );\n    }\n\n    // This method is called every tick to check whether it should apply the status effect or not\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        // In our case, we just make it return true so that it applies the status effect every tick.\n        return true;\n    }\n\n    // This method is called when it applies the status effect. We implement our custom functionality here.\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1 << amplifier); // Higher amplifier gives more experience points\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Damage Type in JSON\nDESCRIPTION: JSON structure for creating a custom 'tater' damage type that increases hunger exhaustion and scales with world difficulty. The file is placed in the mod's data directory under damage_type.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/damage-types.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exhaustion\": 0.1,\n  \"message_id\": \"tater\",\n  \"scaling\": \"when_caused_by_living_non_player\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Data Generation in Fabric API (Groovy)\nDESCRIPTION: Sets up basic data generation for Fabric API. This creates a new run configuration that executes Fabric API with data generation enabled.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/loom/fabric-api.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureDataGeneration()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Damage Type to Vanilla Tag\nDESCRIPTION: Demonstrates how to add a custom damage type to an existing Minecraft damage type tag.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/pt_br/develop/entities/damage-types.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:tater\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Potion with Brewing Recipe in Java using Fabric API\nDESCRIPTION: Code that registers a custom potion and its brewing recipe. It uses the FabricBrewingRecipeRegistryBuilder.BUILD event to set up a recipe where a Water Bottle combined with a Potato creates the Tater Potion.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/items/potions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitialize() {\n    // Registers our custom Tater potion containing our Tater status effect with a default duration of 200 ticks.\n    Registry.register(\n            Registries.POTION,\n            TATER_POTION,\n            new Potion(\n                    new StatusEffectInstance(RegistryEntry.reference(Registries.STATUS_EFFECT, TATER_STATUS_EFFECT), 200, 0)\n            )\n    );\n\n    // Registers our potion brewing recipe which allows the player to brew a Tater Potion using a Water Bottle and a Potato.\n    FabricBrewingRecipeRegistryBuilder.build().register(event -> {\n        event.registerPotionRecipe(\n                RegistryEntry.reference(Registries.POTION, Potions.WATER.getRegistryKey()),\n                Items.POTATO,\n                RegistryEntry.reference(Registries.POTION, TATER_POTION)\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Block Model JSON Configuration\nDESCRIPTION: Block model definition using the cube_all parent, which applies the same texture to all sides of a block. The texture path points to the block texture in the mod's assets.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/first-block.md#2025-04-05_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"block/cube_all\",\n  \"textures\": {\n    \"all\": \"fabric-docs-reference:block/condensed_dirt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Pack for Data Generation (Java)\nDESCRIPTION: This Java code demonstrates how to create a Pack within the onInitializeDataGenerator method. The Pack is used to store generated data from various providers.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/setup.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitializeDataGenerator(FabricDataGenerator fabricDataGenerator) {\n\tFabricDataGenerator.Pack pack = fabricDataGenerator.createPack();\n\t// We'll add providers here later\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Representation for CoolBeansClass\nDESCRIPTION: Example JSON structure that represents a CoolBeansClass instance, showing how the object's fields are represented in a serialized format.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/codecs.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"beans_amount\": 5,\n  \"bean_type\": \"beanmod:mythical_beans\",\n  \"bean_positions\": [\n    [1, 2, 3],\n    [4, 5, 6]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the use() Method for Lightning Summoning\nDESCRIPTION: This implementation of the use() method summons a lightning bolt 10 blocks in front of the player when the item is right-clicked. It also creates particles and plays a sound effect for feedback.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-item-interactions.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {\n    if (world.isClient) {\n        return TypedActionResult.success(user.getStackInHand(hand));\n    }\n\n    Vec3d pos = user.getPos();\n    Vec3d lookVec = user.getRotationVector();\n\n    // multiply the look vector by 10, and add it to the player's position.\n    // this will give us a position 10 blocks in front of the player.\n    Vec3d targetPos = pos.add(lookVec.multiply(10));\n\n    // Spawn a lightning bolt at the target position\n    LightningEntity lightningEntity = new LightningEntity(EntityType.LIGHTNING_BOLT, world);\n    lightningEntity.setPosition(targetPos);\n    world.spawnEntity(lightningEntity);\n\n    // Create particles and play a sound to let the player know that the lightning has been summoned\n    ((ServerWorld) world).spawnParticles(ParticleTypes.ELECTRIC_SPARK, targetPos.getX(), targetPos.getY(), targetPos.getZ(), 50, 0.5, 0.5, 0.5, 0.5);\n    world.playSound(null, targetPos.getX(), targetPos.getY(), targetPos.getZ(), SoundEvents.ITEM_TRIDENT_THUNDER, SoundCategory.PLAYERS, 1.0f, 1.0f);\n\n    // Get the current cooldown manager for the player, and set a cooldown of 20 ticks (1 second)\n    user.getItemCooldownManager().set(this, 20);\n\n    // Damage the item by 1\n    ItemStack stack = user.getStackInHand(hand);\n    stack.damage(1, user, (player) -> player.sendToolBreakStatus(hand));\n\n    return TypedActionResult.success(stack);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Death Message in Language File\nDESCRIPTION: JSON entry for the custom death message in the language file. This defines what players will see when they die from the custom damage type.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/damage-types.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"death.attack.tater\": \"%1$s was tater'd to death\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Production Run Task in Groovy\nDESCRIPTION: This snippet shows how to configure the server production run task, including setting the Fabric Installer version, Fabric Loader version, and Minecraft version. It allows running the mod with a different Minecraft version.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/production-run-tasks.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.register(\"prodServer\", net.fabricmc.loom.task.prod.ServerProductionRunTask) {\n    // The version of the Fabric Installer to use. This must be specified.\n    installerVersion = \"1.0.1\"\n\n    // The version of Fabric Loader to use.\n    // Defaults to the version of Fabric Loader that the project is using.\n    loaderVersion = \"0.16.10\"\n\n    // The version of Minecraft to use.\n    // Defaults to the version of Minecraft that the project is using.\n    minecraftVersion = \"1.21.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Item Tag Provider in Fabric\nDESCRIPTION: A class that extends FabricTagProvider<Item> to generate item tags during data generation. This provider requires a FabricDataOutput and CompletableFuture<RegistryWrapper.WrapperLookup> for construction.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/tags.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceItemTagProvider extends FabricTagProvider<Item> {\n    public FabricDocsReferenceItemTagProvider(FabricDataOutput output, CompletableFuture<RegistryWrapper.WrapperLookup> completableFuture) {\n        super(output, RegistryKeys.ITEM, completableFuture);\n    }\n\n    @Override\n    protected void configure(RegistryWrapper.WrapperLookup arg) {\n        // Configure is where you add items to your tags.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Damage Type to Tags\nDESCRIPTION: JSON file to add the custom damage type to the bypasses_armor tag without replacing existing entries.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ru_ru/develop/entities/damage-types.md#2025-04-05_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:tater\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-to-Server Packet Sending in Java\nDESCRIPTION: Shows how to send a packet from the client to the server when a player uses a Poisonous Potato on a living entity. It creates a payload instance and sends it to the server using ClientPlayNetworking.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/networking.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nUseEntityCallback.EVENT.register((player, world, hand, entity, hitResult) -> {\n    if (world.isClient() && player.getStackInHand(hand).isOf(Items.POISONOUS_POTATO) && entity instanceof LivingEntity) {\n        var payload = new GiveGlowingEffectC2SPayload(entity.getId());\n        ClientPlayNetworking.send(payload);\n        return ActionResult.SUCCESS;\n    }\n    return ActionResult.PASS;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Modulation Strategies in Java\nDESCRIPTION: Example methods for sound modulation, using normalized values and linear interpolation to adapt values to preferred sound limits.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprotected float getTransitionVolume() {\n    float normalizedTime = (float) ticksActive / (state == TransitionState.INTRO ? introDuration : outroDuration);\n    return state == TransitionState.INTRO ? normalizedTime : 1 - normalizedTime;\n}\n\nprotected float lerpValue(float min, float max, float t) {\n    return min + (max - min) * t;\n}\n\nprotected float clampValue(float value, float min, float max) {\n    return Math.max(min, Math.min(max, value));\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Advanced Component in Java\nDESCRIPTION: Demonstrates how to register an advanced component using a custom record class and codec.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/items/custom-data-components.md#2025-04-05_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic static final ComponentType<MyCustomComponent> MY_CUSTOM_COMPONENT = Registry.register(\n    Registries.DATA_COMPONENT_TYPE,\n    Identifier.of(FabricDocsReference.MOD_ID, \"my_custom_component\"),\n    ComponentType.<MyCustomComponent>builder().codec(MyCustomComponent.CODEC).build()\n);\n```\n\n----------------------------------------\n\nTITLE: Création de Codecs avec Valeurs Constantes et Contraintes en Java\nDESCRIPTION: Exemples de création de codecs avec des valeurs constantes et des contraintes numériques.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/fr_fr/develop/codecs.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nCodec<Integer> leSensDuCodec = Codec.unit(42);\n\n// Ne peut excéder 2\nCodec<Integer> amountOfFriendsYouHave = Codec.intRange(0, 2);\n```\n\n----------------------------------------\n\nTITLE: Basic Test Configuration in Gradle for Fabric API\nDESCRIPTION: Sets up the most basic test configuration for Fabric API. This creates two new run configurations, one for server-side game tests and one for client-side game tests.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/loom/fabric-api.md#2025-04-05_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureTests()\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Damage to Entities in Block Implementation\nDESCRIPTION: Java code snippet showing how to apply custom damage to entities that step on a block. It creates a DamageSource from the custom damage type and applies damage to the entity.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.damage;\n\nimport net.minecraft.block.Block;\nimport net.minecraft.block.BlockState;\nimport net.minecraft.entity.Entity;\nimport net.minecraft.entity.LivingEntity;\nimport net.minecraft.entity.damage.DamageSource;\nimport net.minecraft.registry.DynamicRegistryManager;\nimport net.minecraft.registry.RegistryKey;\nimport net.minecraft.registry.entry.RegistryEntry;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.world.World;\n\npublic class TaterBlock extends Block {\n    public TaterBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n        if (entity instanceof LivingEntity) {\n            DamageSource damageSource = new DamageSource(\n                world.getRegistryManager().get(RegistryKey.ofRegistry(FabricDocsReferenceDamageTypes.TATER.getRegistry()))\n                .entryOf(FabricDocsReferenceDamageTypes.TATER)\n            );\n            entity.damage(damageSource, 5);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-to-Server Packet Sending in Java\nDESCRIPTION: Shows how to send a packet from the client to the server when a player uses a Poisonous Potato on a living entity. It creates a payload instance and sends it to the server using ClientPlayNetworking.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/networking.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nUseEntityCallback.EVENT.register((player, world, hand, entity, hitResult) -> {\n    if (world.isClient() && player.getStackInHand(hand).isOf(Items.POISONOUS_POTATO) && entity instanceof LivingEntity) {\n        var payload = new GiveGlowingEffectC2SPayload(entity.getId());\n        ClientPlayNetworking.send(payload);\n        return ActionResult.SUCCESS;\n    }\n    return ActionResult.PASS;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Tag Provider in Data Generator\nDESCRIPTION: Code to register a custom tag provider with the FabricDataGenerator. This connects the provider to the data generation process when it runs.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/tags.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceItemTagProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Creating DamageSource from Custom Damage Type\nDESCRIPTION: Shows how to create a DamageSource instance from a custom damage type in a block class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/pt_br/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDamageSource damageSource = world.getDamageSources().create(FabricDocsReferenceDamageTypes.TATER);\n```\n\n----------------------------------------\n\nTITLE: Registering Particle Type in Main Class\nDESCRIPTION: Registers a new ParticleType in the mod's main initializer class using the mod ID. This establishes the base registration for the particle system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final DefaultParticleType SPARKLE_PARTICLE = FabricParticleTypes.simple();\n\n@Override\npublic void onInitialize() {\n    Registry.register(Registries.PARTICLE_TYPE,\n            new Identifier(\"fabric-docs-reference\", \"sparkle_particle\"),\n            SPARKLE_PARTICLE);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Java Class for Codec Serialization\nDESCRIPTION: This snippet defines a custom Java class 'CoolBeansClass' with properties that will be serialized using a custom Codec. It includes fields for bean amount, type, and positions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CoolBeansClass {\n\n    private final int beansAmount;\n    private final Item beanType;\n    private final List<BlockPos> beanPositions;\n\n    public CoolBeansClass(int beansAmount, Item beanType, List<BlockPos> beanPositions) {...}\n\n    public int getBeansAmount() { return this.beansAmount; }\n    public Item getBeanType() { return this.beanType; }\n    public List<BlockPos> getBeanPositions() { return this.beanPositions; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Field Codecs in Java\nDESCRIPTION: Demonstrates how to create optional field codecs with and without default values. These can be used when certain fields might not be present in the serialized data.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Without a default value\nMapCodec<Optional<BlockPos>> optionalCodec = BlockPos.CODEC.optionalFieldOf(\"pos\");\n\n// With a default value\nMapCodec<BlockPos> optionalCodec = BlockPos.CODEC.optionalFieldOf(\"pos\", BlockPos.ORIGIN);\n```\n\n----------------------------------------\n\nTITLE: Generating Block Texture Pool\nDESCRIPTION: Creates a texture pool for blocks sharing the same textures, including stairs, slabs, and fences.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/block-models.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nblockStateModelGenerator.registerCubeAllModelTexturePool(RUBY_BLOCK)\n    .wall(RUBY_WALL)\n    .stairs(RUBY_STAIRS)\n    .slab(RUBY_SLAB)\n    .fence(RUBY_FENCE);\n```\n\n----------------------------------------\n\nTITLE: Registering Damage Type Key\nDESCRIPTION: Java code to obtain the RegistryKey for the custom damage type for use in the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceDamageTypes {\n    public static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE, new Identifier(\"fabric-docs-reference\", \"tater\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Client-to-Server Payload in Java\nDESCRIPTION: Creates a Java Record that implements CustomPayload to define a payload for giving a glowing effect to an entity. It includes an Identifier, a CustomPayload.Id instance, and a PacketCodec for serialization/deserialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/networking.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic record GiveGlowingEffectC2SPayload(int entityId) implements CustomPayload {\n    public static final Identifier ID = new Identifier(\"fabric-docs-reference\", \"give_glowing_effect\");\n    public static final CustomPayload.Id<GiveGlowingEffectC2SPayload> TYPE = CustomPayload.Id.create(ID);\n    public static final PacketCodec<GiveGlowingEffectC2SPayload> CODEC = PacketCodec.ofRecord(TYPE, GiveGlowingEffectC2SPayload::new, GiveGlowingEffectC2SPayload::entityId);\n\n    @Override\n    public CustomPayload.Id<? extends CustomPayload> getId() {\n        return TYPE;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Argument Type in Command\nDESCRIPTION: Demonstrates how to use a custom argument type in a command definition and execution.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/arguments.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nCommandManager.argument(\"pos\", new BlockPosArgumentType())\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.getSource().sendFeedback(() -> Text.literal(\"Pos: \" + context.getArgument(\"pos\", BlockPos.class)), false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Use Fabric Loader JUnit\nDESCRIPTION: This code block configures Gradle to use Fabric Loader JUnit for testing by setting up the test task.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/automatic-testing.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(Test).configureEach {\n    useJUnitPlatform()\n    testLogging {\n        exceptionFormat = 'full'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Java Agent for Mixin Hotswapping\nDESCRIPTION: VM argument to add the Mixin Java agent, enabling hotswapping of Mixin classes during debugging. Requires the path to the Mixin library jar.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/getting-started/launching-the-game.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n-javaagent:\"path to mixin library jar here\"\n```\n\n----------------------------------------\n\nTITLE: Serializing a BlockPos to JSON using Codecs\nDESCRIPTION: Example of using the BlockPos.CODEC to serialize a BlockPos object to a JsonElement. The code demonstrates creating a BlockPos, encoding it to JSON format using JsonOps, and handling the DataResult.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/codecs.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBlockPos pos = new BlockPos(1, 2, 3);\n\n// Serializamos el BlockPos a un JsonElement\nDataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);\n```\n\n----------------------------------------\n\nTITLE: Creating a List Codec from a Base Codec\nDESCRIPTION: Shows how to create a Codec for a list of items based on an existing Codec. This example creates a Codec<List<BlockPos>> from the BlockPos.CODEC.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCodec<List<BlockPos>> listCodec = BlockPos.CODEC.listOf();\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Pair Codec Serialization\nDESCRIPTION: Displays the JSON output resulting from serializing data using a Pair Codec.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"i_am_number\": 23,\n  \"this_statement_is_false\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sounds Helper Class Implementation\nDESCRIPTION: Helper class for managing multiple sound events with static fields and registration methods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/sounds/custom.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomSounds {\n    public static final Identifier METAL_WHISTLE_ID = new Identifier(FabricDocsReference.MOD_ID, \"metal_whistle\");\n    public static SoundEvent METAL_WHISTLE = SoundEvent.of(METAL_WHISTLE_ID);\n\n    public static void register() {\n        Registry.register(Registries.SOUND_EVENT, METAL_WHISTLE_ID, METAL_WHISTLE);\n    }\n\n    public static void init() {\n        register();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a List Codec from a Base Codec\nDESCRIPTION: Shows how to create a Codec for a list of items based on an existing Codec. This example creates a Codec<List<BlockPos>> from the BlockPos.CODEC.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCodec<List<BlockPos>> listCodec = BlockPos.CODEC.listOf();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Damage Type JSON Definition\nDESCRIPTION: JSON structure for defining a custom 'tater' damage type that increases exhaustion and scales with difficulty when damage is received from non-player living entities.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/entities/damage-types.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message_id\": \"tater\",\n  \"exhaustion\": 0.1,\n  \"scaling\": \"when_caused_by_living_non_player\",\n  \"effects\": \"harmful\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Tag with Different Item Sources in Fabric\nDESCRIPTION: Implementation of the configure method to build a tag with various items and other tags. Shows how to add individual items, optional tags, regular tags, and force-added tags.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/tags.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void configure(RegistryWrapper.WrapperLookup arg) {\n    getOrCreateTagBuilder(GEMS)\n            .add(Items.DIAMOND)\n            .add(Items.EMERALD)\n            .addOptionalTag(new Identifier(\"c\", \"rubies\"))\n            .addTag(TagKey.of(RegistryKeys.ITEM, new Identifier(\"c\", \"sapphires\")))\n            .forceAddTag(TagKey.of(RegistryKeys.ITEM, new Identifier(\"c\", \"amethysts\")));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Status Effect Translations in JSON\nDESCRIPTION: Shows how to add translations for the custom status effect in a language file. The translation key follows the format 'effect.mod-id.effect-identifier'.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mineable Tool Tag JSON for Minecraft Blocks\nDESCRIPTION: Erstellt einen JSON-Tag, der festlegt, welche Blöcke mit einer Schaufel schneller abgebaut werden können, hier am Beispiel des kondensierten Erdblocks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/first-block.md#2025-04-05_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:condensed_dirt\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON back to a BlockPos using Codecs\nDESCRIPTION: Example showing how to retrieve a serialized JSON value and parse it back into a BlockPos object. The code demonstrates handling DataResult objects and error logging.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/codecs.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Cuando desarrolles un mod, querrás obviamente manejar Opcionales vaciós apropiadamente\nJsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// Aquí tenemos nuestro valor json, que debería corresponder a `[1, 2, 3]`,\n// ya que es el formato usado por el codec de BlockPos.\nLOGGER.info(\"Serialized BlockPos: {}\", json);\n\n// Ahora deserializaremos nuestro el JsonElement de vuelta a un BlockPos\nDataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);\n\n// Una vez más solo agarraremos nuestro valor del resultado\nBlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// ¡Y ahora podemos ver que hemos serializado y deserializado nuestro BlockPos exitósamente!\nLOGGER.info(\"Deserialized BlockPos: {}\", pos);\n```\n\n----------------------------------------\n\nTITLE: Registering a Command with Optional Subcommand\nDESCRIPTION: Demonstrates how to register a command with an optional subcommand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"command_two\")\n    .executes(FabricDocsReferenceCommands::executeCommandSubCommandTwo)\n    .then(CommandManager.literal(\"sub_command_two\")\n        .executes(FabricDocsReferenceCommands::executeCommandSubCommandTwo)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Command with Optional Subcommand\nDESCRIPTION: Demonstrates how to register a command with an optional subcommand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"command_two\")\n    .executes(FabricDocsReferenceCommands::executeCommandSubCommandTwo)\n    .then(CommandManager.literal(\"sub_command_two\")\n        .executes(FabricDocsReferenceCommands::executeCommandSubCommandTwo)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Helper Class for Sound Registration in Java\nDESCRIPTION: Java class for organizing and centralizing custom sound registrations in a Fabric mod. This helper class defines constants for sound events and provides methods for registration and initialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/develop/sounds/custom.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomSounds {\n    public static final Identifier METAL_WHISTLE = new Identifier(FabricDocsReferenceMod.MOD_ID, \"metal_whistle\");\n    public static SoundEvent METAL_WHISTLE_EVENT = SoundEvent.of(METAL_WHISTLE);\n\n    public static void registerSounds() {\n        Registry.register(Registries.SOUND_EVENT, METAL_WHISTLE, METAL_WHISTLE_EVENT);\n    }\n\n    public static void init() {\n        registerSounds();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Damage Type JSON for Minecraft\nDESCRIPTION: JSON structure for creating a custom 'Tater' damage type in Minecraft. It specifies properties like exhaustion, scaling with difficulty, and message ID.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/damage-types.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exhaustion\": 0.1,\n  \"message_id\": \"tater\",\n  \"scaling\": \"when_caused_by_living_non_player\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Damage Type JSON for Minecraft\nDESCRIPTION: JSON structure for creating a custom 'Tater' damage type in Minecraft. It specifies properties like exhaustion, scaling with difficulty, and message ID.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/damage-types.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exhaustion\": 0.1,\n  \"message_id\": \"tater\",\n  \"scaling\": \"when_caused_by_living_non_player\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TagKey for Items in Java\nDESCRIPTION: This snippet shows how to create a TagKey<Item> for use in tag generation. It uses the Registries.ITEM registry and a custom identifier.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/tags.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final TagKey<Item> FRUIT = TagKey.of(Registries.ITEM.getKey(), new Identifier(\"c\", \"fruits\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Management Methods in Java\nDESCRIPTION: Adds methods to the DynamicSoundManager class for playing, stopping, and checking the status of sounds.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic void playSound(AbstractDynamicSoundInstance sound) {\n    this.client.getSoundManager().play(sound);\n    this.playingSounds.add(sound);\n}\n\npublic void stopSound(AbstractDynamicSoundInstance sound) {\n    this.client.getSoundManager().stop(sound);\n    this.playingSounds.remove(sound);\n}\n\npublic boolean isPlaying(AbstractDynamicSoundInstance sound) {\n    return this.playingSounds.contains(sound);\n}\n\npublic void tick() {\n    Iterator<AbstractDynamicSoundInstance> iterator = this.playingSounds.iterator();\n    while (iterator.hasNext()) {\n        AbstractDynamicSoundInstance sound = iterator.next();\n        if (sound.isDone()) {\n            this.client.getSoundManager().stop(sound);\n            iterator.remove();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Loot Table for Block Drops\nDESCRIPTION: JSON file defining a loot table that makes a block drop itself as an item when broken by a player or destroyed by an explosion.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/first-block.md#2025-04-05_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"minecraft:block\",\n  \"pools\": [\n    {\n      \"rolls\": 1,\n      \"entries\": [\n        {\n          \"type\": \"minecraft:item\",\n          \"name\": \"fabric-docs-reference:condensed_dirt\"\n        }\n      ],\n      \"conditions\": [\n        {\n          \"condition\": \"minecraft:survives_explosion\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Status Effect in Minecraft with Fabric\nDESCRIPTION: Shows how to register a custom status effect in the game's registry system using Registry.register. The example registers a new 'Tater' effect with yellow color and beneficial status.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/entities/effects.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceEffects implements ModInitializer {\n\n    public static final RegistryKey<StatusEffect> TATER_KEY = RegistryKey.of(RegistryKeys.STATUS_EFFECT, new Identifier(\"fabric-docs-reference\", \"tater\"));\n    public static final StatusEffect TATER = new TaterEffect(StatusEffectCategory.BENEFICIAL, 0xE8D400);\n\n    @Override\n    public void onInitialize() {\n        Registry.register(Registries.STATUS_EFFECT, TATER_KEY, TATER);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class in Java\nDESCRIPTION: Creates a custom TaterEffect class that extends StatusEffect. This effect gives the entity one experience point every game tick.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        super(StatusEffectCategory.BENEFICIAL, 0xD69E6F);\n    }\n\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        return true;\n    }\n\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class in Java\nDESCRIPTION: Creates a custom TaterEffect class that extends StatusEffect. This effect gives the entity one experience point every game tick.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        super(StatusEffectCategory.BENEFICIAL, 0xD69E6F);\n    }\n\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        return true;\n    }\n\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Command with Subcommands in Fabric\nDESCRIPTION: Example of creating a command with a required subcommand structure, where the parent command must be followed by a specific subcommand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ko_kr/develop/commands/basics.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"command_one\")\n        .then(CommandManager.literal(\"sub_command_one\").executes(FabricDocsReferenceCommands::executeSubCommandOne)));\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class in Java\nDESCRIPTION: Creates a custom TaterEffect class that extends StatusEffect. This effect gives the entity one experience point every game tick.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        super(StatusEffectCategory.BENEFICIAL, 0xD69E6F);\n    }\n\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        return true;\n    }\n\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sound Registration in Mod Initializer\nDESCRIPTION: Implementation of sound registration in the mod's main initialization class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/sounds/custom.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceSounds implements ModInitializer {\n    @Override\n    public void onInitialize() {\n        CustomSounds.init();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending StatusEffect Class in Java\nDESCRIPTION: Creates a custom TaterEffect class that extends StatusEffect. This effect gives the entity one experience point every game tick.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/effects.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterEffect extends StatusEffect {\n    public TaterEffect() {\n        super(StatusEffectCategory.BENEFICIAL, 0xD69E6F);\n    }\n\n    @Override\n    public boolean canApplyUpdateEffect(int duration, int amplifier) {\n        return true;\n    }\n\n    @Override\n    public void applyUpdateEffect(LivingEntity entity, int amplifier) {\n        if (entity instanceof PlayerEntity) {\n            ((PlayerEntity) entity).addExperience(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output for Block State Definition\nDESCRIPTION: The generated JSON output for a block state definition file, showing a simple block with a single variant and no properties.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"\": {\n      \"model\": \"fabric-docs-reference:block/steel_block\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Codec for Custom Component Record\nDESCRIPTION: Implementation of a RecordCodecBuilder for the custom component to enable serialization and deserialization of the component data.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic record MyCustomComponent(float temperature, boolean burnt) {\n    public static final Codec<MyCustomComponent> CODEC = RecordCodecBuilder.create(instance ->\n            instance.group(\n                    Codec.FLOAT.fieldOf(\"temperature\").forGetter(MyCustomComponent::temperature),\n                    Codec.BOOL.optionalFieldOf(\"burnt\", false).forGetter(MyCustomComponent::burnt)\n            ).apply(instance, MyCustomComponent::new)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Making Item Compostable in Java\nDESCRIPTION: Uses Fabric API's CompostableItemRegistry to make the custom item compostable. This code is added to the initialize method of the ModItems class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/first-item.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nCompostableItemRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 0.3f);\n```\n\n----------------------------------------\n\nTITLE: Adding Block to Mineable Tag in JSON\nDESCRIPTION: Adds a custom block to the shovel-mineable tag for proper tool interaction.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/blocks/first-block.md#2025-04-05_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:condensed_dirt\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Paired Codecs\nDESCRIPTION: Shows the JSON result from serializing a Pair using the paired codec created in the previous example.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"i_am_number\": 23,\n  \"this_statement_is_false\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Command for Dedicated Server Environment\nDESCRIPTION: Demonstrates how to register a command only for the dedicated server environment using the RegistrationEnvironment parameter.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/basics.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nif (environment == CommandManager.RegistrationEnvironment.DEDICATED) {\n    dispatcher.register(CommandManager.literal(\"dedicated_only\").executes(context -> {\n        // Command logic here\n        return Command.SINGLE_SUCCESS;\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Particle JSON Configuration\nDESCRIPTION: Defines the JSON configuration for the particle, specifying which textures to use. This file must be named the same as the JSON path used when registering the ParticleType.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"textures\": [\n        \"fabric-docs-reference:particle/sparkle_particle_texture\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Initialize Method for ModBlocks in Java\nDESCRIPTION: Erstellt eine leere Initialize-Methode, die den Zweck hat, die statische Initialisierung der Klasse auszulösen, wenn sie von der Mod aufgerufen wird.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/first-block.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void initialize() {}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Status Effect with Command in Minecraft\nDESCRIPTION: Demonstrates how to apply the custom status effect using the /effect command in Minecraft. This is useful for quick testing.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_3\n\nLANGUAGE: mcfunction\nCODE:\n```\neffect give @p fabric-docs-reference:tater\n```\n\n----------------------------------------\n\nTITLE: Creating a Block with Different Textures for Sides and Ends\nDESCRIPTION: Demonstrates how to register a singleton block that uses different textures for its sides versus its top and bottom faces using TexturedModel.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Generate a block model with different textures for sides and ends\nblockStateModelGenerator.registerSingleton(ModBlocks.PIPE_BLOCK, TexturedModel.CUBE_TOP_BOTTOM);\n```\n\n----------------------------------------\n\nTITLE: Defining a Recursive List Node Record in Java\nDESCRIPTION: Creates a simple record structure for a singly-linked list node that contains an integer value and a reference to the next node in the list.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic record ListNode(int value, ListNode next) {}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Item with Default Component in Java\nDESCRIPTION: Demonstrates how to register a custom item with a default value for the custom component. This ensures new items always have an initial click count of 0.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item COUNTER = register(new CounterItem(\n    new Item.Settings()\n        .component(ModComponents.CLICK_COUNT_COMPONENT, 0)\n), \"counter\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Boolean Property for Block States\nDESCRIPTION: Creates a custom BooleanProperty named 'activated' for use in block states. This property will track whether the block is in an activated state.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final BooleanProperty ACTIVATED = BooleanProperty.of(\"activated\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Recursive Codec for a Linked List Structure\nDESCRIPTION: Implementation of a recursive codec that can serialize and deserialize a linked list structure by referring to itself. Uses `Codecs#createRecursive` to handle the self-reference in the `next` field.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/codecs.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCodec<ListNode> codec = Codecs.createRecursive(\n  \"ListNode\", // a name for the codec\n  selfCodec -> {\n    // Here, `selfCodec` represents the `Codec<ListNode>`, as if it was already constructed\n    // This lambda should return the codec we wanted to use from the start,\n    // that refers to itself through `selfCodec`\n    return RecordCodecBuilder.create(instance ->\n      instance.group(\n        Codec.INT.fieldOf(\"value\").forGetter(ListNode::value),\n         // the `next` field will be handled recursively with the self-codec\n        Codecs.createStrictOptionalFieldCodec(selfCodec, \"next\", null).forGetter(ListNode::next)\n      ).apply(instance, ListNode::new)\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Subcommand Implementation\nDESCRIPTION: Example showing how to add subcommands to a base command.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/basics.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"command_one\")\n    .then(CommandManager.literal(\"sub_command_one\").executes(this::executeSubCommandOne)));\n```\n\n----------------------------------------\n\nTITLE: Creating a Texture Pool for Block Variants\nDESCRIPTION: Shows how to set up a texture pool that allows multiple block variants (like stairs and slabs) to share the same base texture.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Create a texture pool for a base block and its variants\nblockStateModelGenerator.registerCubeAllModelTexturePool(ModBlocks.RUBY_BLOCK)\n        .stair(ModBlocks.RUBY_STAIRS)\n        .slab(ModBlocks.RUBY_SLAB)\n        .fence(ModBlocks.RUBY_FENCE);\n```\n\n----------------------------------------\n\nTITLE: Locating the Minecraft mods folder across different operating systems\nDESCRIPTION: Provides the file paths to the Minecraft mods folder for Windows, macOS, and Linux operating systems. These paths can be pasted into the file explorer's address bar for quick navigation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/zh_cn/players/installing-mods.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n%appdata%\\.minecraft\\mods\n```\n\nLANGUAGE: bash\nCODE:\n```\n~/Library/Application Support/minecraft/mods\n```\n\nLANGUAGE: bash\nCODE:\n```\n~/.minecraft/mods\n```\n\n----------------------------------------\n\nTITLE: Adding Translations for Custom Status Effect in JSON\nDESCRIPTION: Shows the JSON format for adding language translations for a custom status effect. The translation key follows the format 'effect.mod-id.effect-identifier'.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FabricAdvancementProvider Class in Java\nDESCRIPTION: Creates a FabricAdvancementProvider subclass that can generate advancement data for a Fabric mod. This provider serves as the foundation for creating custom advancements through the datagen system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceAdvancementProvider extends FabricAdvancementProvider {\n    protected FabricDocsReferenceAdvancementProvider(FabricDataOutput output) {\n        super(output);\n    }\n\n    @Override\n    public void generateAdvancement(Consumer<Advancement> consumer) {\n        // We'll add our advancements here\n    }\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of a Recursive List Node\nDESCRIPTION: Shows the JSON structure produced when serializing a ListNode with the recursive codec. The nested structure reflects the linked nature of the nodes in the list.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": 2,\n  \"next\": {\n    \"value\": 3,\n    \"next\": {\n      \"value\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Status Effect Translation in JSON\nDESCRIPTION: Shows how to add a translation for the custom status effect in a language file. The translation key follows the format 'effect.mod-id.effect-identifier'.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Command Lambda in Java\nDESCRIPTION: Demonstrates the creation of a basic Command lambda that returns a success value.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCommand<ServerCommandSource> command = context -> {\n    return 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Creando un codec recursivo para ListNode en Java\nDESCRIPTION: Utiliza Codec.recursive para crear un codec que puede serializar y deserializar la estructura ListNode recursiva. El codec utiliza RecordCodecBuilder para definir los campos y sus getters.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/codecs.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCodec<ListNode> codec = Codec.recursive(\n  \"ListNode\", // a name for the codec\n  selfCodec -> {\n    // Here, `selfCodec` represents the `Codec<ListNode>`, as if it was already constructed\n    // This lambda should return the codec we wanted to use from the start,\n    // that refers to itself through `selfCodec`\n    return RecordCodecBuilder.create(instance ->\n      instance.group(\n        Codec.INT.fieldOf(\"value\").forGetter(ListNode::value),\n         // the `next` field will be handled recursively with the self-codec\n        Codecs.createStrictOptionalFieldCodec(selfCodec, \"next\", null).forGetter(ListNode::next)\n      ).apply(instance, ListNode::new)\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Runtime Command Registration in Fabric MC\nDESCRIPTION: Process for registering commands during runtime using CommandManager. Requires sending updated command tree to all players using CommandManager.sendCommandTree(ServerPlayerEntity) to maintain client-side command cache synchronization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nCommandManager.sendCommandTree(ServerPlayerEntity)\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Loot Table Provider in Fabric\nDESCRIPTION: Shows the basic structure of a block loot table provider class extending FabricBlockLootTableProvider.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/loot-tables.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceBlockLootTableProvider extends FabricBlockLootTableProvider {\n    protected FabricDocsReferenceBlockLootTableProvider(FabricDataOutput dataOutput) {\n        super(dataOutput);\n    }\n\n    @Override\n    public void generate() {\n        // Add block drops here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Redirected Command in Fabric\nDESCRIPTION: Implementation of the command execution that can be invoked via both the original command name and its redirected alias.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/ko_kr/develop/commands/basics.md#2025-04-05_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeRedirectedBy(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {\n    context.getSource().sendFeedback(() -> Text.literal(\"This command can be invoked as both redirected_by and redirected_to!\"), false);\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Text Objects in Java\nDESCRIPTION: Demonstrates how to create Text and MutableText objects using Text.of() and Text.literal() methods. Shows the difference between Text and MutableText instances.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/text-and-translations.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nText literal = Text.of(\"Hello, world!\");\nMutableText mutable = Text.literal(\"Hello, world!\");\n// Keep in mind that a MutableText can be used as a Text, making this valid:\nText mutableAsText = mutable;\n```\n\n----------------------------------------\n\nTITLE: Initializing FabricRecipeProvider for Datagen in Java\nDESCRIPTION: Creates a custom recipe provider class extending FabricRecipeProvider. The generate method is where all recipe generation logic will be implemented.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/recipes.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceRecipeProvider extends FabricRecipeProvider {\n    public FabricDocsReferenceRecipeProvider(FabricDataOutput output) {\n        super(output);\n    }\n\n    @Override\n    public void generate(RecipeExporter exporter) {\n        // Recipe generation goes here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Integer Range Codec in Java\nDESCRIPTION: Creates a codec that validates integer values within a specified inclusive range from 0 to 2.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nCodec<Integer> amountOfFriendsYouHave = Codec.intRange(0, 2);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Enchantment Effect in Java\nDESCRIPTION: Demonstrates how to register the custom enchantment effect with Minecraft's registry using a ModEnchantmentEffects class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-enchantment-effects.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@[code transcludeWith=#entrypoint](@/reference/latest/src/main/java/com/example/docs/enchantment/ModEnchantmentEffects.java)\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Generation Pack in Java\nDESCRIPTION: This Java code snippet demonstrates how to create a Pack object within the onInitializeDataGenerator method. The Pack serves as a container for all the data providers that will generate content.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/setup.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// part of FabricDocsReferenceDataGenerator.java's onInitializeDataGenerator method\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Codec with Identifier Keys\nDESCRIPTION: Creates a codec for mapping Minecraft Identifiers to Integer values, demonstrating unbounded map serialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nCodec<Map<Identifier, Integer>> mapCodec = Codec.unboundedMap(Identifier.CODEC, Codec.INT);\n\nDataResult<JsonElement> result = mapCodec.encodeStart(JsonOps.INSTANCE, Map.of(\n    new Identifier(\"example\", \"number\"), 23,\n    new Identifier(\"example\", \"the_cooler_number\"), 42\n));\n```\n\n----------------------------------------\n\nTITLE: Runtime Command Unregistration in Fabric MC\nDESCRIPTION: Process for unregistering commands at runtime using Brigadier reflection. Requires sending updated command tree to all players using sendCommandTree(ServerPlayerEntity) to maintain client-side command cache synchronization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nsendCommandTree(ServerPlayerEntity)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tick Logic for AbstractDynamicSoundInstance in Java\nDESCRIPTION: Manages the sound instance's state transitions and duration tracking on each tick. This method handles the progression through intro, loop, and outro phases, and signals completion when finished.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    public void tick() {\n        // Increment counters\n        this.ticks++;\n        this.loopTicks++;\n\n        // Update sound position based on source\n        Vec3d pos = this.source.getPos();\n        this.x = pos.x;\n        this.y = pos.y;\n        this.z = pos.z;\n\n        if (this.done) {\n            return;\n        }\n\n        if (!shouldContinuePlaying()) {\n            if (this.state != TransitionState.OUTRO) {\n                this.state = TransitionState.OUTRO;\n                this.loopTicks = 0;\n            }\n        }\n\n        switch (this.state) {\n            case INTRO -> {\n                if (this.loopTicks >= this.introTicks) {\n                    this.state = TransitionState.LOOP;\n                    this.loopTicks = 0;\n                }\n            }\n            case OUTRO -> {\n                if (this.loopTicks >= this.outroTicks) {\n                    this.done = true;\n                    this.callback.onFinished(this.id);\n                }\n            }\n        }\n\n        // Apply dynamic volume and pitch modulations\n        applyModulations();\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Translatable Text in Java\nDESCRIPTION: Shows how to create translatable Text objects using Text.translatable() method. Includes an example of using variables in translations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/text-and-translations.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nText translatable = Text.translatable(\"my_mod.text.hello\");\n\n// Similarly to literals, translatable text can be easily made mutable.\nMutableText mutable = Text.translatable(\"my_mod.text.bye\");\n\nText translatable = Text.translatable(\"my_mod.text.hello\", player.getDisplayName());\n```\n\n----------------------------------------\n\nTITLE: Creating a FabricRecipeProvider Class for DataGen\nDESCRIPTION: Sets up a recipe provider class by extending FabricRecipeProvider. This class will contain all recipe generation code within its generate method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/recipes.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceRecipeProvider extends FabricRecipeProvider {\n    public FabricDocsReferenceRecipeProvider(FabricDataOutput output) {\n        super(output);\n    }\n\n    @Override\n    public void generate(RecipeExporter exporter) {\n        // Recipe generation code will go here\n    }\n\n    @Override\n    public String getName() {\n        return \"Recipes\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Registry Dispatch Codec for Beans in Java\nDESCRIPTION: Demonstrates how to create a Registry Dispatch Codec for different types of Beans using a BeanType registry.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// Now we can create a codec for bean types\n// based on the previously created registry\nCodec<BeanType<?>> beanTypeCodec = BeanType.REGISTRY.getCodec();\n\n// And based on that, here's our registry dispatch codec for beans!\n// The first argument is the field name for the bean type.\n// When left out, it will default to \"type\".\nCodec<Bean> beanCodec = beanTypeCodec.dispatch(\"type\", Bean::getType, BeanType::codec);\n```\n\n----------------------------------------\n\nTITLE: Adding Enchantment Generator to Data Generation Tasks\nDESCRIPTION: Shows how to add the EnchantmentGenerator to the list of data generation tasks in the mod's initialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-enchantment-effects.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@[code transclude={24-24}](@/reference/latest/src/client/java/com/example/docs/datagen/FabricDocsReferenceDataGenerator.java)\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Map Codec Serialization\nDESCRIPTION: The resulting JSON structure when serializing data using a map codec with Identifier keys, showing how the keys are converted to strings in the output.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example:number\": 23,\n  \"example:the_cooler_number\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Between Vec3d and BlockPos using xmap\nDESCRIPTION: Example of using xmap to create a codec that converts between Vec3d and BlockPos coordinate representations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/codecs.md#2025-04-05_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nCodec<BlockPos> blockPosCodec = Vec3d.CODEC.xmap(\n    vec -> new BlockPos(vec.x, vec.y, vec.z),\n    pos -> new Vec3d(pos.getX(), pos.getY(), pos.getZ())\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Argument Type\nDESCRIPTION: Shows how to register a custom argument type using ArgumentTypeRegistry in the mod initializer.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/arguments.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nArgumentTypeRegistry.registerArgumentType(new Identifier(\"fabric_docs_reference\", \"block_pos\"), BlockPosArgumentType.class, new ConstantArgumentSerializer<>(BlockPosArgumentType::new))\n```\n\n----------------------------------------\n\nTITLE: Triggering a Custom Event from a Mixin in Java\nDESCRIPTION: This mixin injects into the SheepEntity's interactMob method to trigger the custom SheepShearCallback event when a player attempts to shear a sheep. It allows mods to intercept and modify the sheep shearing behavior.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/events.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.mixin.event;\n\nimport com.example.docs.event.SheepShearCallback;\nimport net.minecraft.entity.passive.SheepEntity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.item.Items;\nimport net.minecraft.item.ShearsItem;\nimport net.minecraft.util.ActionResult;\nimport net.minecraft.util.Hand;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n@Mixin(SheepEntity.class)\npublic abstract class SheepEntityMixin {\n    @Shadow public abstract boolean isShearable();\n\n    @Inject(method = \"interactMob\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/passive/SheepEntity;sheared(Lnet/minecraft/sound/SoundCategory;)V\"), cancellable = true)\n    private void onShear(PlayerEntity player, Hand hand, CallbackInfoReturnable<ActionResult> cir) {\n        // Controlla se la pecora può essere tosata e se il giocatore sta usando le cesoie\n        ItemStack itemStack = player.getStackInHand(hand);\n        if (this.isShearable() && itemStack.getItem() instanceof ShearsItem) {\n            // Invoca l'evento\n            ActionResult result = SheepShearCallback.EVENT.invoker().interact(player, (SheepEntity) (Object) this);\n            \n            if (result != ActionResult.PASS) {\n                cir.setReturnValue(result);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Language File Example in JSON\nDESCRIPTION: Demonstrates the structure of a language file (en_us.json) used for translations in Minecraft mods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/text-and-translations.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_mod.text.hello\": \"Hello!\",\n  \"my_mod.text.bye\": \"Goodbye :(\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Language Provider in Fabric\nDESCRIPTION: Demonstrates how to create a FabricLanguageProvider class for generating translations. This provider handles English translations and implements the required generateTranslations method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/translations.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceEnglishLangProvider extends FabricLanguageProvider {\n    public FabricDocsReferenceEnglishLangProvider(FabricDataOutput dataOutput) {\n        super(dataOutput, \"en_us\");\n    }\n\n    @Override\n    public void generateTranslations(TranslationBuilder translationBuilder) {\n        // We'll fill this in later!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Registry Dispatch for StringyBean\nDESCRIPTION: Shows the JSON result from serializing a StringyBean using the registry dispatch codec created in the previous example.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"example:stringy_bean\",\n  \"stringy_string\": \"Этот боб — строка!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Enchantment JSON Data\nDESCRIPTION: Example of the generated JSON data for the custom 'Thundering' enchantment.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-enchantment-effects.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n@[code](@/reference/latest/src/main/generated/data/fabric-docs-reference/enchantment/thundering.json)\n```\n\n----------------------------------------\n\nTITLE: Creating a DamageSource for Custom Damage Types\nDESCRIPTION: Code snippet showing how to create a DamageSource from a custom damage type. This demonstrates extracting the relevant portion of a larger block implementation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDamageSource damageSource = new DamageSource(\n\tworld.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(FabricDocsReferenceDamageTypes.TATER)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Integer Range Codec in Java\nDESCRIPTION: Creates a codec that only accepts integer values within a specified inclusive range (0-2). This applies to both serialization and deserialization operations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Can't be more than 2\nCodec<Integer> amountOfFriendsYouHave = Codec.intRange(0, 2);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Player Suggestion Provider in Java\nDESCRIPTION: This code shows how to implement a custom SuggestionProvider that suggests player usernames on the server. It filters the server's player list and adds matching names to the suggestion builder.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/suggestions.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.command;\n\nimport com.mojang.brigadier.context.CommandContext;\nimport com.mojang.brigadier.suggestion.SuggestionProvider;\nimport com.mojang.brigadier.suggestion.Suggestions;\nimport com.mojang.brigadier.suggestion.SuggestionsBuilder;\nimport net.minecraft.server.command.ServerCommandSource;\nimport net.minecraft.server.network.ServerPlayerEntity;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class PlayerSuggestionProvider implements SuggestionProvider<ServerCommandSource> {\n    @Override\n    public CompletableFuture<Suggestions> getSuggestions(CommandContext<ServerCommandSource> context, SuggestionsBuilder builder) {\n        // Get the remaining characters that the user has typed so far.\n        String remaining = builder.getRemaining().toLowerCase();\n\n        // Get all the players on the server.\n        for (ServerPlayerEntity player : context.getSource().getServer().getPlayerManager().getPlayerList()) {\n            String name = player.getGameProfile().getName();\n\n            // If the player's name starts with the remaining characters, suggest it.\n            if (name.toLowerCase().startsWith(remaining)) {\n                builder.suggest(name);\n            }\n        }\n\n        // Return the suggestions.\n        return builder.buildFuture();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Constant Value Codec in Java\nDESCRIPTION: Creates a codec that always deserializes to a constant value (42) regardless of input data, using Codec.unit.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/codecs.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCodec<Integer> theMeaningOfCodec = Codec.unit(42);\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Registry Dispatch - CountingBean Example\nDESCRIPTION: Shows the JSON output format when serializing a CountingBean using the registry dispatch codec system, including the type identifier and type-specific fields.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"example:counting_bean\",\n  \"counting_number\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Translation with Variables in JSON\nDESCRIPTION: Shows how to use variables in translation strings within a language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/text-and-translations.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_mod.text.hello\": \"%1$s said hello!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Constant Value Codec in Java\nDESCRIPTION: Shows how to create a codec that always deserializes to a constant value regardless of input. This example creates a codec that always produces the integer value 42.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCodec<Integer> theMeaningOfCodec = Codec.unit(42);\n```\n\n----------------------------------------\n\nTITLE: Implementing Requirements Check for Parameterized Criterion\nDESCRIPTION: Updates the requirements check method to include a parameter for the number of times an action must be performed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic boolean requirementsMet(ServerPlayerEntity player, Item toolItem, int times) {\n    boolean matches = true;\n    // Add requirement check for the number of times\n    return matches && times >= requiredTimes;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Durability for Custom Armor in Java\nDESCRIPTION: Creates a constant for the base durability of the custom armor material. This value is used in item creation and ArmorMaterial initialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-armor.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static final int BASE_DURABILITY = 25;\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Existing Loot Tables in Java\nDESCRIPTION: This code demonstrates how to add eggs to the coal ore loot table by registering a callback to the LootTableEvents.MODIFY event. It creates a new loot pool with an item entry for eggs and adds it to the existing loot table.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/events.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate void addEggsToCoalOre() {\n    // Registra l'evento per modificare le loot table\n    LootTableEvents.MODIFY.register((resourceManager, lootManager, id, tableBuilder, source) -> {\n        // Verifica se la loot table attuale è quella del minerale di carbone\n        if (Blocks.COAL_ORE.getLootTableId().equals(id)) {\n            // Crea una nuova pool e l'aggiungi alla loot table\n            LootPool.Builder poolBuilder = LootPool.builder()\n                    .with(ItemEntry.builder(Items.EGG)); // Aggiungi uova come drop possibile\n            tableBuilder.pool(poolBuilder);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Codecs into Pair in Java\nDESCRIPTION: Shows how to combine two separate Codecs into a Pair Codec and serialize data using it.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// Create two separate boxed codecs\nCodec<Integer> firstCodec = Codec.INT.fieldOf(\"i_am_number\").codec();\nCodec<Boolean> secondCodec = Codec.BOOL.fieldOf(\"this_statement_is_false\").codec();\n\n// Merge them into a pair codec\nCodec<Pair<Integer, Boolean>> pairCodec = Codec.pair(firstCodec, secondCodec);\n\n// Use it to serialize data\nDataResult<JsonElement> result = pairCodec.encodeStart(JsonOps.INSTANCE, Pair.of(23, true));\n```\n\n----------------------------------------\n\nTITLE: Custom Player Username Suggestion Provider Implementation - Java\nDESCRIPTION: Implements a custom SuggestionProvider that suggests player usernames from the server. The provider collects all online player names and offers them as command suggestions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/suggestions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class PlayerSuggestionProvider implements SuggestionProvider<ServerCommandSource> {\n    @Override\n    public CompletableFuture<Suggestions> getSuggestions(CommandContext<ServerCommandSource> context, SuggestionBuilder builder) {\n        MinecraftServer server = context.getSource().getServer();\n        for (ServerPlayerEntity player : server.getPlayerManager().getPlayerList()) {\n            builder.suggest(player.getGameProfile().getName());\n        }\n        return builder.buildFuture();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Block Model in JSON\nDESCRIPTION: JSON model for the horizontal orientation of a pillar block. This extends the cube_column_horizontal model and specifies the end and side textures for the condensed oak log block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/blockstates.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"minecraft:block/cube_column_horizontal\",\n  \"textures\": {\n    \"end\": \"fabric-docs-reference:block/condensed_oak_log_top\",\n    \"side\": \"fabric-docs-reference:block/condensed_oak_log_side\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Map Codecs for Key-Value Collections\nDESCRIPTION: Demonstrates how to create codecs for maps with arbitrary keys using unboundedMap. The key codec must serialize to a string to work with JSON and NBT limitations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Crea un codec per una mappa da identifier a interi\nCodec<Map<Identifier, Integer>> mapCodec = Codec.unboundedMap(Identifier.CODEC, Codec.INT);\n\n// Usalo per serializzare i dati\nDataResult<JsonElement> result = mapCodec.encodeStart(JsonOps.INSTANCE, Map.of(\n    new Identifier(\"example\", \"number\"), 23,\n    new Identifier(\"example\", \"the_cooler_number\"), 42\n));\n```\n\n----------------------------------------\n\nTITLE: Creating FabricLanguageProvider for English Translations in Java\nDESCRIPTION: Creates a FabricLanguageProvider subclass for generating English translations. This provider is responsible for adding all the translations for the mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/translations.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceEnglishLangProvider extends FabricLanguageProvider {\n    protected FabricDocsReferenceEnglishLangProvider(FabricDataOutput dataOutput) {\n        super(dataOutput, \"en_us\");\n    }\n\n    @Override\n    public void generateTranslations(TranslationBuilder translationBuilder) {\n        // We'll add translations here later\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using xmap to Convert Between Types in Codecs\nDESCRIPTION: Demonstrates how to create a codec for one type based on a codec for another type using xmap, by providing conversion functions in both directions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCodec<BlockPos> blockPosCodec = Vec3d.CODEC.xmap(\n    // Converti Vec3d a BlockPos\n    vec -> new BlockPos(vec.x, vec.y, vec.z),\n    // Converti BlockPos a Vec3d\n    pos -> new Vec3d(pos.getX(), pos.getY(), pos.getZ())\n);\n\n// Quando converti una classe esistente (per esempio `X`)\n// alla tua classe personalizzata (`Y`) in questo modo,\n// potrebbe essere comodo aggiungere i metodi `toX` e\n// `fromX` statico ad `Y` e usare riferimenti ai metodi\n// nella tua chiamata ad `xmap`.\n```\n\n----------------------------------------\n\nTITLE: Adding Parameterized Criterion to Registry\nDESCRIPTION: Registers the new parameterized criterion in the mod criteria registry for use in advancements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npublic static final ParameterizedUseToolCriterion PARAMETERIZED_USE_TOOL = CriteriaTriggers.register(new ParameterizedUseToolCriterion());\n```\n\n----------------------------------------\n\nTITLE: Defining Item Model for Custom Armor in JSON\nDESCRIPTION: Creates a JSON model definition for a custom armor item (helmet in this case). Specifies the parent model and texture location.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-armor.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_helmet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Animation with MatrixStack in FabricMC\nDESCRIPTION: Demonstrates how to create a scaling animation using MatrixStack by pushing/popping matrices and applying scale transformations based on tick delta. Shows proper matrix stack management with push and pop operations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/basic-concepts.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nmatrices.push();\nmatrices.translate(0.5f, 0.5f, 0.5f);\n\n// Scale between 0.5 and 1.5 based on time\nfloat scale = 1.0f + (float) Math.sin(tickDelta) * 0.5f;\nmatrices.scale(scale, scale, scale);\n\nmatrices.translate(-0.5f, -0.5f, -0.5f);\n\n// Get our transformation matrix and render!\nMatrix4f matrix = matrices.peek().getPositionMatrix();\nrender(matrix);\n\nmatrices.pop();\n```\n\n----------------------------------------\n\nTITLE: Custom Event Test Implementation in Java\nDESCRIPTION: Example implementation of the custom sheep shear event that drops a diamond instead of wool.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/events.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nSheepShearCallback.EVENT.register((player, sheep) -> {\n    if (!sheep.getWorld().isClient()) {\n        ItemEntity itemEntity = new ItemEntity(sheep.getWorld(),\n                sheep.getX(), sheep.getY(), sheep.getZ(),\n                new ItemStack(Items.DIAMOND));\n        sheep.getWorld().spawnEntity(itemEntity);\n    }\n    return ActionResult.SUCCESS;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Blockstate JSON for a Block with Boolean Property\nDESCRIPTION: Blockstate JSON that maps the custom 'activated' property to different block models. It handles both true and false states by using different models for each variant.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/blockstates.md#2025-04-05_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"activated=false\": {\n      \"model\": \"fabric-docs-reference:block/prismarine_lamp_off\"\n    },\n    \"activated=true\": {\n      \"model\": \"fabric-docs-reference:block/prismarine_lamp_on\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exemple de Structure JSON pour CoolBeansClass\nDESCRIPTION: Structure JSON correspondante à la classe CoolBeansClass pour la démonstration de sérialisation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/fr_fr/develop/codecs.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"beans_amount\": 5,\n  \"bean_type\": \"beanmod:mythical_beans\",\n  \"bean_positions\": [\n    [1, 2, 3],\n    [4, 5, 6]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Generation in build.gradle\nDESCRIPTION: This Groovy snippet configures data generation in the build.gradle file, enabling the necessary functionality for Fabric API's data generation system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/setup.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n// part of build.gradle file\n```\n\n----------------------------------------\n\nTITLE: Sérialisation d'une BlockPos en JSON avec Codec en Java\nDESCRIPTION: Exemple de sérialisation d'un objet BlockPos en JSON et vice versa en utilisant le codec BlockPos.CODEC et JsonOps.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/fr_fr/develop/codecs.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBlockPos pos = new BlockPos(1, 2, 3);\n\n// Serialisation de la BlockPos en JsonElement\nDataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);\n```\n\nLANGUAGE: java\nCODE:\n```\n// Si on écrivait un vrai mod, il faudrait évidemment prendre en charge les Optionals vides\nJsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// Voici notre valeur JSON, qui devrait correspondre à `[1,2,3]`,\n// puisque c'est le format que le codec de BlockPos utilise.\nLOGGER::info(\"BlockPos sérialisée : {}\", json);\n\n// Maintenant on désérialise le JsonElement en BlockPos\nDataResult<BlockPs> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);\n\n// Encore une fois, on extrait directement notre valeur du résultat\nBlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// Et on peut voir qu'on a sérialisé et désérialisé notre BlockPos avec succès !\nLOGGER::info(\"BlockPos désérialisée : {}\", pos);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pillar Block Model JSON\nDESCRIPTION: JSON configuration for a horizontal pillar block model, specifying textures for the end and side faces of a condensed oak log block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/blocks/blockstates.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"block/cube_column_horizontal\",\n  \"textures\": {\n    \"end\": \"fabric-docs-reference:block/condensed_oak_log_top\",\n    \"side\": \"fabric-docs-reference:block/condensed_oak_log\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Item Model in JSON\nDESCRIPTION: Creates a JSON model for a custom tool item, specifying the parent model and texture.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/items/custom-tools.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/handheld\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_sword\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Status Effect Programmatically in Java\nDESCRIPTION: Shows how to apply a status effect to an entity using code. The example creates a StatusEffectInstance with specified duration, amplifier, and display properties and adds it to a player entity.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/entities/effects.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Status Effects demo\npublic void applyTaterEffect(PlayerEntity player) {\n    // Apply the tater effect for 30 seconds (600 ticks) at level 5 (amplifier 4)\n    StatusEffectInstance effect = new StatusEffectInstance(\n            FabricDocsReferenceEffects.TATER, // The effect to apply\n            600,                               // Duration (in ticks; 20 ticks = 1 second)\n            4,                                 // Amplifier (level - 1; so this is level 5)\n            false,                            // Whether the effect came from a beacon\n            true,                             // Whether to show particles\n            true                              // Whether to show the icon in the HUD\n    );\n\n    // Add the effect to the player\n    player.addStatusEffect(effect);\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Animation with MatrixStack in FabricMC\nDESCRIPTION: Demonstrates how to create a scaling animation for a diamond model using MatrixStack. The animation uses tickDelta to smoothly scale the model up and down over time.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/basic-concepts.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nmatrices.push();\nmatrices.translate(0.5f, 0.5f, 0.0f);\n\n// Scale based on time\nfloat scale = (float) Math.sin(tickDelta * 0.5f) * 0.5f + 1.0f;\nmatrices.scale(scale, scale, 1.0f);\n\n// Render the diamond\nmatrix = matrices.peek().getPositionMatrix();\nrenderer.drawItems(matrix);\n\nmatrices.pop();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Event Callback Interface in Java\nDESCRIPTION: Defines a custom event callback interface for sheep shearing events with an array-backed implementation. The interface includes an invoker that calls registered callbacks in order until one returns a non-PASS result.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/events.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.event;\n\nimport net.fabricmc.fabric.api.event.Event;\nimport net.fabricmc.fabric.api.event.EventFactory;\nimport net.minecraft.entity.passive.SheepEntity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.util.ActionResult;\n\n/**\n * Called when a sheep is about to be sheared.\n *\n * <p>Upon return:\n * <ul>\n * <li>SUCCESS cancels further code and prevents wool from dropping, but still plays sound and spawns particles</li>\n * <li>FAIL cancels further code, does not count as shearing (nothing drops, no particles, no sound)</li>\n * <li>PASS falls back to default behavior (in this case, runs vanilla code)</li>\n * </ul>\n */\npublic interface SheepShearCallback {\n    Event<SheepShearCallback> EVENT = EventFactory.createArrayBacked(SheepShearCallback.class,\n        (listeners) -> (player, sheep) -> {\n            for (SheepShearCallback listener : listeners) {\n                ActionResult result = listener.interact(player, sheep);\n\n                if (result != ActionResult.PASS) {\n                    return result;\n                }\n            }\n\n            return ActionResult.PASS;\n        }\n    );\n\n    ActionResult interact(PlayerEntity player, SheepEntity sheep);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Pair Codec\nDESCRIPTION: Shows the resulting JSON structure when using the pair codec from the previous example. The output includes both fields from the merged codecs with their respective values.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"i_am_number\": 23,\n  \"this_statement_is_false\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Status Effect Translation Configuration\nDESCRIPTION: JSON configuration for adding translations for the custom status effect in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Status Effect Translation Configuration\nDESCRIPTION: JSON configuration for adding translations for the custom status effect in the language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/entities/effects.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect.fabric-docs-reference.tater\": \"Tater\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TagProvider to DataGeneratorEntrypoint in Java\nDESCRIPTION: This code snippet demonstrates how to add the custom TagProvider to the DataGeneratorEntrypoint within the onInitializeDataGenerator method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/tags.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceItemTagProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Creating a List Codec in Java\nDESCRIPTION: Demonstrates how to create a codec for a list of BlockPos objects using the listOf() method. This creates a codec that can serialize and deserialize lists of BlockPos elements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCodec<List<BlockPos>> listCodec = BlockPos.CODEC.listOf();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Loot Table Registry Keys in Java\nDESCRIPTION: Shows how to create a class with custom RegistryKey<LootTable> for defining loot tables.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/data-generation/loot-tables.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ModLootTables {\n    public static final RegistryKey<LootTable> EXAMPLE_CHEST = register(\"chests/example_chest\");\n\n    private static RegistryKey<LootTable> register(String id) {\n        return RegistryKey.of(RegistryKeys.LOOT_TABLE, new Identifier(FabricDocsReferenceMod.MOD_ID, id));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tools to Item Group in Java\nDESCRIPTION: Demonstrates how to add the custom tool items to an item group for access in the creative inventory.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-tools.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static void addItemsToItemGroup() {\n    addToItemGroup(ModItemGroups.FABRIC_DOCS, GUIDITE_SWORD);\n    addToItemGroup(ModItemGroups.FABRIC_DOCS, GUIDITE_SHOVEL);\n    addToItemGroup(ModItemGroups.FABRIC_DOCS, GUIDITE_PICKAXE);\n    addToItemGroup(ModItemGroups.FABRIC_DOCS, GUIDITE_AXE);\n    addToItemGroup(ModItemGroups.FABRIC_DOCS, GUIDITE_HOE);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Text Objects in Java\nDESCRIPTION: Demonstrates creation of basic Text objects using Text.of() and Text.literal() methods, showing the difference between immutable Text and MutableText objects.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/text-and-translations.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nText literal = Text.of(\"Hello, world!\");\nMutableText mutable = Text.literal(\"Hello, world!\");\n// Keep in mind that a MutableText can be used as a Text, making this valid:\nText mutableAsText = mutable;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Triangle Strip using BufferBuilder in Minecraft Fabric\nDESCRIPTION: Implementazione di una callback HudRenderCallback che disegna un diamante sullo schermo usando TRIANGLE_STRIP e il formato POSITION_COLOR. L'esempio illustra come inizializzare e utilizzare BufferBuilder per il rendering personalizzato in Minecraft.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/rendering/basic-concepts.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onHudRender(DrawContext drawContext, float tickDelta) {\n    // Getting the matrices and dimensions\n    MatrixStack matrices = drawContext.getMatrices();\n    int scaledWidth = MinecraftClient.getInstance().getWindow().getScaledWidth();\n    int scaledHeight = MinecraftClient.getInstance().getWindow().getScaledHeight();\n\n    // Setting up the rendering state\n    RenderSystem.disableTexture();\n    RenderSystem.enableBlend();\n    RenderSystem.defaultBlendFunc();\n\n    // Get the tessellator and buffer builder\n    Tessellator tessellator = Tessellator.getInstance();\n    BufferBuilder buffer = tessellator.begin(VertexFormat.DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);\n\n    // Write to the buffer builder\n    buffer.vertex(matrices.peek().getPositionMatrix(), 20, 20, 0).color(255, 0, 0, 255).next(); // Red\n    buffer.vertex(matrices.peek().getPositionMatrix(), 5, 40, 0).color(0, 255, 0, 255).next(); // Green\n    buffer.vertex(matrices.peek().getPositionMatrix(), 35, 40, 0).color(0, 0, 255, 255).next(); // Blue\n    buffer.vertex(matrices.peek().getPositionMatrix(), 20, 60, 0).color(255, 255, 0, 255).next(); // Yellow\n\n    // Draw the buffer\n    tessellator.draw();\n\n    // Reset the rendering state\n    RenderSystem.disableBlend();\n    RenderSystem.enableTexture();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sheep Shear Event Callback Interface in Java\nDESCRIPTION: This code defines a custom event callback interface for when a sheep is sheared. It includes an Event instance to store callbacks, an interaction method that listeners must implement, and an invoker that processes the callbacks in order.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/events.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.event;\n\nimport net.fabricmc.fabric.api.event.Event;\nimport net.fabricmc.fabric.api.event.EventFactory;\nimport net.minecraft.entity.passive.SheepEntity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.util.ActionResult;\n\n/**\n * Callback for when a sheep is about to be sheared.\n *\n * <p>Upon return:\n * <ul>\n * <li>SUCCESS cancels further processing and shears the sheep, dropping items normally\n * <li>PASS falls back to further processing and then vanilla behavior\n * <li>FAIL cancels further processing and does not shear the sheep</ul>\n */\npublic interface SheepShearCallback {\n\n    Event<SheepShearCallback> EVENT = EventFactory.createArrayBacked(SheepShearCallback.class,\n            (listeners) -> (player, sheep) -> {\n                for (SheepShearCallback listener : listeners) {\n                    ActionResult result = listener.interact(player, sheep);\n\n                    if (result != ActionResult.PASS) {\n                        return result;\n                    }\n                }\n\n                return ActionResult.PASS;\n            });\n\n    ActionResult interact(PlayerEntity player, SheepEntity sheep);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translation for Custom Item Group (JSON)\nDESCRIPTION: Adds a translation key for the custom item group to the language file. This ensures the item group name is properly displayed in the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-item-groups.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"itemGroup.fabric_docs_reference\": \"Fabric Docs Reference\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags in FabricTagProvider in Java\nDESCRIPTION: This code demonstrates how to configure tags within the FabricTagProvider's configure method. It shows adding individual items, optional tags, and forcefully adding tags.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/tags.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void configure(RegistryWrapper.WrapperLookup arg) {\n    getOrCreateTagBuilder(FRUIT)\n            .add(Items.APPLE)\n            .add(Items.GOLDEN_APPLE)\n            .addOptionalTag(new Identifier(\"c\", \"berries\"))\n            .forceAddTag(TagKey.of(Registries.ITEM.getKey(), new Identifier(\"c\", \"citrus\")));\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing a JSON BlockPos in Java\nDESCRIPTION: Shows how to deserialize a JsonElement back into a BlockPos object using BlockPos.CODEC and handling the DataResult. This example retrieves the serialized JSON value, logs it, then parses it back into a BlockPos.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// When actually writing a mod, you'll want to properly handle empty Optionals of course\nJsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// Here we have our json value, which should correspond to `[1, 2, 3]`,\n// as that's the format used by the BlockPos codec.\nLOGGER.info(\"Serialized BlockPos: {}\", json);\n\n// Now we'll deserialize the JsonElement back into a BlockPos\nDataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);\n\n// Again, we'll just grab our value from the result\nBlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();\n\n// And we can see that we've successfully serialized and deserialized our BlockPos!\nLOGGER.info(\"Deserialized BlockPos: {}\", pos);\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Keys for Custom Loot Tables\nDESCRIPTION: Shows how to create registry keys for your custom loot tables which can be referenced when placing loot tables in the world.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/data-generation/loot-tables.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ModLootTables {\n\tpublic static final RegistryKey<LootTable> EXAMPLE_CHEST = RegistryKey.of(RegistryKeys.LOOT_TABLE, new Identifier(\"example\", \"chests/example_chest\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Armor Items in Java\nDESCRIPTION: Shows how to create and register armor items using the custom armor material and calculated durability values.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/custom-armor.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item GUIDITE_HELMET = registerItem(\"guidite_helmet\",\n    new ArmorItem(ModArmorMaterials.GUIDITE, ArmorItem.Type.HELMET,\n        new Item.Settings().maxDamage(ModArmorMaterials.GUIDITE.getDurability(ArmorItem.Type.HELMET))));\n\npublic static final Item GUIDITE_CHESTPLATE = registerItem(\"guidite_chestplate\",\n    new ArmorItem(ModArmorMaterials.GUIDITE, ArmorItem.Type.CHESTPLATE,\n        new Item.Settings().maxDamage(ModArmorMaterials.GUIDITE.getDurability(ArmorItem.Type.CHESTPLATE))));\n\npublic static final Item GUIDITE_LEGGINGS = registerItem(\"guidite_leggings\",\n    new ArmorItem(ModArmorMaterials.GUIDITE, ArmorItem.Type.LEGGINGS,\n        new Item.Settings().maxDamage(ModArmorMaterials.GUIDITE.getDurability(ArmorItem.Type.LEGGINGS))));\n\npublic static final Item GUIDITE_BOOTS = registerItem(\"guidite_boots\",\n    new ArmorItem(ModArmorMaterials.GUIDITE, ArmorItem.Type.BOOTS,\n        new Item.Settings().maxDamage(ModArmorMaterials.GUIDITE.getDurability(ArmorItem.Type.BOOTS))));\n```\n\n----------------------------------------\n\nTITLE: Applying Status Effect via Command in MCFunction\nDESCRIPTION: Shows how to apply the custom status effect using the /effect command in-game or in a function file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/effects.md#2025-04-05_snippet_4\n\nLANGUAGE: mcfunction\nCODE:\n```\neffect give @p fabric-docs-reference:tater\n```\n\n----------------------------------------\n\nTITLE: Drawing Borders with DrawContext in Java\nDESCRIPTION: Shows how to use DrawContext.drawBorder() to outline a rectangle with a specified border color.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/draw-context.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncontext.fill(10, 10, 100, 100, 0xFF0000FF);\ncontext.drawBorder(10, 10, 100, 100, 0xFFFFFFFF);\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de ListNode serializado en JSON\nDESCRIPTION: Muestra cómo se vería una estructura ListNode serializada en formato JSON, representando una lista enlazada con tres nodos.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/es_es/develop/codecs.md#2025-04-05_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": 2,\n  \"next\": {\n    \"value\": 3,\n    \"next\" : {\n      \"value\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FabricTagProvider Class for Items\nDESCRIPTION: This snippet shows how to create a tag provider class by extending FabricTagProvider<T> with Item as the type parameter. The provider is initialized with the output path, DataGenerator instance, CompletableFuture for the registries, and the registry key for Items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/tags.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceItemTagProvider extends FabricTagProvider<Item> {\n    public FabricDocsReferenceItemTagProvider(FabricDataOutput output, CompletableFuture<RegistryWrapper.WrapperLookup> registriesFuture) {\n        super(output, RegistryKeys.ITEM, registriesFuture);\n    }\n\n    @Override\n    protected void configure(RegistryWrapper.WrapperLookup arg) {\n        // We will add tag generation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Complete Codec for a Custom Class\nDESCRIPTION: Shows how to construct a complete codec for a custom class using RecordCodecBuilder. This example builds a codec for the CoolBeansClass by combining codecs for each field and specifying getters and constructor.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n    Codec.INT.fieldOf(\"beans_amount\").forGetter(CoolBeansClass::getBeansAmount),\n    Registries.ITEM.getCodec().fieldOf(\"bean_type\").forGetter(CoolBeansClass::getBeanType),\n    BlockPos.CODEC.listOf().fieldOf(\"bean_positions\").forGetter(CoolBeansClass::getBeanPositions)\n    // Up to 16 fields can be declared here\n).apply(instance, CoolBeansClass::new));\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Model for Data Generation\nDESCRIPTION: Creates a custom Model instance that represents the parent block model for vertical slabs, with TextureKey definitions for the block textures.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nprivate static final Model VERTICAL_SLAB = Model.block(\"vertical_slab\", TextureKey.TOP, TextureKey.BOTTOM, TextureKey.SIDE);\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Armor Materials in Java\nDESCRIPTION: Demonstrates how to create and initialize a class for custom armor materials. This should be called before registering armor items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/items/custom-armor.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Within the ModArmorMaterials class\npublic static void initialize() {};\n```\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onInitialize() {\n  ModArmorMaterials.initialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Block Break Notification with Mixin in Java\nDESCRIPTION: Sets up a mod entrypoint that tracks the tools players use to break blocks. This implementation uses a HashMap to store player-tool mappings and demonstrates how to track player actions for custom advancement criteria.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceDatagenAdvancement implements ModInitializer {\n    private static final HashMap<UUID, Item> PLAYER_TOOLS = new HashMap<>();\n\n    @Override\n    public void onInitialize() {\n        ServerBlockBreakEvents.AFTER.register((world, player, pos, state, blockEntity) -> {\n            if (PLAYER_TOOLS.containsKey(player.getUuid())) {\n                Item item = PLAYER_TOOLS.get(player.getUuid());\n                // Test prints to show our custom criterion working\n                player.sendMessage(Text.of(\"You broke a block with \" + item.getTranslationKey()));\n            }\n        });\n\n        ServerPlayConnectionEvents.JOIN.register((handler, sender, server) -> \n            PLAYER_TOOLS.put(handler.player.getUuid(), Items.AIR));\n\n        UseBlockCallback.EVENT.register((player, world, hand, hitResult) -> {\n            if (player instanceof ServerPlayerEntity && !world.isClient() && hand == Hand.MAIN_HAND) {\n                PLAYER_TOOLS.put(player.getUuid(), player.getMainHandStack().getItem());\n            }\n            return ActionResult.PASS;\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Scissor Manager for Clipping in Minecraft Rendering\nDESCRIPTION: This code demonstrates how to use DrawContext's scissor manager to limit rendering to a specific rectangular area. It shows enabling a scissor region, rendering content within it, and then disabling the scissor effect.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/draw-context.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Enable the scissor manager\nthis.drawContext.enableScissor(10, 120, 110, 220);\n\n// Draw a gradient that would normally fill the entire screen\n// but is clipped to the scissor region\nthis.drawContext.fill(0, 0, this.width, this.height, 0xFF000000, 0xFFFF0000, 0xFFFFFFFF, 0xFF0000FF);\n\n// Disable the scissor manager\nthis.drawContext.disableScissor();\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Use Fabric Loader JUnit\nDESCRIPTION: This code configures Gradle's test task to use Fabric Loader JUnit as the test runner, enabling the execution of tests that require Minecraft's environment.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/automatic-testing.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypedActionResult to Pass Current Item Stack\nDESCRIPTION: This snippet demonstrates how to return a pass result with the current item stack when handling an item interaction event. This indicates to the game that nothing should change with the item stack.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/items/custom-item-interactions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nTypedActionResult.pass(user.getStackInHand(hand))\n```\n\n----------------------------------------\n\nTITLE: Creating a TagKey for Items\nDESCRIPTION: This snippet demonstrates how to create a TagKey for Items. The TagKey is used as an identifier for the tag and specifies both the type of registry objects included in the tag and the tag's identifier.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/tags.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate static final TagKey<Item> CONCRETE = TagKey.of(RegistryKeys.ITEM, new Identifier(\"fabric-docs\", \"concrete\"));\n```\n\n----------------------------------------\n\nTITLE: Définition d'une Classe Java pour Démonstration de Codec Personnalisé\nDESCRIPTION: Exemple de classe Java 'CoolBeansClass' utilisée pour démontrer la création d'un codec personnalisé.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/fr_fr/develop/codecs.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class CoolBeansClass {\n\n    private final int beansAmount;\n    private final Item beanType;\n    private final List<BlockPos> beanPositions;\n\n    public CoolBeansClass(int beansAmount, Item beanType, List<BlockPos> beanPositions) {...}\n\n    public int getBeansAmount() { return this.beansAmount; }\n    public Item getBeanType() { return this.beanType; }\n    public List<BlockPos> getBeanPositions() { return this.beanPositions; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Block Families with Texture Pool\nDESCRIPTION: Demonstrates how to register a complete block family to use the same texture set, allowing for consistent appearance across all block variants.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/data-generation/block-models.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static final BlockFamily RUBY_FAMILY = BlockFamily.builder(ModBlocks.RUBY_BLOCK)\n        .stairs(ModBlocks.RUBY_STAIRS)\n        .slab(ModBlocks.RUBY_SLAB)\n        .wall(ModBlocks.RUBY_WALL)\n        .fence(ModBlocks.RUBY_FENCE)\n        .fenceGate(ModBlocks.RUBY_FENCE_GATE)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Modpack Platform Links in Markdown\nDESCRIPTION: Lists major platforms where users can find premade Fabric modpacks, formatted as a markdown list.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/faq.md#2025-04-05_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [Modrinth](https://modrinth.com/modpacks?g=categories:%27fabric%27)\n- [CurseForge](https://www.curseforge.com/minecraft/search?class=modpacks&gameVersionTypeId=4)\n- [Feed The Beast](https://www.feed-the-beast.com/ftb-app)\n- [Technic](https://www.technicpack.net/modpacks)\n```\n\n----------------------------------------\n\nTITLE: Defining Equipment Model for Custom Armor in JSON\nDESCRIPTION: Creates a JSON equipment model definition for custom armor. Specifies the model type and texture locations for different armor pieces.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-armor.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"humanoid\",\n  \"textures\": {\n    \"armor\": \"fabric-docs-reference:entity/equipment/humanoid/guidite\",\n    \"leggings\": \"fabric-docs-reference:entity/equipment/humanoid_leggings/guidite\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Complete Texture with DrawContext\nDESCRIPTION: Example of drawing an entire texture using DrawContext with explicit texture dimensions\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/draw-context.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ncontext.drawTexture(TEXTURE, 10, 10, 32, 32, 0, 0, 32, 32, 32, 32);\n```\n\n----------------------------------------\n\nTITLE: Initializing Minecraft Registries for Unit Tests\nDESCRIPTION: Code to properly initialize Minecraft registries for unit tests to prevent registry-related errors.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/automatic-testing.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@[code lang=java transcludeWith=:::automatic-testing:7](@/reference/latest/src/test/java/com/example/docs/codec/BeanTypeTest.java)\n```\n\n----------------------------------------\n\nTITLE: Defining Block States in JSON\nDESCRIPTION: Specifies the block state definition for a custom block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/blocks/first-block.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"\": {\n      \"model\": \"fabric-docs-reference:block/condensed_dirt\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Screen with Previous Screen Reference in Minecraft\nDESCRIPTION: Shows how to open a custom screen while storing the current screen as a reference. This enables returning to the previous screen when closing the custom screen.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nScreen currentScreen = MinecraftClient.getInstance().currentScreen;\nMinecraftClient.getInstance().setScreen(\n  new CustomScreen(Text.empty(), currentScreen)\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Shaped Recipes in Fabric\nDESCRIPTION: Creates shaped crafting recipes using the ShapedRecipeJsonBuilder. This example demonstrates how to create a recipe for crafting a ruby block from 9 rubies in a square pattern.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/recipes.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// This will create a recipe that turns 9 rubies into a ruby block\nShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, FabricDocsReferenceItemsAndBlocks.RUBY_BLOCK)\n        .pattern(\"###\")\n        .pattern(\"###\")\n        .pattern(\"###\")\n        .input('#', FabricDocsReferenceItemsAndBlocks.RUBY)\n        .criterion(hasItem(FabricDocsReferenceItemsAndBlocks.RUBY),\n                conditionsFromItem(FabricDocsReferenceItemsAndBlocks.RUBY))\n        .offerTo(exporter);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Codec with RecordCodecBuilder\nDESCRIPTION: Example of creating a custom codec for the CoolBeansClass using RecordCodecBuilder to combine multiple field codecs. The code shows how to map each field to its getter method and specify the constructor.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/codecs.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n    Codec.INT.fieldOf(\"beans_amount\").forGetter(CoolBeansClass::getBeansAmount),\n    Registries.ITEM.getCodec().fieldOf(\"bean_type\").forGetter(CoolBeansClass::getBeanType),\n    BlockPos.CODEC.listOf().fieldOf(\"bean_positions\").forGetter(CoolBeansClass::getBeanPositions)\n    // El máximo de miembros que se pueden declarar aquí es 16\n).apply(instance, CoolBeansClass::new));\n```\n\n----------------------------------------\n\nTITLE: Creating Armor Item Model JSON in Fabric\nDESCRIPTION: JSON model file for a guidite helmet item that uses a parent generated item model with a custom texture. Similar models need to be created for other armor pieces.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-armor.md#2025-04-05_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_helmet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Model JSON for Minecraft\nDESCRIPTION: JSON file that defines the block model using the cube_all model type, which applies the same texture to all sides of the block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/first-block.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"minecraft:block/cube_all\",\n  \"textures\": {\n    \"all\": \"fabric-docs-reference:block/condensed_dirt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Command in Fabric\nDESCRIPTION: Demonstrates how to register a simple command using the CommandRegistrationCallback in Fabric.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/basics.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"test_command\").executes(context -> {\n    context.getSource().sendFeedback(() -> Text.literal(\"Hello from test command!\"), false);\n    return Command.SINGLE_SUCCESS;\n}));\n```\n\n----------------------------------------\n\nTITLE: Drawing Entire Texture with DrawContext in Java\nDESCRIPTION: Shows how to draw an entire texture using DrawContext.drawTexture() with the RenderLayer.getGuiTextured() method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/draw-context.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ncontext.drawTexture(\n    TEXTURE,\n    10, 10,\n    0, 0,\n    256, 256,\n    256, 256\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering a Custom Criterion in the Game Logic in Java\nDESCRIPTION: Adds code to trigger the custom advancement criterion when a player uses a tool to break a block. This connects the game event with the advancement system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Add to the block break event handler where we're sending a message\nplayer.sendMessage(Text.of(\"You broke a block with \" + item.getTranslationKey()));\n// Trigger our custom criterion\nModCriteria.USE_TOOL.trigger((ServerPlayerEntity) player);\n```\n\n----------------------------------------\n\nTITLE: Adding Localization Entries in JSON\nDESCRIPTION: Shows the JSON entries needed for localizing the custom item name and tooltip in the game's language files.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"item.fabric-docs-reference.counter\": \"Counter\",\n  \"item.fabric-docs-reference.counter.info\": \"Used %1$s times\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Model for Custom Tool in JSON\nDESCRIPTION: Creates a JSON model for the custom Guidite Sword, using the 'item/handheld' parent model and specifying the texture location.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-tools.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/handheld\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_sword\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Other Recipe Types in Fabric DataGen\nDESCRIPTION: Creates non-crafting recipe types such as smelting, blasting, and cooking. These recipes include additional parameters like cooking time and experience rewards.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/recipes.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// A smelting recipe that produces a ruby from ruby ore\nofferSmelting(exporter, List.of(FabricDocsReferenceItemsAndBlocks.RUBY_ORE), RecipeCategory.MISC,\n        FabricDocsReferenceItemsAndBlocks.RUBY, 0.7f, 200, \"ruby\");\n\n// A blasting recipe that also produces a ruby from ruby ore, but faster\nofferBlasting(exporter, List.of(FabricDocsReferenceItemsAndBlocks.RUBY_ORE), RecipeCategory.MISC,\n        FabricDocsReferenceItemsAndBlocks.RUBY, 0.7f, 100, \"ruby\");\n\n// A recipe for cooking our custom food\nofferCookingRecipe(exporter, RecipeSerializer.CAMPFIRE_COOKING,\n        SmokingRecipeSerializer.INSTANCE,\n        200, FabricDocsReferenceItemsAndBlocks.RAW_FOOD, FabricDocsReferenceItemsAndBlocks.COOKED_FOOD,\n        0.35f);\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Pair Codec Serialization\nDESCRIPTION: The resulting JSON structure when serializing data using a pair codec, showing how the two field names from the original codecs are maintained in the output.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"i_am_number\": 23,\n  \"this_statement_is_false\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Built-in Suggestions in Java\nDESCRIPTION: This code demonstrates the execution logic for a command that uses built-in suggestions. It retrieves the 'sound' argument value and plays the corresponding sound to the player.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/commands/suggestions.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate static int executeCommandWithSuggestions(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {\n    ServerCommandSource source = context.getSource();\n    ServerPlayerEntity player = source.getPlayerOrThrow();\n\n    String sound = StringArgumentType.getString(context, \"sound\");\n\n    // Converting our string to an Identifier so we can use it as a sound event. For some commands, you may need to do this.\n    Identifier soundId = new Identifier(sound);\n\n    // Playing the sound to the player.\n    source.getWorld().playSound(null, player.getBlockPos(), RegistryEntry.of(SoundEvent.of(soundId)), SoundCategory.MASTER, 1f, 1f);\n\n    source.sendFeedback(() -> Text.literal(\"Playing sound: \" + sound), false);\n\n    return Command.SINGLE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Item Model JSON for a Block Item\nDESCRIPTION: JSON file for the item model of a block, which uses the parent block model to maintain visual consistency between placed blocks and inventory items.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/first-block.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"fabric-docs-reference:block/condensed_dirt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Recursive Codec for Linked List in Java\nDESCRIPTION: Demonstrates how to create a recursive Codec for a singly-linked list using Codec.recursive.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic record ListNode(int value, ListNode next) {}\n\nCodec<ListNode> codec = Codec.recursive(\n  \"ListNode\", // a name for the codec\n  selfCodec -> {\n    // Here, `selfCodec` represents the `Codec<ListNode>`, as if it was already constructed\n    // This lambda should return the codec we wanted to use from the start,\n    // that refers to itself through `selfCodec`\n    return RecordCodecBuilder.create(instance ->\n      instance.group(\n        Codec.INT.fieldOf(\"value\").forGetter(ListNode::value),\n         // the `next` field will be handled recursively with the self-codec\n        Codecs.createStrictOptionalFieldCodec(selfCodec, \"next\", null).forGetter(ListNode::next)\n      ).apply(instance, ListNode::new)\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Drawing Text using DrawContext in Minecraft\nDESCRIPTION: This code shows how to render text on the screen using DrawContext.drawText(). It demonstrates text rendering with position, color, and shadow parameters to display \"Hello World\" text.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/rendering/draw-context.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Draw text\nthis.drawContext.drawText(this.textRenderer, \"Hello World\", 10, 340, 0xFFFFFFFF, true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Registry for Custom Criteria\nDESCRIPTION: Defines a registry class for custom advancement criteria, containing static instances that can be accessed throughout the mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ModCriteria {\n    public static final UseToolCriterion USE_TOOL = CriteriaTriggers.register(new UseToolCriterion());\n\n    // will add more later\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Payload with the Registry\nDESCRIPTION: This code shows how to register a custom S2C (Server-to-Client) payload type with the payload registry. Registration must be done during initialization for the packet system to recognize the payload.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/networking.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPayloadTypeRegistry.playS2C().register(SummonLightningS2CPayload.PACKET_ID, SummonLightningS2CPayload.CODEC);\n```\n\n----------------------------------------\n\nTITLE: Cloning Fabric Example Mod Repository (Shell)\nDESCRIPTION: This command clones the Fabric example mod repository into a new folder called 'my-mod-project' using Git. It's used for manual project creation when the Fabric Template Mod Generator cannot be used.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/getting-started/creating-a-project.md#2025-04-05_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/FabricMC/fabric-example-mod/ my-mod-project\n```\n\n----------------------------------------\n\nTITLE: Creating an Advancement Using the Custom Criterion in Java\nDESCRIPTION: Adds an advancement to the provider that uses the custom criterion. This advancement is triggered when a player uses any tool to break a block.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprivate void generateCustomCriterionAdvancement(Consumer<Advancement> consumer) {\n    var useToolDisplay = new AdvancementDisplay(\n            Items.IRON_PICKAXE.getDefaultStack(),\n            Text.translatable(\"advancements.fabric-docs-reference.use_tool.title\"),\n            Text.translatable(\"advancements.fabric-docs-reference.use_tool.description\"),\n            new Identifier(\"textures/gui/advancements/backgrounds/adventure.png\"),\n            AdvancementFrame.TASK,\n            true,\n            true,\n            false\n    );\n\n    Advancement useTool = Advancement.Builder.create()\n            .display(useToolDisplay)\n            .criterion(\"used_tool\", ModCriteria.USE_TOOL.criterionConditionsFactory(new UseToolCriterion.Conditions(ContextAwarePredicate.createEmpty())))\n            .build(consumer, \"fabric-docs-reference:use_tool\");\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Map Codec Serialization\nDESCRIPTION: Shows the JSON output resulting from serializing data using a Map Codec with Identifiers as keys.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example:number\": 23,\n  \"example:the_cooler_number\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Food Item with Effects in Java\nDESCRIPTION: This code creates a custom food item called 'Suspicious Substance' with specific properties. It's always edible, considered a snack, and applies a Poison II effect for 6 seconds when consumed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/zh_cn/develop/items/food.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final Item SUSPICIOUS_SUBSTANCE = registerItem(\"suspicious_substance\",\n    new Item(new FabricItemSettings()\n        .food(new FoodComponent.Builder()\n            .alwaysEdible()\n            .snack()\n            .statusEffect(new StatusEffectInstance(StatusEffects.POISON, 120, 1), 1.0f)\n            .build()\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom EngineSoundInstance in Java\nDESCRIPTION: Extends AbstractDynamicSoundInstance to create a specific sound instance for an engine. It defines conditions for stopping the sound and applies custom sound modulations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class EngineSoundInstance extends AbstractDynamicSoundInstance {\n    private final BlockPos pos;\n\n    public EngineSoundInstance(World world, BlockPos pos) {\n        super(\n                new BlockEntityDynamicSoundSource(world, pos),\n                SoundEvents.BLOCK_BEACON_AMBIENT,\n                SoundCategory.BLOCKS,\n                DynamicSoundManager.getInstance()::onSoundFinished\n        );\n        this.pos = pos;\n    }\n\n    @Override\n    protected void applyModulations() {\n        if (this.soundSource.getStress() <= 0) {\n            this.stopSound();\n        }\n    }\n\n    @Override\n    public boolean shouldAlwaysPlay() {\n        return true;\n    }\n\n    @Override\n    public boolean canPlay() {\n        return super.canPlay() && !this.soundSource.getWorld().getBlockState(this.pos).isAir();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Parameterized Criterion in Game Logic\nDESCRIPTION: Updates the game code to trigger the parameterized criterion, passing the current count of tool uses.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n// Trigger our parameterized criterion!\nModCriteria.PARAMETERIZED_USE_TOOL.trigger(player, toolItem, 5); // Example: pass the count 5\n```\n\n----------------------------------------\n\nTITLE: Generating Chest Loot Tables in Fabric\nDESCRIPTION: Demonstrates how to generate a chest loot table with multiple pools and items in a Fabric mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/loot-tables.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nbiConsumer.accept(ModLootTables.EXAMPLE_CHEST.getValue(), LootTable.builder()\n        .pool(LootPool.builder()\n                .rolls(UniformLootNumberProvider.create(2.0F, 8.0F))\n                .with(ItemEntry.builder(Items.ACACIA_BOAT).weight(3))\n                .with(ItemEntry.builder(Items.BIRCH_BOAT).weight(3))\n                .with(ItemEntry.builder(Items.OAK_BOAT).weight(3))\n                .with(ItemEntry.builder(Items.SPRUCE_BOAT).weight(3))\n                .with(ItemEntry.builder(Items.JUNGLE_BOAT).weight(3))\n                .with(ItemEntry.builder(Items.DARK_OAK_BOAT).weight(3))\n                .with(ItemEntry.builder(Items.MANGROVE_BOAT).weight(3))\n        )\n        .pool(LootPool.builder()\n                .rolls(ConstantLootNumberProvider.create(1.0F))\n                .with(ItemEntry.builder(Items.DIAMOND)\n                        .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1.0F, 3.0F))))\n        ));\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Types in Java\nDESCRIPTION: Code to obtain a RegistryKey for a custom damage type in Java. This defines a constant that can be used throughout the mod to reference the custom damage type.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n:::1\npublic class FabricDocsReferenceDamageTypes {\n\tpublic static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE, new Identifier(\"fabric-docs-reference\", \"tater\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Damage Types in Java\nDESCRIPTION: Code to obtain a RegistryKey for a custom damage type in Java. This defines a constant that can be used throughout the mod to reference the custom damage type.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/entities/damage-types.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n:::1\npublic class FabricDocsReferenceDamageTypes {\n\tpublic static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE, new Identifier(\"fabric-docs-reference\", \"tater\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advancements with Parameterized Criteria in Java\nDESCRIPTION: Creates advancements that use the parameterized criterion, requiring different numbers of tool uses. This demonstrates how to create tiered advancements with custom requirements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nprivate void generateParameterizedCriterionAdvancement(Consumer<Advancement> consumer) {\n    var useToolFiveTimesDisplay = new AdvancementDisplay(\n            Items.GOLDEN_PICKAXE.getDefaultStack(),\n            Text.translatable(\"advancements.fabric-docs-reference.use_tool_5_times.title\"),\n            Text.translatable(\"advancements.fabric-docs-reference.use_tool_5_times.description\"),\n            new Identifier(\"textures/gui/advancements/backgrounds/adventure.png\"),\n            AdvancementFrame.TASK,\n            true,\n            true,\n            false\n    );\n\n    Advancement useToolFiveTimes = Advancement.Builder.create()\n            .display(useToolFiveTimesDisplay)\n            .criterion(\"used_tool_5_times\", ModCriteria.PARAMETERIZED_USE_TOOL.criterionConditionsFactory(\n                    new ParameterizedUseToolCriterion.Conditions(ContextAwarePredicate.createEmpty(), 5)))\n            .build(consumer, \"fabric-docs-reference:use_tool_5_times\");\n\n    var useToolTenTimesDisplay = new AdvancementDisplay(\n            Items.DIAMOND_PICKAXE.getDefaultStack(),\n            Text.translatable(\"advancements.fabric-docs-reference.use_tool_10_times.title\"),\n            Text.translatable(\"advancements.fabric-docs-reference.use_tool_10_times.description\"),\n            new Identifier(\"textures/gui/advancements/backgrounds/adventure.png\"),\n            AdvancementFrame.CHALLENGE,\n            true,\n            true,\n            false\n    );\n\n    Advancement useToolTenTimes = Advancement.Builder.create()\n            .display(useToolTenTimesDisplay)\n            .parent(useToolFiveTimes)\n            .criterion(\"used_tool_10_times\", ModCriteria.PARAMETERIZED_USE_TOOL.criterionConditionsFactory(\n                    new ParameterizedUseToolCriterion.Conditions(ContextAwarePredicate.createEmpty(), 10)))\n            .rewards(AdvancementRewards.Builder.experience(500).build())\n            .build(consumer, \"fabric-docs-reference:use_tool_10_times\");\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Counting Bean Serialization\nDESCRIPTION: Displays the JSON output for serializing a CountingBean using the Registry Dispatch Codec.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/codecs.md#2025-04-05_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"example:counting_bean\",\n  \"counting_number\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Enchantment Translation Entry\nDESCRIPTION: Localization entry for the custom enchantment in the en_us.json language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-enchantment-effects.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"enchantment.FabricDocsReference.thundering\": \"Thundering\"\n```\n\n----------------------------------------\n\nTITLE: Minecraft Command for Giving Item with Custom Component\nDESCRIPTION: Demonstrates the Minecraft command to give a player the custom item with a predefined value for the click count component.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-data-components.md#2025-04-05_snippet_4\n\nLANGUAGE: mcfunction\nCODE:\n```\n/give @p fabric-docs-reference:counter[fabric-docs-reference:click_count=5]\n```\n\n----------------------------------------\n\nTITLE: Block Loot Table Generation Examples\nDESCRIPTION: Examples of generating different types of block loot tables with various conditions and drops.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/loot-tables.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\naddDrop(ModBlocks.BASIC_BLOCK);\naddDrop(ModBlocks.ORE_BLOCK, oreDrops(ModBlocks.ORE_BLOCK, ModItems.RAW_ORE));\naddDrop(ModBlocks.CROP_BLOCK, cropDrops(ModBlocks.CROP_BLOCK, ModItems.CROP_ITEM, ModItems.SEEDS,\n        BlockStatePropertyLootCondition.builder(ModBlocks.CROP_BLOCK)\n                .properties(StateManager.Builder.create().add(CropBlock.AGE))\n));\n```\n\n----------------------------------------\n\nTITLE: Using DynamicSoundManager in Network Handling (Java)\nDESCRIPTION: Demonstrates how to use the DynamicSoundManager to start and stop custom dynamic SoundInstances in response to network events.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class ReceiveS2C {\n    public static void onStartEngine(MinecraftClient client, ClientPlayNetworkHandler handler, PacketByteBuf buf, PacketSender responseSender) {\n        int entityId = buf.readInt();\n        client.execute(() -> {\n            if (client.world == null) return;\n            Entity entity = client.world.getEntityById(entityId);\n            if (entity instanceof EngineSoundSource engineEntity) {\n                DynamicSoundManager.getInstance().playSound(new EngineSoundInstance(\n                    engineEntity,\n                    ModSounds.ENGINE,\n                    SoundCategory.BLOCKS,\n                    sound -> DynamicSoundManager.getInstance().stopSound(sound)\n                ));\n            }\n        });\n    }\n\n    public static void onStopEngine(MinecraftClient client, ClientPlayNetworkHandler handler, PacketByteBuf buf, PacketSender responseSender) {\n        int entityId = buf.readInt();\n        client.execute(() -> {\n            if (client.world == null) return;\n            Entity entity = client.world.getEntityById(entityId);\n            if (entity instanceof EngineSoundSource engineEntity) {\n                engineEntity.stopSound();\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Criterion Trigger in Java\nDESCRIPTION: Shows how to create a custom criterion trigger for tracking tool usage when breaking blocks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/advancements.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceDatagenAdvancement implements ModInitializer {\n    private static final Map<PlayerEntity, Integer> BLOCK_BREAK_COUNT = new HashMap<>();\n\n    @Override\n    public void onInitialize() {\n        ModCriteria.init();\n\n        ServerPlayerEvents.AFTER_RESPAWN.register((oldPlayer, newPlayer, alive) -> {\n            BLOCK_BREAK_COUNT.remove(oldPlayer);\n            BLOCK_BREAK_COUNT.put(newPlayer, 0);\n        });\n\n        ServerWorldEvents.LOAD.register((server, world) -> {\n            world.getPlayers().forEach(player -> BLOCK_BREAK_COUNT.put(player, 0));\n        });\n\n        UseBlockCallback.EVENT.register((player, world, hand, hitResult) -> {\n            if (world instanceof ServerWorld && player instanceof ServerPlayerEntity) {\n                ItemStack heldItem = player.getStackInHand(hand);\n                BLOCK_BREAK_COUNT.putIfAbsent((PlayerEntity) player, 0);\n                int count = BLOCK_BREAK_COUNT.get(player) + 1;\n                BLOCK_BREAK_COUNT.put((PlayerEntity) player, count);\n                player.sendMessage(Text.literal(\"You used \" + heldItem.getItem().getName().getString() + \" \" + count + \" times\"), false);\n                ModCriteria.USE_TOOL.trigger((ServerPlayerEntity) player, heldItem);\n                ModCriteria.PARAMETERIZED_USE_TOOL.trigger((ServerPlayerEntity) player, heldItem, count);\n            }\n            return ActionResult.PASS;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Damage in TaterBlock\nDESCRIPTION: Full implementation of a custom block that applies the 'Tater' damage type when entities step on it.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/damage-types.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class TaterBlock extends Block {\n    public TaterBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n        if (!world.isClient && entity instanceof LivingEntity) {\n            DamageSource damageSource = world.getDamageSources().create(FabricDocsReferenceDamageTypes.TATER);\n            if (damageSource != null) {\n                entity.damage(damageSource, 5.0f);\n            }\n        }\n        super.onSteppedOn(world, pos, state, entity);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chest Loot Table Provider Implementation\nDESCRIPTION: Base class implementation for generating chest loot tables extending SimpleFabricLootTableProvider.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/loot-tables.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceChestLootTableProvider extends SimpleFabricLootTableProvider {\n    public FabricDocsReferenceChestLootTableProvider(FabricDataOutput output) {\n        super(output, LootContextTypes.CHEST);\n    }\n\n    @Override\n    public void accept(BiConsumer<Identifier, LootTable.Builder> exporter) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Criterion and Conditions in Java\nDESCRIPTION: Demonstrates the creation of a custom criterion (UseToolCriterion) and its associated conditions for tracking tool usage.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/advancements.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class UseToolCriterion extends AbstractCriterion<UseToolCriterion.Conditions> {\n    static final Identifier ID = new Identifier(\"fabric-docs-reference\", \"use_tool\");\n\n    @Override\n    public Identifier getId() {\n        return ID;\n    }\n\n    @Override\n    public Conditions conditionsFromJson(JsonObject obj, LootContextPredicate playerPredicate, DeserializationContext predicateDeserializer) {\n        return new Conditions(playerPredicate);\n    }\n\n    public void trigger(ServerPlayerEntity player, ItemStack tool) {\n        this.trigger(player, conditions -> conditions.test(player, tool));\n    }\n\n    public static class Conditions extends AbstractCriterionConditions {\n        private static final Codec<Conditions> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n                LootContextPredicate.CODEC.fieldOf(\"player\").forGetter(AbstractCriterionConditions::playerPredicate)\n        ).apply(instance, Conditions::new));\n\n        public Conditions(LootContextPredicate playerPredicate) {\n            super(ID, playerPredicate);\n        }\n\n        public boolean test(ServerPlayerEntity player, ItemStack tool) {\n            return true;\n        }\n\n        @Override\n        public JsonObject toJson(SerializationContext context) {\n            JsonObject jsonObject = super.toJson(context);\n            return jsonObject;\n        }\n\n        @Override\n        public Codec<? extends AbstractCriterionConditions> codec() {\n            return CODEC;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to a Minecraft Loot Table in Java\nDESCRIPTION: Adds eggs as a potential drop to the coal ore loot table by creating a new loot pool with an item entry. This demonstrates how to extend existing loot tables without breaking compatibility with other mods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/events.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Register a callback to modify the coal ore loot table\nLootTableEvents.MODIFY.register((resourceManager, lootManager, id, tableBuilder, source) -> {\n    if (Blocks.COAL_ORE.getLootTableId().equals(id)) {\n        // Create a new pool with a single entry that drops an egg\n        LootPool.Builder poolBuilder = LootPool.builder()\n            .with(ItemEntry.builder(Items.EGG)) // Add an egg as a drop\n            .rolls(ConstantLootNumberProvider.create(1));\n        tableBuilder.pool(poolBuilder);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Generation Configuration in Gradle for Fabric API\nDESCRIPTION: Demonstrates advanced configuration options for data generation in Fabric API. This includes setting output directory, run configuration creation, source set creation, mod ID, validation, resource addition, and client compilation.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/loom/fabric-api.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureDataGeneration {\n  // Contains the output directory where generated data files will be stored.\n  // Defaults to `src/main/generated`\n  outputDirectory = file(\"src/generated/resources\")\n\n  // Contains a boolean indicating whether a run configuration should be created for the data generation process.\n  // Defaults to `true`\n  createRunConfiguration = true\n\n  // Contains a boolean indicating whether a new source set should be created for the data generation process.\n  // This is useful if you do not want your datagen code to be exported in your mod jar.\n  // Defaults to `false`\n  createSourceSet = true\n\n  // Contains a string representing the mod ID associated with the data generation process. This must be set if `createSourceSet` is true.\n  // This must be the mod id of the mod used for datagen in the datagen source set and not your main mod id.\n  modId = \"example-datagen\"\n\n  // Contains a boolean indicating whether strict validation is enabled.\n  // Defaults to `false`\n  strictValidation = true\n\n  // Contains a boolean indicating whether the generated resources will be automatically added to the main source set.\n  // Defaults to `true`\n  addToResources = true\n\n  // Contains a boolean indicating whether data generation will be compiled and run with the client.\n  // Defaults to `false`\n  client = true\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Java 21 on Fedora\nDESCRIPTION: Command to install Java 21 OpenJDK on Fedora using dnf.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/installing-java/linux.md#2025-04-05_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install java-21-openjdk\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Playback in Custom Item Interactions\nDESCRIPTION: Example showing how to implement sound playback when using a custom item on entities and blocks. The code demonstrates using playSound() with a LivingEntity object to play vanilla sound events.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/sounds/using-sounds.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic ActionResult useOnEntity(ItemStack stack, PlayerEntity user, LivingEntity entity, Hand hand) {\n    if (!entity.getWorld().isClient) {\n        entity.getWorld().playSound(null, entity.getBlockPos(), SoundEvents.BLOCK_COPPER_PLACE, SoundCategory.BLOCKS, 1f, 1f);\n    }\n    return ActionResult.SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for AbstractDynamicSoundInstance Class in Java\nDESCRIPTION: Declares fields and enumerations for the AbstractDynamicSoundInstance class including transition states, durations, and sound property limits. These properties manage the dynamic sound behavior.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.sound;\n\nimport com.example.docs.sound.instance.DynamicSoundSource;\nimport com.example.docs.sound.instance.SoundInstanceCallback;\nimport net.minecraft.client.sound.AbstractSoundInstance;\nimport net.minecraft.sound.SoundCategory;\nimport net.minecraft.util.Identifier;\nimport net.minecraft.util.math.MathHelper;\nimport net.minecraft.util.math.Vec3d;\n\npublic abstract class AbstractDynamicSoundInstance extends AbstractSoundInstance {\n    public enum TransitionState {\n        INTRO,\n        LOOP,\n        OUTRO\n    }\n\n    private final SoundInstanceCallback callback;\n    private final Object id;\n    protected final DynamicSoundSource source;\n    private TransitionState state = TransitionState.INTRO;\n    private int introTicks = 20;\n    private int outroTicks = 20;\n    private float minVolume = 0.0F;\n    private float maxVolume = 1.0F;\n    private float minPitch = 1.0F;\n    private float maxPitch = 1.0F;\n    private boolean done = false;\n    private int ticks = 0;\n    private int loopTicks = 0;\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Custom Criteria in Advancement Generation in Java\nDESCRIPTION: Demonstrates how to use the parameterized custom criteria to create an advancement that requires using a tool 5 times.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/advancements.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nAdvancement.Builder.create()\n        .display(new AdvancementDisplay(\n                Items.DIAMOND_PICKAXE,\n                Text.literal(\"Tool Enthusiast\"),\n                Text.literal(\"Use any tool 5 times\"),\n                null,\n                AdvancementFrame.TASK,\n                true,\n                true,\n                false\n        ))\n        .criterion(\"use_tool_5_times\", ModCriteria.PARAMETERIZED_USE_TOOL.conditions(new ParameterizedUseToolCriterion.Conditions(LootContextPredicate.ALWAYS_TRUE, 5)))\n        .build(consumer, \"fabric-docs-reference:use_tool_5_times\");\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Death Message in Language File\nDESCRIPTION: Adds a custom death message for the 'tater' damage type in the mod's language file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/pt_br/develop/entities/damage-types.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"death.attack.tater\": \"%1$s was spudded\"\n```\n\n----------------------------------------\n\nTITLE: Initializing DataGenerator Provider\nDESCRIPTION: Code showing how to initialize data generators in the DataGeneratorEntrypoint interface.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/loot-tables.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceBlockLootTableProvider::new);\npack.addProvider(FabricDocsReferenceChestLootTableProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Creating an Advancement with Parameterized Criterion\nDESCRIPTION: Shows how to create an advancement using a parameterized criterion, specifying required counts for completion.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n// Create an advancement with our parameterized criterion\nAdvancement.Builder.create()\n        .display(\n                Items.DIAMOND_PICKAXE,\n                Text.literal(\"Tool Master\"),\n                Text.literal(\"Use a tool 5 times\"),\n                null,\n                AdvancementFrame.CHALLENGE, true, true, false\n        )\n        // Use our parameterized criterion\n        .criterion(\n                \"use_tool_5_times\",\n                // Use the static instance from ModCriteria\n                ModCriteria.PARAMETERIZED_USE_TOOL.conditionsFromPredicates(\n                        // Don't need any special player predicates\n                        EntityPredicate.Builder.create().build(),\n                        // Require 5 uses\n                        5\n                )\n        )\n        // Set parent\n        .parent(getDirt)\n        .build(consumer, \"fabric-docs-reference\" + \"/use_tool_5_times\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SheepShearCallback in Java\nDESCRIPTION: This snippet defines a custom event callback interface for sheep shearing. It includes an Event instance and a method for implementing the response, using ActionResult for event handling control.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/events.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface SheepShearCallback {\n    Event<SheepShearCallback> EVENT = EventFactory.createArrayBacked(SheepShearCallback.class,\n            (listeners) -> (player, sheep) -> {\n                for (SheepShearCallback listener : listeners) {\n                    ActionResult result = listener.interact(player, sheep);\n\n                    if (result != ActionResult.PASS) {\n                        return result;\n                    }\n                }\n\n                return ActionResult.PASS;\n            });\n\n    ActionResult interact(PlayerEntity player, SheepEntity sheep);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic JUnit Test for Minecraft Mods\nDESCRIPTION: Example of a simple JUnit test class for testing BeanType functionality with Fabric Loader JUnit.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/automatic-testing.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Test\nvoid testBeanTypeCreated() {\n    BeanType.Builder<Bean> beanBuilder = BeanType.builder(Bean.class);\n    BeanType<Bean> beanType = beanBuilder.build();\n    Assertions.assertNotNull(beanType);\n    Assertions.assertNotNull(beanType.codec());\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JRE on Arch Linux\nDESCRIPTION: Command to install the latest Java Runtime Environment (JRE) on Arch Linux using pacman.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/installing-java/linux.md#2025-04-05_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S jre-openjdk\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Key for Custom Item Group\nDESCRIPTION: JSON configuration for providing a translation key for the custom item group, allowing it to display properly in the game with the name \"Fabric Docs Reference\" instead of showing an untranslated key.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-item-groups.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"itemGroup.fabric_docs_reference\": \"Fabric Docs Reference\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mod Initializer Sound Registration\nDESCRIPTION: Implementation of sound registration in the mod's initializer using the helper class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/custom.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceSounds implements ModInitializer {\n    @Override\n    public void onInitialize() {\n        CustomSounds.init();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the Criteria Initialization Method in Java\nDESCRIPTION: Adds the initialization call for custom criteria to the mod's main initialization method, ensuring they are registered when the game starts.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic void onInitialize() {\n    // ... existing code\n    \n    // Initialize our custom criteria\n    ModCriteria.init();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fabric Loader JUnit Dependencies in Gradle\nDESCRIPTION: Gradle configuration to add Fabric Loader JUnit as a test implementation dependency in the build.gradle file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/automatic-testing.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // Other dependencies...\n    testImplementation \"net.fabricmc:fabric-loader-junit:$(fabricJUnitVersion)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a List Codec from an Existing Codec in Java\nDESCRIPTION: This code demonstrates how to create a Codec for a List of objects using an existing Codec, specifically for a List of BlockPos objects.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCodec<List<BlockPos>> listCodec = BlockPos.CODEC.listOf();\n```\n\n----------------------------------------\n\nTITLE: Creating a List Codec from an Existing Codec in Java\nDESCRIPTION: This code demonstrates how to create a Codec for a List of objects using an existing Codec, specifically for a List of BlockPos objects.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCodec<List<BlockPos>> listCodec = BlockPos.CODEC.listOf();\n```\n\n----------------------------------------\n\nTITLE: Creating a List Codec from an Existing Codec in Java\nDESCRIPTION: This code demonstrates how to create a Codec for a List of objects using an existing Codec, specifically for a List of BlockPos objects.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/codecs.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCodec<List<BlockPos>> listCodec = BlockPos.CODEC.listOf();\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Loot Table Provider Class\nDESCRIPTION: Demonstrates how to create a block loot table provider by extending FabricBlockLootTableProvider. This class will generate loot tables for blocks in your mod.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/data-generation/loot-tables.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceBlockLootTableProvider extends FabricBlockLootTableProvider {\n\tpublic FabricDocsReferenceBlockLootTableProvider(FabricDataOutput dataOutput) {\n\t\tsuper(dataOutput);\n\t}\n\n\t@Override\n\tpublic void generate() {\n\t\t// Loot table generation code will go here\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Custom Event with Mixin in Java\nDESCRIPTION: This Mixin demonstrates how to activate the custom SheepShearCallback event by injecting it into the SheepEntity's interactMob method when shearing conditions are met.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/events.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Mixin(SheepEntity.class)\npublic class SheepEntityMixin {\n    @Inject(method = \"interactMob\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/passive/SheepEntity;sheared(Lnet/minecraft/sound/SoundCategory;)V\"), cancellable = true)\n    private void onSheared(PlayerEntity player, Hand hand, CallbackInfoReturnable<ActionResult> cir) {\n        ActionResult result = SheepShearCallback.EVENT.invoker().interact(player, (SheepEntity) (Object) this);\n\n        if (result != ActionResult.PASS) {\n            cir.setReturnValue(result);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JUnit Test Class for Fabric Mod\nDESCRIPTION: This example shows a simple test class for testing BeanType codec functionality. It demonstrates how to create and execute unit tests within the Fabric environment.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/automatic-testing.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Test\nvoid testSimpleBean() {\n    // First, for a bean type\n    Bean bean = new Bean(5, 10.0f);\n    CompoundTag tag = new CompoundTag();\n    tag.putInt(\"i\", 5);\n    tag.putFloat(\"f\", 10.0f);\n    \n    // Check that the beans encode to the same dynamic\n    Dynamic<Tag> encodedBean = BeanType.CODEC.encodeStart(NbtOps.INSTANCE, bean).getOrThrow(false, e -> {});\n    Dynamic<Tag> serializedBean = new Dynamic<>(NbtOps.INSTANCE, tag);\n    assertEquals(serializedBean.getValue(), encodedBean.getValue());\n    \n    // Check that the bean decodes correctly\n    Bean decodedBean = BeanType.CODEC.decode(serializedBean).getOrThrow(false, e -> {}).getFirst();\n    assertEquals(bean, decodedBean);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Java on Debian/Ubuntu\nDESCRIPTION: Commands for installing Java 21 JDK on Debian or Ubuntu-based systems using apt package manager.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/installing-java/linux.md#2025-04-05_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo apt install openjdk-21-jdk\n```\n\n----------------------------------------\n\nTITLE: Registrazione degli Oggetti nel Gruppo Personalizzato in Java\nDESCRIPTION: Utilizza l'evento ItemGroupEvents.modifyEntriesEvent per aggiungere gli oggetti della mod al gruppo di oggetti personalizzato.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/items/custom-item-groups.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void registerItemGroups() {\n    ItemGroupEvents.modifyEntriesEvent(ITEM_GROUP).register((content) -> {\n        content.add(RUBY);\n        content.add(EXAMPLE_ITEM);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sound Registration Helper Class in Java\nDESCRIPTION: Implementation of a helper class that organizes sound registration in a cleaner way, providing static access to custom SoundEvents.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/custom.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomSounds {\n    private static SoundEvent registerSoundEvent(String name) {\n        Identifier id = new Identifier(FabricDocsReference.MOD_ID, name);\n        return Registry.register(Registries.SOUND_EVENT, id, SoundEvent.of(id));\n    }\n\n    public static final SoundEvent METAL_WHISTLE = registerSoundEvent(\"metal_whistle\");\n\n    public static void register() { // This method is just here to make sure the class is loaded\n        FabricDocsReference.LOGGER.info(\"Registering sounds for \" + FabricDocsReference.MOD_ID);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Block Model Provider in Fabric\nDESCRIPTION: Base class setup for generating block models and item models in Fabric. Extends FabricModelProvider and implements required abstract methods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/block-models.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void generateBlockStateModels(BlockStateModelGenerator blockStateModelGenerator) {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Class for Custom Codec Implementation\nDESCRIPTION: A class definition for CoolBeansClass that will be used to demonstrate creating custom codecs. The class contains fields for bean amount, type, and positions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/develop/codecs.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CoolBeansClass {\n\n    private final int beansAmount;\n    private final Item beanType;\n    private final List<BlockPos> beanPositions;\n\n    public CoolBeansClass(int beansAmount, Item beanType, List<BlockPos> beanPositions) {...}\n\n    public int getBeansAmount() { return this.beansAmount; }\n    public Item getBeanType() { return this.beanType; }\n    public List<BlockPos> getBeanPositions() { return this.beanPositions; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block States for a Pillar Block in JSON\nDESCRIPTION: Creates a blockstate JSON file that defines how a pillar block should appear based on its axis orientation (x, y, or z). It specifies different model rotations for each axis.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/blockstates.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"axis=x\": {\n      \"model\": \"fabric-docs-reference:block/condensed_oak_log_horizontal\",\n      \"x\": 90,\n      \"y\": 90\n    },\n    \"axis=y\": {\n      \"model\": \"fabric-docs-reference:block/condensed_oak_log\"\n    },\n    \"axis=z\": {\n      \"model\": \"fabric-docs-reference:block/condensed_oak_log_horizontal\",\n      \"x\": 90\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Registry-Dependent Class Initialization\nDESCRIPTION: This code snippet shows how to initialize Minecraft registries for testing registry-dependent classes in unit tests.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/automatic-testing.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@BeforeAll\nstatic void setup() {\n    Bootstrap.initialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sheep Shear Event Callback Interface\nDESCRIPTION: Implementation of a custom event callback interface for sheep shearing with array-backed event handling and ActionResult return values.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/events.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface SheepShearCallback {\n    Event<SheepShearCallback> EVENT = EventFactory.createArrayBacked(SheepShearCallback.class,\n            (listeners) -> (player, sheep) -> {\n                for (SheepShearCallback listener : listeners) {\n                    ActionResult result = listener.interact(player, sheep);\n\n                    if (result != ActionResult.PASS) {\n                        return result;\n                    }\n                }\n\n                return ActionResult.PASS;\n            });\n\n    ActionResult interact(PlayerEntity player, SheepEntity sheep);\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Test Reports\nDESCRIPTION: GitHub Actions workflow configuration to upload test reports as artifacts when tests fail during CI builds.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/automatic-testing.md#2025-04-05_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Store reports\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: reports\n    path: |\n      **/build/reports/\n      **/build/test-results/\n```\n\n----------------------------------------\n\nTITLE: Mixin Crash Stack Trace Example\nDESCRIPTION: Example of how a mixin crash appears in the stack trace, showing the modid and handler name pattern.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/troubleshooting/crash-reports.md#2025-04-05_snippet_3\n\nLANGUAGE: log\nCODE:\n```\n... net.minecraft.class_2248.method_3821$$$modid$handlerName() ...\n```\n\n----------------------------------------\n\nTITLE: Using Custom Damage Type in Block Implementation\nDESCRIPTION: Complete implementation of a custom block that applies the 'tater' damage type when entities step on it.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/entities/damage-types.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.damage;\n\nimport net.minecraft.block.Block;\nimport net.minecraft.block.BlockState;\nimport net.minecraft.entity.Entity;\nimport net.minecraft.entity.LivingEntity;\nimport net.minecraft.entity.damage.DamageSource;\nimport net.minecraft.registry.Registries;\nimport net.minecraft.registry.entry.RegistryEntry;\nimport net.minecraft.util.Identifier;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.world.World;\n\npublic class TaterBlock extends Block {\n    public TaterBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {\n        if (entity instanceof LivingEntity livingEntity) {\n            DamageSource damageSource = new DamageSource(\n                    world.getRegistryManager().get(Registries.DAMAGE_TYPE.getKey()).getEntry(FabricDocsReferenceDamageTypes.TATER)\n            );\n            livingEntity.damage(damageSource, 5.0f);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sounds Helper Class Implementation\nDESCRIPTION: Helper class for organizing and managing multiple sound events with initialization and registration methods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/sounds/custom.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomSounds {\n    public static SoundEvent METAL_WHISTLE = registerSoundEvent(\"metal_whistle\");\n\n    private static SoundEvent registerSoundEvent(String name) {\n        Identifier id = new Identifier(FabricDocsReference.MOD_ID, name);\n        return Registry.register(Registries.SOUND_EVENT, id, SoundEvent.of(id));\n    }\n\n    public static void init() {\n        // Method called in mod initializer\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Door and Trapdoor Models\nDESCRIPTION: Generates models for doors and trapdoors with separate textures for top and bottom parts.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/block-models.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nblockStateModelGenerator.registerDoor(RUBY_DOOR);\nblockStateModelGenerator.registerTrapdoor(RUBY_TRAPDOOR);\n```\n\n----------------------------------------\n\nTITLE: Adding an Initialization Method for Custom Criteria in Java\nDESCRIPTION: Adds an initialization method to the criteria registry to ensure all criteria are properly registered when the mod starts. This method is called during mod initialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic static void init() {\n    // This method only exists to make sure the class is loaded\n    // and the criteria are registered when called.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Java 17 JDK on Fedora for Development\nDESCRIPTION: Command to install the Java 17 Development Kit on Fedora, needed for mod development or other Java development tasks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/installing-java/linux.md#2025-04-05_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install java-17-openjdk-devel\n```\n\n----------------------------------------\n\nTITLE: Adding Fabric Loader JUnit Dependencies in Gradle\nDESCRIPTION: Gradle configuration block for adding Fabric Loader JUnit testing dependencies to your Fabric mod project.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/automatic-testing.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@[code lang=groovy transcludeWith=:::automatic-testing:1](@/reference/build.gradle)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sheep Shear Callback in Java\nDESCRIPTION: This interface defines a callback for when a sheep is sheared. It includes an Event instance that contains all listeners and a method to handle the interaction with ActionResult responses.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/it_it/develop/events.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.event;\n\nimport net.fabricmc.fabric.api.event.Event;\nimport net.fabricmc.fabric.api.event.EventFactory;\nimport net.minecraft.entity.passive.SheepEntity;\nimport net.minecraft.entity.player.PlayerEntity;\nimport net.minecraft.util.ActionResult;\n\n/**\n * Called when a player shears a sheep.\n *\n * <p>Upon return:\n * <ul>\n * <li>SUCCESS cancels further processing and causes success</li>\n * <li>PASS falls back to further processing</li>\n * <li>FAIL cancels further processing and causes failure</li>\n * </ul>\n */\npublic interface SheepShearCallback {\n    Event<SheepShearCallback> EVENT = EventFactory.createArrayBacked(SheepShearCallback.class,\n        (listeners) -> (player, sheep) -> {\n            for (SheepShearCallback listener : listeners) {\n                ActionResult result = listener.interact(player, sheep);\n\n                if (result != ActionResult.PASS) {\n                    return result;\n                }\n            }\n\n            return ActionResult.PASS;\n        }\n    );\n\n    ActionResult interact(PlayerEntity player, SheepEntity sheep);\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Test Reporting\nDESCRIPTION: This YAML snippet configures GitHub Actions to upload test reports as artifacts when a build fails, making it easier to diagnose issues in CI/CD pipelines.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/automatic-testing.md#2025-04-05_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Store reports\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: reports\n    path: |\n      **/build/reports/\n      **/build/test-results/\n```\n\n----------------------------------------\n\nTITLE: Locating Minecraft Game Directory on macOS\nDESCRIPTION: The path to the Minecraft game directory on macOS where logs are stored in the logs folder.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/troubleshooting/uploading-logs.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n~/Library/Application Support/minecraft\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Fabric Loader JUnit\nDESCRIPTION: Gradle configuration code that sets up how to use Fabric Loader JUnit for running tests.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/automatic-testing.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n@[code lang=groovy transcludeWith=:::automatic-testing:2](@/reference/latest/build.gradle)\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Sounds in Mod Initializer\nDESCRIPTION: This Java code shows how to initialize all custom sounds in the mod's main initializer class using the helper class.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/de_de/develop/sounds/custom.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReferenceSounds implements ModInitializer {\n    @Override\n    public void onInitialize() {\n        CustomSounds.init();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Loot Table Providers in Fabric Datagen\nDESCRIPTION: Demonstrates how to register block, chest, and entity loot table providers in the DataGeneratorEntrypoint's onInitializeDataGenerator method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/loot-tables.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceBlockLootTableProvider::new);\npack.addProvider(FabricDocsReferenceChestLootTableProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Registering the Advancement Provider in DataGeneratorEntrypoint\nDESCRIPTION: Adds the advancement provider to a Fabric DataGeneratorEntrypoint implementation to register it for data generation when the datagen tasks are run.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/advancements.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceAdvancementProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Tool Item Model JSON Configuration\nDESCRIPTION: JSON model configuration for a custom tool item, using the handheld parent model and defining the texture location.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-tools.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"parent\": \"item/handheld\",\n    \"textures\": {\n        \"layer0\": \"fabric-docs-reference:item/guidite_sword\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Test Reports\nDESCRIPTION: YAML configuration to store test reports as artifacts in GitHub Actions when tests fail.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/automatic-testing.md#2025-04-05_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Store reports\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: reports\n    path: |\n      **/build/reports/\n      **/build/test-results/\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Sheep Shear Event Implementation in Java\nDESCRIPTION: Demonstrates registering a listener for the custom sheep shear event that drops a diamond instead of wool when a sheep is sheared. This example showcases a complete custom event implementation usage.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/events.md#2025-04-05_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Register our sheep shear callback\nSheepShearCallback.EVENT.register((player, sheep) -> {\n    // Drop a diamond instead of wool\n    if (!sheep.world.isClient) {\n        sheep.dropItem(Items.DIAMOND, 1);\n    }\n    \n    // Play shear sound and spawn particles (because we still want those effects)\n    return ActionResult.SUCCESS;\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Registry-Dependent Test Cases\nDESCRIPTION: Examples of test methods that fail due to uninitialized Minecraft registries when testing codec functionality.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ru_ru/develop/automatic-testing.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Testing item stack codec\n@Test\nvoid testItemStackCodec() {\n    ItemStack stack = new ItemStack(Items.DIAMOND_SWORD);\n    Codec<ItemStack> codec = ItemStack.CODEC;\n    Assertions.assertEquals(stack, codec.decode(codec.encode(stack).getOrThrow(false, s -> {}).getFirst()).getOrThrow(false, s -> {}).getFirst());\n}\n\n// Testing registry codec\n@Test\nvoid testRegistryCodec() {\n    RegistryEntry.Reference<Item> entry = Registries.ITEM.getEntry(Items.DIAMOND_SWORD);\n    RegistryCodecs.entryCodec(RegistryKeys.ITEM).encode(entry, DynamicOps.noop(), null);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BlockEntityRenderer for Counter Block in Java\nDESCRIPTION: This code implements a BlockEntityRenderer for a CounterBlockEntity, with a constructor that takes a BlockEntityRendererFactory.Context parameter, which provides rendering utilities like TextRenderer.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/blocks/block-entity-renderer.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.rendering.blockentity;\n\nimport com.example.docs.block.entity.CounterBlockEntity;\nimport net.minecraft.client.font.TextRenderer;\nimport net.minecraft.client.render.VertexConsumerProvider;\nimport net.minecraft.client.render.block.entity.BlockEntityRenderer;\nimport net.minecraft.client.render.block.entity.BlockEntityRendererFactory;\nimport net.minecraft.client.util.math.MatrixStack;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.math.RotationAxis;\n\npublic class CounterBlockEntityRenderer implements BlockEntityRenderer<CounterBlockEntity> {\n    private final TextRenderer textRenderer;\n\n    public CounterBlockEntityRenderer(BlockEntityRendererFactory.Context ctx) {\n        this.textRenderer = ctx.getTextRenderer();\n    }\n\n    @Override\n    public void render(CounterBlockEntity entity, float tickDelta, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay) {\n        matrices.push();\n\n        // Do rendering\n\n        matrices.pop();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds with LivingEntity in Java\nDESCRIPTION: Example of playing sounds using LivingEntity's playSound method. This approach is simpler and requires fewer parameters than the World approach, only needing the SoundEvent, volume, and pitch.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/sounds/using-sounds.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// This approach uses the entity itself to play the sound\nentity.playSound(SoundEvents.BLOCK_COPPER_PLACE, 1f, 1f);\n```\n\n----------------------------------------\n\nTITLE: Creating a FabricLanguageProvider for Translation Generation in Java\nDESCRIPTION: Demonstrates how to create a language provider by extending FabricLanguageProvider. This class handles generating English translations for the mod and shows implementation of required methods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/translations.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.docs.datagen;\n\nimport com.example.docs.FabricDocsReference;\nimport com.example.docs.item.ModItems;\nimport net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;\nimport net.fabricmc.fabric.api.datagen.v1.provider.FabricLanguageProvider;\nimport net.minecraft.registry.Registries;\n\npublic class FabricDocsReferenceEnglishLangProvider extends FabricLanguageProvider {\n    public FabricDocsReferenceEnglishLangProvider(FabricDataOutput dataOutput) {\n        // The second parameter is the mod id of the language provider\n        // If it's the same as your mod, you can use the convenience method provided in FabricLanguageProvider\n        super(dataOutput, FabricDocsReference.MOD_ID);\n    }\n\n    @Override\n    public void generateTranslations(TranslationBuilder translationBuilder) {\n        // Method body will be filled later\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Tests in Fabric API (Groovy)\nDESCRIPTION: Demonstrates advanced configuration options for tests in Fabric API. Includes settings for source set creation, mod ID, enabling game tests, EULA acceptance, run directory clearing, and custom username for client-side tests.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/loom/fabric-api.md#2025-04-05_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureTests {\n  // Contains a boolean indicating whether a new source set should be created for the tests.\n  // Defaults to `false`\n  createSourceSet = true\n\n  // Contains a string representing the mod ID associated with the tests. This must be set if `createSourceSet` is true.\n  // This must be the mod id of the mod used for tests in the gametest source set and not your main mod id.\n  modId = \"example-tests\"\n\n  // Contains a boolean indicating whether a run configuration will be created for the server side game tests, using Vanilla Game Test framework.\n  // Defaults to `true`\n  enableGameTests = true\n\n  // Contains a boolean indicating whether a run configuration will be created for the client side game tests, using the Fabric API Client Test framework.\n  // Defaults to `true`\n  enableClientGameTests = true\n\n  // Contains a boolean indicating whether the eula has been accepted. By enabling this you agree to the Minecraft EULA located at https://aka.ms/MinecraftEULA.\n  // Defaults to `false`\n  eula = true\n\n  // Contains a boolean indicating whether the run directories should be cleared before running the tests.\n  // This only works when `enableClientGameTests` is `true`.\n  // Defaults to `true`\n  clearRunDirectory = true\n\n  // Contains a string representing the username to use for the client side game tests.\n  // Defaults to `Player0`\n  username = \"Username\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tool Material Class in Java\nDESCRIPTION: Implementation of a custom tool material called 'GuiditeMaterial' that defines properties like durability, mining speed, attack damage, and repair ingredients.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-tools.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class GuiditeMaterial implements ToolMaterial {\n    private static final int DURABILITY = 500;\n    private static final float MINING_SPEED_MULTIPLIER = 7.0F;\n    private static final float ATTACK_DAMAGE = 2.0F;\n    private static final int MINING_LEVEL = 2;\n    private static final int ENCHANTABILITY = 14;\n\n    public static final GuiditeMaterial INSTANCE = new GuiditeMaterial();\n\n    @Override\n    public int getDurability() {\n        return DURABILITY;\n    }\n\n    @Override\n    public float getMiningSpeedMultiplier() {\n        return MINING_SPEED_MULTIPLIER;\n    }\n\n    @Override\n    public float getAttackDamage() {\n        return ATTACK_DAMAGE;\n    }\n\n    @Override\n    public int getMiningLevel() {\n        return MINING_LEVEL;\n    }\n\n    @Override\n    public int getEnchantability() {\n        return ENCHANTABILITY;\n    }\n\n    @Override\n    public Ingredient getRepairIngredient() {\n        return Ingredient.ofItems(ModItems.GUIDITE);\n    }\n```\n\n----------------------------------------\n\nTITLE: Failed Test Attempt Accessing Minecraft Registry\nDESCRIPTION: This code shows an example of a test that fails because it tries to access Minecraft registries before they are initialized, illustrating a common issue in unit testing Fabric mods.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/automatic-testing.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Test\nvoid testItemStackBean() throws CommandSyntaxException {\n    // Now, for a bean type backed by a registry\n    ItemStackBean bean = new ItemStackBean(new ItemStack(Items.DIAMOND, 5));\n    // Test code that would fail due to uninitialized registries\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parameterized Translatable Text in Java\nDESCRIPTION: Demonstrates how to create translatable Text objects with parameters, allowing for dynamic content in translations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/text-and-translations.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nText translatable = Text.translatable(\"my_mod.text.hello\", player.getDisplayName());\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Tests in Fabric API (Groovy)\nDESCRIPTION: Sets up basic tests for Fabric API. This creates two new run configurations, one for server-side game tests and another for client-side game tests.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/loom/fabric-api.md#2025-04-05_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureTests()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Production Run Task in Gradle\nDESCRIPTION: This snippet demonstrates how to configure client-specific options for a production run task in Fabric Loom. It includes settings for using XVFB and configuring tracy-capture for profiling.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/loom/production-run-tasks.md#2025-04-05_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.register(\"prodClient\", net.fabricmc.loom.task.prod.ClientProductionRunTask) {\n    // Whether to use XVFB to run the game, using a virtual framebuffer. This is useful for headless CI environments.\n    // Defaults to true only on Linux and when the \"CI\" environment variable is set.\n    // XVFB must be installed, on Debian-based systems you can install it with: `apt install xvfb`\n    useXVFB = true\n\n    // Optionally configure the tracy-capture executable.\n    tracy {\n        // The path to the tracy-capture executable.\n        tracyCapture = file(\"tracy-capture\")\n\n        // The output path of the captured tracy profile.\n        output = file(\"profile.tracy\")\n\n        // The maximum number of seconds to wait for tracy-capture to stop on its own before killing it.\n        // Defaults to 10 seconds.\n        maxShutdownWaitSeconds = 10\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Previous Screen Return in Custom Screen for Fabric Mods\nDESCRIPTION: This code snippet shows how to modify the CustomScreen class to support returning to the previous screen when closed. It adds a constructor parameter for the previous screen and updates the close method accordingly.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomScreen extends Screen {\n    private final Screen parent;\n\n    public CustomScreen(Text title, Screen parent) {\n        super(title);\n        this.parent = parent;\n    }\n\n    @Override\n    protected void init() {\n        super.init();\n\n        // Add a label\n        this.addDrawableChild(new TextWidget(width / 2, height / 2 - 10, 200, 20, Text.literal(\"This is a custom screen!\"), textRenderer));\n\n        // Add a button\n        this.addDrawableChild(ButtonWidget.builder(Text.literal(\"Close\"), button -> close())\n                .dimensions(width / 2 - 100, height / 2 + 10, 200, 20)\n                .build());\n    }\n\n    @Override\n    public void close() {\n        this.client.setScreen(this.parent);\n    }\n\n    @Override\n    public void render(DrawContext context, int mouseX, int mouseY, float delta) {\n        this.renderBackground(context);\n        super.render(context, mouseX, mouseY, delta);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Loom Gradle Plugin Options and Dependencies\nDESCRIPTION: Comprehensive example demonstrating how to configure the Fabric Loom Gradle plugin for modding Minecraft. Includes settings for access wideners, remapping, run configurations, mixin options, decompiler settings, environment splitting, and dependency management with various scopes.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/options.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nloom {\n // Set the access widener path, see https://fabricmc.net/wiki/tutorial:accesswideners\n accessWidenerPath = file(\"src/main/resources/modid.accesswidener\")\n\n // Add additional log4j config files.\n log4jConfigs.from(file(\"log4j.xml\"))\n\n // When enabled the output archives will be automatically remapped.\n remapArchives = true\n // When enabled the -dev jars in the *Elements configurations will be replaced by the remapped jars\n setupRemappedVariants = true\n // When enabled transitive access wideners will be applied from dependencies.\n enableTransitiveAccessWideners = true\n // When enabled log4j will only be on the runtime classpath, forcing the use of SLF4j.\n runtimeOnlyLog4j = false\n\n // When set only server related features and jars will be setup.\n serverOnlyMinecraftJar()\n // When set the minecraft jar will be split into common and clientonly. Highly experimental, fabric-loader does not support this option yet.\n splitMinecraftJar()\n\n // Used to configure existing or new run configurations\n runs {\n  client {\n   // Add a VM arg\n   vmArgs \"-Dexample=true\"\n   // Add a JVM property\n   property(\"example\", \"true\")\n   // Add a program arg\n   programArg \"--example\"\n   // Add an environment variable\n   environmentVariable(\"example\", \"true\")\n   // The environment (or side) to run, usually client or server.\n   environment = \"client\"\n   // The full name of the run configuration, i.e. 'Minecraft Client'. By default this is determined from the base name.\n   configName = \"Minecraft Client\"\n   // The default main class of the run configuration. This will be overridden if using a mod loader with a fabric_installer.json file.\n   defaultMainClass = \"\"\n   // The run directory for this configuration, relative to the root project directory.\n   runDir = \"run\"\n   // The source set to run, commonly set to sourceSets.test\n   source = sourceSets.main\n   // When true a run configuration file will be generated for IDE's. By default only set to true for the root project.\n   ideConfigGenerated = true\n\n   // Configure run config with the default client options.\n   client()\n\n   // Configure run config with the default server options.\n   server()\n  }\n\n  // Example of creating a basic run config for tests\n  testClient {\n   // Copies settings from another run configuration.\n   inherit client\n\n   configName = \"Test Minecraft Client\"\n   source = sourceSets.test\n  }\n\n    // Example of removing the built-in server configuration\n    remove server\n }\n\n // Configure all run configs to generate ide run configurations. Useful for sub projects.\n runConfigs.configureEach {\n  ideConfigGenerated = true\n }\n\n // Used to configure mixin options or apply to additional source sets.\n mixin {\n  // When disabled tiny remapper will be used to remap Mixins instead of the AP. Experimental.\n  useLegacyMixinAp = true\n  // Set the default refmap name\n  defaultRefmapName = \"example.refmap.json\"\n\n  // See https://github.com/FabricMC/fabric-loom/blob/dev/0.11/src/main/java/net/fabricmc/loom/api/MixinExtensionAPI.java for options to add additional source sets\n }\n\n // Configure or add new decompilers\n decompilers {\n  // Configure a default decompiler, either cfr, fernflower or vineflower\n  cfr {\n   // Pass additional options to the decompiler\n   options += [\n    key: \"value\"\n   ]\n   // Set the amount of memory in megabytes used when forking the JVM\n   memory = 4096\n   // Set the maximum number of threads that the decompiler can use.\n   maxThreads = 8\n  }\n }\n\n interfaceInjection {\n  // When enabled injected interfaces from dependencies will be applied.\n  enableDependencyInterfaceInjection = true\n }\n\n // Splits the Minecraft jar and incoming dependencies across the main (common) and client only source sets.\n // This provides compile time safety for accessing client only code.\n splitEnvironmentSourceSets()\n\n // This mods block is used group mods that are made up of multiple classpath entries.\n mods {\n  modid {\n   // When using split sources you should add the main and client source set\n   sourceSet sourceSets.main\n   sourceSet sourceSets.client\n  }\n }\n\n // Create modExampleImplementation and related configurations that remap mods.\n createRemapConfigurations(sourceSets.example)\n}\n\nremapJar {\n // Set the input jar for the task, also valid for remapSourcesJar\n inputFile = file(\"example.jar\")\n // Set the source namespace, also valid for remapSourcesJar\n sourceNamespace = \"named\"\n // Set the target namespace, also valid for remapSourcesJar\n targetNamespace = \"intermediary\"\n // Add additional jar files to the remap classpath, also valid for remapSourcesJar\n classpath.from file(\"classpath.jar\")\n\n // Add a nested mod jar to this task, the include configuration should be used for maven libraries and mods.\n nestedJars.from file(\"nested.jar\")\n // When enabled nested jars will be included with the output jar.\n addNestedDependencies = true\n}\n\ndependencies {\n // Set the Minecraft version.\n minecraft \"com.mojang:minecraft:1.18.1\"\n\n // Use mappings from maven.\n mappings \"net.fabricmc:yarn:1.18.1+build.22:v2\"\n\n // Use the official Mojang mappings\n mappings loom.officialMojangMappings()\n\n // Layered mappings using official Mojang mappings and Parchment.\n mappings loom.layered() {\n  officialMojangMappings()\n  // Use Parchment mappings. NOTE: Parchment maven must be manually added. (https://maven.parchmentmc.org)\n  parchment(\"org.parchmentmc.data:parchment-1.17.1:2021.09.05@zip\")\n }\n\n // Remap a mod from maven and apply to Gradle's implementation configuration\n // (Minor detail: it's not exactly applied *to* the configuration, but a clone of it intended for mod dependencies)\n modImplementation \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n // Remap a mod from maven and apply to Gradle's api configuration\n modApi \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n // Remap a mod from maven and apply to Gradle's compileOnly configuration\n modCompileOnly \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n // Remap a mod from maven and apply to Gradle's compileOnlyApi configuration\n modCompileOnlyApi \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n // Remap a mod from maven and apply to Gradle's runtimeOnly configuration\n modRuntimeOnly \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n // Remap a mod from maven and apply to loom's localRuntime configuration.\n // Behaves like runtimeOnly but is not exposed in to dependents. A bit like testRuntimeOnly but for mods.\n modLocalRuntime \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n // Include a mod jar in the remapped jar. Not transitive.\n include \"example:example-mod:1.1.1\"\n\n // Include a non-mod library jar in the remapped jar. A dummy mod will be generated. Not transitive.\n include \"example:example-lib:1.1.1\"\n\n // Helper to aid with depending on a specific Fabric API version.\n modImplementation fabricApi.module(\"fabric-api-base\", \"0.46.2+1.18\")\n\n // Depend on a loom subproject by using the namedElements configuration.\n implementation project(path: \":name\", configuration: \"namedElements\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Codec for Parameterized Criterion\nDESCRIPTION: Creates an updated codec that handles both the player predicate and the new required times parameter for serialization.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/advancements.md#2025-04-05_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<Conditions> CODEC = RecordCodecBuilder.create(instance -> instance.group(\n        // Player predicate\n        EntityPredicate.LOOT_CONTEXT_PREDICATE_CODEC.fieldOf(\"player\").forGetter(Conditions::playerPredicate),\n        // New field for required times\n        ExtraCodecs.POSITIVE_INT.fieldOf(\"times\").forGetter(conditions -> conditions.requiredTimes)\n).apply(instance, Conditions::new));\n```\n\n----------------------------------------\n\nTITLE: Using TypedActionResult to Pass Current ItemStack\nDESCRIPTION: This snippet demonstrates how to return a pass result with the current item stack, indicating that nothing should change about the item when used.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/items/custom-item-interactions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nTypedActionResult.pass(user.getStackInHand(hand))\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible Code Regions in Java\nDESCRIPTION: Demonstrates how to create custom collapsible code regions using region and endregion comments. These regions help organize code and can be collapsed in the IDE.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/ide-tips-and-tricks.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// region collapse block name\n    ModBlocks.initialize();\n    ModBlockEntities.registerBlockEntityTypes();\n    ModItems.initialize();\n    ModSounds.initializeSounds();\n    ModParticles.initialize();\n// endregion\n```\n\n----------------------------------------\n\nTITLE: Defining Translations in JSON\nDESCRIPTION: Example of a language file (en_us.json) containing translations for the keys used in translatable Text objects.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/text-and-translations.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_mod.text.hello\": \"Hello!\",\n  \"my_mod.text.bye\": \"Goodbye :(\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registrazione del Gruppo di Oggetti Personalizzato in Java\nDESCRIPTION: Crea un gruppo di oggetti personalizzato definendo un attributo statico finale nella classe degli oggetti e registrandolo tramite l'evento di registrazione dei gruppi di oggetti.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/items/custom-item-groups.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static final RegistryKey<ItemGroup> ITEM_GROUP = RegistryKey.of(RegistryKeys.ITEM_GROUP, new Identifier(FabricDocsReference.MOD_ID, \"fabric_docs_reference\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Blockstate Definition JSON for Minecraft Block\nDESCRIPTION: Erstellt eine JSON-Blockstate-Definition, die festlegt, welches Modell für den Block verwendet werden soll, unabhängig vom Zustand.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/blocks/first-block.md#2025-04-05_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variants\": {\n    \"\": {\n      \"model\": \"fabric-docs-reference:block/condensed_dirt\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Block in Fabric ModBlocks Class\nDESCRIPTION: Code for registering the CounterBlock in the ModBlocks registry class. This makes the block available in the game.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/blocks/block-entities.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final Block COUNTER_BLOCK = registerBlock(\"counter_block\",\n        new CounterBlock(FabricBlockSettings.of().strength(4.0f).requiresTool().mapColor(MapColor.IRON_GRAY)));\n```\n\n----------------------------------------\n\nTITLE: Advanced Test Configuration in Gradle for Fabric API\nDESCRIPTION: Demonstrates advanced configuration options for testing in Fabric API. This includes source set creation, mod ID setting, enabling different types of tests, EULA acceptance, run directory management, and custom username setting.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/loom/fabric-api.md#2025-04-05_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureTests {\n  // Contains a boolean indicating whether a new source set should be created for the tests.\n  // Defaults to `false`\n  createSourceSet = true\n\n  // Contains a string representing the mod ID associated with the tests. This must be set if `createSourceSet` is true.\n  // This must be the mod id of the mod used for tests in the gametest source set and not your main mod id.\n  modId = \"example-tests\"\n\n  // Contains a boolean indicating whether a run configuration will be created for the server side game tests, using Vanilla Game Test framework.\n  // Defaults to `true`\n  enableGameTests = true\n\n  // Contains a boolean indicating whether a run configuration will be created for the client side game tests, using the Fabric API Client Test framework.\n  // Defaults to `true`\n  enableClientGameTests = true\n\n  // Contains a boolean indicating whether the eula has been accepted. By enabling this you agree to the Minecraft EULA located at https://aka.ms/MinecraftEULA.\n  // Defaults to `false`\n  eula = true\n\n  // Contains a boolean indicating whether the run directories should be cleared before running the tests.\n  // This only works when `enableClientGameTests` is `true`.\n  // Defaults to `true`\n  clearRunDirectory = true\n\n  // Contains a string representing the username to use for the client side game tests.\n  // Defaults to `Player0`\n  username = \"Username\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Command Requirements for Operators\nDESCRIPTION: Shows how to add a requirement to a command so that only level 2 operators or higher can execute it.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/basics.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ndispatcher.register(CommandManager.literal(\"op_only\")\n        .requires(source -> source.hasPermissionLevel(2))\n        .executes(context -> {\n            // Command logic here\n            return Command.SINGLE_SUCCESS;\n        })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Entrypoint in Java for Fabric Mod\nDESCRIPTION: Example of a main entrypoint implementation that executes when the game starts. This demonstrates a simple logging operation using the ModInitializer interface.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/getting-started/project-structure.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FabricDocsReference implements ModInitializer {\n    @Override\n    public void onInitialize() {\n        LOGGER.info(\"Hello from Fabric Docs Reference!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependencies in Multi-Project Builds with Loom\nDESCRIPTION: Shows how to correctly reference other Loom projects in a multi-project build using the 'namedElements' configuration to ensure proper remapping.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/loom/index.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n implementation project(path: \":name\", configuration: \"namedElements\")\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Crash Report Locations - macOS Path\nDESCRIPTION: Shows the default crash report directory location for macOS Minecraft installations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/troubleshooting/crash-reports.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n~/Library/Application Support/minecraft/crash-reports\n```\n\n----------------------------------------\n\nTITLE: Configurazione della Traduzione per il Gruppo di Oggetti in JSON\nDESCRIPTION: File di traduzione JSON che definisce la chiave di traduzione per il nome del gruppo di oggetti personalizzato nell'interfaccia di gioco.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/it_it/develop/items/custom-item-groups.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"itemGroup.fabric_docs_reference\": \"Fabric Docs Reference\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Text in Java\nDESCRIPTION: Demonstrates how to apply multiple formatting options to a MutableText object using the Formatting enum.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/text-and-translations.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMutableText result = Text.literal(\"Hello World!\")\n  .formatted(Formatting.AQUA, Formatting.BOLD, Formatting.UNDERLINE);\n```\n\n----------------------------------------\n\nTITLE: Adding Item Group Translation in JSON\nDESCRIPTION: This code shows how to add a translation key to the language file for properly displaying the custom item group name in the game interface.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-item-groups.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"itemGroup.fabric_docs_reference\": \"Fabric Docs Reference\"\n}\n```\n\n----------------------------------------\n\nTITLE: Server Crash Log When Using Client-only Code\nDESCRIPTION: This log shows the error that occurs on a dedicated server when attempting to access client-only classes. The RuntimeException indicates that MinecraftClient cannot be loaded on the server environment.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/de_de/develop/networking.md#2025-04-05_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n[Server thread/FATAL]: Error executing task on Server\njava.lang.RuntimeException: Cannot load class net.minecraft.client.MinecraftClient in environment type SERVER\n```\n\n----------------------------------------\n\nTITLE: Adding Client-Specific Dependencies in Multi-Project Builds\nDESCRIPTION: Demonstrates how to add dependencies for client-specific source sets in a multi-project build structure.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/loom/index.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n clientImplementation project(\":name\").sourceSets.client.output\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Damage Type to Damage Type Tag\nDESCRIPTION: Creates a JSON file to add the 'Tater' damage type to the 'bypasses_armor' damage type tag.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/entities/damage-types.md#2025-04-05_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"fabric-docs-reference:tater\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Loom Extension in Gradle\nDESCRIPTION: This snippet demonstrates the complete configuration options for the Fabric Loom Gradle plugin. It includes settings for access wideners, log4j, remapping, run configurations, mixins, decompilers, interface injection, environment splitting, mod grouping, and dependency management.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/ko_kr/develop/loom/options.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nloom {\n accessWidenerPath = file(\"src/main/resources/modid.accesswidener\")\n\n log4jConfigs.from(file(\"log4j.xml\"))\n\n remapArchives = true\n setupRemappedVariants = true\n enableTransitiveAccessWideners = true\n runtimeOnlyLog4j = false\n\n serverOnlyMinecraftJar()\n splitMinecraftJar()\n\n runs {\n  client {\n   vmArgs \"-Dexample=true\"\n   property(\"example\", \"true\")\n   programArg \"--example\"\n   environmentVariable(\"example\", \"true\")\n   environment = \"client\"\n   configName = \"Minecraft Client\"\n   defaultMainClass = \"\"\n   runDir = \"run\"\n   source = sourceSets.main\n   ideConfigGenerated = true\n\n   client()\n\n   server()\n  }\n\n  testClient {\n   inherit client\n\n   configName = \"Test Minecraft Client\"\n   source = sourceSets.test\n  }\n\n    remove server\n }\n\n runConfigs.configureEach {\n  ideConfigGenerated = true\n }\n\n mixin {\n  useLegacyMixinAp = true\n  defaultRefmapName = \"example.refmap.json\"\n }\n\n decompilers {\n  cfr {\n   options += [\n    key: \"value\"\n   ]\n   memory = 4096\n   maxThreads = 8\n  }\n }\n\n interfaceInjection {\n  enableDependencyInterfaceInjection = true\n }\n\n splitEnvironmentSourceSets()\n\n mods {\n  modid {\n   sourceSet sourceSets.main\n   sourceSet sourceSets.client\n  }\n }\n\n createRemapConfigurations(sourceSets.example)\n}\n\nremapJar {\n inputFile = file(\"example.jar\")\n sourceNamespace = \"named\"\n targetNamespace = \"intermediary\"\n classpath.from file(\"classpath.jar\")\n\n nestedJars.from file(\"nested.jar\")\n addNestedDependencies = true\n}\n\ndependencies {\n minecraft \"com.mojang:minecraft:1.18.1\"\n\n mappings \"net.fabricmc:yarn:1.18.1+build.22:v2\"\n\n mappings loom.officialMojangMappings()\n\n mappings loom.layered() {\n  officialMojangMappings()\n  parchment(\"org.parchmentmc.data:parchment-1.17.1:2021.09.05@zip\")\n }\n\n modImplementation \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n modApi \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n modCompileOnly \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n modCompileOnlyApi \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n modRuntimeOnly \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n modLocalRuntime \"net.fabricmc.fabric-api:fabric-api:0.46.2+1.18\"\n\n include \"example:example-mod:1.1.1\"\n\n include \"example:example-lib:1.1.1\"\n\n modImplementation fabricApi.module(\"fabric-api-base\", \"0.46.2+1.18\")\n\n implementation project(path: \":name\", configuration: \"namedElements\")\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Crash Report Stack Trace\nDESCRIPTION: Example of a stack trace from a crash report, highlighting the lines that indicate the mod causing the crash.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/players/troubleshooting/crash-reports.md#2025-04-05_snippet_1\n\nLANGUAGE: log\nCODE:\n```\njava.lang.NullPointerException: Cannot invoke \"net.minecraft.class_2248.method_9539()\" because \"net.minecraft.class_2248.field_10540\" is null\n\tat snownee.jade.overlay.SimpleOverlayRenderer.renderLines(SimpleOverlayRenderer.java:55)\n\tat snownee.jade.impl.ui.OverlayRenderer.renderOverlay(OverlayRenderer.java:166)\n\tat snownee.jade.impl.ui.OverlayRenderer.render(OverlayRenderer.java:139)\n\tat net.minecraft.class_757.handler$zke000$jade$onRender(class_757.java:1088)\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Generation in build.gradle (Groovy)\nDESCRIPTION: This snippet shows how to configure data generation in the build.gradle file. It adds the fabric-loom plugin and sets up the runDatagen task.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/data-generation/setup.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n\tid 'fabric-loom'\n}\n\nloom {\n\truns {\n\t\tdatagenClient {\n\t\t\tinherit client\n\t\t\tname \"Data Generation\"\n\t\t\tvmArg \"-Dfabric-api.datagen\"\n\t\t\tvmArg \"-Dfabric-api.datagen.output-dir=${file(\"src/main/generated\")}\"\n\t\t\tvmArg \"-Dfabric-api.datagen.modid=${modid}\"\n\n\t\t\trunDir \"build/datagen\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Sections for Fabric Documentation\nDESCRIPTION: Sets up two feature sections for the documentation homepage, one for player guides and another for developer guides. Each feature includes a title, icon, description, link, and link text.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/index.md#2025-04-05_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfeatures:\n  - title: Player Guides\n    icon: 📚\n    details: Are you a player looking to use mods powered by Fabric? Our player guides have you covered. These guides will help you in downloading, installing, and troubleshooting Fabric mods.\n    link: /1.20.4/players/\n    linkText: Read More\n  - title: Developer Guides\n    icon: 🛠️\n    details: Our curated developer guides, written by the community, span a wide range of topics from setting up a development environment to more advanced topics, such as rendering and networking.\n    link: /1.20.4/develop/\n    linkText: Get Started\n\n```\n\n----------------------------------------\n\nTITLE: Enhanced Custom Screen with Previous Screen Return\nDESCRIPTION: Improved custom screen implementation that stores the previous screen to return to it when closed.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@[code lang=java transcludeWith=:::2](@/reference/1.21/src/client/java/com/example/docs/rendering/screens/CustomScreen.java)\n```\n\n----------------------------------------\n\nTITLE: Using SuggestionProvider in Command Arguments - Java\nDESCRIPTION: Shows how to attach a suggestion provider to a command argument builder. The code demonstrates using the suggests() method with a suggestion provider instance.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/suggestions.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nArgumentBuilder<ServerCommandSource, ?> argumentBuilder = argument(\"argument\", string())\n    .suggests((context, builder) -> CompletableFuture.completedFuture(builder.build()));\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Production Run Task Options in Gradle\nDESCRIPTION: This snippet demonstrates how to configure common options for both server and client production run tasks in Fabric Loom. It includes settings for mod jars, JVM arguments, program arguments, run directory, and Java toolchain.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/it_it/develop/loom/production-run-tasks.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.register(\"prodServer\", net.fabricmc.loom.task.prod.ServerProductionRunTask) {\n    // A collection of mod jars that will be used when running the game. The mods must be remapped to run with intermediary names.\n    // This uses a Gradle ConfigurableFileCollection allowing the files to come from a variety of sources.\n    mods.from file(\"mod.jar\")\n    mods.from configurations.exampleConfiguration\n\n    // A list of additional JVM arguments to pass to the game.\n    jvmArgs.add(\"-Dfabric.client.gametest\")\n\n    // A list of additional program arguments to pass to the game.\n    programArgs.add(\"--example\")\n\n    // The directory to run the game in.\n    runDir = file(\"run\")\n\n    // Specify the Java toolchain to use when running the game.\n    // Defaults to the Java version being used to run Gradle.\n    // See https://docs.gradle.org/current/userguide/toolchains.html#sec:plugins_toolchains\n    javaLauncher = javaToolchains.launcherFor {\n        languageVersion = JavaLanguageVersion.of(21)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Fabric Client and Server with Gradle\nDESCRIPTION: Gradle commands to start the Minecraft game in client or server mode for Fabric mod development.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/getting-started/launching-the-game.md#2025-04-05_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\n./gradlew runClient\n```\n\nLANGUAGE: gradle\nCODE:\n```\n./gradlew runServer\n```\n\n----------------------------------------\n\nTITLE: Running Fabric Mod with Gradle Tasks\nDESCRIPTION: Gradle commands to start Minecraft in either client or server mode for testing Fabric mods. These commands can be executed from the command line but don't provide debugging capabilities.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/getting-started/launching-the-game.md#2025-04-05_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew runClient\n./gradlew runServer\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds with World Instance in Minecraft Mod (Java)\nDESCRIPTION: This snippet shows how to play sounds using the world instance for more control. It specifies the sound event, category, position, volume, pitch, and whether it should be played globally.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/using-sounds.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncontext.getWorld().playSound(\n        null, // Player - null means not played by a specific player\n        context.getBlockPos(), // The position of the sound\n        SoundEvents.ENTITY_PILLAGER_AMBIENT, // The sound that will be played\n        SoundCategory.NEUTRAL, // The category of the sound\n        1f, // Volume\n        1f // Pitch\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Client Source Set Dependencies in Multi-project Builds\nDESCRIPTION: Demonstrates how to add dependencies for another project's client source set when using split source sets in a multi-project build. This is necessary to properly reference client-specific code.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/index.md#2025-04-05_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n clientImplementation project(\":name\").sourceSets.client.output\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading with Anchor\nDESCRIPTION: Example of adding an anchor to a Markdown heading.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/contributing.md#2025-04-05_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## This Is a Heading {#this-is-a-heading}\n```\n\n----------------------------------------\n\nTITLE: Fabric Version Support Reference\nDESCRIPTION: Code block showing the minimum supported Minecraft versions for Fabric, including both snapshots and release versions.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/faq.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n18w43b and above\n1.14 and above\n```\n\n----------------------------------------\n\nTITLE: Accessing ServerCommandSource in a Command Lambda\nDESCRIPTION: Demonstrates how to access the ServerCommandSource from the CommandContext within a Command lambda. This allows access to additional context for command execution.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/commands/basics.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCommand<ServerCommandSource> command = context -> {\n    ServerCommandSource source = context.getSource();\n    return 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies\nDESCRIPTION: NPM command to install project dependencies.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/contributing.md#2025-04-05_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Java 17 on Fedora\nDESCRIPTION: Command to install Java 17 OpenJDK on Fedora using the dnf package manager.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/installing-java/linux.md#2025-04-05_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install java-17-openjdk\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixin Java Agent for Hotswapping Mixins\nDESCRIPTION: JVM argument to enable the Mixin Java agent, which allows for hotswapping Mixin classes during debugging. This requires the absolute path to the Mixin library JAR file.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/getting-started/launching-the-game.md#2025-04-05_snippet_2\n\nLANGUAGE: no-line-numbers\nCODE:\n```\n-javaagent:\"path to mixin library jar here\"\n```\n\n----------------------------------------\n\nTITLE: Particle Testing Command\nDESCRIPTION: Minecraft command to spawn and test the custom particle in-game at the player's location.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/rendering/particles/creating-particles.md#2025-04-05_snippet_3\n\nLANGUAGE: mcfunction\nCODE:\n```\n/particle fabric-docs-reference:sparkle_particle ~ ~1 ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Options for Production Run Tasks in Groovy\nDESCRIPTION: This snippet demonstrates how to configure common options for both server and client production run tasks. It shows setting up mods, JVM arguments, program arguments, run directory, and Java toolchain.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/production-run-tasks.md#2025-04-05_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.register(\"prodServer\", net.fabricmc.loom.task.prod.ServerProductionRunTask) {\n    // A collection of mod jars that will be used when running the game. The mods must be remapped to run with intermediary names.\n    // This uses a Gradle ConfigurableFileCollection allowing the files to come from a variety of sources.\n    mods.from file(\"mod.jar\")\n    mods.from configurations.exampleConfiguration\n\n    // A list of additional JVM arguments to pass to the game.\n    jvmArgs.add(\"-Dfabric.client.gametest\")\n\n    // A list of additional program arguments to pass to the game.\n    programArgs.add(\"--example\")\n\n    // The directory to run the game in.\n    runDir = file(\"run\")\n\n    // Specify the Java toolchain to use when running the game.\n    // Defaults to the Java version being used to run Gradle.\n    // See https://docs.gradle.org/current/userguide/toolchains.html#sec:plugins_toolchains\n    javaLauncher = javaToolchains.launcherFor {\n        languageVersion = JavaLanguageVersion.of(21)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Line Comments Example in Java\nDESCRIPTION: Demonstrates usage of line comments for temporarily disabling code segments in Java\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/ide-tips-and-tricks.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// private static final int PROTECTION_BOOTS = 2;\nprivate static final int PROTECTION_LEGGINGS = 5;\n// private static final int PROTECTION_CHESTPLATE = 6;\nprivate static final int PROTECTION_HELMET = 1;\n```\n\n----------------------------------------\n\nTITLE: Installing Java on Fedora\nDESCRIPTION: Commands for installing different Java packages on Fedora using dnf package manager. Includes options for standard JDK, headless version, and development kit.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/installing-java/linux.md#2025-04-05_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install java-21-openjdk\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install java-21-openjdk-headless\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install java-21-openjdk-devel\n```\n\n----------------------------------------\n\nTITLE: Block Item Model JSON Configuration\nDESCRIPTION: Item model configuration that uses the block model as parent for GUI rendering\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/blocks/first-block.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"parent\": \"fabric-docs-reference:block/condensed_dirt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Java 21 on Debian/Ubuntu\nDESCRIPTION: Commands to update package lists and install Java 21 JDK on Debian or Ubuntu using apt.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/installing-java/linux.md#2025-04-05_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo apt install openjdk-21-jdk\n```\n\n----------------------------------------\n\nTITLE: Locating Minecraft Directory on macOS\nDESCRIPTION: The default Minecraft game directory path for macOS operating system where logs and crash reports are stored.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/troubleshooting/uploading-logs.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n~/Library/Application Support/minecraft\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Fabric Documentation Homepage\nDESCRIPTION: This YAML frontmatter configures the metadata and layout for the Fabric documentation homepage. It sets the title, description, layout, and defines the hero section and feature blocks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/index.md#2025-04-05_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Fabric Documentation\ndescription: The official curated documentation for Fabric, a modding toolchain for Minecraft.\nlayout: home\n\nhero:\n  name: Fabric Documentation\n  tagline: The official curated documentation for Fabric, a modding toolchain for Minecraft.\n\nfeatures:\n  - title: Player Guides\n    icon: 📚\n    details: Are you a player looking to use mods powered by Fabric? Our player guides have you covered. These guides will help you in downloading, installing, and troubleshooting Fabric mods.\n    link: /players/\n    linkText: Read More\n  - title: Developer Guides\n    icon: 🛠️\n    details: Our community-written developer guides cover everything from setting up your development environment to advanced topics like rendering and networking.\n    link: /develop/\n    linkText: Get Started\n\nsearch: false\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Language Provider to DataGeneratorEntrypoint in Java\nDESCRIPTION: Adds the created language provider to the DataGeneratorEntrypoint. This step is necessary to include the provider in the data generation process.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/translations.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceEnglishLangProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Basic Test Configuration in Fabric API\nDESCRIPTION: Shows the minimal setup required to enable testing in Fabric API using the Loom Gradle plugin. This creates two run configurations for server-side and client-side game tests.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/fabric-api.md#2025-04-05_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureTests()\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Windows Command Prompt\nDESCRIPTION: Command to open the Windows command prompt through the Run dialog. This is the first step in checking Java installation status.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/installing-java/windows.md#2025-04-05_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ncmd.exe\n```\n\n----------------------------------------\n\nTITLE: Installing Headless Java 17 on Fedora\nDESCRIPTION: Command to install the headless version of Java 17 on Fedora, suitable for servers without graphical interface requirements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/installing-java/linux.md#2025-04-05_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install java-17-openjdk-headless\n```\n\n----------------------------------------\n\nTITLE: Adding Language Provider to DataGeneratorEntrypoint in Java\nDESCRIPTION: Adds the created language provider to the DataGeneratorEntrypoint. This step is necessary to include the provider in the data generation process.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/zh_cn/develop/data-generation/translations.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceEnglishLangProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Installing Headless JRE on Arch Linux\nDESCRIPTION: Command to install the headless version of Java Runtime Environment on Arch Linux, suitable for servers without graphical interface requirements.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/installing-java/linux.md#2025-04-05_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -S jre-openjdk-headless\n```\n\n----------------------------------------\n\nTITLE: Implementing a ModInitializer Entrypoint in Java\nDESCRIPTION: Example of a simple 'main' entrypoint that implements ModInitializer and logs a message to the console when the game starts. This demonstrates how to create the primary mod initialization class that runs on both client and server.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/getting-started/project-structure.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// #entrypoint\nimport net.fabricmc.api.ModInitializer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class FabricDocsReference implements ModInitializer {\n\t// This logger is used to write text to the console and the log file.\n\t// It is considered best practice to use your mod id as the logger's name.\n\t// That way, it's clear which mod wrote info, warnings, and errors.\n\tpublic static final Logger LOGGER = LoggerFactory.getLogger(\"fabric-docs-reference\");\n\n\t@Override\n\tpublic void onInitialize() {\n\t\t// This code runs as soon as Minecraft is in a mod-load-ready state.\n\t\t// However, some things (like resources) may still be uninitialized.\n\t\t// Proceed with mild caution.\n\n\t\tLOGGER.info(\"Hello Fabric world!\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a Screen in Fabric\nDESCRIPTION: Method to close the current screen by setting it to null.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/translated/es_es/develop/rendering/gui/custom-screens.md#2025-04-05_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMinecraftClient.getInstance().setScreen(null);\n```\n\n----------------------------------------\n\nTITLE: Client-Side Command Registration\nDESCRIPTION: Example of registering a client-side command using ClientCommandManager.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/commands/basics.md#2025-04-05_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nClientCommandManager.DISPATCHER.register(\n    ClientCommandManager.literal(\"client_command\")\n        .executes(context -> {\n            context.getSource().sendFeedback(Text.literal(\"Called client command!\"));\n            return Command.SINGLE_SUCCESS;\n        })\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced Test Configuration in Fabric API\nDESCRIPTION: Details all available test configuration options including source set creation, mod ID configuration, game test settings, EULA acceptance, run directory management, and test user configuration.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/loom/fabric-api.md#2025-04-05_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nfabricApi {\n configureTests {\n  // Contains a boolean indicating whether a new source set should be created for the tests.\n  // Defaults to `false`\n  createSourceSet = true\n\n  // Contains a string representing the mod ID associated with the tests. This must be set if `createSourceSet` is true.\n  // This must be the mod id of the mod used for tests in the gametest source set and not your main mod id.\n  modId = \"example-tests\"\n\n  // Contains a boolean indicating whether a run configuration will be created for the server side game tests, using Vanilla Game Test framework.\n  // Defaults to `true`\n  enableGameTests = true\n\n  // Contains a boolean indicating whether a run configuration will be created for the client side game tests, using the Fabric API Client Test framework.\n  // Defaults to `true`\n  enableClientGameTests = true\n\n  // Contains a boolean indicating whether the eula has been accepted. By enabling this you agree to the Minecraft EULA located at https://aka.ms/MinecraftEULA.\n  // Defaults to `false`\n  eula = true\n\n  // Contains a boolean indicating whether the run directories should be cleared before running the tests.\n  // This only works when `enableClientGameTests` is `true`.\n  // Defaults to `true`\n  clearRunDirectory = true\n\n  // Contains a string representing the username to use for the client side game tests.\n  // Defaults to `Player0`\n  username = \"Username\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Headless JRE on Arch Linux\nDESCRIPTION: Command to install the headless version of Java Runtime Environment (JRE) on Arch Linux for servers without graphical UI.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/installing-java/linux.md#2025-04-05_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S jre-openjdk-headless\n```\n\n----------------------------------------\n\nTITLE: Windows Crash Report Location Path\nDESCRIPTION: File system path where crash reports are stored on Windows systems.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/troubleshooting/crash-reports.md#2025-04-05_snippet_0\n\nLANGUAGE: no-line-numbers\nCODE:\n```\n%appdata%\\.minecraft\\crash-reports\n```\n\n----------------------------------------\n\nTITLE: Рисування трикутної смуги з використанням BufferBuilder в Java\nDESCRIPTION: Практичний приклад рендерингу трикутної смуги на HUD за допомогою BufferBuilder, використовуючи формат вершин POSITION_COLOR та режим малювання TRIANGLE_STRIP для створення ромба.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/translated/uk_ua/develop/rendering/basic-concepts.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void render(DrawContext drawContext, float delta) {\n    MatrixStack matrices = drawContext.getMatrices();\n    matrices.push();\n    \n    BufferBuilder bufferBuilder = Tessellator.getInstance().getBuffer();\n    \n    // Почати будувати буфер із режимом трикутної смуги та форматом позиції + кольору\n    bufferBuilder.begin(VertexFormat.DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);\n    \n    // Додати вершини для створення ромба\n    bufferBuilder.vertex(matrices.peek().getPositionMatrix(), 20, 20, 0).color(255, 0, 0, 255).next(); // Червоний колір\n    bufferBuilder.vertex(matrices.peek().getPositionMatrix(), 5, 40, 0).color(0, 255, 0, 255).next(); // Зелений колір\n    bufferBuilder.vertex(matrices.peek().getPositionMatrix(), 35, 40, 0).color(0, 0, 255, 255).next(); // Синій колір\n    bufferBuilder.vertex(matrices.peek().getPositionMatrix(), 20, 60, 0).color(255, 255, 0, 255).next(); // Жовтий колір\n    \n    // Відправити ці дані в OpenGL для малювання\n    BufferRenderer.drawWithGlobalProgram(bufferBuilder.end());\n    \n    matrices.pop();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenJDK 17 on Debian/Ubuntu\nDESCRIPTION: Commands to update package lists and install OpenJDK 17 JDK on Debian-based distributions like Ubuntu using the apt package manager.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/installing-java/linux.md#2025-04-05_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\nsudo apt install openjdk-17-jdk\n```\n\n----------------------------------------\n\nTITLE: Suppressing Warnings in Java with Comments and Annotations\nDESCRIPTION: Demonstrates different methods to suppress compiler warnings in Java using both @SuppressWarnings annotations and //noinspection comments. This allows for ignoring specific warnings when necessary.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/ide-tips-and-tricks.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// below is bad code and IntelliJ knows that\n\n@SuppressWarnings(\"rawtypes\") // annotations can be used here\nList list = new ArrayList();\n\n//noinspection unchecked (annotations cannot be here so we use the comment)\nthis.processList((List<String>)list);\n\n//noinspection rawtypes,unchecked,WriteOnlyObject (you can even suppress multiple!)\nnew ArrayList().add(\"bananas\");\n```\n\n----------------------------------------\n\nTITLE: Page Frontmatter Template\nDESCRIPTION: YAML frontmatter template for documentation pages including title, description and authors.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/contributing.md#2025-04-05_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Title of the Page\ndescription: This is the description of the page.\nauthors:\n  - your-username\n---\n```\n\n----------------------------------------\n\nTITLE: macOS Crash Report Location Path\nDESCRIPTION: File system path where crash reports are stored on macOS systems.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/troubleshooting/crash-reports.md#2025-04-05_snippet_1\n\nLANGUAGE: no-line-numbers\nCODE:\n```\n~/Library/Application Support/minecraft/crash-reports\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Pushing Changes\nDESCRIPTION: Series of Git commands to commit and push changes to remote repository.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/contributing.md#2025-04-05_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\ngit commit -m \"Description of your changes\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Adding Mixin Java Agent to VM Arguments\nDESCRIPTION: VM argument to add the Mixin Java agent for hotswapping Mixin classes during debugging.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/develop/getting-started/launching-the-game.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n-javaagent:\"path to mixin library jar here\"\n```\n\n----------------------------------------\n\nTITLE: Identifying Mixin Crashes in Stack Traces\nDESCRIPTION: Example of how to identify a mixin crash in a stack trace, showing the pattern of modid$handlerName in the method name.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/players/troubleshooting/crash-reports.md#2025-04-05_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n... net.minecraft.class_2248.method_3821$$$modid$handlerName() ...\n```\n\n----------------------------------------\n\nTITLE: macOS Crash Report Location Path\nDESCRIPTION: File system path where crash reports are stored on macOS systems.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/troubleshooting/crash-reports.md#2025-04-05_snippet_1\n\nLANGUAGE: no-line-numbers\nCODE:\n```\n~/Library/Application Support/minecraft/crash-reports\n```\n\n----------------------------------------\n\nTITLE: Implementing a TransitionState Enum for Sound Transitions\nDESCRIPTION: Defines an enum for managing sound transition states (starting, running, ending). This helps create smooth volume transitions when starting or stopping sounds rather than abrupt changes.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/dynamic-sounds.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic enum TransitionState {\n    STARTING(new Identifier(FabricDocs.MOD_ID, \"starting\")),\n    RUNNING(new Identifier(FabricDocs.MOD_ID, \"running\")),\n    ENDING(new Identifier(FabricDocs.MOD_ID, \"ending\"));\n\n    private final Identifier id;\n\n    TransitionState(Identifier id) {\n        this.id = id;\n    }\n\n    public Identifier getId() {\n        return id;\n    }\n\n    public static TransitionState fromId(Identifier id) {\n        for (TransitionState state : values()) {\n            if (state.id.equals(id)) {\n                return state;\n            }\n        }\n        return ENDING;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Minecraft Game Directory on Linux\nDESCRIPTION: The path to the Minecraft game directory on Linux where logs are stored in the logs folder.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/troubleshooting/uploading-logs.md#2025-04-05_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n~/.minecraft\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start local development server with auto-reload functionality.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/contributing.md#2025-04-05_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Line Comments in Java\nDESCRIPTION: Demonstrates how to use line comments to temporarily disable code in Java. Line comments are created with // and can be toggled using ⌘/CTRL+/.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/ide-tips-and-tricks.md#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// private static final int PROTECTION_BOOTS = 2;\nprivate static final int PROTECTION_LEGGINGS = 5;\n// private static final int PROTECTION_CHESTPLATE = 6;\nprivate static final int PROTECTION_HELMET = 1;\n```\n\n----------------------------------------\n\nTITLE: Cloning Fabric Example Mod Repository\nDESCRIPTION: Command to clone the Fabric example mod repository using Git into a new project directory. This is used for manual project creation when the template generator cannot be used.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/getting-started/creating-a-project.md#2025-04-05_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/FabricMC/fabric-example-mod/ my-mod-project\n```\n\n----------------------------------------\n\nTITLE: Using Block Comments in Java\nDESCRIPTION: Shows how to use block comments (/* */) to temporarily disable multiple lines of code. Block comments can be toggled using ⌘/CTRL+⌥/Shift+/.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/ide-tips-and-tricks.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/*\nModItems.initialize();\nModSounds.initializeSounds();\nModParticles.initialize();\n*/\n\nprivate static int secondsToTicks(float seconds) {\n    return (int) (seconds * 20 /*+ 69*/);\n}\n```\n\n----------------------------------------\n\nTITLE: Linux Crash Report Location Path\nDESCRIPTION: Linux-specific file path where Minecraft crash reports are stored.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/troubleshooting/crash-reports.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n~/.minecraft/crash-reports\n```\n\n----------------------------------------\n\nTITLE: Configuring Sounds in JSON Format\nDESCRIPTION: JSON configuration for custom sounds, including subtitles and settings like sound type, volume and pitch.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/sounds/custom.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metal_whistle\": {\n    \"sounds\": [\n      \"fabric-docs-reference:metal_whistle\"\n    ],\n    \"subtitle\": \"fabric-docs-reference.subtitle.metal_whistle\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Crash Report Locations - Linux Path\nDESCRIPTION: Shows the default crash report directory location for Linux Minecraft installations.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/players/troubleshooting/crash-reports.md#2025-04-05_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n~/.minecraft/crash-reports\n```\n\n----------------------------------------\n\nTITLE: Fabric Modpack Platform Links\nDESCRIPTION: Markdown list of official platforms where users can find pre-made Fabric modpacks.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/faq.md#2025-04-05_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [Modrinth](https://modrinth.com/modpacks?g=categories:%27fabric%27)\n- [CurseForge](https://www.curseforge.com/minecraft/search?class=modpacks&gameVersionTypeId=4)\n- [Feed The Beast](https://www.feed-the-beast.com/ftb-app)\n- [Technic](https://www.technicpack.net/modpacks)\n```\n\n----------------------------------------\n\nTITLE: Building Static Website\nDESCRIPTION: Command to build static HTML files from Markdown content.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/contributing.md#2025-04-05_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Headless Java 21 on Fedora\nDESCRIPTION: Command to install the headless version of Java 21 OpenJDK on Fedora for servers without graphical UI.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/installing-java/linux.md#2025-04-05_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install java-21-openjdk-headless\n```\n\n----------------------------------------\n\nTITLE: Java Runtime Exception in Block Tessellation\nDESCRIPTION: Stack trace showing a ClassCastException occurring when attempting to cast net.minecraft.class_3924 to snownee.snow.block.entity.SnowCoveredBlockEntity during block rendering.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/public/assets/players/crash-report-example.txt#2025-04-05_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava.lang.RuntimeException: java.lang.ClassCastException: class net.minecraft.class_3924 cannot be cast to class snownee.snow.block.entity.SnowCoveredBlockEntity (net.minecraft.class_3924 and snownee.snow.block.entity.SnowCoveredBlockEntity are in unnamed module of loader net.fabricmc.loader.impl.launch.knot.KnotClassLoader @57d5872c)\n\tat snownee.snow.block.ShapeCaches.get(ShapeCaches.java:51)\n\tat snownee.snow.block.SnowWallBlock.method_9549(SnowWallBlock.java:26)\n```\n\n----------------------------------------\n\nTITLE: Inspection Suppression Comments in Java\nDESCRIPTION: Demonstrates various ways to suppress code inspections using comments and annotations\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/ide-tips-and-tricks.md#2025-04-05_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@SuppressWarnings(\"rawtypes\") // annotations can be used here\nList list = new ArrayList();\n\n//noinspection unchecked (annotations cannot be here so we use the comment)\nthis.processList((List<String>)list);\n\n//noinspection rawtypes,unchecked,WriteOnlyObject (you can even suppress multiple!)\nnew ArrayList().add(\"bananas\");\n```\n\n----------------------------------------\n\nTITLE: Creating Item Model JSON for Custom Tool\nDESCRIPTION: Shows the JSON structure for creating an item model for a custom tool, using the 'item/handheld' parent model.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-tools.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/handheld\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_sword\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Item Model JSON for Custom Tool\nDESCRIPTION: Shows the JSON structure for creating an item model for a custom tool, using the 'item/handheld' parent model.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/items/custom-tools.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/handheld\",\n  \"textures\": {\n    \"layer0\": \"fabric-docs-reference:item/guidite_sword\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Fabric Documentation Site\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the site and provides the sitemap location. The configuration uses universal access permissions and defines the XML sitemap URL.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/public/robots.txt#2025-04-05_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://docs.fabricmc.net/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version in Windows Command Prompt\nDESCRIPTION: This command checks the installed version of Java on a Windows system. It's used to verify if Java is installed and to check its version number.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/installing-java/windows.md#2025-04-05_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\njava -version\n```\n\n----------------------------------------\n\nTITLE: Configuring VM Arguments for Enhanced Class Redefinition in Java\nDESCRIPTION: VM argument to allow enhanced class redefinition when using JetBrains Runtime. This enables more flexible hotswapping during debugging.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/getting-started/launching-the-game.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n-XX:+AllowEnhancedClassRedefinition\n```\n\n----------------------------------------\n\nTITLE: Formatter Control Comments in Java\nDESCRIPTION: Shows how to disable and enable the code formatter using special comments\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/ide-tips-and-tricks.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n//formatter:off (disable formatter)\n    public static void disgustingMethod() { /* ew this code sucks */ }\n//formatter:on (re-enable the formatter)\n```\n\n----------------------------------------\n\nTITLE: Locating Crash Reports on Different Operating Systems\nDESCRIPTION: Code snippets showing the file paths for crash report locations on Windows, macOS, and Linux operating systems.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.20.4/translated/es_es/players/troubleshooting/crash-reports.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n%appdata%\\.minecraft\\crash-reports\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n~/Library/Application Support/minecraft/crash-reports\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n~/.minecraft/crash-reports\n```\n\n----------------------------------------\n\nTITLE: Formatter Control Comments in Java\nDESCRIPTION: Shows how to disable and enable the code formatter using special comments\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/ide-tips-and-tricks.md#2025-04-05_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n//formatter:off (disable formatter)\n    public static void disgustingMethod() { /* ew this code sucks */ }\n//formatter:on (re-enable the formatter)\n```\n\n----------------------------------------\n\nTITLE: Give Command for Counter Item Without Component in Minecraft\nDESCRIPTION: Minecraft command to give a player a Counter item with the click count component explicitly removed, useful for testing how items handle missing components.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/develop/items/custom-data-components.md#2025-04-05_snippet_6\n\nLANGUAGE: mcfunction\nCODE:\n```\n/give @p fabric-docs-reference:counter[!fabric-docs-reference:click_count]\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tasks for Fabric Mod Development\nDESCRIPTION: Gradle commands to start the game in client or server mode. These are useful for quick launches but lack debugging capabilities.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/getting-started/launching-the-game.md#2025-04-05_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\n./gradlew runClient\n./gradlew runServer\n```\n\n----------------------------------------\n\nTITLE: Accessing Minecraft Mods Folder on Different Operating Systems\nDESCRIPTION: These commands show the file paths to access the Minecraft mods folder on Windows, macOS, and Linux operating systems. Users can paste these paths into their file explorer to quickly navigate to the correct location.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/installing-mods.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n%appdata%\\.minecraft\\mods\n```\n\nLANGUAGE: bash\nCODE:\n```\n~/Library/Application Support/minecraft/mods\n```\n\nLANGUAGE: bash\nCODE:\n```\n~/.minecraft/mods\n```\n\n----------------------------------------\n\nTITLE: Adding RecipeProvider to DataGeneratorEntrypoint in Java\nDESCRIPTION: Registers the custom recipe provider with the data generator in the onInitializeDataGenerator method.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/develop/data-generation/recipes.md#2025-04-05_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npack.addProvider(FabricDocsReferenceRecipeProvider::new);\n```\n\n----------------------------------------\n\nTITLE: Locating Minecraft Logs - macOS Path\nDESCRIPTION: The file path for accessing Minecraft logs on macOS operating system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/troubleshooting/uploading-logs.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n~/Library/Application Support/minecraft\n```\n\n----------------------------------------\n\nTITLE: Version Support Reference in Markdown\nDESCRIPTION: Documents the Minecraft versions officially supported by Fabric, specifying both snapshot and release version compatibility.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/versions/1.21/players/faq.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nOfficially, Fabric supports all versions of Minecraft starting from snapshots `18w43b` and above, and releases `1.14` and above.\n```\n\n----------------------------------------\n\nTITLE: Locating Minecraft Logs - Linux Path\nDESCRIPTION: The file path for accessing Minecraft logs on Linux operating system.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/players/troubleshooting/uploading-logs.md#2025-04-05_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n~/.minecraft\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository for Local Development\nDESCRIPTION: Command to clone a forked repository of fabric-docs for local development.\nSOURCE: https://github.com/FabricMC/fabric-docs/blob/main/contributing.md#2025-04-05_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/your-username/fabric-docs.git\n```"
  }
]