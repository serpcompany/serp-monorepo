[
  {
    "owner": "matpower",
    "repo": "matpower",
    "content": "TITLE: Solving Nonlinear Equations with Fast-Decoupled Newton's Method - MATLAB\nDESCRIPTION: This function `nleqs_fd_newton()` solves a nonlinear set of equations using a fast-decoupled Newton's method. It is designed for efficient solving of equations with nonlinear constraints. Key dependencies include a nonlinear equation setup and MATLAB environment. Inputs should be defined in terms of the equations to solve, with outputs reflecting the solution using Newton's method.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-2.1.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nnleqs_fd_newton()\n```\n\n----------------------------------------\n\nTITLE: Running an OPF Task in MATPOWER\nDESCRIPTION: Basic code example showing how to create a task object for an Optimal Power Flow (OPF) problem and run it for a 9-bus case with specified MATPOWER options.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/architecture.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmpopt = mpoption('verbose', 2);     % set MATPOWER options\ntask = mp.task_opf();               % create task object for OPF\ntask.run('case9', mpopt);           % create and run task for 'case9'\n```\n\n----------------------------------------\n\nTITLE: Running AC Optimal Power Flow with Modified Case30 Data\nDESCRIPTION: Shows how to load the 30-bus system, modify the real power demand at bus 2, and run an AC optimal power flow with default options.\nSOURCE: https://github.com/matpower/matpower/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\ndefine_constants;\nmpc = loadcase('case30');\nmpc.bus(2, PD) = 30;\nrunopf(mpc);\n```\n\n----------------------------------------\n\nTITLE: Running Three-Phase Power Flow in MATPOWER\nDESCRIPTION: Demonstrates how to use the mp.xt_3p extension to run a three-phase unbalanced power flow simulation. The script sets verbose output and runs the power flow on a three-phase test case.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n>> mpopt = mpoption('verbose', 2);\n>> run_pf('t_case3p_a', mpopt, 'mpx', mp.xt_3p)\n```\n\n----------------------------------------\n\nTITLE: Running OPF with Default Box Capability Curves in MATLAB\nDESCRIPTION: Example code that runs an optimal power flow with the default box-shaped generator capability curves on the 39-bus test case and displays the resulting generator dispatches.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_6\n\nLANGUAGE: MATLAB\nCODE:\n```\n>> mpopt = mpoption('verbose', 0, 'out.all', 0);\n>> task = run_opf('case39', mpopt);\n>> task.dm.elements.gen.tab(:, {'pg', 'qg'})\n\nans =\n\n  10Ã—2 table\n\n      pg        qg   \n    ______    _______\n\n    671.59        140\n       646        300\n    671.16     299.99\n       652     115.12\n       508     139.61\n    661.45     222.93\n       580     60.645\n       564     8.8208\n    654.03    -32.735\n    689.59     81.886\n```\n\n----------------------------------------\n\nTITLE: Enhancing Linear System Solving in MATLAB with mplinsolve()\nDESCRIPTION: Extends mplinsolve() function to support returning and reusing LU factorization for matrix systems, improving computational efficiency by avoiding repeated decompositions\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/relnotes/MIPS-Release-Notes-1.5.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n% New feature: LU factorization caching and reuse\nlu_struct = mplinsolve(A, b)\n\n% Solving subsequent systems with pre-factored matrix\nx = mplinsolve(lu_struct, new_b)\n```\n\nLANGUAGE: MATLAB\nCODE:\n```\n% New feature: Solving transposed systems\nopt.tr = 1  % Flag to solve transposed system\n```\n\n----------------------------------------\n\nTITLE: Three-Phase Test Case Data Function Definition in MATPOWER\nDESCRIPTION: The function definition for a four-bus unbalanced three-phase test case based on an OpenDSS model. This shows the beginning structure of a case file with the standard MATPOWER case format initialized with empty matrices.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\nfunction mpc = t_case3p_a\n%T_CASE3P_A   Four bus, unbalanced 3-phase test case.\n%\n% This data comes from 4Bus-YY-UnB.DSS, a modified version (with unbalanced\n% load) of 4Bus-YY-Bal.DSS [1], the OpenDSS 4 bus IEEE test case with\n% grounded-wye to grounded-wye transformer.\n%\n% [1] https://sourceforge.net/p/electricdss/code/HEAD/tree/trunk/Distrib/IEEETestCases/4Bus-YY-Bal/4Bus-YY-Bal.DSS\n\n%% MATPOWER Case Format : Version 2\nmpc.version = '2';\n\n%%-----  Power Flow Data  -----%%\n%% system MVA base\nmpc.baseMVA = 100;\n\nmpc.bus = [];\nmpc.gen = [];\nmpc.branch = [];\nmpc.gencost = [];\n```\n\n----------------------------------------\n\nTITLE: Configuring Three-Phase Generator Data in MATLAB for Power System Analysis\nDESCRIPTION: Defines the generator data for a three-phase power system, including generator IDs, connected buses, operational status, voltage setpoints, and active and reactive power injections for each phase. This data is essential for power flow and stability studies.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_7\n\nLANGUAGE: MATLAB\nCODE:\n```\n%% gen\n%\tgenid\tgbus\tstatus\tVg1\tVg2\tVg3\tPg1\tPg2\tPg3\tQg1\tQg2\tQg3\nmpc.gen3p = [\n    1\t1\t1\t1\t1\t1\t2000\t2000\t2000\t0\t0\t0;\n];\n```\n\n----------------------------------------\n\nTITLE: Running OPF with DC Line Extension in MATPOWER\nDESCRIPTION: Example showing how to run an optimal power flow analysis with the DC line extension using the MATPOWER Extension API. The extension is passed as an additional parameter to the run_opf function.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_42\n\nLANGUAGE: matlab\nCODE:\n```\nrun_opf('t_case9_dcline', mpopt, 'mpx', mp.xt_legacy_dcline);\n```\n\n----------------------------------------\n\nTITLE: Optimization Model Approach\nDESCRIPTION: This code snippet demonstrates how to construct and solve a quadratic programming (QP) problem using the `opt_model` class in MP-Opt-Model. It adds variables, linear constraints, and a quadratic cost to the model individually, then solves the full model using the `solve()` method. The snippet assumes that the QP problem data (y0, z0, ymin, zmax, A1, b1, A2, u2, Q) has been defined previously.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/README.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\n\"%%-----  METHOD 1  -----\n%% build model\nom = opt_model;\nom.add_var('y', 2, y0, ymin);\nom.add_var('z', 2, z0, [], zmax);\nom.add_lin_constraint('lincon1', A1, b1, b1);\nom.add_lin_constraint('lincon2', A2, [], u2, {'y'});\nom.add_quad_cost('cost', Q, []);\n\n%% solve model\n[x, f, exitflag, output, lambda] = om.solve();\"\n```\n\n----------------------------------------\n\nTITLE: Solving Nonlinear Equations with Gauss-Seidel Method - MATLAB\nDESCRIPTION: The function `nleqs_gauss_seidel()` is used to solve a nonlinear set of equations using the Gauss-Seidel method. It is suitable for instances where this iterative method is applicable. Inputs are the specific nonlinear equations, and the result is their solution determined by the Gauss-Seidel approach.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-2.1.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\nnleqs_gauss_seidel()\n```\n\n----------------------------------------\n\nTITLE: Implementation of Task Run Method in MATPOWER\nDESCRIPTION: Example showing the basic steps performed by a task's run() method, including defining model classes, creating objects for the data model converter and each modeling layer, solving the mathematical model, and propagating the solution back through the layers.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/architecture.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n% define classes used to construct model objects and data model converter\ndmc_class = @mp.dm_converter_mpc2;  % data model convert class, MATPOWER case format v2\ndm_class = @mp.data_model_opf;      % data model class for OPF\nnm_class = @mp.net_model_acp;       % network model class for AC polar\nmm_class = @mp.math_model_opf_acps; % math model class for AC polar power OPF\n\n% create objects\ndmc = dmc_class().build();              % create data model converter\ndm = dm_class().build('case9', dmc);    % create data model for 'case9'\nnm = nm_class().build(dm);              % create network model\nmm = mm_class().build(nm, dm, mpopt);   % create math model\n\n% find solution\nopt = mm.solve_opts(nm, dm, mpopt);     % get solver options\nmm.solve(opt);                          % solve math model\nnm = mm.network_model_x_soln(nm);       % update network model state with soln\nnm.port_inj_soln();                     % use network model to compute flows\ndm = mm.data_model_update(nm, dm, mpopt);   % update data model with soln\n```\n\n----------------------------------------\n\nTITLE: Defining Power Flow Functionality in MATLAB\nDESCRIPTION: This function, run_pf, is utilized to execute power flow calculations within the MATPOWER framework. It is part of the modular approach to power system operations, making it essential for various analyses. No specific parameters are provided in the snippet, but it's implied that inputs involve power system data structures compatible with MATPOWER's architecture.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/functions/run_pf.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: run_pf\n```\n\n----------------------------------------\n\nTITLE: Defining Three-Phase Load Data in MATLAB for Power System Simulation\nDESCRIPTION: Specifies the load data for a three-phase power system, including load IDs, connected buses, operational status, active power demands, and power factors for each phase. This information is crucial for accurate load flow analysis and system balancing studies.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_6\n\nLANGUAGE: MATLAB\nCODE:\n```\n%% load\n%\tldid\tldbus\tstatus\tPd1\tPd2\tPd3\tldpf1\tldpf2\tldpf3\nmpc.load3p = [\n    1\t4\t1\t1275\t1800\t2375\t0.85\t0.9\t0.95;\n];\n```\n\n----------------------------------------\n\nTITLE: Base Network Model Element for Legacy DC Line in MATLAB\nDESCRIPTION: Defines the abstract base class for all DC line network model elements, specifying common properties like name, number of ports, and number of non-voltage states.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_26\n\nLANGUAGE: matlab\nCODE:\n```\nclassdef (Abstract) nme_legacy_dcline < mp.nm_element\n    methods\n        function name = name(obj)\n            name = 'legacy_dcline';\n        end\n\n        function np = np(obj)\n            np = 2;     %% this is a 2 port element\n        end\n\n        function nz = nz(obj)\n            nz = 2;     %% 2 (possibly complex) non-voltage state per element\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Using have_feature Function in MATLAB/Octave\nDESCRIPTION: The have_feature function tests for optional functionality and returns availability, version, and release information. It supports various input arguments to retrieve different types of information and can toggle functionality on/off.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/README.md#2025-04-22_snippet_5\n\nLANGUAGE: MATLAB\nCODE:\n```\nTorF = have_feature(tag)\nTorF = have_feature(tag, toggle)\nver_str = have_feature(tag, 'vstr')\nver_num = have_feature(tag, 'vnum')\ndate    = have_feature(tag, 'date')\ninfo    = have_feature(tag, 'all')\nhave_feature(tag, 'clear_cache')\nhave_feature('all', 'clear_cache')\n```\n\n----------------------------------------\n\nTITLE: Implementing Oval PQ Capability Constraint Function and Jacobian in MATLAB\nDESCRIPTION: Method to evaluate the oval constraint function and its Jacobian. This computes the mathematical constraint that forms an oval-shaped boundary for generator PQ capabilities.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction [h, dh] = oval_pq_capability_fcn(obj, xx, idx, p0, q0, a2, b2)\n    [p, q] = deal(xx{:});\n    ng = length(p);\n    if ~isempty(idx)\n        p = p(idx);\n        q = q(idx);\n    end\n\n    %% evaluate constraint function\n    h = (p - p0).^2 ./ a2 + (q - q0).^2 ./ b2 - 1;\n\n    %% evaluate constraint Jacobian\n    if nargout > 1\n        dhdp = spdiags(2*(p - p0) ./ a2, 0, ng, ng);\n        dhdq = spdiags(2*(q - q0) ./ b2, 0, ng, ng);\n        dh = [dhdp dhdq];\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Results from DC Optimal Power Flow\nDESCRIPTION: Demonstrates how to run a DC OPF on the 118-bus system and access specific results including the objective function value, generator output, and branch flow.\nSOURCE: https://github.com/matpower/matpower/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: matlab\nCODE:\n```\nresults = rundcopf('case118');\nfinal_objective = results.f;\ngen6_output     = results.gen(6, PG);\nbranch51_flow   = results.branch(51, PF);\n```\n\n----------------------------------------\n\nTITLE: Power System State Summary Table\nDESCRIPTION: Summary table showing the current state of power system elements including buses, generators, loads, branches and associated power flows.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_4.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  elements                on     off    total\n --------------------- ------- ------- -------\n  Buses                    30       -      30\n    Areas                                   3\n    Zones                                   1\n  Generators                6       -       6\n  Loads                    20       -      20\n  Branches                 41       -      41\n    Lines                  41       -      41\n    Transformers            0       -       0\n  Fixed Shunts              2       -       2\n  Reserve Gens              6       -       6\n  Reserve Zones             2       -       2\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Generator Math Model Element Class for Oval PQ Constraints in MATLAB\nDESCRIPTION: Class definition for a custom generator math model element that inherits from mp.mme_gen_opf_ac and implements oval-shaped PQ capability constraints for generators.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef mme_gen_opf_ac_oval < mp.mme_gen_opf_ac\n    methods\n        % (defined below)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the Legacy DC Line Extension in MATPOWER\nDESCRIPTION: This code snippet demonstrates how to use the 'xt_legacy_dcline' extension with MATPOWER's run_opf function. It sets up options and runs an optimal power flow calculation with the new DC line model.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/extension.rst#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\n>> mpopt = mpoption('verbose', 0);\n>> run_opf('t_case9_dcline', mpopt, 'mpx', mp.xt_legacy_dcline)\n```\n\n----------------------------------------\n\nTITLE: Display Solution Results - MATLAB\nDESCRIPTION: The `display_soln()` method is introduced to present the results of a solved model, including comprehensive details such as variable constraints and cost components. This function enhances the user experience by clearly outlining solution outputs.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_8\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt_model.display_soln();\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Mapping for Legacy DC Line in MATLAB\nDESCRIPTION: Maps variables from the data model to columns in the MATPOWER case struct, including direct column mappings and custom functions for cost data.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_24\n\nLANGUAGE: matlab\nCODE:\n```\nfunction vmap = table_var_map(obj, dme, mpc)\n    vmap = table_var_map@mp.dmc_element(obj, dme, mpc);\n\n    %% define named indices into data matrices\n    c = idx_dcline;\n\n    gcip_fcn = @(ob, mpc, spec, vn)dcline_cost_import(ob, mpc, spec, vn);\n    gcep_fcn = @(ob, dme, mpc, spec, vn, ridx)dcline_cost_export(ob, dme, mpc, spec, vn, ridx);\n\n    %% mapping for each name, default is {'col', []}\n    vmap.uid                = {'IDs'};      %% consecutive IDs, starting at 1\n    vmap.name               = {'cell', ''};     %% empty char\n    vmap.status{2}          = c.BR_STATUS;\n    vmap.source_uid         = {'cell', ''};     %% empty char\n    vmap.bus_fr{2}          = c.F_BUS;\n    vmap.bus_to{2}          = c.T_BUS;\n    vmap.loss0{2}           = c.LOSS0;\n    vmap.loss1{2}           = c.LOSS1;\n    vmap.vm_setpoint_fr{2}  = c.VF;\n    vmap.vm_setpoint_to{2}  = c.VT;\n    vmap.p_fr_lb{2}         = c.PMIN;\n    vmap.p_fr_ub{2}         = c.PMAX;\n    vmap.q_fr_lb{2}         = c.QMINF;\n    vmap.q_fr_ub{2}         = c.QMAXF;\n    vmap.q_to_lb{2}         = c.QMINT;\n    vmap.q_to_ub{2}         = c.QMAXT;\n    vmap.p_fr{2}            = c.PF;\n    vmap.q_fr{2}            = c.QF;\n    vmap.p_to{2}            = c.PT;\n    vmap.q_to{2}            = c.QT;\n    if isfield(vmap, 'cost')\n        vmap.cost        = {'fcn', gcip_fcn, gcep_fcn};\n        vmap.mu_p_fr_lb{2}  = c.MU_PMIN;\n        vmap.mu_p_fr_ub{2}  = c.MU_PMAX;\n        vmap.mu_q_fr_lb{2}  = c.MU_QMINF;\n        vmap.mu_q_fr_ub{2}  = c.MU_QMAXF;\n        vmap.mu_q_to_lb{2}  = c.MU_QMINT;\n        vmap.mu_q_to_ub{2}  = c.MU_QMAXT;\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Building a Network Model in MATPOWER\nDESCRIPTION: This code snippet demonstrates how to create and build a network model object in MATPOWER. It initializes an AC polar network model and builds it using a data model object.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/net-model.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nnm = mp.net_model_acp()\nnm.build(dm)\n```\n\n----------------------------------------\n\nTITLE: Task Methods Overview\nDESCRIPTION: Core methods implemented by the mp.task base class and its subclasses for power system analysis, including run(), next_dm(), next_nm(), next_mm(), print_soln(), and save_soln(). These methods handle model building, iterative execution, and solution output.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/task.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass mp.task:\n    def run(self, data, options, extensions=None):\n        # Build and manage model objects\n        # Solve the problem of interest\n        pass\n        \n    def next_dm(self):\n        # Handle data model iterations\n        return []\n        \n    def next_nm(self):\n        # Handle network model iterations\n        return []\n        \n    def next_mm(self):\n        # Handle math model iterations\n        return []\n        \n    def print_soln(self):\n        # Print solution to console\n        pass\n        \n    def save_soln(self):\n        # Save case to file\n        pass\n```\n\n----------------------------------------\n\nTITLE: Collecting PNE Results and Plotting Solution Curves in MATLAB\nDESCRIPTION: The function `pne_callback_default()` in MATLAB collects results from solving parameterized nonlinear equations. Optionally, it plots the solution curve, providing visualization capabilities alongside analysis.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_callback_default()\n```\n\n----------------------------------------\n\nTITLE: Direct Solver Approach\nDESCRIPTION: This code snippet demonstrates how to solve a quadratic programming (QP) problem by directly calling the `qps_master` solver function. It requires assembling the model parameters manually, including variable bounds, initial guess, constraint matrix, and constraint bounds. The snippet assumes that the QP problem data (ymin, zmax, y0, z0, A1, b1, A2, u2, Q) has been defined previously.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/README.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\n\"%%-----  METHOD 2  -----\n%% assemble model parameters manually\nxmin = [ymin; -Inf(2,1)];\nxmax = [ Inf(2,1); zmax];\nx0 = [y0; z0];\nA = [ A1; A2 0 0];\nl = [ b1; -Inf ];\nu = [ b1;  u2  ];\n\n%% solve model\n[x, f, exitflag, output, lambda] = qps_master(Q, [], A, l, u, xmin, xmax, x0);\"\n```\n\n----------------------------------------\n\nTITLE: Adding Oval PQ Capability Constraints to the OPF Model in MATLAB\nDESCRIPTION: Method to set up parameters and add the oval PQ capability constraints to the mathematical model. It computes parameters based on generator limits and adds nonlinear constraints using the specified functions.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction obj = add_constraints(obj, mm, nm, dm, mpopt)\n    dme = obj.data_model_element(dm);\n\n    %% generator PQ capability curve constraints\n    idx = [];       %% which generators get this constraint\n                    %% empty ==> all\n    if isempty(idx)\n        idx = (1:dme.n)';\n    end\n\n    %% get generator limit data\n    p_lb = dme.pg_lb(idx);\n    p_ub = dme.pg_ub(idx);\n    q_lb = dme.qg_lb(idx);\n    q_ub = dme.qg_ub(idx);\n\n    %% compute oval specs, all vectors, 4 params per gen\n    a2 = (p_ub - p_lb) .^ 2;        % square of horizontal (p) radius\n    b2 = ((q_ub - q_lb) / 2) .^ 2;  % square of vertical (q) radius\n    p0 = p_lb;                      % horizontal (p) center\n    q0 = (q_ub + q_lb) / 2;         % vertical (q) center\n\n    %% add constraint\n    fcn = @(xx)oval_pq_capability_fcn(obj, xx, idx, p0, q0, a2, b2);\n    hess = @(xx, lam)oval_pq_capability_hess(obj, xx, lam, idx, p0, q0, a2, b2);\n    mm.add_nln_constraint('PQoval', dme.n, 0, fcn, hess, {'Pg', 'Qg'});\n\n    %% call parent\n    add_constraints@mp.mme_gen_opf_ac(obj, mm, nm, dm, mpopt);\nend\n```\n\n----------------------------------------\n\nTITLE: Running AC OPF Using Legacy Framework\nDESCRIPTION: Basic command to run AC Optimal Power Flow on case9 using the legacy MATPOWER framework with MP-Core providing the underlying modeling.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/users-manual/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nrunopf('case9')\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Function with MP-Test in MATLAB\nDESCRIPTION: Example of how to write a test function using MP-Test framework. The function demonstrates basic test assertions, conditional test skipping based on platform features, and numeric comparison with precision control.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\n  function mptest_ex1(quiet)\n  if nargin < 1\n      quiet = 0;\n  end\n  t_begin(4, quiet);\n  t_ok(pi > 3, 'size of pi');\n  if have_feature('octave')\n      t_ok(1, 'Octave-only test foo');\n      t_ok(1, 'Octave-only test bar');\n  else\n      t_skip(2, 'foo and bar tests require Octave');\n  end\n  t_is(2+2, 4, 12, '2+2 still equals 4');\n  t_end;\n```\n\n----------------------------------------\n\nTITLE: Defining MATPOWER AC OPF Mathematical Model Class\nDESCRIPTION: This code snippet defines the math_model_opf_accs class in MATPOWER. It is part of the mp module and likely inherits from a base mathematical model class. The class implements the mathematical model for AC optimal power flow calculations.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_opf_accs.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: math_model_opf_accs\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Implementing the Data Model Element Class for Gizmo\nDESCRIPTION: This code defines the 'dme_gizmo' class, which inherits from 'mp.dm_element'. It includes properties for bus connections and methods for element naming, labeling, connection types, and data table variable names.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/gizmo-element/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef dme_gizmo < mp.dm_element\n    properties\n        bus1        %% bus index vector for port 1\n        bus2        %% bus index vector for port 2\n        bus3        %% bus index vector for port 3\n    end     %% properties\n\n    methods\n        function name = name(obj)\n            name = 'gizmo';\n        end\n\n        function label = label(obj)\n            label = 'Test Gizmo';\n        end\n\n        function label = labels(obj)\n            label = 'Test Gizmos';\n        end\n\n        function name = cxn_type(obj)\n            name = 'bus';\n        end\n\n        function name = cxn_idx_prop(obj)\n            name = {'bus1', 'bus2', 'bus3'};\n        end\n\n        function names = main_table_var_names(obj)\n            names = horzcat( main_table_var_names@mp.dm_element(obj), ...\n                {'bus_1', 'bus_2', 'bus_3', 'Y1r', 'Y1i', 'Y2r', 'Y2i', ...\n                'Lr', 'Li', 'Ir', 'Ii', 'M1r', 'M1i', 'M2r', 'M2i', ...\n                'Nr', 'Ni', 'Sr', 'Si', 'Zr1', 'Zi1', 'Zr2', 'Zi2'});\n        end\n\n        function obj = initialize(obj, dm)\n            initialize@mp.dm_element(obj, dm);  %% call parent\n\n            %% get bus mapping info\n            b2i = dm.elements.bus.ID2i;         %% bus num to idx mapping\n\n            %% set bus index vectors for port connectivity\n            obj.bus1 = b2i(obj.tab.bus_1);\n            obj.bus2 = b2i(obj.tab.bus_2);\n            obj.bus3 = b2i(obj.tab.bus_3);\n        end\n\n        function obj = update_status(obj, dm)\n            %% get bus status info\n            bs = dm.elements.bus.tab.status;        %% bus status\n\n            %% update status of gizmoes connected to isolated/offline buses\n            obj.tab.status = obj.tab.status & bs(obj.bus1) & ...\n                                              bs(obj.bus2) & ...\n                                              bs(obj.bus3);\n\n            %% call parent to fill in on/off\n            update_status@mp.dm_element(obj, dm);\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Configuring MATPOWER Options to Use Oval PQ Constraints in MATLAB\nDESCRIPTION: Code to configure MATPOWER options to use the custom oval PQ capability constraint class instead of the default class for AC OPF models.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB\nCODE:\n```\nmpopt = mpoption();\nmpopt.exp.mm_element_classes = {{@mp.mme_gen_opf_ac_oval, 'mp.mme_gen_opf_ac'}};\n```\n\n----------------------------------------\n\nTITLE: Generator Operating Conditions\nDESCRIPTION: Status and output of all generators in the system, showing active and reactive power generation at each bus location.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_opf_t_auction_case.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n================================================================================\n|     Generator Data                                                           |\n================================================================================\n                             Power Generation\n Gen ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n```\n\n----------------------------------------\n\nTITLE: Quadratic Programming Problem Setup\nDESCRIPTION: This code snippet demonstrates the setup of a constrained 4-dimensional quadratic programming (QP) problem with two 2-dimensional variables, y and z, and two constraints, one equality and the other inequality, along with lower bounds on all variables. It defines the initial values, variable bounds, constraint data, and quadratic cost coefficients for the problem. This data will be used in subsequent code snippets to solve the QP problem.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/README.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n\"%% variable initial values\ny0 = [1; 0];\nz0 = [0; 1];\n\n%% variable lower bounds\nymin = [0; 0];\nzmax = [0; 2];\n\n%% constraint data\nA1 = [ 6 1 5 -4 ];  b1 = 4;\nA2 = [ 4 9 ];       u2 = 2;\n\n%% quadratic cost coefficients\nQ = [ 8  1 -3 -4;\n      1  4 -2 -1;\n     -3 -2  5  4;\n     -4 -1  4  12  ];\"\n```\n\n----------------------------------------\n\nTITLE: Loading Storage Data in MATPOWER (Python)\nDESCRIPTION: The loadstoragedata function is responsible for loading and processing storage data for use in power system models. This function is essential for simulation environments in MATPOWER as it allows for the inclusion of storage elements in power flow analysis. The function expects input data files containing the necessary storage information in a specific format.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/loadstoragedata.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: loadstoragedata\n```\n\n----------------------------------------\n\nTITLE: Checking for Linear Programming Feature in MATLAB\nDESCRIPTION: The `have_feature_linprog` function checks for the availability of a linear programming solver in MATLAB. It likely relies on internal MATPOWER functions or MATLAB commands to probe for the existence of such a solver and returns true if the feature is available, and false otherwise.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_linprog.rst#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Bus Voltage Profile Data\nDESCRIPTION: Shows the voltage magnitude and angle at each bus in the system. Contains data for all 9 buses including their operational status.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_case9.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n================================================================================\n|     Bus Data                                                                 |\n================================================================================\n                      Voltage\n Bus ID   Status  Mag(pu)  Ang(deg)\n--------  ------  -------  --------\n      1      1     1.040     0.000\n      2      1     1.025     9.280\n      3      1     1.025     4.665\n      4      1     1.026    -2.217\n      5      1     1.013    -3.687\n      6      1     1.032     1.967\n      7      1     1.016     0.728\n      8      1     1.026     3.720\n      9      1     0.996    -3.989\n```\n\n----------------------------------------\n\nTITLE: Branch Power Flow Data\nDESCRIPTION: Details power flows and losses in all system branches, showing from/to bus power injections and series losses. Includes total system losses.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_case9.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n================================================================================\n|     Branch Data                                                              |\n================================================================================\n Branch     From       To             From Bus Injection   To Bus Injection      Series Loss\n   ID      Bus ID    Bus ID   Status   P (MW)   Q (MVAr)   P (MW)   Q (MVAr)   P (MW)   Q (MVAr)\n--------  --------  --------  ------  --------  --------  --------  --------  --------  --------\n      1         1         4      1      71.64     27.05    -71.64    -23.92     0.000      3.12\n      2         4         5      1      30.70      1.03    -30.54    -16.54     0.166      0.90\n      3         5         6      1     -59.46    -13.46     60.82    -18.07     1.354      5.90\n      4         3         6      1      85.00    -10.86    -85.00     14.96     0.000      4.10\n      5         6         7      1      24.18      3.12    -24.10    -24.30     0.088      0.75\n      6         7         8      1     -75.90    -10.70     76.38     -0.80     0.475      4.03\n      7         8         2      1    -163.00      9.18    163.00      6.65     0.000     15.83\n      8         8         9      1      86.62     -8.38    -84.32    -11.31     2.300     11.57\n      9         9         4      1     -40.68    -38.69     40.94     22.89     0.258      2.19\n                                                                              --------  --------\n                                                                      Total:    4.641     48.38\n```\n\n----------------------------------------\n\nTITLE: Specifying Three-Phase Transformer Data in MATLAB for Power System Analysis\nDESCRIPTION: Sets up the transformer data for a three-phase power system, including transformer IDs, connected buses, operational status, impedance parameters, and base values. This data is essential for modeling voltage transformations and power flows through transformers.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_5\n\nLANGUAGE: MATLAB\nCODE:\n```\n%% transformer\n%\txfid\tfbus\ttbus\tstatus\tR\tX\tbasekVA\tbasekV\nmpc.xfmr3p = [\n    1\t2\t3\t1\t0.01\t0.06\t6000\t12.47;\n];\n```\n\n----------------------------------------\n\nTITLE: Building a Mathematical Model in MATPOWER\nDESCRIPTION: Creates a mathematical model object for AC optimal power flow and builds it using network model, data model, and MATPOWER options.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/math-model.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nmm = mp.math_model_opf_acps();\nmm.build(nm, dm, mpopt);\n```\n\n----------------------------------------\n\nTITLE: Checking for Parsed Solution - MATLAB\nDESCRIPTION: The `has_parsed_soln()` method determines if a parsed solution is already available within the model, offering an efficient way to manage solution states without redundant computations.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_7\n\nLANGUAGE: MATLAB\nCODE:\n```\nparsed_solution_available = opt_model.has_parsed_soln();\n```\n\n----------------------------------------\n\nTITLE: Converting Linear Constraints - MATLAB\nDESCRIPTION: This snippet describes the `convert_lin_constraint()` function, which is utilized to convert a single set of doubly-bounded inequality constraints into distinct sets of equality and upper-bounded inequality constraints, aiding in clearer problem structuring.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB\nCODE:\n```\nconverted_constraints = convert_lin_constraint(constraints);\n```\n\n----------------------------------------\n\nTITLE: Enabling Cartesian Voltage Representation in MATLAB\nDESCRIPTION: Demonstrates how to enable the Newton power flow with hybrid voltage update using the cartesian voltage representation option.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.1.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\npf.v_cartesian = 2;\n```\n\n----------------------------------------\n\nTITLE: Power System Analysis Results - Generator Data\nDESCRIPTION: Lists detailed generator output data including real and reactive power generation and associated lambda values for economic dispatch. Shows data for all 6 generators in the system.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_acopf.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n================================================================================\n|     Generator Data                                                           |\n================================================================================\n Gen   Bus   Status     Pg        Qg      Lambda ($/MVA-hr)\n  #     #              (MW)     (MVAr)      P         Q    \n----  -----  ------  --------  --------  --------  --------\n  1      1      1      35.00      2.84     51.29      0.00\n  2      2      1      32.72      9.46     51.54      0.00\n  3    220      1      34.29      8.56     51.86      0.00\n```\n\n----------------------------------------\n\nTITLE: Running a Newton Power Flow on 9-bus System\nDESCRIPTION: Demonstrates how to run a simple Newton power flow analysis on the 9-bus system using the default algorithm options.\nSOURCE: https://github.com/matpower/matpower/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nrunpf('case9')\n```\n\n----------------------------------------\n\nTITLE: MATPOWER System Summary Output\nDESCRIPTION: Displays key system metrics including number of buses, generators, loads, and branches along with total generation, load, and loss values.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_opf_case9.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  elements                on     off    total\n --------------------- ------- ------- -------\n  Buses                     9       -       9\n    Areas                                   1\n    Zones                                   1\n  Generators                3       -       3\n  Loads                     3       -       3\n  Branches                  9       -       9\n    Lines                   9       -       9\n    Transformers            0       -       0\n```\n\n----------------------------------------\n\nTITLE: Converting Constraint Multipliers - MATLAB\nDESCRIPTION: This function, `convert_lin_constraint_multipliers()`, is responsible for transforming multipliers applicable to linear constraints from their separate sets for equalities and upper bounds back to a single set for doubly-bounded constraints, facilitating unified management of multipliers.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_5\n\nLANGUAGE: MATLAB\nCODE:\n```\nconverted_multipliers = convert_lin_constraint_multipliers(multipliers);\n```\n\n----------------------------------------\n\nTITLE: Implementing Arc Length Parameterization in MATLAB\nDESCRIPTION: `pne_pfcn_arc_length()` is a MATLAB implementation that provides functional support for parameterizations using the arc length method within PNE, which is vital for controlling the solver's evolutionary path.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_8\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_pfcn_arc_length()\n```\n\n----------------------------------------\n\nTITLE: Mapping Indexes for Set Types in MATLAB\nDESCRIPTION: The `mp_idx_manager/set_type_idx_map()` method returns information on mapping indices for set types in MATLAB, which aids in correlating indices with their named counterparts in models.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_13\n\nLANGUAGE: MATLAB\nCODE:\n```\nmp_idx_manager/set_type_idx_map()\n```\n\n----------------------------------------\n\nTITLE: Checking quadprog Feature in MATLAB\nDESCRIPTION: This snippet describes the `have_feature_quadprog` function, presumably written in MATLAB, that checks for the availability of a quadratic programming solver. The function's purpose is to determine if the system has the necessary tools for solving quadratic programming problems within MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_quadprog.rst#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Setting Power Flow Options in MATLAB/Octave\nDESCRIPTION: Demonstrates how to set options for different power flow algorithms using the pf.alg option in MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\npf.v_cartesian = 2;\npf.alg = 'NR-SH';\npf.alg = 'NR-IH';\npf.alg = 'NR-SP';\n```\n\n----------------------------------------\n\nTITLE: Running OPF with Oval Capability Curves in MATPOWER\nDESCRIPTION: Executes optimal power flow analysis on case39 with oval capability curve constraints. Shows configuration of MATPOWER options and retrieval of generator power outputs.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_8\n\nLANGUAGE: matlab\nCODE:\n```\n>> mpopt = mpoption('verbose', 0, 'out.all', 0);\n>> task = run_opf('case39', mpopt, 'mpx', mp.xt_oval_cap_curve);\n>> task.dm.elements.gen.tab(:, {'pg', 'qg'})\n```\n\n----------------------------------------\n\nTITLE: Branch Power Flow Data Table\nDESCRIPTION: Detailed power flow data for each branch showing bus injections and losses\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_t_auction_case.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n Branch     From       To             From Bus Injection   To Bus Injection      Series Loss\n   ID      Bus ID    Bus ID   Status   P (MW)   Q (MVAr)   P (MW)   Q (MVAr)   P (MW)   Q (MVAr)\n--------  --------  --------  ------  --------  --------  --------  --------  --------  --------\n      1         1         2      1      27.33    -10.34    -27.17      7.83     0.165      0.50\n```\n\n----------------------------------------\n\nTITLE: Power System OPF Results Display\nDESCRIPTION: Formatted text output showing optimal power flow solution results for a 30-bus power system including voltage profiles, power generation, loads, and branch flows. The solution was obtained in 0.09 seconds with an objective function value of 764.39 $/hr.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_2.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOPF succeeded in 0.09 seconds (0.06 setup + 0.03 solve)\nObjective Function Value = 764.39 $/hr\n================================================================================\n|     System Summary                                                           |\n================================================================================\n  elements                on     off    total\n --------------------- ------- ------- -------\n  Buses                    30       -      30\n    Areas                                   3\n    Zones                                   1\n  Generators                6       -       6\n  Loads                    20       -      20\n  Branches                 41       -      41\n    Lines                  41       -      41\n    Transformers            0       -       0\n  Fixed Shunts              2       -       2\n  Reserve Gens              5       -       5\n  Reserve Zones             2       -       2\n```\n\n----------------------------------------\n\nTITLE: Using have_feature for Feature Detection in MATLAB\nDESCRIPTION: The have_feature() function provides a modular, extensible alternative to have_fcn() for detecting features, where detection of a feature named <tag> is implemented by have_feature_<tag>().\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\nhave_feature()\n```\n\n----------------------------------------\n\nTITLE: Power System Analysis Results Output\nDESCRIPTION: Terminal output showing power flow solution results including system summary, bus data, generator data, load data, and branch flow information. The analysis completed successfully in 0.17 seconds with an objective function value of 755.96 $/hr.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_1.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOPF succeeded in 0.17 seconds (0.13 setup + 0.05 solve)\nObjective Function Value = 755.96 $/hr\n================================================================================\n|     System Summary                                                           |\n================================================================================\n  elements                on     off    total\n --------------------- ------- ------- -------\n  Buses                    30       -      30\n    Areas                                   3\n    Zones                                   1\n  Generators                6       -       6\n  Loads                    20       -      20\n  Branches                 41       -      41\n    Lines                  41       -      41\n    Transformers            0       -       0\n  Fixed Shunts              2       -       2\n  Reserve Gens              6       -       6\n  Reserve Zones             2       -       2\n```\n\n----------------------------------------\n\nTITLE: Formatted Power System Analysis Output\nDESCRIPTION: Text-based output showing detailed power system analysis results including system summary, area summary, generator data, dispatchable load data, bus data and branch data. The output displays power flow calculations, voltage levels, and economic parameters.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_dcopf.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nConverged in 0.00 seconds\nObjective Function Value = 2234.87 $/hr\n================================================================================\n|     System Summary                                                           |\n================================================================================\n\nHow many?                How much?              P (MW)            Q (MVAr)\n---------------------    -------------------  -------------  -----------------\nBuses             30     Total Gen Capacity     360.0           0.0 to 0.0\nGenerators         6     On-line Capacity       360.0           0.0 to 0.0\nCommitted Gens     6     Generation (actual)    241.6               0.0\nLoads             20     Load                   241.6               0.0\n  Fixed           17       Fixed                151.6               0.0\n  Dispatchable     3       Dispatchable          90.0 of 90.0       0.0\n...\n```\n\n----------------------------------------\n\nTITLE: Updating to OOP notation\nDESCRIPTION: The code has been updated to utilize Object-Oriented Programming (OOP) notation for the `opt_model` object. It avoids calls to deprecated methods by using `init_indexed_name()` and `add_lin_constraint()` instead to ensure compatibility and maintainability.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/relnotes/MOST-Release-Notes-1.0.1.md#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\n\"Updated to use OOP notation for `opt_model` object, and avoid calls\n    to deprecated methods, using `init_indexed_name()` and\n    `add_lin_constraint()` instead.\"\n```\n\n----------------------------------------\n\nTITLE: Defining the function to check BPMPD feature availability - Python\nDESCRIPTION: This code snippet automatically generates a function documentation for the 'have_feature_bpmpd', which checks if the BPMPD feature is available in the MATPOWER environment. The function is expected to be a part of the larger MATPOWER library used for power systems operations.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_bpmpd.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: have_feature_bpmpd\n```\n\n----------------------------------------\n\nTITLE: Describing MIQPS with Gurobi in Plaintext\nDESCRIPTION: The miqps_gurobi function is described using reStructuredText syntax for automatic documentation. It is part of the MATPOWER package, interfacing with the Gurobi solver to handle mixed-integer quadratic programming problems.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/miqps_gurobi.rst#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.. currentmodule:: mp_opt_model\n\n:raw-html:`<div style=\\\"float: right\\\"><a href=\\\"https://github.com/MATPOWER/mp-opt-model/blob/master/lib/miqps_gurobi.m\\\" target=_blank><svg height=\\\"32\\\" aria-hidden=\\\"true\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"32\\\" data-view-component=\\\"true\\\" class=\\\"octicon octicon-mark-github v-align-middle color-fg-default\\\"><path d=\\\"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z\\\"></path></svg></a></div>`\n\nmiqps_gurobi\n------------\n\n.. autofunction:: miqps_gurobi\n\n```\n\n----------------------------------------\n\nTITLE: Setting power flow algorithm option to FSOLVE\nDESCRIPTION: Code to select the new AC power flow solver based on the fsolve() function using the pf.alg option in MATPOWER options structure.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-8.0.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\n'pf.alg'` option to `'FSOLVE'\n```\n\n----------------------------------------\n\nTITLE: Detecting FMINCON Interior Point Method Availability in MATLAB\nDESCRIPTION: A function that checks MATLAB's fmincon solver capabilities, specifically for the interior point method, to determine feature support and compatibility\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_fmincon_ipm.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction [success, message] = have_feature_fmincon_ipm()\n```\n\n----------------------------------------\n\nTITLE: Setting Power Flow Options for Voltage Representation in MATLAB/Octave\nDESCRIPTION: Shows how to set options for power flow algorithms using different voltage representations in MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_6\n\nLANGUAGE: MATLAB\nCODE:\n```\npf.current_balance = true;\npf.v_cartesian = true;\n```\n\n----------------------------------------\n\nTITLE: Calling Custom NLP Solvers in nlps_master - MATLAB\nDESCRIPTION: This snippet describes the enhancement to the `nlps_master()` function, enabling the user to specify custom nonlinear programming solvers by modifying the `opt.alg` parameter. This allows flexibility in handling different solvers that may be required in various optimization scenarios.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt.alg = '<MY_SOLVER>'; nlps_master();\n```\n\n----------------------------------------\n\nTITLE: Quadratic Programming Solver using GLPK in MATPOWER\nDESCRIPTION: The `qps_glpk` function serves as an interface within MATPOWER for solving quadratic programming problems utilizing the GLPK solver. It takes a structured problem definition, typically created using MATPOWER's optimization model framework, as input, configures the problem for GLPK, invokes the solver, and then extracts and returns the solution, including the optimal objective function value and decision variable values.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/qps_glpk.rst#2025-04-22_snippet_0\n\nLANGUAGE: m\nCODE:\n```\nqps_glpk\n--------\n\n.. autofunction:: qps_glpk\n```\n\n----------------------------------------\n\nTITLE: Displaying Generator Power Constraints\nDESCRIPTION: Tables showing generator active and reactive power limits, including lower and upper bounds, actual values, and associated dual variables for both real and reactive power.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/extension.rst#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n                                      Active Power Limits\n     Gen ID    Bus ID     mu LB      LB       pg       UB       mu UB\n    --------  --------  ---------  -------  -------  -------   --------\n          1         1      9.046    90.00    90.00   250.00       -   \n          2        30       -       10.00    98.02   270.00      0.047\n\n                                     Reactive Power Limits\n     Gen ID    Bus ID     mu LB      LB       qg       UB       mu UB\n    --------  --------  ---------  -------  -------  -------   --------\n          2        30      0.623  -300.00   -22.65   300.00       -   \n```\n\n----------------------------------------\n\nTITLE: Testing Nested Structure Copying Function in MATPOWER\nDESCRIPTION: This function tests the capability to properly copy nested MATLAB structures, which is important for preserving data integrity during optimization operations in MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/t_nested_struct_copy.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction t_nested_struct_copy\n```\n\n----------------------------------------\n\nTITLE: Fixing RampWear Cost Indexing\nDESCRIPTION: Addresses an issue with the dimension of `RampWear` cost indexing when `mdi.OpenEnded` is true. This ensures correct cost calculation and indexing for ramp wear constraints.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/relnotes/MOST-Release-Notes-1.0.1.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\n\"Fix dimension of `RampWear` cost indexing if `mdi.OpenEnded` is true.\"\n```\n\n----------------------------------------\n\nTITLE: Formatting DC Line Data Row\nDESCRIPTION: This function formats and returns a string representing a row of DC line data. The row includes identifiers, status, power flow information, and reactive injections. The function relies on attributes of the DC line object.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_12\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction str = pp_data_row_det(obj, dm, k, out_e, mpopt, fd, pp_args)\n    str = sprintf('%7d %9d %9d %6d %10.2f %9.2f %9.2f %9.2f %9.2f', ...\n        obj.tab.uid(k), obj.tab.bus_fr(k), obj.tab.bus_to(k), ...\n        obj.tab.status(k), ...\n        obj.tab.p_fr(k), obj.tab.p_to(k), ...\n        obj.tab.p_fr(k) - obj.tab.p_to(k), ...\n        obj.tab.q_fr(k), obj.tab.q_to(k) );\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Compatibility for Artelys Knitro\nDESCRIPTION: This update ensures that MP-Opt-Model remains compatible with Artelys Knitro version 13.1 and later, enabling users to leverage the latest features and improvements of the solver.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.1.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Setting Power Flow Algorithm Option\nDESCRIPTION: Example of how to select the new FSOLVE-based AC power flow solver using MATPOWER options\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-8.0b1.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n'pf.alg' = 'FSOLVE'\n```\n\n----------------------------------------\n\nTITLE: Running OPF with Reserve Requirements in MATLAB\nDESCRIPTION: Adds a top-level program runopf_w_res() to solve an OPF with fixed reserve requirements, demonstrating the use of the new userfcn mechanism.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_31\n\nLANGUAGE: MATLAB\nCODE:\n```\nrunopf_w_res()\n```\n\n----------------------------------------\n\nTITLE: Implementing AC Gizmo Network Model Element in MATLAB\nDESCRIPTION: Abstract class for AC-specific gizmo implementations that handles parameter building and variable addition. Includes methods for constructing model parameters from data tables and adding state variables.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/gizmo-element/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef (Abstract) nme_gizmo_ac < mp.nme_gizmo% & mp.form_ac\n    methods\n        function obj = add_zvars(obj, nm, dm, idx)\n            tab = obj.data_model_element(dm).tab;\n            nk = obj.nk;\n            switch idx{:}\n                case 1\n                    Zmax = ones(nk, 1);\n                    Zr   = tab.Zr1;\n                    Zi   = tab.Zi1;\n                case 2\n                    Zmax = 2 * ones(nk, 1);\n                    Zr   = tab.Zr2;\n                    Zi   = tab.Zi2;\n            end\n            vname_r = sprintf('Zr%d_gizmo', idx{:});\n            vname_i = sprintf('Zi%d_gizmo', idx{:});\n            nm.add_var('zr', vname_r, nk, Zr, -Zmax, Zmax);\n            nm.add_var('zi', vname_i, nk, Zi, -Zmax, Zmax);\n        end\n\n        function obj = build_params(obj, nm, dm)\n            build_params@mp.nme_gizmo(obj, nm, dm);    %% call parent\n            tab = obj.data_model_element(dm).tab;\n            nk = obj.nk;\n\n            %% collect parameters from data table\n            y1 = tab.Y1r + 1j * tab.Y1i;\n            y2 = tab.Y2r + 1j * tab.Y2i;\n            ll = tab.Lr + 1j * tab.Li;\n            ii = tab.Ir + 1j * tab.Ii;\n            m1 = tab.M1r + 1j * tab.M1i;\n            m2 = tab.M2r + 1j * tab.M2i;\n            nn = tab.Nr + 1j * tab.Ni;\n            ss = tab.Sr + 1j * tab.Si;\n            zz = zeros(nk, 1);\n\n            %% construct model parameters\n            j1 = (1:nk);\n            j2 = nk+j1;\n            j3 = nk+j2;\n            obj.Y = sparse( ...\n                [j1 j1 j1 j2 j2 j2 j3 j3 j3]', ...\n                [j1 j2 j3 j1 j2 j3 j1 j2 j3]', ...\n                [y1; zz; -y1; zz; y2; zz; -y1; zz; y1], 3*nk, 3*nk );\n            obj.L = sparse( ...\n                [j1 j1 j2 j2 j3 j3 ]', ...\n                [j1 j2 j1 j2 j1 j2 ]', ...\n                [zz; ll; zz; -ll; zz; zz], 3*nk, 2*nk );\n            obj.i = [-ii; ii; zz];\n            obj.M = sparse( ...\n                [j1 j1 j1 j2 j2 j2 j3 j3 j3]', ...\n                [j1 j2 j3 j1 j2 j3 j1 j2 j3]', ...\n                [m1; -m1; zz; -m1; m1; zz; zz; zz; m2], 3*nk, 3*nk );\n            obj.N = sparse( ...\n                [j1 j1 j2 j2 j3 j3 ]', ...\n                [j1 j2 j1 j2 j1 j2 ]', ...\n                [zz; zz; nn; zz; -nn; zz], 3*nk, 2*nk );\n            obj.s = [zz; -ss; ss];\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Implementing Oval PQ Capability Constraint Hessian in MATLAB\nDESCRIPTION: Method to evaluate the Hessian matrices of the oval constraint function with respect to active and reactive power variables. This is used for second-order optimization methods.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction d2H = oval_pq_capability_hess(obj, xx, lam, idx, p0, q0, a2, b2)\n    [p, q] = deal(xx{:});\n    if ~isempty(idx)\n        p = p(idx);\n        q = q(idx);\n    end\n    ng = length(p);\n    zz = sparse(ng, ng);\n\n    %% evaluate constraint Hessian\n    d2H_pp = sparse(1:ng, 1:ng, 2 * lam ./ a2, ng, ng);\n    d2H_qq = sparse(1:ng, 1:ng, 2 * lam ./ b2, ng, ng);\n    d2H = [ d2H_pp  zz;\n            zz      d2H_qq ];\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Linear Constraint with Transpose Option - MATLAB\nDESCRIPTION: This snippet outlines the addition of the option to `opt_model.add_lin_constraint()` to use the transpose of the _A_ matrix, greatly optimizing memory usage for sparse matrices with an extensive number of columns relative to rows. It's particularly relevant for storage constraints within the 8760-hour planning horizon context.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt_model.add_lin_constraint(A', b);\n```\n\n----------------------------------------\n\nTITLE: Loading and Updating the Power System Case\nDESCRIPTION: This code snippet initializes the case data and updates it with wind and storage profiles using the specified inputs. It prepares the model for running simulations in the MOST framework.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/other/MOST-Release-Checklist.md#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\nmpc = loadcase('ex_case3b');\n        transmat = ex_transmat(12);\n        xgd = loadxgendata('ex_xgd_uc', mpc);\n        [iwind, mpc, xgd] = addwind('ex_wind_uc', mpc, xgd);\n        [iess, mpc, xgd, sd] = addstorage('ex_storage', mpc, xgd);\n        contab = ex_contab();\n        profiles = getprofiles('ex_load_profile');\n        profiles = getprofiles('ex_wind_profile', profiles, iwind);\n        mdi = loadmd(mpc, transmat, xgd, sd, contab, profiles);\n        mpopt = mpoption('verbose', 1);\n        mdo = most(mdi, mpopt);\n```\n\n----------------------------------------\n\nTITLE: Implementing AC Power Flow Mathematical Model for Legacy DC Lines in MATLAB\nDESCRIPTION: This class implements the AC power flow mathematical model for legacy DC lines, updating the data model with solved values after the model has been solved.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_32\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef mme_legacy_dcline_pf_ac < mp.mme_legacy_dcline\n    methods\n        function obj = data_model_update_on(obj, mm, nm, dm, mpopt)\n            %% legacy DC line active power\n            pp = nm.get_idx('port');\n            s_fr = nm.soln.gs_(pp.i1.legacy_dcline(1):pp.iN.legacy_dcline(1));\n            s_to = nm.soln.gs_(pp.i1.legacy_dcline(2):pp.iN.legacy_dcline(2));\n\n            %% update in the data model\n            dme = obj.data_model_element(dm);\n            dme.tab.p_fr(dme.on) = real(s_fr) * dm.base_mva;\n            dme.tab.q_fr(dme.on) = -imag(s_fr) * dm.base_mva;\n            dme.tab.p_to(dme.on) = -real(s_to) * dm.base_mva;\n            dme.tab.q_to(dme.on) = -imag(s_to) * dm.base_mva;\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Displaying Branch Flow Constraints\nDESCRIPTION: Table showing branch flow constraints in MVA, including flow limits and actual flows at both ends of the branch with their dual variables.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/extension.rst#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n     Branch     From        \"From\" End       Limit       \"To\" End         To\n       ID      Bus ID    mu_sm_fr   sm_fr    sm_ub    sm_to    mu_sm_to  Bus ID\n    --------  --------  ---------  -------  -------  -------  ---------  --------\n          5         6      2.762    40.00    40.00    40.00      7.375         7\n```\n\n----------------------------------------\n\nTITLE: MATPOWER opt_model Class Definition\nDESCRIPTION: This snippet represents the class definition for `opt_model` in MATPOWER. It's automatically generated documentation shows the class's inheritance and member functions. The surrounding reStructuredText indicates this is a class that will be documented.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/classes/opt_model.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n\n.. autoclass:: mp_opt_model.@opt_model.opt_model\n    :show-inheritance:\n    :members:\n\n```\n\n----------------------------------------\n\nTITLE: Detecting Target Lambda Event in MATLAB\nDESCRIPTION: The `pne_event_target_lam()` in MATLAB is utilized to detect when a solver reaches a target Î» value, which facilitates handling specific target-oriented solver constraints and adjustments.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_7\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_event_target_lam()\n```\n\n----------------------------------------\n\nTITLE: Configuring IPOPT Solver Options in MATPOWER\nDESCRIPTION: This section describes the `ipopt_options` function, which is used to configure options for the IPOPT solver within the MATPOWER optimization model. The function allows users to customize the solver's behavior, affecting its convergence, accuracy, and performance. This customization is crucial for achieving optimal solutions in power system optimization problems.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/ipopt_options.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nipopt_options\n-------------\n\n.. autofunction:: ipopt_options\n```\n\n----------------------------------------\n\nTITLE: Defining Three-Phase Bus Data in MATLAB for Power System Analysis\nDESCRIPTION: Specifies the bus data for a three-phase power system, including bus IDs, types, base voltages, and initial voltage magnitudes and angles for each phase. This data is crucial for power flow and other network analyses.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\n%% bus data\n%\tbusid\ttype\tbasekV\tVm1\tVm2\tVm3\tVa1\tVa2\tVa3\nmpc.bus3p = [\n    1\t3\t12.47\t1\t1\t1\t0\t-120\t120;\n    2\t1\t12.47\t1\t1\t1\t0\t-120\t120;\n    3\t1\t4.16\t1\t1\t1\t0\t-120\t120;\n    4\t1\t4.16\t1\t1\t1\t0\t-120\t120;\n];\n```\n\n----------------------------------------\n\nTITLE: MATPOWER Sparse Multi-Model Variable Class Definition\nDESCRIPTION: This snippet documents the `sm_variable` class within the `mp_opt_model` module, which is intended for defining sparse multi-model variables within the MATPOWER optimization environment. The `:show-inheritance:` and `:members:` directives indicate that the documentation should include information about the class's inheritance and its member variables and methods.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/classes/mp/sm_variable.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: sm_variable\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting nme_branch Class in MATLAB\nDESCRIPTION: This code snippet uses Sphinx documentation syntax to generate documentation for the nme_branch class in MATPOWER. It shows the class inheritance and lists all public members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/nme_branch.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: nme_branch\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining nme_load_dc Class in MATLAB\nDESCRIPTION: This class is part of the MATPOWER library and is responsible for representing and managing DC power system loads. It utilizes the conventions of MATLAB class definitions to encapsulate its properties and methods.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/nme_load_dc.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. autoclass:: nme_load_dc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mp.mme_xfmr3p Class in Python\nDESCRIPTION: This snippet demonstrates how to import and use the mme_xfmr3p class from the MATPOWER mp module. The class is likely related to three-phase transformer modeling in power systems analysis.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_xfmr3p.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom matpower.mp import mme_xfmr3p\n\n# Create an instance of mme_xfmr3p\nxfmr = mme_xfmr3p()\n\n# Use the class methods and attributes\n# (Specific usage depends on the class implementation)\n```\n\n----------------------------------------\n\nTITLE: Setting OSQP as DC OPF Solver in MATLAB\nDESCRIPTION: Demonstrates how to configure MATPOWER to use OSQP for solving DC OPF problems. This requires the MATLAB interface to OSQP to be installed.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.1.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nopf.dc.solver = 'OSQP';\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Legacy DC Line OPF Class in MATLAB\nDESCRIPTION: Abstract class definition for legacy DC line OPF that extends the base legacy DC line class. It adds cost properties and serves as a parent class for both AC and DC formulations.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_34\n\nLANGUAGE: matlab\nCODE:\n```\nclassdef (Abstract) mme_legacy_dcline_opf < mp.mme_legacy_dcline\n    properties\n        cost\n    end\n\n    methods\n\n        % (listed and described individually below)\n\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Bus Voltage and LMP Data Table\nDESCRIPTION: Detailed bus-wise data showing voltage magnitudes, angles and locational marginal prices for active and reactive power.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_4.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n                      Voltage            Lambda (LMP)\n Bus ID   Status  Mag(pu)  Ang(deg)  P($/MWh)  Q($/MVAr-hr)\n--------  ------  -------  --------  --------  ------------\n      1      1     0.982     0.000     3.694        -0.000\n      2      1     0.978    -0.772     3.721        -0.000\n```\n\n----------------------------------------\n\nTITLE: Power System Analysis Results Table Output\nDESCRIPTION: ASCII text-based formatted tables showing comprehensive power system analysis results including bus voltages, generator outputs, load consumption, branch flows, shunt data and reserve requirements. Data includes status indicators, power values, voltage magnitudes/angles, and pricing information.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_5.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOPF succeeded in 0.45 seconds (0.42 setup + 0.04 solve)\nObjective Function Value = 743.66 $/hr\n\n================================================================================\n|     Bus Data                                                                 |\n================================================================================\n                      Voltage       Lambda (LMP)\n Bus ID   Status  Mag(pu)  Ang(deg)  P($/MWh)\n--------  ------  -------  --------  --------\n      1      1     1.000     0.000     3.830\n      2      1     1.000    -0.809     3.830\n    300      1     1.000    -2.419     3.830\n[...remainder of tables truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Dispatchable Load Constraints Summary\nDESCRIPTION: Report detailing active power limits for dispatchable loads, showing bus numbers, minimum and maximum load constraints, and actual load values\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_dcopf.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nGen   Bus                  Active Power Limits\n  #     #     Pmin mu     Pmin       Pg       Pmax    Pmax mu\n----  -----   -------   --------  --------  --------  -------\n   7     7     47.961    -30.00    -30.00      0.00      -   \n```\n\n----------------------------------------\n\nTITLE: Importing mme_branch_opf_ac Class from MATPOWER MP Module\nDESCRIPTION: This code snippet shows how to import the mme_branch_opf_ac class from the MATPOWER mp module. It uses Python's currentmodule directive to set the context for the subsequent class documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_branch_opf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n```\n\n----------------------------------------\n\nTITLE: Displaying DC Line Flow Constraints\nDESCRIPTION: Table showing DC line flow constraints with power flow limits, actual flows, and associated dual variables for each DC line.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/extension.rst#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n     DC Line    From       To                   Active Power Flow (MW)\n       ID      Bus ID    Bus ID     mu LB       LB      p_fr      UB      mu UB\n    --------  --------  --------  ---------  -------  -------  -------  ---------\n          1        30         4       -        1.00    10.00    10.00      0.760\n```\n\n----------------------------------------\n\nTITLE: MATPOWER Copyright and License Header Example in MATLAB\nDESCRIPTION: Standard copyright and license header that should be included in all MATPOWER source files. This header identifies the MATPOWER project, copyright information, author details, and license reference.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/MATPOWER-dev-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n%   MATPOWER\n%   Copyright (c) 2016-2023, Power Systems Engineering Research Center (PSERC)\n%   by <Your Name>, <Your Affiliation>\n%\n%   This file is part of MATPOWER.\n%   Covered by the 3-clause BSD License (see LICENSE file for details).\n%   See https://matpower.org for more info.\n```\n\n----------------------------------------\n\nTITLE: Specifying Line Construction Data in MATLAB for Three-Phase Power System Modeling\nDESCRIPTION: Sets up the line construction data for a three-phase power system, including construction IDs and per-mile impedance parameters. This detailed information is used to accurately model the electrical characteristics of transmission and distribution lines in the network.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_8\n\nLANGUAGE: MATLAB\nCODE:\n```\n%% line construction\n%\tlcid\tR11\tR21\tR31\tR22\tR32\tR33\tX11\tX21\tX31\tX22\tX32\tX33\tC11\tC21\tC31\tC22\tC32\tC33\nmpc.lc = [\n    1\t0.457541\t0.15594 \t0.153474\t0.466617\t0.157996\t0.461462\t1.078\t0.501648\t0.384909\t1.04813\t0.423624\t1.06502\t15.0671\t-4.86241\t-1.85323\t15.875\t-3.09098\t14.3254\n];\n```\n\n----------------------------------------\n\nTITLE: Importing MATPOWER mp Module in MATLAB\nDESCRIPTION: This code snippet shows how to import the mp module from MATPOWER. It sets the current module context for the subsequent documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_opf_acp.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. currentmodule:: matpower.+mp\n```\n\n----------------------------------------\n\nTITLE: Documenting dmce_load_mpc2 Class in MATPOWER mp Module\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the dmce_load_mpc2 class. It shows the class inheritance and lists all its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dmce_load_mpc2.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: dmce_load_mpc2\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy DC Line Extension Class in MATLAB\nDESCRIPTION: This code defines the 'xt_legacy_dcline' class, which inherits from 'mp.extension'. It overrides methods to specify element classes for different models and tasks, adding support for legacy DC lines in various MATPOWER scenarios.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/extension.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef xt_legacy_dcline < mp.extension\n    methods\n        function dmc_elements = dmc_element_classes(obj, dmc_class, fmt, mpopt)\n            switch fmt\n                case 'mpc2'\n                    dmc_elements = { @mp.dmce_legacy_dcline_mpc2 };\n                otherwise\n                    dmc_elements = {};\n            end\n        end\n\n        function dm_elements = dm_element_classes(obj, dm_class, task_tag, mpopt)\n            switch task_tag\n                case {'PF', 'CPF'}\n                    dm_elements = { @mp.dme_legacy_dcline };\n                case 'OPF'\n                    dm_elements = { @mp.dme_legacy_dcline_opf };\n                otherwise\n                    dm_elements = {};\n            end\n        end\n\n        function nm_elements = nm_element_classes(obj, nm_class, task_tag, mpopt)\n            switch task_tag\n                case {'PF', 'CPF'}\n                    v_cartesian = mpopt.pf.v_cartesian;\n                case {'OPF'}\n                    v_cartesian = mpopt.opf.v_cartesian;\n            end\n            switch upper(mpopt.model)\n                case 'AC'\n                    if v_cartesian\n                        nm_elements = { @mp.nme_legacy_dcline_acc };\n                    else\n                        nm_elements = { @mp.nme_legacy_dcline_acp };\n                    end\n                case 'DC'\n                    nm_elements = { @mp.nme_legacy_dcline_dc };\n                otherwise\n                    nm_elements = {};\n            end\n        end\n\n        function mm_elements = mm_element_classes(obj, mm_class, task_tag, mpopt)\n            switch task_tag\n                case {'PF', 'CPF'}\n                    switch upper(mpopt.model)\n                        case 'AC'\n                            mm_elements = { @mp.mme_legacy_dcline_pf_ac };\n                        case 'DC'\n                            mm_elements = { @mp.mme_legacy_dcline_pf_dc };\n                    end\n                case {'OPF'}\n                    switch upper(mpopt.model)\n                        case 'AC'\n                            mm_elements = { @mp.mme_legacy_dcline_opf_ac };\n                        case 'DC'\n                            mm_elements = { @mp.mme_legacy_dcline_opf_dc };\n                    end\n                otherwise\n                    dm_elements = {};\n            end\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Legacy DC Line AC OPF Class Implementation in MATLAB\nDESCRIPTION: Class for handling AC optimal power flow for legacy DC lines, which includes updating the data model with solution values and shadow prices for constraints.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_40\n\nLANGUAGE: matlab\nCODE:\n```\nclassdef mme_legacy_dcline_opf_ac < mp.mme_legacy_dcline_opf\n    methods\n        function obj = data_model_update_on(obj, mm, nm, dm, mpopt)\n            dme = obj.data_model_element(dm);\n            nme = obj.network_model_element(nm);\n\n            %% legacy DC line active power\n            pp = nm.get_idx('port');\n            s_fr = nm.soln.gs_(pp.i1.legacy_dcline(1):pp.iN.legacy_dcline(1));\n            s_to = nm.soln.gs_(pp.i1.legacy_dcline(2):pp.iN.legacy_dcline(2));\n            vm_setpoint = abs(nme.C' * nm.soln.v);\n\n            %% shadow prices on legacy DC line limits\n            vv = mm.get_idx();\n            lambda = mm.soln.lambda;\n            mu_p_fr_lb = lambda.lower(vv.i1.Pdcf:vv.iN.Pdcf);\n            mu_p_fr_ub = lambda.upper(vv.i1.Pdcf:vv.iN.Pdcf);\n            mu_q_fr_lb = lambda.lower(vv.i1.Qdcf:vv.iN.Qdcf);\n            mu_q_fr_ub = lambda.upper(vv.i1.Qdcf:vv.iN.Qdcf);\n            mu_q_to_lb = lambda.lower(vv.i1.Qdct:vv.iN.Qdct);\n            mu_q_to_ub = lambda.upper(vv.i1.Qdct:vv.iN.Qdct);\n\n            %% update in the data model\n            dme.tab.p_fr(dme.on) = real(s_fr) * dm.base_mva;\n            dme.tab.q_fr(dme.on) = -imag(s_fr) * dm.base_mva;\n            dme.tab.p_to(dme.on) = -real(s_to) * dm.base_mva;\n            dme.tab.q_to(dme.on) = -imag(s_to) * dm.base_mva;\n            dme.tab.vm_setpoint_fr(dme.on) = vm_setpoint(1:dme.n);\n            dme.tab.vm_setpoint_to(dme.on) = vm_setpoint(dme.n+1:end);\n            dme.tab.mu_p_fr_lb(dme.on) = mu_p_fr_lb / dm.base_mva;\n            dme.tab.mu_p_fr_ub(dme.on) = mu_p_fr_ub / dm.base_mva;\n            %% because of sign swap on reactive quantities, bounds are swapped\n            dme.tab.mu_q_fr_lb(dme.on) = mu_q_fr_ub / dm.base_mva;\n            dme.tab.mu_q_fr_ub(dme.on) = mu_q_fr_lb / dm.base_mva;\n            dme.tab.mu_q_to_lb(dme.on) = mu_q_to_ub / dm.base_mva;\n            dme.tab.mu_q_to_ub(dme.on) = mu_q_to_lb / dm.base_mva;\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Solving a Mathematical Model in MATPOWER\nDESCRIPTION: Initializes solver options for a mathematical model and solves it using those options.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/math-model.rst#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\nopt = mm.solve_opts(nm, dm, mpopt);\nmm.solve(opt);\n```\n\n----------------------------------------\n\nTITLE: Setting DC OPF Solver Option in MATLAB\nDESCRIPTION: Adds an option OPF_ALG_DC to allow users to select the desired solver for DC OPF.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_26\n\nLANGUAGE: MATLAB\nCODE:\n```\nOPF_ALG_DC\n```\n\n----------------------------------------\n\nTITLE: MOST Example 5 - Multi-Period OPF Function Declaration\nDESCRIPTION: This snippet documents the `most_ex5_mpopf` function.  It seems to be an example showcasing the functionality of the MOST toolbox for solving multi-period optimal power flow problems. The function details are extracted using the `autofunction` directive, likely within a Sphinx documentation setup.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/most_ex5_mpopf.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: most_ex5_mpopf\n```\n\n----------------------------------------\n\nTITLE: Example MATPOWER Commands\nDESCRIPTION: Sample MATPOWER commands to verify installation, run tests, and perform power flow analysis. These commands demonstrate basic functionality of MATPOWER within the Docker container.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/MATPOWER-Docker.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmpver\ntest_matpower\nrunpf('case9');\nmpopt = mpoption('verbose', 2);\nrunopf('case2383wp', mpopt);\n```\n\n----------------------------------------\n\nTITLE: Computing DC PTDF Matrix in MATLAB\nDESCRIPTION: Adds makePDFT.m which builds the DC PTDF (Power Transfer Distribution Factors) matrix for a specified slack distribution.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_35\n\nLANGUAGE: MATLAB\nCODE:\n```\nmakePDFT()\n```\n\n----------------------------------------\n\nTITLE: Returning Detected Event Details by Name in MATLAB\nDESCRIPTION: The function `pne_detected_event()` returns detailed information regarding detected events having a specific name, aiding in troubleshooting and event-specific response handling in PNE modeling.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_5\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_detected_event()\n```\n\n----------------------------------------\n\nTITLE: Legacy DC Line DC OPF Class Implementation in MATLAB\nDESCRIPTION: Class for handling DC optimal power flow for legacy DC lines, which updates the data model with active power flows and shadow prices for constraints, setting reactive powers to zero.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_41\n\nLANGUAGE: matlab\nCODE:\n```\nclassdef mme_legacy_dcline_opf_dc < mp.mme_legacy_dcline_opf\n    methods\n        function obj = data_model_update_on(obj, mm, nm, dm, mpopt)\n            dme = obj.data_model_element(dm);\n\n            %% legacy DC line active power\n            pp = nm.get_idx('port');\n            p_fr = nm.soln.gp(pp.i1.legacy_dcline(1):pp.iN.legacy_dcline(1));\n            p_to = nm.soln.gp(pp.i1.legacy_dcline(2):pp.iN.legacy_dcline(2));\n\n            %% shadow prices on legacy DC line limits\n            vv = mm.get_idx();\n            lambda = mm.soln.lambda;\n            mu_p_fr_lb = lambda.lower(vv.i1.Pdcf:vv.iN.Pdcf);\n            mu_p_fr_ub = lambda.upper(vv.i1.Pdcf:vv.iN.Pdcf);\n\n            %% update in the data model\n            dme.tab.p_fr(dme.on) = p_fr * dm.base_mva;\n            dme.tab.q_fr(dme.on) = 0;\n            dme.tab.p_to(dme.on) = -p_to * dm.base_mva;\n            dme.tab.q_to(dme.on) = 0;\n            dme.tab.mu_p_fr_lb(dme.on) = mu_p_fr_lb / dm.base_mva;\n            dme.tab.mu_p_fr_ub(dme.on) = mu_p_fr_ub / dm.base_mva;\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Implementing DC Formulation for Legacy DC Lines in MATLAB\nDESCRIPTION: This class implements the DC version of the legacy DC line network model element. It adds variables for active power flows and builds the DC model parameters.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_30\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef nme_legacy_dcline_dc < mp.nme_legacy_dcline & mp.form_dc\n    methods\n        function obj = add_zvars(obj, nm, dm, idx)\n            ndc = obj.nk;\n            dme = obj.data_model_element(dm);\n            switch idx{1}\n                case 1      % flow at \"from\"\n                    nm.add_var('z', 'Pdcf', ndc, dme.p_fr_start, dme.p_fr_lb, dme.p_fr_ub);\n                case 2      % flow at \"to\"\n                    nm.add_var('z', 'Pdct', ndc, dme.p_to_start, -Inf, Inf);\n            end\n        end\n\n        function obj = build_params(obj, nm, dm)\n            build_params@mp.nme_legacy_dcline(obj, nm, dm); %% call parent\n            obj.K = speye(obj.nk * obj.nz);\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Defining AC Cartesian Formulation for Legacy DC Lines in MATLAB\nDESCRIPTION: This snippet defines the class mp.nme_legacy_dcline_acc, which inherits from mp.nme_legacy_dcline_ac and mp.form_acc for the AC cartesian voltage formulation of legacy DC lines.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_28\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef nme_legacy_dcline_acc < mp.nme_legacy_dcline_ac & mp.form_acc\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing AC Polar Gizmo Network Model Element in MATLAB\nDESCRIPTION: Concrete class for gizmo network model elements using polar voltage formulation. Inherits from nme_gizmo_ac and form_acp.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/gizmo-element/index.rst#2025-04-22_snippet_5\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef nme_gizmo_acp < mp.nme_gizmo_ac & mp.form_acp\nend\n```\n\n----------------------------------------\n\nTITLE: Using MATPOWER Extension for OPF with Reserves\nDESCRIPTION: Example of running an optimal power flow (OPF) with the mp.xt_reserves extension to add co-optimization of fixed zonal reserves to the standard OPF problem.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/customizing.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nrun_opf(mpc, mpopt, 'mpx', mp.xt_reserves);\n```\n\n----------------------------------------\n\nTITLE: Configuring Three-Phase Branch Data in MATLAB for Power System Modeling\nDESCRIPTION: Defines the branch (line) data for a three-phase power system, including branch IDs, connected buses, operational status, line construction type, and length. This information is used to model the transmission and distribution lines in the network.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB\nCODE:\n```\n%% branch data\n%\tbrid\tfbus\ttbus\tstatus\tlcid\tlen\nmpc.line3p = [\n    1\t1\t2\t1\t1\t2000/5280;\n    2\t3\t4\t1\t1\t2500/5280;\n];\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting form_dc Class in Python\nDESCRIPTION: This snippet demonstrates how to import and document the form_dc class from the MATPOWER MP module using Python's documentation tools. It uses the autoclass directive to automatically generate documentation for the class and its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/form_dc.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: form_dc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting form_ac Class in Python\nDESCRIPTION: This snippet demonstrates how to import and document the form_ac class from the MATPOWER mp module using Sphinx autodoc. It shows the class inheritance and members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/form_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: form_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Test Function for MIPS in MATLAB\nDESCRIPTION: The snippet automatically generates the MIPS test function, referred to as `t_mips`, which will facilitate comprehensive tests for the MIPS module within MATLAB. Users need to ensure the MATPOWER library is correctly installed and configured in their environment. The function expects no input parameters and will output the results of the tests executed on the MIPS functionalities.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/t_mips.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: t_mips\n```\n\n----------------------------------------\n\nTITLE: Defining Autofunction in MATLAB\nDESCRIPTION: This snippet defines an autofunction for the most module, which allows automatic inference of inputs and outputs, streamlining the function usage in MATLAB applications. The prerequisite is having the MATPOWER library installed. The key parameter is the 'most' which represents the specific functionality within the library. The expected output is the results returned by the autofunction when called within MATLAB.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/most.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: most\n```\n\n----------------------------------------\n\nTITLE: Updating Network and Data Models in MATPOWER\nDESCRIPTION: Updates the network and data models with solution data from a solved mathematical model, cycling through all math model elements.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/math-model.rst#2025-04-22_snippet_2\n\nLANGUAGE: matlab\nCODE:\n```\nnm = mm.network_model_x_soln(nm);\ndm = mm.data_model_update(nm, dm, mpopt);\n```\n\n----------------------------------------\n\nTITLE: Initializing Legacy Continuation Power Flow Task\nDESCRIPTION: Defines a legacy task class for continuation power flow calculations in power system analysis, providing methods for handling computational tasks related to power flow tracing\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/task_cpf_legacy.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nmp.task_cpf_legacy\n```\n\n----------------------------------------\n\nTITLE: Generator Output Summary Table\nDESCRIPTION: Generator-wise active and reactive power output data showing unit commitment status and bus connectivity.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_4.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                             Power Generation\n Gen ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n      1         1      1       42.3      -7.5\n      2         2      1       56.3      -3.9\n```\n\n----------------------------------------\n\nTITLE: Load Consumption Data Table\nDESCRIPTION: Real and reactive power consumption data for each load in the system, including total load values.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_cpf_case9.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n                             Power Consumption\nLoad ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n      1         5      1      326.2     132.2\n      2         7      1      225.1      74.6\n      3         9      1      246.3      84.5\n                            --------  --------\n                   Total:     797.7     291.2\n```\n\n----------------------------------------\n\nTITLE: Adding Variables for Legacy DC Line OPF in MATLAB\nDESCRIPTION: Method to add necessary variables to the mathematical model, including constructing cost parameters and adding piecewise linear cost variables (ydc) if needed.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_36\n\nLANGUAGE: matlab\nCODE:\n```\nfunction obj = add_vars(obj, mm, nm, dm, mpopt)\n    %% collect/construct all legacy DC line cost parameters\n    obj.build_cost_params(dm);\n\n    %% piecewise linear costs\n    if ~isempty(obj.cost) && obj.cost.pwl.n\n        mm.add_var('ydc', obj.cost.pwl.n);\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Documenting Plot Storage Function in Python\nDESCRIPTION: This snippet is an auto-generated reference to the plot_storage function from the MATPOWER framework. It serves to provide developers with direct access to the function's definition and its intended application within the library. The function's implementation details can be accessed from the linked source code, which is essential for understanding how to utilize it effectively.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/plot_storage.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: plot_storage\n```\n\n----------------------------------------\n\nTITLE: Model Solution Status Check - MATLAB\nDESCRIPTION: The `is_solved()` method introduced in the `opt_model` context allows checking whether the model has been solved, providing a quick status update for users on the opt_model's state.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_6\n\nLANGUAGE: MATLAB\nCODE:\n```\nsolved_status = opt_model.is_solved();\n```\n\n----------------------------------------\n\nTITLE: Element Connection Method Examples in MATLAB\nDESCRIPTION: Example method calls that define connections between network elements and buses. Shows how cxn_type() returns 'bus' and cxn_idx_prop() returns bus connection properties.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/data-model.rst#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\ncxn_type()      % returns 'bus'\ncxn_idx_prop()   % returns {'fbus', 'tbus'}\n```\n\n----------------------------------------\n\nTITLE: Autogenerating MD Initialization Function - reStructuredText\nDESCRIPTION: This snippet defines and auto-generates the 'md_init' function documentation. It is used for initializing necessary configurations before executing MD processing in MATPOWER. It leverages the 'autofunction' directive to automatically document the function's interface.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/md_init.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: md_init\n```\n\n----------------------------------------\n\nTITLE: Auto-Documenting IDX Profile Function\nDESCRIPTION: This snippet provides documentation for the idx_profile function using reStructuredText directive. The autofunction directive automatically generates documentation for the function, including its purpose and usage information.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/idx_profile.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: idx_profile\n```\n\n----------------------------------------\n\nTITLE: Setting MATPOWER Options for DC OPF with OSQP Solver\nDESCRIPTION: Sets the DC OPF solver to OSQP in MATPOWER options.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nopf.dc.solver = 'OSQP';\n```\n\n----------------------------------------\n\nTITLE: Setting PV to PQ Conversion Option in MATLAB Power Flow\nDESCRIPTION: Adds option ENFORCE_Q_LIMS = 2 for runpf to allow one-at-a-time conversion of buses from PV to PQ for generator reactive power limit violations.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_32\n\nLANGUAGE: MATLAB\nCODE:\n```\nENFORCE_Q_LIMS = 2\n```\n\n----------------------------------------\n\nTITLE: Documenting math_model_cpf_acp Class in MATPOWER (Python)\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the math_model_cpf_acp class. It shows the class inheritance and all of its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_cpf_acp.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: math_model_cpf_acp\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Calculating Branch Angle Differences\nDESCRIPTION: Function for calculating voltage angle differences across branches in the power system model.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.0.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB/Octave\nCODE:\n```\ncalc_branch_angle\n```\n\n----------------------------------------\n\nTITLE: Building Cost Parameters for OPF\nDESCRIPTION: This function builds and returns cost parameters in a convenient structure for OPF from the properties of the DC line, leveraging utilities for polynomial and piecewise linear costs. The cost is structured for appropriate mathematical modeling.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_15\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction cost = build_cost_params(obj, dm)\n    if ismember('cost', obj.tab.Properties.VariableNames)\n        poly = mp.cost_table_utils.poly_params(obj.tab.cost, obj.on, dm.base_mva);\n        pwl = mp.cost_table_utils.pwl_params(obj.tab.cost, obj.on, dm.base_mva);\n        cost = struct( ...\n                'poly', poly, ...\n                'pwl',  pwl ...\n            );\n    else\n        cost = struct([]);\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Version Retrieval Function in Python\nDESCRIPTION: This snippet defines an automated function named mpomver that provides the version number of the MATPOWER Optimal Model. It is designed to ensure that users can easily fetch the current version information for their implementations. No external dependencies are required beyond the MATPOWER library itself.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/mpomver.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: mpomver\n```\n\n----------------------------------------\n\nTITLE: Initializing System-Wide Parameters in MATLAB for Three-Phase Power System\nDESCRIPTION: Sets the system frequency and base kVA for a three-phase power system model in MATPOWER. These parameters are essential for defining the per-unit system and electrical characteristics of the network.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\n%%-----  3 Phase Model Data  -----%%\n%% system data\nmpc.freq = 60;      %% frequency, Hz\nmpc.basekVA = 1000; %% system kVA base\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints for Legacy DC Line OPF in MATLAB\nDESCRIPTION: Method that adds linear constraints for DC line power flows between \"from\" and \"to\" ends, as well as constraints for piecewise linear costs if they exist.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_37\n\nLANGUAGE: matlab\nCODE:\n```\nfunction obj = add_constraints(obj, mm, nm, dm, mpopt)\n    %% add constraint on active flows and ends of DC line\n    dme = obj.data_model_element(dm);\n    A = [spdiags(dme.loss1 - 1, 0, dme.n, dme.n) -speye(dme.n, dme.n)];\n    b = -dme.loss0;\n    mm.add_lin_constraint('dcline_legacy', A, b, b, {'Pdcf', 'Pdct'});\n\n    %% piecewise linear costs\n    if ~isempty(obj.cost) && obj.cost.pwl.n\n        mm.add_lin_constraint('ycondc', obj.cost.pwl.A, [], obj.cost.pwl.b, {'Pdcf', 'ydc'});\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Documenting c118swf Function\nDESCRIPTION: This snippet uses the `autofunction` directive to automatically generate documentation for the `c118swf` function. It assumes the function is defined in the current module (specified by `currentmodule:: most`).\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/c118swf.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: c118swf\n```\n\n----------------------------------------\n\nTITLE: Defining Base Mathematical Model Element for Legacy DC Lines in MATLAB\nDESCRIPTION: This abstract class defines the base mathematical model element for legacy DC lines, implementing only the name method.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_31\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef (Abstract) mme_legacy_dcline < mp.mm_element\n    methods\n        function name = name(obj)\n            name = 'legacy_dcline';\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Creating Options Struct for PNE Master in MATLAB\nDESCRIPTION: `mpopt2pneopt()` in MATLAB creates or modifies an options struct for `pnes_master()` based on a MATPOWER options struct, which is necessary for configuring solver behavior in PNE applications.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_14\n\nLANGUAGE: MATLAB\nCODE:\n```\nmpopt2pneopt()\n```\n\n----------------------------------------\n\nTITLE: Documenting t_ok Function in reStructuredText\nDESCRIPTION: This snippet employs the reStructuredText markup language to document the t_ok function, which is part of the MATPOWER testing framework. It provides a concise directive for auto-generating the function documentation, making it easier for users to understand its usage within tests.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/source/functions/t_ok.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: t_ok\n```\n\n----------------------------------------\n\nTITLE: Handling Identical Base and Target Cases in runcpf\nDESCRIPTION: This modification to 'runcpf' ensures it can gracefully handle scenarios where the base and target cases are identical, preventing the system from getting into infinite loops. This is crucial for stability in power flow simulations.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_22\n\nLANGUAGE: MATLAB\nCODE:\n```\nModified `runcpf()` to handle identical base and target cases\n```\n\n----------------------------------------\n\nTITLE: Documenting the Task OPF Class in Python\nDESCRIPTION: This snippet uses Sphinx directives to generate documentation for the task_opf class, enabling automatic extraction of class details, methods, and member functions. It is essential for maintaining clear and comprehensive documentation for users.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/task_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: task_opf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy DC Line Data Model Converter Element in MATLAB\nDESCRIPTION: Defines the mp.dmce_legacy_dcline_mpc2 class that inherits from mp.dmc_element to handle importing and exporting data from the dcline and dclinecost fields in a MATPOWER case struct.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_21\n\nLANGUAGE: matlab\nCODE:\n```\nclassdef dmce_legacy_dcline_mpc2 < mp.dmc_element\n    methods\n        function name = name(obj)\n            name = 'legacy_dcline';\n        end\n\n        % (other methods listed and described individually below)\n\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Availability Functionality in reStructuredText\nDESCRIPTION: This snippet documents a function 'have_feature_opti_clp' that determines if the optimization feature 'opti_clp' is available within the MATPOWER framework. It utilizes the 'autofunction' directive to automatically generate documentation based on the function. This function is part of the mp_opt_model module and is essential for ensuring that relevant optimization features are accessible.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_opti_clp.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: have_feature_opti_clp\n```\n\n----------------------------------------\n\nTITLE: Adding Costs for Legacy DC Line OPF in MATLAB\nDESCRIPTION: Method to add different types of costs to the mathematical model: quadratic polynomial costs, higher-order polynomial costs, and piecewise linear costs for DC line power flow.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_38\n\nLANGUAGE: matlab\nCODE:\n```\nfunction obj = add_costs(obj, mm, nm, dm, mpopt)\n    if ~isempty(obj.cost)\n        %% (quadratic) polynomial costs on Pdcf\n        if obj.cost.poly.have_quad_cost\n            mm.add_quad_cost('polPdcf', obj.cost.poly.Q, obj.cost.poly.c, obj.cost.poly.k, {'Pdcf'});\n        end\n\n        %% (order 3 and higher) polynomial costs on Pg\n        if ~isempty(obj.cost.poly.i3)\n            dme = obj.data_model_element(dm);\n            cost_Pdcf = @(xx)mp.cost_table.poly_cost_fcn( ...\n                xx, dm.base_mva, dme.tab.cost.poly_coef(dme.on, :), ...\n                obj.cost.poly.i3);\n            mm.add_nln_cost('polPdcf', 1, cost_Pdcf, {'Pdcf'});\n        end\n\n        %% piecewise linear costs\n        if obj.cost.pwl.n\n            mm.add_quad_cost('pwldc', [], ones(obj.cost.pwl.n, 1), 0, {'ydc'});\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling MP-Core Globally\nDESCRIPTION: Command to disable MP-Core globally for the current session, ensuring all legacy commands use the legacy code without MP-Core internally.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/users-manual/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: matlab\nCODE:\n```\nhave_feature('mp_core', 0)\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for dme_line3p Class in MATPOWER\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the dme_line3p class. It shows inheritance and includes all members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dme_line3p.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: dme_line3p\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Headers for DC Line Limits Output\nDESCRIPTION: This function generates header rows for displaying the limits section of the DC line data output. It includes both base and specific headers for clarity in presentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_19\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction h = pp_get_headers_lim(obj, dm, out_e, mpopt, pp_args)\n    h = [ pp_get_headers_lim@mp.dme_shared_opf(obj, dm, out_e, mpopt, pp_args) ...\n        {   ' DC Line    From       To                   Active Power Flow (MW)', ...\n            '   ID      Bus ID    Bus ID     mu LB       LB      p_fr      UB      mu UB', ...\n            '--------  --------  --------  ---------  -------  -------  -------  ---------' } ];\nend\n```\n\n----------------------------------------\n\nTITLE: Core Nonlinear Equation Solver Function - MATLAB\nDESCRIPTION: The function `nleqs_core()` provides a core nonlinear equation solver that accommodates an arbitrary update function. This is foundational for implementing different solving methods such as Gauss-Seidel and Newton solvers, enhancing flexibility in equation handling.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-2.1.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\nnleqs_core()\n```\n\n----------------------------------------\n\nTITLE: Running AC OPF Using Legacy Framework with Core Bypass\nDESCRIPTION: Command to run AC OPF using legacy framework while bypassing MP-Core completely by setting the 'exp.use_legacy_core' option.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/users-manual/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\nmpopt = mpoption('exp.use_legacy_core', 1);\nrunopf('case9', mpopt)\n```\n\n----------------------------------------\n\nTITLE: Documenting MP Table Class - Python\nDESCRIPTION: This snippet uses Sphinx directives to generate documentation for the 'mp_table' class. It includes class inheritance and member functions, helping users understand how to use and extend this class effectively.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp_table.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: mp_table\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Testing Configuration in MATLAB for MATPOWER Library\nDESCRIPTION: Autofunction reference for test_matpower, which runs the complete test suite for the MATPOWER library. This appears to be a link to the source file test_matpower.m in the lib/t directory of the MATPOWER repository.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/tests/test_matpower.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\ntest_matpower\n```\n\n----------------------------------------\n\nTITLE: Setting Default OPF Solver in MATLAB\nDESCRIPTION: Sets the pure MATLAB implementation of PDIPM solver as the default (OPF_ALG = 560) if no optional MEX solvers are installed.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_28\n\nLANGUAGE: MATLAB\nCODE:\n```\nOPF_ALG = 560\n```\n\n----------------------------------------\n\nTITLE: Running OPF with Oval Capability Curves in MATLAB\nDESCRIPTION: Example code that runs an optimal power flow with the custom oval-shaped generator capability curves on the 39-bus test case and displays the resulting generator dispatches.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_7\n\nLANGUAGE: MATLAB\nCODE:\n```\n>> mpopt = mpoption('verbose', 0, 'out.all', 0);\n>> mpopt.exp.mm_element_classes = {{@mp.mme_gen_opf_ac_oval, 'mp.mme_gen_opf_ac'}};\n>> task = run_opf('case39', mpopt);\n>> task.dm.elements.gen.tab(:, {'pg', 'qg'})\n\nans =\n\n  10Ã—2 table\n\n      pg        qg  \n    ______    ______\n\n    682.74    171.94\n    639.42    128.46\n    672.03    253.14\n    641.75    147.08\n```\n\n----------------------------------------\n\nTITLE: Generating Python Documentation for mme_gen_pf_dc Class\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate documentation for the mme_gen_pf_dc class. It shows the class inheritance and lists all public methods.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_gen_pf_dc.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_gen_pf_dc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Data Table Variables\nDESCRIPTION: Defines column names for the DC line main data table, including inherited element properties and DC line specific fields.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_4\n\nLANGUAGE: matlab\nCODE:\n```\nfunction names = main_table_var_names(obj)\n    names = horzcat( main_table_var_names@mp.dm_element(obj), ...\n        {'bus_fr', 'bus_to', 'loss0', 'loss1', ...\n        'vm_setpoint_fr', 'vm_setpoint_to', ...\n        'p_fr_lb', 'p_fr_ub', ...\n        'q_fr_lb', 'q_fr_ub', 'q_to_lb', 'q_to_ub', ...\n        'p_fr', 'q_fr', 'p_to', 'q_to'} );\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Natural Parameterization in MATLAB\nDESCRIPTION: In MATLAB, `pne_pfcn_natural()` implements natural parameterizations within parameterized nonlinear equations, offering a straightforward parameter control method in PNE modeling.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_9\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_pfcn_natural()\n```\n\n----------------------------------------\n\nTITLE: MATPOWER MIQP Solver using MOSEK\nDESCRIPTION: This is a stub for a MATLAB function `miqps_mosek` that interfaces with the MOSEK solver to solve mixed-integer quadratic programming problems within the MATPOWER environment. The actual implementation details of this function are not provided in the context.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/miqps_mosek.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n\".. autofunction:: miqps_mosek\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Gizmo Network Model Element in MATLAB\nDESCRIPTION: Abstract class definition for the base gizmo network model element that defines core properties like name, number of ports (3), and number of non-voltage states (2). Inherits from mp.nm_element.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/gizmo-element/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef (Abstract) nme_gizmo < mp.nm_element\n    methods\n        function name = name(obj)\n            name = 'gizmo';\n        end\n\n        function np = np(obj)\n            np = 3;     %% this is a 3 port element\n        end\n\n        function nz = nz(obj)\n            nz = 2;     %% 2 (possibly complex) non-voltage states per element\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Defining Nonlinear Programming Solver - MATLAB\nDESCRIPTION: This snippet defines the nlps_master function, which serves as an interface for solving nonlinear programming problems within the MATPOWER framework. It is automatically documented for better usability and understanding, facilitating easier integration in optimization tasks.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/nlps_master.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: nlps_master\n```\n\n----------------------------------------\n\nTITLE: Power System Summary Results\nDESCRIPTION: Comprehensive summary of power system elements including buses, generators, loads, branches, and total system metrics like generation capacity, losses, and voltage profiles.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_opf_t_auction_case.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOPF succeeded in 0.09 seconds (0.05 setup + 0.04 solve)\nObjective Function Value = 2525.32 $/hr\n================================================================================\n|     System Summary                                                           |\n================================================================================\n  elements                on     off    total\n --------------------- ------- ------- -------\n  Buses                    30       -      30\n    Areas                                   3\n    Zones                                   1\n  Generators                9       -       9\n  Loads                    17       -      17\n  Branches                 39       2      41\n    Lines                  39       2      41\n    Transformers            0       -       0\n  Fixed Shunts              2       -       2\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mp.net_model_acp in Python\nDESCRIPTION: This snippet demonstrates how to import and use the net_model_acp class from the MATPOWER library. The class is part of the mp module and is used for AC power flow network modeling.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/net_model_acp.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom matpower.mp import net_model_acp\n\n# Create an instance of the AC power flow network model\nac_model = net_model_acp()\n\n# Use the model for power system analysis\n# (specific method calls would depend on the class implementation)\n```\n\n----------------------------------------\n\nTITLE: Exporting MATPOWER Case to PSS/E Format\nDESCRIPTION: Function to export a MATPOWER case to PSS/E RAW data format for interoperability with other power system tools.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.0.md#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB/Octave\nCODE:\n```\nsave2psse()\n```\n\n----------------------------------------\n\nTITLE: Calling Custom MILP/MIQP Solvers in miqps_master - MATLAB\nDESCRIPTION: This snippet adds the capability within the `miqps_master()` function to integrate custom mixed-integer linear programming (MILP) or mixed-integer quadratic programming (MIQP) solvers by setting the `opt.alg` value, enhancing the model's adaptability to user-specific algorithms.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt.alg = '<MY_SOLVER>'; miqps_master();\n```\n\n----------------------------------------\n\nTITLE: Displaying DC Line Data in Power System\nDESCRIPTION: Tabular display of DC line data showing power flow between buses, including status, power flow values in MW, losses, and reactive power injection in MVAr.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/extension.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n     DC Line    From       To              Power Flow (MW)      Loss    Reactive Inj (MVAr)\n       ID      Bus ID    Bus ID   Status    From       To       (MW)      From       To\n    --------  --------  --------  ------  --------  --------  --------  --------  --------\n          1        30         4      1      10.00      8.90      1.10    -10.00     10.00\n          2         7         9      1       7.84      7.84      0.00     -0.00     -0.00\n          3         5         8      0       0.00      0.00      0.00      0.00      0.00\n          4         5         9      1       6.06      5.75      0.30     -0.59    -10.00\n```\n\n----------------------------------------\n\nTITLE: Scaling Load by Zones in MATLAB\nDESCRIPTION: Adds a function scale_load.m to scale load by zones in power system models.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_34\n\nLANGUAGE: MATLAB\nCODE:\n```\nscale_load()\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mme_gen_opf_ac Class in MATPOWER\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate documentation for the mme_gen_opf_ac class. It includes information about class inheritance and its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_gen_opf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_gen_opf_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Disabling MP-Core in the legacy framework\nDESCRIPTION: Code to manually disable MP-Core in the legacy framework on newer versions of MATLAB or Octave, forcing MATPOWER to use the legacy core code instead of the new architecture.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-8.0.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nhave_feature('mp_core', 0)\n```\n\n----------------------------------------\n\nTITLE: Registering Event Functions in MATLAB\nDESCRIPTION: `pne_register_events()` registers event functions in MATLAB, which are crucial for defining specific conditions that trigger events in PNE computational models.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_12\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_register_events()\n```\n\n----------------------------------------\n\nTITLE: Providing Unified PNE Solver Interface in MATLAB\nDESCRIPTION: The `pnes_master()` function offers a unified interface for solving parameterized nonlinear equation problems in MATLAB. It is essential for PNE problems requiring equality constraints with the number of variables exceeding constraints by one. The function can work directly or facilitate creating models with specified conditions.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\npnes_master()\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Class Documentation\nDESCRIPTION: Auto-documentation directive for the nme_load_acc class, configured to show inheritance and member information\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/nme_load_acc.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: nme_load_acc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Detecting Nose Point Event for PNE in MATLAB\nDESCRIPTION: `pne_event_nose()` in MATLAB detects when a limit or nose point event occurs during parameterized nonlinear equation solving, an essential aspect for critical point identification.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_6\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_event_nose()\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Values for Legacy DC Line OPF in MATLAB\nDESCRIPTION: Method that provides a starting point for piecewise linear cost variables by setting them to a feasible value slightly above the maximum cost in the piecewise linear cost model.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_39\n\nLANGUAGE: matlab\nCODE:\n```\nfunction x0 = interior_x0(obj, mm, nm, dm, x0)\n    %% set gen cost variables to something feasible\n    if ~isempty(obj.cost) && obj.cost.pwl.n > 0\n        vv = mm.get_idx();\n        dme = obj.data_model_element(dm);\n        maxc = max_pwl_cost(dme.tab.cost);\n        x0(vv.i1.ydc:vv.iN.ydc) = maxc + 0.1 * abs(maxc);\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Installation of ipopt_auxdata with have_fcn\nDESCRIPTION: This snippet checks for the installation of 'ipopt_auxdata.m' when the version of Ipopt is 3.11.x or higher, preventing fatal errors due to incomplete installations. It requires the 'have_fcn' function to check the software dependencies.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_18\n\nLANGUAGE: MATLAB\nCODE:\n```\n`have_fcn()` for installation check of `ipopt_auxdata.m`\n```\n\n----------------------------------------\n\nTITLE: Building a Data Model in MATPOWER\nDESCRIPTION: This code snippet demonstrates how to build a data model in MATPOWER. It creates a data model converter, initializes a data model object, and then builds the data model using a specified case and the converter.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/data-model.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\ndmc = mp.dm_converter_mpc2().build();\ndm = mp.data_model();\ndm.build('case9', dmc);\n```\n\n----------------------------------------\n\nTITLE: Documenting mme_bus_pf_ac Class in MATPOWER mp Module using Python\nDESCRIPTION: This code snippet uses Python's autoclass directive to generate documentation for the mme_bus_pf_ac class. It shows the class inheritance and lists all public members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_bus_pf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_bus_pf_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Installing MATPOWER via Installer Function\nDESCRIPTION: The new installation function automatically updates MATLAB or Octave paths for MATPOWER or provides the commands needed to do so manually.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.0.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB/Octave\nCODE:\n```\ninstall_matpower()\n```\n\n----------------------------------------\n\nTITLE: Displaying Nonlinear Inequality Constraints for Oval Capability Curves\nDESCRIPTION: Shows the solution details for nonlinear inequality constraints related to oval capability curves, including constraint values, upper bounds and multipliers.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_9\n\nLANGUAGE: matlab\nCODE:\n```\n>> task.mm.display_soln('nli', 'PQoval');\n```\n\n----------------------------------------\n\nTITLE: Defining AC Polar Formulation for Legacy DC Lines in MATLAB\nDESCRIPTION: This snippet defines the class mp.nme_legacy_dcline_acp, which inherits from mp.nme_legacy_dcline_ac and mp.form_acp for the AC polar voltage formulation of legacy DC lines.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_29\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef nme_legacy_dcline_acp < mp.nme_legacy_dcline_ac & mp.form_acp\nend\n```\n\n----------------------------------------\n\nTITLE: Defining addwind Function in Python\nDESCRIPTION: The addwind function is defined in the MATPOWER framework to facilitate the integration of wind power resources into power system models. It is essential for simulating the effects of wind generation on the system. The function operates within the context of power system analysis and relies on existing MATPOWER data structures.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/addwind.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: addwind\n```\n\n----------------------------------------\n\nTITLE: Running AC OPF Using New Flexible Framework\nDESCRIPTION: Command to run AC Optimal Power Flow using the new flexible framework, which requires using the underscore version of the run commands.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/users-manual/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: matlab\nCODE:\n```\nrun_opf('case9')\n```\n\n----------------------------------------\n\nTITLE: Updating version number in Contents.m\nDESCRIPTION: This snippet highlights the importance of updating the version number within the `lib/Contents.m` file as part of the release process. It ensures that the library content file correctly reports the software's version.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/other/MP-Opt-Model-Release-Checklist.md#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\n\"lib/Contents.m\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting mme_branch_opf_dc Class in Python\nDESCRIPTION: This snippet shows how to import and generate documentation for the mme_branch_opf_dc class using Sphinx autodoc. It sets the current module and uses the autoclass directive to automatically generate class documentation, including inheritance and member details.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_branch_opf_dc.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: mme_branch_opf_dc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Checking Presence of Limits Section in OPF\nDESCRIPTION: This function checks if the limits section exists for the DC line in the OPF context, returning true. It establishes the capability to manage limits for output.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_17\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction TorF = pp_have_section_lim(obj, mpopt, pp_args)\n    TorF = true;\nend\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Parameters after Updates - MATLAB\nDESCRIPTION: This snippet describes the necessary call to clear cached parameters following updates to any linear constraints or quadratic costs via the `opt_model.set_params()` function, preventing potential errors from outdated data.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_9\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt_model.set_params(param_values); opt_model.clear_cached_params();\n```\n\n----------------------------------------\n\nTITLE: Importing Data Using MATPOWER Converter\nDESCRIPTION: Loads a MATPOWER case file and imports it into a data model using the converter.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/data-model-converter.rst#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\nmpc = loadcase('case9');\ndm = dmc.import(dm, mpc);\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting mme_load_pf_ac Class in Python\nDESCRIPTION: This snippet demonstrates how to import the current module and use the autoclass directive to generate documentation for the mme_load_pf_ac class. It shows inheritance and includes all class members in the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_load_pf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: mme_load_pf_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Headers for DC Line Detail Output\nDESCRIPTION: This function generates the header rows for displaying details of DC lines. It concatenates base headers with additional specific headers. Dependencies include the parent class method for accessing initial header values.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_11\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction h = pp_get_headers_det(obj, dm, out_e, mpopt, pp_args)\n    h = [ pp_get_headers_det@mp.dm_element(obj, dm, out_e, mpopt, pp_args) ...\n        {   ' DC Line    From       To              Power Flow (MW)      Loss    Reactive Inj (MVAr)', ...\n            '   ID      Bus ID    Bus ID   Status    From       To       (MW)      From       To', ...\n            '--------  --------  --------  ------  --------  --------  --------  --------  --------' } ];\nend\n```\n\n----------------------------------------\n\nTITLE: AC Network Model Element for Legacy DC Line in MATLAB\nDESCRIPTION: Defines an abstract class for AC formulations of the DC line network model, implementing add_zvars method to add power flow variables at both ends of the line.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_27\n\nLANGUAGE: matlab\nCODE:\n```\nclassdef (Abstract) nme_legacy_dcline_ac < mp.nme_legacy_dcline & mp.form_ac\n    methods\n        function obj = add_zvars(obj, nm, dm, idx)\n            ndc = obj.nk;\n            dme = obj.data_model_element(dm);\n            switch idx{1}\n                case 1      % flow at \"from\"\n                    nm.add_var('zr', 'Pdcf', ndc, dme.p_fr_start, dme.p_fr_lb, dme.p_fr_ub);\n                    nm.add_var('zi', 'Qdcf', ndc, dme.q_fr_start, dme.q_fr_lb, dme.q_fr_ub);\n                case 2      % flow at \"to\"\n                    nm.add_var('zr', 'Pdct', ndc, dme.p_to_start, -Inf, Inf);\n                    nm.add_var('zi', 'Qdct', ndc, dme.q_to_start, dme.q_to_lb, dme.q_to_ub);\n            end\n        end\n\n        function obj = build_params(obj, nm, dm)\n```\n\n----------------------------------------\n\nTITLE: Documenting plot_gen Function in MATPOWER/MOST\nDESCRIPTION: This snippet represents the documentation entry for the `plot_gen` function within the `most` module of the MATPOWER project.  It is an auto-generated function reference.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/plot_gen.rst#2025-04-22_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n.. autofunction:: plot_gen\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for MATPOWER Data Model\nDESCRIPTION: Sphinx documentation directive that configures the auto-documentation for the data_model class, showing inheritance and all members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/data_model.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: data_model\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Loading Swedish Distribution System Cases in MATLAB\nDESCRIPTION: New Swedish distribution system test cases for DSO Kraftringen, featuring both low and high net-load scenarios with 533 buses each.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-8.0b1-8.0.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\ncase533mt_lo  % 533-bus case, DSO Kraftringen, low net-load scenario\ncase533mt_hi  % 533-bus case, DSO Kraftringen, high net-load scenario\n```\n\n----------------------------------------\n\nTITLE: Using t_is for Testing Equality in MATLAB\nDESCRIPTION: The t_is() function tests if values are equal within a specified tolerance. It handles matrices of any dimension, sparse matrices, and properly displays differences in both real and imaginary parts when there's a mismatch.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\nt_is()\n```\n\n----------------------------------------\n\nTITLE: Setting OPF Voltage Parameters\nDESCRIPTION: Configuration option for respecting generator voltage setpoints in OPF\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_14\n\nLANGUAGE: MATLAB\nCODE:\n```\nopf.use_vg = 1 % Flag to respect generator voltage setpoints\n```\n\n----------------------------------------\n\nTITLE: Computing Line Outage Distribution Factors in MATLAB\nDESCRIPTION: Adds a function makeLODF.m to compute line outage distribution factors for power system analysis.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_33\n\nLANGUAGE: MATLAB\nCODE:\n```\nmakeLODF()\n```\n\n----------------------------------------\n\nTITLE: Documenting MATPOWER Mapped Array Class\nDESCRIPTION: This code snippet demonstrates how to document the mapped_array class using autoclass directive in Sphinx documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mapped_array.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mapped_array\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Parsing Solutions with Optional Stash Argument - MATLAB\nDESCRIPTION: This snippet details the modification of the `parse_soln()` method within `opt_model`, allowing an optional `stash` input that if true, will store the parsed solutions back into the object, thereby ensuring consistency in how solution data is handled.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.2.md#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt_model.parse_soln(stash = true);\n```\n\n----------------------------------------\n\nTITLE: Adding Solver Support in qps_master()\nDESCRIPTION: This snippet describes the addition of support in the 'qps_master()' function to utilize custom solvers by setting the 'opt.alg' parameter. This enhancement allows for greater flexibility in optimization tasks by allowing users to specify their own solvers.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.1.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Custom Functions for DC Line Cost Import/Export in MATLAB\nDESCRIPTION: Implements specialized functions to handle the conversion of dclinecost data between the MATPOWER case struct format and the internal data model representation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_25\n\nLANGUAGE: matlab\nCODE:\n```\nfunction val = dcline_cost_import(obj, mpc, spec, vn)\n    if isfield(mpc, 'dclinecost') && spec.nr\n        val = mp.dmce_gen_mpc2.gencost2cost_table(mpc.dclinecost);\n    else\n        val = [];\n    end\nend\n\nfunction mpc = dcline_cost_export(obj, dme, mpc, spec, vn, ridx)\n    if dme.have_cost()\n        cost = mp.dmce_gen_mpc2.cost_table2gencost( ...\n                    [], dme.tab.cost, ridx);\n        mpc.dclinecost(1:spec.nr, 1:size(cost, 2)) = cost;\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Nonlinear Equation Problem Type Detection in MATLAB\nDESCRIPTION: Enhances opt_model to detect and solve nonlinear equation problems with only equality constraints and no costs, automatically calling appropriate solving methods\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-2.0.md#2025-04-22_snippet_2\n\nLANGUAGE: matlab\nCODE:\n```\nproblem_type() method returns 'NLEQ'\n```\n\n----------------------------------------\n\nTITLE: Documenting addgen2mpc Function with autofunction\nDESCRIPTION: This snippet uses the `autofunction` directive to automatically generate documentation for the `addgen2mpc` function within the `most` module. This includes the function signature, docstring, and any other relevant information. The documentation is generated from the source code of the `addgen2mpc` function.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/addgen2mpc.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: addgen2mpc\n```\n\n----------------------------------------\n\nTITLE: Documenting mm_shared_pfcpf_accs Class in MATPOWER using Python\nDESCRIPTION: This code snippet uses Sphinx documentation syntax to generate documentation for the mm_shared_pfcpf_accs class. It shows the class inheritance and lists all public methods of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf_accs.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mm_shared_pfcpf_accs\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Modifying UCOPF generator shutdown strategy in MATLAB\nDESCRIPTION: Updated ucopf.m to allow turning a generator back on if shutting it off results in an infeasible or non-convergent OPF. Also changed the order of shutting down generators dispatched at zero, now choosing one with the largest mu_Pmin.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_40\n\nLANGUAGE: MATLAB\nCODE:\n```\n% modified ucopf.m to allow a generator to be turned back on if\n% shutting it off results in an infeasible (or at least\n% non-convergent) OPF, also changed the order of shutting down\n% generators which are dispatched at zero, now chooses one with\n% largest mu_Pmin\n```\n\n----------------------------------------\n\nTITLE: Adding New Function Availability Check in MATLAB\nDESCRIPTION: Extends the have_fcn() function to check for availability of the fsolve() function, enabling more flexible function detection in the library\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-2.0.md#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n'fsolve' tag added to have_fcn()\n```\n\n----------------------------------------\n\nTITLE: Indicating Cost Presence in OPF Subclass\nDESCRIPTION: This method indicates whether the OPF subclass has associated cost data, returning true for the subclass and false for the base class. It is utilized during data exports in the conversion processes.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_14\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction TorF = have_cost(obj)\n    TorF = 1;\nend\n```\n\n----------------------------------------\n\nTITLE: Importing MATPOWER mp Module in Python\nDESCRIPTION: This snippet shows how to import the mp module from MATPOWER, which contains the net_model_dc class. It uses the currentmodule directive to set the context for the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/net_model_dc.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Suite Runner with MP-Test in MATLAB\nDESCRIPTION: Example of how to create a function that runs multiple test functions as a complete test suite. Uses t_run_tests to execute a collection of tests with optional verbosity control.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/README.md#2025-04-22_snippet_3\n\nLANGUAGE: matlab\nCODE:\n```\n  function test_everything_ex1(verbose)\n  if nargin < 1\n    verbose = 0;\n  end\n  tests = {};\n  tests{end+1} = 'mptest_ex1';\n  tests{end+1} = 't_test_fcns';\n\n  t_run_tests( tests, verbose );\n```\n\n----------------------------------------\n\nTITLE: Defining Data Field for Legacy DC Line in MATLAB\nDESCRIPTION: Implements the data_field method that returns the name of the field in the MATPOWER case struct that contains the DC line data.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_22\n\nLANGUAGE: matlab\nCODE:\n```\nfunction df = data_field(obj)\n    df = 'dcline';\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving MOST Option Information in MATLAB\nDESCRIPTION: Function to provide details about MOST-specific options in the MATPOWER optimization toolkit, likely used for configuration and option management\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/mpoption_info_most.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction info = mpoption_info_most()\n```\n\n----------------------------------------\n\nTITLE: Defining dme_load_cpf Class in MATLAB for MATPOWER\nDESCRIPTION: This snippet defines the dme_load_cpf class in MATLAB, which is part of the MATPOWER toolbox. The class is likely used for continuation power flow analysis of load models in power systems.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dme_load_cpf.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: dme_load_cpf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Adding Elapsed Time to solve() Method\nDESCRIPTION: This enhancement involves adding elapsed time measurements in seconds to the results returned by the 'solve()' method of 'opt_model'. This information can be useful for performance tracking and optimization tuning.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.1.md#2025-04-22_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Enhanced savecase() String Escaping\nDESCRIPTION: Fix for bug in savecase() function to properly escape single quotes in bus names for MATPOWER case files.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_16\n\nLANGUAGE: MATLAB\nCODE:\n```\nsavecase()\n```\n\n----------------------------------------\n\nTITLE: Selecting Newton's Method with Power/Polar Formulation in MATLAB\nDESCRIPTION: Shows how to set the power flow algorithm option to use Newton's method with the default power/polar formulation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.1.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\npf.alg = 'NR-SP';\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting MIPS Example Function in MATLAB\nDESCRIPTION: This snippet demonstrates the automated documentation for the mips_example1 function in MATLAB, structuring its description in a module format. It is part of the MATPOWER project and illustrates how to invoke the function's documentation feature, which is essential for users seeking guidance on interacting with the function.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/mips_example1.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: mips_example1\n```\n\n----------------------------------------\n\nTITLE: Defining a Function to Run Multiple Tests in MATLAB/Octave\nDESCRIPTION: This snippet illustrates how to define a function named 'test_everything_ex1' that compiles multiple test functions into a list and invokes them using the t_run_tests command. It also includes a verbose mode parameter for expanded test output.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/source/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction test_everything_ex1(verbose)\n    if nargin < 1\n        verbose = 0;\n    end\n    tests = {};\n    tests{end+1} = 'mptest_ex1';\n    tests{end+1} = 't_test_fcns';\n    \n    t_run_tests(tests, verbose);\n```\n\n----------------------------------------\n\nTITLE: Setting power flow algorithm option to Z-bus Gauss method\nDESCRIPTION: Code to select the new Implicit Z-bus Gauss method power flow for distribution systems using the pf.alg option in MATPOWER options structure.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-8.0.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\npf.alg` option to `'ZG'\n```\n\n----------------------------------------\n\nTITLE: Defining math_model_pf_ac Class in MATLAB for MATPOWER\nDESCRIPTION: This code snippet defines the math_model_pf_ac class in MATLAB, which is part of the MATPOWER library. It inherits from another class and includes various member functions for AC power flow calculations.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_pf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: math_model_pf_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining MATLAB Class for DC OPF Mathematical Model in MATPOWER\nDESCRIPTION: This code snippet defines the math_model_opf_dc class in MATLAB, which is part of the MATPOWER library. It inherits from another class and contains methods for DC optimal power flow calculations.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_opf_dc.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: math_model_opf_dc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Initializing Quadratic Programming Test Function in MATLAB\nDESCRIPTION: A test function designed to validate the quadratic programming solver functionality within the MIPS library. Likely used for unit testing and verifying solver behavior under various conditions.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/t_qps_mips.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nfunction t_qps_mips\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting AC Branch Network Model Element in MATPOWER\nDESCRIPTION: This snippet demonstrates the use of Sphinx autodoc to generate documentation for the 'nme_branch_ac' class in MATPOWER. It shows the class inheritance and includes all member functions.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/nme_branch_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: nme_branch_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Running the MP-Test Test Suite in MATLAB/Octave\nDESCRIPTION: Example output of running the MP-Test test suite to verify proper installation and functionality. Shows successful test execution with timing information.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n  >> test_mptest\n  t_test_fcns.......ok\n  t_have_feature....ok\n  All tests successful (29 of 29)\n  Elapsed time 0.14 seconds.\n```\n\n----------------------------------------\n\nTITLE: Load Consumption Data\nDESCRIPTION: Displays the active and reactive power consumption at each load point in the system, including status and bus location. Shows total system load.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_case9.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n================================================================================\n|     Load Data                                                                |\n================================================================================\n                             Power Consumption\nLoad ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n      1         5      1       90.0      30.0\n      2         7      1      100.0      35.0\n      3         9      1      125.0      50.0\n                            --------  --------\n                   Total:     315.0     115.0\n```\n\n----------------------------------------\n\nTITLE: Extending DC Line Class for OPF Functionality\nDESCRIPTION: This class definition extends the base DC line class to add functionalities specific to Optimal Power Flow (OPF), including additional variable names relevant for cost calculations. Dependency on the base class is established to leverage existing functionalities.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_13\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef dme_legacy_dcline_opf < mp.dme_legacy_dcline\n    methods\n        function names = main_table_var_names(obj)\n            names = horzcat( main_table_var_names@mp.dme_legacy_dcline(obj), ...\n                {   'cost', ...\n                    'mu_p_fr_lb', 'mu_p_fr_ub', ...\n                    'mu_q_fr_lb', 'mu_q_fr_ub', ...\n                    'mu_q_to_lb', 'mu_q_to_ub'  } );\n        end\n        % Additional methods to be defined here\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Defining the Mostver Function\nDESCRIPTION: This snippet documents the 'mostver' function, which retrieves version information for the MATPOWER module. It utilizes the 'autofunction' directive for automatic documentation generation, reflecting the current implementation.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/mostver.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: mostver\n```\n\n----------------------------------------\n\nTITLE: Running MATPOWER with Command-Line Interface\nDESCRIPTION: Command to start Octave in command-line mode within the MATPOWER Docker container. This provides a lightweight interface for running MATPOWER commands without GUI requirements.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/MATPOWER-Docker.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm matpower/matpower:latest octave-cli\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting net_model_ac Class in Python\nDESCRIPTION: This snippet shows how to import and document the net_model_ac class from the MATPOWER library using Python's autodoc feature. It sets the current module and uses the autoclass directive to generate documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/net_model_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: net_model_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Function for Sedumi Feature Detection in Python\nDESCRIPTION: This snippet defines the function 'have_feature_sedumi', which is responsible for checking whether the Sedumi feature is available in the MATPOWER framework. This function may be used to optimize conditions based on feature availability.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_sedumi.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: have_feature_sedumi\n```\n\n----------------------------------------\n\nTITLE: Rebasing Before Pushing\nDESCRIPTION: This command rebases local changes onto the latest upstream commits before pushing to ensure a linear history and avoid merge commits, which can complicate the repository history.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/master\n```\n\n----------------------------------------\n\nTITLE: Documenting math_model_cpf_accs Class in MATPOWER MP Module (Python)\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the math_model_cpf_accs class. It shows the class inheritance and all its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_cpf_accs.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: math_model_cpf_accs\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Reserve Generation Constraint Multipliers\nDESCRIPTION: Detailed table showing generation constraint information including generator and bus IDs, lower and upper bound Lagrange multipliers, and generation limits\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_3.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n Gen ID    Bus ID     mu LB      LB        r       UB       mu UB     mu pg UB\n--------  --------  ---------  -------  -------  -------   --------   --------\n      1         1       -        0.00    25.00    25.00      0.100       -   \n      2         2       -        0.00    15.00    25.00       -          -   \n      3        22      1.000     0.00      -      25.00       -          -   \n      4        23       -        0.00      -       0.00       -          -   \n      5        27      2.000     0.00      -      25.00       -          -   \n      7        13       -        0.00    20.00    25.00       -          -   \n```\n\n----------------------------------------\n\nTITLE: Displaying Quadratic Costs in MATPOWER\nDESCRIPTION: This snippet shows the quadratic costs associated with the optimization problem, including their indices, descriptions, total cost, quadratic component, linear component, constant term, and average cost.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/lib/t/display_soln/t_om_solve_qps_display_soln.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n=====  QUADRATIC COSTS  =====\n  idx    description                   cost  =  quad    linear  constant  average\n------- ---------------------------- -------- -------- -------- -------- --------\n   1    c(1)                          1.09667  1.09667        0        0  1.09667\n------- ---------------------------- -------- -------- -------- -------- --------\n        Sum of Displayed Costs        1.09667  1.09667        0        0         \n```\n\n----------------------------------------\n\nTITLE: Disabling MP-Core\nDESCRIPTION: Code to manually disable MP-Core and force use of legacy core code\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-8.0b1.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\nhave_feature('mp_core', 0)\n```\n\n----------------------------------------\n\nTITLE: Building DC Line Parameters\nDESCRIPTION: Constructs parameters for online DC lines including per unit conversions and voltage setpoint application.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_8\n\nLANGUAGE: matlab\nCODE:\n```\nfunction obj = build_params(obj, dm)\n    obj.loss0 = obj.tab.loss0(obj.on) / dm.base_mva;\n    obj.loss1 = obj.tab.loss1(obj.on);\n    obj.p_fr_start = obj.tab.p_fr(obj.on) / dm.base_mva;\n    obj.p_to_start = (obj.loss1 - 1) .* obj.p_fr_start + obj.loss0;\n    obj.q_fr_start = -obj.tab.q_fr(obj.on) / dm.base_mva;\n    obj.q_to_start = -obj.tab.q_to(obj.on) / dm.base_mva;\n    obj.vm_setpoint_fr = obj.tab.vm_setpoint_fr(obj.on);\n    obj.vm_setpoint_to = obj.tab.vm_setpoint_to(obj.on);\n    obj.p_fr_lb = obj.tab.p_fr_lb(obj.on) / dm.base_mva;\n    obj.p_fr_ub = obj.tab.p_fr_ub(obj.on) / dm.base_mva;\n    obj.q_fr_lb = obj.tab.q_fr_lb(obj.on) / dm.base_mva;\n    obj.q_fr_ub = obj.tab.q_fr_ub(obj.on) / dm.base_mva;\n    obj.q_to_lb = obj.tab.q_to_lb(obj.on) / dm.base_mva;\n    obj.q_to_ub = obj.tab.q_to_ub(obj.on) / dm.base_mva;\n\n    obj.apply_vm_setpoints(dm);\nend\n```\n\n----------------------------------------\n\nTITLE: Defining ex_xgd_res Function in MATLAB\nDESCRIPTION: This snippet automatically generates documentation for the 'ex_xgd_res' MATLAB function. The function's specific behavior will depend on the implementation details captured within the function definition. It is valuable for integrating the function into user-accessible documentation in the MATPOWER project.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/ex_xgd_res.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. autofunction:: ex_xgd_res\n```\n\n----------------------------------------\n\nTITLE: Running MATPOWER with Graphical User Interface\nDESCRIPTION: Command to start Octave with GUI in the MATPOWER Docker container. This requires an X11 server running on the host and proper DISPLAY environment variable configuration.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/MATPOWER-Docker.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --network=host --env=\"DISPLAY\" \\\n  --volume=\"$HOME/.Xauthority:/root/.Xauthority:rw\" \\\n  matpower/matpower:latest octave --force-gui\n```\n\n----------------------------------------\n\nTITLE: MATLAB Generator Status Logic\nDESCRIPTION: Logic for determining generator operational status where GEN_STATUS > 0 indicates in-service and GEN_STATUS <= 0 indicates out-of-service generators.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_38\n\nLANGUAGE: MATLAB\nCODE:\n```\nGEN_STATUS > 0  % in-service\nGEN_STATUS <= 0 % out-of-service\n```\n\n----------------------------------------\n\nTITLE: Documenting mme_branch_opf_ac Class with Sphinx\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the mme_branch_opf_ac class. It includes inheritance information and all class members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_branch_opf_ac.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_branch_opf_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Availability - Python\nDESCRIPTION: The function 'have_feature_knitro' checks if the Knitro solver feature is installed and accessible in the MATPOWER optimization environment. It does not require any external dependencies beyond the MATPOWER framework itself. The expected output is a boolean value indicating the presence of the Knitro feature, which can be checked directly by calling the function.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_knitro.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: have_feature_knitro\n```\n\n----------------------------------------\n\nTITLE: Updating generator voltage initialization in MATLAB\nDESCRIPTION: Fixed a bug in testpf.m to correctly initialize generator voltages using values from the case file instead of setting the angle to zero.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_39\n\nLANGUAGE: MATLAB\nCODE:\n```\n% fixed bug in code which initializes generator voltages\n% it was always setting the angle to zero, now it uses the value from the\n% case file\n```\n\n----------------------------------------\n\nTITLE: Unit Commitment Visualization Function\nDESCRIPTION: Added a new plotting function to visualize unit commitment schedules, enhancing analysis and visualization capabilities.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\nplot_uc()\n```\n\n----------------------------------------\n\nTITLE: Computing Load Curtailments in MATLAB/Octave\nDESCRIPTION: Demonstrates the usage of the loadshed() function to compute MW curtailments of dispatchable loads in MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_9\n\nLANGUAGE: MATLAB\nCODE:\n```\nloadshed()\n```\n\n----------------------------------------\n\nTITLE: MOST Test Function Implementation\nDESCRIPTION: Represents a specific test case for the MATPOWER Optimal Scheduling Tool (MOST), focusing on testing a particular scenario or functionality within the library\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/t_most_3b_3_1_0.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB/Octave\nCODE:\n```\nfunction t_most_3b_3_1_0()\n```\n\n----------------------------------------\n\nTITLE: Using t_ok for Simple Boolean Testing in MATLAB\nDESCRIPTION: The t_ok() function performs simple boolean tests and can optionally return a success flag, indicating whether the test passed or failed.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/CHANGES.md#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB\nCODE:\n```\nt_ok()\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mme_branch_pf_ac Class in MATPOWER\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the mme_branch_pf_ac class. It includes inheritance information and member details.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_branch_pf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mme_branch_pf_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining have_feature_optim Function in MATLAB\nDESCRIPTION: This snippet documents the `have_feature_optim` function which likely checks for the availability of specific optimization features within MATPOWER. The exact implementation details would be found in the `have_feature_optim.m` file. The function's purpose is to determine if certain optimization solvers or functionalities are present and usable within the MATPOWER environment.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_optim.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: have_feature_optim\n```\n\n----------------------------------------\n\nTITLE: Declaring t_file_match Function\nDESCRIPTION: This snippet auto-generates the documentation for the t_file_match function, which is an essential component for file matching operations. It is used to provide an interface for file-related functionalities within the MATPOWER project. The snippet relies on the Sphinx autodoc tool for automatic documentation generation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/source/functions/t_file_match.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: t_file_match\n\n```\n\n----------------------------------------\n\nTITLE: Adding Runtime Field to qps_glpk() and qps_mosek()\nDESCRIPTION: This change introduces a 'runtime' field to the output argument of both the 'qps_glpk()' and 'qps_mosek()' functions, providing users with additional insights on solver performance.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.1.md#2025-04-22_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Generation Constraints Overview\nDESCRIPTION: Tabulation of power generation constraints across different buses, showing minimum and maximum power generation limits, actual generation, and constraint multipliers\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_dcopf.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGen   Bus                  Active Power Limits\n  #     #     Pmin mu     Pmin       Pg       Pmax    Pmax mu\n----  -----   -------   --------  --------  --------  -------\n   1     1       -        35.00     35.08     60.00      -   \n```\n\n----------------------------------------\n\nTITLE: Initializing MATPOWER Data Model Converter\nDESCRIPTION: Creates and builds a new MATPOWER case format version 2 data model converter object.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/data-model-converter.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\ndmc = mp.dm_converter_mpc2();\ndmc.build();\n```\n\n----------------------------------------\n\nTITLE: Total Load Function Enhancement\nDESCRIPTION: Modified total_load() to accept full case struct parameter instead of separate bus and gen matrices for more convenient usage.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_17\n\nLANGUAGE: MATLAB\nCODE:\n```\ntotal_load(mpc)\n```\n\n----------------------------------------\n\nTITLE: Building Cost Parameters for Legacy DC Line OPF in MATLAB\nDESCRIPTION: Method that retrieves cost parameters from the data model element and stores them in the cost property of the mme_legacy_dcline_opf instance.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_35\n\nLANGUAGE: matlab\nCODE:\n```\nfunction build_cost_params(obj, dm)\n    dme = obj.data_model_element(dm);\n    obj.cost = dme.build_cost_params(dm);\nend\n```\n\n----------------------------------------\n\nTITLE: Using t_file_match for File Content Comparison in MATLAB\nDESCRIPTION: The t_file_match() function tests if the contents of two text files match, with options to delete one file if they match and apply string or regular expression replacements before comparing.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\nt_file_match()\n```\n\n----------------------------------------\n\nTITLE: Adding success indicator to OPF functions in MATLAB\nDESCRIPTION: Modified opf.m, ucopf.m, testopf.m, and testucopf.m to include a 'success' variable indicating whether the OPF was solved successfully.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_42\n\nLANGUAGE: MATLAB\nCODE:\n```\n% modified opf.m, ucopf.m, testopf.m, testucopf.m to include\n% success, a variable which indicates whether OPF was solved\n% successfully or not\n```\n\n----------------------------------------\n\nTITLE: Generating AutoClass Documentation for mme_bus_opf_ac in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the mme_bus_opf_ac class. It shows the class inheritance and lists all members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_bus_opf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mme_bus_opf_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Using mptestver Function in MATLAB/Octave\nDESCRIPTION: The mptestver function returns or prints the current MP-Test version information. It can return a struct with detailed version data when called with an argument.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/README.md#2025-04-22_snippet_7\n\nLANGUAGE: MATLAB\nCODE:\n```\nv = mptestver\nv = mptestver('all')\n```\n\n----------------------------------------\n\nTITLE: Defining Pneumatic Event Nose Functionality - reStructuredText\nDESCRIPTION: This snippet defines the 'pne_event_nose' function in MATPOWER's optimization model, indicating its usage and reference documentation requirements. It utilizes the 'autofunction' directive to automatically generate documentation based on the function's signature.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/pne_event_nose.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: pne_event_nose\n```\n\n----------------------------------------\n\nTITLE: Documenting mme_branch Class in MATPOWER mp Module (Python)\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the mme_branch class. It shows the class inheritance and all public members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_branch.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_branch\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Function Renaming and Refactoring\nDESCRIPTION: Renamed several functions to improve clarity and consistency in the MATPOWER codebase, including changes to load and initialization functions.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\nloadmd() instead of loadmpsd()\nmd_init() instead of mpsd_init()\n```\n\n----------------------------------------\n\nTITLE: Branch Flow Constraint Tabulation\nDESCRIPTION: Report detailing power flow characteristics between electrical buses, including from and to bus connections, power transfer limits, and actual power flows\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_dcopf.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nBrnch   From     \"From\" End        Limit       \"To\" End        To\n  #     Bus    Pf  mu     Pf      |Pmax|      Pt      Pt  mu   Bus\n-----  -----  -------  --------  --------  --------  -------  -----\n   1      1      -       15.21  10000.00    -15.21      -        2\n```\n\n----------------------------------------\n\nTITLE: Enabling MP-Element Modeling in MATPOWER\nDESCRIPTION: Disables the default MP-Element modeling in MATPOWER by setting the 'mp_element' feature to 0.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\nhave_feature('mp_element', 0)\n```\n\n----------------------------------------\n\nTITLE: Registering Callback Functions in MATLAB\nDESCRIPTION: The function `pne_register_callbacks()` in MATLAB registers callback functions essential for managing custom logic during event-driven execution within PNE solvers.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_11\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_register_callbacks()\n```\n\n----------------------------------------\n\nTITLE: Using t_test_fcns for Testing Framework Validation in MATLAB\nDESCRIPTION: The t_test_fcns() function tests the t_ok() and t_is() functions and manually checks the output of failed tests to ensure the testing framework itself works correctly.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/CHANGES.md#2025-04-22_snippet_5\n\nLANGUAGE: MATLAB\nCODE:\n```\nt_test_fcns()\n```\n\n----------------------------------------\n\nTITLE: Documenting mme_gen_pf_ac Class in MATPOWER's mp Module\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the mme_gen_pf_ac class. It shows the class inheritance and lists all its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_gen_pf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mme_gen_pf_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mme_gen_opf Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the mme_gen_opf class. It shows the class inheritance and lists all its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_gen_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_gen_opf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Cloning mp-docs-shared Repository\nDESCRIPTION: This snippet shows how to clone the `mp-docs-shared` repository from GitHub into the `source` directory. This repository contains shared files required for building the MATPOWER documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/Building-Docs.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd docs/sphinx/source\ngit clone https://github.com/MATPOWER/mp-docs-shared.git\n```\n\n----------------------------------------\n\nTITLE: Documenting Convert Linear Constraint Function in MATLAB\nDESCRIPTION: This document includes the function convert_lin_constraint in the MP-Opt-Model library of MATPOWER. The function is intended to convert linear constraints for optimization purposes. No code snippet is directly provided, but it references a specific function in the MATLAB environment. Dependencies could include MATLAB and other parts of the MP-Opt-Model framework. Inputs and outputs would pertain to the linear constraints being converted.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/convert_lin_constraint.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nconvert_lin_constraint\n\n.. autofunction:: convert_lin_constraint\n```\n\n----------------------------------------\n\nTITLE: Defining Set Manager Class - MATLAB\nDESCRIPTION: This snippet outlines the declaration of the 'set_manager' class using documentation directives to include class members and inheritance details. It is part of the MATPOWER optimization model, crucial for managing various sets used in power system computations.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/classes/mp/set_manager.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. autoclass:: set_manager\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Formatted Power System Optimization Results\nDESCRIPTION: Structured ASCII table output showing the results of a power flow optimization problem, including constraint violations and Lagrange multipliers (mu values) for various system parameters. The output is organized into sections covering voltage constraints, generation limits, branch flows, and angle differences.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_softlims_ac.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nConverged in 0.00 seconds\nObjective Function Value = 20452.26 $/hr\n================================================================================\n|     Voltage Constraints                                                      |\n================================================================================\nBus #  Vmin mu    Vmin    |V|   Vmax    Vmax mu\n-----  --------   -----  -----  -----   --------\n   10  2075.469   0.900  0.900  1.100      -    \n   20      -      0.900  1.100  1.100  2207.271\n   30      -      0.900  1.100  1.100  6822.117\n   40      -      0.900  0.934  0.900 75000.000\n   90 75000.000   1.050  0.947  1.100      -    \n```\n\n----------------------------------------\n\nTITLE: Cloning mp-docs-shared Repository\nDESCRIPTION: This command clones the mp-docs-shared repository into the source directory, providing shared resources for the Sphinx documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/Building-Docs.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/sphinx/source\ngit clone https://github.com/MATPOWER/mp-docs-shared.git\n```\n\n----------------------------------------\n\nTITLE: Creating a MATPOWER Extension for Oval PQ Constraints in MATLAB\nDESCRIPTION: Alternative approach to enable oval PQ capability constraints by defining a MATPOWER extension class that specifies the required class overrides.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/add-constraint.rst#2025-04-22_snippet_5\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef xt_oval_cap_curve < mp.extension\n    methods\n        function mm_elements = mm_element_classes(obj, mm_class, task_tag, mpopt)\n            switch task_tag\n                case {'OPF'}\n                    mm_elements = { {@mp.mme_gen_opf_ac_oval, 'mp.mme_gen_opf_ac'} };\n                otherwise\n                    mm_elements = {};       %% no modifications\n            end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Bug Fix in hasPQcap for Generator Capability Curves\nDESCRIPTION: This code fixes a bug that ignored generator capability curves when specific conditions (Q1MAX < Q2MAX or Q1MIN > Q2MIN) were met, thus ensuring correct handling of sloped portions of the capability curves. It's part of the enhancements made to the 'hasPQcap' function.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_19\n\nLANGUAGE: MATLAB\nCODE:\n```\nFixed bug in `hasPQcap()` for generator capability curves\n```\n\n----------------------------------------\n\nTITLE: Handling Nose Point Event Detection in MATLAB\nDESCRIPTION: The `pne_callback_nose()` function manages events indicating that a nose point or limit has been reached in a solver's operation. This function is key for event-driven callbacks during PNE solutions.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_callback_nose()\n```\n\n----------------------------------------\n\nTITLE: Cloning MATPOWER Repositories with Git\nDESCRIPTION: Commands for cloning specific versions of MATPOWER and MATPOWER-extras repositories and cleaning up Git metadata.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/other/MATPOWER-Release-Checklist.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch 8.0 git@github.com:MATPOWER/matpower.git matpower-version8_0\ncd /usr/local/matpower/dist/matpower-version8_0\nrm -rf .git\ngit clone --branch 8.0 git@github.com:MATPOWER/matpower-extras.git extras\ncd extras\nrm -rf .git\n```\n\n----------------------------------------\n\nTITLE: MATPOWER MIPS Solver Function Definition\nDESCRIPTION: This snippet shows the function definition of `qps_mips` within the MATPOWER library, indicating it is used for solving quadratic programming problems with mixed integer variables. The `autofunction` directive suggests further details about the function's inputs, outputs, and behavior can be found in the automatically generated documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/qps_mips.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: qps_mips\n```\n\n----------------------------------------\n\nTITLE: Documenting mme_line3p_opf Class in MATPOWER's mp Module\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the mme_line3p_opf class. It includes information about the class's inheritance and all of its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_line3p_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mme_line3p_opf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Branch Flow Data Table\nDESCRIPTION: Power flow data for each branch, showing power injections at both ends and series losses.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_cpf_case9.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n Branch     From       To             From Bus Injection   To Bus Injection      Series Loss\n   ID      Bus ID    Bus ID   Status   P (MW)   Q (MVAr)   P (MW)   Q (MVAr)   P (MW)   Q (MVAr)\n--------  --------  --------  ------  --------  --------  --------  --------  --------  --------\n      1         1         4      1     469.84    471.54   -469.84   -235.57    -0.000    235.97\n      2         4         5      1     276.13    182.81   -247.98    -38.81    28.146    152.32\n      3         5         6      1     -78.24    -93.34     92.25    132.49    14.002     61.04\n```\n\n----------------------------------------\n\nTITLE: Importing mme_gen_opf_ac_oval Class from MATPOWER mp Module\nDESCRIPTION: This snippet shows how to import the mme_gen_opf_ac_oval class from the MATPOWER mp module. It uses the currentmodule directive to set the context for the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_gen_opf_ac_oval.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation\nDESCRIPTION: Command to build the HTML documentation from the docs/sphinx directory using the make utility with the 'html' target.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/Building-Docs.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Defining the 'name' Method for Gizmo Element Classes\nDESCRIPTION: This code snippet shows the implementation of the 'name' method, which is common across all gizmo element classes and returns the element type identifier.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/gizmo-element/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction name = name(obj)\n    name = 'gizmo';\nend\n```\n\n----------------------------------------\n\nTITLE: Power System Analysis Results Format\nDESCRIPTION: Formatted text output showing detailed power flow solution results including system metrics, bus data, generator dispatch, load consumption, branch flows and three-phase measurements. The output includes voltage magnitudes/angles, power flows, losses and other key electrical parameters.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_opf_t_case3p_g.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOPF succeeded in 0.18 seconds (0.15 setup + 0.03 solve)\nObjective Function Value = 5773.54 $/hr\n================================================================================\n|     System Summary                                                           |\n================================================================================\n[...content truncated for brevity...]\n-->  Power Injections at \"From\" Bus\n  3-ph    3-ph Bus  3-ph Bus          Phase A Power    Phase B Power    Phase C Power\n```\n\n----------------------------------------\n\nTITLE: Displaying Bus Voltage Constraints\nDESCRIPTION: Table showing bus voltage magnitude limits including lower bound (LB), upper bound (UB), actual voltage magnitude (vm), and their associated dual variables (mu).\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/extension.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n                         Voltage Magnitude Limits\n     Bus ID     mu LB      LB       vm       UB       mu UB\n    --------  ---------  -------  -------  -------   --------\n          1       -       0.900    1.100    1.100    566.231\n          2       -       0.900    1.100    1.100    197.010\n```\n\n----------------------------------------\n\nTITLE: Handling Unconstrained Branches in MATLAB OPF\nDESCRIPTION: Modifies OPF solvers to treat branches with RATE_A = 0 or RATE_A > 1e10 as unconstrained, excluding them from inequality constraints.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_29\n\nLANGUAGE: MATLAB\nCODE:\n```\nRATE_A = 0 || RATE_A > 1e10\n```\n\n----------------------------------------\n\nTITLE: Detecting Events in PNE Functions in MATLAB\nDESCRIPTION: In MATLAB, `pne_detect_events()` is used to detect events occurring in the values obtained from event functions within PNE solvers, enabling precise control flow during optimization processes.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_detect_events()\n```\n\n----------------------------------------\n\nTITLE: Generating MATPOWER Function Reference Documentation\nDESCRIPTION: MATLAB command for generating HTML documentation using m2html tool with specific version and directory parameters.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/other/MATPOWER-Release-Checklist.md#2025-04-22_snippet_3\n\nLANGUAGE: matlab\nCODE:\n```\ncd ~/dev/temp\nv = '7.1';\nm2html('mfiles',['matpower' v],'htmldir',['htdocs/docs/ref' v],'global','on','recursive','on','index',['menu' v],'template','matpower', 'graph', 'off')\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mme_buslink Class in MATPOWER\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the mme_buslink class. It includes inheritance information and all public members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_buslink.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mme_buslink\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting mme_gen_opf_ac_oval Class using autoclass Directive\nDESCRIPTION: This snippet demonstrates the use of the autoclass directive to generate documentation for the mme_gen_opf_ac_oval class. It includes options to show inheritance and member details.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_gen_opf_ac_oval.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_gen_opf_ac_oval\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Knitrover Function\nDESCRIPTION: This snippet defines the knitrover function, which is automatically documented for use within the MATPOWER optimization model. It serves as a reference for users needing to implement or utilize the function in their optimization tasks.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/knitrover.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: knitrover\n```\n\n----------------------------------------\n\nTITLE: Branch Flow Analysis\nDESCRIPTION: Detailed power flow data for all branches, showing power injection at both ends and associated losses in the transmission system.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_opf_t_auction_case.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n================================================================================\n|     Branch Data                                                              |\n================================================================================\n Branch     From       To             From Bus Injection   To Bus Injection      Series Loss\n   ID      Bus ID    Bus ID   Status   P (MW)   Q (MVAr)   P (MW)   Q (MVAr)   P (MW)   Q (MVAr)\n--------  --------  --------  ------  --------  --------  --------  --------  --------  --------\n```\n\n----------------------------------------\n\nTITLE: Fixing bugs in plot_uc_data()\nDESCRIPTION: Corrects errors in the `plot_uc_data()` function that caused incorrect legends in plots. This fix improves the accuracy and readability of the plots generated by the function.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/relnotes/MOST-Release-Notes-1.0.1.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n\"Fix bugs in `plot_uc_data()` resulting in incorrect legends.\"\n```\n\n----------------------------------------\n\nTITLE: Running MATPOWER Autodoc Generator\nDESCRIPTION: MATLAB command to generate documentation stub files and symlinks for MATPOWER classes and functions that should be included in the reference manual.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/builddocs.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngenerate_matpower_autodoc(<path-to-MATPOWER>)\n```\n\n----------------------------------------\n\nTITLE: Modifying Function Calls in MATLAB Power System Analysis\nDESCRIPTION: Code snippets demonstrate changes to function interfaces including loadcase(), makePTDF(), makeB(), and makeBdc() to accept full mpc struct instead of individual arguments.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_15\n\nLANGUAGE: MATLAB\nCODE:\n```\nloadcase()\nmakePTDF(mpc)\nmakeB(mpc)\nmakeBdc(mpc)\n```\n\n----------------------------------------\n\nTITLE: Unified Nonlinear Equation Solver Interface in MATLAB\nDESCRIPTION: Introduces nleqs_master() as a comprehensive interface for solving nonlinear equations, supporting multiple solving methods like fsolve and Newton's method\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-2.0.md#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\nnleqs_master() function implementation\n```\n\n----------------------------------------\n\nTITLE: Saving Change Tables\nDESCRIPTION: Function to save change tables used by apply_changes to a file for persistence and later use.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.0.md#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB/Octave\nCODE:\n```\nsavechgtab()\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Model Element Class for DC Line in MATLAB\nDESCRIPTION: Defines the 'dme_legacy_dcline' class that inherits from 'mp.dm_element'. This class represents the data model for DC transmission lines, including properties for bus connections, power flows, voltage setpoints, and other parameters.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_1\n\nLANGUAGE: matlab\nCODE:\n```\nclassdef dme_legacy_dcline < mp.dm_element\n    properties\n        fbus    % bus index vector for \"from\" port (port 1) (all DC lines)\n        tbus    % bus index vector for \"to\" port (port 2) (all DC lines)\n        fbus_on % vector of \"from\" bus indices into online buses (in-service DC lines)\n        tbus_on % vector of \"to\" bus indices into online buses (in-service DC lines)\n        loss0   % constant term of loss function (p.u.) (in-service DC lines)\n        loss1   % linear coefficient of loss function (in-service DC lines)\n        p_fr_start  % initial active power (p.u.) at \"from\" port (in-service DC lines)\n        p_to_start  % initial active power (p.u.) at \"to\" port (in-service DC lines)\n        q_fr_start  % initial reactive power (p.u.) at \"from\" port (in-service DC lines)\n        q_to_start  % initial reactive power (p.u.) at \"to\" port (in-service DC lines)\n        vm_setpoint_fr  % from bus voltage magnitude setpoint (p.u.) (in-service DC lines)\n        vm_setpoint_to  % to bus voltage magnitude setpoint (p.u.) (in-service DC lines)\n        p_fr_lb % p.u. lower bound on active power flow at \"from\" port (in-service DC lines)\n        p_fr_ub % p.u. upper bound on active power flow at \"from\" port (in-service DC lines)\n        q_fr_lb % p.u. lower bound on reactive power flow at \"from\" port (in-service DC lines)\n        q_fr_ub % p.u. upper bound on reactive power flow at \"from\" port (in-service DC lines)\n        q_to_lb % p.u. lower bound on reactive power flow at \"to\" port (in-service DC lines)\n        q_to_ub % p.u. upper bound on reactive power flow at \"to\" port (in-service DC lines)\n    end     %% properties\n\n    methods\n        function name = name(obj)\n            name = 'legacy_dcline';\n        end\n\n        % (other methods listed and described individually below)\n\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mme_buslink_pf_acc Class in MATPOWER\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the mme_buslink_pf_acc class. It includes inheritance information and all class members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_buslink_pf_acc.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mme_buslink_pf_acc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Loading Data Function in MATLAB\nDESCRIPTION: The 'load_dm' function in this file is responsible for loading data into MATPOWER's data structures. It is intended for converting various data formats into a usable format for the MATPOWER environment. Proper handling of file input is crucial for accurate simulations.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/functions/mp/load_dm.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: load_dm\n```\n\n----------------------------------------\n\nTITLE: Documenting math_model_opf_acps_legacy Class in Python\nDESCRIPTION: This code snippet uses Sphinx documentation syntax to generate documentation for the math_model_opf_acps_legacy class. It shows the class inheritance and includes all class members in the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_opf_acps_legacy.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: math_model_opf_acps_legacy\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Converting MATPOWER Optimization Model to Nonlinear Equations (MATLAB)\nDESCRIPTION: This function, `mpopt2nleqopt`, transforms a MATPOWER optimization model into a system of nonlinear equations. This allows the problem to be solved using a nonlinear equation solver instead of an optimization solver. The function is part of the `mp_opt_model` module within the MATPOWER library.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/mpopt2nleqopt.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n\"mpopt2nleqopt\"\n```\n\n----------------------------------------\n\nTITLE: Power System Analysis Results - System Summary\nDESCRIPTION: Displays key system metrics including bus count, generator capacity, load distribution, and voltage/angle extremes. Shows both fixed and dispatchable loads across 30 buses with 6 generators.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_acopf.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nConverged in 0.00 seconds\nObjective Function Value = 2525.32 $/hr\n================================================================================\n|     System Summary                                                           |\n================================================================================\n\nHow many?                How much?              P (MW)            Q (MVAr)\n---------------------    -------------------  -------------  -----------------\nBuses             30     Total Gen Capacity     360.0         -90.0 to 360.0\nGenerators         6     On-line Capacity       360.0         -90.0 to 360.0\nCommitted Gens     6     Generation (actual)    247.0             117.6\nLoads             20     Load                   241.6             116.8\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and Required Extensions\nDESCRIPTION: Commands to install Sphinx documentation generator and necessary extensions for MATPOWER documentation, including support for MATLAB code and custom styling.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/builddocs.rst#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\npip install -U sphinx\npip install -U sphinxcontrib-matlabdomain\npip install -U sphinx-tabs\npip install -U sphinx-rtd-theme\n```\n\n----------------------------------------\n\nTITLE: Support for LP/QP Solver CLP with qps_clp\nDESCRIPTION: This update adds support for the CLP solver (COIN-OR Linear Programming) to MATPOWER. It involves using 'opf.dc.solver' with the 'CLP' option or directly invoking 'qps_clp'. This addition enhances the solver options available to the user.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_23\n\nLANGUAGE: MATLAB\nCODE:\n```\nAdded support for `opf.dc.solver` option `CLP` or `qps_clp()`\n```\n\n----------------------------------------\n\nTITLE: Listing Incompatible Changes in MATPOWER\nDESCRIPTION: Comprehensive list of removed and deprecated functions and methods from MATPOWER, including alternative function names to use instead. Details changes to opf_model methods and option parameters.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-8.0.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### Incompatible Changes:\\n\\n- Removed unused `mpopt` argument from `opf_gen_cost_fcn()` inputs.\\n- Remove deprecated functions:\\n  - `d2AIbr_dV2()` -- use `dA2br_dV2()` instead.\\n  - `d2ASbr_dV2()` -- use `dA2br_dV2()` instead.\\n  - Deprecated methods of `opf_model`:\\n    - `add_constraints()` -- use the corresponding one of the following\\n      methods instead: `add_lin_constraint()`, `add_nln_constraint()`, or\\n      `init_indexed_name()`.\\n    - `add_costs()` -- use the corresponding one of the following methods\\n      instead: `add_quad_cost()`,  `add_nln_cost()`, `add_legacy_cost()`,\\n      or `init_indexed_name()`.\\n    - `add_vars()` -- use the corresponding one of the following methods\\n      instead: `add_var()`, or `init_indexed_name()`.\\n    - `build_cost_params()` -- no longer needed, incorporated into\\n      `params_legacy_cost()`.\\n    - `get_cost_params()` -- use `params_legacy_cost()` instead.\\n    - `getv()` -- use `params_var()` instead.\\n    - `linear_constraints()` -- use `params_lin_constraint()` instead.\\n- Remove deprecated option:\\n    - `'opf.init_from_mpc'` -- use `'opf.start'` instead.\n```\n\n----------------------------------------\n\nTITLE: Documenting math_model_cpf_acc Class in MATPOWER MP Module (Python)\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the math_model_cpf_acc class. It includes inheritance information and all public members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_cpf_acc.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: math_model_cpf_acc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing mm_shared_pfcpf_acps Module in Python\nDESCRIPTION: This snippet shows how to import the mm_shared_pfcpf_acps module from the MATPOWER library's mp namespace. It uses Python's currentmodule directive to set the context for subsequent documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf_acps.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting dme_shunt Class in Python\nDESCRIPTION: This snippet demonstrates how to import the dme_shunt class from the matpower.mp module and generate its documentation using Sphinx. It shows inheritance and includes all class members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dme_shunt.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: dme_shunt\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Power System Analysis Results - Area Summary Table\nDESCRIPTION: Shows detailed breakdown of system areas including bus counts, generator status, load distributions, and power flows between areas. Contains statistics for three distinct areas.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_acopf.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n================================================================================\n|     Area Summary                                                             |\n================================================================================\nArea  # of      # of Gens        # of Loads         # of    # of   # of   # of\n Num  Buses   Total  Online   Total  Fixed  Disp    Shunt   Brchs  Xfmrs   Ties\n----  -----   -----  ------   -----  -----  -----   -----   -----  -----  -----\n  1      11       2      2       5      4      1       1      14      0      4\n  2      10       2      2       9      8      1       0      10      0      4\n  3       9       2      2       6      5      1       1      10      0      6\n```\n\n----------------------------------------\n\nTITLE: Adding Linear Constraints to Optimization Model\nDESCRIPTION: Method for adding linear constraints to an optimization model in the opt_model object hierarchy.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.0.md#2025-04-22_snippet_5\n\nLANGUAGE: MATLAB/Octave\nCODE:\n```\nopt_model.add_lin_constraint()\n```\n\n----------------------------------------\n\nTITLE: Generator Power Output Data\nDESCRIPTION: Lists the active and reactive power output of each generator in the system, showing status and bus location. Includes total generation values.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_case9.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n================================================================================\n|     Generator Data                                                           |\n================================================================================\n                             Power Generation\n Gen ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n      1         1      1       71.6      27.0\n      2         2      1      163.0       6.7\n      3         3      1       85.0     -10.9\n                            --------  --------\n                   Total:     319.6      22.8\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment on Windows\nDESCRIPTION: This snippet shows how to create and activate a Python virtual environment on Windows. Utilizing a virtual environment helps prevent dependency conflicts.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/Building-Docs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv sphinx-env\n.\\sphinx-env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Managing Export Variables\nDESCRIPTION: Defines which variables should be exported after solving and their offline values.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_5\n\nLANGUAGE: matlab\nCODE:\n```\nfunction vars = export_vars(obj)\n    vars = {'p_fr', 'q_fr', 'p_to', 'q_to'};\nend\n\nfunction s = export_vars_offline_val(obj)\n    s = export_vars_offline_val@mp.dm_element(obj);\n    s.p_fr = 0;\n    s.q_fr = 0;\n    s.p_to = 0;\n    s.q_to = 0;\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the t_case_tlmp_storage Function in MATLAB\nDESCRIPTION: This snippet defines the t_case_tlmp_storage function which is an autofunction in the MATPOWER project. It is utilized to create and manipulate test cases related to temporal linear market power storage. The snippet is expected to be part of a larger framework and relies on MATLAB-specific functions and syntax.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/t_case_tlmp_storage.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. autofunction:: t_case_tlmp_storage\n```\n\n----------------------------------------\n\nTITLE: Documenting MATPOWER OPF AC-PI Legacy Math Model Class in Python\nDESCRIPTION: This snippet uses Python's autoclass directive to generate documentation for the 'math_model_opf_acpi_legacy' class. It shows the class inheritance and all its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_opf_acpi_legacy.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: math_model_opf_acpi_legacy\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining plot_uc_data Function Using MATLAB\nDESCRIPTION: The 'plot_uc_data' function is defined to visualize unit commitment data in MATLAB. It incorporates all the necessary parameters to customize the plots being generated.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/plot_uc_data.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: plot_uc_data\n```\n\n----------------------------------------\n\nTITLE: Defining NODE_TYPE Class in MATLAB for MATPOWER\nDESCRIPTION: This snippet represents the structure of the NODE_TYPE class in MATPOWER. It uses MATLAB's class system and is part of the mp module. The class likely defines constants or enumerations for different types of nodes in a power system model.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/NODE_TYPE.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef NODE_TYPE\n    % Class definition for NODE_TYPE\n    % Members and methods would be defined here\nend\n```\n\n----------------------------------------\n\nTITLE: Auto-generating Function Documentation for t_most_tlmp in MATPOWER\nDESCRIPTION: This code snippet auto-generates documentation for the t_most_tlmp function, ensuring easy access to its details within the MATPOWER framework. It is intended for users to quickly understand the capabilities of the function without delving deep into the source code.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/t_most_tlmp.rst#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.. autofunction:: t_most_tlmp\n```\n\n----------------------------------------\n\nTITLE: Power System Summary Table\nDESCRIPTION: System-wide overview showing counts of buses, generators, loads, and branches along with total generation, loads, and losses\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_t_auction_case.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  elements                on     off    total\n --------------------- ------- ------- -------\n  Buses                    30       -      30\n    Areas                                   3\n    Zones                                   1\n  Generators                9       -       9\n  Loads                    17       -      17\n  Branches                 39       2      41\n    Lines                  39       2      41\n    Transformers            0       -       0\n  Fixed Shunts              2       -       2\n```\n\n----------------------------------------\n\nTITLE: Setting Z-bus Gauss Method Option\nDESCRIPTION: Example of how to select the new Implicit Z-bus Gauss method power flow solver for distribution systems\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-8.0b1.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\npf.alg = 'ZG'\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment on Unix/macOS\nDESCRIPTION: This snippet demonstrates how to create and activate a Python virtual environment on Unix or macOS. It ensures library dependencies are managed within a contained environment.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/Building-Docs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv sphinx-env\nsource sphinx-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Defining DC Line Connectivity\nDESCRIPTION: Specifies connection types and property names for DC line terminal connections to buses.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_3\n\nLANGUAGE: matlab\nCODE:\n```\nfunction name = cxn_type(obj)\n    name = 'bus';\nend\n\nfunction name = cxn_idx_prop(obj)\n    name = {'fbus', 'tbus'};\nend\n```\n\n----------------------------------------\n\nTITLE: Defining dme_legacy_dcline Class in MATLAB for MATPOWER\nDESCRIPTION: This snippet defines the dme_legacy_dcline class in MATLAB, which is part of the MATPOWER mp module. The class is likely related to legacy DC line modeling in power systems analysis.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dme_legacy_dcline.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: dme_legacy_dcline\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing mp.mm_shared_pfcpf_ac Module in Python\nDESCRIPTION: This snippet demonstrates how to import the mm_shared_pfcpf_ac module from the mp package in MATPOWER. It uses the currentmodule directive to set the context for subsequent autoclass documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Environment (Windows)\nDESCRIPTION: This snippet shows how to verify the currently active Python environment in Windows. It displays the path to the Python executable being used.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/Building-Docs.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwhere python\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mm_shared_pfcpf_acp Class in MATPOWER\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the mm_shared_pfcpf_acp class. It includes all members and shows the inheritance hierarchy.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf_acp.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mm_shared_pfcpf_acp\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Power System Summary Table\nDESCRIPTION: System-wide summary showing the count of buses, generators, loads, and branches along with total generation, load, and loss values.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_cpf_case9.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  elements                on     off    total\n --------------------- ------- ------- -------\n  Buses                     9       -       9\n    Areas                                   1\n    Zones                                   1\n  Generators                3       -       3\n  Loads                     3       -       3\n  Branches                  9       -       9\n    Lines                   9       -       9\n    Transformers            0       -       0\n```\n\n----------------------------------------\n\nTITLE: Adding Named Sets in MATLAB/Octave\nDESCRIPTION: Shows the usage of the opt_model.add_named_set() function in MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt_model.add_named_set()\n```\n\n----------------------------------------\n\nTITLE: Enhancements to have_fcn for Optional Package Management\nDESCRIPTION: Enhancements to the 'have_fcn' function allow toggling the availability of optional functionality by determining and caching version numbers and release dates for optional packages. This change is useful for ensuring the correct versions of packages are used.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_21\n\nLANGUAGE: MATLAB\nCODE:\n```\nEnhancements to `have_fcn()` for managing optional functionality\n```\n\n----------------------------------------\n\nTITLE: Deactivating Python Virtual Environment\nDESCRIPTION: This snippet shows how to deactivate the currently active Python virtual environment, returning to the system's default Python environment.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/Building-Docs.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Initializing DC Line Elements\nDESCRIPTION: Handles element initialization including bus index mapping and connectivity setup.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_6\n\nLANGUAGE: matlab\nCODE:\n```\nfunction obj = initialize(obj, dm)\n    initialize@mp.dm_element(obj, dm);\n\n    %% get bus mapping info\n    b2i = dm.elements.bus.ID2i;\n\n    %% set bus index vectors for port connectivity\n    obj.fbus = b2i(obj.tab.bus_fr);\n    obj.tbus = b2i(obj.tab.bus_to);\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Symbolic Constants with mosek_symbcon\nDESCRIPTION: This update introduces 'mosek_symbcon', which defines symbolic constants for setting MOSEK options. It requires 'mosek_symbcon' to interact with MOSEK options and was necessary to align with the updated MOSEK solver settings in 'mpoption'.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_20\n\nLANGUAGE: MATLAB\nCODE:\n```\nAdded `mosek_symbcon()` for MOSEK options\n```\n\n----------------------------------------\n\nTITLE: Documenting dme_legacy_dcline_opf Class in MATLAB\nDESCRIPTION: This code snippet uses MATLAB's documentation syntax to define the dme_legacy_dcline_opf class. It specifies that the class inheritance and members should be shown in the generated documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dme_legacy_dcline_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: dme_legacy_dcline_opf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing MATPOWER Mapped Array Module\nDESCRIPTION: This code snippet shows how to import the mapped_array class from the MATPOWER project's mp module.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mapped_array.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. currentmodule:: matpower.+mp\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mp.mme_buslink_opf in MATPOWER\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the mme_buslink_opf class in the mp module of MATPOWER. It shows inheritance and includes all class members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_buslink_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mme_buslink_opf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Confirming Active Python Environment on Unix/macOS\nDESCRIPTION: This snippet confirms that the Python virtual environment is active by displaying the current Python executable's location in Unix or macOS.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/Building-Docs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwhich python\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for mme_gen_opf_dc Class in MATPOWER\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the mme_gen_opf_dc class. It shows the class inheritance and all of its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_gen_opf_dc.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mme_gen_opf_dc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Listing Incompatible Changes in MATPOWER\nDESCRIPTION: This snippet outlines the incompatible changes made to the MATPOWER project, including removed arguments, deprecated functions, and methods. It also mentions the removal of a deprecated option.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-8.0b1.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n#### Incompatible Changes:\n\n- Removed unused `mpopt` argument from `opf_gen_cost_fcn()` inputs.\n- Remove deprecated functions:\n  - `d2AIbr_dV2()` -- use `dA2br_dV2()` instead.\n  - `d2ASbr_dV2()` -- use `dA2br_dV2()` instead.\n  - Deprecated methods of `opf_model`:\n    - `add_constraints()` -- use the corresponding one of the following\n      methods instead: `add_lin_constraint()`, `add_nln_constraint()`, or\n      `init_indexed_name()`.\n    - `add_costs()` -- use the corresponding one of the following methods\n      instead: `add_quad_cost()`,  `add_nln_cost()`, `add_legacy_cost()`,\n      or `init_indexed_name()`.\n    - `add_vars()` -- use the corresponding one of the following methods\n      instead: `add_var()`, or `init_indexed_name()`.\n    - `build_cost_params()` -- no longer needed, incorporated into\n      `params_legacy_cost()`.\n    - `get_cost_params()` -- use `params_legacy_cost()` instead.\n    - `getv()` -- use `params_var()` instead.\n    - `linear_constraints()` -- use `params_lin_constraint()` instead.\n- Remove deprecated option:\n    - `'opf.init_from_mpc'` -- use `'opf.start'` instead.\n```\n\n----------------------------------------\n\nTITLE: Identifying Binding Rows for DC Line Limits\nDESCRIPTION: This method retrieves the indices of DC lines that have binding limits based on their power flows and associated constraints. It utilizes the flow data from arguments to perform the checks.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_18\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction rows = pp_binding_rows_lim(obj, dm, out_e, mpopt, pp_args)\n    flow = pp_args.legacy_dcline.flow;\n    rows = find( obj.tab.status & ( ...\n                flow.p_fr < flow.lb + obj.ctol | ...\n                flow.p_fr > flow.ub - obj.ctol | ...\n                obj.tab.mu_p_fr_lb > obj.ptol | ...\n                obj.tab.mu_p_fr_ub > obj.ptol ));\nend\n```\n\n----------------------------------------\n\nTITLE: Updating version number in mpomver.m\nDESCRIPTION: This snippet highlights the importance of updating the version number within the `mpomver.m` file as part of the release process. It ensures that the software correctly reports its version.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/other/MP-Opt-Model-Release-Checklist.md#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n\"mpomver.m\"\n```\n\n----------------------------------------\n\nTITLE: Bus Data Analysis\nDESCRIPTION: Detailed bus-wise voltage magnitude, angle, and Locational Marginal Pricing (LMP) data for active and reactive power at each bus in the system.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_opf_t_auction_case.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n================================================================================\n|     Bus Data                                                                 |\n================================================================================\n                      Voltage            Lambda (LMP)\n Bus ID   Status  Mag(pu)  Ang(deg)  P($/MWh)  Q($/MVAr-hr)\n--------  ------  -------  --------  --------  ------------\n```\n\n----------------------------------------\n\nTITLE: Documenting dme_load3p_opf Class in Python\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the dme_load3p_opf class. It shows the class inheritance and lists all members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dme_load3p_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: dme_load3p_opf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation Directives\nDESCRIPTION: Sphinx documentation directives that set up the current module context and create auto-documentation for the form_acc class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/form_acc.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: form_acc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Displaying Variable Values and Bounds in MATPOWER Format\nDESCRIPTION: A formatted table showing optimization variables with their indices, descriptions, lower bounds, values, upper bounds, and associated Lagrangian multipliers. The display shows three variables with their current values and includes summary rows indicating overall min/max values.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/lib/t/display_soln/t_om_solve_leqs_display_soln.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n=====  VARIABLES  =====\n  idx    description                   mu_lb     lb       val      ub      mu_ub\n------- ---------------------------- -------- -------- -------- -------- --------\n   1    x(1)                                        -        -2       -          \n   2    x(2)                                        -         1       -          \n   3    x(3)                                        -         3       -          \n------- ---------------------------- -------- -------- -------- -------- --------\n        Min                                       -Inf       -2      Inf         \n        Max                                       -Inf        3      Inf         \n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for MATPOWER Developer's Manual\nDESCRIPTION: This snippet defines the table of contents for the MATPOWER Developer's Manual using reStructuredText. It includes directives for conditional HTML content, image insertion, PDF download link, and a structured list of manual sections.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _matpower_dev_manual:\n\n#############################\n|MATPOWER| Developer's Manual\n#############################\n\n.. only:: html\n\n   .. image:: ../MATPOWER-md.png\n\n   [ :download:`PDF format <../../build/latex/matpower_dev_manual.pdf>` ]\n\n.. toctree::\n   :maxdepth: 2\n   :numbered: 3\n\n   introduction\n   notation\n   architecture\n   task\n   data-model\n   data-model-converter\n   net-model\n   math-model\n   customizing\n   acknowledgments\n   references\n\n..\n   class-reference\n   function-reference\n   test-page\n```\n\n----------------------------------------\n\nTITLE: Setting Power Flow Algorithm to Implicit Z-bus Gauss\nDESCRIPTION: Sets the power flow algorithm to Implicit Z-bus Gauss solver for distribution systems.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\npf.alg = 'ZG';\n```\n\n----------------------------------------\n\nTITLE: Updating DC Line Status\nDESCRIPTION: Updates online/offline status and adjusts connected bus types and voltage control settings.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_7\n\nLANGUAGE: matlab\nCODE:\n```\nfunction obj = update_status(obj, dm)\n    %% get bus status info\n    bus_dme = dm.elements.bus;\n    bs = bus_dme.tab.status;\n\n    %% update status of branches connected to isolated/offline buses\n    obj.tab.status = obj.tab.status & bs(obj.fbus) & ...\n                                            bs(obj.tbus);\n\n    %% call parent to fill in on/off\n    update_status@mp.dm_element(obj, dm);\n\n    %% for all online DC lines ...\n    %% ... set terminal buses (except ref) to PV type\n    idx = [obj.fbus(obj.on); obj.tbus(obj.on)];\n    idx(bus_dme.type(idx) == mp.NODE_TYPE.REF) = [];\n    bus_dme.set_bus_type_pv(dm, idx);\n\n    %% set bus_dme.vm_control\n    obj.fbus_on = bus_dme.i2on(obj.fbus(obj.on));\n    obj.tbus_on = bus_dme.i2on(obj.tbus(obj.on));\n    bus_dme.vm_control(obj.fbus_on) = 1;\n    bus_dme.vm_control(obj.tbus_on) = 1;\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Command to create and checkout a new topic branch for development\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Bus Voltage Data Table\nDESCRIPTION: Details of voltage magnitudes and angles at each bus in the power system\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_t_auction_case.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n                      Voltage\n Bus ID   Status  Mag(pu)  Ang(deg)\n--------  ------  -------  --------\n      1      1     1.000     0.000\n      2      1     1.000    -1.041\n      3      1     0.981    -3.888\n```\n\n----------------------------------------\n\nTITLE: Running MOST Tests in MATLAB/Octave\nDESCRIPTION: This snippet demonstrates how to run the test suite for MOST in MATLAB or Octave. It executes the `test_most` command to verify that MOST is properly installed and functioning. The output shows a summary of the tests passed, skipped, and the elapsed time.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/README.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n>> test_most\nt_most_3b_1_1_0........ok\nt_most_3b_3_1_0........ok\nt_most_30b_1_1_0.......ok\nt_most_30b_3_1_0.......ok\nt_most_fixed_res.......ok\nt_most_30b_1_1_0_uc....ok\nt_most_mpopf...........ok\nt_most_uc..............ok (272 of 340 skipped)\nt_most_suc.............ok (148 of 185 skipped)\nt_most_tlmp............ok\nt_most_w_ds............ok\nAll tests successful (359 passed, 420 skipped of 779)\nElapsed time 39.45 seconds.\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Documentation Directive for mp.extension\nDESCRIPTION: ReStructuredText directive for auto-generating class documentation for the extension class in the mp module, including inheritance and member details.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/extension.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: extension\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for mm_shared_pfcpf\nDESCRIPTION: ReStructuredText directive for auto-documenting the mm_shared_pfcpf class, including inheritance hierarchy and class members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: mm_shared_pfcpf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Three-Phase Power System Summary Report\nDESCRIPTION: Tabulated output showing system components count and total power calculations including generation, load, and losses for a three-phase power system.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_t_case3p_a.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  elements                on     off    total\n --------------------- ------- ------- -------\n  3-ph Buses                4       -       4\n  3-ph Generators           1       -       1\n  3-ph Loads                1       -       1\n  3-ph Lines                2       -       2\n  3-ph Transformers         1       -       1\n\n  Total 3-ph generation               6109.9 kW       4206.5 kVAr\n  Total 3-ph load                     5450.0 kW       2442.6 kVAr\n  Total 3-ph line loss                 561.5 kW       1173.8 kVAr\n  Total 3-ph transformer loss           98.4 kW        590.2 kVAr\n```\n\n----------------------------------------\n\nTITLE: Defining References in reStructuredText Format\nDESCRIPTION: This code snippet shows how to define references in reStructuredText format. It includes two references: one to a work in progress about common electric power transmission system models and another to a technical note about the unified MATPOWER Element Model.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/references.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. [CTM] Carleton Coffrin, et. al., \"The Common Electric Power Transmission System Model,\" *work in progress*. Available at: https://www.overleaf.com/project/5d94e3765cb3ba000129df3c.\n\n.. [TN5] R. D. Zimmerman, \"MP-Element: A Unified |MATPOWER| Element Model,\" |TN5|, October 2020. Available: https://matpower.org/docs/TN5-MP-Element.pdf\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Constant Term\nDESCRIPTION: Includes a missing constant term to the objective function value reported by `most_summary`. This ensures the objective function value is complete and accurate in the summary report.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/relnotes/MOST-Release-Notes-1.0.1.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB\nCODE:\n```\n\"Add missing constant term to objective function value reported by\n    `most_summary`.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Reference Commands\nDESCRIPTION: LaTeX commands for consistent referencing of manuals, technical notes, and documentation with version numbers and URLs.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/preamble.tex.txt#2025-04-22_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\newcommand{\\usermanurl}[0]{https://matpower.org/doc/users-manual/}\n\\newcommand{\\userman}[0]{\\href{\\usermanurl}{\\it \\matpower{} User's Manual}}\n\\newcommand{\\devmanurl}[0]{https://matpower.org/doc/dev-manual/}\n\\newcommand{\\devman}[0]{\\href{\\devmanurl}{\\it \\matpower{} Developer's Manual}}\n\\newcommand{\\refmanurl}[0]{https://matpower.org/doc/ref-manual/}\n\\newcommand{\\refman}[0]{\\href{\\refmanurl}{\\it \\matpower{} Reference Manual}}\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Check Function - Python\nDESCRIPTION: This code snippet defines the function `have_feature_gurobi`, which checks if the Gurobi solver is available for optimization in MATPOWER. It leverages the autofunction directive to provide additional documentation automatically and does not require external dependencies.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_gurobi.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: have_feature_gurobi\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting mm_shared_pfcpf_acpi Class in Python\nDESCRIPTION: This snippet sets up Sphinx documentation for the mm_shared_pfcpf_acpi class. It uses the autoclass directive to automatically generate documentation for the class, including inherited members and all public methods.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf_acpi.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mm_shared_pfcpf_acpi\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting math_model_opf_acp Class in MATLAB\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the math_model_opf_acp class. It includes inheritance information and all class members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_opf_acp.rst#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: math_model_opf_acp\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Generator Output Data Table\nDESCRIPTION: Real and reactive power generation data for each generator in the system, including total generation values.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_cpf_case9.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                             Power Generation\n Gen ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n      1         1      1      469.8     471.5\n      2         2      1      256.2     184.7\n      3         3      1      128.4     191.4\n                            --------  --------\n                   Total:     854.5     847.6\n```\n\n----------------------------------------\n\nTITLE: Defining Autofunction for t_is in reStructuredText\nDESCRIPTION: This snippet uses the autofunction directive to automatically create documentation for the t_is function, which is part of the Matpower library. It allows users to easily reference the functionality of t_is without needing to delve into its implementation details. Ensure that the relevant function is properly defined in the implementation file for accurate documentation generation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/source/functions/t_is.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: t_is\n\n```\n\n----------------------------------------\n\nTITLE: Adding Nonlinear Constraints to Optimization Model\nDESCRIPTION: Method for adding nonlinear constraints to an optimization model in the opt_model object hierarchy.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.0.md#2025-04-22_snippet_6\n\nLANGUAGE: MATLAB/Octave\nCODE:\n```\nopt_model.add_nln_constraint()\n```\n\n----------------------------------------\n\nTITLE: Updating MATPOWER Power Flow Parameters\nDESCRIPTION: Code snippet showing parameters for new power flow algorithm options for radial distribution systems\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_12\n\nLANGUAGE: MATLAB\nCODE:\n```\npf.alg = 'PQSUM' % or 'ISUM' or 'YSUM'\npf.radial.max_it\npf.radial.vcorr\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Mathematical Operators and Notations in LaTeX for MATPOWER\nDESCRIPTION: This snippet defines fundamental mathematical commands for operations like transpose, conjugate, diagonal matrices, and derivatives that are used in power system equations.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n% macros for use in math, both for sphinx latex and HTML MathJax\n\\newcommand{\\dg}{\\sp\\dagger}                            % hermitian conjugate\n\\newcommand{\\trans}[1]{{#1}^{\\mathsf{T}}}               % transpose\n\\newcommand{\\conj}[1]{{#1}^{\\ast}}                      % complex conjugate\n\\newcommand{\\hc}[1]{{#1}^{\\dg}}                         % hermitian conjugate\n\\newcommand{\\hconj}[1]{{#1}^{+}}                        % hermitian conjugate\n\\newcommand{\\diag}[1]{\\left[^\\smallsetminus{#1}_\\smallsetminus\\right]}  % diagonal\n%\\-newcommand{\\diag}[1]{\\left[{#1}\\right]}                % diagonal\n\\newcommand{\\diagg}[1]{\\left[\\smash{#1}\\right]}         % diagonal (smashed)\n\\newcommand{\\cdiag}[1]{\\conj{\\diag{#1}}}                % conjugate diagonal\n\\newcommand{\\der}[2]{\\frac{\\partial{#1}}{\\partial{#2}}} % partial derivative\n\\newcommand{\\dersx}[2]{\\frac{\\partial^2{#1}}{\\partial{#2}^2}} % 2nd partial derivative\n\\newcommand{\\dersxy}[3]{\\frac{\\partial^2{#1}}{\\partial{#2}\\partial{#3}}} % 2nd partial derivative\n```\n\n----------------------------------------\n\nTITLE: MATPOWER Feature Check: have_feature_ktrlink\nDESCRIPTION: This snippet documents the `have_feature_ktrlink` function within the MATPOWER library.  The function's purpose is to determine whether a specific feature, likely related to KTRLINK, is available or supported within the MATPOWER environment. The actual implementation details are not provided, as it is represented by an auto-function directive.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_ktrlink.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: have_feature_ktrlink\n```\n\n----------------------------------------\n\nTITLE: Documenting nme_bus_acc Class in MATPOWER\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the nme_bus_acc class. It shows the class inheritance and all public members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/nme_bus_acc.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: nme_bus_acc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Current and Power Variables in LaTeX for MATPOWER\nDESCRIPTION: This snippet defines vectors and matrices related to electric currents, complex power, and their real and imaginary components used in power system equations.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_5\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\E}{\\cvec{e}}\n\\newcommand{\\Eh}{\\hat{\\E}}\n\\newcommand{\\Ec}{\\conj{\\E}}\n\\newcommand{\\Ehc}{\\conj{\\Eh}}\n\\newcommand{\\dE}{\\diag{\\E}}\n\\newcommand{\\dEh}{\\diag{\\Eh}}\n\\newcommand{\\dEc}{\\diag{\\Ec}}\n\\newcommand{\\dEhc}{\\diag{\\Ehc}}\n\n\\newcommand{\\zr}{{z_r}}\n\\newcommand{\\zi}{{z_i}}\n\\newcommand{\\Zr}{{\\rvec{z}_r}}\n\\newcommand{\\Zi}{{\\rvec{z}_i}}\n\n\\newcommand{\\dlam}{\\diagg{\\lam}}\n\\newcommand{\\dlamh}{\\diagg{\\lamh}}\n\\newcommand{\\dlamva}{\\diagg{\\lam_\\va}}\n\\newcommand{\\dlamvm}{\\diagg{\\lam_\\vm}}\n\\newcommand{\\dlamvr}{\\diagg{\\lam_\\vr}}\n\\newcommand{\\dlamvi}{\\diagg{\\lam_\\vi}}\n\\newcommand{\\dlamzr}{\\diagg{\\lam_\\zr}}\n\\newcommand{\\dlamzi}{\\diagg{\\lam_\\zi}}\n\\newcommand{\\dlamhva}{\\diagg{\\lamh_\\va}}\n\\newcommand{\\dlamhvm}{\\diagg{\\lamh_\\vm}}\n\\newcommand{\\dlamhvr}{\\diagg{\\lamh_\\vr}}\n\\newcommand{\\dlamhvi}{\\diagg{\\lamh_\\vi}}\n\\newcommand{\\dlamhzr}{\\diagg{\\lamh_\\zr}}\n\\newcommand{\\dlamhzi}{\\diagg{\\lamh_\\zi}}\n\\newcommand{\\dmu}{\\diag{\\muv}}\n\\newcommand{\\dmuh}{\\diag{\\muhv}}\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting data_model_opf Class in Python\nDESCRIPTION: This code snippet sets up the documentation for the data_model_opf class using Python's autoclass directive. It shows the class inheritance and members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/data_model_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: data_model_opf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Bus Voltage Data Table\nDESCRIPTION: Voltage magnitude and angle data for each bus in the power system, showing the system's voltage profile.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_cpf_case9.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n                      Voltage\n Bus ID   Status  Mag(pu)  Ang(deg)\n--------  ------  -------  --------\n      1      1     1.040     0.000\n      2      1     1.025   -17.427\n      3      1     1.025   -29.833\n      4      1     0.821   -18.475\n      5      1     0.616   -44.524\n      6      1     0.919   -34.417\n      7      1     0.873   -36.700\n      8      1     0.926   -27.144\n      9      1     0.762   -33.180\n```\n\n----------------------------------------\n\nTITLE: Defining test skip function in MATLAB\nDESCRIPTION: This snippet defines the `t_skip` function within the `mptest` module. The function likely allows skipping certain tests based on specific conditions, like missing dependencies or inappropriate environments. The documentation is automatically generated from the function's docstring, using the `autofunction` directive.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/source/functions/t_skip.rst#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining mp_idx_manager Class in MATLAB\nDESCRIPTION: This snippet provides an automatic class declaration for the mp_idx_manager class within the mp_opt_model. It includes options to show inheritance and members of the class, allowing for a clear structure and organization of the module's functionality.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/classes/mp_idx_manager.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: mp_opt_model.@mp_idx_manager.mp_idx_manager\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Voltage-Related Variables in LaTeX for MATPOWER\nDESCRIPTION: This snippet defines voltage-related vector variables and their operations used in power flow equations, including complex voltages, conjugates, and diagonal matrices.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_4\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\vv}{\\rvec{v}}\n\\newcommand{\\vvi}[1]{\\cscal{v}_{#1}}\n\\newcommand{\\V}{\\cvec{v}}\n\\newcommand{\\Vh}{\\hat{\\V}}\n\\newcommand{\\Vc}{\\conj{\\V}}\n\\newcommand{\\Vhc}{\\conj{\\Vh}}\n\\newcommand{\\dV}{\\diag{\\V}}\n\\newcommand{\\dVh}{\\diag{\\Vh}}\n\\newcommand{\\dVc}{\\diag{\\Vc}}\n\\newcommand{\\dVhc}{\\diag{\\Vhc}}\n\n\\newcommand{\\inV}{\\cvec{\\Lambda}}\n\\newcommand{\\inVh}{\\hat{\\inV}}\n\\newcommand{\\inVc}{\\conj{\\inV}}\n\\newcommand{\\inVhc}{\\conj{\\inVh}}\n\\newcommand{\\dinV}{\\diagg{\\inV}}\n\\newcommand{\\dinVh}{\\diagg{\\inVh}}\n\\newcommand{\\dinVc}{\\diagg{\\inVc}}\n\\newcommand{\\dinVhc}{\\diagg{\\inVhc}}\n\n\\newcommand{\\va}[0]{\\theta}\n\\newcommand{\\vai}[1]{\\va_{#1}}\n\\newcommand{\\Va}[0]{\\rvec{\\va}}\n\\newcommand{\\Vah}[0]{\\hat{\\Va}}\n\n\\newcommand{\\vm}[0]{\\nu}\n\\newcommand{\\vmi}[1]{\\nu_{#1}}\n\\newcommand{\\Vm}[0]{\\rvecG{\\nu}}\n\\newcommand{\\dVm}{\\diag{\\Vm}}\n\\newcommand{\\dVmi}{\\dVm^{-1}}\n\n\\newcommand{\\Vmh}{\\hat{\\Vm}}\n\\newcommand{\\dVmh}{\\diag{\\Vmh}}\n\\newcommand{\\dVmhi}{\\dVmh^{-1}}\n\n\\newcommand{\\vr}{u}\n\\newcommand{\\vri}[1]{u_{#1}}\n\\newcommand{\\vi}{w}\n\\newcommand{\\vii}[1]{w_{#1}}\n\\newcommand{\\Vr}{\\rvec{u}}\n\\newcommand{\\Vi}{\\rvec{w}}\n\\newcommand{\\dVr}{\\diag{\\Vr}}\n\\newcommand{\\dVi}{\\diag{\\Vi}}\n\\newcommand{\\Vrh}{\\hat{\\Vr}}\n\\newcommand{\\Vih}{\\hat{\\Vi}}\n\\newcommand{\\dVrh}{\\diag{\\Vrh}}\n\\newcommand{\\dVih}{\\diag{\\Vih}}\n```\n\n----------------------------------------\n\nTITLE: Detecting optimoptions Feature in MATPOWER (MATLAB)\nDESCRIPTION: The `have_feature_optimoptions` function checks for the availability of the `optimoptions` feature, likely indicating the presence of a supported optimization toolbox. This function would be crucial for determining if certain optimization routines can be used within MATPOWER. The code snippet is not provided but the documentation refers to the github link.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_optimoptions.rst#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining Parameter Matrices and Vectors in LaTeX for MATPOWER\nDESCRIPTION: This snippet defines parameter matrices and vectors used in power system models, including admittance matrices, injection variables, and their transformed versions.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_8\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\Aa}{\\param{\\rmat{A}}}\n\\newcommand{\\BB}{\\param{\\rmat{B}}}\n\\newcommand{\\CC}{\\param{\\rmat{C}}}\n\\newcommand{\\DD}{\\param{\\rmat{D}}}\n\\newcommand{\\YY}{\\param{\\cmat{Y}}}\n\\newcommand{\\iv}{\\param{\\cvec{i}}}\n\\newcommand{\\pv}{\\param{\\rvec{p}}}\n\\newcommand{\\sv}{\\param{\\cvec{s}}}\n\\newcommand{\\KK}{\\param{\\rmat{K}}}\n\\newcommand{\\LL}{\\param{\\cmat{L}}}\n\\newcommand{\\MM}{\\param{\\cmat{M}}}\n\\newcommand{\\NN}{\\param{\\cmat{N}}}\n\n\\newcommand{\\BBh}{\\hat{\\BB}}\n\\newcommand{\\YYh}{\\hat{\\YY}}\n\\newcommand{\\ivh}{\\hat{\\iv}}\n\\newcommand{\\pvh}{\\hat{\\pv}}\n\\newcommand{\\svh}{\\hat{\\sv}}\n\\newcommand{\\CCh}{\\hat{\\CC}}\n\\newcommand{\\KKh}{\\hat{\\KK}}\n\\newcommand{\\LLh}{\\hat{\\LL}}\n\\newcommand{\\MMh}{\\hat{\\MM}}\n\\newcommand{\\NNh}{\\hat{\\NN}}\n```\n\n----------------------------------------\n\nTITLE: Documenting net_model_dc Class with Sphinx in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the net_model_dc class. It includes inheritance information and all class members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/net_model_dc.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: net_model_dc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Bus Data Results Table\nDESCRIPTION: Display of bus-specific results including voltage magnitudes, angles, and Locational Marginal Prices (LMPs) for both active and reactive power.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_3.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n                      Voltage            Lambda (LMP)\n Bus ID   Status  Mag(pu)  Ang(deg)  P($/MWh)  Q($/MVAr-hr)\n--------  ------  -------  --------  --------  ------------\n      1      1     0.982     0.000     3.662        -0.000\n      2      1     0.979    -0.763     3.689        -0.000\n```\n\n----------------------------------------\n\nTITLE: Running a Complete Test Suite with MP-Test in MATLAB\nDESCRIPTION: Example output from running a test suite with multiple test functions. Shows summary results for each test function and overall test statistics.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/README.md#2025-04-22_snippet_4\n\nLANGUAGE: matlab\nCODE:\n```\n  >> test_everything_ex1\n  mptest_ex1.....ok (2 of 4 skipped)\n  t_test_fcns....ok\n  All tests successful (7 passed, 2 skipped of 9)\n  Elapsed time 0.06 seconds.\n```\n\n----------------------------------------\n\nTITLE: Initializing PDIPM OPF Solver in MATLAB\nDESCRIPTION: Adds a new AC OPF solver using a step-controlled Primal-Dual Interior Point Method (PDIPM) variant. The solver is assigned algorithm number 565.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_24\n\nLANGUAGE: MATLAB\nCODE:\n```\nOPF_ALG = 565\n```\n\n----------------------------------------\n\nTITLE: Optimizing MATLAB Code with sparse() Function\nDESCRIPTION: Replaces calls to spdiags() with equivalent calls to sparse() for performance optimization based on profiling results.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_27\n\nLANGUAGE: MATLAB\nCODE:\n```\nsparse()\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Roles for MATPOWER Documentation\nDESCRIPTION: Sets up custom roles for code highlighting in MATLAB, raw HTML, and LaTeX formats within the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/prolog.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: ml(code)\n   :language: matlab\n\n.. role:: raw-html(raw)\n   :format: html\n\n.. role:: raw-latex(raw)\n   :format: latex\n\n.. role:: hl\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Documenting nlps_fmincon Function\nDESCRIPTION: This RST directive sets up automatic documentation generation for the nlps_fmincon function from the mp_opt_model module. It includes a current module directive and an autofunction directive.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/nlps_fmincon.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: mp_opt_model\n\n:raw-html:`<div style=\"float: right\"><a href=\"https://github.com/MATPOWER/mp-opt-model/blob/master/lib/nlps_fmincon.m\" target=_blank><svg height=\"32\" aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" data-view-component=\"true\" class=\"octicon octicon-mark-github v-align-middle color-fg-default\"><path d=\"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z\"></path></svg></a></div>`\n\nnlps_fmincon\n------------\n\n.. autofunction:: nlps_fmincon\n```\n\n----------------------------------------\n\nTITLE: Displaying Linear Constraints in MATPOWER Format\nDESCRIPTION: A formatted table showing linear constraints with their indices, descriptions, lower bounds, values, upper bounds, and associated Lagrangian multipliers. The table displays three constraints with fixed values and includes summary rows showing the range of constraint values.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/lib/t/display_soln/t_om_solve_leqs_display_soln.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n=====  LINEAR CONSTRAINTS  =====\n  idx    description                   mu_lb     lb       val      ub      mu_ub\n------- ---------------------------- -------- -------- -------- -------- --------\n   1    A12(1)                                      -5       -5       -5         \n   2    A12(2)                                       1        1        1         \n   3    A3(1)                                       -7       -7       -7         \n------- ---------------------------- -------- -------- -------- -------- --------\n        Min                                         -7       -7       -7         \n        Max                                          1        1        1         \n```\n\n----------------------------------------\n\nTITLE: Defining Injection and Product Operations in LaTeX for MATPOWER\nDESCRIPTION: This snippet defines current and power injection variables and common matrix-vector products used in power flow equations and optimizations.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_10\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\I}{\\cvec{i}^S}\n\\newcommand{\\s}{\\cvec{s}^I}\n\\newcommand{\\Ih}{\\hat{\\cvec{i}}^S}\n\\newcommand{\\Sh}{\\hat{\\cvec{s}}^I}\n\n\\newcommand{\\AtX}{\\AT \\X}\n\\newcommand{\\CtV}{\\CT \\V}\n\\newcommand{\\dCtV}{\\diag{\\CtV}}\n\\newcommand{\\DtZ}{\\DT \\Z}\n\\newcommand{\\ApTx}{\\ApT \\x}\n\\newcommand{\\CpTv}{\\CpT \\vv}\n\\newcommand{\\DpTz}{\\DpT \\z}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using dmce_line3p_mpc2 Class in MATPOWER\nDESCRIPTION: This snippet demonstrates how to import and use the dmce_line3p_mpc2 class from the MATPOWER library. The class is part of the mp module and likely represents a specific type of power system component or analysis tool.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dmce_line3p_mpc2.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom matpower.mp import dmce_line3p_mpc2\n\n# Example usage (placeholder, as actual usage details are not provided)\ndmce_instance = dmce_line3p_mpc2()\n# ... (additional usage code would go here)\n```\n\n----------------------------------------\n\nTITLE: Documenting math_model_opf_acci Class in MATPOWER MP Module\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the math_model_opf_acci class. It shows the class inheritance and includes all member functions and attributes in the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_opf_acci.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: math_model_opf_acci\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Displaying Linear Constraints in MATPOWER\nDESCRIPTION: This snippet presents the linear constraints of the optimization problem, showing their indices, descriptions, lower and upper bounds, values, and Lagrange multipliers.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/lib/t/display_soln/t_om_solve_qps_display_soln.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n=====  LINEAR CONSTRAINTS  =====\n  idx    description                   mu_lb     lb       val      ub      mu_ub\n------- ---------------------------- -------- -------- -------- -------- --------\n   1    Ax(1)                         2.19333        1        1        1       - \n   2    Ax(2)                              -       0.1 0.109333       -        - \n------- ---------------------------- -------- -------- -------- -------- --------\n        Min                                 0      0.1 0.109333        1        0\n        Max                           2.19333        1        1      Inf        0\n```\n\n----------------------------------------\n\nTITLE: Checking for intlinprog feature in MATLAB\nDESCRIPTION: This code snippet is a placeholder representing the actual implementation of the `have_feature_intlinprog` function within the MATPOWER library. It is expected to contain logic that determines whether the `intlinprog` solver is available in the MATLAB environment. The specifics of this check depend on the MATLAB version and installed toolboxes.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_intlinprog.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n % Placeholder for have_feature_intlinprog function implementation\n % The actual code would check for the availability of the intlinprog solver.\n % Example (not the actual implementation):\n % if exist('intlinprog', 'file') == 2\n %   feature_exists = true;\n % else\n %   feature_exists = false;\n % end\n```\n\n----------------------------------------\n\nTITLE: MATPOWER Generator Data Output\nDESCRIPTION: Lists active and reactive power generation for each generator in the system with status and bus location.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_opf_case9.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                             Power Generation\n Gen ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n      1         1      1       89.8      13.0\n      2         2      1      134.3       0.0\n      3         3      1       94.2     -22.6\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Links for MATPOWER Test Cases\nDESCRIPTION: URL reference definitions for MATPOWER test case files using ReStructuredText link format. Links point to specific test case files in the MATPOWER GitHub repository.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/three-phase.rst#2025-04-22_snippet_9\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _t_case3p_g: https://github.com/MATPOWER/matpower/blob/master/lib/t/t_case3p_g.m\n.. _t_case3p_h: https://github.com/MATPOWER/matpower/blob/master/lib/t/t_case3p_h.m\n```\n\n----------------------------------------\n\nTITLE: MATPOWER PNE Event Target Lambda Documentation\nDESCRIPTION: This code snippet contains the restructuredText markup that is used to generate documentation for the `pne_event_target_lam` function in MATPOWER. It uses the `autofunction` directive to automatically extract the function's documentation from its source code. This ensures that the documentation is always up-to-date with the code.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/pne_event_target_lam.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\n.. autofunction:: pne_event_target_lam\n\n```\n\n----------------------------------------\n\nTITLE: Defining Software Platform Commands\nDESCRIPTION: LaTeX commands for formatting software platform names (MATLAB and GNU Octave) with proper trademark symbols and URL links.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/preamble.tex.txt#2025-04-22_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\newcommand{\\matlab}[0]{{\\sc Matlab}}\n\\newcommand{\\matlabr}[0]{{\\matlab{} \\textsuperscript{\\tiny \\textregistered}}}\n\\newcommand{\\matlaburl}[0]{https://www.mathworks.com}\n\\newcommand{\\matlablink}[0]{\\href{\\matlaburl}{\\matlab{}}}\n\\newcommand{\\octave}[0]{GNU Octave}\n\\newcommand{\\octaveurl}[0]{https://www.octave.org}\n\\newcommand{\\octavelink}[0]{\\href{\\octaveurl}{\\octave{}}}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mp.mme_load_pf_dc in Python\nDESCRIPTION: This snippet demonstrates how to import and use the mme_load_pf_dc class from the MATPOWER library's mp package. The class is likely used for DC power flow calculations related to market model extension loads.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_load_pf_dc.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom matpower.mp import mme_load_pf_dc\n\n# Create an instance of mme_load_pf_dc\nmme_load = mme_load_pf_dc()\n\n# Use the methods of mme_load_pf_dc\n# (Specific method calls would depend on the class implementation)\n```\n\n----------------------------------------\n\nTITLE: Defining Links and Formatting for MATPOWER-related Tools\nDESCRIPTION: Sets up replacements for various MATPOWER-related tools and components, including MIPS, MP-Test, MP-Opt-Model, and MOST, with links to their respective documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/prolog.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |MIPS| replace:: :raw-html:`MIPS`:raw-latex:`\\mips{}`\n.. |MIPS>| replace:: :raw-html:`<a href=\"https://github.com/MATPOWER/mips\">MIPS</a>`:raw-latex:`\\mipslink{}`\n.. |MIPSname| replace:: :raw-html:`<b>M</b><span style=\"font-size:smaller\">ATPOWER</span> <b>I</b>nterior <b>P</b>oint <b>S</b>olver`:raw-latex:`\\mipsname{}`\n.. |MIPSman| replace:: :raw-html:`<a href=\"https://matpower.org/docs/MIPS-manual-1.5.1.pdf\">MIPS User's Manual</a>`:raw-latex:`\\mipsman{}`\n\n.. |MPTEST| replace:: :raw-html:`MP-Test`:raw-latex:`\\mptest{}`\n.. |MPTEST>| replace:: :raw-html:`<a href=\"https://github.com/MATPOWER/mptest\">MP-Test</a>`:raw-latex:`\\mptestlink{}`\n.. |MPTESTman| replace:: :raw-html:`<a href=\"https://github.com/MATPOWER/mptest\">MP-Test README</a>`:raw-latex:`\\mptestman{}`\n\n.. |MPOM| replace:: :raw-html:`MP-Opt-Model`:raw-latex:`\\mpom{}`\n.. |MPOM>| replace:: :raw-html:`<a href=\"https://github.com/MATPOWER/mp-opt-model\">MP-Opt-Model</a>`:raw-latex:`\\mpomlink{}`\n.. |MPOMman| replace:: :raw-html:`<a href=\"https://matpower.org/docs/MP-Opt-Model-manual-4.2.pdf\">MP-Opt-Model User's Manual</a>`:raw-latex:`\\mpomman{}`\n\n.. |MOST| replace:: :raw-html:`MOST`:raw-latex:`\\most{}`\n.. |MOST>| replace:: :raw-html:`<a href=\"https://github.com/MATPOWER/most\">MOST</a>`:raw-latex:`\\mostlink{}`\n.. |MOSTname| replace:: :raw-html:`<b>M</b><span style=\"font-size:smaller\">ATPOWER</span> <b>O</b>ptimal <b>S</b>cheduling <b>T</b>ool`:raw-latex:`\\mostname{}`\n.. |MOSTman| replace:: :raw-html:`<a href=\"https://matpower.org/docs/MOST-manual-1.3.pdf\">MOST User's Manual</a>`:raw-latex:`\\mostman{}`\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mp.mme_shunt_pf_ac in Python\nDESCRIPTION: This snippet shows how to import and use the mme_shunt_pf_ac class from the MATPOWER mp module. The class is documented using Python's autoclass directive, indicating it's likely a part of a larger documentation system.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_shunt_pf_ac.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom matpower.mp import mme_shunt_pf_ac\n\n# Example usage (placeholder, actual usage may vary)\nshunt_pf = mme_shunt_pf_ac()\n# Use shunt_pf methods and attributes as needed\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and its Dependencies\nDESCRIPTION: This snippet installs Sphinx along with additional modules for MATLAB integration and enhanced themes. It's necessary for building the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/Building-Docs.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -U sphinx\npip install -U sphinxcontrib-matlabdomain\npip install -U sphinx-tabs\npip install -U sphinx-rtd-theme\n```\n\n----------------------------------------\n\nTITLE: Setting Soft Limits Options in MATLAB/Octave\nDESCRIPTION: Shows how to set options for soft limits in OPF problems using MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_8\n\nLANGUAGE: MATLAB\nCODE:\n```\nopf.softlims.default = true;\ntoggle_softlims(mpc, 'on');\n```\n\n----------------------------------------\n\nTITLE: Handling Target Parameter Lambda Event in MATLAB\nDESCRIPTION: The function `pne_callback_target_lam()` manages the detection of events when a target value of the parameter Î» is reached, crucial for controlling solver operations within PNE modeling.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_callback_target_lam()\n```\n\n----------------------------------------\n\nTITLE: MATPOWER Bus Data Table\nDESCRIPTION: Shows voltage and Lambda (LMP) data for each bus in the system, including magnitude, angle, and price information.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_opf_case9.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n                      Voltage            Lambda (LMP)\n Bus ID   Status  Mag(pu)  Ang(deg)  P($/MWh)  Q($/MVAr-hr)\n--------  ------  -------  --------  --------  ------------\n      1      1     1.100     0.000    24.756         0.000\n      2      1     1.097     4.894    24.035         0.000\n      3      1     1.087     3.250    24.076        -0.000\n```\n\n----------------------------------------\n\nTITLE: Defining Text Replacements for MATPOWER Documentation\nDESCRIPTION: Creates replacements for common terms and formatting used throughout the MATPOWER documentation, including version-specific links and styled text.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/prolog.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |br| replace:: :raw-html:`<br \\>`:raw-latex:`\\\\`\n\n.. |MATPOWER| replace:: :raw-html:`M<span style=\"font-size:smaller\">ATPOWER</span>`:raw-latex:`\\matpower{}`\n.. |MATPOWER>| replace:: :raw-html:`<a href=\"https://matpower.org\">M<span style=\"font-size:smaller\">ATPOWER</span></a>`:raw-latex:`\\matpowerlink{}`\n.. |/MATPOWER/| replace:: :raw-html:`<em>M<span style=\"font-size:smaller\">ATPOWER</span></em>`:raw-latex:`\\matpoweri{}`\n.. |*MATPOWER*| replace:: :raw-html:`<strong>M<span style=\"font-size:smaller\">ATPOWER</span></strong>`:raw-latex:`\\matpowerb{}`\n.. |MATPOWER GitHub URL| replace:: https://github.com/MATPOWER/matpower\n.. |MUM| replace:: :raw-html:`<a href=\"https://matpower.org/docs/MATPOWER-manual-8.0.pdf\">M<span style=\"font-size:smaller\">ATPOWER</span> User's Manual</a>`:raw-latex:`\\mum{}`\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mp.mm_shared_pfcpf_acci Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the mp.mm_shared_pfcpf_acci class. It includes all class members and shows the inheritance hierarchy.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf_acci.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mm_shared_pfcpf_acci\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-references for MATPOWER Documentation\nDESCRIPTION: Sets up cross-references for various MATPOWER manuals and technical notes, allowing easy linking within the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/prolog.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |TN5| replace:: :raw-html:`<a href=\"https://matpower.org/docs/TN5-MP-Element.pdf\"><em>M<span style=\"font-size:smaller\">ATPOWER</span> Technical Note 5</em></a>`:raw-latex:`\\TNfive{}`\n.. |MATPOWER-Users-Manual| replace:: :ref:`MATPOWER User's Manual <matpower_users_manual>`\n.. |MATPOWER-Dev-Manual| replace:: :ref:`MATPOWER Developer's Manual <matpower_dev_manual>`\n.. |MATPOWER-Ref-Manual| replace:: :ref:`MATPOWER Reference Manual <matpower_ref_manual>`\n.. |MP-Test-Users-Manual| replace:: :ref:`MP-Test User's Manual <mptest_users_manual>`\n.. |MIPS-Users-Manual| replace:: :ref:`MIPS User's Manual <mips_users_manual>`\n.. |MP-Opt-Model-Users-Manual| replace:: :ref:`MP-Opt-Model User's Manual <mpom_users_manual>`\n.. |MOST-Users-Manual| replace:: :ref:`MOST User's Manual <most_users_manual>`\n```\n\n----------------------------------------\n\nTITLE: MATPOWER Port Injection Power ACP Test Function Link\nDESCRIPTION: GitHub source code reference for the t_port_inj_power_acp test function in MATPOWER's test suite. The function is located in the lib/t directory of the MATPOWER repository.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/tests/t_port_inj_power_acp.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"float: right\"><a href=\"https://github.com/MATPOWER/matpower/blob/master/lib/t/t_port_inj_power_acp.m\" target=_blank><svg height=\"32\" aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" data-view-component=\"true\" class=\"octicon octicon-mark-github v-align-middle color-fg-default\"><path d=\"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z\"></path></svg></a></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Optimization Function - MATLAB\nDESCRIPTION: This snippet documents the 'miqps_ot' function, utilized for solving optimization problems in the MATPOWER suite. The function is likely to interact with various optimization models and requires appropriate contexts from the MATPOWER environment. While specific parameters and return types are not detailed, this function serves a critical role in optimization tasks.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/miqps_ot.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: miqps_ot\n```\n\n----------------------------------------\n\nTITLE: Configuring Pretty Printing for DC Lines\nDESCRIPTION: Implements pretty printing functionality for DC line summary sections.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_9\n\nLANGUAGE: matlab\nCODE:\n```\nfunction TorF = pp_have_section_sum(obj, mpopt, pp_args)\n    TorF = true;\nend\n\nfunction obj = pp_data_sum(obj, dm, rows, out_e, mpopt, fd, pp_args)\n```\n\n----------------------------------------\n\nTITLE: Adding MOST Options to MATPOWER\nDESCRIPTION: Added support for MOST (Multi-period Optimal Scheduling Tool) options in the MATPOWER configuration system, including updates to initialization and option management functions.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nmpopt = most()\n```\n\n----------------------------------------\n\nTITLE: Cloning mp-docs-shared Repository for MATPOWER Documentation\nDESCRIPTION: Commands to clone the mp-docs-shared repository into a MATPOWER component project's documentation source directory. This is required for building documentation for individual MATPOWER components.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd <project>/docs/sphinx/source\ngit clone https://github.com/MATPOWER/mp-docs-shared.git\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Variable Shortcuts in LaTeX for MATPOWER\nDESCRIPTION: This snippet creates shorthand notations for commonly used vector variables in power system equations, particularly those representing complex values.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_3\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\av}{\\cvec{a}}\n\\newcommand{\\bv}{\\cvec{b}}\n\\newcommand{\\cv}{\\cvec{c}}\n\n\\newcommand{\\f}{\\cscal{f}}\n\\newcommand{\\F}{\\cvec{f}}\n\\newcommand{\\g}{\\rvec{g}}\n\\newcommand{\\G}{\\cvec{g}}\n\\newcommand{\\h}{\\rvec{h}}\n\\newcommand{\\HH}{\\cvec{h}}      % \\H already defined\n\n\\renewcommand{\\x}{\\rvec{x}}\n\\newcommand{\\y}{\\rvec{y}}\n\\newcommand{\\z}{\\rvec{z}}\n\n\\renewcommand{\\l}{\\rvec{l}}\n\\renewcommand{\\u}{\\rvec{u}}\n\\renewcommand{\\c}{\\rvec{c}}\n\\renewcommand{\\AA}{\\rmat{A}}\n\\newcommand{\\QQ}{\\rmat{Q}}\n\\newcommand{\\q}{\\rvec{q}}\n\n\\newcommand{\\X}{\\cvec{x}}\n\\newcommand{\\Z}{\\cvec{z}}\n\\newcommand{\\A}{\\cmat{A}}\n\\newcommand{\\B}{\\cmat{B}}\n\\newcommand{\\alphav}{\\rvecG{\\alpha}}\n\\newcommand{\\lam}{\\rvecG{\\lambda}}\n\\newcommand{\\lamh}{\\hat{\\lam}}\n\\newcommand{\\muv}{\\rvecG{\\mu}}\n\\newcommand{\\muhv}{\\hat{\\muv}}\n```\n\n----------------------------------------\n\nTITLE: Detecting GLPK Feature in Optimization Model\nDESCRIPTION: Check if GLPK solver is available and configured for mathematical optimization tasks in MATPOWER. This function determines solver compatibility and provides feature information.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_glpk.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction out = have_feature_glpk()\n```\n\n----------------------------------------\n\nTITLE: Defining the pne_register_events Function - Python\nDESCRIPTION: The pne_register_events function is an automatically generated docstring that likely registers event handlers to respond to specific events within the MP Opt Model framework. This function may depend on the overall structure of the MP Opt Model library and is expected to integrate seamlessly with other components of the system. It does not take any parameters or return values as it is designed to configure event handling.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/pne_register_events.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: pne_register_events\n```\n\n----------------------------------------\n\nTITLE: Defining Linear and Nonlinear Current Variables in LaTeX for MATPOWER\nDESCRIPTION: This snippet defines variables for linear and nonlinear components of currents and complex power in power system equations, including their conjugates and diagonal forms.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_7\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\Ilin}{\\cvec{i}^{lin}}\n\\newcommand{\\Ilink}{\\cvec{i}^{lin, k}}\n\\newcommand{\\Ilinc}{\\conj{\\Ilin}}\n\\newcommand{\\dIlin}{\\diag{\\Ilin}}\n\\newcommand{\\dIlinc}{\\diag{\\Ilinc}}\n% \\-newcommand{\\dIlinc}{\\conj{\\dIlin}}\n\n\\newcommand{\\Ilinh}{\\hat{{\\cvec{i}}}^{lin}}\n\\newcommand{\\Ilinhk}{\\hat{\\cvec{i}}^{lin, k}}\n\\newcommand{\\Ilinhc}{\\conj{\\Ilinh}}\n\\newcommand{\\dIlinh}{\\diag{\\Ilinh}}\n\\newcommand{\\dIlinhc}{\\diag{\\Ilinhc}}\n% \\-newcommand{\\dIlinc}{\\conj{\\dIlin}}\n\n\\newcommand{\\Slin}{\\cvec{s}^{lin}}\n\\newcommand{\\Slink}{\\cvec{s}^{lin, k}}\n\\newcommand{\\Slinc}{\\conj{\\Slin}}\n\\newcommand{\\dSlin}{\\diag{\\Slin}}\n\\newcommand{\\dSlinc}{\\diag{\\Slinc}}\n% \\-newcommand{\\dSlinc}{\\conj{\\dSlin}}\n\n\\newcommand{\\Slinh}{\\hat{\\cvec{s}}^{lin}}\n\\newcommand{\\Slinhk}{\\hat{\\cvec{s}}^{lin, k}}\n\\newcommand{\\Slinhc}{\\conj{\\Slinh}}\n\\newcommand{\\dSlinh}{\\diag{\\Slinh}}\n\\newcommand{\\dSlinhc}{\\diag{\\Slinhc}}\n% \\-newcommand{\\dSlinc}{\\conj{\\dSlin}}\n\n\\newcommand{\\Inln}{\\cvec{i}^{nln}}\n\\newcommand{\\Inlnk}{\\cvec{i}^{nln, k}}\n\n\\newcommand{\\Snln}{\\cvec{s}^{nln}}\n\\newcommand{\\Snlnk}{\\cvec{s}^{nln, k}}\n\n\\newcommand{\\Inlnh}{\\hat{\\cvec{i}}^{nln}}\n\\newcommand{\\Inlnhk}{\\hat{\\cvec{i}}^{nln, k}}\n\n\\newcommand{\\Snlnh}{\\hat{\\cvec{s}}^{nln}}\n\\newcommand{\\Snlnhk}{\\hat{\\cvec{s}}^{nln, k}}\n```\n\n----------------------------------------\n\nTITLE: Adding PDIPM-based QP/LP Solver in MATLAB\nDESCRIPTION: Introduces a new QP/LP solver named pdipm_qp() based on the pure MATLAB PDIPM solver used for AC OPFs.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_25\n\nLANGUAGE: MATLAB\nCODE:\n```\npdipm_qp()\n```\n\n----------------------------------------\n\nTITLE: Running MIPS Test Suite in MATLAB/Octave\nDESCRIPTION: Example output of running the MIPS test suite using the test_mips command to verify proper installation and functionality. Shows successful test results with pass/skip counts.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/README.md#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n  >> test_mips\n  t_mplinsolve......ok (8 of 180 skipped)\n  t_mips............ok\n  t_mips_pardiso....ok (60 of 60 skipped)\n  t_qps_mips........ok\n  All tests successful (304 passed, 68 skipped of 372)\n  Elapsed time 0.08 seconds.\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: This snippet adds modified files to the staging area and commits them with a message. Proper commit messages are important for clear version history, and it's encouraged to describe the purpose of the change concisely.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add my/changed/files\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Generation Constraints Table Output\nDESCRIPTION: Table showing generation constraints with active power limits, including minimum (Pmin) and maximum (Pmax) power limits along with their associated multipliers (mu).\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_softlims_dc.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n Gen   Bus                  Active Power Limits\n  #     #     Pmin mu     Pmin       Pg       Pmax    Pmax mu\n----  -----   -------   --------  --------  --------  -------\n   1    30       -        10.00    159.40     90.00    10.000\n   4    20      4.000     80.00     75.00    300.00      -   \n```\n\n----------------------------------------\n\nTITLE: Creating CSS Symlink for MATPOWER Documentation\nDESCRIPTION: Commands to create a symbolic link for the MATPOWER CSS file, which connects the project-specific CSS to the shared CSS file in the mp-docs-shared repository.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <project>/docs/sphinx/source/_static/css\nln -s ../../mp-docs-shared/css/matpower.css matpower.css\n```\n\n----------------------------------------\n\nTITLE: Documenting mme_branch_opf Class in MATPOWER's mp Module\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the mme_branch_opf class. It shows the class inheritance and all its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_branch_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: mme_branch_opf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Vector and Matrix Formatting in LaTeX for MATPOWER\nDESCRIPTION: This snippet defines formatting commands for real and complex vectors and matrices, including special formatting for Greek letters and parameters.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\cscal}[1]{\\mathrm{#1}}         % complex scalar\n\\newcommand{\\rvec}[1]{{\\boldsymbol{#1}}}    % real vector (lower case)\n\\newcommand{\\cvec}[1]{\\mathbf{#1}}          % complex vector (lower case)\n\\newcommand{\\rmat}[1]{{\\boldsymbol{#1}}}    % real matrix (upper case)\n\\newcommand{\\cmat}[1]{\\mathbf{#1}}          % complex matrix (upper case)\n\\newcommand{\\rvecG}[1]{{\\boldsymbol{#1}}}   % real vector (lower case)\n\\newcommand{\\cvecG}[1]{\\boldsymbol{#1}}     % complex vector (lower case, use \\uptheta, etc.)\n\\newcommand{\\rmatG}[1]{\\boldsymbol{\\mathit{#1}}}    % real vector (Greek)\n\\newcommand{\\cmatG}[1]{\\mathbf{#1}}         % complex vector (Greek)\n\\newcommand{\\param}[1]{\\underline{#1}}      % parameter (vs var, fcn, etc)\n\\newcommand{\\ov}[1]{{\\overline{#1}}}\n```\n\n----------------------------------------\n\nTITLE: Running All Defined Tests in MATLAB/Octave\nDESCRIPTION: This snippet commands the execution of all tests compiled by the 'test_everything_ex1' function, providing a summary of the results, including passed and skipped tests.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/source/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\n>> test_everything_ex1\nmptest_ex1.....ok (2 of 4 skipped)\nt_test_fcns....ok\nAll tests successful (7 passed, 2 skipped of 9)\nElapsed time 0.09 seconds.\n```\n\n----------------------------------------\n\nTITLE: Defining t_most_30b_3_1_0 Function - Python\nDESCRIPTION: The function t_most_30b_3_1_0 is automatically documented to capture its usage within the MATPOWER framework. It is intended for users needing to perform specific analysis on power system data, facilitating simulations and calculations.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/t_most_30b_3_1_0.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: t_most_30b_3_1_0\n```\n\n----------------------------------------\n\nTITLE: Defining Jacobian and Power Flow Variables in LaTeX for MATPOWER\nDESCRIPTION: This snippet defines variables related to Jacobian matrices and power flow equations, including active and reactive power components of generators and systems.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_6\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\kk}{\\rvec{k}}\n\\newcommand{\\J}{\\param{\\rmat{J}}}\n\\newcommand{\\Jt}{\\trans{\\J}}\n\\newcommand{\\Jk}[1]{\\J_{\\kk_#1}}\n\\newcommand{\\Ah}{\\hat{\\A}}\n\\newcommand{\\Fh}{\\hat{\\F}}\n\\newcommand{\\Gh}{\\hat{\\G}}\n\\newcommand{\\gh}{\\hat{\\g}}\n\n\\newcommand{\\fmax}{\\param{\\rvec{f}}_\\mathrm{max}}\n% \\-newcommand{\\gS}{\\g^S}\n% \\-newcommand{\\gI}{\\g^I}\n\\newcommand{\\gP}{\\g^P}\n% \\-newcommand{\\gSk}[1]{\\g^{S,#1}}\n% \\-newcommand{\\gIk}[1]{\\g^{I,#1}}\n\\newcommand{\\gPk}[1]{\\g^{P,#1}}\n\n\\newcommand{\\fhmax}{\\hat{\\param{\\rvec{f}}}_\\mathrm{max}}\n\\newcommand{\\ghP}{\\gh^P}\n\\newcommand{\\ghPk}[1]{\\gh^{P,#1}}\n\n\\newcommand{\\GS}{\\G^S}\n\\newcommand{\\GI}{\\G^I}\n\\newcommand{\\GSk}[1]{\\G^{S,#1}}\n\\newcommand{\\GIk}[1]{\\G^{I,#1}}\n\\newcommand{\\GSsys}{\\GSk{\\mathrm{sys}}}\n\\newcommand{\\GIsys}{\\GIk{\\mathrm{sys}}}\n\\newcommand{\\gPsys}{\\gPk{\\mathrm{sys}}}\n\n\\newcommand{\\GhS}{\\Gh^S}\n\\newcommand{\\GhI}{\\Gh^I}\n\\newcommand{\\GhSk}[1]{\\Gh^{S,#1}}\n\\newcommand{\\GhIk}[1]{\\Gh^{I,#1}}\n\\newcommand{\\GhSsys}{\\GhSk{\\mathrm{sys}}}\n\\newcommand{\\GhIsys}{\\GhIk{\\mathrm{sys}}}\n\\newcommand{\\ghPsys}{\\ghPk{\\mathrm{sys}}}\n```\n\n----------------------------------------\n\nTITLE: Documenting have_feature_lu_vec Function\nDESCRIPTION: This snippet defines the have_feature_lu_vec function which is used to check if the LU vector feature is available in MATPOWER's framework. It is invoked as an auto function for ease of access, allowing users to check this feature seamlessly as part of their workflow.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/have_feature_lu_vec.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. autofunction:: have_feature_lu_vec\n```\n\n----------------------------------------\n\nTITLE: Documenting the loadxgendata function in MATLAB\nDESCRIPTION: This snippet documents the `loadxgendata` function using the `autofunction` directive. It indicates that detailed documentation for this function is available and will be automatically included in the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/loadxgendata.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: loadxgendata\n```\n\n----------------------------------------\n\nTITLE: Testing DMC Element Function Declaration in MATLAB\nDESCRIPTION: Function signature for t_dmc_element test module. This appears to be an auto-documented test function for DMC (Dynamic Matrix Control) elements in MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/tests/t_dmc_element.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nfunction t_dmc_element\n```\n\n----------------------------------------\n\nTITLE: Cloning Shared Documentation Files for MATPOWER\nDESCRIPTION: Clones the `mp-docs-shared` repository into the local documentation source directory to incorporate shared documentation resources used across MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/Building-Docs.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd docs/sphinx/source\ngit clone https://github.com/MATPOWER/mp-docs-shared.git\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Make\nDESCRIPTION: This snippet shows how to build the HTML documentation using the `make` command in the `docs/sphinx` directory. This compiles the reStructuredText source files into HTML.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/Building-Docs.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting t_most_30b_3_1_17 Function - reStructuredText\nDESCRIPTION: This snippet uses the autodocument directive to include the t_most_30b_3_1_17 function in the documentation automatically. It allows users to retrieve the function's documentation directly within the MATPOWER's documentation framework, providing details about functionality and usage.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/t_most_30b_3_1_17.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: t_most_30b_3_1_17\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository\nDESCRIPTION: This snippet clones the forked repository into the current directory and sets up the original repository as a remote named 'upstream'. It's necessary to keep your fork updated with the original repository's changes.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# clone your fork of the repo into the current directory\ngit clone https://github.com/<your-username>/most.git\n# go to the newly cloned directory\ncd most\n# assign the original repo to a remote called \"upstream\"\ngit remote add upstream https://github.com/MATPOWER/most.git\n```\n\n----------------------------------------\n\nTITLE: MIPS Linear Solver Usage Example with PARDISO\nDESCRIPTION: Example showing PARDISO solver options configuration in mplinsolve. Sets parameters through opt.pardiso struct.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt.pardiso.dparm = [...]; % Set PARDISO parameters\nopt.linsolver = 'PARDISO';\nmplinsolve(A, b, opt);\n```\n\n----------------------------------------\n\nTITLE: Documenting most_summary function\nDESCRIPTION: This snippet documents the `most_summary` function, providing a reference to its detailed functionality within the MOST module of MATPOWER. The `autofunction` directive is used to automatically generate documentation from the function's docstring. The documentation helps users understand the purpose, inputs, and outputs of the `most_summary` function.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/most_summary.rst#2025-04-22_snippet_0\n\nLANGUAGE: m\nCODE:\n```\n\".. autofunction:: most_summary\"\n```\n\n----------------------------------------\n\nTITLE: Setting CPF Plot Parameters\nDESCRIPTION: Configuring continuation power flow plotting options\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_13\n\nLANGUAGE: MATLAB\nCODE:\n```\ncpf.plot.bus = [bus_vector] % Vector of bus numbers to plot\n```\n\n----------------------------------------\n\nTITLE: Implementing AC Cartesian Gizmo Network Model Element in MATLAB\nDESCRIPTION: Concrete class for gizmo network model elements using cartesian voltage formulation. Inherits from nme_gizmo_ac and form_acc.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/gizmo-element/index.rst#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef nme_gizmo_acc < mp.nme_gizmo_ac & mp.form_acc\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mme_bus3p Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the mme_bus3p class. It includes all members and shows the inheritance hierarchy.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_bus3p.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_bus3p\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Environment on Windows\nDESCRIPTION: Command to verify which Python interpreter is being used after activating the virtual environment on Windows systems.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/Building-Docs.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwhere python\n```\n\n----------------------------------------\n\nTITLE: Checking Python within Activated Virtual Environment in Windows\nDESCRIPTION: Confirms that the currently active Python interpreter is from the virtual environment. Useful for ensuring environment integrity on Windows.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/Building-Docs.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwhere python\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch\nDESCRIPTION: This command is used to create a new branch from the updated master branch for developing new features or fixing bugs. This helps to keep the changes organized and separate from other development work.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Functionality in MATLAB/Octave\nDESCRIPTION: Demonstrates how to use the have_fcn() function to check for optional functionality in MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_5\n\nLANGUAGE: MATLAB\nCODE:\n```\nhave_fcn('clear_cache')\n```\n\n----------------------------------------\n\nTITLE: Defining t_case30_most Function in Python\nDESCRIPTION: The t_case30_most function is defined as part of the MATPOWER framework documentation. This documentation is generated automatically using the Sphinx documentation tool, specifically from the most module.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/t_case30_most.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: t_case30_most\n```\n\n----------------------------------------\n\nTITLE: Using mptestver for Version Information in MATLAB\nDESCRIPTION: The mptestver() function defines and returns the explicit version number of the MP-Test package.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/CHANGES.md#2025-04-22_snippet_6\n\nLANGUAGE: MATLAB\nCODE:\n```\nmptestver()\n```\n\n----------------------------------------\n\nTITLE: Checking Python within Activated Virtual Environment\nDESCRIPTION: Confirms that the currently active Python interpreter is from the virtual environment. Useful for ensuring environment integrity.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/Building-Docs.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwhich python\n```\n\n----------------------------------------\n\nTITLE: Checking for Required Features in MATLAB\nDESCRIPTION: This snippet checks for the availability of specific optimization features in MATLAB. It ensures that the necessary solvers are available before proceeding with the release.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/other/MOST-Release-Checklist.md#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nhave_feature('cplex', 0);\n        have_feature('glpk', 0);\n        have_feature('intlinprog', 0);\n        have_feature('mosek', 0);\n        rmpath('/Users/ray/dev/projects/sopf/dist');\n```\n\n----------------------------------------\n\nTITLE: Updating Local Repository\nDESCRIPTION: Commands to update local master branch with upstream changes\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: Power System Summary Analysis Output\nDESCRIPTION: Displays key system metrics including bus counts, generation capacity, load demands, and voltage statistics for a 9-bus power system. The analysis completed in 0.04 seconds.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_case9.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPF succeeded in 0.04 seconds (0.04 setup + 0.00 solve)\n================================================================================\n|     System Summary                                                           |\n================================================================================\n  elements                on     off    total\n --------------------- ------- ------- -------\n  Buses                     9       -       9\n    Areas                                   1\n    Zones                                   1\n  Generators                3       -       3\n  Loads                     3       -       3\n  Branches                  9       -       9\n    Lines                   9       -       9\n    Transformers            0       -       0\n\n  Total generation                     319.6 MW         22.8 MVAr\n  Total max generation capacity        820.0 MW        900.0 MVAr\n  Total min generation capacity         30.0 MW       -900.0 MVAr\n  Total load                           315.0 MW        115.0 MVAr\n  Total branch series losses             4.64 MW        48.38 MVAr\n  Total branch shunt losses                -  MW      -140.54 MVAr\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing for OPF Limits Section\nDESCRIPTION: This function overrides the pretty print method to set up data specifically for the limits section of the OPF, preparing to transmit flow information and constraints for display through various output parameters.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_16\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction obj = pretty_print(obj, dm, section, out_e, mpopt, fd, pp_args)\n    switch section\n        case 'lim'\n            %% pass flows and limits to parent\n            p_fr = obj.tab.p_fr;\n            lb = obj.tab.p_fr_lb;\n            ub = obj.tab.p_fr_ub;\n            pp_args.legacy_dcline.flow = struct( 'p_fr', p_fr, ...\n                                                    'lb', lb, ...\n                                                    'ub', ub );\n    end\n    pretty_print@mp.dme_legacy_dcline(obj, dm, section, out_e, mpopt, fd, pp_args);\nend\n```\n\n----------------------------------------\n\nTITLE: Defining t_most_fixed_res Function in MATLAB\nDESCRIPTION: The t_most_fixed_res function is defined for the MATPOWER's most module, serving to execute fixed reserve calculations. It requires the MATPOWER library and its environment to function correctly. The function is invoked automatically due to the use of autofunction, making it accessible for computations within the MATPOWER framework.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/t_most_fixed_res.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: t_most_fixed_res\n```\n\n----------------------------------------\n\nTITLE: Configuring User Function Array in MATLAB\nDESCRIPTION: Allows userfcn to be an array, with elements processed in order for more flexible customization.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_30\n\nLANGUAGE: MATLAB\nCODE:\n```\nuserfcn = []\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test Function with MP-Test in MATLAB\nDESCRIPTION: Example output from running the sample test function. Shows the test progression with success/skip indicators and a summary of test results.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: matlab\nCODE:\n```\n  >> mptest_ex1\n  1..4\n  ok 1 - size of pi\n  skipped 2..3 - foo and bar tests require Octave\n  ok 4 - 2+2 still equals 4\n  All tests successful (2 passed, 2 skipped of 4)\n  Elapsed time 0.00 seconds.\n```\n\n----------------------------------------\n\nTITLE: Documenting nme_bus_acp Class in MATPOWER (Python)\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the nme_bus_acp class. It shows the class inheritance and all public members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/nme_bus_acp.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: nme_bus_acp\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Cloning Shared Documentation Files\nDESCRIPTION: Commands to navigate to the source directory and clone the mp-docs-shared repository, which contains files shared by all MATPOWER documentation projects.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/Building-Docs.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/sphinx/source\ngit clone https://github.com/MATPOWER/mp-docs-shared.git\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and Related Packages\nDESCRIPTION: Installs Sphinx and its extensions like `sphinxcontrib-matlabdomain`, `sphinx-tabs`, and `sphinx-rtd-theme` to support the documentation building process.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/Building-Docs.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install -U sphinx\npip install -U sphinxcontrib-matlabdomain\npip install -U sphinx-tabs\npip install -U sphinx-rtd-theme\n```\n\n----------------------------------------\n\nTITLE: Installing Required Sphinx Packages\nDESCRIPTION: Commands to install Sphinx and required extensions (sphinxcontrib-matlabdomain, sphinx-tabs, sphinx-rtd-theme) for building the MATPOWER documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/Building-Docs.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -U sphinx\npip install -U sphinxcontrib-matlabdomain\npip install -U sphinx-tabs\npip install -U sphinx-rtd-theme\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Functionality in MATLAB/Octave\nDESCRIPTION: Demonstrates the use of the 'clear_cache' option in have_fcn() to re-check for optional functionality after changes to the MATLAB/Octave path.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.0b1-7.0.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nhave_fcn('clear_cache')\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Directive\nDESCRIPTION: Specifies the current module context for the documentation as matpower.+mp\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/nme_load_acc.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: matpower.+mp\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Environment on Unix/macOS\nDESCRIPTION: Command to verify which Python interpreter is being used after activating the virtual environment on Unix/macOS systems.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/Building-Docs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwhich python\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and Dependencies with pip\nDESCRIPTION: This snippet demonstrates how to install Sphinx, sphinxcontrib-matlabdomain, sphinx-tabs, and sphinx-rtd-theme using pip, the Python package installer. These packages are required to build the MATPOWER documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/Building-Docs.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install -U sphinx\npip install -U sphinxcontrib-matlabdomain\npip install -U sphinx-tabs\npip install -U sphinx-rtd-theme\n```\n\n----------------------------------------\n\nTITLE: Initializing LaTeX Package Configuration\nDESCRIPTION: LaTeX package configuration for table of contents formatting including width and margin settings.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/preamble.tex.txt#2025-04-22_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n% \\usepackage[titles]{tocloft}\n% \\cftsetpnumwidth {1.25cm}\\cftsetrmarg{1.5cm}\n% \\setlength{\\cftchapnumwidth}{0.75cm}\n% \\setlength{\\cftsecindent}{\\cftchapnumwidth}\n% \\setlength{\\cftsecnumwidth}{1.25cm}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: This code snippet configures Git with the user's name and email address, which is necessary for making commits in the repository. Ensure that you replace the placeholder values with your actual name and email.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Random Citizen\"\ngit config --global user.email \"random.citizen@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment in Windows\nDESCRIPTION: Sets up a Python virtual environment to isolate Sphinx installation and dependencies on Windows. This approach avoids conflicts with other Python projects.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/Building-Docs.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv sphinx-env\n.\\sphinx-env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Generating Python Documentation for mme_reserve_gen Class\nDESCRIPTION: This snippet uses Sphinx's autodoc extension to automatically generate documentation for the mme_reserve_gen class. It shows the class inheritance and all of its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_reserve_gen.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_reserve_gen\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Case File References\nDESCRIPTION: References to MATPOWER case files and models mentioned in the changelog.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_11\n\nLANGUAGE: MATLAB\nCODE:\n```\ncase_ACTIVSg25k\ncase_ACTIVSg10k\ncase_RTS_GMLC\ncase9\n```\n\n----------------------------------------\n\nTITLE: Initializing Indexed Name in Optimization Model\nDESCRIPTION: Method to initialize indices for an indexed name set of constraints, costs, or variables in the opt_model object.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.0.md#2025-04-22_snippet_7\n\nLANGUAGE: MATLAB/Octave\nCODE:\n```\nopt_model.init_indexed_name()\n```\n\n----------------------------------------\n\nTITLE: Documenting MATPOWER task_opf_legacy class\nDESCRIPTION: This snippet utilizes Sphinx directives to document the `task_opf_legacy` class in MATPOWER.  It shows the inheritance and lists all members of the class in the generated documentation. The class is assumed to be defined in a module accessible via `matpower.+mp`.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/task_opf_legacy.rst#2025-04-22_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. autoclass:: task_opf_legacy\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Formatting DC Line Limits Data Row\nDESCRIPTION: This method formats and returns a string representing a row of limit data for a specific DC line. It calculates necessary parameters including lower and upper bounds for appropriate output.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_20\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction str = pp_data_row_lim(obj, dm, k, out_e, mpopt, fd, pp_args)\n    flow = pp_args.legacy_dcline.flow;\n    if (flow.p_fr(k) < flow.lb(k) + obj.ctol || ...\n            obj.tab.mu_p_fr_lb(k) > obj.ptol)\n        mu_lb = sprintf('%10.3f', obj.tab.mu_p_fr_lb(k));\n    else\n        mu_lb = '      -   ';\n    end\n    if (flow.p_fr(k) > flow.ub(k) - obj.ctol || ...\n            obj.tab.mu_p_fr_ub(k) > obj.ptol)\n        mu_ub = sprintf('%10.3f', obj.tab.mu_p_fr_ub(k));\n    else\n        mu_ub = '      -   ';\n    end\n    str = sprintf('%7d %9d %9d %10s %8.2f %8.2f %8.2f %10s', ...\n        obj.tab.uid(k), obj.tab.bus_fr(k), obj.tab.bus_to(k), ...\n        mu_lb, flow.lb(k), flow.p_fr(k), flow.ub(k), mu_ub);\nend\n```\n\n----------------------------------------\n\nTITLE: Tabular Reserve Generation Constraint Data\nDESCRIPTION: Displays generation reserve constraints with key parameters including lower and upper bounds, generation limits, and Lagrange multipliers for power system optimization\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_3.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n     34        25       -        4.26    16.00     4.19       -           26\n     35        25       -       15.62    16.00    16.00      0.024        27\n     36        28       -       24.00    65.00    26.12       -           27\n     37        27       -        6.37    16.00     6.26       -           29\n     38        27       -        7.29    16.00     7.08       -           30\n     39        29       -        3.73    16.00     3.69       -           30\n     40         8       -       11.03    32.00     9.76       -           28\n     41         6       -       15.35    32.00    14.60       -           28\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mp.dme_gen_opf in Python\nDESCRIPTION: This snippet demonstrates how to import and use the dme_gen_opf class from the mp module in MATPOWER. It shows the basic structure for accessing class documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dme_gen_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom matpower.mp import dme_gen_opf\n\n# Access class documentation\nhelp(dme_gen_opf)\n\n# Create an instance of dme_gen_opf\ndme_instance = dme_gen_opf()\n\n# Access class members and methods\n# (Specific usage depends on the class implementation)\n```\n\n----------------------------------------\n\nTITLE: Syncing with Upstream\nDESCRIPTION: Commands to sync local branch with upstream master using rebase\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/master\n```\n\n----------------------------------------\n\nTITLE: Defining MATPOWER Brand Commands\nDESCRIPTION: Custom LaTeX commands for consistent MATPOWER branding, including regular, italic, and bold variations with URL links.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/preamble.tex.txt#2025-04-22_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\newcommand{\\matpower}[0]{{M{\\smaller{ATPOWER}}}}\n\\newcommand{\\matpowerurl}[0]{https://matpower.org}\n\\newcommand{\\matpowerlink}[0]{\\href{\\matpowerurl}{\\matpower{}}}\n\\newcommand{\\matpoweri}[0]{{\\emph{M{\\smaller{ATPOWER}}}}}\n\\newcommand{\\matpowerb}[0]{{\\textbf{M{\\smaller{ATPOWER}}}}}\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test Function in MATLAB/Octave\nDESCRIPTION: This snippet shows how to execute the previously defined test function 'mptest_ex1' in MATLAB/Octave and the expected output, including the number of tests passed or skipped.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/source/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\n>> mptest_ex1\n1..4\nok 1 - size of pi\nskipped 2..3 - foo and bar tests require Octave\nok 4 - 2+2 still equals 4\nAll tests successful (2 passed, 2 skipped of 4)\nElapsed time 0.00 seconds.\n```\n\n----------------------------------------\n\nTITLE: Pulling MATPOWER Docker Image\nDESCRIPTION: Command to download the latest MATPOWER Docker image from Docker Hub. This is the first step in setting up the MATPOWER environment.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/MATPOWER-Docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull docker.io/matpower/matpower:latest\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting MATPOWER math_model_opf_acc Class\nDESCRIPTION: This snippet shows how to import and document the math_model_opf_acc class from the MATPOWER library's mp module using Sphinx documentation syntax. It includes directives for setting the current module and generating class documentation with inheritance and member information.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_opf_acc.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: math_model_opf_acc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Building HTML and PDF Documentation\nDESCRIPTION: Commands to build both HTML and PDF versions of the documentation from the Sphinx source files in the docs/sphinx directory.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/builddocs.rst#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nmake html\nmake latexpdf\n```\n\n----------------------------------------\n\nTITLE: Load Distribution Data\nDESCRIPTION: Status and consumption data for all loads in the system, including active and reactive power demand at each bus location.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_opf_t_auction_case.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n================================================================================\n|     Load Data                                                                |\n================================================================================\n                             Power Consumption\nLoad ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n```\n\n----------------------------------------\n\nTITLE: Building GNU Octave Docker Image\nDESCRIPTION: Commands to build and tag a new version of the GNU Octave Docker image. Includes platform-specific considerations for macOS with Apple Silicon.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Docker-Build-Notes.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile-octave -t matpower/octave:<x.y.z> .\n```\n\n----------------------------------------\n\nTITLE: Documenting math_model_pf Class in MATPOWER (Python)\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the math_model_pf class. It shows inheritance and includes all members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_pf.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: math_model_pf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for nme_bus_dc Class in MATPOWER\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the nme_bus_dc class. It shows the class inheritance and lists all the class members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/nme_bus_dc.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: nme_bus_dc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Running Docker Exec to Access Container\nDESCRIPTION: Command to access an already running MATPOWER container from the host terminal. This allows interaction with Octave and MATPOWER in the container without starting a new instance.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/MATPOWER-Docker.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it <container-name> octave-cli\n```\n\n----------------------------------------\n\nTITLE: Implementing Section Presence Check for DC Line Data\nDESCRIPTION: This function checks if the section detailing is present for the DC line data model element. It returns true to indicate presence. No external dependencies are required.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_10\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction TorF = pp_have_section_det(obj, mpopt, pp_args)\n    TorF = true;\nend\n```\n\n----------------------------------------\n\nTITLE: Pushing MATPOWER Images\nDESCRIPTION: Commands to push new MATPOWER version tags to Docker Hub.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Docker-Build-Notes.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker push matpower/matpower:<X.Y>\ndocker push matpower/matpower:<X.Y>c\ndocker push matpower/matpower:latest\n```\n\n----------------------------------------\n\nTITLE: Building MATPOWER with Specific Octave Version\nDESCRIPTION: Command to build MATPOWER with a specific Octave version using custom tags.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Docker-Build-Notes.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg MP_SRC=github --build-arg BASE_TAG=<x.y.z> --build-arg BRANCH=<X.Y> -f docker/Dockerfile -t matpower:<X.Y>-oct-<x.y.z> .\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation for nme_bus3p in Python\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate documentation for the nme_bus3p class. It shows the class inheritance and lists all its members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/nme_bus3p.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: nme_bus3p\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Executing Octave Commands in Docker\nDESCRIPTION: Example command to execute within the Octave environment in the Docker container. This specific command displays version information.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Octave-Docker.md#2025-04-22_snippet_3\n\nLANGUAGE: octave\nCODE:\n```\nver\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring Repository Remotes\nDESCRIPTION: Commands to clone a forked repository and set up the upstream remote\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# clone your fork of the repo into the current directory\ngit clone https://github.com/<your-username>/mips.git\n# go to the newly cloned directory\ncd mips\n# assign the original repo to a remote called \"upstream\"\ngit remote add upstream https://github.com/MATPOWER/mips.git\n```\n\n----------------------------------------\n\nTITLE: Running Octave Command-Line Interface in Docker\nDESCRIPTION: Command to start Octave in command-line mode within a Docker container. This runs interactively and removes the container after exit.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Octave-Docker.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm matpower/octave:latest octave-cli\n```\n\n----------------------------------------\n\nTITLE: Documenting mm_shared_pfcpf_ac Class with Sphinx\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the mm_shared_pfcpf_ac class. It includes inheritance information and all class members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf_ac.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mm_shared_pfcpf_ac\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Deactivating Python Virtual Environment\nDESCRIPTION: Command to deactivate the Python virtual environment when done with documentation building.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/Building-Docs.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Detecting Linear Programming with Dual Simplex in MATLAB\nDESCRIPTION: This function, `have_feature_linprog_ds`, checks for the availability of a linear programming solver with dual simplex method capabilities within the MATPOWER environment. It is used to conditionally execute code that depends on this specific feature. The function returns a boolean value indicating whether the feature is present.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_linprog_ds.rst#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining the Feature Existence Function in MATLAB\nDESCRIPTION: The 'have_feature_isequaln' function checks for the presence of certain MATLAB features, which assists in making the code more robust and adaptable to the environment's capabilities. There are no external dependencies required for this function, as it utilizes MATLAB's built-in capabilities.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_isequaln.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: have_feature_isequaln\n```\n\n----------------------------------------\n\nTITLE: Running Octave CLI in Existing Docker Container\nDESCRIPTION: Command to start Octave CLI in an already running Docker container. Requires the container name, which can be obtained using 'docker container ls --all'.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Octave-Docker.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it <container-name> octave-cli\n```\n\n----------------------------------------\n\nTITLE: Documenting math_model_pf_acps Class in MATPOWER MP Module\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the math_model_pf_acps class. It shows the class inheritance and includes all class members in the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_pf_acps.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: math_model_pf_acps\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Managing Documentation Files and Symlinks\nDESCRIPTION: Commands for moving generated documentation files and updating symbolic links for version management.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/other/MATPOWER-Release-Checklist.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmv ~/dev/temp/htdocs/docs/ref7.1/menu7.1.html ~/dev/projects/matpower.org-static/docs/ref/\nmv ~/dev/temp/htdocs/docs/ref7.1/matpower7.1 ~/dev/projects/matpower.org-static/docs/ref/\ncd ~/dev/projects/matpower.org-static/docs/ref/\nrm index.html\nln -s ./menu7.1.html index.html\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for mm_shared_pfcpf_acc Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the mm_shared_pfcpf_acc class. It includes all members and shows the inheritance hierarchy.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf_acc.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mm_shared_pfcpf_acc\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Checking IPOPT Feature in MATPOWER\nDESCRIPTION: The `have_feature_ipopt` function determines whether the IPOPT solver is accessible within the MATPOWER environment. This check is essential before attempting to solve optimization problems that rely on IPOPT. The function returns a logical value indicating the presence or absence of the feature.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_ipopt.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction flag = have_feature_ipopt()\n%HAVE_FEATURE_IPOPT  Detect availability/version of IPOPT\n\nflag = have_fcn('ipopt');\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting most_ex6_uc Function in Python\nDESCRIPTION: This snippet automatically documents the 'most_ex6_uc' function from the MATPOWER library. It leverages Sphinx directives for auto-generating function documentation based on its signature and docstring.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/most_ex6_uc.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: most_ex6_uc\n```\n\n----------------------------------------\n\nTITLE: Documenting mp.form Class in Python\nDESCRIPTION: This code snippet uses Python's docstring format to document the mp.form class. It indicates that the class should be auto-documented, showing inheritance and all members.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/form.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: form\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Class for xt_reserves in Python\nDESCRIPTION: The snippet defines the xt_reserves class, which is part of MATPOWER's extended functional capability. It includes the class declaration and specifies that it should show inheritance details and include all members for documentation purposes.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/xt_reserves.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: xt_reserves\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Static Security-Constrained OPF Example\nDESCRIPTION: This functionality sets up an example scenario of a static security-constrained OPF using the MATPOWER toolbox. It leverages specific MATPOWER functions and modules to demonstrate the configuration and execution. Dependencies include the MATPOWER library and its associated modules. This setup does not take input parameters and outputs initialized case configurations for OPF simulations.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/most_ex4_dcopf_ss.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. currentmodule:: most\\n\\n:raw-html:`<div style=\\\"float: right\\\"><a href=\\\"https://github.com/MATPOWER/most/blob/master/lib/t/most_ex4_dcopf_ss.m\\\" target=_blank><svg height=\\\"32\\\" aria-hidden=\\\"true\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"32\\\" data-view-component=\\\"true\\\" class=\\\"octicon octicon-mark-github v-align-middle color-fg-default\\\"><path d=\\\"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z\\\"></path></svg></a></div>`\n```\n\n----------------------------------------\n\nTITLE: Defining Artelys Knitro Options in MATLAB\nDESCRIPTION: This snippet relates to the `artelys_knitro_options` function in MATPOWER. It is used to set options for the Artelys Knitro solver. The actual implementation details of the function are not provided in the context, but it is expected to return a structure or cell array containing the configured options.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/artelys_knitro_options.rst#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Documenting mp.mm_element Class in Python\nDESCRIPTION: This code snippet uses Sphinx documentation syntax to generate documentation for the mp.mm_element class. It shows the class inheritance and includes all class members in the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_element.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mm_element\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting mme_reserve_zone Class in MATPOWER mp Module\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the mme_reserve_zone class. It shows the class inheritance and lists all members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_reserve_zone.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mme_reserve_zone\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Initializing MATPOWER Unit Commitment Test Case\nDESCRIPTION: Test function for a specific unit commitment scenario with detailed power system configuration and simulation parameters\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/t_most_30b_1_1_0_uc.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction t_most_30b_1_1_0_uc(quiet)\n```\n\n----------------------------------------\n\nTITLE: Exporting Data Using MATPOWER Converter\nDESCRIPTION: Exports data from a data model back into MATPOWER case format.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/data-model-converter.rst#2025-04-22_snippet_2\n\nLANGUAGE: matlab\nCODE:\n```\nmpc = dmc.export(dm, mpc);\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for MATPOWER dm_converter_mpc2 Class\nDESCRIPTION: This reStructuredText snippet configures the Sphinx documentation for the MATPOWER dm_converter_mpc2 class. It sets the current module to matpower.+mp and uses the autoclass directive to generate class documentation, displaying inheritance and member functions.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dm_converter_mpc2.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: dm_converter_mpc2\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Module Documentation\nDESCRIPTION: Sphinx documentation directive for documenting the mme_branch_opf_acp class in the matpower.mp module, including inheritance and member functions.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_branch_opf_acp.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredText\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\nmp.mme_branch_opf_acp\n---------------------\n\n.. autoclass:: mme_branch_opf_acp\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SM Quad Cost Class Definition in Python\nDESCRIPTION: This snippet outlines the sm_quad_cost class within the mp_opt_model module, which is intended for defining quadratic cost functions. The class is automatically generated for documentation purposes, showcasing its members and inheritance. No additional dependencies are required to use this class.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/classes/mp/sm_quad_cost.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: sm_quad_cost\n    :show-inheritance:\n    :members:\n\n```\n\n----------------------------------------\n\nTITLE: Initializing New Export Data Structure\nDESCRIPTION: Creates a new empty data structure and exports data model contents into it.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/dev-manual/data-model-converter.rst#2025-04-22_snippet_3\n\nLANGUAGE: matlab\nCODE:\n```\nmpc = dmc.export(dm);\n```\n\n----------------------------------------\n\nTITLE: Documenting mm_shared_pfcpf_acps Class in Python\nDESCRIPTION: This snippet demonstrates the use of Sphinx's autoclass directive to generate documentation for the mm_shared_pfcpf_acps class. It includes options to show inheritance and list all members of the class.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mm_shared_pfcpf_acps.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: mm_shared_pfcpf_acps\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting test_most with autofunction\nDESCRIPTION: This snippet shows how to document the `test_most` function using the `autofunction` directive in reStructuredText. This automatically extracts the function's signature and docstring to create documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/test_most.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: test_most\n```\n\n----------------------------------------\n\nTITLE: Testing t_most_3b_1_1_2 Function\nDESCRIPTION: This section documents the `t_most_3b_1_1_2` function, likely part of the testing suite for the MATPOWER Optimal Scheduling Tool (MOST). It is intended to verify the functionality and correctness of a specific component within MOST.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/t_most_3b_1_1_2.rst#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: MATLAB Variable Reference\nDESCRIPTION: References to key MATLAB variables and constants used in MATPOWER, such as OPF_VIOLATION, MNS_FEASTOL, MNS_ROWTOL, PF_DC, QP_SPARSE, and various matrix references like GEN_STATUS.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_37\n\nLANGUAGE: MATLAB\nCODE:\n```\nOPF_VIOLATION\nMNS_FEASTOL\nMNS_ROWTOL\nPF_DC\nQP_SPARSE\nGEN_STATUS\n```\n\n----------------------------------------\n\nTITLE: Fixed Functions Listing in MATLAB\nDESCRIPTION: List of affected functions and methods that were fixed or modified, including opt_model.params_var(), scale_load(), miqps_mosek(), qps_mosek(), and ktropf_solver()\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.1.md#2025-04-22_snippet_3\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt_model.params_var()\nscale_load()\nmiqps_mosek()\nqps_mosek()\nktropf_solver()\nnlp_consfcn()\nnlp_costfcn()\nnlp_hessfcn()\n```\n\n----------------------------------------\n\nTITLE: Branch Flow Constraints Table Output\nDESCRIPTION: Table displaying branch flow constraints with power flows (P in MW) at both ends of branches, including flow limits and their multipliers.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty_print_softlims_dc.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nBrnch   From     \"From\" End        Limit       \"To\" End        To\n  #     Bus    Pf  mu     Pf      |Pmax|      Pt      Pt  mu   Bus\n-----  -----  -------  --------  --------  --------  -------  -----\n   3     50      -      -75.00     75.00     75.00    14.224    60\n   6     60    15.000    84.40     75.00    -84.40      -       70\n   8     80      -      -75.00     75.00     75.00    13.810    20\n```\n\n----------------------------------------\n\nTITLE: Defining the most_ex3_dcopf_w_uc Function in MATLAB\nDESCRIPTION: This snippet defines the 'most_ex3_dcopf_w_uc' function, which is an autofunction used within the MATPOWER framework for solving dynamic optimal power flow problems under unit commitment constraints. Users can leverage this function for advanced power system optimization tasks.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/most_ex3_dcopf_w_uc.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: most_ex3_dcopf_w_uc\n```\n\n----------------------------------------\n\nTITLE: Defining Common Vector Operations in LaTeX for MATPOWER\nDESCRIPTION: This snippet creates commands for common vector operations like ones, zeros, identity matrices, and set notations for real and complex numbers.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_2\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\zeros}[0]{\\rvec{0}}\n\\newcommand{\\ones}[1]{\\rvec{1}_{#1}}\n\\newcommand{\\onest}[1]{\\trans{\\rvec{1}}_{#1}}\n\\newcommand{\\Id}[1]{\\diag{\\ones{#1}}}\n%\\-newcommand{\\R}{\\mathbf{R}}\n\\newcommand{\\R}{\\mathbb{R}}         % requires \\usepackage{amsfonts|bbold}\n%\\-newcommand{\\R}{\\varmathbb{R}}      % requires \\usepackage{txfonts}\n%\\-newcommand{\\R}{\\mathds{R}}         % requires \\usepackage{dsfont}\n%\\-newcommand{\\R}{\\mathbbm{R}}        % requires \\usepackage{bbm}\n\\newcommand{\\C}{\\mathbb{C}}         % requires \\usepackage{amsfonts}\n```\n\n----------------------------------------\n\nTITLE: Load Distribution Data Table\nDESCRIPTION: Active and reactive power consumption data for each load in the system\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_t_auction_case.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n                             Power Consumption\nLoad ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n      1         2      1        5.0       3.0\n      2         3      1       22.3      11.2\n      3         4      1        8.8       1.9\n```\n\n----------------------------------------\n\nTITLE: Defining sm_nln_constraint Class in MATLAB\nDESCRIPTION: This snippet automatically generates documentation for the 'sm_nln_constraint' class, including its members and inheritance details. It is useful for developers working on the mp_opt_model library who need to understand class functionalities without diving into the codebase.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/classes/mp/sm_nln_constraint.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. autoclass:: sm_nln_constraint\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining the have_feature_sdpt3 Function - MATLAB\nDESCRIPTION: This snippet defines the `have_feature_sdpt3` function, which checks for the presence of the SDPT3 solver in the MATLAB environment. The function utilizes MATLAB's built-in capabilities to confirm if the SDPT3 solver can be invoked, providing a Boolean return value to signal its availability. This functionality is critical for users who rely on this solver for numerical optimization tasks.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_sdpt3.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: have_feature_sdpt3\n```\n\n----------------------------------------\n\nTITLE: Initializing Export Data Table for Legacy DC Line in MATLAB\nDESCRIPTION: Creates a default data table for exporting DC lines with the appropriate dimensions, initialized with zeros.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_23\n\nLANGUAGE: matlab\nCODE:\n```\nfunction dt = default_export_data_table(obj, spec)\n    %% define named indices into data matrices\n    c = idx_dcline;\n\n    nr = obj.default_export_data_nrows(spec);\n    dt = zeros(nr, c.QMAXT);\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Function pne_pfcn_arc_len in reStructuredText\nDESCRIPTION: This snippet defines the function pne_pfcn_arc_len using the 'autofunction' directive, which automatically parses the function's documentation and generates corresponding documentation for users. Itâ€™s part of the MATPOWER library meant for power flow optimization. This provides an essential reference for users to understand what the function does and how to use it effectively.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/pne_pfcn_arc_len.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: pne_pfcn_arc_len\n```\n\n----------------------------------------\n\nTITLE: Updated Test Cases in MATLAB\nDESCRIPTION: List of test cases that were updated to match original paper data more closely\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.1.md#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB\nCODE:\n```\ncase18\ncase22\ncase69\ncase85\ncase141\n```\n\n----------------------------------------\n\nTITLE: Defining mips Module Functions in MATLAB\nDESCRIPTION: This snippet allows users to autogenerate and access functions related to the mips module in MATPOWER. It is essential for establishing the module's capabilities. The autofunction directive is crucial for automatic documentation generation in the framework.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/mips.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. autofunction:: mips\n```\n\n----------------------------------------\n\nTITLE: Implementing DC Power Flow Mathematical Model for Legacy DC Lines in MATLAB\nDESCRIPTION: This class implements the DC power flow mathematical model for legacy DC lines, updating the data model with solved values after the model has been solved.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_33\n\nLANGUAGE: MATLAB\nCODE:\n```\nclassdef mme_legacy_dcline_pf_dc < mp.mme_legacy_dcline\n    methods\n        function obj = data_model_update_on(obj, mm, nm, dm, mpopt)\n            %% legacy DC line active power\n            pp = nm.get_idx('port');\n            p_fr = nm.soln.gp(pp.i1.legacy_dcline(1):pp.iN.legacy_dcline(1));\n            p_to = nm.soln.gp(pp.i1.legacy_dcline(2):pp.iN.legacy_dcline(2));\n\n            %% update in the data model\n            dme = obj.data_model_element(dm);\n            dme.tab.p_fr(dme.on) = p_fr * dm.base_mva;\n            dme.tab.q_fr(dme.on) = 0;\n            dme.tab.p_to(dme.on) = -p_to * dm.base_mva;\n            dme.tab.q_to(dme.on) = 0;\n        end\n    end     %% methods\nend         %% classdef\n```\n\n----------------------------------------\n\nTITLE: Defining Mosek Symbolic Constants in MATLAB\nDESCRIPTION: This snippet defines the function 'mosek_symbcon' that is part of the MATPOWER framework. It provides access to symbolic constants used by the MOSEK optimization solver. The snippet is essential for users who need to utilize MOSEK functionalities within MATLAB scripts. It does not have external dependencies aside from MATLAB itself.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/mosek_symbcon.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. autofunction:: mosek_symbcon\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix Transpose Operations in LaTeX for MATPOWER\nDESCRIPTION: This snippet defines transposed matrices and related operations commonly used in power flow equations, including conjugate transposed matrices and their products.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/mp-docs-shared/mathCmds.tex.txt#2025-04-22_snippet_9\n\nLANGUAGE: tex\nCODE:\n```\n\\newcommand{\\AT}{\\trans{\\Aa}}\n\\newcommand{\\CT}{\\trans{\\CC}}\n\\newcommand{\\DT}{\\trans{\\DD}}\n\n\\newcommand{\\Ap}{\\Aa'}\n\\newcommand{\\Cp}{\\CC\\:\\!'}\n\\newcommand{\\Dp}{\\DD'}\n\\newcommand{\\ApT}{\\trans{\\Ap}}\n\\newcommand{\\CpT}{\\trans{\\Cp}}\n\\newcommand{\\DpT}{\\trans{\\Dp}}\n\n\\newcommand{\\ChT}{\\trans{\\CCh}}\n\n\\newcommand{\\Lc}{\\conj{\\LL}}\n\\newcommand{\\LcT}{\\trans{\\Lc}}\n\\newcommand{\\Lhc}{\\conj{\\LLh}}\n\\newcommand{\\LhcT}{\\trans{\\Lhc}}\n\n\\newcommand{\\MT}{\\trans{\\MM}}\n\\newcommand{\\Mc}{\\conj{\\MM}}\n\\newcommand{\\McT}{\\trans{\\Mc}}\n\\newcommand{\\dMTlam}{\\diag{\\MT \\lam}}\n\n\\newcommand{\\MhT}{\\trans{\\MMh}}\n\\newcommand{\\Mhc}{\\conj{\\MMh}}\n\\newcommand{\\MhcT}{\\trans{\\Mhc}}\n\\newcommand{\\dMhTlam}{\\diag{\\MhT \\lamh}}\n\n\\newcommand{\\Nc}{\\conj{\\NN}}\n\\newcommand{\\NcT}{\\trans{\\Nc}}\n\\newcommand{\\Nhc}{\\conj{\\NNh}}\n\\newcommand{\\NhcT}{\\trans{\\Nhc}}\n\n\\newcommand{\\YT}{\\trans{\\YY}}\n\\newcommand{\\Yc}{\\conj{\\YY}}\n\\newcommand{\\YcT}{\\trans{\\Yc}}\n\\newcommand{\\dYTlam}{\\diag{\\YT \\lam}}\n\n\\newcommand{\\YhT}{\\trans{\\YYh}}\n\\newcommand{\\Yhc}{\\conj{\\YYh}}\n\\newcommand{\\YhcT}{\\trans{\\Yhc}}\n\\newcommand{\\dYhTlam}{\\diag{\\YhT \\lamh}}\n```\n\n----------------------------------------\n\nTITLE: Setting MATLAB/Octave Function Names\nDESCRIPTION: Code references showing various MATLAB/Octave function names and method calls related to OPF solver functionality, including dSbus_dV(), opf_branch_ang_hess(), and others.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_10\n\nLANGUAGE: MATLAB\nCODE:\n```\ndSbus_dV()\nopf_branch_ang_hess()\nopf_vlim_hess()\ndImis_dV\nd2Imis_dV2\nd2Imis_dVdSg\nopf_branch_ang_fcn\nopf_current_balance_fcn\nopf_veq_fcn\nopf_vlim_fcn\nopf_vref_fcn\n```\n\n----------------------------------------\n\nTITLE: Using MATPOWER's New Quadratic Costs\nDESCRIPTION: The code has been updated to use MATPOWER's new quadratic costs in `opt_model` in place of the legacy cost model. This ensures proper cost modeling and better integration with MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/relnotes/MOST-Release-Notes-1.0.1.md#2025-04-22_snippet_4\n\nLANGUAGE: MATLAB\nCODE:\n```\n\"Updated to use MATPOWER's new quadratic costs in `opt_model` in\n    place of the legacy cost model.\"\n```\n\n----------------------------------------\n\nTITLE: Checking MATLAB/Octave Version with have_feature\nDESCRIPTION: This code snippet demonstrates how to use the have_feature function to check whether the code is running in MATLAB or Octave and display the corresponding version information.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/README.md#2025-04-22_snippet_6\n\nLANGUAGE: MATLAB\nCODE:\n```\nif have_feature('matlab')\n    disp(['Running MATLAB version ', have_feature('matlab', 'vstr')])\nelse\n    disp(['Running Octave version ', have_feature('octave', 'vstr')])\nend\n```\n\n----------------------------------------\n\nTITLE: Defining t_mips_pardiso Function\nDESCRIPTION: This snippet defines the t_mips_pardiso function, which is automatically documented to integrate with the MATPOWER library's capabilities for solving power system problems efficiently using the Pardiso solver. The function aims to streamline the setup and execution of Pardiso routines for enhanced performance.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/t_mips_pardiso.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: t_mips_pardiso\n```\n\n----------------------------------------\n\nTITLE: Implementing Name and Label Methods for DC Line Element\nDESCRIPTION: Defines methods to return internal name and user-facing labels for DC line elements.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_2\n\nLANGUAGE: matlab\nCODE:\n```\nfunction name = name(obj)\n    name = 'legacy_dcline';\nend\n\nfunction label = label(obj)\n    label = 'DC Line';\nend\n\nfunction label = labels(obj)\n    label = 'DC Lines';\nend\n```\n\n----------------------------------------\n\nTITLE: Documenting MATLAB Function: t_mplinsolve\nDESCRIPTION: This snippet uses the `autofunction` directive to automatically generate documentation for the MATLAB function `t_mplinsolve`. This allows the documentation to be created directly from the function's docstring, ensuring that it stays up-to-date with the code.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/t_mplinsolve.rst#2025-04-22_snippet_0\n\nLANGUAGE: m\nCODE:\n```\n.. autofunction:: t_mplinsolve\n```\n\n----------------------------------------\n\nTITLE: Building New MATPOWER Version\nDESCRIPTION: Commands to build and tag a new version of the MATPOWER Docker image with specific version tags.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Docker-Build-Notes.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg BRANCH=<X.Y> -f docker/Dockerfile -t matpower/matpower:<X.Y> .\ndocker tag matpower/matpower:<X.Y> matpower/matpower:latest\ndocker tag matpower/matpower:<X.Y> matpower/matpower:<X.Y>c\n```\n\n----------------------------------------\n\nTITLE: MATLAB test function test_mp_opt_model\nDESCRIPTION: This snippet references a MATLAB test function named `test_mp_opt_model`. The output of this function needs to be updated in the documentation to reflect the current version of the software.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/other/MP-Opt-Model-Release-Checklist.md#2025-04-22_snippet_2\n\nLANGUAGE: matlab\nCODE:\n```\n\"test_mp_opt_model\"\n```\n\n----------------------------------------\n\nTITLE: Documenting ex_contab function\nDESCRIPTION: This snippet documents the `ex_contab` function using Sphinx's `autofunction` directive. The directive automatically generates documentation for the function based on its docstring. This allows users to understand the function's purpose, arguments, and return values directly from the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/ex_contab.rst#2025-04-22_snippet_0\n\nLANGUAGE: m\nCODE:\n```\n.. autofunction:: ex_contab\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Check for CLP\nDESCRIPTION: This function checks whether the CLP solver feature is available in the MATPOWER library or not. It is intended for use in optimization tasks that may require the CLP solver. It does not require any additional dependencies beyond the core MATPOWER library.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_clp.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: have_feature_clp\n```\n\n----------------------------------------\n\nTITLE: Defining Element Name Method in MATLAB\nDESCRIPTION: Defines the 'name' method that returns the element type identifier 'legacy_dcline'. This method is implemented in each class related to the new element type.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/element.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nfunction name = name(obj)\n    name = 'legacy_dcline';\nend\n```\n\n----------------------------------------\n\nTITLE: Building MATPOWER from Master Branch\nDESCRIPTION: Command to build a development version of MATPOWER from the latest master branch.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Docker-Build-Notes.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg MP_SRC=github -f docker/Dockerfile -t matpower/matpower:dev-<YYYY-MM-DD> .\n```\n\n----------------------------------------\n\nTITLE: Defining filter_ramp_transitions Function in Python\nDESCRIPTION: This snippet auto-generates documentation for the filter_ramp_transitions function within the MATPOWER framework, specifically in the most module. It serves to outline the functionality, inputs, and expected operations of the function without exposing its implementation details.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/filter_ramp_transitions.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: filter_ramp_transitions\n```\n\n----------------------------------------\n\nTITLE: Defining MATPOWER Math Model OPF ACPS Class in MATLAB\nDESCRIPTION: This code snippet defines the math_model_opf_acps class in the MATPOWER library. It is part of the mp module and likely implements a mathematical model for AC power system optimal power flow calculations.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/math_model_opf_acps.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autoclass:: math_model_opf_acps\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: MATLAB Function References\nDESCRIPTION: References to various MATLAB functions that were modified or added in MATPOWER, such as mp_lp.m, mp_qp.m, printpf.m, and others. The snippets show function names mentioned in changelog entries.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_36\n\nLANGUAGE: MATLAB\nCODE:\n```\nmp_lp.m\nmp_qp.m\nprintpf.m\nuopf.m\nisload()\nmakeYbus.m\ncdf2matp.m\nsavecase.m\nmpver.m\n```\n\n----------------------------------------\n\nTITLE: Computing Load Curtailment\nDESCRIPTION: Function for calculating MW curtailments of dispatchable loads in the system.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/relnotes/MATPOWER-Release-Notes-7.0.md#2025-04-22_snippet_2\n\nLANGUAGE: MATLAB/Octave\nCODE:\n```\nloadshed()\n```\n\n----------------------------------------\n\nTITLE: Running Octave Graphical User Interface in Docker\nDESCRIPTION: Command to start Octave with a graphical user interface in a Docker container. Requires an X11 server running on the host and proper DISPLAY environment variable setup.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Octave-Docker.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --network=host --env=\"DISPLAY\" \\\n  --volume=\"$HOME/.Xauthority:/root/.Xauthority:rw\" \\\n  matpower/octave:latest octave --force-gui\n```\n\n----------------------------------------\n\nTITLE: Defining the Ex_storage Function in Python\nDESCRIPTION: The 'ex_storage' function serves as an example of storage-related functionality within the MATPOWER framework. It is utilized for demonstrating how energy storage components can be modeled in MATPOWER. Dependencies include the MATPOWER library itself.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/ex_storage.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: ex_storage\n```\n\n----------------------------------------\n\nTITLE: MATPOWER Table Subclass Definition\nDESCRIPTION: Defines the `mp_table_subclass` class in MATPOWER. The documentation uses `autoclass` to automatically generate documentation from the MATLAB code, including inheritance information and member listing.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp_table_subclass.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nmp_table_subclass\n-----------------\n\n.. autoclass:: mp_table_subclass\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Testing Changes\nDESCRIPTION: Before submitting any contributions, it's crucial to add tests associated with the changes to ensure reliability and functionality. This snippet illustrates how tests can be run for the MOST project.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntest_most\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Sphinx\nDESCRIPTION: Compiles the reStructuredText documentation source into HTML format using the `make` command in the Sphinx directory. Outputs are stored in a designated build directory.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/Building-Docs.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: MATPOWER Feature Check: evalc\nDESCRIPTION: This function, `have_feature_evalc`, is designed to determine whether the 'evalc' feature is available within the MATPOWER environment. The precise implementation details are not provided in the given text snippet.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_evalc.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: have_feature_evalc\n```\n\n----------------------------------------\n\nTITLE: MATLAB function nlps_master_ex2\nDESCRIPTION: This snippet references a MATLAB function named `nlps_master_ex2`. The output of this function needs to be updated in the documentation to reflect the current version of the software, especially regarding MIPS version and date.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/other/MP-Opt-Model-Release-Checklist.md#2025-04-22_snippet_3\n\nLANGUAGE: matlab\nCODE:\n```\n\"nlps_master_ex2\"\n```\n\n----------------------------------------\n\nTITLE: Defining QP_EX1 Function\nDESCRIPTION: This snippet represents the definition of the `qp_ex1` function. Without the actual code, the purpose is inferred from the surrounding documentation context, suggesting it solves a quadratic programming problem.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/qp_ex1.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n\".. autofunction:: qp_ex1\"\n```\n\n----------------------------------------\n\nTITLE: Defining test_mips function in MATLAB\nDESCRIPTION: This snippet defines the test_mips function, which is intended for testing MIPS functionalities within the MATPOWER framework. The function is automatically documented using the Sphinx documentation generator.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/test_mips.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n.. autofunction:: test_mips\n```\n\n----------------------------------------\n\nTITLE: Documenting ex_wind function with autofunction\nDESCRIPTION: This snippet uses the `autofunction` directive to automatically generate documentation for the `ex_wind` function based on its docstring. The `autofunction` directive simplifies the process of creating documentation by automatically extracting the function signature, parameters, and description from the code.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/source/functions/ex_wind.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: ex_wind\n```\n\n----------------------------------------\n\nTITLE: Git Subrepo Pull Commands for MATPOWER Dependencies\nDESCRIPTION: Commands to pull the latest versions of required subrepos before a MATPOWER release.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/other/MATPOWER-Release-Checklist.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit subrepo pull --branch=master docs/sphinx/source/mp-docs-shared\ngit subrepo pull --branch=master mptest\ngit subrepo pull --branch=master mips\ngit subrepo pull --branch=master mp-opt-model\ngit subrepo pull --branch=master most\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Environment (Unix/macOS)\nDESCRIPTION: This snippet shows how to verify the currently active Python environment in Unix/macOS. It displays the path to the Python executable being used.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/Building-Docs.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwhich python\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for t_om_solve_leqs Function\nDESCRIPTION: A Sphinx documentation directive that automatically generates documentation for the t_om_solve_leqs function from the mp_opt_model module. The directive uses the autofunction feature to extract docstrings and function signatures.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/t_om_solve_leqs.rst#2025-04-22_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. autofunction:: t_om_solve_leqs\n```\n\n----------------------------------------\n\nTITLE: MIPS LU Solver Configuration\nDESCRIPTION: Example demonstrating LU solver configuration options including output arguments, permutation handling, and pivot thresholds.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: MATLAB\nCODE:\n```\nopt.lu.nout = 3;     % Number of LU output arguments\nopt.lu.vec = 1;      % Use permutation vectors\nopt.lu.thresh = 0.1;  % Pivot threshold\nmplinsolve(A, b, 'LU', opt);\n```\n\n----------------------------------------\n\nTITLE: Defining have_feature_fmincon Function in Python\nDESCRIPTION: This snippet defines the function have_feature_fmincon, which is essential for checking the existence of the fmincon feature in the optimization model of Matpower. It serves to ensure compatibility with optimization routines using this specific feature.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/have_feature_fmincon.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: have_feature_fmincon\n```\n\n----------------------------------------\n\nTITLE: MySQL Query for File Size Metadata\nDESCRIPTION: SQL query to select file size metadata from WordPress database for MATPOWER downloads.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/other/MATPOWER-Release-Checklist.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM `wp_postmeta` WHERE `meta_key` LIKE \"_filesize\" ORDER BY `post_id`;\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Python Virtual Environment\nDESCRIPTION: This snippet shows how to deactivate the currently active Python virtual environment. This returns the shell to the system's default Python environment.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/Building-Docs.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Installing/Uninstalling MATPOWER in MATLAB/Octave\nDESCRIPTION: Demonstrates the usage of the install_matpower() function to install or uninstall MATPOWER.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_7\n\nLANGUAGE: MATLAB\nCODE:\n```\ninstall_matpower('uninstall')\n```\n\n----------------------------------------\n\nTITLE: MATLAB function pne_ex1\nDESCRIPTION: This snippet references a MATLAB function named `pne_ex1`. The output of this function needs to be updated in the documentation to reflect the current version of the software, especially regarding MP-Opt-Model version and date.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/other/MP-Opt-Model-Release-Checklist.md#2025-04-22_snippet_4\n\nLANGUAGE: matlab\nCODE:\n```\n\"pne_ex1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Details\nDESCRIPTION: Commands to set up Git with user name and email address for commits\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Random Citizen\"\ngit config --global user.email \"random.citizen@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation\nDESCRIPTION: This command triggers the Sphinx build process, generating HTML documentation from the source files located in the docs/sphinx directory.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/Building-Docs.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment in Windows\nDESCRIPTION: Commands to create and activate a Python virtual environment on Windows systems for documentation building.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/builddocs.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npython3 -m venv sphinx-env\n.\\sphinx-env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message Format\nDESCRIPTION: Template showing the proper format for Git commit messages including issue references\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nFix issue #4, Q limit violations in CPF.\n\nMore detailed explanatory text, if necessary.  Wrap it to about 72\ncharacters or so.  In some contexts, the first line is treated as the\nsubject of an email and the rest of the text as the body.  The blank\nline separating the summary from the body is critical (unless you omit\nthe body entirely); tools like rebase can get confused if you run the\ntwo together.\n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too.\n\n- Typically a hyphen or asterisk is used for the bullet, followed by a\n  single space, with blank lines in between, but conventions vary here.\n\n- Use a hanging indent\n\nFixes: https://github.com/MATPOWER/mips/issues/4\nRefs: https://www.mail-archive.com/matpower-l@cornell.edu/msg05557.html\nRefs: https://github.com/MATPOWER/mips/pull/5\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment in Unix/macOS\nDESCRIPTION: Commands to create and activate a Python virtual environment on Unix/macOS systems. This isolates the Python environment for building documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/builddocs.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython3 -m venv sphinx-env\nsource sphinx-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Environment in Unix/macOS\nDESCRIPTION: Command to check which Python installation is being used in the virtual environment on Unix/macOS.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/builddocs.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwhich python\n```\n\n----------------------------------------\n\nTITLE: Displaying Optimization Variables in MATPOWER\nDESCRIPTION: This snippet shows the variables of the optimization problem, including their indices, descriptions, lower and upper bounds, values, and Lagrange multipliers.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/lib/t/display_soln/t_om_solve_qps_display_soln.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n=====  VARIABLES  =====\n  idx    description                   mu_lb     lb       val      ub      mu_ub\n------- ---------------------------- -------- -------- -------- -------- --------\n   1    x(1)                             2.24        0 2.56e-10       -        - \n   2    x(2)                               -         0 0.933333       -        - \n   3    x(3)                               -         0 0.066667       -        - \n   4    x(4)                          1.76667        0 3.24e-10       -        - \n------- ---------------------------- -------- -------- -------- -------- --------\n        Min                                 0        0 2.56e-10      Inf        0\n        Max                              2.24        0 0.933333      Inf        0\n```\n\n----------------------------------------\n\nTITLE: GitHub Link HTML Markup\nDESCRIPTION: HTML markup for displaying a GitHub repository link with the GitHub logo SVG icon.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/tests/mp_foo_table.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"float: right\"><a href=\"https://github.com/MATPOWER/matpower/blob/master/lib/t/mp_foo_table.m\" target=_blank><svg height=\"32\" aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" data-view-component=\"true\" class=\"octicon octicon-mark-github v-align-middle color-fg-default\"><path d=\"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z\"></path></svg></a></div>\n```\n\n----------------------------------------\n\nTITLE: Confirming Active Python Environment on Windows\nDESCRIPTION: This snippet checks if the Python virtual environment is active by locating the Python executable on Windows.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/Building-Docs.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwhere python\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Environment in Windows\nDESCRIPTION: Command to check which Python installation is being used in the virtual environment on Windows.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/builddocs.rst#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwhere python\n```\n\n----------------------------------------\n\nTITLE: Generator Operating Data Table\nDESCRIPTION: Active and reactive power generation data for each generator in the system\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_pf_t_auction_case.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                             Power Generation\n Gen ID    Bus ID   Status   P (MW)   Q (MVAr)\n--------  --------  ------  --------  --------\n      1         1      1       62.9      -9.3\n      2         2      1       61.0      -1.9\n      3       220      1       21.6       6.4\n```\n\n----------------------------------------\n\nTITLE: Deactivating Python Virtual Environment\nDESCRIPTION: Exits the current Python virtual environment to return to the default system Python setup.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/Building-Docs.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Building Specific MATPOWER Version\nDESCRIPTION: Command to build a specific version of MATPOWER using GitHub tags.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Docker-Build-Notes.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg MP_SRC=github --build-arg BRANCH=<X.Y> -f docker/Dockerfile -t matpower/matpower:<X.Y>c .\n```\n\n----------------------------------------\n\nTITLE: Deactivating Python Virtual Environment\nDESCRIPTION: Command to exit the virtual environment after finishing the documentation build process.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/howto/builddocs.rst#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Power System Summary Data Display\nDESCRIPTION: Text-based display of power system summary statistics including number of buses, generators, loads, and branches along with total generation, load, and loss values.\nSOURCE: https://github.com/matpower/matpower/blob/master/lib/t/pretty-printing/pp_mpxt_reserve_3.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  elements                on     off    total\n --------------------- ------- ------- -------\n  Buses                    30       -      30\n    Areas                                   3\n    Zones                                   1\n  Generators                6       1       7\n  Loads                    20       -      20\n  Branches                 41       -      41\n    Lines                  41       -      41\n    Transformers            0       -       0\n  Fixed Shunts              2       -       2\n  Reserve Gens              5       1       6\n  Reserve Zones             2       -       2\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment in Unix/macOS\nDESCRIPTION: Sets up a Python virtual environment to isolate Sphinx installation and dependencies on Unix/macOS. This approach avoids conflicts with other Python projects.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/docs/sphinx/Building-Docs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv sphinx-env\nsource sphinx-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment (Windows)\nDESCRIPTION: Commands to create and activate a Python virtual environment named 'sphinx-env' on Windows systems. This isolates the documentation dependencies from the system Python installation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/Building-Docs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv sphinx-env\n.\\sphinx-env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Updating Octave Docker Tags\nDESCRIPTION: Commands to update the 'latest' tag for the Octave Docker image and push to Docker Hub.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Docker-Build-Notes.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag matpower/octave:<x.y.z> matpower/octave:latest\ndocker push matpower/octave:<x.y.z>\ndocker push matpower/octave:latest\n```\n\n----------------------------------------\n\nTITLE: Fixing return statement in UCOPF MATLAB function\nDESCRIPTION: Changed a 'return' statement to 'break' in ucopf.m to ensure correct return values are provided.\nSOURCE: https://github.com/matpower/matpower/blob/master/CHANGES.md#2025-04-22_snippet_41\n\nLANGUAGE: MATLAB\nCODE:\n```\n% changed line 59 of ucopf.m from 'return' to 'break' to ensure\n% return values are correct\n```\n\n----------------------------------------\n\nTITLE: Using t_str_match for String Testing in MATLAB\nDESCRIPTION: The t_str_match() function tests if a string or character array matches an expected value, with options to apply regular expression or string replacements before comparing.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nt_str_match()\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment (Unix/macOS)\nDESCRIPTION: This snippet shows how to create a Python virtual environment named `sphinx-env` and activate it on Unix or macOS systems. Using a virtual environment helps isolate the project's dependencies.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/Building-Docs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv sphinx-env\nsource sphinx-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment (Windows)\nDESCRIPTION: This snippet shows how to create a Python virtual environment named `sphinx-env` and activate it on Windows systems. The activation command is different for Windows compared to Unix/macOS.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/Building-Docs.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv sphinx-env\n.\\sphinx-env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Pulling MATPOWER Octave Docker Image\nDESCRIPTION: Command to download the latest version of the matpower/octave Docker image from Docker Hub.\nSOURCE: https://github.com/matpower/matpower/blob/master/docker/Octave-Docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull docker.io/matpower/octave:latest\n```\n\n----------------------------------------\n\nTITLE: MATPOWER mips_example2 Function\nDESCRIPTION: This section refers to the `mips_example2` function within the MATPOWER library. It is being documented using the `autofunction` directive. The function itself is not shown, but the documentation implies that the function exists and is part of the `mips` module.\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/sphinx/source/functions/mips_example2.rst#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Implementing Pseudo Arc Length Parameterization in MATLAB\nDESCRIPTION: The `pne_pfcn_pseudo_arc_length()` function implements the pseudo arc length parameterization in MATLAB, providing a robust method for parameterization within PNE solving contexts.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/relnotes/MP-Opt-Model-Release-Notes-4.0.md#2025-04-22_snippet_10\n\nLANGUAGE: MATLAB\nCODE:\n```\npne_pfcn_pseudo_arc_length()\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment (Unix/macOS)\nDESCRIPTION: Commands to create and activate a Python virtual environment named 'sphinx-env' on Unix/macOS systems. This isolates the documentation dependencies from the system Python installation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/Building-Docs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv sphinx-env\nsource sphinx-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: Sphinx documentation structure defining the current module and class documentation settings for the dme_line3p_opf class in MATPOWER's mp module.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dme_line3p_opf.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: matpower.+mp\n\n.. autoclass:: dme_line3p_opf\n    :show-inheritance:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Updating the Local Repository\nDESCRIPTION: This snippet fetches the latest changes from the upstream repository and merges them into the local master branch. It's essential for keeping your local version up-to-date with the upstream project's development.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: MATPOWER Function Definition: pne_pfcn_natural\nDESCRIPTION: This snippet represents the definition of the `pne_pfcn_natural` function within the MATPOWER library.  It is likely used for power network estimation (PNE) and involves a power flow calculation using a natural parameterization approach.  The function details are autogenerated within the documentation.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/pne_pfcn_natural.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\n\".. autofunction:: pne_pfcn_natural\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes\nDESCRIPTION: This command pushes the local topic branch to the remote fork. It's necessary to execute this step after changes have been committed and are ready to be reviewed through a pull request.\nSOURCE: https://github.com/matpower/matpower/blob/master/most/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Link with SVG Icon in HTML\nDESCRIPTION: HTML code embedding an SVG GitHub icon with a link to the source code repository of the dmce_gen3p_mpc2.m file in MATPOWER library.\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/dmce_gen3p_mpc2.rst#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"float: right\"><a href=\"https://github.com/MATPOWER/matpower/blob/master/lib/+mp/dmce_gen3p_mpc2.m\" target=_blank><svg height=\"32\" aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" data-view-component=\"true\" class=\"octicon octicon-mark-github v-align-middle color-fg-default\"><path d=\"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z\"></path></svg></a></div>\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Link HTML\nDESCRIPTION: HTML markup for displaying a GitHub repository link with the GitHub logo to the source code of the mme_shunt.m file\nSOURCE: https://github.com/matpower/matpower/blob/master/docs/sphinx/source/ref-manual/classes/mp/mme_shunt.rst#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"float: right\"><a href=\"https://github.com/MATPOWER/matpower/blob/master/lib/+mp/mme_shunt.m\" target=_blank><svg height=\"32\" aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" data-view-component=\"true\" class=\"octicon octicon-mark-github v-align-middle color-fg-default\"><path d=\"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z\"></path></svg></a></div>\n```\n\n----------------------------------------\n\nTITLE: Pushing to Remote\nDESCRIPTION: Command to push local topic branch to fork on GitHub\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Documenting pnes_master Function in MATLAB\nDESCRIPTION: This code snippet generates documentation for the pnes_master function, which is part of MATPOWER's optimization modeling. The autofunction directive indicates that the documentation should automatically reflect the function's signature, parameters, and description. The intended use is for developers and users to easily access the function's documentation within the MATPOWER framework.\nSOURCE: https://github.com/matpower/matpower/blob/master/mp-opt-model/docs/sphinx/source/functions/pnes_master.rst#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\n.. autofunction:: pnes_master\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Test Function in MATLAB/Octave\nDESCRIPTION: This snippet demonstrates how to create a simple test function named 'mptest_ex1' which tests specific conditions using the t_ok, t_is, and conditional checks with the have_feature function. The function supports an optional 'quiet' mode argument.\nSOURCE: https://github.com/matpower/matpower/blob/master/mptest/docs/sphinx/source/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: MATLAB\nCODE:\n```\nfunction mptest_ex1(quiet)\n    if nargin < 1\n        quiet = 0;\n    end\n    t_begin(4, quiet);\n    t_ok(pi > 3, 'size of pi');\n    if have_feature('octave')\n        t_ok(1, 'Octave-only test foo');\n        t_ok(1, 'Octave-only test bar');\n    else\n        t_skip(2, 'foo and bar tests require Octave');\n    end\n    t_is(2+2, 4, 12, '2+2 still equals 4');\n    t_end;\n```\n\n----------------------------------------\n\nTITLE: Path Management Command in MATLAB\nDESCRIPTION: MATLAB command to remove Pardiso library from path before running tests\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/other/MIPS-Release-Checklist.md#2025-04-22_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nrmpath('/usr/local/pardiso/current')\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: Commands to stage and commit changes to the repository\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add my/changed/files\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Unix Symbolic Link Commands\nDESCRIPTION: Shell commands for managing symbolic links to documentation files\nSOURCE: https://github.com/matpower/matpower/blob/master/mips/docs/other/MIPS-Release-Checklist.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd dev/projects/matpower.org-static/docs\nrm MIPS-manual.pdf\nln -s ./MIPS-manual-x.x.pdf MIPS-manual.pdf\n```"
  }
]