[
  {
    "owner": "elastic",
    "repo": "apm-agent-dotnet",
    "content": "TITLE: Adding EF Core Instrumentation in Non-ASP.NET Core Applications\nDESCRIPTION: Enables Entity Framework Core instrumentation in non-ASP.NET Core applications by passing EfCoreDiagnosticsSubscriber to the Agent.Subscribe method. This allows the agent to listen for diagnostic events from Microsoft.EntityFrameworkCore 2.x+ and create database spans.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-ef-core.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new EfCoreDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Manual Instrumentation Using ITracer in a Worker Service\nDESCRIPTION: This C# code shows how to manually instrument a worker service using the ITracer interface from Elastic APM. It demonstrates capturing a transaction and automatically capturing HTTP requests within the transaction.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-dotnet-net-core.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Elastic.Apm.Api;\n\nnamespace WorkerServiceSample\n{\n  public class Worker : BackgroundService\n  {\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly ITracer _tracer;\n\n    public Worker(IHttpClientFactory httpClientFactory, ITracer tracer)\n    {\n      _httpClientFactory = httpClientFactory;\n      _tracer = tracer;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n      while (!stoppingToken.IsCancellationRequested)\n      {\n        await _tracer.CaptureTransaction(\"UnitOfWork\", ApiConstants.TypeApp, async () =>\n        {\n          var client = _httpClientFactory.CreateClient();\n          await client.GetAsync(\"https://www.elastic.co\", stoppingToken);\n          await Task.Delay(5000, stoppingToken);\n        });\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic APM in a .NET 8 Worker Service\nDESCRIPTION: This C# code demonstrates how to set up Elastic APM in a .NET 8 worker service using top-level statements. It shows the registration of Elastic APM services before other hosted services to ensure proper initialization.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-dotnet-net-core.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing WorkerServiceSample;\n\nvar builder = Host.CreateApplicationBuilder(args);\n\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddAllElasticApm();\nbuilder.Services.AddHostedService<Worker>();\n\nvar host = builder.Build();\nhost.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Instrumentation Modules in .NET\nDESCRIPTION: This C# code shows how to configure Elastic APM with specific instrumentation modules. It demonstrates adding only HTTP monitoring by using the HttpDiagnosticsSubscriber with the AddElasticApm method.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-dotnet-net-core.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Elastic.Apm.DiagnosticSource;\nusing WorkerServiceSample;\n\nvar builder = Host.CreateApplicationBuilder(args);\n\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddElasticApm(new HttpDiagnosticsSubscriber());\nbuilder.Services.AddHostedService<Worker>();\n\nvar host = builder.Build();\nhost.Run();\n```\n\n----------------------------------------\n\nTITLE: Capturing a Transaction with Elastic APM .NET\nDESCRIPTION: Uses the CaptureTransaction method to start and end a transaction, automatically capturing unhandled exceptions.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nElastic.Apm.Agent.Tracer\n        .CaptureTransaction(\"TestTransaction\", ApiConstants.TypeRequest, (t) =>\n{\n   //application code that is captured as a transaction\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Child Spans in C#\nDESCRIPTION: Demonstrates how to create and manage child spans, including proper exception handling and span termination.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nISpan childSpan = parentSpan.StartSpan(\"Select FROM customer\",\n     ApiConstants.TypeDb, ApiConstants.SubtypeMssql, ApiConstants.ActionQuery);\ntry\n{\n    //execute db query\n}\ncatch(Exception e)\n{\n    childSpan?.CaptureException(e);\n    throw;\n}\nfinally\n{\n    childSpan?.End();\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Ending a Custom Transaction in .NET\nDESCRIPTION: Creates a custom transaction using the Elastic APM .NET agent, including error handling and proper transaction ending.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar transaction = Elastic.Apm.Agent\n        .Tracer.StartTransaction(\"MyTransaction\", ApiConstants.TypeRequest);\ntry\n{\n    //application code that is captured as a transaction\n}\ncatch (Exception e)\n{\n    transaction.CaptureException(e);\n    throw;\n}\nfinally\n{\n    transaction.End();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Tracing Components in ASP.NET Core with Elastic APM\nDESCRIPTION: This snippet shows how to enable specific tracing components in ASP.NET Core using the AddElasticApm method. It demonstrates enabling tracing for outgoing HTTP requests and database calls through Entity Framework Core.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-asp-net-core.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddElasticApm(\n\tnew HttpDiagnosticsSubscriber(),  /* Enable tracing of outgoing HTTP requests */\n\tnew EfCoreDiagnosticsSubscriber()); /* Enable tracing of database calls through EF Core*/\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Span in C#\nDESCRIPTION: Shows how to start a new custom span as a child of a transaction, handle exceptions, and ensure proper span ending using a try-catch-finally block.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nISpan span = transaction.StartSpan(\"Select FROM customer\",\n     ApiConstants.TypeDb, ApiConstants.SubtypeMssql, ApiConstants.ActionQuery);\ntry\n{\n    //execute db query\n}\ncatch(Exception e)\n{\n    span.CaptureException(e);\n    throw;\n}\nfinally\n{\n    span.End();\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing OpenTelemetry and Elastic APM Public API in C#\nDESCRIPTION: Code example demonstrating how to use both the OpenTelemetry Activity API and Elastic APM Public API together. It creates a transaction with Elastic APM, then an OpenTelemetry span as a child, followed by another Elastic APM span as a child of the OpenTelemetry span.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/opentelemetry-bridge.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n/// ElasticTransaction\n/// -\n/// ---> OTelSpan\n///           -\n///           ---> ElasticSpan\n\nvar src = new ActivitySource(\"Test\");\ntracer.CaptureTransaction( nameof(Sample4), \"test\", t =>\n{\n\tThread.Sleep(100);\n\tusing (var activity = src.StartActivity(\"foo\"))\n\t{\n\t\ttracer.CurrentSpan.CaptureSpan(\"ElasticApmSpan\", \"test\", () => Thread.Sleep(50));\n\t\tThread.Sleep(150);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic APM in ASP.NET Core Program.cs\nDESCRIPTION: This code snippet demonstrates how to set up Elastic APM in an ASP.NET Core application's Program.cs file. It uses the AddAllElasticApm() method to enable full APM monitoring capabilities.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/configuration-on-asp-net-core.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddAllElasticApm();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Capturing a Synchronous Span in C#\nDESCRIPTION: Shows how to use the CaptureSpan method to create and capture a span for a synchronous operation. This method automatically starts and ends the span and handles exception reporting.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nspan.CaptureSpan(\"SampleSpan\", ApiConstants.TypeDb, (s) =>\n{\n    //execute db query\n}, ApiConstants.SubtypeMssql, ApiConstants.ActionQuery);\n```\n\n----------------------------------------\n\nTITLE: Initializing JavaScript RUM Agent with .NET Transaction in ASP.NET Core\nDESCRIPTION: Shows how to initialize the JavaScript Real User Monitoring (RUM) agent with the current .NET transaction, enabling correlation between frontend and backend performance data.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\telasticApm.init({\n\t\tserviceName: 'MyService',\n\t\tserverUrl: 'http://localhost:8200',\n\t\tpageLoadTraceId: '@Elastic.Apm.Agent.Tracer.CurrentTransaction?.TraceId',\n\t\tpageLoadSpanId: '@Elastic.Apm.Agent.Tracer.CurrentTransaction?.EnsureParentId()',\n\t\tpageLoadSampled: @Json.Serialize(Elastic.Apm.Agent.Tracer?.CurrentTransaction.IsSampled)\n\t\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Capturing an Asynchronous Span in C#\nDESCRIPTION: Demonstrates how to capture an asynchronous operation as a span using the CaptureSpan method. This example shows capturing a span that returns a result (Task<T>).\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nvar asyncResult = await span.CaptureSpan(\"Select FROM customer\", ApiConstants.TypeDb, async(s) =>\n{\n    //application code that is captured as a span\n    await Task.Delay(500); //sample async code\n    return 42;\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Span with CaptureSpan Method in C#\nDESCRIPTION: Demonstrates how to use the CaptureSpan method to automatically start and end a span, capturing unhandled exceptions. It shows usage with both synchronous and asynchronous code blocks.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nITransaction transaction = Elastic.Apm.Agent.Tracer.CurrentTransaction;\n\ntransaction.CaptureSpan(\"SampleSpan\", ApiConstants.TypeDb, (s) =>\n{\n    //execute db query\n}, ApiConstants.SubtypeMssql, ApiConstants.ActionQuery);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nITransaction transaction = Elastic.Apm.Agent.Tracer.CurrentTransaction;\nvar asyncResult = await transaction.CaptureSpan(\"Select FROM customer\", ApiConstants.TypeDb, async(s) =>\n{\n    //application code that is captured as a span\n    await Task.Delay(500); //sample async code\n    return 42;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Serilog with Elastic APM Enricher for Elasticsearch Output in C#\nDESCRIPTION: This snippet shows how to configure Serilog to send logs directly to Elasticsearch using the Elastic APM Enricher. It uses the EcsTextFormatter to format logs according to the Elastic Common Schema, enabling trace-to-log and log-to-trace navigation.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/serilog.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLog.Logger = new LoggerConfiguration()\n.Enrich.WithElasticApmCorrelationInfo()\n.WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri(\"http://localhost:9200\"))\n{\n  CustomFormatter = new EcsTextFormatter()\n})\n.CreateLogger();\n```\n\n----------------------------------------\n\nTITLE: Building All Projects\nDESCRIPTION: This command builds all projects in the solution. The build output is placed in the ./build/output directory.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/build/README.md#2025-04-22_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoClient with MongoDbEventSubscriber in C#\nDESCRIPTION: This snippet demonstrates how to configure the MongoClient with MongoDbEventSubscriber, which is a prerequisite for auto-instrumentation of MongoDB calls. It sets up the MongoClientSettings and creates a new MongoClient instance.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-mongo-db.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = MongoClientSettings.FromConnectionString(mongoConnectionString);\n\nsettings.ClusterConfigurator = builder => builder.Subscribe(new MongoDbEventSubscriber());\nvar mongoClient = new MongoClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Adding Database Context to a Span in C#\nDESCRIPTION: Shows how to add database-specific context to a manually captured span. This is useful for adding details about database operations not automatically captured by the agent.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Tracer.CurrentTransaction.CaptureSpan(\"MyDbWrite\", ApiConstants.TypeDb, (span) =>\n{\n    span.Context.Db = new Database\n        { Statement = myDbStatement, Type = myDbType, Instance = myDbInstance };\n\n    // ... code executing the database operation\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Error with Message in C#\nDESCRIPTION: Demonstrates how to capture an APM error with a message and culprit using the CaptureError method.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Tracer.CaptureError(\"Something went wrong\", \"Database issue\");\n```\n\n----------------------------------------\n\nTITLE: Enabling StackExchange.Redis Instrumentation with Elastic APM in C#\nDESCRIPTION: Demonstrates how to enable Elastic APM instrumentation for StackExchange.Redis by installing the Elastic.Apm.StackExchange.Redis package and invoking the UseElasticApm() extension method on the IConnectionMultiplexer instance. This registers a callback that provides profiling for Redis commands.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-stackexchange-redis.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// using Elastic.Apm.StackExchange.Redis;\n\nvar connection = await ConnectionMultiplexer.ConnectAsync(\"<redis connection>\");\nconnection.UseElasticApm();\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Context to a Span in C#\nDESCRIPTION: Demonstrates how to add HTTP-specific context to a manually captured span. This is useful for adding details about HTTP operations not automatically captured by the agent.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Tracer.CurrentTransaction.CaptureSpan(\"MyHttpOperation\", ApiConstants.TypeExternal, (span) =>\n{\n    span.Context.Http = new Http\n        { Url = myUrl, Method = myMethod };\n\n    // ... code executing the HTTP operation\n\n    span.Context.Http.StatusCode = myStatusCode;\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing an Async Transaction with Elastic APM .NET\nDESCRIPTION: Demonstrates capturing an asynchronous transaction using the CaptureTransaction method with a Task.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait Elastic.Apm.Agent.Tracer\n        .CaptureTransaction(\"TestTransaction\", \"TestType\", async () =>\n{\n    //application code that is captured as a transaction\n    await Task.Delay(500); //sample async code\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic APM Middleware in ASP.NET Core Application\nDESCRIPTION: This code snippet from the Startup.cs file demonstrates how to activate the Elastic APM middleware in an ASP.NET Core application. The middleware captures incoming HTTP requests and enables monitoring for HttpClient and Entity Framework Core operations.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/integrations/applications/SampleAspNetCoreApp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseElasticApm();\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Instrumentation in ASP.NET Core 8 with Elastic APM\nDESCRIPTION: This snippet demonstrates how to enable full auto-instrumentation in an ASP.NET Core 8 application using the AddAllElasticApm() extension method. It includes ASP.NET Core tracing, outgoing HTTP request monitoring, and Entity Framework Core database tracing.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-asp-net-core.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddAllElasticApm();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling SqlClient Auto-instrumentation in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to enable SqlClient auto-instrumentation in an ASP.NET Core application by adding the SqlClientDiagnosticSubscriber to the Elastic APM configuration.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-sqlclient.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Enable tracing of outgoing db requests\napp.Services.AddElasticApm(new SqlClientDiagnosticSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Enabling Elasticsearch Instrumentation in ASP.NET Core\nDESCRIPTION: This snippet shows how to enable Elasticsearch instrumentation for ASP.NET Core applications. It uses the AddElasticApm method and passes an ElasticsearchDiagnosticsSubscriber instance.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-elasticsearch.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\napp.Services.AddElasticApm(new ElasticsearchDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Manually Activating MongoDB Auto-instrumentation in C#\nDESCRIPTION: This code snippet shows how to manually activate auto-instrumentation for MongoDB using the Elastic.Apm.MongoDb package. It subscribes the MongoDbDiagnosticsSubscriber to the Agent.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-mongo-db.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new MongoDbDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Manually Captured Transactions in C#\nDESCRIPTION: Illustrates how to add context related to manually captured transactions, including request and response details.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Tracer.CaptureTransaction(\"MyCustomTransaction\",ApiConstants.TypeRequest, (transaction) =>\n{\n  transaction.Context.Request = new Request(myRequestMethod, myRequestUri);\n\n  // ... code executing the request\n\n  transaction.Context.Response =\n     new Response { StatusCode = myStatusCode, Finished = wasFinished };\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Azure Cosmos DB Diagnostic Events with Elastic APM in C#\nDESCRIPTION: Enables instrumentation for Azure Cosmos DB operations by subscribing to diagnostic events. This code captures database operations from Microsoft.Azure.Cosmos, Microsoft.Azure.DocumentDb, and Microsoft.Azure.DocumentDb.Core as DB spans in the Elastic APM agent.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-cosmosdb.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new AzureCosmosDbDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Labels on Spans in C#\nDESCRIPTION: Shows how to set and retrieve labels on spans, which are searchable and aggregatable in Elasticsearch.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nspan.SetLabel(\"stringSample\", \"bar\");\nspan.SetLabel(\"boolSample\", true);\nspan.SetLabel(\"intSample\", 42);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nif(span.TryGetLabel<bool>(\"foo\", out var myLabel))\n    Console.WriteLine(myLabel);\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic APM in appsettings.json for ASP.NET Core\nDESCRIPTION: This JSON configuration snippet shows how to set up Elastic APM in an ASP.NET Core application's appsettings.json file. It includes settings for logging, server URL, secret token, and transaction sample rate. Note that the APM logger's log level is set under the Logging section.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/configuration-on-asp-net-core.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Warning\",\n      \"Elastic.Apm\": \"Debug\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"ElasticApm\":\n    {\n      \"ServerUrl\":  \"http://myapmserver:8200\",\n      \"SecretToken\":  \"apm-server-secret-token\",\n      \"TransactionSampleRate\": 1.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding EF Core Instrumentation in ASP.NET Core\nDESCRIPTION: Adds Entity Framework Core instrumentation to an ASP.NET Core application by passing EfCoreDiagnosticsSubscriber to the AddElasticApm method. This enables the creation of database spans for executed EF Core commands.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-ef-core.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\napp.Services.AddElasticApm(new EfCoreDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic APM Middleware in Azure Functions .NET App\nDESCRIPTION: Sets up the ApmMiddleware in an Azure Functions application to enable tracing of function invocations. This code should be placed in the entry point of the Azure Functions app.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Elastic.Apm.Azure.Functions;\nusing Microsoft.Extensions.Hosting;\n\nvar host = new HostBuilder()\n  .ConfigureFunctionsWebApplication(builder =>\n  {\n    builder.UseMiddleware<ApmMiddleware>();\n  })\n  .Build();\n\nhost.Run();\n```\n\n----------------------------------------\n\nTITLE: Running the Default Build Task on Windows\nDESCRIPTION: Command to execute the default build task using build.bat on Windows. This performs the standard build of all projects in the solution.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n.\\build.bat\n```\n\n----------------------------------------\n\nTITLE: Setting Service Name and Version for Transactions in C#\nDESCRIPTION: Shows how to overwrite the service name and version on a per-transaction basis, useful for hosting multiple services in a single process.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nvar transaction = agent.Tracer.StartTransaction(\"Transaction1\", \"sample\");\ntransaction.SetService(\"MyServiceName\", \"1.0-beta1\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.AddFilter( transaction =>\n{\n\ttransaction.SetService(\"MyServiceName\", \"1.0-beta1\");\n\treturn transaction;\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Transaction in Elastic APM .NET\nDESCRIPTION: Retrieves the currently active transaction using the Elastic APM .NET agent's Tracer API.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar transaction = Elastic.Apm.Agent.Tracer.CurrentTransaction;\n```\n\n----------------------------------------\n\nTITLE: Hiding Sensitive Data in Transactions in Elastic APM .NET Agent\nDESCRIPTION: Shows how to use the AddFilter method to modify transaction data before it's sent to the APM server. This example demonstrates hiding the protocol in the request URL.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.AddFilter((ITransaction transaction) =>\n{\n\ttransaction.Context.Request.Url.Protocol = \"[HIDDEN]\";\n\treturn transaction;\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Default Build Task on Linux\nDESCRIPTION: Command to execute the default build task using build.sh on Linux. This performs the standard build of all projects in the solution on Linux environments.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Subscribing AzureBlobStorageDiagnosticsSubscriber in C#\nDESCRIPTION: This code snippet shows how to subscribe the AzureBlobStorageDiagnosticsSubscriber to the Elastic APM agent when using Azure.Storage.Blobs. This enables instrumentation for Azure Blob Storage operations.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new AzureBlobStorageDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Capturing Error Log in C#\nDESCRIPTION: Demonstrates how to capture a log event as an APM error using the CaptureErrorLog method with a custom ErrorLog object.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar errorLog = new ErrorLog(\"Error message\")\n{\n\tLevel = \"error\",\n\tParamMessage = \"42\"\n};\n\nAgent.Tracer.CaptureErrorLog(errorLog);\n```\n\n----------------------------------------\n\nTITLE: Programmatically Adding Entity Framework 6 Interceptor for Elastic APM\nDESCRIPTION: This C# code demonstrates how to programmatically add the Elastic APM Entity Framework 6 interceptor. This method can be used as an alternative to configuration-based registration, typically placed in the Application_Start method of an ASP.NET application.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-ef6.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nDbInterception.Add(new Elastic.Apm.EntityFramework6.Ef6Interceptor());\n```\n\n----------------------------------------\n\nTITLE: Subscribing AzureQueueStorageDiagnosticsSubscriber in C#\nDESCRIPTION: This code snippet demonstrates how to subscribe the AzureQueueStorageDiagnosticsSubscriber to the Elastic APM agent when using Azure.Storage.Queues. This enables instrumentation for Azure Queue Storage operations.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new AzureQueueStorageDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Subscribing to gRPC Client Instrumentation with Agent.Subscribe\nDESCRIPTION: Code snippet demonstrating how to enable gRPC client instrumentation by subscribing to the GrpcClientDiagnosticSubscriber using the Agent.Subscribe method. This approach can be used outside of ASP.NET Core applications.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-grpc.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new GrpcClientDiagnosticSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Capturing Exception in C#\nDESCRIPTION: Shows how to capture a .NET exception as an APM error using a try-catch block and the CaptureException method.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n\t//run my code\n}\ncatch (Exception e)\n{\n\tAgent.Tracer.CaptureException(e);\n\t//handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing AzureFileShareStorageDiagnosticsSubscriber in C#\nDESCRIPTION: This code snippet illustrates how to subscribe the AzureFileShareStorageDiagnosticsSubscriber to the Elastic APM agent when using Azure.Storage.Files.Shares. This enables instrumentation for Azure File Share Storage operations.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new AzureFileShareStorageDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Filtering Spans in Elastic APM .NET Agent\nDESCRIPTION: Demonstrates how to use the AddFilter method to filter out spans based on specific criteria. This example shows how to drop spans for a specific database instance.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.AddFilter((ISpan span) =>\n{\n\tif (span.Context?.Db?.Instance == \"VerySecretDb\")\n\t\treturn null;\n\treturn span;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Client Instrumentation with AddElasticApm in ASP.NET Core\nDESCRIPTION: Code snippet showing how to enable gRPC client instrumentation by passing GrpcClientDiagnosticListener to the AddElasticApm method in ASP.NET Core applications. This approach should be used within the ASP.NET Core service configuration.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-grpc.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\napp.Services.AddElasticApm(new GrpcClientDiagnosticListener());\n```\n\n----------------------------------------\n\nTITLE: Subscribing Azure Messaging Service Bus Diagnostics\nDESCRIPTION: Code to subscribe the AzureMessagingServiceBusDiagnosticsSubscriber to the Elastic APM Agent when using Azure.Messaging.ServiceBus package\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-servicebus.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new AzureMessagingServiceBusDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Sample Rate in ASP.NET Core Configuration\nDESCRIPTION: This snippet demonstrates how to configure the Elastic APM agent to sample only 20% of transactions using JSON configuration in ASP.NET Core. Reducing the sample rate improves performance across all metrics including speed, memory, bandwidth, and storage.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/performance-tuning.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"ElasticApm\": {\n        \"TransactionSampleRate\": 0.2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Continuing a Trace with Deserialized Context in Elastic APM .NET\nDESCRIPTION: Starts a new transaction using deserialized distributed tracing context to continue a trace.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar transaction2 = Agent.Tracer.StartTransaction(\"Transaction2\", \"TestTransaction\",\n     DistributedTracingData.TryDeserializeFromString(serializedDistributedTracingData));\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Diagnostics Subscriber in .NET\nDESCRIPTION: Subscribes the HttpDiagnosticsSubscriber to capture HTTP calls through HttpClient and HttpWebRequest.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new HttpDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Configuring Serilog with Elastic APM Enricher for Console Output in C#\nDESCRIPTION: This snippet demonstrates how to set up a Serilog logger with the Elastic APM Enricher. It adds trace and transaction IDs to log lines and configures console output with a custom template.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/serilog.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar logger = new LoggerConfiguration()\n   .Enrich.WithElasticApmCorrelationInfo()\n   .WriteTo.Console(outputTemplate: \"[{ElasticApmTraceId} {ElasticApmTransactionId} {Message:lj} {NewLine}{Exception}\")\n   .CreateLogger();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Context to Transactions in C#\nDESCRIPTION: Demonstrates how to add custom, non-indexed contextual information to transactions using the Custom dictionary property.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Tracer.CaptureTransaction(transactionName, transactionType, (transaction) =>\n{\n\ttransaction.Custom[\"foo\"] = \"bar\";\n\ttransaction.End();\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Build Targets in Linux Using build.sh\nDESCRIPTION: Command to display available build targets using the build.sh script on Linux. This provides the same functionality as the Windows version but for Linux environments.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh --list-targets\n```\n\n----------------------------------------\n\nTITLE: Serializing Distributed Tracing Context in Elastic APM .NET\nDESCRIPTION: Serializes the distributed tracing context for manual propagation in unsupported protocols.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nstring outgoingDistributedTracingData =\n    (Agent.Tracer.CurrentSpan?.OutgoingDistributedTracingData\n        ?? Agent.Tracer.CurrentTransaction?.OutgoingDistributedTracingData)?.SerializeToString();\n```\n\n----------------------------------------\n\nTITLE: Sample Web.config Configuration for Elastic APM in ASP.NET\nDESCRIPTION: A sample Web.config file that demonstrates how to configure the Elastic APM agent for an ASP.NET application. It shows how to set the APM server URL and secret token in the appSettings section.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/configuration-on-asp-net.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- ... -->\n<configuration>\n    <!-- ... -->\n    <appSettings>\n        <!-- ... -->\n        <add key=\"ElasticApm:ServerUrl\" value=\"https://my-apm-server:8200\" />\n        <add key=\"ElasticApm:SecretToken\" value=\"apm-server-secret-token\" />\n        <!-- ... -->\n    </appSettings>\n    <!-- ... -->\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Subscribing Microsoft Azure Service Bus Diagnostics\nDESCRIPTION: Code to subscribe the MicrosoftAzureServiceBusDiagnosticsSubscriber to the Elastic APM Agent when using Microsoft.Azure.ServiceBus package\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-servicebus.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new MicrosoftAzureServiceBusDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Manual Instrumentation Using OpenTelemetry in a Worker Service\nDESCRIPTION: This C# code demonstrates how to use the OpenTelemetry API, specifically the Activity API, to manually instrument a worker service. It shows creating an ActivitySource and starting an Activity for each unit of work.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-dotnet-net-core.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\n\nnamespace WorkerServiceSample\n{\n  public class Worker : BackgroundService\n  {\n    private readonly IHttpClientFactory _httpClientFactory;\n    private static readonly ActivitySource ActivitySource = new(\"MyActivitySource\");\n\n    public Worker(IHttpClientFactory httpClientFactory)\n    {\n      _httpClientFactory = httpClientFactory;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n      while (!stoppingToken.IsCancellationRequested)\n      {\n        using var activity = ActivitySource.StartActivity(\"UnitOfWork\");\n        var client = _httpClientFactory.CreateClient();\n        await client.GetAsync(\"https://www.elastic.co\", stoppingToken);\n        await Task.Delay(5000, stoppingToken);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic APM in appsettings.json for non-ASP.NET Core\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up Elastic APM in a non-ASP.NET Core application's appsettings.json file. In this scenario, the APM log level is set directly under the ElasticApm section, along with other APM-specific configurations.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/configuration-on-asp-net-core.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"ElasticApm\":\n    {\n      \"LogLevel\":  \"Debug\",\n      \"ServerUrl\":  \"http://myapmserver:8200\",\n      \"SecretToken\":  \"apm-server-secret-token\",\n      \"TransactionSampleRate\": 1.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Elasticsearch Instrumentation for Non-ASP.NET Core Applications\nDESCRIPTION: This snippet demonstrates how to enable Elasticsearch instrumentation for non-ASP.NET Core applications. It uses the Agent.Subscribe method with an ElasticsearchDiagnosticsSubscriber instance.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-elasticsearch.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Subscribe(new ElasticsearchDiagnosticsSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Configuring NLog with Elastic APM LayoutRenderers for Trace Context\nDESCRIPTION: This XML configuration demonstrates how to set up NLog with Elastic APM LayoutRenderers to include trace and transaction IDs in JSON-formatted logs. It requires adding the Elastic.Apm.NLog NuGet package and registering it as an extension in the NLog configuration.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/nlog.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<nlog>\n<extensions>\n   <add assembly=\"Elastic.Apm.NLog\"/>\n</extensions>\n<targets>\n<target type=\"file\" name=\"logfile\" fileName=\"myfile.txt\">\n    <layout type=\"jsonlayout\">\n        <attribute name=\"traceid\" layout=\"${ElasticApmTraceId}\" />\n        <attribute name=\"transactionid\" layout=\"${ElasticApmTransactionId}\" />\n    </layout>\n</target>\n</targets>\n<rules>\n    <logger name=\"*\" minLevel=\"Trace\" writeTo=\"logfile\" />\n</rules>\n</nlog>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Windows .NET Framework\nDESCRIPTION: Configure environment variables to enable profiler auto-instrumentation for .NET Framework applications on Windows.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nset COR_ENABLE_PROFILING = \"1\"\nset COR_PROFILER = \"{FA65FE15-F085-4681-9B20-95E04F6C03CC}\"\nset COR_PROFILER_PATH = \"<unzipped directory>\\elastic_apm_profiler.dll\"\nset ELASTIC_APM_PROFILER_HOME = \"<unzipped directory>\"\nset ELASTIC_APM_PROFILER_INTEGRATIONS = \"<unzipped directory>\\integrations.yml\"\nset ELASTIC_APM_SERVER_URL = \"<apm server url>\"\nset ELASTIC_APM_SECRET_TOKEN = \"<secret token>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Environment for APM Agent\nDESCRIPTION: Set environment variables in a Dockerfile to configure profiler auto-instrumentation for a .NET application.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV CORECLR_ENABLE_PROFILING=1\nENV CORECLR_PROFILER={FA65FE15-F085-4681-9B20-95E04F6C03CC}\nENV CORECLR_PROFILER_PATH=/elastic_apm_profiler/libelastic_apm_profiler.so\nENV ELASTIC_APM_PROFILER_HOME=/elastic_apm_profiler\nENV ELASTIC_APM_PROFILER_INTEGRATIONS=/elastic_apm_profiler/integrations.yml\n\nENTRYPOINT [\"dotnet\", \"your-application.dll\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Windows Service in Registry using PowerShell\nDESCRIPTION: This PowerShell script sets environment variables for a specific Windows service in the Windows registry. It defines APM configuration settings such as server URL, transaction sample rate, environment, and service name.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/configuration-for-windows-services.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$environment = [string[]]@(\n  \"ELASTIC_APM_SERVER_URL=http://localhost:8200\",\n  \"ELASTIC_APM_TRANSACTION_SAMPLE_RATE=1\",\n  \"ELASTIC_APM_ENVIRONMENT=Production\",\n  \"ELASTIC_APM_SERVICE_NAME=MyWindowsService\")\n\nSet-ItemProperty HKLM:SYSTEM\\CurrentControlSet\\Services\\<service-name> -Name Environment -Value $environment\n```\n\n----------------------------------------\n\nTITLE: Custom Agent Configuration in Application_Start\nDESCRIPTION: Example of manually instantiating the APM agent in the Application_Start method. This allows for customization such as adding transaction filters before the ElasticApmModule initializes the agent.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-asp-dot-net.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MvcApplication : HttpApplication\n{\n    protected void Application_Start()\n    {\n        // other application startup e.g. RouteConfig, etc.\n\n        // set up agent with components\n        var agentComponents = ElasticApmModule.CreateAgentComponents();\n        Agent.Setup(agentComponents);\n\n        // add transaction filter\n        Agent.AddFilter((ITransaction t) =>\n        {\n            t.SetLabel(\"foo\", \"bar\");\n            return t;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Linux .NET Core\nDESCRIPTION: Configure environment variables to enable profiler auto-instrumentation for .NET Core applications on Linux.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CORECLR_ENABLE_PROFILING=1\nexport CORECLR_PROFILER={FA65FE15-F085-4681-9B20-95E04F6C03CC}\nexport CORECLR_PROFILER_PATH=\"<unzipped directory>/libelastic_apm_profiler.so\"\nexport ELASTIC_APM_PROFILER_HOME=\"<unzipped directory>\"\nexport ELASTIC_APM_PROFILER_INTEGRATIONS=\"<unzipped directory>/integrations.yml\"\nexport ELASTIC_APM_SERVER_URL = \"<apm server url>\"\nexport ELASTIC_APM_SECRET_TOKEN = \"<secret token>\"\n```\n\n----------------------------------------\n\nTITLE: Adding User to Performance Monitor Users Group in Windows\nDESCRIPTION: This command adds a specified account to the Performance Monitor Users group, allowing access to performance counter values. This is necessary for collecting system CPU usage metrics on Windows.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnet localgroup \"Performance Monitor Users\" \"<Account Name>\" /add\n```\n\n----------------------------------------\n\nTITLE: Configuring BaggageToAttach in Elastic APM .NET Agent\nDESCRIPTION: This configuration option controls which baggage values are automatically attached to events (transactions, spans, errors). It uses the W3C Baggage specification and can be programmatically accessed via the Activity API. The option supports dynamic configuration.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/config-http.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## `BaggageToAttach` ([1.24]) [config-baggage-to-attach]\n\n[![dynamic config](images/dynamic-config.svg \"\") ](/reference/configuration.md#dynamic-configuration)\n\nControls which baggage values are automatically attached to the given event (transaction, span, error). Baggage values are derived from the `baggage` header defined in the [W3C Baggage specification](https://www.w3.org/TR/baggage/). You can programmatically write and read baggage values via the [Activity API](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.activity?view=net-6.0). For more details, see [`our documentation on how to integrate with OpenTelemetry`](/reference/opentelemetry-bridge.md#baggage-api).\n\n| Environment variable name | IConfiguration key |\n| --- | --- |\n| `ELASTIC_APM_BAGGAGE_TO_ATTACH` | `ElasticApm:BaggageToAttach` |\n\n| Default | Type |\n| --- | --- |\n| `*` | Comma separated string |\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Windows .NET Core\nDESCRIPTION: Configure environment variables to enable profiler auto-instrumentation for .NET Core applications on Windows.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset CORECLR_ENABLE_PROFILING = \"1\"\nset CORECLR_PROFILER = \"{FA65FE15-F085-4681-9B20-95E04F6C03CC}\"\nset CORECLR_PROFILER_PATH = \"<unzipped directory>\\elastic_apm_profiler.dll\"\nset ELASTIC_APM_PROFILER_HOME = \"<unzipped directory>\"\nset ELASTIC_APM_PROFILER_INTEGRATIONS = \"<unzipped directory>\\integrations.yml\"\nset ELASTIC_APM_SERVER_URL = \"<apm server url>\"\nset ELASTIC_APM_SECRET_TOKEN = \"<secret token>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IgnoreMessageQueues in Elastic APM .NET Agent\nDESCRIPTION: The 'IgnoreMessageQueues' setting is used to specify which messaging queues, topics, or exchanges should be ignored during tracing. It accepts a comma-separated string of wildcard patterns. The wildcard '*' matches zero or more characters, and matching is case-insensitive by default. Case-sensitive matching can be enabled by prepending '(?-i)' to an element.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/config-messaging.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nELASTIC_APM_IGNORE_MESSAGE_QUEUES=\"/foo/*/bar/*/baz*,*foo*\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\nElasticApm:IgnoreMessageQueues=\"/foo/*/bar/*/baz*,*foo*\"\n```\n\n----------------------------------------\n\nTITLE: Adding ElasticApmModule to web.config\nDESCRIPTION: Configuration to add the Elastic APM module to the IIS pipeline. This enables the APM agent to monitor all HTTP requests to the application.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-asp-dot-net.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <system.webServer>\n        <modules>\n            <add name=\"ElasticApmModule\" type=\"Elastic.Apm.AspNetFullFramework.ElasticApmModule, Elastic.Apm.AspNetFullFramework\" />\n        </modules>\n    </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Baggage Values with OpenTelemetry in C#\nDESCRIPTION: Example of using Activity.Baggage to set baggage values that will be automatically propagated according to the W3C Baggage specification. The agent will propagate these values and can attach them to captured events based on configuration.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/opentelemetry-bridge.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n_activitySource.StartActivity(\"MyActivity\")?.AddBaggage(\"foo\", \"bar\");\n```\n\n----------------------------------------\n\nTITLE: Configuring UseWindowsCredentials in Elastic APM .NET Agent\nDESCRIPTION: This configuration option enables the APM agent to use Windows credentials for authentication when requested by the server. It's useful for scenarios involving Windows authentication on a proxy that routes APM agent requests to the APM server.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/config-http.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## `UseWindowsCredentials` [config-use-windows-credentials]\n\nSet this property to true when requests made by the APM agent should, if requested by the server, be authenticated using the credentials of the currently logged on user.\n\nThis is useful when using windows authentication on a proxy, that routes APM agent requests to the APM server.\n\n| Environment variable name | IConfiguration or Web.config key |\n| --- | --- |\n| `ELASTIC_APM_USE_WINDOWS_CREDENTIALS` | `ElasticApm:UseWindowsCredentials` |\n\n| Default | Type |\n| --- | --- |\n| `false` | Boolean |\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic APM in local.settings.json for Azure Functions Local Development\nDESCRIPTION: Example configuration of Elastic APM environment variables in the local.settings.json file for local development of Azure Functions. This includes settings for Azure WebJobs storage, runtime, and Elastic APM configuration.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",\n    \"ELASTIC_APM_ENVIRONMENT\": \"Development\",\n    \"ELASTIC_APM_SERVICE_NAME\": \"MyServiceName\",\n    \"ELASTIC_APM_SERVER_URL\": \"https://my-serverless-project.apm.eu-west-1.aws.elastic.cloud:443\",\n    \"ELASTIC_APM_API_KEY\": \"MySecureApiKeyFromApmServer==\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DOTNET_STARTUP_HOOKS Environment Variable\nDESCRIPTION: Sets the DOTNET_STARTUP_HOOKS environment variable to point to the ElasticApmAgentStartupHook.dll file. This is a crucial step for enabling the Elastic APM startup hooks.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/startuphook/Elastic.Apm.StartupHook.Sample/README.md#2025-04-22_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset DOTNET_STARTUP_HOOKS=[pathToAgent]\\ElasticApmAgentStartupHook.dll\n```\n\n----------------------------------------\n\nTITLE: Example URLs for TransactionIgnoreUrls Configuration\nDESCRIPTION: Sample URLs that would be matched by the TransactionIgnoreUrls configuration setting, showing how the matching happens based only on the request path, ignoring hosts and query strings.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/config-http.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.mycoolsite.com/home/index\nhttp://localhost/home/index\nhttp://whatever.com/home/index?value1=123\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic APM Agent Environment Variables for Azure Functions\nDESCRIPTION: Defines the necessary environment variables for configuring the Elastic APM agent in an Azure Functions environment. These variables include the APM server URL, secret token, environment name, and optional service name.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nELASTIC_APM_SERVER_URL: <your APM server URL from the prerequisites step>\nELASTIC_APM_SECRET_TOKEN: <your APM secret token from the prerequisites step>\nELASTIC_APM_ENVIRONMENT: <your environment>\nELASTIC_APM_SERVICE_NAME: <your service name> (optional)\n```\n\n----------------------------------------\n\nTITLE: Displaying Field Access Performance Benchmark Results in Markdown Table\nDESCRIPTION: A markdown table showing detailed performance metrics for field access operations across different .NET versions, field types, and access patterns. Metrics include execution time, relative performance, and memory allocation.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|   GetPrivateStaticField |    .NET 4.7.2 | Static Getter |  Private | 3.185 ns | 0.0336 ns | 0.0280 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|   GetPrivateStaticField | .NET Core 3.1 | Static Getter |  Private | 3.993 ns | 0.0543 ns | 0.0453 ns |  1.25 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|    SetPublicStaticField |    .NET 4.7.2 | Static Setter |  Private | 2.928 ns | 0.0462 ns | 0.0386 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|    SetPublicStaticField | .NET Core 3.1 | Static Setter |  Private | 3.951 ns | 0.0857 ns | 0.0760 ns |  1.35 |    0.03 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|  SetInternalStaticField |    .NET 4.7.2 | Static Setter |  Private | 3.006 ns | 0.0861 ns | 0.0805 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|  SetInternalStaticField | .NET Core 3.1 | Static Setter |  Private | 3.986 ns | 0.0890 ns | 0.0833 ns |  1.33 |    0.04 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n| SetProtectedStaticField |    .NET 4.7.2 | Static Setter |  Private | 2.916 ns | 0.0256 ns | 0.0214 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n| SetProtectedStaticField | .NET Core 3.1 | Static Setter |  Private | 3.937 ns | 0.0509 ns | 0.0425 ns |  1.35 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|   SetPrivateStaticField |    .NET 4.7.2 | Static Setter |  Private | 3.003 ns | 0.0684 ns | 0.0639 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|   SetPrivateStaticField | .NET Core 3.1 | Static Setter |  Private | 3.951 ns | 0.0954 ns | 0.0846 ns |  1.32 |    0.03 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|          GetPublicField |    .NET 4.7.2 |        Getter |  Private | 3.408 ns | 0.0499 ns | 0.0417 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|          GetPublicField | .NET Core 3.1 |        Getter |  Private | 3.243 ns | 0.0506 ns | 0.0448 ns |  0.95 |    0.01 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|        GetInternalField |    .NET 4.7.2 |        Getter |  Private | 3.419 ns | 0.0360 ns | 0.0301 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|        GetInternalField | .NET Core 3.1 |        Getter |  Private | 3.276 ns | 0.0638 ns | 0.0565 ns |  0.96 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|       GetProtectedField |    .NET 4.7.2 |        Getter |  Private | 3.428 ns | 0.0688 ns | 0.0644 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|       GetProtectedField | .NET Core 3.1 |        Getter |  Private | 3.260 ns | 0.0414 ns | 0.0367 ns |  0.95 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|         GetPrivateField |    .NET 4.7.2 |        Getter |  Private | 3.533 ns | 0.0972 ns | 0.1264 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|         GetPrivateField | .NET Core 3.1 |        Getter |  Private | 3.275 ns | 0.0576 ns | 0.0511 ns |  0.92 |    0.04 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|          SetPublicField |    .NET 4.7.2 |        Setter |  Private | 3.437 ns | 0.0919 ns | 0.0903 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|          SetPublicField | .NET Core 3.1 |        Setter |  Private | 3.151 ns | 0.0520 ns | 0.0461 ns |  0.92 |    0.03 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|        SetInternalField |    .NET 4.7.2 |        Setter |  Private | 3.384 ns | 0.0533 ns | 0.0445 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|        SetInternalField | .NET Core 3.1 |        Setter |  Private | 3.156 ns | 0.0327 ns | 0.0273 ns |  0.93 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|       SetProtectedField |    .NET 4.7.2 |        Setter |  Private | 3.368 ns | 0.0396 ns | 0.0331 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|       SetProtectedField | .NET Core 3.1 |        Setter |  Private | 2.953 ns | 0.0264 ns | 0.0221 ns |  0.88 |    0.01 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|         SetPrivateField |    .NET 4.7.2 |        Setter |  Private | 3.353 ns | 0.0471 ns | 0.0393 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|         SetPrivateField | .NET Core 3.1 |        Setter |  Private | 3.160 ns | 0.0592 ns | 0.0525 ns |  0.94 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|    GetPublicStaticField |    .NET 4.7.2 | Static Getter |   Public | 2.433 ns | 0.0616 ns | 0.0576 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|    GetPublicStaticField | .NET Core 3.1 | Static Getter |   Public | 2.191 ns | 0.0497 ns | 0.0465 ns |  0.90 |    0.03 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|  GetInternalStaticField |    .NET 4.7.2 | Static Getter |   Public | 3.189 ns | 0.0460 ns | 0.0384 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|  GetInternalStaticField | .NET Core 3.1 | Static Getter |   Public | 3.964 ns | 0.0426 ns | 0.0332 ns |  1.24 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n| GetProtectedStaticField |    .NET 4.7.2 | Static Getter |   Public | 3.201 ns | 0.0625 ns | 0.0522 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n| GetProtectedStaticField | .NET Core 3.1 | Static Getter |   Public | 3.998 ns | 0.0359 ns | 0.0300 ns |  1.25 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|   GetPrivateStaticField |    .NET 4.7.2 | Static Getter |   Public | 3.220 ns | 0.0675 ns | 0.0631 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|   GetPrivateStaticField | .NET Core 3.1 | Static Getter |   Public | 4.068 ns | 0.0766 ns | 0.0717 ns |  1.26 |    0.04 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|    SetPublicStaticField |    .NET 4.7.2 | Static Setter |   Public | 2.175 ns | 0.0506 ns | 0.0474 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|    SetPublicStaticField | .NET Core 3.1 | Static Setter |   Public | 2.088 ns | 0.0281 ns | 0.0235 ns |  0.96 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|  SetInternalStaticField |    .NET 4.7.2 | Static Setter |   Public | 2.972 ns | 0.0674 ns | 0.0598 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|  SetInternalStaticField | .NET Core 3.1 | Static Setter |   Public | 3.966 ns | 0.0569 ns | 0.0504 ns |  1.34 |    0.03 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n| SetProtectedStaticField |    .NET 4.7.2 | Static Setter |   Public | 2.936 ns | 0.0451 ns | 0.0376 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n| SetProtectedStaticField | .NET Core 3.1 | Static Setter |   Public | 3.923 ns | 0.0517 ns | 0.0432 ns |  1.34 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|   SetPrivateStaticField |    .NET 4.7.2 | Static Setter |   Public | 2.957 ns | 0.0740 ns | 0.0656 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n```\n\n----------------------------------------\n\nTITLE: Enabling Startup Hooks Logging\nDESCRIPTION: Sets an environment variable to enable logging for the Elastic APM startup hooks. This is useful for troubleshooting and verifying the hooks are working correctly.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/startuphook/Elastic.Apm.StartupHook.Sample/README.md#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nset ELASTIC_APM_STARTUP_HOOKS_LOGGING=1\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceContextIgnoreSampledFalse in Elastic APM .NET Agent\nDESCRIPTION: This deprecated configuration option allows the agent to ignore the sampled flag of the W3C Trace Context traceparent header when it's false and there's no agent-specific tracestate header value. It's useful for scenarios where a caller service always sets the sampled flag to false.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/config-http.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## `TraceContextIgnoreSampledFalse` [config-trace-context-ignore-sampled-false]\n\n::::{important}\nUse of `TraceContextIgnoreSampledFalse` is deprecated. Use `TraceContinuationStrategy` with the `restart_external` value.\n::::\n\n\nThe agent uses the [W3C Trace Context](https://www.w3.org/TR/trace-context/) specification and standards for distributed tracing. The traceparent header from the W3C Trace Context specification defines a [sampled flag](https://www.w3.org/TR/trace-context/#sampled-flag) which is propagated from a caller service to a callee service, and determines whether a trace is sampled in the callee service. The default behavior of the agent honors the sampled flag value and behaves accordingly.\n\nThere may be cases where you wish to change the default behavior of the agent with respect to the sampled flag. By setting the `TraceContextIgnoreSampled` configuration value to `true`, the agent ignores the sampled flag of the W3C Trace Context traceparent header when it has a value of `false` **and** and there is no agent specific tracestate header value present. In ignoring the sampled flag, the agent makes a sampling decision based on the [sample rate](/reference/config-core.md#config-transaction-sample-rate). This can be useful when a caller service always sets a sampled flag value of `false`, that results in the agent never sampling any transactions.\n\n::::{important}\n.NET 5 applications set the W3C Trace Context for outgoing HTTP requests by default, but with the traceparent header sampled flag set to `false`. If a .NET 5 application has an active agent, the agent ensures that the sampled flag is propagated with the agent's sampling decision. If a .NET 5 application does not have an active agent however, and the application calls another service that does have an active agent, the propagation of a sampled flag value of `false` results in no sampled transactions in the callee service.\n\nIf your application is called by an .NET 5 application that does not have an active agent, setting the `TraceContextIgnoreSampledFalse` configuration value to `true` instructs the agent to start a new transaction and make a sampling decision based on the [sample rate](/reference/config-core.md#config-transaction-sample-rate), when the traceparent header sampled flag has a value of `false` **and** there is no agent specific tracestate header value present.\n\n::::\n\n\n| Environment variable name | IConfiguration or Web.config key |\n| --- | --- |\n| `ELASTIC_APM_TRACE_CONTEXT_IGNORE_SAMPLED_FALSE` | `ElasticApm:TraceContextIgnoreSampledFalse` |\n\n| Default | Type |\n| --- | --- |\n| `false` | Boolean |\n```\n\n----------------------------------------\n\nTITLE: Setting Labels on a Span in C#\nDESCRIPTION: Demonstrates how to set a label on a span within a transaction. This method is used to add custom metadata to spans for better traceability.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\ntransaction.CaptureSpan(SpanName, SpanType,\nspan =>\n    {\n        span.Labels[\"foo\"] = \"bar\";\n        //application code that is captured as a span\n    });\n```\n\n----------------------------------------\n\nTITLE: Enabling Startup Hook Logging for Elastic APM Agent\nDESCRIPTION: This command sets an environment variable to enable logging for the Elastic APM Agent startup hook. This can be useful for troubleshooting startup issues.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/startuphook/ElasticApmAgentStartupHook/README.md#2025-04-22_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nset ELASTIC_APM_STARTUP_HOOKS_LOGGING=1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Label from Transaction in C#\nDESCRIPTION: Shows how to retrieve a label from a transaction using the TryGetLabel method with type inference.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nif(transaction.TryGetLabel<int>(\"foo\", our var myLabel))\n    Console.WriteLine(myLabel);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Windows Services (.NET Core) using PowerShell\nDESCRIPTION: This PowerShell script sets environment variables for a specific Windows service running .NET Core applications. It configures the Elastic APM agent by adding entries to the Windows registry.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$environment = [string[]]@(\n  \"CORECLR_ENABLE_PROFILING=1\",\n  \"CORECLR_PROFILER={FA65FE15-F085-4681-9B20-95E04F6C03CC}\",\n  \"CORECLR_PROFILER_PATH=<unzipped directory>\\elastic_apm_profiler.dll\",\n  \"ELASTIC_APM_PROFILER_HOME=<unzipped directory>\",\n  \"ELASTIC_APM_PROFILER_INTEGRATIONS=<unzipped directory>\\integrations.yml\"\n  \"ELASTIC_APM_SERVER_URL=<apm server url>\"\n  \"ELASTIC_APM_SECRET_TOKEN=<secret token>\")\n\nSet-ItemProperty HKLM:SYSTEM\\CurrentControlSet\\Services\\<service-name> -Name Environment -Value $environment\n```\n\n----------------------------------------\n\nTITLE: Docker Multi-stage Build for APM Agent\nDESCRIPTION: Create a build image containing the files for profiler auto-instrumentation as part of a multi-stage Docker build.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG AGENT_VERSION=<VERSION>\n\nFROM alpine:latest AS build\nARG AGENT_VERSION\nWORKDIR /source\n\n# install unzip\nRUN apk update && apk add zip curl\n\n# pull down the zip file based on ${AGENT_VERSION} ARG and unzip\nRUN curl -L -o elastic_apm_profiler_${AGENT_VERSION}.zip https://github.com/elastic/apm-agent-dotnet/releases/download/v${AGENT_VERSION}/elastic_apm_profiler_${AGENT_VERSION}.zip && \\\n    unzip elastic_apm_profiler_${AGENT_VERSION}.zip -d /elastic_apm_profiler_${AGENT_VERSION}\n```\n\n----------------------------------------\n\nTITLE: Describing Entity Framework 6 Interceptor for Elastic APM in Markdown\nDESCRIPTION: This markdown snippet provides an overview of the Elastic.Apm.EntityFramework6 project. It explains that the project contains an interceptor for Entity Framework 6 that automatically creates spans for database operations, enhancing the monitoring capabilities of Elastic APM.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/instrumentations/Elastic.Apm.EntityFramework6/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Elastic.Apm.EntityFramework6\n\nThis project contains an Entity Framework 6 (AKA classic Entity Framework) interceptor that automatically creates spans for DB operations executed by Entity Framework.\n```\n\n----------------------------------------\n\nTITLE: Enabling SqlClient Auto-instrumentation in General .NET Applications\nDESCRIPTION: This snippet shows how to enable SqlClient auto-instrumentation in a general .NET application by subscribing the SqlClientDiagnosticSubscriber to the Elastic APM Agent. It's important to ensure this code is called only once to avoid duplicate capturing of database calls.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-sqlclient.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Enable tracing of outgoing db requests\nAgent.Subscribe(new SqlClientDiagnosticSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Copying APM Agent Files in Docker Build\nDESCRIPTION: Copy the APM agent files from the build stage to the final stage in a Docker multi-stage build.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY --from=build /elastic_apm_profiler_${AGENT_VERSION} /elastic_apm_profiler\n```\n\n----------------------------------------\n\nTITLE: Sample Description for HTTP Listener Implementation\nDESCRIPTION: Documentation explaining the implementation of a sample HTTP listener application that demonstrates Elastic APM agent integration for manual instrumentation scenarios. The application handles requests on port 8080, generates random numbers, and fetches GitHub repository star count while utilizing both manual and automatic APM instrumentation.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/sample/HttpListenerSample/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## HttpListenerSample ##\n\nThe goal of this sample is to show you how you can use the Public Agent API for frameworks that are currently not covered by auto-instrumentation features.\n\nThis is a simple application that listens to HTTP requests on http://localhost:8080 and does two things within each request:\n- It generates a random number\n- It returns the number of stars on the Elastic APM .NET Agent GitHub repository \n\nThe Elastic APM agent traces the incoming requests with the Public Agent API. \n\nThe agent starts a transaction for every incoming request and it creates a span with the Public Agent API each time the GenerateRandomNumber method is executed. The HTTP call in the GetNumberOfStars method is automatically captured by the agent.\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Framework 6 Interceptor in web.config for Elastic APM\nDESCRIPTION: This XML configuration adds the Elastic APM Entity Framework 6 interceptor to the application's web.config file. This enables automatic instrumentation for Entity Framework 6 database operations.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-ef6.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <entityFramework>\n        <interceptors>\n            <interceptor type=\"Elastic.Apm.EntityFramework6.Ef6Interceptor, Elastic.Apm.EntityFramework6\" />\n        </interceptors>\n    </entityFramework>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Windows Services using PowerShell\nDESCRIPTION: This PowerShell script sets environment variables for a specific Windows service by adding entries to the Windows registry. It configures the Elastic APM agent for .NET Framework applications.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$environment = [string[]]@(\n  \"COR_ENABLE_PROFILING=1\",\n  \"COR_PROFILER={FA65FE15-F085-4681-9B20-95E04F6C03CC}\",\n  \"COR_PROFILER_PATH=<unzipped directory>\\elastic_apm_profiler.dll\",\n  \"ELASTIC_APM_PROFILER_HOME=<unzipped directory>\",\n  \"ELASTIC_APM_PROFILER_INTEGRATIONS=<unzipped directory>\\integrations.yml\"\n  \"ELASTIC_APM_SERVER_URL=<apm server url>\"\n  \"ELASTIC_APM_SECRET_TOKEN=<secret token>\")\n\nSet-ItemProperty HKLM:SYSTEM\\CurrentControlSet\\Services\\<service-name> -Name Environment -Value $environment\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Elastic APM Agent Startup Hook in Windows\nDESCRIPTION: This command sets the DOTNET_STARTUP_HOOKS environment variable to point to the Elastic APM Agent startup hook DLL. This enables the agent to initialize itself during application startup.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/startuphook/ElasticApmAgentStartupHook/README.md#2025-04-22_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset DOTNET_STARTUP_HOOKS=[pathToAgent]\\ElasticApmAgentStartupHook.dll\n```\n\n----------------------------------------\n\nTITLE: Ending Transaction in C#\nDESCRIPTION: Shows how to end a transaction using the End method, which finalizes the transaction and schedules it for reporting to the APM Server.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\ntransaction.End();\n```\n\n----------------------------------------\n\nTITLE: Building Elastic APM Agent Zip File on Windows\nDESCRIPTION: This command runs the build script to create a zip file containing the Elastic APM Agent for Windows. The resulting zip file will be placed in the build/output directory.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/startuphook/ElasticApmAgentStartupHook/README.md#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat agent-zip\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic APM Server URL and Log Level\nDESCRIPTION: Sets environment variables for the Elastic APM server URL and log level. These are essential configurations for the APM agent to function properly and provide detailed logging.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/startuphook/Elastic.Apm.StartupHook.Sample/README.md#2025-04-22_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nset ELASTIC_APM_SERVER_URL=http://localhost:8200\nset ELASTIC_APM_LOG_LEVEL=Trace\n```\n\n----------------------------------------\n\nTITLE: Adding Elastic.Apm Package Reference in .NET\nDESCRIPTION: Instructions for adding the Elastic.Apm NuGet package to a .NET application for manual instrumentation. This package provides the necessary components for creating spans and transactions using the Public API.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-general.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Elastic.Apm](https://www.nuget.org/packages/Elastic.Apm)\n```\n\n----------------------------------------\n\nTITLE: Restarting Windows Service using PowerShell\nDESCRIPTION: This PowerShell command restarts the specified Windows service to apply the newly set environment variables and configuration changes.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/configuration-for-windows-services.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRestart-Service <service-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for IIS Application Pool (.NET Framework) using PowerShell\nDESCRIPTION: This PowerShell script sets environment variables for a specific IIS application pool running .NET Framework applications. It uses AppCmd.exe to configure the Elastic APM agent.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$appcmd = \"$($env:systemroot)\\system32\\inetsrv\\AppCmd.exe\"\n$appPool = \"<application-pool>\"\n$profilerHomeDir = \"<unzipped directory>\"\n$environment = @{\n  COR_ENABLE_PROFILING = \"1\"\n  COR_PROFILER = \"{FA65FE15-F085-4681-9B20-95E04F6C03CC}\"\n  COR_PROFILER_PATH = \"$profilerHomeDir\\elastic_apm_profiler.dll\"\n  ELASTIC_APM_PROFILER_HOME = \"$profilerHomeDir\"\n  ELASTIC_APM_PROFILER_INTEGRATIONS = \"$profilerHomeDir\\integrations.yml\"\n  COMPlus_LoaderOptimization = \"1\"\n  ELASTIC_APM_SERVER_URL = \"<apm server url>\"\n  ELASTIC_APM_SECRET_TOKEN = \"<secret token>\"\n}\n\n$environment.Keys | ForEach-Object {\n  & $appcmd set config -section:system.applicationHost/applicationPools /+\"[name='$appPool'].environmentVariables.[name='$_',value='$($environment[$_])'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ActivitySource and Spans with OpenTelemetry in C#\nDESCRIPTION: Example showing how to create OpenTelemetry spans (Activities) using ActivitySource. It creates a span named 'Sample' with ActivityKind.Server and a child span named 'foo', which the bridge will convert to an Elastic APM transaction and span.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/opentelemetry-bridge.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void Sample()\n{\n\tvar src = new ActivitySource(\"Test\");\n\tusing var activity1 = src.StartActivity(nameof(Sample), ActivityKind.Server);\n\tThread.Sleep(100);\n\tusing var activity2 = src.StartActivity(\"foo\");\n\tThread.Sleep(150);\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting systemd Service\nDESCRIPTION: This command reloads or restarts a systemd service to apply the newly configured environment variables.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl reload-or-restart <service>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for IIS Application Pool (.NET Core) using PowerShell\nDESCRIPTION: This PowerShell script sets environment variables for a specific IIS application pool running .NET Core applications. It uses AppCmd.exe to configure the Elastic APM agent.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$appcmd = \"$($env:systemroot)\\system32\\inetsrv\\AppCmd.exe\"\n$appPool = \"<application-pool>\"\n$profilerHomeDir = \"<unzipped directory>\"\n$environment = @{\n  CORECLR_ENABLE_PROFILING = \"1\"\n  CORECLR_PROFILER = \"{FA65FE15-F085-4681-9B20-95E04F6C03CC}\"\n  CORECLR_PROFILER_PATH = \"$profilerHomeDir\\elastic_apm_profiler.dll\"\n  ELASTIC_APM_PROFILER_HOME = \"$profilerHomeDir\"\n  ELASTIC_APM_PROFILER_INTEGRATIONS = \"$profilerHomeDir\\integrations.yml\"\n  ELASTIC_APM_SERVER_URL = \"<apm server url>\"\n  ELASTIC_APM_SECRET_TOKEN = \"<secret token>\"\n}\n\n$environment.Keys | ForEach-Object {\n  & $appcmd set config -section:system.applicationHost/applicationPools /+\"[name='$appPool'].environmentVariables.[name='$_',value='$($environment[$_])'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elastic.Apm.NetCoreAll NuGet Package Reference\nDESCRIPTION: This XML snippet shows how to add a reference to the Elastic.Apm.NetCoreAll NuGet package in a .NET project file. The <LATEST> placeholder should be replaced with the latest version available on NuGet.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-dotnet-net-core.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Elastic.Apm.NetCoreAll\" Version=\"<LATEST>\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Proxy Interfaces for Duck Chaining in C#\nDESCRIPTION: This snippet defines two interfaces 'IProxyMyHandler' and 'IProxyMyHandlerConfiguration' to enable duck chaining for accessing internal types and their properties.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IProxyMyHandler\n{\n    string Name { get; set; }\n\n    IProxyMyHandlerConfiguration Configuration { get; }\n}\npublic interface IProxyMyHandlerConfiguration\n{\n    int MaxConnections { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Excluded Service Names for Elastic APM .NET Profiler\nDESCRIPTION: Lists the service names that are always excluded from profiling by default in the Elastic APM .NET Agent.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n* SQLServerReportingServices\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd Service to Use Environment File\nDESCRIPTION: This snippet shows how to configure a systemd service to use the environment file containing Elastic APM agent settings.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n[Service]\nEnvironmentFile=/path/to/environment.env\nExecStart=<command>\n```\n\n----------------------------------------\n\nTITLE: Generated Proxy Type Example in C#\nDESCRIPTION: Shows the structure of a proxy type generated by the Duck Type library. This struct implements the IDuckAnonymous interface and IDuckType interface, providing access to the properties of the anonymous object.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic readonly struct IDuckAnonymous___<>f__AnonymousType0`2[System.String,System.String] : IDuckAnonymous, IDuckType\n{\n    private readonly <>f__AnonymousType0`2[System.String,System.String] _currentInstance;\n\n    // *** IDuckType implementation\n    public object Instance => _currentInstance;\n    public Type Type => typeof(<>f__AnonymousType0`2[System.String,System.String]);\n\n    // *** IDuckAnonymous implementation\n    public string Name => _currentInstance.Name;\n    public string Version => _currentInstance.Version;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Duck Typing Proxy in C#\nDESCRIPTION: Demonstrates how to create and use a duck typing proxy to access properties of an anonymous object. The example shows defining an interface, creating an anonymous object, and using the 'As' extension method to create a proxy instance.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\t// We create an anonymous object\n\t\tvar anonymousObject = new { Name = \".NET Core\", Version = \"3.1\" };\n\t\t\n\t\tProcess(anonymousObject);\n\t}\n\t\n\tpublic static void Process(object obj) \n\t{\n                // First, we create a proxy instance using IDuckAnonymous type\n                // as a proxy definition and the obj instance as the target.\n\t\t// Now the proxyInstance implements IDuckAnonymous type and all\n                // getters to access the anonymous object internals were generated\n                // automatically for us.\n\n                // We use the `As` extension method to call the duck typing proxy creator.\n\t\tvar proxyInstance = obj.As<IDuckAnonymous>();\n\n\t\t// Here we can access the internal properties\n\t\tConsole.WriteLine($\"Name: {proxyInstance.Name}\");\n\t\tConsole.WriteLine($\"Version: {proxyInstance.Version}\");\n\t}\n\t\n\tpublic interface IDuckAnonymous \n\t{\n\t\tstring Name { get; }\n\t\tstring Version { get; }\n\t}\t\t\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for systemd Service\nDESCRIPTION: This shell script creates an environment file for a systemd service, configuring the Elastic APM agent for .NET Core applications.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nCORECLR_ENABLE_PROFILING=1\nCORECLR_PROFILER={FA65FE15-F085-4681-9B20-95E04F6C03CC}\nCORECLR_PROFILER_PATH=/<unzipped directory>/libelastic_apm_profiler.so\nELASTIC_APM_PROFILER_HOME=/<unzipped directory>\nELASTIC_APM_PROFILER_INTEGRATIONS=/<unzipped directory>/integrations.yml\nELASTIC_APM_SERVER_URL=<apm server url>\nELASTIC_APM_SECRET_TOKEN=<secret token>\n```\n\n----------------------------------------\n\nTITLE: IDuckType Interface Definition in C#\nDESCRIPTION: Defines the IDuckType interface which is implemented by all proxy types. It provides access to the underlying instance and its type.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IDuckType\n{\n    /// <summary>\n    /// Gets instance\n    /// </summary>\n    object Instance { get; }\n\n    /// <summary>\n    /// Gets instance Type\n    /// </summary>\n    Type Type { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: DuckAttribute and DuckFieldAttribute Definitions in C#\nDESCRIPTION: Defines the DuckAttribute and DuckFieldAttribute used to control bindings between the proxy definition and target type. These attributes can be applied to properties and methods in the proxy definition.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Duck attribute\n/// </summary>\n[AttributeUsage(AttributeTargets.Property | AttributeTargets.Method, AllowMultiple = false)]\npublic class DuckAttribute : Attribute\n{\n    /// <summary>\n    /// Gets or sets the underlying type member name\n    /// </summary>\n    public string Name { get; set; }\n\n    /// <summary>\n    /// Gets or sets duck kind\n    /// </summary>\n    public DuckKind Kind { get; set; } = DuckKind.Property;\n\n    /// <summary>\n    /// Gets or sets the generic parameter type names definition for a generic method call (required when calling generic methods and instance type is non public)\n    /// </summary>\n    public string[] GenericParameterTypeNames { get; set; }\n\n    /// <summary>\n    /// Gets or sets the parameter type names of the target method (optional / used to disambiguation)\n    /// </summary>\n    public string[] ParameterTypeNames { get; set; }\n}\n\n/// <summary>\n/// Duck attribute where the underlying member is a field\n/// </summary>\npublic class DuckFieldAttribute : DuckAttribute\n{\n    /// <summary>\n    /// Initializes a new instance of the <see cref=\"DuckFieldAttribute\"/> class.\n    /// </summary>\n    public DuckFieldAttribute()\n    {\n        Kind = DuckKind.Field;\n    }\n}\n\n/// <summary>\n/// Duck kind\n/// </summary>\npublic enum DuckKind\n{\n    /// <summary>\n    /// Property\n    /// </summary>\n    Property,\n\n    /// <summary>\n    /// Field\n    /// </summary>\n    Field\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Labels on Transaction in C#\nDESCRIPTION: Demonstrates how to set labels on a transaction using different data types (string, boolean, integer) with the SetLabel method.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\ntransaction.SetLabel(\"stringSample\", \"bar\");\ntransaction.SetLabel(\"boolSample\", true);\ntransaction.SetLabel(\"intSample\", 42);\n```\n\n----------------------------------------\n\nTITLE: Creating a Proxy Interface for Public Type in C#\nDESCRIPTION: This snippet defines an interface 'IMyProxy' that serves as a proxy for the public type, including the generic 'Wrap' method.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMyProxy\n{\n    Tuple<T1, T2> Wrap<T1, T2>(T1 a, T2 b);\n}\n```\n\n----------------------------------------\n\nTITLE: Duck Typing Proxy Definition Example in C#\nDESCRIPTION: Demonstrates various uses of the DuckAttribute and DuckFieldAttribute in a proxy interface definition. It shows how to bind to fields, properties, and methods, including handling overloads, generics, and chaining.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMyProxy\n{\n    // ***\n    // *** Field binding\n    // ***\n\n    [DuckField(Name = \"_sampleStaticField\")]\n    string MyStaticField { get; }\n\n    [DuckField(Name = \"_normalField\")]\n    int NormalFieldWithGetterAndSetter { get; set; }\n\n\n\n    // ***\n    // *** Property binding (by default the Kind is Property so we can ignore it)\n    // ***\n\n    [Duck(Name = \"Instance\")]\n    string MyStaticInstanceProperty { get; }\n\n    // If we don´t use the duck attribute it will try to find a property with the same name in the target type\n    string MyProperty { get; set; }\n\n    // If the original property returns a type that we don´t have at compile time,\n    // we can pass a proxy definition and that original value will be wrapped with the proxy\n    // as well (DuckType chaining).\n    IObscureObject CustomData { get; }\n\n    // Indexers are supported as well\n    string this[string index] { get; set; }\n\n\n\n    // ***\n    // *** Method binding\n    // ***\n\n    // support overloads of a method\n    void Add(string name, int obj);\n    void Add(string name, string obj = \"none\");\n\n    // In order to resolve an ambiguity of a call we can specify the parameters we want to match.\n    [Duck(ParameterTypeNames = new string[] { \"System.String\", \"MyNamespace.MyType, MyAssembly\" })]\n    void Add(string name, object obj);\n\n    // We can also use the name to map to another method name.\n    [Duck(Name = \"InternalGetReference\")]\n    void GetReference(ref int value);\n\n    // The Proxy definition can support generics only if the instance type\n    // is *Public* \n    Tuple<T1, T2> Wrap<T1, T2>(T1 a, T2 b);\n\n    // If we need to call a generic method from a non public type\n    // we can use the DuckAttribute as well:\n    [Duck(Name = \"Wrap\", GenericParameterTypeNames = new[] { \"System.Int32\", \"System.String\" })]\n    Tuple<int, string> WrapIntString(int a, string b);\n\n\n    // If the original call returns or uses a parameter that we don´t have at compile time,\n    // we can pass a proxy definition and that original value will be wrapped with the proxy\n    // as well (DuckType chaining).\n    bool TryGetPrivateObscure(out IObscureObject obj);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ElasticApmModule with managedHandler condition\nDESCRIPTION: Configuration to limit APM monitoring to only dynamic content requests by adding the managedHandler preCondition. This excludes static content like images and HTML files from monitoring.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-asp-dot-net.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <system.webServer>\n        <modules>\n            <add name=\"ElasticApmModule\" type=\"Elastic.Apm.AspNetFullFramework.ElasticApmModule, Elastic.Apm.AspNetFullFramework\" preCondition=\"managedHandler\" />\n        </modules>\n    </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Defining a Private Type with Generic Method in C#\nDESCRIPTION: This snippet defines a private class 'PrivateType' with a generic method 'Wrap' that takes two parameters and returns a Tuple.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprivate class PrivateType\n{\n    public Tuple<T1, T2> Wrap<T1, T2>(T1 a, T2 b) \n    {\n        return Tuple.Create<T1, T2>(default, default);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Property Access in .NET Framework vs .NET Core\nDESCRIPTION: A detailed performance benchmark table comparing property access methods between .NET Framework 4.7.2 and .NET Core 3.1. The table shows execution times in nanoseconds for various property access operations including getters, setters, static properties, and indexers with different access modifiers.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n|       SetProtectedProperty | .NET Core 3.1 |         Setter | Internal | 2.890 ns | 0.0454 ns | 0.0379 ns |  0.91 |    0.02 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|         SetPrivateProperty |    .NET 4.7.2 |         Setter | Internal | 3.170 ns | 0.0466 ns | 0.0413 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|         SetPrivateProperty | .NET Core 3.1 |         Setter | Internal | 2.948 ns | 0.0720 ns | 0.0674 ns |  0.93 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|         GetIndexerProperty |    .NET 4.7.2 | Indexer Getter | Internal | 3.274 ns | 0.0724 ns | 0.0642 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|         GetIndexerProperty | .NET Core 3.1 | Indexer Getter | Internal | 3.282 ns | 0.0818 ns | 0.0765 ns |  1.00 |    0.01 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|         SetIndexerProperty |    .NET 4.7.2 | Indexer Setter | Internal | 3.087 ns | 0.0686 ns | 0.0674 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|         SetIndexerProperty | .NET Core 3.1 | Indexer Setter | Internal | 3.184 ns | 0.0323 ns | 0.0252 ns |  1.03 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|    GetPublicStaticProperty |    .NET 4.7.2 |  Static Getter |  Private | 2.876 ns | 0.0561 ns | 0.0497 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|    GetPublicStaticProperty | .NET Core 3.1 |  Static Getter |  Private | 4.013 ns | 0.0914 ns | 0.0810 ns |  1.40 |    0.04 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|  GetInternalStaticProperty |    .NET 4.7.2 |  Static Getter |  Private | 2.851 ns | 0.0339 ns | 0.0283 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|  GetInternalStaticProperty | .NET Core 3.1 |  Static Getter |  Private | 4.019 ns | 0.0669 ns | 0.0559 ns |  1.41 |    0.02 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n| GetProtectedStaticProperty |    .NET 4.7.2 |  Static Getter |  Private | 2.838 ns | 0.0373 ns | 0.0311 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n| GetProtectedStaticProperty | .NET Core 3.1 |  Static Getter |  Private | 4.035 ns | 0.0962 ns | 0.0900 ns |  1.42 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|   GetPrivateStaticProperty |    .NET 4.7.2 |  Static Getter |  Private | 2.918 ns | 0.0825 ns | 0.0731 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|   GetPrivateStaticProperty | .NET Core 3.1 |  Static Getter |  Private | 4.134 ns | 0.0657 ns | 0.0614 ns |  1.42 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|    SetPublicStaticProperty |    .NET 4.7.2 |  Static Setter |  Private | 3.219 ns | 0.0472 ns | 0.0418 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|    SetPublicStaticProperty | .NET Core 3.1 |  Static Setter |  Private | 3.989 ns | 0.0664 ns | 0.0588 ns |  1.24 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|  SetInternalStaticProperty |    .NET 4.7.2 |  Static Setter |  Private | 3.271 ns | 0.0901 ns | 0.0843 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|  SetInternalStaticProperty | .NET Core 3.1 |  Static Setter |  Private | 4.304 ns | 0.0783 ns | 0.0694 ns |  1.32 |    0.04 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n| SetProtectedStaticProperty |    .NET 4.7.2 |  Static Setter |  Private | 3.241 ns | 0.0724 ns | 0.0677 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n| SetProtectedStaticProperty | .NET Core 3.1 |  Static Setter |  Private | 4.180 ns | 0.0391 ns | 0.0305 ns |  1.29 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|   SetPrivateStaticProperty |    .NET 4.7.2 |  Static Setter |  Private | 3.161 ns | 0.0371 ns | 0.0310 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|   SetPrivateStaticProperty | .NET Core 3.1 |  Static Setter |  Private | 4.186 ns | 0.0527 ns | 0.0412 ns |  1.33 |    0.01 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|          GetPublicProperty |    .NET 4.7.2 |         Getter |  Private | 3.245 ns | 0.0466 ns | 0.0389 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|          GetPublicProperty | .NET Core 3.1 |         Getter |  Private | 3.320 ns | 0.0889 ns | 0.0988 ns |  1.03 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|        GetInternalProperty |    .NET 4.7.2 |         Getter |  Private | 3.237 ns | 0.0475 ns | 0.0371 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|        GetInternalProperty | .NET Core 3.1 |         Getter |  Private | 3.301 ns | 0.0874 ns | 0.0972 ns |  1.01 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|       GetProtectedProperty |    .NET 4.7.2 |         Getter |  Private | 3.255 ns | 0.0309 ns | 0.0241 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|       GetProtectedProperty | .NET Core 3.1 |         Getter |  Private | 3.295 ns | 0.0436 ns | 0.0340 ns |  1.01 |    0.01 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|         GetPrivateProperty |    .NET 4.7.2 |         Getter |  Private | 3.280 ns | 0.0656 ns | 0.0614 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|         GetPrivateProperty | .NET Core 3.1 |         Getter |  Private | 3.309 ns | 0.0864 ns | 0.0766 ns |  1.01 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|          SetPublicProperty |    .NET 4.7.2 |         Setter |  Private | 3.205 ns | 0.0679 ns | 0.0635 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|          SetPublicProperty | .NET Core 3.1 |         Setter |  Private | 2.959 ns | 0.0682 ns | 0.0605 ns |  0.93 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|        SetInternalProperty |    .NET 4.7.2 |         Setter |  Private | 3.184 ns | 0.0479 ns | 0.0400 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|        SetInternalProperty | .NET Core 3.1 |         Setter |  Private | 2.943 ns | 0.0632 ns | 0.0592 ns |  0.92 |    0.03 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|       SetProtectedProperty |    .NET 4.7.2 |         Setter |  Private | 3.247 ns | 0.0927 ns | 0.1206 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|       SetProtectedProperty | .NET Core 3.1 |         Setter |  Private | 2.934 ns | 0.0608 ns | 0.0539 ns |  0.89 |    0.04 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|         SetPrivateProperty |    .NET 4.7.2 |         Setter |  Private | 3.182 ns | 0.0711 ns | 0.0594 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|         SetPrivateProperty | .NET Core 3.1 |         Setter |  Private | 2.938 ns | 0.0562 ns | 0.0499 ns |  0.92 |    0.02 |     - |     - |     - |         - |\n|                            |               |                |          |          |           |           |       |         |       |       |       |           |\n|         GetIndexerProperty |    .NET 4.7.2 | Indexer Getter |  Private | 3.334 ns | 0.0826 ns | 0.0772 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Span in Elastic APM .NET\nDESCRIPTION: Retrieves the currently active span using the Elastic APM .NET agent's Tracer API.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar span = Elastic.Apm.Agent.Tracer.CurrentSpan;\n```\n\n----------------------------------------\n\nTITLE: Creating a Proxy Interface for Private Type in C#\nDESCRIPTION: This snippet defines an interface 'IMyProxy' that serves as a proxy for the private type, with specific method implementations for different generic type combinations.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMyProxy\n{\n    // We have to define all kind of call we want to make to the target instance\n\n    [Duck(Name = \"Wrap\", GenericParameterTypeNames = new[] { \"System.Int32\", \"System.String\" })]\n    Tuple<int, string> WrapIntString(int a, string b);\n\n    [Duck(Name = \"Wrap\", GenericParameterTypeNames = new[] { \"System.Int32\", \"System.Int32\" })]\n    Tuple<int, int> WrapIntInt(int a, int b);\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Windows Service using PowerShell\nDESCRIPTION: This PowerShell command restarts a specified Windows service to apply the newly set environment variables.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nRestart-Service <service-name>\n```\n\n----------------------------------------\n\nTITLE: Grok Processor Configuration for Extracting Trace IDs from Logs\nDESCRIPTION: This JSON configuration for the Elasticsearch ingest node's grok processor extracts trace and transaction IDs from log messages. It defines patterns to match the IDs and store them in separate fields.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/log-correlation-manual.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"...\",\n  \"processors\": [\n    {\n      \"grok\": {\n        \"field\": \"message\",\n        \"patterns\": [\"%{LOGLEVEL:log.level} \\\\[trace.id=%{TRACE_ID:trace.id}(?: transaction.id=%{SPAN_ID:transaction.id})?\\\\] %{GREEDYDATA:message}\"],\n        \"pattern_definitions\": {\n          \"TRACE_ID\": \"[0-9A-Fa-f]{32}\",\n          \"SPAN_ID\": \"[0-9A-Fa-f]{16}\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Popper.js with DOM Elements\nDESCRIPTION: This example demonstrates how to initialize Popper.js by selecting existing DOM elements and positioning a popper element relative to a reference element. It shows the core functionality of creating a new Popper instance with reference and target elements.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/iis/AspNetFullFrameworkSampleApp/Scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar reference = document.querySelector('.my-button');\nvar popper = document.querySelector('.my-popper');\nvar anotherPopper = new Popper(\n    reference,\n    popper,\n    {\n        // popper options here\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Diffing Built Assemblies Against Released Versions\nDESCRIPTION: This command compares locally built assemblies with the latest relevant released version on NuGet. It uses the netstandard2.0 TFM by default, but a different framework can be specified.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/build/README.md#2025-04-22_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat diff\n```\n\n----------------------------------------\n\nTITLE: Running the Sample Application with .NET 8.0\nDESCRIPTION: Executes the sample application using the dotnet run command, specifying the .NET 8.0 framework. This command should be run from the sample project directory.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/startuphook/Elastic.Apm.StartupHook.Sample/README.md#2025-04-22_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\ndotnet run -f net8.0\n```\n\n----------------------------------------\n\nTITLE: Defining Default Excluded Processes for Elastic APM .NET Profiler\nDESCRIPTION: Lists the process names that are always excluded from profiling by default in the Elastic APM .NET Agent.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n* powershell.exe\n* ServerManager.exe\n* ReportingServicesService.exe\n* RSHostingService.exe\n* RSMananagement.exe\n* RSPortal.exe\n* RSConfigTool.exe\n```\n\n----------------------------------------\n\nTITLE: Diffing Specific Assemblies\nDESCRIPTION: This command diffs only specified assemblies by providing their NuGet package IDs.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/build/README.md#2025-04-22_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\nbuild.bat diff --packageids Elastic.Apm --packageids Elastic.SqlClient\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Build Targets\nDESCRIPTION: This command lists all supported build targets for the project.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/build/README.md#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat --list-targets\n```\n\n----------------------------------------\n\nTITLE: Restarting IIS using Command Prompt\nDESCRIPTION: These commands stop and start IIS to apply the newly set environment variables for hosted applications.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-auto-instrumentation.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnet stop /y was\nnet start w3svc\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login and Subscription Management\nDESCRIPTION: Commands for authenticating with Azure CLI and managing subscription settings. Includes login, setting default subscription, and verifying current subscription.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/azure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naz login\n```\n\nLANGUAGE: shell\nCODE:\n```\naz account set --subscription {YourSubscriptionId}\n```\n\nLANGUAGE: shell\nCODE:\n```\naz account show\n```\n\n----------------------------------------\n\nTITLE: Displaying Dependencies for a Specific Target\nDESCRIPTION: This command shows the dependencies for a specified build target.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/build/README.md#2025-04-22_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat <target> --list-dependencies\n```\n\n----------------------------------------\n\nTITLE: Setting Labels on Transaction (Legacy) in C#\nDESCRIPTION: Demonstrates the legacy method of setting labels on a transaction using the Labels dictionary property within a CaptureTransaction call.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/public-api.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nAgent.Tracer\n .CaptureTransaction(TransactionName, TransactionType,\n    transaction =>\n    {\n        transaction.Labels[\"foo\"] = \"bar\";\n        //application code that is captured as a transaction\n    });\n```\n\n----------------------------------------\n\nTITLE: Running Azure Tests with .NET CLI\nDESCRIPTION: Command for executing Azure-specific tests using dotnet test with filters to target Azure-related test cases and specific framework versions.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/azure/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet test -c Release --filter:\"FullyQualifiedName~Elastic.Apm.Azure\" -f net8.0\n```\n\n----------------------------------------\n\nTITLE: Listing Build Targets in Windows Using build.bat\nDESCRIPTION: Command to display available build targets using the build.bat script on Windows. This helps developers understand what operations can be performed with the build system.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\\build.bat --list-targets\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenTelemetry Bridge in JSON Configuration\nDESCRIPTION: JSON configuration example showing how to disable the OpenTelemetry Bridge through appsettings.json. The configuration includes server URL, secret token, and setting OpenTelemetryBridgeEnabled to false.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/opentelemetry-bridge.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"ElasticApm\":\n    {\n      \"ServerUrl\":  \"http://myapmserver:8200\",\n      \"SecretToken\":  \"apm-server-secret-token\",\n      \"OpenTelemetryBridgeEnabled\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Elastic.Clients.Elasticsearch Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the Elastic.Clients.Elasticsearch NuGet package using a Markdown link. It provides a direct link to the package on nuget.org.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/instrumentations/Elastic.Clients.Elasticsearch.Tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`Elastic.Clients.Elasticsearch`](https://www.nuget.org/packages/Elastic.Clients.Elasticsearch)\n```\n\n----------------------------------------\n\nTITLE: Building Elastic APM Agent Zip File on macOS or Linux\nDESCRIPTION: This command runs the build script to create a zip file containing the Elastic APM Agent for macOS or Linux. The resulting zip file will be placed in the build/output directory.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/startuphook/ElasticApmAgentStartupHook/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh agent-zip\n```\n\n----------------------------------------\n\nTITLE: Field Access Benchmarks Table\nDESCRIPTION: Benchmark results table showing method execution times in nanoseconds, comparing field access operations between .NET Framework 4.7.2 and .NET Core 3.1. Includes metrics for memory allocation and relative performance ratios.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n|   SetPrivateStaticField | .NET Core 3.1 | Static Setter |   Public | 3.933 ns | 0.0221 ns | 0.0172 ns |  1.33 |    0.03 |     - |     - |     - |         - |\n|          GetPublicField |    .NET 4.7.2 |        Getter |   Public | 2.326 ns | 0.0442 ns | 0.0369 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|          GetPublicField | .NET Core 3.1 |        Getter |   Public | 2.421 ns | 0.0646 ns | 0.0573 ns |  1.04 |    0.04 |     - |     - |     - |         - |\n```\n\n----------------------------------------\n\nTITLE: Configuring BenchmarkDotNet for .NET Framework and .NET Core\nDESCRIPTION: This snippet shows the configuration for BenchmarkDotNet, specifying the OS, CPU, and .NET runtimes used for the benchmarks. It sets up jobs for both .NET Framework 4.8 and .NET Core 3.1.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.19041.508 (2004/?/20H1)\nIntel Core i7-1068NG7 CPU 2.30GHz, 1 CPU, 2 logical and 2 physical cores\n.NET Core SDK=3.1.402\n  [Host]     : .NET Core 3.1.8 (CoreCLR 4.700.20.41105, CoreFX 4.700.20.41903), X64 RyuJIT\n  Job-LJAVIR : .NET Framework 4.8 (4.8.4220.0), X64 RyuJIT\n  Job-OHOUFK : .NET Core 3.1.8 (CoreCLR 4.700.20.41105, CoreFX 4.700.20.41903), X64 RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in Windows Command Prompt\nDESCRIPTION: Command to set the ELASTIC_APM_TESTS_FULL_FRAMEWORK_ENABLED environment variable to true for the current session in a Windows command prompt.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/iis/Elastic.Apm.AspNetFullFramework.Tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset ELASTIC_APM_TESTS_FULL_FRAMEWORK_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Building Agent Zip File\nDESCRIPTION: This command builds a versioned zip file containing all assemblies needed for auto-instrumenting an application using DOTNET_STARTUP_HOOKS.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/build/README.md#2025-04-22_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat agent-zip\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Table for Field Access Performance\nDESCRIPTION: This markdown table presents the benchmark results for various field access scenarios. It compares the performance of getting and setting fields with different access modifiers across .NET Framework 4.7.2 and .NET Core 3.1 runtimes.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n|                  Method |       Runtime |    Categories |    proxy |     Mean |     Error |    StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated |\n|------------------------ |-------------- |-------------- |--------- |---------:|----------:|----------:|------:|--------:|------:|------:|------:|----------:|\n|    GetPublicStaticField |    .NET 4.7.2 | Static Getter | Internal | 3.207 ns | 0.0623 ns | 0.0553 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|    GetPublicStaticField | .NET Core 3.1 | Static Getter | Internal | 4.052 ns | 0.0748 ns | 0.0700 ns |  1.27 |    0.03 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|  GetInternalStaticField |    .NET 4.7.2 | Static Getter | Internal | 3.233 ns | 0.0774 ns | 0.0724 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|  GetInternalStaticField | .NET Core 3.1 | Static Getter | Internal | 3.987 ns | 0.0723 ns | 0.0677 ns |  1.23 |    0.04 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n| GetProtectedStaticField |    .NET 4.7.2 | Static Getter | Internal | 3.229 ns | 0.0607 ns | 0.0567 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n| GetProtectedStaticField | .NET Core 3.1 | Static Getter | Internal | 4.004 ns | 0.1010 ns | 0.0895 ns |  1.24 |    0.04 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|   GetPrivateStaticField |    .NET 4.7.2 | Static Getter | Internal | 3.209 ns | 0.0288 ns | 0.0255 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|   GetPrivateStaticField | .NET Core 3.1 | Static Getter | Internal | 4.274 ns | 0.0539 ns | 0.0421 ns |  1.33 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|    SetPublicStaticField |    .NET 4.7.2 | Static Setter | Internal | 2.941 ns | 0.0507 ns | 0.0423 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|    SetPublicStaticField | .NET Core 3.1 | Static Setter | Internal | 3.966 ns | 0.0788 ns | 0.0737 ns |  1.34 |    0.03 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|  SetInternalStaticField |    .NET 4.7.2 | Static Setter | Internal | 2.952 ns | 0.0671 ns | 0.0627 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|  SetInternalStaticField | .NET Core 3.1 | Static Setter | Internal | 3.973 ns | 0.0804 ns | 0.0752 ns |  1.35 |    0.04 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n| SetProtectedStaticField |    .NET 4.7.2 | Static Setter | Internal | 2.880 ns | 0.0472 ns | 0.0394 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n| SetProtectedStaticField | .NET Core 3.1 | Static Setter | Internal | 3.872 ns | 0.0359 ns | 0.0300 ns |  1.34 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|   SetPrivateStaticField |    .NET 4.7.2 | Static Setter | Internal | 2.945 ns | 0.0625 ns | 0.0585 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|   SetPrivateStaticField | .NET Core 3.1 | Static Setter | Internal | 3.966 ns | 0.0846 ns | 0.0791 ns |  1.35 |    0.04 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|          GetPublicField |    .NET 4.7.2 |        Getter | Internal | 3.405 ns | 0.0599 ns | 0.0531 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|          GetPublicField | .NET Core 3.1 |        Getter | Internal | 3.229 ns | 0.0571 ns | 0.0477 ns |  0.95 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|        GetInternalField |    .NET 4.7.2 |        Getter | Internal | 3.400 ns | 0.0465 ns | 0.0389 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|        GetInternalField | .NET Core 3.1 |        Getter | Internal | 3.549 ns | 0.0657 ns | 0.0615 ns |  1.05 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|       GetProtectedField |    .NET 4.7.2 |        Getter | Internal | 3.384 ns | 0.0459 ns | 0.0383 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|       GetProtectedField | .NET Core 3.1 |        Getter | Internal | 3.278 ns | 0.0503 ns | 0.0392 ns |  0.97 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|         GetPrivateField |    .NET 4.7.2 |        Getter | Internal | 3.425 ns | 0.0545 ns | 0.0510 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|         GetPrivateField | .NET Core 3.1 |        Getter | Internal | 3.282 ns | 0.0761 ns | 0.0675 ns |  0.96 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|          SetPublicField |    .NET 4.7.2 |        Setter | Internal | 3.392 ns | 0.0649 ns | 0.0575 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|          SetPublicField | .NET Core 3.1 |        Setter | Internal | 3.164 ns | 0.0509 ns | 0.0451 ns |  0.93 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|        SetInternalField |    .NET 4.7.2 |        Setter | Internal | 3.422 ns | 0.0727 ns | 0.0680 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|        SetInternalField | .NET Core 3.1 |        Setter | Internal | 3.166 ns | 0.0430 ns | 0.0359 ns |  0.92 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|       SetProtectedField |    .NET 4.7.2 |        Setter | Internal | 3.384 ns | 0.0392 ns | 0.0306 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|       SetProtectedField | .NET Core 3.1 |        Setter | Internal | 3.180 ns | 0.0520 ns | 0.0486 ns |  0.94 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|         SetPrivateField |    .NET 4.7.2 |        Setter | Internal | 3.392 ns | 0.0548 ns | 0.0485 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|         SetPrivateField | .NET Core 3.1 |        Setter | Internal | 3.155 ns | 0.0300 ns | 0.0234 ns |  0.93 |    0.02 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|    GetPublicStaticField |    .NET 4.7.2 | Static Getter |  Private | 3.163 ns | 0.0390 ns | 0.0326 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|    GetPublicStaticField | .NET Core 3.1 | Static Getter |  Private | 4.310 ns | 0.0717 ns | 0.0671 ns |  1.36 |    0.03 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n|  GetInternalStaticField |    .NET 4.7.2 | Static Getter |  Private | 3.220 ns | 0.0737 ns | 0.0689 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n|  GetInternalStaticField | .NET Core 3.1 | Static Getter |  Private | 3.999 ns | 0.0327 ns | 0.0255 ns |  1.24 |    0.03 |     - |     - |     - |         - |\n|                         |               |               |          |          |           |           |       |         |       |       |       |           |\n| GetProtectedStaticField |    .NET 4.7.2 | Static Getter |  Private | 3.198 ns | 0.0458 ns | 0.0383 ns |  1.00 |    0.00 |     - |     - |     - |         - |\n| GetProtectedStaticField | .NET Core 3.1 | Static Getter |  Private | 4.082 ns | 0.0989 ns | 0.0925 ns |  1.27 |    0.02 |     - |     - |     - |         - |\n```\n\n----------------------------------------\n\nTITLE: Running .NET Tests for Elastic APM ASP.NET Full Framework\nDESCRIPTION: Command to run the Elastic.Apm.AspNetFullFramework.Tests using dotnet test, specifying verbosity, result directory, and diagnostic log output.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/iis/Elastic.Apm.AspNetFullFramework.Tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ndotnet.exe test test\\Elastic.Apm.AspNetFullFramework.Tests -v n -r target -d target\\diag.log --no-build\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Build Script in Windows\nDESCRIPTION: This command shows usage and command line arguments for the build script.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/build/README.md#2025-04-22_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat --help\n```\n\n----------------------------------------\n\nTITLE: Configuring BenchmarkDotNet for .NET Property Access Benchmarks\nDESCRIPTION: This snippet shows the configuration for BenchmarkDotNet, specifying the version, operating system, and .NET runtimes used for the benchmarks. It sets up comparisons between .NET Framework 4.8 and .NET Core 3.1.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.19041.508 (2004/?/20H1)\nIntel Core i7-1068NG7 CPU 2.30GHz, 1 CPU, 2 logical and 2 physical cores\n.NET Core SDK=3.1.402\n  [Host]     : .NET Core 3.1.8 (CoreCLR 4.700.20.41105, CoreFX 4.700.20.41903), X64 RyuJIT\n  Job-QIOTKF : .NET Framework 4.8 (4.8.4220.0), X64 RyuJIT\n  Job-FEKUVA : .NET Core 3.1.8 (CoreCLR 4.700.20.41105, CoreFX 4.700.20.41903), X64 RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Executing Release Script Locally in Bash\nDESCRIPTION: Commands to run the release script locally, including packing and deploying with API key and server URL.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/RELEASING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh pack\n.ci/linux/deploy.sh <API_KEY> <SERVER_URL>\n```\n\n----------------------------------------\n\nTITLE: Example Branch Update for 1.24.0 Release in Bash\nDESCRIPTION: Specific example of updating the 1.x branch for the 1.24.0 release, including deleting the local branch first.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -D 1.x\ngit checkout v1.24.0 -b 1.x\ngit push --force  upstream 1.x\n```\n\n----------------------------------------\n\nTITLE: Defining a Public Type with Generic Method in C#\nDESCRIPTION: This snippet defines a public class 'PublicType' with a generic method 'Wrap' that takes two parameters and returns a Tuple.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PublicType\n{\n    public Tuple<T1, T2> Wrap<T1, T2>(T1 a, T2 b) \n    {\n        return Tuple.Create<T1, T2>(default, default);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Branch for Minor/Patch Release in Bash\nDESCRIPTION: Commands to update the major version branch (e.g., 1.x) to the currently released tag for minor and patch releases.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout v<major>.<minor>.<bug>(-<suffix>)? -b <major>.x\n\ngit push --force  upstream 1.x\n```\n\n----------------------------------------\n\nTITLE: Defining Public and Internal Classes for Duck Chaining in C#\nDESCRIPTION: This snippet defines a public class 'MyHandler' and an internal class 'MyHandlerConfiguration' to demonstrate duck chaining for accessing non-public types.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyHandler \n{\n    public string Name { get; set; }\n\n    internal MyHandlerConfiguration Configuration { get; }\n}\n\ninternal class MyHandlerConfiguration \n{\n    public int MaxConnections { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Elasticsearch.Net Package in Markdown\nDESCRIPTION: This snippet shows how to reference the Elasticsearch.Net package using a Markdown link. It's mentioned in the context of the 'old' Elasticsearch client instrumentation.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/instrumentations/Elastic.Clients.Elasticsearch.Tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`Elasticsearch.Net`](Elasticsearch.Net)\n```\n\n----------------------------------------\n\nTITLE: Defining License Header for Elasticsearch APM Agent .NET in C#\nDESCRIPTION: This code snippet defines the license header for the Elasticsearch APM Agent for .NET project. It specifies that the file is licensed under the Apache 2.0 License by Elasticsearch B.V and directs users to the LICENSE file for more information.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/build/file-header.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n```\n\n----------------------------------------\n\nTITLE: Benchmark Environment Configuration in INI Format\nDESCRIPTION: Configuration details for the benchmarking environment, including BenchmarkDotNet version, operating system information, CPU specifications, and the .NET runtime versions being tested.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/src/profiler/Elastic.Apm.Profiler.Managed/DuckTyping/README.md#2025-04-22_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.19041.508 (2004/?/20H1)\nIntel Core i7-1068NG7 CPU 2.30GHz, 1 CPU, 2 logical and 2 physical cores\n.NET Core SDK=3.1.402\n  [Host]     : .NET Core 3.1.8 (CoreCLR 4.700.20.41105, CoreFX 4.700.20.41903), X64 RyuJIT\n  Job-CGLGGF : .NET Framework 4.8 (4.8.4220.0), X64 RyuJIT\n  Job-GEDFFR : .NET Core 3.1.8 (CoreCLR 4.700.20.41105, CoreFX 4.700.20.41903), X64 RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Framework Integration with Custom Style Application\nDESCRIPTION: This example demonstrates how to integrate Popper.js with frameworks like React by disabling the default style application and implementing a custom modifier. This approach prevents DOM manipulation conflicts by letting the framework handle the styling based on Popper's calculations.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/iis/AspNetFullFrameworkSampleApp/Scripts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction applyReactStyle(data) {\n    // export data in your framework and use its content to apply the style to your popper\n};\n\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    modifiers: {\n        applyStyle: { enabled: false },\n        applyReactStyle: {\n            enabled: true,\n            fn: applyReactStyle,\n            order: 800,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Callbacks with Popper.js\nDESCRIPTION: This snippet shows how to use the onCreate and onUpdate callbacks in Popper.js. The onCreate callback is triggered after initialization, while onUpdate is called on subsequent position updates, providing access to positioning data for further customization.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/test/iis/AspNetFullFrameworkSampleApp/Scripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst reference = document.querySelector('.my-button');\nconst popper = document.querySelector('.my-popper');\nnew Popper(reference, popper, {\n    onCreate: (data) => {\n        // data is an object containing all the informations computed\n        // by Popper.js and used to style the popper and its arrow\n        // The complete description is available in Popper.js documentation\n    },\n    onUpdate: (data) => {\n        // same as `onCreate` but called on subsequent updates\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Trace and Transaction IDs for Unstructured Logs in C#\nDESCRIPTION: This snippet demonstrates how to include trace and transaction IDs in unstructured log messages using Console.WriteLine. It assumes you have a reference to the current transaction.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/log-correlation-manual.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar currentTransaction = //Get Current transaction, e.g.: Agent.Tracer.CurrentTransaction;\n\nConsole.WriteLine($\"ERROR [trace.id={currentTransaction.TraceId} transaction.id={currentTransaction.Id}] an error occurred\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trace and Transaction IDs in C#\nDESCRIPTION: This method retrieves the current trace and transaction IDs from the Elastic APM agent. It checks if the agent is configured and if there's an active transaction before returning the IDs.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/log-correlation-manual.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic (string traceId, string transactionId) GetTraceIds()\n{\n\tif (!Agent.IsConfigured) return default;\n\tif (Agent.Tracer.CurrentTransaction == null) return default;\n\treturn (Agent.Tracer.CurrentTransaction.TraceId, Agent.Tracer.CurrentTransaction.Id);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Elastic APM Azure Functions Package in .NET\nDESCRIPTION: Adds the Elastic.Apm.Azure.Functions NuGet package to an Azure Functions project using the dotnet CLI.\nSOURCE: https://github.com/elastic/apm-agent-dotnet/blob/main/docs/reference/setup-azure-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Elastic.Apm.Azure.Functions\n```"
  }
]