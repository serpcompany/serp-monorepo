[
  {
    "owner": "dotansimha",
    "repo": "graphql-code-generator",
    "content": "TITLE: Creating a TypeScript codegen.ts Configuration File for GraphQL Code Generator\nDESCRIPTION: This TypeScript snippet shows how to define a codegen.ts configuration file using the CodegenConfig type from @graphql-codegen/cli. It sets the GraphQL schema source, specifies document patterns, and determines output generation using a 'client' preset for files in ./src/gql/. The schema can be provided as a URL or file path. No additional dependencies are needed beyond @graphql-codegen/cli. Inputs: The config object fields (schema, documents, generates). Outputs: GraphQL code generated in the specified output path. All required fields must be properly filled, and the configuration must be exported as default.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/codegen-config.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client'\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator\nDESCRIPTION: This TypeScript code snippet configures the GraphQL Code Generator to generate client-side code based on GraphQL schema and documents. It defines the schema, documents, and generation targets with specific configurations like the `preset`, `plugins`, and `presetConfig` for persisted documents and document transforms.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type CodegenConfig } from '@graphql-codegen/cli'\nimport { addTypenameSelectionDocumentTransform } from '@graphql-codegen/client-preset'\n\nconst config: CodegenConfig = {\n  schema: './**/*.graphqls',\n  documents: ['./**/*.{ts,tsx}'],\n  ignoreNoDocuments: true,\n  generates: {\n    './gql/': {\n      preset: 'client',\n      plugins: [],\n      presetConfig: {\n        persistedDocuments: true\n      },\n      documentTransforms: [addTypenameSelectionDocumentTransform]\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Implementing Generated Object Type Resolver Stubs (TypeScript)\nDESCRIPTION: This snippet shows a generated resolver skeleton for a User object type. It imports UserResolvers and exports a type-safe resolver object for all User type fields. The codegen process enforces that resolvers are explicitly implemented by emitting incomplete objects that must be filled by users.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { UserResolvers } from './../../types.generated'\nexport const User: UserResolvers = {\n  /* Implement User resolver logic here */\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query Operations with React Query in TypeScript (TSX)\nDESCRIPTION: This TSX snippet defines a React component that uses React Query's `useQuery` hook to execute a GraphQL query. The query is defined with the `graphql` function as `PeopleCountQuery`. The hook's `queryFn` calls the `execute` function, returning typed query results. The component renders the total count of people from the query data, leveraging full TypeScript type-safety for data access. This example demonstrates integration of generated GraphQL client types with React Query for efficient and typed client side data fetching.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-query.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery } from '@tanstack/react-query'\nimport { graphql } from './graphql'\nimport { execute } from './graphql/execute'\n\nconst PeopleCountQuery = graphql(`\n  query PeopleCount {\n    allPeople {\n      totalCount\n    }\n  }\n`)\n\nfunction App() {\n  const { data } = useQuery({\n    queryKey: ['films'],\n    queryFn: () => execute(PeopleCountQuery)\n  })\n\n  return <div>There are {data?.allPeople.totalCount} people</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator with React Query Client Preset in TypeScript\nDESCRIPTION: This TypeScript snippet defines the GraphQL Code Generator configuration object using the `CodegenConfig` type from `@graphql-codegen/cli`. It configures the tool to fetch the GraphQL schema from a specified URL, watch `.tsx` documents for queries, and generate client preset files under `src/graphql/` using string documents mode. It additionally creates a schema file `schema.graphql` with directives included. This configuration enables seamless generation of typed query hooks compatible with React Query and supports IDE GraphQL autocomplete. Required dependencies include `@graphql-codegen/cli` and related plugins.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-query.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://graphql.org/graphql/',\n  documents: ['src/**/*.tsx'],\n  ignoreNoDocuments: true,\n  generates: {\n    './src/graphql/': {\n      preset: 'client',\n      config: {\n        documentMode: 'string'\n      }\n    },\n    './schema.graphql': {\n      plugins: ['schema-ast'],\n      config: {\n        includeDirectives: true\n      }\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Defining codegen Configuration Object (TypeScript)\nDESCRIPTION: Sets up the configuration for the programmatic code generation process using `@graphql-codegen/core`. It includes defining the output filename, providing the GraphQL schema (as a parsed AST), listing required plugins with their configurations, and mapping plugin names to their imported implementations. This object guides the `codegen` function on what and how to generate. Requires `graphql` and the specific plugin packages (e.g., `@graphql-codegen/typescript`).\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/programmatic-usage.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { buildSchema, printSchema, parse, GraphQLSchema } from 'graphql'\nimport * as typescriptPlugin from '@graphql-codegen/typescript'\n\nconst schema: GraphQLSchema = buildSchema(`type A { name: String }`)\nconst outputFile = 'relative/pathTo/filename.ts'\nconst config = {\n  documents: [],\n  config: {},\n  // used by a plugin internally, although the 'typescript' plugin currently\n  // returns the string output, rather than writing to a file\n  filename: outputFile,\n  schema: parse(printSchema(schema)),\n  plugins: [\n    // Each plugin should be an object\n    {\n      typescript: {} // Here you can pass configuration to the plugin\n    }\n  ],\n  pluginMap: {\n    typescript: typescriptPlugin\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generator with a Custom Config File (Shell)\nDESCRIPTION: This shell command demonstrates invoking GraphQL Code Generator with a specific configuration file using the --config (or -c) CLI flag. The codegen tool will use the specified ./path/to/codegen.ts file instead of the default configuration. The prerequisite is npx installed and the graphql-code-generator package available in your node_modules. The input is the path to the config file, and the command outputs the generated code as specified by the config file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/codegen-config.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx graphql-code-generator --config ./path/to/codegen.ts\n```\n\n----------------------------------------\n\nTITLE: GraphQL Code Generator Configuration\nDESCRIPTION: This TypeScript configuration file (`codegen.ts`) configures GraphQL Code Generator. It specifies the schema endpoint, the documents to scan for GraphQL operations, and the output directory. The `preset: 'client'` option indicates that the generated code should be tailored for client-side use, creating types and helpers for GraphQL operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n   schema: 'https://localhost:4000/graphql',\n   documents: ['src/**/*.tsx'],\n   generates: {\n      './src/gql/': {\n        preset: 'client',\n      }\n   }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema at Output File Level - TypeScript\nDESCRIPTION: This snippet illustrates configuring the GraphQL schema for individual output files within the `CodegenConfig`. Each output file can have a different schema source, allowing for more granular control. It specifies a URL for each schema source and defines the plugins to use.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  generates: {\n    './src/types1.ts': {\n      schema: 'http://server1.com/graphql',\n      plugins: ['typescript']\n    },\n    './src/types2.ts': {\n      schema: 'http://server2.com/graphql',\n      plugins: ['typescript']\n    }\n  },\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Yoga Server with Typed Resolvers in TypeScript\nDESCRIPTION: This snippet sets up a GraphQL Yoga server integrated with Node.js HTTP server, leveraging typed resolvers generated via GraphQL Code Generator. It imports schema definitions from a '.graphql' file, constructs a schema object with typed resolvers, and creates a Yoga instance with that schema. The server listens on port 4000 and logs its ready status upon startup. Required dependencies include 'node:fs', 'node:http', and 'graphql-yoga'.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { readFileSync } from 'node:fs'\\nimport { createServer } from 'node:http'\\nimport { createYoga, createSchema } from 'graphql-yoga'\\nimport { Resolvers } from './resolvers-types'\\n\\nconst typeDefs = readFileSync('./schema.graphql', 'utf8')\\n\\nconst resolvers: Resolvers = {\\n  Query: {\\n    // typed resolvers!\\n  }\\n}\\n\\nconst schema = createSchema({ typeDefs, resolvers })\\nconst yoga = createYoga({ schema })\\nconst server = createServer(yoga)\\n\\nserver.listen(4000, () => {\\n  console.log('GraphQL Server is listening on http://localhost:4000/graphql');\\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Code Generator CLI - Bash\nDESCRIPTION: Runs the initialization process for GraphQL Code Generator using the CLI tool installed via yarn. This command launches an interactive setup wizard that assists with configuring your GraphQL schema, selecting output plugins, and setting destination paths for generated code. You must have already installed the CLI as a devDependency and possess at least one valid GraphQL schema or endpoint. The process is question-driven, requiring user responses to configure the code generation pipeline. No input or output files are needed at this step; subsequent configuration files will be created by the wizard.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn graphql-codegen init\n```\n\n----------------------------------------\n\nTITLE: Using Generated React Apollo Hook in a Component (TSX)\nDESCRIPTION: This TSX snippet shows how to use a generated React Hook (`useTest`) within a React functional component (`MyComponent`). It imports the hook from the generated file (`./generated-types`) and utilizes the returned `data`, `error`, and `loading` states from the Apollo Client query execution.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-apollo.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTest } from './generated-types'\n\nexport const MyComponent: React.FC = () => {\n  const { data, error, loading } = useTest()\n\n  return <div>…</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Hook with Global Custom Fetcher Config (TypeScript)\nDESCRIPTION: Shows how to use a generated React Query hook when a custom fetcher function has been configured globally in the `codegen.ts` file using the `fetcher` option. The hook can be used without passing the fetcher function directly, as it's imported and used internally by the generated code. Requires the generated hooks file and a globally configured custom fetcher.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useMyQuery } from './generated';\n\nexport const MyComponent = () => {\n  const { status, data, error, isFetching } = useMyQuery({});\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with React Query (codegen)\nDESCRIPTION: This React Query example shows fetching posts in a React component using GraphQL Code Generator. It imports the generated `graphql` tag from `./gql/gql` to define the GraphQL query. The `postsQueryDocument` constant is fully typed and `useQuery` from React Query automatically infers types. This eliminates the need for manual type definitions, improving code maintainability and reducing errors.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { request } from 'graphql-request'\nimport { useQuery } from '@tanstack/react-query'\nimport { graphql } from './gql/gql'\n\n// postsQueryDocument is now fully typed!\nconst postsQueryDocument = graphql(/* GraphQL */ `\n  query Posts {\n    posts {\n      id\n      title\n      author {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`)\n\nconst Posts = () => {\n  // React Query `useQuery()` knows how to work with typed graphql documents\n  const { data } = useQuery<PostsQuery>('posts', async () => {\n    const { posts } = await request(endpoint, postsQueryDocument)\n    return posts\n  })\n\n  // `data` is fully typed!\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Hook with Explicit Endpoint (TypeScript)\nDESCRIPTION: Demonstrates how to use a React Query hook generated by `typescript-react-query` when the fetcher is configured to use the default `fetch`. It shows importing the hook (`useMyQuery`) and passing the GraphQL endpoint and optional `fetchParams` (like headers) directly to the hook's options object. Requires the generated hooks file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useMyQuery } from './generated';\n\nexport const MyComponent = () => {\n  const { status, data, error, isFetching } = useMyQuery({\n    endpoint: 'http://localhost:3000/graphql',\n    fetchParams: {\n      headers: {\n        'My-Header': 'XYZ'\n      }\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generation for React Apollo with TypeScript\nDESCRIPTION: This TypeScript snippet defines the configuration for GraphQL Code Generator. It imports the necessary CodegenConfig type from the '@graphql-codegen/cli' package. The configuration specifies the GraphQL schema URL, the location of the GraphQL documents, and the plugins to use for generating code. The 'typescript', 'typescript-operations', and 'typescript-react-apollo' plugins are used to generate TypeScript types, operation types, and React Apollo hooks, respectively.  It requires the '@graphql-codegen/cli' package and its related plugin packages to be installed.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/create-react-app.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n```ts filename=\"codegen.ts\"\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://my-server/graphql',\n  documents: 'src/**/*.graphql',\n  generates: {\n    'components.tsx': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo']\n    }\n  }\n}\nexport default config\n```\n```\n\n----------------------------------------\n\nTITLE: Improved Angular Component Using Generated Apollo Services\nDESCRIPTION: Updated Angular component implementation using the type-safe Apollo services generated by GraphQL Code Generator, featuring improved type safety and simplified subscription handling.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/angular.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PostsGQL, PostsQuery } from './graphql'\n// BE SURE TO USE Observable from `rxjs` and not from `@apollo/client/core` when using map\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n@Component({\n  /* … */\n})\nexport class PostsComponent {\n  posts: Observable<PostsQuery['posts']>\n\n  constructor(postsGQL: PostsGQL) {\n    this.posts = postsGQL.watch().valueChanges.pipe(map(result => result.data.posts))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Code Generator Configuration\nDESCRIPTION: This TypeScript code defines the configuration for GraphQL Code Generator. It specifies the schema location, document patterns, and output locations for generated code. The `preset` option is set to `client` to generate client-side code. It outputs generated code to `./src/graphql/` and the schema to `./schema.graphql`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://graphql.org/graphql/',\n  documents: ['src/**/*.ts'],\n  ignoreNoDocuments: true,\n  generates: {\n    './src/graphql/': {\n      preset: 'client',\n      config: {\n        documentMode: 'string'\n      }\n    },\n    './schema.graphql': {\n      plugins: ['schema-ast'],\n      config: {\n        includeDirectives: true\n      }\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using Generated Schema and Resolver Artifacts with Apollo Server (TypeScript)\nDESCRIPTION: This code sets up an Apollo Server instance using typedefs and resolvers generated by the server preset. After initialization, the server listens for incoming connections and logs its URL when ready. The use of auto-generated files ensures strong typing and compatibility between schema and resolver signatures. Requires presence of codegen outputs.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from 'apollo-server'\nimport { typeDefs } from './schema/typeDefs.generated'\nimport { resolvers } from './schema/resolvers.generated'\n\nconst server = new ApolloServer({ typeDefs, resolvers })\n\n// The `listen` method launches a web server\nserver.listen().then(({ url }) => {\n  console.log(`🚀 Server ready at ${url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring codegen.ts for RTK Query GraphQL Hook Generation\nDESCRIPTION: Configuration setup for GraphQL Code Generator to use the typescript-rtk-query plugin. It defines the schema path, documents location, and plugin configuration including the base API import path and hook export settings.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-rtk-query.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'MY_SCHEMA_PATH',\n  documents: './src/**/*.graphql',\n  generates: {\n    './src/app/api/generated.ts': {\n      plugins: [\n        'typescript',\n        'typescript-operations',\n        {\n          'typescript-rtk-query': {\n            importBaseApiFrom: 'src/app/api/baseApi',\n            exportHooks: true\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using Generated TypeScript Apollo Client Type Policies\nDESCRIPTION: Example demonstrating how to use the generated StrictTypedTypePolicies type for creating type-safe Apollo Client cache configurations. Shows keyFields and fields configuration with proper type checking.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-client-helpers.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StrictTypedTypePolicies } from './apollo-helpers'\n\nconst typePolicies: StrictTypedTypePolicies = {\n  // Keys in this object will be validated against the types on your schema\n  Product: {\n    keyFields: ['id'] // Values in this field will be validated against the available fields from the Product type\n  },\n  Person: {\n    keyFields: ['name', 'email']\n  },\n  Book: {\n    // This entire definition is typed, based on available types and fields\n    fields: {\n      tags: {\n        merge: false\n      }\n    }\n  }\n}\n\nconst cache = new InMemoryCache({ typePolicies })\n```\n\n----------------------------------------\n\nTITLE: Defining a React Component with Fragment Masking in TypeScript\nDESCRIPTION: Defines a React component (`ProfileName`) designed to work with GraphQL Code Generator's fragment masking. It accepts a prop (`profile`) typed with `FragmentType` and uses the `useFragment` hook from the generated `./gql` artifacts to access the actual fragment data.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\ntype ProfileNameProps = {\n  profile: FragmentType<typeof ProfileName_PersonFragmentDoc>\n}\n\nconst ProfileName = ({ profile }: ProfileNameProps) => {\n  const { name } = useFragment(ProfileName_PersonFragmentDoc, profile)\n  return (\n    <div>\n      <h1>Person Name: {name}</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Apollo Client with Typed GraphQL Query\nDESCRIPTION: React component using Apollo Client with a typed GraphQL query, demonstrating how to use the generated graphql function for type safety.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport './App.css'\nimport Film from './Film'\nimport { graphql } from '../src/gql'\n\nconst allFilmsWithVariablesQueryDocument = graphql(/* GraphQL */ `\n  query allFilmsWithVariablesQuery($first: Int!) {\n    allFilms(first: $first) {\n      edges {\n        node {\n          ...FilmItem\n        }\n      }\n    }\n  }\n`)\n\nfunction App() {\n  // `data` is typed!\n  const { data } = useQuery(allFilmsWithVariablesQueryDocument, { variables: { first: 10 } })\n  return (\n    <div className=\"App\">\n      {data && <ul>{data.allFilms?.edges?.map((e, i) => e?.node && <Film film={e?.node} key={`film-${i}`} />)}</ul>}\n    </div>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Default Fetcher (TypeScript)\nDESCRIPTION: Sets up the GraphQL Code Generator configuration (`codegen.ts`) to use the global `fetch` function as the data fetcher for generated React Query hooks. It includes the necessary plugins (`typescript`, `typescript-operations`, `typescript-react-query`) and sets the `fetcher` config option to `'fetch'`. Requires GraphQL schema and operation documents.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'MY_SCHEMA_PATH',\n  documents: './src/**/*.graphql',\n  generates: {\n    './generates.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-query'],\n      config: {\n        fetcher: 'fetch'\n      }\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Fragment in React Component\nDESCRIPTION: Shows how to define and use a GraphQL fragment in a React component using fragment-masking technique. The component accesses typed film data through the useFragment hook.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FragmentType, useFragment } from './gql/fragment-masking'\nimport { graphql } from '../src/gql'\n\nexport const FilmFragment = graphql(/* GraphQL */ `\n  fragment FilmItem on Film {\n    id\n    title\n    releaseDate\n    producers\n  }\n`)\n\nconst Film = (props: {\n  /* `film` property has the correct type 🎉 */\n  film: FragmentType<typeof FilmFragment>\n}) => {\n  const film = useFragment(FilmFragment, props.film)\n  return (\n    <div>\n      <h3>{film.title}</h3>\n      <p>{film.releaseDate}</p>\n    </div>\n  )\n}\n\nexport default Film\n```\n\n----------------------------------------\n\nTITLE: Use Generated Service in Angular Component Typescript\nDESCRIPTION: Demonstrates how to consume the generated Angular service (`MyFeedGQL`) within an Angular component. It injects the service, uses its `watch` method to get an `Observable` of the query result, and pipes the result through `map` from RxJS to extract the data, which is then displayed in the component's template using the `async` pipe. Requires Angular, Apollo Angular, RxJS, and the generated code file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-angular.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyFeedGQL, MyFeedQuery } from './graphql';\n// BE SURE TO USE Observable from rxjs and not from @apollo/client/core when using map\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'feed',\n  template: `\n    <h1>Feed:</h1>\n    <ul>\n      <li *ngFor=\"let item of feed | async\">{{ item.id }}</li>\n    </ul>\n  `\n})\nexport class FeedComponent {\n  feed: Observable<MyFeedQuery['feed']>;\n\n  constructor(feedGQL: MyFeedGQL) {\n    this.feed = feedGQL.watch().valueChanges.pipe(map(result => result.data.feed));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for GraphQL Yoga (TypeScript)\nDESCRIPTION: This configuration snippet, for GraphQL Yoga, exports a 'CodegenConfig' object specifying the schema file and generated type output, using the necessary codegen plugins without advanced configuration. Dependencies include the GraphQL Code Generator plugins, a schema file, and proper TypeScript setup.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  generates: {\n    './resolvers-types.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n    },\n  },\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Generating and Using the Fully-Typed SDK with graphql-request\nDESCRIPTION: This snippet describes how to generate a fully-typed GraphQL SDK using the getSdk function, wrapping a GraphQLClient instance. It shows importing the SDK, executing a query with typed response, and logging the data. It assumes the SDK is auto-generated from GraphQL schema and operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-graphql-request.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GraphQLClient } from 'graphql-request'\nimport { getSdk } from './sdk' // THIS FILE IS THE GENERATED FILE\n\nasync function main() {\n  const client = new GraphQLClient('https://countries.trevorblades.com')\n  const sdk = getSdk(client)\n  const { continents } = await sdk.continents() // This is fully typed, based on the query\n\n  console.log(`GraphQL data:`, continents)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Angular Apollo (codegen)\nDESCRIPTION: This Angular Apollo example leverages GraphQL Code Generator. It imports generated `PostsGQL` and `PostsQuery` types. It uses the `PostsGQL` service to watch the GraphQL query and extracts posts from the result using RxJS `map` operator. This approach provides type safety and utilizes generated code for improved developer experience.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PostsGQL, PostsQuery } from './graphql'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n@Component({ /* … */ })\nexport class PostsComponent {\n  posts: Observable<PostsQuery['posts']>\n\n  constructor(postsGQL: PostsGQL) {\n    this.posts = postsGQL.watch().valueChanges.pipe(map(result => result.data.posts))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Server Preset (YAML)\nDESCRIPTION: This YAML snippet configures GraphQL Code Generator to recursively load all schema.graphql files and generate outputs in src/schema using the @eddeee888/gcg-typescript-resolver-files preset. It also enables watch mode to track changes in mapper files related to the schema. Suitable for non-TypeScript codegen configurations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nschema: '**/schema.graphql'\ngenerates:\n  src/schema:\n    preset: '@eddeee888/gcg-typescript-resolver-files'\n    watchPattern: '**/*.mappers.ts'\n```\n\n----------------------------------------\n\nTITLE: Defining a Typed GraphQL Query Operation using Generated graphql Function in TypeScript\nDESCRIPTION: In this TypeScript snippet, the `graphql` tagged template function (imported from `./graphql`) is used to define a GraphQL query operation named `PeopleCount`. It requests the total count of people from the Star Wars API. Thanks to the GraphQL LSP plugin and the generated typings, this query string is automatically typed and provides autocomplete support in editors. This operation object can later be executed or used as input to React Query hooks.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-query.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from './graphql'\n\nconst PeopleCountQuery = graphql(`\n  query PeopleCount {\n    allPeople {\n      totalCount\n    }\n  }\n`)\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator with near-operation-file preset in TypeScript\nDESCRIPTION: This snippet defines a configuration object for the GraphQL Code Generator, specifying schemas, documents, and multiple outputs including the near-operation-file preset for generating per-operation files with specified extensions and base types. It demonstrates dependencies on '@graphql-codegen/cli' and configuration conventions for integrating TypeScript and React-Apollo.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/near-operation-file-preset.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'src/schema.json',\n  documents: 'src/**/*.graphql',\n  generates: {\n    'src/types.ts': { plugins: ['typescript'] },\n    'src/': {\n      preset: 'near-operation-file',\n      presetConfig: {\n        extension: '.generated.tsx',\n        baseTypesPath: 'types.ts',\n      },\n      plugins: ['typescript-operations', 'typescript-react-apollo'],\n    },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Query with Typed GraphQL Request\nDESCRIPTION: React component using React Query with graphql-request to fetch data with typed variables and responses.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport request from 'graphql-request'\nimport { useQuery } from '@tanstack/react-query'\n\nimport './App.css'\nimport Film from './Film'\nimport { graphql } from '../src/gql'\n\nconst allFilmsWithVariablesQueryDocument = graphql(/* GraphQL */ `\n  query allFilmsWithVariablesQuery($first: Int!) {\n    allFilms(first: $first) {\n      edges {\n        node {\n          ...FilmItem\n        }\n      }\n    }\n  }\n`)\n\nfunction App() {\n  // `data` is typed!\n  const { data } = useQuery(['films'], async () =>\n    request('https://graphql.org/graphql/', allFilmsWithVariablesQueryDocument, {\n      first: 10 // variables are typed too!\n    })\n  )\n\n  return (\n    <div className=\"App\">\n      {data && <ul>{data.allFilms?.edges?.map((e, i) => e?.node && <Film film={e?.node} key={`film-${i}`} />)}</ul>}\n    </div>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Specifying Global Lifecycle Hooks in GraphQL Code Generator Configuration - TypeScript\nDESCRIPTION: This snippet shows how to configure the GraphQL Code Generator with hooks specified at the root level in a TypeScript config file. It utilizes the CodegenConfig type from '@graphql-codegen/cli'. The 'afterOneFileWrite' hook is used here to run the 'prettier --write' command automatically after each generated file is written. The configuration includes the GraphQL schema URL, documents pattern for query files, and a preset targeting a client-friendly output folder. This setup requires the GraphQL Code Generator and Prettier installed, and expects the schema and documents to be accessible for generating and formatting the code.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/lifecycle-hooks.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\\n\\nconst config: CodegenConfig = {\\n  schema: 'http://localhost:4000/graphql',\\n  documents: ['src/**/*.tsx'],\\n  generates: {\\n    './src/gql/': {\\n      preset: 'client'\\n    }\\n  },\\n  hooks: {\\n    afterOneFileWrite: ['prettier --write']\\n  }\\n}\\n\\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator - TypeScript\nDESCRIPTION: This TypeScript configuration sets up '@graphql-codegen/cli' to fetch a GraphQL schema from a local API endpoint and automatically generate TypeScript types and React data-fetching hooks. It specifies plugins for type generation, operation typings, and integration with React Query via 'typescript', 'typescript-operations', and 'typescript-react-query'. The config expects the schema to be reachable at 'http://localhost:3333' and outputs results to 'types-and-hooks.tsx'.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/how-does-it-work.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:3333',\n  generates: {\n    'types-and-hooks.tsx': { plugins: ['typescript', 'typescript-operations', 'typescript-react-query'] },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Headers for Schema URL - TypeScript\nDESCRIPTION: This snippet demonstrates how to specify custom HTTP headers when fetching the schema from a URL.  This allows for authentication or other custom request configurations. It configures the `headers` option within the schema definition.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      'http://localhost:3000/graphql': {\n        headers: {\n          Authorization: 'YOUR-TOKEN-HERE',\n        },\n      },\n    },\n  ],\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Using Generated Hook with Graphql-Request Client (TypeScript)\nDESCRIPTION: Demonstrates the usage of a React Query hook generated when the `graphql-request` fetcher is configured. It shows importing the hook (`useMyQuery`) and passing an instance of `GraphQLClient` (presumably created elsewhere) as the first argument to the generated hook. Requires the generated hooks file and a `GraphQLClient` instance.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useMyQuery } from './generated';\nimport { client } from './my-graphql-request-client';\n\nexport const MyComponent = () => {\n  const { status, data, error, isFetching } = useMyQuery(client, {});\n};\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Query and Processing the Result\nDESCRIPTION: This TypeScript code demonstrates how to use the `execute` function to execute a GraphQL query and process the result. It imports the `PeopleCountQuery` and the `execute` function, then calls `execute` with the query. The result is then logged to the console within a `then` callback. The `data` parameter in the callback is fully typed based on the query definition.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from './graphql'\nimport { execute } from './graphql/execute'\n\nconst PeopleCountQuery = graphql(`\n  query PeopleCount {\n    allPeople {\n      totalCount\n    }\n  }\n`)\n\nexecute(PeopleCountQuery).then(data => {\n  console.log(data)\n})\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Types with DateTime Scalar\nDESCRIPTION: The generated types file includes the DateTime scalar with the proper input/output types from graphql-scalars, ensuring type-safety for DateTime values in the schema.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other generated types\n\nexport type Scalars = {\n  ID: { input: string; output: string | number }\n  String: { input: string; output: string }\n  Boolean: { input: boolean; output: boolean }\n  Int: { input: number; output: number }\n  Float: { input: number; output: number }\n  DateTime: { input: Date | string; output: Date | string } // Type comes from graphql-scalars\n}\n\n// ... other generated types\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Environment Variable Endpoint (TypeScript)\nDESCRIPTION: Sets up the GraphQL Code Generator configuration to read the GraphQL endpoint from a process environment variable (`process.env.ENDPOINT`). This allows the endpoint to be specified at runtime or build time without hardcoding it in the config file. Requires GraphQL schema, operation documents, and the environment variable to be set.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'MY_SCHEMA_PATH',\n  documents: './src/**/*.graphql',\n  generates: {\n    './generates.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-query'],\n      config: {\n        fetcher: {\n          endpoint: 'process.env.ENDPOINT'\n        }\n      }\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Specifying Root-Level Configuration for GraphQL Code Generator Plugins in TypeScript\nDESCRIPTION: This snippet defines a root-level `config` field in a GraphQL Code Generator configuration, which passes the specified config object to every plugin for each output file. It imports the CodegenConfig type from '@graphql-codegen/cli', sets the schema and output file with associated plugins, and exports the config object. The key 'configKey' with value 'configValue' is globally applied across all plugins. This approach simplifies setting common plugin options but can be overridden by more specific configurations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/config-field.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  config: { configKey: 'configValue' },\n  generates: { 'output.ts': ['plugin1', 'plugin2'] }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Schema from GraphQL File - TypeScript\nDESCRIPTION: This snippet demonstrates specifying a local `.graphql` file as the schema source. The file should contain the AST string of the GraphQL schema.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  // ...\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Resolvers with Mapper Interface\nDESCRIPTION: Complete implementation of Query and User resolvers that utilize the mapper interface, demonstrating resolver chaining where Query.user returns a UserMapper that becomes the parent for User resolvers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// src/schema/user/resolvers/Query/user.ts\nimport type { QueryResolvers } from './../../../types.generated'\nexport const user: NonNullable<QueryResolvers['user']> = async (_parent, _arg, _ctx) => {\n  return { id: '001', firstName: 'Bart', lastName: 'Simpson', isAdmin: 'YES' }\n}\n\n// src/schema/user/resolvers/User.ts\nimport type { UserResolvers } from './../../types.generated'\nexport const User: UserResolvers = {\n  fullName: ({ firstName, lastName }) => `${firstName} ${lastName}`\n  isAdmin: ({ isAdmin }) => isAdmin === 'YES'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Middleware in the SDK for Extensibility\nDESCRIPTION: This segment presents how to add middleware functions to the generated SDK to enhance request handling, such as logging and retries. The first example logs request duration using a timing wrapper. The second employs 'polly-js' for automatic retries on network errors, with logging for retries and max attempts.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-graphql-request.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst client = new GraphQLClient('')\nconst clientTimingWrapper: SdkFunctionWrapper = async <T>(action: () => Promise<T>): Promise<T> => {\n  const startTime = new Date()\n  const result = await action()\n  console.log('request duration (ms)', new Date() - startTime)\n  return result\n}\n\nconst sdk = getSdk(client, clientTimingWrapper)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst withRetries: RetryWrapper = <T>(action: () => Promise<T>) =>\n  polly()\n    .handle((err: Error) => {\n      warn('GraphqlClient:NetworkError', err)\n      return err.message.includes('connect ETIMEDOUT')\n    })\n    .waitAndRetry(3)\n    .executeForPromise(info => {\n      if (info.count === 3) {\n        error('GraphqlClient:MaxRetries', null, {\n          ...info,\n          action: action.toString()\n        })\n      } else if (info.count > 0) {\n        warn('GraphqlClient:RetryingCall', null, {\n          ...info,\n          action: action.toString()\n        })\n      }\n\n      return action()\n    })\n\nconst sdk = getSdk(client, withRetries)\n```\n\n----------------------------------------\n\nTITLE: Mocking a Successful GraphQL Query Response with MSW\nDESCRIPTION: Example showing how to mock a successful response for the GetUser query using the generated mock function. Returns a user object with the ID from the variables.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-msw.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockGetUserQuery } from './generated'\nimport { HttpResponse } from 'msw'\n\nconst mockSuccess = mockGetUserQuery(({ variables }) => {\n  const { id } = variables\n\n  return HttpResponse.json({\n    data: {\n      getUser: { name: 'John Doe', id }\n    }\n  })\n})\n\nexport mockUserQuerySuccess;\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator with Named Operations Object Plugin in TypeScript\nDESCRIPTION: Shows how to configure the GraphQL Code Generator by including the 'named-operations-object' plugin in your codegen configuration file. This setup generates an object containing all GraphQL operation names for type-safe refetch queries in Apollo Client. The configuration specifies schema, documents, and output file mappings.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/named-operations-object.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'YOUR_SCHEMA',\n  documents: 'YOUR_OPERATIONS',\n  generates: {\n    './types.ts': {\n      plugins: ['typescript', 'typescript-operations', 'named-operations-object']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using Custom useQuery Hook - React Application - TypeScript/React\nDESCRIPTION: This React functional component demonstrates how to use the custom `useGraphQL` hook with a generated GraphQL document. It shows how to define a typed query using the generated `graphql` function and pass it, along with type-checked variables, to the hook. The returned `data` object is automatically typed based on the document's result type.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useGraphQL } from './use-graphql.js'\nimport { graphql } from './generated/gql.js'\n\nconst allFilmsWithVariablesQueryDocument = graphql(/* GraphQL */ `\n  query allFilmsWithVariablesQuery($first: Int!) {\n    allFilms(first: $first) {\n      edges {\n        node {\n          title\n        }\n      }\n    }\n  }\n`)\n\nfunction App() {\n  // `data` is properly typed, inferred from `allFilmsWithVariablesQueryDocument` type\n  const { data } = useGraphQL(\n    allFilmsWithVariablesQueryDocument,\n    // variables are also properly type-checked.\n    { first: 10 }\n  )\n\n  // ... further component code\n}\n```\n\n----------------------------------------\n\nTITLE: Codegen configuration for Monorepo (TypeScript)\nDESCRIPTION: This snippet shows how to configure GraphQL Code Generator for a monorepo setup using `generates` to specify multiple output files and their corresponding plugins. This configuration is typically used in monorepo structures where different parts of the application (e.g., client and server) require separate generated files from the same schema and documents. It requires the `@graphql-codegen/cli` package.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/development-workflow.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'server/src/**/*.graphql',\n  documents: 'client/src/**/*.graphql',\n  generates: {\n    'client/src/models.ts': ['typescript', 'typescript-operations'],\n    'server/src/models.ts': ['typescript', 'typescript-resolver']\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Schema from URL - TypeScript\nDESCRIPTION: This snippet demonstrates specifying a URL as the schema source within the `CodegenConfig`. It shows the basic structure for loading a schema from a remote server.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:3000/graphql',\n  // ...\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Fragment in Vue Component\nDESCRIPTION: Demonstrates how to define and use a GraphQL fragment in a Vue component using the fragment-masking technique. The setup script defines a fragment and uses it to access typed film data.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { graphql } from '.../src/gql'\nimport { type FragmentType, useFragment } from '../gql/fragment-masking'\n\nconst FilmFragment = graphql(/* GraphQL */ `\n  fragment FilmItem on Film {\n    id\n    title\n    releaseDate\n    producers\n  }\n`)\nconst props = defineProps<{\n  film: FragmentType<typeof FilmFragment>\n}>()\n// `filmObj` is typed!\nconst filmObj = useFragment(FilmFragment, props.film)\n</script>\n\n<template>\n  <div>\n    <h3>{{ filmObj.title }}</h3>\n    <p>{{ filmObj.releaseDate }}</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Generated Urql Component in TSX\nDESCRIPTION: This TSX snippet demonstrates consuming the React component (`TestComponent`) automatically generated by the `typescript-urql` plugin based on the `Test` query. It shows how to render the component and pass necessary variables for the query execution.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-urql.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TestComponent variables={...}>\n  …\n</TestComponent>\n```\n\n----------------------------------------\n\nTITLE: Customizing Unmask Function Name in GraphQL Codegen Configuration with TypeScript\nDESCRIPTION: This snippet shows how to customize the fragment masking unmask helper function's name in the GraphQL Code Generator configuration for better ESLint compatibility. It exports a CodegenConfig object that sets the 'client' preset with 'fragmentMasking.unmaskFunctionName' configured as 'getFragmentData'. This avoids confusion about React hook naming and allows calling the helper safely outside of React hook rules. Key dependencies include '@graphql-codegen/cli'. Inputs are the schema and documents pattern, while the output is the generated code with the custom helper name.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  documents: ['src/**/*.tsx', '!src/gql/**/*'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      presetConfig: {\n        fragmentMasking: { unmaskFunctionName: 'getFragmentData' }\n      }\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring All Fields of a Specific GraphQL Type (TypeScript)\nDESCRIPTION: Uses @*FieldNames to configure every field in specified types like Droid and Movie, avoiding manual listing of each field.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forAllFieldNamesOfTypeName([Droid, Movie])\nconsole.log(pattern) // \"Droid.@*FieldNames;Movie.@*FieldNames;\"\n```\n\n----------------------------------------\n\nTITLE: Traditional Angular Apollo Client Implementation\nDESCRIPTION: A conventional Angular component implementation using Apollo Client without code generation. Shows manual type definitions and subscription management with potential type-safety issues.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/angular.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst GET_POSTS = gql`\n  query Posts {\n    posts {\n      id\n      title\n      author {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`\n\ninterface Post {\n  id: string\n  title: string\n  author?: {\n    id: string\n    firstName: string\n    lastName: string\n  }\n}\n\n@Component({\n  /* … */\n})\nclass PostsComponent implements OnInit, OnDestroy {\n  posts: Post[]\n\n  private querySubscription: Subscription\n\n  ngOnInit() {\n    this.querySubscription = this.apollo\n      .watchQuery({\n        query: GET_POSTS\n      })\n      .valueChanges.subscribe(({ data }) => {\n        this.posts = data.posts as Post[]\n      })\n  }\n  ngOnDestroy() {\n    this.querySubscription.unsubscribe()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen for KitQL (SvelteKit Native) Integration - TypeScript\nDESCRIPTION: This 'codegen.ts' snippet provides configuration for using KitQL and GraphQL Code Generator in SvelteKit projects. The config specifies the schema (URL or SDL), GraphQL document locations, output directory, and a set of plugins for generating TypeScript types, operations, typed documents, and KitQL support. Ensure all listed plugins are installed, and that the schema/documents parameters correctly reflect your project structure.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://my-graphql-api.com/graphql',\n  documents: './src/**/*.gql',\n  generates: {\n    './graphql/generated.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typed-document-node', '@kitql/graphql-codegen']\n    }\n  }\n}\nexport default config\n\n```\n\n----------------------------------------\n\nTITLE: Passing Runtime Configuration to Document Transform Factory Function in TypeScript\nDESCRIPTION: Demonstrates creating a document transform factory function that accepts a config object (with 'queryName' property) and returns a transform object containing a 'transform' function. This enables dynamic transform behavior based on runtime parameters. The transform function receives 'documents' and performs modifications using the supplied config. This example requires '@graphql-codegen/cli' types and illustrates usage by passing the generated transform into the config's 'documentTransforms' array.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/document-transform.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'  \n\nconst generateDocumentTransform: (config: { queryName: string }) => Types.DocumentTransformObject = ({ queryName }) => {  \n  return {  \n    transform: ({ documents }) => {  \n      // Modify something in documents using `queryName`.  \n      return documents  \n    }  \n  }  \n}  \n\nconst config: CodegenConfig = {  \n  schema: 'https://localhost:4000/graphql',  \n  documents: ['src/**/*.tsx'],  \n  generates: {  \n    './src/gql/': {  \n      preset: 'client',  \n      documentTransforms: [generateDocumentTransform({ queryName: 'test' })]  \n    }  \n  }  \n}  \nexport default config\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue URQL with Typed GraphQL Query\nDESCRIPTION: Vue component using URQL with a typed GraphQL query, demonstrating composition API usage with type safety.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@urql/vue'\nimport { computed } from 'vue'\n\nimport FilmItem from './components/FilmItem.vue'\nimport { graphql } from '../src/gql'\n\nconst { data } = useQuery({\n  query: graphql(/* GraphQL */ `\n    query allFilmsWithVariablesQuery($first: Int!) {\n      allFilms(first: $first) {\n        edges {\n          node {\n            ...FilmItem\n          }\n        }\n      }\n    }\n  `),\n  // variables are typed!\n  variables: { first: 10 }\n})\n// `films` is typed!\nconst films = computed(() => data.value?.allFilms?.edges?.map(e => e?.node!))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"film of films\"><FilmItem :film=\"film\" /></li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Resolvers Using Generated Types in TypeScript\nDESCRIPTION: Illustrates how to import and use the generated resolver types from the output file generated by GraphQL Code Generator. The snippet defines a resolver object typed with the auto-generated Resolvers interface, enabling fully typed resolver methods adhering to GraphQL schema signatures. Inputs are the root, args, and context typical of GraphQL resolvers. Outputs are type-safe resolver definitions to enhance development experience and prevent runtime errors.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-resolvers.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolvers } from './resolvers-types'\n\nexport const resolvers: Resolvers = {\n  Query: {\n    myQuery: (root, args, context) => {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Svelte Apollo Code Generation - Shell\nDESCRIPTION: This shell command installs all the required development dependencies for generating typed Apollo GraphQL code in Svelte projects. It fetches core plugins such as 'graphql-codegen-svelte-apollo', TypeScript support, CLI tools, and GraphQL itself. Must be run in the project root before running the codegen setup or scripts.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D graphql-codegen-svelte-apollo @graphql-codegen/typescript @graphql-codegen/typescript-operations @graphql-codegen/cli typescript graphql\n```\n\n----------------------------------------\n\nTITLE: Example Custom Fetcher Function (isReactHook: true) (TypeScript/TSX)\nDESCRIPTION: Provides a TypeScript/TSX example implementation for a custom fetcher function suitable for use with the `typescript-react-query` plugin when `isReactHook` is set to `true`. This function can utilize React Hooks (like `useContext`) to access runtime values and returns an async function that performs the data fetching, accepting variables as an argument. Requires React, `RequestInit`, and a `FetchParamsContext` or similar.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useFetchData = <TData, TVariables>(\n  query: string,\n  options?: RequestInit['headers']\n): ((variables?: TVariables) => Promise<TData>) => {\n  // it is safe to call React Hooks here.\n  const { url, headers } = React.useContext(FetchParamsContext);\n\n  return async (variables?: TVariables) => {\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n        ...options\n      },\n      body: JSON.stringify({\n        query,\n        variables\n      })\n    });\n\n    const json = await res.json();\n\n    if (json.errors) {\n      const { message } = json.errors[0] || {};\n      throw new Error(message || 'Error…');\n    }\n\n    return json.data;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generator CLI to Generate Client and Schema Files\nDESCRIPTION: These shell commands install necessary dependencies for GraphQL Code Generator and run the code generation process. The first command installs the core CLI and watcher packages, the second installs the schema AST plugin, and the third installs the GraphQL TypeScript language server plugin. A separate command runs the CLI with a configuration file (`codegen.ts`) to generate the schema file and client code, followed by an optional watch mode command to regenerate code on file changes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-query.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @graphql-codegen/cli @parcel/watcher\nnpm install --save-dev @graphql-codegen/schema-ast\nnpm install --save-dev @0no-co/graphqlsp\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx graphql-codegen --config codegen.ts\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx graphql-codegen --config codegen.ts --watch\n```\n\n----------------------------------------\n\nTITLE: Configuring documents at Root Level in GraphQL Code Generator (TypeScript)\nDESCRIPTION: Demonstrates how to specify the 'documents' field at the root level of the GraphQL Code Generator config. Requires '@graphql-codegen/cli' as a dependency and expects the 'schema' and 'documents' fields to be defined. The 'documents' key accepts a glob string targeting GraphQL files, and 'generates' maps outputs to plugins such as 'typescript' and 'typescript-operations'. Inputs include URLs or file paths to GraphQL schemas and operation documents. Outputs are generated TypeScript types. No advanced plucking or loader customization is shown.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:3000/graphql',\n  documents: 'src/**/*.graphql',\n  generates: { './src/types.ts': { plugins: ['typescript', 'typescript-operations'] } }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Pointing to Multiple GraphQL Document Files via Array (TypeScript)\nDESCRIPTION: Demonstrates specifying multiple individual '.graphql' files using a string array. Useful for projects with several operation files. '@graphql-codegen/cli' is required, and the array is assigned to 'documents' in the config. Standard schema and output settings apply. Input is an array of file paths; output is a combined TypeScript type definition.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: ['my-query.graphql', 'my-other-query.graphql']\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for React\nDESCRIPTION: TypeScript configuration file for GraphQL Code Generator in a React project, setting up schema, document paths, and output location.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://graphql.org/graphql/',\n  documents: ['src/**/*.tsx'],\n  ignoreNoDocuments: true, // for better experience with the watcher\n  generates: {\n    './src/gql/': {\n      preset: 'client'\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using Generated Urql Hook in TypeScript\nDESCRIPTION: This TypeScript snippet shows an alternative way to use the code generated by `typescript-urql`. It utilizes the `useTestQuery` hook, derived from the `Test` GraphQL query, to fetch data and manage state within a React functional component. The result is destructured from the hook's return value.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-urql.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst [result] = useTestQuery(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for Angular\nDESCRIPTION: TypeScript configuration file for GraphQL Code Generator that specifies the schema endpoint, document sources, and required plugins for generating Apollo Angular services.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/angular.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://my-graphql-api.com/graphql',\n  documents: './src/**/*.ts',\n  generates: {\n    './graphql/generated.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-apollo-angular']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using Custom Model Mappers in typescript-resolvers Plugin Configuration\nDESCRIPTION: Demonstrates how to specify custom model types (mappers) for GraphQL types in the codegen config, mapping GraphQL schema types to user-defined TypeScript classes or interfaces. It also sets a custom context type for resolvers. Dependencies include user-defined models and '@graphql-codegen/cli'. This allows resolvers to use existing domain models instead of generated types, improving integration with application codebases. Inputs include GraphQL schema and model files, output is typed resolvers referencing custom types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-resolvers.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  generates: {\n    './resolvers-types.ts': {\n      config: {\n        contextType: 'models#MyContextType',\n        mappers: {\n          User: './models#UserModel',\n          Profile: './models#UserProfile'\n        }\n      },\n      plugins: ['typescript', 'typescript-resolvers']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Fields of a Particular GraphQL Type (TypeScript)\nDESCRIPTION: Specifies particular fields (e.g., id, name, friends for Droid) for a specific GraphQL type, allowing targeted configuration of fields within types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forFieldNamesOfTypeName([\n  [Droid, [id, name, friends]],\n  [Human, [id, name, title]],\n  [Starship, [name, length]]\n])\nconsole.log(pattern) // \"Droid.[id,name,friends];Human.[id,name,title];Starship.[name,length];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Codegen Script in Package.json for Svelte Apollo - JSON\nDESCRIPTION: This JSON snippet expands 'package.json' scripts to add a 'generate' command, which executes the codegen CLI for generating typed GraphQL files according to the specified config. Ensure that this script is added so you can run 'npm run generate' for code generation. No inputs required; outputs will appear as defined in the codegen config.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"generate\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Code Generator with CLI\nDESCRIPTION: Executes the GraphQL Code Generator initialization wizard using the `npx` command. This wizard guides the user through configuring their project, including setting up a schema, selecting plugins, and defining output file destinations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/installation.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx graphql-code-generator init\n```\n\n----------------------------------------\n\nTITLE: Implementing a Type-Safe GraphQL Query Executor with Fetch in TypeScript\nDESCRIPTION: This TypeScript code exports an asynchronous `execute` function that accepts a `TypedDocumentString` representing a typed GraphQL query and an optional variables object. It sends a POST request to the GraphQL endpoint with the serialized query and variables as JSON, sets appropriate headers for GraphQL response content type, and returns a parsed JSON response typed as `TResult`. It performs error handling for network/HTTP errors by throwing on non-ok responses. The function leverages TypeScript generics to strongly type the request and response based on the query definition.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-query.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TypedDocumentString } from './graphql'\n\nexport async function execute<TResult, TVariables>(\n  query: TypedDocumentString<TResult, TVariables>,\n  ...[variables]: TVariables extends Record<string, never> ? [] : [TVariables]\n) {\n  const response = await fetch('https://graphql.org/graphql/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/graphql-response+json'\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  })\n\n  if (!response.ok) {\n    throw new Error('Network response was not ok')\n  }\n\n  return response.json() as TResult\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with URQL React (codegen)\nDESCRIPTION: This code demonstrates fetching posts using URQL in a React component with GraphQL Code Generator. It imports the generated `graphql` tag from `./gql/gql` and uses it to define the GraphQL query. The `postsQueryDocument` constant is now fully typed, and URQL's `useQuery` hook automatically infers the types, improving type safety and reducing boilerplate.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from 'urql'\nimport { graphql } from './gql/gql'\n\n// postsQueryDocument is now fully typed!\nconst postsQueryDocument = graphql(/* GraphQL */ `\n  query Posts {\n    posts {\n      id\n      title\n      author {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`)\n\nconst Posts = () => {\n  // URQL's `useQuery()` knows how to work with typed graphql documents\n  const [result] = useQuery({ query: postsQueryDocument })\n\n  // `result` is fully typed!\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mappers for Enums in typescript-resolvers Plugin Configuration\nDESCRIPTION: Presents a configuration snippet to map GraphQL enum types as custom model types (mappers) referencing enum implementations in external TypeScript files. This config enables using existing enum types throughout resolvers for type consistency and clarity. Requires custom enum declaration files. Enables smooth integration of enum values in GraphQL resolvers with custom domain models.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-resolvers.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  generates: {\n    './resolvers-types.ts': {\n      config: {\n        mappers: {\n          Color: './enums#ColorsCode'\n        }\n      },\n      plugins: ['typescript', 'typescript-resolvers']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Usage example of generated TypeScript React component for GraphQL query\nDESCRIPTION: This code demonstrates how to use the generated React component with TypeScript, passing variables as props to execute the query within a component. It serves as an example of integrating generated code into a React application.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-stencil-apollo.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n<TestComponent variables={...}>\\n  …\\n</TestComponent>\n```\n\n----------------------------------------\n\nTITLE: Installing Chosen Packages with npm\nDESCRIPTION: Installs the packages selected during the initialization process using npm. This step is essential after running the initialization wizard to install the required dependencies for the configured GraphQL Code Generator setup.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/installation.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install # install the chosen packages\n```\n\n----------------------------------------\n\nTITLE: Initializing Document Transform in GraphQL Code Generator with TypeScript\nDESCRIPTION: Demonstrates specifying a minimal documentTransform inline function in the GraphQL Code Generator configuration using TypeScript. This transform function receives an array of GraphQL documents and returns them, allowing for transformation before plugin use. Dependency: '@graphql-codegen/cli' for type definitions. Input is the 'documents' parameter, output is the transformed documents array.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/document-transform.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'  \n\nconst config: CodegenConfig = {  \n  schema: 'https://localhost:4000/graphql',  \n  documents: ['src/**/*.tsx'],  \n  generates: {  \n    './src/gql/': {  \n      preset: 'client',  \n      documentTransforms: [  \n        {  \n          transform: ({ documents }) => {  \n            // Make some changes to the documents  \n            return documents  \n          }  \n        }  \n      ]  \n    }  \n  }  \n}  \nexport default config\n```\n\n----------------------------------------\n\nTITLE: Removing '@localOnlyDirective' Directive from GraphQL Documents Using Document Transform in TypeScript\nDESCRIPTION: Shows how to create a document transform that removes the '@localOnlyDirective' from GraphQL documents by traversing the AST using 'visit' from 'graphql'. This example modifies each document by filtering directives named 'localOnlyDirective' during the 'leave' phase of AST traversal. Dependencies include '@graphql-codegen/cli' for types and 'graphql' library for the visitor utility. Input: array of document files, output: documents with the directive removed.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/document-transform.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'  \nimport { visit } from 'graphql'  \n\nconst config: CodegenConfig = {  \n  schema: 'https://localhost:4000/graphql',  \n  documents: ['src/**/*.tsx'],  \n  generates: {  \n    './src/gql/': {  \n      preset: 'client',  \n      documentTransforms: [  \n        {  \n          transform: ({ documents }) => {  \n            return documents.map(documentFile => {  \n              documentFile.document = visit(documentFile.document, {  \n                Directive: {  \n                  leave(node) {  \n                    if (node.name.value === 'localOnlyDirective') return null  \n                  }  \n                }  \n              })  \n              return documentFile  \n            })  \n          }  \n        }  \n      ]  \n    }  \n  }  \n}  \nexport default config\n```\n\n----------------------------------------\n\nTITLE: Integrating codegen with package.json scripts (JSON)\nDESCRIPTION: This snippet shows how to integrate GraphQL Code Generator with `package.json` scripts to run the codegen before starting the server/app.  It uses `pre` scripts to ensure the codegen generates output according to configuration before `dev` or `start` scripts are executed. This helps detect breaking changes in GraphQL schema and documents during continuous integration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/development-workflow.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"nodemon app.js\",\n    \"start\": \"node app.js\",\n    \"generate\": \"graphql-codegen\",\n    \"prestart\": \"yarn generate\",\n    \"predev\": \"yarn generate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for React Hooks (TypeScript)\nDESCRIPTION: This TypeScript configuration file (`codegen.ts`) sets up GraphQL Code Generator to process a GraphQL schema and documents (`.graphql` files). It uses the `typescript`, `typescript-operations`, and `typescript-react-apollo` plugins to generate TypeScript types and React Hooks into the `generated-types.ts` file. Requires `@graphql-codegen/cli` and the specified plugins.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-apollo.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'YOUR_SCHEMA_HERE',\n  documents: './src/**/*.graphql',\n  generates: {\n    './generated-types.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Fields in a Type (TypeScript)\nDESCRIPTION: Excludes specific fields like id, name, friends from configuration in specified types, such as Droid and Human, for granular control.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forAllFieldNamesExcludeFieldNamesOfTypeName([\n  [Droid, [id, name, friends]],\n  [Human, [id, name, title]],\n  [Starship, [name, length]]\n])\nconsole.log(pattern) // \"Droid.@*FieldNames-[id,name,friends];Human.@*FieldNames-[id,name,title];Starship.@*FieldNames-[name,length];\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL-Code-Generator Output with Patterns - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to configure the graphql-code-generator plugin for Dart code output using pattern-based configuration. It imports the required CodegenConfig type, specifies generation output and plugins, and applies granular rules for factories, unions, field nullability, and type merging using builder methods. Dependencies include the '@graphql-codegen/cli' package and access to builder utilities like FieldNamePattern and TypeNamePattern. Key parameters include lists of type and field names, output file targets, and plugin option objects. Input is the GraphQL schema; output is generated Dart models with custom rules as described.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'lib/data/models/app_models.dart': {\n      plugins: {\n        'flutter-freezed': Config.create({\n          defaultValues: [\n            [FieldNamePattern.forFieldNamesOfAllTypeNames([friends]), '[]', ['union_factory_parameter']],\n            [FieldNamePattern.forFieldNamesOfAllTypeNames([appearsIn]), '[]', ['default_factory_parameter']]\n          ],\n          deprecated: [\n            [FieldNamePattern.forAllFieldNamesOfTypeName([Actor]), ['default_factory_parameter']],\n            [TypeNamePattern.forTypeNames(SearchResultDroid), ['union_factory']]\n          ],\n          final: [[FieldNamePattern.forFieldNamesOfAllTypeNames([id, name]), ['parameter']]],\n          mergeTypes: {\n            Human: ['Actor'],\n            Actor: ['Human']\n          },\n          immutable: TypeNamePattern.forAllTypeNamesExcludeTypeNames([Actor, Human])\n        })\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generator in Watch Mode\nDESCRIPTION: This command runs GraphQL Code Generator in watch mode, continuously monitoring for changes in the schema or documents. When changes are detected, it automatically regenerates the client code. The `--watch` flag enables this behavior.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx graphql-codegen --config codegen.ts --watch\n```\n\n----------------------------------------\n\nTITLE: Specifying Output-Level Configuration for GraphQL Code Generator Plugins in TypeScript\nDESCRIPTION: This snippet shows how to define a `config` field at the output file level in the GraphQL Code Generator configuration. The config object under the output filename ('output.ts') assigned to plugins is passed to every plugin in that specific output. It imports the CodegenConfig type from '@graphql-codegen/cli', sets the schema, output, plugins, and output-level config with a key-value pair. This configuration overrides root-level config for that output file. It illustrates fine-grained control of plugin configurations at the output level.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/config-field.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  generates: {\n    'output.ts': {\n      config: {\n        configKey: 'configValue'\n      },\n      plugins: ['plugin1', 'plugin2']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: MSW 2.x 'once' Option Implementation\nDESCRIPTION: Updated example for MSW 2.x showing how to use the 'once' option in the second parameter to create a one-time mock response.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-msw.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpResponse } from 'msw'\n\nmockGetUserQuery(\n  ({ variables }) => {\n    const { id } = variables\n\n    return HttpResponse.json({\n      data: {\n        getUser: { name: 'John Doe', id }\n      }\n    })\n  },\n  { once: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Custom Scalar in GraphQL Schema\nDESCRIPTION: A GraphQL schema definition for a custom DateTime scalar type that references the implementation from graphql-scalars package.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n# https://github.com/Urigo/graphql-scalars/blob/master/src/scalars/iso-date/DateTime.ts\nscalar DateTime\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Vue Apollo (codegen)\nDESCRIPTION: This example demonstrates fetching posts with Vue Apollo using GraphQL Code Generator. It imports the generated `graphql` tag from `./gql/gql` and uses it to define the GraphQL query. The `useQuery` hook is employed to execute the GraphQL operation. Code generation ensures that `result.value?.posts` is correctly typed, leading to safer and more efficient development.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@vue/apollo-composable';\nimport { graphql } from './gql/gql';\nimport FilmItem from './components/FilmItem.vue';\nimport { computed } from 'vue';\nconst { result } = useQuery(\n  graphql(/* GraphQL */ `\n    query Posts {\n      posts {\n        id\n        title\n        author {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  `),\n);\n\n// `posts` is properly typed!\nconst posts = computed(() => result.value?.posts);\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"film of films\"><FilmItem :film=\"film\" /></li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Fragment Type by Name in TypeScript\nDESCRIPTION: Demonstrates importing a generated TypeScript type corresponding to a GraphQL fragment (`FilmItemFragment`) based on conventional naming. This type is then used to type-annotate a function parameter (`myFilmHelper`), ensuring type safety when working with fragment data. Requires generated types from `./gql`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FilmItemFragment } from './gql'\n\nconst allFilmsWithVariablesQueryDocument = graphql(/* GraphQL */ `\n  query allFilmsWithVariablesQuery($first: Int!) {\n    allFilms(first: $first) {\n      edges {\n        node {\n          ...FilmItem\n        }\n      }\n    }\n  }\n`)\n\nfunction myFilmHelper(film: FilmItemFragment) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Glob Expression for Multiple Document Files (TypeScript)\nDESCRIPTION: Demonstrates using a glob expression to include multiple '.graphql' files from specified directories. '@graphql-codegen/cli' is required, and 'documents' accepts a glob string for flexible matching. Useful for auto-aggregating documents across a codebase. The config expects schema and output details as usual.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: './src/**/*.graphql'\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint after all file writes in GraphQL Codegen (TS)\nDESCRIPTION: This configures GraphQL Code Generator to run ESLint after all files have been generated, using the `afterAllFileWrite` hook in `codegen.ts`. This will run `eslint --fix` once all files are generated which can be more efficient for larger projects.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/prettier.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  hooks: { afterAllFileWrite: ['eslint --fix'] }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Writing API Tests with Jest (TypeScript)\nDESCRIPTION: Contains Jest test cases (`yoga.spec.ts`) that demonstrate how to test the GraphQL Yoga server. It utilizes the `executeOperation` helper function and typed GraphQL operations (`HelloQuery`, `EchoMutation`) generated by Code Generator to query the API and assert the results.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport { type ExecutionResult, print } from 'graphql'\nimport { graphql } from './gql'\nimport { yoga } from './yoga'\n\nfunction executeOperation<TResult, TVariables>(\n  operation: TypedDocumentNode<TResult, TVariables>,\n  ...[variables]: TVariables extends Record<string, never> ? [] : [TVariables]\n): Promise<ExecutionResult<TResult>> {\n  return Promise.resolve(\n    yoga.fetch('http://yoga/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        query: print(operation),\n        variables: variables ?? undefined\n      })\n    })\n  ).then(response => response.json())\n}\n\ndescribe('Yoga Tests', () => {\n  it('execute query operation', async () => {\n    const HelloQuery = graphql(/* GraphQL */ `\n      query HelloQuery {\n        hello\n      }\n    `)\n\n    const result = await executeOperation(HelloQuery)\n\n    expect(result.data?.hello).toEqual('Hello world!')\n  })\n\n  it('execute mutation operation', async () => {\n    const EchoMutation = graphql(/* GraphQL */ `\n      mutation EchoMutation($message: String!) {\n        echo(message: $message)\n      }\n    `)\n\n    const result = await executeOperation(EchoMutation, {\n      message: 'Ohayoo!'\n    })\n\n    expect(result.data?.echo).toEqual('Ohayoo!')\n  })\n\n  it('execute mutation operation (variant)', async () => {\n    const EchoMutation = graphql(/* GraphQL */ `\n      mutation EchoMutation($message: String!) {\n        echo(message: $message)\n      }\n    `)\n\n    const result = await executeOperation(EchoMutation, {\n      message: 'Konbanwa'\n    })\n\n    expect(result.data?.echo).toEqual('Konbanwa')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample GraphQL Query\nDESCRIPTION: This GraphQL snippet defines a query named `Test` to fetch a feed, including IDs, comment counts, and repository details (full name, URL, owner's avatar URL). This query serves as an example input for the code generation process.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-apollo.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery Test {\n  feed {\n    id\n    commentCount\n    repository {\n      full_name\n      html_url\n      owner {\n        avatar_url\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with SSR and Typed Stores in SvelteKit Native - Svelte\nDESCRIPTION: This Svelte component (using module context) demonstrates how to execute a fully-typed KitQL query during SSR, using a generated 'PostsQuery' function, then exposing the resulting Svelte store. The 'load' function fetches posts in SSR mode, after which 'PostsQueryStore' is available for client and UI use. Dependencies: '@kitql/client', KitQL codegen artifacts, and SvelteKit runtime. Input: 'fetch' from load parameters; output: populated typed store 'PostsQueryStore'.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script context=\"module\" lang=\"ts\">\n  import { PostsQuery } from '../graphql/generated'\n\n  export async function load({ fetch }) {\n    await PostsQuery({ fetch }) // This line do the query in SSR mode\n    // now you have `PostsQueryStore` store available and fully typed!\n    return {}\n  }\n</script>\n\n<!-- UI … -->\n{$PostsQueryStore.data}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Generate Script to package.json\nDESCRIPTION: Adds a custom `generate` script to the `scripts` section of the Node.js `package.json` file. This allows running the GraphQL Code Generator using a simple command like `npm run generate`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"generate\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Apollo Server Resolvers (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates integrating the generated resolver types into an Apollo Server setup. Dependencies include Apollo Server, Node.js 'fs', and the generated resolver types. The 'typeDefs' are read from a compiled schema; 'resolvers' uses the imported 'Resolvers' type, guaranteeing type safety for resolver functions. Expected input is a valid schema and properly typed resolver implementations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readFileSync } from 'node:fs'\nimport { ApolloServer } from 'apollo-server'\nimport { Resolvers } from './resolvers-types'\n\nconst typeDefs = readFileSync('./schema.graphql', 'utf8')\n\nconst resolvers: Resolvers = {\n  Query: {\n    // typed resolvers\n  }\n}\n\nconst server = new ApolloServer({ typeDefs, resolvers })\n\n// The `listen` method launches a web server\nserver.listen().then(({ url }) => {\n  console.log(`🚀  Server ready at ${url}`)\n})\n\n```\n\n----------------------------------------\n\nTITLE: Defining Package.json Script - JSON\nDESCRIPTION: This snippet shows a `package.json` configuration with a `generate` script.  The `generate` script executes the `graphql-codegen` command, which leverages the configuration defined in `codegen.ts` to generate the resolver types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-modules.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"generate\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Codegen configuration with watch flag (TypeScript)\nDESCRIPTION: This snippet shows the GraphQL Code Generator configuration with the `watch` flag enabled.  When `watch` is set to `true`, the codegen will automatically regenerate the output whenever changes are detected in the schema or documents. This configuration requires the `@graphql-codegen/cli` package.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/development-workflow.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:4000/graphql',\n  // ...\n  watch: true\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Applying Generated Module Resolvers Signatures in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the generated resolvers signature from module-types in a GraphQL module's resolvers.ts. The generated types ensure only the correct types and fields defined in the respective module can be implemented, enabling strict type safety. Required dependencies are the generated module types file and TypeScript. Input is user-defined resolver implementations; output is a type-safe resolvers object for the module. The pattern assumes the code generation step has already been completed.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/graphql-modules-preset.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MyModule } from './generated-types/module-types'\n\nexport const resolvers: MyModule.Resolvers = {\n  // Here you can implement only the types and fields defined in your module!\n}\n```\n\n----------------------------------------\n\nTITLE: Add excludeTypes configuration to resolversNonOptionalTypename\nDESCRIPTION: This snippet shows how to configure the GraphQL Code Generator to exclude specific types from having the __typename addition in resolver types. The excludeTypes option in the resolversNonOptionalTypename config allows disabling __typename for listed types, facilitating incremental migration strategies. It requires setting up the generator config with the appropriate plugin and configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst config: CodegenConfig = {\n  schema: 'src/schema/**/*.graphql',\n  generates: {\n    'src/schema/types.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n      config: {\n        resolversNonOptionalTypename: {\n          unionMember: true,\n          excludeTypes: ['MyType']\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Resolver Types - TypeScript\nDESCRIPTION: This TypeScript snippet exemplifies how to use the generated resolver types within a module. It imports the generated types from `generated-types/module-types.ts` and defines the `resolvers` object, adhering to the type definitions generated by GraphQL Code Generator for the User module. This allows to implement only the types and fields defined in your module!\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-modules.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UsersModule } from './generated-types/module-types'\n\nexport const resolvers: UsersModule.Resolvers = {\n  // Here, you can implement only the types and fields defined in your module!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration file for GraphQL Code Generator to output Kotlin classes\nDESCRIPTION: YAML configuration specifying the GraphQL schema and documents, and defining the output file with Kotlin plugin enabled. Guides the code generation process from schema to Kotlin source files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/java/kotlin.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nschema: POINT_TO_YOUR_SCHEMA\ndocuments: POINT_TO_YOUR_GRAPHQL_OPERATIONS\ngenerates:\n  ./app/src/Types.kt:\n    plugins:\n      - kotlin\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code TypeScript Version\nDESCRIPTION: This JSON configures Visual Studio Code to use the local TypeScript version installed in `node_modules`. This ensures that the VS Code TypeScript language service uses the same version as the project, preventing potential compatibility issues with language service plugins.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typescript.tsdk\": \"node_modules/typescript/lib\",\n  \"typescript.enablePromptUseWorkspaceTsdk\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Generation - Shell\nDESCRIPTION: This snippet demonstrates how to execute the code generation process using the script defined in `package.json`. Running `npm run generate` triggers GraphQL Code Generator to process the configuration in `codegen.ts` and generate the necessary type definitions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-modules.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run generate\n```\n\n----------------------------------------\n\nTITLE: Creating Base API for RTK Query with GraphQL Request\nDESCRIPTION: Implementation of a base API file that creates an RTK Query API using graphqlRequestBaseQuery. It initializes a GraphQL client with an endpoint and exports the empty API for the code generator to extend.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-rtk-query.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { graphqlRequestBaseQuery } from '@rtk-query/graphql-request-base-query'\nimport { GraphQLClient } from 'graphql-request'\n\nexport const client = new GraphQLClient('/graphql')\n\nexport const api = createApi({\n  baseQuery: graphqlRequestBaseQuery({ client }),\n  endpoints: () => ({})\n})\n```\n\n----------------------------------------\n\nTITLE: Define Basic GraphQL Query\nDESCRIPTION: Defines a simple GraphQL query named `MyFeed` that fetches the `id` and `commentCount` fields from a `feed` root field. This query serves as a typical input file for the `graphql-codegen` tool.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-angular.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyFeed {\n  feed {\n    id\n    commentCount\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Near-Operation GraphQL Type Generation with graphql-codegen in TypeScript\nDESCRIPTION: A full graphql-codegen configuration example in TypeScript demonstrating how to generate base GraphQL types in a single \"src/types.ts\" file and operation-specific generated files adjacent to their queries/mutations using the near-operation-file preset. It includes essential settings such as schema URL, a glob pattern excluding generated files for source documents, and preset-specific options to set output file extensions and base type path. This setup uses the 'typescript-operations' and 'typescript-urql' plugins with hooks enabled to generate React URQL hooks per operation. This configuration improves modularity of generated code for front-end applications.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/generated-files-colocation.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'http://my-graphql-api.com/graphql',\n  documents: 'src/**/!(*.generated).{ts,tsx}',\n  generates: {\n    'src/types.ts': {\n      plugins: ['typescript'],\n    },\n    'src/': {\n      preset: 'near-operation-file',\n      presetConfig: { extension: '.generated.tsx', baseTypesPath: 'types.ts' },\n      plugins: ['typescript-operations', 'typescript-urql'],\n      config: { withHooks: true },\n    },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in TypeScript GraphQL Codegen Config\nDESCRIPTION: Shows how to dynamically use environment variables for schema configuration in a TypeScript codegen configuration file. Using process.env to access variables like SCHEMAURL and APIKEY, the snippet configures schema endpoints and headers for request authentication. This pattern requires loading environment variables prior to config evaluation, typically done using dotenv integration and the require flag.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/require-field.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: {\n    [process.env.SCHEMAURL]: {\n      headers: {\n        apikey: process.env.APIKEY\n      }\n    }\n  }\n  // ...\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using Generated Hook with Global Fetcher Config (TypeScript)\nDESCRIPTION: Shows how to use a generated React Query hook when the fetcher's endpoint and fetch parameters are already defined in the `codegen.ts` configuration (using inline config, environment variables, or external variables). The hook call requires no specific arguments for these parameters. Requires the generated hooks file and a globally configured fetcher.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useMyQuery } from './generated';\n\nexport const MyComponent = () => {\n  const { status, data, error, isFetching } = useMyQuery({});\n};\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific GraphQL Types from All Types Pattern (TypeScript)\nDESCRIPTION: Generates a pattern that includes all GraphQL types except specified ones, such as Droid and Starship. Useful for excluding certain types from bulk configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forAllTypeNamesExcludeTypeNames([Droid, Starship])\nconsole.log(pattern) // \"@*TypeNames-[Droid,Starship];\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git-Based Schema Source with GraphQL Code Generator CLI in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the GraphQL Code Generator CLI to load a schema from a Git repository. The schema is specified using 'git:branch:path/to/file.graphql'. '@graphql-codegen/cli' is required. Inputs are the git reference and schema path, and the output is a configuration ready for CLI use. Supports loading schemas from JSON, .graphql files, or code files with gql tags.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'git:branch:path/to/file.graphql'\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Multiple Patterns for GraphQL Files - TypeScript\nDESCRIPTION: This snippet shows how to load a schema from multiple locations using an array of glob expressions. Code Generator merges the files into a single schema. Uses file system globbing patterns.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: ['src/dir1/**/*.graphql', 'src/dir2/**/*.graphql'],\n  // ...\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema and Yoga Server (TypeScript)\nDESCRIPTION: Creates a basic GraphQL schema defining a `Query` type with a `hello` field and a `Mutation` type with an `echo` field. It then initializes and exports a GraphQL Yoga server instance using this schema and corresponding resolver functions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      hello: String!\n    }\n\n    type Mutation {\n      echo(message: String!): String!\n    }\n  `,\n  resolvers: {\n    Query: {\n      hello: () => 'Hello world!'\n    },\n    Mutation: {\n      echo: (_, args) => args.message\n    }\n  }\n})\n\nexport const yoga = createYoga({\n  schema\n})\n```\n\n----------------------------------------\n\nTITLE: Code Generation Configuration for GraphQL to TypeScript-MongoDB - TypeScript\nDESCRIPTION: This code provides an example configuration file for the GraphQL Code Generator tool to generate TypeScript and TypeScript-MongoDB types from a provided schema. Dependencies: '@graphql-codegen/cli', 'ts-node/register'. Key parameters: 'schema' for schema path, 'generates' for output targets, 'plugins' array to specify plugin usage. Limitations: Filename and paths must match your actual setup. Expected input: GraphQL schema file. Output: Generated TypeScript definitions for schema and MongoDB entities.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: './src/my-schema.js',\n  require: ['ts-node/register'],\n  generates: {\n    './src/generated/graphql.ts': {\n      plugins: ['typescript', 'typescript-mongodb']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Sharing Common Mappers Across Multiple GraphQL Codegen Outputs in TypeScript\nDESCRIPTION: Demonstrates how to define shared mappers in a JavaScript/TypeScript object and reuse them across multiple output file configurations in the GraphQL Code Generator config. This approach reduces duplication by spreading common type mappings into each output's mapper config. Inputs include schema, documents, shared mappers object, and multiple generate targets. Outputs typed resolver types for each target sharing common mappers, facilitating maintainability in large projects with multiple outputs.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-resolvers.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst sharedMappers = {\n  ID: 'IDType'\n}\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  documents: 'src/*.ts',\n  generates: {\n    'resolvers-types-1.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n      config: {\n        mappers: {\n          ...sharedMappers,\n          String: 'StringType'\n        }\n      }\n    },\n    'resolvers-types-2.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n      config: {\n        mappers: {\n          ...sharedMappers,\n          String: 'StringType'\n        }\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Server with Typed Resolvers in TypeScript\nDESCRIPTION: This snippet initializes an Apollo GraphQL server with resolvers typed via generated TypeScript definitions to ensure compliance with the GraphQL schema. It reads the schema from a '.graphql' file, assigns resolvers adhering to the 'Resolvers' interface exported from generated typings, and starts the server asynchronously using the 'listen' method. Dependencies include 'node:fs' for file reading and 'apollo-server' for the ApolloServer implementation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { readFileSync } from 'node:fs'\\nimport { ApolloServer } from 'apollo-server'\\nimport { Resolvers } from './resolvers-types'\\n\\nconst typeDefs = readFileSync('./schema.graphql', 'utf8')\\n\\nconst resolvers: Resolvers = {\\n  Query: {\\n    // typed resolvers!\\n  }\\n}\\n\\nconst server = new ApolloServer({ typeDefs, resolvers })\\n\\n// The `listen` method launches a web server\\nserver.listen().then(({ url }) => {\\n  console.log(`\\ud83d\\ude80  Server ready at ${url}`)\\n})\n```\n\n----------------------------------------\n\nTITLE: Configure GraphQL Codegen for Angular/Apollo Typescript\nDESCRIPTION: Configures the `graphql-codegen` CLI using a `codegen.ts` file. It specifies the output path and includes the necessary plugins (`typescript`, `typescript-operations`, and `typescript-apollo-angular`) to generate TypeScript types and Angular services tailored for Apollo Client integration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-angular.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/output.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-apollo-angular']\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-File GraphQL Type Generation with graphql-codegen in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates a typical graphql-codegen configuration that generates all GraphQL types and hooks into a single output file \"graphql/generated.ts\". It configures the plugins for TypeScript typings, GraphQL operations, and URQL integration with React hooks enabled. The configuration requires the @graphql-codegen/cli package and assumes a GraphQL schema URL. Input files matched by the glob pattern './src/**/*.tsx' are included. The output is a centralized file containing all generated types and React URQL hooks.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/generated-files-colocation.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\n// Configuration for a React URQL setup\nconst config: CodegenConfig = {\n  schema: 'http://my-graphql-api.com/graphql',\n  documents: './src/**/*.tsx',\n  generates: {\n    'graphql/generated.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-urql'],\n      config: { withHooks: true },\n    },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Schema Sources with Custom Loader Plugins in TypeScript\nDESCRIPTION: This TypeScript snippet configures multiple schema sources in the GraphQL Code Generator, each with a custom loader. The configuration includes both an HTTP API endpoint and a local file using user-defined loader scripts. Dependencies include '@graphql-codegen/cli' and implementation of the loaders. The configuration supports extensibility for complex or multi-source loading strategies.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      'http://localhost:3000/graphql': {\n        loader: './my-url-loader.js',\n      }\n    },\n    {\n      'schema.graphql': {\n        loader: './my-file-loader.js',\n      }\n    }\n  ],\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL union resolver with non-optional __typename in TypeScript\nDESCRIPTION: Illustrates improved resolver pattern where each returned object explicitly declares the __typename property corresponding to its GraphQL union member type. This simplifies the __resolveType function by directly returning the __typename, enabling better TypeScript type inference and clearer resolver logic.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Query/book.ts\nexport const book = async () => {\n  try {\n    const book = await fetchBook()\n    // 1. `__typename` is declared in resolver results...\n    return {\n      __typename: 'BookResult', // 1a. this also types `node` for us 🎉\n      node: book\n    }\n  } catch (e) {\n    return {\n      __typename: 'PayloadError',\n      message: 'Failed to fetch book'\n    }\n  }\n}\n\n// BookPayload.ts\nexport const BookPayload = {\n  __resolveType: parent => parent.__typename // 2. ... means a very simple check in `__resolveType`\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Models for Abstract Entity Inheritance - TypeScript\nDESCRIPTION: Shows the generated TypeScript interfaces for an abstract GraphQL interface and an implementing type. The base interface incorporates the discriminator and other shared fields; the derived interface extends this to add its own. Inputs: N/A (output). Dependencies: 'mongodb'. Limitations: Discriminator property must match schema directives.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface BaseNotificationDbInterface {\n  notificationType: string\n  _id: ObjectId\n  createdAt: Date\n}\n\nexport interface TextNotificationDbObject extends BaseNotificationDbInterface {\n  content: string\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Typed Data with Nhost GraphQL Client - TypeScript\nDESCRIPTION: This code snippet queries the 'todos' GraphQL object using the Nhost Typescript SDK. It leverages the generated TypeScript typing for enhanced IDE support and type safety. The select parameter specifies retrieval of the 'contents' field. Returns a strongly-typed result according to the inferred schema; requires prior configuration and code generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-nhost.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst todos = await nhost.graphql.query.todos({ select: { contents: true } })\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for ESM Type (JSON)\nDESCRIPTION: This snippet illustrates the essential `\"type\": \"module\"` property in package.json. Adding this line informs JavaScript runtimes and build tools that `.js` files within this package are ESM files, enabling correct parsing and execution of import/export statements. It also includes example scripts using the `graphql-codegen-esm` command.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/esm-typescript-usage.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"example-typescript-esm\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"@graphql-codegen/cli\": \"2.11.3\",\n    \"@graphql-codegen/client-preset\": \"2.1.1\"\n  },\n  \"dependencies\": {\n    \"@graphql-typed-document-node/core\": \"3.2.0\",\n    \"graphql\": \"16.5.0\"\n  },\n  \"scripts\": {\n    \"codegen\": \"graphql-codegen-esm --config codegen.ts\",\n    \"build\": \"tsc\",\n    \"start\": \"node dist/main.js\"\n  },\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen for Svelte Apollo Integration - TypeScript\nDESCRIPTION: This snippet provides a TypeScript 'codegen.ts' configuration file that defines how GraphQL Code Generator should process the schema and document files, and which plugins to use. Key parameters include 'schema' (can be a URL or SDL file path), 'documents' (glob pattern), and 'generates' specifying target output and plugins. Outputs generated TypeScript files for use in Svelte with Apollo integration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://my-graphql-api.com/graphql',\n  documents: './src/**/*.gql',\n  generates: {\n    './graphql/generated.ts': {\n      plugins: ['typescript', 'typescript-operations', 'graphql-codegen-svelte-apollo']\n    }\n  }\n}\nexport default config\n\n```\n\n----------------------------------------\n\nTITLE: Alternative Enum Values Configuration for typescript-resolvers Plugin in TypeScript\nDESCRIPTION: Shows a codegen configuration example specifying enumValues as an explicit object mapping GraphQL enum members to string values, without referencing external enum types. This allows simple inline value remapping of enums in the generated resolvers. Inputs include the GraphQL schema with enums and config specifying mapping values. Outputs typed resolver signatures translated to the defined enum value strings. Supports scenarios where using separate TypeScript enum declarations is unnecessary.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-resolvers.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  generates: {\n    './resolvers-types.ts': {\n      config: {\n        enumValues: {\n          Color: {\n            RED: '#FF0000',\n            BLUE: '#0000FF'\n          }\n        }\n      },\n      plugins: ['typescript', 'typescript-resolvers']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Method for Schema URL - TypeScript\nDESCRIPTION: This snippet demonstrates how to specify a custom HTTP method for the introspection query.  The default is POST, but this can be changed to GET or other methods. The `method` option configures the desired HTTP method.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      'http://localhost:3000/graphql': {\n        method: 'GET',\n      }\n    }\n  ]\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring documents at Output-File Level in GraphQL Code Generator (TypeScript)\nDESCRIPTION: Shows how to define the 'documents' field within an individual output file's config in the 'generates' property. '@graphql-codegen/cli' is used, and it requires the 'schema' and 'generates' fields with per-output configuration. The documents field can target specific directories using glob patterns, and distinct plugins can be applied to each output file. Inputs are file paths and output configurations, resulting in generated TypeScript files for GraphQL types and operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://server1.com/graphql',\n  generates: {\n    './src/types1.ts': {\n      documents: 'src/**/*.graphql',\n      plugins: ['typescript', 'typescript-operations']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Adding ts-node Transpiler to GraphQL Code Generator Script in JSON\nDESCRIPTION: This JSON snippet illustrates how to modify the package.json scripts section to run GraphQL Code Generator with TypeScript support using 'ts-node/register'. Requires 'ts-node', 'graphql-codegen', and a valid codegen config file. Input is the script configuration and output is a CLI-ready command for running codegen with TypeScript files as loaders.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_34\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"codegen\": \"graphql-codegen -r ts-node/register --config codegen.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating GraphQL Operations for Oclif CLI Example and Description Metadata in GraphQL\nDESCRIPTION: This GraphQL snippet demonstrates how to use the @oclif directive to add CLI-friendly metadata such as descriptions and usage examples to a mutation. These annotations are interpreted by typescript-oclif for generating rich CLI command help, but are not sent to the GraphQL server. Each example is supplied as a separate directive key; multiple examples are supported by repeating the key. Required for this feature is using a GraphQL codegen that understands the @oclif directive, such as typescript-oclif.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-oclif.mdx#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation CreateAuthor($name: String!)\n@oclif(\n  description: \"Create a new author\"\n  example: \"cli author:create --name Alice\"\n  example: \"cli author:create --name Bob\"\n) {\n  createAuthor(input: { name: $name }) {\n    name\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Pointing to a Single GraphQL Document File (TypeScript)\nDESCRIPTION: Shows how to set the 'documents' field as a single string path to a '.graphql' file in the config. This is the simplest method for projects with only one GraphQL operation file. '@graphql-codegen/cli' must be installed. The schema location and output configuration are required; only one operation document is included.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: 'my-query.graphql'\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Import statements and plugin configuration for TypeScript GraphQL code generator\nDESCRIPTION: This snippet imports necessary components and functions from local modules, then configures the plugin to generate static props with specific options, setting up the environment for GraphQL code generation in a Stencil project.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-stencil-apollo.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PluginApiDocs, PluginHeader } from '@/components/plugin'\\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\\nexport const getStaticProps = pluginGetStaticProps(__filename, { hasOperationsNote: true })\n```\n\n----------------------------------------\n\nTITLE: GraphQL Code Generator Configuration - TypeScript\nDESCRIPTION: This TypeScript snippet shows a configuration for the GraphQL Code Generator. It specifies the schema, documents (GraphQL files), and the plugin configuration to generate types and operations for use with Apollo in the Svelte application.  It uses the `clientPath` to correctly point to the Apollo client.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-svelte-apollo.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n```ts filename=\"codegen.ts\"\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'YOUR_SCHEMA_HERE',\n  documents: './src/**/*.graphql',\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'graphql-codegen-svelte-apollo'],\n      config: {\n        clientPath: 'PATH_TO_APOLLO_CLIENT'\n      }\n    }\n  }\n}\nexport default config\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode to Use Local TypeScript Version\nDESCRIPTION: This JSON configuration file for VSCode instructs the editor to use the locally installed TypeScript version found in `node_modules/typescript/lib`. It also enables prompts for switching to the workspace TypeScript SDK. This ensures compatibility with GraphQL plugin features and keeps the IDE environment consistent with the project setup.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-query.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typescript.tsdk\": \"node_modules/typescript/lib\",\n  \"typescript.enablePromptUseWorkspaceTsdk\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Deferred Fragment Readiness with isFragmentReady in JSX\nDESCRIPTION: Shows how to use the `isFragmentReady` helper (provided by GraphQL Code Generator's client preset) to conditionally render components based on the availability of data for a deferred GraphQL fragment. It takes the parent query document, the fragment definition, and the query data as arguments. This example uses Apollo Client's `useQuery`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// index.tsx\nimport { useQuery } from '@apollo/client';\nimport { useFragment, graphql, FragmentType, isFragmentReady } from './gql';\n\nconst OrdersFragment = graphql(`\n  fragment OrdersFragment on User {\n    orders {\n      id\n      total\n    }\n  }\n`)\nconst GetUserQueryWithDefer = graphql(`\n  query GetUser($id: ID!) {\n    user(id: $id) {\n      id\n      name\n      ...OrdersFragment @defer\n    }\n  }\n`)\n\nconst OrdersList = (props: { data: FragmentType<typeof OrdersFragment> }) => {\n  const data = useFragment(OrdersFragment, props.data);\n  return (\n    // render orders list\n  )\n};\n\nfunction App() {\n  const { data } = useQuery(GetUserQueryWithDefer);\n  return (\n    <div className=\"App\">\n      {data && (\n        <>\n          <span>Name: {data.name}</span>\n          <span>Id: {data.name}</span>\n          {isFragmentReady(GetUserQueryWithDefer, OrdersFragment, data) // <- HERE\n\t\t\t\t\t\t&& <OrdersList data={data} />}\n        </>\n      )}\n    </div>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Support for @defer directive in GraphQL queries\nDESCRIPTION: This code demonstrates the integration of the @defer directive support in GraphQL queries using the generated code. It includes fragment definitions and queries that utilize @defer to handle incremental responses, and provides a utility function 'isFragmentReady' to conditionally render components based on data availability. Dependencies include GraphQL schema and runtime, with support for incremental data handling.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/index.tsx\nimport { graphql } from './gql'\nconst OrdersFragment = graphql(`\n  fragment OrdersFragment on User {\n    orders {\n      id\n      total\n    }\n  }\n`)\nconst GetUserQuery = graphql(`\n  query GetUser($id: ID!) {\n    user(id: $id) {\n      id\n      name\n      ...OrdersFragment @defer\n    }\n  }\n`)\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type GetUserQuery = { __typename?: 'Query'; id: string; name: string } & ({\n  __typename?: 'Query'\n} & {\n  ' $fragmentRefs'?: { OrdersFragment: Incremental<OrdersFragment> }\n})\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst OrdersList = (props: { data: FragmentType<typeof OrdersFragment> }) => {\n  const data = useFragment(OrdersFragment, props.data);\n  return (\n    // render orders list\n  )\n};\n\nfunction App() {\n  const { data } = useQuery(GetUserQuery);\n  return (\n    {data && (\n      <>\n        {isFragmentReady(GetUserQuery, OrdersFragment, data) && <OrdersList data={data} />}\n      </>\n    )}\n  );\n}\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen YAML to Map GraphQL Enums Using enumValues\nDESCRIPTION: This YAML configuration instructs the GraphQL Code Generator to generate Flow resolver types with enumValues mapping. It maps the Color GraphQL enum to an internal TypeScript enum ColorsCode from the enums module, enabling type-safe internal enum usage in resolvers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/flow/flow-resolvers.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nschema: schema.graphql\ngenerates:\n  ./resolvers-types.js:\n    config:\n      enumValues:\n        Color: ./enums#ColorsCode\n    plugins:\n      - flow\n      - flow-resolvers\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server Compatibility with typescript-resolvers Plugin in Codegen\nDESCRIPTION: Shows a GraphQL Code Generator configuration snippet with the 'useIndexSignature: true' option enabled in the plugin config to ensure generated resolver signatures are compatible with Apollo Server's expectations. This setting adds an index signature to the generated resolver type definitions. Dependencies include the 'typescript-resolvers' plugin and Apollo Server environment. Intended input is a schema file and output TypeScript resolver typings. This adjustment resolves signature compatibility issues in complex Apollo Server setups.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-resolvers.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  generates: {\n    './resolvers-types.ts': {\n      config: {\n        useIndexSignature: true\n      },\n      plugins: ['typescript', 'typescript-resolvers']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using Generated Infinite Query Hook (TypeScript)\nDESCRIPTION: Demonstrates the usage of the `useInfiniteQuery` hook generated by the `typescript-react-query` plugin when the `addInfiniteQuery` option is enabled. It shows how to import the hook (`useInfiniteAnimalsQuery`), provide initial variables, and configure `react-query`'s `getNextPageParam` option for implementing pagination logic based on the fetched data structure. Requires the generated hooks file and the corresponding GraphQL query.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useInfiniteMyQuery } from './generated';\n\nexport const MyComponent = () => {\n  const { status, data, error, isFetching } = useInfiniteAnimalsQuery(\n    {\n      catsRange: 5,\n      catsStarting: 0,\n      dogsRange: 10,\n      dogsStarting: 0\n    },\n    {\n      getNextPageParam(lastPage, allPages) {\n        const totalLocal = (allPages.length ?? 0) * (queryParams.limit ?? 1);\n        const totalDogs = lastPage.dogs.items?.length ?? 0;\n        if (totalLocal < totalDogs) {\n          return {\n            catsStarting: totalLocal * 5,\n            dogsStarting: totalLocal * 10\n          };\n        }\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Nhost Client with Generated Schema - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to instantiate the Nhost client using a generated schema. It imports 'NhostClient' from '@nhost/nhost-js' and the autogen schema from a local TypeScript file, then creates an Nhost client instance with a custom subdomain and the loaded schema. This ensures TypeScript-based operations can leverage typed queries and mutations as generated by the code generator.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-nhost.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NhostClient } from '@nhost/nhost-js'\nimport schema from './schema'\n\nconst nhost = new NhostClient({ subdomain: 'localhost', schema })\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentMode\nDESCRIPTION: This TypeScript code snippet configures the GraphQL Code Generator to generate documents as strings instead of TypedDocumentNodes. It demonstrates how to set the `documentMode` option to `string` within the `generates` configuration to reduce bundle size. This configuration is intended for use with GraphQL clients that support string literals as queries.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      config: {\n        documentMode: 'string'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Loader to Fetch GraphQL Schema from API in TypeScript\nDESCRIPTION: This TypeScript loader script uses 'cross-fetch' and 'graphql' to fetch the introspection query result from a remote GraphQL endpoint and transform it into a usable schema object. Inputs are API URL and public token imported from a config file. Requires 'cross-fetch', 'graphql', and configuration exports. The loader returns a built client schema for the code generator. Intended for advanced cases where schema must be fetched dynamically.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport fetch from 'cross-fetch'\nimport { getIntrospectionQuery, buildClientSchema } from 'graphql'\nimport { API_URL, PUBLIC_TOKEN } from './config'\n\nexport default async () => {\n  const introspectionQuery = getIntrospectionQuery()\n\n  const response = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Token': PUBLIC_TOKEN\n    },\n    body: JSON.stringify({ query: introspectionQuery })\n  })\n\n  const data = await response.json()\n\n  return buildClientSchema(data.data)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Film Fragment for GraphQL Query\nDESCRIPTION: GraphQL fragment that defines the fields to be retrieved for each Film object from the Star Wars API.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FilmItem on Film {\n  id\n  title\n  releaseDate\n  producers\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Headers after Login Mutation\nDESCRIPTION: Implementation of an authentication flow using the enhanced RTK Query endpoints. It shows how to set an authentication header after a successful login mutation using onQueryStarted lifecycle hook.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-rtk-query.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { api as generatedApi } from 'src/app/api/generated'\nimport { client } from 'src/app/api/baseApi'\n\nexport const api = generatedApi.enhanceEndpoints({\n  endpoints: {\n    Login: {\n      async onQueryStarted(arg, { queryFulfilled }) {\n        const { data } = await queryFulfilled\n        client.setHeader('authentication', `Bearer ${data.token}`)\n      }\n    }\n  }\n})\n\nexport const { useLoginMutation } = api\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQLSP in TypeScript Project\nDESCRIPTION: Instructions for setting up GraphQLSP, a TypeScript LSP plugin for GraphQL that provides syntax highlighting, autocomplete, validation, and hover information. Requires updating tsconfig.json after installation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"name\": \"@0no-co/graphqlsp\",\n        \"schema\": \"./schema.graphql\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MSW 2.x Query Mock Implementation\nDESCRIPTION: Updated example for MSW 2.x showing the new syntax with HttpResponse. This demonstrates the migration from the context-based approach to the new Response-based approach.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-msw.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpResponse } from 'msw'\nmockGetUserQuery(({ variables }) => {\n  const { id } = variables\n\n  return HttpResponse.json({\n    data: {\n      getUser: { name: 'John Doe', id }\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Generated Schema and Resolver Artifacts with GraphQL Yoga (TypeScript)\nDESCRIPTION: This TypeScript code illustrates server setup for GraphQL Yoga that imports generated typedefs and resolvers produced by the server preset. The server is initialized using createYoga and createSchema, passing generated types to ensure end-to-end type safety. The server listens on port 3000. Requires generated files from codegen to exist in ./schema.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga, createSchema } from 'graphql-yoga'\nimport { createServer } from 'http'\nimport { typeDefs } from './schema/typeDefs.generated'\nimport { resolvers } from './schema/resolvers.generated'\n\nconst yoga = createYoga({ schema: createSchema({ typeDefs, resolvers }) })\nconst server = createServer(yoga)\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Typings and React Query Hook Generation - TypeScript\nDESCRIPTION: This auto-generated TypeScript code defines mapped types for GraphQL scalars, enums, unions, and objects, as well as operation-specific types for query variables and results. It also constructs ready-to-use React Query hooks, such as 'useFindUserQuery', to perform strongly-typed data fetching from the GraphQL API. The hook expects a data source config, variables matching the defined types, and optional query options, returning type-safe data to be consumed in React UI components. Dependencies include React Query and the fetcher utility defined elsewhere.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/how-does-it-work.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// …\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; };\n  String: { input: string; output: string; };\n  Boolean: { input: boolean; output: boolean; };\n  Int: { input: number; output: number; };\n  Float: { input: number; output: number; };\n  Date: { input: any; output: any; };\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me: User;\n  user?: Maybe<User>;\n  allUsers?: Maybe<Array<Maybe<User>>>;\n  search: Array<SearchResult>;\n  myChats: Array<Chat>;\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QuerySearchArgs = {\n  term: Scalars['String']['input'];\n};\n\nexport enum Role {\n  User = 'USER',\n  Admin = 'ADMIN'\n}\n\nexport type Node = {\n  id: Scalars['ID']['output'];\n};\n\nexport type SearchResult = User | Chat | ChatMessage;\n\nexport type User = Node & {\n  __typename?: 'User';\n  id: Scalars['ID']['output'];\n  username: Scalars['String']['output'];\n  email: Scalars['String']['output'];\n  role: Role;\n};\n\nexport type Chat = Node & {\n  __typename?: 'Chat';\n  id: Scalars['ID']['output'];\n  users: Array<User>;\n  messages: Array<ChatMessage>;\n};\n\nexport type ChatMessage = Node & {\n  __typename?: 'ChatMessage';\n  id: Scalars['ID']['output'];\n  content: Scalars['String']['output'];\n  time: Scalars['Date']['output'];\n  user: User;\n};\n\nexport type FindUserQueryVariables = Exact<{\n  userId: Scalars['ID']['input'];\n}>;\n\n\nexport type FindUserQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, username: string, role: Role } | null | undefined };\n\nexport type UserFieldsFragment = { __typename?: 'User', id: string, username: string, role: Role };\n\nexport const UserFieldsFragmentDoc = `\n    fragment UserFields on User {\n  id\n  username\n  role\n}\n    `;\nexport const FindUserDocument = `\n    query findUser($userId: ID!) {\n  user(id: $userId) {\n    ...UserFields\n  }\n}\n    ${UserFieldsFragmentDoc}`;\nexport const useFindUserQuery = <\n      TData = FindUserQuery,\n      TError = unknown\n    >(\n      dataSource: { endpoint: string, fetchParams?: RequestInit },\n      variables: FindUserQueryVariables,\n      options?: UseQueryOptions<FindUserQuery, TError, TData>\n    ) =>\n    useQuery<FindUserQuery, TError, TData>(\n      ['findUser', variables],\n      fetcher<FindUserQuery, FindUserQueryVariables>(dataSource.endpoint, dataSource.fetchParams || {}, FindUserDocument, variables),\n      options\n    );\n```\n\n----------------------------------------\n\nTITLE: Keeping Names as Is in GraphQL Codegen\nDESCRIPTION: This snippet demonstrates how to configure GraphQL Code Generator to preserve the original names of GraphQL types and fields using the `namingConvention` option. Setting `namingConvention` to `'keep'` within the `config` section of the `generates` configuration disables any automatic name transformations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file': {\n      // plugins...\n      config: {\n        namingConvention: 'keep'\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Generation - TypeScript\nDESCRIPTION: This TypeScript code snippet shows an example configuration file (`codegen.ts`) for GraphQL Code Generator.  It defines the schema to be used, specifies the preset as 'graphql-modules', and sets up the output directory and file names. It also includes plugins like 'typescript' and 'typescript-resolvers'.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-modules.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: './src/modules/**/typedefs/*.graphql',\n  generates: {\n    './server/src/modules/': {\n      preset: 'graphql-modules',\n      presetConfig: {\n        baseTypesPath: '../generated-types/graphql.ts',\n        filename: 'generated-types/module-types.ts'\n      },\n      plugins: [\n        {\n          add: {\n            content: '/* eslint-disable */'\n          }\n        },\n        'typescript',\n        'typescript-resolvers'\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using CLI generate Function Programmatically (JavaScript)\nDESCRIPTION: Shows how to leverage the `@graphql-codegen/cli` package's `generate` function programmatically in a Node.js environment. This approach simplifies loading schemas and documents from files/URLs directly within your script. It takes a configuration similar to the CLI arguments and returns a promise resolving to metadata about the generated files. This method is not compatible with browser environments. Requires `@graphql-codegen/cli`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/programmatic-usage.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { generate } from '@graphql-codegen/cli'\n\nasync function doSomething() {\n  const generatedFiles = await generate(\n    {\n      schema: 'http://127.0.0.1:3000/graphql',\n      documents: './src/**/*.graphql',\n      generates: {\n        [process.cwd() + '/models/types.d.ts']: {\n          plugins: ['typescript']\n        }\n      }\n    },\n    true\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Type Names and Enum Values with Different Conventions\nDESCRIPTION: Configuration that uses Pascal case for type names and upper case for enum values, demonstrating how to specify different conventions for different output elements.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/naming-convention.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  config: {\n    namingConvention: {\n      typeNames: 'change-case-all#pascalCase',\n      enumValues: 'change-case-all#upperCase'\n    }\n  }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: This GraphQL schema defines the types `Author` and `Post`, along with a `Query` type to fetch posts.  It includes fields for IDs, names, titles, and relationships between authors and posts. The schema serves as the foundation for generating typed GraphQL operations and resolvers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  firstName: String!\n  lastName: String!\n  posts(findTitle: String): [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String!\n  author: Author\n}\n\ntype Query {\n  posts: [Post]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Transform Using External File Reference in TypeScript Config\nDESCRIPTION: Shows how to specify an external document transform JavaScript file by filename inside the 'documentTransforms' array in the TypeScript GraphQL Code Generator configuration. The config uses '@graphql-codegen/cli' types. Input pattern is the file path string, output behavior applies the external transform to documents. This decouples transform logic from the main config enabling modularity.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/document-transform.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'  \n\nconst config: CodegenConfig = {  \n  schema: 'https://localhost:4000/graphql',  \n  documents: ['src/**/*.tsx'],  \n  generates: {  \n    './src/gql/': {  \n      preset: 'client',  \n      documentTransforms: ['./my-document-transform.js']  \n    }  \n  }  \n}  \nexport default config\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Viewer Preferences\nDESCRIPTION: This GraphQL query retrieves the `language` and `darkMode` preferences from the `viewer` object.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-apollo.mdx#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  viewer {\n    preference {\n      language\n      darkMode\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom GraphQL Document Loader Function (JavaScript)\nDESCRIPTION: Provides an example of a custom loader written for use with GraphQL Code Generator. It utilizes Node's 'fs' and the 'graphql' package to read and parse a file, returning a DocumentNode. No TypeScript is required for the loader file. The main inputs are the file path and config object; output is an in-memory GraphQL AST. The loader function must be exported via module.exports as default.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { readFileSync } = require('node:fs')\nconst { parse } = require('graphql')\n\nmodule.exports = (docString, config) => {\n  return parse(readFileSync(docString, 'utf8'))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Request Handler with GraphQL-Request and Oclif in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to implement and export a default handler compatible with typescript-oclif using the graphql-request library. The handler constructs a GraphQLClient for the CLI endpoint, processes queries with variables, logs results with command.log, and handles errors via command.error. Prerequisites are installing graphql-request and @oclif/command. The handler can include additional logic such as authentication or configuration file reading as needed, and must be exported as the default export from the handler file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-oclif.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GraphQLClient } from 'graphql-request'\nimport { Command } from '@oclif/command'\n\ninterface QueryHandlerProps {\n  command: Command\n  query: string\n  variables?: Record<string, any>\n}\n\n// Change the URL to the endpoint your CLI will use\nconst client = new GraphQLClient('http://localhost:4000')\n\nconst handler = ({ command, query, variables }: QueryHandlerProps) => {\n  return client.request(query, variables).then(command.log).catch(command.error)\n}\n\nexport default handler\n\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in codegen.ts Configuration (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates referencing environment variables (e.g., process.env.SCHEMA_PATH) as the schema value within the codegen.ts configuration file. It enables dynamic configuration based on the runtime environment. Requires @graphql-codegen/cli and Node.js environment variable support. Inputs: The value of SCHEMA_PATH from the environment. Outputs: Generated GraphQL files using the schema location as resolved from the environment variable. Validation is required to ensure the environment variable is properly set.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/codegen-config.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: process.env.SCHEMA_PATH,\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client'\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Java Resolver Interface Implementation Example in Java\nDESCRIPTION: Sample Java code illustrating how to implement GraphQL resolvers by creating a class that implements the generated resolver interface. It uses graphql-java's DataFetcher API to define resolver methods, enabling retrieval of data from source objects within GraphQL queries.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/java/java-resolvers.mdx#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport com.my.app.generated.Resolvers;\nimport com.my.app.models.User;\nimport graphql.schema.DataFetcher;\n\npublic class QueryResolvers implements Resolvers.Query {\n  public DataFetcher<String> id() {\n    return environment -> environment.<User>getSource().getId();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generator CLI in watch mode Shell\nDESCRIPTION: This shell snippet shows how to run the GraphQL Code Generator CLI in watch mode using the yarn package manager. The `--watch` flag enables automatic regeneration of code based on file watch changes, including those specified by the watchPattern configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn graphql-codegen --watch\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Code Generator Dependencies\nDESCRIPTION: This command installs the necessary dependencies for GraphQL Code Generator: the CLI, a watcher for file changes, a schema generator, and a TypeScript language service plugin. `@parcel/watcher` enables watch mode. `@graphql-codegen/schema-ast` generates a schema file from a GraphQL API. `@0no-co/graphqlsp` provides TypeScript language service support for GraphQL.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @graphql-codegen/cli @parcel/watcher\nnpm install --save-dev @graphql-codegen/schema-ast\nnpm install --save-dev @0no-co/graphqlsp\n```\n\n----------------------------------------\n\nTITLE: Installing Code Generation Dependencies - Shell\nDESCRIPTION: This snippet demonstrates the installation of necessary npm packages for GraphQL Code Generator and the graphql-modules-preset. It installs the core packages to allow to generate resolvers types for each module of a GraphQL Modules GraphQL API using the `@graphql-codegen/graphql-modules-preset` plugin, as well as necessary typescript plugins.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-modules.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i -D @graphql-codegen/graphql-modules-preset @graphql-codegen/typescript-resolvers @graphql-codegen/typescript\n```\n\n----------------------------------------\n\nTITLE: Implementing Generated Operation Resolver Stubs (TypeScript)\nDESCRIPTION: This TypeScript code represents a generated resolver stub for a Query.user field. It imports proper types and provides a strongly-typed async function to implement resolver logic. Until logic is implemented, TypeScript checks will fail by design, enforcing resolver completeness at compile-time. Developers must fill in application-specific behavior here.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { QueryResolvers } from './../../../types.generated'\nexport const user: NonNullable<QueryResolvers['user']> = async (_parent, _arg, _ctx) => {\n  /* Implement Query.user resolver logic here */\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a 'generate' Script in package.json\nDESCRIPTION: This JSON example shows adding a 'generate' script to package.json, which facilitates running the code generator via npm or yarn. The script should invoke the 'graphql-codegen' binary, assuming dependencies are properly installed. This step integrates codegen into the project's workflow for repeatable generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"generate\": \"graphql-codegen\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tag Modules for GraphQL Extraction (TypeScript)\nDESCRIPTION: Displays how to customize document extraction by defining additional modules and tag identifiers for plucking, using 'pluckConfig.modules'. Allows support for user-defined or nonstandard tag names wrapping GraphQL operations. '@graphql-codegen/cli' is required. Specify in pluckConfig an array of objects with 'name' and 'identifier'. Ensures extraction in diverse code patterns.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: ['./src/*.jsx'],\n  pluckConfig: {\n    modules: [\n      {\n        name: 'my-custom-module'\n        identifier: 'gql'\n      }\n    ]\n  }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: JSDoc annotations for plugin configuration\nDESCRIPTION: Illustrates how to add JSDoc annotations to the plugin's configuration type. These annotations are used to generate API documentation for the plugin.  Includes `@name`, `@description`, `@default`, and `@exampleMarkdown` tags.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * My plugin is super cool!!!\n */\nexport type MyPluginConfig = {\n  /**\n   * @name name\n   * @description This allows you to generate a greeting with a custom name\n   * @default anonymous\n   *\n   * @exampleMarkdown\n   * ## Change the name\n   * ```yaml\n   * generates:\n   *   path/to/file.ts:\n   *     plugins:\n   *       - my-plugin\n   *     config:\n   *       name: Uri\n   * ```\n   */\n  name: string\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Magic GraphQL Comment String (TypeScript)\nDESCRIPTION: Demonstrates setting a custom comment string to identify embedded GraphQL operations within code via 'pluckConfig.gqlMagicComment'. '@graphql-codegen/cli' is required. The comment can then be anything, such as 'customcomment', allowing further control in code scanning processes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: ['./src/*.jsx'],\n  pluckConfig: {\n    gqlMagicComment: 'customcomment'\n  }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Generate TypeScript DocumentNode\nDESCRIPTION: This TypeScript code generates a DocumentNode from the GraphQL query using the graphql-tag library. It imports DocumentNode from graphql and gql from graphql-tag.  The generated DocumentNode can then be used with GraphQL clients.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-document-nodes.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocumentNode } from 'graphql'\nimport gql from 'graphql-tag'\n\nexport const viewerQuery: DocumentNode = gql`\n  query Viewer {\n    viewer {\n      login\n      name\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema in .graphql File\nDESCRIPTION: This GraphQL schema defines 'Author', 'Post', and 'Query' types for an example blogging API. The file illustrates proper separation of schema declarations into dedicated .graphql files—a prerequisite step for using GraphQL Code Generator. Inputs include the 'findTitle' filter argument on the 'posts' field, supporting custom queries.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  firstName: String!\n  lastName: String!\n  posts(findTitle: String): [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String!\n  author: Author\n}\n\ntype Query {\n  posts: [Post]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Persisted Documents in GraphQL Codegen Configuration (TypeScript)\nDESCRIPTION: Configuration example for `codegen.ts` showing how to enable the persisted documents feature using the `client` preset. Set the `persistedDocuments` property to `true` within the `presetConfig` object to generate a `persisted-documents.json` file and add hashes to document nodes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      presetConfig: {\n        persistedDocuments: true\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed GraphQL Yoga Resolvers (TypeScript)\nDESCRIPTION: This snippet provides a TypeScript-based example for using generated resolver types with GraphQL Yoga. It sets up the schema and resolvers, integrates with the Yoga and Node.js HTTP modules, and starts a server on port 3000. Dependencies are GraphQL Yoga, Node.js, and generated resolver types; 'resolvers' is fully type-safe, requiring valid implementations for each field.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readFileSync } from 'node:fs'\nimport { createYoga, createSchema } from 'graphql-yoga';\nimport { createServer } from 'http';\nimport { Resolvers } from './resolvers-types'\n\nconst typeDefs = readFileSync('./schema.graphql', 'utf8')\n\nconst resolvers: Resolvers = {\n  Query: {\n    // typed resolvers\n  }\n}\n\nconst schema = createSchema({ typeDefs, resolvers })\nconst yoga = createYoga({ schema })\nconst server = createServer(yoga)\n\nserver.listen(3000)\n\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Query Using the Typed Executor Function in TypeScript\nDESCRIPTION: This snippet demonstrates usage of the previously defined `execute` function to run the `PeopleCountQuery`. It logs the typed response data to the console, showcasing how the GraphQL query operation and its response are fully typed and integrated in a TypeScript codebase. The setup enables real-time type safety and IDE support for query data manipulation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-query.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from './graphql'\nimport { execute } from './graphql/execute'\n\nconst PeopleCountQuery = graphql(`\n  query PeopleCount {\n    allPeople {\n      totalCount\n    }\n  }\n`)\n\nexecute(PeopleCountQuery).then(data => {\n  console.log(data)\n})\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Fragment in Query\nDESCRIPTION: Shows how to reference a defined GraphQL fragment within a query. The fragment doesn't need to be explicitly appended to the query document, just referenced in the selection set.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst allFilmsWithVariablesQueryDocument = graphql(/* GraphQL */ `\n  query allFilmsWithVariablesQuery($first: Int!) {\n    allFilms(first: $first) {\n      edges {\n        node {\n          ...FilmItem\n        }\n      }\n    }\n  }\n`)\n```\n\n----------------------------------------\n\nTITLE: Customizing Global gql Identifiers for Plucking (TypeScript)\nDESCRIPTION: Shows global customization of GraphQL tag identifiers using 'pluckConfig.globalGqlIdentifierName', permitting recognition of multiple tag names in code. '@graphql-codegen/cli' is required. The array includes all permitted identifier names, extending beyond defaults, increasing compatibility with varied codebases.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: ['./src/*.jsx'],\n  pluckConfig: {\n    globalGqlIdentifierName: ['gql', 'graphql', 'myCustomGlobalGqlTag']\n  }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Specifying Document Transform with Runtime Configuration by File in TypeScript\nDESCRIPTION: Shows how to pass an external document transform file with runtime configuration by referencing the file inside an object within the 'documentTransforms' array. The object key is the filename and the value provides config parameters (e.g., 'queryName'). This enables external transforms to receive configuration arguments. The external transform function can then access these via its 'config' parameter.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/document-transform.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'  \n\nconst config: CodegenConfig = {  \n  schema: 'https://localhost:4000/graphql',  \n  documents: ['src/**/*.tsx'],  \n  generates: {  \n    './src/gql/': {  \n      preset: 'client',  \n      documentTransforms: [  \n        {  \n          './my-document-transform.js': {  \n            queryName: 'test'  \n          }  \n        }  \n      ]  \n    }  \n  }  \n}  \nexport default config\n```\n\n----------------------------------------\n\nTITLE: Sending Document Hash via Fetch for Persisted Queries (TypeScript)\nDESCRIPTION: Example of using the `fetch` API to send a persisted query request to a GraphQL server. Instead of sending the full query string in the `body`, it sends the document hash (obtained from `HelloQuery['__meta__']['hash']`) within the `extensions.persistedQuery` object, typically using the `sha256Hash` key. The server must be configured to handle persisted queries.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { graphql } from './gql'\n\nconst HelloQuery = graphql(/* GraphQL */ `\n  query Hello {\n    hello\n  }\n`)\n\nconst response = await fetch('http://yoga/graphql', {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n    accept: 'application/json'\n  },\n  body: JSON.stringify({\n    extensions: {\n      persistedQuery: {\n        version: 1,\n        sha256Hash: HelloQuery['__meta__']['hash']\n      }\n    }\n  })\n})\n\nconsole.log(response.status)\nconsole.log(await response.json())\n```\n\n----------------------------------------\n\nTITLE: Defining Output/Input Types for GraphQL Entities and Arguments in Typescript\nDESCRIPTION: This snippet demonstrates assigning scalar types to GraphQL object fields and query arguments using a unified scalar map. Both the Book object and QueryBookArgs reference Scalars['ID'], so the same type is used for both input and output contexts, which poses limitations when input/output requirements diverge. The example does not require external dependencies.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Book = {\n  __typename?: 'Book'\n  id: Scalars['ID'] // Output's ID can be `string` 👍\n}\n\nexport type QueryBookArgs = {\n  id: Scalars['ID'] // Input's ID can be `string` or `number`. However, the type is only `string` here 👎\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring graphql-code-generator to use non-optional __typename for union members in TypeScript\nDESCRIPTION: Demonstrates how to enable the resolversNonOptionalTypename configuration for the typescript-resolvers plugin within the codegen.ts configuration file. This configuration enforces non-optional __typename fields on union members generated by the plugin, facilitating simpler and type-safe union resolver implementations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// codegen.ts\nconst config: CodegenConfig = {\n  schema: 'src/schema/**/*.graphql',\n  generates: {\n    'src/schema/types.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n      config: {\n        resolversNonOptionalTypename: true // Or `resolversNonOptionalTypename: { unionMember: true }`\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Java Resolver using Generated Types\nDESCRIPTION: Java code snippet illustrating a resolver implementation for the 'user' query using `graphql-java`. It demonstrates importing the generated `Types` class, specifically `Types.QueryUserArgs`, to instantiate and retrieve typed arguments from the `DataFetchingEnvironment`. Requires the generated Java classes and the `graphql-java` library as dependencies.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/java/java.mdx#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.my.app.generated.Types;\nimport com.my.app.models.User;\nimport graphql.schema.DataFetcher;\n\nexport class QueryResolvers {\n  public DataFetcher<User> user() {\n    return env -> {\n      Types.QueryUserArgs args = new Types.QueryUserArgs(env.getArguments());\n      String userId = args.getId();\n\n      // rest of the code\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Operations for Refetch Queries without Input Parameters in Apollo Client\nDESCRIPTION: Demonstrates how to import the generated 'namedOperations' object and use it in Apollo Client to specify refetch queries that do not require input parameters. This approach enhances type safety and auto-completion, reducing errors when performing refetches with predefined query names.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/named-operations-object.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient\n  .mutate(\n    { ... },\n    // No more typos, and you get auto-completion and build time validation\n    { refetchQueries: [namedOperations.Query.myQuery] }\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Code Generator Server Preset (Shell)\nDESCRIPTION: This shell command installs the main GraphQL Code Generator CLI along with the @eddeee888/gcg-typescript-resolver-files preset as dev dependencies. Required to enable type-safe resolver and type artifact generation for modular GraphQL schemas. Use npm or convert to yarn as needed.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @graphql-codegen/cli @eddeee888/gcg-typescript-resolver-files\n```\n\n----------------------------------------\n\nTITLE: Re-install dependencies after plugin setup\nDESCRIPTION: Ensures that Yarn recognizes the new plugin and correctly links it to the monorepo structure. Run this command in the root directory after creating or modifying a plugin's `package.json`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Generated TypedDocumentNode and Type Definitions (TypeScript)\nDESCRIPTION: This snippet shows an example of the TypeScript code generated by GraphQL Code Generator using the `typescript`, `typescript-operations`, and `typed-document-node` plugins. It includes the generated types for a specific GraphQL operation's variables (`RatesQueryVariables`) and result (`RatesQuery`), and a `TypedDocumentNode` constant (`ratesQuery`) that combines the parsed GraphQL document structure with these generated types via generics.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typed-document-node.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Represents the variables type of the operation - generated by `typescript` + `typescript-operations` plugins\nexport type RatesQueryVariables = Exact<{\n  currency: Scalars['String'];\n}>;\n\n// Represents the result type of the operation - generated by `typescript` + `typescript-operations` plugins\nexport type RatesQuery = (\n  { __typename?: 'Query' }\n  & {\n  rates?: Maybe<Array<Maybe<(\n    { __typename?: 'ExchangeRate' }\n    & Pick<ExchangeRate, 'currency' | 'rate'>\n    )>>>\n}\n  );\n\n// Generated by this plugin - creates a pre-compiled `DocumentNode` and passes result type and variables type as generics\nexport const ratesQuery: TypedDocumentNode<RatesQuery, RatesQueryVariables> = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { ... }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Making Typename Non-Optional in GraphQL Codegen\nDESCRIPTION: This configuration shows how to ensure that the `__typename` field is always included in generated types and is non-optional. By setting `nonOptionalTypename` to `true`, the GraphQL Code Generator will automatically add `__typename` to types, even if it's not present in the query, and define it as a non-nullable field.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        nonOptionalTypename: true\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Enhancing Generated RTK Query Endpoints with Cache Tags\nDESCRIPTION: Example of extending the generated API using enhanceEndpoints to add tag types and cache invalidation logic. It demonstrates how to provide cache tags for specific query results.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-rtk-query.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { api as generatedApi } from 'src/app/api/generated'\n\nexport const api = generatedApi.enhanceEndpoints({\n  addTagTypes: ['User'],\n  endpoints: {\n    GetUserById: {\n      providesTags: (result, error, arg) => [{ type: 'User', id: arg.userId }]\n    }\n  }\n})\n\nexport const { useGetUserByIdQuery } = api\n```\n\n----------------------------------------\n\nTITLE: Using Generated GraphQL Query Hooks in a React Component\nDESCRIPTION: Example of how to import and use the generated GraphQL query hooks in a React component. It demonstrates accessing the query data and loading state.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-rtk-query.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMyQuery } from 'src/app/api/generated'\n\nexport const MyComponent = () => {\n  const { data, isLoading } = useMyQuery({ page: 5 })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Plugin with Next.js\nDESCRIPTION: Example configuration for using the GraphQL Code Generator SWC plugin in a Next.js project. Uses the experimental swcPlugins option with artifactDirectory and gqlTagName parameters.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/swc-plugin/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst nextConfig = {\n  // ...\n  experimental: {\n    swcPlugins: [\n      ['@graphql-codegen/client-preset-swc-plugin', { artifactDirectory: './src/gql', gqlTagName: 'graphql' }]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plugin to Extend GraphQL Schema in JavaScript\nDESCRIPTION: This snippet shows how to define a plugin for the GraphQL Code Generator that adds custom types and directives to the schema. The plugin exports an object with a `plugin` method, which retrieves the current schema's type map and returns a concatenated string of type names. The `addToSchema` property injects new Type definitions and directives, which can be used to enhance schema capabilities or influence code generation outputs.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/extend-schema.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugin(schema, documents, config) {\n    const typesMap = schema.getTypeMap()\n\n    return Object.keys(typesMap).join('\\n')\n  },\n  addToSchema: /* GraphQL */ `\n    type MyType {\n      field: String\n    }\n\n    directive @myDirective on OBJECT\n  `\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript type definitions showing union types and resolver parent type fixes\nDESCRIPTION: TypeScript types illustrating the relationship between ResolversTypes, ResolversParentTypes, and ResolversUnionTypes which handle GraphQL unions in generated code. Shows how the union types are extracted into a separate ResolversUnionTypes object and the fix to ensure ResolversParentTypes reference the correct parent types for union members, preserving backwards compatibility.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResolversTypes = {\n  Book: ResolverTypeWrapper<BookMapper>\n  BookPayload: ResolversTypes['BookResult'] | ResolversTypes['StandardError']\n  // Note: `result` on the next line references `ResolversTypes[\"Book\"]`\n  BookResult: ResolverTypeWrapper<Omit<BookResult, 'result'> & { result?: Maybe<ResolversTypes['Book']> }>\n  StandardError: ResolverTypeWrapper<StandardError>\n}\n\nexport type ResolversParentTypes = {\n  Book: BookMapper\n  BookPayload: ResolversParentTypes['BookResult'] | ResolversParentTypes['StandardError']\n  // Note: `result` on the next line references `ResolversParentTypes[\"Book\"]`\n  BookResult: Omit<BookResult, 'result'> & { result?: Maybe<ResolversParentTypes['Book']> }\n  StandardError: StandardError\n}\n\nexport type ResolversUnionTypes = {\n  // Note: `result` on the next line references `ResolversTypes[\"Book\"]` which is only correct for the `ResolversTypes` case\n  BookPayload: (Omit<BookResult, 'result'> & { result?: Maybe<ResolversTypes['Book']> }) | StandardError\n}\n\nexport type ResolversUnionTypes = {\n  BookPayload: (Omit<BookResult, 'result'> & { result?: Maybe<ResolversParentTypes['Book']> }) | StandardError\n}\n\n// ... and the reference is changed in ResolversParentTypes:\nexport type ResolversParentTypes = {\n  // ... other fields\n  BookPayload: ResolversUnionParentTypes['BookPayload']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Custom Variable and Add Plugin (TypeScript)\nDESCRIPTION: Demonstrates configuring GraphQL Code Generator to use external variables (e.g., from a separate config file) for the fetcher's endpoint and fetch parameters. It utilizes the `add` plugin to import these variables before the main code generation occurs. Requires GraphQL schema, operation documents, and the external config file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'MY_SCHEMA_PATH',\n  documents: './src/**/*.graphql',\n  generates: {\n    './generates.ts': {\n      plugins: [\n        {\n          add: {\n            content: \"import { endpointUrl, fetchParams } from './my-config';\"\n          }\n        },\n        'typescript',\n        'typescript-operations',\n        'typescript-react-query'\n      ],\n      config: {\n        fetcher: {\n          endpoint: 'endpointUrl',\n          fetchParams: 'fetchParams'\n        }\n      }\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Fragment Masked Components using makeFragmentData in TypeScript\nDESCRIPTION: Provides the solution for testing components that use fragment masking. The `makeFragmentData` helper function, imported from the generated `./gql` artifacts, is used to wrap the mock data (`profile`) and the fragment document (`ProfileName_PersonFragmentDoc`), creating the necessary masked data structure expected by the component.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport { makeFragmentData } from '../gql'\n\ndescribe('<ProfileName />', () => {\n  it('renders correctly', () => {\n    const profile = { name: 'Adam' }\n    render(<ProfileName profile={makeFragmentData(profile, ProfileName_PersonFragmentDoc)} />)\n\n    expect(screen.getByText('Person Name: Adam')).toBeInTheDocument()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Invoking GraphQL Query with GraphQL.Client in C#\nDESCRIPTION: This example demonstrates how to use the generated C# methods from the c-sharp-operations plugin together with the GraphQL.Client package. After creating a GraphQLHttpClient with the appropriate endpoint and JSON serializer, a GraphQL query is executed using an auto-generated request method. Dependencies include the GraphQL.Client.Http and GraphQL.Client.Serializer.Newtonsoft NuGet packages. Key parameters are the GraphQL endpoint URL and the request object corresponding to the desired operation. The response is awaited asynchronously and deserialized into the specified result type. The usage assumes the existence of properly generated request and type classes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/c-sharp/c-sharp-operations.mdx#_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nusing GraphQL.Client.Http;\nusing GraphQL.Client.Serializer.Newtonsoft;\n\n  ...\n  using var client = new GraphQLHttpClient(\"https://gqlserver\", new NewtonsoftJsonSerializer());\n  var response = await client.SendQueryAsync<Types.Query>(UsersGQL.Request());\n```\n\n----------------------------------------\n\nTITLE: Define GraphQL Query with NgModule Directive\nDESCRIPTION: Shows the usage of the `@NgModule` directive within a GraphQL query definition. This directive is interpreted by the `typescript-apollo-angular` plugin to configure the `providedIn` option for the generated Angular service, allowing you to specify a specific module where the service should be registered instead of the default root injector.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-angular.mdx#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery feed {\n  feed @NgModule(module: \"./feed/feed.module#FeedModule\") {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript-based Codegen Configuration in 'codegen.ts'\nDESCRIPTION: This snippet provides the configuration for GraphQL Code Generator written in TypeScript, specifying the output directory, schema sources, and plugin options to generate types and helpers for React Apollo client integration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/examples/react/apollo-client/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Example configuration for graphql-code-generator in codegen.ts\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: './schema.graphql',\n  documents: './src/**/*.graphql',\n  generates: {\n    './src/gql/': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        withHooks: true,\n        withHOC: false,\n        withComponent: false\n      }\n    }\n  }\n}\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Embedding in GraphQL Documents with TypeScript\nDESCRIPTION: This snippet demonstrates injecting custom metadata into GraphQL documents using the GraphQL Code Generator. It specifies a 'onExecutableDocumentNode' function in the 'presetConfig' to embed metadata like operation type and name into the document's AST, which can later be accessed via the '__meta__' property.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/client/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** codegen.ts */\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://graphql.org/graphql/',\n  documents: ['src/**/*.tsx'],\n  ignoreNoDocuments: true, // for better experience with the watcher\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      plugins: [],\n      presetConfig: {\n        onExecutableDocumentNode(documentNode) {\n          return {\n            operation: documentNode.definitions[0].operation,\n            name: documentNode.definitions[0].name.value\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default config\n\n// Usage example accessing the embedded metadata\nimport { gql } from './gql.js'\n\nconst allFilmsWithVariablesQueryDocument = graphql(/* GraphQL */ `\n  query allFilmsWithVariablesQuery($first: Int!) {\n    allFilms(first: $first) {\n      edges {\n        node {\n          ...FilmItem\n        }\n      }\n    }\n  }\n`)\n\nconsole.log((allFilmsWithVariablesQueryDocument as any)['__meta__'])\n```\n\n----------------------------------------\n\nTITLE: Using Generated Typed Apollo Queries in Svelte - Svelte\nDESCRIPTION: This Svelte component example imports and utilizes the fully typed 'Posts' query generated by the codegen process. It sets up a reactive store with Svelte's '$:', retrieving and displaying post data. Dependencies include the generated TypeScript types and codegen artifacts, configured as shown previously. Outputs: The '$posts.data' variable is available for UI binding.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Posts } from '../graphql/generated'\n\n  $: posts = Posts()\n  // `posts` is fully typed!\n</script>\n\n<!-- UI … -->\n{$posts.data}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing the Generated Document Hash in TypeScript\nDESCRIPTION: Shows how to retrieve the pre-calculated hash associated with a GraphQL document node generated by GraphQL Code Generator with persisted documents enabled. The hash is accessible via the `['__meta__']['hash']` property on the document object (e.g., `HelloQuery['__meta__']['hash']`).\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { graphql } from './gql'\n\nconst HelloQuery = graphql(/* GraphQL */ `\n  query Hello {\n    hello\n  }\n`)\n\n// logs \"b2c3d4e5f6g7h8i9j0a1\"\nconsole.log(HelloQuery['__meta__']['hash'])\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentTransform to Modify GraphQL Documents in GraphQL Code Generator\nDESCRIPTION: This snippet demonstrates how to implement and configure a DocumentTransform function within the GraphQL Code Generator setup. It allows you to programmatically modify GraphQL documents before processing, such as removing directives. Dependencies include '@graphql-codegen/cli' and 'graphql', and the example shows both inline transform functions and external transform files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/client/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: [\n        {\n          transform: ({ documents }) => {\n            return documents.map(documentFile => {\n              documentFile.document = visit(documentFile.document, {\n                Directive: {\n                  leave(node) {\n                    if (node.name.value === 'localOnlyDirective') return null\n                  }\n                }\n              })\n              return documentFile\n            })\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  transform: ({ documents }) => {\n    // Make some changes to the documents\n    return documents\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Inline Fetcher Config (TypeScript)\nDESCRIPTION: Configures the GraphQL Code Generator to include the GraphQL endpoint and fetch parameters directly within the `codegen.ts` file under the `fetcher` object config. This avoids the need to specify these details on each generated hook usage, providing a centralized configuration source. Requires GraphQL schema and operation documents.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'MY_SCHEMA_PATH',\n  documents: './src/**/*.graphql',\n  generates: {\n    './generates.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-query'],\n      config: {\n        fetcher: {\n          endpoint: 'http://localhost:3000/graphql',\n          fetchParams: {\n            headers: {\n              'My-Header': 'SomeValue'\n            }\n          }\n        }\n      }\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generation Script - Shell\nDESCRIPTION: This shell command triggers the code generation process using npm scripts, assuming the corresponding script is defined in package.json. It will parse the schema and documents, and emit generated files as configured. Ensure all previous configuration and installation steps are completed.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run generate\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator to Use Local Plugin (YAML)\nDESCRIPTION: This `codegen.yml` snippet demonstrates how to instruct `graphql-codegen` to use a local plugin file (`my-plugin.js`). It lists the plugin file under the `plugins` array for the `output.ts` generation target, telling codegen to execute this plugin.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/plugin-structure.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nschema: my-schema.graphql\ndocuments: './src/**/*.graphql'\ngenerates:\n  plugins:\n    output.ts:\n      - my-plugin.js\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Require for Code Files in Document Loader (TypeScript)\nDESCRIPTION: Demonstrates disabling the 'require' mechanism for code files containing GraphQL documents by using the 'noRequire' option. This configures '@graphql-codegen/cli' to avoid runtime 'require' when extracting operations, which may be necessary in projects with incompatible module systems. Expects a documents object mapping file patterns to loader options.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: {\n    './src/*.jsx': {\n      noRequire: true\n    }\n  }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Extension of config.avoidOptions in version 4.1.0\nDESCRIPTION: Version 4.1.0 introduces extended configuration options allowing specific control over query, mutation, and subscription fields, replacing the previous general resolver option.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#10077](https://github.com/dotansimha/graphql-code-generator/pull/10077) [`3f4f546`](https://github.com/dotansimha/graphql-code-generator/commit/3f4f5466ff168ad822b9a00d83d3779078e6d8c4) Thanks [@eddeee888](https://github.com/eddeee888)! - Extend `config.avoidOptions` to support query, mutation and subscription\n```\n\n----------------------------------------\n\nTITLE: Using Generated Resolver Types (Directive Mapping) in TypeScript\nDESCRIPTION: This TypeScript snippet shows an example resolver function for the `user` query. It demonstrates how the generated types, influenced by the `@asNumber` directive and the corresponding code generator configuration, result in the `args.id` having the specified `number` type, enabling type-safe access based on the mapped type.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nconst Query: QueryResolvers = {\n  user(_, args) {\n    // args.id is of type 'number'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Svelte Apollo (codegen)\nDESCRIPTION: This Svelte Apollo example demonstrates the use of GraphQL Code Generator. It imports the generated `Posts` function from '../graphql/generated', which is fully typed. The `posts` variable is initialized by calling `Posts()`, which allows type-safe data fetching, improving development efficiency.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { Posts } from '../graphql/generated'\n\n  // `posts` is fully typed, also are `Posts()` options!\n  const posts = Posts()\n</script>\n\n<ul>\n  <!-- UI … -->\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Svelte Component - Async Queries\nDESCRIPTION: This Svelte snippet demonstrates using the generated async Apollo query in a Svelte component.  It utilizes Svelte's `#await` block to handle loading, success, and error states when fetching data via a promise-based query.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-svelte-apollo.mdx#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte\n<script lang=\"ts\">\n  import { AsyncTransactions } from 'codegen'\n\n  var address = '0x0000000000000000000000000000'\n</script>\n\n<ul>\n  {#await AsyncTransactions({ address })}\n    Loading…\n  {:then transactions}\n    {#each transactions || [] as transaction}\n      <li>Sent transaction from {transaction.from} to {transaction.to}</li>\n    {/each}\n  {/await}\n</ul>\n```\n```\n\n----------------------------------------\n\nTITLE: GraphQL Code Generation and Server Execution\nDESCRIPTION: This snippet provides instructions for generating code using `yarn codegen` and then running a development server using `yarn dev`.  These commands are typically executed in a terminal within a project directory that utilizes GraphQL Code Generator.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/examples/typescript-graphql-request/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# generate code\nyarn codegen\n# run the server\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Apollo in Svelte - Svelte\nDESCRIPTION: This snippet demonstrates querying posts using the Apollo client within a Svelte component, leveraging the svelte-apollo plugin. It defines a GraphQL query with gql, uses the 'query' function to execute it, and binds the result to the component. Ensure 'svelte-apollo', 'graphql', and necessary generated types are installed and configured. Inputs: none directly; output: observable Apollo query result accessible as 'posts.data'. Requires correct codegen setup to leverage typings.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { query } from 'svelte-apollo'\n\n  const postsQueryDocument = gql`\n    query Posts {\n      posts {\n        id\n        title\n        author {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  `\n\n  const posts = query(postsQueryDocument)\n</script>\n\n<!-- UI … -->\n{posts.data}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Directive-Based Resolver Mapping in YAML\nDESCRIPTION: This YAML snippet illustrates how to configure the `directiveResolverMappings` option for `graphql-code-generator`. It maps the `@authenticated` directive to a custom resolver type, `AuthenticatedResolver`, while maintaining the ability to use a default `customResolverFn` for other resolvers. This allows different resolver signatures based on directives.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  # This was possible before\n  customResolverFn: ../resolver-types.ts#UnauthenticatedResolver\n  # This is new\n  directiveResolverMappings:\n    authenticated: ../resolvers-types.ts#AuthenticatedResolver\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen for Typescript Nhost Plugin - TypeScript\nDESCRIPTION: This snippet initializes a GraphQL Code Generator configuration in TypeScript, specifying the schema endpoint and output path for the generated Nhost SDK schema types. It requires installing '@graphql-codegen/cli' and the 'typescript-nhost' plugin. The 'config' object lists the local GraphQL endpoint and configures the code generator to output TypeScript schema definitions to 'src/schema.ts'. The configuration should be exported as default for use by the CLI.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-nhost.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:4000',\n  generates: {\n    'src/schema.ts': { plugins: ['typescript-nhost'] }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Command to Run graphql-codegen via npm Script\nDESCRIPTION: Shell command to execute the \"generate\" npm script, which runs graphql-codegen according to the package.json configuration. This generates the GraphQL type files colocated near their corresponding operations based on the configured near-operation-file preset.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/generated-files-colocation.mdx#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run generate\n```\n\n----------------------------------------\n\nTITLE: Configuring InMemoryCache with IntrospectionFragmentMatcher in Apollo Client 2 - TypeScript\nDESCRIPTION: This snippet demonstrates integrating a fragment matcher with Apollo Client 2 using the 'apollo-cache-inmemory' package and the Fragment Matcher plugin's output. It requires '@apollo/client', 'apollo-cache-inmemory', and the generated 'introspection-result' JSON file as dependencies. The 'IntrospectionFragmentMatcher' is created with the introspection data and provided to 'InMemoryCache' for proper fragment matching. The input expects the generated introspection file at the specified import path.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/fragment-matcher.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'\n\n// generated by Fragment Matcher plugin\nimport introspectionQueryResultData from '../introspection-result'\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData\n})\n\nconst cache = new InMemoryCache({ fragmentMatcher })\n```\n\n----------------------------------------\n\nTITLE: Running Built TypeScript Output with Yarn (Bash)\nDESCRIPTION: This snippet runs the output generated by the TypeScript compiler.  It invokes the `start` script defined in the package.json file.  This script usually executes the main entry point of the application, now compiled to JavaScript.  The execution environment is likely Node.js.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/examples/typescript-esm/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n# run the tsc output\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL union resolver with optional __typename in TypeScript\nDESCRIPTION: Shows resolver implementation where the __typename field is not included in resolver results, requiring manual property checks in the __resolveType function to determine the specific union member type. Demonstrates how to return data or error payloads without explicit typename annotation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Query/book.ts\nexport const book = async () => {\n  try {\n    const book = await fetchBook()\n    // 1. No `__typename` in resolver results...\n    return {\n      node: book\n    }\n  } catch (e) {\n    return {\n      message: 'Failed to fetch book'\n    }\n  }\n}\n\n// BookPayload.ts\nexport const BookPayload = {\n  __resolveType: parent => {\n    // 2. ... means more checks in `__resolveType`\n    if ('message' in parent) {\n      return 'PayloadError'\n    }\n    return 'BookResult'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Query Component\nDESCRIPTION: This Vue component uses the generated `useMessageQuery` hook to fetch data and display it in the template. It shows a loading state and displays the `id` from the `feed` object when the data is loaded.  It utilizes Vue Composition API.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-apollo.mdx#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"loading\">Loading…</div>\n    <div v-else>{{ result.feed.id }}</div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from '@vue/composition-api'\nimport { useMessageQuery } from '../generated/graphqlOperations'\n\nexport default defineComponent({\n  setup() {\n    const { result, loading } = useMessageQuery()\n    return { result, loading }\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema at Root Level - TypeScript\nDESCRIPTION: This snippet demonstrates configuring the GraphQL schema at the root level of the `CodegenConfig` object. It specifies a URL as the schema source and defines the output file and plugins.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:3000/graphql',\n  generates: {\n    './src/types.ts': {\n      plugins: ['typescript']\n    }\n  }\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Rendering plugin header and API documentation components\nDESCRIPTION: This snippet renders UI components for plugin header and API documentation, providing visual and descriptive context within a documentation or UI page for the plugin. It depends on imported components from local modules.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-stencil-apollo.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<PluginHeader />\\n<PluginApiDocs />\n```\n\n----------------------------------------\n\nTITLE: Utilizing Extended Scalars in Typescript Object and Argument Types\nDESCRIPTION: This snippet illustrates how generated Typescript types for GraphQL entities and query arguments now refer explicitly to the correct 'input' or 'output' of the scalar mapping. 'Book' uses Scalars['ID']['output'] for outputs, while 'QueryBookArgs' uses Scalars['ID']['input'] for inputs. This enables accurate typing compliance for both server and client code. Only Typescript is required.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Book = {\n  __typename?: 'Book'\n  id: Scalars['ID']['output'] // Output's ID can be `string` 👍\n}\n\nexport type QueryBookArgs = {\n  id: Scalars['ID']['input'] // Input's ID can be `string` or `number` 👍\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Queries - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to configure the GraphQL Code Generator to generate asynchronous (promise-based) queries. It uses the `asyncQuery: true` setting, allowing you to fetch data using the `await` keyword in Svelte components.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-svelte-apollo.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts filename=\"codegen.ts\"\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'graphql-codegen-svelte-apollo'],\n      config: {\n        clientPath: 'PATH_TO_APOLLO_CLIENT',\n        asyncQuery: true\n      }\n    }\n  }\n}\nexport default config\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentTransform with File Path (TS)\nDESCRIPTION: This TypeScript snippet shows how to configure the `documentTransforms` option in `@graphql-codegen/cli` to use a separate file for document transformation. It defines a CodegenConfig object and specifies the path to the transformation file (`./my-document-transform.js`) within the documentTransforms array.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-core/CHANGELOG.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: ['./my-document-transform.js'],\n    },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Type-Safe GraphQL Execution Function\nDESCRIPTION: This TypeScript code defines an `execute` function that wraps the `fetch` API to execute GraphQL queries. It takes a `TypedDocumentString` as input, which contains the query and its TypeScript type. It returns a promise that resolves to the typed result. It sets the `Content-Type` header to `application/json` and the `Accept` header to `application/graphql-response+json`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TypedDocumentString } from './graphql'\n\nexport async function execute<TResult, TVariables>(\n  query: TypedDocumentString<TResult, TVariables>,\n  ...[variables]: TVariables extends Record<string, never> ? [] : [TVariables]\n) {\n  const response = await fetch('https://graphql.org/graphql/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/graphql-response+json'\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  })\n\n  if (!response.ok) {\n    throw new Error('Network response was not ok')\n  }\n\n  return response.json() as TResult\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Extending Query Type for Local State\nDESCRIPTION: This GraphQL code extends the `Query` type to include a `todos` field, enabling queries to fetch `Todo` data from local state. This is useful when performing queries exclusively against Apollo's local state.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/apollo-local-state.mdx#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Query {\n  todos: Todo\n}\n```\n\n----------------------------------------\n\nTITLE: Running codegen in watch mode with file glob (Shell)\nDESCRIPTION: This snippet demonstrates running the GraphQL Code Generator in watch mode, specifying a custom list of files to watch using a glob expression.  This ensures the codegen regenerates output when changes occur in the specified files.  `@parcel/watcher` is used internally for efficient directory change monitoring.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/development-workflow.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn graphql-codegen --watch \"src/**/*.js\"\n```\n\n----------------------------------------\n\nTITLE: Scalar Input/Output Configuration (Shorthand) in TypeScript\nDESCRIPTION: This configuration shorthand allows developers to set both input and output types by assigning a single type. When a string is given, it is used for both the input and output types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nconfig: {\n  scalars: {\n    ID: 'string' // This means `string` will be used for both ID's input and output types\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Apollo Client Helpers Plugin in CodeGen\nDESCRIPTION: Configuration example for adding the typescript-apollo-client-helpers plugin to your GraphQL CodeGen setup. It shows how to specify the schema and output file for generating Apollo Client helper types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-client-helpers.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'my-schema.graphql',\n  generates: {\n    'apollo-helpers.ts': {\n      plugins: ['typescript-apollo-client-helpers']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Query Options\nDESCRIPTION: This Vue component uses the `useViewerQuery` hook with an options object to conditionally enable the query based on the `isAuthenticated` ref. The query only executes when `isAuthenticated.value` is true. Vue Composition API is used.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-apollo.mdx#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { defineComponent, watchEffect } from '@vue/composition-api'\nimport { useViewerQuery } from '../generated/graphqlOperations'\nimport { isAuthenticated } from 'src/store/authentication'\n\nexport default defineComponent({\n  setup(_, { root }) {\n    // our imported ref:\n    // const isAuthenticated = ref(false)\n    const { result, loading, error } = useViewerQuery(() => ({\n      enabled: isAuthenticated.value\n    }))\n\n    return {\n      loading,\n      error,\n      result\n    }\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: NPM Script to Run graphql-codegen\nDESCRIPTION: This JSON snippet defines an npm script named \"generate\" for running the graphql-codegen command in a project's package.json file. This script triggers the GraphQL Code Generator to process the configured inputs and output the generated files as specified by the user's graphql-codegen configuration, including colocated files when using the near-operation-file preset.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/generated-files-colocation.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"generate\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreNoDocuments via CLI in graphql-code-generator (Bash)\nDESCRIPTION: This Bash command activates the ignoreNoDocuments option when invoking the graphql-code-generator CLI, causing the tool to skip erroring when no GraphQL documents are found. The --config-file argument sets the configuration file path, while --ignore-no-documents forces a zero exit code if input documents are missing. Intended for CI/CD use cases and requires CLI version 2.8.0 or newer.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ codegen --config-file=config.yml --ignore-no-documents\n\n```\n\n----------------------------------------\n\nTITLE: Generating Type Patterns For GraphQL Types - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use a pattern builder utility to create pattern strings for configuring code generation rules for multiple GraphQL types at once. The function 'Pattern.forTypeNames' takes in a list of type names (e.g., 'Droid', 'Starship') and returns a semicolon-delimited string pattern that matches those types in configuration contexts. Dependency is the presence of the pattern builder (Pattern) and the proper GraphQL type names. Input consists of the array of type names; output is a configuration string usable in the plugin config for targeted rule application.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forTypeNames([Droid, Starship])\nconsole.log(pattern) // \"Droid;Starship;\"\n```\n\n----------------------------------------\n\nTITLE: Installing get-graphql-schema and Downloading Schema\nDESCRIPTION: Shell commands to install the `get-graphql-schema` tool globally and then use it to download the GraphQL schema from a specified endpoint into a local file (`schema.graphql`). This is a prerequisite step before running the code generator.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g get-graphql-schema\n\nget-graphql-schema https://your-graphql-endpoint > schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generator CLI with GitHub Token in Bash\nDESCRIPTION: This Bash snippet shows how to execute the GraphQL Code Generator CLI with the necessary environment variable, 'GITHUB_TOKEN', set for authentication with GitHub. The input is the GitHub token, and the output is the triggered code generation process using the provided schema config.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_26\n\nLANGUAGE: Bash\nCODE:\n```\nGITHUB_TOKEN=<YOUR GITHUB TOKEN> yarn graphql-codegen\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for GraphQL Code Generator Using schema-ast Plugin\nDESCRIPTION: This snippet configures the GraphQL Code Generator using TypeScript, specifying schema sources and defining output files with the schema-ast plugin enabled. It requires '@graphql-codegen/cli' types and handles schema paths and custom scalars. The configuration object 'config' includes 'schema' and 'generates' settings.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/schema-ast.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  schema: ['http://localhost:3000/graphql', './src/**/*.graphql', 'scalar MyCustomScalar'],\n  generates: {\n    'path/to/file.graphql': {\n      plugins: ['schema-ast']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Codegen Command (npm)\nDESCRIPTION: This shell command runs the previously configured 'generate' script using npm, triggering GraphQL Code Generator to emit types and resolvers based on the schema and config. Ensure package.json includes the 'generate' script and required dependencies are installed. Typical output is a TypeScript types file for resolvers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga.mdx#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run generate\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for Non-Optional __typename (TypeScript)\nDESCRIPTION: Example configuration file (`codegen.ts`) for the GraphQL Code Generator. It sets up schema and output paths and specifies the `typescript` and `typescript-resolvers` plugins. The configuration for `typescript-resolvers` includes the `resolversNonOptionalTypename: true` option, which enables the addition of non-optional `__typename` to union members in the generated resolver types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// codegen.ts\nconst config: CodegenConfig = {\n  schema: 'src/schema/**/*.graphql',\n  generates: {\n    'src/schema/types.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n      config: {\n        resolversNonOptionalTypename: true // Or `resolversNonOptionalTypename: { unionMember: true }`\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with @client Directive\nDESCRIPTION: This GraphQL query demonstrates the use of the `@client` directive to fetch data from Apollo Local State. The `selected` field is marked with `@client`, indicating that it should be resolved client-side.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/apollo-local-state.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery myQuery {\n  todos {\n    id\n    title\n    checked\n    selected @client\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gqlImport for Gatsby\nDESCRIPTION: This configures GraphQL Code Generator to use `gatsby#graphql` for handling GraphQL queries, aligning with Gatsby's GraphQL integration. By setting `gqlImport` to `gatsby#graphql`, the generated code will use Gatsby's GraphQL tag for defining GraphQL queries.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        gqlImport: 'gatsby#graphql'\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using Published GraphQL Code Generator Plugin Package (YAML)\nDESCRIPTION: This `codegen.yml` snippet shows how to configure `graphql-codegen` to use a plugin that has been published to npm and installed as a dependency. Instead of providing a local file path, the name of the installed npm package is listed under the `plugins` array.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/plugin-structure.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nschema: my-schema.graphql\ndocuments: './src/**/*.graphql'\ngenerates:\n  plugins:\n    output.ts:\n      - my-custom-plugin-package\n```\n\n----------------------------------------\n\nTITLE: Customizing Hasura Scalars in Codegen Configuration - YAML\nDESCRIPTION: This extended YAML codegen configuration snippet adds custom scalar resolution for common Hasura types using a scalar mapping. It demonstrates how to use the '@graphql-codegen/add' plugin to introduce a 'JSONValue' type definition and remap several Hasura scalars (e.g., 'uuid', 'bigint', 'citext', etc.) to their appropriate TypeScript equivalents. Place this in 'codegen.yaml' to enable robust handling of custom scalars in your generated types. Requires installation of the '@graphql-codegen/add' plugin.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-nhost.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  - http://localhost:1337/v1/graphql:\n      headers:\n        x-hasura-admin-secret: nhost-admin-secret\ngenerates:\n  ./src/schema.ts:\n    plugins:\n      - typescript-nhost\n      - add:\n          content: 'export type JSONValue = string | number | boolean | { [x: string]: JSONValue } | Array<JSONValue>;'\n    config:\n      scalars:\n        uuid: 'string'\n        bigint: 'number'\n        citext: 'string'\n        timestamptz: 'string'\n        json: 'JSONValue'\n        jsonb: 'JSONValue'\n        bytea: 'string'\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Definition for Local Schema\nDESCRIPTION: This GraphQL type definition defines the structure of a `Todo` type within the local schema. It includes a `selected` field of type `Boolean!` (non-nullable boolean), which is used to represent the selection state of a todo item.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/apollo-local-state.mdx#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Todo {\n  selected: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Underscores with transformUnderscore Option\nDESCRIPTION: Configuration that uses Pascal case for type names while also removing underscores from names by setting the transformUnderscore option to true.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/naming-convention.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  config: {\n    namingConvention: {\n      typeNames: 'change-case-all#pascalCase',\n      transformUnderscore: true\n    }\n  }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeScript Source Files for Document Scanning in GraphQL Code Generator\nDESCRIPTION: Illustrates including TypeScript and TSX files as sources for embedded GraphQL documents using a glob with negations (ignoring '*.d.ts'). '@graphql-codegen/cli' is required, with 'documents' pointing to files that contain GraphQL operations embedded in code using tagged templates or comments. This feature exploits codegen's built-in scanner and is suited for monorepo or codebase setups where GraphQL queries are inline within code files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://server1.com/graphql',\n  documents: 'src/**/!(*.d).{ts,tsx}'\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentTransform in External File\nDESCRIPTION: This JavaScript snippet demonstrates how to define a `documentTransform` in a separate JavaScript file, allowing for modularity and reusability. It exports an object with a `transform` function that accepts the `documents` as input and allows changes to be made. This separate file can then be referenced in a configuration file to apply this transformation to the GraphQL documents.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/graphql-modules/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  transform: ({ documents }) => {\n    // Make some changes to the documents\n    return documents\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Patch bump for schema-ast and plugin-helpers in version 4.0.4\nDESCRIPTION: Version 4.0.4 releases a patch update for schema-ast to 4.0.2 and plugin-helpers to 5.0.3, supporting release stability and bug fixes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#9813](https://github.com/dotansimha/graphql-code-generator/pull/9813) [`4e69568`](https://github.com/dotansimha/graphql-code-generator/commit/4e6956899c96f8954cea8d5bbe32aa35a70cc653) Thanks [@saihaj](https://github.com/saihaj)! - bumping for a release\n\n- Updated dependencies [[`4e69568`](https://github.com/dotansimha/graphql-code-generator/commit/4e6956899c96f8954cea8d5bbe32aa35a70cc653)]:\n  - @graphql-codegen/visitor-plugin-common@4.1.2\n  - @graphql-codegen/schema-ast@4.0.2\n  - @graphql-codegen/plugin-helpers@5.0.3\n```\n\n----------------------------------------\n\nTITLE: GraphQL Code Generation via GraphQL-Codegen CLI - Bash\nDESCRIPTION: This snippet shows the replacement command 'graphql-codegen' which utilizes the actively maintained GraphQL-Codegen CLI. Before use, the '@graphql-codegen/cli' package must be installed. This command generates code from GraphQL schemas and operations as specified in the codegen configuration. It should be used in place of the deprecated 'graphql generate' command, supporting similar arguments and output, but with ongoing support and updates.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/graphql-cli.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngraphql-codegen\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen with flutter-freezed (TypeScript)\nDESCRIPTION: TypeScript configuration file (`codegen.ts`) for GraphQL Code Generator. It defines the configuration programmatically, specifying the input schema and output file for the `flutter-freezed` plugin, similar to the YAML config.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  generates: {\n    'lib/data/models/app_models.dart': {\n      plugins: {\n        'flutter-freezed': {}\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configure GraphQL Code Generator with typed-document-node plugin (TypeScript)\nDESCRIPTION: This configuration file (`codegen.ts`) sets up GraphQL Code Generator to process a GraphQL schema and documents, generating TypeScript types and `TypedDocumentNode` objects. It specifies the schema source, document locations, and the output file path, ensuring the necessary plugins (`typescript`, `typescript-operations`, and `typed-document-node`) are included for generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typed-document-node.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'SCHEMA_FILE_OR_ENDPOINT_HERE',\n  documents: './src/**/*.graphql',\n  generates: {\n    './src/graphql-operations.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typed-document-node']\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen with typescript-resolvers Plugin in TypeScript\nDESCRIPTION: Defines a GraphQL Code Generator configuration in TypeScript format specifying the schema and output file with the typescript and typescript-resolvers plugins. This config enables typed resolver signature generation and outputs resolver typings to a specified file. Requires '@graphql-codegen/cli' package. Inputs include the GraphQL schema location and desired output paths. Outputs a typed resolvers file usable throughout the project. The snippet demonstrates basic plugin usage for type safety in resolver implementations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-resolvers.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.json',\n  generates: {\n    './src/resolvers-types.ts': {\n      plugins: ['typescript', 'typescript-resolvers']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Schema from Multiple GraphQL Files - TypeScript\nDESCRIPTION: This snippet shows how to load a schema from multiple `.graphql` files using a glob expression. Code Generator will merge these files into a single schema. Uses file system globbing patterns.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'src/**/*.graphql',\n  // ...\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Configure TSLint after all file writes in GraphQL Codegen (TS)\nDESCRIPTION: This code configures GraphQL Code Generator to run TSLint after all files are generated using the `afterAllFileWrite` hook. The hook in `codegen.ts` runs the `tslint --fix` command. This is helpful for larger projects as it runs TSLint once all files are written.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/prettier.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  hooks: { afterAllFileWrite: ['tslint --fix'] }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Specifying Output-Level Lifecycle Hooks in GraphQL Code Generator Configuration - TypeScript\nDESCRIPTION: This snippet illustrates configuring lifecycle hooks for a specific output target rather than globally by placing hooks within the 'generates' block. Using the 'afterOneFileWrite' hook, it runs 'prettier --write' on files after each individual output is written. This approach allows custom hooks on a per-output basis, providing granular control over scripting for different generated outputs. Type safety is ensured by importing CodegenConfig from '@graphql-codegen/cli'. Required dependencies include the GraphQL Code Generator and Prettier. Inputs are the GraphQL schema and operation documents, and outputs are generated client code in the specified folder.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/lifecycle-hooks.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\\n\\nconst config: CodegenConfig = {\\n  schema: 'http://localhost:4000/graphql',\\n  documents: ['src/**/*.tsx'],\\n  generates: {\\n    './src/gql/': {\\n      preset: 'client',\\n      hooks: {\\n        afterOneFileWrite: ['prettier --write']\\n      }\\n    }\\n  }\\n}\\n\\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Add TypedDocumentNode string alternative\nDESCRIPTION: This major change introduces an alternative string for `TypedDocumentNode` which does not require GraphQL AST on the client. This simplifies the process and removes the need to depend on AST which can increase the size of your bundles. This change requires `@graphql-typed-document-node/core` in version `3.2.0` or higher.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/gql-tag-operations/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Configure Prettier after all file writes in GraphQL Codegen (TS)\nDESCRIPTION: This code snippet configures GraphQL Code Generator to run Prettier after all files have been generated. It utilizes the `afterAllFileWrite` hook in the `codegen.ts` configuration to execute the `prettier --write` command. This approach can be more efficient, especially when used with the `near-operation-file` preset, due to its better performance when writing many files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/prettier.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  hooks: { afterAllFileWrite: ['prettier --write'] }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Schema as String - TypeScript\nDESCRIPTION: This snippet shows how to specify the schema directly as an AST string in the configuration file. This method is often used for testing purposes. It configures the `schema` property with a string containing GraphQL schema definition.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'type MyType { foo: String } type Query { myType: MyType }'\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Including Code Files as Document Sources (TypeScript/JSX)\nDESCRIPTION: Shows that the GraphQL Code Generator can scan code files, such as '.jsx', for embedded GraphQL operation definitions. '@graphql-codegen/cli' is required; 'documents' points to code file patterns, allowing the tool to extract queries from tagged templates or magic comments. This is essential for React or similar environments where queries are colocated in code.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: ['./src/*.jsx']\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Customizing Input/Output Types for Scalars in GraphQL Codegen Configuration\nDESCRIPTION: This snippet demonstrates how to configure custom input/output mappings for scalars in the GraphQL Code Generator configuration. Users supply a 'scalars' object in the codegen config, specifying different types for input and output as strings referencing Typescript types. This allows precise control over how the generator emits Typescript signatures for scalar types. The configuration is JSON-serializable and targets codegen tools.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconfig: {\n  scalars: {\n    ID: {\n      input: 'string',\n      output: 'string | number'\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Client Path - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates the configuration of the GraphQL Code Generator plugin. It sets the `clientPath` option, which specifies the path to the Apollo client. This setting is required by the plugin for generating queries.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-svelte-apollo.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts filename=\"codegen.ts\"\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'graphql-codegen-svelte-apollo'],\n      config: {\n        clientPath: 'PATH_TO_APOLLO_CLIENT'\n      }\n    }\n  }\n}\nexport default config\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Types with Input/Output in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define scalar types with separate input and output types. It showcases how the GraphQL Code Generator generates types that handle input and output types correctly. The example uses `ID` scalar as a case study and shows how input/output types are assigned in both input and output types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type Scalars = {\n  ID: string\n}\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type Book = {\n  __typename?: 'Book'\n  id: Scalars['ID'] // Output's ID can be `string` 👍\n}\n\nexport type QueryBookArgs = {\n  id: Scalars['ID'] // Input's ID can be `string` or `number`. However, the type is only `string` here 👎\n}\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type Scalars = {\n  ID: {\n    input: string | number\n    output: string\n  }\n}\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type Book = {\n  __typename?: 'Book'\n  id: Scalars['ID']['output'] // Output's ID can be `string` 👍\n}\n\nexport type QueryBookArgs = {\n  id: Scalars['ID']['input'] // Input's ID can be `string` or `number` 👍\n}\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type Scalars = {\n  ID: {\n    input: string;\n    output: string | number;\n  }\n}\n\nexport type Book = {\n  __typename?: \"Book\";\n  id: Scalars[\"ID\"]['output']; // Resolvers can return `string` or `number` in ID fields 👍\n};\n\nexport type QueryBookArgs = {\n  id: Scalars[\"ID\"]['input']; // Resolvers receive `string` in ID fields 👍\n};\n\nexport type ResolversTypes = {\n  ID: ID: ResolverTypeWrapper<Scalars['ID']['output']>; // Resolvers can return `string` or `number` in ID fields 👍\n}\n\nexport type ResolversParentTypes = {\n  ID: Scalars['ID']['output']; // Resolvers receive `string` or `number` from parents 👍\n};\n\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Svelte Apollo\nDESCRIPTION: This Svelte component fetches posts using `svelte-apollo`. The GraphQL query `postsQueryDocument` is defined using `gql`, and the `query` function from `svelte-apollo` is used to execute the query. The example demonstrates a simple way to fetch data in a Svelte component, but requires manual definition of types or relies on implicit typing.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { query } from 'svelte-apollo'\n\n  const postsQueryDocument = gql`\n    query Posts {\n      posts {\n        id\n        title\n        author {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  `\n\n  const posts = query(postsQueryDocument)\n</script>\n\n<ul>\n  <!-- UI … -->\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Resolvers with Typescript-resolvers Plugin and Apollo Server Integration in TypeScript\nDESCRIPTION: Combines GraphQL enum type definitions with codegen config snippets that map enums to custom TypeScript enum implementations or explict enum values. Shows how to configure enumValues mapping for enums to internal TypeScript enum representations to facilitate type-safe resolver logic. Supports both string map and import path styles for enum mapping. Outputs fully typed GraphQL enum resolvers that map between internal and GraphQL enums, enabling safe use in resolver implementations. Requires Apollo Server or graphql-tools for enum resolver support.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-resolvers.mdx#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  favoriteColor: Color!\n}\n\nenum Color {\n  RED\n  BLUE\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  generates: {\n    './resolvers-types.ts': {\n      config: {\n        enumValues: {\n          Color: './enums#ColorsCode'\n        }\n      },\n      plugins: ['typescript', 'typescript-resolvers']\n    }\n  }\n}\nexport default config\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ColorsCode {\n  MY_RED = '#FF0000',\n  MY_BLUE = '#0000FF'\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolvers } from './resolvers-types'\nimport { ColorsCode } from './enums'\n\nconst resolvers: Resolvers = {\n  Color: {\n    RED: ColorsCode.MY_RED,\n    BLUE: ColorsCode.MY_BLUE\n  },\n  Query: {\n    favoriteColor: () => ColorsCode.MY_RED // Now you cn return this, and it will be mapped to your actual GraphQL enum\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extended Scalar Types in Resolver Type Definitions\nDESCRIPTION: This snippet illustrates the advanced usage of input/output scalar typing in resolver contexts, as generated by the 'typescript-resolvers' plugin. ResolversTypes and ResolversParentTypes use Scalars['ID']['output'], meaning the ID field in resolvers can now be string or number as appropriate. This pattern depends on Typescript and familiarity with resolver scaffolding generated by codegen plugins.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Scalars = {\n  ID: {\n    input: string;\n    output: string | number;\n  }\n}\n\nexport type Book = {\n  __typename?: \"Book\";\n  id: Scalars[\"ID\"]['output']; // Resolvers can return `string` or `number` in ID fields 👍\n};\n\nexport type QueryBookArgs = {\n  id: Scalars[\"ID\"]['input']; // Resolvers receive `string` in ID fields 👍\n};\n\nexport type ResolversTypes = {\n  ID: ResolverTypeWrapper<Scalars['ID']['output']>; // Resolvers can return `string` or `number` in ID fields 👍\n}\n\nexport type ResolversParentTypes = {\n  ID: Scalars['ID']['output']; // Resolvers receive `string` or `number` from parents 👍\n};\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Documents Directly as AST Strings (TypeScript)\nDESCRIPTION: Illustrates assigning an array of GraphQL operation strings directly to the 'documents' field for quick testing or inline definition. '@graphql-codegen/cli' must be installed. Input is an array of operation definitions as strings; output is generated TypeScript with extracted types for each operation. No files are read from disk.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: ['query { f1 }', 'query { f2 }']\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring Directive-Based Type Mapping in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure `graphql-code-generator` plugins to use the `directiveArgumentAndInputFieldMappings` option. It maps the `@asNumber` directive to the `number` type in the generated code, allowing argument or input field types to be overridden based on directive usage. This configuration helps the generator understand how to handle types modified by specific directives.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  config:\n    directiveArgumentAndInputFieldMappings:\n      asNumber: number\n```\n\n----------------------------------------\n\nTITLE: Installing @graphql-codegen/client-preset-swc-plugin\nDESCRIPTION: Command for installing the SWC plugin for GraphQL Code Generator client preset via yarn. This plugin enables code splitting for GraphQL operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/swc-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @graphql-codegen/client-preset-swc-plugin\n```\n\n----------------------------------------\n\nTITLE: Codegen Config with GraphQL Yoga File Upload Support (TypeScript)\nDESCRIPTION: This TypeScript config adapts the GraphQL Code Generator server preset to support GraphQL Yoga's file upload feature by overriding the File scalar type and customizing which resolvers are generated for various GraphQL types. The resolvers generation pattern allows granular control over which files are created for queries, mutations, and objects.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\nimport { defineConfig } from '@eddeee888/gcg-typescript-resolver-files'\n\nconst config: CodegenConfig = {\n  schema: '**/schema.graphql',\n  generates: {\n    'src/schema': defineConfig({\n      // The following config is designed to work with GraphQL Yoga's File uploads feature\n      // https://the-guild.dev/graphql/yoga-server/docs/features/file-uploads\n      scalarsOverrides: {\n        File: { type: 'File' }\n      },\n      resolverGeneration: {\n        query: '*',\n        mutation: '*',\n        subscription: '*',\n        scalar: '!*.File',\n        object: '*',\n        union: '',\n        interface: ''\n      }\n    })\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring plugins for backward compatibility with new types\nDESCRIPTION: This snippet shows how to add the 'typescript-compatibility' plugin into the codegen YAML configuration alongside standard plugins, enabling generation of backward-compatible types that map to the new plugin output for ease of migration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-0-18.mdx#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n./my-file.ts:\n  schema: schema.json\n  plugins:\n    - typescript\n    - typescript-operations\n    - typescript-compatibility\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Plugin with reactApolloVersion\nDESCRIPTION: This code snippet demonstrates how to configure the GraphQL Code Generator to use the `typescript-react-apollo` plugin and specify the React Apollo version. It sets the `reactApolloVersion` configuration option to `3` within the `codegen.ts` file.  This affects how the generated code interacts with React Apollo.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        reactApolloVersion: 3\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Rendering Plugin Documentation Components in JSX\nDESCRIPTION: Renders the PluginHeader and PluginApiDocs components which display information about the time plugin, including its purpose, usage instructions, and API documentation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/time.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<PluginHeader />\n<PluginApiDocs />\n```\n\n----------------------------------------\n\nTITLE: Adding note about bundle size reduction\nDESCRIPTION: This patch adds a note explaining how to enable bundle size reduction for the generated `graphql` tag file within the gql-tag-operations plugin. This allows developers to generate smaller files, contributing to better performance.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/gql-tag-operations/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Installing GraphQL Code Generator\nDESCRIPTION: This shell command shows the steps to install GraphQL Code Generator and its dependencies using npm or yarn. It installs `graphql`, `typescript`, and `@graphql-codegen/cli` as development dependencies. This setup is a prerequisite for using GraphQL Code Generator to generate types and resolvers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql\nnpm i -D typescript @graphql-codegen/cli\n```\n\n----------------------------------------\n\nTITLE: Applying GraphQL Visitor Pattern with oldVisit and Stub Methods (JavaScript)\nDESCRIPTION: This snippet builds upon the basic setup, demonstrating how to define a visitor object that specifies functions to be called for different GraphQL AST node types (e.g., `FieldDefinition`, `ObjectTypeDefinition`). It then shows how to use the `oldVisit` function from `@graphql-codegen/plugin-helpers` to traverse the AST, applying the defined visitor functions during the traversal (specifically, using the `leave` option which processes child nodes before parent nodes).\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/using-visitor.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getCachedDocumentNodeFromSchema, oldVisit } = require('@graphql-codegen/plugin-helpers')\n\nmodule.exports = {\n  plugin(schema, documents, config) {\n    const astNode = getCachedDocumentNodeFromSchema(schema) // Transforms the GraphQLSchema into ASTNode\n    const visitor = {\n      FieldDefinition(node) {\n        // This function triggered per each field\n      },\n      ObjectTypeDefinition(node) {\n        // This function triggered per each type\n      }\n    }\n\n    const result = oldVisit(astNode, { leave: visitor })\n\n    return result.definitions.join('\\n')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript MongoDB Model Interface - TypeScript\nDESCRIPTION: This snippet shows a TypeScript interface as generated by the plugin from the annotated GraphQL schema. It uses the ObjectId type for primary keys and typed fields mapped from the schema. To use this code, ensure the 'mongodb' Node module is installed. Inputs: N/A (output from the code generator). Outputs: TypeScript interfaces representing MongoDB documents. Limitations: The interface is not generated manually and should match schema annotations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ObjectId } from 'mongodb'\n\nexport interface UserDbObject {\n  _id: ObjectId\n  username: string\n  email?: string | null\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Prettier after single file write in GraphQL Codegen (TS)\nDESCRIPTION: This code snippet demonstrates how to configure GraphQL Code Generator to run Prettier after each generated file is written. It uses the `afterOneFileWrite` hook in the `codegen.ts` configuration file to execute the `prettier --write` command. This ensures that each file is formatted immediately after generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/prettier.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  hooks: { afterOneFileWrite: ['prettier --write'] }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generator in Dry-Run Mode (Bash)\nDESCRIPTION: This bash command runs GraphQL Code Generator with the --check flag to enable dry-run mode. In this mode, the generator compares the in-memory generated content with local files and does not overwrite files, but only reports if differences are found. Exit code 0 means no changes are needed; exit code 1 means updates are required. This helps validate if codegen results are in sync with the sources. The main dependency is a working codegen setup; input flags determine behavior.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/codegen-config.mdx#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nyarn run codegen --check\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator with codegen.yml\nDESCRIPTION: Sets up the codegen.yml configuration file that defines the GraphQL schema location and output file path for the generated code. This file controls how the code generator operates.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/components/java-installation.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nschema: src/main/resources/schema.graphqls\ngenerates:\n  src/main/java/com/my-name/my-app/generated/File.java:\n    - RELEVANT_PLUGIN # Replace with your plugin name\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator with Apollo Federation - TypeScript\nDESCRIPTION: This configuration snippet demonstrates how to set up `graphql-codegen` to generate TypeScript resolver signatures compatible with Apollo Federation. It specifies the output file path, includes the necessary `typescript` and `typescript-resolvers` plugins, and enables federation support by setting `federation: true` within the `typescript-resolvers` plugin configuration options. This ensures the generated resolvers handle federation-specific directives and types correctly.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/federation.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  generates: {\n    './src/types.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n      config: { federation: true }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generation and Development Server\nDESCRIPTION: This code snippet provides instructions to generate code using `yarn codegen` and then run the development server using `yarn dev`. These commands are essential for setting up and running the GraphQL application with the generated resolvers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/examples/typescript-resolvers/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# generate code\nyarn codegen\n# run the server\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Transforms in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates the basic configuration of `documentTransforms` within a `CodegenConfig` object. The configuration defines a schema, documents, and a generates block that specifies the output path, preset and `documentTransforms`. The `documentTransforms` array is used to apply transformations to the GraphQL documents prior to the generation process.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/graphql-modules/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: [\n        {\n          transform: ({ documents }) => {\n            // Make some changes to the documents\n            return documents\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript SDK with GraphQLRequest in plugin setup\nDESCRIPTION: This section outlines the structure of a plugin configuration for the graphql-code-generator that creates a fully-typed SDK using graphql-request. It demonstrates how to import necessary components, define static properties, and ensure proper setup for generating typed operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-graphql-request.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Callout } from '@theguild/components'\nimport { PluginApiDocs, PluginHeader } from '@/components/plugin'\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\nexport const getStaticProps = pluginGetStaticProps(__filename, { hasOperationsNote: true })\n\n<PluginHeader />\n\n<Callout>Make sure you have `typescript` plugin and `typescript-operations` as well in your configuration:</Callout>\n\n<PluginApiDocs />\n```\n\n----------------------------------------\n\nTITLE: Accessing GraphQL Schema in Code Generator Plugin (JavaScript)\nDESCRIPTION: This plugin snippet demonstrates how to access the `GraphQLSchema` object passed as the first argument to the `plugin` function. It uses the `getTypeMap()` method to get a map of all types and then extracts and joins their names into a single string, which becomes the generated output.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/plugin-structure.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugin(schema, documents, config, info) {\n    const typesMap = schema.getTypeMap();\n\n    return Object.keys(typesMap).join('\\n');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Options in Code Generator Plugin (JavaScript)\nDESCRIPTION: This plugin snippet shows how to access the configuration object passed to the plugin via the `config` argument. It demonstrates checking a specific configuration value (`config.myConfig`) and potentially using information from the `info` object (like the output file extension) to alter the plugin's behavior and generated output.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/plugin-structure.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugin(schema, documents, config, info) {\n    if (extname(info.outputFile) === '.graphql') {\n      return 'baz';\n    }\n\n    return config.myConfig === 'some-value' ? 'foo' : 'bar';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Underscores in GraphQL Codegen\nDESCRIPTION: This snippet shows how to configure GraphQL Code Generator to remove underscores from generated types.  It configures the `transformUnderscore` option to `true` under the `namingConvention` settings.  This option will remove underscores from generated type names, improving readability.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file': {\n      // plugins...\n      config: {\n        namingConvention: {\n          typeNames: 'change-case-all#pascalCase',\n          transformUnderscore: true\n        }\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using dotenv Integration with GraphQL Codegen CLI via require Flag\nDESCRIPTION: Explains how to preload environment variables from a .env file using the dotenv library by specifying the require flag (-r) with 'dotenv/config' in the GraphQL Codegen CLI invocation. This ensures that environment variables are loaded before parsing the config file, allowing their use within the configuration. Users must install dotenv and have a valid .env file in the working directory. Custom env files can be specified via DOTENV_CONFIG_PATH or CLI arguments.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/require-field.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngraphql-codegen --require dotenv/config --config codegen.ts\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Code Generator Plugins (npm)\nDESCRIPTION: This shell snippet installs the necessary development dependencies with npm: '@graphql-codegen/cli', '@graphql-codegen/typescript-resolvers', and '@graphql-codegen/typescript'. These are required for code generation, resolver typing, and TypeScript integration; ensure Node.js and npm are set up beforehand.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @graphql-codegen/cli @graphql-codegen/typescript-resolvers @graphql-codegen/typescript\n\n```\n\n----------------------------------------\n\nTITLE: Custom Fetch Function for Schema URL - TypeScript\nDESCRIPTION: This snippet demonstrates how to specify a custom fetch function when fetching the schema from a URL. This allows users to customize the fetching behavior. The `customFetch` option defines the module name to use.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      'http://localhost:3000/graphql': {\n        customFetch: 'my-custom-fetch',\n      }\n    }\n  ]\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Installing graphql-scalars for Custom Scalar Support (Shell)\nDESCRIPTION: This command installs the graphql-scalars package into the project, enabling support for a wide range of custom GraphQL scalar types. The server preset will automatically use scalar implementations from this library if corresponding names are detected in the schema definitions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-scalars\n```\n\n----------------------------------------\n\nTITLE: Overriding All Names with Lower Case in GraphQL Code Generator\nDESCRIPTION: Configuration example that sets all generated code elements to use lower case naming convention using the change-case-all package.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/naming-convention.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  config: { namingConvention: 'change-case-all#lowerCase' }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Defining Codegen Script in Package.json for SvelteKit Native - JSON\nDESCRIPTION: This package.json snippet adds a 'generate' script, which should be used to invoke the GraphQL code generation process configured for SvelteKit Native (KitQL). No parameters or inputs are required; output files as defined in your codegen config.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"generate\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Original GraphQL Names with 'keep' Convention\nDESCRIPTION: Configuration that maintains the original GraphQL names as-is without applying any case transformations to the generated code.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/naming-convention.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  config: { namingConvention: 'keep' }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: MSW 1.x 'once' Method Implementation\nDESCRIPTION: Example of using the 'once' method in MSW 1.x to create a one-time mock that will be removed after the first match.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-msw.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmockGetUserQuery((req, res, ctx) => {\n  const { id } = req.variables\n\n  return res.once(\n    ctx.data({\n      getUser: { name: 'John Doe', id }\n    })\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown instructions for setup and usage of Java Apollo Android plugin\nDESCRIPTION: Provides step-by-step guidance on installing necessary tools, creating configuration files, updating `.gitignore`, and integrating code generation into the Gradle build process. Also includes a link to a working example repository for reference.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/java/java-apollo-android.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## Prepare your env\n\nTo get started with these plugins and preset, make sure you have the following installed:\n\n- Node.js (10 or later)\n- NPM or Yarn\n\nRun the following in your Android project:\n\n```sh npm2yarn\nnpm init --yes\nnpm install graphql\nnpm install -D @graphql-codegen/cli @graphql-codegen/java-apollo-android\n```\n\nThen, create `codegen.yml` with the following configuration:\n\n```yaml\nschema: POINT_TO_YOUR_SCHEMA\ndocuments: POINT_TO_YOUR_GRAPHQL_OPERATIONS\ngenerates:\n  ./app/src/main/java/:\n    preset: java-apollo-android\n    config:\n      package: 'com.my.app.generated.graphql'\n      fragmentPackage: 'com.my.app.generated.graphql'\n      typePackage: 'type'\n    plugins:\n      - java-apollo-android\n```\n\n<Callout>Also, make sure to add `node_modules` to your `.gitignore` file.</Callout>\n\nTo integrate with your Gradle build, you can add the following to your app Gradle file:\n\n```\npreBuild.doFirst {\n  def proc = \"yarn graphql-codegen\".execute()\n  proc.waitForProcessOutput(System.out, System.err)\n}\n\nbuild.dependsOn preBuild\n```\n\nThis will make sure to run and generate output before each time you build your project.\n\n## Usage\n\nYou can find a [repository with a working example using AppSync](https://github.com/dotansimha/graphql-codegen-appsync-android-example).\n```\n\n----------------------------------------\n\nTITLE: Mocking a GraphQL Error Response with MSW\nDESCRIPTION: Example demonstrating how to mock an error response for the GetUser query using the generated mock function. Returns a GraphQL error object with a custom message.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-msw.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockGetUserQuery } from './generated'\nimport { HttpResponse } from 'msw'\n\nconst mockUserQueryError = mockGetUserQuery(({ variables }) => {\n  return HttpResponse.json({\n    errors: [\n      {\n        message: 'User not found'\n      }\n    ]\n  })\n})\n\nexport mockUserQueryError;\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen for Oclif Integration in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to configure GraphQL Codegen to generate type definitions and oclif command files using the typescript-oclif plugin. It defines the schema location, collects operation documents, generates base TypeScript types, and configures one command file per operation using the near-operation-file preset. The typescript-oclif plugin is passed a handlerPath for custom query logic, and all paths are relative to the generated file locations. Prerequisites include having @graphql-codegen/cli, typescript, and typescript-oclif installed, as well as following oclif's CLI scaffolding. The config expects GraphQL documents to be placed under src/commands and a handler to be exported as default.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-oclif.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:4000',\n  documents: 'src/commands/**/*.graphql',\n  generates: {\n    'src/types.ts': { plugins: ['typescript'] },\n    'src/commands/': {\n      preset: 'near-operation-file',\n      presetConfig: {\n        extension: '.ts',\n        baseTypesPath: '../types.ts'\n      },\n      plugins: [\n        {\n          'typescript-oclif': {\n            handlerPath: '../../handler'\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n\n```\n\n----------------------------------------\n\nTITLE: Configuring custom scalars\nDESCRIPTION: This configuration overrides the default scalars with custom types, in this case, DateTime with Date, and JSON with an object containing key-value pairs where keys are strings and values are any type. This allows the code generator to map GraphQL scalars to specific TypeScript types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file': {\n      // plugins...\n      config: {\n        scalars: {\n          DateTime: 'Date',\n          JSON: '{ [key: string]: any }'\n        }\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Dependency update for @graphql-codegen/visitor-plugin-common in version 4.1.5\nDESCRIPTION: In version 4.1.5, the dependency @graphql-codegen/visitor-plugin-common was upgraded to 5.7.1, continuing regular dependency management to incorporate fixes and improvements.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`d8566c0`](https://github.com/dotansimha/graphql-code-generator/commit/d8566c015943ea4dbcaeaf57d3d8406553ae230a)]:\n  - @graphql-codegen/visitor-plugin-common@5.7.1\n```\n\n----------------------------------------\n\nTITLE: Vue Apollo Query Example with Generated useMessagesQuery\nDESCRIPTION: This code illustrates how to perform a GraphQL query in a Vue component using a generated composable. It manages loading state and displays a list of message IDs fetched from the server, providing an example of integrating Apollo GraphQL with Vue Composition API. Dependencies include the generated GraphQL operations and Vue's component data and methods.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-apollo-smart-ops.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\nimport { useMessagesQuery } from '../generated/graphqlOperations'\n\nexport default {\n  apollo: {\n    messages: useMessagesQuery({\n      variables: {\n        type: 'HOT'\n      },\n      loadingKey: 'loading',\n      update: data => data.feed\n    })\n  },\n  data() {\n    return {\n      messages: null,\n      loading: 0\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: MSW 1.x Query Mock Implementation\nDESCRIPTION: Example of mocking a GraphQL query using MSW version 1.x syntax, which uses the request, response, and context parameters pattern.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-msw.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmockGetUserQuery((req, res, ctx) => {\n  const { id } = req.variables\n\n  return res(\n    ctx.data({\n      getUser: { name: 'John Doe', id }\n    })\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Importing codegen function (TypeScript)\nDESCRIPTION: Imports the main `codegen` function from the `@graphql-codegen/core` package, which serves as the primary entry point for using the GraphQL Code Generator programmatically via its API. This import is necessary to initiate the code generation process.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/programmatic-usage.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { codegen } from '@graphql-codegen/core'\n```\n\n----------------------------------------\n\nTITLE: Excluding Files with Negated Glob Patterns (TypeScript)\nDESCRIPTION: Demonstrates excluding specific files—such as generated outputs—from GraphQL document scanning using negated glob patterns (with '!'). The pattern is provided as part of the documents array in the config for '@graphql-codegen/cli'. Inputs are combined glob rules; excluded files will not be parsed. Useful to prevent codegen from reprocessing or including generated queries.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: ['./src/**/*.graphql', '!*.generated.graphql']\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Functions for Plugin Docs - JavaScript\nDESCRIPTION: Imports React components `PluginApiDocs` and `PluginHeader` used for rendering plugin documentation pages, and the `pluginGetStaticProps` helper function used for data fetching in Next.js environments.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/flow/flow-operations.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PluginApiDocs, PluginHeader } from '@/components/plugin'\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\n```\n\n----------------------------------------\n\nTITLE: Extracting Interface Types to ResolversInterfaceTypes for Interfaces (TypeScript)\nDESCRIPTION: This snippet introduces the ResolversInterfaceTypes type to explicitly handle GraphQL interfaces and their implementations, enabling accurate type inference and making the resolvers more type-safe, including support for __typename handling based on configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ResolversInterfaceTypes<RefType extends Record<string, unknown>> = {\n  CharacterNode: Fighter | Wizard\n}\n\nexport type ResolversTypes = {\n  CharacterNode: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CharacterNode']>\n  Fighter: ResolverTypeWrapper<Fighter>\n  Wizard: ResolverTypeWrapper<Wizard>\n}\n\nexport type ResolversParentTypes = {\n  CharacterNode: ResolversInterfaceTypes<ResolversParentTypes>['CharacterNode']\n  Fighter: Fighter\n  Wizard: Wizard\n}\n\n```\n\n----------------------------------------\n\nTITLE: Processing GraphQL Documents in Code Generator Plugin (JavaScript)\nDESCRIPTION: This plugin snippet demonstrates how to iterate over the `documents` array, which contains details about parsed GraphQL files. For each document, it accesses its file `location` and the `document.definitions` (AST nodes) to extract operation names, then formats a string showing the file and its operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/plugin-structure.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugin(schema, documents, config, info) {\n    return documents\n      .map(doc => {\n        const docsNames = doc.document.definitions.map(def => def.name.value);\n\n        return `File ${doc.location} contains: ${docsNames.join(', ')}`;\n      })\n      .join('\\n');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting getStaticProps for Next.js Static Generation\nDESCRIPTION: Exports a 'getStaticProps' function, essential for Next.js static site generation. It utilizes the imported 'pluginGetStaticProps' helper, passing the current filename ('__filename'), presumably to fetch plugin-specific data required for rendering the page at build time.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-fabbrica.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = pluginGetStaticProps(__filename)\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Apollo with Typed GraphQL Query\nDESCRIPTION: Vue component using Vue Apollo with a typed GraphQL query, showing how to use the Composition API with type safety.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQuery } from '@vue/apollo-composable'\nimport { computed } from 'vue'\n\nimport FilmItem from './components/FilmItem.vue'\nimport { graphql } from '../src/gql'\n\nconst { result } = useQuery(\n  graphql(/* GraphQL */ `\n    query allFilmsWithVariablesQuery($first: Int!) {\n      allFilms(first: $first) {\n        edges {\n          node {\n            ...FilmItem\n          }\n        }\n      }\n    }\n  `),\n  // variables are typed!\n  { first: 10 }\n)\n// `films` is typed!\nconst films = computed(() => result.value?.allFilms?.edges?.map(e => e?.node!))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"film of films\"><FilmItem :film=\"film\" /></li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example with Vue.js and urql in TypeScript\nDESCRIPTION: This snippet provides a sample GraphQL query and demonstrates how to use the generated data hook (`useTestQuery`) within a Vue.js + urql + TypeScript context. It assists developers in integrating GraphQL queries into Vue components via the code generator outputs.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-urql.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { data } = useTestQuery(...)\n```\n\n----------------------------------------\n\nTITLE: Configure package.json: Plugin Dependencies\nDESCRIPTION: Configures the dependencies and peerDependencies required by the plugin in `package.json`. It includes `@graphql-codegen/plugin-helpers` for utility types and functions, `tslib` for compilation, and sets `graphql` as a `peerDependency` to allow users to specify their own version.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@graphql-codegen/plugin-helpers\": \"X.Y.Z\",\n    \"tslib\": \"~1.11.1\"\n  },\n  \"peerDependencies\": {\n    \"graphql\": \"^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPattern option in GraphQL Codegen Plugin Helpers TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the `watchPattern` option within the `generates` section of the Codegen configuration. The `watchPattern` enables adding additional file globs to watch in watch mode, triggering regeneration when these files change. The example includes mappers configuration and shows the integration of `watchPattern` with a glob pattern (string or array).\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// codegen.ts\nconst config: CodegenConfig = {\n  schema: 'src/schema/**/*.graphql',\n  generates: {\n    'src/schema/types.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n      config: {\n        mappers: {\n          Book: './book/schema.mappers#BookMapper'\n        }\n      },\n      watchPattern: 'src/schema/**/*.mappers.ts' // Watches mapper files in `watch` mode. Use an array for multiple patterns e.g. ['src/*.pattern1.ts','src/*.pattern2.ts']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring `@graphql-codegen/time` Plugin (Object Format) in YAML\nDESCRIPTION: Demonstrates the current object-based configuration for the `@graphql-codegen/time` plugin in a GraphQL Code Generator configuration file (e.g., `codegen.yml`). The desired time format is specified using the `format` key within the plugin's configuration object. This is the required format from version 2.0.0 onwards.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/time/CHANGELOG.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - time:\n      format: 'DD-MM-YYYY'\n```\n\n----------------------------------------\n\nTITLE: Querying a User with Fragment Spread - GraphQL\nDESCRIPTION: This code defines a parameterized query 'findUser' that retrieves a user by ID and reuses a fragment 'UserFields' for selected user data fields. The fragment ensures consistency and reusability of fields such as 'id', 'username', and 'role'. By structuring queries this way, clients can maintain type-safe and maintainable GraphQL requests, suitable for both manual querying and automated type generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/how-does-it-work.mdx#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery findUser($userId: ID!) {\n  user(id: $userId) {\n    ...UserFields\n  }\n}\n\nfragment UserFields on User {\n  id\n  username\n  role\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nhost Typescript SDK - Shell\nDESCRIPTION: This snippet shows the shell command for installing the Nhost Typescript SDK using Yarn. The package '@nhost/nhost-js' is necessary to interact with Nhost services and use the generated strongly-typed schema definitions. Ensure this dependency is installed to instantiate and use 'NhostClient'.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-nhost.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @nhost/nhost-js\n```\n\n----------------------------------------\n\nTITLE: Setting up Urql Client\nDESCRIPTION: This TypeScript snippet demonstrates the creation of a GraphQL client using `urql` and integrating the `persistedExchange` for persisted queries.  It sets up the client with a URL and exchanges including `cacheExchange` and `persistedExchange`. The `persistedExchange` is configured with options to enforce persisted queries, enable for mutations, and provide a function to generate a hash.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient, cacheExchange } from '@urql/core'\nimport { persistedExchange } from '@urql/exchange-persisted'\n\nconst client = new createClient({\n  url: 'YOUR_GRAPHQL_ENDPOINT',\n  exchanges: [\n    cacheExchange,\n    persistedExchange({\n      enforcePersistedQueries: true,\n      enableForMutation: true,\n      generateHash: (_, document) => Promise.resolve(document['__meta__']['hash'])\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Schemas - TypeScript\nDESCRIPTION: This snippet demonstrates how to merge multiple schemas by specifying both a root-level schema and an output-file level schema. GraphQL Code Generator will combine them into a single schema for code generation. It specifies a URL for the root schema and a local file path for the output-file schema.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:3000/graphql',\n  generates: {\n    './src/types.ts': {\n      schema: './schema.graphql',\n      plugins: ['typescript', 'typescript-operations']\n    }\n  }\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Adding a single content block to a TypeScript file using the add plugin\nDESCRIPTION: This example shows how to configure the 'add' plugin to insert an ESLint disable comment at the beginning of a TypeScript output file. The plugin is configured within the CodegenConfig object alongside the typescript plugin.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/add.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: [\n        {\n          add: {\n            content: '/* eslint-disable */'\n          }\n        },\n        'typescript'\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query fetches the login and name of the viewer from the GitHub GraphQL API v4.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-document-nodes.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery Viewer {\n  viewer {\n    login\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Code Generator Plugin\nDESCRIPTION: Defines a basic GraphQL Code Generator plugin. It imports necessary modules, defines a configuration type, and exports a plugin function that receives the schema, documents, and configuration. The function returns a simple greeting string based on the configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { PluginFunction, Types } from '@graphql-codegen/plugin-helpers'\n\nexport type MyPluginConfig = {\n  name: string\n}\n\nexport const plugin: PluginFunction<Partial<MyPluginConfig>, MyPluginConfig> = (\n  schema: GraphQLSchema,\n  documents: Types.DocumentFile[],\n  config: TypeScriptDocumentsPluginConfig\n) => {\n  return `Hello ${config.name || 'anonymous'}!`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom .env File Path Using Environment Variable in Shell\nDESCRIPTION: Illustrates setting a custom environment file path by assigning DOTENV_CONFIG_PATH before running the GraphQL Codegen CLI with the require flag for dotenv. This method allows users to specify a different .env file for environment variables loading to tailor configuration to different environments like development, staging, or production.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/require-field.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nDOTENV_CONFIG_PATH=\"./my.env\" graphql-codegen --require dotenv/config --config codegen.ts\n```\n\n----------------------------------------\n\nTITLE: Vue Component with useResult\nDESCRIPTION: This Vue component uses the `useAllAccountsQuery` hook to fetch account data and the `useResult` composable to select the `accounts` property from the result. It displays a loading state, error message, or a list of accounts with their details. This uses Vue Composition API.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-apollo.mdx#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"loading\">Loading…</div>\n    <div v-else-if=\"error\">Error: {{ error.message }}</div>\n    <div v-else-if=\"allAccounts\">\n      <div v-for=\"account in allAccounts\" :key=\"account.accountID\">\n        {{ account.accountID }} {{ account.givenName }} {{ account.age }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from '@vue/composition-api'\nimport { useResult } from '@vue/apollo-composable'\nimport { useAllAccountsQuery } from '../generated/graphqlOperations'\n\nexport default defineComponent({\n  setup() {\n    const { result, loading, error } = useAllAccountsQuery()\n    // Only select the property 'accounts' for use in the template\n    const allAccounts = useResult(result, null, data => data.accounts)\n    return { allAccounts, loading, error }\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL code snippet defines a fragment and a query. The fragment (`TransactionFragment`) defines the structure of transaction data. The query (`Transactions`) retrieves transaction data based on an address parameter, using the defined fragment.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-svelte-apollo.mdx#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql\nfragment TransactionFragment on TransactionDescription {\n  contractAddress\n  from\n  gasUsed\n  gasPrice\n  input\n  isError\n  to\n  value\n}\n\nquery Transactions($address: String) {\n  transactions(address: $address) {\n    ...TransactionFragment\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing React URQL with Typed GraphQL Query\nDESCRIPTION: React component using URQL with a typed GraphQL query, showing how to use typed variables and responses.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery } from 'urql'\n\nimport './App.css'\nimport Film from './Film'\nimport { graphql } from '../src/gql'\n\nconst allFilmsWithVariablesQueryDocument = graphql(/* GraphQL */ `\n  query allFilmsWithVariablesQuery($first: Int!) {\n    allFilms(first: $first) {\n      edges {\n        node {\n          ...FilmItem\n        }\n      }\n    }\n  }\n`)\n\nfunction App() {\n  // `data` is typed!\n  const [{ data }] = useQuery({\n    query: allFilmsWithVariablesQueryDocument,\n    variables: {\n      // variables are typed too!\n      first: 10\n    }\n  })\n\n  return (\n    <div className=\"App\">\n      {data && <ul>{data.allFilms?.edges?.map((e, i) => e?.node && <Film film={e?.node} key={`film-${i}`} />)}</ul>}\n    </div>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Typescript-Nhost Generation - YAML\nDESCRIPTION: This YAML snippet defines the schema location, headers, and output instructions for code generation targeting the Nhost Typescript SDK. It includes a Hasura admin secret in request headers, specifies the output file as './src/schema.ts', and activates the 'typescript-nhost' plugin. This file should be named 'codegen.yaml' and placed at the root of your project. You must have the codegen CLI and relevant plugin installed.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-nhost.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  - http://localhost:1337/v1/graphql:\n      headers:\n        x-hasura-admin-secret: nhost-admin-secret\ngenerates:\n  ./src/schema.ts:\n    plugins:\n      - typescript-nhost\n```\n\n----------------------------------------\n\nTITLE: Adding Directives to a GraphQL Schema with makeExecutableSchema - TypeScript\nDESCRIPTION: This code demonstrates how to import and add the DIRECTIVES needed for the plugin into an executable GraphQL schema using the @graphql-tools/schema package. Dependencies: '@graphql-tools/schema', '@graphql-codegen/typescript-mongodb'. Inputs: Array of type definitions and resolvers. Outputs: Executable schema instance with directives active. Limitations: The directives must be imported from the plugin at runtime.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { makeExecutableSchema } from '@graphql-tools/schema'\nimport { DIRECTIVES } from '@graphql-codegen/typescript-mongodb'\n\nconst schema = makeExecutableSchema({\n  typeDefs: [\n    DIRECTIVES\n    // the rest of your GraphQL types\n  ],\n  resolvers\n})\n```\n\n----------------------------------------\n\nTITLE: Build and Test the Project\nDESCRIPTION: Builds all common/core packages and executes all tests to ensure the development environment is valid. It verifies that essential scripts work correctly.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Configuring emitLegacyCommonJSImports in YAML\nDESCRIPTION: Example YAML configuration for `graphql-code-generator` showing how to set the `emitLegacyCommonJSImports` flag to `true` within the configuration file. This setting, introduced in version 1.4.0, ensures generated code uses legacy CommonJS imports for better compatibility with non-compliant bundlers. Requires a `schema` and `documents` definition in the config file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/gql-tag-operations/CHANGELOG.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nschema: 'schema.graphql'\n documents:\n   - 'src/**/*.graphql'\n emitLegacyCommonJSImports: true\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Visitor Methods to Transform AST Nodes (JavaScript)\nDESCRIPTION: This snippet provides the complete implementation for the basic visitor example presented. It shows how the `FieldDefinition` visitor function transforms a field node into just its name, and how the `ObjectTypeDefinition` visitor function processes the results from its child `FieldDefinition` nodes (which are already transformed strings) to generate the final output string in the format `TypeName.fieldName`. The `leave` option ensures child processing completes before the parent.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/using-visitor.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getCachedDocumentNodeFromSchema, oldVisit } = require('@graphql-codegen/plugin-helpers')\n\nmodule.exports = {\n  plugin(schema, documents, config) {\n    const astNode = getCachedDocumentNodeFromSchema(schema) // Transforms the GraphQLSchema into ASTNode\n    const visitor = {\n      FieldDefinition(node) {\n        // Transform the field AST node into a string, containing only the name of the field\n        return node.name.value\n      },\n      ObjectTypeDefinition(node) {\n        // \"node.fields\" is an array of strings, because we transformed it using \"FieldDefinition\".\n        return node.fields.map(field => `${node.name.value}.${field}`).join('\\n')\n      }\n    }\n\n    const result = oldVisit(astNode, { leave: visitor })\n\n    return result.definitions.join('\\n')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a String DocumentMode\nDESCRIPTION: This TypeScript snippet demonstrates how to use a string generated query (created using `documentMode: 'string'`) with a GraphQL client. It fetches data using a `fetch` call, using the `.toString()` method of the generated string-based query to prepare the query for the request body.  This method reduces bundle size in some cases.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { graphql } from './gql'\n\nconst helloQuery = graphql(`\n  query hello {\n    hello\n  }\n`)\n\nfetch('https:<your-graphql-api>', {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: JSON.stringify({\n    query: helloQuery.toString()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Internal TypeScript Enum for Color Codes\nDESCRIPTION: This TypeScript snippet defines an enum ColorsCode mapping color names to their hex code string values. It acts as the internal representation mapped to the GraphQL enum via codegen configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/flow/flow-resolvers.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ColorsCode {\n  MY_RED = '#FF0000',\n  MY_BLUE = '#0000FF'\n}\n```\n\n----------------------------------------\n\nTITLE: Configure package.json: Plugin Scripts\nDESCRIPTION: Configures the `lint` and `test` scripts within the plugin's `package.json` file. These scripts ensure compatibility with the GraphQL Code Generator's build and test system.  The `test` script points to the root `jest.config.js`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"eslint **/*.ts\",\n    \"test\": \"jest --no-watchman --config ../../../../jest.config.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Interfaces for Embedded and Linked MongoDB Types - TypeScript\nDESCRIPTION: Displays the generated TypeScript interfaces for a user document that embeds a profile document and links to other users via ObjectId arrays. Dependencies: 'mongodb' for ObjectId support. Limitations: Non-annotated fields are ignored. Inputs: N/A (output from code generation). Outputs: TypeScript interfaces for use in MongoDB access layers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ObjectId } from 'mongodb'\n\nexport interface UserDbObject {\n  _id: ObjectId\n  username: string\n  email: string\n  profile: ProfileDbObject\n  friends: ObjectId[]\n}\n\nexport interface ProfileDbObject {\n  name: string\n  age: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using @entity with additionalFields in GraphQL Type - GraphQL\nDESCRIPTION: This snippet details the use of the @entity directive's additionalFields argument to add fields not exposed in the GraphQL API but present in the MongoDB object. Inputs: GraphQL type with @entity directive and additionalFields specified. Prerequisite: Custom directive support. The generator adds these fields to the resulting TypeScript object, but they won't be part of the standard GraphQL schema. Limitation: additionalFields requires explicit field path/type definitions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype User\n  @entity(\n    additionalFields: [\n      { path: \"services.login.token\", type: \"string\" }\n      { path: \"services.login.refreshToken?\", type: \"string\" }\n    ]\n  ) {\n  id: String @id\n  email: String @column\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Code for a Specific Project - Shell\nDESCRIPTION: This shell command shows how to run GraphQL Code Generator using the multi-project configuration file and target a specific project defined within it. The `--config` flag points to the configuration file, and the `--project` flag specifies which project (e.g., `prj1`) from the `projects` map in the config should be processed. This allows selective code generation for different parts of a monorepo.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/multiproject-config.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngraphql-codegen --config graphql.config.js --project prj1\n```\n\n----------------------------------------\n\nTITLE: Configuring emitLegacyCommonJSImports in graphql-code-generator (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to enable the emitLegacyCommonJSImports flag in a graphql-code-generator configuration file. Setting emitLegacyCommonJSImports to true ensures that the generated code uses legacy CommonJS imports, maximizing compatibility with tools or bundlers that do not fully support ES modules. The schema and documents fields define the GraphQL schema file and document glob patterns. This snippet should be placed within a valid configuration file (e.g., codegen.yml). Requires graphql-code-generator CLI v2.9.0 or above.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nschema: 'schema.graphql'\ndocuments:\n  - 'src/**/*.graphql'\nemitLegacyCommonJSImports: true\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolvers Using Flow Types and Mapped Enums in TypeScript\nDESCRIPTION: This TypeScript snippet implements GraphQL resolvers typed with generated Flow resolver types. The Color enum resolver maps GraphQL enum values to internal ColorsCode values. The Query resolver favoriteColor returns a value from ColorsCode, which is then mapped back to the public GraphQL enum via the configured enumValues mapping.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/flow/flow-resolvers.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Resolvers } from './resolvers-types'\nimport { ColorsCode } from './enums'\n\nconst resolvers: Resolvers = {\n  Color: {\n    RED: ColorsCode.MY_RED,\n    BLUE: ColorsCode.MY_BLUE\n  },\n  Query: {\n    favoriteColor: () => ColorsCode.MY_RED // Now you cn return this, and it will be mapped to your actual GraphQL enum\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Output for Union Types with Discriminator - TypeScript\nDESCRIPTION: Presents the TypeScript union structure created for discriminated GraphQL unions. Each entity type has its own interface, and the union type is a discriminated union with the discriminator field. Inputs: N/A (output). Limitations: Discriminator structure must be respected in application logic.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ADbObject {\n  fieldA: string\n}\n\nexport interface BDbObject {\n  fieldB: string\n}\n\nexport type PossibleType = { entityType: string } & (ADbObject | BDbObject)\n```\n\n----------------------------------------\n\nTITLE: Auto-imported DateTime Resolver in Generated Resolvers Map\nDESCRIPTION: The generated resolvers file automatically imports and includes the DateTimeResolver from graphql-scalars package, eliminating the need for manual configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Resolvers } from './types.generated'\nimport { book as Query_book } from './book/resolvers/Query/book'\nimport { markBookAsRead as Mutation_markBookAsRead } from './book/resolvers/Mutation/markBookAsRead'\nimport { Book } from './book/resolvers/Book'\nimport { user as Query_user } from './user/resolvers/Query/user'\nimport { User } from './user/resolvers/User'\nimport { DateTimeResolver } from 'graphql-scalars'\nexport const resolvers: Resolvers = {\n  Query: {\n    book: Query_book,\n    user: Query_user\n  },\n  Mutation: {\n    markBookAsRead: Mutation_markBookAsRead\n  },\n\n  Book: Book,\n  User: User,\n  DateTime: DateTimeResolver\n}\n```\n\n----------------------------------------\n\nTITLE: Creating package.json for GraphQL Code Generator Dependencies\nDESCRIPTION: Configures a Node.js package.json file with necessary GraphQL Code Generator dependencies and a postinstall script to run the code generator automatically after installation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/components/java-installation.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"java-app\",\n  \"scripts\": {\n    \"postinstall\": \"graphql-codegen\"\n  },\n  \"dependencies\": {\n    \"graphql\": \"14.5.8\",\n    \"@graphql-codegen/cli\": \"1.7.0\",\n    \"@graphql-codegen/RELEVANT_PLUGIN\": \"1.7.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Code Generator with package.json script in JSON\nDESCRIPTION: Defines an npm script named \"generate\" that executes the `graphql-codegen` command. This change reflects the new recommended CLI usage post-migration, omitting prior CLI flags and relying on the consolidated configuration from the `codegen.yml` file. The snippet requires npm to run the scripts defined and expects `graphql-codegen` to be installed as a dependency.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-0-13.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"scripts\": {\n    \"generate\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Custom Fetcher Function (Object) (TypeScript)\nDESCRIPTION: Sets up the GraphQL Code Generator to use a custom function defined in an external file as the fetcher for the generated hooks. The configuration uses an object under the `fetcher` key to specify the function's path (`./my-file#myFetcher`) and optionally indicates if it's a React Hook using `isReactHook`. Requires GraphQL schema, operation documents, and the custom fetcher file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'MY_SCHEMA_PATH',\n  documents: './src/**/*.graphql',\n  generates: {\n    './generates.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-query'],\n      config: {\n        fetcher: {\n          func: './my-file#myFetcher',\n          isReactHook: false // optional, defaults to false, controls the function's signature. Read below\n        }\n      }\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Graphql-Request Fetcher (TypeScript)\nDESCRIPTION: Configures the GraphQL Code Generator to generate React Query hooks that utilize the `graphql-request` library as the underlying fetcher. Setting `fetcher` to `'graphql-request'` tells the plugin to generate code that expects a `GraphQLClient` instance when using the generated hooks. Requires `graphql-request`, GraphQL schema, and operation documents.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'MY_SCHEMA_PATH',\n  documents: './src/**/*.graphql',\n  generates: {\n    './generates.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-query'],\n      config: {\n        fetcher: 'graphql-request'\n      }\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Mapper Interface\nDESCRIPTION: Creating a UserMapper interface to represent the underlying data model, which differs from the GraphQL schema type and enables resolver chaining.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UserMapper {\n  id: string\n  firstName: string\n  lastName: string\n  isAdmin: 'YES' | 'NO'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing resolversNonOptionalTypename for Mapper Cases (TypeScript)\nDESCRIPTION: This snippet demonstrates enhancing type safety for resolver mappers by applying resolversNonOptionalTypename logic, ensuring consistent __typename presence and correct type inference in complex resolver scenarios.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// No specific code snippet provided; description states implementation purpose.\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Schema Source with GraphQL Code Generator CLI in TypeScript\nDESCRIPTION: This TypeScript snippet configures GraphQL Code Generator to load a schema directly from a GitHub repository by specifying the schema source as a 'github:user/repo#branchName:path/to/file.graphql' string. Requires '@graphql-codegen/cli' and an environment variable 'GITHUB_TOKEN' to authenticate. The expected input is the repository location, and the output is a ready-to-use config file for the codegen CLI.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'github:user/repo#branchName:path/to/file.graphql'\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Schema from Code Files - TypeScript\nDESCRIPTION: This snippet demonstrates loading a schema from TypeScript code files. GraphQL Code Generator will attempt to extract the schema based on `gql` template literals.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: './src/**/*.ts'\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Defining a MongoDB Model Entity with GraphQL Directives - GraphQL\nDESCRIPTION: This snippet demonstrates how to annotate a GraphQL type with the @entity, @id, and @column directives to designate it as a MongoDB entity. Each directive tags a field for its mapping in the resulting database object. It requires schema support for custom directives and is intended as input for the code generation process. Inputs: GraphQL type definitions with appropriate directive usage. Outputs: Used by the code generator to create matching TypeScript types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype User @entity {\n  id: String @id\n  username: String! @column\n  email: String @column\n}\n```\n\n----------------------------------------\n\nTITLE: Schema from JSON File - TypeScript\nDESCRIPTION: This snippet demonstrates specifying a local `.json` file containing GraphQL introspection data as the schema source.  The schema file must contain valid introspection JSON.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'schema.json',\n  // ...\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GraphQL Code Generator\nDESCRIPTION: Command to install the required packages for using GraphQL Code Generator with TypeScript.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphql\nnpm install --dev typescript @graphql-codegen/cli @parcel/watcher\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Plugin\nDESCRIPTION: This JSON snippet provides an example of configuring the SWC plugin for Vite React for code splitting and tree shaking using the `@graphql-codegen/client-preset-swc-plugin`. This snippet is intended to be inserted in the `vite.config.ts` file.  It specifies the `artifactDirectory` and `gqlTagName` options for optimizing the generated files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react({\n      plugins: [\n        ['@graphql-codegen/client-preset-swc-plugin', { artifactDirectory: './src/gql', gqlTagName: 'graphql' }]\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generator\nDESCRIPTION: This command executes the GraphQL Code Generator using the configuration file `codegen.ts`. It generates the schema and client code based on the provided schema and documents.  The command uses `npx` to execute the locally installed `graphql-codegen` package.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx graphql-codegen --config codegen.ts\n```\n\n----------------------------------------\n\nTITLE: Adding Node Gradle Plugin to build.gradle\nDESCRIPTION: Adds the 'com.moowork.node' Gradle plugin to enable Node.js integration in a Java project. This plugin is needed to execute GraphQL Code Generator commands.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/components/java-installation.mdx#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nplugins {\n  id \"com.moowork.node\" version \"1.3.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Code with Yarn (Bash)\nDESCRIPTION: This snippet demonstrates how to generate code using the yarn package manager.  It executes the `codegen` command, likely defined in the project's package.json file.  The exact functionality depends on the project configuration and codegen setup.  The expected output is the generation of code files based on GraphQL schema definitions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/examples/typescript-esm/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# generate code\nyarn codegen\n```\n\n----------------------------------------\n\nTITLE: Configuring require Field in GraphQL Codegen with TypeScript\nDESCRIPTION: Demonstrates how to declare the require field in a TypeScript GraphQL Code Generator configuration file to load external extensions before execution, without transpilation. This enables using custom code files, plugins, or schema/document loaders. Requires installing the extensions via npm and importing the CodegenConfig type from @graphql-codegen/cli. The configuration object lists required extensions as strings in the require array property.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/require-field.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  require: ['extension1', 'extension2']\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query Example\nDESCRIPTION: This GraphQL query retrieves the `id` field from the `feed` object. It's a simple example to showcase how the generated code is used to fetch data.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-apollo.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery Message {\n  feed {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Naming Function to Specific Output Types\nDESCRIPTION: Configuration that applies a custom naming function only to type names while using default conventions for other output elements.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/naming-convention.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  config: {\n    namingConvention: {\n      typeNames: './my-naming-fn'\n    }\n  }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring urql cacheExchange with generated schema - TypeScript\nDESCRIPTION: This snippet demonstrates how to integrate the GraphQL schema generated by the `urql-introspection` plugin with `urql`'s `cacheExchange`. It shows importing the schema from the generated JSON file and using it to initialize the cache, enabling schema-aware caching capabilities.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/urql-introspection.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// generated by the plugin\nimport schema from './generated-introspection.json'\nconst cache = cacheExchange({ schema })\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen Output with Custom Client for Oclif in TypeScript\nDESCRIPTION: This TypeScript snippet configures GraphQL Codegen to use a custom client for generated oclif commands by specifying the 'client' key in the typescript-oclif plugin options. It is similar to the initial configuration but points the 'client' parameter to a different path, allowing the developer to modularly define how queries are executed. Dependencies and directory structure mirrors the prior example, with the expectation that the client is exported as the default from the specified file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-oclif.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: '<path-to-your-schema>',\n  documents: 'src/commands/**/*.graphql',\n  generates: {\n    'src/types.ts': { plugins: ['typescript'] },\n    'src/commands/': {\n      preset: 'near-operation-file',\n      presetConfig: {\n        extension: '.ts',\n        baseTypesPath: '../types.ts'\n      },\n      plugins: [\n        {\n          'typescript-oclif': {\n            client: '../../client'\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Schema Definition\nDESCRIPTION: A sample GraphQL schema with Author and Post types, demonstrating entity relationships and query capabilities for a blog application.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/angular.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  firstName: String!\n  lastName: String!\n  posts(findTitle: String): [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String!\n  author: Author\n}\n\ntype Query {\n  posts: [Post]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating type for document registry\nDESCRIPTION: This patch change adds the functionality for gql-tag-operations to generate the type for the document registry. This is a feature enhancement to improve the type safety and overall developer experience when working with GraphQL operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/gql-tag-operations/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Passing Configuration to GraphQL Code Generator Plugin (YAML)\nDESCRIPTION: This `codegen.yml` snippet illustrates how to provide custom configuration options to a plugin. Instead of just listing the plugin name, it is listed as a key with a nested object containing key-value pairs representing the configuration that will be accessible in the plugin's `config` argument.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/plugin-structure.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nschema: my-schema.graphql\ndocuments: './src/**/*.graphql'\ngenerates:\n  output.ts:\n    plugins:\n      - my-plugin.js:\n          myConfig: 'some-value'\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Engine Schema Source with GraphQL Code Generator CLI in TypeScript\nDESCRIPTION: This TypeScript example sets up GraphQL Code Generator to load a schema from Apollo Engine using the 'apollo-engine' loader inside the config array. Prerequisites are '@graphql-codegen/cli' and Apollo Engine access (API key, graph ID, variant). Inputs include engine configuration and expected outputs are codegen-ready schema loading via Apollo. Intended for projects that manage schemas centrally on Apollo Engine.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      'apollo-engine': {\n        engine: {\n          apiKey: 'APOLLO_ENGINE_KEY_ID',\n        },\n        graph: 'GRAPH_ID',\n        variant: 'current',\n      }\n    }\n  ]\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL and Code Generator CLI with Yarn - Bash\nDESCRIPTION: Installs the necessary dependencies for GraphQL Code Generator using yarn. The first command adds the 'graphql' library as a required dependency, while the second adds the '@graphql-codegen/cli' package as a devDependency. These steps must be run in your project root, and require yarn to be installed. No arguments are needed beyond what is shown. Upon completion, the necessary packages will be available for further setup. Some environments may require administrative permissions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add graphql\nyarn add -D @graphql-codegen/cli\n```\n\n----------------------------------------\n\nTITLE: Skipping Typename in GraphQL Codegen\nDESCRIPTION: This snippet demonstrates how to prevent the automatic addition of the `__typename` field to generated types, unless it is explicitly specified in the GraphQL selection set.  Setting `skipTypename` to `true` in the configuration disables the automatic inclusion of the `__typename` field.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        skipTypename: true\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using concurrently for watch mode (JSON)\nDESCRIPTION: This snippet shows how to use `concurrently` to run both the server and the GraphQL Code Generator in watch mode. The `--watch` flag is used to monitor changes and automatically regenerate code.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/development-workflow.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"concurrently \\\"nodemon app.js\\\" \\\"yarn generate --watch\\\"\",\n    \"start\": \"node app.js\",\n    \"generate\": \"graphql-codegen\",\n    \"prestart\": \"yarn generate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding GraphQL Files - TypeScript\nDESCRIPTION: This snippet shows how to exclude specific files from being included in the schema when using glob expressions. The `!` sign is used to denote files or patterns to exclude.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: ['src/**/*.graphql', '!*.generated.graphql'],\n  // ...\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Example persisted-documents.json Structure\nDESCRIPTION: Shows an example of the `persisted-documents.json` file generated when the `persistedDocuments` option is enabled. This file contains a JSON object mapping unique document hashes (e.g., SHA1 or SHA256) to the full text of the corresponding GraphQL query or mutation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"b2c3d4e5f6g7h8i9j0a1\": \"query Hello { hello }\",\n  \"kae4fe7f6g7h8i9ej0ag\": \"mutation echo($msg: String!) { echo(message: $msg) }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fragment Masking in React using TypeScript/TSX\nDESCRIPTION: This snippet demonstrates the creation of a typed GraphQL fragment and its usage within a React component using the 'FragmentType' generic and 'useFragment' helper. It exemplifies how to define a GraphQL fragment with the 'graphql' template literal, use the fragment type to typecheck component props, and retrieve typed fragment data safely. Dependencies include the generated fragment-masking utilities and the graphql-codegen plugin. The input is a prop containing data with the specified fragment, and the output is fully typed data enabling safe property access without manual type assertions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { FragmentType, useFragment } from './gql/fragment-masking'\nimport { graphql } from '../src/gql'\n\nexport const FilmItemFragment = graphql(/* GraphQL */ `\n  fragment FilmItem on Film {\n    id\n    title\n    releaseDate\n    producers\n  }\n`)\n\nconst Film = (props: { film: FragmentType<typeof FilmItemFragment> }) => {\n  const film = useFragment(FilmItemFragment, props.film)\n  return (\n    <div>\n      <h3>{film.title}</h3>\n      <p>{film.releaseDate}</p>\n    </div>\n  )\n}\n\nexport default Film\n```\n\n----------------------------------------\n\nTITLE: Passing Custom dotenv Config Path Using CLI Argument\nDESCRIPTION: Demonstrates an alternative way to specify the dotenv config file path by appending dotenv_config_path argument at the end of the GraphQL Codegen CLI command. This allows flexible control of which environment file to load without relying on environment variables, supporting dynamic deployment and scripting scenarios.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/require-field.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngraphql-codegen --require dotenv/config --config codegen.ts dotenv_config_path=my.env\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen and Plugin Dependencies - Shell\nDESCRIPTION: This shell command adds the required dev dependencies for GraphQL code generation and the typescript-nhost plugin using Yarn. It ensures that '@graphql-codegen/cli' and '@graphql-codegen/typescript-nhost' are available for configuration in the project. Run this in your terminal before attempting schema generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-nhost.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @graphql-codegen/cli @graphql-codegen/typescript-nhost\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query for Urql Generation\nDESCRIPTION: This GraphQL snippet defines a sample query named `Test`. It fetches a `feed` including nested `repository` and `owner` details. This query serves as input for the `typescript-urql` plugin to generate corresponding TypeScript types and React Hooks.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-urql.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery Test {\n  feed {\n    id\n    commentCount\n    repository {\n      full_name\n      html_url\n      owner {\n        avatar_url\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Default and Configurable Enum Suffixes (TypeScript)\nDESCRIPTION: This snippet indicates the addition of support for disabling suffixes on Enums, giving more control over enum type generation and naming conventions in the generated schema types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// No specific code snippet provided; description indicates feature addition.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Schema Loader Function for GraphQL Code Generator in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a custom loader function that reads a GraphQL schema from a file and constructs a GraphQLSchema object using 'graphql' and Node's 'fs' module. The exported function takes the schema file path and a config object as parameters. Inputs include the schema file path, and required dependencies are 'fs' and 'graphql'. Returns the built schema object. Intended for advanced custom loading scenarios.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { readFileSync } = require('node:fs')\nconst { buildSchema } = require('graphql')\n\nmodule.exports = (schemaString, config) => {\n  // Your logic for loading your GraphQLSchema\n  return buildSchema(readFileSync(schemaString, 'utf8'))\n}\n```\n\n----------------------------------------\n\nTITLE: Using @abstractEntity and Inheritance in GraphQL Interfaces - GraphQL\nDESCRIPTION: This snippet demonstrates marking a GraphQL interface as an abstract entity via @abstractEntity, then implementing it in a type. The discriminatorField argument defines a property determining the implementing type in the database. Inputs: Interface and type definition using directives. Limitations: discriminatorField is required. Outputs: Used to generate TypeScript inheritance.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\ninterface BaseNotification @abstractEntity(discriminatorField: \"notificationType\") {\n  id: ID! @id\n  createdAt: String! @column(overrideType: \"Date\")\n}\n\ntype TextNotification implements BaseNotification @entity {\n  id: ID!\n  createdAt: String!\n  content: String! @column\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query example illustrating data structure and nested fields\nDESCRIPTION: This GraphQL query retrieves a feed with related fields, including nested objects for repository and owner details. It demonstrates the shape of data that can be fetched and generated code for, serving as an example for users to model their queries.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-stencil-apollo.mdx#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery Test {\\n  feed {\\n    id\\n    commentCount\\n    repository {\\n      full_name\\n      html_url\\n      owner {\\n        avatar_url\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Response as SDL - TypeScript\nDESCRIPTION: This snippet demonstrates configuring the GraphQL Code Generator to handle the response from a remote server as SDL.  This is useful when the server does not return a JSON introspection.  The `handleAsSDL` option needs to be set to `true`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      'http://localhost:3000/sdl': {\n        handleAsSDL: true,\n      }\n    }\n  ]\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Ignoring Missing Documents via CLI - GraphQL Codegen - Bash\nDESCRIPTION: This bash command runs the GraphQL Code Generator using a specified configuration file and passes the '--ignore-no-documents' flag. The flag tells the generator to avoid failing if there are no documents matching the defined patterns, which is useful for setups where documents can be absent in some environments.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ codegen --config-file=config.yml --ignore-no-documents\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Module Declaration for GraphQL File\nDESCRIPTION: Example TypeScript declaration file generated by the `typescript-graphql-files-modules` plugin for a `my-query.graphql` file containing a query named `MyQuery`. This module declares the shape of the imported `.graphql` file, exporting the parsed `DocumentNode` and making it recognizable by the TypeScript compiler.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-graphql-files-modules.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare module '*/my-query.graphql' {\n  import { DocumentNode } from 'graphql'\n  const MyQuery: DocumentNode\n\n  export { MyQuery }\n\n  export default defaultDocument\n}\n```\n\n----------------------------------------\n\nTITLE: Patch: Dependency Updates for @graphql-tools/utils and Related Packages\nDESCRIPTION: This update reflects dependency changes that ensure the code generation supports newer features and improves compatibility, including updating @graphql-tools/utils to version 10.0.0 and other core plugin packages.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Importing Configuration Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `AddPluginConfig` type from the `@graphql-codegen/add` package. This is crucial for defining and using the correct configuration options when working with the add plugin, enabling type safety and preventing potential errors.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/add/CHANGELOG.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { AddPluginConfig } from '@graphql-codegen/add';\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query with Types\nDESCRIPTION: This TypeScript code defines a GraphQL query using the `graphql` function. The query retrieves the total count of people in the Star Wars universe. The `graphql` function provides type safety for the query and its result.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from './graphql'\n\nconst PeopleCountQuery = graphql(`\n  query PeopleCount {\n    allPeople {\n      totalCount\n    }\n  }\n`)\n```\n\n----------------------------------------\n\nTITLE: Configuring graphql-codegen-typescript-validation-schema plugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the `typescript-validation-schema` plugin within a `codegen.ts` file. It shows how to include the plugin in the `plugins` array alongside the `typescript` plugin and how to configure options such as `strictScalars` and the desired `schema` type (e.g., 'yup'). This setup tells GraphQL Codegen to generate validation schemas based on the specified schema.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-validation-schema.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  generates: {\n    'path/to/graphql.ts': {\n      plugins: ['typescript', 'typescript-validation-schema'],\n      config: {\n        strictScalars: true,\n        schema: 'yup'\n      }\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Mapping Field Names to Database Paths with @map Directive - GraphQL\nDESCRIPTION: This snippet shows how to map a GraphQL field to a specific nested location in the database using the @map directive. Inputs: GraphQL type with @entity, @column, and @map(path: ...) directives. The generator uses this mapping to construct a nested type in TypeScript matching the DB shape. Limitations: The path must be valid for the target database document structure.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype User @entity {\n  username: String @column @map(path: \"credentials.username\")\n}\n```\n\n----------------------------------------\n\nTITLE: Assume Valid SDL - TypeScript\nDESCRIPTION: This snippet shows how to tell GraphQL Code Generator to skip SDL syntax validation by setting `assumeValidSDL` to `true`.  This can improve performance but should only be used when the SDL is known to be valid.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      './src/**/*.ts': {\n        assumeValidSDL: true\n      },\n    },\n  ],\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Dependency for Code Generation\nDESCRIPTION: Sets up a dependency to ensure that 'yarn' command runs during each Gradle build, which will execute the code generator.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/components/java-installation.mdx#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nbuild.dependsOn yarn\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Plugin Components in JSX\nDESCRIPTION: This code imports necessary components for displaying plugin documentation and configures the static props generation for the page. It includes the PluginHeader and PluginApiDocs components along with a helper function for generating static props.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/introspection.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PluginApiDocs, PluginHeader } from '@/components/plugin'\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\nexport const getStaticProps = pluginGetStaticProps(__filename)\n\n<PluginHeader />\n<PluginApiDocs />\n```\n\n----------------------------------------\n\nTITLE: Updating package.json dependencies for graphql-code-generator migration\nDESCRIPTION: This snippet demonstrates the before and after states of the package.json file to update dependencies from deprecated 'graphql-codegen-*' packages to the new '@graphql-codegen/*' scoped packages necessary for migration to version 1.0.0.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-0-18.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"graphql-code-generator\": \"0.18.0\",\n    \"graphql-codegen-typescript-common\": \"0.18.0\",\n    \"graphql-codegen-typescript\": \"0.18.0\",\n    \"graphql-codegen-typescript-documents\": \"0.18.0\"\n  }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@graphql-codegen/cli\": \"^1.0.0\",\n    \"@graphql-codegen/typescript\": \"^1.0.0\",\n    \"@graphql-codegen/typescript-operations\": \"^1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating schema configuration in YML for core plugin migration\nDESCRIPTION: This snippet shows the change in the YML configuration file from specifying separate plugins for 'typescript-common' and 'typescript-server' to using the consolidated 'typescript' plugin, reflecting the new plugin structure for core schema generation after migration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-0-18.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n./my-file.ts:\n  schema: schema.json\n  plugins:\n    - typescript-common\n    - typescript-server\n```\n\nLANGUAGE: YAML\nCODE:\n```\n./my-file.ts:\n  schema: schema.json\n  plugins:\n    - typescript\n```\n\n----------------------------------------\n\nTITLE: Skip GraphQL Import - TypeScript\nDESCRIPTION: This snippet demonstrates how to skip `graphql-import` when loading schema files.  By default, codegen skips `graphql-import`. Setting `skipGraphQLImport` to `true` will skip using `graphql-import` statements.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      './src/**/*.ts': {\n        skipGraphQLImport: true\n      },\n    },\n  ],\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for TypeScript Workspace Version\nDESCRIPTION: Configuration settings for VSCode to ensure the workspace version of TypeScript is used. This setting makes a prompt appear to switch to the workspace TypeScript version when visiting a TypeScript file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typescript.tsdk\": \"node_modules/typescript/lib\",\n  \"typescript.enablePromptUseWorkspaceTsdk\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL API Schema with Scalars, Enums, Interfaces, and Unions - GraphQL\nDESCRIPTION: This GraphQL snippet defines a complex schema that includes a custom scalar 'Date', top-level queries, enums, interfaces, unions, and object types for a user chat application. It establishes entry points such as `me`, `user`, `allUsers`, `search`, and `myChats`, and models domain entities with strong typing. All types, interfaces, and relationships are explicit to permit downstream code generation and type-safe client integration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/how-does-it-work.mdx#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nscalar Date\n\nschema {\n  query: Query\n}\n\ntype Query {\n  me: User!\n  user(id: ID!): User\n  allUsers: [User]\n  search(term: String!): [SearchResult!]!\n  myChats: [Chat!]!\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n\ninterface Node {\n  id: ID!\n}\n\nunion SearchResult = User | Chat | ChatMessage\n\ntype User implements Node {\n  id: ID!\n  username: String!\n  email: String!\n  role: Role!\n}\n\ntype Chat implements Node {\n  id: ID!\n  users: [User!]!\n  messages: [ChatMessage!]!\n}\n\ntype ChatMessage implements Node {\n  id: ID!\n  content: String!\n  time: Date!\n  user: User!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Transpiler (JavaScript)\nDESCRIPTION: Sets up Babel (`babel.config.js`) using `@babel/preset-env` to target the current Node.js version and `@babel/preset-typescript` to process TypeScript syntax, enabling modern JavaScript and TypeScript features.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', { targets: { node: process.versions.node.split('.')[0] } }],\n    '@babel/preset-typescript'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy CommonJS Imports in YAML - GraphQL Codegen - YAML\nDESCRIPTION: This YAML configuration snippet enables the 'emitLegacyCommonJSImports' option for the GraphQL Code Generator. Setting 'emitLegacyCommonJSImports' to true ensures generated code works correctly with non-compliant bundlers by emitting legacy CommonJS import statements. The 'schema' key points to the GraphQL schema file and 'documents' specifies one or more document glob patterns for GraphQL operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nschema: 'schema.graphql'\ndocuments:\n  - 'src/**/*.graphql'\nemitLegacyCommonJSImports: true\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Accounts\nDESCRIPTION: This GraphQL query retrieves `accountID`, `givenName`, and `age` from the `accounts` object.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-apollo.mdx#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery allAccounts {\n  accounts {\n    accountID\n    givenName\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Note: Dependency Updates and Fixes in GraphQL Code Generator\nDESCRIPTION: This section documents various patch updates, including dependency version bumps and bug fixes, such as fixing generated code output format and updating internal library dependencies. These updates improve stability and functionality of the GraphQL Code Generator.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/client/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// No code snippet, this section details patch notes and dependency updates\n```\n\n----------------------------------------\n\nTITLE: Referencing DocumentTransforms File in TypeScript Config\nDESCRIPTION: This TypeScript code illustrates how to reference a separate JavaScript file containing the `documentTransforms` function within the GraphQL Code Generator configuration.  Instead of defining the transformation logic directly in the config, it specifies the path to the external file.  The configuration includes schema and documents paths, as well as the `preset` option.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: ['./my-document-transform.js']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring external documentMode with near-operation-file\nDESCRIPTION: This configuration uses `documentMode: 'external'` and `importDocumentNodeExternallyFrom: 'near-operation-file'` to import GraphQL document nodes from files located near the operation files. This approach is designed to be used with the `near-operation-file` preset to organize and import GraphQL documents.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file': {\n      // plugins...\n      config: {\n        documentMode: 'external',\n        importDocumentNodeExternallyFrom: 'near-operation-file'\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input and Union Types\nDESCRIPTION: Defines sample GraphQL `input` types and a `union` type. These definitions serve as the source schema for the `flutter-freezed` plugin, specifying the data structures to be generated into Dart models.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput RequestOTPInput {\n  email: String\n  phoneNumber: String\n}\n\ninput VerifyOTPInput {\n  email: String\n  phoneNumber: String\n  otpCode: String!\n}\n\nunion AuthWithOTPInput = RequestOTPInput | VerifyOTPInput\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with URQL React\nDESCRIPTION: This code demonstrates fetching posts using URQL in a React component without GraphQL Code Generator. It defines a TypeScript interface `PostsQuery` to manually type the expected data structure, and uses `useQuery` to execute the GraphQL query. The query is defined inline as a GraphQL string.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from 'urql'\n\ninterface PostsQuery {\n  posts: {\n    id: string\n    title: string\n    author?: {\n      id: string\n      firstName: string\n      lastName: string\n    }\n  }[]\n}\n\nconst postsQueryDocument = /* GraphQL */ `\n  query Posts {\n    posts {\n      id\n      title\n      author {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`\n\nconst Posts = () => {\n  const [result] = useQuery<PostsQuery>({ query: postsQueryDocument })\n\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Directives from GraphQL Documents (JS)\nDESCRIPTION: This JavaScript code illustrates how to remove a specific directive (in this case, `@localOnlyDirective`) from GraphQL documents using the `visit` function from the `graphql` library. It defines a CodegenConfig object and a documentTransforms function that iterates through each document and uses `visit` to remove nodes matching the directive name.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-core/CHANGELOG.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\nimport { visit } from 'graphql';\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: [\n        {\n          transform: ({ documents }) => {\n            return documents.map(documentFile => {\n              documentFile.document = visit(documentFile.document, {\n                Directive: {\n                  leave(node) {\n                    if (node.name.value === 'localOnlyDirective') return null;\n                  },\n                },\n              });\n              return documentFile;\n            });\n          },\n        },\n      ],\n    },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Update devDependencies in package.json (After)\nDESCRIPTION: This JSON snippet demonstrates the updated devDependencies in package.json after the migration.  `@parcel/watcher` is added as a devDependency, enabling watch mode for `@graphql-codegen/cli`. This allows for automatic code generation upon file changes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-4-0.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@graphql-codegen/cli\": \"^1.0.0\",\n    \"@graphql-codegen/typescript\": \"^1.0.0\",\n    \"@graphql-codegen/typescript-operations\": \"^1.0.0\",\n    \"@parcel/watcher\": \"^2.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Document Transform by External JavaScript File\nDESCRIPTION: Illustrates creating a separate JavaScript file exporting a transform function that manipulates documents, which can then be referenced by filename in the GraphQL Code Generator config. The transform function receives documents and returns the modified array. This pattern supports modularizing transforms and reusing them across configs. The external file must export a 'transform' function accepting a parameter containing the documents.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/document-transform.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {  \n  transform: ({ documents }) => {  \n    // Make some changes to the documents  \n    return documents  \n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Update devDependencies in package.json (Before)\nDESCRIPTION: This JSON snippet shows the initial devDependencies in package.json before the migration. It includes core GraphQL Code Generator packages like `@graphql-codegen/cli`, `@graphql-codegen/typescript`, and `@graphql-codegen/typescript-operations`. No `@parcel/watcher` is included.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-4-0.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@graphql-codegen/cli\": \"^1.0.0\",\n    \"@graphql-codegen/typescript\": \"^1.0.0\",\n    \"@graphql-codegen/typescript-operations\": \"^1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Scalar Modules with Input/Output Type Fields in Typescript Codegen\nDESCRIPTION: This snippet shows the generated Typescript code after referencing an external scalar module in configuration. The GraphQL Code Generator imports the 'ID' type, then creates a 'Scalars' map where 'ID' uses ID['input'] and ID['output'] as the codegen scalar's input/output types. This enforces the new structure on external scalar modules and requires them to export appropriately typed objects.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Previously, imported `ID` type can be a primitive type, now it must be an object with input/output fields\nimport { ID } from './path/to/scalar-module'\n\nexport type Scalars = {\n  ID: { input: ID['input']; output: ID['output'] }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Comment Descriptions - TypeScript\nDESCRIPTION: This snippet demonstrates how to enable converting deprecated GraphQL comments (using `#`) into GraphQL descriptions (using `\"`).  This is done by setting `commentDescriptions` to `true`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      './src/**/*.ts': {\n        commentDescriptions: true\n      },\n    },\n  ],\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Infinite Query (GraphQL)\nDESCRIPTION: Provides an example GraphQL query (`AnimalsQuery`) demonstrating a structure commonly used with infinite scrolling or pagination in conjunction with the `addInfiniteQuery` plugin option. It includes variables (`$catsRange`, `$catsStarting`, `$dogsRange`, `$dogsStarting`) to control data fetching offsets and limits for different fields.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery AnimalsQuery($catsRange: Int, $catsStarting: Int, $dogsRange: Int, $dogsStarting: Int) {\n  cats(range: $catsRange, starting: $catsStarting) {\n    # …\n  }\n  dogs(range: $dogsRange, starting: $dogsStarting) {\n    # …\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Certain Fields from All Types (TypeScript)\nDESCRIPTION: Excludes specified fields like id, name, friends from configuration for all types, providing a broad exclusion mechanism.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forAllFieldNamesExcludeFieldNamesOfAllTypeNames([id, name, friends])\nconsole.log(pattern) // \"@*TypeNames.@*FieldNames-[id,name,friends];\"\n```\n\n----------------------------------------\n\nTITLE: Importing Plugin Documentation Components in React (TypeScript)\nDESCRIPTION: This snippet imports React components ('PluginApiDocs' and 'PluginHeader') from the local components directory and a utility function for static prop generation. These imports are foundational for rendering documentation UIs and preparing data needed for static site generation workflows. Dependencies include React, Next.js (for 'getStaticProps'), and the local plugin libraries.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mock-data.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginApiDocs, PluginHeader } from '@/components/plugin'\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Codegen - Bash\nDESCRIPTION: This snippet illustrates how to execute the GraphQL Code Generator using `yarn`. This will generate code based on the configured schema and plugins.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nyarn graphql-codegen\n\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL and Code Generator CLI with npm\nDESCRIPTION: Installs the `graphql` package and the `@graphql-codegen/cli` package as a development dependency using npm. The `graphql` package provides the core GraphQL functionalities. The `@graphql-codegen/cli` is the command-line interface for the GraphQL Code Generator.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/installation.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D typescript @graphql-codegen/cli\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Resolver and Context Types in TypeScript\nDESCRIPTION: This TypeScript code defines custom types for resolver context (`UnauthenticatedContext`, `AuthenticatedContext`) and resolver signatures (`UnauthenticatedResolver`, `AuthenticatedResolver`). These types are used by the `graphql-code-generator`'s `customResolverFn` and `directiveResolverMappings` options to provide specific type definitions for different resolver scenarios, such as authenticated vs. unauthenticated contexts.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nexport type UnauthenticatedContext = {\n  user: null\n}\n\nexport type AuthenticatedContext = {\n  user: { id: string }\n}\n\nexport type UnauthenticatedResolver<TResult, TParent, _TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: UnauthenticatedContext,\n  info: GraphQLResolveInfo\n) => Promise<TResult> | TResult\n\nexport type AuthenticatedResolver<TResult, TParent, _TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: AuthenticatedContext,\n  info: GraphQLResolveInfo\n) => Promise<TResult> | TResult\n```\n\n----------------------------------------\n\nTITLE: Plugin Test Specification\nDESCRIPTION: Defines a test specification for the plugin using Jest. It imports the plugin function, defines a GraphQL schema, and creates a test case that calls the plugin with a configuration and asserts that the result matches the expected output. This validates basic plugin functionality.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { plugin } from '../src'\n\ndescribe('My Plugin', () => {\n  const schema = buildSchema(/* GraphQL */ `\n    type Query {\n      foo: String!\n    }\n  `)\n\n  it('Should greet', async () => {\n    const result = await plugin(schema, [], {\n      name: 'Dotan'\n    })\n\n    expect(result).toBe('Hello Dotan!')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Support in GraphQL Codegen using ts-node Register\nDESCRIPTION: Shows how to enable TypeScript support by registering ts-node within the require field in a GraphQL Code Generator config file. The snippet requires installing ts-node from npm and specifying 'ts-node/register' in the require array to allow on-the-fly TypeScript transpilation at runtime. This setup facilitates writing codegen configurations and related files directly in TypeScript.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/require-field.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  require: ['ts-node/register']\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Rendering Plugins Marketplace Search Page with React in JavaScript/TypeScript\nDESCRIPTION: This snippet defines and exports the default React component for the Plugins Marketplace page. It imports the necessary data using the useData hook from The Guild components, applies a light-mode background style, and renders the PluginsMarketplaceSearch component with fetched plugin data. It requires React, The Guild components, and the plugins-marketplace-search module. The Plugins props are supplied via the static getStaticProps function which is re-exported for use with Next.js. The component expects no direct input parameters and renders the marketplace page dynamically based on available plugin data.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useData } from '@theguild/components'\nimport { PluginsMarketplaceSearch } from '../components/plugins-marketplace-search'\nexport { getPluginsStaticProps as getStaticProps } from '../components/plugins-marketplace-search'\n\nexport default () => {\n  const plugins = useData()\n  return (\n    <>\n      <style>{`.light body { background: #fff; }`}</style>\n      <PluginsMarketplaceSearch plugins={plugins} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting emitLegacyCommonJSImports via CLI in graphql-code-generator (Bash)\nDESCRIPTION: This Bash command sets the emitLegacyCommonJSImports flag when running graphql-code-generator via the command line. The --config-file option specifies the YAML configuration file, and --emit-legacy-common-js-imports enables CommonJS import generation for maximum bundler compatibility. Requires graphql-code-generator CLI v2.9.0 or above and the referenced configuration file to be available in the current path.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ codegen --config-file=config.yml --emit-legacy-common-js-imports\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL-Modules Preset for Code Generation in TypeScript\nDESCRIPTION: This TypeScript snippet provides a sample codegen.ts configuration file for @graphql-codegen/cli. It sets up the schema, output paths, preset ('graphql-modules'), and plugins including 'typescript' and 'typescript-resolvers' for generating type-safe resolvers. Dependencies include '@graphql-codegen/cli', the graphql-modules preset, and correct folder structures for module SDL files. Input is a glob path for schemas; output is a generated module types file under each module. Ensure the presetConfig fields refer to valid file paths and that you use either v1 or v2 of graphql-modules.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/graphql-modules-preset.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: './src/modules/**/typedefs/*.graphql',\n  generates: {\n    './src/modules/': {\n      preset: 'graphql-modules',\n      presetConfig: {\n        baseTypesPath: '../generated-types/graphql.ts',\n        filename: 'generated-types/module-types.ts'\n      },\n      plugins: [\n        {\n          add: {\n            content: '/* eslint-disable */'\n          }\n        },\n        'typescript',\n        'typescript-resolvers'\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Installing KitQL and GraphQL Codegen Plugins for SvelteKit Native - Shell\nDESCRIPTION: This command installs the '@kitql/client' runtime as well as the development-only '@kitql/graphql-codegen' package, enabling typed SvelteKit stores and codegen support in SvelteKit projects. Make sure to run these commands before configuring codegen for SvelteKit/KitQL.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @kitql/client\nnpm i -D @kitql/graphql-codegen\n```\n\n----------------------------------------\n\nTITLE: Installing Generator Dependencies\nDESCRIPTION: Shell command using npm or yarn to install the necessary Node.js packages: `graphql`, `@graphql-codegen/cli`, and the `@graphql-codegen/flutter-freezed` plugin as dev dependencies. These packages are required to run the code generator.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i graphql\nnpm i -D typescript @graphql-codegen/cli @graphql-codegen/flutter-freezed\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fetcher and useQuery Hook - React Query - TypeScript\nDESCRIPTION: This alternative approach provides a custom fetcher function using the standard browser `fetch` API and a corresponding `useGraphQL` hook. The `customFetcher` serializes the GraphQL document using `print` and sends a POST request. The `useGraphQL` hook then utilizes this custom fetcher, preserving type safety by expecting an `ExecutionResult` matching the document's result type.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport { useQuery, type UseQueryResult } from '@tanstack/react-query'\nimport { print, type ExecutionResult } from 'graphql'\n\n/** Your custom fetcher function */\nasync function customFetcher<TResult, TVariables>(\n  url: string,\n  document: TypedDocumentNode<TResult, TVariables>,\n  ...[variables]: TVariables extends Record<string, never> ? [] : [TVariables]\n): Promise<TResult> {\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: print(document),\n      variables\n    })\n  })\n  if (response.status !== 200) {\n    throw new Error(`Failed to fetch: ${response.statusText}. Body: ${await response.text()}`)\n  }\n\n  return await response.json()\n}\n\nexport function useGraphQL<TResult, TVariables>(\n  document: TypedDocumentNode<TResult, TVariables>,\n  ...[variables]: TVariables extends Record<string, never> ? [] : [TVariables]\n): UseQueryResult<ExecutionResult<TResult>> {\n  return useQuery([(document.definitions[0] as any).name.value, variables], () =>\n    customFetcher('https://graphql.org/graphql/', document, variables)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pattern for All GraphQL Types in Schema (TypeScript)\nDESCRIPTION: Creates a pattern that includes all GraphQL types in the schema using @*TypeNames. It simplifies configuration by covering every type without listing them individually.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forAllTypeNames()\nconsole.log(pattern) // \"@*TypeNames;\"\n```\n\n----------------------------------------\n\nTITLE: Implementation of Defer Directive in TypeScript/JSX\nDESCRIPTION: This code demonstrates how to use the `@defer` directive in GraphQL queries and how the generated code handles deferred fragments. It includes an example query with `@defer`, and the component usage with a conditional render based on `isFragmentReady` utility function.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_19\n\nLANGUAGE: JSX\nCODE:\n```\n// src/index.tsx\nimport { graphql } from './gql'\nconst OrdersFragment = graphql(`\n  fragment OrdersFragment on User {\n    orders {\n      id\n      total\n    }\n  }\n`)\nconst GetUserQuery = graphql(`\n  query GetUser($id: ID!) {\n    user(id: $id) {\n      id\n      name\n      ...OrdersFragment @defer\n    }\n  }\n`)\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Glob Expressions as an Array (TypeScript)\nDESCRIPTION: Shows how to use an array of glob expressions to include operation files from different locations. '@graphql-codegen/cli' is required, and the 'documents' field receives an array of glob patterns. This method supports more granular inclusion or exclusion, benefiting modular codebases.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: ['./src/dir1/*.graphql', './src/dir2/*.graphql']\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Referencing External Transform in Configuration\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure the GraphQL Code Generator to use a document transform defined in an external file. The `documentTransforms` option specifies an array of file paths. Each path points to a JavaScript file containing the transform function. The specified file will then be executed and its transform function will be applied to the documents.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/graphql-modules/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: ['./my-document-transform.js']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Export interfaces for GraphQL schema with interface implementations\nDESCRIPTION: This code demonstrates how the code generator creates `ResolversInterfaceTypes` to map GraphQL interfaces to their implementing types, such as `Fighter` and `Wizard`. Using the `RefType` generic, it enables more accurate type inference for interface-conforming objects and their subclasses in resolver definitions, supporting complex schemas with interface relationships.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Example schema\n\n// extend type Query {\n//   character(id: ID!): CharacterNode\n// }\n\n// interface CharacterNode {\n//   id: ID!\n// }\n\n// type Wizard implements CharacterNode {\n//   id: ID!\n//   screenName: String!\n//   spells: [String!]!\n// }\n\n// type Fighter implements CharacterNode {\n//   id: ID!\n//   screenName: String!\n//   powerLevel: Int!\n// }\n\n// Generated types:\n\nexport type ResolversInterfaceTypes<RefType extends Record<string, unknown>> = {\n  CharacterNode: Fighter | Wizard\n}\n\nexport type ResolversTypes = {\n  // other types...\n  CharacterNode: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CharacterNode']>\n  Fighter: ResolverTypeWrapper<Fighter>\n  Wizard: ResolverTypeWrapper<Wizard>\n  // other types...\n}\n\nexport type ResolversParentTypes = {\n  // other types...\n  CharacterNode: ResolversInterfaceTypes<ResolversParentTypes>['CharacterNode']\n  Fighter: Fighter\n  Wizard: Wizard\n  // other types...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Code Generation Script\nDESCRIPTION: Shell command to execute the `generate` script defined in the `package.json` file. This command triggers the GraphQL Code Generator, which reads the configuration and generates the Dart Freezed models.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run generate\n```\n\n----------------------------------------\n\nTITLE: Dependency update for visitor plugin common in version 4.0.5\nDESCRIPTION: This patch in version 4.0.5 updates @graphql-codegen/visitor-plugin-common to version 5.0.0, ensuring dependency alignment.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`53f270a`](https://github.com/dotansimha/graphql-code-generator/commit/53f270acfa1da992e0f9d2e50921bb588392f8a5)]:\n  - @graphql-codegen/visitor-plugin-common@5.0.0\n```\n\n----------------------------------------\n\nTITLE: Disable Require - TypeScript\nDESCRIPTION: This snippet demonstrates disabling the `require` functionality when loading schema from code files. This is useful if `require` causes errors due to module system incompatibilities. Setting `noRequire` to `true` will disable it.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      './src/**/*.ts': {\n        noRequire: true,\n      },\n    },\n  ],\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Code Generator Configuration\nDESCRIPTION: This TypeScript code snippet shows how to configure GraphQL Code Generator to merge a remote schema with a local schema file. The `schema` field in the configuration array specifies the URLs of remote schemas and the paths to local schema files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/apollo-local-state.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: ['http://my-remote-schema/graphql', 'my-client-schema.graphql']\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Filtering Schema Types with Custom `@ignore` Directive in a GraphQL Plugin\nDESCRIPTION: This snippet demonstrates how to extend a GraphQL schema plugin by adding a custom `@ignore` directive and using it to filter out certain types from processing. The plugin function traverses the schema's type map, identifies types with an `@ignore` directive, and excludes them from the output, enabling selective schema manipulation for code generation purposes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/extend-schema.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugin(schema, documents, config, info) {\n    const typesMap = schema.getTypeMap()\n\n    return Object.keys(typesMap)\n      .filter(typeName => {\n        const type = typesMap[typeName]\n        const { astNode } = type\n\n        if (astNode?.directives?.find(d => d.name.value === 'ignore')) {\n          return false\n        }\n\n        return true\n      })\n      .join('\\n')\n  },\n  addToSchema: /* GraphQL */ `\n    directive @ignore on OBJECT\n  `\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and configuring components for TypeScript Plugin documentation page\nDESCRIPTION: Imports necessary components from '@theguild/components' and local components for rendering the plugin documentation. Sets up static props generation for the page.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from '@theguild/components'\nimport { PluginApiDocs, PluginHeader } from '@/components/plugin'\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\nexport const getStaticProps = pluginGetStaticProps(__filename)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for GraphQL Code Generator\nDESCRIPTION: This snippet defines the configuration for GraphQL Code Generator using TypeScript, specifying schema, documents, generating types and helpers in a dedicated folder, and setting the client preset compatible with Vue 3's Apollo Composable. It provides the core setup to generate type-safe GraphQL code.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/examples/vue/apollo-composable/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst config = {\n  schema: './schema.graphql',\n  documents: './src/**/*.graphql',\n  generates: {\n    './src/gql/': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-vue-apollo'],\n      preset: 'client',\n      config: {\n        withCompositionFunctions: true\n      }\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generated Data Models for GraphQL Types Using Freezed - Dart\nDESCRIPTION: This Dart code generates data classes (using the Freezed package) for the defined GraphQL schema types, reflecting features like enums, factory constructors, merges, and union types. The models apply annotations (e.g., @unfreezed, @freezed, @JsonKey) for code generation, serialization, and immutability control. Dependencies include the freezed_annotation and flutter/foundation packages, as well as supporting part files for Freezed output. Inputs are JSON representations and GraphQL query data; outputs are immutable and serializable Dart model objects corresponding to the schema. Limitations include strict adherence to the configured type and field mappings, with parameter categorization based on the factory context.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:flutter/foundation.dart';\n\npart 'app_models.freezed.dart';\npart 'app_models.g.dart';\n\nenum Episode { // @1\n  @JsonKey(name: 'NEWHOPE')\n  newhope // @1.i\n  @JsonKey(name: 'EMPIRE')\n  empire // @1.ii\n  @JsonKey(name: 'JEDI')\n  jedi // @1.iii\n}\n\n@unfreezed\nclass Actor with _$Actor { // @2\n  const Actor._();\n\n  factory Actor({ // @2.a\n    @deprecated\n    required final String name, // @2.a.i\n    @deprecated\n    @Default([])\n    required List<Episode?> appearsIn, // @2.a.ii\n  }) = _Actor;\n\n  const factory Actor.human({ // @2.b\n    required final String id, // @2.b.i\n    required final String name, // @2.b.ii\n    List<Actor?>? friends, // @2.b.iii\n    required List<Episode?> appearsIn, // @2.b.iv\n    int? totalCredits, // @2.b.v\n  }) = Human; // @2.b.1\n\n  factory Actor.fromJson(Map<String, dynamic> json) => _$ActorFromJson(json);\n}\n\n@freezed\nclass Starship with _$Starship { // @3\n  const Starship._();\n\n  const factory Starship({ // @3.a\n    required final String id, // @3.a.i\n    required final String name, // @3.a.ii\n    double? length, // @3.a.iii\n  }) = _Starship;\n\n  factory Starship.fromJson(Map<String, dynamic> json) => _$StarshipFromJson(json);\n}\n\n@unfreezed\nclass Human with _$Human { // @4\n  const Human._();\n\n  factory Human({ // @4.a\n    required final String id, // @4.a.i\n    required final String name, // @4.a.ii\n    List<Actor?>? friends, // @4.a.iii\n    @Default([])\n    required List<Episode?> appearsIn, // @4.a.iv\n    int? totalCredits, // @4.a.v\n  }) = _Human;\n\n  const factory Human.actor({ // @4.b\n    required final String name, // @4.b.i\n    required List<Episode?> appearsIn, // @4.b.ii\n  }) = Actor; // @4.b.1\n\n  factory Human.fromJson(Map<String, dynamic> json) => _$HumanFromJson(json);\n}\n\n@freezed\nclass Droid with _$Droid { // @5\n  const Droid._();\n\n  const factory Droid({, // @5.a\n    required final String id, // @5.a.i\n    required final String name, // @5.a.ii\n    List<Actor?>? friends, // @5.a.iii\n    @Default([])\n    required List<Episode?> appearsIn, // @5.a.iv\n    String? primaryFunction, // @5.a.v\n  }) = _Droid;\n\n  factory Droid.fromJson(Map<String, dynamic> json) => _$DroidFromJson(json);\n}\n\n@freezed\nclass SearchResult with _$SearchResult { // @6\n  const SearchResult._(); // @6.1\n\n  const factory SearchResult.human({ // @6.a\n    required final String id, // @6.a.i\n    required final String name, // @6.a.ii\n    @Default([])\n    List<Actor?>? friends, // @6.a.iii\n    required List<Episode?> appearsIn, // @6.a.iv\n    int? totalCredits,// @6.a.v\n  }) = Human; // @6.a.1\n\n  @deprecated\n  const factory SearchResult.droid({ // @6.b\n    required final String id, // @6.b.i\n    required final String name, // @6.b.ii\n    @Default([])\n    List<Actor?>? friends, // @6.b.iii\n    required List<Episode?> appearsIn, // @6.b.iv\n    String? primaryFunction, // @6.b.v\n  }) = Droid; // @6.a.2\n\n  const factory SearchResult.starship({ // @6.c\n    required final String id, // @6.c.i\n    required final String name, // @6.c.ii\n    double? length, // @6.c.iii\n  }) = Starship; // @6.a.3\n\n  factory SearchResult.fromJson(Map<String, dynamic> json) => _$SearchResultFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolver without Non-Optional __typename (TypeScript)\nDESCRIPTION: Demonstrates how to implement resolvers for the defined schema without the `resolversNonOptionalTypename` option enabled. It shows that resolvers return plain objects without `__typename` and that the `__resolveType` function for the union type must use field presence checks (e.g., `'message' in parent`) to determine the concrete type of the resolved object.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Query/book.ts\nexport const book = async () => {\n  try {\n    const book = await fetchBook()\n    // 1. No `__typename` in resolver results...\n    return {\n      node: book\n    }\n  } catch (e) {\n    return {\n      message: 'Failed to fetch book'\n    }\n  }\n}\n\n// BookPayload.ts\nexport const BookPayload = {\n  __resolveType: parent => {\n    // 2. ... means more checks in `__resolveType`\n    if ('message' in parent) {\n      return 'PayloadError'\n    }\n    return 'BookResult'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Directive for Input Field and Argument Type Mapping\nDESCRIPTION: Shows the GraphQL SDL definition of a custom directive '@asNumber' which is applicable to argument definitions and input field definitions. This directive can be applied to schema elements to indicate custom type transformations that the code generator should respect, particularly in conjunction with directiveArgumentAndInputFieldMappings configuration. No runtime enforcement is done by this directive alone; additional schema transforms are recommended to ensure runtime type correctness.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @asNumber on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION\n\ninput MyInput {\n  id: ID! @asNumber\n}\n\ntype User {\n  id: ID!\n}\n\ntype Query {\n  user(id: ID! @asNumber): User\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with React Query\nDESCRIPTION: This example shows how to fetch posts using React Query and `graphql-request` in a React component, without the use of GraphQL Code Generator. It manually defines the `PostsQuery` interface for typing and uses `useQuery` to handle the data fetching. The GraphQL query is defined using `gql` from `graphql-request`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { request, gql } from 'graphql-request'\nimport { useQuery } from '@tanstack/react-query'\n\ninterface PostsQuery {\n  posts: {\n    id: string\n    title: string\n    author?: {\n      id: string\n      firstName: string\n      lastName: string\n    }\n  }[]\n}\n\nconst postsQueryDocument = gql`\n  query Posts {\n    posts {\n      id\n      title\n      author {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`\n\nconst Posts = () => {\n  const { data } = useQuery<PostsQuery>('posts', async () => {\n    const { posts } = await request(endpoint, postsQueryDocument)\n    return posts\n  })\n\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Resolver Types (Pre-Fix #9206)\nDESCRIPTION: Illustrates the generated TypeScript types for resolvers before the fix introduced in PR #9206. Shows how `ResolversUnionTypes` was defined, particularly the definition for `BookPayload`, incorrectly referencing `ResolversTypes[\"Book\"]` within the `Omit` type for `BookResult`. This was problematic for the `ResolversParentTypes` definition.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResolversUnionTypes = {\n  // Note: `result` on the next line references `ResolversTypes[\"Book\"]` which is only correct for the `ResolversTypes` case\n  BookPayload: (Omit<BookResult, 'result'> & { result?: Maybe<ResolversTypes['Book']> }) | StandardError\n}\n\nexport type ResolversTypes = {\n  Book: ResolverTypeWrapper<BookMapper>\n  BookPayload: ResolverTypeWrapper<ResolversUnionTypes['BookPayload']>\n  BookResult: ResolverTypeWrapper<Omit<BookResult, 'result'> & { result?: Maybe<ResolversTypes['Book']> }>\n  StandardError: ResolverTypeWrapper<StandardError>\n}\n\nexport type ResolversParentTypes = {\n  Book: BookMapper\n  BookPayload: ResolversUnionTypes['BookPayload']\n  BookResult: Omit<BookResult, 'result'> & { result?: Maybe<ResolversParentTypes['Book']> }\n  StandardError: StandardError\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Freezed Models\nDESCRIPTION: Example Dart code generated by the `flutter-freezed` plugin based on the provided GraphQL schema and configuration. It utilizes the `freezed` and `json_serializable` packages to create immutable data classes and JSON serialization/deserialization logic for the defined GraphQL types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:flutter/foundation.dart';\n\npart 'app_models.freezed.dart';\npart 'app_models.g.dart';\n\n@unfreezed\nclass RequestOtpInput with _$RequestOtpInput {\n  const RequestOtpInput._();\n\n  const factory RequestOtpInput({\n    String? email,\n    String? phoneNumber,\n  }) = _RequestOtpInput;\n\n  factory RequestOtpInput.fromJson(Map<String, dynamic> json) => _$RequestOtpInputFromJson(json);\n}\n\n@unfreezed\nclass VerifyOtpInput with _$VerifyOtpInput {\n  const VerifyOtpInput._();\n\n  const factory VerifyOtpInput({\n    String? email,\n    String? phoneNumber,\n    required String otpCode,\n  }) = _VerifyOtpInput;\n\n  factory VerifyOtpInput.fromJson(Map<String, dynamic> json) => _$VerifyOtpInputFromJson(json);\n}\n\n@freezed\nclass AuthWithOtpInput with _$AuthWithOtpInput {\n  const AuthWithOtpInput._();\n\n  const factory AuthWithOtpInput.requestOtpInput({\n    String? email,\n    String? phoneNumber,\n  }) = RequestOtpInput;\n\n  const factory AuthWithOtpInput.verifyOtpInput({\n    String? email,\n    String? phoneNumber,\n    required String otpCode,\n  }) = VerifyOtpInput;\n\n  factory AuthWithOtpInput.fromJson(Map<String, dynamic> json) => _$AuthWithOtpInputFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Naming Function Module in JavaScript\nDESCRIPTION: Example of a custom JavaScript module that defines a naming function to fix a limitation in change-case-all's constantCase functionality for underscore handling.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/naming-convention.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Fix for https://github.com/dotansimha/graphql-code-generator/issues/6040\nconst { constantCase } = require('change-case-all')\n/**\n * This function wraps constant case, that turns any string into CONSTANT_CASE\n * However, this function has a bug that, if you pass _ to it it will return an empty\n * string. This small module fixes that\n *\n * @param {string*} str\n * @return {string}\n */\nfunction FixedConstantCase(str) {\n  const result = constantCase(str)\n  // If result is an empty string, just return the original string\n  return result || str\n}\nmodule.exports = FixedConstantCase\n```\n\n----------------------------------------\n\nTITLE: Inferring Fragment Type using ResultOf in TypeScript\nDESCRIPTION: Illustrates how to infer the TypeScript type of a GraphQL fragment directly from its definition using the `ResultOf` utility type from `@graphql-typed-document-node/core`. This avoids needing to know the generated type name and uses the exported fragment constant (`FilmItemFragment`) which contains the fragment definition.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResultOf } from '@graphql-typed-document-node/core'\n\nexport const FilmItemFragment = graphql(/* GraphQL */ `\n  fragment FilmItem on Film {\n    id\n    title\n    releaseDate\n    producers\n  }\n`)\n\nfunction myFilmHelper(film: ResultOf<typeof FilmItemFragment>) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Plugin with withHooks Option\nDESCRIPTION: This snippet demonstrates how to configure the GraphQL Code Generator with the `typescript-react-apollo` plugin and disabling the generation of React Hooks using the `withHooks` option. The value `'I'` appears to be a typo and should likely be `false` if the intention is to disable Hooks generation. This shows customization to exclude React Hooks from the generated output.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        withHooks: 'I'\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Naming Function in GraphQL Code Generator\nDESCRIPTION: Configuration that imports a custom naming function from a local file to be used for all naming conventions in the generated code.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/naming-convention.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  config: { namingConvention: './my-naming-fn' }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Angular Apollo\nDESCRIPTION: This Angular component fetches posts using Angular Apollo. It defines an interface `Post` to type the post data manually and uses `apollo.watchQuery` to observe changes. The GraphQL query `GET_POSTS` is defined using `gql`. This requires manual typing of both the query and the data it returns.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst GET_POSTS = gql`\n  query Posts {\n    posts {\n      id\n      title\n      author {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`\n\ninterface Post {\n  id: string\n  title: string\n  author?: {\n    id: string\n    firstName: string\n    lastName: string\n  }\n}\n\n@Component({ /* … */ })\nclass PostsComponent implements OnInit, OnDestroy {\n  posts: Post[]\n\n  private querySubscription: Subscription\n\n  ngOnInit() {\n    this.querySubscription = this.apollo\n      .watchQuery({ query: GET_POSTS })\n      .valueChanges.subscribe(({ data }) => {\n        this.posts = data.posts as Post[]\n      })\n  }\n  ngOnDestroy() {\n    this.querySubscription.unsubscribe()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DocumentTransform Example in GraphQL Codegen Configuration TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the usage of the `documentTransforms` option in Codegen configuration. It defines a transform function to modify GraphQL documents before plugin processing, enabling custom changes like directive removal. This example returns the documents without modification, serving as a scaffold for custom document transformation logic.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: [\n        {\n          transform: ({ documents }) => {\n            // Make some changes to the documents\n            return documents\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler (JSON)\nDESCRIPTION: Configures the TypeScript compiler (`tsconfig.json`) to specify the target ECMAScript version (ES2018), module system (Node16), output directory (`dist`), and include all files within the `src` directory for compilation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2018\",\n    \"module\": \"Node16\",\n    \"outDir\": \"dist\"\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Code Generator (Shell)\nDESCRIPTION: Executes the GraphQL Code Generator using the local `npx` command. This command processes the schema and documents defined in `codegen.ts` to generate type-safe code for GraphQL operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx graphql-codegen\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Configuration in External Document Transform JavaScript File\nDESCRIPTION: Defines the external transform function as a CommonJS module which destructures 'documents' and 'config' from its parameter. This allows using runtime parameters like 'config.queryName' within the transform to alter documents accordingly. The function returns the modified documents array. This pattern supports configuration-driven document transformations in external files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/document-transform.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {  \n  transform: ({ documents, config }) => {  \n    // Modify something in documents using `config.queryName`.  \n    return documents  \n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Installing Main Dependencies (npm)\nDESCRIPTION: Installs the core GraphQL Yoga library required to set up and run the GraphQL server. This is the primary dependency for the server implementation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i graphql-yoga\n```\n\n----------------------------------------\n\nTITLE: Environment setup commands for Kotlin plugin in GraphQL Code Generator\nDESCRIPTION: Shell commands to initialize npm/yarn, install GraphQL dependencies, and prepare configuration for generating Kotlin classes from GraphQL schema. Ensures that the required tools are installed and configured for code generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/java/kotlin.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm init --yes\nnpm install graphql\nnpm install -D @graphql-codegen/cli @graphql-codegen/kotlin\n```\n\n----------------------------------------\n\nTITLE: Executing codegen and Saving Output (TypeScript)\nDESCRIPTION: Executes the GraphQL Code Generator programmatically using the configured `codegen` function. It awaits the result, which is the generated code output as a string. This output string is then written asynchronously to the specified output file path using Node.js file system methods. Finally, it confirms the generation process completion. Requires the `fs` and `path` Node.js built-in modules.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/programmatic-usage.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst output = await codegen(config)\nawait fs.writeFile(path.join(__dirname, outputFile), output, 'utf8')\nconsole.log('Outputs generated!')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic GraphQL Code Generator Plugin (JavaScript)\nDESCRIPTION: This snippet shows the minimal structure for a GraphQL Code Generator plugin. It exports an object containing a `plugin` function that receives the schema, documents, and config. The function returns a simple string 'Hi!', which will be the generated output.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/plugin-structure.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugin(schema, documents, config) {\n    return 'Hi!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Fragment Masking in GraphQL Codegen Configuration (TypeScript)\nDESCRIPTION: Configuration example for `codegen.ts` demonstrating how to disable the fragment masking feature provided by the `client` preset. This is done by setting the `fragmentMasking` property to `false` within the `presetConfig` object for the desired output target.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  documents: ['src/**/*.tsx', '!src/gql/**/*'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      presetConfig: {\n        fragmentMasking: false\n      }\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Generated Types With Auto-imported Mapper\nDESCRIPTION: The codegen automatically imports and incorporates the UserMapper into the generated types, making it the parent type for User resolvers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport { UserMapper } from './user/schema.mappers'\n\nexport type ResolversTypes = {\n  // ... other types\n  User: ResolverTypeWrapper<UserMapper>\n}\n\nexport type ResolversParentTypes = {\n  // ... other types\n  User: UserMapper\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query for Star Wars Films\nDESCRIPTION: GraphQL query for fetching Star Wars films with a variable to control the number of results returned.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery allFilmsWithVariablesQuery($first: Int!) {\n  allFilms(first: $first) {\n    edges {\n      node {\n        ...FilmItem\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Modular GraphQL Schema Files (GraphQL, Text)\nDESCRIPTION: This snippet provides a recommended folder structure for organizing GraphQL schema modules within a TypeScript project. It suggests keeping domain-specific schemas (e.g., user, book) in separate subdirectories under a common schema directory, each with its own schema.graphql file. This layout supports the server preset's modular conventions and improves maintainability by localizing schema changes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── src/\n│   ├── schema/\n│   │   ├── base/\n│   │   │   ├── schema.graphql\n│   │   ├── user/\n│   │   │   ├── schema.graphql\n│   │   ├── book/\n│   │   │   ├── schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Configure package.json: Plugin Version\nDESCRIPTION: Sets the version of the plugin in `package.json`. The version number should be aligned with other existing packages within the GraphQL Code Generator project.  Consistency in versioning is essential for dependency management.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"X.Y.Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Type Errors in Testing Fragment Masked Components (TypeScript)\nDESCRIPTION: Demonstrates a common testing pitfall with fragment masking. Passing a plain JavaScript object (`{ name: 'Adam' }`) as the `profile` prop to the `ProfileName` component results in TypeScript errors because the component expects masked data (of type `FragmentType`), not a raw object. This uses React Testing Library and Jest.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\ndescribe('<ProfileName />', () => {\n  it('renders correctly', () => {\n    const profile = { name: 'Adam' }\n    render(\n      <ProfileName\n        profile={profile} // <-- this will throw TypeScript errors\n      />\n    )\n\n    expect(screen.getByText('Person Name: Adam')).toBeInTheDocument()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator (TypeScript)\nDESCRIPTION: Defines the configuration for GraphQL Code Generator (`codegen.ts`). It specifies the schema file (`./src/yoga.ts`), the document files to process (`src/**/*.ts`), and sets up the `client-preset` to generate code into the `./src/gql/` directory.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { type CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: './src/yoga.ts',\n  documents: ['src/**/*.ts'],\n  generates: {\n    './src/gql/': {\n      preset: 'client-preset'\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Example Custom Fetcher Function (isReactHook: false) (TypeScript/TSX)\nDESCRIPTION: Provides a TypeScript/TSX example implementation for a custom fetcher function intended for use with the `typescript-react-query` plugin when `isReactHook` is set to `false`. This function takes the GraphQL operation (query string), variables, and options (headers) and returns an async function that executes the fetch operation and handles basic error checking. Requires `RequestInit` type.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const fetchData = <TData, TVariables>(\n  query: string,\n  variables?: TVariables,\n  options?: RequestInit['headers']\n): (() => Promise<TData>) => {\n  return async () => {\n    const res = await fetch('https://api.url', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...options\n      },\n      body: JSON.stringify({\n        query,\n        variables\n      })\n    });\n\n    const json = await res.json();\n\n    if (json.errors) {\n      const { message } = json.errors[0] || {};\n      throw new Error(message || 'Error…');\n    }\n\n    return json.data;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin-Level Configuration for GraphQL Code Generator Plugins in TypeScript\nDESCRIPTION: This snippet demonstrates defining configuration at the individual plugin level within the output file configuration. Each plugin ('plugin1' and 'plugin2') receives a distinct config object, allowing precise customization. The config for each plugin is provided inside an array under the generates object keyed by output file. It imports the CodegenConfig type from '@graphql-codegen/cli', sets schema, output, and plugins with per-plugin config overrides. This method has the highest precedence overriding output-level and root-level configurations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/config-field.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  generates: {\n    'output.ts': [\n      {\n        plugin1: { configKey: 'configValue' }\n      },\n      {\n        plugin2: { configKey: 'otherValue' }\n      }\n    ]\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiler Mode in GraphQL Code Generator CLI with Shell Command\nDESCRIPTION: This shell command runs the GraphQL Code Generator CLI with a profiling flag enabled, capturing performance information as a JSON file (codegen-[timestamp].json). Dependencies include the graphql-code-generator CLI (recommended installation via npx), and a valid codegen configuration file (graphql-codegen.ts). The --profile flag activates profiling, and the --config flag specifies the config file path. Input files are referenced via the configuration; output is a normal code generation run plus a performance profile JSON. There are no special limitations, but Chrome Dev Tools or equivalent is required for viewing the resulting profile.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/profiler.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx graphql-code-generator --config graphql-codegen.ts --profile\n```\n\n----------------------------------------\n\nTITLE: Configuring relay-operation-optimizer in codegen.ts (TypeScript)\nDESCRIPTION: This TypeScript configuration demonstrates how to set up GraphQL Codegen (`codegen.ts`) to utilize the `relay-operation-optimizer`. Key configurations include setting `flattenGeneratedTypes: true` within the `config` block for the specific output file (`src/generated-types.tsx`) and enabling `skipDocumentsValidation: true` because Relay Compiler handles validation. The example also shows the use of standard plugins like `typescript`, `typescript-operations`, and `typescript-react-apollo` for generating types and React Apollo hooks.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/relay-operation-optimizer.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  overwrite: true,\n  schema: 'schema.graphql',\n  generates: {\n    'src/generated-types.tsx': {\n      documents: 'src/documents/**/*.graphql',\n      config: {\n        skipDocumentsValidation: true,\n        flattenGeneratedTypes: true\n      },\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Importing Plugin Components and Static Props in JavaScript\nDESCRIPTION: This snippet imports a UI component (PluginHeader) and a utility function (pluginGetStaticProps) from their respective module paths. It prepares the plugin for further processing by bringing in necessary components and helper functions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/jsdoc.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PluginHeader } from '@/components/plugin'\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for Vue\nDESCRIPTION: TypeScript configuration file for GraphQL Code Generator in a Vue project, with Vue-specific settings and type imports.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://graphql.org/graphql/',\n  documents: ['src/**/*.vue'],\n  ignoreNoDocuments: true, // for better experience with the watcher\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      config: {\n        useTypeImports: true\n      }\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Disable Pluck - TypeScript\nDESCRIPTION: This snippet demonstrates disabling the AST lookup phase when loading schema from code files.  Setting `noPluck` to `true` will skip AST validation and directly try to `require` each file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      './src/**/*.ts': {\n        noPluck: true,\n      },\n    },\n  ],\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Setting a Type Prefix in GraphQL Codegen\nDESCRIPTION: This example demonstrates how to add a prefix to all generated types using the `typesPrefix` option in the GraphQL Code Generator configuration. The `typesPrefix` option is set to `'I'` within the `config` block of the `generates` section. This will prepend 'I' to all generated type names.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        typesPrefix: 'I'\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: GraphQL Code Generation via Deprecated GraphQL-CLI - Bash\nDESCRIPTION: This snippet demonstrates invoking the deprecated 'graphql generate' command using the old GraphQL-CLI interface. The prerequisite is having GraphQL-CLI and any related plugins installed. The command initiates code generation according to project configuration, but its continued use is discouraged due to lack of maintenance. No parameters are shown, but any CLI arguments would be passed inline. The expected output is code artifacts as defined by the project's GraphQL codegen setup.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/graphql-cli.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngraphql generate\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Code Generator Dependencies for Angular\nDESCRIPTION: Command-line instructions for installing GraphQL Code Generator and its Angular-specific plugins using npm or yarn package managers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/angular.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i graphql\nnpm i -D typescript\nnpm i -D @graphql-codegen/cli\nnpm i -D @graphql-codegen/typescript\nnpm i -D @graphql-codegen/typescript-operations\nnpm i -D @graphql-codegen/typescript-apollo-angular\n```\n\n----------------------------------------\n\nTITLE: Installing the @graphql-codegen/near-operation-file-preset via npm\nDESCRIPTION: Installation command for adding the @graphql-codegen/near-operation-file-preset as a development dependency using npm. This package enables generating TypeScript types colocated with the corresponding GraphQL operations instead of in a single file. Having the preset installed allows subsequent configuration of graphql-codegen to output files adjacent to source documents.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/advanced/generated-files-colocation.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i -D @graphql-codegen/near-operation-file-preset\n```\n\n----------------------------------------\n\nTITLE: Svelte Component - Observable Queries\nDESCRIPTION: This Svelte code snippet showcases how to use the generated observable Apollo query within a Svelte component.  It imports the generated query and uses it with Svelte's reactivity system to re-fetch data when the `address` variable changes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-svelte-apollo.mdx#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte\n<script lang=\"ts\">\n  import { Transactions } from 'codegen'\n\n  var address = '0x0000000000000000000000000000'\n  $: t = Transactions({ address })\n</script>\n\n<ul>\n  {#each $t?.data?.transactions || [] as transaction}\n    <li>Sent transaction from {transaction.from} to {transaction.to}</li>\n  {/each}\n</ul>\n```\n```\n\n----------------------------------------\n\nTITLE: Using Legacy CommonJS Imports Option via CLI - GraphQL Codegen - Bash\nDESCRIPTION: This shell command runs the GraphQL Code Generator with a specified configuration file and enables the 'emit-legacy-common-js-imports' flag via the CLI. This flag ensures the output uses legacy CommonJS imports for compatibility with older or non-compliant JavaScript bundlers. The '--config-file=config.yml' argument defines the config file location.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ codegen --config-file=config.yml --emit-legacy-common-js-imports\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator to Use a Custom Loader in TypeScript\nDESCRIPTION: This TypeScript configuration snippet registers a custom TypeScript loader for the 'my-api' schema source, referencing a user-defined loader script. '@graphql-codegen/cli' is required and expects the loader file at './codegen-loader.ts'. Enables custom logic for schema sourcing within the codegen pipeline.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      'my-api': {\n        loader: './codegen-loader.ts'\n      }\n    }\n  ]\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring custom hash functions for persisted documents using GraphQL Code Generator client preset in TypeScript\nDESCRIPTION: Shows an example TypeScript configuration for the GraphQL Code Generator, specifying a client preset with custom hash function support for persisted documents. The sample imports the CodegenConfig type, sets up schema and document paths, and defines a presetConfig with a persistedDocuments option that provides a hashAlgorithm function. This function creates a SHA-512 hash of the operation string using Node.js crypto, returning a hexadecimal digest. Dependencies include Node.js crypto module and @graphql-codegen/cli.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/client/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      presetConfig: {\n        persistedDocuments: {\n          hashAlgorithm: operation => {\n            const shasum = crypto.createHash('sha512')\n            shasum.update(operation)\n            return shasum.digest('hex')\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Types for Simplified Union Type Resolvers (TypeScript)\nDESCRIPTION: This snippet elaborates on simplifying union types in resolvers by utilizing generic parameters, making the code more maintainable and consistent with the interface approach, particularly for nested union situations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ResolversUnionTypes<RefType extends Record<string, unknown>> = {\n  // union type definitions, referencing 'RefType' as a generic parameter\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring external documentMode with a specific path\nDESCRIPTION: This snippet shows configuring GraphQL Code Generator to use an external file for document nodes. The `documentMode` is set to `'external'`, and `importDocumentNodeExternallyFrom` specifies the path to the file containing the document nodes. This enables importing pre-built GraphQL documents.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file': {\n      // plugins...\n      config: {\n        documentMode: 'external',\n        importDocumentNodeExternallyFrom: 'path/to/document-node-file'\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using Yarn\nDESCRIPTION: Installs dependencies for all packages in the monorepo.  This is a necessary step to prepare the development environment. Run this in the root directory of the project after cloning the repository.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Exporting Static Props Using a Utility Function in JavaScript\nDESCRIPTION: This snippet exports a function named getStaticProps by invoking pluginGetStaticProps passing __filename as a parameter. This setup integrates static site generation capabilities typically used in frameworks like Next.js, linking the plugin with its source file context.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/jsdoc.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = pluginGetStaticProps(__filename)\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentTransforms in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure `documentTransforms` within the GraphQL Code Generator configuration. It shows how to define a transformation function that modifies GraphQL documents before they are processed by plugins.  The configuration includes schema and documents paths, as well as the `preset` option.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: [\n        {\n          transform: ({ documents }) => {\n            // Make some changes to the documents\n            return documents\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler for ESM (JSON)\nDESCRIPTION: This snippet shows relevant compiler options within a tsconfig.json file. Setting `\"moduleResolution\": \"node16\"` and `\"module\": \"node16\"` is necessary for TypeScript to correctly handle ESM imports and emit compatible output when targeting Node.js environments from version 4.7 onwards.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/esm-typescript-usage.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2018\",\n    \"moduleResolution\": \"node16\",\n    \"module\": \"node16\",\n    \"outDir\": \"dist\"\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure package.json: Plugin Name\nDESCRIPTION: Configures the plugin's name within the `package.json` file.  The plugin name must start with the `@graphql-codegen/` prefix.  This ensures proper identification and organization within the GraphQL Code Generator ecosystem.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@graphql-codegen/MY_PLUGIN_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting @defer Directive in GraphQL Code Generation (TypeScript & JavaScript)\nDESCRIPTION: This snippet shows how to generate code that supports the @defer directive, enabling partial data responses. It involves defining deferred fragments, queries including these fragments, and using utility functions like isFragmentReady to conditionally render components based on data availability.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/index.tsx\nimport { graphql } from './gql'\nconst OrdersFragment = graphql(`\n  fragment OrdersFragment on User {\n    orders {\n      id\n      total\n    }\n  }\n`)\nconst GetUserQuery = graphql(`\n  query GetUser($id: ID!) {\n    user(id: $id) {\n      id\n      name\n      ...OrdersFragment @defer\n    }\n  }\n`)\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// gql/graphql.ts\nexport type GetUserQuery = { __typename?: 'Query'; id: string; name: string } & ({\n  __typename?: 'Query'\n} & {\n  '$fragmentRefs'?: { OrdersFragment: Incremental<OrdersFragment> }\n})\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nconst OrdersList = (props: { data: FragmentType<typeof OrdersFragment> }) => {\n  const data = useFragment(OrdersFragment, props.data);\n  return (\n    // render orders list\n  )\n};\n\nfunction App() {\n  const { data } = useQuery(GetUserQuery);\n  return (\n    {data && (\n      <>\n        {isFragmentReady(GetUserQuery, OrdersFragment, data) && <OrdersList data={data} />}\n      </>\n    )}\n  );\n}\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar Input/Output Types in TypeScript\nDESCRIPTION: This code snippet provides configuration options for the GraphQL Code Generator to handle scalar types with input and output types. It allows developers to specify input and output types for scalars and use them within the generated types. This example shows a configuration where 'ID' scalar is defined and assigned with input and output types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nconfig: {\n  scalars: {\n    ID: {\n      input: 'string',\n      output: 'string | number'\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Run plugin tests\nDESCRIPTION: Executes the test suite for a specific plugin.  This command must be run from within the plugin's directory to ensure the tests can resolve the relative path to the plugin's source code.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator with Persisted Documents Support in TypeScript\nDESCRIPTION: This snippet shows a TypeScript configuration for the GraphQL Code Generator enabling support for persisted documents. It defines a schema URL, document glob patterns, and a 'persistedDocuments' option to generate a JSON mapping of document hashes. Additionally, it demonstrates accessing the generated hash metadata from a GraphQL document node.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/client/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** codegen.ts */\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://graphql.org/graphql/',\n  documents: ['src/**/*.tsx'],\n  ignoreNoDocuments: true, // for better experience with the watcher\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      plugins: [],\n      presetConfig: {\n        persistedDocuments: true\n      }\n    }\n  }\n}\n\nexport default config\n\n// Usage example accessing the hash metadata\nimport { gql } from './gql.js'\n\nconst allFilmsWithVariablesQueryDocument = graphql(/* GraphQL */ `\n  query allFilmsWithVariablesQuery($first: Int!) {\n    allFilms(first: $first) {\n      edges {\n        node {\n          ...FilmItem\n        }\n      }\n    }\n  }\n`)\n\nconsole.log((allFilmsWithVariablesQueryDocument as any)['__meta__']['hash'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Fields for All Types (TypeScript)\nDESCRIPTION: Configures specific fields (id, name, friends) across all GraphQL types, ignoring non-existent fields without error.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forFieldNamesOfAllTypeNames([id, name, friends])\nconsole.log(pattern) // \"@*TypeNames.[id,name,friends];\"\n```\n\n----------------------------------------\n\nTITLE: Using External Modules for Naming Conventions (Lodash Example)\nDESCRIPTION: Configuration demonstrating how to use an external module (lodash) for naming conventions by specifying the module name and exported function to use.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/naming-convention.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  config: { namingConvention: 'lodash#camelCase' }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies (npm)\nDESCRIPTION: Installs development tools essential for the project, including TypeScript for compilation, Jest for testing, Babel for code transformation, and GraphQL Code Generator CLI with required plugins for type generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D typescript ts-node @graphql-codegen/cli jest @babel/core @babel/preset-env @babel/preset-typescript babel-jest @graphql-typed-document-node/core\n```\n\n----------------------------------------\n\nTITLE: Configuring Directive Argument and Input Field Mappings with YAML\nDESCRIPTION: Demonstrates the YAML syntax to configure custom mappings for directive arguments and input type fields within the GraphQL Code Generator configuration. It maps a directive annotation (e.g., @asNumber) to a specific TypeScript type (e.g., number), enabling type customization on input fields and arguments. Requires the graphql-code-generator plugin configuration to read and interpret these mappings properly.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  config:\n    directiveArgumentAndInputFieldMappings:\n      asNumber: number\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Project GraphQL Code Generator - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a `graphql.config.js` file configured for multiple projects (`prj1`, `prj2`). Each project defines its schema, documents, and codegen settings, including output paths and plugins (typescript, typed-document-node). This structure allows managing different GraphQL APIs or domains within a single config file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/multiproject-config.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('graphql-config').IGraphQLConfig } */\nmodule.exports = {\n  projects: {\n    prj1: {\n      schema: ['prj1/**/*.graphql'],\n      documents: ['prj1/**/*.gql'],\n      extensions: {\n        codegen: {\n          generates: {\n            'graphqlTypes.ts': {\n              plugins: ['typescript', 'typed-document-node']\n            }\n          }\n        }\n      }\n    },\n    prj2: {\n      schema: ['prj2/**/*.graphql'],\n      documents: ['prj2/**/*.gql'],\n      extensions: {\n        codegen: {\n          generates: {\n            'graphqlTypes.ts': {\n              plugins: ['typescript', 'typed-document-node']\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SHA256 Hash Algorithm for Persisted Documents (TypeScript)\nDESCRIPTION: Configuration example for `codegen.ts` demonstrating how to override the default hash algorithm (SHA1) for persisted documents. Set the `persistedDocuments.hashAlgorithm` property to `'sha256'` within the `presetConfig`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      presetConfig: {\n        persistedDocuments: {\n          hashAlgorithm: 'sha256'\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing External Scalar Modules in TypeScript\nDESCRIPTION: This configuration demonstrates the use of external module for scalar types. The scalar types need to be an object with input/output fields, and must be an object when imported using a path.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nconfig: {\n  scalars: {\n    ID: './path/to/scalar-module'\n  }\n}\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Previously, imported `ID` type can be a primitive type, now it must be an object with input/output fields\nimport { ID } from './path/to/scalar-module'\n\nexport type Scalars = {\n  ID: { input: ID['input']; output: ID['output'] }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen with flutter-freezed (YAML)\nDESCRIPTION: YAML configuration file (`codegen.yaml` or similar) instructing GraphQL Code Generator to use the `flutter-freezed` plugin. It specifies the input schema file (`demo-schema.graphql`) and the output Dart file path (`./lib/data/models/app_models.dart`).\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nschema: demo-schema.graphql\ngenerates:\n  ./lib/data/models/app_models.dart:\n    plugins:\n      - flutter-freezed\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields for All Types Except Certain Types (TypeScript)\nDESCRIPTION: Configures specific fields (id, name, friends) for all types, excluding certain types like Droid and Human, facilitating targeted type exclusion.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forFieldNamesOfAllTypeNamesExcludeTypeNames([Droid, Human], [id, name, friends])\nconsole.log(pattern) // \"@*TypeNames-[Droid,Human].[id,name,friends];\"\n```\n\n----------------------------------------\n\nTITLE: Creating useQuery Hook - React Query with graphql-request - TypeScript\nDESCRIPTION: This TypeScript snippet defines a custom React Query hook named `useGraphQL`. It wraps the `graphql-request` library to execute GraphQL operations. The hook leverages `TypedDocumentNode` for type safety, automatically inferring the result type and validating variables based on the provided GraphQL document.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-vue.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport request from 'graphql-request'\nimport { type TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport { useQuery, type UseQueryResult } from '@tanstack/react-query'\n\nexport function useGraphQL<TResult, TVariables>(\n  document: TypedDocumentNode<TResult, TVariables>,\n  ...[variables]: TVariables extends Record<string, never> ? [] : [TVariables]\n): UseQueryResult<TResult> {\n  return useQuery([(document.definitions[0] as any).name.value, variables], async ({ queryKey }) =>\n    request('https://graphql.org/graphql/', document, queryKey[1] ? queryKey[1] : undefined)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Mutation Example with Generated createMessageMutation\nDESCRIPTION: This snippet shows how to execute a GraphQL mutation within a Vue component using a generated mutation function. It captures user input via a textarea, sends the message when a button is clicked, and handles the result, including error handling if the mutation fails. Dependencies include the generated createMessageMutation function and Vue's reactive data management.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-apollo-smart-ops.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\nimport { createMessageMutation } from '../generated/graphqlOperations'\n\nexport default {\n  data() {\n    return {\n      text: ''\n    }\n  },\n  async send() {\n    const result = await createMessageMutation(this, {\n      variables: {\n        text: this.text\n      }\n    })\n\n    if (!result.success || !result.data) {\n      alert('Failed to create message')\n      return\n    }\n\n    const messageId = result.data.createMessage.id\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Parcel Watcher for Watch Mode with npm\nDESCRIPTION: Installs the `@parcel/watcher` package as a development dependency using npm. This package enables watch mode support for GraphQL Code Generator, allowing it to automatically regenerate code on file changes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/installation.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @parcel/watcher\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Generator for Data Components (TypeScript)\nDESCRIPTION: This `codegen.ts` configuration modifies the setup to generate React Data Components (deprecated in Apollo Client v3) alongside Hooks. The `withComponent: true` option is added to the `typescript-react-apollo` plugin configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-apollo.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'YOUR_SCHEMA_HERE',\n  documents: './src/**/*.graphql',\n  generates: {\n    './generated-types.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        withComponent: true\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Schema Plugin to TypeScript Configuration\nDESCRIPTION: This JSON snippet shows how to add the `@0no-co/graphqlsp` GraphQL Language Server plugin to the TypeScript compiler options within `tsconfig.json`. It configures the plugin to use the generated `schema.graphql` file for enhanced GraphQL autocomplete and type checking support inside TypeScript source files. This setup improves developer experience by integrating GraphQL schema awareness directly into the IDE.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/react-query.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"name\": \"@0no-co/graphqlsp\",\n        \"schema\": \"./schema.graphql\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen YAML with Explicit Enum Value Mapping\nDESCRIPTION: This YAML snippet demonstrates directly mapping GraphQL enum values to string literals using enumValues in the config. Instead of mapping to a TypeScript enum, the Color enum values RED and BLUE are directly set to their hex string codes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/flow/flow-resolvers.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nschema: schema.graphql\ngenerates:\n  ./resolvers-types.js:\n    config:\n      enumValues:\n        Color:\n          RED: '#FF0000'\n          BLUE: '#0000FF'\n    plugins:\n      - flow\n      - flow-resolvers\n```\n\n----------------------------------------\n\nTITLE: Excluding All Fields of Certain Types (TypeScript)\nDESCRIPTION: Excludes all fields from specified types like Droid and Human, effectively skipping their fields in configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forAllFieldNamesOfAllTypeNamesExcludeTypeNames([Droid, Human])\nconsole.log(pattern) // \"@*TypeNames-[Droid,Human].@*FieldNames;\"\n```\n\n----------------------------------------\n\nTITLE: Extracting GraphQL AST Node using @graphql-codegen/plugin-helpers (JavaScript)\nDESCRIPTION: This snippet demonstrates the initial step in creating a GraphQL Code Generator plugin. It shows how to define the basic plugin function `module.exports.plugin` which receives the schema, documents, and config, and how to use the `getCachedDocumentNodeFromSchema` utility from `@graphql-codegen/plugin-helpers` to convert the input GraphQL schema into an Abstract Syntax Tree (AST) node, which is required for visitor pattern traversal.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/using-visitor.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getCachedDocumentNodeFromSchema } = require('@graphql-codegen/plugin-helpers')\n\nmodule.exports = {\n  plugin(schema, documents, config) {\n    const astNode = getCachedDocumentNodeFromSchema(schema) // Transforms the GraphQLSchema into ASTNode\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting GraphQL Documents Using gql Tag and Magic Comment (JSX)\nDESCRIPTION: Illustrates embedding GraphQL documents in React components using both the 'gql' tag and magic GraphQL comments. These patterns are detected by GraphQL Code Generator's document plucking mechanism for extracting operation strings directly from code. '@graphql-codegen/cli' and 'graphql-tag' are required. Inputs are strings or template literals containing GraphQL queries; outputs are discovered operation definitions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from 'react'\nimport { gql } from 'graphql-tag'\n\n// This will work\nconst MY_QUERY = gql`\n  query myQuery {\n    getSomething {\n      id\n    }\n  }\n`\n\n// This will also work\nconst MY_QUERY = /* GraphQL */ `\n  query myQuery {\n    getSomething {\n      id\n    }\n  }\n`\n\n// … some components code …\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Schema for Star Wars Entities - GraphQL\nDESCRIPTION: This snippet defines a GraphQL schema modeling key Star Wars entities, including enums (Episode), types (Actor, Starship, Human, Droid), interfaces (Character), and unions (SearchResult). The schema is used as the foundation for code generation and consists of various relationships, such as interface implementation and union memberships. Input consists of the schema definition, with output used by the code-generation process for creating statically-typed models.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n\ntype Actor {\n  name: String!\n  appearsIn: [Episode]!\n}\n\ntype Starship {\n  id: ID!\n  name: String!\n  length: Float\n}\n\ninterface Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n}\n\ntype Human implements Character {\n  id: ID!\n  name: String!\n  friends: [Actor]\n  appearsIn: [Episode]!\n  totalCredits: Int\n}\n\ntype Droid implements Character {\n  id: ID!\n  name: String!\n  friends: [Actor]\n  appearsIn: [Episode]!\n  primaryFunction: String\n}\n\nunion SearchResult = Human | Droid | Starship\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Hash Function for Persisted Documents (TypeScript)\nDESCRIPTION: Configuration example for `codegen.ts` showing how to define a custom hashing function for persisted documents. Instead of a predefined string, provide a function to `persistedDocuments.hashAlgorithm` that accepts the operation string and returns the calculated hash string. This example uses Node.js `crypto` to generate a SHA512 hash.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      presetConfig: {\n        persistedDocuments: {\n          hashAlgorithm: operation => {\n            const shasum = crypto.createHash('sha512')\n            shasum.update(operation)\n            return shasum.digest('hex')\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring InMemoryCache with Fragment Matcher in Apollo Client 3 - TypeScript\nDESCRIPTION: This snippet shows how to initialize the Apollo Client 3 cache by supplying possibleTypes using the introspection result generated by the Fragment Matcher plugin. Required dependencies include '@apollo/client' and the generated introspection JSON file. The 'InMemoryCache' is configured with the 'possibleTypes' property for correct fragment matching; 'generatedIntrospection' must be an object containing the field 'possibleTypes'. The code expects the introspection result to be generated and available in the specified path.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/fragment-matcher.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { InMemoryCache } from '@apollo/client'\n\n// generated by Fragment Matcher plugin\nimport generatedIntrospection from '../introspection-result'\n\nconst cache = new InMemoryCache({ possibleTypes: generatedIntrospection.possibleTypes })\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields for All Types Except Certain Types (TypeScript)\nDESCRIPTION: Excludes specific fields like id, name, friends in all types, but only for types other than Droid and Human, allowing exclusion with type filters.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forAllFieldNamesExcludeFieldNamesOfAllTypeNamesExcludeTypeNames(\n  [Droid, Human],\n  [id, name, friends]\n)\nconsole.log(pattern) // \"@*TypeNames-[Droid,Human].@*FieldNames-[id,name,friends];\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentTransform for GraphQL Codegen (TS)\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the `documentTransforms` option in `@graphql-codegen/cli` to modify GraphQL documents before they are processed by plugins. It defines a CodegenConfig object with the schema, documents, and generates properties, including a documentTransforms array with a transform function that currently returns the documents without modification.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-core/CHANGELOG.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: [\n        {\n          transform: ({ documents }) => {\n            // Make some changes to the documents\n            return documents;\n          },\n        },\n      ],\n    },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Import Statements and Static Props Setup in Vue.js TypeScript Plugin\nDESCRIPTION: This snippet imports essential components and functions for the plugin, including UI components for callouts, plugin documentation, and static props. It also exports a `getStaticProps` function leveraging the imported utility, aimed at static generation of plugin-related pages in a Vue.js project using TypeScript.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-urql.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Callout } from '@theguild/components'\nimport { PluginApiDocs, PluginHeader } from '@/components/plugin'\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\nexport const getStaticProps = pluginGetStaticProps(__filename, { hasOperationsNote: true })\n```\n\n----------------------------------------\n\nTITLE: Adding multiple content blocks with different placements using the add plugin\nDESCRIPTION: This example demonstrates how to add both prepended and appended content using the 'add' plugin. It wraps the TypeScript output in a GraphQL namespace by adding the namespace declaration at the beginning and the closing bracket at the end of the file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/add.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: [\n        {\n          add: {\n            content: ['declare namespace GraphQL {']\n          }\n        },\n        {\n          add: {\n            placement: 'append',\n            content: '}'\n          }\n        },\n        'typescript'\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for Apollo Server (TypeScript)\nDESCRIPTION: This TypeScript configuration exports a 'CodegenConfig' object tailored for Apollo Server projects. It specifies the input schema file, output path for the generated resolver types, enabling the 'useIndexSignature' config for improved type flexibility, and sets up the TypeScript and TypeScript-resolvers plugins. Requires the previously installed codegen plugins and a valid GraphQL schema file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  generates: {\n    './resolvers-types.ts': {\n      config: {\n        useIndexSignature: true,\n      },\n      plugins: ['typescript', 'typescript-resolvers'],\n    },\n  },\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Schema from JavaScript Export - TypeScript\nDESCRIPTION: This snippet shows how to load a schema from a JavaScript file that exports the GraphQLSchema object either as an export named `schema` or as a default export.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'schema.js'\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Adding excludeTypes Configuration to Resolver Types (TypeScript)\nDESCRIPTION: This snippet introduces the excludeTypes option within the resolversNonOptionalTypename configuration, allowing developers to prevent automatic addition of __typename for specified types, facilitating migration or customization in resolver type generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst config: CodegenConfig = {\n  schema: 'src/schema/**/*.graphql',\n  generates: {\n    'src/schema/types.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n      config: {\n        resolversNonOptionalTypename: {\n          unionMember: true,\n          excludeTypes: ['MyType']\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Executing Typed GraphQL Operations (TypeScript)\nDESCRIPTION: Provides a reusable helper function, `executeOperation`, designed to send typed GraphQL queries or mutations to a GraphQL server endpoint using `fetch` and return a Promise with the typed execution result. This function can be used for tests or server-to-server communication.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport { type ExecutionResult, print } from 'graphql'\nimport { graphql } from './gql'\n\nfunction executeOperation<TResult, TVariables>(\n  operation: TypedDocumentNode<TResult, TVariables>,\n  ...[variables]: TVariables extends Record<string, never> ? [] : [TVariables]\n): Promise<ExecutionResult<TResult>> {\n  return Promise.resolve(\n    yoga.fetch('http://yoga/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        query: print(operation),\n        variables: variables ?? undefined\n      })\n    })\n  ).then(response => response.json())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin\nDESCRIPTION: This JavaScript snippet shows how to configure the Babel plugin provided by `@graphql-codegen/client-preset` for code splitting and tree shaking. It specifies the plugin and its options within a `.babelrc.js` file, including the `artifactDirectory` and `gqlTagName` to optimize the generated files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { babelOptimizerPlugin } = require('@graphql-codegen/client-preset')\n\nmodule.exports = {\n  presets: ['react-app'],\n  plugins: [[babelOptimizerPlugin, { artifactDirectory: './src/gql', gqlTagName: 'graphql' }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolver with Non-Optional __typename (TypeScript)\nDESCRIPTION: Illustrates resolver implementation when the `resolversNonOptionalTypename` option is enabled. Resolvers explicitly include and return the `__typename` string. This allows the `__resolveType` function for the union type to be simplified to directly return `parent.__typename`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Query/book.ts\nexport const book = async () => {\n  try {\n    const book = await fetchBook()\n    // 1. `__typename` is declared in resolver results...\n    return {\n      __typename: 'BookResult', // 1a. this also types `node` for us 🎉\n      node: book\n    }\n  } catch (e) {\n    return {\n      __typename: 'PayloadError',\n      message: 'Failed to fetch book'\n    }\n  }\n}\n\n// BookPayload.ts\nexport const BookPayload = {\n  __resolveType: parent => parent.__typename // 2. ... means a very simple check in `__resolveType`\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Deferred Fragments in JSX\nDESCRIPTION: This example provides the usage of `useFragment` and `isFragmentReady` to show how to render a component conditionally based on the availability of deferred data for a fragment.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_21\n\nLANGUAGE: JSX\nCODE:\n```\nconst OrdersList = (props: { data: FragmentType<typeof OrdersFragment> }) => {\n  const data = useFragment(OrdersFragment, props.data);\n  return (\n    // render orders list\n  )\n};\n\nfunction App() {\n  const { data } = useQuery(GetUserQuery);\n  return (\n    {data && (\n      <>\n        {isFragmentReady(GetUserQuery, OrdersFragment, data)\n        && <OrdersList data={data} />}\n      </>\n    )}\n  );\n}\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Document Loader for GraphQL Documents (TypeScript)\nDESCRIPTION: Specifies a per-file custom document loader using the 'loader' field in the 'documents' config, for advanced or nonstandard extraction of GraphQL operations from code files. '@graphql-codegen/cli' is required. The config maps file patterns to loader objects; each loader must export a default function returning a DocumentNode. Useful for integration with non-native formats.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/documents-field.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  documents: {\n    './src/*.jsx': {\n      loader: 'my-documents-loader.js'\n    }\n  }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using DocumentType Utility Type in TypeScript/TSX\nDESCRIPTION: Example TypeScript/TSX code demonstrating the usage of the `DocumentType` utility type, introduced in version 1.1.0 and exported from the generated `gql` file (typically by `@graphql-codegen/gql-tag-operations`). It shows how to define a GraphQL fragment `TweetFragment` using `gql` and then use `DocumentType<typeof TweetFragment>` to strongly type the `tweet` prop passed to a React functional component, ensuring type safety based on the fragment definition.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/gql-tag-operations/CHANGELOG.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { gql, DocumentType } from '../gql'\n\nconst TweetFragment = gql(/* GraphQL */ `\n  fragment TweetFragment on Tweet {\n    id\n    body\n  }\n`)\n\nconst Tweet = (props: { tweet: DocumentType<typeof TweetFragment> }) => {\n  return <div data-id={props.id}>{props.body}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Java Generation\nDESCRIPTION: Example GraphQL schema defining a 'Query' type with a 'user' field that takes an ID argument and returns a 'User' type. This schema serves as the input for the GraphQL Code Generator to create corresponding Java classes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/java/java.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  user(id: ID!): User!\n}\n\ntype User {\n  id: ID\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreNoDocuments in graphql-code-generator (YAML)\nDESCRIPTION: This YAML configuration snippet enables the ignoreNoDocuments option, instructing graphql-code-generator to exit successfully even when no GraphQL documents are found. This helps avoid non-zero exit codes in CI/CD environments or other automated workflows. The snippet assumes a standard project layout with the schema defined in 'schema.graphql' and documents matched via glob. Place within a supported config file for CLI usage. Requires graphql-code-generator CLI v2.8.0 or greater.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nschema: 'schema.graphql'\ndocuments:\n  - 'src/**/*.graphql'\nignoreNoDocuments: true\n\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Directive from GraphQL Documents Using DocumentTransform JavaScript\nDESCRIPTION: This JavaScript snippet uses the `graphql` package's `visit` function to traverse and transform GraphQL documents, removing directives named 'localOnlyDirective'. Use this snippet in a document transform file to customize the document contents processed by the plugin. It is intended for use as a custom transform module referenced in the codegen config.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\nimport { visit } from 'graphql'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: [\n        {\n          transform: ({ documents }) => {\n            return documents.map(documentFile => {\n              documentFile.document = visit(documentFile.document, {\n                Directive: {\n                  leave(node) {\n                    if (node.name.value === 'localOnlyDirective') return null\n                  }\n                }\n              })\n              return documentFile\n            })\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Types for a MongoDB Model with Embedding and Linking - GraphQL\nDESCRIPTION: This code defines a User type with embedded profile and linked friends, as well as a profile subdocument type. The @embedded and @link directives guide the generator's type mapping. Inputs: GraphQL type definitions for User and Profile entities. Limitations: Only fields annotated with mapping directives are generated to the MongoDB model.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype User @entity {\n  id: String! @id\n  username: String! @column\n  email: String! @column\n  profile: Profile! @embedded\n  friendsCount: Int! # this field won't get a generated MongoDB field\n  friends: [User]! @link\n}\n\ntype Profile @entity(embedded: true) {\n  name: String! @column\n  age: Int! @column\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Scalars To Support Distinct Input and Output Types in Typescript\nDESCRIPTION: This snippet shows the new pattern in Typescript code generation, where each GraphQL scalar type is now represented as an object with 'input' and 'output' subfields. This allows the code generator to output correct Typescript typings for different input/output contexts. No dependencies are required except for Typescript. This pattern underpins subsequent custom type configuration and usage.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Scalars = {\n  ID: {\n    input: string | number\n    output: string\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration for Website Documentation\nDESCRIPTION: Demonstrates how to configure the plugin for website documentation generation.  This involves adding a record to the `pluginsConfigurations` array in `website/src/lib/plugins-docs.ts`, specifying the path to the configuration file, the identifier of the config interface/type, and the name of the plugin package.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/contributing.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport const pluginsConfigurations: PluginConfig[] = [\n  {\n    file: '../packages/plugins/my-plugin/config.ts', // file where the config interface/type is located\n    identifier: 'MyPluginConfig', // name of the config interface/type\n    name: 'my-plugin' // name of your plugin package\n  }\n  // …\n]\n```\n\n----------------------------------------\n\nTITLE: Providing A Unified Type for Scalar Input and Output In Codegen Config\nDESCRIPTION: This configuration snippet shows how providing a string instead of an object for a scalar in the scalars config causes GraphQL Code Generator to use that type for both input and output. This is a simplified approach for cases where no distinction is required. This approach is compatible with existing workflows but does not support divergent input/output needs.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconfig: {\n  scalars: {\n    ID: 'string' // This means `string` will be used for both ID's input and output types\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Server Preset (TypeScript)\nDESCRIPTION: This TypeScript configuration file sets up GraphQL Code Generator to process all schema.graphql files recursively and generate code in the src/schema directory using the server preset. It uses TypeScript syntax suitable for codegen.ts, leveraging the defineConfig helper to apply sensible defaults for schema module processing.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\nimport { defineConfig } from '@eddeee888/gcg-typescript-resolver-files'\n\nconst config: CodegenConfig = {\n  schema: '**/schema.graphql',\n  generates: {\n    'src/schema': defineConfig()\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Referencing External Scalar Modules With Input/Output Types In Codegen Config\nDESCRIPTION: This snippet highlights a breaking change: when referencing scalars as external modules in codegen config, the referenced type must now be an object with 'input' and 'output' fields, not a primitive type. The generator then imports the scalar and applies its subfields as input/output mappings. This requires correct module exports and is enforced in codegen v4+.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconfig: {\n  scalars: {\n    ID: './path/to/scalar-module'\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentTransforms in a Separate JavaScript File\nDESCRIPTION: This JavaScript snippet shows how to define a `documentTransforms` function in a separate file for modularity and reusability. The file exports an object with a `transform` function that takes the `documents` as input and returns the modified documents. This approach allows for cleaner configuration and easier maintenance of transformations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: ({ documents }) => {\n    // Make some changes to the documents\n    return documents\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for ESM Imports (TypeScript)\nDESCRIPTION: This snippet shows the configuration for @graphql-codegen/cli. The key setting for ESM compatibility is `emitLegacyCommonJSImports: false`, which instructs the generator to add `.js` extensions to generated named imports. It defines the schema, documents, and output directory for the generated code.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/esm-typescript-usage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  emitLegacyCommonJSImports: false,\n  generates: {\n    './src/gql/': {\n      preset: 'client'\n    }\n  }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring reason-client Plugin in GraphQL Codegen\nDESCRIPTION: This YAML snippet demonstrates how to configure the `reason-client` plugin within a `codegen.yml` file. It specifies the location of the GraphQL schema and the output file for the generated ReasonML types. The `schema` field points to the GraphQL schema URL, and the `generates` section defines the output file path (`src/GraphQLTypes.re`) and the plugin name (`reason-client`). This configuration is crucial for generating the ReasonML types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/reason-client.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nschema: http://path.to.your.app\ngenerates:\n  src/GraphQLTypes.re:\n    - reason-client\n```\n\n----------------------------------------\n\nTITLE: Ignoring Missing Documents in YAML Config - GraphQL Codegen - YAML\nDESCRIPTION: This YAML configuration snippet shows how to set the 'ignoreNoDocuments' flag to true, instructing the GraphQL Code Generator not to exit with a non-zero exit code when no matching GraphQL documents are found. The 'schema' field specifies the GraphQL schema location, and 'documents' details the glob patterns to search for GraphQL operation files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nschema: 'schema.graphql'\ndocuments:\n  - 'src/**/*.graphql'\nignoreNoDocuments: true\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries with Input Parameters using Named Operations and QueryOptions\nDESCRIPTION: Provides an example of refetching queries that include input parameters by combining the 'namedOperations' object for queries without input parameters and direct 'QueryOptions' objects for queries with variables. This pattern maintains type safety and clarity when performing complex refetch operations in Apollo Client.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/named-operations-object.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient\n  .mutate(\n    { ... },\n    // No more typos, and you get auto-completion and build time validation\n    { refetchQueries: [\n      namedOperations.Query.myQueryWithoutInputParams,\n      {\n        query: MyQueryWithInputParamsDocument,\n        variables: { inputParam }\n      }\n    ] }\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen with Custom Fetcher Function (String Shortcut) (TypeScript)\nDESCRIPTION: Provides a shorthand configuration for the GraphQL Code Generator to use a custom function defined in an external file as the fetcher. Specifying the function path as a string (`'./my-file#myFetcher'`) under the `fetcher` key is equivalent to the object configuration with `isReactHook: false` (the default behavior). Requires GraphQL schema, operation documents, and the custom fetcher file.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-query.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconfig:\n  fetcher: './my-file#myFetcher' # isReactHook is false here (the default version)\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint after single file write in GraphQL Codegen (TS)\nDESCRIPTION: This configures GraphQL Code Generator to run ESLint after each generated file. It utilizes the `afterOneFileWrite` hook in `codegen.ts` to run `eslint --fix` on each newly generated file. This ensures files are formatted based on ESLint rules immediately after creation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/prettier.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  hooks: { afterOneFileWrite: ['eslint --fix'] }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring Upper-case Enum Values in GraphQL Codegen\nDESCRIPTION: This snippet demonstrates how to configure GraphQL Code Generator to generate upper-case enum values using the `namingConvention` option. It sets `enumValues` to `'change-case-all#upperCase'` within the `config` section of the `generates` configuration. This will transform all enum values to uppercase in the generated code.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file': {\n      // plugins...\n      config: {\n        namingConvention: {\n          typeNames: 'change-case-all#pascalCase',\n          enumValues: 'change-case-all#upperCase'\n        }\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Required Field Resolvers Based on Mapper Differences\nDESCRIPTION: The codegen automatically generates resolver stubs for fields that either don't exist in the mapper or have incompatible types, ensuring type-safety across the resolver chain.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { UserResolvers } from './../../types.generated'\nexport const User: UserResolvers = {\n  fullName: async (_parent, _arg, _ctx) => {\n    /* User.fullName resolver is required because User.fullName exists but UserMapper.fullName does not */\n  },\n\n  isAdmin: ({ isAdmin }, _arg, _ctx) => {\n    /* User.isAdmin resolver is required because User.isAdmin and UserMapper.isAdmin are not compatible */\n    return isAdmin\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Typed Schema and Resolver Files (Shell)\nDESCRIPTION: This shell command invokes the GraphQL Code Generator CLI to process configuration and emit TypeScript or JavaScript files based on the defined schema and preset. Required dependencies and configs must be installed first. The generated artifacts include resolvers, types, and type definitions for modular GraphQL schemas.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx graphql-codegen\n```\n\n----------------------------------------\n\nTITLE: Setting emitLegacyCommonJSImports via CLI (Bash)\nDESCRIPTION: Command-line example using the `codegen` CLI tool to enable the `emitLegacyCommonJSImports` flag when running the code generation process. This provides an alternative to setting the option directly in the configuration file and can be used for specific runs. Requires the `codegen` CLI to be installed and accessible in the environment, and a configuration file specified via `--config-file`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/gql-tag-operations/CHANGELOG.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ codegen --config-file=config.yml --emit-legacy-common-js-imports\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPattern in CodegenConfig TypeScript example\nDESCRIPTION: Example showing how to configure the watchPattern option within a CodegenConfig to watch mapper files for changes in watch mode. This allows re-running code generation when non-schema files that affect the output change.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// codegen.ts\nconst config: CodegenConfig = {\n  schema: 'src/schema/**/*.graphql',\n  generates: {\n    'src/schema/types.ts': {\n      plugins: ['typescript', 'typescript-resolvers'],\n      config: {\n        mappers: {\n\n          Book: './book/schema.mappers#BookMapper',\n        },\n      }\n      watchPattern: 'src/schema/**/*.mappers.ts', // Watches mapper files in `watch` mode. Use an array for multiple patterns e.g. `['src/*.pattern1.ts','src/*.pattern2.ts']`\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configure TSLint after single file write in GraphQL Codegen (TS)\nDESCRIPTION: This code shows how to integrate TSLint with GraphQL Code Generator, running it after each generated file.  The `afterOneFileWrite` hook in `codegen.ts` executes `tslint --fix`. This formats each file individually after it's generated, enforcing code style rules.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/integrations/prettier.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  hooks: { afterOneFileWrite: ['tslint --fix'] }\n  // ...\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom DocumentTransform Module in Codegen Configuration TypeScript\nDESCRIPTION: This TypeScript snippet shows how to reference an external document transform file in the Codegen configuration using the `documentTransforms` array. By specifying a path to the custom transform module, users can apply custom document changes during code generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: ['./my-document-transform.js']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Exporting getStaticProps for Static Generation (TypeScript)\nDESCRIPTION: This snippet exports the 'getStaticProps' function, assigned via the 'pluginGetStaticProps', using the current file's filename as a parameter. It enables Next.js to statically generate the page at build time, incorporating necessary metadata or plugin data. Prerequisites include Next.js and the existence of 'pluginGetStaticProps' in the codebase.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mock-data.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getStaticProps = pluginGetStaticProps(__filename)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Allow List Plugin - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the `hasura-allow-list` plugin within the `@graphql-codegen/cli` configuration file (`codegen.ts`). It shows how to specify the output path for the generated Hasura allow list YAML file by listing the plugin under the `generates` section. This configuration requires the `@graphql-codegen/cli` and `@graphql-codegen/hasura-allow-list` dependencies.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/hasura-allow-list.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/metadata/allow_list.yaml': {\n      plugins: ['hasura-allow-list']\n    }\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Dependency update for plugin helpers and visitor plugin in version 4.0.7\nDESCRIPTION: This update in 4.0.7 includes upgrading @graphql-codegen/plugin-helpers to 5.0.4 and visitor plugin common to 5.2.0 to maintain compatibility and bug fixes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`dfc5310`](https://github.com/dotansimha/graphql-code-generator/commit/dfc5310ab476bed6deaefc608f311ff368722f), [`156cc2b`](https://github.com/dotansimha/graphql-code-generator/commit/156cc2b9a2a5129beba121cfa987b04e29899431), [`b49457b`](https://github.com/dotansimha/graphql-code-generator/commit/b49457b5f29328d2dc23c642788a2e697cb8966e)]:\n  - @graphql-codegen/plugin-helpers@5.0.4\n  - @graphql-codegen/visitor-plugin-common@5.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring gqlImport with graphql.macro\nDESCRIPTION: This code configures GraphQL Code Generator to use `graphql.macro` for parsing GraphQL queries instead of the default `graphql-tag`.  The `gqlImport` option specifies the module and export name to use for the `gql` tag. This allows using `graphql.macro` for compile-time GraphQL processing.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        gqlImport: 'graphql.macro#gql'\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Function for Schema Processing in GraphQL Code Generator\nDESCRIPTION: This snippet shows a simple template for creating a plugin with a `plugin` function that receives schema, documents, configuration, and info parameters; it returns a string of type names from the schema. It serves as a basic example of schema processing within a plugin.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/validate-configuration.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugin(schema, documents, config, info) {\n    const typesMap = schema.getTypeMap()\n\n    return Object.keys(typesMap).join('\\n')\n  },\n  validate(schema, documents, config, outputFile, allPlugins) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Directive-Annotated Schema in GraphQL\nDESCRIPTION: This GraphQL schema defines the `@asNumber` directive and applies it to an input field (`MyInput.id`) and a query argument (`Query.user(id)`). It shows the standard schema definition alongside the directive annotation, which the code generator uses with the `directiveArgumentAndInputFieldMappings` configuration to influence generated types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @asNumber on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION\n\ninput MyInput {\n  id: ID! @asNumber\n}\n\ntype User {\n  id: ID!\n}\n\ntype Query {\n  user(id: ID! @asNumber): User\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module-Specific Typed Resolvers in a GraphQL Modules Setup with TypeScript\nDESCRIPTION: This snippet illustrates defining typed resolvers within a modular GraphQL project structure using generated module-specific type definitions. It references 'UsersModule.Resolvers' from generated typings, enabling implementation of only relevant types and fields specified for the 'user' module. This modular approach facilitates strict type safety scoped to each module. The example assumes a project layout with separate resolver and schema files inside module directories under 'src/modules'.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UsersModule } from './generated-types/module-types'\\n\\nexport const resolvers: UsersModule.Resolvers = {\\n  // Here, you can implement only the types and fields defined in your module!\\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Directives with DocumentTransforms in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use `documentTransforms` to remove a specific directive (e.g., `@localOnlyDirective`) from GraphQL documents. It utilizes the `graphql` library's `visit` function to traverse the document and remove nodes matching the specified directive name. The configuration specifies schema and documents paths, as well as the `preset` option.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\nimport { visit } from 'graphql'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: [\n        {\n          transform: ({ documents }) => {\n            return documents.map(documentFile => {\n              documentFile.document = visit(documentFile.document, {\n                Directive: {\n                  leave(node) {\n                    if (node.name.value === 'localOnlyDirective') return null\n                  }\n                }\n              })\n              return documentFile\n            })\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Defining Directive-Annotated Field in GraphQL Schema\nDESCRIPTION: This GraphQL schema defines the `@authenticated` directive and applies it to the `foo` field of the `Query` type. This schema is used in conjunction with the `directiveResolverMappings` configuration in `graphql-code-generator` to generate different resolver types for the `foo` field compared to fields without the directive, such as `yee`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @authenticated on FIELD_DEFINITION\n\ntype Query {\n  yee: String\n  foo: String @authenticated\n}\n```\n\n----------------------------------------\n\nTITLE: Define GraphQL Query with NamedClient Directive\nDESCRIPTION: Illustrates the use of the `@namedClient` directive in a GraphQL query. This directive instructs the `typescript-apollo-angular` plugin to generate code that uses a specific named Apollo client (e.g., \"custom\") for this particular operation, enabling scenarios where multiple Apollo clients are configured in the application.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-angular.mdx#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery feed {\n  feed @namedClient(name: \"custom\") {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample YAML configuration for java-apollo-android code generation\nDESCRIPTION: Defines the schema, documents, and output settings for generating Java classes using the java-apollo-android preset. Specifies package structures and plugin details required to generate Java code from GraphQL schemas and operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/java/java-apollo-android.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nschema: POINT_TO_YOUR_SCHEMA\ndocuments: POINT_TO_YOUR_GRAPHQL_OPERATIONS\ngenerates:\n  ./app/src/main/java/:\n    preset: java-apollo-android\n    config:\n      package: 'com.my.app.generated.graphql'\n      fragmentPackage: 'com.my.app.generated.graphql'\n      typePackage: 'type'\n    plugins:\n      - java-apollo-android\n```\n\n----------------------------------------\n\nTITLE: Example .env File Defining Environment Variables\nDESCRIPTION: Provides an example .env file with two environment variables (SCHEMAURL and APIKEY) used to configure GraphQL Code Generator credentials and endpoint. The file is loaded automatically using dotenv when the require flag is set in the CLI, enabling secure and centralized management of sensitive config values.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/require-field.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nSCHEMAURL=https://example.com/graphql\nAPIKEY=ABC123\n```\n\n----------------------------------------\n\nTITLE: Defining getStaticProps for Static Page Data Fetching - JavaScript\nDESCRIPTION: Exports the `getStaticProps` function for Next.js pages, utilizing a helper `pluginGetStaticProps` to retrieve necessary data for the plugin documentation page. It passes the current filename and a configuration object indicating the presence of an operations note.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/flow/flow-operations.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = pluginGetStaticProps(__filename, { hasOperationsNote: true })\n```\n\n----------------------------------------\n\nTITLE: Updating schema configuration in YML for client plugin migration\nDESCRIPTION: This snippet illustrates the YML configuration update from multiple plugin dependencies for client-side types to the new simplified 'typescript' and 'typescript-operations' plugins, aligning with the new plugin architecture for client-side code generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-0-18.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n./my-file.ts:\n  schema: schema.json\n  plugins:\n    - typescript-common\n    - typescript-client\n```\n\nLANGUAGE: YAML\nCODE:\n```\n./my-file.ts:\n  schema: schema.json\n  plugins:\n    - typescript\n    - typescript-operations\n```\n\n----------------------------------------\n\nTITLE: Querying a Post with Vue Apollo\nDESCRIPTION: This Vue component demonstrates fetching a single post using Vue Apollo. It defines a TypeScript interface `PostQueryVariables` for the query variables. The GraphQL query is defined using `gql` and is associated with the `post` property in the `apollo` option. This setup requires manual typing of the GraphQL query and its variables.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/getting-started/index.mdx#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"apollo\">\n    <!-- UI … -->\n  </div>\n</template>\n\n<script lang=\"ts\">\ninterface PostQueryVariables {\n  id: string\n}\n\nexport default {\n  apollo: {\n    post: {\n      query: gql`\n        query ($id: ID!) {\n          post(id: $id) {\n            id\n            title\n            author {\n              id\n              firstName\n              lastName\n            }\n          }\n        }\n      `,\n      variables: { id: 1 } as PostQueryVariables\n    }\n  },\n  data() {\n    return {\n      post: undefined\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options\nDESCRIPTION: This JSON configures the TypeScript compiler to use the `@0no-co/graphqlsp` plugin for GraphQL support. It specifies the plugin's name and the schema file location. This allows the TypeScript language service to provide auto-completion and validation for GraphQL queries within TypeScript files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES6\", // Requires ES6 and above\n    \"plugins\": [\n      {\n        \"name\": \"@0no-co/graphqlsp\",\n        \"schema\": \"./schema.graphql\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Document via Generated TypeScript Module\nDESCRIPTION: Demonstrates how to import a GraphQL document (`my-query.graphql`) into a TypeScript file using either a default import or a named import. This relies on the corresponding TypeScript module declaration generated by the plugin and a build setup using `graphql-tag/loader`.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-graphql-files-modules.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport myQuery from './my-query.graphql'\n\n// OR\n\nimport { myQuery } from './my-query.graphql'\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen YAML Using mappers to Map GraphQL Enums\nDESCRIPTION: This YAML snippet shows a config using mappers instead of enumValues to map the Color GraphQL enum to the internal ColorsCode TypeScript enum. This allows the generated resolvers to use the internal enum directly.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/flow/flow-resolvers.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nschema: schema.graphql\ngenerates:\n  ./resolvers-types.js:\n    config:\n      mappers:\n        Color: ./enums#ColorsCode\n    plugins:\n      - flow\n      - flow-resolvers\n```\n\n----------------------------------------\n\nTITLE: DocumentTransform Module (JS)\nDESCRIPTION: This JavaScript module exports a `transform` function for use with the `documentTransforms` option in `@graphql-codegen/cli`. The function receives an object with `documents` and is expected to return the modified documents.  In this example, it currently returns the documents without any modification.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-core/CHANGELOG.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  transform: ({ documents }) => {\n    // Make some changes to the documents\n    return documents;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue.js Plugin Header and API Documentation Components\nDESCRIPTION: This snippet includes the usage of `<PluginHeader />` and `<PluginApiDocs />` components to display plugin headers and API documentation within Vue.js pages, facilitating organized presentation of plugin info and documentation content.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-vue-urql.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<PluginHeader />\n<PluginApiDocs />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Helper Function\nDESCRIPTION: Imports React components 'PluginApiDocs' and 'PluginHeader' from a shared components directory, and a helper function 'pluginGetStaticProps' from a library directory. These are used for structuring and populating the documentation page within a likely Next.js application.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-fabbrica.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PluginApiDocs, PluginHeader } from '@/components/plugin'\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\n```\n\n----------------------------------------\n\nTITLE: Dependency update for @graphql-codegen/visitor-plugin-common and @graphql-codegen/plugin-helpers in version 4.1.1\nDESCRIPTION: Version 4.1.1 upgrades dependencies to @graphql-codegen/visitor-plugin-common@5.5.0 and @graphql-codegen/plugin-helpers@5.1.0, supporting newer features and fixes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`55a1e9e`](https://github.com/dotansimha/graphql-code-generator/commit/55a1e9e63830df17ed40602ea7e322bbf48b17bc), [`a235051`](https://github.com/dotansimha/graphql-code-generator/commit/a23505180ac2f275a55ece27162ec9bfcdc52e03)]:\n  - @graphql-codegen/visitor-plugin-common@5.5.0\n  - @graphql-codegen/plugin-helpers@5.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for TypeScript (JavaScript)\nDESCRIPTION: Configures Jest (`jest.config.js`) to use `babel-jest` for transforming files ending with `.ts`. This allows Jest to run tests written in TypeScript by first transpiling them using the specified Babel configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: { '^.+\\.ts': 'babel-jest' }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency update for @graphql-codegen/visitor-plugin-common in version 4.1.6\nDESCRIPTION: This snippet records the update of the @graphql-codegen/visitor-plugin-common dependency to version 5.8.0 in version 4.1.6, ensuring compatibility and bug fixes related to common visitor plugins in the code generator.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`f6909d1`](https://github.com/dotansimha/graphql-code-generator/commit/f6909d1797c15b79a0afb7ec089471763a485bfc)]:\n  - @graphql-codegen/visitor-plugin-common@5.8.0\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests in Watch Mode (Shell)\nDESCRIPTION: Executes the Jest test runner in watch mode. Jest monitors source and test files for changes and automatically reruns relevant tests when modifications occur, providing rapid feedback during development.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx jest --watch\n```\n\n----------------------------------------\n\nTITLE: Configuring typescript-msw plugin in GraphQL Code Generator\nDESCRIPTION: Configuration setup for the typescript-msw plugin in codegen.ts. This shows how to integrate the plugin with the client preset to generate typed MSW mock functions for GraphQL operations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-msw.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'schema.graphql',\n  documents: ['src/**/*.tsx', 'src/**/*.ts', '!src/gql/**'],\n  generates: {\n    './src/gql/graphql.ts': {\n      preset: 'client',\n      plugins: ['typescript-msw']\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Running Code Generator in Watch Mode (Shell)\nDESCRIPTION: Executes GraphQL Code Generator in watch mode. This command continuously monitors schema and document files for changes and automatically reruns the code generation process when modifications are detected, streamlining development.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx graphql-codegen --watch\n```\n\n----------------------------------------\n\nTITLE: Add support for disabling suffixes on Enums in Codegen\nDESCRIPTION: This snippet indicates that support has been added to the code generator to disable suffixes on enum types, providing more control over the generated type names. The feature enhances flexibility for schema naming conventions, especially when enum suffixes may cause conflicts or unwanted naming patterns.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Configuring SWC Plugin with Vite\nDESCRIPTION: Example configuration for using the GraphQL Code Generator SWC plugin in a Vite project with React. Specifies artifactDirectory and gqlTagName options.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/swc-plugin/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react-swc'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react({\n      plugins: [\n        ['@graphql-codegen/client-preset-swc-plugin', { artifactDirectory: './src/gql', gqlTagName: 'graphql' }]\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching static props for plugin documentation (Next.js)\nDESCRIPTION: This snippet uses `pluginGetStaticProps` to fetch static properties for the plugin documentation page in a Next.js application. It determines the filename from the current module (`__filename`) to locate and retrieve the relevant plugin data for static site generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/import-types-preset.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\nexport const getStaticProps = pluginGetStaticProps(__filename)\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Plugin for Next.js\nDESCRIPTION: This JavaScript snippet configures the SWC plugin for Next.js within the `next.config.js` file.  It utilizes the `experimental.swcPlugins` option to integrate the `@graphql-codegen/client-preset-swc-plugin` with appropriate settings for the `artifactDirectory` and `gqlTagName` options to optimize the generated files.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/presets/preset-client.mdx#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst nextConfig = {\n  // ...\n  experimental: {\n    swcPlugins: [\n      ['@graphql-codegen/client-preset-swc-plugin', { artifactDirectory: './src/gql', gqlTagName: 'graphql' }]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Enums Using GraphQL SDL\nDESCRIPTION: This snippet shows a GraphQL schema defining a Query type with a favoriteColor field and an enum Color with RED and BLUE values. It serves as the schema basis for generating Flow resolver types.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/flow/flow-resolvers.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  favoriteColor: Color!\n}\n\nenum Color {\n  RED\n  BLUE\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Plugin Header Component in JSX\nDESCRIPTION: This JSX snippet renders the PluginHeader component, which likely displays a header or descriptive UI element relevant to the plugin. It forms part of the plugin’s user interface in a React environment.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/jsdoc.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<PluginHeader />\n```\n\n----------------------------------------\n\nTITLE: Assume Valid for Code Files - TypeScript\nDESCRIPTION: This snippet demonstrates skipping AST validation when loading schema from code files. Setting `assumeValid` to `true` skips validation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: [\n    {\n      './src/**/*.ts': {\n        assumeValid: true,\n      },\n    },\n  ],\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests (Shell)\nDESCRIPTION: Executes the Jest test runner to run all tests in the project. This command compiles and runs the test files (e.g., `.spec.ts`) using the configured Babel setup.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/api-testing.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx jest\n```\n\n----------------------------------------\n\nTITLE: Schema from GitHub - TypeScript\nDESCRIPTION: This snippet demonstrates how to load your schema file from a remote GitHub file by providing the GitHub path to your schema and token using the specified syntax.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: {\n    'github:user/repo#branchName:path/to/file.graphql':\n      { token: \"<YOUR GITHUB TOKEN>\" }\n  }\n};\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition - JavaScript\nDESCRIPTION: This snippet provides an example of a JavaScript file that exports a GraphQL schema using `graphql.buildSchema`. It defines a simple schema with a `MyType` and a `Query` type.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst { buildSchema } = require('graphql')\n\nmodule.exports = buildSchema(/* GraphQL */ `\n  type MyType {\n    foo: String!\n  }\n\n  type Query {\n    myType: MyType!\n  }\n`)\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Watch Mode via CLI in graphql-code-generator (Bash)\nDESCRIPTION: This Bash command disables watch mode explicitly when running the graphql-code-generator CLI, ensuring that the process completes once rather than continuing to monitor files for changes. The --watch=false flag overrides any watch setting in the YAML config. Useful for one-off code generation in scripts and CI environments. Requires CLI v2.8.1 or higher.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n$ graphql-codegen --watch=false\n\n```\n\n----------------------------------------\n\nTITLE: Adding Node dependencies to .gitignore\nDESCRIPTION: Updates .gitignore to exclude Node.js-related files from version control. This prevents unnecessary files like node_modules and yarn.lock from being committed to the repository.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/components/java-installation.mdx#_snippet_4\n\nLANGUAGE: gitignore\nCODE:\n```\nyarn.lock\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Codegen in watch mode\nDESCRIPTION: Command line example showing how to run the GraphQL Codegen CLI in watch mode, which will monitor files for changes and automatically re-run code generation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/graphql-codegen-cli/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn graphql-codegen --watch\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Function\nDESCRIPTION: This TypeScript code imports the `graphql` function from the generated client code. This function is used to define GraphQL operations as tagged template literals, providing type safety and auto-completion.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/vanilla-typescript.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from './graphql'\n```\n\n----------------------------------------\n\nTITLE: Require Node.js >= 16, Drop Node.js 14 Support\nDESCRIPTION: This major change updates the minimum Node.js version to 16 and drops support for Node.js 14. This ensures that the package is compatible with more recent Node.js features.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/gql-tag-operations/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Declaring GraphQL schema types with unions in SDL\nDESCRIPTION: Defines GraphQL schema types including Query, Book, BookResult, PayloadError, and a union type BookPayload encompassing BookResult and PayloadError. This schema is used for illustrating union type resolution strategies in GraphQL resolvers.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/resolvers/CHANGELOG.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  book(id: ID!): BookPayload!\n}\n\ntype Book {\n  id: ID!\n  isbn: String!\n}\n\ntype BookResult {\n  node: Book\n}\n\ntype PayloadError {\n  message: String!\n}\n\nunion BookPayload = BookResult | PayloadError\n```\n\n----------------------------------------\n\nTITLE: Handling null and undefined discriminations in useFragment with TypeScript\nDESCRIPTION: Demonstrates how the useFragment function's return type now differentiates between null and undefined inputs in TypeScript. The example shows two component functions accepting props typed as either null or undefined for a fragment type, with useFragment returning the fragment data or maintaining the original null/undefined type accordingly. This improves type safety by avoiding ambiguous return types from useFragment. The snippet requires TypeScript and the GraphQL code generator's fragment typing utilities.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/client/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction MyComponent(props: FragmentType<typeof MyFragment> | null) {\n  const data = useFragment(MyFragment, props)\n  // data is `MyFragment | null`\n}\n\nfunction MyComponent(props: FragmentType<typeof MyFragment> | undefined) {\n  const data = useFragment(MyFragment, props)\n  // data is `MyFragment | undefined`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Plugin with .swcrc\nDESCRIPTION: Example configuration for using the GraphQL Code Generator SWC plugin via .swcrc configuration file. Sets up the plugin in the jsc.experimental.plugins section.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/swc-plugin/README.md#_snippet_3\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  jsc: {\n    // ...\n    experimental: {\n      plugins: [\n        ['@graphql-codegen/client-preset-swc-plugin', { artifactDirectory: './src/gql', gqlTagName: 'graphql' }]\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Union Type\nDESCRIPTION: Defines a sample GraphQL schema including a Query type, object types (Book, BookResult, PayloadError), and a BookPayload union type composed of BookResult and PayloadError. This schema serves as the basis for demonstrating resolver implementation and code generator features.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  book(id: ID!): BookPayload!\n}\n\ntype Book {\n  id: ID!\n  isbn: String!\n}\n\ntype BookResult {\n  node: Book\n}\n\ntype PayloadError {\n  message: String!\n}\n\nunion BookPayload = BookResult | PayloadError\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Plugin with withHOC Option\nDESCRIPTION: This snippet showcases configuring the GraphQL Code Generator with the `typescript-react-apollo` plugin and disabling the generation of Higher-Order Components (HOCs) using the `withHOC` option. The value `'I'` appears to be a typo and should likely be `false` if the intention is to disable HOC generation. This snippet shows how to customize the plugin's output to exclude HOCs.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        withHOC: 'I'\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring All Fields for All Types (TypeScript)\nDESCRIPTION: Uses @*FieldNames with @*TypeNames to include every field of all types in the schema, establishing comprehensive field configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pattern = Pattern.forAllFieldNamesOfAllTypeNames()\nconsole.log(pattern) // \"@*TypeNames.@*FieldNames;\"\n```\n\n----------------------------------------\n\nTITLE: Adding Code Generation Script to package.json\nDESCRIPTION: JSON configuration for adding a GraphQL Code Generator command to the project's npm scripts section for easy execution.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/angular.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"generate\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using optionalDependencies for @parcel/watcher\nDESCRIPTION: This JSON snippet shows how to handle potential `@parcel/watcher` installation issues by adding it to the `optionalDependencies` section of the package.json. This allows NPM and Yarn to silently discard any build errors related to it.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-4-0.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@graphql-codegen/cli\": \"^1.0.0\",\n    \"@graphql-codegen/typescript\": \"^1.0.0\",\n    \"@graphql-codegen/typescript-operations\": \"^1.0.0\"\n  },\n  \"optionalDependencies\": {\n    \"@parcel/watcher\": \"^2.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using dependenciesMeta for @parcel/watcher\nDESCRIPTION: This JSON snippet demonstrates an alternative approach to handle `@parcel/watcher` installation issues, using `dependenciesMeta` to mark `@parcel/watcher` as optional. This approach offers more fine-grained control over optional dependencies.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-4-0.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@graphql-codegen/cli\": \"^1.0.0\",\n    \"@graphql-codegen/typescript\": \"^1.0.0\",\n    \"@graphql-codegen/typescript-operations\": \"^1.0.0\",\n    \"@parcel/watcher\": \"^2.1.0\"\n  },\n  \"dependenciesMeta\": {\n    \"@parcel/watcher\": {\n      \"optional\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Project with Yarn (Bash)\nDESCRIPTION: This snippet shows the command to build a TypeScript project using yarn.  It invokes the `build` script defined in the package.json file.  This typically involves the TypeScript compiler (tsc) to transpile TypeScript code into JavaScript.  The output is usually a set of JavaScript files ready to be executed.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/examples/typescript-esm/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# run tsc\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Simplify ResolversUnionTypes with generics\nDESCRIPTION: This code illustrates the use of generics to streamline the definition of union resolver types in GraphQL resolvers. By employing a generic parameter, the approach reduces redundancy and leverages TypeScript's type inference, improving maintainability for complex schema types involving unions.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nUse generic to simplify ResolversUnionTypes\n\nThis follows the `ResolversInterfaceTypes`'s approach where the `RefType` generic is used to refer back to `ResolversTypes` or `ResolversParentTypes` in cases of nested Union types\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Resolver Types (Post-Fix #9206)\nDESCRIPTION: Shows the corrected generated TypeScript types for resolvers after the fix in PR #9206. A new type, `ResolversUnionParentTypes`, is introduced to hold the parent type definitions for unions. The definition of `ResolversUnionTypes` is updated to correctly reference `ResolversParentTypes[\"Book\"]` for the `result` field within `BookResult`. `ResolversParentTypes` is updated to reference `ResolversUnionParentTypes` for the union type definition.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResolversUnionTypes = {\n  BookPayload: (Omit<BookResult, 'result'> & { result?: Maybe<ResolversParentTypes['Book']> }) | StandardError\n}\n\n// ... and the reference is changed in ResolversParentTypes:\nexport type ResolversParentTypes = {\n  // ... other fields\n  BookPayload: ResolversUnionParentTypes['BookPayload']\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Directives Using DocumentTransform\nDESCRIPTION: This JavaScript code snippet demonstrates how to remove a specific directive (`@localOnlyDirective`) from GraphQL documents using a `documentTransform`.  The code uses the `graphql` library's `visit` function to traverse the document's Abstract Syntax Tree (AST). It modifies the AST by returning `null` for the `Directive` node when the directive's name matches the target.  It requires the `graphql` library and assumes the existence of a `@localOnlyDirective` directive within the GraphQL schema.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/presets/graphql-modules/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\nimport { visit } from 'graphql'\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:4000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      documentTransforms: [\n        {\n          transform: ({ documents }) => {\n            return documents.map(documentFile => {\n              documentFile.document = visit(documentFile.document, {\n                Directive: {\n                  leave(node) {\n                    if (node.name.value === 'localOnlyDirective') return null\n                  }\n                }\n              })\n              return documentFile\n            })\n          }\n        }\n      ]\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: TypeScript Resolver Implementation Using Custom Directive Mapping\nDESCRIPTION: Provides a TypeScript example of a resolver implementation using the types generated by the GraphQL Code Generator that respects the custom directiveArgumentAndInputFieldMappings. In this example, the 'user' query resolver's argument 'id' is typed as a 'number' due to the @asNumber directive mapping. This snippet depends on previously generated types (e.g., QueryResolvers) and assumes the code generation configuration includes the custom directives mapping.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query: QueryResolvers = {\n  user(_, args) {\n    // args.id is of type 'number'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Svelte/Apollo Projects - GraphQL\nDESCRIPTION: This snippet defines the core GraphQL schema that will be used for code generation and querying in Svelte/SvelteKit applications. It introduces 'Author' and 'Post' types, as well as a root 'Query' type, supporting relationships and query parameters. The schema acts as the contract for subsequent code generation; ensure it is accessible to the codegen configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/svelte.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  firstName: String!\n  lastName: String!\n  posts(findTitle: String): [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String!\n  author: Author\n}\n\ntype Query {\n  posts: [Post]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generated Type with Defer Fragment in TypeScript\nDESCRIPTION: This snippet shows how the generated type for a query including a deferred fragment will be structured. The type definition indicates that the fragment is _incremental_, meaning it may not be available immediately, and the `$` sign represents a fragment reference.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n// gql/graphql.ts\nexport type GetUserQuery = { __typename?: 'Query'; id: string; name: string } & ({ \n  __typename?: 'Query'\n} & {\n  ' $fragmentRefs'?: { OrdersFragment: Incremental<OrdersFragment> }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Defining Base, User, and Book Schemas (GraphQL)\nDESCRIPTION: This code snippet shows sample contents for base, user, and book GraphQL schema modules. It defines a root Query and Mutation type, a User type with its fields, and a Book type with associated queries and mutations. These schemas enable codegen to generate strongly-typed resolvers and schema artifacts per domain.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# src/schema/base/schema.graphql\ntype Query\ntype Mutation\n\n# src/schema/user/schema.graphql\nextend type Query {\n  user(id: ID!): User\n}\ntype User {\n  id: ID!\n  fullName: String!\n  isAdmin: Boolean!\n}\n\n# src/schema/book/schema.graphql\nextend type Query {\n  book(id: ID!): Book\n}\nextend type Mutation {\n  markBookAsRead(id: ID!): Book!\n}\ntype Book {\n  id: ID!\n  isbn: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting default ID scalar input type in version 4.0.1\nDESCRIPTION: In version 4.0.1, the default ID scalar input type was reverted back to 'string' from 'string | number' due to compatibility issues with server plugins. This change simplifies scalar handling by keeping it as a string type.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#9497](https://github.com/dotansimha/graphql-code-generator/pull/9497) [`2276708d0`](https://github.com/dotansimha/graphql-code-generator/commit/2276708d0ea2aab4942136923651226de4aabe5a) Thanks [@eddeee888](https://github.com/eddeee888)! - Revert default ID scalar input type to string\n\n  We changed the ID Scalar input type from `string` to `string | number` in the latest major version of `typescript` plugin. This causes issues for server plugins (e.g. typescript-resolvers) that depends on `typescript` plugin. This is because the scalar type needs to be manually inverted on setup which is confusing.\n```\n\n----------------------------------------\n\nTITLE: Dependency update for @graphql-codegen/visitor-plugin-common in version 4.0.9\nDESCRIPTION: This patch updates @graphql-codegen/visitor-plugin-common to version 5.3.1, ensuring bug fixes and version stability.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`79fee3c`](https://github.com/dotansimha/graphql-code-generator/commit/79fee3cada20d683d250aad5aa5fef9d6ed9f4d2)]:\n  - @graphql-codegen/visitor-plugin-common@5.3.1\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Schema with Query and Mutation\nDESCRIPTION: Sample GraphQL schema with a GetUser query that fetches user details by ID and a SetUsername mutation that updates a user's name.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-msw.mdx#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetUser($id: ID!) {\n  GetUser(id: $id) {\n    name\n    email\n    id\n  }\n}\n\nmutation SetUsername($id: ID!, $name: String!) {\n  SetUsername(id: $id, name: $name) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency update for @graphql-codegen/visitor-plugin-common in version 4.1.4\nDESCRIPTION: Version 4.1.4 reflects an update to @graphql-codegen/visitor-plugin-common at version 5.7.0, maintaining dependency freshness and bug fixes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`6d7c1d7`](https://github.com/dotansimha/graphql-code-generator/commit/6d7c1d7c0a4662acdc0efafd4234229ad0a8dd3c)]:\n  - @graphql-codegen/visitor-plugin-common@5.7.0\n```\n\n----------------------------------------\n\nTITLE: Starting the development server with Yarn for Apollo Client Vite SWR setup\nDESCRIPTION: This snippet shows the command to start the development environment using Yarn, which runs the Vite dev server. It is part of a setup for a project integrating Apollo Client with Vite and SWR, emphasizing the use of the SWC plugin for optimized bundle size.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/examples/react/apollo-client-swc-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Output for Mapped Field - TypeScript\nDESCRIPTION: Illustrates the TypeScript model produced when a field is mapped to an object property path using @map. Inputs: N/A (output from code generator). The 'credentials' object is nested within the output reflecting the mapping. Limitations: Structure must correspond to the mapping in the schema.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UserDbObject {\n  credentials: {\n    username: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Generator for High-Order Components (TypeScript)\nDESCRIPTION: This `codegen.ts` configuration alters the setup to generate React High-Order Components (HOCs) (deprecated in Apollo Client v3) in addition to Hooks. The `withHOC: true` option is included in the `typescript-react-apollo` plugin configuration.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-react-apollo.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'YOUR_SCHEMA_HERE',\n  documents: './src/**/*.graphql',\n  generates: {\n    './generated-types.ts': {\n      plugins: ['typescript', 'typescript-operations', 'typescript-react-apollo'],\n      config: {\n        withHOC: true\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Modeling Unions with @union Directive in GraphQL - GraphQL\nDESCRIPTION: Demonstrates how to use the @union directive to describe a GraphQL union with a discriminator field for MongoDB model output. Each type in the union is marked as an entity. Inputs: Types and union definitions. Limitations: Discriminator field is required. Outputs: Used to generate a TypeScript union with tagging.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mongodb.mdx#_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype A @entity {\n  fieldA: String @column\n}\n\ntype B @entity {\n  fieldB: String @column\n}\n\nunion PossibleType @union(discriminatorField: \"entityType\") = A | B\n```\n\n----------------------------------------\n\nTITLE: Ignoring Generator/Dependency Folders in Git\nDESCRIPTION: Entry for a `.gitignore` file to exclude folders created by dependency managers (`node_modules/`) and possibly generator-related artifacts from version control. Essential for a clean project setup.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/flutter-freezed.mdx#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# graphql-code-generator related\nnode_modules/\n```\n\n----------------------------------------\n\nTITLE: Defining API URL and Token Constants in TypeScript\nDESCRIPTION: This short TypeScript snippet defines two exported constants for use in API requests: 'API_URL' and 'PUBLIC_TOKEN'. Intended for use in custom loader files that fetch schemas from remote endpoints. Requires a separate custom loader script to use these constants.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/config-reference/schema-field.mdx#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const API_URL = 'https://example.com/graphql'\nexport const PUBLIC_TOKEN = '12345'\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Resolver Map Export (TypeScript)\nDESCRIPTION: This file is generated by the server preset to aggregate and export all typed operation and object resolvers for schema modules. It imports resolver implementations, organizes them by Query, Mutation, and type categories, and creates the root resolver object used by GraphQL servers. Do not edit this file manually; it is overwritten on each codegen run.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/* This file was automatically generated. DO NOT UPDATE MANUALLY. */\nimport type { Resolvers } from './types.generated'\nimport { book as Query_book } from './book/resolvers/Query/book'\nimport { markBookAsRead as Mutation_markBookAsRead } from './book/resolvers/Mutation/markBookAsRead'\nimport { Book } from './book/resolvers/Book'\nimport { user as Query_user } from './user/resolvers/Query/user'\nimport { User } from './user/resolvers/User'\nexport const resolvers: Resolvers = {\n  Query: {\n    book: Query_book,\n    user: Query_user\n  },\n  Mutation: {\n    markBookAsRead: Mutation_markBookAsRead\n  },\n\n  Book: Book,\n  User: User\n}\n```\n\n----------------------------------------\n\nTITLE: Shell script to run GraphQL code generation with Yarn\nDESCRIPTION: Adds a build step in Gradle to automatically run the GraphQL code generator before compiling the project. Executes 'yarn graphql-codegen' to generate Java classes based on the configuration, ensuring code is up-to-date during each build.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/java/java-apollo-android.mdx#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\npreBuild.doFirst {\n  def proc = \"yarn graphql-codegen\".execute()\n  proc.waitForProcessOutput(System.out, System.err)\n}\n\nbuild.dependsOn preBuild\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Handler Signature for Oclif Commands in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for a QueryHandler function required by typescript-oclif-generated CLI commands. The handler receives an object with the oclif command instance, a GraphQL query string, and optional variables, and returns any result type. No external dependencies are strictly required, but the function operates within the oclif command context. Expected usage is to process and execute GraphQL requests and possibly handle CLI-specific logic like output or error handling.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-oclif.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Command } from '@oclif/command'\n\ninterface QueryHandlerProps {\n  command: Command\n  query: string\n  variables?: Record<string, any>\n}\n\ntype QueryHandler = (props: QueryHandlerProps) => any\n\n```\n\n----------------------------------------\n\nTITLE: Sample Generated File Structure for Schema Modules (Text)\nDESCRIPTION: This folder structure shows the output of running the code generator with the server preset. It includes domain-level resolver implementations, fully generated TypeScript artifacts, and operation-specific resolver files. Generated files are clearly marked to separate safe-to-edit code from code that should not be manually modified.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/guides/graphql-server-apollo-yoga-with-server-preset.mdx#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n├── src/\n│   ├── schema/\n│   │   ├── base/\n│   │   │   ├── schema.graphql\n│   │   ├── user/\n│   │   │   ├── resolvers/\n│   │   │   │   ├── Query/\n│   │   │   │   │   ├── user.ts            # Generated, changes not overwritten by codegen\n│   │   │   │   ├── User.ts                # Generated, changes not overwritten by codegen\n│   │   │   ├── schema.graphql\n│   │   ├── book/\n│   │   │   ├── resolvers/\n│   │   │   │   ├── Query/\n│   │   │   │   │   ├── book.ts            # Generated, changes not overwritten by codegen\n│   │   │   │   ├── Mutation/\n│   │   │   │   │   ├── markBookAsRead.ts  # Generated, changes not overwritten by codegen\n│   │   │   │   ├── Book.ts                # Generated, changes not overwritten by codegen\n│   │   │   ├── schema.graphql\n│   │   ├── resolvers.generated.ts         # Entirely generated by codegen\n│   │   ├── typesDefs.generated.ts         # Entirely generated by codegen\n│   │   ├── types.generated.ts             # Entirely generated by codegen\n```\n\n----------------------------------------\n\nTITLE: Installing the typescript-compatibility plugin for backward compatibility\nDESCRIPTION: This shell script command demonstrates installing the 'typescript-compatibility' plugin via npm, enabling backward compatibility for previously used plugins, especially useful during phased migrations or to support legacy codebases.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/migration/from-0-18.mdx#_snippet_3\n\nLANGUAGE: Shell Script\nCODE:\n```\nnpm i -D @graphql-codegen/typescript-compatibility\n```\n\n----------------------------------------\n\nTITLE: Configuring `@graphql-codegen/time` Plugin (Legacy String Format) in YAML\nDESCRIPTION: Shows the legacy string-based configuration method for the `@graphql-codegen/time` plugin within a GraphQL Code Generator configuration file (e.g., `codegen.yml`). This approach directly assigns the desired time format string to the plugin name. This format was deprecated in version 2.0.0.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/time/CHANGELOG.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - time: 'DD-MM-YYYY'\n```\n\n----------------------------------------\n\nTITLE: Validation Function to Enforce Configuration Constraints in GraphQL Plugin\nDESCRIPTION: This snippet demonstrates an enhanced plugin object including a `validate` function that checks for the presence of a required `mustHave` property in the plugin's configuration object. If validation fails, it throws an Error, ensuring correct plugin setup before execution.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/docs/custom-codegen/validate-configuration.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugin(schema, documents, config, info) {\n    const typesMap = schema.getTypeMap()\n\n    return Object.keys(typesMap).join('\\n')\n  },\n  validate(schema, documents, config, outputFile, allPlugins) {\n    if (!config.mustHave) {\n      throw new Error(`You must specify \"mustHave\" in my plugin configuration!`)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom DocumentTransform as a Separate Module JavaScript\nDESCRIPTION: This JavaScript snippet exports a custom document transform as a module with a `transform` function. The function receives documents and returns modified documents after applying changes. Use this file to define reusable and modular document transformations that can be referenced in the Codegen configuration by file path.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: ({ documents }) => {\n    // Make some changes to the documents\n    return documents\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Plugin Documentation Components in JSX (JavaScript/React)\nDESCRIPTION: This snippet renders the 'PluginHeader' and 'PluginApiDocs' components inside a React functional component or page, forming the main UI for documentation. It assumes the presence of these components in the local project and is typically used in the context of Next.js or React app routing.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-mock-data.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PluginHeader />\n<PluginApiDocs />\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Components in JSX\nDESCRIPTION: This JSX snippet renders the imported 'PluginHeader' and 'PluginApiDocs' React components. These components display the header and the main API documentation content for the plugin page, respectively.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-fabbrica.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PluginHeader />\n<PluginApiDocs />\n```\n\n----------------------------------------\n\nTITLE: Exporting Next.js Page Component and Static Props in JavaScript\nDESCRIPTION: This snippet re-exports the IndexPage component and the getStaticProps function from a sibling index-page module, enabling Next.js to statically generate and serve the home page. It requires that the target file '../components/index-page' exports both IndexPage and getStaticProps, following Next.js's conventions for static generation. No external dependencies are needed beyond Next.js; expected inputs/outputs are handled internally by the Next.js framework through page routing and data fetching. Only modules following Next.js conventions for component and static function export are compatible.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport { IndexPage as default, getStaticProps } from '../components/index-page'\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GraphQL Scalars Mapping in Typescript\nDESCRIPTION: This snippet shows how the code generator historically created a simple mapping of GraphQL scalar types to Typescript primitives. No explicit input/output distinction is made: the ID scalar is always mapped to string. No dependencies beyond Typescript are required. The exported type maps GraphQL scalar types to Typescript equivalents, and is later reused in GraphQL type representations.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/visitor-plugin-common/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Scalars = {\n  ID: string\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dependency update for visitor plugin common in version 4.0.6\nDESCRIPTION: Version 4.0.6 updates @graphql-codegen/visitor-plugin-common to version 5.1.0, following patch management practices.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`920b443`](https://github.com/dotansimha/graphql-code-generator/commit/920b443a401b8cc4811f64ec5b25fc7b4ae32b53), [`ed9c205`](https://github.com/dotansimha/graphql-code-generator/commit/ed9c205d15d7f14ed73e54aecf40e4fad5664e9d)]:\n  - @graphql-codegen/visitor-plugin-common@5.1.0\n```\n\n----------------------------------------\n\nTITLE: Dependency update for @graphql-codegen/visitor-plugin-common in version 4.1.2\nDESCRIPTION: In version 4.1.2, the dependency is updated to version 5.6.0, ensuring ongoing patch management.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`1617e3c`](https://github.com/dotansimha/graphql-code-generator/commit/1617e3cf38f3059cc5ea88b540033f521f03725a), [`fa64fbf`](https://github.com/dotansimha/graphql-code-generator/commit/fa64fbf8a44e1cee7ae17806dcd178dc7350c4ba)]:\n  - @graphql-codegen/visitor-plugin-common@5.6.0\n```\n\n----------------------------------------\n\nTITLE: Dependency update for visitor plugin common in version 4.0.3\nDESCRIPTION: This update in version 4.0.3 updates @graphql-codegen/visitor-plugin-common to 4.1.1 to include recent fixes and improvements.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#9811](https://github.com/dotansimha/graphql-code-generator/pull/9811) [`d8364e045`](https://github.com/dotansimha/graphql-code-generator/commit/d8364e045a46ca6e8173583b5108d161c6832975) Thanks [@saihaj](https://github.com/saihaj)! - dependencies updates:\n  - Updated dependency [`tslib@~2.6.0` ↗︎](https://www.npmjs.com/package/tslib/v/2.6.0) (from `~2.5.0`, in `dependencies`)\n- Updated dependencies [[`d8364e045`](https://github.com/dotansimha/graphql-code-generator/commit/d8364e045a46ca6e8173583b5108d161c6832975), [`d8364e045`](https://github.com/dotansimha/graphql-code-generator/commit/d8364e045a46ca6e8173583b5108d161c6832975), [`d8364e045`](https://github.com/dotansimha/graphql-code-generator/commit/d8364e045a46ca6e8173583b5108d161c6832975), [`d8364e045`](https://github.com/dotansimha/graphql-code-generator/commit/d8364e045a46ca6e8173583b5108d161c6832975), [`d8364e045`](https://github.com/dotansimha/graphql-code-generator/commit/d8364e045a46ca6e8173583b5108d161c6832975)]:\n  - @graphql-codegen/plugin-helpers@5.0.2\n  - @graphql-codegen/schema-ast@4.0.1\n  - @graphql-codegen/visitor-plugin-common@4.1.0\n```\n\n----------------------------------------\n\nTITLE: Dependency update for @graphql-codegen/visitor-plugin-common in version 4.1.3\nDESCRIPTION: This update in version 4.1.3 applies the @graphql-codegen/visitor-plugin-common package at version 5.6.1, providing further stability fixes and feature improvements.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`60dd72f`](https://github.com/dotansimha/graphql-code-generator/commit/60dd72fb103fd7fd70b4e1def98da29588865517)]:\n  - @graphql-codegen/visitor-plugin-common@5.6.1\n```\n\n----------------------------------------\n\nTITLE: Override All Names with lowerCase Naming Convention\nDESCRIPTION: This code snippet shows how to override the default naming convention for all generated names to `lowerCase`.  The `namingConvention` option is set to `'change-case-all#lowerCase'`, which transforms all generated names to lowercase.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/typescript/typescript-apollo-next.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  // ...\n  generates: {\n    'path/to/file': {\n      // plugins...\n      config: {\n        namingConvention: 'change-case-all#lowerCase'\n      }\n    }\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Dependency update for @graphql-codegen/visitor-plugin-common in version 4.0.8\nDESCRIPTION: Version 4.0.8 sees the visitor plugin common upgraded to 5.3.0, incorporating recent fixes.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/typescript/typescript/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`808ada5`](https://github.com/dotansimha/graphql-code-generator/commit/808ada595d83d39cad045da5824cac6378e9eca3), [`14ce39e`](https://github.com/dotansimha/graphql-code-generator/commit/14ce39e41dfee38c652be736664177fa2b1df421)]:\n  - @graphql-codegen/visitor-plugin-common@5.3.0\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Plugin Documentation Components in JSX\nDESCRIPTION: Imports the necessary components for rendering plugin documentation and sets up static props generation for the time plugin page. The code establishes the framework for displaying plugin information and API documentation.\nSOURCE: https://github.com/dotansimha/graphql-code-generator/blob/master/website/src/pages/plugins/other/time.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PluginApiDocs, PluginHeader } from '@/components/plugin'\nimport { pluginGetStaticProps } from '@/lib/plugin-get-static-props'\nexport const getStaticProps = pluginGetStaticProps(__filename)\n```"
  }
]