[
  {
    "owner": "jupyter-widgets",
    "repo": "ipywidgets",
    "content": "TITLE: Creating a Float Slider Widget in ipywidgets\nDESCRIPTION: Creates a FloatSlider widget with decimal values. Configuration includes initial value, range, step size, description, and display formatting with horizontal orientation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatSlider(\n    value=7.5,\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.1f',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Widget in ipywidgets\nDESCRIPTION: Creates an Image widget for displaying binary image data. The example loads image data from a file and configures display dimensions for the widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfile = open(\"images/WidgetArch.png\", \"rb\")\nimage = file.read()\nwidgets.Image(\n    value=image,\n    format='png',\n    width=300,\n    height=400,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining EmailView Attribute in TypeScript\nDESCRIPTION: This snippet adds a private _emailInput attribute to the EmailView class to store the input element.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class EmailView extends DOMWidgetView {\n  private _emailInput: HTMLInputElement;\n  \n  render() {\n     // .....\n  }\n  \n  // .....\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Widget in IPyWidgets\nDESCRIPTION: Creates a Button widget with customizable properties like description, disabled status, button style, tooltip, and icon. The icon can be any FontAwesome icon name without the fa- prefix.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nbutton = widgets.Button(\n    description='Click me',\n    disabled=False,\n    button_style='', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Click me',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\nbutton\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Plot Dashboard with 2x2 Layout\nDESCRIPTION: Builds a complete application using TwoByTwoLayout with sliders controlling a bqplot visualization, demonstrating widget linking for interactive data exploration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import FloatSlider\n\nmax_slider = FloatSlider(min=0, max=10, default_value=2, description=\"Max: \",\n                         layout=Layout(width='auto', height='auto'))\nmin_slider = FloatSlider(min=-1, max=10, description=\"Min: \",\n                         layout=Layout(width='auto', height='auto'))\napp = TwoByTwoLayout(top_left=min_slider,\n                     bottom_left=max_slider, \n                     bottom_right=fig,\n                     align_items=\"center\", \n                     height='700px')\n\njslink((y_sc, 'max'), (max_slider, 'value'))\njslink((y_sc, 'min'), (min_slider, 'value'))\njslink((min_slider, 'max'), (max_slider, 'value'))\njslink((max_slider, 'min'), (min_slider, 'value'))\n\nmax_slider.value = 1.5\napp\n```\n\n----------------------------------------\n\nTITLE: Creating a File Upload Widget\nDESCRIPTION: Creates a FileUpload widget that allows uploading files into memory in the kernel. It can be configured to accept specific file types and multiple file uploads.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FileUpload(\n    accept='',  # Accepted file extension e.g. '.txt', '.pdf', 'image/*', 'image/*,.pdf'\n    multiple=False  # True to accept multiple files upload else False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Integer Text Input in ipywidgets\nDESCRIPTION: Creates an IntText widget for entering integer values without upper or lower bounds. Unlike BoundedIntText, this widget allows any integer value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwidgets.IntText(\n    value=7,\n    description='Any:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Integer Slider Widget in ipywidgets\nDESCRIPTION: Creates an IntSlider widget with various configuration options including value, range, step size, description, and display formatting. Demonstrates how to configure orientation and readout options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwidgets.IntSlider(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Naive Datetime Picker Widget\nDESCRIPTION: Creates a NaiveDatetimePicker widget for selecting timezone-unaware datetimes. This is useful when working with other naive datetime objects in Python to avoid comparison issues.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nwidgets.NaiveDatetimePicker(description='Pick a Time')\n```\n\n----------------------------------------\n\nTITLE: Button Click Event Handler Implementation\nDESCRIPTION: Demonstrates how to create a button widget and handle click events using an output widget to display results.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display\nbutton = widgets.Button(description=\"Click Me!\")\noutput = widgets.Output()\n\ndisplay(button, output)\n\ndef on_button_clicked(b):\n    with output:\n        print(\"Button clicked.\")\n\nbutton.on_click(on_button_clicked)\n```\n\n----------------------------------------\n\nTITLE: Using interact as a decorator\nDESCRIPTION: Demonstrates using interact as a decorator for a function with multiple arguments.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@interact(x=True, y=1.0)\ndef g(x, y):\n    return (x, y)\n```\n\n----------------------------------------\n\nTITLE: Basic Widget Creation and Display Example\nDESCRIPTION: This code demonstrates the minimal example of creating and displaying a FloatSlider widget in a Jupyter notebook, showing the basic pattern for widget usage.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import FloatSlider\nfrom IPython.display import display\nslider = FloatSlider()\ndisplay(slider)\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Form Layout with ipywidgets\nDESCRIPTION: Implementation of a reactive form using VBox and HBox layouts. The form uses space-between justification for each row and includes various input widgets like sliders, dropdowns, and text areas with associated labels.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom ipywidgets import Layout, Button, Box, FloatText, Textarea, Dropdown, Label, IntSlider\n\nform_item_layout = Layout(\n    display='flex',\n    flex_flow='row',\n    justify_content='space-between'\n)\n\nform_items = [\n    Box([Label(value='Age of the captain'), IntSlider(min=40, max=60)], layout=form_item_layout),\n    Box([Label(value='Egg style'), \n         Dropdown(options=['Scrambled', 'Sunny side up', 'Over easy'])], layout=form_item_layout),\n    Box([Label(value='Ship size'), \n         FloatText()], layout=form_item_layout),\n    Box([Label(value='Information'), \n         Textarea()], layout=form_item_layout)\n]\n\nform = Box(form_items, layout=Layout(\n    display='flex',\n    flex_flow='column',\n    border='solid 2px',\n    align_items='stretch',\n    width='50%'\n))\nform\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuous Update Control\nDESCRIPTION: Demonstrates how to use continuous_update parameter with FloatSlider to restrict executions to mouse release events.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ninteract(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5, continuous_update=False));\n```\n\n----------------------------------------\n\nTITLE: Linking Two Different Widgets\nDESCRIPTION: Creates and displays two different widgets (FloatText and FloatSlider) and links their values using jslink. This synchronizes the values so changing one will update the other.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\na = widgets.FloatText()\nb = widgets.FloatSlider()\ndisplay(a,b)\n\nmylink = widgets.jslink((a, 'value'), (b, 'value'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropdown Selection Widget in ipywidgets\nDESCRIPTION: Creates a Dropdown widget for selecting a single option from a list. The options parameter accepts a simple list of strings or a list of (label, value) tuples for custom display values.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Dropdown(\n    options=['1', '2', '3'],\n    value='2',\n    description='Number:',\n    disabled=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing ipywidgets Library\nDESCRIPTION: Imports the ipywidgets library with the alias 'widgets' for use in Jupyter notebooks.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropdown with Label-Value Pairs in ipywidgets\nDESCRIPTION: Creates a Dropdown widget using label-value pairs, where the displayed text differs from the actual value returned when selected. This allows for user-friendly labels with meaningful values.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Dropdown(\n    options=[('One', 1), ('Two', 2), ('Three', 3)],\n    value=2,\n    description='Number:',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label with Math in ipywidgets\nDESCRIPTION: Creates a horizontal box containing a Label widget with mathematical notation and a FloatSlider. Demonstrates using Label for custom control descriptions with styled text.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nwidgets.HBox([widgets.Label(value=\"The $m$ in $E=mc^2$:\"), widgets.FloatSlider()])\n```\n\n----------------------------------------\n\nTITLE: Converting Uploaded Files to Pandas DataFrames\nDESCRIPTION: Shows how to convert a CSV file uploaded through the FileUpload widget into a Pandas DataFrame using BytesIO.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport pandas as pd\npd.read_csv(io.BytesIO(uploaded_file.content))\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Button in ipywidgets\nDESCRIPTION: Creates a ToggleButton widget that acts as a boolean control with two states. Includes configuration for button styling, tooltip, and icon support using FontAwesome icons.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nwidgets.ToggleButton(\n    value=False,\n    description='Click me',\n    disabled=False,\n    button_style='', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Description',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Picker Widget\nDESCRIPTION: Creates a ColorPicker widget that allows users to select a color. The widget can be configured to show a concise or expanded picker interface.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nwidgets.ColorPicker(\n    concise=False,\n    description='Pick a color',\n    value='blue',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Custom UI Layout with interactive_output\nDESCRIPTION: Shows how to create custom widget layouts using interactive_output for more flexible UI control.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\na = widgets.IntSlider()\nb = widgets.IntSlider()\nc = widgets.IntSlider()\nui = widgets.HBox([a, b, c])\ndef f(a, b, c):\n    print((a, b, c))\n\nout = widgets.interactive_output(f, {'a': a, 'b': b, 'c': c})\n\ndisplay(ui, out)\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Multiple Views of a Single Widget\nDESCRIPTION: This code creates an integer slider widget and displays it twice in the notebook, demonstrating how multiple views can be connected to the same underlying widget model.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import *\nfrom IPython.display import display\nw = IntSlider()\ndisplay(w, w)\n```\n\n----------------------------------------\n\nTITLE: Creating a GridspecLayout with Spanning Cells\nDESCRIPTION: Shows how to make widgets span multiple rows and columns in a GridspecLayout using slice notation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ngrid = GridspecLayout(4, 3, height='300px')\ngrid[:3, 1:] = create_expanded_button('One', 'success')\ngrid[:, 0] = create_expanded_button('Two', 'info')\ngrid[3, 1] = create_expanded_button('Three', 'warning')\ngrid[3, 2] = create_expanded_button('Four', 'danger')\ngrid\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Image Editor with ipywidgets\nDESCRIPTION: Uses ipywidgets to create an interactive interface for the 'edit_image' function, allowing real-time adjustment of blur and color balance parameters.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlims = (0.0,1.0,0.01)\ninteract(edit_image, image=fixed(i), sigma=(0.0,10.0,0.1), R=lims, G=lims, B=lims);\n```\n\n----------------------------------------\n\nTITLE: Creating IntSlider Widget in Python with IPyWidgets\nDESCRIPTION: Creates an integer slider widget with a value of 7 in a range from 0 to 10. The slider includes a description label and various configuration options like step size, orientation, and readout format.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\n\nwidgets.IntSlider(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Weather Map Tile Layers\nDESCRIPTION: Creates TileLayer objects for temperature and precipitation maps using the OpenWeatherMap API, specifying zoom levels and attribution.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ntemp = TileLayer(min_zoom=1, max_zoom=18, url='https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png?appid='+OWM_API_KEY, name='owm', attribute='me')\nprecipitation = TileLayer(min_zoom=1, max_zoom=18, url='https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid='+OWM_API_KEY, name='owm', attribute='me')\n```\n\n----------------------------------------\n\nTITLE: Creating a GridBox Container Widget\nDESCRIPTION: Creates a GridBox container that arranges widgets in a two-dimensional grid using CSS Grid layout. This example creates a 3-column grid with auto-flow rows.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nitems = [widgets.Label(str(i)) for i in range(8)]\nwidgets.GridBox(items, layout=widgets.Layout(grid_template_columns=\"repeat(3, 100px)\"))\n```\n\n----------------------------------------\n\nTITLE: Creating FileUpload Widget in Python with IPyWidgets\nDESCRIPTION: Creates a file upload widget that allows users to select and upload files. This widget can be configured to accept specific file types and can handle either single or multiple file uploads.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FileUpload(\n    accept='',  # Accepted file extension e.g. '.txt', '.pdf', 'image/*', 'image/*,.pdf'\n    multiple=False  # True to accept multiple files upload else False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SelectMultiple Widget in Python with IPyWidgets\nDESCRIPTION: Creates a multi-selection list box that allows choosing multiple options simultaneously. This widget offers three fruit options with 'Oranges' pre-selected and supports keyboard-based navigation and selection.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nwidgets.SelectMultiple(\n    options=['Apples', 'Oranges', 'Pears'],\n    value=['Oranges'],\n    #rows=10,\n    description='Fruits',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an IntsInput Widget\nDESCRIPTION: Creates an IntsInput widget for creating and managing a list of integer numbers. Supports range constraints with min/max values and custom number formatting.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nintsinput = widgets.IntsInput(\n    value=[1, 4, 3243],\n    min=0,\n    max=1000000,\n    format='$,d'\n)\nintsinput\n```\n\n----------------------------------------\n\nTITLE: Implementing an Email widget in Python\nDESCRIPTION: Python code defining a custom Email widget class that inherits from DOMWidget and ValueWidget with synchronized traits.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import DOMWidget, ValueWidget, register\nfrom traitlets import Unicode, Bool, validate, TraitError\n\nfrom ._frontend import module_name, module_version\n\n\n@register\nclass Email(DOMWidget, ValueWidget):\n    _model_name = Unicode('EmailModel').tag(sync=True)\n    _model_module = Unicode(module_name).tag(sync=True)\n    _model_module_version = Unicode(module_version).tag(sync=True)\n\n    _view_name = Unicode('EmailView').tag(sync=True)\n    _view_module = Unicode(module_name).tag(sync=True)\n    _view_module_version = Unicode(module_version).tag(sync=True)\n\n    value = Unicode('example@example.com').tag(sync=True)\n```\n\n----------------------------------------\n\nTITLE: Converting Uploaded Text Files to Strings\nDESCRIPTION: Shows how to decode the content of a text file uploaded through the FileUpload widget into a string using the codecs module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nimport codecs\ncodecs.decode(uploaded_file.content, encoding=\"utf-8\")\n#=> 'This is the content of example.txt.\\n'\n```\n\n----------------------------------------\n\nTITLE: Creating Combobox Widget in Python with IPyWidgets\nDESCRIPTION: Creates a combination of text input and dropdown selection. This widget allows selecting from predefined options or entering custom text, with the ensure_option parameter enforcing selection of valid options only.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Combobox(\n    # value='John',\n    placeholder='Choose Someone',\n    options=['Paul', 'John', 'George', 'Ringo'],\n    description='Combobox:',\n    ensure_option=True,\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Using Time and Date Pickers in ipywidgets 8.0\nDESCRIPTION: Demonstrates how to use the new TimePicker and DatetimePicker widgets introduced in ipywidgets 8.0. These widgets allow users to select time and date/time values respectively.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import VBox, TimePicker, DatetimePicker\nVBox([\n  TimePicker(description='Time'),\n  DatetimePicker(description='Date/Time')\n])\n```\n\n----------------------------------------\n\nTITLE: Using Debounce Decorator with IPython Widgets in Python\nDESCRIPTION: This example demonstrates how to use the debounce decorator with an IntSlider widget. The text box will only update after the slider has paused for about 0.2 seconds, reducing the frequency of updates during rapid changes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nslider = widgets.IntSlider()\ntext = widgets.IntText()\n\n@debounce(0.2)\ndef value_changed(change):\n    text.value = change.new\nslider.observe(value_changed, 'value')\n\nwidgets.VBox([slider, text])\n```\n\n----------------------------------------\n\nTITLE: Jupyter Widgets Dropdown Component Specification\nDESCRIPTION: Attribute specifications for DropdownModel and DropdownView components from @jupyter-widgets/controls. Defines properties for dropdown selection widget including styling, labels, and interaction options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.1.0'`                     |\n| `_model_name`           | string                               | `'DropdownModel'`             |\n| `_options_labels`       | array                                | `[]`                          | The labels for the options.               |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.1.0'`                     |\n| `_view_name`            | string                               | `'DropdownView'`              |\n| `description`           | string                               | `''`                          | Description of the control.               |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes            |\n| `index`                 | `null` or number (integer)           | `null`                        | Selected index                            |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n```\n\n----------------------------------------\n\nTITLE: Creating a Full AppLayout with All Sections\nDESCRIPTION: Demonstrates a complete AppLayout with header, footer, left sidebar, right sidebar, and center content areas.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=header_button,\n          left_sidebar=left_button,\n          center=center_button,\n          right_sidebar=right_button,\n          footer=footer_button)\n```\n\n----------------------------------------\n\nTITLE: Implementing Log and Interaction Functions\nDESCRIPTION: Defines functions for adding log entries, generating temperature time series based on location, and handling map interactions with event callbacks for the dropdown selectors.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef add_log(msg):\n    max_rows = 3\n    rows.append(msg)\n    if len(rows) > max_rows:\n        rows.pop(0)\n    return '<h4>Activity log</h4><ul>{}</ul>'.format('<li>'.join([''] + rows))\n\ndef generate_temp_series(x, y):\n    if heatmap_selector.value == 'Precipitation':\n        temp = np.cumsum(np.random.randn(150)) + 100.\n    elif heatmap_selector.value == 'Temperature':\n        dist = np.sqrt((X - x)**2 + (Y-y)**2) / 100\n        dist = dist.max() - dist\n        dist[dist > np.percentile(dist, 5)] = 0\n        temp = np.cumsum(np.dot(dist, temps)+0.05) + 20 - np.abs(x) / 2\n    time_series.y = temp\n    \ndef handle_interaction(**kwargs):\n    if kwargs['type'] == 'click':\n        generate_temp_series(*kwargs['coordinates'])\n        msg = '%s Selected coordinates: %s, Temp: %d C Precipitation: %d mm\\n' % (\n            datetime.now(), kwargs['coordinates'], random.randint(-20, 20), random.randint(0, 100))\n        out.value = add_log(msg)\n\nm.on_interaction(handle_interaction) \n\ndef on_map_selected(change):\n    m.layers = [basemap_to_tiles(maps[basemap_selector.value]), weather_maps[heatmap_selector.value]]\n    \nbasemap_selector.observe(on_map_selected, names='value')\nheatmap_selector.observe(on_map_selected, names='value')\n```\n\n----------------------------------------\n\nTITLE: Creating conda environment for custom widget development\nDESCRIPTION: Command to create a conda environment with JupyterLab, cookiecutter, NodeJS, yarn and Python for developing a custom Jupyter widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n ipyemail -c conda-forge jupyterlab cookiecutter nodejs yarn python\n```\n\n----------------------------------------\n\nTITLE: Layout Widget CSS Properties Documentation\nDESCRIPTION: Documentation for CSS-related properties of the Layout widget including sizing, positioning, and display attributes. Each property accepts null or string values with specific format requirements.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `max_height` | `null` or string | `null` | The max-height CSS attribute. |\n| `max_width` | `null` or string | `null` | The max-width CSS attribute. |\n| `min_height` | `null` or string | `null` | The min-height CSS attribute. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Area Widget in ipywidgets\nDESCRIPTION: Creates a Textarea widget for multi-line text input. Similar to the Text widget but supports multiple lines of text with automatic wrapping.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Textarea(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating ToggleButtons Widget in Python with IPyWidgets\nDESCRIPTION: Creates a set of mutually exclusive toggle buttons for selection. This widget offers three speed options with tooltips for each button, allowing for a more visual alternative to radio buttons or dropdowns.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nwidgets.ToggleButtons(\n    options=['Slow', 'Regular', 'Fast'],\n    description='Speed:',\n    disabled=False,\n    button_style='', # 'success', 'info', 'warning', 'danger' or ''\n    tooltips=['Description of slow', 'Description of regular', 'Description of fast'],\n#     icons=['check'] * 3\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Widget in Python with IPyWidgets\nDESCRIPTION: Creates a standard checkbox widget that can be checked or unchecked. The widget includes a descriptive label and starts in the unchecked state (value=False).\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Checkbox(\n    value=False,\n    description='Check me',\n    disabled=False,\n    indent=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Password Widget in Python with IPyWidgets\nDESCRIPTION: Creates a specialized text input field for password entry that masks the input characters. The widget includes a default value, placeholder text, and a descriptive label for secure data entry.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Password(\n    value='password',\n    placeholder='Enter password',\n    description='Password:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Widget with Label-Value Pairs in Python with IPyWidgets\nDESCRIPTION: Creates a dropdown selection widget with label-value pairs, where the displayed text differs from the actual selected value. This example shows text labels ('One', 'Two', 'Three') mapped to integer values (1, 2, 3).\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Dropdown(\n    options=[('One', 1), ('Two', 2), ('Three', 3)],\n    value=2,\n    description='Number:',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Selection Slider in ipywidgets\nDESCRIPTION: Creates a SelectionSlider widget that allows selection from predefined options using a slider control. Useful for selecting from a sequence of text values rather than a numeric range.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nwidgets.SelectionSlider(\n    options=['scrambled', 'sunny side up', 'poached', 'over easy'],\n    value='sunny side up',\n    description='I like my eggs ...',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a simple function for interact\nDESCRIPTION: Creates a basic function that returns its input, to be used with interact.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef f(x):\n    return x\n```\n\n----------------------------------------\n\nTITLE: Multiple Function Interaction with Single Widget\nDESCRIPTION: Demonstrates how to link multiple functions to a single widget using interactive_output for simultaneous interaction.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\nfrom IPython.display import display\n\na = widgets.IntSlider(value=5, min=0, max=10)\n\ndef f1(a):\n    display(a)\n    \ndef f2(a):\n    display(a * 2)\n    \nout1 = widgets.interactive_output(f1, {'a': a})\nout2 = widgets.interactive_output(f2, {'a': a})\n\ndisplay(a)\ndisplay(out1)\ndisplay(out2)\n```\n\n----------------------------------------\n\nTITLE: IntSlider Value Change Handler\nDESCRIPTION: Shows how to implement value change observation for an IntSlider widget using the observe method.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nint_range = widgets.IntSlider()\noutput2 = widgets.Output()\n\ndisplay(int_range, output2)\n\ndef on_value_change(change):\n    with output2:\n        print(change['new'])\n\nint_range.observe(on_value_change, names='value')\n```\n\n----------------------------------------\n\nTITLE: Creating Animation with Play and Slider Widgets\nDESCRIPTION: Creates a Play widget for animations that iterates through a sequence of integers, linked to an IntSlider widget. The value property is synchronized between both widgets using jslink.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nplay = widgets.Play(\n    value=50,\n    min=0,\n    max=100,\n    step=1,\n    interval=500,\n    description=\"Press play\",\n    disabled=False\n)\nslider = widgets.IntSlider()\nwidgets.jslink((play, 'value'), (slider, 'value'))\nwidgets.HBox([play, slider])\n```\n\n----------------------------------------\n\nTITLE: Extracting Content from FileUpload Widget\nDESCRIPTION: Demonstrates how to extract the content of an uploaded file as bytes. The content is stored as a memory view that can be converted to bytes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nuploaded_file.content\n#=> <memory at 0x10c1b37c8>\n\nuploaded_file.content.tobytes()\n#=> b'This is the content of example.txt.\\n'\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Widget for Beat Frequency Exploration\nDESCRIPTION: This code creates an interactive widget that allows users to adjust the two frequencies (f1 and f2) and observe the resulting beat frequency. The widget is then displayed in the notebook.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Beat Frequencies.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nv = interactive(beat_freq, f1=(200.0,300.0), f2=(200.0,300.0))\ndisplay(v)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Output Widget\nDESCRIPTION: Creates an HTML widget for displaying output information, such as the activity log, with responsive layout settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nout = HTML(\n    value='',\n    layout=Layout(width='auto', height='auto')\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Selection Widget in ipywidgets\nDESCRIPTION: Creates a SelectMultiple widget that allows selection of multiple options from a list. Users can select multiple items using keyboard modifiers (shift/ctrl/command) with mouse clicks or arrow keys.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nwidgets.SelectMultiple(\n    options=['Apples', 'Oranges', 'Pears'],\n    value=['Oranges'],\n    #rows=10,\n    description='Fruits',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Image Editor for Grayscale and Color Images\nDESCRIPTION: Enhances the 'edit_image' function to handle both grayscale and color images, adjusting the editing process based on the number of color channels.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlims = (0.0, 1.0, 0.01)\n\ndef edit_image(image, sigma, R, G, B):\n    new_image = filters.gaussian(image, sigma=sigma, channel_axis=-1)\n    if new_image.ndim == 3:\n        new_image[:,:,0] = R*new_image[:,:,0]\n        new_image[:,:,1] = G*new_image[:,:,1]\n        new_image[:,:,2] = B*new_image[:,:,2]\n    else:\n        new_image = G*new_image\n    return arr2img(new_image)\n\ninteract(edit_image, image=fixed(img), sigma=(0.0, 10.0, 0.1), \n               R=lims, G=lims, B=lims);\n```\n\n----------------------------------------\n\nTITLE: Creating an Accordion Container Widget\nDESCRIPTION: Creates an Accordion container with collapsible sections. Each section has a title and can contain any widget. This example creates two sections with different widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_58\n\nLANGUAGE: python\nCODE:\n```\naccordion = widgets.Accordion(children=[widgets.IntSlider(), widgets.Text()], titles=('Slider', 'Text'))\naccordion\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical FloatSlider Widget in Python with IPyWidgets\nDESCRIPTION: Creates a floating-point slider widget with a value of 7.5 in a range from 0 to 10.0. This variant uses a vertical orientation while maintaining the same functionality as the horizontal version.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatSlider(\n    value=7.5,\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='vertical',\n    readout=True,\n    readout_format='.1f',\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttling for IPython Widgets in Python\nDESCRIPTION: This code snippet defines a throttle decorator function to implement throttling for IPython widgets. It limits the rate of function calls, ensuring that the function is called regularly but not more often than the specified wait period.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom time import time\n\ndef throttle(wait):\n    \"\"\" Decorator that prevents a function from being called\n        more than once every wait period. \"\"\"\n    def decorator(fn):\n        time_of_last_call = 0\n        scheduled, timer = False, None\n        new_args, new_kwargs = None, None\n        def throttled(*args, **kwargs):\n            nonlocal new_args, new_kwargs, time_of_last_call, scheduled, timer\n            def call_it():\n                nonlocal new_args, new_kwargs, time_of_last_call, scheduled, timer\n                time_of_last_call = time()\n                fn(*new_args, **new_kwargs)\n                scheduled = False\n            time_since_last_call = time() - time_of_last_call\n            new_args, new_kwargs = args, kwargs\n            if not scheduled:\n                scheduled = True\n                new_wait = max(0, wait - time_since_last_call)\n                timer = Timer(new_wait, call_it)\n                timer.start()\n        return throttled\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Widget in ipywidgets\nDESCRIPTION: Creates a Select widget that displays options in a scrollable list box. Configuration includes options list, default value, and optional row count to control visible options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Select(\n    options=['Linux', 'Windows', 'macOS'],\n    value='macOS',\n    # rows=10,\n    description='OS:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Toggle Buttons Group in ipywidgets\nDESCRIPTION: Creates a ToggleButtons widget that provides mutually exclusive selection through a group of connected toggle buttons. Configuration includes tooltips for each option and optional icons.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nwidgets.ToggleButtons(\n    options=['Slow', 'Regular', 'Fast'],\n    description='Speed:',\n    disabled=False,\n    button_style='', # 'success', 'info', 'warning', 'danger' or ''\n    tooltips=['Description of slow', 'Description of regular', 'Description of fast'],\n#     icons=['check'] * 3\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Widget in ipywidgets\nDESCRIPTION: Creates an HTML widget for displaying HTML content. Supports standard HTML tags for formatting and structuring displayed text.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nwidgets.HTML(\n    value=\"Hello <b>World</b>\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Box Container Widgets\nDESCRIPTION: Demonstrates how to create more complex layouts by nesting VBox containers within an HBox. This creates a 2x2 grid-like structure using box containers.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nitems = [widgets.Label(str(i)) for i in range(4)]\nleft_box = widgets.VBox([items[0], items[1]])\nright_box = widgets.VBox([items[2], items[3]])\nwidgets.HBox([left_box, right_box])\n```\n\n----------------------------------------\n\nTITLE: Creating HBox Layout Container in Python with IPyWidgets\nDESCRIPTION: Creates a horizontal container that arranges its children in a single row. This example creates an HBox with four Label widgets arranged horizontally, demonstrating horizontal layout management.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nitems = [widgets.Label(str(i)) for i in range(4)]\nwidgets.HBox(items)\n```\n\n----------------------------------------\n\nTITLE: Continuous Update Widget Demo\nDESCRIPTION: Shows the difference between continuous and delayed update behaviors in different widget types.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\na = widgets.IntSlider(description=\"Delayed\", continuous_update=False)\nb = widgets.IntText(description=\"Delayed\", continuous_update=False)\nc = widgets.IntSlider(description=\"Continuous\", continuous_update=True)\nd = widgets.IntText(description=\"Continuous\", continuous_update=True)\n\nwidgets.link((a, 'value'), (b, 'value'))\nwidgets.link((a, 'value'), (c, 'value'))\nwidgets.link((a, 'value'), (d, 'value'))\nwidgets.VBox([a,b,c,d])\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Widget Linking\nDESCRIPTION: Demonstrates how to synchronize values between two IntSlider widgets using the widgets.link function.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncaption = widgets.Label(value='The values of slider1 and slider2 are synchronized')\nsliders1, slider2 = widgets.IntSlider(description='Slider 1'),\\\n                    widgets.IntSlider(description='Slider 2')\nl = widgets.link((sliders1, 'value'), (slider2, 'value'))\ndisplay(caption, sliders1, slider2)\n```\n\n----------------------------------------\n\nTITLE: Using interact with integer range and step\nDESCRIPTION: Demonstrates using a 3-tuple of integers to specify range and step size for a slider.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=(0,8,2));\n```\n\n----------------------------------------\n\nTITLE: Creating a FloatsInput Widget\nDESCRIPTION: Creates a FloatsInput widget for creating and managing a list of floating-point numbers. Supports custom formatting and styling of the number tags.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfloatsinput = widgets.FloatsInput(\n    value=[1.3, 4.56, 78.90],\n    tag_style='info',\n    format = '.2f'\n)\nfloatsinput\n```\n\n----------------------------------------\n\nTITLE: Aligning Widgets in TwoByTwoLayout in Python\nDESCRIPTION: This snippet shows how to control the alignment of widgets within a TwoByTwoLayout using justify_content and align_items attributes. It centers the widgets both horizontally and vertically.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Text, HTML\nTwoByTwoLayout(top_left=top_left_button, top_right=top_right_button,\n               bottom_right=bottom_right_button,\n               justify_items='center',\n               width=\"50%\",\n               align_items='center')\n```\n\n----------------------------------------\n\nTITLE: Creating IFrame Widgets with Remote and Local URLs in Python\nDESCRIPTION: Example demonstrating how to create IFrame widgets with both full HTTP URLs and local file paths. The first example uses a remote URL while the second references a local file relative to the notebook.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom ipyiframe import IFrame\n\nremote_url = IFrame(src='https://jupyter.org') # full HTTP URL\nlocal_file = IFrame(src='./local_file.html')   # local file\n```\n\n----------------------------------------\n\nTITLE: IntSlider Widget Specification (Jupyter Widgets Controls)\nDESCRIPTION: Defines the attributes and configuration options for the IntSlider widget, which allows selection of a single integer value. Includes continuous update settings, display options, and value constraints.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.5.0'`                     |\n| `_model_name`           | string                                       | `'IntSliderModel'`            |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.5.0'`                     |\n| `_view_name`            | string                                       | `'IntSliderView'`             |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `description_tooltip`   | `null` or string                             | `null`                        | Tooltip for the description (defaults to description).            |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (integer)                             | `100`                         | Max value                                                         |\n| `min`                   | number (integer)                             | `0`                           | Min value                                                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'d'`                         | Format for the readout                                            |\n| `step`                  | number (integer)                             | `1`                           | Minimum step to increment the value                               |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     |\n| `value`                 | number (integer)                             | `0`                           | Int value                                                         |\n```\n\n----------------------------------------\n\nTITLE: FileUpload Widget Specification\nDESCRIPTION: Model and view specifications for a file upload widget in Jupyter. Supports single/multiple file uploads, custom styling, and various button configurations. Version 2.0.0 of @jupyter-widgets/controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                                                              | Default                       | Help                                              |\n| ------------------------ | --------------------------------------------------------------------------------- | ----------------------------- | ------------------------------------------------- |\n| `_dom_classes`           | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element         |\n| `_model_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                                                                            | `'2.0.0'`                     |\n| `_model_name`            | string                                                                            | `'FileUploadModel'`           |\n| `_view_module`           | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                                                                            | `'2.0.0'`                     |\n| `_view_name`             | string                                                                            | `'FileUploadView'`            |\n```\n\n----------------------------------------\n\nTITLE: Nesting Accordion Widgets in Tab Widget in Python\nDESCRIPTION: This example demonstrates how to create nested widgets by placing Accordion widgets inside a Tab widget, showcasing the flexibility of widget composition.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_64\n\nLANGUAGE: python\nCODE:\n```\ntab_nest = widgets.Tab()\ntab_nest.children = [accordion, accordion]\ntab_nest.titles = ('An accordion', 'Copy of the accordion')\ntab_nest\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Widget in Python with IPyWidgets\nDESCRIPTION: Creates a widget for displaying HTML content in the notebook. This example shows basic HTML with bold formatting, demonstrating how to embed rich markup within widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nwidgets.HTML(\n    value=\"Hello <b>World</b>\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing FileUpload Widget Data Properties\nDESCRIPTION: Shows how to access properties of an uploaded file from a FileUpload widget. Properties can be accessed either as dictionary items or as attributes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nuploaded_file = uploader.value[0]\nuploaded_file[\"size\"]\n#=> 36\nuploaded_file.size\n#=> 36\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Graph Visualization with ipywidgets\nDESCRIPTION: Implements the interactive UI using ipywidgets.interact. Provides sliders for adjusting graph parameters (n, m, k, p) and a dropdown to select between different graph generation algorithms. The visualization updates in real-time as parameters are changed.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Exploring Graphs.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ninteract(plot_random_graph, n=(2,30), m=(1,10), k=(1,10), p=(0.0, 0.99, 0.001),\n         generator=[\n             ('lobster', random_lobster),\n             ('power law', powerlaw_cluster),\n             ('Newman-Watts-Strogatz', newman_watts_strogatz),\n             (u'Erdős-Rényi', erdos_renyi),\n         ]);\n```\n\n----------------------------------------\n\nTITLE: Creating a TagsInput Widget\nDESCRIPTION: Creates a TagsInput widget for selecting or creating a list of tags. It supports drag-and-drop reordering, limiting to allowed values, and preventing duplicate tags.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ntags = widgets.TagsInput(\n    value=['pizza', 'fries'],\n    allowed_tags=['pizza', 'fries', 'tomatoes', 'steak'],\n    allow_duplicates=False\n)\ntags\n```\n\n----------------------------------------\n\nTITLE: Creating SelectionRangeSlider with Date Options in Python with IPyWidgets\nDESCRIPTION: Creates a range slider for selecting a span of months. This example generates date options for the 12 months of 2015, displaying month abbreviations while storing date objects as values. The default selection spans the entire year.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\ndates = [datetime.date(2015, i, 1) for i in range(1, 13)]\noptions = [(i.strftime('%b'), i) for i in dates]\nwidgets.SelectionRangeSlider(\n    options=options,\n    index=(0, 11),\n    description='Months (2015)',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating BoundedIntText Widget in Python with IPyWidgets\nDESCRIPTION: Creates a text input field that accepts only integer values within a defined range of 0 to 10. The input has an initial value of 7 and enforces the boundaries and step size (1) when users enter values.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwidgets.BoundedIntText(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Text:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and displaying the variable inspector instance\nDESCRIPTION: Instantiates the VariableInspectorWindow with the current IPython instance and displays it in the notebook.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninspector = VariableInspectorWindow(get_ipython())\ninspector\n```\n\n----------------------------------------\n\nTITLE: Using interact with type annotations\nDESCRIPTION: Demonstrates how interact uses type annotations to determine UI components.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ninteract(f);\n```\n\n----------------------------------------\n\nTITLE: Creating GridBox Layout Container in Python with IPyWidgets\nDESCRIPTION: Creates a grid layout container that arranges children in rows and columns. This example creates a GridBox with eight Label widgets arranged in a grid with three columns of 100px width each, demonstrating advanced layout control.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nitems = [widgets.Label(str(i)) for i in range(8)]\nwidgets.GridBox(items, layout=widgets.Layout(grid_template_columns=\"repeat(3, 100px)\"))\n```\n\n----------------------------------------\n\nTITLE: Tab Widget Implementation\nDESCRIPTION: Creating a tabbed interface with float text and integer slider widgets\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Alignment.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nt = Tab(children=[FloatText(), IntSlider()], _titles={0: 'Text', 1: 'Slider'})\nt\n```\n\n----------------------------------------\n\nTITLE: Creating a Tab Container Widget\nDESCRIPTION: Creates a Tab container with multiple tabs, each containing different widgets. This example creates tabs with different text widgets and sets their titles to their index numbers.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_59\n\nLANGUAGE: python\nCODE:\n```\ntab_contents = ['P0', 'P1', 'P2', 'P3', 'P4']\nchildren = [widgets.Text(description=name) for name in tab_contents]\ntab = widgets.Tab()\ntab.children = children\ntab.titles = [str(i) for i in range(len(children))]\ntab\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing GridspecLayout Widgets\nDESCRIPTION: Demonstrates how to create a grid layout with spanning cells and then access the widgets within it.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ngrid = GridspecLayout(4, 3, height='300px')\ngrid[:3, 1:] = create_expanded_button('One', 'success')\ngrid[:, 0] = create_expanded_button('Two', 'info')\ngrid[3, 1] = create_expanded_button('Three', 'warning')\ngrid[3, 2] = create_expanded_button('Four', 'danger')\n\ngrid\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid of Buttons using HBox and VBox\nDESCRIPTION: Creates a 2x2 grid of buttons using nested VBox and HBox containers, demonstrating natural sizing and alignment of widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Button, HBox, VBox\n\nwords = ['correct', 'horse', 'battery', 'staple']\nitems = [Button(description=w) for w in words]\nleft_box = VBox([items[0], items[1]])\nright_box = VBox([items[2], items[3]])\nHBox([left_box, right_box])\n```\n\n----------------------------------------\n\nTITLE: Creating AppLayout without Sidebars\nDESCRIPTION: Demonstrates AppLayout with only header, center, and footer sections.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=header_button,\n          left_sidebar=None,\n          center=center_button,\n          right_sidebar=None,\n          footer=footer_button)\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal FloatSlider Widget in Python with IPyWidgets\nDESCRIPTION: Creates a floating-point slider widget with a value of 7.5 in a range from 0 to 10.0. The slider has a horizontal orientation and includes configuration options for step size, description label, and decimal display format.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatSlider(\n    value=7.5,\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.1f',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Play Widget with Linked Slider in Python with IPyWidgets\nDESCRIPTION: Creates an animation control with play/pause functionality linked to a slider. This widget pair allows controlling animation playback with values ranging from 0 to 100, updating every 500ms when playing.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nplay = widgets.Play(\n    value=50,\n    min=0,\n    max=100,\n    step=1,\n    interval=500,\n    description=\"Press play\",\n    disabled=False\n)\nslider = widgets.IntSlider()\nwidgets.jslink((play, 'value'), (slider, 'value'))\nwidgets.HBox([play, slider])\n```\n\n----------------------------------------\n\nTITLE: Setting a Widget's Value Property\nDESCRIPTION: Shows how to programmatically set a widget's value by assigning to its 'value' property. This updates both the model and the view of the widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nw.value = 100\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying IntSlider Widget with Implicit Display\nDESCRIPTION: Creates an IntSlider widget and returns it as the last line of the cell, which automatically displays it in the output area. This demonstrates implicit widget rendering.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwidgets.IntSlider()\n```\n\n----------------------------------------\n\nTITLE: Linking Dropdown to Stack Widget in Python\nDESCRIPTION: This example shows how to link a Dropdown widget to a Stack widget, allowing dynamic selection of displayed widgets based on the dropdown value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_61\n\nLANGUAGE: python\nCODE:\n```\ndropdown = widgets.Dropdown(options=['button', 'slider'])\nwidgets.jslink((dropdown, 'index'), (stack, 'selected_index'))\nwidgets.VBox([dropdown, stack])\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 2x2 Grid Layout\nDESCRIPTION: Demonstrates how to use the TwoByTwoLayout widget to create a simple 2x2 grid of widgets with buttons in each cell.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import TwoByTwoLayout\n\nTwoByTwoLayout(top_left=top_left_button,\n               top_right=top_right_button,\n               bottom_left=bottom_left_button,\n               bottom_right=bottom_right_button)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Box Layouts in Python with IPyWidgets\nDESCRIPTION: Creates a complex layout using nested VBox and HBox containers. This example creates a 2x2 grid of labels by nesting two vertical boxes (left and right) within a horizontal box, demonstrating widget composition.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nitems = [widgets.Label(str(i)) for i in range(4)]\nleft_box = widgets.VBox([items[0], items[1]])\nright_box = widgets.VBox([items[2], items[3]])\nwidgets.HBox([left_box, right_box])\n```\n\n----------------------------------------\n\nTITLE: Creating a Float Text Input in ipywidgets\nDESCRIPTION: Creates a FloatText widget for entering floating-point values without upper or lower bounds. Unlike BoundedFloatText, this widget allows any decimal value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatText(\n    value=7.5,\n    description='Any:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Input Widget in ipywidgets\nDESCRIPTION: Creates a Password widget that masks user input on the screen. Note that this is not secure for sensitive information as data is transmitted unencrypted and stored as plain text in notebook state.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Password(\n    value='password',\n    placeholder='Enter password',\n    description='Password:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Widget Selected Index in Python\nDESCRIPTION: This snippet demonstrates how to programmatically set the selected index of a Tab widget, changing which tab is currently visible.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_62\n\nLANGUAGE: python\nCODE:\n```\ntab.selected_index = 3\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Color with Style Attribute\nDESCRIPTION: Shows how to customize a button's color using the style attribute property.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Styling.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nb1 = Button(description='Custom color')\nb1.style.button_color = 'lightgreen'\nb1\n```\n\n----------------------------------------\n\nTITLE: Creating a bqplot Figure for Layout Integration\nDESCRIPTION: Sets up a bqplot bar chart visualization with scales and axes to be used in layout templates.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsize = 100\nnp.random.seed(0)\n\nx_data = range(size)\ny_data = np.random.randn(size)\ny_data_2 = np.random.randn(size)\ny_data_3 = np.cumsum(np.random.randn(size) * 100.)\n\nx_ord = bq.OrdinalScale()\ny_sc = bq.LinearScale()\n\nbar = bq.Bars(x=np.arange(10), y=np.random.rand(10), scales={'x': x_ord, 'y': y_sc})\nax_x = bq.Axis(scale=x_ord)\nax_y = bq.Axis(scale=y_sc, tick_format='0.2f', orientation='vertical')\n\nfig = bq.Figure(marks=[bar], axes=[ax_x, ax_y], padding_x=0.025, padding_y=0.025,\n                layout=Layout(width='auto', height='90%'))\n```\n\n----------------------------------------\n\nTITLE: Displaying Uploaded Images with Image Widget\nDESCRIPTION: Demonstrates how to visualize an image file uploaded through the FileUpload widget using the Image widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Image(value=uploaded_file.content.tobytes())\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Widget with String Options in Python with IPyWidgets\nDESCRIPTION: Creates a dropdown selection widget with string options ('1', '2', '3'). The widget has an initial value of '2' and includes a descriptive label, providing a compact way to select from multiple options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Dropdown(\n    options=['1', '2', '3'],\n    value='2',\n    description='Number:',\n    disabled=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Float Range Slider in ipywidgets\nDESCRIPTION: Creates a FloatRangeSlider widget that allows selection of a range of floating-point values. The value parameter takes a list of two floats representing the lower and upper bounds of the selected range.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatRangeSlider(\n    value=[5, 7.5],\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.1f',\n)\n```\n\n----------------------------------------\n\nTITLE: Using interact with a checkbox\nDESCRIPTION: Shows how interact creates a checkbox for boolean arguments.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=True);\n```\n\n----------------------------------------\n\nTITLE: Defining ColorsInput Widget Attributes in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and help text for the ColorsInputModel and ColorsInputView from @jupyter-widgets/controls version 2.0.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### ColorsInputModel (@jupyter-widgets/controls, 2.0.0); ColorsInputView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                                 | Default                       | Help                                      |\n| ------------------------ | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'ColorsInputModel'`          |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'ColorsInputView'`           |\n| `allow_duplicates`       | boolean                              | `true`                        |\n| `allowed_tags`           | array                                | `[]`                          |\n| `description`            | string                               | `''`                          | Description of the control.               |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.           |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `placeholder`            | string                               | `'\\u200b'`                    |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                       |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                        |\n| `value`                  | array                                | `[]`                          | List of string tags                       |\n```\n\n----------------------------------------\n\nTITLE: Creating a Combobox Widget in ipywidgets\nDESCRIPTION: Creates a Combobox widget that combines a text input with dropdown options. The ensure_option parameter controls whether input must match an option in the list.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Combobox(\n    # value='John',\n    placeholder='Choose Someone',\n    options=['Paul', 'John', 'George', 'Ringo'],\n    description='Combobox:',\n    ensure_option=True,\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Client-Side Widget Linking\nDESCRIPTION: Demonstrates browser-side widget linking using jslink for synchronizing widget values without server roundtrip.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncaption = widgets.Label(value='The values of range1 and range2 are synchronized')\nrange1, range2 = widgets.IntSlider(description='Range 1'),\\\n                 widgets.IntSlider(description='Range 2')\nl = widgets.jslink((range1, 'value'), (range2, 'value'))\ndisplay(caption, range1, range2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Interaction Control with interact_manual\nDESCRIPTION: Demonstrates how to use interact_manual to create on-demand execution controls with a FloatSlider widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ninteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating a 2x2 Layout After Initialization\nDESCRIPTION: Shows how to add widgets to a TwoByTwoLayout after it has been created and displayed.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlayout_2x2 = TwoByTwoLayout(top_left=top_left_button,\n                            bottom_left=bottom_left_button,\n                            bottom_right=bottom_right_button)\nlayout_2x2\n```\n\n----------------------------------------\n\nTITLE: Embedding Widget Data in Custom HTML Template using Python\nDESCRIPTION: This code snippet shows how to use embed_data to get JSON exports of widget state and embed them in a custom HTML template. It includes creating IntSlider widgets, generating embed data, and writing a full HTML document with embedded widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/embedding.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom ipywidgets import IntSlider\nfrom ipywidgets.embed import embed_data\n\ns1 = IntSlider(max=200, value=100)\ns2 = IntSlider(value=40)\ndata = embed_data(views=[s1, s2])\n\nhtml_template = \"\"\"\n<html>\n  <head>\n\n    <title>Widget export</title>\n\n    <!-- Load RequireJS, used by the IPywidgets for dependency management -->\n    <script\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js\"\n      integrity=\"sha256-Ae2Vz/4ePdIu6ZyI/5ZGsYnb+m0JlOmKPjt6XZ9JJkA=\"\n      crossorigin=\"anonymous\">\n    </script>\n\n    <!-- Load IPywidgets bundle for embedding. -->\n    <script\n      data-jupyter-widgets-cdn=\"https://unpkg.com/\"\n      data-jupyter-widgets-cdn-only\n      src=\"https://cdn.jsdelivr.net/npm/@jupyter-widgets/html-manager@*/dist/embed-amd.js\"\n      crossorigin=\"anonymous\">\n    </script>\n\n    <!-- The state of all the widget models on the page -->\n    <script type=\"application/vnd.jupyter.widget-state+json\">\n      {manager_state}\n    </script>\n  </head>\n\n  <body>\n\n    <h1>Widget export</h1>\n\n    <div id=\"first-slider-widget\">\n      <!-- This script tag will be replaced by the view's DOM tree -->\n      <script type=\"application/vnd.jupyter.widget-view+json\">\n        {widget_views[0]}\n      </script>\n    </div>\n\n    <hrule />\n\n    <div id=\"second-slider-widget\">\n      <!-- This script tag will be replaced by the view's DOM tree -->\n      <script type=\"application/vnd.jupyter.widget-view+json\">\n        {widget_views[1]}\n      </script>\n    </div>\n\n  </body>\n</html>\n\"\"\"\n\nmanager_state = json.dumps(data['manager_state'])\nwidget_views = [json.dumps(view) for view in data['view_specs']]\nrendered_template = html_template.format(manager_state=manager_state, widget_views=widget_views)\nwith open('export.html', 'w') as fp:\n    fp.write(rendered_template)\n```\n\n----------------------------------------\n\nTITLE: Defining Email Widget Class in Python\nDESCRIPTION: This Python code defines the Email widget class with traitlets for value and disabled state, including a validator for the email value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import DOMWidget, ValueWidget, register\nfrom traitlets import Unicode, Bool, validate, TraitError\n\nfrom ._frontend import module_name, module_version\n\n\n@register\nclass Email(DOMWidget, ValueWidget):\n    _model_name = Unicode('EmailModel').tag(sync=True)\n    _model_module = Unicode(module_name).tag(sync=True)\n    _model_module_version = Unicode(module_version).tag(sync=True)\n\n    _view_name = Unicode('EmailView').tag(sync=True)\n    _view_module = Unicode(module_name).tag(sync=True)\n    _view_module_version = Unicode(module_version).tag(sync=True)\n\n    value = Unicode('example@example.com').tag(sync=True)\n    disabled = Bool(False, help=\"Enable or disable user changes.\").tag(sync=True)\n\n    # Basic validator for the email value\n    @validate('value')\n    def _valid_value(self, proposal):\n        if proposal['value'].count(\"@\") != 1:\n            raise TraitError('Invalid email value: it must contain an \"@\" character')\n        if proposal['value'].count(\".\") == 0:\n            raise TraitError('Invalid email value: it must contain at least one \".\" character')\n        return proposal['value']\n```\n\n----------------------------------------\n\nTITLE: Unlinking Linked Widgets (Commented)\nDESCRIPTION: Shows how to unlink previously linked widgets by calling the unlink() method on the link object. This code is commented out in the example but demonstrates the concept.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# mylink.unlink()\n```\n\n----------------------------------------\n\nTITLE: Creating a Regular Grid with GridspecLayout\nDESCRIPTION: Demonstrates how to create a simple 4x3 grid layout with uniformly sized cells using GridspecLayout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import GridspecLayout\n\ngrid = GridspecLayout(4, 3)\n\nfor i in range(4):\n    for j in range(3):\n        grid[i, j] = create_expanded_button('Button {} - {}'.format(i, j), 'warning')\ngrid\n```\n\n----------------------------------------\n\nTITLE: Creating a Float Progress Bar in ipywidgets\nDESCRIPTION: Creates a FloatProgress widget for displaying progress as a decimal value. Configuration includes custom color styling and bar style, with the 'info' style applied.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatProgress(\n    value=7.5,\n    min=0,\n    max=10.0,\n    description='Loading:',\n    bar_style='info',\n    style={'bar_color': '#ffff00'},\n    orientation='horizontal'\n)\n```\n\n----------------------------------------\n\nTITLE: Using interact with a dropdown menu\nDESCRIPTION: Demonstrates creating a dropdown menu using a list of strings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=['apples','oranges']);\n```\n\n----------------------------------------\n\nTITLE: Importing ipywidgets functions\nDESCRIPTION: Imports necessary functions and modules from ipywidgets for interactive widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\n```\n\n----------------------------------------\n\nTITLE: Unidirectional Widget Linking\nDESCRIPTION: Shows how to create a one-way link between two IntSlider widgets using the widgets.dlink function.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncaption = widgets.Label(value='Changes in source values are reflected in target1')\nsource, target1 = widgets.IntSlider(description='Source'),\\\n                  widgets.IntSlider(description='Target 1')\ndl = widgets.dlink((source, 'value'), (target1, 'value'))\ndisplay(caption, source, target1)\n```\n\n----------------------------------------\n\nTITLE: Displaying the Same Widget Multiple Times\nDESCRIPTION: Displays the previously created widget again to demonstrate that multiple views of the same widget stay synchronized. Moving one slider will update the other as they share the same backend model.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndisplay(w)\n```\n\n----------------------------------------\n\nTITLE: Creating Proportionally Flexed Buttons in Horizontal Boxes\nDESCRIPTION: Example demonstrating two horizontal box layouts with buttons that flex proportionally to their weights. The first example uses 'auto' width, while the second uses '0%' to show different flex behaviors.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom ipywidgets import Layout, Button, Box, VBox\n\n# Items flex proportionally to the weight and the left over space around the text \nitems_auto = [\n    Button(description='weight=1; auto', layout=Layout(flex='1 1 auto', width='auto'), button_style='danger'),\n    Button(description='weight=3; auto', layout=Layout(flex='3 1 auto', width='auto'), button_style='danger'),\n    Button(description='weight=1; auto', layout=Layout(flex='1 1 auto', width='auto'), button_style='danger'),\n ]\n\n# Items flex proportionally to the weight \nitems_0 = [\n    Button(description='weight=1; 0%', layout=Layout(flex='1 1 0%', width='auto'), button_style='danger'),\n    Button(description='weight=3; 0%', layout=Layout(flex='3 1 0%', width='auto'), button_style='danger'),\n    Button(description='weight=1; 0%', layout=Layout(flex='1 1 0%', width='auto'), button_style='danger'),\n ]\nbox_layout = Layout(display='flex',\n                    flex_flow='row', \n                    align_items='stretch', \n                    width='70%')\nbox_auto = Box(children=items_auto, layout=box_layout)\nbox_0 = Box(children=items_0, layout=box_layout)\nVBox([box_auto, box_0])\n```\n\n----------------------------------------\n\nTITLE: Creating a Selection Range Slider with Dates in ipywidgets\nDESCRIPTION: Creates a SelectionRangeSlider widget with date options, allowing selection of a range of months. This example demonstrates using datetime objects with formatted labels for intuitive date range selection.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\ndates = [datetime.date(2015, i, 1) for i in range(1, 13)]\noptions = [(i.strftime('%b'), i) for i in dates]\nwidgets.SelectionRangeSlider(\n    options=options,\n    index=(0, 11),\n    description='Months (2015)',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Buttons in ipywidgets\nDESCRIPTION: Creates a RadioButtons widget for selecting a single option from a list of mutually exclusive choices. Shows basic configuration with string options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nwidgets.RadioButtons(\n    options=['pepperoni', 'pineapple', 'anchovies'],\n#    value='pineapple', # Defaults to 'pineapple'\n#    layout={'width': 'max-content'}, # If the items' names are long\n    description='Pizza topping:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Alignment Options in TwoByTwoLayout in Python\nDESCRIPTION: This example illustrates the use of alternative alignment options in TwoByTwoLayout. It uses 'top' for vertical alignment, which is equivalent to the CSS 'flex-start'.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nTwoByTwoLayout(top_left=top_left_button, top_right=top_right_button,\n               bottom_right=bottom_right_button,\n               justify_items='center',\n               width=\"50%\",\n               align_items='top')\n```\n\n----------------------------------------\n\nTITLE: Documenting SelectMultipleModel and SelectMultipleView in Markdown\nDESCRIPTION: Describes the attributes, types, default values, and help text for the SelectMultipleModel and SelectMultipleView widgets from @jupyter-widgets/controls version 1.2.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n### SelectMultipleModel (@jupyter-widgets/controls, 1.2.0); SelectMultipleView (@jupyter-widgets/controls, 1.2.0)\n\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.2.0'`                     |\n| `_model_name`           | string                               | `'SelectMultipleModel'`       |\n| `_options_labels`       | array of string                      | `[]`                          | The labels for the options.               |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.2.0'`                     |\n| `_view_name`            | string                               | `'SelectMultipleView'`        |\n| `description`           | string                               | `''`                          | Description of the control.               |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes            |\n| `index`                 | array of number (integer)            | `[]`                          | Selected indices                          |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `rows`                  | number (integer)                     | `5`                           | The number of rows to display.            |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Arguments with observe\nDESCRIPTION: Demonstrates how to create dependent widget arguments using the observe method to update ranges dynamically.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nx_widget = FloatSlider(min=0.0, max=10.0, step=0.05)\ny_widget = FloatSlider(min=0.5, max=10.0, step=0.05, value=5.0)\n\ndef update_x_range(*args):\n    x_widget.max = 2.0 * y_widget.value\ny_widget.observe(update_x_range, 'value')\n\ndef printer(x, y):\n    print(x, y)\ninteract(printer,x=x_widget, y=y_widget);\n```\n\n----------------------------------------\n\nTITLE: Creating Accordion Widget in Python with IPyWidgets\nDESCRIPTION: Creates a collapsible accordion container with multiple sections. This example creates an accordion with two sections containing a slider and a text widget, each with a custom title.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_42\n\nLANGUAGE: python\nCODE:\n```\naccordion = widgets.Accordion(children=[widgets.IntSlider(), widgets.Text()], titles=('Slider', 'Text'))\naccordion\n```\n\n----------------------------------------\n\nTITLE: Creating ColorPicker Widget in Python with IPyWidgets\nDESCRIPTION: Creates a widget for selecting colors using a visual color picker interface. This non-concise variant shows the full color picker with an initial value of 'blue' and includes a descriptive label.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nwidgets.ColorPicker(\n    concise=False,\n    description='Pick a color',\n    value='blue',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Widget Properties in a GridspecLayout\nDESCRIPTION: Shows how to update properties of widgets that are already placed in a GridspecLayout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ngrid[0, 0].description = \"I am the blue one\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Bounded Integer Text Input in ipywidgets\nDESCRIPTION: Creates a BoundedIntText widget that constrains input to integers within specified min and max values. The constraint is applied when the user presses enter after typing.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwidgets.BoundedIntText(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Text:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing FileUpload Value in Python\nDESCRIPTION: Demonstrates how to access the FileUpload widget's value in a format compatible with both ipywidgets 7.x and 8.x. This code retrieves file data and metadata from the new value structure introduced in version 8.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/user_migration_guides.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# For the .value attribute, to retrieve it in the original form:\n{f[\"name\"]: f.content.tobytes() for f in uploader.value}\n\n# For the .data attribute:\n[f.content.tobytes() for f in uploader.value]\n\n# For the .metadata attribute:\n[{k: v for k, v in f.items() if k != \"content\"} for f in w.value]\n```\n\n----------------------------------------\n\nTITLE: Creating a Valid Indicator in ipywidgets\nDESCRIPTION: Creates a Valid widget that provides a read-only boolean indicator, useful for displaying validation status or other boolean states without enabling user interaction.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Valid(\n    value=False,\n    description='Valid!',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Datetime Picker Widget\nDESCRIPTION: Creates a DatetimePicker widget that allows users to select both date and time. The browser picks datetimes in its timezone, while the kernel receives them in its system timezone.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nwidgets.DatetimePicker(\n    description='Pick a Time',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: FloatSlider Widget Configuration\nDESCRIPTION: Specifications for FloatSliderModel and FloatSliderView components providing a slider interface for float values. Includes configuration for range, orientation, display format, and update behavior.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_model_module` | string | '@jupyter-widgets/controls' |\n| `value` | number (float) | 0.0 | Float value |\n| `min` | number (float) | 0.0 | Min value |\n| `max` | number (float) | 100.0 | Max value |\n| `step` | number (float) | 0.1 | Minimum step to increment the value |\n```\n\n----------------------------------------\n\nTITLE: Creating an Integer Progress Bar in ipywidgets\nDESCRIPTION: Creates an IntProgress widget for displaying progress as an integer value. Configuration includes custom styling through bar_style and style parameters, with options for different visual indicators.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwidgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    description='Loading:',\n    bar_style='', # 'success', 'info', 'warning', 'danger' or ''\n    style={'bar_color': 'maroon'},\n    orientation='horizontal'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating BoundedFloatText Widget in Python with IPyWidgets\nDESCRIPTION: Creates a text input field that accepts only floating-point values within a defined range of 0 to 10.0. The input has an initial value of 7.5 and enforces the boundaries and step size (0.1) when users enter values.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwidgets.BoundedFloatText(\n    value=7.5,\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Text:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Saving Uploaded Files to the Filesystem\nDESCRIPTION: Demonstrates how to save the content of a file uploaded through the FileUpload widget to the filesystem from the kernel.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"./saved-output.txt\", \"wb\") as fp:\n    fp.write(uploaded_file.content)\n```\n\n----------------------------------------\n\nTITLE: Accessing a Widget's Value Property\nDESCRIPTION: Demonstrates how to read the current value of a widget by accessing its 'value' property, which returns the widget's current state.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nw.value\n```\n\n----------------------------------------\n\nTITLE: Creating Select Widget in Python with IPyWidgets\nDESCRIPTION: Creates a dropdown-style selection box that shows one option at a time. This widget offers OS choices (Linux, Windows, OSX) with OSX as the default selection and includes a descriptive label.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Select(\n    options=['Linux', 'Windows', 'OSX'],\n    value='OSX',\n    # rows=10,\n    description='OS:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Minimal HTML with Embedded Widget in Python\nDESCRIPTION: This snippet demonstrates how to use the embed_minimal_html function to create a simple, stand-alone HTML page with an embedded IntSlider widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/embedding.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import IntSlider\nfrom ipywidgets.embed import embed_minimal_html\n\nslider = IntSlider(value=40)\nembed_minimal_html('export.html', views=[slider], title='Widgets export')\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Box with Stretched Buttons in ipywidgets\nDESCRIPTION: Example of creating a vertical box (VBox) containing four buttons that stretch to the maximum width. The box takes 50% of the available space and has a solid border. Each button uses the 'danger' style.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom ipywidgets import Layout, Button, Box\n\nitems_layout = Layout( width='auto')     # override the default width of the button to 'auto' to let the button grow\n\nbox_layout = Layout(display='flex',\n                    flex_flow='column', \n                    align_items='stretch', \n                    border='solid',\n                    width='50%')\n\nwords = ['correct', 'horse', 'battery', 'staple']\nitems = [Button(description=word, layout=items_layout, button_style='danger') for word in words]\nbox = Box(children=items, layout=box_layout)\nbox\n```\n\n----------------------------------------\n\nTITLE: Initializing Widget with Style Dictionary\nDESCRIPTION: Demonstrates how to initialize a button with multiple style properties using a dictionary.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Styling.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nb3 = Button(description='Styled button', style=dict(\n    font_style='italic',\n    font_weight='bold',\n    font_variant=\"small-caps\",\n    text_color='red',\n    text_decoration='underline'\n))\nb3\n```\n\n----------------------------------------\n\nTITLE: Displaying Object Fit Examples with Small Image\nDESCRIPTION: Creates a grid of boxes showing different object_fit options applied to a small image. Uses VBox and HBox for layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nboxes = []\nfor fit in fit_options:\n    ib = Image(value=im_50_25)\n    ib.layout.object_fit = fit\n    ib.layout.margin = image_margin\n    boxes.append(make_box_for_grid(ib, fit))\n\nvb = VBox()\nh = HTML(value='<{size}>Examples of <code>object_fit</code> with small image</{size}>'.format(size=caption_size))\nvb.layout.align_items = 'center'\nhb = HBox()\nhb.layout = hbox_layout\nhb.children = boxes\n\nvb.children = [h, hb]\nvb\n```\n\n----------------------------------------\n\nTITLE: Adding Weather Layer to Map\nDESCRIPTION: Adds the default weather layer (based on the current heatmap selector value) to the map for initial display.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nm.add_layer(weather_maps[heatmap_selector.value])\n```\n\n----------------------------------------\n\nTITLE: Creating DatePicker Widget in Python with IPyWidgets\nDESCRIPTION: Creates a calendar-based date selection widget. This widget provides a user-friendly interface for selecting dates, including a month/year navigation system and day selection grid.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nwidgets.DatePicker(\n    description='Pick a Date',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Bounded Float Text Input in ipywidgets\nDESCRIPTION: Creates a BoundedFloatText widget that constrains input to floating-point values within specified min and max values. The constraint is applied when the user presses enter after typing.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwidgets.BoundedFloatText(\n    value=7.5,\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Text:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget with Initial Property Values\nDESCRIPTION: Creates a Text widget with initial values for its properties by passing them as keyword arguments to the constructor. This demonstrates the shorthand for setting initial widget state.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Text(value='Hello World!', disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox in ipywidgets\nDESCRIPTION: Creates a Checkbox widget for boolean selection with optional indentation. The indent parameter controls alignment with other controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Checkbox(\n    value=False,\n    description='Check me',\n    disabled=False,\n    indent=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Math Widget in ipywidgets\nDESCRIPTION: Creates an HTMLMath widget that combines HTML formatting with LaTeX mathematical notation. Supports both inline math notation (\\(x^2\\)) and display math ($$\\frac{x+1}{x-1}$$).\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nwidgets.HTMLMath(\n    value=r\"Some math and <i>HTML</i>: \\(x^2\\) and $$\\frac{x+1}{x-1}$$\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a 2x2 Grid with Missing Widgets\nDESCRIPTION: Shows how TwoByTwoLayout automatically reconfigures when some positions are not defined, merging neighboring cells to fill the space.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nTwoByTwoLayout(top_left=top_left_button,\n               bottom_left=bottom_left_button,\n               bottom_right=bottom_right_button)\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Picker Widget\nDESCRIPTION: Creates a TimePicker widget that allows users to select a time. Browser compatibility depends on HTML time input field support.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nwidgets.TimePicker(\n    description='Pick a Time',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Box with RadioButtons and Custom Layout in Python with IPyWidgets\nDESCRIPTION: Creates a container box with a label and radio buttons that accommodates long option names. The width is set to 'max-content' to ensure all text is visible, including a very long option name that demonstrates layout flexibility.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Box(\n    [\n        widgets.Label(value='Pizza topping with a very long label:'), \n        widgets.RadioButtons(\n            options=[\n                'pepperoni', \n                'pineapple', \n                'anchovies', \n                'and the long name that will fit fine and the long name that will fit fine and the long name that will fit fine '\n            ],\n            layout={'width': 'max-content'}\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Integer Range Slider in ipywidgets\nDESCRIPTION: Creates an IntRangeSlider widget that allows selection of a range of integer values. The value parameter takes a list of two integers representing the lower and upper bounds of the selected range.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwidgets.IntRangeSlider(\n    value=[5, 7],\n    min=0,\n    max=10,\n    step=1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating FloatProgress Widget in Python with IPyWidgets\nDESCRIPTION: Creates a floating-point progress bar with a value of 7.5 out of 10.0. The widget uses the 'info' bar style and a custom yellow color (#ffff00), suitable for displaying detailed progress measurements.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatProgress(\n    value=7.5,\n    min=0,\n    max=10.0,\n    description='Loading:',\n    bar_style='info',\n    style={'bar_color': '#ffff00'},\n    orientation='horizontal'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating RadioButtons Widget in Python with IPyWidgets\nDESCRIPTION: Creates a set of radio buttons for mutually exclusive selection among options. The widget offers three pizza topping choices with 'pineapple' as the default selection (commented out), and includes a descriptive label.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nwidgets.RadioButtons(\n    options=['pepperoni', 'pineapple', 'anchovies'],\n#    value='pineapple', # Defaults to 'pineapple'\n#    layout={'width': 'max-content'}, # If the items' names are long\n    description='Pizza topping:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Description Width for Widgets\nDESCRIPTION: Creates an IntSlider with a custom style that sets the description width to 'initial', allowing the full description text to be displayed.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle = {'description_width': 'initial'}\nIntSlider(description='A too long description', style=style)\n```\n\n----------------------------------------\n\nTITLE: Creating Textarea Widget in Python with IPyWidgets\nDESCRIPTION: Creates a multi-line text input widget for entering longer text. Similar to the Text widget but supports multiple lines, making it suitable for paragraphs or other larger text inputs.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Textarea(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Image Widget in Python with IPyWidgets\nDESCRIPTION: Creates a widget for displaying images in the notebook. This example reads a PNG file into memory and displays it with specified width and height dimensions of 300x400 pixels.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfile = open(\"WidgetArch.png\", \"rb\")\nimage = file.read()\nwidgets.Image(\n    value=image,\n    format='png',\n    width=300,\n    height=400,\n)\n```\n\n----------------------------------------\n\nTITLE: Using interact with a Combobox widget\nDESCRIPTION: Demonstrates using a custom Combobox widget with interact for more control.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=widgets.Combobox(options=[\"Chicago\", \"New York\", \"Washington\"], value=\"Chicago\"));\n```\n\n----------------------------------------\n\nTITLE: Importing IPyWidgets Library\nDESCRIPTION: Imports the ipywidgets library with the alias 'widgets', which is required to use any widget functionality in the notebook.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\n```\n\n----------------------------------------\n\nTITLE: Displaying Widget with Explicit Display Function\nDESCRIPTION: Creates an IntSlider widget and explicitly displays it using IPython's display function. This demonstrates the explicit way to render widgets in a notebook.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display\nw = widgets.IntSlider()\ndisplay(w)\n```\n\n----------------------------------------\n\nTITLE: Creating a Date Picker Widget\nDESCRIPTION: Creates a DatePicker widget that allows users to select a date. Browser compatibility depends on HTML date input field support.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nwidgets.DatePicker(\n    description='Pick a Date',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Building Frontend Bundle with NPM\nDESCRIPTION: This bash command rebuilds the frontend bundle using npm after making changes to the TypeScript code.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using interact with float range\nDESCRIPTION: Shows how to create a float-valued slider using a tuple of floats.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=(0.0,10.0));\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Widget for Property Access\nDESCRIPTION: Creates a new IntSlider widget and displays it to demonstrate accessing widget properties in the following code snippets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nw = widgets.IntSlider()\ndisplay(w)\n```\n\n----------------------------------------\n\nTITLE: Integer Progress Widget Specification (@jupyter-widgets/controls)\nDESCRIPTION: Defines the attributes and properties for Integer Progress widget model and view. Includes progress bar styling, range controls, and orientation options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### IntProgressModel (@jupyter-widgets/controls, 1.0.0); ProgressView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                                                 | Default                       | Help                                           |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ---------------------------------------------- |\n| `_dom_classes`          | array                                                                | `[]`                          | CSS classes applied to widget DOM element      |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.0.0'`                     |\n| `_model_name`           | string                                                               | `'IntProgressModel'`          |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.0.0'`                     |\n| `_view_name`            | string                                                               | `'ProgressView'`              |\n| `bar_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the progress bar. |\n| `description`           | string                                                               | `''`                          | Description of the control.                    |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n| `max`                   | number (integer)                                                     | `100`                         | Max value                                      |\n| `min`                   | number (integer)                                                     | `0`                           | Min value                                      |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`)                         | `'horizontal'`                | Vertical or horizontal.                        |\n| `style`                 | reference to ProgressStyle widget                                    | reference to new instance     |\n| `value`                 | number (integer)                                                     | `0`                           | Int value                                      |\n```\n\n----------------------------------------\n\nTITLE: Creating IntRangeSlider Widget in Python with IPyWidgets\nDESCRIPTION: Creates a range slider for selecting a range of integer values. The initial selection is set to [5, 7] within a range of 0 to 10, allowing users to define lower and upper bounds simultaneously.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwidgets.IntRangeSlider(\n    value=[5, 7],\n    min=0,\n    max=10,\n    step=1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating FloatLogSlider Widget in Python with IPyWidgets\nDESCRIPTION: Creates a logarithmic floating-point slider with a base of 10. The slider operates on exponents between -10 and 10 with steps of 0.2, allowing selection of values across multiple orders of magnitude.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatLogSlider(\n    value=10,\n    base=10,\n    min=-10, # max exponent of base\n    max=10, # min exponent of base\n    step=0.2, # exponent step\n    description='Log Slider'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Logarithmic Float Slider in ipywidgets\nDESCRIPTION: Creates a FloatLogSlider widget with logarithmic scale, making it suitable for values spanning multiple orders of magnitude. Configuration includes base, min/max exponents, and step size.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatLogSlider(\n    value=10,\n    base=10,\n    min=-10, # min exponent of base\n    max=10, # max exponent of base\n    step=0.2, # exponent step\n    description='Log Slider'\n)\n```\n\n----------------------------------------\n\nTITLE: Widget Custom Message Structure in JSON\nDESCRIPTION: The JSON structure for sending custom messages between widget counterparts. This allows widgets to communicate beyond the standard state synchronization, using the Widget.send() method in ipywidgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id': 'u-u-i-d',\n  'data': {\n    'method': 'custom',\n    'content': <the specified content>,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using interact with a custom IntSlider\nDESCRIPTION: Demonstrates using a custom IntSlider widget with interact instead of an abbreviation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=widgets.IntSlider(min=-10, max=30, step=1, value=10));\n```\n\n----------------------------------------\n\nTITLE: Checkbox Model and View Configuration Documentation\nDESCRIPTION: Specification for CheckboxModel and CheckboxView components from @jupyter-widgets/controls package. Details attributes for checkbox behavior, styling, and accessibility features.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                              | Default                       | Help                                                                |\n| ------------------------ | --------------------------------- | ----------------------------- | ------------------------------------------------------------------- |\n| `_dom_classes`           | array of string                   | `[]`                          | CSS classes applied to widget DOM element                           |\n| `_model_module`          | string                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                            | `'2.0.0'`                     |\n| `_model_name`            | string                            | `'CheckboxModel'`             |\n| `_view_module`           | string                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                            | `'2.0.0'`                     |\n| `_view_name`             | string                            | `'CheckboxView'`              |\n| `description`            | string                            | `''`                          | Description of the control.                                         |\n| `description_allow_html` | boolean                           | `false`                       | Accept HTML in the description.                                     |\n| `disabled`               | boolean                           | `false`                       | Enable or disable user changes.                                     |\n| `indent`                 | boolean                           | `true`                        | Indent the control to align with other controls with a description. |\n| `layout`                 | reference to Layout widget        | reference to new instance     |\n| `style`                  | reference to CheckboxStyle widget | reference to new instance     | Styling customizations                                              |\n| `tabbable`               | `null` or boolean                 | `null`                        | Is widget tabbable?                                                 |\n| `tooltip`                | `null` or string                  | `null`                        | A tooltip caption.                                                  |\n| `value`                  | boolean                           | `false`                       | Bool value                                                          |\n```\n\n----------------------------------------\n\nTITLE: Creating Text Widget in Python with IPyWidgets\nDESCRIPTION: Creates a single-line text input widget with an initial value and placeholder text. The widget includes a description label and provides basic text entry functionality for string input.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Text(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False   \n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Image Layout Controls in Jupyter Widgets\nDESCRIPTION: Defines helper functions and variables for demonstrating image layout controls in Jupyter Widgets, including object-fit options and layout configurations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Layout, Box, VBox, HBox, HTML, Image\n\nfit_options = ['contain', 'cover', 'fill', 'scale-down', 'none', None]\n\nhbox_layout = Layout()\nhbox_layout.width = '100%'\nhbox_layout.justify_content = 'space-around'\n\ngreen_box_layout = Layout()\ngreen_box_layout.width = '100px'\ngreen_box_layout.height = '100px'\ngreen_box_layout.border = '2px solid green'\n\n\ndef make_box_for_grid(image_widget, fit):\n    \"\"\"\n    Make a VBox to hold caption/image for demonstrating\n    option_fit values.\n    \"\"\"\n    # Make the caption\n    if fit is not None:\n        fit_str = \"'{}'\".format(fit)\n    else:\n        fit_str = str(fit)\n        \n    h = HTML(value='' + str(fit_str) + '')\n\n    # Make the green box with the image widget inside it\n    boxb = Box()\n    boxb.layout = green_box_layout\n    boxb.children = [image_widget]\n    \n    # Compose into a vertical box\n    vb = VBox()\n    vb.layout.align_items = 'center'\n    vb.children = [h, boxb]\n    return vb\n\n# Use this margin to eliminate space between the image and the box\nimage_margin = '0 0 0 0'\n\n# Set size of captions in figures below\ncaption_size = 'h4'\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Container Widget\nDESCRIPTION: Creates a generic Box container widget that holds other widgets as children. The Box is the base container class that can be used for layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nitems = [widgets.Label(str(i)) for i in range(4)]\nwidgets.Box(items)\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Browser Function\nDESCRIPTION: Defines a function that creates an interactive image browser using IPyWidgets. The function displays digit images with their corresponding labels using matplotlib.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Browser.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef browse_images(digits):\n    n = len(digits.images)\n    def view_image(i):\n        plt.imshow(digits.images[i], cmap=plt.cm.gray_r, interpolation='nearest')\n        plt.title('Training: %s' % digits.target[i])\n        plt.show()\n    interact(view_image, i=(0,n-1))\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Function for Displaying NumPy Arrays as Images\nDESCRIPTION: Defines a function 'arr2img' that converts 2D or 3D NumPy arrays to displayable images, handling both grayscale and color images.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef arr2img(arr):\n    \"\"\"Display a 2- or 3-d numpy array as an image.\"\"\"\n    if arr.ndim == 2:\n        format, cmap = 'png', mpl.cm.gray\n    elif arr.ndim == 3:\n        format, cmap = 'jpg', None\n    else:\n        raise ValueError(\"Only 2- or 3-d arrays can be displayed as images.\")\n    # Don't let matplotlib autoscale the color range so we can control overall luminosity\n    vmax = 255 if arr.dtype == 'uint8' else 1.0\n    with BytesIO() as buffer:\n        plt.imsave(buffer, arr, format=format, cmap=cmap, vmin=0, vmax=vmax)\n        out = buffer.getvalue()\n    return Image(out)\n```\n\n----------------------------------------\n\nTITLE: Defining BoundedIntTextModel and IntTextView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the BoundedIntTextModel and IntTextView from @jupyter-widgets/controls version 2.0.0. Includes details on integer value constraints, styling, and user interaction behaviors.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### BoundedIntTextModel (@jupyter-widgets/controls, 2.0.0); IntTextView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                                 | Default                       | Help                                                                                                         |\n| ------------------------ | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'BoundedIntTextModel'`       |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'IntTextView'`               |\n| `continuous_update`      | boolean                              | `false`                       | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`            | string                               | `''`                          | Description of the control.                                                                                  |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.                                                                              |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `max`                    | number (integer)                     | `100`                         | Max value                                                                                                    |\n| `min`                    | number (integer)                     | `0`                           | Min value                                                                                                    |\n| `step`                   | number (integer)                     | `1`                           | Minimum step to increment the value                                                                          |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                                                                                          |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                                                                                           |\n| `value`                  | number (integer)                     | `0`                           | Int value                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Creating an IntSlider with Truncated Description\nDESCRIPTION: Creates an IntSlider widget with a long description that gets truncated due to the default fixed description width.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import IntSlider\n\nIntSlider(description='A too long description')\n```\n\n----------------------------------------\n\nTITLE: Creating a TagsInput Widget in ipywidgets\nDESCRIPTION: Shows how to use the TagsInput widget to collect and manage tags. This widget allows for reordering tags via drag and drop, limiting tags to allowed values, and preventing duplicate tags.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import TagsInput\nTagsInput(\n    value=['pizza', 'fries'],\n    allowed_tags=['pizza', 'fries', 'tomatoes', 'steak'],\n    allow_duplicates=False\n)\n```\n\n----------------------------------------\n\nTITLE: Using interact with an integer slider\nDESCRIPTION: Demonstrates using interact with a function and an integer argument to create a slider.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=10);\n```\n\n----------------------------------------\n\nTITLE: Plotting Beat Frequency Signal with Matplotlib\nDESCRIPTION: This code extracts the frequency values from the widget, sets specific values, and then plots the resulting beat frequency signal using Matplotlib. It visualizes the first 6000 samples of the signal.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Beat Frequencies.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nf1, f2 = v.children[:2]\nf1.value = 255\nf2.value = 260\nplt.plot(v.result[0:6000]);\n```\n\n----------------------------------------\n\nTITLE: Using interact with a custom dropdown\nDESCRIPTION: Shows how to create a dropdown with custom labels and values.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=[('one', 10), ('two', 20)]);\n```\n\n----------------------------------------\n\nTITLE: Creating UI Header and Dropdown Selectors\nDESCRIPTION: Defines the header and dropdown selectors for basemap and heatmap layer selection, with appropriate styling and layout settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nheader = HTML(\"<h1>Fictional World Weather</h1>\", layout=Layout(height='auto'))\nheader.style.text_align='center'\nbasemap_selector = Dropdown( options = list(maps.keys()),\n                            layout=Layout(width='auto'))\n\nheatmap_selector = Dropdown(options=('Temperature', 'Precipitation'),\n                            layout=Layout(width='auto'))\n```\n\n----------------------------------------\n\nTITLE: Creating SelectionSlider Widget in Python with IPyWidgets\nDESCRIPTION: Creates a horizontal slider widget for selecting from discrete text options. The slider allows selection among egg cooking styles with 'sunny side up' as the default value and displays the selected option as readout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwidgets.SelectionSlider(\n    options=['scrambled', 'sunny side up', 'poached', 'over easy'],\n    value='sunny side up',\n    description='I like my eggs ...',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Button Widget in Python with IPyWidgets\nDESCRIPTION: Creates a clickable button widget with a description and icon. Unlike ToggleButton, this is a standard push button that doesn't maintain state after being clicked, suitable for triggering actions.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nbutton = widgets.Button(\n    description='Click me',\n    disabled=False,\n    button_style='', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Click me',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\nbutton\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Float Slider Widget in ipywidgets\nDESCRIPTION: Creates a FloatSlider widget with vertical orientation. This example demonstrates how to change the slider orientation while maintaining the same value range and step configurations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatSlider(\n    value=7.5,\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='vertical',\n    readout=True,\n    readout_format='.1f',\n)\n```\n\n----------------------------------------\n\nTITLE: Using interact with a text input\nDESCRIPTION: Illustrates interact generating a text box for string arguments.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x='Hi there!');\n```\n\n----------------------------------------\n\nTITLE: Using interact with integer range\nDESCRIPTION: Shows how to use a tuple of integers to create a slider with a specific range.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=(0,4));\n```\n\n----------------------------------------\n\nTITLE: ValidModel and ValidView Widget Specification\nDESCRIPTION: Specification for ValidModel and ValidView components from @jupyter-widgets/controls v1.0.0. Defines a validation widget with boolean value control and customizable styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.0.0'`                     |\n| `_model_name`           | string                               | `'ValidModel'`                |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.0.0'`                     |\n| `_view_name`            | string                               | `'ValidView'`                 |\n| `description`           | string                               | `''`                          | Description of the control.               |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.           |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `readout`               | string                               | `'Invalid'`                   | Message displayed when the value is False |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `value`                 | boolean                              | `false`                       | Bool value                                |\n```\n\n----------------------------------------\n\nTITLE: Initializing Map with ipyleaflet\nDESCRIPTION: Creates a basic interactive map centered on Europe using the ipyleaflet Map widget with OpenStreetMap as the basemap.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nm = Map(center=(52, 10), zoom=5, basemap=basemaps.OpenStreetMap.Mapnik)\n```\n\n----------------------------------------\n\nTITLE: SelectionSlider Widget Specification\nDESCRIPTION: Configuration specification for SelectionSlider widget with model and view attributes. Details interaction properties, display options, and customization settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Input Widget in ipywidgets\nDESCRIPTION: Creates a Text widget for single-line text input. Includes configuration for initial value, placeholder text, and description label.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Text(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False   \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Debouncing for IPython Widgets in Python\nDESCRIPTION: This code snippet defines a Timer class and a debounce decorator function to implement debouncing for IPython widgets. It uses asyncio for asynchronous execution, delaying callback execution until the value has not changed for a specified time.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nclass Timer:\n    def __init__(self, timeout, callback):\n        self._timeout = timeout\n        self._callback = callback\n\n    async def _job(self):\n        await asyncio.sleep(self._timeout)\n        self._callback()\n\n    def start(self):\n        self._task = asyncio.ensure_future(self._job())\n\n    def cancel(self):\n        self._task.cancel()\n\ndef debounce(wait):\n    \"\"\" Decorator that will postpone a function's\n        execution until after `wait` seconds\n        have elapsed since the last time it was invoked. \"\"\"\n    def decorator(fn):\n        timer = None\n        def debounced(*args, **kwargs):\n            nonlocal timer\n            def call_it():\n                fn(*args, **kwargs)\n            if timer is not None:\n                timer.cancel()\n            timer = Timer(wait, call_it)\n            timer.start()\n        return debounced\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Text Widget Model Specification\nDESCRIPTION: Defines the attributes and configuration options for the Text widget model and view, including input behavior, styling, and display options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n### TextModel (@jupyter-widgets/controls, 2.0.0); TextView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                          | Default                       | Help                                                                                                         |\n| ------------------------ | ----------------------------- | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`           | array of string               | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`          | string                        | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                        | `'2.0.0'`                     |\n| `_model_name`            | string                        | `'TextModel'`                 |\n| `_view_module`           | string                        | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                        | `'2.0.0'`                     |\n| `_view_name`             | string                        | `'TextView'`                  |\n| `continuous_update`      | boolean                       | `true`                        | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`            | string                        | `''`                          | Description of the control.                                                                                  |\n| `description_allow_html` | boolean                       | `false`                       | Accept HTML in the description.                                                                              |\n| `disabled`               | boolean                       | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                 | reference to Layout widget    | reference to new instance     |\n| `placeholder`            | string                        | `'\\u200b'`                    | Placeholder text to display when nothing has been typed                                                      |\n| `style`                  | reference to TextStyle widget | reference to new instance     |\n| `tabbable`               | `null` or boolean             | `null`                        | Is widget tabbable?                                                                                          |\n| `tooltip`                | `null` or string              | `null`                        | A tooltip caption.                                                                                           |\n| `value`                  | string                        | `''`                          | String value                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Importing Scikit-learn Datasets\nDESCRIPTION: Imports the datasets module from scikit-learn to access the digits dataset.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Browser.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn import datasets\n```\n\n----------------------------------------\n\nTITLE: FloatLogSlider Widget Specification\nDESCRIPTION: Model and view specifications for a logarithmic slider widget. Provides continuous or discrete numeric input on a logarithmic scale with customizable base, range, and display format.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### FloatLogSliderModel (@jupyter-widgets/controls, 1.5.0); FloatLogSliderView (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.5.0'`                     |\n| `_model_name`           | string                                       | `'FloatLogSliderModel'`       |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.5.0'`                     |\n| `_view_name`            | string                                       | `'FloatLogSliderView'`        |\n| `base`                  | number (float)                               | `10.0`                        | Base for the logarithm                                            |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `description_tooltip`   | `null` or string                             | `null`                        | Tooltip for the description (defaults to description).            |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (float)                               | `4.0`                         | Max value for the exponent                                        |\n| `min`                   | number (float)                               | `0.0`                         | Min value for the exponent                                        |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'.3g'`                       | Format for the readout                                            |\n| `step`                  | number (float)                               | `0.1`                         | Minimum step in the exponent to increment the value               |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     |\n| `value`                 | number (float)                               | `1.0`                         | Float value                                                       |\n```\n\n----------------------------------------\n\nTITLE: Defining Beat Frequency Generation Function\nDESCRIPTION: This function generates a beat frequency signal based on two input frequencies (f1 and f2). It creates a time array, computes the signal, and returns both the audio object and the signal data.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Beat Frequencies.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef beat_freq(f1=220.0, f2=224.0):\n    max_time = 3\n    rate = 8000\n    times = np.linspace(0,max_time,rate*max_time)\n    signal = np.sin(2*np.pi*f1*times) + np.sin(2*np.pi*f2*times)\n    display(Audio(data=signal, rate=rate))\n    return signal\n```\n\n----------------------------------------\n\nTITLE: Creating a Stack Widget with Selection Control\nDESCRIPTION: Shows how to use the Stack container widget which displays only the selected child widget while hiding others. This example links a dropdown to control which widget is displayed.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Stack, Button, IntSlider, Dropdown, VBox, link\ns = Stack([Button(description='Click here'), IntSlider()], selected_index=0)\nd = Dropdown(options=['button', 'slider'])\nlink((d, 'index'), (s, 'selected_index'))\nVBox([d, s])\n```\n\n----------------------------------------\n\nTITLE: Preventing Output Flickering with Layout Height\nDESCRIPTION: Shows how to prevent output flickering by setting a fixed layout height for interactive matplotlib plots.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nfrom ipywidgets import interactive\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef f(m, b):\n    plt.figure(2)\n    x = np.linspace(-10, 10, num=1000)\n    plt.plot(x, m * x + b)\n    plt.ylim(-5, 5)\n    plt.show()\n\ninteractive_plot = interactive(f, m=(-2.0, 2.0), b=(-3, 3, 0.5))\noutput = interactive_plot.children[-1]\noutput.layout.height = '350px'\ninteractive_plot\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using the Email Widget in Python\nDESCRIPTION: These Python code snippets demonstrate how to create an instance of the Email widget and interact with its value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nemail = Email(value='john.doe@domain.com', disabled=False)\nemail\n```\n\nLANGUAGE: python\nCODE:\n```\nemail.value\n```\n\nLANGUAGE: python\nCODE:\n```\nemail.value = 'jane.doe@domain.com'\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Weather Map\nDESCRIPTION: Imports necessary modules from ipyleaflet, ipywidgets, bqplot, numpy, and pandas for creating the interactive weather map application.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipyleaflet import Map, basemaps, basemap_to_tiles, Heatmap, TileLayer\nfrom ipywidgets import AppLayout\nfrom ipywidgets import HTML, Layout, Dropdown, Output, Textarea, VBox, Label\nimport bqplot as bq\nimport numpy as np\nfrom pandas import date_range\n```\n\n----------------------------------------\n\nTITLE: Using Throttle Decorator with IPython Widgets in Python\nDESCRIPTION: This example shows how to use the throttle decorator with an IntSlider widget. The text box updates more frequently than with debouncing, providing a more interactive experience while still limiting the callback rate to once every 0.2 seconds.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nslider = widgets.IntSlider()\ntext = widgets.IntText()\n\n@throttle(0.2)\ndef value_changed(change):\n    text.value = change.new\nslider.observe(value_changed, 'value')\n\nwidgets.VBox([slider, text])\n```\n\n----------------------------------------\n\nTITLE: Creating FloatRangeSlider Widget in Python with IPyWidgets\nDESCRIPTION: Creates a range slider for selecting a range of floating-point values. The initial selection is set to [5, 7.5] within a range of 0 to 10.0, with a step size of 0.1 for precise selection.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatRangeSlider(\n    value=[5, 7.5],\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.1f',\n)\n```\n\n----------------------------------------\n\nTITLE: FloatText Widget Configuration\nDESCRIPTION: Configuration specification for FloatText widget that provides a text input interface for float values. Includes attributes for styling, validation, and display options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  _dom_classes: string[] = [];\n  _model_module: string = '@jupyter-widgets/controls';\n  _model_module_version: string = '2.0.0';\n  _model_name: string = 'FloatTextModel';\n  _view_module: string = '@jupyter-widgets/controls';\n  _view_module_version: string = '2.0.0';\n  _view_name: string = 'FloatTextView';\n  continuous_update: boolean = false;\n  description: string = '';\n  description_allow_html: boolean = false;\n  disabled: boolean = false;\n  step: number | null = null;\n  value: number = 0.0;\n}\n```\n\n----------------------------------------\n\nTITLE: VBox with HBox Layout Implementation\nDESCRIPTION: Creating a nested layout combining VBox and HBox with various widgets including dropdown, color picker, buttons, and text area\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Alignment.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nVBox([HBox([VBox([Dropdown(description='Choice', options=['foo', 'bar']), \n                  ColorPicker(description='Color'), \n                  HBox([Button(), Button()])]), \n            Textarea(value=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\"\n\"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \"\n\"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \"\n\"nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in \"\n\"reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \"\n\"pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa \"\n\"qui officia deserunt mollit anim id est laborum.\")]),\n      HBox([Text(), Checkbox(description='Check box')]), \n      IntSlider(), \n      Controller()], background_color='#EEE')\n```\n\n----------------------------------------\n\nTITLE: Defining ColorPickerModel and ColorPickerView in Jupyter Widgets\nDESCRIPTION: Specification for ColorPickerModel and ColorPickerView from @jupyter-widgets/controls package. Includes attributes for styling, description, and color value configuration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### ColorPickerModel (@jupyter-widgets/controls, 1.0.0); ColorPickerView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                 | Default                       | Help                                              |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element         |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.0.0'`                     |\n| `_model_name`           | string                               | `'ColorPickerModel'`          |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.0.0'`                     |\n| `_view_name`            | string                               | `'ColorPickerView'`           |\n| `concise`               | boolean                              | `false`                       | Display short version with just a color selector. |\n| `description`           | string                               | `''`                          | Description of the control.                       |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                   |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                            |\n| `value`                 | string                               | `'black'`                     | The color value.                                  |\n```\n\n----------------------------------------\n\nTITLE: Assembling Dashboard with AppLayout\nDESCRIPTION: Creates the main application layout using AppLayout, arranging the map, header, sidebar controls, time series chart, and output area with specified proportions and spacing.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(center=m, \n          header=header,\n          left_sidebar=VBox([Label(\"Basemap:\"),\n                             basemap_selector,\n                             Label(\"Overlay:\"),\n                             heatmap_selector]),\n          right_sidebar=fig,\n          footer=out,\n          pane_widths=['80px', 1, 1],\n          pane_heights=['80px', 4, 1],\n          height='600px',\n          grid_gap=\"30px\")\n```\n\n----------------------------------------\n\nTITLE: SelectMultiple Widget Specification\nDESCRIPTION: Configuration specification for SelectMultiple widget with attributes for model and view components. Includes styling, layout, and interaction properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                   |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.4.0'`                     |\n| `_model_name`           | string                               | `'SelectMultipleModel'`       |\n```\n\n----------------------------------------\n\nTITLE: Creating ToggleButton Widget in Python with IPyWidgets\nDESCRIPTION: Creates a toggleable button that maintains its state (pressed or not pressed). The button includes a description, tooltip, and a check icon, and can be styled using predefined button styles.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwidgets.ToggleButton(\n    value=False,\n    description='Click me',\n    disabled=False,\n    button_style='', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Description',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\n```\n\n----------------------------------------\n\nTITLE: Defining IntSliderModel and IntSliderView in Jupyter Widgets\nDESCRIPTION: Outlines the attributes and properties for the IntSliderModel and IntSliderView widgets. Includes details on CSS classes, model and view information, user interaction settings, and value constraints.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### IntSliderModel (@jupyter-widgets/controls, 1.2.0); IntSliderView (@jupyter-widgets/controls, 1.2.0)\n\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.2.0'`                     |\n| `_model_name`           | string                                       | `'IntSliderModel'`            |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.2.0'`                     |\n| `_view_name`            | string                                       | `'IntSliderView'`             |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (integer)                             | `100`                         | Max value                                                         |\n| `min`                   | number (integer)                             | `0`                           | Min value                                                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'d'`                         | Format for the readout                                            |\n| `step`                  | number (integer)                             | `1`                           | Minimum step to increment the value                               |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     |\n| `value`                 | number (integer)                             | `0`                           | Int value                                                         |\n```\n\n----------------------------------------\n\nTITLE: Creating Time Series Chart with bqplot\nDESCRIPTION: Generates a time series chart using bqplot with random data, setting up scales, axes, and creating a figure object for displaying temporal data.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsecurity_1 = np.cumsum(np.random.randn(150)) + 100.\n\ndates = date_range(start='01-01-2007', periods=150)\n\ndt_x = bq.DateScale()\nsc_y = bq.LinearScale()\n\ntime_series = bq.Lines(x=dates, y=security_1, scales={'x': dt_x, 'y': sc_y})\nax_x = bq.Axis(scale=dt_x)\nax_y = bq.Axis(scale=sc_y, orientation='vertical')\n\nfig = bq.Figure(marks=[time_series], axes=[ax_x, ax_y],\n                fig_margin=dict(top=0, bottom=80, left=30, right=20))\n```\n\n----------------------------------------\n\nTITLE: Jupyter Dropdown Widget Attributes\nDESCRIPTION: Details the attributes for dropdown selection widget including options, labels, and user interaction settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_options_labels` | array | `[]` |\n| `disabled` | boolean | `false` | Enable or disable user changes |\n```\n\n----------------------------------------\n\nTITLE: Checkbox Widget with HTML Description Disabled\nDESCRIPTION: Creates a Checkbox widget with HTML in the description that will be displayed as plain text because description_allow_html is set to False.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_sanitizer.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCheckbox(description=\"<p><i>italic</i></p> <p><b>bold</b></p>\", description_allow_html=False)\n```\n\n----------------------------------------\n\nTITLE: VBox with HBox and Sliders Layout\nDESCRIPTION: Creating a VBox layout containing multiple HBoxes with sliders, range sliders, progress bars and other controls\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Alignment.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nVBox([HBox([Button(), FloatRangeSlider(), Text(), Button()]), \n      HBox([Button(), FloatText(),\n            FloatProgress(value=40), Checkbox(description='Check')]), \n      HBox([ToggleButton(), IntSlider(description='Foobar'),\n            Dropdown(options=['foo', 'bar']), Valid()]),\n     ])\n```\n\n----------------------------------------\n\nTITLE: Creating Named Grid Areas in Jupyter Widgets\nDESCRIPTION: Demonstrates how to create a grid layout with named areas using Jupyter Widgets. It creates a header, main content, sidebar, and footer using Buttons and GridBox.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nheader  = Button(description='Header',\n                 layout=Layout(width='auto', grid_area='header'),\n                 style=ButtonStyle(button_color='lightblue'))\nmain    = Button(description='Main',\n                 layout=Layout(width='auto', grid_area='main'),\n                 style=ButtonStyle(button_color='moccasin'))\nsidebar = Button(description='Sidebar',\n                 layout=Layout(width='auto', grid_area='sidebar'),\n                 style=ButtonStyle(button_color='salmon'))\nfooter  = Button(description='Footer',\n                 layout=Layout(width='auto', grid_area='footer'),\n                 style=ButtonStyle(button_color='olive'))\n\nGridBox(children=[header, main, sidebar, footer],\n        layout=Layout(\n            width='50%',\n            grid_template_rows='auto auto auto',\n            grid_template_columns='25% 25% 25% 25%',\n            grid_template_areas='''\n            \"header header header header\"\n            \"main main . sidebar \"\n            \"footer footer footer footer\"\n            '''))\n```\n\n----------------------------------------\n\nTITLE: Styling Widget Borders in ipywidgets\nDESCRIPTION: Shows how to use the layout attributes to style individual borders of a widget. This example applies a custom bottom border to a Button widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Button\nButton(description=\"Click me\", layout={'border_bottom': '3px solid blue'})\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image Widget from a Local File\nDESCRIPTION: This snippet creates and displays an Image widget using a local PNG file.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Media widgets.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nImage.from_file(\"images/WidgetArch.png\")\n```\n\n----------------------------------------\n\nTITLE: Creating Valid Widget in Python with IPyWidgets\nDESCRIPTION: Creates a validation indicator widget that displays whether an input or condition is valid. This simple widget starts with a value of False and displays a description of 'Valid!' when its value is set to True.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Valid(\n    value=False,\n    description='Valid!',\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing the VariableInspectorWindow class\nDESCRIPTION: Defines the core VariableInspectorWindow class that creates a widget to display variables in the IPython namespace. It registers with IPython events to update when cells are executed and provides methods to display and close the widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass VariableInspectorWindow(object):\n    instance = None\n    \n    def __init__(self, ipython):\n        \"\"\"Public constructor.\"\"\"\n        if VariableInspectorWindow.instance is not None:\n            raise Exception(\"\"\"Only one instance of the Variable Inspector can exist at a \n                time.  Call close() on the active instance before creating a new instance.\n                If you have lost the handle to the active instance, you can re-obtain it\n                via `VariableInspectorWindow.instance`.\"\"\"\n        \n        VariableInspectorWindow.instance = self\n        self.closed = False\n        self.namespace = NamespaceMagics()\n        self.namespace.shell = ipython.kernel.shell\n        \n        self._box = widgets.Box()\n        self._box.layout.overflow = 'visible scroll'\n        self._table = widgets.HTML(value = 'Not hooked')\n        self._box.children = [self._table]\n        \n        self._ipython = ipython\n        self._ipython.events.register('post_run_cell', self._fill)\n        \n    def close(self):\n        \"\"\"Close and remove hooks.\"\"\"\n        if not self.closed:\n            self._ipython.events.unregister('post_run_cell', self._fill)\n            self._box.close()\n            self.closed = True\n            VariableInspectorWindow.instance = None\n\n    def _fill(self):\n        \"\"\"Fill self with variable information.\"\"\"\n        values = self.namespace.who_ls()\n        self._table.value = '<div class=\"rendered_html jp-RenderedHTMLCommon\"><table><thead><tr><th>Name</th><th>Type</th><th>Value</th></tr></thead><tr><td>' + \\\n            '</td></tr><tr><td>'.join(['{0}</td><td>{1}</td><td>{2}'.format(v, type(eval(v)).__name__, str(eval(v))) for v in values]) + \\\n            '</td></tr></table></div>'\n\n    def _repr_mimebundle_(self, **kwargs):\n        return self._box._repr_mimebundle_(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating FloatText Widget in Python with IPyWidgets\nDESCRIPTION: Creates a simple text input field that accepts any floating-point value. Unlike BoundedFloatText, this widget doesn't restrict the input range, allowing any valid float with an initial value of 7.5.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwidgets.FloatText(\n    value=7.5,\n    description='Any:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: BoundedFloatText Widget Model and View Specification\nDESCRIPTION: Specification for a bounded float text input widget with configurable min/max values and update behavior. Includes model attributes for value constraints, styling, and interaction behaviors.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array of string | `[]` | CSS classes applied to widget DOM element |\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string | `'2.0.0'` |\n| `_model_name` | string | `'BoundedFloatTextModel'` |\n| `value` | number (float) | `0.0` | Float value |\n```\n\n----------------------------------------\n\nTITLE: Creating AppLayout without Right Sidebar\nDESCRIPTION: Demonstrates AppLayout with header, left sidebar, center, and footer but no right sidebar.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=header_button,\n          left_sidebar=left_button,\n          center=center_button,\n          right_sidebar=None,\n          footer=footer_button)\n```\n\n----------------------------------------\n\nTITLE: IntProgress Widget Component Specification\nDESCRIPTION: Specifies the IntProgress widget component with progress bar styling options, value range controls, and orientation settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                           |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ---------------------------------------------- |\n| `_dom_classes`          | array                                                                | `[]`                          | CSS classes applied to widget DOM element      |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.1.0'`                     |\n| `_model_name`           | string                                                               | `'IntProgressModel'`          |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.1.0'`                     |\n| `_view_name`            | string                                                               | `'ProgressView'`              |\n| `bar_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the progress bar. |\n| `description`           | string                                                               | `''`                          | Description of the control.                    |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n| `max`                   | number (integer)                                                     | `100`                         | Max value                                      |\n| `min`                   | number (integer)                                                     | `0`                           | Min value                                      |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`)                         | `'horizontal'`                | Vertical or horizontal.                        |\n| `style`                 | reference to ProgressStyle widget                                    | reference to new instance     |\n| `value`                 | number (integer)                                                     | `0`                           | Int value                                      |\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Image Chooser for scikit-image Gallery\nDESCRIPTION: Implements an interactive function to browse and select images from the scikit-image data module, displaying the chosen image using the custom 'arr2img' function.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef choose_img(name):\n    # Let's store the result in the global `img` that we can then use in our image editor below\n    global img\n    img = getattr(data, name)()\n    return arr2img(img)\n\n# Skip 'load' and 'lena', two functions that don't actually return images\ninteract(choose_img, name=sorted(set(data.__all__)-{'lena', 'load'}));\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordModel and PasswordView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the PasswordModel and PasswordView widgets. These widgets handle password input with various customization options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n### PasswordModel (@jupyter-widgets/controls, 1.5.0); PasswordView (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'PasswordModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.5.0'`                     |\n| `_view_name`            | string                               | `'PasswordView'`              |\n| `continuous_update`     | boolean                              | `true`                        | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`           | string                               | `''`                          | Description of the control.                                                                                  |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).                                                       |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed                                                      |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `value`                 | string                               | `''`                          | String value                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: IntRangeSlider Widget Specification (Jupyter Widgets Controls)\nDESCRIPTION: Defines the attributes and configuration options for the IntRangeSlider widget, which allows selection of a range of integer values. Includes continuous update settings, display options, and value constraints.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.5.0'`                     |\n| `_model_name`           | string                                       | `'IntRangeSliderModel'`       |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.5.0'`                     |\n| `_view_name`            | string                                       | `'IntRangeSliderView'`        |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is sliding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `description_tooltip`   | `null` or string                             | `null`                        | Tooltip for the description (defaults to description).            |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (integer)                             | `100`                         | Max value                                                         |\n| `min`                   | number (integer)                             | `0`                           | Min value                                                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'d'`                         | Format for the readout                                            |\n| `step`                  | number (integer)                             | `1`                           | Minimum step that the value can take                              |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     | Slider style customizations.                                      |\n| `value`                 | array                                        | `[0, 1]`                      | Tuple of (lower, upper) bounds                                    |\n```\n\n----------------------------------------\n\nTITLE: FloatLogSlider Widget Specification\nDESCRIPTION: Model and view specifications for a logarithmic slider widget in Jupyter. Provides logarithmic value selection with configurable base, range, and interaction behavior. Version 2.0.0 of @jupyter-widgets/controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                                                     | Default                       | Help                                                              |\n| ------------------------ | ------------------------------------------------------------------------ | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`           | array of string                                                          | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`          | string                                                                   | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                                                                   | `'2.0.0'`                     |\n| `_model_name`            | string                                                                   | `'FloatLogSliderModel'`       |\n| `_view_module`           | string                                                                   | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                                                                   | `'2.0.0'`                     |\n| `_view_name`             | string                                                                   | `'FloatLogSliderView'`        |\n```\n\n----------------------------------------\n\nTITLE: IntProgress Widget Model and View Specification\nDESCRIPTION: Specification for IntProgress widget model and view including attributes for progress bar customization. The component is part of @jupyter-widgets/controls v1.4.0 and supports styling, range controls, and descriptions.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nIntProgressModel (@jupyter-widgets/controls, 1.4.0); ProgressView (@jupyter-widgets/controls, 1.4.0)\n\nAttributes include DOM classes, model/view specifications, value range controls (min/max), bar styling options, and description customization. Default max value is 100 and supports customizable bar styles including success, info, warning, and danger.\n```\n\n----------------------------------------\n\nTITLE: Customizing AppLayout Pane Dimensions\nDESCRIPTION: Demonstrates how to adjust the relative and absolute dimensions of AppLayout sections using pane_widths and pane_heights parameters.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=header_button,\n          left_sidebar=left_button,\n          center=center_button,\n          right_sidebar=right_button,\n          footer=footer_button,\n          pane_widths=[3, 3, 1],\n          pane_heights=[1, 5, '60px'])\n```\n\n----------------------------------------\n\nTITLE: Using the FileUpload Widget Value Attribute\nDESCRIPTION: Demonstrates how to retrieve and use uploaded file content from a FileUpload widget. The value attribute contains a tuple with dictionaries for each uploaded file.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nuploader = widgets.FileUpload()\ndisplay(uploader)\n\n# upload something...\n\n# once a file is uploaded, use the `.value` attribute to retrieve the content:\nuploader.value\n#=> (\n#=>   {\n#=>     'name': 'example.txt',\n#=>     'type': 'text/plain',\n#=>     'size': 36,\n#=>     'last_modified': datetime.datetime(2020, 1, 9, 15, 58, 43, 321000, tzinfo=datetime.timezone.utc), \n#=>     'content': <memory at 0x10c1b37c8>\n#=>   },\n#=> )\n```\n\n----------------------------------------\n\nTITLE: Creating HTMLMath Widget in Python with IPyWidgets\nDESCRIPTION: Creates a widget for displaying HTML with math content support. This example shows basic HTML with italic formatting, but the widget can also render LaTeX mathematical expressions when provided.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nwidgets.HTMLMath(\n    value=r\"Some<i>HTML</i>\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Titles for Tab Containers\nDESCRIPTION: Shows how to set titles for tabs in a Tab container widget using the titles attribute. This feature allows setting titles both in the constructor and as an attribute after creation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Tab, IntSlider, Text\nTab([IntSlider(), Text()], titles=('Slider', 'Text'))\n```\n\n----------------------------------------\n\nTITLE: Label Style Model Definition\nDESCRIPTION: Specification for LabelStyleModel that defines styling properties for label widgets including fonts, colors, and decorations. Version 2.0.0 of @jupyter-widgets/controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| _model_module | string | '@jupyter-widgets/controls' |\n| background | null or string | null | Background specifications. |\n| text_color | null or string | null | Text color |\n```\n\n----------------------------------------\n\nTITLE: Applying Image Editing Function with Fixed Parameters\nDESCRIPTION: Demonstrates the use of the 'edit_image' function by applying blur and reducing red channel intensity on the coffee image.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nedit_image(i, sigma=5, R=0.1)\n```\n\n----------------------------------------\n\nTITLE: Link Widget Configuration (Jupyter Widgets)\nDESCRIPTION: Specification for Link widget model that creates connections between widget properties. Includes source and target configuration for linking widget traits.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n### LinkModel (@jupyter-widgets/controls, 1.4.0); None (@jupyter-widgets/controls, 1.4.0)\n\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `source` | array | `[]` | The source (widget, 'trait_name') pair |\n| `target` | array | `[]` | The target (widget, 'trait_name') pair |\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Box Layout Container in Python with IPyWidgets\nDESCRIPTION: Creates a generic container widget that holds multiple child widgets. This example creates a Box containing four Label widgets, demonstrating the basic container functionality without specific layout directives.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nitems = [widgets.Label(str(i)) for i in range(4)]\nwidgets.Box(items)\n```\n\n----------------------------------------\n\nTITLE: Using Label Widgets for Flexible Layout\nDESCRIPTION: Creates a horizontal box (HBox) containing a Label widget and an IntSlider, offering more flexibility for layouts with long descriptions.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import HBox, Label\n\nHBox([Label('A too long description'), IntSlider()])\n```\n\n----------------------------------------\n\nTITLE: Replacing Multiple Widgets in GridspecLayout with Slices\nDESCRIPTION: Demonstrates how to replace multiple widgets at once in a GridspecLayout using slice notation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ngrid[:3, 1:] = create_expanded_button('I am new too!!!!!', 'warning')\n```\n\n----------------------------------------\n\nTITLE: Defining FloatText Widget Attributes in Markdown\nDESCRIPTION: This snippet details the attributes, types, default values, and help text for the FloatTextModel and FloatTextView widgets from the @jupyter-widgets/controls package.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'FloatTextModel'`            |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.5.0'`                     |\n| `_view_name`            | string                               | `'FloatTextView'`             |\n| `continuous_update`     | boolean                              | `false`                       | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`           | string                               | `''`                          | Description of the control.                                                                                  |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).                                                       |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `step`                  | `null` or number (float)             | `null`                        | Minimum step to increment the value                                                                          |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `value`                 | number (float)                       | `0.0`                         | Float value                                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Defining Wrapper Functions for NetworkX Graph Generators\nDESCRIPTION: Creates wrapper functions around different NetworkX graph generation algorithms to standardize their interfaces. Each function takes the same parameters (n, m, k, p) allowing them to be used interchangeably in the interactive visualization.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Exploring Graphs.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# wrap a few graph generation functions so they have the same signature\n\ndef random_lobster(n, m, k, p):\n    return nx.random_lobster(n, p, p / m)\n\ndef powerlaw_cluster(n, m, k, p):\n    return nx.powerlaw_cluster_graph(n, m, p)\n\ndef erdos_renyi(n, m, k, p):\n    return nx.erdos_renyi_graph(n, p)\n\ndef newman_watts_strogatz(n, m, k, p):\n    return nx.newman_watts_strogatz_graph(n, k, p)\n\ndef plot_random_graph(n, m, k, p, generator):\n    g = generator(n, m, k, p)\n    nx.draw(g)\n    plt.show()\n```\n\n----------------------------------------\n\nTITLE: Defining GridBox Widget Attributes in Markdown\nDESCRIPTION: This snippet details the attributes, types, default values, and help text for the GridBoxModel and GridBoxView widgets from the @jupyter-widgets/controls package.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.5.0'`                     |\n| `_model_name`           | string                                                               | `'GridBoxModel'`              |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.5.0'`                     |\n| `_view_name`            | string                                                               | `'GridBoxView'`               |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: Radio Buttons Widget Configuration\nDESCRIPTION: Specification for RadioButtonsModel and RadioButtonsView widgets that implement radio button selection functionality with customizable options and styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                   |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n```\n\n----------------------------------------\n\nTITLE: FloatSlider Widget Attributes Table\nDESCRIPTION: Markdown table defining all attributes for FloatSliderModel and FloatSliderView components, including types, defaults, and descriptions. The widget provides a sliding interface for float value selection with configurable behavior and display options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                                                     | Default                       | Help                                                              |\n| ------------------------ | ------------------------------------------------------------------------ | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`           | array of string                                                          | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`          | string                                                                   | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                                                                   | `'2.0.0'`                     |\n| `_model_name`            | string                                                                   | `'FloatSliderModel'`          |\n| `_view_module`           | string                                                                   | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                                                                   | `'2.0.0'`                     |\n| `_view_name`             | string                                                                   | `'FloatSliderView'`           |\n| `behavior`               | string (one of `'drag-tap'`, `'drag-snap'`, `'tap'`, `'drag'`, `'snap'`) | `'drag-tap'`                  | Slider dragging behavior.                                         |\n| `continuous_update`      | boolean                                                                  | `true`                        | Update the value of the widget as the user is holding the slider. |\n```\n\n----------------------------------------\n\nTITLE: Password Widget Configuration (Jupyter Widgets)\nDESCRIPTION: Specification for Password widget model and view that handles secure password input. Features continuous updates, placeholder text, and disabled state configuration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n### PasswordModel (@jupyter-widgets/controls, 1.4.0); PasswordView (@jupyter-widgets/controls, 1.4.0)\n\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array of string | `[]` | CSS classes applied to widget DOM element |\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `continuous_update` | boolean | `true` | Update the value as the user types |\n| `value` | string | `''` | String value |\n```\n\n----------------------------------------\n\nTITLE: Defining DropdownModel and DropdownView Attributes in Markdown\nDESCRIPTION: This snippet describes the attributes, types, default values, and help text for the DropdownModel and DropdownView in Jupyter Widgets controls version 1.2.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.2.0'`                     |\n| `_model_name`           | string                               | `'DropdownModel'`             |\n| `_options_labels`       | array of string                      | `[]`                          | The labels for the options.               |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.2.0'`                     |\n| `_view_name`            | string                               | `'DropdownView'`              |\n| `description`           | string                               | `''`                          | Description of the control.               |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes            |\n| `index`                 | `null` or number (integer)           | `null`                        | Selected index                            |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Item Properties in CSS\nDESCRIPTION: Demonstrates how to use grid-column and grid-row properties to position items within a CSS Grid. These properties determine a grid item's location by referring to specific grid lines.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n.item {\n  grid-column: <number> | <name> | span <number> | span <name> | auto / \n               <number> | <name> | span <number> | span <name> | auto\n  grid-row: <number> | <name> | span <number> | span <name> | auto /\n            <number> | <name> | span <number> | span <name> | auto\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CheckboxModel and CheckboxView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes for CheckboxModel and CheckboxView, including DOM classes, module versions, and various properties like description, disabled state, and value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### CheckboxModel (@jupyter-widgets/controls, 2.0.0); CheckboxView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                              | Default                       | Help                                                                |\n| ------------------------ | --------------------------------- | ----------------------------- | ------------------------------------------------------------------- |\n| `_dom_classes`           | array of string                   | `[]`                          | CSS classes applied to widget DOM element                           |\n| `_model_module`          | string                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                            | `'2.0.0'`                     |\n| `_model_name`            | string                            | `'CheckboxModel'`             |\n| `_view_module`           | string                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                            | `'2.0.0'`                     |\n| `_view_name`             | string                            | `'CheckboxView'`              |\n| `description`            | string                            | `''`                          | Description of the control.                                         |\n| `description_allow_html` | boolean                           | `false`                       | Accept HTML in the description.                                     |\n| `disabled`               | boolean                           | `false`                       | Enable or disable user changes.                                     |\n| `indent`                 | boolean                           | `true`                        | Indent the control to align with other controls with a description. |\n| `layout`                 | reference to Layout widget        | reference to new instance     |\n| `style`                  | reference to CheckboxStyle widget | reference to new instance     | Styling customizations                                              |\n| `tabbable`               | `null` or boolean                 | `null`                        | Is widget tabbable?                                                 |\n| `tooltip`                | `null` or string                  | `null`                        | A tooltip caption.                                                  |\n| `value`                  | boolean                           | `false`                       | Bool value                                                          |\n```\n\n----------------------------------------\n\nTITLE: Defining EmailModel and EmailView in TypeScript\nDESCRIPTION: This snippet shows the TypeScript code for defining the EmailModel and EmailView classes. It includes the model's default values and serializers, as well as the initial render method for the view.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport class EmailModel extends DOMWidgetModel {\n  defaults() {\n    return {...super.defaults(),\n      _model_name: EmailModel.model_name,\n      _model_module: EmailModel.model_module,\n      _model_module_version: EmailModel.model_module_version,\n      _view_name: EmailModel.view_name,\n      _view_module: EmailModel.view_module,\n      _view_module_version: EmailModel.view_module_version,\n      value : 'Hello World'\n    };\n  }\n\n  static serializers: ISerializers = {\n      ...DOMWidgetModel.serializers,\n      // Add any extra serializers here\n    }\n\n  static model_name = 'EmailModel';\n  static model_module = MODULE_NAME;\n  static model_module_version = MODULE_VERSION;\n  static view_name = 'EmailView';\n  static view_module = MODULE_NAME;\n  static view_module_version = MODULE_VERSION;\n}\n\n\nexport class EmailView extends DOMWidgetView {\n  render() {\n    this.el.classList.add('custom-widget');\n\n    this.value_changed();\n    this.model.on('change:value', this.value_changed, this);\n  }\n\n  value_changed() {\n    this.el.textContent = this.model.get('value');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Widget View in JavaScript\nDESCRIPTION: Demonstrates how to define a custom widget view in JavaScript that responds to model changes. Includes rendering and event handling for the count attribute.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndefine('mywidget', ['@jupyter-widgets/base'], function(widgets) {\n\tvar MyWidgetView = widgets.DOMWidgetView.extend({\n    \trender: function() {\n        \tMyWidgetView.__super__.render.apply(this, arguments);\n        \tthis._count_changed();\n        \tthis.listenTo(this.model, 'change:count', this._count_changed, this);\n    \t},\n \n    \t_count_changed: function() {\n        \tvar old_value = this.model.previous('count');\n        \tvar new_value = this.model.get('count');\n        \tthis.el.textContent = String(old_value) + ' -> ' + String(new_value);\n    \t}\n\t});\n \n\treturn {\n    \tMyWidgetView: MyWidgetView\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ColorPicker Widget Attributes in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and help text for the ColorPickerModel and ColorPickerView from @jupyter-widgets/controls version 2.0.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### ColorPickerModel (@jupyter-widgets/controls, 2.0.0); ColorPickerView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                                 | Default                       | Help                                              |\n| ------------------------ | ------------------------------------ | ----------------------------- | ------------------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element         |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'ColorPickerModel'`          |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'ColorPickerView'`           |\n| `concise`                | boolean                              | `false`                       | Display short version with just a color selector. |\n| `description`            | string                               | `''`                          | Description of the control.                       |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.                   |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes.                   |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                            |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                               |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                                |\n| `value`                  | string                               | `'black'`                     | The color value.                                  |\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Widget\nDESCRIPTION: Creates an interactive widget that allows users to input values of n between 2 and 40 to see different factorizations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Factoring.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ninteract(factorit, n=(2,40));\n```\n\n----------------------------------------\n\nTITLE: IntRangeSlider Widget Model and View Specification\nDESCRIPTION: Specification for IntRangeSlider widget model and view for dual-handle range selection. Supports continuous updates, custom formatting, and range constraints with min/max values.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nIntRangeSliderModel (@jupyter-widgets/controls, 1.4.0); IntRangeSliderView (@jupyter-widgets/controls, 1.4.0)\n\nDual-handled slider for selecting a range of integer values. Features include continuous value updates, custom formatting, min/max constraints, and step size configuration. Default range is [0, 1] with step size of 1.\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Interactive Controls using interactive\nDESCRIPTION: Shows how to achieve manual interaction control using the interactive function with a dictionary parameter.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nslow = interactive(slow_function, {'manual': True}, i=widgets.FloatSlider(min=1e4, max=1e6, step=1e4))\nslow\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Widget in Python\nDESCRIPTION: This snippet demonstrates how to create a Stack widget with multiple children, showing only one at a time based on the selected_index.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nbutton = widgets.Button(description='Click here')\nslider = widgets.IntSlider()\nstack = widgets.Stack([button, slider], selected_index=0)\nstack  # will show only the button\n```\n\n----------------------------------------\n\nTITLE: Adding a Widget to an Existing 2x2 Layout\nDESCRIPTION: Demonstrates how to add a widget to an empty position in an existing TwoByTwoLayout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlayout_2x2.top_right = top_right_button\n```\n\n----------------------------------------\n\nTITLE: Updating EmailView Render Method with Model Data\nDESCRIPTION: This TypeScript code updates the EmailView render method to use data from the model for initial rendering.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport class EmailView extends DOMWidgetView {\n  render() {\n    this._emailInput = document.createElement('input');\n    this._emailInput.type = 'email';\n    this._emailInput.value = this.model.get('value');\n    this._emailInput.disabled = this.model.get('disabled');\n      \n    this.el.appendChild(this._emailInput);\n  }\n\n  private _emailInput: HTMLInputElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Editor Function with Blur and Color Balance\nDESCRIPTION: Defines an 'edit_image' function that applies Gaussian blur and adjusts color balance of an input image based on given parameters.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef edit_image(image, sigma=0.1, R=1.0, G=1.0, B=1.0):\n    new_image = filters.gaussian(image, sigma=sigma, channel_axis=-1)\n    new_image[:,:,0] = R*new_image[:,:,0]\n    new_image[:,:,1] = G*new_image[:,:,1]\n    new_image[:,:,2] = B*new_image[:,:,2]\n    return arr2img(new_image)\n```\n\n----------------------------------------\n\nTITLE: Label Widget Configuration (Jupyter Widgets)\nDESCRIPTION: Specification for Label widget model and view that displays text labels. Contains configuration for DOM classes, model/view modules, placeholder text, and styling customizations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### LabelModel (@jupyter-widgets/controls, 1.4.0); LabelView (@jupyter-widgets/controls, 1.4.0)\n\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array of string | `[]` | CSS classes applied to widget DOM element |\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `value` | string | `''` | String value |\n```\n\n----------------------------------------\n\nTITLE: NaiveDatetime Widget Specification\nDESCRIPTION: Defines a datetime widget with customizable date range, styling, and interaction properties. Includes model and view specifications from @jupyter-widgets/controls version 2.0.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                 | Default                       | Help                                      |\n| ------------------------ | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'NaiveDatetimeModel'`        |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'DatetimeView'`              |\n```\n\n----------------------------------------\n\nTITLE: Creating HBox Layout with Label and Slider in Python with IPyWidgets\nDESCRIPTION: Creates a horizontal container with a label and a float slider arranged side by side. This demonstrates basic widget composition using the HBox layout container for horizontal arrangement of components.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nwidgets.HBox([widgets.Label(value=\"The label\"), widgets.FloatSlider()])\n```\n\n----------------------------------------\n\nTITLE: Defining BoundedFloatTextModel and FloatTextView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the BoundedFloatTextModel and FloatTextView from @jupyter-widgets/controls version 2.0.0. Includes details on value constraints, styling, and user interaction behaviors.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### BoundedFloatTextModel (@jupyter-widgets/controls, 2.0.0); FloatTextView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                                 | Default                       | Help                                                                                                         |\n| ------------------------ | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'BoundedFloatTextModel'`     |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'FloatTextView'`             |\n| `continuous_update`      | boolean                              | `false`                       | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`            | string                               | `''`                          | Description of the control.                                                                                  |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.                                                                              |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `max`                    | number (float)                       | `100.0`                       | Max value                                                                                                    |\n| `min`                    | number (float)                       | `0.0`                         | Min value                                                                                                    |\n| `step`                   | `null` or number (float)             | `null`                        | Minimum step to increment the value                                                                          |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                                                                                          |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                                                                                           |\n| `value`                  | number (float)                       | `0.0`                         | Float value                                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Jupyter Textarea Widget API Documentation\nDESCRIPTION: API specification for the Jupyter Textarea widget component, extending Text widget functionality with multi-line support. Includes additional rows property for controlling textarea height.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                     | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                     | `'~2.1.0'`                |\n| `_model_name`           | string                     | `'TextareaModel'`         |\n| `_view_module`          | string                     | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                     | `'~2.1.0'`                |\n| `_view_name`            | string                     | `'TextareaView'`          |\n| `description`           | string                     | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                    | `false`                   | Enable or disable user changes                                                                |\n| `layout`                | reference to Layout widget | reference to new instance |\n| `msg_throttle`          | number (integer)           | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `placeholder`           | string                     | `'\\u200b'`                | Placeholder text to display when nothing has been typed                                       |\n| `rows`                  | `null` or number (integer) | `null`                    |\n| `value`                 | string                     | `''`                      | String value                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Template Rows and Columns in CSS\nDESCRIPTION: Specifies the structure of grid rows and columns using length, percentage, or fractional units. Allows naming of grid lines.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_17\n\nLANGUAGE: CSS\nCODE:\n```\ngrid-template-rows: <track-size> ... | <line-name> <track-size> ...;\ngrid-template-columns: <track-size> ... | <line-name> <track-size> ...;\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonModel and ButtonView in Jupyter Widgets\nDESCRIPTION: Specification for ButtonModel and ButtonView from @jupyter-widgets/controls package. Includes attributes for styling, labeling, and interaction configuration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### ButtonModel (@jupyter-widgets/controls, 1.0.0); ButtonView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                                                              | Default                       | Help                                              |\n| ----------------------- | --------------------------------------------------------------------------------- | ----------------------------- | ------------------------------------------------- |\n| `_dom_classes`          | array                                                                             | `[]`                          | CSS classes applied to widget DOM element         |\n| `_model_module`         | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                            | `'1.0.0'`                     |\n| `_model_name`           | string                                                                            | `'ButtonModel'`               |\n| `_view_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                            | `'1.0.0'`                     |\n| `_view_name`            | string                                                                            | `'ButtonView'`                |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the button.          |\n| `description`           | string                                                                            | `''`                          | Button label.                                     |\n| `disabled`              | boolean                                                                           | `false`                       | Enable or disable user changes.                   |\n| `icon`                  | string                                                                            | `''`                          | Font-awesome icon name, without the 'fa-' prefix. |\n| `layout`                | reference to Layout widget                                                        | reference to new instance     |\n| `style`                 | reference to ButtonStyle widget                                                   | reference to new instance     |\n| `tooltip`               | string                                                                            | `''`                          | Tooltip caption of the button.                    |\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Controller\nDESCRIPTION: Creates a new instance of the Controller class with default settings to connect to the first available game controller.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Controller.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nController()\n```\n\n----------------------------------------\n\nTITLE: Creating Weather Maps Dictionary\nDESCRIPTION: Creates a dictionary mapping weather map types to their corresponding TileLayer objects for use with the dropdown selector.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nweather_maps = {'Temperature' : temp,\n                'Precipitation' : precipitation}\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Widgets for Layout Examples\nDESCRIPTION: Defines helper functions and creates various buttons, text inputs, and sliders that will be used throughout the notebook examples to demonstrate different layout capabilities.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Utils widgets\nfrom ipywidgets import Button, Layout, jslink, IntText, IntSlider\n\ndef create_expanded_button(description, button_style):\n    return Button(description=description, button_style=button_style, layout=Layout(height='auto', width='auto'))\n\ntop_left_button = create_expanded_button(\"Top left\", 'info')\ntop_right_button = create_expanded_button(\"Top right\", 'success')\nbottom_left_button = create_expanded_button(\"Bottom left\", 'danger')\nbottom_right_button = create_expanded_button(\"Bottom right\", 'warning')\n\ntop_left_text = IntText(description='Top left', layout=Layout(width='auto', height='auto'))\ntop_right_text = IntText(description='Top right', layout=Layout(width='auto', height='auto'))\nbottom_left_slider = IntSlider(description='Bottom left', layout=Layout(width='auto', height='auto'))\nbottom_right_slider = IntSlider(description='Bottom right', layout=Layout(width='auto', height='auto'))\n```\n\n----------------------------------------\n\nTITLE: Creating IntText Widget in Python with IPyWidgets\nDESCRIPTION: Creates a simple text input field that accepts any integer value. Unlike BoundedIntText, this widget doesn't restrict the input range, allowing any valid integer with an initial value of 7.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwidgets.IntText(\n    value=7,\n    description='Any:',\n    disabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Defining IntProgressModel and ProgressView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the IntProgressModel and ProgressView widgets. Includes details on CSS classes, model and view information, styling options, and value constraints.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n### IntProgressModel (@jupyter-widgets/controls, 1.2.0); ProgressView (@jupyter-widgets/controls, 1.2.0)\n\n| Attribute               | Type                                                                 | Default                       | Help                                           |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ---------------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element      |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.2.0'`                     |\n| `_model_name`           | string                                                               | `'IntProgressModel'`          |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.2.0'`                     |\n| `_view_name`            | string                                                               | `'ProgressView'`              |\n| `bar_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the progress bar. |\n| `description`           | string                                                               | `''`                          | Description of the control.                    |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n| `max`                   | number (integer)                                                     | `100`                         | Max value                                      |\n| `min`                   | number (integer)                                                     | `0`                           | Min value                                      |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`)                         | `'horizontal'`                | Vertical or horizontal.                        |\n| `style`                 | reference to ProgressStyle widget                                    | reference to new instance     |\n| `value`                 | number (integer)                                                     | `0`                           | Int value                                      |\n```\n\n----------------------------------------\n\nTITLE: Using interactive function\nDESCRIPTION: Demonstrates using the interactive function to create a widget without immediate display.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nw = interactive(f, a=10, b=20)\n```\n\n----------------------------------------\n\nTITLE: Closing All Accordion Sections in Python\nDESCRIPTION: This code shows how to close all sections of an Accordion widget by setting its selected_index to None.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_63\n\nLANGUAGE: python\nCODE:\n```\naccordion.selected_index = None\n```\n\n----------------------------------------\n\nTITLE: Displaying Widget Before Closing\nDESCRIPTION: Displays a widget before demonstrating how to close it. This is part of showing the widget lifecycle management.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndisplay(w)\n```\n\n----------------------------------------\n\nTITLE: Button Widget Specification\nDESCRIPTION: Defines the model and view attributes for the Button widget including styling, label, icon and interaction properties. Uses ButtonModel and ButtonView from @jupyter-widgets/controls v1.5.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                              | Default                       | Help                                              |\n| ----------------------- | --------------------------------------------------------------------------------- | ----------------------------- | ------------------------------------------------- |\n| `_dom_classes`          | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element         |\n| `_model_module`         | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                            | `'1.5.0'`                     |\n| `_model_name`           | string                                                                            | `'ButtonModel'`               |\n| `_view_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                            | `'1.5.0'`                     |\n| `_view_name`            | string                                                                            | `'ButtonView'`                |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the button.          |\n| `description`           | string                                                                            | `''`                          | Button label.                                     |\n| `disabled`              | boolean                                                                           | `false`                       | Enable or disable user changes.                   |\n| `icon`                  | string                                                                            | `''`                          | Font-awesome icon name, without the 'fa-' prefix. |\n| `layout`                | reference to Layout widget                                                        | reference to new instance     |\n| `style`                 | reference to ButtonStyle widget                                                   | reference to new instance     |\n| `tooltip`               | string                                                                            | `''`                          | Tooltip caption of the button.                    |\n```\n\n----------------------------------------\n\nTITLE: RadioButtonsModel Specification\nDESCRIPTION: Specification for the RadioButtons widget model defining properties for radio button controls including options, labels, and interactivity settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                 | Default                       | Help                                      |\n| ------------------------ | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'RadioButtonsModel'`         |\n| `_options_labels`        | array of string                      | `[]`                          | The labels for the options.               |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'RadioButtonsView'`          |\n| `description`            | string                               | `''`                          | Description of the control.               |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.           |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes            |\n| `index`                  | `null` or number (integer)           | `null`                        | Selected index                            |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                       |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                        |\n```\n\n----------------------------------------\n\nTITLE: ButtonModel and ButtonView Configuration Documentation\nDESCRIPTION: Specification for ButtonModel and ButtonView components from @jupyter-widgets/controls package. Details attributes for button styling, behavior, and accessibility features.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                              | Default                       | Help                                               |\n| ----------------------- | --------------------------------------------------------------------------------- | ----------------------------- | -------------------------------------------------- |\n| `_dom_classes`          | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element          |\n| `_model_module`         | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                            | `'2.0.0'`                     |\n| `_model_name`           | string                                                                            | `'ButtonModel'`               |\n| `_view_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                            | `'2.0.0'`                     |\n| `_view_name`            | string                                                                            | `'ButtonView'`                |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the button.           |\n| `description`           | string                                                                            | `''`                          | Button label.                                      |\n| `disabled`              | boolean                                                                           | `false`                       | Enable or disable user changes.                    |\n| `icon`                  | string                                                                            | `''`                          | Font-awesome icon names, without the 'fa-' prefix. |\n| `layout`                | reference to Layout widget                                                        | reference to new instance     |\n| `style`                 | reference to ButtonStyle widget                                                   | reference to new instance     |\n| `tabbable`              | `null` or boolean                                                                 | `null`                        | Is widget tabbable?                                |\n| `tooltip`               | `null` or string                                                                  | `null`                        | A tooltip caption.                                 |\n```\n\n----------------------------------------\n\nTITLE: Styling IntSlider Widget\nDESCRIPTION: Shows how to customize an IntSlider widget's handle color.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Styling.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import IntSlider\n\ns1 = IntSlider(description='Blue handle')\ns1.style.handle_color = 'lightblue'\ns1\n```\n\n----------------------------------------\n\nTITLE: SelectionRangeSlider Widget Specification\nDESCRIPTION: Configuration specification for SelectionRangeSlider widget defining model and view attributes. Includes continuous update behavior, orientation options, and styling properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n```\n\n----------------------------------------\n\nTITLE: HTMLMath Style Model Specification\nDESCRIPTION: Style model and view specification for HTMLMath widget defining styling attributes like background, description width, font size, and text color.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'2.0.0'`                     |\n| `_model_name`           | string           | `'HTMLMathStyleModel'`        |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'2.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n```\n\n----------------------------------------\n\nTITLE: Creating an HBox Container Widget\nDESCRIPTION: Creates an HBox container widget that horizontally arranges its children. This is used to create row-based layouts of widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nitems = [widgets.Label(str(i)) for i in range(4)]\nwidgets.HBox(items)\n```\n\n----------------------------------------\n\nTITLE: FileUpload Widget Specification\nDESCRIPTION: Model and view specifications for a file upload widget. Supports single/multiple file uploads with customizable button styling and icon. Handles file data and metadata with error reporting capabilities.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### FileUploadModel (@jupyter-widgets/controls, 1.5.0); FileUploadView (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                                                                              | Default                       | Help                                                   |\n| ----------------------- | --------------------------------------------------------------------------------- | ----------------------------- | ------------------------------------------------------ |\n| `_counter`              | number (integer)                                                                  | `0`                           |\n| `_dom_classes`          | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                            | `'1.5.0'`                     |\n| `_model_name`           | string                                                                            | `'FileUploadModel'`           |\n| `_view_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                            | `'1.5.0'`                     |\n| `_view_name`            | string                                                                            | `'FileUploadView'`            |\n| `accept`                | string                                                                            | `''`                          | File types to accept, empty string for all             |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the button.               |\n| `data`                  | array                                                                             | `[]`                          | List of file content (bytes)                           |\n| `description`           | string                                                                            | `''`                          | Description of the control.                            |\n| `description_tooltip`   | `null` or string                                                                  | `null`                        | Tooltip for the description (defaults to description). |\n| `disabled`              | boolean                                                                           | `false`                       | Enable or disable button                               |\n| `error`                 | string                                                                            | `''`                          | Error message                                          |\n| `icon`                  | string                                                                            | `'upload'`                    | Font-awesome icon name, without the 'fa-' prefix.      |\n| `layout`                | reference to Layout widget                                                        | reference to new instance     |\n| `metadata`              | array                                                                             | `[]`                          | List of file metadata                                  |\n| `multiple`              | boolean                                                                           | `false`                       | If True, allow for multiple files upload               |\n| `style`                 | reference to ButtonStyle widget                                                   | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying an Audio Widget from a Local File\nDESCRIPTION: This snippet creates an Audio widget from a local MP3 file, enables controls, and displays it.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Media widgets.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nAudio.from_file(\"images/Big.Buck.Bunny.mp3\", controls=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing VBox and HBox Helper Functions in Python\nDESCRIPTION: Implementation of the VBox and HBox helper functions that provide simple defaults to arrange child widgets in vertical and horizontal boxes using the flexible box model. They configure layout properties for easy arrangement of widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef VBox(*pargs, **kwargs):\n    \"\"\"Displays multiple widgets vertically using the flexible box model.\"\"\"\n    box = Box(*pargs, **kwargs)\n    box.layout.display = 'flex'\n    box.layout.flex_flow = 'column'\n    box.layout.align_items = 'stretch'\n    return box\n\ndef HBox(*pargs, **kwargs):\n    \"\"\"Displays multiple widgets horizontally using the flexible box model.\"\"\"\n    box = Box(*pargs, **kwargs)\n    box.layout.display = 'flex'\n    box.layout.align_items = 'stretch'\n    return box\n```\n\n----------------------------------------\n\nTITLE: SelectionSlider Widget Specification\nDESCRIPTION: Defines attributes for SelectionSliderModel and SelectionSliderView widgets that enable single value selection using a slider interface. Includes configuration for continuous updates, orientation, and readout display.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n```\n\n----------------------------------------\n\nTITLE: Importing ipywidgets for Interactive Controls\nDESCRIPTION: Imports the interact function from ipywidgets, which will be used to create the interactive UI elements for adjusting graph parameters.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Exploring Graphs.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interact\n```\n\n----------------------------------------\n\nTITLE: ToggleButtons Model and View Component Specification\nDESCRIPTION: Defines the attributes and properties for a group of toggle buttons widget component. Includes group-specific properties like indices and multiple button styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                                        | Default                       | Help                                                                    |\n| ----------------------- | ------------------------------------------------------------------------------------------- | ----------------------------- | ----------------------------------------------------------------------- |\n| `_dom_classes`          | array of string                                                                             | `[]`                          | CSS classes applied to widget DOM element                               |\n| `_model_module`         | string                                                                                      | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                                      | `'1.4.0'`                     |\n| `_model_name`           | string                                                                                      | `'ToggleButtonsModel'`        |\n| `_options_labels`       | array of string                                                                             | `[]`                          | The labels for the options.                                             |\n| `_view_module`          | string                                                                                      | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                                      | `'1.4.0'`                     |\n| `_view_name`            | string                                                                                      | `'ToggleButtonsView'`         |\n| `button_style`          | `null` or string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the buttons.                               |\n| `description`           | string                                                                                      | `''`                          | Description of the control.                                             |\n| `description_tooltip`   | `null` or string                                                                            | `null`                        | Tooltip for the description (defaults to description).                  |\n| `disabled`              | boolean                                                                                     | `false`                       | Enable or disable user changes                                          |\n| `icons`                 | array of string                                                                             | `[]`                          | Icons names for each button (FontAwesome names without the fa- prefix). |\n| `index`                 | `null` or number (integer)                                                                  | `null`                        | Selected index                                                          |\n| `layout`                | reference to Layout widget                                                                  | reference to new instance     |\n| `style`                 | reference to ToggleButtonsStyle widget                                                      | reference to new instance     |\n| `tooltips`              | array of string                                                                             | `[]`                          | Tooltips for each button.                                               |\n```\n\n----------------------------------------\n\nTITLE: Using interact with a fixed argument\nDESCRIPTION: Shows how to use the fixed function to keep an argument constant in interact.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ninteract(h, p=5, q=fixed(20));\n```\n\n----------------------------------------\n\nTITLE: Importing required packages and hiding them from namespace\nDESCRIPTION: Imports the necessary packages for widget creation and namespace inspection, then hides them from the user namespace to avoid clutter.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets # Loads the Widget framework.\nfrom IPython.core.magics.namespace import NamespaceMagics # Used to query namespace.\n\n# For this example, hide these names, just to avoid polluting the namespace further\nget_ipython().user_ns_hidden['widgets'] = widgets\nget_ipython().user_ns_hidden['NamespaceMagics'] = NamespaceMagics\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Cell Merging in 2x2 Grid\nDESCRIPTION: Demonstrates how to prevent automatic cell merging in TwoByTwoLayout by setting the merge parameter to False.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTwoByTwoLayout(top_left=top_left_button,\n               bottom_left=bottom_left_button,\n               bottom_right=bottom_right_button,\n               merge=False)\n```\n\n----------------------------------------\n\nTITLE: HBox Widget Component Reference\nDESCRIPTION: Specification for HBoxModel and HBoxView components from @jupyter-widgets/controls. Defines a horizontal box layout container for child widgets with customizable styling options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.5.0'`                     |\n| `_model_name`           | string                                                               | `'HBoxModel'`                 |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.5.0'`                     |\n| `_view_name`            | string                                                               | `'HBoxView'`                  |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: Defining ComboboxModel and ComboboxView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the ComboboxModel and ComboboxView widgets, including model and view details, user interaction settings, and styling options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### ComboboxModel (@jupyter-widgets/controls, 1.5.0); ComboboxView (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'ComboboxModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.5.0'`                     |\n| `_view_name`            | string                               | `'ComboboxView'`              |\n| `continuous_update`     | boolean                              | `true`                        | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`           | string                               | `''`                          | Description of the control.                                                                                  |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).                                                       |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `ensure_option`         | boolean                              | `false`                       | If set, ensure value is in options. Implies continuous_update=False.                                         |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `options`               | array of string                      | `[]`                          | Dropdown options for the combobox                                                                            |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed                                                      |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `value`                 | string                               | `''`                          | String value                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Defining RadioButtonsModel and RadioButtonsView Attributes in Markdown\nDESCRIPTION: Specifies the attributes for RadioButtonsModel and RadioButtonsView from @jupyter-widgets/controls. Includes details on model and view modules, versions, and various UI-related attributes such as orientation and styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n### RadioButtonsModel (@jupyter-widgets/controls, 2.0.0); RadioButtonsView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                                         | Default                       | Help                                      |\n| ------------------------ | -------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                              | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                                       | `'2.0.0'`                     |\n| `_model_name`            | string                                       | `'RadioButtonsModel'`         |\n| `_options_labels`        | array of string                              | `[]`                          | The labels for the options.               |\n| `_view_module`           | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                                       | `'2.0.0'`                     |\n| `_view_name`             | string                                       | `'RadioButtonsView'`          |\n| `description`            | string                                       | `''`                          | Description of the control.               |\n| `description_allow_html` | boolean                                      | `false`                       | Accept HTML in the description.           |\n| `disabled`               | boolean                                      | `false`                       | Enable or disable user changes            |\n| `index`                  | `null` or number (integer)                   | `null`                        | Selected index                            |\n| `layout`                 | reference to Layout widget                   | reference to new instance     |\n| `orientation`            | string (one of `'horizontal'`, `'vertical'`) | `'vertical'`                  | Vertical or horizontal.                   |\n| `style`                  | reference to DescriptionStyle widget         | reference to new instance     | Styling customizations                    |\n| `tabbable`               | `null` or boolean                            | `null`                        | Is widget tabbable?                       |\n| `tooltip`                | `null` or string                             | `null`                        | A tooltip caption.                        |\n```\n\n----------------------------------------\n\nTITLE: Defining IntText Widget Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes, types, default values, and help text for the IntText widget. It includes properties such as continuous_update, step, and various styling options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                 | Default                       | Help                                                                                                         |\n| ------------------------ | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'IntTextModel'`              |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'IntTextView'`               |\n| `continuous_update`      | boolean                              | `false`                       | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`            | string                               | `''`                          | Description of the control.                                                                                  |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.                                                                              |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `step`                   | number (integer)                     | `1`                           | Minimum step to increment the value                                                                          |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                                                                                          |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                                                                                           |\n| `value`                  | number (integer)                     | `0`                           | Int value                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Image Widget Component Reference\nDESCRIPTION: Specification for ImageModel and ImageView components that handle image display. Includes format specification, dimension controls, and byte string value handling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                       | Help                                                                     |\n| ----------------------- | -------------------------- | ----------------------------- | ------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element                                |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.5.0'`                     |\n| `_model_name`           | string                     | `'ImageModel'`                |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.5.0'`                     |\n| `_view_name`            | string                     | `'ImageView'`                 |\n| `format`                | string                     | `'png'`                       | The format of the image.                                                 |\n| `height`                | string                     | `''`                          | Height of the image in pixels. Use layout.height for styling the widget. |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `value`                 | Bytes                      | `b''`                         | The media data as a byte string.                                         |\n| `width`                 | string                     | `''`                          | Width of the image in pixels. Use layout.width for styling the widget.   |\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerButtonModel and ControllerButtonView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the ControllerButtonModel and ControllerButtonView widgets, including model and view details, button state, and value representation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### ControllerButtonModel (@jupyter-widgets/controls, 1.5.0); ControllerButtonView (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.5.0'`                     |\n| `_model_name`           | string                     | `'ControllerButtonModel'`     |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.5.0'`                     |\n| `_view_name`            | string                     | `'ControllerButtonView'`      |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `pressed`               | boolean                    | `false`                       | Whether the button is pressed.            |\n| `value`                 | number (float)             | `0.0`                         | The value of the button.                  |\n```\n\n----------------------------------------\n\nTITLE: Embedding Widgets with Reduced State in Python\nDESCRIPTION: This snippet demonstrates how to embed widgets with a reduced state using the dependency_state function. It's useful when you have many widgets but only want to include specific ones in your export.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/embedding.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets.embed import embed_minimal_html, dependency_state\n\ns1 = IntSlider(max=200, value=100)\ns2 = IntSlider(value=40)\nembed_minimal_html('export.html', views=[s1, s2], state=dependency_state([s1, s2]))\n```\n\n----------------------------------------\n\nTITLE: Textarea Widget Model and View Definition\nDESCRIPTION: Details TextareaModel and TextareaView (@jupyter-widgets/controls v1.1.0) components. Defines attributes for multiline text input, including rows configuration and update behavior.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.1.0'`                     |\n| `_model_name`           | string                               | `'TextareaModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.1.0'`                     |\n| `_view_name`            | string                               | `'TextareaView'`              |\n| `continuous_update`     | boolean                              | `true`                        | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`           | string                               | `''`                          | Description of the control.                                                                                  |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed                                                      |\n| `rows`                  | `null` or number (integer)           | `null`                        | The number of rows to display.                                                                               |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `value`                 | string                               | `''`                          | String value                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Generating Random Temperature Data\nDESCRIPTION: Creates a random temperature dataset with 200 locations and 150 time steps, scaled by 0.5 to simulate temperature variations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntemps = np.random.randn(200, 150)*0.5\n```\n\n----------------------------------------\n\nTITLE: FloatSlider Widget Configuration Reference\nDESCRIPTION: Configuration reference for the Jupyter FloatSlider widget, including DOM properties, model specifications, and slider-specific attributes like range, orientation, and formatting options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                        | `[]`                      | CSS classes applied to widget DOM element                                                     |\n```\n\n----------------------------------------\n\nTITLE: Defining a function for interactive\nDESCRIPTION: Creates a function that displays and returns the sum of its arguments for use with interactive.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display\ndef f(a, b):\n    display(a + b)\n    return a+b\n```\n\n----------------------------------------\n\nTITLE: SelectModel Specification\nDESCRIPTION: Specification for the Select widget model with properties for single-select dropdown/listbox functionality including options, rows, and styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                 | Default                       | Help                                      |\n| ------------------------ | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'SelectModel'`               |\n| `_options_labels`        | array of string                      | `[]`                          | The labels for the options.               |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'SelectView'`                |\n| `description`            | string                               | `''`                          | Description of the control.               |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.           |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes            |\n| `index`                  | `null` or number (integer)           | `null`                        | Selected index                            |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `rows`                   | number (integer)                     | `5`                           | The number of rows to display.            |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                       |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                        |\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tab and Accordion Widgets in Python with IPyWidgets\nDESCRIPTION: Creates a complex widget hierarchy by nesting accordion widgets within tabs. This example demonstrates container composition by creating a Tab widget with two identical Accordion widgets as children.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ntab_nest = widgets.Tab()\ntab_nest.children = [accordion, accordion]\ntab_nest.titles = ('An accordion', 'Copy of the accordion')\ntab_nest\n```\n\n----------------------------------------\n\nTITLE: Play Widget Configuration (@jupyter-widgets/controls)\nDESCRIPTION: Specification for an animation control widget with play/pause functionality, configurable intervals, and repeat options. Includes model and view configurations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _model_name: 'PlayModel',\n  _view_name: 'PlayView',\n  _model_module: '@jupyter-widgets/controls',\n  _view_module: '@jupyter-widgets/controls',\n  _model_module_version: '2.0.0',\n  _view_module_version: '2.0.0',\n  value: 0,\n  min: 0,\n  max: 100,\n  step: 1,\n  interval: 100,\n  playing: false,\n  repeat: false,\n  show_repeat: true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTML in Widget Descriptions\nDESCRIPTION: Demonstrates how to enable HTML formatting in widget descriptions using the description_allow_html attribute. By default, descriptions are plain text for security, but HTML can be enabled and is sanitized.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Text\nText(description=\"<b>Name</b>\", description_allow_html=True)\n```\n\n----------------------------------------\n\nTITLE: ButtonStyle Widget Specification\nDESCRIPTION: Defines the style attributes for Button widget including color and font weight customization. Uses ButtonStyleModel from @jupyter-widgets/controls v1.5.0 and StyleView from @jupyter-widgets/base v1.2.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                     |\n| ----------------------- | ---------------- | ----------------------------- | ------------------------ |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.5.0'`                     |\n| `_model_name`           | string           | `'ButtonStyleModel'`          |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'1.2.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `button_color`          | `null` or string | `null`                        | Color of the button      |\n| `font_weight`           | string           | `''`                          | Button text font weight. |\n```\n\n----------------------------------------\n\nTITLE: Defining IntRangeSliderModel and IntRangeSliderView in Jupyter Widgets\nDESCRIPTION: Details the attributes and properties for the IntRangeSliderModel and IntRangeSliderView widgets. Includes information on CSS classes, model and view specifications, user interaction settings, and value constraints.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n### IntRangeSliderModel (@jupyter-widgets/controls, 1.2.0); IntRangeSliderView (@jupyter-widgets/controls, 1.2.0)\n\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.2.0'`                     |\n| `_model_name`           | string                                       | `'IntRangeSliderModel'`       |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.2.0'`                     |\n| `_view_name`            | string                                       | `'IntRangeSliderView'`        |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is sliding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (integer)                             | `100`                         | Max value                                                         |\n| `min`                   | number (integer)                             | `0`                           | Min value                                                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'d'`                         | Format for the readout                                            |\n| `step`                  | number (integer)                             | `1`                           | Minimum step that the value can take                              |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     | Slider style customizations.                                      |\n| `value`                 | array                                        | `[0, 1]`                      | Tuple of (lower, upper) bounds                                    |\n```\n\n----------------------------------------\n\nTITLE: TextModel and TextView Widget Configuration\nDESCRIPTION: Configuration specification for Text widget component that provides a single-line text input. Includes properties for value handling, styling, and user interaction behavior.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.2.0'`                     |\n| `_model_name`           | string                               | `'TextModel'`                 |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.2.0'`                     |\n| `_view_name`            | string                               | `'TextView'`                  |\n| `continuous_update`     | boolean                              | `true`                        | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`           | string                               | `''`                          | Description of the control.                                                                                  |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed                                                      |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `value`                 | string                               | `''`                          | String value                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Play Widget Model/View Configuration\nDESCRIPTION: Specification for a playback control widget with attributes for play state, repeat functionality, interval timing, and value range controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                  |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element             |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_playing`              | boolean                              | `false`                       | Whether the control is currently playing.             |\n```\n\n----------------------------------------\n\nTITLE: Creating Widgets with Initial Layout Properties\nDESCRIPTION: Creates a Text widget and Button widget with initial layout settings, then displays them in a horizontal box (HBox) container. The text widget has a custom width and a dashed red border.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_borders.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nt1 = Text(\"text input\", layout=Layout(\n    width=\"80px\", border=\"1px dashed red\"\n))\nb1 = Button(description=\"button\")\nHBox((t1,b1))\n```\n\n----------------------------------------\n\nTITLE: SliderStyle Widget Model and View Definition\nDESCRIPTION: Defines attributes for SliderStyleModel (@jupyter-widgets/controls v1.1.0) and StyleView (@jupyter-widgets/base v1.0.0) components. Includes styling properties for slider handles and description width.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.1.0'`                     |\n| `_model_name`           | string           | `'SliderStyleModel'`          |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'1.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `description_width`     | string           | `''`                          | Width of the description to the side of the control. |\n| `handle_color`          | `null` or string | `null`                        | Color of the slider handle.                          |\n```\n\n----------------------------------------\n\nTITLE: Using ColorsInput Widget in ipywidgets\nDESCRIPTION: Demonstrates the ColorsInput widget which provides a tag-based interface for selecting colors. It accepts color names and hex values and can be configured with allowed tags and duplicate settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import ColorsInput\nColorsInput(\n    value=['red', '#2f6d30'],\n    # allowed_tags=['red', 'blue', 'green'],\n    # allow_duplicates=False\n)\n```\n\n----------------------------------------\n\nTITLE: Defining IntSlider Widget Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes, types, default values, and help text for the IntSlider widget. It includes properties such as behavior, continuous_update, and various styling options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                                                     | Default                       | Help                                                              |\n| ------------------------ | ------------------------------------------------------------------------ | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`           | array of string                                                          | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`          | string                                                                   | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                                                                   | `'2.0.0'`                     |\n| `_model_name`            | string                                                                   | `'IntSliderModel'`            |\n| `_view_module`           | string                                                                   | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                                                                   | `'2.0.0'`                     |\n| `_view_name`             | string                                                                   | `'IntSliderView'`             |\n| `behavior`               | string (one of `'drag-tap'`, `'drag-snap'`, `'tap'`, `'drag'`, `'snap'`) | `'drag-tap'`                  | Slider dragging behavior.                                         |\n| `continuous_update`      | boolean                                                                  | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `description`            | string                                                                   | `''`                          | Description of the control.                                       |\n| `description_allow_html` | boolean                                                                  | `false`                       | Accept HTML in the description.                                   |\n| `disabled`               | boolean                                                                  | `false`                       | Enable or disable user changes                                    |\n| `layout`                 | reference to Layout widget                                               | reference to new instance     |\n| `max`                    | number (integer)                                                         | `100`                         | Max value                                                         |\n| `min`                    | number (integer)                                                         | `0`                           | Min value                                                         |\n| `orientation`            | string (one of `'horizontal'`, `'vertical'`)                             | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`                | boolean                                                                  | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`         | string                                                                   | `'d'`                         | Format for the readout                                            |\n| `step`                   | number (integer)                                                         | `1`                           | Minimum step to increment the value                               |\n| `style`                  | reference to SliderStyle widget                                          | reference to new instance     |\n| `tabbable`               | `null` or boolean                                                        | `null`                        | Is widget tabbable?                                               |\n| `tooltip`                | `null` or string                                                         | `null`                        | A tooltip caption.                                                |\n| `value`                  | number (integer)                                                         | `0`                           | Int value                                                         |\n```\n\n----------------------------------------\n\nTITLE: ToggleButtons Model and View Specification\nDESCRIPTION: Defines the main ToggleButtons widget attributes including button styling, icons, tooltips, and interaction properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                                                                        | Default                       | Help                                                                    |\n| ------------------------ | ------------------------------------------------------------------------------------------- | ----------------------------- | ----------------------------------------------------------------------- |\n| `_dom_classes`           | array of string                                                                             | `[]`                          | CSS classes applied to widget DOM element                               |\n| `button_style`           | `null` or string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the buttons.                               |\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Border Styles for Multiple Widgets\nDESCRIPTION: Applies more complex border styles to both sets of widgets. Includes a solid green top border, a solid purple border, and a double skyblue right border on different widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_borders.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nt1.layout.border_top = \"5px solid green\"\nb1.layout.border = \"1px solid purple\"\nt2.layout.border_right = \"5px double skyblue\"\n```\n\n----------------------------------------\n\nTITLE: BoundedFloatText Widget Model Configuration\nDESCRIPTION: Specifies the model and view properties for a bounded float text input widget, including value constraints, update behavior, and styling options. Uses @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_model_module\": \"@jupyter-widgets/controls\",\n  \"_model_name\": \"BoundedFloatTextModel\",\n  \"continuous_update\": false,\n  \"description\": \"\",\n  \"disabled\": false,\n  \"max\": 100.0,\n  \"min\": 0.0,\n  \"step\": null,\n  \"value\": 0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Responsive Layout for Map and Chart\nDESCRIPTION: Configures the map and figure layouts to be responsive with auto width and height settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nm.layout.width='auto'\nm.layout.height='auto'\nfig.layout.width='auto'\nfig.layout.height='auto'\n```\n\n----------------------------------------\n\nTITLE: Select Widget Specification\nDESCRIPTION: Defines attributes for SelectModel and SelectView widgets that allow single item selection from a list. Includes configuration for DOM classes, model/view modules, labels, styling, and interaction properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.0.0'`                     |\n| `_model_name`           | string                               | `'SelectModel'`               |\n| `_options_labels`       | array                                | `[]`                          | The labels for the options.               |\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Buttons with Custom Layout for Long Labels in ipywidgets\nDESCRIPTION: Creates Radio Buttons with very long option labels inside a Box layout. Demonstrates how to handle long text in radio options using separate Label widget and max-content width.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Box(\n    [\n        widgets.Label(value='Pizza topping with a very long label:'), \n        widgets.RadioButtons(\n            options=[\n                'pepperoni', \n                'pineapple', \n                'anchovies', \n                'and the long name that will fit fine and the long name that will fit fine and the long name that will fit fine '\n            ],\n            layout={'width': 'max-content'}\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Widget in Python with IPyWidgets\nDESCRIPTION: Creates a tabbed container with multiple sections that can be selected through tab headers. This example creates a Tab widget with five text widgets as children, each with a numeric tab title.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ntab_contents = ['P0', 'P1', 'P2', 'P3', 'P4']\nchildren = [widgets.Text(description=name) for name in tab_contents]\ntab = widgets.Tab()\ntab.children = children\ntab.titles = [str(i) for i in range(len(children))]\ntab\n```\n\n----------------------------------------\n\nTITLE: TabModel and TabView Widget Configuration\nDESCRIPTION: Configuration specification for Tab widget component that allows creating tabbed interfaces. Includes properties for styling, child management, and tab selection.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                                                                                                              |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element                                                                                         |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.2.0'`                     |\n| `_model_name`           | string                                                               | `'TabModel'`                  |\n| `_titles`               | object                                                               | `{}`                          | Titles of the pages                                                                                                               |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.2.0'`                     |\n| `_view_name`            | string                                                               | `'TabView'`                   |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.                                                                                             |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                                                                                                           |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n| `selected_index`        | `null` or number (integer)                                           | `0`                           | The index of the selected page. This is either an integer selecting a particular sub-widget, or None to have no widgets selected. |\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleButtonsStyleModel and StyleView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes for ToggleButtonsStyleModel and StyleView, including module information and styling properties for toggle buttons.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n### ToggleButtonsStyleModel (@jupyter-widgets/controls, 1.2.0); StyleView (@jupyter-widgets/base, 1.0.0)\n\n| Attribute               | Type   | Default                       | Help                                                 |\n| ----------------------- | ------ | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string | `'1.2.0'`                     |\n| `_model_name`           | string | `'ToggleButtonsStyleModel'`   |\n| `_view_module`          | string | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string | `'1.0.0'`                     |\n| `_view_name`            | string | `'StyleView'`                 |\n| `button_width`          | string | `''`                          | The width of each button.                            |\n| `description_width`     | string | `''`                          | Width of the description to the side of the control. |\n| `font_weight`           | string | `''`                          | Text font weight of each button.                     |\n```\n\n----------------------------------------\n\nTITLE: Documenting FloatRangeSliderModel and FloatRangeSliderView Components in Markdown\nDESCRIPTION: Markdown table describing the attributes, types, default values, and help text for the FloatRangeSliderModel and FloatRangeSliderView components from the @jupyter-widgets/controls package.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### FloatRangeSliderModel (@jupyter-widgets/controls, 1.0.0); FloatRangeSliderView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array                                        | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.0.0'`                     |\n| `_model_name`           | string                                       | `'FloatRangeSliderModel'`     |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.0.0'`                     |\n| `_view_name`            | string                                       | `'FloatRangeSliderView'`      |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is sliding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (float)                               | `100.0`                       | Max value                                                         |\n| `min`                   | number (float)                               | `0.0`                         | Min value                                                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'.2f'`                       | Format for the readout                                            |\n| `step`                  | number (float)                               | `0.1`                         | Minimum step to increment the value                               |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     |\n| `value`                 | array                                        | `[0.0, 1.0]`                  | Tuple of (lower, upper) bounds                                    |\n```\n\n----------------------------------------\n\nTITLE: FloatText Widget Attributes Table\nDESCRIPTION: Markdown table defining all attributes for FloatTextModel and FloatTextView components, including types, defaults, and descriptions. The widget provides a text input interface for float value entry with validation and formatting options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                 | Default                       | Help                                                                                                         |\n| ------------------------ | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'FloatTextModel'`            |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'FloatTextView'`             |\n```\n\n----------------------------------------\n\nTITLE: Updating Python Widget Class with Required Traitlets\nDESCRIPTION: Defines a Python widget class with the six required traitlets for compatibility with the latest ipywidgets version, including module and version information.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleWidget(widgets.Widget):\n    _model_name = Unicode('name of model in JS')\n    _view_name = Unicode('name of view in JS')\n    _model_module = Unicode('name your JS package')\n    _view_module = Unicode('name your JS package')\n    _model_module_version = Unicode('version of your JS bundle')\n    _view_module_version = Unicode('version of your JS bundle')\n```\n\n----------------------------------------\n\nTITLE: HTML Widget Component Reference\nDESCRIPTION: Specification for HTMLModel and HTMLView components that handle plain HTML content. Includes description, styling, and placeholder functionality.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                    |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element               |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'HTMLModel'`                 |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.5.0'`                     |\n| `_view_name`            | string                               | `'HTMLView'`                  |\n| `description`           | string                               | `''`                          | Description of the control.                             |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).  |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                  |\n| `value`                 | string                               | `''`                          | String value                                            |\n```\n\n----------------------------------------\n\nTITLE: ProgressStyleModel Specification\nDESCRIPTION: Specification for the ProgressStyle widget model including styling attributes like bar color and description width. Based on @jupyter-widgets/controls v2.0.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'2.0.0'`                     |\n| `_model_name`           | string           | `'ProgressStyleModel'`        |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'2.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `bar_color`             | `null` or string | `null`                        | Color of the progress bar.                           |\n| `description_width`     | string           | `''`                          | Width of the description to the side of the control. |\n```\n\n----------------------------------------\n\nTITLE: Defining CheckboxModel and CheckboxView in Jupyter Widgets\nDESCRIPTION: Specification for CheckboxModel and CheckboxView from @jupyter-widgets/controls package. Includes attributes for styling, description, and interaction configuration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### CheckboxModel (@jupyter-widgets/controls, 1.0.0); CheckboxView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                 | Default                       | Help                                                                |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element                           |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.0.0'`                     |\n| `_model_name`           | string                               | `'CheckboxModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.0.0'`                     |\n| `_view_name`            | string                               | `'CheckboxView'`              |\n| `description`           | string                               | `''`                          | Description of the control.                                         |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                                     |\n| `indent`                | boolean                              | `true`                        | Indent the control to align with other controls with a description. |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                              |\n| `value`                 | boolean                              | `false`                       | Bool value                                                          |\n```\n\n----------------------------------------\n\nTITLE: Defining SelectMultipleModel and SelectMultipleView Attributes in Markdown\nDESCRIPTION: Specifies the attributes for SelectMultipleModel and SelectMultipleView from @jupyter-widgets/controls. Includes details on model and view modules, versions, and various UI-related attributes such as multiple selection and styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n### SelectMultipleModel (@jupyter-widgets/controls, 2.0.0); SelectMultipleView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                                 | Default                       | Help                                      |\n| ------------------------ | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'SelectMultipleModel'`       |\n| `_options_labels`        | array of string                      | `[]`                          | The labels for the options.               |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'SelectMultipleView'`        |\n| `description`            | string                               | `''`                          | Description of the control.               |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.           |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes            |\n| `index`                  | array of number (integer)            | `[]`                          | Selected indices                          |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `rows`                   | number (integer)                     | `5`                           | The number of rows to display.            |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                       |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                        |\n```\n\n----------------------------------------\n\nTITLE: Radio Buttons Widget Model/View Configuration\nDESCRIPTION: Specification for radio buttons widget with attributes for options labels, selection index, and styling customization.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_options_labels`       | array                                | `[]`                          | The labels for the options.               |\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Widget Model in JavaScript\nDESCRIPTION: Demonstrates how to get and set values on a widget model from JavaScript, including triggering updates using the touch method.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.model.get('count');\nthis.model.set('count', 999);\nthis.touch();\n\n/////////////////////////////////\n\nthis.colorpicker = document.createElement('input');\nthis.colorpicker.setAttribute('type', 'color');\nthis.el.appendChild(this.colorpicker);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Custom Serialization for DateTime Value\nDESCRIPTION: Shows how to implement the JavaScript side of custom serialization for a DateTime value. This extends the base serializers with custom serialize and deserialize functions for the value attribute.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstatic serializers = _.extend({\n    value: {\n        serialize: serialize_datetime,\n        deserialize: deserialize_datetime\n    }\n}, BaseModel.serializers)\n```\n\n----------------------------------------\n\nTITLE: Defining CheckboxModel and CheckboxView attributes in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and descriptions for the CheckboxModel and CheckboxView widgets from @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### CheckboxModel (@jupyter-widgets/controls, 1.3.0); CheckboxView (@jupyter-widgets/controls, 1.3.0)\n\n| Attribute               | Type                                 | Default                       | Help                                                                |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                           |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.3.0'`                     |\n| `_model_name`           | string                               | `'CheckboxModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.3.0'`                     |\n| `_view_name`            | string                               | `'CheckboxView'`              |\n| `description`           | string                               | `''`                          | Description of the control.                                         |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).              |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                                     |\n| `indent`                | boolean                              | `true`                        | Indent the control to align with other controls with a description. |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                              |\n| `value`                 | boolean                              | `false`                       | Bool value                                                          |\n```\n\n----------------------------------------\n\nTITLE: Creating a ColorsInput Widget\nDESCRIPTION: Creates a ColorsInput widget for selecting or creating a list of colors. Users can drag and drop colors to reorder them, with optional restrictions for allowed values and duplicates.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ncolor_tags = widgets.ColorsInput(\n    value=['red', '#2f6d30'],\n    # allowed_tags=['red', 'blue', 'green'],\n    # allow_duplicates=False\n)\ncolor_tags\n```\n\n----------------------------------------\n\nTITLE: Using interact with initial value\nDESCRIPTION: Shows how to set an initial value for a float slider using a default argument.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@interact(x=(0.0,20.0,0.5))\ndef h(x=5.5):\n    return x\n```\n\n----------------------------------------\n\nTITLE: HTML Widget Specification (@jupyter-widgets/controls)\nDESCRIPTION: Defines the attributes and properties for HTML widget model and view. Includes DOM classes, model/view configurations, description, layout, placeholder and style customizations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### HTMLModel (@jupyter-widgets/controls, 1.0.0); HTMLView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                 | Default                       | Help                                                    |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element               |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.0.0'`                     |\n| `_model_name`           | string                               | `'HTMLModel'`                 |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.0.0'`                     |\n| `_view_name`            | string                               | `'HTMLView'`                  |\n| `description`           | string                               | `''`                          | Description of the control.                             |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                  |\n| `value`                 | string                               | `''`                          | String value                                            |\n```\n\n----------------------------------------\n\nTITLE: Grid Container with Nested Items Structure\nDESCRIPTION: HTML structure demonstrating grid items and nested elements (sub-items) that aren't direct grid items. This shows the hierarchical relationship in a grid layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"container\">\n  <div class=\"item\"></div> \n  <div class=\"item\">\n  \t<p class=\"sub-item\"></p>\n  </div>\n  <div class=\"item\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: IntRangeSlider Widget Specification\nDESCRIPTION: IntRangeSlider widget model and view specifications from @jupyter-widgets/controls package. The component implements a range slider with integer values and various behavioral options for user interaction.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                                                     | Default                       | Help                                                              |\n| ------------------------ | ------------------------------------------------------------------------ | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`           | array of string                                                          | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`          | string                                                                   | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                                                                   | `'2.0.0'`                     |\n| `_model_name`            | string                                                                   | `'IntRangeSliderModel'`       |\n| `_view_module`           | string                                                                   | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                                                                   | `'2.0.0'`                     |\n| `_view_name`             | string                                                                   | `'IntRangeSliderView'`        |\n```\n\n----------------------------------------\n\nTITLE: Image Widget Model Specification\nDESCRIPTION: Model and view specification for Image widget defining attributes for image display, format, dimensions, and data handling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                       | Help                                                                     |\n| ----------------------- | -------------------------- | ----------------------------- | ------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element                                |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'2.0.0'`                     |\n| `_model_name`           | string                     | `'ImageModel'`                |\n```\n\n----------------------------------------\n\nTITLE: OutputModel and OutputView Widget Configuration\nDESCRIPTION: Specification for Jupyter output widget component from @jupyter-widgets/output v1.0.0. Defines attributes for capturing and displaying output messages from the frontend.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                     | Help                                          |\n| ----------------------- | -------------------------- | --------------------------- | --------------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                        | CSS classes applied to widget DOM element     |\n| `_model_module`         | string                     | `'@jupyter-widgets/output'` |\n| `_model_module_version` | string                     | `'1.0.0'`                   |\n| `_model_name`           | string                     | `'OutputModel'`             |\n| `_view_module`          | string                     | `'@jupyter-widgets/output'` |\n| `_view_module_version`  | string                     | `'1.0.0'`                   |\n| `_view_name`            | string                     | `'OutputView'`              |\n| `layout`                | reference to Layout widget | reference to new instance   |\n| `msg_id`                | string                     | `''`                        | Parent message id of messages to capture      |\n| `outputs`               | array of object            | `[]`                        | The output messages synced from the frontend. |\n| `tabbable`              | `null` or boolean          | `null`                      | Is widget tabbable?                           |\n| `tooltip`               | `null` or string           | `null`                      | A tooltip caption.                            |\n```\n\n----------------------------------------\n\nTITLE: TextareaModel and TextareaView Widget Configuration\nDESCRIPTION: Configuration specification for Textarea widget component that provides a multi-line text input. Includes properties for value handling, styling, and user interaction behavior with additional row control.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.2.0'`                     |\n| `_model_name`           | string                               | `'TextareaModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.2.0'`                     |\n| `_view_name`            | string                               | `'TextareaView'`              |\n| `continuous_update`     | boolean                              | `true`                        | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`           | string                               | `''`                          | Description of the control.                                                                                  |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed                                                      |\n| `rows`                  | `null` or number (integer)           | `null`                        | The number of rows to display.                                                                               |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `value`                 | string                               | `''`                          | String value                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Widget State Update Message\nDESCRIPTION: Kernel to frontend message for synchronizing widget state changes\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id' : 'u-u-i-d',\n  'data' : {\n    'method': 'update',\n    'state': { <dictionary of widget state> },\n    'buffers': [ <optional list of state keys corresponding to binary buffers in the message> ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Video Widget from a Local File\nDESCRIPTION: This snippet creates a Video widget using a local MP4 file and assigns it to a variable.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Media widgets.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvideo1 = Video.from_file(\"images/Big.Buck.Bunny.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Documenting VBoxModel and VBoxView in Jupyter Widgets\nDESCRIPTION: This snippet describes the attributes of the VBoxModel and VBoxView widgets from the @jupyter-widgets/controls package. It includes details on CSS classes, module versions, styling options, and child widget management.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n### VBoxModel (@jupyter-widgets/controls, 1.4.0); VBoxView (@jupyter-widgets/controls, 1.4.0)\n\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.4.0'`                     |\n| `_model_name`           | string                                                               | `'VBoxModel'`                 |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.4.0'`                     |\n| `_view_name`            | string                                                               | `'VBoxView'`                  |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: Documentation for Jupyter.SelectionSlider Widget\nDESCRIPTION: Specification for a selection slider widget component in Jupyter. Defines attributes for model/view configuration, slider behavior, and display options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n### Jupyter.SelectionSlider\n\n| Attribute               | Type                                         | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                        | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                                       | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                                       | `'~2.1.0'`                |\n| `_model_name`           | string                                       | `'SelectionSliderModel'`  |\n| `_options_labels`       | array                                        | `[]`                      |\n| `_view_module`          | string                                       | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                                       | `'~2.1.0'`                |\n| `_view_name`            | string                                       | `'SelectionSliderView'`   |\n| `continuous_update`     | boolean                                      | `true`                    | Update the value of the widget as the user is holding the slider.                             |\n| `description`           | string                                       | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                                      | `false`                   | Enable or disable user changes                                                                |\n| `layout`                | reference to Layout widget                   | reference to new instance |\n| `msg_throttle`          | number (integer)                             | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`            | Vertical or horizontal.                                                                       |\n| `readout`               | boolean                                      | `true`                    | Display the current selected label next to the slider                                         |\n| `value`                 | string (valid option label)                  | `null`                    | Selected value                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Creating AppLayout without Left Sidebar\nDESCRIPTION: Shows AppLayout with header, right sidebar, center, and footer but no left sidebar.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=header_button,\n          left_sidebar=None,\n          center=center_button,\n          right_sidebar=right_button,\n          footer=footer_button)\n```\n\n----------------------------------------\n\nTITLE: Widget Serialization for Parent-Child Widget Relationships\nDESCRIPTION: Demonstrates how to handle serialization when a widget contains other widget models as attributes. Uses the HBox widget's children attribute as an example.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom .widget import widget_serialization\n\n[...]\n\nchildren = Tuple().tag(sync=True, **widget_serialization)\n```\n\n----------------------------------------\n\nTITLE: Tab Widget Model and View Definition\nDESCRIPTION: Documents TabModel and TabView (@jupyter-widgets/controls v1.1.0) components. Specifies attributes for managing tabbed interfaces including selected index, children widgets, and styling options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                                                                                                              |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                                                | `[]`                          | CSS classes applied to widget DOM element                                                                                         |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.1.0'`                     |\n| `_model_name`           | string                                                               | `'TabModel'`                  |\n| `_titles`               | object                                                               | `{}`                          | Titles of the pages                                                                                                               |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.1.0'`                     |\n| `_view_name`            | string                                                               | `'TabView'`                   |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.                                                                                             |\n| `children`              | array                                                                | `[]`                          | List of widget children                                                                                                           |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n| `selected_index`        | `null` or number (integer)                                           | `0`                           | The index of the selected page. This is either an integer selecting a particular sub-widget, or None to have no widgets selected. |\n```\n\n----------------------------------------\n\nTITLE: Installing IPyWidgets Package in JupyterLite\nDESCRIPTION: Uses pip to install the ipywidgets package within a Jupyter notebook cell. This is required for JupyterLite environments to use widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Jupyter Controller Axis Widget Model and View Specification\nDESCRIPTION: Specifies the attributes for ControllerAxisModel and ControllerAxisView components for handling controller input values. Provides functionality for managing controller axis values and layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.4.0'`                     |\n| `_model_name`           | string                     | `'ControllerAxisModel'`       |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.4.0'`                     |\n| `_view_name`            | string                     | `'ControllerAxisView'`        |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `value`                 | number (float)             | `0.0`                         | The value of the axis.                    |\n```\n\n----------------------------------------\n\nTITLE: GridBox Widget Model Specification\nDESCRIPTION: Specification for GridBoxModel and GridBoxView from @jupyter-widgets/controls v2.0.0. Defines a container widget that arranges child widgets in a grid layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'2.0.0'`                     |\n| `_model_name`           | string                                                               | `'GridBoxModel'`              |\n```\n\n----------------------------------------\n\nTITLE: Jupyter DatePicker Widget Attributes\nDESCRIPTION: Defines configuration for date selection widget including model specifications and value handling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_model_name` | string | `'DatePickerModel'` |\n| `value` | `null` or Datetime | `null` |\n```\n\n----------------------------------------\n\nTITLE: Documenting DropdownModel and DropdownView Components in Markdown\nDESCRIPTION: Markdown table describing the attributes, types, default values, and help text for the DropdownModel and DropdownView components from the @jupyter-widgets/controls package.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### DropdownModel (@jupyter-widgets/controls, 1.0.0); DropdownView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.0.0'`                     |\n| `_model_name`           | string                               | `'DropdownModel'`             |\n| `_options_labels`       | array                                | `[]`                          | The labels for the options.               |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.0.0'`                     |\n| `_view_name`            | string                               | `'DropdownView'`              |\n| `description`           | string                               | `''`                          | Description of the control.               |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes            |\n| `index`                 | `null` or number (integer)           | `null`                        | Selected index                            |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n```\n\n----------------------------------------\n\nTITLE: FloatSlider Widget Specification\nDESCRIPTION: Defines the model and view for a floating point slider widget with horizontal/vertical orientation options, configurable range, and formatting controls. Part of @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.3.0'`                     |\n| `_model_name`           | string                                       | `'FloatSliderModel'`          |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.3.0'`                     |\n| `_view_name`            | string                                       | `'FloatSliderView'`           |\n```\n\n----------------------------------------\n\nTITLE: Documenting OutputModel and OutputView in Jupyter Widgets\nDESCRIPTION: This snippet describes the attributes of the OutputModel and OutputView widgets from the @jupyter-widgets/output package. It covers properties related to output capture and display in Jupyter notebooks.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n### OutputModel (@jupyter-widgets/output, 1.0.0); OutputView (@jupyter-widgets/output, 1.0.0)\n\n| Attribute               | Type                       | Default                     | Help                                          |\n| ----------------------- | -------------------------- | --------------------------- | --------------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                        | CSS classes applied to widget DOM element     |\n| `_model_module`         | string                     | `'@jupyter-widgets/output'` |\n| `_model_module_version` | string                     | `'1.0.0'`                   |\n| `_model_name`           | string                     | `'OutputModel'`             |\n| `_view_module`          | string                     | `'@jupyter-widgets/output'` |\n| `_view_module_version`  | string                     | `'1.0.0'`                   |\n| `_view_name`            | string                     | `'OutputView'`              |\n| `layout`                | reference to Layout widget | reference to new instance   |\n| `msg_id`                | string                     | `''`                        | Parent message id of messages to capture      |\n| `outputs`               | array of object            | `[]`                        | The output messages synced from the frontend. |\n```\n\n----------------------------------------\n\nTITLE: Creating Multipanel Scatter Plot with GridspecLayout and bqplot in Python\nDESCRIPTION: This snippet demonstrates how to create a multipanel scatter plot using GridspecLayout and bqplot. It generates random data, creates scales, and populates a grid with scatter plots and histograms.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport bqplot as bq\nimport numpy as np\nfrom ipywidgets import GridspecLayout, Button, Layout\n\nn_features = 5\ndata = np.random.randn(100, n_features)\ndata[:50, 2] += 4 * data[:50, 0] **2\ndata[50:, :] += 4\n\nA = np.random.randn(n_features, n_features)/5\n\ndata = np.dot(data,A)\n\nscales_x = [bq.LinearScale() for i in range(n_features)]\nscales_y = [bq.LinearScale() for i in range(n_features)]\n\ngs = GridspecLayout(n_features, n_features)\nfor i in range(n_features):\n    for j in range(n_features):\n        \n        if i != j:\n            sc_x = scales_x[j]\n            sc_y = scales_y[i]\n\n            scatt = bq.Scatter(x=data[:, j], y=data[:, i], scales={'x': sc_x, 'y': sc_y}, default_size=1)\n\n            gs[i, j] = bq.Figure(marks=[scatt], layout=Layout(width='auto', height='auto'),\n                                 fig_margin=dict(top=0, bottom=0, left=0, right=0))\n        else:\n            sc_x = scales_x[j]\n            sc_y = bq.LinearScale()\n        \n            hist = bq.Hist(sample=data[:,i], scales={'sample': sc_x, 'count': sc_y})\n            \n            gs[i, j] = bq.Figure(marks=[hist], layout=Layout(width='auto', height='auto'),\n                                 fig_margin=dict(top=0, bottom=0, left=0, right=0))\ngs\n```\n\n----------------------------------------\n\nTITLE: Importing NetworkX Library\nDESCRIPTION: Imports the NetworkX library, which provides the graph generation algorithms and visualization tools that will be used in this explorer.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Exploring Graphs.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\n```\n\n----------------------------------------\n\nTITLE: Custom Datetime Serialization for DatePicker Widget\nDESCRIPTION: Shows how to implement custom serialization for a Datetime attribute in a widget. This example defines a DatePicker widget with a value attribute that requires custom serialization.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvalue = Datetime(None, allow_none=True).tag(sync=True, to_json=datetime_to_json, from_json=datetime_from_json)\n```\n\n----------------------------------------\n\nTITLE: Creating a Game Controller Widget\nDESCRIPTION: Creates a Controller widget that allows using a game controller as an input device. The index parameter specifies which connected controller to use.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Controller(\n    index=0,\n)\n```\n\n----------------------------------------\n\nTITLE: FloatSlider Widget Configuration\nDESCRIPTION: Configuration specification for FloatSlider widget that provides a sliding interface for float value input. Includes attributes for styling, behavior control, value ranges, and display options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  _dom_classes: string[] = [];\n  _model_module: string = '@jupyter-widgets/controls';\n  _model_module_version: string = '2.0.0';\n  _model_name: string = 'FloatSliderModel';\n  _view_module: string = '@jupyter-widgets/controls';\n  _view_module_version: string = '2.0.0';\n  _view_name: string = 'FloatSliderView';\n  behavior: 'drag-tap' | 'drag-snap' | 'tap' | 'drag' | 'snap' = 'drag-tap';\n  continuous_update: boolean = true;\n  description: string = '';\n  description_allow_html: boolean = false;\n  disabled: boolean = false;\n  max: number = 100.0;\n  min: number = 0.0;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n  readout: boolean = true;\n  readout_format: string = '.2f';\n  step: number | null = 0.1;\n  value: number = 0.0;\n}\n```\n\n----------------------------------------\n\nTITLE: BoundedIntText Widget Model and View Specification\nDESCRIPTION: Specification for a bounded integer text input widget with configurable min/max values and update behavior. Includes model attributes for value constraints, styling, and interaction behaviors.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array of string | `[]` | CSS classes applied to widget DOM element |\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string | `'2.0.0'` |\n| `_model_name` | string | `'BoundedIntTextModel'` |\n| `value` | number (integer) | `0` | Int value |\n```\n\n----------------------------------------\n\nTITLE: Jupyter ColorPicker Widget Model and View Specification\nDESCRIPTION: Defines the attributes for ColorPickerModel and ColorPickerView components including color selection and display options. Supports both concise and detailed color picker interfaces.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                   |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.4.0'`                     |\n| `_model_name`           | string                               | `'ColorPickerModel'`          |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.4.0'`                     |\n| `_view_name`            | string                               | `'ColorPickerView'`           |\n| `concise`               | boolean                              | `false`                       | Display short version with just a color selector.      |\n| `description`           | string                               | `''`                          | Description of the control.                            |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description). |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                        |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                 |\n| `value`                 | string                               | `'black'`                     | The color value.                                       |\n```\n\n----------------------------------------\n\nTITLE: Linking Widgets in a 2x2 Layout\nDESCRIPTION: Shows how to use jslink to connect widget properties so they update together within a TwoByTwoLayout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp = TwoByTwoLayout(top_left=top_left_text, top_right=top_right_text,\n                     bottom_left=bottom_left_slider, bottom_right=bottom_right_slider)\n                     \nlink_left = jslink((app.top_left, 'value'), (app.bottom_left, 'value'))\nlink_right = jslink((app.top_right, 'value'), (app.bottom_right, 'value'))\napp.bottom_right.value = 30\napp.top_left.value = 25\napp\n```\n\n----------------------------------------\n\nTITLE: Defining IntTextModel and IntTextView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the IntTextModel and IntTextView widgets. These widgets handle integer input with various customization options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### IntTextModel (@jupyter-widgets/controls, 1.5.0); IntTextView (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'IntTextModel'`              |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.5.0'`                     |\n| `_view_name`            | string                               | `'IntTextView'`               |\n| `continuous_update`     | boolean                              | `false`                       | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`           | string                               | `''`                          | Description of the control.                                                                                  |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).                                                       |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `step`                  | number (integer)                     | `1`                           | Minimum step to increment the value                                                                          |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `value`                 | number (integer)                     | `0`                           | Int value                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Importing AppLayout for Application-like Interfaces\nDESCRIPTION: Imports the AppLayout widget and Button components to create application-like widget arrangements with header, footer, sidebars, and central content areas.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import AppLayout, Button, Layout\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerAxisModel and ControllerAxisView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the ControllerAxisModel and ControllerAxisView widgets, including model and view details, and axis value representation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### ControllerAxisModel (@jupyter-widgets/controls, 1.5.0); ControllerAxisView (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.5.0'`                     |\n| `_model_name`           | string                     | `'ControllerAxisModel'`       |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.5.0'`                     |\n| `_view_name`            | string                     | `'ControllerAxisView'`        |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `value`                 | number (float)             | `0.0`                         | The value of the axis.                    |\n```\n\n----------------------------------------\n\nTITLE: ColorPicker Widget Component Specification\nDESCRIPTION: Defines ColorPickerModel and ColorPickerView components for color selection. Includes display options and value handling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                              |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element         |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.2.0'`                     |\n| `_model_name`           | string                               | `'ColorPickerModel'`          |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.2.0'`                     |\n| `_view_name`            | string                               | `'ColorPickerView'`           |\n| `concise`               | boolean                              | `false`                       | Display short version with just a color selector. |\n| `description`           | string                               | `''`                          | Description of the control.                       |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                   |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                            |\n| `value`                 | string                               | `'black'`                     | The color value.                                  |\n```\n\n----------------------------------------\n\nTITLE: Importing IPyWidgets Interface\nDESCRIPTION: Imports the interact function from ipywidgets for creating interactive elements.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Factoring.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interact\n```\n\n----------------------------------------\n\nTITLE: HTMLMath Widget Component Reference\nDESCRIPTION: Specification for HTMLMathModel and HTMLMathView components that handle HTML content with mathematical expressions. Includes description, styling, and placeholder functionality.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                    |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element               |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'HTMLMathModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.5.0'`                     |\n| `_view_name`            | string                               | `'HTMLMathView'`              |\n| `description`           | string                               | `''`                          | Description of the control.                             |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).  |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                  |\n| `value`                 | string                               | `''`                          | String value                                            |\n```\n\n----------------------------------------\n\nTITLE: Controller Widget Configuration\nDESCRIPTION: Defines the main controller widget model and view with attributes for gamepad axes, buttons, connection status, and controller metadata.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                | Default                       | Help                                                  |\n| ----------------------- | ----------------------------------- | ----------------------------- | ----------------------------------------------------- |\n| `_dom_classes`          | array of string                     | `[]`                          | CSS classes applied to widget DOM element             |\n| `_model_module`         | string                              | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                              | `'1.2.0'`                     |\n| `_model_name`           | string                              | `'ControllerModel'`           |\n| `_view_module`          | string                              | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                              | `'1.2.0'`                     |\n| `_view_name`            | string                              | `'ControllerView'`            |\n| `axes`                  | array of reference to Axis widget   | `[]`                          | The axes on the gamepad.                              |\n| `buttons`               | array of reference to Button widget | `[]`                          | The buttons on the gamepad.                           |\n| `connected`             | boolean                             | `false`                       | Whether the gamepad is connected.                     |\n| `index`                 | number (integer)                    | `0`                           | The id number of the controller.                      |\n| `layout`                | reference to Layout widget          | reference to new instance     |\n| `mapping`               | string                              | `''`                          | The name of the control mapping.                      |\n| `name`                  | string                              | `''`                          | The name of the controller.                           |\n| `timestamp`             | number (float)                      | `0.0`                         | The last time the data from this gamepad was updated. |\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressStyleModel and StyleView Attributes in Markdown\nDESCRIPTION: Specifies the attributes for ProgressStyleModel from @jupyter-widgets/controls and StyleView from @jupyter-widgets/base. Includes details on model and view modules, versions, and style-related attributes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n### ProgressStyleModel (@jupyter-widgets/controls, 2.0.0); StyleView (@jupyter-widgets/base, 2.0.0)\n\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'2.0.0'`                     |\n| `_model_name`           | string           | `'ProgressStyleModel'`        |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'2.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `bar_color`             | `null` or string | `null`                        | Color of the progress bar.                           |\n| `description_width`     | string           | `''`                          | Width of the description to the side of the control. |\n```\n\n----------------------------------------\n\nTITLE: Creating Controller Widget in Python with IPyWidgets\nDESCRIPTION: Creates a game controller interface widget that can connect to and display input from game controllers. This widget defaults to the first connected controller (index=0) and provides access to buttons, joysticks, and other inputs.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nwidgets.Controller(\n    index=0,\n)\n```\n\n----------------------------------------\n\nTITLE: Testing the variable inspector with float assignment\nDESCRIPTION: Creates a floating-point variable to demonstrate the variable inspector's capability to track different variable types.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nb = 3.0\n```\n\n----------------------------------------\n\nTITLE: Using interact with float range and step\nDESCRIPTION: Demonstrates specifying a float range with a custom step size for a slider.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ninteract(f, x=(0.0,10.0,0.01));\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerModel and ControllerView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the ControllerModel and ControllerView widgets, representing a gamepad controller with axes, buttons, and connection status.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### ControllerModel (@jupyter-widgets/controls, 1.5.0); ControllerView (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                                | Default                       | Help                                                  |\n| ----------------------- | ----------------------------------- | ----------------------------- | ----------------------------------------------------- |\n| `_dom_classes`          | array of string                     | `[]`                          | CSS classes applied to widget DOM element             |\n| `_model_module`         | string                              | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                              | `'1.5.0'`                     |\n| `_model_name`           | string                              | `'ControllerModel'`           |\n| `_view_module`          | string                              | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                              | `'1.5.0'`                     |\n| `_view_name`            | string                              | `'ControllerView'`            |\n| `axes`                  | array of reference to Axis widget   | `[]`                          | The axes on the gamepad.                              |\n| `buttons`               | array of reference to Button widget | `[]`                          | The buttons on the gamepad.                           |\n| `connected`             | boolean                             | `false`                       | Whether the gamepad is connected.                     |\n| `index`                 | number (integer)                    | `0`                           | The id number of the controller.                      |\n| `layout`                | reference to Layout widget          | reference to new instance     |\n| `mapping`               | string                              | `''`                          | The name of the control mapping.                      |\n| `name`                  | string                              | `''`                          | The name of the controller.                           |\n| `timestamp`             | number (float)                      | `0.0`                         | The last time the data from this gamepad was updated. |\n```\n\n----------------------------------------\n\nTITLE: IntProgress Widget Specification\nDESCRIPTION: IntProgress widget model and view specifications from @jupyter-widgets/controls package. The component provides a progress bar with customizable attributes like orientation, styling, and value range.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                                                 | Default                       | Help                                           |\n| ------------------------ | -------------------------------------------------------------------- | ----------------------------- | ---------------------------------------------- |\n| `_dom_classes`           | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element      |\n| `_model_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                                                               | `'2.0.0'`                     |\n| `_model_name`            | string                                                               | `'IntProgressModel'`          |\n| `_view_module`           | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                                                               | `'2.0.0'`                     |\n| `_view_name`             | string                                                               | `'ProgressView'`              |\n```\n\n----------------------------------------\n\nTITLE: Box Widget Model and View Specification\nDESCRIPTION: Specification for a box container widget that can hold multiple child widgets. Includes styling options and layout configuration capabilities.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array of string | `[]` | CSS classes applied to widget DOM element |\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `box_style` | string | `''` | Use a predefined styling for the box |\n| `children` | array of reference to Widget widget | `[]` | List of widget children |\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with Custom Layout Dimensions\nDESCRIPTION: Creates a button widget with a custom layout that sets its width to 50% of available space and height to 80px.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Button, Layout\n\nb = Button(description='(50% width, 80px height) button',\n           layout=Layout(width='50%', height='80px'))\nb\n```\n\n----------------------------------------\n\nTITLE: Initializing Specific Controller by Index\nDESCRIPTION: Creates a Controller instance targeting a specific controller using an index parameter, useful when multiple controllers are connected.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Controller.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nController(index=1)\n```\n\n----------------------------------------\n\nTITLE: VBox Widget Specification for Jupyter Widgets\nDESCRIPTION: Defines the model and view attributes for the VBox widget, which is a vertical box container for other widgets. Includes styling options and children management capabilities.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.3.0'`                     |\n| `_model_name`           | string                                                               | `'VBoxModel'`                 |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.3.0'`                     |\n| `_view_name`            | string                                                               | `'VBoxView'`                  |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: Importing Controller Widget\nDESCRIPTION: Imports the Controller class from ipywidgets module which is used to handle game controller inputs.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Controller.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Controller\n```\n\n----------------------------------------\n\nTITLE: VBox with Label and HTMLMath for Mathematical Expressions\nDESCRIPTION: Creates a vertical box containing a Label and HTMLMath widget to display mathematical expressions. The HTMLMath widget renders the expression with HTML formatting applied.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_sanitizer.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nVBox((Label(\"$ y < a, x > a$\"), HTMLMath(\"<strong>$ y < a, x > a$</strong>\")))\n```\n\n----------------------------------------\n\nTITLE: Jupyter Widgets FloatProgress Component Specification\nDESCRIPTION: Attribute specifications for FloatProgressModel and ProgressView components from @jupyter-widgets/controls. Defines properties for progress bar widget including styling, value ranges, and orientation options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                           | Default                       | Help                                           |\n| ----------------------- | ------------------------------------------------------------------------------ | ----------------------------- | ---------------------------------------------- |\n| `_dom_classes`          | array                                                                          | `[]`                          | CSS classes applied to widget DOM element      |\n| `_model_module`         | string                                                                         | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                         | `'1.1.0'`                     |\n| `_model_name`           | string                                                                         | `'FloatProgressModel'`        |\n| `_view_module`          | string                                                                         | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                         | `'1.1.0'`                     |\n| `_view_name`            | string                                                                         | `'ProgressView'`              |\n| `bar_style`             | `null` or string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the progress bar. |\n| `description`           | string                                                                         | `''`                          | Description of the control.                    |\n| `layout`                | reference to Layout widget                                                     | reference to new instance     |\n| `max`                   | number (float)                                                                 | `100.0`                       | Max value                                      |\n| `min`                   | number (float)                                                                 | `0.0`                         | Min value                                      |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`)                                   | `'horizontal'`                | Vertical or horizontal.                        |\n| `style`                 | reference to ProgressStyle widget                                              | reference to new instance     |\n| `value`                 | number (float)                                                                 | `0.0`                         | Float value                                    |\n```\n\n----------------------------------------\n\nTITLE: Updating Python Package Dependencies\nDESCRIPTION: Changes required in setup.py to update IPyWidgets version requirements for version 8 compatibility.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n install_requires=[\n-    'ipywidgets>=7,<8',\n+    'ipywidgets>=7,<9',\n ],\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerButtonModel and ControllerButtonView attributes in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and descriptions for the ControllerButtonModel and ControllerButtonView widgets from @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### ControllerButtonModel (@jupyter-widgets/controls, 1.3.0); ControllerButtonView (@jupyter-widgets/controls, 1.3.0)\n\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.3.0'`                     |\n| `_model_name`           | string                     | `'ControllerButtonModel'`     |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.3.0'`                     |\n| `_view_name`            | string                     | `'ControllerButtonView'`      |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `pressed`               | boolean                    | `false`                       | Whether the button is pressed.            |\n| `value`                 | number (float)             | `0.0`                         | The value of the button.                  |\n```\n\n----------------------------------------\n\nTITLE: HTML Widget Component Specification\nDESCRIPTION: Defines the HTML widget component with attributes for DOM manipulation, model/view configuration, and styling. Includes support for placeholder text and string value handling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                    |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element               |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.1.0'`                     |\n| `_model_name`           | string                               | `'HTMLModel'`                 |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.1.0'`                     |\n| `_view_name`            | string                               | `'HTMLView'`                  |\n| `description`           | string                               | `''`                          | Description of the control.                             |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                  |\n| `value`                 | string                               | `''`                          | String value                                            |\n```\n\n----------------------------------------\n\nTITLE: VBox Model and View Specification\nDESCRIPTION: Defines attributes for vertical box layout widget including styling and child widget management.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n```\n\n----------------------------------------\n\nTITLE: Handling Widget Replacement in GridspecLayout\nDESCRIPTION: Demonstrates how GridspecLayout handles conflicts when a new widget is placed in a position that already contains a widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ngrid = GridspecLayout(4, 3, height='300px')\ngrid[:3, 1:] = create_expanded_button('One', 'info')\ngrid[:, 0] = create_expanded_button('Two', 'info')\ngrid[3, 1] = create_expanded_button('Three', 'info')\ngrid[3, 2] = create_expanded_button('Four', 'info')\n\ngrid\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Using Widgets in Jupyter\nDESCRIPTION: Creates a table of contents for documentation on using Jupyter Widgets, including basic usage, widget types, events, styling, and asynchronous operations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/how-to/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:caption: Using Widgets\n:maxdepth: 1\n../examples\n../user_install\n../examples/Widget Basics\n../examples/Widget List\n../examples/Output Widget\n../examples/Widget Events\n../examples/Widget Styling\n../examples/Widget Layout\n../examples/Layout Templates\n../examples/Using Interact\n../examples/Widget Asynchronous\n```\n```\n\n----------------------------------------\n\nTITLE: Widget State Update Message Structure in JSON\nDESCRIPTION: The JSON structure for synchronizing widget state changes between kernel and frontend. This message is sent over the widget's comm channel when state changes occur on either side.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id' : 'u-u-i-d',\n  'data' : {\n    'method': 'update',\n    'state': { <dictionary of widget state> },\n    'buffer_paths': [ <list with paths corresponding to the binary buffers> ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AccordionModel Widget Configuration\nDESCRIPTION: Specification for the AccordionModel widget from @jupyter-widgets/controls v2.0.0, defining its attributes, types, defaults and documentation. Includes styling, children management, and interaction properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string | `'2.0.0'` |\n| `_model_name` | string | `'AccordionModel'` |\n| `box_style` | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''` |\n```\n\n----------------------------------------\n\nTITLE: Embedding Standard Jupyter Widgets in HTML\nDESCRIPTION: Demonstrates how to embed standard Jupyter widgets in an HTML page using a CDN-hosted script for the jupyter-widgets/html-manager package.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://cdn.jsdelivr.net/npm/@jupyter-widgets/html-manager@*/dist/embed.js\"\n  crossorigin=\"anonymous\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: ButtonStyle Model and View Configuration Documentation\nDESCRIPTION: Specification for ButtonStyleModel from @jupyter-widgets/controls and StyleView from @jupyter-widgets/base packages. Details attributes for customizing button appearance including colors and fonts.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                      |\n| ----------------------- | ---------------- | ----------------------------- | ------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'2.0.0'`                     |\n| `_model_name`           | string           | `'ButtonStyleModel'`          |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'2.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `button_color`          | `null` or string | `null`                        | Color of the button       |\n| `font_family`           | `null` or string | `null`                        | Button text font family.  |\n| `font_size`             | `null` or string | `null`                        | Button text font size.    |\n| `font_style`            | `null` or string | `null`                        | Button text font style.   |\n| `font_variant`          | `null` or string | `null`                        | Button text font variant. |\n| `font_weight`           | `null` or string | `null`                        | Button text font weight.  |\n| `text_color`            | `null` or string | `null`                        | Button text color.        |\n| `text_decoration`       | `null` or string | `null`                        | Button text decoration.   |\n```\n\n----------------------------------------\n\nTITLE: Displaying Object Fit Examples with Large Image\nDESCRIPTION: Creates a grid of boxes showing different object_fit options applied to a large image. Uses VBox and HBox for layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nboxes = []\nfor fit in fit_options:\n    ib = Image(value=im_600_300)\n    ib.layout.object_fit = fit\n    ib.layout.margin = image_margin\n\n    boxes.append(make_box_for_grid(ib, fit))\n\nvb = VBox()\nh = HTML(value='<{size}>Examples of <code>object_fit</code> with large image</{size}>'.format(size=caption_size))\nvb.layout.align_items = 'center'\nhb = HBox()\nhb.layout = hbox_layout\nhb.children = boxes\n\nvb.children = [h, hb]\nvb\n```\n\n----------------------------------------\n\nTITLE: BoundedFloatText Widget Model and View Specification\nDESCRIPTION: Defines attributes and configuration for a bounded float text input widget. Includes model and view specifications with properties for value constraints, styling, and behavior control.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.4.0'`                     |\n| `_model_name`           | string                               | `'BoundedFloatTextModel'`     |\n```\n\n----------------------------------------\n\nTITLE: HTMLMath Widget Configuration\nDESCRIPTION: Specifications for HTMLMathModel and HTMLMathView components providing HTML and math content display. Includes text formatting and placeholder configuration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_model_module` | string | '@jupyter-widgets/controls' |\n| `value` | string | '' | String value |\n| `placeholder` | string | '\\u200b' | Placeholder text to display when nothing has been typed |\n```\n\n----------------------------------------\n\nTITLE: Accessing Widget Style Keys\nDESCRIPTION: Shows how to access available style properties for a widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Styling.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nb1.style.keys\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerModel and ControllerView attributes in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and descriptions for the ControllerModel and ControllerView widgets from @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### ControllerModel (@jupyter-widgets/controls, 1.3.0); ControllerView (@jupyter-widgets/controls, 1.3.0)\n\n| Attribute               | Type                                | Default                       | Help                                                  |\n| ----------------------- | ----------------------------------- | ----------------------------- | ----------------------------------------------------- |\n| `_dom_classes`          | array of string                     | `[]`                          | CSS classes applied to widget DOM element             |\n| `_model_module`         | string                              | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                              | `'1.3.0'`                     |\n| `_model_name`           | string                              | `'ControllerModel'`           |\n| `_view_module`          | string                              | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                              | `'1.3.0'`                     |\n| `_view_name`            | string                              | `'ControllerView'`            |\n| `axes`                  | array of reference to Axis widget   | `[]`                          | The axes on the gamepad.                              |\n| `buttons`               | array of reference to Button widget | `[]`                          | The buttons on the gamepad.                           |\n| `connected`             | boolean                             | `false`                       | Whether the gamepad is connected.                     |\n| `index`                 | number (integer)                    | `0`                           | The id number of the controller.                      |\n| `layout`                | reference to Layout widget          | reference to new instance     |\n| `mapping`               | string                              | `''`                          | The name of the control mapping.                      |\n| `name`                  | string                              | `''`                          | The name of the controller.                           |\n| `timestamp`             | number (float)                      | `0.0`                         | The last time the data from this gamepad was updated. |\n```\n\n----------------------------------------\n\nTITLE: Valid Widget Specification for Jupyter Widgets\nDESCRIPTION: Defines the model and view attributes for the Valid widget, which provides validation functionality with customizable messages and styling options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                   |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.3.0'`                     |\n| `_model_name`           | string                               | `'ValidModel'`                |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.3.0'`                     |\n| `_view_name`            | string                               | `'ValidView'`                 |\n| `description`           | string                               | `''`                          | Description of the control.                            |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description). |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                        |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `readout`               | string                               | `'Invalid'`                   | Message displayed when the value is False              |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                 |\n| `value`                 | boolean                              | `false`                       | Bool value                                             |\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Publishing Content with Jupyter Widgets\nDESCRIPTION: Creates a table of contents for documentation on publishing content that includes Jupyter Widgets, focusing on embedding widgets in other contexts.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/how-to/index.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:caption: Publishing Content with Widgets\n:maxdepth: 1\n../embedding\n```\n```\n\n----------------------------------------\n\nTITLE: IntProgress Widget Specification (Jupyter Widgets Controls)\nDESCRIPTION: Defines the attributes and configuration options for the IntProgress widget, which displays a progress bar. Includes styling options, value range controls, and orientation settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                                   |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.5.0'`                     |\n| `_model_name`           | string                                                               | `'IntProgressModel'`          |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.5.0'`                     |\n| `_view_name`            | string                                                               | `'ProgressView'`              |\n| `bar_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the progress bar.         |\n| `description`           | string                                                               | `''`                          | Description of the control.                            |\n| `description_tooltip`   | `null` or string                                                     | `null`                        | Tooltip for the description (defaults to description). |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n| `max`                   | number (integer)                                                     | `100`                         | Max value                                              |\n| `min`                   | number (integer)                                                     | `0`                           | Min value                                              |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`)                         | `'horizontal'`                | Vertical or horizontal.                                |\n| `style`                 | reference to ProgressStyle widget                                    | reference to new instance     |\n| `value`                 | number (integer)                                                     | `0`                           | Int value                                              |\n```\n\n----------------------------------------\n\nTITLE: OutputModel and OutputView Widget Specification\nDESCRIPTION: Specification for OutputModel and OutputView components from @jupyter-widgets/output v1.0.0. Defines an output widget for capturing and displaying output messages from the frontend.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                     | Help                                          |\n| ----------------------- | -------------------------- | --------------------------- | --------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                        | CSS classes applied to widget DOM element     |\n| `_model_module`         | string                     | `'@jupyter-widgets/output'` |\n| `_model_module_version` | string                     | `'1.0.0'`                   |\n| `_model_name`           | string                     | `'OutputModel'`             |\n| `_view_module`          | string                     | `'@jupyter-widgets/output'` |\n| `_view_module_version`  | string                     | `'1.0.0'`                   |\n| `_view_name`            | string                     | `'OutputView'`              |\n| `layout`                | reference to Layout widget | reference to new instance   |\n| `msg_id`                | string                     | `''`                        | Parent message id of messages to capture      |\n| `outputs`               | array                      | `[]`                        | The output messages synced from the frontend. |\n```\n\n----------------------------------------\n\nTITLE: AudioModel Widget Documentation\nDESCRIPTION: Documentation for the AudioModel widget from @jupyter-widgets/controls v1.4.0, describing audio playback control attributes and their configurations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                       | Help                                                                                |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------------------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element                                           |\n| `autoplay`              | boolean                    | `true`                        | When true, the audio starts when it's displayed                                     |\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons for AppLayout Example\nDESCRIPTION: Creates a set of color-coded buttons to populate different regions of an AppLayout demonstration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nheader_button = create_expanded_button('Header', 'success')\nleft_button = create_expanded_button('Left', 'info')\ncenter_button = create_expanded_button('Center', 'warning')\nright_button = create_expanded_button('Right', 'info')\nfooter_button = create_expanded_button('Footer', 'success')\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Time Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_time module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_time\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Widget State Request Message Structure in JSON\nDESCRIPTION: The JSON structure for requesting the full state of a widget. When a frontend sends this message, the kernel should immediately respond with an update message containing the entire widget state.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id' : 'u-u-i-d',\n  'data' : {\n    'method': 'request_state'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Password Widget Configuration (@jupyter-widgets/controls)\nDESCRIPTION: Specification for a password input widget with continuous update support and placeholder text. Includes model and view configurations for secure text input.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _model_name: 'PasswordModel',\n  _view_name: 'PasswordView',\n  _model_module: '@jupyter-widgets/controls',\n  _view_module: '@jupyter-widgets/controls',\n  _model_module_version: '2.0.0',\n  _view_module_version: '2.0.0',\n  value: '',\n  placeholder: '\\u200b',\n  continuous_update: true,\n  disabled: false,\n  description: ''\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox Widget Component Specification\nDESCRIPTION: Defines CheckboxModel and CheckboxView components for boolean input controls. Includes description and styling options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                           |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.2.0'`                     |\n| `_model_name`           | string                               | `'CheckboxModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.2.0'`                     |\n| `_view_name`            | string                               | `'CheckboxView'`              |\n| `description`           | string                               | `''`                          | Description of the control.                                         |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                                     |\n| `indent`                | boolean                              | `true`                        | Indent the control to align with other controls with a description. |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                              |\n| `value`                 | boolean                              | `false`                       | Bool value                                                          |\n```\n\n----------------------------------------\n\nTITLE: Defining BoxModel and BoxView in Jupyter Widgets\nDESCRIPTION: Specification for BoxModel and BoxView from @jupyter-widgets/controls package. Includes attributes for styling, children management, and layout configuration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### BoxModel (@jupyter-widgets/controls, 1.0.0); BoxView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                                                                | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.0.0'`                     |\n| `_model_name`           | string                                                               | `'BoxModel'`                  |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.0.0'`                     |\n| `_view_name`            | string                                                               | `'BoxView'`                   |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array                                                                | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: HTML Widget Configuration Reference\nDESCRIPTION: Configuration reference for the Jupyter HTML widget, specifying DOM properties, model configurations, and HTML-specific attributes like placeholder and value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                      | CSS classes applied to widget DOM element                                                     |\n```\n\n----------------------------------------\n\nTITLE: IntSlider Widget Model and View Specification\nDESCRIPTION: Specification for IntSlider widget model and view for single value selection. Includes attributes for customization, range controls, and display options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nIntSliderModel (@jupyter-widgets/controls, 1.4.0); IntSliderView (@jupyter-widgets/controls, 1.4.0)\n\nSingle-value integer slider with customizable range, step size, and display options. Supports continuous updates, custom formatting, and min/max constraints. Default range is 0-100 with step size of 1.\n```\n\n----------------------------------------\n\nTITLE: TextStyle Widget Model Specification\nDESCRIPTION: Defines the styling attributes and configuration options for the TextStyle widget model, including text formatting and layout options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n### TextStyleModel (@jupyter-widgets/controls, 2.0.0); StyleView (@jupyter-widgets/base, 2.0.0)\n\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'2.0.0'`                     |\n| `_model_name`           | string           | `'TextStyleModel'`            |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'2.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `background`            | `null` or string | `null`                        | Background specifications.                           |\n| `description_width`     | string           | `''`                          | Width of the description to the side of the control. |\n| `font_size`             | `null` or string | `null`                        | Text font size.                                      |\n| `text_color`            | `null` or string | `null`                        | Text color                                           |\n```\n\n----------------------------------------\n\nTITLE: Defining Available Basemaps\nDESCRIPTION: Creates a dictionary mapping human-readable names to basemap objects from ipyleaflet, allowing users to switch between different map styles.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmaps = {'Mapnik' : basemaps.OpenStreetMap.Mapnik,\n        'Esri' : basemaps.Esri.DeLorme}\n```\n\n----------------------------------------\n\nTITLE: Executing Image Browser\nDESCRIPTION: Calls the browse_images function with the digits dataset to create the interactive image browser.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Browser.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbrowse_images(digits)\n```\n\n----------------------------------------\n\nTITLE: Jupyter Checkbox Widget Model and View Specification\nDESCRIPTION: Details the attributes for CheckboxModel and CheckboxView components including state management and styling options. Provides boolean input functionality with description and tooltip support.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                           |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.4.0'`                     |\n| `_model_name`           | string                               | `'CheckboxModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.4.0'`                     |\n| `_view_name`            | string                               | `'CheckboxView'`              |\n| `description`           | string                               | `''`                          | Description of the control.                                         |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).              |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                                     |\n| `indent`                | boolean                              | `true`                        | Indent the control to align with other controls with a description. |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                              |\n| `value`                 | boolean                              | `false`                       | Bool value                                                          |\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Description Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_description module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_description\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Jupyter Button Widget Model and View Specification\nDESCRIPTION: Defines the attributes and properties for ButtonModel and ButtonView components including styling, layout, and interaction options. The model includes button styling, labeling, and icon customization capabilities.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                              | Default                       | Help                                              |\n| ----------------------- | --------------------------------------------------------------------------------- | ----------------------------- | ------------------------------------------------- |\n| `_dom_classes`          | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element         |\n| `_model_module`         | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                            | `'1.4.0'`                     |\n| `_model_name`           | string                                                                            | `'ButtonModel'`               |\n| `_view_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                            | `'1.4.0'`                     |\n| `_view_name`            | string                                                                            | `'ButtonView'`                |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the button.          |\n| `description`           | string                                                                            | `''`                          | Button label.                                     |\n| `disabled`              | boolean                                                                           | `false`                       | Enable or disable user changes.                   |\n| `icon`                  | string                                                                            | `''`                          | Font-awesome icon name, without the 'fa-' prefix. |\n| `layout`                | reference to Layout widget                                                        | reference to new instance     |\n| `style`                 | reference to ButtonStyle widget                                                   | reference to new instance     |\n| `tooltip`               | string                                                                            | `''`                          | Tooltip caption of the button.                    |\n```\n\n----------------------------------------\n\nTITLE: Image Widget Component Specification\nDESCRIPTION: Details the Image widget component attributes including image format handling, dimension controls, and byte string data management.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.1.0'`                     |\n| `_model_name`           | string                     | `'ImageModel'`                |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.1.0'`                     |\n| `_view_name`            | string                     | `'ImageView'`                 |\n| `format`                | string                     | `'png'`                       | The format of the image.                  |\n| `height`                | string                     | `''`                          | Height of the image in pixels.            |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `value`                 | Bytes                      | `b''`                         | The image data as a byte string.          |\n| `width`                 | string                     | `''`                          | Width of the image in pixels.             |\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerAxis Widget Attributes in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and help text for the ControllerAxisModel and ControllerAxisView from @jupyter-widgets/controls version 2.0.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### ControllerAxisModel (@jupyter-widgets/controls, 2.0.0); ControllerAxisView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'2.0.0'`                     |\n| `_model_name`           | string                     | `'ControllerAxisModel'`       |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'2.0.0'`                     |\n| `_view_name`            | string                     | `'ControllerAxisView'`        |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `tabbable`              | `null` or boolean          | `null`                        | Is widget tabbable?                       |\n| `tooltip`               | `null` or string           | `null`                        | A tooltip caption.                        |\n| `value`                 | number (float)             | `0.0`                         | The value of the axis.                    |\n```\n\n----------------------------------------\n\nTITLE: Vertical Widget Alignment Implementation\nDESCRIPTION: Demonstrating vertical alignment of slider and progress bar with custom heights\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Alignment.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nHBox([IntSlider(description='Slider', orientation='vertical', height='200px'),\n      FloatProgress(description='Progress', value=50, orientation='vertical', height='200px')])\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets DOMWidget Class in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.domwidget module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.domwidget\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Frontend State Sync Message\nDESCRIPTION: Frontend to kernel message for synchronizing widget state changes\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id' : 'u-u-i-d',\n  'data' : {\n    'method': 'backbone',\n    'sync_data': { <dictionary of widget state> }\n    'buffer_keys': [ <optional list of state keys corresponding to binary buffers in the message> ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BoundedIntText Widget Model and View Specification\nDESCRIPTION: Defines attributes and configuration for a bounded integer text input widget. Includes model and view specifications with properties for value constraints, styling, and behavior control.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.4.0'`                     |\n```\n\n----------------------------------------\n\nTITLE: Play Widget Model/View Configuration\nDESCRIPTION: Specification for PlayModel and PlayView widgets that provide playback control functionality with customizable intervals, ranges, and repeat options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                   |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'PlayModel'`                 |\n```\n\n----------------------------------------\n\nTITLE: Documenting FloatProgressModel and ProgressView Components in Markdown\nDESCRIPTION: Markdown table describing the attributes, types, default values, and help text for the FloatProgressModel and ProgressView components from the @jupyter-widgets/controls package.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### FloatProgressModel (@jupyter-widgets/controls, 1.0.0); ProgressView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                                                           | Default                       | Help                                           |\n| ----------------------- | ------------------------------------------------------------------------------ | ----------------------------- | ---------------------------------------------- |\n| `_dom_classes`          | array                                                                          | `[]`                          | CSS classes applied to widget DOM element      |\n| `_model_module`         | string                                                                         | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                         | `'1.0.0'`                     |\n| `_model_name`           | string                                                                         | `'FloatProgressModel'`        |\n| `_view_module`          | string                                                                         | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                         | `'1.0.0'`                     |\n| `_view_name`            | string                                                                         | `'ProgressView'`              |\n| `bar_style`             | `null` or string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the progress bar. |\n| `description`           | string                                                                         | `''`                          | Description of the control.                    |\n| `layout`                | reference to Layout widget                                                     | reference to new instance     |\n| `max`                   | number (float)                                                                 | `100.0`                       | Max value                                      |\n| `min`                   | number (float)                                                                 | `0.0`                         | Min value                                      |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`)                                   | `'horizontal'`                | Vertical or horizontal.                        |\n| `style`                 | reference to ProgressStyle widget                                              | reference to new instance     |\n| `value`                 | number (float)                                                                 | `0.0`                         | Float value                                    |\n```\n\n----------------------------------------\n\nTITLE: Password Widget Model/View Configuration\nDESCRIPTION: Specification for a password input widget with attributes for DOM classes, model/view modules, continuous updates, description, placeholder text, and styling options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.0.0'`                     |\n| `_model_name`           | string                               | `'PasswordModel'`             |\n```\n\n----------------------------------------\n\nTITLE: Checkbox Widget Specification\nDESCRIPTION: Defines the model and view attributes for the Checkbox widget including boolean value, description, and styling properties. Uses CheckboxModel and CheckboxView from @jupyter-widgets/controls v1.5.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                           |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'CheckboxModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.5.0'`                     |\n| `_view_name`            | string                               | `'CheckboxView'`              |\n| `description`           | string                               | `''`                          | Description of the control.                                         |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).              |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                                     |\n| `indent`                | boolean                              | `true`                        | Indent the control to align with other controls with a description. |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                              |\n| `value`                 | boolean                              | `false`                       | Bool value                                                          |\n```\n\n----------------------------------------\n\nTITLE: CheckboxStyle Model and View Configuration Documentation\nDESCRIPTION: Specification for CheckboxStyleModel from @jupyter-widgets/controls and StyleView from @jupyter-widgets/base packages. Details attributes for customizing checkbox appearance.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'2.0.0'`                     |\n| `_model_name`           | string           | `'CheckboxStyleModel'`        |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'2.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `background`            | `null` or string | `null`                        | Background specifications.                           |\n| `description_width`     | string           | `''`                          | Width of the description to the side of the control. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid with Rows, Columns, and Gaps in Jupyter Widgets\nDESCRIPTION: Shows how to create a grid layout with specified row and column templates and gaps using Jupyter Widgets. It creates a 3x3 grid of buttons with custom sizing and spacing.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nGridBox(children=[Button(layout=Layout(width='auto', height='auto'),\n                         style=ButtonStyle(button_color='darkseagreen')) for i in range(9)\n                 ],\n        layout=Layout(\n            width='50%',\n            grid_template_columns='100px 50px 100px',\n            grid_template_rows='80px auto 80px', \n            grid_gap='5px 10px'))\n```\n\n----------------------------------------\n\nTITLE: Displaying a Widget Again\nDESCRIPTION: This snippet shows how to display an existing widget instance again, creating a new view for the same widget model.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndisplay(w)\n```\n\n----------------------------------------\n\nTITLE: FloatsInput Widget Model Specification\nDESCRIPTION: Specification for FloatsInputModel and FloatsInputView from @jupyter-widgets/controls v2.0.0. Defines a widget for handling float input tags with formatting options and validation constraints.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                                                              | Default                       | Help                                      |\n| ------------------------ | --------------------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                                                                            | `'2.0.0'`                     |\n| `_model_name`            | string                                                                            | `'FloatsInputModel'`          |\n| `_view_module`           | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                                                                            | `'2.0.0'`                     |\n| `_view_name`             | string                                                                            | `'FloatsInputView'`           |\n```\n\n----------------------------------------\n\nTITLE: Configuring History Section TOC in Sphinx Documentation\nDESCRIPTION: Creates a table of contents section titled 'History' that includes the changelog file. The toctree is configured with a maximum depth of 1.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/index.md#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:caption: History\n:maxdepth: 1\n../changelog\n```\n```\n\n----------------------------------------\n\nTITLE: Progress Style Widget Model/View Configuration\nDESCRIPTION: Specification for progress bar styling widget with attributes for bar color and description width customization.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.0.0'`                     |\n| `bar_color`             | `null` or string | `null`                        | Color of the progress bar.                           |\n```\n\n----------------------------------------\n\nTITLE: Defining Combobox Widget Attributes in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and help text for the ComboboxModel and ComboboxView from @jupyter-widgets/controls version 2.0.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### ComboboxModel (@jupyter-widgets/controls, 2.0.0); ComboboxView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                          | Default                       | Help                                                                                                         |\n| ------------------------ | ----------------------------- | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`           | array of string               | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`          | string                        | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                        | `'2.0.0'`                     |\n| `_model_name`            | string                        | `'ComboboxModel'`             |\n| `_view_module`           | string                        | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                        | `'2.0.0'`                     |\n| `_view_name`             | string                        | `'ComboboxView'`              |\n| `continuous_update`      | boolean                       | `true`                        | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`            | string                        | `''`                          | Description of the control.                                                                                  |\n| `description_allow_html` | boolean                       | `false`                       | Accept HTML in the description.                                                                              |\n| `disabled`               | boolean                       | `false`                       | Enable or disable user changes                                                                               |\n| `ensure_option`          | boolean                       | `false`                       | If set, ensure value is in options. Implies continuous_update=False.                                         |\n| `layout`                 | reference to Layout widget    | reference to new instance     |\n| `options`                | array of string               | `[]`                          | Dropdown options for the combobox                                                                            |\n| `placeholder`            | string                        | `'\\u200b'`                    | Placeholder text to display when nothing has been typed                                                      |\n| `style`                  | reference to TextStyle widget | reference to new instance     |\n| `tabbable`               | `null` or boolean             | `null`                        | Is widget tabbable?                                                                                          |\n| `tooltip`                | `null` or string              | `null`                        | A tooltip caption.                                                                                           |\n| `value`                  | string                        | `''`                          | String value                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Documenting SliderStyleModel and StyleView in Markdown\nDESCRIPTION: Describes the attributes, types, default values, and help text for the SliderStyleModel from @jupyter-widgets/controls version 1.2.0 and StyleView from @jupyter-widgets/base version 1.0.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### SliderStyleModel (@jupyter-widgets/controls, 1.2.0); StyleView (@jupyter-widgets/base, 1.0.0)\n\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.2.0'`                     |\n| `_model_name`           | string           | `'SliderStyleModel'`          |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'1.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `description_width`     | string           | `''`                          | Width of the description to the side of the control. |\n| `handle_color`          | `null` or string | `null`                        | Color of the slider handle.                          |\n```\n\n----------------------------------------\n\nTITLE: Documentation for Jupyter.Tab Widget\nDESCRIPTION: Specification for a tab container widget in Jupyter. Defines attributes for managing multiple pages/panels in a tabbed interface.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n### Jupyter.Tab\n\n| Attribute               | Type                                                                 | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------------------------------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                                                | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                                                               | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                                                               | `'~2.1.0'`                |\n| `_model_name`           | string                                                               | `'TabModel'`              |\n| `_titles`               | object                                                               | `{}`                      | Titles of the pages                                                                           |\n| `_view_module`          | string                                                               | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                                                               | `'~2.1.0'`                |\n| `_view_name`            | string                                                               | `'TabView'`               |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                      | Use a predefined styling for the box.                                                         |\n| `children`              | array                                                                | `[]`                      |\n| `layout`                | reference to Layout widget                                           | reference to new instance |\n| `msg_throttle`          | number (integer)                                                     | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `selected_index`        | number (integer)                                                     | `0`                       |\n```\n\n----------------------------------------\n\nTITLE: Importing IPyWidgets Module in Python\nDESCRIPTION: Imports all classes and functions from the ipywidgets module using the wildcard import syntax.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_sanitizer.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import *\n```\n\n----------------------------------------\n\nTITLE: State Request Message\nDESCRIPTION: Frontend request for complete widget state\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id' : 'u-u-i-d',\n  'data' : {\n    'method': 'request_state'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Widget Specification for Jupyter Widgets\nDESCRIPTION: Defines the model and view attributes for the Output widget, which handles the display of output messages from the frontend.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                     | Help                                          |\n| ----------------------- | -------------------------- | --------------------------- | --------------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                        | CSS classes applied to widget DOM element     |\n| `_model_module`         | string                     | `'@jupyter-widgets/output'` |\n| `_model_module_version` | string                     | `'1.0.0'`                   |\n| `_model_name`           | string                     | `'OutputModel'`             |\n| `_view_module`          | string                     | `'@jupyter-widgets/output'` |\n| `_view_module_version`  | string                     | `'1.0.0'`                   |\n| `_view_name`            | string                     | `'OutputView'`              |\n| `layout`                | reference to Layout widget | reference to new instance   |\n| `msg_id`                | string                     | `''`                        | Parent message id of messages to capture      |\n| `outputs`               | array of object            | `[]`                        | The output messages synced from the frontend. |\n```\n\n----------------------------------------\n\nTITLE: Box Widget Model and View Specification\nDESCRIPTION: Defines attributes and configuration for a box container widget. Includes model and view specifications with properties for styling and child widget management.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n```\n\n----------------------------------------\n\nTITLE: SelectionRangeSlider Widget Specification\nDESCRIPTION: Defines attributes for SelectionRangeSliderModel and SelectionRangeSliderView widgets that allow selection of a range using a slider interface. Includes configuration for continuous updates, orientation, and readout display.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Video Widget from a URL\nDESCRIPTION: This snippet creates a Video widget from a URL, sets autoplay to False, and displays it.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Media widgets.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvideo2 = Video.from_url(\"https://webrtc.github.io/samples/src/video/chrome.webm\", autoplay=False)\nvideo2\n```\n\n----------------------------------------\n\nTITLE: NaiveDatetime Widget Configuration (@jupyter-widgets/controls)\nDESCRIPTION: Specification for a datetime picker widget with customizable min/max values, styling, and accessibility features. Includes model and view configurations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _model_name: 'NaiveDatetimeModel',\n  _view_name: 'DatetimeView',\n  _model_module: '@jupyter-widgets/controls',\n  _view_module: '@jupyter-widgets/controls',\n  _model_module_version: '2.0.0',\n  _view_module_version: '2.0.0',\n  value: null,\n  min: null,\n  max: null,\n  disabled: false,\n  description: '',\n  tabbable: null\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting HTMLMathModel and HTMLMathView in Markdown\nDESCRIPTION: Markdown table detailing the attributes, types, default values, and help text for HTMLMathModel and HTMLMathView from @jupyter-widgets/controls version 1.4.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                    |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element               |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.4.0'`                     |\n| `_model_name`           | string                               | `'HTMLMathModel'`             |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.4.0'`                     |\n| `_view_name`            | string                               | `'HTMLMathView'`              |\n| `description`           | string                               | `''`                          | Description of the control.                             |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).  |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                  |\n| `value`                 | string                               | `''`                          | String value                                            |\n```\n\n----------------------------------------\n\nTITLE: Displaying Object Fit Examples with 100% Width\nDESCRIPTION: Demonstrates object_fit behavior when image layout width is set to 100% of container.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nboxes = []\nfor fit in fit_options:\n    ib = Image(value=im_50_25)\n    ib.layout.object_fit = fit\n    ib.layout.margin = image_margin\n\n    # NOTE WIDTH IS SET TO 100%\n    ib.layout.width = '100%'\n    \n    boxes.append(make_box_for_grid(ib, fit))\n\nvb = VBox()\nh = HTML(value='<{size}>Examples of <code>object_fit</code> with image '\n               'smaller than container</{size}>'.format(size=caption_size))\nvb.layout.align_items = 'center'\nhb = HBox()\nhb.layout = hbox_layout\nhb.children = boxes\n\nvb.children = [h, hb]\nvb\n```\n\n----------------------------------------\n\nTITLE: VideoModel and VideoView Widget Configuration\nDESCRIPTION: Specification for Jupyter video widget component from @jupyter-widgets/controls v2.0.0. Defines attributes for video playback control, formatting, and display properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                       | Help                                                                                |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------------------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element                                           |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'2.0.0'`                     |\n| `_model_name`           | string                     | `'VideoModel'`                |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'2.0.0'`                     |\n| `_view_name`            | string                     | `'VideoView'`                 |\n| `autoplay`              | boolean                    | `true`                        | When true, the video starts when it's displayed                                     |\n| `controls`              | boolean                    | `true`                        | Specifies that video controls should be displayed (such as a play/pause button etc) |\n| `format`                | string                     | `'mp4'`                       | The format of the video.                                                            |\n| `height`                | string                     | `''`                          | Height of the video in pixels.                                                      |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `loop`                  | boolean                    | `true`                        | When true, the video will start from the beginning after finishing                  |\n| `tabbable`              | `null` or boolean          | `null`                        | Is widget tabbable?                                                                 |\n| `tooltip`               | `null` or string           | `null`                        | A tooltip caption.                                                                  |\n| `value`                 | Bytes                      | `b''`                         | The media data as a memory view of bytes.                                           |\n| `width`                 | string                     | `''`                          | Width of the video in pixels.                                                       |\n```\n\n----------------------------------------\n\nTITLE: DatePicker Widget Configuration\nDESCRIPTION: Defines the model and view for a date picker widget with attributes for user interaction, styling, and date value handling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.2.0'`                     |\n| `_model_name`           | string                               | `'DatePickerModel'`           |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.2.0'`                     |\n| `_view_name`            | string                               | `'DatePickerView'`            |\n| `description`           | string                               | `''`                          | Description of the control.               |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.           |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `value`                 | `null` or Date                       | `null`                        |\n```\n\n----------------------------------------\n\nTITLE: Importing IPyWidgets Library\nDESCRIPTION: Imports all classes and functions from the ipywidgets package using the wildcard import.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_borders.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import *\n```\n\n----------------------------------------\n\nTITLE: Developing JupyterLab extension\nDESCRIPTION: Commands to link the development version of the extension with JupyterLab and build the TypeScript source.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# link your development version of the extension with JupyterLab\njupyter labextension develop . --overwrite\n\n# rebuild extension TypeScript source after making changes\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Defining OutputModel and OutputView Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes, types, default values, and descriptions for OutputModel and OutputView from @jupyter-widgets/output version 1.0.0. It includes details on CSS classes, model and view specifications, and output-specific properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### OutputModel (@jupyter-widgets/output, 1.0.0); OutputView (@jupyter-widgets/output, 1.0.0)\n\n| Attribute               | Type                       | Default                     | Help                                          |\n| ----------------------- | -------------------------- | --------------------------- | --------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                        | CSS classes applied to widget DOM element     |\n| `_model_module`         | string                     | `'@jupyter-widgets/output'` |\n| `_model_module_version` | string                     | `'1.0.0'`                   |\n| `_model_name`           | string                     | `'OutputModel'`             |\n| `_view_module`          | string                     | `'@jupyter-widgets/output'` |\n| `_view_module_version`  | string                     | `'1.0.0'`                   |\n| `_view_name`            | string                     | `'OutputView'`              |\n| `layout`                | reference to Layout widget | reference to new instance   |\n| `msg_id`                | string                     | `''`                        | Parent message id of messages to capture      |\n| `outputs`               | array                      | `[]`                        | The output messages synced from the frontend. |\n```\n\n----------------------------------------\n\nTITLE: Documenting Jupyter.Checkbox Widget Attributes in Markdown\nDESCRIPTION: This snippet presents a detailed table of attributes for the Jupyter.Checkbox widget, including their types, default values, and descriptions. It covers behavioral and interactive attributes of the checkbox.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Jupyter.Checkbox\n\n| Attribute               | Type                       | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                     | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                     | `'~2.1.0'`                |\n| `_model_name`           | string                     | `'CheckboxModel'`         |\n| `_view_module`          | string                     | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                     | `'~2.1.0'`                |\n| `_view_name`            | string                     | `'CheckboxView'`          |\n| `description`           | string                     | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                    | `false`                   | Enable or disable user changes.                                                               |\n| `layout`                | reference to Layout widget | reference to new instance |\n| `msg_throttle`          | number (integer)           | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `value`                 | boolean                    | `false`                   | Bool value                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: GridBox Widget Specification\nDESCRIPTION: Defines the model and view for a grid container widget that can hold and arrange multiple child widgets. Part of @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.3.0'`                     |\n```\n\n----------------------------------------\n\nTITLE: Accessing a Widget's Keys Property\nDESCRIPTION: Accesses the 'keys' property of a widget to display all synchronized, stateful properties that can be used with the widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nw.keys\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutModel and LayoutView Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes for LayoutModel and LayoutView classes using a markdown table. It includes attribute names, types, default values, and help text for various CSS-related properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                                                                                                                        | Default                   | Help                                                             |\n| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------- | ---------------------------------------------------------------- |\n| `_model_module`         | string                                                                                                                                                                      | `'@jupyter-widgets/base'` | The namespace for the model.                                     |\n| `_model_module_version` | string                                                                                                                                                                      | `'1.1.0'`                 | A semver requirement for namespace version containing the model. |\n| `_model_name`           | string                                                                                                                                                                      | `'LayoutModel'`           |\n| `_view_module`          | string                                                                                                                                                                      | `'@jupyter-widgets/base'` |\n| `_view_module_version`  | string                                                                                                                                                                      | `'1.1.0'`                 |\n| `_view_name`            | string                                                                                                                                                                      | `'LayoutView'`            |\n| `align_content`         | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'space-between'`, `'space-around'`, `'space-evenly'`, `'stretch'`, `'inherit'`, `'initial'`, `'unset'`) | `null`                    | The align-content CSS attribute.                                 |\n| `align_items`           | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'baseline'`, `'stretch'`, `'inherit'`, `'initial'`, `'unset'`)                                          | `null`                    | The align-items CSS attribute.                                   |\n| `align_self`            | `null` or string (one of `'auto'`, `'flex-start'`, `'flex-end'`, `'center'`, `'baseline'`, `'stretch'`, `'inherit'`, `'initial'`, `'unset'`)                                | `null`                    | The align-self CSS attribute.                                    |\n| `border`                | `null` or string                                                                                                                                                            | `null`                    | The border CSS attribute.                                        |\n| `bottom`                | `null` or string                                                                                                                                                            | `null`                    | The bottom CSS attribute.                                        |\n| `display`               | `null` or string                                                                                                                                                            | `null`                    | The display CSS attribute.                                       |\n| `flex`                  | `null` or string                                                                                                                                                            | `null`                    | The flex CSS attribute.                                          |\n| `flex_flow`             | `null` or string                                                                                                                                                            | `null`                    | The flex-flow CSS attribute.                                     |\n| `grid_area`             | `null` or string                                                                                                                                                            | `null`                    | The grid-area CSS attribute.                                     |\n| `grid_auto_columns`     | `null` or string                                                                                                                                                            | `null`                    | The grid-auto-columns CSS attribute.                             |\n| `grid_auto_flow`        | `null` or string (one of `'column'`, `'row'`, `'row dense'`, `'column dense'`, `'inherit'`, `'initial'`, `'unset'`)                                                         | `null`                    | The grid-auto-flow CSS attribute.                                |\n| `grid_auto_rows`        | `null` or string                                                                                                                                                            | `null`                    | The grid-auto-rows CSS attribute.                                |\n| `grid_column`           | `null` or string                                                                                                                                                            | `null`                    | The grid-column CSS attribute.                                   |\n| `grid_gap`              | `null` or string                                                                                                                                                            | `null`                    | The grid-gap CSS attribute.                                      |\n| `grid_row`              | `null` or string                                                                                                                                                            | `null`                    | The grid-row CSS attribute.                                      |\n| `grid_template_areas`   | `null` or string                                                                                                                                                            | `null`                    | The grid-template-areas CSS attribute.                           |\n| `grid_template_columns` | `null` or string                                                                                                                                                            | `null`                    | The grid-template-columns CSS attribute.                         |\n| `grid_template_rows`    | `null` or string                                                                                                                                                            | `null`                    | The grid-template-rows CSS attribute.                            |\n| `height`                | `null` or string                                                                                                                                                            | `null`                    | The height CSS attribute.                                        |\n| `justify_content`       | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'space-between'`, `'space-around'`, `'inherit'`, `'initial'`, `'unset'`)                                | `null`                    | The justify-content CSS attribute.                               |\n| `left`                  | `null` or string                                                                                                                                                            | `null`                    | The left CSS attribute.                                          |\n| `margin`                | `null` or string                                                                                                                                                            | `null`                    | The margin CSS attribute.                                        |\n| `max_height`            | `null` or string                                                                                                                                                            | `null`                    | The max-height CSS attribute.                                    |\n| `max_width`             | `null` or string                                                                                                                                                            | `null`                    | The max-width CSS attribute.                                     |\n| `min_height`            | `null` or string                                                                                                                                                            | `null`                    | The min-height CSS attribute.                                    |\n| `min_width`             | `null` or string                                                                                                                                                            | `null`                    | The min-width CSS attribute.                                     |\n```\n\n----------------------------------------\n\nTITLE: FloatText Widget Configuration Reference\nDESCRIPTION: Configuration reference for the Jupyter FloatText widget, detailing model properties, view specifications, and text input attributes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                      | CSS classes applied to widget DOM element                                                     |\n```\n\n----------------------------------------\n\nTITLE: Defining VBoxModel and VBoxView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes for VBoxModel and VBoxView, including CSS classes, module information, box styling, and layout properties for vertical box layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n### VBoxModel (@jupyter-widgets/controls, 1.2.0); VBoxView (@jupyter-widgets/controls, 1.2.0)\n\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.2.0'`                     |\n| `_model_name`           | string                                                               | `'VBoxModel'`                 |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.2.0'`                     |\n| `_view_name`            | string                                                               | `'VBoxView'`                  |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonModel and ButtonView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes for ButtonModel and ButtonView, including DOM classes, module versions, styling options, and interactive properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### ButtonModel (@jupyter-widgets/controls, 2.0.0); ButtonView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute               | Type                                                                              | Default                       | Help                                               |\n| ----------------------- | --------------------------------------------------------------------------------- | ----------------------------- | -------------------------------------------------- |\n| `_dom_classes`          | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element          |\n| `_model_module`         | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                            | `'2.0.0'`                     |\n| `_model_name`           | string                                                                            | `'ButtonModel'`               |\n| `_view_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                            | `'2.0.0'`                     |\n| `_view_name`            | string                                                                            | `'ButtonView'`                |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the button.           |\n| `description`           | string                                                                            | `''`                          | Button label.                                      |\n| `disabled`              | boolean                                                                           | `false`                       | Enable or disable user changes.                    |\n| `icon`                  | string                                                                            | `''`                          | Font-awesome icon names, without the 'fa-' prefix. |\n| `layout`                | reference to Layout widget                                                        | reference to new instance     |\n| `style`                 | reference to ButtonStyle widget                                                   | reference to new instance     |\n| `tabbable`              | `null` or boolean                                                                 | `null`                        | Is widget tabbable?                                |\n| `tooltip`               | `null` or string                                                                  | `null`                        | A tooltip caption.                                 |\n```\n\n----------------------------------------\n\nTITLE: Select Widget Configuration\nDESCRIPTION: Specification for SelectModel and SelectView widgets that provide dropdown/select functionality with configurable options, rows, and styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                   |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n```\n\n----------------------------------------\n\nTITLE: AccordionModel Widget Documentation\nDESCRIPTION: Documentation for the AccordionModel widget from @jupyter-widgets/controls v1.4.0, detailing its attributes, types, default values and descriptions.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                                                                                                              |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element                                                                                         |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Grid Container Structure\nDESCRIPTION: Example of basic HTML structure for a grid container with three grid items. This demonstrates the parent-child relationship required for CSS Grid layouts to work properly.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"container\">\n  <div class=\"item item-1\"></div>\n  <div class=\"item item-2\"></div>\n  <div class=\"item item-3\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Polynomial Factorization Function\nDESCRIPTION: Defines a function that takes an integer n and returns the factored form of x^n-1 as an equation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Factoring.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef factorit(n):\n    return Eq(x**n-1, factor(x**n-1))\n```\n\n----------------------------------------\n\nTITLE: Documenting SelectionSliderModel and SelectionSliderView in Markdown\nDESCRIPTION: Describes the attributes, types, default values, and help text for the SelectionSliderModel and SelectionSliderView widgets from @jupyter-widgets/controls version 1.2.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n### SelectionSliderModel (@jupyter-widgets/controls, 1.2.0); SelectionSliderView (@jupyter-widgets/controls, 1.2.0)\n\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.2.0'`                     |\n| `_model_name`           | string                                       | `'SelectionSliderModel'`      |\n| `_options_labels`       | array of string                              | `[]`                          | The labels for the options.                                       |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.2.0'`                     |\n| `_view_name`            | string                                       | `'SelectionSliderView'`       |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `index`                 | number (integer)                             | `0`                           | Selected index                                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current selected label next to the slider             |\n| `style`                 | reference to DescriptionStyle widget         | reference to new instance     | Styling customizations                                            |\n```\n\n----------------------------------------\n\nTITLE: Development Installation for Jupyter Widgets JupyterLab Extension\nDESCRIPTION: These commands set up a development environment for the Jupyter Widgets JupyterLab extension. It includes cloning the repo, installing the package in development mode, linking the extension with JupyterLab, and building the Typescript source.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/python/jupyterlab_widgets/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repo to your local environment\n# Change directory to the jupyterlab_widgets directory\n# Install package in development mode\npip install -e .\n# Link your development version of the extension with JupyterLab\njupyter labextension develop . --overwrite\n# Rebuild extension Typescript source after making changes\njlpm build\n```\n\n----------------------------------------\n\nTITLE: Text Widget Model and View Definition\nDESCRIPTION: Specifies TextModel and TextView (@jupyter-widgets/controls v1.1.0) components. Includes attributes for text input handling, styling, and behavior configuration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.1.0'`                     |\n| `_model_name`           | string                               | `'TextModel'`                 |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.1.0'`                     |\n| `_view_name`            | string                               | `'TextView'`                  |\n| `continuous_update`     | boolean                              | `true`                        | Update the value as the user types. If False, update on submission, e.g., pressing Enter or navigating away. |\n| `description`           | string                               | `''`                          | Description of the control.                                                                                  |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes                                                                               |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed                                                      |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                                                                       |\n| `value`                 | string                               | `''`                          | String value                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Documenting Jupyter.Button Widget Attributes in Markdown\nDESCRIPTION: This snippet presents a detailed table of attributes for the Jupyter.Button widget, including their types, default values, and descriptions. It covers styling, behavioral, and interactive attributes of the button.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Jupyter.Button\n\n| Attribute               | Type                                                                              | Default                   | Help                                                                                          |\n| ----------------------- | --------------------------------------------------------------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                                                             | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                                                                            | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                                                                            | `'~2.1.0'`                |\n| `_model_name`           | string                                                                            | `'ButtonModel'`           |\n| `_view_module`          | string                                                                            | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                                                                            | `'~2.1.0'`                |\n| `_view_name`            | string                                                                            | `'ButtonView'`            |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                      | Use a predefined styling for the button.                                                      |\n| `description`           | string                                                                            | `''`                      | Button label.                                                                                 |\n| `disabled`              | boolean                                                                           | `false`                   | Enable or disable user changes.                                                               |\n| `icon`                  | string                                                                            | `''`                      | Font-awesome icon name, without the 'fa-' prefix.                                             |\n| `layout`                | reference to Layout widget                                                        | reference to new instance |\n| `msg_throttle`          | number (integer)                                                                  | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `style`                 | reference to ButtonStyle widget                                                   | reference to new instance |\n| `tooltip`               | string                                                                            | `''`                      | Tooltip caption of the button.                                                                |\n```\n\n----------------------------------------\n\nTITLE: Documenting GridBoxModel and GridBoxView in Markdown\nDESCRIPTION: Markdown table detailing the attributes, types, default values, and help text for GridBoxModel and GridBoxView from @jupyter-widgets/controls version 1.4.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.4.0'`                     |\n| `_model_name`           | string                                                               | `'GridBoxModel'`              |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.4.0'`                     |\n| `_view_name`            | string                                                               | `'GridBoxView'`               |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: Closing a Widget\nDESCRIPTION: Demonstrates how to close a widget by calling its close() method, which removes it from the display and cleans up resources.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Basics.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nw.close()\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonStyleModel and StyleView in Jupyter Widgets\nDESCRIPTION: Specification for ButtonStyleModel from @jupyter-widgets/controls and StyleView from @jupyter-widgets/base packages. Includes attributes for button color and font weight styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### ButtonStyleModel (@jupyter-widgets/controls, 1.0.0); StyleView (@jupyter-widgets/base, 1.0.0)\n\n| Attribute               | Type             | Default                       | Help                     |\n| ----------------------- | ---------------- | ----------------------------- | ------------------------ |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.0.0'`                     |\n| `_model_name`           | string           | `'ButtonStyleModel'`          |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'1.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `button_color`          | `null` or string | `null`                        | Color of the button      |\n| `font_weight`           | string           | `''`                          | Button text font weight. |\n```\n\n----------------------------------------\n\nTITLE: Modifying Widget Border Properties\nDESCRIPTION: Updates the border styles of existing widgets after they've been created. Sets a solid yellow border for the button and different dotted blue borders for specific sides of both widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_borders.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nb1.layout.border = \"2px solid yellow\"\nt1.layout.border_left = \"5px dotted blue\"\nb1.layout.border_right = \"2px dotted blue\"\n```\n\n----------------------------------------\n\nTITLE: IntRangeSlider Widget Specification\nDESCRIPTION: Specification for IntRangeSliderModel and IntRangeSliderView widgets from @jupyter-widgets/controls 1.3.0. Implements a dual-handle slider for selecting integer ranges with customizable bounds and appearance.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array of string | `[]` | CSS classes applied to widget DOM element |\n| `continuous_update` | boolean | `true` | Update the value of the widget as the user is sliding the slider. |\n| `value` | array | `[0, 1]` | Tuple of (lower, upper) bounds |\n```\n\n----------------------------------------\n\nTITLE: Documenting VideoModel and VideoView in Jupyter Widgets\nDESCRIPTION: This snippet details the attributes of the VideoModel and VideoView widgets from the @jupyter-widgets/controls package. It includes properties for video playback control, formatting, and display settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n### VideoModel (@jupyter-widgets/controls, 1.4.0); VideoView (@jupyter-widgets/controls, 1.4.0)\n\n| Attribute               | Type                       | Default                       | Help                                                                                |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------------------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element                                           |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.4.0'`                     |\n| `_model_name`           | string                     | `'VideoModel'`                |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.4.0'`                     |\n| `_view_name`            | string                     | `'VideoView'`                 |\n| `autoplay`              | boolean                    | `true`                        | When true, the video starts when it's displayed                                     |\n| `controls`              | boolean                    | `true`                        | Specifies that video controls should be displayed (such as a play/pause button etc) |\n| `format`                | string                     | `'mp4'`                       | The format of the video.                                                            |\n| `height`                | string                     | `''`                          | Height of the video in pixels.                                                      |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `loop`                  | boolean                    | `true`                        | When true, the video will start from the beginning after finishing                  |\n| `value`                 | Bytes                      | `b''`                         | The media data as a byte string.                                                    |\n| `width`                 | string                     | `''`                          | Width of the video in pixels.                                                       |\n```\n\n----------------------------------------\n\nTITLE: Accordion Widget Model Documentation\nDESCRIPTION: Documentation for AccordionModel and AccordionView widgets (version 2.0.0) including model configuration, styling options, and child widget management properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string | `'2.0.0'` |\n| `children` | array of reference to Widget widget | `[]` | List of widget children |\n```\n\n----------------------------------------\n\nTITLE: Documenting Jupyter.ButtonStyle Widget Attributes in Markdown\nDESCRIPTION: This snippet provides a detailed table of attributes for the Jupyter.ButtonStyle widget, including their types, default values, and descriptions. It covers styling attributes specific to button appearance.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Jupyter.ButtonStyle\n\n| Attribute               | Type             | Default                | Help                                                                                          |\n| ----------------------- | ---------------- | ---------------------- | --------------------------------------------------------------------------------------------- |\n| `_model_module`         | string           | `'jupyter-js-widgets'` |\n| `_model_module_version` | string           | `'~2.1.0'`             |\n| `_model_name`           | string           | `'ButtonStyleModel'`   |\n| `_view_module`          | string           | `'jupyter-js-widgets'` |\n| `_view_module_version`  | string           | `'~2.1.0'`             |\n| `_view_name`            | string           | `'StyleView'`          |\n| `button_color`          | `null` or string | `null`                 | Color of the button                                                                           |\n| `font_weight`           | string           | `''`                   |\n| `msg_throttle`          | number (integer) | `1`                    | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Updates in EmailView\nDESCRIPTION: This TypeScript code adds event listeners to update the view when the model changes and vice versa.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport class EmailView extends DOMWidgetView {\n  render() {\n    this._emailInput = document.createElement('input');\n    this._emailInput.type = 'email';\n    this._emailInput.value = this.model.get('value');\n    this._emailInput.disabled = this.model.get('disabled');\n\n    this.el.appendChild(this._emailInput);\n\n    // Python -> JavaScript update\n    this.model.on('change:value', this._onValueChanged, this);\n    this.model.on('change:disabled', this._onDisabledChanged, this);\n\n    // JavaScript -> Python update\n    this._emailInput.onchange = this._onInputChanged.bind(this);\n  }\n\n  private _onValueChanged() {\n    this._emailInput.value = this.model.get('value');\n  }\n\n  private _onDisabledChanged() {\n    this._emailInput.disabled = this.model.get('disabled');\n  }\n\n  private _onInputChanged() {\n    this.model.set('value', this._emailInput.value);\n    this.model.save_changes();\n  }\n\n  private _emailInput: HTMLInputElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for NetworkX Graph Explorer\nDESCRIPTION: Installs the necessary Python packages (ipywidgets, matplotlib, networkx) for the interactive graph visualization tool. This is specifically configured for JupyterLite environments.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Exploring Graphs.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Imports for JupyterLite\n%pip install -q ipywidgets matplotlib networkx\n```\n\n----------------------------------------\n\nTITLE: Jupyter Text Widget API Documentation\nDESCRIPTION: API specification for the Jupyter Text widget component with attributes for styling, model configuration, and functionality. Includes DOM classes, model/view specifications, and user interaction properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                     | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                     | `'~2.1.0'`                |\n| `_model_name`           | string                     | `'TextModel'`             |\n| `_view_module`          | string                     | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                     | `'~2.1.0'`                |\n| `_view_name`            | string                     | `'TextView'`              |\n| `description`           | string                     | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                    | `false`                   | Enable or disable user changes                                                                |\n| `layout`                | reference to Layout widget | reference to new instance |\n| `msg_throttle`          | number (integer)           | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `placeholder`           | string                     | `'\\u200b'`                | Placeholder text to display when nothing has been typed                                       |\n| `value`                 | string                     | `''`                      | String value                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: JavaScript Widget Manager Base Implementation\nDESCRIPTION: Example of migrating a custom widget using TypeScript with support for both IPyWidgets 7 and 8.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function myDeserializer(\n  obj: MyObjectType,\n  manager?: Parameters<typeof unpack_models>[1]\n): Promise<JSONValue> {\n```\n\n----------------------------------------\n\nTITLE: Box Widget Component Specification\nDESCRIPTION: Defines BoxModel and BoxView components from @jupyter-widgets/controls v1.2.0. Includes styling options and child widget management.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.2.0'`                     |\n| `_model_name`           | string                                                               | `'BoxModel'`                  |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.2.0'`                     |\n| `_view_name`            | string                                                               | `'BoxView'`                   |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: Building Frontend Bundle with jlpm\nDESCRIPTION: This bash command rebuilds the frontend bundle using jlpm (JupyterLab's package manager) after making changes to the TypeScript code.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\njlpm build\n```\n\n----------------------------------------\n\nTITLE: Styling AppLayout with Height and Width in Python\nDESCRIPTION: This snippet shows how to style an AppLayout by specifying height and width properties. It sets the layout dimensions to 200px height and 50% width.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=None,\n          left_sidebar=left_button,\n          center=center_button,\n          right_sidebar=right_button,\n          footer=None,\n          height=\"200px\", width=\"50%\")\n```\n\n----------------------------------------\n\nTITLE: Creating AppLayout without Center Content\nDESCRIPTION: Shows how AppLayout handles configuration without a center widget, adjusting other sections accordingly.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=header_button,\n          left_sidebar=left_button,\n          center=None,\n          right_sidebar=right_button,\n          footer=footer_button)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Position with Pixel Offsets\nDESCRIPTION: Shows how object_position works with pixel offsets combined with different object_fit values.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nobject_fit = ['none', 'contain', 'fill', 'cover']\noffset = '20px 10px'\nimage_value = [im_600_300]\n\nboxes = []\nfor image, caption  in zip(image_value, ['600 x 300 image', ]):\n    for fit in object_fit:\n        ib = Image(value=image)\n        ib.layout.object_position = offset\n        ib.layout.margin = image_margin\n        ib.layout.object_fit = fit\n        # ib.layout.height = 'inherit'\n        ib.layout.width = '100%'\n        title = 'object_fit: {}'.format(ib.layout.object_fit)\n        boxes.append(make_box_for_grid(ib, title))\n\nvb = VBox()\nh = HTML(value='<{size}><code>object_position</code> by '\n               'offset {offset} with several '\n               '<code>object_fit</code>s with large image</{size}>'.format(size=caption_size,\n                                                         offset=offset))\nvb.layout.align_items = 'center'\nhb = HBox()\nhb.layout = hbox_layout\nhb.children = boxes\n\nvb.children = [h, hb]\nvb\n```\n\n----------------------------------------\n\nTITLE: Reusing Button Layout for Multiple Widgets\nDESCRIPTION: Creates a new button that shares the same layout object as a previously defined button, demonstrating layout reuse between widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nButton(description='Another button with the same layout', layout=b.layout)\n```\n\n----------------------------------------\n\nTITLE: Documenting ImageModel and ImageView in Markdown\nDESCRIPTION: Markdown table detailing the attributes, types, default values, and help text for ImageModel and ImageView from @jupyter-widgets/controls version 1.4.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.4.0'`                     |\n| `_model_name`           | string                     | `'ImageModel'`                |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.4.0'`                     |\n| `_view_name`            | string                     | `'ImageView'`                 |\n| `format`                | string                     | `'png'`                       | The format of the image.                  |\n| `height`                | string                     | `''`                          | Height of the image in pixels.            |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `value`                 | Bytes                      | `b''`                         | The media data as a byte string.          |\n| `width`                 | string                     | `''`                          | Width of the image in pixels.             |\n```\n\n----------------------------------------\n\nTITLE: HBox with VBox Layout Implementation\nDESCRIPTION: Creating a layout with HBox containing two VBoxes with buttons, dropdown, checkbox, and text input\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Alignment.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nHBox([VBox([Button(description='Press'), Dropdown(options=['a', 'b']), Button(description='Button')]), \n      VBox([Button(), Checkbox(), IntText()])], background_color='#EEE')\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleButtonModel and ToggleButtonView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes for ToggleButtonModel and ToggleButtonView, including CSS classes, module information, button styling, and interaction properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n### ToggleButtonModel (@jupyter-widgets/controls, 1.2.0); ToggleButtonView (@jupyter-widgets/controls, 1.2.0)\n\n| Attribute               | Type                                                                              | Default                       | Help                                      |\n| ----------------------- | --------------------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                            | `'1.2.0'`                     |\n| `_model_name`           | string                                                                            | `'ToggleButtonModel'`         |\n| `_view_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                            | `'1.2.0'`                     |\n| `_view_name`            | string                                                                            | `'ToggleButtonView'`          |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the button.  |\n| `description`           | string                                                                            | `''`                          | Description of the control.               |\n| `disabled`              | boolean                                                                           | `false`                       | Enable or disable user changes.           |\n| `icon`                  | string                                                                            | `''`                          | Font-awesome icon.                        |\n| `layout`                | reference to Layout widget                                                        | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget                                              | reference to new instance     | Styling customizations                    |\n| `tooltip`               | string                                                                            | `''`                          | Tooltip caption of the toggle button.     |\n| `value`                 | boolean                                                                           | `false`                       | Bool value                                |\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Media Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_media module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_media\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: AudioModel Widget Configuration\nDESCRIPTION: Specification for the AudioModel widget from @jupyter-widgets/controls v2.0.0, defining audio playback configuration including autoplay, controls, format, and media data handling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `autoplay` | boolean | `true` | When true, the audio starts when it's displayed |\n| `controls` | boolean | `true` | Specifies that audio controls should be displayed |\n| `format` | string | `'mp3'` | The format of the audio. |\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for JupyterLite\nDESCRIPTION: Installs necessary packages (ipywidgets, scikit-learn, numpy, matplotlib) for the image manipulation project in a JupyterLite environment.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets scikit-learn numpy matplotlib\n```\n\n----------------------------------------\n\nTITLE: Link Model Definition\nDESCRIPTION: Specification for LinkModel that enables linking widget properties between source and target. Version 2.0.0 of @jupyter-widgets/controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| _model_module | string | '@jupyter-widgets/controls' |\n| source | array | [] | The source (widget, 'trait_name') pair |\n| target | array | [] | The target (widget, 'trait_name') pair |\n```\n\n----------------------------------------\n\nTITLE: Updating Backbone Model Extension\nDESCRIPTION: Example of migrating from Backbone.js extend pattern to ES6 class syntax with model defaults.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const OUTPUT_WIDGET_VERSION = '1.0.0';\n\nexport class OutputModel extends DOMWidgetModel {\n  defaults() {\n    return {\n      ...super.defaults(),\n      _model_name: 'OutputModel',\n      _view_name: 'OutputView',\n      _model_module: '@jupyter-widgets/output',\n      _view_module: '@jupyter-widgets/output',\n      _model_module_version: OUTPUT_WIDGET_VERSION,\n      _view_module_version: OUTPUT_WIDGET_VERSION,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sizing Auto-Generated Grid Tracks in CSS\nDESCRIPTION: Specifies the size of implicitly created grid tracks when grid items exceed the defined grid or are placed outside it.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_24\n\nLANGUAGE: CSS\nCODE:\n```\ngrid-auto-columns: <track-size>;\ngrid-auto-rows: <track-size>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Widget Parameters\nDESCRIPTION: This snippet demonstrates how to access the current parameters of the interactive widget, which could be useful for further analysis or manipulation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Beat Frequencies.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nv.kwargs\n```\n\n----------------------------------------\n\nTITLE: Creating AppLayout without Footer\nDESCRIPTION: Demonstrates AppLayout configuration with header, sidebars, and center but no footer.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=header_button,\n          left_sidebar=left_button,\n          center=center_button,\n          right_sidebar=right_button,\n          footer=None)\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Content Vertically in CSS\nDESCRIPTION: Aligns the entire grid within the grid container along the block (column) axis when the grid is smaller than the container.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_22\n\nLANGUAGE: CSS\nCODE:\n```\nalign-content: start | end | center | stretch | space-around | space-between | space-evenly;\n```\n\n----------------------------------------\n\nTITLE: Using interact with Enum type annotation\nDESCRIPTION: Shows how interact creates a dropdown from an Enum type annotation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ninteract(h);\n```\n\n----------------------------------------\n\nTITLE: SelectMultipleModel Specification\nDESCRIPTION: Specification for the SelectMultiple widget model enabling multiple selection functionality with array-based indices and similar configuration options to SelectModel.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                 | Default                       | Help                                      |\n| ------------------------ | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'SelectMultipleModel'`       |\n| `_options_labels`        | array of string                      | `[]`                          | The labels for the options.               |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'SelectMultipleView'`        |\n| `description`            | string                               | `''`                          | Description of the control.               |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.           |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes            |\n| `index`                  | array of number (integer)            | `[]`                          | Selected indices                          |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `rows`                   | number (integer)                     | `5`                           | The number of rows to display.            |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                       |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                        |\n```\n\n----------------------------------------\n\nTITLE: Defining LinkModel in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the LinkModel widget. This widget establishes links between other widgets' traits.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n### LinkModel (@jupyter-widgets/controls, 1.5.0); None (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type             | Default                       | Help                                   |\n| ----------------------- | ---------------- | ----------------------------- | -------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.5.0'`                     |\n| `_model_name`           | string           | `'LinkModel'`                 |\n| `_view_module`          | string           | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string           | `'1.5.0'`                     |\n| `_view_name`            | `null` or string | `null`                        | Name of the view.                      |\n| `source`                | array            | `[]`                          | The source (widget, 'trait_name') pair |\n| `target`                | array            | `[]`                          | The target (widget, 'trait_name') pair |\n```\n\n----------------------------------------\n\nTITLE: Using Output Widget Capture Decorator in Python\nDESCRIPTION: Shows how to use the Output widget's capture() method as a decorator to capture function output. The capture method supports clear_output and wait parameters for output control.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Output\nout = Output()\n\n@out.capture()\ndef f():\n    print('This output is captured')\n```\n\n----------------------------------------\n\nTITLE: IntRangeSlider Widget Component Specification\nDESCRIPTION: Documents the IntRangeSlider widget component with range selection capabilities, continuous update controls, and formatting options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array                                        | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.1.0'`                     |\n| `_model_name`           | string                                       | `'IntRangeSliderModel'`       |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.1.0'`                     |\n| `_view_name`            | string                                       | `'IntRangeSliderView'`        |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is sliding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (integer)                             | `100`                         | Max value                                                         |\n| `min`                   | number (integer)                             | `0`                           | Min value                                                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'d'`                         | Format for the readout                                            |\n| `step`                  | number (integer)                             | `1`                           | Minimum step that the value can take                              |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     | Slider style customizations.                                      |\n| `value`                 | array                                        | `[0, 1]`                      | Tuple of (lower, upper) bounds                                    |\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Button Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_button module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_button\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: CSS Attributes Configuration for IPyWidgets\nDESCRIPTION: Defines the available CSS attributes for styling IPyWidget components, including dimensions, positioning, visibility and layout properties. Each attribute accepts null or specific string values with defined defaults.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| `max_height` | `null` or string | `null` | The max-height CSS attribute. |\n| `max_width` | `null` or string | `null` | The max-width CSS attribute. |\n| `min_height` | `null` or string | `null` | The min-height CSS attribute. |\n```\n\n----------------------------------------\n\nTITLE: Creating AppLayout with Only Center Content\nDESCRIPTION: Shows how AppLayout's automatic merging works when only the center widget is specified.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=None,\n          left_sidebar=None,\n          center=center_button,\n          right_sidebar=None,\n          footer=None)\n```\n\n----------------------------------------\n\nTITLE: HBox Widget Configuration\nDESCRIPTION: Specifications for HBoxModel and HBoxView components providing horizontal box layout container. Includes styling and child management configuration.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_model_module` | string | '@jupyter-widgets/controls' |\n| `box_style` | string | '' | Use a predefined styling for the box |\n| `children` | array | [] | List of widget children |\n```\n\n----------------------------------------\n\nTITLE: Watching Source and Running JupyterLab for Development\nDESCRIPTION: These commands allow developers to watch the source directory for changes and run JupyterLab simultaneously. This setup enables automatic rebuilding of the extension when changes are made.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/python/jupyterlab_widgets/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Watch the source directory in one terminal, automatically rebuilding when needed\njlpm watch\n# Run JupyterLab in another terminal\njupyter lab\n```\n\n----------------------------------------\n\nTITLE: Jupyter Widgets FloatRangeSlider Component Specification\nDESCRIPTION: Attribute specifications for FloatRangeSliderModel and FloatRangeSliderView components from @jupyter-widgets/controls. Defines properties for range slider widget including value bounds, step size, and display format options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array                                        | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.1.0'`                     |\n| `_model_name`           | string                                       | `'FloatRangeSliderModel'`     |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.1.0'`                     |\n| `_view_name`            | string                                       | `'FloatRangeSliderView'`      |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is sliding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (float)                               | `100.0`                       | Max value                                                         |\n| `min`                   | number (float)                               | `0.0`                         | Min value                                                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'.2f'`                       | Format for the readout                                            |\n| `step`                  | number (float)                               | `0.1`                         | Minimum step to increment the value                               |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     |\n| `value`                 | array                                        | `[0.0, 1.0]`                  | Tuple of (lower, upper) bounds                                    |\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for JupyterLite\nDESCRIPTION: Installs required packages (ipywidgets, bqplot, numpy) for creating and displaying interactive widgets in JupyterLite.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Imports for JupyterLite\n%pip install -q ipywidgets bqplot numpy\n```\n\n----------------------------------------\n\nTITLE: ToggleButtons Style Model and View Component Specification\nDESCRIPTION: Defines the styling attributes for toggle buttons widgets, including button width, description width, and font weight customization options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type   | Default                       | Help                                                 |\n| ----------------------- | ------ | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string | `'1.4.0'`                     |\n| `_model_name`           | string | `'ToggleButtonsStyleModel'`   |\n| `_view_module`          | string | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string | `'1.1.0'`                     |\n| `_view_name`            | string | `'StyleView'`                 |\n| `button_width`          | string | `''`                          | The width of each button.                            |\n| `description_width`     | string | `''`                          | Width of the description to the side of the control. |\n| `font_weight`           | string | `''`                          | Text font weight of each button.                     |\n```\n\n----------------------------------------\n\nTITLE: Label Widget Model Definition\nDESCRIPTION: Specification for LabelModel that provides text label functionality with HTML support and styling options. Version 2.0.0 of @jupyter-widgets/controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| _dom_classes | array of string | [] | CSS classes applied to widget DOM element |\n| description | string | '' | Description of the control. |\n| value | string | '' | String value |\n```\n\n----------------------------------------\n\nTITLE: Widget Display Data Message Structure in JSON\nDESCRIPTION: The JSON structure for displaying a widget in Jupyter notebooks. This iopub display_data message uses a special mimetype to identify widget views and includes the model_id (comm channel id) of the widget to display.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  'data': {\n    'application/vnd.jupyter.widget-view+json': {\n      'model_id': 'u-u-i-d'\n      'version_major': 2\n      'version_minor': 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Style Widget Configuration\nDESCRIPTION: Specification for ProgressStyleModel and StyleView widgets that control the appearance of progress bars including color and description width.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.5.0'`                     |\n| `_model_name`           | string           | `'ProgressStyleModel'`        |\n```\n\n----------------------------------------\n\nTITLE: HTMLMath Widget Model Specification\nDESCRIPTION: Model and view specification for HTMLMath widget defining attributes like DOM classes, module information, description, placeholder, value and styling properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                              | Default                       | Help                                                    |\n| ------------------------ | --------------------------------- | ----------------------------- | ------------------------------------------------------- |\n| `_dom_classes`           | array of string                   | `[]`                          | CSS classes applied to widget DOM element               |\n| `_model_module`          | string                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                            | `'2.0.0'`                     |\n| `_model_name`            | string                            | `'HTMLMathModel'`             |\n| `_view_module`           | string                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                            | `'2.0.0'`                     |\n| `_view_name`             | string                            | `'HTMLMathView'`              |\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonStyleModel and StyleView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes for ButtonStyleModel and StyleView, including module versions and various style properties like button color, font settings, and text decorations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### ButtonStyleModel (@jupyter-widgets/controls, 2.0.0); StyleView (@jupyter-widgets/base, 2.0.0)\n\n| Attribute               | Type             | Default                       | Help                      |\n| ----------------------- | ---------------- | ----------------------------- | ------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'2.0.0'`                     |\n| `_model_name`           | string           | `'ButtonStyleModel'`          |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'2.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `button_color`          | `null` or string | `null`                        | Color of the button       |\n| `font_family`           | `null` or string | `null`                        | Button text font family.  |\n| `font_size`             | `null` or string | `null`                        | Button text font size.    |\n| `font_style`            | `null` or string | `null`                        | Button text font style.   |\n| `font_variant`          | `null` or string | `null`                        | Button text font variant. |\n| `font_weight`           | `null` or string | `null`                        | Button text font weight.  |\n| `text_color`            | `null` or string | `null`                        | Button text color.        |\n| `text_decoration`       | `null` or string | `null`                        | Button text decoration.   |\n```\n\n----------------------------------------\n\nTITLE: Integer Range Slider Widget Specification (@jupyter-widgets/controls)\nDESCRIPTION: Defines the attributes and properties for Integer Range Slider widget model and view. Includes range selection, continuous update options, and display formatting specifications.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### IntRangeSliderModel (@jupyter-widgets/controls, 1.0.0); IntRangeSliderView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array                                        | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.0.0'`                     |\n| `_model_name`           | string                                       | `'IntRangeSliderModel'`       |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.0.0'`                     |\n| `_view_name`            | string                                       | `'IntRangeSliderView'`        |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is sliding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (integer)                             | `100`                         | Max value                                                         |\n| `min`                   | number (integer)                             | `0`                           | Min value                                                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'d'`                         | Format for the readout                                            |\n| `step`                  | number (integer)                             | `1`                           | Minimum step that the value can take                              |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     | Slider style customizations.                                      |\n| `value`                 | array                                        | `[0, 1]`                      | Tuple of (lower, upper) bounds                                    |\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Color Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_color module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_color\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Layout Widget CSS Properties Configuration\nDESCRIPTION: Defines the configurable CSS layout properties for Jupyter widgets including positioning, overflow, visibility and dimensions. Each property can be null or a specific string value matching CSS specifications.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"order\": null,\n  \"overflow\": \"visible|hidden|scroll|auto|inherit|initial|unset\",\n  \"overflow_x\": \"visible|hidden|scroll|auto|inherit|initial|unset\",\n  \"overflow_y\": \"visible|hidden|scroll|auto|inherit|initial|unset\",\n  \"padding\": null,\n  \"right\": null,\n  \"top\": null,\n  \"visibility\": \"visible|hidden|inherit|initial|unset\",\n  \"width\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Border Styles to Second Set of Widgets\nDESCRIPTION: Updates the border properties for the second set of widgets (t2 and b2). Applies different border styles to various sides of the widgets, including dotted blue borders and a dashed red border.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_borders.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nt2.layout.border_left = \"5px dotted blue\"\nb2.layout.border_right = \"2px dotted blue\"\nt2.layout.border = \"1px dashed red\"\n```\n\n----------------------------------------\n\nTITLE: Defining ColorPickerModel and ColorPickerView attributes in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and descriptions for the ColorPickerModel and ColorPickerView widgets from @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### ColorPickerModel (@jupyter-widgets/controls, 1.3.0); ColorPickerView (@jupyter-widgets/controls, 1.3.0)\n\n| Attribute               | Type                                 | Default                       | Help                                                   |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.3.0'`                     |\n| `_model_name`           | string                               | `'ColorPickerModel'`          |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.3.0'`                     |\n| `_view_name`            | string                               | `'ColorPickerView'`           |\n| `concise`               | boolean                              | `false`                       | Display short version with just a color selector.      |\n| `description`           | string                               | `''`                          | Description of the control.                            |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description). |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                        |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                 |\n| `value`                 | string                               | `'black'`                     | The color value.                                       |\n```\n\n----------------------------------------\n\nTITLE: Setting Default Map Configuration\nDESCRIPTION: Sets the default basemap selection to 'Mapnik' and configures the map height for proper display in the layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbasemap_selector.value = 'Mapnik'\nm.layout.height='600px'\n```\n\n----------------------------------------\n\nTITLE: FloatText Widget Configuration\nDESCRIPTION: Specifications for FloatTextModel and FloatTextView components providing a text input for float values. Includes configuration for value constraints and update behavior.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_model_module` | string | '@jupyter-widgets/controls' |\n| `value` | number (float) | 0.0 | Float value |\n| `step` | null or number (float) | null | Minimum step to increment the value |\n```\n\n----------------------------------------\n\nTITLE: Importing Widgets for LaTeX Rendering\nDESCRIPTION: Imports IntSlider and Label widgets which can be used to render LaTeX equations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import IntSlider, Label\n```\n\n----------------------------------------\n\nTITLE: Initializing FloatLogSlider Widget in Python\nDESCRIPTION: Demonstrates how to create a new FloatLogSlider widget, which provides a slider with a logarithmic scale for exploring wide ranges of magnitudes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import FloatLogSlider\nFloatLogSlider()\n```\n\n----------------------------------------\n\nTITLE: IntSlider Widget Specification\nDESCRIPTION: Specification for IntSliderModel and IntSliderView widgets from @jupyter-widgets/controls 1.3.0. Implements a single-handle slider for selecting integer values with customizable range and display options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array of string | `[]` | CSS classes applied to widget DOM element |\n| `continuous_update` | boolean | `true` | Update the value of the widget as the user is holding the slider. |\n| `value` | number (integer) | `0` | Int value |\n```\n\n----------------------------------------\n\nTITLE: Widget Echo Update Message Structure in JSON\nDESCRIPTION: The JSON structure for echoing state updates from a frontend to all frontends. Introduced in protocol version 2.1.0, these optional messages help synchronize state across multiple frontends and resolve race conditions.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id' : 'u-u-i-d',\n  'data' : {\n    'method': 'echo_update',\n    'state': { <dictionary of widget state> },\n    'buffer_paths': [ <list with paths corresponding to the binary buffers> ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BoxModel and BoxView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the BoxModel and BoxView from @jupyter-widgets/controls version 2.0.0. Includes details on box styling, child widgets, and layout options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### BoxModel (@jupyter-widgets/controls, 2.0.0); BoxView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'2.0.0'`                     |\n| `_model_name`           | string                                                               | `'BoxModel'`                  |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'2.0.0'`                     |\n| `_view_name`            | string                                                               | `'BoxView'`                   |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n| `tabbable`              | `null` or boolean                                                    | `null`                        | Is widget tabbable?                       |\n| `tooltip`               | `null` or string                                                     | `null`                        | A tooltip caption.                        |\n```\n\n----------------------------------------\n\nTITLE: TagsInput Widget Model Specification\nDESCRIPTION: Defines the attributes and configuration options for the TagsInput widget model and view, including tag styling, validation, and display options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n### TagsInputModel (@jupyter-widgets/controls, 2.0.0); TagsInputView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                                                                              | Default                       | Help                                      |\n| ------------------------ | --------------------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                                                                            | `'2.0.0'`                     |\n| `_model_name`            | string                                                                            | `'TagsInputModel'`            |\n| `_view_module`           | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                                                                            | `'2.0.0'`                     |\n| `_view_name`             | string                                                                            | `'TagsInputView'`             |\n| `allow_duplicates`       | boolean                                                                           | `true`                        |\n| `allowed_tags`           | array                                                                             | `[]`                          |\n| `description`            | string                                                                            | `''`                          | Description of the control.               |\n| `description_allow_html` | boolean                                                                           | `false`                       | Accept HTML in the description.           |\n| `layout`                 | reference to Layout widget                                                        | reference to new instance     |\n| `placeholder`            | string                                                                            | `'\\u200b'`                    |\n| `style`                  | reference to DescriptionStyle widget                                              | reference to new instance     | Styling customizations                    |\n| `tabbable`               | `null` or boolean                                                                 | `null`                        | Is widget tabbable?                       |\n| `tag_style`              | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the tags.    |\n| `tooltip`                | `null` or string                                                                  | `null`                        | A tooltip caption.                        |\n| `value`                  | array                                                                             | `[]`                          | List of string tags                       |\n```\n\n----------------------------------------\n\nTITLE: Defining FloatLogSliderModel and FloatLogSliderView Attributes in Markdown\nDESCRIPTION: This snippet describes the attributes, types, default values, and help text for the FloatLogSliderModel and FloatLogSliderView in Jupyter Widgets controls version 1.2.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.2.0'`                     |\n| `_model_name`           | string                                       | `'FloatLogSliderModel'`       |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.2.0'`                     |\n| `_view_name`            | string                                       | `'FloatLogSliderView'`        |\n| `base`                  | number (float)                               | `10.0`                        | Base for the logarithm                                            |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (float)                               | `4.0`                         | Max value for the exponent                                        |\n| `min`                   | number (float)                               | `0.0`                         | Min value for the exponent                                        |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'.3g'`                       | Format for the readout                                            |\n| `step`                  | number (float)                               | `0.1`                         | Minimum step in the exponent to increment the value               |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     |\n| `value`                 | number (float)                               | `1.0`                         | Float value                                                       |\n```\n\n----------------------------------------\n\nTITLE: IntProgress Widget Specification\nDESCRIPTION: Specification for IntProgressModel and ProgressView widgets from @jupyter-widgets/controls 1.3.0. Defines a progress bar widget with customizable styling, orientation, and value range.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array of string | `[]` | CSS classes applied to widget DOM element |\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string | `'1.3.0'` |\n| `_model_name` | string | `'IntProgressModel'` |\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets ValueWidget Class in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.valuewidget module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.valuewidget\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Accordion Widget Model Configuration\nDESCRIPTION: Defines the model and view properties for the Accordion widget component, including styling, child management, and page selection functionality. Uses @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_dom_classes\": [],\n  \"_model_module\": \"@jupyter-widgets/controls\",\n  \"_model_module_version\": \"1.3.0\",\n  \"_model_name\": \"AccordionModel\",\n  \"_titles\": {},\n  \"box_style\": \"\",\n  \"children\": [],\n  \"selected_index\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Button Widget Component Specification\nDESCRIPTION: Defines ButtonModel and ButtonView components from @jupyter-widgets/controls v1.2.0. Includes button styling, labeling, and interaction options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                              | Default                       | Help                                              |\n| ----------------------- | --------------------------------------------------------------------------------- | ----------------------------- | ------------------------------------------------- |\n| `_dom_classes`          | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element         |\n| `_model_module`         | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                            | `'1.2.0'`                     |\n| `_model_name`           | string                                                                            | `'ButtonModel'`               |\n| `_view_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                            | `'1.2.0'`                     |\n| `_view_name`            | string                                                                            | `'ButtonView'`                |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the button.          |\n| `description`           | string                                                                            | `''`                          | Button label.                                     |\n| `disabled`              | boolean                                                                           | `false`                       | Enable or disable user changes.                   |\n| `icon`                  | string                                                                            | `''`                          | Font-awesome icon name, without the 'fa-' prefix. |\n| `layout`                | reference to Layout widget                                                        | reference to new instance     |\n| `style`                 | reference to ButtonStyle widget                                                   | reference to new instance     |\n| `tooltip`               | string                                                                            | `''`                          | Tooltip caption of the button.                    |\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerAxisModel and ControllerAxisView attributes in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and descriptions for the ControllerAxisModel and ControllerAxisView widgets from @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### ControllerAxisModel (@jupyter-widgets/controls, 1.3.0); ControllerAxisView (@jupyter-widgets/controls, 1.3.0)\n\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.3.0'`                     |\n| `_model_name`           | string                     | `'ControllerAxisModel'`       |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.3.0'`                     |\n| `_view_name`            | string                     | `'ControllerAxisView'`        |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `value`                 | number (float)             | `0.0`                         | The value of the axis.                    |\n```\n\n----------------------------------------\n\nTITLE: Importing Matplotlib and NumPy Libraries\nDESCRIPTION: This code imports the required Matplotlib and NumPy libraries for plotting and numerical operations. It also sets up Matplotlib to display plots inline in the notebook.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Beat Frequencies.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Items with justify-self in CSS\nDESCRIPTION: Shows how to use the justify-self property to align a grid item inside a cell along the inline (row) axis. Examples for start, end, center, and stretch values are provided.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n.item {\n  justify-self: start | end | center | stretch;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.item-a {\n  justify-self: start;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.item-a {\n  justify-self: end;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.item-a {\n  justify-self: center;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.item-a {\n  justify-self: stretch;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering LaTeX in IntSlider Description\nDESCRIPTION: Creates an IntSlider widget with a LaTeX equation in its description field, demonstrating how widgets can display mathematical notation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nIntSlider(description=r'\\(\\int_0^t f\\)')\n```\n\n----------------------------------------\n\nTITLE: Python Password Widget Initialization\nDESCRIPTION: Example of creating a new Password widget that behaves like Text widget but hides input\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nPassword()\n```\n\n----------------------------------------\n\nTITLE: Testing variable deletion in the inspector\nDESCRIPTION: Deletes a variable to demonstrate how the variable inspector updates when variables are removed from the namespace.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndel b\n```\n\n----------------------------------------\n\nTITLE: Jupyter Button Style Model Specification\nDESCRIPTION: Specifies the styling attributes for ButtonStyleModel including color and font weight customization options. The model provides basic button appearance customization.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                     |\n| ----------------------- | ---------------- | ----------------------------- | ------------------------ |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.4.0'`                     |\n| `_model_name`           | string           | `'ButtonStyleModel'`          |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'1.1.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `button_color`          | `null` or string | `null`                        | Color of the button      |\n| `font_weight`           | string           | `''`                          | Button text font weight. |\n```\n\n----------------------------------------\n\nTITLE: Adjusting Grid Gap in AppLayout in Python\nDESCRIPTION: This example demonstrates how to adjust the gap between panes in an AppLayout using the grid_gap argument. It sets a 10px gap between layout elements.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=None,\n          left_sidebar=left_button,\n          center=center_button,\n          right_sidebar=right_button,\n          footer=None,\n          height=\"200px\", width=\"50%\",\n          grid_gap=\"10px\")\n```\n\n----------------------------------------\n\nTITLE: ToggleButtonStyle Model and View Specification\nDESCRIPTION: Defines attributes and properties for styling toggle buttons in Jupyter widgets. Includes font styling, text decoration, and description width controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'2.0.0'`                     |\n| `_model_name`           | string           | `'ToggleButtonStyleModel'`    |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'2.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `description_width`     | string           | `''`                          | Width of the description to the side of the control. |\n```\n\n----------------------------------------\n\nTITLE: Defining CheckboxStyleModel and StyleView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes for CheckboxStyleModel and StyleView, including module versions and style properties like background and description width.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### CheckboxStyleModel (@jupyter-widgets/controls, 2.0.0); StyleView (@jupyter-widgets/base, 2.0.0)\n\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'2.0.0'`                     |\n| `_model_name`           | string           | `'CheckboxStyleModel'`        |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'2.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `background`            | `null` or string | `null`                        | Background specifications.                           |\n| `description_width`     | string           | `''`                          | Width of the description to the side of the control. |\n```\n\n----------------------------------------\n\nTITLE: IntsInput Widget Model Definition\nDESCRIPTION: Specification for IntsInputModel that handles integer tag inputs with customizable styling and validation options. Version 2.0.0 of @jupyter-widgets/controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| _dom_classes | array of string | [] | CSS classes applied to widget DOM element |\n| _model_module | string | '@jupyter-widgets/controls' |\n| value | array | [] | List of int tags |\n```\n\n----------------------------------------\n\nTITLE: Implementing EmailView Render Method in TypeScript\nDESCRIPTION: This snippet shows the implementation of the render method for the EmailView class, creating and configuring the email input element.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nrender() { \n    this._emailInput = document.createElement('input');\n    this._emailInput.type = 'email';\n    this._emailInput.value = 'example@example.com';\n    this._emailInput.disabled = true;\n    this.el.appendChild(this._emailInput);\n    \n    this.el.classList.add('custom-widget');\n\n    this.value_changed();\n    this.model.on('change:value', this.value_changed, this);\n},\n```\n\n----------------------------------------\n\nTITLE: FloatText Widget Specification\nDESCRIPTION: Defines the model and view for a floating point text input widget with configurable update behavior and styling options. Part of @jupyter-widgets/controls version 1.3.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                                                                         |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.3.0'`                     |\n| `_model_name`           | string                               | `'FloatTextModel'`            |\n```\n\n----------------------------------------\n\nTITLE: Positioning Grid Items with grid-column and grid-row in CSS\nDESCRIPTION: Examples of using grid-column and grid-row to position items within a CSS Grid. The first example positions item-a, while the second positions item-b.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.item-a {\n  grid-column: 2 / five;\n  grid-row: row1-start / 3;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.item-b {\n  grid-column: 1 / span col4-start;\n  grid-row: 2 / span 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting HBoxModel and HBoxView in Markdown\nDESCRIPTION: Markdown table detailing the attributes, types, default values, and help text for HBoxModel and HBoxView from @jupyter-widgets/controls version 1.4.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'1.4.0'`                     |\n| `_model_name`           | string                                                               | `'HBoxModel'`                 |\n| `_view_module`          | string                                                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                               | `'1.4.0'`                     |\n| `_view_name`            | string                                                               | `'HBoxView'`                  |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the box.     |\n| `children`              | array of reference to Widget widget                                  | `[]`                          | List of widget children                   |\n| `layout`                | reference to Layout widget                                           | reference to new instance     |\n```\n\n----------------------------------------\n\nTITLE: Importing Interactive Widgets and Audio Display\nDESCRIPTION: This snippet imports the necessary components from ipywidgets and IPython.display to create interactive widgets and display audio in the notebook.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Beat Frequencies.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interactive\nfrom IPython.display import Audio, display\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: SelectMultiple Widget Specification\nDESCRIPTION: Defines attributes for SelectMultipleModel and SelectMultipleView widgets that enable multiple item selection from a list. Includes configuration for DOM classes, model/view modules, labels, styling, and interaction properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.0.0'`                     |\n| `_model_name`           | string                               | `'SelectMultipleModel'`       |\n```\n\n----------------------------------------\n\nTITLE: Importing Media Widgets from IPyWidgets\nDESCRIPTION: This snippet imports the Image, Video, and Audio widget classes from the IPyWidgets library.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Media widgets.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Image, Video, Audio\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltips to Widgets\nDESCRIPTION: Demonstrates how to add tooltips to widgets, which provide additional information when hovering over the widget. This feature was expanded to most core widgets in ipywidgets 8.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Button\nButton(description=\"Click me\", tooltip='An action')\n```\n\n----------------------------------------\n\nTITLE: Testing the variable inspector with integer assignment\nDESCRIPTION: Creates an integer variable to demonstrate the variable inspector's capability to track variables.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\na = 5\n```\n\n----------------------------------------\n\nTITLE: Defining Jupyter.Accordion Widget Model in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and help text for the Jupyter.Accordion widget model. Includes properties like _dom_classes, _model_module, children, and layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------------------------------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                                                | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                                                               | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                                                               | `'~2.1.0'`                |\n| `_model_name`           | string                                                               | `'AccordionModel'`        |\n| `_titles`               | object                                                               | `{}`                      | Titles of the pages                                                                           |\n| `_view_module`          | string                                                               | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                                                               | `'~2.1.0'`                |\n| `_view_name`            | string                                                               | `'AccordionView'`         |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                      | Use a predefined styling for the box.                                                         |\n| `children`              | array                                                                | `[]`                      |\n| `layout`                | reference to Layout widget                                           | reference to new instance |\n| `msg_throttle`          | number (integer)                                                     | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `selected_index`        | number (integer)                                                     | `0`                       |\n```\n\n----------------------------------------\n\nTITLE: Defining DOMWidgetModel in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the DOMWidgetModel, which serves as a base model for DOM-based widgets with layout and media data handling capabilities.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### DOMWidgetModel (@jupyter-widgets/controls, 1.5.0); None (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.5.0'`                     |\n| `_model_name`           | string                     | `'DOMWidgetModel'`            |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.5.0'`                     |\n| `_view_name`            | `null` or string           | `null`                        | Name of the view.                         |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `value`                 | Bytes                      | `b''`                         | The media data as a byte string.          |\n```\n\n----------------------------------------\n\nTITLE: Jupyter ColorPicker Widget Attributes\nDESCRIPTION: Defines the configuration attributes for the Jupyter ColorPicker widget including DOM classes, model specifications, and appearance settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array | `[]` | CSS classes applied to widget DOM element |\n| `_model_module` | string | `'jupyter-js-widgets'` |\n| `value` | string | `'black'` |\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutModel and LayoutView Attributes in Markdown Table\nDESCRIPTION: This markdown table defines the attributes for LayoutModel and LayoutView classes. It includes model and view-related attributes, as well as various CSS properties that can be set on the layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                                                                                                                        | Default                   | Help                                                             |\n| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------- | ---------------------------------------------------------------- |\n| `_model_module`         | string                                                                                                                                                                      | `'@jupyter-widgets/base'` | The namespace for the model.                                     |\n| `_model_module_version` | string                                                                                                                                                                      | `'2.0.0'`                 | A semver requirement for namespace version containing the model. |\n| `_model_name`           | string                                                                                                                                                                      | `'LayoutModel'`           |\n| `_view_module`          | string                                                                                                                                                                      | `'@jupyter-widgets/base'` |\n| `_view_module_version`  | string                                                                                                                                                                      | `'2.0.0'`                 |\n| `_view_name`            | string                                                                                                                                                                      | `'LayoutView'`            |\n| `align_content`         | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'space-between'`, `'space-around'`, `'space-evenly'`, `'stretch'`, `'inherit'`, `'initial'`, `'unset'`) | `null`                    | The align-content CSS attribute.                                 |\n| `align_items`           | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'baseline'`, `'stretch'`, `'inherit'`, `'initial'`, `'unset'`)                                          | `null`                    | The align-items CSS attribute.                                   |\n| `align_self`            | `null` or string (one of `'auto'`, `'flex-start'`, `'flex-end'`, `'center'`, `'baseline'`, `'stretch'`, `'inherit'`, `'initial'`, `'unset'`)                                | `null`                    | The align-self CSS attribute.                                    |\n| `border_bottom`         | `null` or string                                                                                                                                                            | `null`                    | The border bottom CSS attribute.                                 |\n| `border_left`           | `null` or string                                                                                                                                                            | `null`                    | The border left CSS attribute.                                   |\n| `border_right`          | `null` or string                                                                                                                                                            | `null`                    | The border right CSS attribute.                                  |\n| `border_top`            | `null` or string                                                                                                                                                            | `null`                    | The border top CSS attribute.                                    |\n| `bottom`                | `null` or string                                                                                                                                                            | `null`                    | The bottom CSS attribute.                                        |\n| `display`               | `null` or string                                                                                                                                                            | `null`                    | The display CSS attribute.                                       |\n| `flex`                  | `null` or string                                                                                                                                                            | `null`                    | The flex CSS attribute.                                          |\n| `flex_flow`             | `null` or string                                                                                                                                                            | `null`                    | The flex-flow CSS attribute.                                     |\n| `grid_area`             | `null` or string                                                                                                                                                            | `null`                    | The grid-area CSS attribute.                                     |\n| `grid_auto_columns`     | `null` or string                                                                                                                                                            | `null`                    | The grid-auto-columns CSS attribute.                             |\n| `grid_auto_flow`        | `null` or string (one of `'column'`, `'row'`, `'row dense'`, `'column dense'`, `'inherit'`, `'initial'`, `'unset'`)                                                         | `null`                    | The grid-auto-flow CSS attribute.                                |\n| `grid_auto_rows`        | `null` or string                                                                                                                                                            | `null`                    | The grid-auto-rows CSS attribute.                                |\n| `grid_column`           | `null` or string                                                                                                                                                            | `null`                    | The grid-column CSS attribute.                                   |\n| `grid_gap`              | `null` or string                                                                                                                                                            | `null`                    | The grid-gap CSS attribute.                                      |\n| `grid_row`              | `null` or string                                                                                                                                                            | `null`                    | The grid-row CSS attribute.                                      |\n| `grid_template_areas`   | `null` or string                                                                                                                                                            | `null`                    | The grid-template-areas CSS attribute.                           |\n| `grid_template_columns` | `null` or string                                                                                                                                                            | `null`                    | The grid-template-columns CSS attribute.                         |\n| `grid_template_rows`    | `null` or string                                                                                                                                                            | `null`                    | The grid-template-rows CSS attribute.                            |\n| `height`                | `null` or string                                                                                                                                                            | `null`                    | The height CSS attribute.                                        |\n| `justify_content`       | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'space-between'`, `'space-around'`, `'inherit'`, `'initial'`, `'unset'`)                                | `null`                    | The justify-content CSS attribute.                               |\n| `justify_items`         | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'inherit'`, `'initial'`, `'unset'`)                                                                     | `null`                    | The justify-items CSS attribute.                                 |\n| `left`                  | `null` or string                                                                                                                                                            | `null`                    | The left CSS attribute.                                          |\n| `margin`                | `null` or string                                                                                                                                                            | `null`                    | The margin CSS attribute.                                        |\n```\n\n----------------------------------------\n\nTITLE: Defining FloatProgressModel and ProgressView Attributes in Markdown\nDESCRIPTION: This snippet describes the attributes, types, default values, and help text for the FloatProgressModel and ProgressView in Jupyter Widgets controls version 1.2.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                           | Default                       | Help                                           |\n| ----------------------- | ------------------------------------------------------------------------------ | ----------------------------- | ---------------------------------------------- |\n| `_dom_classes`          | array of string                                                                | `[]`                          | CSS classes applied to widget DOM element      |\n| `_model_module`         | string                                                                         | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                         | `'1.2.0'`                     |\n| `_model_name`           | string                                                                         | `'FloatProgressModel'`        |\n| `_view_module`          | string                                                                         | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                         | `'1.2.0'`                     |\n| `_view_name`            | string                                                                         | `'ProgressView'`              |\n| `bar_style`             | `null` or string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the progress bar. |\n| `description`           | string                                                                         | `''`                          | Description of the control.                    |\n| `layout`                | reference to Layout widget                                                     | reference to new instance     |\n| `max`                   | number (float)                                                                 | `100.0`                       | Max value                                      |\n| `min`                   | number (float)                                                                 | `0.0`                         | Min value                                      |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`)                                   | `'horizontal'`                | Vertical or horizontal.                        |\n| `style`                 | reference to ProgressStyle widget                                              | reference to new instance     |\n| `value`                 | number (float)                                                                 | `0.0`                         | Float value                                    |\n```\n\n----------------------------------------\n\nTITLE: Testing the variable inspector with string assignment\nDESCRIPTION: Creates a string variable to demonstrate the variable inspector's ability to display string values.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nd = \"String\"\n```\n\n----------------------------------------\n\nTITLE: ColorPicker Widget Specification\nDESCRIPTION: Defines the model and view attributes for the ColorPicker widget including color value, display mode, and styling properties. Uses ColorPickerModel and ColorPickerView from @jupyter-widgets/controls v1.5.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                   |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'ColorPickerModel'`          |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.5.0'`                     |\n| `_view_name`            | string                               | `'ColorPickerView'`           |\n| `concise`               | boolean                              | `false`                       | Display short version with just a color selector.      |\n| `description`           | string                               | `''`                          | Description of the control.                            |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description). |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                        |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                 |\n| `value`                 | string                               | `'black'`                     | The color value.                                       |\n```\n\n----------------------------------------\n\nTITLE: SliderStyle Widget Specification\nDESCRIPTION: Configuration specification for SliderStyle widget defining styling attributes. Includes handle color and description width properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                                                 |\n| ----------------------- | ---------------- | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `description_width`     | string           | `''`                          | Width of the description to the side of the control. |\n```\n\n----------------------------------------\n\nTITLE: Documenting HTMLModel and HTMLView in Markdown\nDESCRIPTION: Markdown table detailing the attributes, types, default values, and help text for HTMLModel and HTMLView from @jupyter-widgets/controls version 1.4.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                 | Default                       | Help                                                    |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element               |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.4.0'`                     |\n| `_model_name`           | string                               | `'HTMLModel'`                 |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.4.0'`                     |\n| `_view_name`            | string                               | `'HTMLView'`                  |\n| `description`           | string                               | `''`                          | Description of the control.                             |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).  |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                  |\n| `value`                 | string                               | `''`                          | String value                                            |\n```\n\n----------------------------------------\n\nTITLE: Importing Matplotlib with Inline Display\nDESCRIPTION: Configures matplotlib to display plots inline within the Jupyter notebook.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Browser.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Gaps in CSS\nDESCRIPTION: Specifies the size of grid lines (gutters) between rows and columns. Can use a shorthand or individual properties for row and column gaps.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_19\n\nLANGUAGE: CSS\nCODE:\n```\ngrid-gap: <grid-row-gap> <grid-column-gap>;\ngrid-row-gap: <line-size>;\ngrid-column-gap: <line-size>;\n```\n\n----------------------------------------\n\nTITLE: Generating Widget Style Support Matrix\nDESCRIPTION: Script to generate an HTML table showing which widgets support which style attributes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Styling.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import defaultdict\nfrom IPython.display import HTML\nimport ipywidgets\nfrom pprint import pprint\n```\n\nLANGUAGE: python\nCODE:\n```\nreverse_lut = defaultdict(set)\nstyles = set()\nfor export_name in dir(ipywidgets.widgets):\n    export = getattr(ipywidgets.widgets, export_name)\n    try:\n        if issubclass(export, ipywidgets.Widget) and 'style' in export.class_trait_names():\n            reverse_lut[export.style.klass.__name__].add(export.__name__)\n            styles.add(export.style.klass)\n    except TypeError:\n        pass\n\nhtml = '<ul>'\nfor style, widgets in reverse_lut.items():\n    html = f\"{html}\\n<li><b>{style}:</b> {', '.join(sorted(widgets))}</li>\"\nhtml += \"</ul>\"\nHTML(html)\n```\n\nLANGUAGE: python\nCODE:\n```\nattributes = defaultdict(set)\nbase_traits = set(ipywidgets.Style.class_trait_names())\n\nfor s in styles:\n    for t in s.class_trait_names():\n        if not t.startswith(\"_\") and t not in base_traits:\n            attributes[s.__name__].add(t)\nall_attributes = set().union(*attributes.values())\n\nhtml = '<table>\\n'\nhtml = f\"{html}<tr><th>Attribute</th>{ ''.join(f'<th>{s}</th>' for s in attributes.keys()) }</tr>\"\nfor a in all_attributes:\n    html = f\"\"\"{html}<tr><td>{a}</td>{ ''.join(f'<td>{\"✓\" if a in attribs else \"\"}</td>' for attribs in attributes.values()) }</tr>\"\"\"\nhtml += \"</table>\"\nHTML(html)\n```\n\n----------------------------------------\n\nTITLE: ControllerAxis Widget Configuration\nDESCRIPTION: Defines the model and view for a controller axis widget with attributes for DOM classes, module versions, layout settings, and axis value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.2.0'`                     |\n| `_model_name`           | string                     | `'ControllerAxisModel'`       |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.2.0'`                     |\n| `_view_name`            | string                     | `'ControllerAxisView'`        |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `value`                 | number (float)             | `0.0`                         | The value of the axis.                    |\n```\n\n----------------------------------------\n\nTITLE: Creating IntProgress Widget in Python with IPyWidgets\nDESCRIPTION: Creates an integer progress bar with a value of 7 out of 10. The widget includes a description label and custom styling with a maroon bar color, useful for displaying task completion status.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/ui-tests/tests/notebooks/widgets.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwidgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    description='Loading:',\n    bar_style='', # 'success', 'info', 'warning', 'danger' or ''\n    style={'bar_color': 'maroon'},\n    orientation='horizontal'\n)\n```\n\n----------------------------------------\n\nTITLE: HBox Widget Configuration Reference\nDESCRIPTION: Configuration reference for the Jupyter HBox layout widget, including box styling options, children management, and layout properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------------------------------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                                                | `[]`                      | CSS classes applied to widget DOM element                                                     |\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Float Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_float module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_float\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting ValidModel and ValidView in Jupyter Widgets\nDESCRIPTION: This snippet outlines the attributes of the ValidModel and ValidView widgets from the @jupyter-widgets/controls package. It covers properties related to validation, description, and styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n### ValidModel (@jupyter-widgets/controls, 1.4.0); ValidView (@jupyter-widgets/controls, 1.4.0)\n\n| Attribute               | Type                                 | Default                       | Help                                                   |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.4.0'`                     |\n| `_model_name`           | string                               | `'ValidModel'`                |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.4.0'`                     |\n| `_view_name`            | string                               | `'ValidView'`                 |\n| `description`           | string                               | `''`                          | Description of the control.                            |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description). |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.                        |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `readout`               | string                               | `'Invalid'`                   | Message displayed when the value is False              |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                 |\n| `value`                 | boolean                              | `false`                       | Bool value                                             |\n```\n\n----------------------------------------\n\nTITLE: Documenting SelectionRangeSliderModel and SelectionRangeSliderView in Markdown\nDESCRIPTION: Describes the attributes, types, default values, and help text for the SelectionRangeSliderModel and SelectionRangeSliderView widgets from @jupyter-widgets/controls version 1.2.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n### SelectionRangeSliderModel (@jupyter-widgets/controls, 1.2.0); SelectionRangeSliderView (@jupyter-widgets/controls, 1.2.0)\n\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.2.0'`                     |\n| `_model_name`           | string                                       | `'SelectionRangeSliderModel'` |\n| `_options_labels`       | array of string                              | `[]`                          | The labels for the options.                                       |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.2.0'`                     |\n| `_view_name`            | string                                       | `'SelectionRangeSliderView'`  |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `index`                 | array                                        | `[0, 0]`                      | Min and max selected indices                                      |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current selected label next to the slider             |\n| `style`                 | reference to DescriptionStyle widget         | reference to new instance     | Styling customizations                                            |\n```\n\n----------------------------------------\n\nTITLE: Defining FloatSlider Widget Attributes in Markdown\nDESCRIPTION: This snippet details the attributes, types, default values, and help text for the FloatSliderModel and FloatSliderView widgets from the @jupyter-widgets/controls package.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                       | Help                                                              |\n| ----------------------- | -------------------------------------------- | ----------------------------- | ----------------------------------------------------------------- |\n| `_dom_classes`          | array of string                              | `[]`                          | CSS classes applied to widget DOM element                         |\n| `_model_module`         | string                                       | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                       | `'1.5.0'`                     |\n| `_model_name`           | string                                       | `'FloatSliderModel'`          |\n| `_view_module`          | string                                       | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                       | `'1.5.0'`                     |\n| `_view_name`            | string                                       | `'FloatSliderView'`           |\n| `continuous_update`     | boolean                                      | `true`                        | Update the value of the widget as the user is holding the slider. |\n| `description`           | string                                       | `''`                          | Description of the control.                                       |\n| `description_tooltip`   | `null` or string                             | `null`                        | Tooltip for the description (defaults to description).            |\n| `disabled`              | boolean                                      | `false`                       | Enable or disable user changes                                    |\n| `layout`                | reference to Layout widget                   | reference to new instance     |\n| `max`                   | number (float)                               | `100.0`                       | Max value                                                         |\n| `min`                   | number (float)                               | `0.0`                         | Min value                                                         |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`                | Vertical or horizontal.                                           |\n| `readout`               | boolean                                      | `true`                        | Display the current value of the slider next to it.               |\n| `readout_format`        | string                                       | `'.2f'`                       | Format for the readout                                            |\n| `step`                  | number (float)                               | `0.1`                         | Minimum step to increment the value                               |\n| `style`                 | reference to SliderStyle widget              | reference to new instance     |\n| `value`                 | number (float)                               | `0.0`                         | Float value                                                       |\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Widget Model with Version Attributes\nDESCRIPTION: Extends a DOMWidgetModel to include new required attributes _model_module_version and _view_module_version, essential for proper widget embedding.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar HelloModel = widgets.DOMWidgetModel.extend({\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\n    _model_name: 'HelloModel',\n    _view_name: 'HelloView',\n    _model_module: 'example_module',\n    _view_module: 'example_module',\n    _model_module_version: '~1.0.0',\n    _view_module_version: '~1.0.0',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Jupyter Widgets Control Models Schema\nDESCRIPTION: Markdown tables defining the attributes, types, defaults, and help text for various Jupyter widget models including ColorPicker, ColorsInput, Combobox, and ControllerAxis controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                 | Default                       | Help                                              |\n| ------------------------ | ------------------------------------ | ----------------------------- | ------------------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element         |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'ColorPickerModel'`          |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'ColorPickerView'`           |\n| `concise`                | boolean                              | `false`                       | Display short version with just a color selector. |\n| `description`            | string                               | `''`                          | Description of the control.                       |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.                   |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes.                   |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                            |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                               |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                                |\n| `value`                  | string                               | `'black'`                     | The color value.                                  |\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Image from scikit-image\nDESCRIPTION: Loads a sample coffee image from scikit-image's data module and converts it to a float array for processing.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ni = img_as_float(data.coffee())\ni.shape\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Items Vertically in CSS\nDESCRIPTION: Aligns grid items along the block (column) axis within their cells. Applies to all grid items in the container.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_20\n\nLANGUAGE: CSS\nCODE:\n```\nalign-items: start | end | center | stretch;\n```\n\n----------------------------------------\n\nTITLE: Copying Widget Styles\nDESCRIPTION: Demonstrates how to copy styles between widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Styling.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nb2 = Button()\nb2.style = b1.style\nb2\n```\n\n----------------------------------------\n\nTITLE: Documenting Jupyter FloatProgress Widget Attributes in Markdown\nDESCRIPTION: A markdown table detailing the attributes of the Jupyter FloatProgress widget, including their types, default values, and descriptions. This widget is used for displaying progress bars with float values.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                           | Default                   | Help                                                                                          |\n| ----------------------- | ------------------------------------------------------------------------------ | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                                                          | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                                                                         | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                                                                         | `'~2.1.0'`                |\n| `_model_name`           | string                                                                         | `'ProgressModel'`         |\n| `_view_module`          | string                                                                         | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                                                                         | `'~2.1.0'`                |\n| `_view_name`            | string                                                                         | `'ProgressView'`          |\n| `bar_style`             | `null` or string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                      | Use a predefined styling for the progress bar.                                                |\n| `description`           | string                                                                         | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                                                                        | `false`                   | Enable or disable user changes                                                                |\n| `layout`                | reference to Layout widget                                                     | reference to new instance |\n| `max`                   | number (float)                                                                 | `100.0`                   | Max value                                                                                     |\n| `min`                   | number (float)                                                                 | `0.0`                     | Min value                                                                                     |\n| `msg_throttle`          | number (integer)                                                               | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`)                                   | `'horizontal'`            | Vertical or horizontal.                                                                       |\n| `step`                  | number (float)                                                                 | `0.1`                     | Minimum step to increment the value (ignored by some views)                                   |\n| `style`                 | reference to ProgressStyle widget                                              | reference to new instance |\n| `value`                 | number (float)                                                                 | `0.0`                     | Float value                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Installing IPyWidgets Development Environment with Conda\nDESCRIPTION: Commands to create and configure a conda environment for ipywidgets development, including installing dependencies and cloning the repository.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_install.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda create -c conda-forge -n ipywidgets yarn notebook jupyterlab\nconda activate ipywidgets\nipython kernel install --name ipywidgets --display-name \"ipywidgets\" --sys-prefix\ngit clone https://github.com/jupyter-widgets/ipywidgets.git\ncd ipywidgets\n./dev-install.sh\n```\n\n----------------------------------------\n\nTITLE: Password Widget Specification\nDESCRIPTION: Defines a password input widget with support for continuous updates, placeholder text, and styling options. Part of @jupyter-widgets/controls version 2.0.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                          | Default                       | Help                                                                                                         |\n| ------------------------ | ----------------------------- | ----------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `_dom_classes`           | array of string               | `[]`                          | CSS classes applied to widget DOM element                                                                    |\n| `_model_module`          | string                        | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                        | `'2.0.0'`                     |\n| `_model_name`            | string                        | `'PasswordModel'`             |\n```\n\n----------------------------------------\n\nTITLE: Constructing npm CDN URL for Custom Widgets\nDESCRIPTION: This snippet illustrates how the widget embedder constructs the URL to fetch custom widget implementations from the npm CDN. It uses the module name and semver range to generate the appropriate URL.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/embedding.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nhttps://cdn.jsdelivr.net/npm/bqplot@^2.0.0/dist/index.js\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Style Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_style module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_style\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Updating widget import in Python package initialization\nDESCRIPTION: Code modification in the __init__.py file to import the new Email widget instead of the original ExampleWidget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom .widget import Email\n```\n\n----------------------------------------\n\nTITLE: ControllerButton Widget Configuration\nDESCRIPTION: Defines the model and view for a controller button widget with attributes for DOM classes, module versions, layout settings, button state and value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string            | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.2.0'`                     |\n| `_model_name`           | string                     | `'ControllerButtonModel'`     |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.2.0'`                     |\n| `_view_name`            | string                     | `'ControllerButtonView'`      |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `pressed`               | boolean                    | `false`                       | Whether the button is pressed.            |\n| `value`                 | number (float)             | `0.0`                         | The value of the button.                  |\n```\n\n----------------------------------------\n\nTITLE: Version Validation Message\nDESCRIPTION: Frontend response with version validation status and actual version number\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id': 'u-u-i-d',\n  'data': {\n    'frontend_version: '2.1.4',\n    'validated': true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LabelModel and LabelView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes and properties for the LabelModel and LabelView widgets. These widgets display text labels with various customization options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-5.md#2025-04-16_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n### LabelModel (@jupyter-widgets/controls, 1.5.0); LabelView (@jupyter-widgets/controls, 1.5.0)\n\n| Attribute               | Type                                 | Default                       | Help                                                    |\n| ----------------------- | ------------------------------------ | ----------------------------- | ------------------------------------------------------- |\n| `_dom_classes`          | array of string                      | `[]`                          | CSS classes applied to widget DOM element               |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.5.0'`                     |\n| `_model_name`           | string                               | `'LabelModel'`                |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.5.0'`                     |\n| `_view_name`            | string                               | `'LabelView'`                 |\n| `description`           | string                               | `''`                          | Description of the control.                             |\n| `description_tooltip`   | `null` or string                     | `null`                        | Tooltip for the description (defaults to description).  |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `placeholder`           | string                               | `'\\u200b'`                    | Placeholder text to display when nothing has been typed |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                                  |\n| `value`                 | string                               | `''`                          | String value                                            |\n```\n\n----------------------------------------\n\nTITLE: DescriptionStyle Widget Configuration\nDESCRIPTION: Defines the styling model for widget descriptions, particularly the width of description elements.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type   | Default                       | Help                                                 |\n| ----------------------- | ------ | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string | `'1.2.0'`                     |\n| `_model_name`           | string | `'DescriptionStyleModel'`     |\n| `_view_module`          | string | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string | `'1.0.0'`                     |\n| `_view_name`            | string | `'StyleView'`                 |\n| `description_width`     | string | `''`                          | Width of the description to the side of the control. |\n```\n\n----------------------------------------\n\nTITLE: Serializing Widget References in JSON\nDESCRIPTION: Demonstrates the format used to serialize a reference to a widget in JSON. The model ID of the widget is incorporated into a specific string pattern.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-3.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"IPY_MODEL_<MODEL_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for JupyterLite\nDESCRIPTION: Installs the necessary Python packages for the weather map application, including ipywidgets, ipyleaflet, numpy, bqplot, and pandas.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Imports for JupyterLite\n%pip install -q ipywidgets ipyleaflet numpy bqplot pandas\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Content Horizontally in CSS\nDESCRIPTION: Aligns the entire grid within the grid container along the inline (row) axis when the grid is smaller than the container.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_23\n\nLANGUAGE: CSS\nCODE:\n```\njustify-content: start | end | center | stretch | space-around | space-between | space-evenly;\n```\n\n----------------------------------------\n\nTITLE: Installing ipywidgets for JupyterLite\nDESCRIPTION: This snippet demonstrates how to install the ipywidgets package using pip within a Jupyter environment, which is required for using interactive widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Widget Base Class in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Python Layout and Style Dictionary Configuration\nDESCRIPTION: Example showing how to set layout and style traits using dictionaries in IPyWidgets 7.0\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nIntSlider(layout={'width': '100%'}, style={'handle_color': 'lightgreen'})\n```\n\n----------------------------------------\n\nTITLE: ValidModel and ValidView Widget Configuration\nDESCRIPTION: Specification for Jupyter widget validity indicator component from @jupyter-widgets/controls v2.0.0. Defines attributes for controlling validation display, styling, and interaction properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                 | Default                       | Help                                      |\n| ------------------------ | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'ValidModel'`                |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'ValidView'`                 |\n| `description`            | string                               | `''`                          | Description of the control.               |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.           |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes.           |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `readout`                | string                               | `'Invalid'`                   | Message displayed when the value is False |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                       |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                        |\n| `value`                  | boolean                              | `false`                       | Bool value                                |\n```\n\n----------------------------------------\n\nTITLE: Removing a Widget Border\nDESCRIPTION: Demonstrates how to remove a previously applied border style by setting it to None. This specifically removes the right border from the t2 text widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_borders.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nt2.layout.border_right = None\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Templates Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_templates module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_templates\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Tags Input Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_tagsinput module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_tagsinput\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: ToggleButtonsStyle Model Specification\nDESCRIPTION: Defines style-specific attributes for toggle buttons including button width and font weight controls.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type   | Default                       | Help                                                 |\n| ----------------------- | ------ | ----------------------------- | ---------------------------------------------------- |\n| `_model_module`         | string | `'@jupyter-widgets/controls'` |\n| `button_width`          | string | `''`                          | The width of each button.                            |\n```\n\n----------------------------------------\n\nTITLE: Image Widget Specification (@jupyter-widgets/controls)\nDESCRIPTION: Defines the attributes and properties for Image widget model and view. Includes image format, dimensions, and byte data specifications along with standard widget configurations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### ImageModel (@jupyter-widgets/controls, 1.0.0); ImageView (@jupyter-widgets/controls, 1.0.0)\n\n| Attribute               | Type                       | Default                       | Help                                      |\n| ----------------------- | -------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                     | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                     | `'1.0.0'`                     |\n| `_model_name`           | string                     | `'ImageModel'`                |\n| `_view_module`          | string                     | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                     | `'1.0.0'`                     |\n| `_view_name`            | string                     | `'ImageView'`                 |\n| `format`                | string                     | `'png'`                       | The format of the image.                  |\n| `height`                | string                     | `''`                          | Height of the image in pixels.            |\n| `layout`                | reference to Layout widget | reference to new instance     |\n| `value`                 | Bytes                      | `b''`                         | The image data as a byte string.          |\n| `width`                 | string                     | `''`                          | Width of the image in pixels.             |\n```\n\n----------------------------------------\n\nTITLE: Implementing Backwards Compatibility for Widget Defaults in JavaScript\nDESCRIPTION: Code example showing how to maintain backwards compatibility with ipywidgets 5.x when specifying default values for core widget models using Underscore.js's _.result method.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndefaults: function() {\n        return _.extend(_.result(this, 'widgets.DOMWidgetModel.prototype.defaults'), {\n          ....\n        })\n},\n```\n\n----------------------------------------\n\nTITLE: Installing ipywidgets in JupyterLite\nDESCRIPTION: Installs the ipywidgets package using pip in a JupyterLite environment.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Imports for JupyterLite\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Integer Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_int module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_int\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Installing ipywidgets Package in JupyterLite\nDESCRIPTION: Installs the required ipywidgets package using pip in a quiet mode within JupyterLite environment.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Controller.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Boolean Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_bool module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_bool\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Python Widget Value Observation\nDESCRIPTION: Updated pattern for observing widget value changes, replacing the deprecated on_submit callback\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nmywidget.observe(callback, 'value')\n```\n\n----------------------------------------\n\nTITLE: Rendering LaTeX in Label Widget\nDESCRIPTION: Creates a Label widget displaying a LaTeX equation (Einstein's E=mc²), showing how standalone labels can be used for mathematical notation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nLabel(value=r'\\(e=mc^2\\)')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Position with Keywords\nDESCRIPTION: Shows different combinations of object_position keywords (left/center/right, top/center/bottom) with different image sizes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nobject_fit = 'none'\nimage_value = [im_600_300, im_50_25]\nhorz_keywords = ['left', 'center', 'right']\nvert_keywords = ['top', 'center', 'bottom']\n\nrows = []\nfor image, caption  in zip(image_value, ['600 x 300 image', '50 x 25 image']):\n    cols = []\n    for horz in horz_keywords:\n        for vert in vert_keywords:\n            ib = Image(value=image)\n            ib.layout.object_position = '{horz} {vert}'.format(horz=horz, vert=vert)\n            ib.layout.margin = image_margin\n            ib.layout.object_fit = object_fit\n            # ib.layout.height = 'inherit'\n            ib.layout.width = '100%'\n            cols.append(make_box_for_grid(ib, ib.layout.object_position))\n    hb = HBox()\n    hb.layout = hbox_layout\n    hb.children = cols\n    rows.append(hb)\n\nvb = VBox()\n\nh1 = HTML(value='<{size}><code> object_position </code> by '\n                'keyword with large image</{size}>'.format(size=caption_size))\nh2 = HTML(value='<{size}><code> object_position </code> by '\n                'keyword with small image</{size}>'.format(size=caption_size))\n\nvb.children = [h1, rows[0], h2, rows[1]]\nvb.layout.height = '400px'\nvb.layout.justify_content = 'space-around'\nvb.layout.align_items = 'center'\nvb\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Layout Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_layout module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_layout\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: IntText Widget Configuration (Jupyter Widgets)\nDESCRIPTION: Specification for IntText widget model and view that handles integer input. Includes configuration for DOM classes, model/view modules, continuous updates, and styling options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n### IntTextModel (@jupyter-widgets/controls, 1.4.0); IntTextView (@jupyter-widgets/controls, 1.4.0)\n\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `_dom_classes` | array of string | `[]` | CSS classes applied to widget DOM element |\n| `_model_module` | string | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string | `'1.4.0'` |\n| `value` | number (integer) | `0` | Int value |\n```\n\n----------------------------------------\n\nTITLE: Updating Webpack External Dependencies for ipywidgets\nDESCRIPTION: Modifies the Webpack configuration to declare @jupyter-widgets/base and @jupyter-widgets/controls as external dependencies, replacing the previous jupyter-js-widgets dependency.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexternals: ['@jupyter-widgets/base']\n```\n\n----------------------------------------\n\nTITLE: HBox Widget Model Specification\nDESCRIPTION: Specification for HBoxModel and HBoxView from @jupyter-widgets/controls v2.0.0. Defines a container widget that arranges child widgets horizontally.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                 | Default                       | Help                                      |\n| ----------------------- | -------------------------------------------------------------------- | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array of string                                                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                                                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                               | `'2.0.0'`                     |\n| `_model_name`           | string                                                               | `'HBoxModel'`                 |\n```\n\n----------------------------------------\n\nTITLE: Running Python Unit Tests for ipywidgets\nDESCRIPTION: This command runs Python unit tests for the ipywidgets project using pytest with coverage reporting.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_testing.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npytest --cov=ipywidgets ./python/ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Importing bqplot for Creating Visualizations\nDESCRIPTION: Imports the bqplot library and NumPy for creating interactive data visualizations to use in layout examples.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport bqplot as bq\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Importing Jupyter Widgets for Grid Layout\nDESCRIPTION: Imports necessary Jupyter Widget components for creating grid layouts, including Button, GridBox, Layout, and ButtonStyle.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Button, GridBox, Layout, ButtonStyle\n```\n\n----------------------------------------\n\nTITLE: Audio Widget Model Documentation\nDESCRIPTION: Documentation for AudioModel and AudioView widgets (version 2.0.0) specifying audio playback controls, format settings, and media handling properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| `autoplay` | boolean | `true` | When true, the audio starts when it's displayed |\n| `controls` | boolean | `true` | Specifies that audio controls should be displayed |\n| `format` | string | `'mp3'` | The format of the audio. |\n```\n\n----------------------------------------\n\nTITLE: Importing IPyWidgets Module\nDESCRIPTION: Importing all components from IPyWidgets package\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Alignment.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import *\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Core Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_core module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_core\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Auto-rebuilding Documentation\nDESCRIPTION: Launches sphinx-autobuild to automatically rebuild documentation when changes are detected\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_docs.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/source\nsphinx-autobuild -T -E -b html -d ../build/doctrees -D language=en . ../build/html\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Items Horizontally in CSS\nDESCRIPTION: Aligns grid items along the inline (row) axis within their cells. Applies to all grid items in the container.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_21\n\nLANGUAGE: CSS\nCODE:\n```\njustify-items: start | end | center | stretch;\n```\n\n----------------------------------------\n\nTITLE: Jupyter Controller Widget Attributes\nDESCRIPTION: Specifies attributes for game controller interface widget including axes, buttons, and connection status.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute | Type | Default | Help |\n| --- | --- | --- | --- |\n| `axes` | array | `[]` |\n| `buttons` | array | `[]` |\n| `connected` | boolean | `false` |\n```\n\n----------------------------------------\n\nTITLE: Jupyter ToggleButton Widget API Documentation\nDESCRIPTION: API specification for the Jupyter ToggleButton widget component, providing a toggleable button interface with various styling options. Includes properties for button styling, icons, and tooltips.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                              | Default                   | Help                                                                                          |\n| ----------------------- | --------------------------------------------------------------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                                                             | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                                                                            | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                                                                            | `'~2.1.0'`                |\n| `_model_name`           | string                                                                            | `'ToggleButtonModel'`     |\n| `_view_module`          | string                                                                            | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                                                                            | `'~2.1.0'`                |\n| `_view_name`            | string                                                                            | `'ToggleButtonView'`      |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                      | Use a predefined styling for the button.                                                      |\n| `description`           | string                                                                            | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                                                                           | `false`                   | Enable or disable user changes.                                                               |\n| `icon`                  | string                                                                            | `''`                      | Font-awesome icon.                                                                            |\n| `layout`                | reference to Layout widget                                                        | reference to new instance |\n| `msg_throttle`          | number (integer)                                                                  | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `tooltip`               | string                                                                            | `''`                      | Tooltip caption of the toggle button.                                                         |\n| `value`                 | boolean                                                                           | `false`                   | Bool value                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Defining SelectModel and SelectView Attributes in Markdown\nDESCRIPTION: Specifies the attributes for SelectModel and SelectView from @jupyter-widgets/controls. Includes details on model and view modules, versions, and various UI-related attributes such as rows and styling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n### SelectModel (@jupyter-widgets/controls, 2.0.0); SelectView (@jupyter-widgets/controls, 2.0.0)\n\n| Attribute                | Type                                 | Default                       | Help                                      |\n| ------------------------ | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'SelectModel'`               |\n| `_options_labels`        | array of string                      | `[]`                          | The labels for the options.               |\n| `_view_module`           | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`   | string                               | `'2.0.0'`                     |\n| `_view_name`             | string                               | `'SelectView'`                |\n| `description`            | string                               | `''`                          | Description of the control.               |\n| `description_allow_html` | boolean                              | `false`                       | Accept HTML in the description.           |\n| `disabled`               | boolean                              | `false`                       | Enable or disable user changes            |\n| `index`                  | `null` or number (integer)           | `null`                        | Selected index                            |\n| `layout`                 | reference to Layout widget           | reference to new instance     |\n| `rows`                   | number (integer)                     | `5`                           | The number of rows to display.            |\n| `style`                  | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `tabbable`               | `null` or boolean                    | `null`                        | Is widget tabbable?                       |\n| `tooltip`                | `null` or string                     | `null`                        | A tooltip caption.                        |\n```\n\n----------------------------------------\n\nTITLE: Launching Jupyter interfaces for testing\nDESCRIPTION: Commands to start Jupyter Notebook or JupyterLab for testing the widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# if you are using the classic notebook\njupyter notebook\n\n# if you are using JupyterLab\njupyter lab\n```\n\n----------------------------------------\n\nTITLE: Installing IPyWidgets in JupyterLite\nDESCRIPTION: This snippet installs the IPyWidgets library using pip in a JupyterLite environment.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Media widgets.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Utils Module in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.utils module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.utils\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Installing and enabling widget for Classic Notebook\nDESCRIPTION: Commands to install and enable the widget extension for the Classic Notebook interface.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njupyter nbextension install --sys-prefix --symlink --overwrite --py ipyemail\njupyter nbextension enable --sys-prefix --py ipyemail\n```\n\n----------------------------------------\n\nTITLE: Requesting Widget States in Jupyter Widgets (JSON)\nDESCRIPTION: Structure of a 'request_states' message sent from the frontend to the kernel through the 'jupyter.widget.control' comm channel to request the full state of all widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"comm_id\" : \"u-u-i-d\",\n  \"data\" : {\n    \"method\": \"request_states\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting JupyterLab for UI Testing\nDESCRIPTION: This command starts JupyterLab 3 for UI testing using Galata. It should be run in the ui-tests directory.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_testing.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Creating Coordinate Grid for Data Generation\nDESCRIPTION: Generates a grid of latitude and longitude coordinates using NumPy's mgrid function for simulating global weather data points.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nX, Y = np.mgrid[-90:90:10j, -180:180:20j]\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Image Manipulation\nDESCRIPTION: Imports necessary libraries including IPython display utilities, ipywidgets for interactive elements, matplotlib for plotting, skimage for image processing, and numpy for array operations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Stdlib imports\nfrom io import BytesIO\n\n# Third-party libraries\nfrom IPython.display import Image\nfrom ipywidgets import interact, interactive, fixed\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom skimage import data, filters, io, img_as_float\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Kernel Widget Instantiation Message\nDESCRIPTION: Kernel to frontend comm_open message for widget instantiation\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id' : 'u-u-i-d',\n  'target_name' : 'jupyter.widget',\n  'data' : {\n    <dictionary of widget state>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Widget Data with Python in ipywidgets\nDESCRIPTION: This Python code snippet demonstrates the creation of interactive widgets using ipywidgets. It creates two IntSlider widgets, a Button widget, links the sliders dynamically, and combines them into a VBox layout.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/examples/embed-amd/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import VBox, jsdlink, IntSlider, Button\n\ns1, s2 = IntSlider(max=200, value=100), IntSlider(value=40)\nb = Button(icon='legal')\njsdlink((s1, 'value'), (s2, 'max'))\nVBox([s1, s2, b])\n```\n\n----------------------------------------\n\nTITLE: Defining Jupyter.BoundedFloatText Widget Model in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and help text for the Jupyter.BoundedFloatText widget model. Includes properties like description, disabled, max, min, and value.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                     | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                     | `'~2.1.0'`                |\n| `_model_name`           | string                     | `'FloatTextModel'`        |\n| `_view_module`          | string                     | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                     | `'~2.1.0'`                |\n| `_view_name`            | string                     | `'FloatTextView'`         |\n| `description`           | string                     | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                    | `false`                   | Enable or disable user changes                                                                |\n| `layout`                | reference to Layout widget | reference to new instance |\n| `max`                   | number (float)             | `100.0`                   | Max value                                                                                     |\n| `min`                   | number (float)             | `0.0`                     | Min value                                                                                     |\n| `msg_throttle`          | number (integer)           | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `step`                  | number (float)             | `0.1`                     | Minimum step to increment the value (ignored by some views)                                   |\n| `value`                 | number (float)             | `0.0`                     | Float value                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installs the necessary Python packages ipywidgets, matplotlib, and scikit-learn using pip.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Browser.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets matplotlib scikit-learn\n```\n\n----------------------------------------\n\nTITLE: Defining ValidModel and ValidView Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes, types, default values, and descriptions for ValidModel and ValidView from @jupyter-widgets/controls version 1.1.0. It includes details on CSS classes, model and view specifications, and widget-specific properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n### ValidModel (@jupyter-widgets/controls, 1.1.0); ValidView (@jupyter-widgets/controls, 1.1.0)\n\n| Attribute               | Type                                 | Default                       | Help                                      |\n| ----------------------- | ------------------------------------ | ----------------------------- | ----------------------------------------- |\n| `_dom_classes`          | array                                | `[]`                          | CSS classes applied to widget DOM element |\n| `_model_module`         | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                               | `'1.1.0'`                     |\n| `_model_name`           | string                               | `'ValidModel'`                |\n| `_view_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                               | `'1.1.0'`                     |\n| `_view_name`            | string                               | `'ValidView'`                 |\n| `description`           | string                               | `''`                          | Description of the control.               |\n| `disabled`              | boolean                              | `false`                       | Enable or disable user changes.           |\n| `layout`                | reference to Layout widget           | reference to new instance     |\n| `readout`               | string                               | `'Invalid'`                   | Message displayed when the value is False |\n| `style`                 | reference to DescriptionStyle widget | reference to new instance     | Styling customizations                    |\n| `value`                 | boolean                              | `false`                       | Bool value                                |\n```\n\n----------------------------------------\n\nTITLE: CSS Styling Properties Documentation\nDESCRIPTION: Documentation for CSS styling attributes used in Jupyter Widgets including order, overflow, padding, positioning, and visibility properties. Each attribute specifies its allowed values and default settings.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `order`                 | `null` or string                                                                                                                                                            | `null`                    | The order CSS attribute.                                         |\n| `overflow`              | `null` or string (one of `'visible'`, `'hidden'`, `'scroll'`, `'auto'`, `'inherit'`, `'initial'`, `'unset'`)                                                                | `null`                    | The overflow CSS attribute.                                      |\n| `overflow_x`            | `null` or string (one of `'visible'`, `'hidden'`, `'scroll'`, `'auto'`, `'inherit'`, `'initial'`, `'unset'`)                                                                | `null`                    | The overflow-x CSS attribute.                                    |\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets DateTime Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_datetime module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_datetime\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Installing IPyWidgets Dependencies\nDESCRIPTION: Installing required IPyWidgets package using pip\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Alignment.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: VBox with Mathematical Expressions in Text Widgets\nDESCRIPTION: Creates a vertical box containing two Text widgets with mathematical expressions. The first uses the allow_html parameter while the second uses description_allow_html to render HTML formatting.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_sanitizer.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nVBox((Text(description=\"<strong>$ y < a, x $</strong>\", allow_html=True),\n      Text(description=\"$ <strong>y < a, x</strong>  $\", description_allow_html=True)\n     ))\n```\n\n----------------------------------------\n\nTITLE: Widget Comm Open Message Structure in JSON\nDESCRIPTION: The JSON structure for opening a communication channel for a widget. This message is sent when a widget is instantiated to create a companion model on the other side, including widget state and paths to binary buffers.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id' : 'u-u-i-d',\n  'target_name' : 'jupyter.widget',\n  'data' : {\n    'state': { <dictionary of widget state> },\n    'buffer_paths': [ <list with paths corresponding to the binary buffers> ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Resolution in JavaScript Widget View\nDESCRIPTION: JavaScript implementation of the IFrame widget view class that handles URL resolution. It uses the widget_manager's resolveUrl method to convert relative paths to proper URLs that the browser can interpret correctly.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport class IFrameView extends DOMWidgetView {\n  render() {\n    this.$iframe = document.createElement('iframe');\n    this.el.appendChild(this.$iframe);\n    this.src_changed();\n    this.model.on('change:src', this.src_changed, this);\n  }\n\n  src_changed() {\n    const url = this.model.get('src'); \n    this.model.widget_manager.resolveUrl(url).then(resolvedUrl => { \n        this.$iframe.src = resolvedUrl;\n    }); \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Widget with Complex HTML Description Disabled\nDESCRIPTION: Creates a Text widget with complex HTML including CSS styling and an image reference that will be displayed as plain text since description_allow_html is False.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_sanitizer.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nText(description=\"<style type='type/css'>SPAN {text-decoration:underline;}</style><img src='jlogo-small.png' title='àçeù' /> <span style='color: orange'>NOT styled</span>\", description_allow_html=False)\n```\n\n----------------------------------------\n\nTITLE: Defining a function with type annotation\nDESCRIPTION: Creates a function with a float type annotation for use with interact.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef f(x: float):\n    return x\n```\n\n----------------------------------------\n\nTITLE: JupyterLab Display Message\nDESCRIPTION: Kernel message for displaying widget in JupyterLab\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  'data': {\n    'application/vnd.jupyter.widget-view+json': {\n      'model_id': 'u-u-i-d'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Traits Module in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.trait_types module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.trait_types\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Symbolic Variable\nDESCRIPTION: Creates a symbolic variable 'x' for use in polynomial expressions.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Factoring.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = Symbol('x')\n```\n\n----------------------------------------\n\nTITLE: Documentation for Jupyter.SelectMultiple Widget\nDESCRIPTION: Specification for a multiple selection widget component in Jupyter. Defines attributes for model/view configuration, styling, and interaction handling.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### Jupyter.SelectMultiple\n\n| Attribute               | Type                       | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                     | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                     | `'~2.1.0'`                |\n| `_model_name`           | string                     | `'SelectMultipleModel'`   |\n| `_options_labels`       | array                      | `[]`                      |\n| `_view_module`          | string                     | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                     | `'~2.1.0'`                |\n| `_view_name`            | string                     | `'SelectMultipleView'`    |\n| `description`           | string                     | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                    | `false`                   | Enable or disable user changes                                                                |\n| `layout`                | reference to Layout widget | reference to new instance |\n| `msg_throttle`          | number (integer)           | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `value`                 | array                      | `[]`                      | Selected values                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutModel and LayoutView Attributes in Markdown\nDESCRIPTION: This markdown table defines the attributes for LayoutModel and LayoutView classes from the @jupyter-widgets/base module. It includes model and view metadata, as well as various CSS layout properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                                                                                                                        | Default                   | Help                                                             |\n| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------- | ---------------------------------------------------------------- |\n| `_model_module`         | string                                                                                                                                                                      | `'@jupyter-widgets/base'` | The namespace for the model.                                     |\n| `_model_module_version` | string                                                                                                                                                                      | `'1.1.0'`                 | A semver requirement for namespace version containing the model. |\n| `_model_name`           | string                                                                                                                                                                      | `'LayoutModel'`           |\n| `_view_module`          | string                                                                                                                                                                      | `'@jupyter-widgets/base'` |\n| `_view_module_version`  | string                                                                                                                                                                      | `'1.1.0'`                 |\n| `_view_name`            | string                                                                                                                                                                      | `'LayoutView'`            |\n| `align_content`         | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'space-between'`, `'space-around'`, `'space-evenly'`, `'stretch'`, `'inherit'`, `'initial'`, `'unset'`) | `null`                    | The align-content CSS attribute.                                 |\n| `align_items`           | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'baseline'`, `'stretch'`, `'inherit'`, `'initial'`, `'unset'`)                                          | `null`                    | The align-items CSS attribute.                                   |\n| `align_self`            | `null` or string (one of `'auto'`, `'flex-start'`, `'flex-end'`, `'center'`, `'baseline'`, `'stretch'`, `'inherit'`, `'initial'`, `'unset'`)                                | `null`                    | The align-self CSS attribute.                                    |\n| `border`                | `null` or string                                                                                                                                                            | `null`                    | The border CSS attribute.                                        |\n| `bottom`                | `null` or string                                                                                                                                                            | `null`                    | The bottom CSS attribute.                                        |\n| `display`               | `null` or string                                                                                                                                                            | `null`                    | The display CSS attribute.                                       |\n| `flex`                  | `null` or string                                                                                                                                                            | `null`                    | The flex CSS attribute.                                          |\n| `flex_flow`             | `null` or string                                                                                                                                                            | `null`                    | The flex-flow CSS attribute.                                     |\n| `grid_area`             | `null` or string                                                                                                                                                            | `null`                    | The grid-area CSS attribute.                                     |\n| `grid_auto_columns`     | `null` or string                                                                                                                                                            | `null`                    | The grid-auto-columns CSS attribute.                             |\n| `grid_auto_flow`        | `null` or string (one of `'column'`, `'row'`, `'row dense'`, `'column dense'`, `'inherit'`, `'initial'`, `'unset'`)                                                         | `null`                    | The grid-auto-flow CSS attribute.                                |\n| `grid_auto_rows`        | `null` or string                                                                                                                                                            | `null`                    | The grid-auto-rows CSS attribute.                                |\n| `grid_column`           | `null` or string                                                                                                                                                            | `null`                    | The grid-column CSS attribute.                                   |\n| `grid_gap`              | `null` or string                                                                                                                                                            | `null`                    | The grid-gap CSS attribute.                                      |\n| `grid_row`              | `null` or string                                                                                                                                                            | `null`                    | The grid-row CSS attribute.                                      |\n| `grid_template_areas`   | `null` or string                                                                                                                                                            | `null`                    | The grid-template-areas CSS attribute.                           |\n| `grid_template_columns` | `null` or string                                                                                                                                                            | `null`                    | The grid-template-columns CSS attribute.                         |\n| `grid_template_rows`    | `null` or string                                                                                                                                                            | `null`                    | The grid-template-rows CSS attribute.                            |\n| `height`                | `null` or string                                                                                                                                                            | `null`                    | The height CSS attribute.                                        |\n| `justify_content`       | `null` or string (one of `'flex-start'`, `'flex-end'`, `'center'`, `'space-between'`, `'space-around'`, `'inherit'`, `'initial'`, `'unset'`)                                | `null`                    | The justify-content CSS attribute.                               |\n| `left`                  | `null` or string                                                                                                                                                            | `null`                    | The left CSS attribute.                                          |\n| `margin`                | `null` or string                                                                                                                                                            | `null`                    | The margin CSS attribute.                                        |\n| `max_height`            | `null` or string                                                                                                                                                            | `null`                    | The max-height CSS attribute.                                    |\n| `max_width`             | `null` or string                                                                                                                                                            | `null`                    | The max-width CSS attribute.                                     |\n| `min_height`            | `null` or string                                                                                                                                                            | `null`                    | The min-height CSS attribute.                                    |\n| `min_width`             | `null` or string                                                                                                                                                            | `null`                    | The min-width CSS attribute.                                     |\n```\n\n----------------------------------------\n\nTITLE: Defining a slow function\nDESCRIPTION: Creates a slow function to demonstrate issues with continuous updates in interactive widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef slow_function(i):\n    print(int(i),list(x for x in range(int(i)) if \n                str(x)==str(x)[::-1] and \n                str(x**2)==str(x**2)[::-1]))\n    return\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installs the necessary Python packages ipywidgets and sympy using pip within Jupyter environment.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Factoring.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets sympy\n```\n\n----------------------------------------\n\nTITLE: Loading Digits Dataset\nDESCRIPTION: Loads the digits dataset from scikit-learn into memory.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Browser.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndigits = datasets.load_digits()\n```\n\n----------------------------------------\n\nTITLE: Loading RequireJS for Custom Widget Embedding\nDESCRIPTION: Includes the RequireJS library in an HTML page, which is necessary for embedding custom widgets using the RequireJS-based embedding approach.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- Load require.js. Delete this if your page already loads require.js -->\n<script\n  src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js\"\n  integrity=\"sha256-Ae2Vz/4ePdIu6ZyI/5ZGsYnb+m0JlOmKPjt6XZ9JJkA=\"\n  crossorigin=\"anonymous\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Upload Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_upload module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_upload\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets String Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_string module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_string\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Importing IPyWidgets Interact\nDESCRIPTION: Imports the interact function from ipywidgets for creating interactive widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Browser.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interact\n```\n\n----------------------------------------\n\nTITLE: Updating Widget States in Jupyter Widgets (JSON)\nDESCRIPTION: Structure of an 'update_states' message sent from the kernel to the frontend in response to a 'request_states' message. It includes all widget states and information about binary buffers.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"comm_id\" : \"u-u-i-d\",\n  \"data\" : {\n    \"method\": \"update_states\",\n    \"states\": {\n      <widget1 u-u-i-d>: <widget1 state>,\n      <widget2 u-u-i-d>: <widget2 state>,\n      [...]\n    },\n    \"buffer_paths\": [ <list with paths corresponding to the binary buffers> ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Model Reference Format\nDESCRIPTION: Demonstrates the format used to serialize widget references in JSON, where the model ID is incorporated into a specific string pattern.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"IPY_MODEL_<MODEL_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for JupyterLite\nDESCRIPTION: This snippet installs the necessary Python libraries (ipywidgets, matplotlib, numpy) for the beat frequency exploration in JupyterLite environment.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Beat Frequencies.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets matplotlib numpy\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Model Specification\nDESCRIPTION: Commands to update the widget model specification in both JSON and Markdown formats.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_install.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython ./packages/schema/generate-spec.py -f json-pretty packages/schema/jupyterwidgetmodels.latest.json\npython ./packages/schema/generate-spec.py -f markdown packages/schema/jupyterwidgetmodels.latest.md\n```\n\n----------------------------------------\n\nTITLE: Documentation for Jupyter.SliderStyle Widget\nDESCRIPTION: Specification for slider styling component in Jupyter. Defines attributes for customizing the appearance of slider widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n### Jupyter.SliderStyle\n\n| Attribute               | Type             | Default                | Help                                                                                          |\n| ----------------------- | ---------------- | ---------------------- | --------------------------------------------------------------------------------------------- |\n| `_model_module`         | string           | `'jupyter-js-widgets'` |\n| `_model_module_version` | string           | `'~2.1.0'`             |\n| `_model_name`           | string           | `'SliderStyleModel'`   |\n| `_view_module`          | string           | `'jupyter-js-widgets'` |\n| `_view_module_version`  | string           | `'~2.1.0'`             |\n| `_view_name`            | string           | `'StyleView'`          |\n| `handle_color`          | `null` or string | `null`                 |\n| `msg_throttle`          | number (integer) | `1`                    | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n```\n\n----------------------------------------\n\nTITLE: Serializing Widget References in JSON\nDESCRIPTION: Demonstrates the format used to serialize a reference to a widget in JSON. The model ID of the widget is incorporated into a specific string pattern.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"IPY_MODEL_<MODEL_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Python API Section TOC in Sphinx Documentation\nDESCRIPTION: Creates a table of contents section titled 'Python API' that includes the ipywidgets documentation, general index, and module index. The toctree is configured with a maximum depth of 1.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/index.md#2025-04-16_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:caption: Python API\n:maxdepth: 1\nipywidgets\n../genindex\n../modindex\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a function for fixed arguments\nDESCRIPTION: Creates a function to demonstrate using fixed arguments with interact.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef h(p, q):\n    return (p, q)\n```\n\n----------------------------------------\n\nTITLE: Setting up Release Environment\nDESCRIPTION: Commands to set up a clean conda environment with required dependencies for the release process.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_release.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd release\nconda deactivate\nconda remove --all -y -n releasewidgets\nrm -rf ipywidgets\n\nconda create -c conda-forge --override-channels -y -n releasewidgets notebook nodejs \"yarn=3.*\" twine jupyterlab=4 jupyter-packaging python-build jq \"python==3.9.*\"\nconda activate releasewidgets\n\ngit clone git@github.com:jupyter-widgets/ipywidgets.git\ncd ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Displaying Loaded Image Using Custom Utility Function\nDESCRIPTION: Uses the previously defined 'arr2img' function to display the loaded coffee image.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Image Processing.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narr2img(i)\n```\n\n----------------------------------------\n\nTITLE: Closing the variable inspector\nDESCRIPTION: Calls the close method on the inspector instance to unregister event handlers and clean up resources.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninspector.close()\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Output Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_output module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_output\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Testing Factorization Function\nDESCRIPTION: Example call to the factorit function with n=12.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Factoring.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfactorit(12)\n```\n\n----------------------------------------\n\nTITLE: Deep Cleaning Repository\nDESCRIPTION: Command for performing a deep clean of the cloned repository to resolve build issues.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_install.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clean -dfx .\n```\n\n----------------------------------------\n\nTITLE: Setting Up Matplotlib for Inline Display\nDESCRIPTION: Configures matplotlib to display plots inline within the Jupyter notebook, which is necessary for visualizing the generated graphs directly in the notebook cells.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Exploring Graphs.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Custom Widget Message\nDESCRIPTION: Format for sending custom messages between widget counterparts\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id': 'u-u-i-d',\n  'data': {\n    'method': 'custom',\n    'content': <the specified content>,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Large Image File in Python\nDESCRIPTION: Opens and reads a 600x300 pixel image file into memory for later display.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nwith open('images/gaussian_with_grid.png', 'rb') as f:\n    im_600_300 = f.read()\n```\n\n----------------------------------------\n\nTITLE: Testing the variable inspector with variable computation\nDESCRIPTION: Creates a new variable by multiplying existing variables to demonstrate how the inspector tracks derived variables.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nc = a * b\n```\n\n----------------------------------------\n\nTITLE: Importing random Module\nDESCRIPTION: Imports the random module for generating random temperature and precipitation values when displaying data at selected map locations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport random\n```\n\n----------------------------------------\n\nTITLE: Importing SymPy Components\nDESCRIPTION: Imports necessary SymPy functions and classes for symbolic mathematics operations.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Factoring.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sympy import Symbol, Eq, factor\n```\n\n----------------------------------------\n\nTITLE: Installing ipywidgets for JupyterLite\nDESCRIPTION: Installs the ipywidgets package using pip with the quiet flag to suppress output.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Jupyter Widgets JupyterLab Extension\nDESCRIPTION: This command uninstalls the jupyterlab_widgets package from the system.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/python/jupyterlab_widgets/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall jupyterlab_widgets\n```\n\n----------------------------------------\n\nTITLE: Creating Button with Predefined Style in Python\nDESCRIPTION: Demonstrates how to create a Button widget with a predefined danger style using ipywidgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Styling.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Button\n\nButton(description='Danger Button', button_style='danger')\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript API Section TOC in Sphinx Documentation\nDESCRIPTION: Creates a table of contents section titled 'JS API' that includes the jupyter-widgets JavaScript documentation. The toctree is configured with a maximum depth of 1.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/index.md#2025-04-16_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:caption: JS API\n:maxdepth: 1\njupyter-widgets\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN for Jupyter Widgets in HTML\nDESCRIPTION: This snippet demonstrates how to configure the CDN and loading strategy for Jupyter widgets in an HTML context. It shows the usage of data attributes to specify the CDN URL and loading behavior.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/embedding.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@jupyter-widgets/html-manager@*/dist/embed-amd.js\"\n        data-jupyter-widgets-cdn=\"https://cdn.jsdelivr.net/npm/\"\n        data-jupyter-widgets-cdn-only\n></script>\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Tests for ipywidgets\nDESCRIPTION: This command runs JavaScript tests in each package directory using yarn and karma with debug-level logging.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_testing.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Version Comm Open Message\nDESCRIPTION: Initial comm_open message sent from frontend to kernel for version verification\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id': 'u-u-i-d',\n  'target_name': 'jupyter.widget.version'\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Jupyter.Box Widget Attributes in Markdown\nDESCRIPTION: This snippet provides a detailed table of attributes for the Jupyter.Box widget, including their types, default values, and descriptions. It covers styling, layout, and behavioral attributes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Jupyter.Box\n\n| Attribute               | Type                                                                 | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------------------------------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                                                | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                                                               | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                                                               | `'~2.1.0'`                |\n| `_model_name`           | string                                                               | `'BoxModel'`              |\n| `_view_module`          | string                                                               | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                                                               | `'~2.1.0'`                |\n| `_view_name`            | string                                                               | `'BoxView'`               |\n| `box_style`             | string (one of `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                      | Use a predefined styling for the box.                                                         |\n| `children`              | array                                                                | `[]`                      |\n| `layout`                | reference to Layout widget                                           | reference to new instance |\n| `msg_throttle`          | number (integer)                                                     | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Tag Names\nDESCRIPTION: Migration of widget HTML tag name definition from getter to preinitialize method.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- get tagName() {\n-   return 'button';\n- }\n+ preinitialize() {\n+   this.tagName = 'button';\n+ }\n```\n\n----------------------------------------\n\nTITLE: Defining Jupyter.BoundedIntText Widget Model in Markdown\nDESCRIPTION: Specifies the attributes, types, default values, and help text for the Jupyter.BoundedIntText widget model. Includes properties like description, disabled, max, min, and value, similar to BoundedFloatText but with integer types.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                       | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                      | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                     | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                     | `'~2.1.0'`                |\n| `_model_name`           | string                     | `'IntTextModel'`          |\n| `_view_module`          | string                     | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                     | `'~2.1.0'`                |\n| `_view_name`            | string                     | `'IntTextView'`           |\n| `description`           | string                     | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                    | `false`                   | Enable or disable user changes                                                                |\n| `layout`                | reference to Layout widget | reference to new instance |\n| `max`                   | number (integer)           | `100`                     | Max value                                                                                     |\n| `min`                   | number (integer)           | `0`                       | Min value                                                                                     |\n| `msg_throttle`          | number (integer)           | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `step`                  | number (integer)           | `1`                       | Minimum step to increment the value (ignored by some views)                                   |\n| `value`                 | number (integer)           | `0`                       | Int value                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: DirectionalLink Widget Configuration\nDESCRIPTION: Defines a model for creating directional links between widget traits, specifying source and target pairs.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                                   |\n| ----------------------- | ---------------- | ----------------------------- | -------------------------------------- |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.2.0'`                     |\n| `_model_name`           | string           | `'DirectionalLinkModel'`      |\n| `_view_module`          | string           | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string           | `'1.2.0'`                     |\n| `_view_name`            | `null` or string | `null`                        | Name of the view.                      |\n| `source`                | array            | `[]`                          | The source (widget, 'trait_name') pair |\n| `target`                | array            | `[]`                          | The target (widget, 'trait_name') pair |\n```\n\n----------------------------------------\n\nTITLE: Checkbox Widget with HTML Description Enabled\nDESCRIPTION: Creates a Checkbox widget with HTML in the description that will be rendered as formatted HTML because description_allow_html is set to True.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_sanitizer.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCheckbox(description=\"<p><i>italic</i></p> <p><b>bold</b></p>\", description_allow_html=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing widget project from cookiecutter template\nDESCRIPTION: Command to bootstrap a new widget project using the TypeScript cookiecutter template.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter https://github.com/jupyter-widgets/widget-ts-cookiecutter\n```\n\n----------------------------------------\n\nTITLE: File Hash Generation Script\nDESCRIPTION: Shell script to calculate MD5, SHA1, and SHA256 hashes for release files.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_release.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\nfor f in $@\ndo\n  echo \"$f\"\n  echo md5: `md5 -q \"$f\"`\n  echo sha1: `shasum -a 1 \"$f\" | awk '{print $1}'`\n  echo sha256: `shasum -a 256 \"$f\" | awk '{print $1}'`\n  echo\ndone\n```\n\n----------------------------------------\n\nTITLE: HTML Widget Model Specification\nDESCRIPTION: Model and view specification for HTML widget defining attributes for DOM manipulation, module information, and widget behavior.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v8.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                          | Default                       | Help                                                    |\n| ------------------------ | ----------------------------- | ----------------------------- | ------------------------------------------------------- |\n| `_dom_classes`           | array of string               | `[]`                          | CSS classes applied to widget DOM element               |\n| `_model_module`          | string                        | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                        | `'2.0.0'`                     |\n| `_model_name`            | string                        | `'HTMLModel'`                 |\n```\n\n----------------------------------------\n\nTITLE: Importing datetime Module\nDESCRIPTION: Imports the datetime module for timestamping log entries when users interact with the map.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n```\n\n----------------------------------------\n\nTITLE: Embedding Jupyter Widgets in Sphinx Documentation\nDESCRIPTION: This RST code snippet shows how to use the jupyter-execute directive in Sphinx documentation to embed the output of code execution, including Jupyter widgets.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/embedding.md#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. jupyter-execute::\n\n  from ipywidgets import VBox, jsdlink, IntSlider, Button\n  s1, s2 = IntSlider(max=200, value=100), IntSlider(value=40)\n  b = Button(icon='legal')\n  jsdlink((s1, 'value'), (s2, 'max'))\n  VBox([s1, s2, b])\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Top-level Exports in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the top-level ipywidgets module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Jupyter Widget Documentation with Python\nDESCRIPTION: Python script that automatically generates documentation for Jupyter widgets by iterating through widget types and their traits. It documents each widget's attributes, types, default values and help text in a markdown format.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\nfrom ipywidgets import *\n\nfrom traitlets import CaselessStrEnum, Unicode, Tuple, List, Bool, CFloat, Float, CInt, Int, Instance, Undefined, Dict, Any\nfrom ipywidgets import Color\n\nwidgets_to_document = sorted(widgets.Widget.widget_types.items()) + [('Layout', widgets.Layout), ('Output', widgets.Output)]\n\ndef typing(x):\n    s = ''\n    if isinstance(x, CaselessStrEnum):\n        s = 'string (one of %s)'%(', '.join('`%r`'%i for i in x.values))\n    elif isinstance(x, Unicode):\n        s = 'string'\n    elif isinstance(x, (Tuple, List)):\n        s = 'array'\n    elif isinstance(x, Bool):\n        s = 'boolean'\n    elif isinstance(x, (CFloat, Float)):\n        s = 'number (float)'\n    elif isinstance(x, (CInt, Int)):\n        s = 'number (integer)'\n    elif isinstance(x, Color):\n        s = 'string (valid color)'\n    elif isinstance(x, Dict):\n        s = 'object'\n    elif isinstance(x, Instance) and issubclass(x.klass, widgets.Widget):\n        s = 'reference to %s widget'%(x.klass.__name__)\n        # ADD the widget to this documenting list\n        if x.klass not in [i[1] for i in widgets_to_document]:\n            widgets_to_document.append((x.klass.__name__, x.klass))\n    elif isinstance(x, Any):\n        # In our case, these all happen to be values that are converted to strings\n        s = 'string (valid option label)'\n    else:\n        s = x.__class__.__name__\n    if x.allow_none:\n        s = \"`null` or \"+s\n    return s\n\ndef jsdefault(t):\n    x = t.default_value\n    if isinstance(t, Instance):\n        x = t.make_dynamic_default()\n        if issubclass(t.klass, widgets.Widget):\n            return 'reference to new instance'\n    if x is True:\n        return '`true`'\n    elif x is False:\n        return '`false`'\n    elif x is None:\n        return '`null`'\n    elif isinstance(x, tuple):\n        return '`{0}`'.format(list(x))\n    else:\n        return '`%s`'%t.default_value_repr()\n\ndef format_widget(n, w):\n    out = []\n    out.append('### %s'%n)\n    out.append('')\n    out.append('{name: <16} | {typing: <16} | {default: <16} | {help}'.format(name='Attribute', typing='Type',\n                                                                             allownone='Nullable', default='Default', help='Help'))\n    out.append('{0:-<16}-|-{0:-<16}-|-{0:-<16}-|----'.format('-'))\n    for name, t in sorted(w.traits(sync=True).items()):\n        if name in ['_model_module', '_view_module', '_model_module_version', '_view_module_version', 'msg_throttle', '_dom_classes', 'layout']:\n            # document these separately, since they apply to all classes\n            pass\n        s = '{name: <16} | {typing: <16} | {default: <16} | {help}'.format(name='`%s`'%name, typing=typing(t),\n                                                            allownone='*' if t.allow_none else '',\n                                                                                               default=jsdefault(t),\n                                                                                              help=t.help if t.help else '')\n        out.append(s)\n    out.append('')\n    return '\\n'.join(out)\n\nout = ''\nfor n,w in widgets_to_document:\n    if n in ['jupyter.Link', 'jupyter.DirectionalLink']:\n        out += '\\n'+format_widget(n, w((IntSlider(), 'value'), (IntSlider(), 'value')))\n    else:\n        out += '\\n'+format_widget(n,w())\nprint(out)\n```\n\n----------------------------------------\n\nTITLE: Textarea Widget with HTML Styling\nDESCRIPTION: Creates a Textarea widget with CSS styling, an image, and formatted text that will be rendered as HTML since description_allow_html is True.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_sanitizer.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nTextarea(description=\"<style type='type/css'>SPAN {color: blue;}</style><img src='jlogo-small.png' title='àçeù' /> <span style='text-decoration:underline;''>underlined</span>\", description_allow_html=True)\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum class for interact\nDESCRIPTION: Creates an Enum class to demonstrate using Enums with interact for dropdowns.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nclass Color(Enum):\n    red = 0\n    green = 1\n    blue = 2\n\ndef h(color: Color):\n    return color\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Box Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_box module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_box\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Python package in development mode\nDESCRIPTION: Command to install the Python package in development mode for local testing and development.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: ToggleButton Model and View Component Specification\nDESCRIPTION: Defines the attributes and properties for a single toggle button widget component. Includes styling options, button states, and display properties.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-4.md#2025-04-16_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                                                              | Default                       | Help                                                   |\n| ----------------------- | --------------------------------------------------------------------------------- | ----------------------------- | ------------------------------------------------------ |\n| `_dom_classes`          | array of string                                                                   | `[]`                          | CSS classes applied to widget DOM element              |\n| `_model_module`         | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                            | `'1.4.0'`                     |\n| `_model_name`           | string                                                                            | `'ToggleButtonModel'`         |\n| `_view_module`          | string                                                                            | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                            | `'1.4.0'`                     |\n| `_view_name`            | string                                                                            | `'ToggleButtonView'`          |\n| `button_style`          | string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the button.               |\n| `description`           | string                                                                            | `''`                          | Description of the control.                            |\n| `description_tooltip`   | `null` or string                                                                  | `null`                        | Tooltip for the description (defaults to description). |\n| `disabled`              | boolean                                                                           | `false`                       | Enable or disable user changes.                        |\n| `icon`                  | string                                                                            | `''`                          | Font-awesome icon.                                     |\n| `layout`                | reference to Layout widget                                                        | reference to new instance     |\n| `style`                 | reference to DescriptionStyle widget                                              | reference to new instance     | Styling customizations                                 |\n| `tooltip`               | string                                                                            | `''`                          | Tooltip caption of the toggle button.                  |\n| `value`                 | boolean                                                                           | `false`                       | Bool value                                             |\n```\n\n----------------------------------------\n\nTITLE: Setting up TOC Tree for IPyWidgets Documentation\nDESCRIPTION: A reStructuredText toctree directive that includes a link to the Widget Low Level documentation with a maximum depth of 1.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/explanation/index.md#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n:maxdepth: 1\n../examples/Widget Low Level\n```\n\n----------------------------------------\n\nTITLE: Importing @jupyter-widgets/base in JavaScript\nDESCRIPTION: Demonstrates three different ways to import the @jupyter-widgets/base module in JavaScript, replacing the previous jupyter-js-widgets imports.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwidgets = require('@jupyter-widgets/base');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['@jupyter-widgets/base'], function (widgets) {});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as widgets from '@jupyter-widgets/base';\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Selection Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_selection module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_selection\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Initializing Log Rows List\nDESCRIPTION: Creates an empty list to store activity log messages that will be displayed in the footer area of the dashboard.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrows = []\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with Pip\nDESCRIPTION: Installs required packages for documentation building using pip and requirements.txt\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_docs.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating AppLayout without Header\nDESCRIPTION: Shows AppLayout configuration with sidebars and center but no header.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nAppLayout(header=None,\n          left_sidebar=left_button,\n          center=center_button,\n          right_sidebar=right_button,\n          footer=None)\n```\n\n----------------------------------------\n\nTITLE: Watching for changes in widget source\nDESCRIPTION: Command to automatically rebuild the widget when source files change.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# watch the source directory in one terminal, automatically rebuilding when needed\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Selection Container Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_selectioncontainer module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_selectioncontainer\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets DocUtils Module in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.docutils module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.docutils\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Collecting System Information with IPython for Issues\nDESCRIPTION: This snippet shows how to generate system information using IPython's sys_info() function, which should be included when submitting issues to help maintainers understand the environment where problems occur.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -c \"import IPython; print(IPython.sys_info())\"\n```\n\n----------------------------------------\n\nTITLE: Text Widget with Complex HTML Description Enabled\nDESCRIPTION: Creates a Text widget with complex HTML including CSS styling and an image reference that will be rendered with styling applied since description_allow_html is True.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_sanitizer.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nText(description=\"<style type='type/css'>SPAN {text-decoration:underline;}</style><img src='jlogo-small.png' title='àçeù' /> <span style='color: orange'>styled</span>\", description_allow_html=True)\n```\n\n----------------------------------------\n\nTITLE: Documenting Jupyter FloatRangeSlider Widget Attributes in Markdown\nDESCRIPTION: A markdown table detailing the attributes of the Jupyter FloatRangeSlider widget, including their types, default values, and descriptions. This widget is used for selecting a range of float values using a slider interface.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v6.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type                                         | Default                   | Help                                                                                          |\n| ----------------------- | -------------------------------------------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `_dom_classes`          | array                                        | `[]`                      | CSS classes applied to widget DOM element                                                     |\n| `_model_module`         | string                                       | `'jupyter-js-widgets'`    |\n| `_model_module_version` | string                                       | `'~2.1.0'`                |\n| `_model_name`           | string                                       | `'FloatSliderModel'`      |\n| `_range`                | boolean                                      | `true`                    | Display a range selector                                                                      |\n| `_view_module`          | string                                       | `'jupyter-js-widgets'`    |\n| `_view_module_version`  | string                                       | `'~2.1.0'`                |\n| `_view_name`            | string                                       | `'FloatSliderView'`       |\n| `continuous_update`     | boolean                                      | `true`                    | Update the value of the widget as the user is sliding the slider.                             |\n| `description`           | string                                       | `''`                      | Description of the control.                                                                   |\n| `disabled`              | boolean                                      | `false`                   | Enable or disable user changes                                                                |\n| `layout`                | reference to Layout widget                   | reference to new instance |\n| `max`                   | number (float)                               | `100.0`                   | Max value                                                                                     |\n| `min`                   | number (float)                               | `0.0`                     | Min value                                                                                     |\n| `msg_throttle`          | number (integer)                             | `1`                       | Maximum number of msgs the front-end can send before receiving an idle msg from the back-end. |\n| `orientation`           | string (one of `'horizontal'`, `'vertical'`) | `'horizontal'`            | Vertical or horizontal.                                                                       |\n| `readout`               | boolean                                      | `true`                    | Display the current value of the slider next to it.                                           |\n| `slider_color`          | `null` or string                             | `null`                    |\n| `step`                  | number (float)                               | `1.0`                     | Minimum step that the value can take (ignored by some views)                                  |\n| `value`                 | array                                        | `[0.0, 1.0]`              | Tuple of (lower, upper) bounds                                                                |\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Interaction Module in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.interaction module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.interaction\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Embedding Widget List Notebook Frame\nDESCRIPTION: HTML iframe element that embeds the Widget List notebook example from the static notebooks directory.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"100%\" height=\"100vw\" src=\"_static/notebooks/?path=examples/Widget%20List.ipynb\">\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleButtonsModel and ToggleButtonsView in Jupyter Widgets\nDESCRIPTION: Specifies the attributes for ToggleButtonsModel and ToggleButtonsView, including CSS classes, module information, button group styling, and interaction properties for multiple toggle buttons.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n### ToggleButtonsModel (@jupyter-widgets/controls, 1.2.0); ToggleButtonsView (@jupyter-widgets/controls, 1.2.0)\n\n| Attribute               | Type                                                                                        | Default                       | Help                                                                    |\n| ----------------------- | ------------------------------------------------------------------------------------------- | ----------------------------- | ----------------------------------------------------------------------- |\n| `_dom_classes`          | array of string                                                                             | `[]`                          | CSS classes applied to widget DOM element                               |\n| `_model_module`         | string                                                                                      | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string                                                                                      | `'1.2.0'`                     |\n| `_model_name`           | string                                                                                      | `'ToggleButtonsModel'`        |\n| `_options_labels`       | array of string                                                                             | `[]`                          | The labels for the options.                                             |\n| `_view_module`          | string                                                                                      | `'@jupyter-widgets/controls'` |\n| `_view_module_version`  | string                                                                                      | `'1.2.0'`                     |\n| `_view_name`            | string                                                                                      | `'ToggleButtonsView'`         |\n| `button_style`          | `null` or string (one of `'primary'`, `'success'`, `'info'`, `'warning'`, `'danger'`, `''`) | `''`                          | Use a predefined styling for the buttons.                               |\n| `description`           | string                                                                                      | `''`                          | Description of the control.                                             |\n| `disabled`              | boolean                                                                                     | `false`                       | Enable or disable user changes                                          |\n| `icons`                 | array of string                                                                             | `[]`                          | Icons names for each button (FontAwesome names without the fa- prefix). |\n| `index`                 | `null` or number (integer)                                                                  | `null`                        | Selected index                                                          |\n| `layout`                | reference to Layout widget                                                                  | reference to new instance     |\n| `style`                 | reference to ToggleButtonsStyle widget                                                      | reference to new instance     |\n| `tooltips`              | array of string                                                                             | `[]`                          | Tooltips for each button.                                               |\n```\n\n----------------------------------------\n\nTITLE: Installing Jupyter Widgets for JupyterLab 3.x\nDESCRIPTION: This command installs the jupyterlab_widgets package to enable ipywidgets support in JupyterLab 3.x.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/python/jupyterlab_widgets/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install jupyterlab_widgets\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for Documentation\nDESCRIPTION: Creates a conda environment named 'ipywidgets_docs' using the environment.yml file\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmamba env update --file docs/environment.yml\n```\n\n----------------------------------------\n\nTITLE: Replacing a Single Widget in GridspecLayout\nDESCRIPTION: Shows how to replace an individual widget in a GridspecLayout by assigning a new widget to its position.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Templates.ipynb#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ngrid[3, 1] = create_expanded_button('New button!!', 'danger')\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Date Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_date module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_date\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Release Statistics Commands\nDESCRIPTION: Git commands to generate release statistics and changelog information.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_release.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit log --merges 6.0.0...main --pretty=oneline\ngit show -s --format=%cd --date=short 6.0.0^{commit}\ngit log --pretty=oneline --no-merges ^6.0.0 main | wc -l\ngit shortlog -s  6.0.0..main --no-merges | cut -c8- | sort -f\ncomm -23 <(git shortlog -s -n 6.0.0..main --no-merges | cut -c8- | sort) <(git shortlog -s -n 6.0.0 --no-merges | cut -c8- | sort) | sort -f\n```\n\n----------------------------------------\n\nTITLE: Displaying a Note in Markdown\nDESCRIPTION: This snippet uses Markdown to create a note block containing information about the documentation version, changelog, and migration guides for ipywidgets 8.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nThis documentation is for `ipywidgets` 8. See the [changelog](./changelog.md) for what is new and the [user migration guide](./user_migration_guides.md) for suggestions about migrating from `ipywidgets` 7.\n\nFor custom widget authors, see the [authoring migration guide](./migration_guides.md) for suggestions about how to update custom widgets to support `ipywidgets` 8.\n\nThe documentation for `ipywidgets` 7 is available at\n[ipywidgets 7 documentation](https://ipywidgets.readthedocs.io/en/7.x).\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Small Image File in Python\nDESCRIPTION: Opens and reads a 50x25 pixel image file into memory for later display.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nwith open('images/gaussian_with_grid_tiny.png', 'rb') as f:\n    im_50_25 = f.read()\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Link Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_link module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_link\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Installing UI Test Dependencies for ipywidgets\nDESCRIPTION: These commands navigate to the ui-tests directory and install the necessary dependencies for running UI tests.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_testing.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd ui-tests\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Play Widget Specification\nDESCRIPTION: Defines a playback control widget with animation timing, range controls, and loop functionality. Implements both model and view from @jupyter-widgets/controls version 2.0.0.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.latest.md#2025-04-16_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                | Type                                 | Default                       | Help                                                  |\n| ------------------------ | ------------------------------------ | ----------------------------- | ----------------------------------------------------- |\n| `_dom_classes`           | array of string                      | `[]`                          | CSS classes applied to widget DOM element             |\n| `_model_module`          | string                               | `'@jupyter-widgets/controls'` |\n| `_model_module_version`  | string                               | `'2.0.0'`                     |\n| `_model_name`            | string                               | `'PlayModel'`                 |\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Upgrading Jupyter Widgets\nDESCRIPTION: Creates a table of contents for documentation on upgrading Jupyter Widgets, including user migration guides and general migration information.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/how-to/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:caption: Upgrading\n:maxdepth: 1\n../user_migration_guides\n../migration_guides\n```\n```\n\n----------------------------------------\n\nTITLE: Setting OpenWeatherMap API Key\nDESCRIPTION: Defines a variable to store the OpenWeatherMap API key, which is needed to access weather map tile layers.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nOWM_API_KEY = \"PASTE_YOUR_OWM_API_KEY_HERE\" #openweathermap API key\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with Conda\nDESCRIPTION: Uses conda to install Python packages needed for building documentation by updating the environment with specifications from the environment.yml file.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/Readme.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nconda env update --file docs/environment.yml\n```\n\n----------------------------------------\n\nTITLE: Displaying a Video Widget\nDESCRIPTION: This snippet displays the previously created Video widget.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Media widgets.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvideo1\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with pip\nDESCRIPTION: Uses pip to install Python packages needed for building documentation from the requirements.txt file and notes that pandoc must be installed separately.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/Readme.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install -r docs/requirements.txt\n# Also install pandoc separately\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Package Dependencies\nDESCRIPTION: Updates to package.json for supporting both IPyWidgets 7 and 8 or exclusively version 8.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- \"@jupyter-widgets/base\": \"^2 || ^3 || ^4\",\n+ \"@jupyter-widgets/base\": \"^2 || ^3 || ^4 || ^5 || ^6\",\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in Markdown\nDESCRIPTION: This snippet uses Markdown to create a table of contents for the documentation, including links to tutorials, how-to guides, explanations, and references.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 2\n\ntutorials/index\nhow-to/index\nexplanation/index\nreference/index\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Jupyter Widgets Controls Package with npm\nDESCRIPTION: This command installs the @jupyter-widgets/controls package using npm. It should be run at the root of the repository. The --save flag adds the package to the project's dependencies.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/controls/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @jupyter-widgets/controls\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes with Jinja Template for ipywidgets\nDESCRIPTION: A Jinja template that formats release notes with version number, release date, milestone link, and a bulleted list of pull requests with their associated issues. The template iterates through pull request data to generate consistent release documentation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/scripts/release_template.txt#2025-04-16_snippet_0\n\nLANGUAGE: jinja\nCODE:\n```\n### [v{{ version }}](https://github.com/jupyter-widgets/ipywidgets/releases/tag/v{{ version }}) ({{ close_date }})\n\nSee the [ipywidgets\n{{ version }}](https://github.com/jupyter-widgets/ipywidgets/milestone/XXXX?closed=1)\nmilestone on GitHub for the full list of pull requests and issues closed.\n\n{%   for pr in pull_requests -%}\n* {{ pr['title'] | capitalize }} ([#{{ pr['number'] }}]({{pr['html_url']}})\n{%-      if pr['loghub_related_issues']|length %}\n{%-          for pri in pr['loghub_related_issues'] -%}\n                 , [#{{ pri['text'] }}]({{ pri['url'] }})\n{%-          endfor -%}\n{%- endif %})\n{%   endfor %}\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally\nDESCRIPTION: Starts a Python web server to serve the built documentation locally\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_docs.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/build/html\npython3 -m http.server -b 127.0,0.1\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment using venv\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_docs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .\n\n# activate the environment\nsource bin/activate\n```\n\n----------------------------------------\n\nTITLE: Widget Creation Message\nDESCRIPTION: Frontend to kernel comm_open message for creating a new widget instance\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id' : 'u-u-i-d',\n  'target_name' : 'jupyter.widget',\n  'data' : {\n    'widget_class': 'some.string'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using interact with a slow function\nDESCRIPTION: Demonstrates the issue of continuous updates with a slow function in interact.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Using Interact.ipynb#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import FloatSlider\ninteract(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Contributing to Jupyter Widgets\nDESCRIPTION: Creates a table of contents for documentation on contributing to the Jupyter Widgets project, including development setup, testing, documentation, and release processes.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/how-to/index.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:caption: Contributing to Jupyter Widgets\n:maxdepth: 1\n../dev_install\n../dev_testing\n../dev_docs\n../contributing\n../dev_release\n```\n```\n\n----------------------------------------\n\nTITLE: Classic Notebook Display Message\nDESCRIPTION: Kernel message for displaying widget in classic Jupyter notebook\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id': 'u-u-i-d',\n  'data': {\n    'method': 'display'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ipywidgets in JupyterLite\nDESCRIPTION: Installs the ipywidgets package using pip in a JupyterLite environment.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget List.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Imports for JupyterLite\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Embedding Custom Jupyter Widgets with RequireJS\nDESCRIPTION: Includes the jupyter-widgets/html-manager package for AMD (RequireJS) to enable embedding of custom widgets in an HTML page.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/migration_guides.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://cdn.jsdelivr.net/npm/@jupyter-widgets/html-manager@*/dist/embed-amd.js\"\n  crossorigin=\"anonymous\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Documenting ipywidgets Controller Widget in Python\nDESCRIPTION: This code snippet uses sphinx autodoc to generate documentation for the ipywidgets.widgets.widget_controller module. It includes all members and special members of the module.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/ipywidgets.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: ipywidgets\n.. automodule:: ipywidgets.widgets.widget_controller\n    :members:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Activating conda environment\nDESCRIPTION: Command to activate the previously created conda environment for widget development.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Custom.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda activate ipyemail\n```\n\n----------------------------------------\n\nTITLE: Starting Insecure Jupyter Notebook Server in Python\nDESCRIPTION: Command to start a Jupyter notebook server with specific configuration options for development purposes. It disables security features and allows cross-origin requests, which is not recommended for production use.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/examples/web3/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m notebook --no-browser --NotebookApp.allow_origin=\"*\" --NotebookApp.disable_check_xsrf=True --NotebookApp.token=''\n```\n\n----------------------------------------\n\nTITLE: Installing IPyWidgets Package\nDESCRIPTION: Installs the ipywidgets package required for using interactive widgets in Jupyter.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Events.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Listing Jupyter Widgets Package Names in Markdown\nDESCRIPTION: A markdown list of Jupyter Widgets package names with links to their respective TypeDoc documentation pages.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/reference/jupyter-widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@jupyter-widgets`\n\n## Packages\n\n- <a href=\"../_static/typedoc/modules/_jupyter_widgets_base.html\"><code>@jupyter-widgets/base</code></a>\n- <a href=\"../_static/typedoc/modules/_jupyter_widgets_base_manager.html\"><code>@jupyter-widgets/base-manager</code></a>\n- <a href=\"../_static/typedoc/modules/_jupyter_widgets_controls.html\"><code>@jupyter-widgets/controls</code></a>\n- <a href=\"../_static/typedoc/modules/_jupyter_widgets_html_manager.html\"><code>@jupyter-widgets/html-manager</code></a>\n- <a href=\"../_static/typedoc/modules/_jupyter_widgets_jupyterlab_manager.html\"><code>@jupyter-widgets/jupyterlab-manager</code></a>\n- <a href=\"../_static/typedoc/modules/_jupyter_widgets_output.html\"><code>@jupyter-widgets/output</code></a>\n```\n\n----------------------------------------\n\nTITLE: Installing ipywidgets with pip\nDESCRIPTION: Command to install the stable version of ipywidgets using pip package manager\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Installing ipywidgets package for JupyterLite\nDESCRIPTION: Uses pip to install the ipywidgets package, which is required for creating interactive widgets in Jupyter notebooks.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Variable Inspector.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Imports for JupyterLite\n%pip install -q ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Version Response Message\nDESCRIPTION: Kernel response containing expected semver range for frontend compatibility\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/messages.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  'comm_id': 'u-u-i-d',\n  'data': {\n    'version': '~2.1.0'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Widget Model Specification\nDESCRIPTION: Commands to regenerate the widget model specification with updated version numbers.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_release.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(cd python/ipywidgets; pip install -e .)\npython ./packages/schema/generate-spec.py -f json-pretty packages/schema/jupyterwidgetmodels.latest.json\npython ./packages/schema/generate-spec.py -f markdown packages/schema/jupyterwidgetmodels.latest.md\n```\n\n----------------------------------------\n\nTITLE: Installing ipywidgets with conda\nDESCRIPTION: Command to install the stable version of ipywidgets using conda package manager from conda-forge channel\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Configuring JupyterLab Extension for Custom Widgets in package.json\nDESCRIPTION: Configuration to add to package.json for custom widget extensions to work with JupyterLab 3. This specifies shared package requirements for @jupyter-widgets/base.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/changelog.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jupyterlab\": {\n    \"sharedPackages\": {\n      \"@jupyter-widgets/base\": {\n        \"bundled\": false,\n        \"singleton\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding IPyWidgets After Changes\nDESCRIPTION: Commands to clean and rebuild the project after making changes to the codebase.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_install.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn clean\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Publishing NPM Packages\nDESCRIPTION: Commands to clean, update, and publish the npm packages using Lerna.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_release.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull origin main\ngit reset --hard origin/main\ngit clean -fdx\nyarn install\nyarn run bump\nyarn publish\n```\n\n----------------------------------------\n\nTITLE: Running UI Tests for ipywidgets\nDESCRIPTION: This command runs the UI tests using Playwright in the ui-tests directory. Additional arguments can be passed to Playwright.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_testing.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Installing IPyWidgets with Pip in User Directory\nDESCRIPTION: Commands for performing an editable install of the Python ipywidgets package into the user site directory using pip.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_install.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd python/ipywidgets\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install --prefix=$(python -m site --user-base) -e .\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Sphinx\nDESCRIPTION: Navigates to the source directory and runs Sphinx to build HTML documentation with specific build parameters.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/Readme.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd docs/source\npython -m sphinx -T -E -b html -d ../build/doctrees -D language=en . ../build/html\n```\n\n----------------------------------------\n\nTITLE: Stripping Notebook Output\nDESCRIPTION: Uses nbstripout to remove output and metadata from Jupyter notebooks before committing\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_docs.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnbstripout \"docs/source/examples/Widget List.ipynb\"\n```\n\n----------------------------------------\n\nTITLE: Activating Conda Environment\nDESCRIPTION: Commands to activate the ipywidgets_docs conda environment on different operating systems\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_docs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda activate ipywidgets_docs   # Linux and OS X\nactivate ipywidgets_docs         # Windows\n```\n\n----------------------------------------\n\nTITLE: Updating Reference Snapshots for UI Tests\nDESCRIPTION: This command updates the reference snapshots for visual regression tests in the local development environment.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_testing.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:update\n```\n\n----------------------------------------\n\nTITLE: ButtonStyle Widget Component Specification\nDESCRIPTION: Defines ButtonStyleModel and StyleView components for customizing button appearance. Includes color and font weight options.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/packages/schema/jupyterwidgetmodels.v7-2.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute               | Type             | Default                       | Help                     |\n| ----------------------- | ---------------- | ----------------------------- | ------------------------ |\n| `_model_module`         | string           | `'@jupyter-widgets/controls'` |\n| `_model_module_version` | string           | `'1.2.0'`                     |\n| `_model_name`           | string           | `'ButtonStyleModel'`          |\n| `_view_module`          | string           | `'@jupyter-widgets/base'`     |\n| `_view_module_version`  | string           | `'1.0.0'`                     |\n| `_view_name`            | string           | `'StyleView'`                 |\n| `button_color`          | `null` or string | `null`                        | Color of the button      |\n| `font_weight`           | string           | `''`                          | Button text font weight. |\n```\n\n----------------------------------------\n\nTITLE: Implementing a Horizontal Carousel with ipywidgets\nDESCRIPTION: Creating a horizontally scrollable carousel using Box layout with overflow properties. The carousel contains 40 button widgets with a fixed height and minimum width, displayed in a row that can be scrolled horizontally.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom ipywidgets import Layout, Button, VBox, Label\n\nitem_layout = Layout(height='100px', min_width='40px')\nitems = [Button(layout=item_layout, description=str(i), button_style='warning') for i in range(40)]\nbox_layout = Layout(overflow='scroll hidden',\n                    border='3px solid black',\n                    width='500px',\n                    height='',\n                    flex_flow='row',\n                    display='flex')\ncarousel = Box(children=items, layout=box_layout)\nVBox([Label('Scroll horizontally:'), carousel])\n```\n\n----------------------------------------\n\nTITLE: Building Sphinx Documentation\nDESCRIPTION: Commands to build the HTML documentation using Sphinx from the source directory\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/dev_docs.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/source\nsphinx-build -T -E -b html -d ../build/doctrees -D language=en . ../build/html\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Widgets with Custom Layout\nDESCRIPTION: Creates a new Text widget and a ToggleButton widget with custom layout properties. The toggle button has a specified width and a solid yellow border on the left side. Both widgets are displayed in an HBox container.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/tests/test_borders.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nt2 = Text(\"text input\")\nb2 = ToggleButton(description=\"toggle button\", layout=Layout(\n    width=\"200px\", border_left=\"2px solid yellow\"\n))\nHBox((t2,b2))\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Widget in Python\nDESCRIPTION: Shows how to create a basic custom widget in Python using DOMWidget as a base class. Includes setting up view specifications and defining a synchronized count attribute.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Low Level.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import DOMWidget\nfrom traitlets import Unicode, Int\n \nclass MyWidget(DOMWidget):\n\t_view_module = Unicode('mywidget').tag(sync=True)\n    _view_module_version = Unicode('0.1.0').tag(sync=True)\n\t_view_name = Unicode('MyWidgetView').tag(sync=True)\n\tcount = Int().tag(sync=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Named Grid Areas in CSS\nDESCRIPTION: Defines a grid template by referencing named grid areas. Allows content to span multiple cells and creates a visual representation of the grid structure.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\ngrid-template-areas: \"<grid-area-name> | . | none | ...\";\n```\n\n----------------------------------------\n\nTITLE: Using grid-area Property in CSS\nDESCRIPTION: Demonstrates the use of the grid-area property to name an item or as a shorthand for grid-row-start, grid-column-start, grid-row-end, and grid-column-end.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Widget Layout.ipynb#2025-04-16_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.item {\n  grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.item-d {\n  grid-area: header\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.item-d {\n  grid-area: 1 / col4-start / last-line / 6\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Coordinate Arrays\nDESCRIPTION: Flattens the X and Y coordinate arrays to make them easier to use for data point generation and manipulation.\nSOURCE: https://github.com/jupyter-widgets/ipywidgets/blob/main/docs/source/examples/Layout Example.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nX = X.flatten()\nY = Y.flatten()\n```"
  }
]