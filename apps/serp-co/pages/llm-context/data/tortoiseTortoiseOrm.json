[
  {
    "owner": "tortoise",
    "repo": "tortoise-orm",
    "content": "TITLE: Working with Tortoise ORM Models and Relationships\nDESCRIPTION: Comprehensive example of using Tortoise ORM to create objects, manage relationships, query with filters, and use prefetching for optimized data retrieval. Demonstrates both single and many-to-many relationship handling.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/getting_started.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    await Tortoise.init(\n        db_url='sqlite://db.sqlite3',\n        modules={'models': ['app.models']}\n    )\n    await Tortoise.generate_schemas()\n\n    # Creating an instance with .save()\n    tournament = Tournament(name='New Tournament')\n    await tournament.save()\n\n    # Or with .create()\n    await Event.create(name='Without participants', tournament=tournament)\n    event = await Event.create(name='Test', tournament=tournament)\n    participants = []\n    for i in range(2):\n        team = await Team.create(name='Team {}'.format(i + 1))\n        participants.append(team)\n\n    # Many to Many Relationship management is quite straightforward\n    # (there are .remove(...) and .clear() too)\n    await event.participants.add(*participants)\n\n    # Iterate over related entities with the async context manager\n    async for team in event.participants:\n        print(team.name)\n\n    # The related entities are cached and can be iterated in the synchronous way afterwards\n    for team in event.participants:\n        pass\n\n    # Use prefetch_related to fetch related objects\n    selected_events = await Event.filter(\n        participants=participants[0].id\n    ).prefetch_related('participants', 'tournament')\n    for event in selected_events:\n        print(event.tournament.name)\n        print([t.name for t in event.participants])\n\n    # Prefetch multiple levels of related entities\n    await Team.all().prefetch_related('events__tournament')\n\n    # Filter and order by related models too\n    await Tournament.filter(\n        events__name__in=['Test', 'Prod']\n    ).order_by('-events__participants__name').distinct()\n\nrun_async(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Tortoise ORM with SQLite Database\nDESCRIPTION: Demonstrates how to initialize Tortoise ORM with a SQLite database connection and generate database schemas. Uses the db_url parameter to specify SQLite connection and modules parameter to define model locations. Includes schema generation which should be run once during initial setup.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/setup.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import Tortoise\n\nasync def init():\n    # Here we create a SQLite DB using file \"db.sqlite3\"\n    #  also specify the app name of \"models\"\n    #  which contain models from \"app.models\"\n    await Tortoise.init(\n        db_url='sqlite://db.sqlite3',\n        modules={'models': ['app.models']}\n    )\n    # Generate the schema\n    await Tortoise.generate_schemas()\n```\n\n----------------------------------------\n\nTITLE: Using Tortoise ORM Models (Python)\nDESCRIPTION: Demonstrates various operations with Tortoise ORM models, including creating instances, managing relationships, querying with filters and prefetch_related, and working with many-to-many relationships.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    await Tortoise.init(\n        db_url='sqlite://db.sqlite3',\n        modules={'models': ['app.models']}\n    )\n    await Tortoise.generate_schemas()\n\n    # Creating an instance with .save()\n    tournament = Tournament(name='New Tournament')\n    await tournament.save()\n\n    # Or with .create()\n    await Event.create(name='Without participants', tournament=tournament)\n    event = await Event.create(name='Test', tournament=tournament)\n    participants = []\n    for i in range(2):\n        team = await Team.create(name='Team {}'.format(i + 1))\n        participants.append(team)\n\n    # Many to Many Relationship management is quite straightforward\n    # (there are .remove(...) and .clear() too)\n    await event.participants.add(*participants)\n\n    # Iterate over related entities with the async context manager\n    async for team in event.participants:\n        print(team.name)\n\n    # The related entities are cached and can be iterated in the synchronous way afterwards\n    for team in event.participants:\n        pass\n\n    # Use prefetch_related to fetch related objects\n    selected_events = await Event.filter(\n        participants=participants[0].id\n    ).prefetch_related('participants', 'tournament')\n    for event in selected_events:\n        print(event.tournament.name)\n        print([t.name for t in event.participants])\n\n    # Prefetch multiple levels of related entities\n    await Team.all().prefetch_related('events__tournament')\n\n    # Filter and order by related models too\n    await Tournament.filter(\n        events__name__in=['Test', 'Prod']\n    ).order_by('-events__participants__name').distinct()\n\nrun_async(main())\n```\n\n----------------------------------------\n\nTITLE: Defining Models in Tortoise ORM\nDESCRIPTION: Example of defining models in Tortoise ORM by inheriting from Model class. Demonstrates creating Tournament, Event, and Team models with various field types and relationships like ForeignKey and ManyToMany.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/getting_started.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.models import Model\nfrom tortoise import fields\n\nclass Tournament(Model):\n    # Defining `id` field is optional, it will be defined automatically\n    # if you haven't done it yourself\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=255)\n\n\nclass Event(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=255)\n    # References to other models are defined in format\n    # \"{app_name}.{model_name}\" - where {app_name} is defined in the tortoise config\n    tournament = fields.ForeignKeyField('models.Tournament', related_name='events')\n    participants = fields.ManyToManyField('models.Team', related_name='events', through='event_team')\n\n\nclass Team(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=255)\n```\n\n----------------------------------------\n\nTITLE: Defining Models in Tortoise ORM (Python)\nDESCRIPTION: Demonstrates how to define database models by inheriting from tortoise.models.Model. It shows the creation of Tournament, Event, and Team models with various field types including foreign keys and many-to-many relationships.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.models import Model\nfrom tortoise import fields\n\nclass Tournament(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.TextField()\n\n\nclass Event(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.TextField()\n    tournament = fields.ForeignKeyField('models.Tournament', related_name='events')\n    participants = fields.ManyToManyField('models.Team', related_name='events', through='event_team')\n\n\nclass Team(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.TextField()\n```\n\n----------------------------------------\n\nTITLE: Different primary key field types in Tortoise ORM\nDESCRIPTION: Shows examples of different field types that can be used as primary keys, including IntField, CharField, and UUIDField.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nid = fields.IntField(primary_key=True)\n\nchecksum = fields.CharField(primary_key=True)\n\nguid = fields.UUIDField(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Using Nested Transactions with Savepoints in Tortoise ORM\nDESCRIPTION: This example demonstrates how to use nested transactions with savepoints in Tortoise ORM. The outer transaction will commit changes on successful completion, while inner transactions create savepoints that can be rolled back to if exceptions occur, without affecting the outer transaction.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/transactions.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# this block will commit changes on exit\nasync with in_transaction():\n    await MyModel.create(name='foo')\n    try:\n        # this block will create a savepoint and rollback to it if an exception is raised\n        async with in_transaction():\n            await MyModel.create(name='bar')\n            # this will rollback to the savepoint, meaning that\n            # the 'bar' record will not be created, however,\n            # the 'foo' record will be created\n            raise Exception()\n    except Exception:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Initializing Tortoise ORM and Generating Schema\nDESCRIPTION: Example of initializing Tortoise ORM with a SQLite database connection and generating the database schema. This demonstrates the basic setup needed before working with models.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/getting_started.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import Tortoise, run_async\n\nasync def main():\n    # Here we connect to a SQLite DB file.\n    # also specify the app name of \"models\"\n    # which contain models from \"app.models\n    await Tortoise.init(\n        db_url='sqlite://db.sqlite3',\n        modules={'models': ['app.models']}\n    )\n    await Tortoise.generate_schemas()\n\nrun_async(main())\n```\n\n----------------------------------------\n\nTITLE: Creating and Serializing Tortoise ORM Objects with Pydantic\nDESCRIPTION: Example showing how to create Tournament and Event objects and serialize them using Pydantic integration. Demonstrates relationship handling and computed fields like name_length and events_num.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Create objects\ntournament = await Tournament.create(name=\"New Tournament\")\nawait Event.create(name=\"Event 1\", tournament=tournament)\nawait Event.create(name=\"Event 2\", tournament=tournament)\n\n# Serialise Tournament\ntourpy = await Tournament_Pydantic.from_tortoise_orm(tournament)\n\n>>> print(tourpy.model_dump_json())\n{\n    \"id\": 1,\n    \"name\": \"New Tournament\",\n    \"events\": [\n        {\n            \"id\": 1,\n            \"name\": \"Event 1\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Event 2\"\n        }\n    ],\n    \"name_length\": 14,\n    \"events_num\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Database Operations with Tortoise ORM in Python\nDESCRIPTION: This snippet shows various database operations using Tortoise ORM, including creating records, searching with filters, and performing complex aggregation queries with case statements and grouping.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Creating a record\nawait Tournament.create(name='Another Tournament')\n\n# Searching for a record\ntour = await Tournament.filter(name__contains='Another').first()\nprint(tour.name)\n\n# Count groups of records with a complex condition\nawait Tournament.annotate(\n    name_prefix=Case(\n        When(name__startswith=\"One\", then=\"1\"),\n        When(name__startswith=\"Two\", then=\"2\"),\n        default=\"0\",\n    ),\n).annotate(\n    count=Count(F(\"name_prefix\")),\n).group_by(\n    \"name_prefix\"\n).values(\"name_prefix\", \"count\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Tortoise ORM (Python)\nDESCRIPTION: Shows how to initialize Tortoise ORM, establish database connections, and generate schema. This example uses SQLite and is intended for development purposes.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import Tortoise, run_async\n\nasync def init():\n    # Here we connect to a SQLite DB file.\n    # also specify the app name of \"models\"\n    # which contain models from \"app.models\"\n    await Tortoise.init(\n        db_url='sqlite://db.sqlite3',\n        modules={'models': ['app.models']}\n    )\n    # Generate the schema\n    await Tortoise.generate_schemas()\n\nrun_async(main())\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Keys in Tortoise-ORM Models\nDESCRIPTION: Illustrates different ways to define primary keys in Tortoise-ORM models. Shows how to create primary keys of different field types by setting the pk parameter to True.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nid = fields.IntField(pk=True)\n\nchecksum = fields.CharField(pk=True)\n\nguid = fields.UUIDField(pk=True)\n```\n\n----------------------------------------\n\nTITLE: Defining basic Tortoise ORM models with relationships\nDESCRIPTION: Demonstrates how to define multiple related models in Tortoise ORM with various field types including primary keys, foreign keys, and many-to-many relationships.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Tournament(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.TextField()\n    created = fields.DatetimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Event(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.TextField()\n    tournament = fields.ForeignKeyField('models.Tournament', related_name='events')\n    participants = fields.ManyToManyField('models.Team', related_name='events', through='event_team')\n    modified = fields.DatetimeField(auto_now=True)\n    prize = fields.DecimalField(max_digits=10, decimal_places=2, null=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Team(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.TextField()\n\n    def __str__(self):\n        return self.name\n```\n\n----------------------------------------\n\nTITLE: Model inheritance and mixins in Tortoise ORM\nDESCRIPTION: Demonstrates how to use inheritance and mixins to share fields between models, including abstract base models and non-model mixins for common fields.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import fields\nfrom tortoise.models import Model\n\nclass TimestampMixin():\n    created_at = fields.DatetimeField(null=True, auto_now_add=True)\n    modified_at = fields.DatetimeField(null=True, auto_now=True)\n\nclass NameMixin():\n    name = fields.CharField(40, unique=True)\n\nclass MyAbstractBaseModel(Model):\n    id = fields.IntField(primary_key=True)\n\n    class Meta:\n        abstract = True\n\nclass UserModel(TimestampMixin, MyAbstractBaseModel):\n    # Overriding the id definition\n    # from MyAbstractBaseModel\n    id = fields.UUIDField(primary_key=True)\n\n    # Adding additional fields\n    first_name = fields.CharField(20, null=True)\n\n    class Meta:\n        table = \"user\"\n\n\nclass RoleModel(TimestampMixin, NameMixin, MyAbstractBaseModel):\n\n    class Meta:\n        table = \"role\"\n```\n\n----------------------------------------\n\nTITLE: Creating an abstract model in Tortoise ORM\nDESCRIPTION: Demonstrates how to create an abstract model that can be used as a base class for other models but won't create a database table itself. Uses the Meta class with abstract=True.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass AbstractTournament(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.TextField()\n    created = fields.DatetimeField(auto_now_add=True)\n\n    class Meta:\n        abstract = True\n\n    def __str__(self):\n        return self.name\n```\n\n----------------------------------------\n\nTITLE: Model Definitions with Type Hints\nDESCRIPTION: Complete example showing model definitions with proper type hints for relationships, improving IDE autocomplete support.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_21\n\nLANGUAGE: python3\nCODE:\n```\nfrom tortoise.models import Model\nfrom tortoise import fields\n\n\nclass Tournament(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=255)\n\n    events: fields.ReverseRelation[\"Event\"]\n\n    def __str__(self):\n        return self.name\n\n\nclass Event(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=255)\n    tournament: fields.ForeignKeyRelation[Tournament] = fields.ForeignKeyField(\n        \"models.Tournament\", related_name=\"events\"\n    )\n    participants: fields.ManyToManyRelation[\"Team\"] = fields.ManyToManyField(\n        \"models.Team\", related_name=\"events\", through=\"event_team\"\n    )\n\n    def __str__(self):\n        return self.name\n\n\nclass Team(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=255)\n\n    events: fields.ManyToManyRelation[Event]\n\n    def __str__(self):\n        return self.name\n```\n\n----------------------------------------\n\nTITLE: Initializing Tortoise ORM with Configuration in Python\nDESCRIPTION: Demonstrates how to initialize Tortoise ORM with a SQLite database and specify application models. This code shows the new initialization pattern that replaced the previous model discovery approach.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nasync def init():\n    # Here we create a SQLite DB using file \"db.sqlite3\"\n    #  also specify the app name of \"models\"\n    #  which contain models from \"app.models\"\n    await Tortoise.init(\n        db_url='sqlite://db.sqlite3',\n        modules={'models': ['app.models']}\n    )\n    # Generate the schema\n    await Tortoise.generate_schemas()\n```\n\n----------------------------------------\n\nTITLE: Prefetching related models in Tortoise ORM\nDESCRIPTION: Demonstrates how to fetch related models using the prefetch_related method, using a ForeignKeyField's related_name to access related objects.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nawait Tournament.first().prefetch_related(\"events\")\n```\n\n----------------------------------------\n\nTITLE: Querying Events Using Q Expressions in Python\nDESCRIPTION: Demonstrates how to use Q objects to construct complex queries in Tortoise ORM. This example shows filtering events with specific names using OR conditions.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/expressions.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfound_events = await Event.filter(\n    Q(name='Event 1') | Q(name='Event 2')\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom EnumField by Extending CharField\nDESCRIPTION: Demonstrates how to create a custom field by subclassing existing fields. This example creates an EnumField that extends CharField to store and query Enum types, converting between Enum objects and their string representations.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/fields.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\nfrom typing import Type\n\nfrom tortoise import ConfigurationError\nfrom tortoise.fields import CharField\n\n\nclass EnumField(CharField):\n    \"\"\"\n    An example extension to CharField that serializes Enums\n    to and from a str representation in the DB.\n    \"\"\"\n\n    def __init__(self, enum_type: Type[Enum], **kwargs):\n        super().__init__(128, **kwargs)\n        if not issubclass(enum_type, Enum):\n            raise ConfigurationError(\"{} is not a subclass of Enum!\".format(enum_type))\n        self._enum_type = enum_type\n\n    def to_db_value(self, value: Enum, instance) -> str:\n        return value.value\n\n    def to_python_value(self, value: str) -> Enum:\n        try:\n            return self._enum_type(value)\n        except Exception:\n            raise ValueError(\n                \"Database value {} does not exist on Enum {}.\".format(value, self._enum_type)\n            )\n```\n\n----------------------------------------\n\nTITLE: Complex Prefetching in Tortoise ORM\nDESCRIPTION: Illustrates how to use the Prefetch object for complex prefetching in Tortoise ORM. This example demonstrates fetching only certain related records by applying a filter to the prefetch query.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntournament_with_filtered = await Tournament.all().prefetch_related(\n    Prefetch('events', queryset=Event.filter(name='First'))\n).first()\n```\n\n----------------------------------------\n\nTITLE: Filtering with POSIX Regex in Tortoise ORM for PostgreSQL, MySQL, and SQLite\nDESCRIPTION: Demonstrates how to use POSIX regular expressions for filtering in Tortoise ORM across different database systems. It shows both case-sensitive and case-insensitive regex comparisons using the posix_regex and iposix_regex operators.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass DemoModel:\n  demo_text = fields.TextField()\n\nawait DemoModel.create(demo_text=\"Hello World\")\nobj = await DemoModel.filter(demo_text__posix_regex=\"^Hello World$\").first()\nobj = await DemoModel.filter(demo_text__iposix_regex=\"^hello world$\").first()\n```\n\n----------------------------------------\n\nTITLE: Filtering by Related Entity Fields in Tortoise ORM\nDESCRIPTION: Demonstrates how to filter records based on related entity fields. Shows three different examples of filtering across relationships.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# getting all events, which tournament name is \"World Cup\"\nawait Event.filter(tournament__name='World Cup')\n\n# Gets all teams participating in events with ids 1, 2, 3\nawait Team.filter(events__id__in=[1,2,3])\n\n# Gets all tournaments where teams with \"junior\" in their name are participating\nawait Tournament.filter(event__participants__name__icontains='junior').distinct()\n```\n\n----------------------------------------\n\nTITLE: JSON Field Filtering in Tortoise ORM\nDESCRIPTION: Shows advanced JSON field filtering using contains, contained_by, and filter modifiers. Demonstrates various ways to query JSON data structures in PostgreSQL and MySQL.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass JSONModel:\n    data = fields.JSONField[list]()\n\nawait JSONModel.create(data=[\"text\", 3, {\"msg\": \"msg2\"}])\nobj = await JSONModel.filter(data__contains=[{\"msg\": \"msg2\"}]).first()\n\nawait JSONModel.create(data=[\"text\"])\nawait JSONModel.create(data=[\"tortoise\", \"msg\"])\nawait JSONModel.create(data=[\"tortoise\"])\n\nobjects = await JSONModel.filter(data__contained_by=[\"text\", \"tortoise\", \"msg\"])\n\nawait JSONModel.create(data={\"breed\": \"labrador\",\n                             \"owner\": {\n                                 \"name\": \"Boby\",\n                                 \"last\": None,\n                                 \"other_pets\": [\n                                     {\n                                         \"name\": \"Fishy\",\n                                     }\n                                 ],\n                             },\n                         })\n\nobj1 = await JSONModel.filter(data__filter={\"breed\": \"labrador\"}).first()\nobj2 = await JSONModel.filter(data__filter={\"owner__name\": \"Boby\"}).first()\nobj3 = await JSONModel.filter(data__filter={\"owner__other_pets__0__name\": \"Fishy\"}).first()\nobj4 = await JSONModel.filter(data__filter={\"breed__not\": \"a\"}).first()\nobj5 = await JSONModel.filter(data__filter={\"owner__name__isnull\": True}).first()\nobj6 = await JSONModel.filter(data__filter={\"owner__last__not_isnull\": False}).first()\n```\n\n----------------------------------------\n\nTITLE: Generating Database Schema with Tortoise ORM\nDESCRIPTION: Method to generate database schemas for Tortoise ORM models. The safe parameter can be set to True to only create tables if they don't already exist.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/schema.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait Tortoise.generate_schemas(safe=True)\n```\n\n----------------------------------------\n\nTITLE: Closing Tortoise ORM Connections\nDESCRIPTION: Shows how to properly close Tortoise ORM database connections to prevent asyncio connection leaks. This cleanup step is crucial for proper application shutdown and resource management.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/setup.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait Tortoise.close_connections()\n```\n\n----------------------------------------\n\nTITLE: Creating a Pydantic Model from Tortoise Model\nDESCRIPTION: Generating a Pydantic model from a Tortoise model using the pydantic_model_creator function. This creates a Pydantic model that can be used for schema representation and serialization of Tortoise model instances.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.contrib.pydantic import pydantic_model_creator\n\nTournament_Pydantic = pydantic_model_creator(Tournament)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Manager in Tortoise ORM Model\nDESCRIPTION: Shows how to create a custom StatusManager that filters queryset results and implement it in a model. Also demonstrates how to define multiple managers including a default manager and additional named managers.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/manager.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.manager import Manager\n\nclass StatusManager(Manager):\n    def get_queryset(self):\n        return super(StatusManager, self).get_queryset().filter(status=1)\n\n\nclass ManagerModel(Model):\n    status = fields.IntField(default=0)\n    all_objects = Manager()\n\n    class Meta:\n        manager = StatusManager()\n```\n\n----------------------------------------\n\nTITLE: Serializing Event Objects with Tournament Relationship in Python\nDESCRIPTION: Shows how to serialize an Event object to JSON in an async context, including its relationship to a Tournament. The serialized output includes the full Tournament object data.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\neventpy = await Event_Pydantic.from_tortoise_orm(event)\n\n>>> print(eventpy.model_dump_json())\n{\n    \"id\": 1,\n    \"name\": \"The Event\",\n    \"created_at\": \"2020-03-02T07:23:27.732492\",\n    \"tournament\": {\n        \"id\": 1,\n        \"name\": \"New Tournament\",\n        \"created_at\": \"2020-03-02T07:23:27.731656\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Related Objects in Tortoise ORM\nDESCRIPTION: Shows how to filter related objects for a specific model instance. Returns a QuerySet with a predefined filter for related objects.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait team.events.filter(name='First')\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with RawSQL in Tortoise ORM\nDESCRIPTION: Shows how to use RawSQL to execute raw SQL queries within filter() and annotate() operations. This provides maximum flexibility for complex database operations.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/expressions.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait Tournament.filter(pk=1).annotate(count=RawSQL('count(*)')).values(\"count\")\nawait Tournament.filter(pk=1).annotate(idp=RawSQL('id + 1')).filter(idp=2).values(\"idp\")\nawait Tournament.filter(pk=RawSQL(\"id + 1\"))\n```\n\n----------------------------------------\n\nTITLE: Nesting Q Expressions for Complex Queries in Python\nDESCRIPTION: Shows how to nest Q objects to create equivalent complex queries. This example demonstrates an alternative way to filter events with specific names using nested Q objects.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/expressions.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfound_events = await Event.filter(\n    Q(Q(name='Event 1'), Q(name='Event 2'), join_type=\"OR\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating objects with foreign keys in Tortoise ORM\nDESCRIPTION: Shows different approaches to specify foreign key values when creating model instances, either by passing the object directly or by using the database backing field.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nawait SomeModel.create(tournament=the_tournament)\n# or\nsomemodel.tournament=the_tournament\n```\n\n----------------------------------------\n\nTITLE: Using Annotations and Database Functions in Tortoise ORM\nDESCRIPTION: Shows how to use the annotate() method with various database functions like Count, Trim, Lower, Upper, and Coalesce to perform aggregations and transformations in queries.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.functions import Count, Trim, Lower, Upper, Coalesce\n\n# This query will fetch all tournaments with 10 or more events, and will\n# populate filed `.events_count` on instances with corresponding value\nawait Tournament.annotate(events_count=Count('events')).filter(events_count__gte=10)\nawait Tournament.annotate(clean_name=Trim('name')).filter(clean_name='tournament')\nawait Tournament.annotate(name_upper=Upper('name')).filter(name_upper='TOURNAMENT')\nawait Tournament.annotate(name_lower=Lower('name')).filter(name_lower='tournament')\nawait Tournament.annotate(desc_clean=Coalesce('desc', '')).filter(desc_clean='')\n```\n\n----------------------------------------\n\nTITLE: Async Many-to-Many Relationship Query\nDESCRIPTION: Shows how to asynchronously fetch all related participants using a Many-to-Many relationship.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_18\n\nLANGUAGE: python3\nCODE:\n```\nparticipants = await tournament.participants.all()\n```\n\n----------------------------------------\n\nTITLE: Advanced Filtering and Ordering in Tortoise ORM\nDESCRIPTION: Shows how to filter by related model fields and order by nested relationships in Tortoise ORM. This example demonstrates filtering tournaments by event names and ordering by participant names.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nawait Tournament.filter(\n    events__name__in=['1', '3']\n).order_by('-events__participants__name').distinct()\n```\n\n----------------------------------------\n\nTITLE: Using NOT Operation with Q Expressions in Python\nDESCRIPTION: Illustrates how to use the negation operator (~) with Q objects to create NOT conditions in queries. This example filters events that do not have the name '3'.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/expressions.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnot_third_events = await Event.filter(~Q(name='3'))\n```\n\n----------------------------------------\n\nTITLE: Using Case-When Expressions for Conditional Logic in Tortoise ORM\nDESCRIPTION: Demonstrates the use of Case-When expressions to construct conditional logic using CASE WHEN ... THEN ... ELSE ... END SQL statements. This example categorizes IntModel instances based on their 'intnum' value.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/expressions.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresults = await IntModel.all().annotate(\n    category=Case(\n        When(intnum__gte=8, then='big'),\n        When(intnum__lte=2, then='small'),\n        default='middle'\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Async Iteration Over Many-to-Many Relationship\nDESCRIPTION: Demonstrates how to asynchronously iterate over participants in a Many-to-Many relationship.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_19\n\nLANGUAGE: python3\nCODE:\n```\nasync for participant in tournament.participants:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using MySQL FullTextIndex and SpatialIndex in Tortoise ORM Model\nDESCRIPTION: Demonstrates how to apply specialized MySQL indexes in a Tortoise ORM model by defining them in the Meta class. Shows implementation of FullTextIndex with a custom parser and SpatialIndex for geometry data.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/indexes.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import Model, fields\nfrom tortoise.contrib.mysql.fields import GeometryField\nfrom tortoise.contrib.mysql.indexes import FullTextIndex, SpatialIndex\n\n\nclass Index(Model):\n    full_text = fields.TextField()\n    geometry = GeometryField()\n\n    class Meta:\n        indexes = [\n            FullTextIndex(fields={\"full_text\"}, parser_name=\"ngram\"),\n            SpatialIndex(fields={\"geometry\"}),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Updating User Balance Using F Expressions in Python\nDESCRIPTION: Demonstrates the use of F expressions for atomic field operations in Tortoise ORM. This example shows how to update a user's balance without loading the value into Python memory.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/expressions.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.expressions import F\n\nawait User.filter(id=1).update(balance = F('balance') - 10)\n\nawait User.filter(id=1).update(balance = F('balance') + F('award'), award = 0)\n\n# Using F expressions with .save()\nuser = await User.get(id=1)\nuser.balance = F('balance') - 10\nawait user.save(update_fields=['balance'])\n```\n\n----------------------------------------\n\nTITLE: Querying with Raw SQL in Tortoise ORM\nDESCRIPTION: Using the Model.raw() method to execute raw SQL queries directly against the database. This allows for complex queries that might not be expressible through the standard ORM interface.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nModel.raw(\"SELECT * FROM table WHERE condition\")\n```\n\n----------------------------------------\n\nTITLE: Using F Expression in Tortoise ORM Annotations\nDESCRIPTION: F expressions allow referring to model field values directly in database queries. This example shows using F expressions with annotations to create computations at the database level.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nqueryset.annotate(field_expression=F(\"field_name\"))\n```\n\n----------------------------------------\n\nTITLE: Serializing a Tortoise Model Instance with Pydantic\nDESCRIPTION: Converting a Tortoise ORM model instance to a Pydantic model and serializing it. This shows how to create a Tournament instance and then convert it to a Pydantic object that can be exported as a dictionary or JSON.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntournament = await Tournament.create(name=\"New Tournament\")\ntourpy = await Tournament_Pydantic.from_tortoise_orm(tournament)\n```\n\n----------------------------------------\n\nTITLE: Defining Model Fields in Tortoise ORM\nDESCRIPTION: Demonstrates how to define fields as properties of a Model class object. The example shows a Tournament model with integer ID (primary key) and character name fields.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/fields.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.models import Model\nfrom tortoise import fields\n\nclass Tournament(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=255)\n```\n\n----------------------------------------\n\nTITLE: Defining Tortoise Models with PydanticMeta Configuration in Python\nDESCRIPTION: Shows how to define Tortoise ORM models with computed properties and PydanticMeta configuration. The PydanticMeta class controls which fields are included/excluded and adds computed fields to the Pydantic model.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Tournament(Model):\n    \"\"\"\n    This references a Tournament\n    \"\"\"\n\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=100)\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    # It is useful to define the reverse relations manually so that type checking\n    #  and auto completion work\n    events: fields.ReverseRelation[\"Event\"]\n\n    def name_length(self) -> int:\n        \"\"\"\n        Computed length of name\n        \"\"\"\n        return len(self.name)\n\n    def events_num(self) -> int:\n        \"\"\"\n        Computed team size\n        \"\"\"\n        try:\n            return len(self.events)\n        except NoValuesFetched:\n            return -1\n\n    class PydanticMeta:\n        # Let's exclude the created timestamp\n        exclude = (\"created_at\",)\n        # Let's include two callables as computed columns\n        computed = (\"name_length\", \"events_num\")\n\n\nclass Event(Model):\n    \"\"\"\n    This references an Event in a Tournament\n    \"\"\"\n\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=100)\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    tournament = fields.ForeignKeyField(\n        \"models.Tournament\", related_name=\"events\", description=\"The Tournament this happens in\"\n    )\n\n    class Meta:\n        ordering = [\"name\"]\n\n    class PydanticMeta:\n        exclude = (\"created_at\",)\n```\n\n----------------------------------------\n\nTITLE: Using Validators with Tortoise ORM Model Fields\nDESCRIPTION: Demonstrates how to use validators with Tortoise ORM model fields. It shows a CharField with a RegexValidator to ensure the field value matches a specific pattern.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/validators.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ValidatorModel(Model):\n    regex = fields.CharField(max_length=100, null=True, validators=[RegexValidator(\"abc.+\", re.I)])\n\n# oh no, this will raise ValidationError!\nawait ValidatorModel.create(regex=\"ccc\")\n# this is great!\nawait ValidatorModel.create(regex=\"abcd\")\n```\n\n----------------------------------------\n\nTITLE: Querying with Nested Values in Tortoise ORM\nDESCRIPTION: Shows how to perform nested queries using the values() and values_list() methods in Tortoise ORM. This allows retrieving specific fields including those from related models in a single query.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nresult = await Event.filter(id=event.id).values('id', 'name', tournament='tournament__name')\nresult = await Event.filter(id=event.id).values_list('id', 'participants__name')\n```\n\n----------------------------------------\n\nTITLE: Setting foreign keys directly with IDs in Tortoise ORM\nDESCRIPTION: Shows how to set a foreign key value by directly accessing the database backing field with the _id suffix, which can be more efficient when the related object isn't needed.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nawait SomeModel.create(tournament_id=the_tournament.pk)\n# or\nsomemodel.tournament_id=the_tournament.pk\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Serialization Methods\nDESCRIPTION: Demonstrating Pydantic's serialization methods on a converted Tortoise model. Shows how to use model_dump() to get a dictionary representation and model_dump_json() to get a JSON string representation of the model.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> print(tourpy.model_dump())\n{\n    'id': 1,\n    'name': 'New Tournament',\n    'created_at': datetime.datetime(2020, 3, 1, 20, 28, 9, 346808)\n}\n>>> print(tourpy.model_dump_json())\n{\n    \"id\": 1,\n    \"name\": \"New Tournament\",\n    \"created_at\": \"2020-03-01T20:28:09.346808\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Select Related in Tortoise ORM\nDESCRIPTION: The select_related() method optimizes queries by fetching related objects in a single database query. This reduces the number of database queries needed when accessing related objects.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nqueryset.select_related(\"related_field\")\n```\n\n----------------------------------------\n\nTITLE: Using Nested Queries with Values Method in Tortoise ORM\nDESCRIPTION: Examples of using nested queries with the values() and values_list() methods in Tortoise ORM. This allows fetching related model fields in a single query, introduced in version 0.9.0.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresult = await Event.filter(id=event.id).values('id', 'name', tournament='tournament__name')\nresult = await Event.filter(id=event.id).values_list('id', 'participants__name')\n```\n\n----------------------------------------\n\nTITLE: Tortoise-ORM Configuration with Aerich\nDESCRIPTION: Example configuration for Tortoise-ORM including Aerich models, showing database connection and app settings.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTORTOISE_ORM = {\n    \"connections\": {\"default\": \"mysql://root:123456@127.0.0.1:3306/test\"},\n    \"apps\": {\n        \"models\": {\n            \"models\": [\"tests.models\", \"aerich.models\"],\n            \"default_connection\": \"default\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Sync Usage of Foreign Key Relationship\nDESCRIPTION: Shows how to use Foreign Key relationships synchronously after fetching related data, including common operations like listing, length checking, and indexing.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_16\n\nLANGUAGE: python3\nCODE:\n```\nawait tournament.fetch_related('events')\nevents = list(tournament.events)\neventlen = len(tournament.events)\nif SomeEvent in tournament.events:\n    ...\nif tournament.events:\n    ...\nfirstevent = tournament.events[0]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Finalizing Tortoise ORM Test Environment\nDESCRIPTION: Shows how to properly set up and tear down the test environment for Tortoise ORM tests using the initializer and finalizer functions.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/unittest.rst#2025-04-20_snippet_1\n\nLANGUAGE: python3\nCODE:\n```\nfrom tortoise.contrib.test import initializer, finalizer\n\n# In setup\ninitializer(['module.a', 'module.b.c'])\n# With optional db_url, app_label and loop parameters\ninitializer(['module.a', 'module.b.c'], db_url='...', app_label=\"someapp\", loop=loop)\n# Or env-var driven → See Green test runner section below.\nenv_initializer()\n\n# In teardown\nfinalizer()\n```\n\n----------------------------------------\n\nTITLE: Excluding Teams by Name Pattern in Tortoise ORM\nDESCRIPTION: Shows how to use the exclude method to filter out records matching certain criteria. Returns all teams that don't have 'junior' in their name (case-insensitive).\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait Team.exclude(name__icontains='junior')\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Tortoise Model\nDESCRIPTION: Creating a simple Tortoise ORM model class that will be used as the basis for Pydantic model generation. This model represents a Tournament entity with basic fields including an ID, name, and created_at timestamp.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import fields\nfrom tortoise.models import Model\n\nclass Tournament(Model):\n    \"\"\"\n    This references a Tournament\n    \"\"\"\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=100)\n    #: The date-time the Tournament record was created at\n    created_at = fields.DatetimeField(auto_now_add=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Tortoise Models with Relationships\nDESCRIPTION: Creating Tortoise ORM models with a foreign key relationship. This example defines Tournament and Event models where Event has a foreign key relationship to Tournament, demonstrating how relationships are handled in serialization.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import fields\nfrom tortoise.models import Model\n\nclass Tournament(Model):\n    \"\"\"\n    This references a Tournament\n    \"\"\"\n\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=100)\n    #: The date-time the Tournament record was created at\n    created_at = fields.DatetimeField(auto_now_add=True)\n\nclass Event(Model):\n    \"\"\"\n    This references an Event in a Tournament\n    \"\"\"\n\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=100)\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    tournament = fields.ForeignKeyField(\n        \"models.Tournament\", related_name=\"events\", description=\"The Tournament this happens in\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting a custom manager in Tortoise ORM\nDESCRIPTION: Shows how to override the default manager with a custom manager class instance using the manager option in the Meta class.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmanager = CustomManager()\n```\n\n----------------------------------------\n\nTITLE: Prefetching Related Data in Tortoise ORM\nDESCRIPTION: Shows how to prefetch related data to reduce the number of database queries. Demonstrates prefetching a single relationship and multiple levels of related models.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# This will fetch events, and for each of events ``.tournament`` field will be populated with\n# corresponding ``Tournament`` instance\nawait Event.all().prefetch_related('tournament')\n\n# This will fetch tournament with their events and teams for each event\ntournament_list = await Tournament.all().prefetch_related('events__participants')\n\n# Fetched result for m2m and backward fk relations are stored in list-like containe#r\nfor tournament in tournament_list:\n    print([e.name for e in tournament.events])\n```\n\n----------------------------------------\n\nTITLE: Filtering and Ordering by Related Models Fields in Tortoise ORM\nDESCRIPTION: Example of filtering and ordering by related model fields in Tortoise ORM. This demonstrates the ability to query across relationships and order by related fields, introduced in version 0.2.0.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nawait Tournament.filter(\n    events__name__in=['1', '3']\n).order_by('-events__participants__name').distinct()\n```\n\n----------------------------------------\n\nTITLE: Refreshing Model Instance After F Expression Updates in Python\nDESCRIPTION: Shows the correct way to access updated field values after using F expressions. This example demonstrates how to refresh a model instance to get the latest balance value.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/expressions.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Incorrect - balance value may be stale\nbalance = user.balance\n\n# Correct - refresh the balance field first\nawait user.refresh_from_db(fields=['balance'])\nbalance = user.balance\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Objects with Explicit Query and Async For Loop\nDESCRIPTION: Demonstrates how to retrieve related objects using an explicit query with 'async for' syntax. This provides a way to iterate through related objects without loading all of them at once.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync for team in event.participants:\n    print(team.name)\n```\n\n----------------------------------------\n\nTITLE: Adding Participants to an Event in Tortoise ORM\nDESCRIPTION: Demonstrates how to use the ManyToManyRelation API to add related objects. This example adds two participants to an event using the add() method.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait event.participants.add(participant_1, participant_2)\n```\n\n----------------------------------------\n\nTITLE: Reverse Foreign Key Relationship Access\nDESCRIPTION: Demonstrates how to access the reverse side of a Foreign Key relationship using the sync interface.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_17\n\nLANGUAGE: python3\nCODE:\n```\nawait event.fetch_related('tournament')\ntournament = event.tournament\n```\n\n----------------------------------------\n\nTITLE: Filtering with JSON Field Operators\nDESCRIPTION: Example showing usage of contains, contained_by and filter operators with JSONField\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nModel.filter(json_field__contains={\"key\": \"value\"})\nModel.filter(json_field__contained_by={\"key\": \"value\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring TortoiseORM in Python\nDESCRIPTION: Demonstrates how to create a TortoiseORM configuration object in a Python settings file. This configuration specifies database connections and application models.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/cli.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTORTOISE_ORM = {\n    \"connections\": {\n        \"default\": \"sqlite://:memory:\",\n    },\n    \"apps\": {\n        \"models\": {\"models\": [\"examples.models\"], \"default_connection\": \"default\"},\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a class derived from Model in Tortoise ORM\nDESCRIPTION: Shows the basic syntax for creating a model class that inherits from the Model base class in Tortoise ORM.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Tournament(Model):\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validators in Tortoise ORM\nDESCRIPTION: Shows two methods to create custom validators in Tortoise ORM. The first method is by creating a class that inherits from Validator, and the second is by defining a standalone function. Both validate if a number is even.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/validators.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.validators import Validator\nfrom tortoise.exceptions import ValidationError\n\nclass EvenNumberValidator(Validator):\n    \"\"\"\n    A validator to validate whether the given value is an even number or not.\n    \"\"\"\n    def __call__(self, value: int):\n        if value % 2 != 0:\n            raise ValidationError(f\"Value '{value}' is not an even number\")\n\n# or use function instead of class\ndef validate_even_number(value:int):\n    if value % 2 != 0:\n        raise ValidationError(f\"Value '{value}' is not an even number\")\n```\n\n----------------------------------------\n\nTITLE: Model Raw SQL Query Example\nDESCRIPTION: Code snippet showing the addition of Model.raw() method for executing raw SQL queries.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nModel.raw(\"sql query\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JsonSet Function for MySQL and SQLite in Tortoise ORM\nDESCRIPTION: This snippet demonstrates how to create a custom JsonSet function for use with MySQL and SQLite in Tortoise ORM. It allows for JSON manipulation in update operations using the JSON_SET function.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/functions.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.expressions import F\nfrom tortoise.functions import Function\nfrom pypika_tortoise.terms import Function as PupikaFunction\n\nclass JsonSet(Function):\n    class PypikaJsonSet(PupikaFunction):\n        def __init__(self, field: F, expression: str, value: Any):\n            super().__init__(\"JSON_SET\", field, expression, value)\n\n    database_func = PypikaJsonSet\n\njson = await JSONFields.create(data_default={\"a\": 1})\njson.data_default = JsonSet(F(\"data_default\"), \"$.a\", 2)\nawait json.save()\n\n# or use queryset.update()\nsql = JSONFields.filter(pk=json.pk).update(data_default=JsonSet(F(\"data_default\"), \"$.a\", 3)).sql()\nprint(sql)\n# UPDATE jsonfields SET data_default=JSON_SET(`data_default`,'$.a',3) where id=1\n```\n\n----------------------------------------\n\nTITLE: Using F Expressions in Annotations in Python\nDESCRIPTION: Illustrates how F expressions can be used in annotations to perform calculations on field values. This example shows annotating a User model with an incremented ID value.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/expressions.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = await User.annotate(idp=F(\"id\") + 1).values_list(\"id\", \"idp\")\n```\n\n----------------------------------------\n\nTITLE: Setting up compound indexes in Tortoise ORM\nDESCRIPTION: Shows the syntax for setting up compound non-unique indexes using the indexes option in the Meta class with different formats of specification.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nindexes=(\"field_a\", \"field_b\")\nindexes=((\"field_a\", \"field_b\"), )\nindexes=((\"field_a\", \"field_b\"), (\"field_c\", \"field_d\", \"field_e\"))\n```\n\n----------------------------------------\n\nTITLE: Using Subquery Expression in Tortoise ORM\nDESCRIPTION: The Subquery expression enables creating nested queries within a main query. This is useful for complex data retrieval that requires data from multiple related tables or aggregated results.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSubquery(\"subquery_expression\")\n```\n\n----------------------------------------\n\nTITLE: Implementing OneToOneField Relation in Python with Tortoise ORM\nDESCRIPTION: Example code showing how to define a OneToOneField relation between models in Tortoise ORM. It demonstrates creating a one-to-one relationship between an Event model and an Address model with a cascade deletion policy.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nevent: fields.OneToOneRelation[Event] = fields.OneToOneField(\n    \"models.Event\", on_delete=fields.CASCADE, related_name=\"address\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom FullTextIndex Class in Tortoise ORM\nDESCRIPTION: Shows how to extend the base Index class to create a custom FullTextIndex with support for parser specification. The implementation includes type hints and proper inheritance from the base Index class.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/indexes.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Set\nfrom pypika_tortoise.terms import Term\nfrom tortoise.indexes import Index\n\nclass FullTextIndex(Index):\n    INDEX_TYPE = \"FULLTEXT\"\n\n    def __init__(\n        self,\n        *expressions: Term,\n        fields: Optional[Set[str]] = None,\n        name: Optional[str] = None,\n        parser_name: Optional[str] = None,\n    ):\n        super().__init__(*expressions, fields=fields, name=name)\n        if parser_name:\n            self.extra = f\" WITH PARSER {parser_name}\"\n```\n\n----------------------------------------\n\nTITLE: Printing Pydantic Schema for Tournament Model in Python\nDESCRIPTION: Displays the JSON schema of a Tournament Pydantic model created from a Tortoise ORM model. The schema shows the model's properties including relationships to Event models.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> print(Tournament_Pydantic.schema())\n{\n    'title': 'Tournament',\n    'description': 'This references a Tournament',\n    'type': 'object',\n    'properties': {\n        'id': {\n            'title': 'Id',\n            'type': 'integer'\n        },\n        'name': {\n            'title': 'Name',\n            'type': 'string'\n        },\n        'created_at': {\n            'title': 'Created At',\n            'description': 'The date-time the Tournament record was created at',\n            'type': 'string',\n            'format': 'date-time'\n        },\n        'events': {\n            'title': 'Events',\n            'description': 'The Tournament this happens in',\n            'type': 'array',\n            'items': {\n                '$ref': '#/definitions/Event'\n            }\n        }\n    },\n    'definitions': {\n        'Event': {\n            'title': 'Event',\n            'description': 'This references an Event in a Tournament',\n            'type': 'object',\n            'properties': {\n                'id': {\n                    'title': 'Id',\n                    'type': 'integer'\n                },\n                'name': {\n                    'title': 'Name',\n                    'type': 'string'\n                },\n                'created_at': {\n                    'title': 'Created At',\n                    'type': 'string',\n                    'format': 'date-time'\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tortoise ORM Models Without Database Connection\nDESCRIPTION: Example demonstrating early initialization of Tortoise ORM models without requiring a database connection. This is useful for schema generation or model introspection without a full database setup.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Lets say you defined your models in \"some/models.py\", and \"other/ddef.py\"\n# And you are going to use them in the \"model\" namespace:\nTortoise.init_models([\"some.models\", \"other.ddef\"], \"models\")\n\n# Now the models will have relationships built, so introspection of schema will be comprehensive\n```\n\n----------------------------------------\n\nTITLE: Sync Usage of Many-to-Many Relationship\nDESCRIPTION: Shows how to use Many-to-Many relationships synchronously after fetching related data, including common operations like listing, length checking, and indexing.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_20\n\nLANGUAGE: python3\nCODE:\n```\nawait tournament.fetch_related('participants')\nparticipants = list(tournament.participants)\nparticipantlen = len(tournament.participants)\nif SomeParticipant in tournament.participants:\n    ...\nif tournament.participants:\n    ...\nfirstparticipant = tournament.participants[0]\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Pydantic Model Schema with Custom Configuration in Python\nDESCRIPTION: Demonstrates creating a Pydantic model from a Tortoise model with custom PydanticMeta configuration and displaying its JSON schema. The schema includes computed fields and excludes fields specified in PydanticMeta.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import Tortoise\n\nTortoise.init_models([\"__main__\"], \"models\")\nTournament_Pydantic = pydantic_model_creator(Tournament)\n```\n\n----------------------------------------\n\nTITLE: Creating a Pydantic Model for the Event Model in Python\nDESCRIPTION: Shows how to create and print the schema for an Event Pydantic model. The schema includes the relationship back to the Tournament model but avoids circular references.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nEvent_Pydantic = pydantic_model_creator(Event)\n\n>>> print(Event_Pydantic.schema())\n{\n    'title': 'Event',\n    'description': 'This references an Event in a Tournament',\n    'type': 'object',\n    'properties': {\n        'id': {\n            'title': 'Id',\n            'type': 'integer'\n        },\n        'name': {\n            'title': 'Name',\n            'type': 'string'\n        },\n        'created_at': {\n            'title': 'Created At',\n            'type': 'string',\n            'format': 'date-time'\n        },\n        'tournament': {\n            'title': 'Tournament',\n            'description': 'The Tournament this happens in',\n            'allOf': [\n                {\n                    '$ref': '#/definitions/Tournament'\n                }\n            ]\n        }\n    },\n    'definitions': {\n        'Tournament': {\n            'title': 'Tournament',\n            'description': 'This references a Tournament',\n            'type': 'object',\n            'properties': {\n                'id': {\n                    'title': 'Id',\n                    'type': 'integer'\n                },\n                'name': {\n                    'title': 'Name',\n                    'type': 'string'\n                },\n                'created_at': {\n                    'title': 'Created At',\n                    'description': 'The date-time the Tournament record was created at',\n                    'type': 'string',\n                    'format': 'date-time'\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OneToOne Relationship in Python with Tortoise ORM\nDESCRIPTION: Example showing how to define a OneToOneField relationship between models using Tortoise ORM. The field definition includes cascade delete behavior and a related name for reverse lookup.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nevent: fields.OneToOneRelation[Event] = fields.OneToOneField(\n    \"models.Event\", on_delete=fields.CASCADE, related_name=\"address\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Tortoise Models for Pydantic Integration in Python\nDESCRIPTION: Demonstrates how to initialize Tortoise ORM models for use with Pydantic model creators. This is necessary to establish relationships between models before creating Pydantic models.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import Tortoise\n\nTortoise.init_models([\"__main__\"], \"models\")\n# Now lets try again\nTournament_Pydantic = pydantic_model_creator(Tournament)\n```\n\n----------------------------------------\n\nTITLE: Creating a Pydantic List Model for Querysets\nDESCRIPTION: Generating a Pydantic model to handle querysets (lists of Tortoise models). This uses pydantic_queryset_creator to create a model that can serialize multiple Tournament instances at once.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.contrib.pydantic import pydantic_queryset_creator\n\nTournament_Pydantic_List = pydantic_queryset_creator(Tournament)\n```\n\n----------------------------------------\n\nTITLE: Creating and Serializing Tortoise ORM Objects to JSON in Python\nDESCRIPTION: Demonstrates how to create Tournament and Event objects in an async context and serialize them using the Pydantic models created earlier. Shows how relationships are included in the serialized output.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Create objects\ntournament = await Tournament.create(name=\"New Tournament\")\nevent = await Event.create(name=\"The Event\", tournament=tournament)\n\n# Serialise Tournament\ntourpy = await Tournament_Pydantic.from_tortoise_orm(tournament)\n\n>>> print(tourpy.model_dump_json())\n{\n    \"id\": 1,\n    \"name\": \"New Tournament\",\n    \"created_at\": \"2020-03-02T07:23:27.731656\",\n    \"events\": [\n        {\n            \"id\": 1,\n            \"name\": \"The Event\",\n            \"created_at\": \"2020-03-02T07:23:27.732492\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pytest Configuration for Tortoise ORM\nDESCRIPTION: Setting up Tortoise ORM for pytest in a conftest.py file, including database initialization and cleanup using fixtures.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/unittest.rst#2025-04-20_snippet_3\n\nLANGUAGE: python3\nCODE:\n```\nimport os\nimport pytest\nfrom tortoise.contrib.test import finalizer, initializer\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef initialize_tests(request):\n    db_url = os.environ.get(\"TORTOISE_TEST_DB\", \"sqlite://:memory:\")\n    initializer([\"tests.testmodels\"], db_url=db_url, app_label=\"models\")\n    request.addfinalizer(finalizer)\n```\n\n----------------------------------------\n\nTITLE: Date Field Filtering by Year in Tortoise ORM\nDESCRIPTION: Demonstrates filtering by date components like year. This example filters Teams created in 2020 using the year filter modifier on the created_at field.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nawait Team.filter(created_at__year=2020)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Manager in Tortoise ORM Queries\nDESCRIPTION: Demonstrates practical usage of custom managers in Tortoise ORM, showing how different managers affect query results. Examples include creating objects and querying them using both default and custom managers.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/manager.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nm1 = await ManagerModel.create()\nm2 = await ManagerModel.create(status=1)\n\nself.assertEqual(await ManagerModel.all().count(), 1)\nself.assertEqual(await ManagerModel.all_objects.count(), 2)\n\nself.assertIsNone(await ManagerModel.get_or_none(pk=m1.pk))\nself.assertIsNotNone(await ManagerModel.all_objects.get_or_none(pk=m1.pk))\nself.assertIsNotNone(await ManagerModel.get_or_none(pk=m2.pk))\n```\n\n----------------------------------------\n\nTITLE: Using Subquery Expressions in Tortoise ORM Queries\nDESCRIPTION: Demonstrates the use of Subquery expressions in both filter() and annotate() operations. This example shows how to use subqueries to filter and annotate Tournament models.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/expressions.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.expressions import Subquery\n\nawait Tournament.annotate(ids=Subquery(Tournament.all().limit(1).values(\"id\"))).values(\"ids\", \"id\")\nawait Tournament.filter(pk=Subquery(Tournament.filter(pk=t1.pk).values(\"id\"))).first()\n```\n\n----------------------------------------\n\nTITLE: Custom SSL Configuration for PostgreSQL Connection\nDESCRIPTION: Shows how to create and configure a custom SSL context for PostgreSQL database connection with verbose initialization\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/databases.rst#2025-04-20_snippet_1\n\nLANGUAGE: python3\nCODE:\n```\n# Here we create a custom SSL context\nimport ssl\nctx = ssl.create_default_context()\n# And in this example we disable validation...\n# Please don't do this. Look at the official Python ``ssl`` module documentation\nctx.check_hostname = False\nctx.verify_mode = ssl.CERT_NONE\n\n# Here we do a verbose init\nawait Tortoise.init(\n    config={\n        \"connections\": {\n            \"default\": {\n                \"engine\": \"tortoise.backends.asyncpg\",\n                \"credentials\": {\n                    \"database\": None,\n                    \"host\": \"127.0.0.1\",\n                    \"password\": \"moo\",\n                    \"port\": 54321,\n                    \"user\": \"postgres\",\n                    \"ssl\": ctx  # Here we pass in the SSL context\n                }\n            }\n        },\n        \"apps\": {\n            \"models\": {\n                \"models\": [\"some.models\"],\n                \"default_connection\": \"default\",\n            }\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching related objects asynchronously in Tortoise ORM\nDESCRIPTION: Shows how to fetch related objects using the asynchronous API through a relation defined by a ForeignKeyField's related_name.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nevents = await tournament.events.all()\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using Database Connections in Tortoise ORM\nDESCRIPTION: This code snippet demonstrates how to access and use database connections in Tortoise ORM. It shows the initialization of Tortoise with a SQLite database, retrieving the connection object, and executing a query. The example also includes error handling for potential operational errors.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/connections.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# connections is a singleton instance of the ConnectionHandler class and serves as the\n# entrypoint to access all connection management APIs.\nfrom tortoise import connections\n\n\n# Assume that this is the Tortoise configuration used\nawait Tortoise.init(\n    {\n        \"connections\": {\n            \"default\": {\n                \"engine\": \"tortoise.backends.sqlite\",\n                \"credentials\": {\"file_path\": \"example.sqlite3\"},\n            }\n        },\n        \"apps\": {\n            \"events\": {\"models\": [\"__main__\"], \"default_connection\": \"default\"}\n        },\n    }\n)\n\nconn: BaseDBAsyncClient = connections.get(\"default\")\ntry:\n    await conn.execute_query('SELECT * FROM \"event\"')\nexcept OperationalError:\n    print(\"Expected it to fail\")\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Test Skipping Based on Database Capabilities\nDESCRIPTION: Shows how to write tests that only run on specific database dialects using the requireCapability decorator. This allows writing database-specific tests that will be skipped when running against unsupported database types.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@requireCapability(dialect='sqlite')\nasync def test_run_sqlite_only(self):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Select For Update in Tortoise ORM\nDESCRIPTION: The select_for_update() method locks selected rows for the duration of a transaction. Optional parameters include nowait, skip_locked, and of to control locking behavior.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nqueryset.select_for_update(nowait=True, skip_locked=False, of=None)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom BloomIndex for PostgreSQL in Tortoise ORM\nDESCRIPTION: Example of extending the PostgreSQLIndex class to create a BloomIndex specialized for PostgreSQL. This minimal implementation only requires setting the INDEX_TYPE constant.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/indexes.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BloomIndex(PostgreSQLIndex):\n    INDEX_TYPE = \"BLOOM\"\n```\n\n----------------------------------------\n\nTITLE: Using Values Method for Efficient Queries in Tortoise ORM\nDESCRIPTION: Demonstrates using the values() method to create more efficient queries that return dictionaries instead of model instances. This reduces the number of database queries needed.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# This will return list of dicts with keys 'id', 'name', 'tournament_name' and\n# 'tournament_name' will be populated by name of related tournament.\n# And it will be done in one query\nevents = await Event.filter(id__in=[1,2,3]).values('id', 'name', tournament_name='tournament__name')\n```\n\n----------------------------------------\n\nTITLE: Primary Key Field Definition in Python\nDESCRIPTION: Examples of defining different types of primary key fields in Tortoise ORM models including IntField, CharField and UUIDField.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nid = fields.IntField(pk=True)\n\nchecksum = fields.CharField(pk=True)\n\nguid = fields.UUIDField(pk=True)\n```\n\n----------------------------------------\n\nTITLE: Setting default ordering in Tortoise ORM\nDESCRIPTION: Shows how to set default ordering for model queries using the ordering option in the Meta class with a list of field names.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nordering = [\"name\", \"-score\"]\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Insert Operations in Tortoise-ORM\nDESCRIPTION: Shows how to use the bulk_create method to efficiently insert multiple records at once. This method optimizes insert performance but may result in incomplete references in Python since it only ensures minimum DB field population.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nUser.bulk_create([\n    User(name=\"...\", email=\"...\"),\n    User(name=\"...\", email=\"...\")\n])\n```\n\n----------------------------------------\n\nTITLE: Using Command-line Interface with Quart and Tortoise-ORM\nDESCRIPTION: Example commands for running a Quart application integrated with Tortoise-ORM. Shows how to view available commands, generate database schemas, and start the development server.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/examples/quart.rst#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nQUART_APP=main quart\n        ...\n        Commands:\n          generate-schemas  Populate DB with Tortoise-ORM schemas.\n          run               Start and run a development server.\n          shell             Open a shell within the app context.\n\n# To generate schemas\nQUART_APP=main quart generate-schemas\n\n# To run\nQUART_APP=main quart run\n```\n\n----------------------------------------\n\nTITLE: Defining a Router Class in Python for Tortoise ORM\nDESCRIPTION: This snippet demonstrates how to create a basic Router class with db_for_read and db_for_write methods. These methods determine which database connection to use for read and write operations respectively.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/router.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Router:\n    def db_for_read(self, model: Type[Model]):\n        return \"slave\"\n\n    def db_for_write(self, model: Type[Model]):\n        return \"master\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Tortoise ORM with Configuration in Python\nDESCRIPTION: Example showing how to initialize Tortoise ORM with a SQLite database and specify app models. The code demonstrates the proper initialization pattern after a breaking change in version 0.10.0, including database connection setup and schema generation.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasync def init():\n    # Here we create a SQLite DB using file \"db.sqlite3\"\n    #  also specify the app name of \"models\"\n    #  which contain models from \"app.models\"\n    await Tortoise.init(\n        db_url='sqlite://db.sqlite3',\n        modules={'models': ['app.models']}\n    )\n    # Generate the schema\n    await Tortoise.generate_schemas()\n```\n\n----------------------------------------\n\nTITLE: Using RawSQL Expression in Tortoise ORM\nDESCRIPTION: The RawSQL expression allows embedding raw SQL within Tortoise ORM queries. This provides flexibility when the standard ORM query builders are insufficient for specific database operations.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRawSQL(\"expression\")\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Application with Uvicorn\nDESCRIPTION: This command starts a FastAPI application using Uvicorn server with auto-reload enabled. It assumes the main application is defined in a file named 'main.py' with an 'app' object.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/examples/fastapi/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nuvicorn main:app --reload\n```\n\n----------------------------------------\n\nTITLE: Using Case-When in Tortoise ORM\nDESCRIPTION: The Case-When support allows for conditional logic directly in database queries, similar to SQL CASE statements. This enables more complex filtering and transformation at the database level.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nCase().when(condition, then_value).else_(default_value)\n```\n\n----------------------------------------\n\nTITLE: Cloning Model Instances in Tortoise ORM\nDESCRIPTION: The clone() method creates a copy of a model instance in memory. This is useful for creating new records based on existing ones. The method accepts an optional pk parameter to set a specific primary key value.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnew_instance = instance.clone()\n# or\nnew_instance = instance.clone(pk=new_value)\n```\n\n----------------------------------------\n\nTITLE: Running Tortoise-ORM Starlette Example Application\nDESCRIPTION: Command to run the main.py file which demonstrates the Tortoise-ORM integration with Starlette. This executes the example application that likely uses the register_tortoise utility.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/examples/starlette/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Serializing a Tortoise ORM Queryset with Pydantic\nDESCRIPTION: Demonstrating the serialization of a queryset (collection of model instances) using Pydantic. Shows the output of both model_dump() and model_dump_json() methods on a list model, including how default ordering is respected.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> print(tourpy.model_dump())\n{\n    'root': [\n        {\n            'id': 2,\n            'name': 'Another',\n            'created_at': datetime.datetime(2020, 3, 2, 6, 53, 39, 776504)\n        },\n        {\n            'id': 3,\n            'name': 'Last Tournament',\n            'created_at': datetime.datetime(2020, 3, 2, 6, 53, 39, 776848)\n        },\n        {\n            'id': 1,\n            'name': 'New Tournament',\n            'created_at': datetime.datetime(2020, 3, 2, 6, 53, 39, 776211)\n        }\n    ]\n}\n>>> print(tourpy.model_dump_json())\n[\n    {\n        \"id\": 2,\n        \"name\": \"Another\",\n        \"created_at\": \"2020-03-02T06:53:39.776504\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Last Tournament\",\n        \"created_at\": \"2020-03-02T06:53:39.776848\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"New Tournament\",\n        \"created_at\": \"2020-03-02T06:53:39.776211\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Filtering in Tortoise ORM\nDESCRIPTION: Shows how to use filter modifiers for case-insensitive string comparison. This example filters teams whose names contain 'CON' regardless of case.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nteams = await Team.filter(name__icontains='CON')\n```\n\n----------------------------------------\n\nTITLE: Setting up unique_together in Tortoise ORM\nDESCRIPTION: Shows the syntax for setting up compound unique indexes using the unique_together option in the Meta class with different formats of specification.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nunique_together=(\"field_a\", \"field_b\")\nunique_together=((\"field_a\", \"field_b\"), )\nunique_together=((\"field_a\", \"field_b\"), (\"field_c\", \"field_d\", \"field_e\"))\n```\n\n----------------------------------------\n\nTITLE: Running Tortoise-ORM Sanic Example\nDESCRIPTION: Command to execute the main Python script that demonstrates the Tortoise-ORM and Sanic integration. This command runs the 'main.py' file using Python 3.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/examples/sanic/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Output for Tournament Model with PydanticMeta Configuration\nDESCRIPTION: Shows the JSON schema output of a Tournament Pydantic model with custom PydanticMeta configuration. The schema includes computed fields and excludes the created_at field as specified in PydanticMeta.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\": \"Tournament\",\n    \"description\": \"This references a Tournament\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"title\": \"Id\",\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"title\": \"Name\",\n            \"type\": \"string\"\n        },\n        \"events\": {\n            \"title\": \"Events\",\n            \"description\": \"The Tournament this happens in\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/definitions/Event\"\n            }\n        },\n        \"name_length\": {\n            \"title\": \"Name Length\",\n            \"description\": \"Computes length of name\",\n            \"type\": \"integer\"\n        },\n        \"events_num\": {\n            \"title\": \"Events Num\",\n            \"description\": \"Computes team size.\",\n            \"type\": \"integer\"\n        }\n    },\n    \"definitions\": {\n        \"Event\": {\n            \"title\": \"Event\",\n            \"description\": \"This references an Event in a Tournament\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"title\": \"Id\",\n                    \"type\": \"integer\"\n                },\n                \"name\": {\n                    \"title\": \"Name\",\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone-Aware Datetime in Tortoise ORM\nDESCRIPTION: Example of obtaining a timezone-aware datetime using Tortoise's utility function instead of the native Python datetime. This approach ensures proper timezone handling within the ORM's context.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/timezone.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntortoise.timezone.now()\n```\n\n----------------------------------------\n\nTITLE: Starting TortoiseCLI Interactive Shell with Environment Config\nDESCRIPTION: Shows how to start the TortoiseCLI interactive shell after setting the configuration via an environment variable.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/cli.rst#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntortoise-cli shell\n```\n\n----------------------------------------\n\nTITLE: Schema Generation with Tortoise ORM\nDESCRIPTION: Demonstrates how to set up a SQLite connection, initialize Tortoise ORM, and generate the database schema. This shows the earlier method of schema generation before the simplified API was introduced.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import Tortoise\nfrom tortoise.backends.sqlite.client import SqliteClient\nfrom tortoise.utils import generate_schema\n\nclient = SqliteClient(db_name)\nawait client.create_connection()\nTortoise.init(client)\nawait generate_schema(client)\n```\n\n----------------------------------------\n\nTITLE: Defining Models in Tortoise ORM with Python\nDESCRIPTION: This snippet demonstrates how to define a model class in Tortoise ORM. It shows the creation of a Tournament model with an integer primary key and a text field, following the object-oriented approach of Tortoise ORM.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.models import Model\nfrom tortoise import fields\n\nclass Tournament(Model):\n    id = fields.IntField(primary_key=True)\n    name = fields.TextField()\n```\n\n----------------------------------------\n\nTITLE: Model Update or Create Example\nDESCRIPTION: Usage of Model.update_or_create() method for atomic update or insert operations\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nawait Model.update_or_create(defaults={}, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using Native Python Datetime (Not Recommended for Tortoise ORM)\nDESCRIPTION: Example of using Python's native datetime function, which is not recommended in Tortoise ORM contexts as it lacks timezone awareness.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/timezone.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndatetime.datetime.now()\n```\n\n----------------------------------------\n\nTITLE: Using TestCase Class with Tortoise ORM\nDESCRIPTION: Example of creating test classes with Tortoise ORM's test utilities, including regular tests, async tests, skipped tests, and tests expected to fail.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/unittest.rst#2025-04-20_snippet_0\n\nLANGUAGE: python3\nCODE:\n```\nfrom tortoise.contrib import test\n\nclass TestSomething(test.TestCase):\n    def test_something(self):\n        ...\n\n    async def test_something_async(self):\n        ...\n\n    @test.skip('Skip this')\n    def test_skip(self):\n        ...\n\n    @test.expectedFailure\n    def test_something(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Importing MySQL-specific Fields in Tortoise ORM\nDESCRIPTION: Imports the GeometryField and UUIDField classes from the tortoise.contrib.mysql.fields module. These fields provide MySQL-specific data types for use in Tortoise ORM models.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/mysql.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom tortoise.contrib.mysql.fields import GeometryField, UUIDField\n```\n\n----------------------------------------\n\nTITLE: Configuring PyLint Plugin for Tortoise ORM\nDESCRIPTION: Configuration snippet showing how to enable the Tortoise ORM PyLint plugin in a .pylintrc file. This plugin helps PyLint better understand Tortoise ORM Models and Fields that use MetaClasses.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/linters.rst#2025-04-20_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nload-plugins=tortoise.contrib.pylint\n```\n\n----------------------------------------\n\nTITLE: Defining a Tortoise Model with Default Ordering\nDESCRIPTION: Creating a Tortoise ORM model with default ordering metadata. This model includes a Meta class that defines the default ordering by the name field, which will be used by the Pydantic serializer.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import fields\nfrom tortoise.models import Model\n\nclass Tournament(Model):\n    \"\"\"\n    This references a Tournament\n    \"\"\"\n    id = fields.IntField(primary_key=True)\n    name = fields.CharField(max_length=100)\n    #: The date-time the Tournament record was created at\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    class Meta:\n        # Define the default ordering\n        #  the pydantic serialiser will use this to order the results\n        ordering = [\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Router in Tortoise ORM Initialization\nDESCRIPTION: This snippet shows how to configure a router in Tortoise ORM. It includes setting up multiple database connections and specifying the router in the configuration dictionary or as a separate parameter in Tortoise.init().\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/router.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n    \"connections\": {\"master\": \"sqlite:///tmp/test.db\", \"slave\": \"sqlite:///tmp/test.db\"},\n    \"apps\": {\n        \"models\": {\n            \"models\": [\"__main__\"],\n            \"default_connection\": \"master\",\n        }\n    },\n    \"routers\": [\"path.Router\"],\n    \"use_tz\": False,\n    \"timezone\": \"UTC\",\n}\nawait Tortoise.init(config=config)\n# or\nrouters = config.pop('routers')\nawait Tortoise.init(config=config, routers=routers)\n```\n\n----------------------------------------\n\nTITLE: Async Iteration Over Foreign Key Relationship\nDESCRIPTION: Demonstrates how to asynchronously iterate over related events using a Foreign Key relationship in Tortoise ORM.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_15\n\nLANGUAGE: python3\nCODE:\n```\nasync for event in tournament.events:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Green Test Runner Configuration for Tortoise ORM\nDESCRIPTION: Configuration example for the Green test runner using initializer and finalizer in a .green file.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/unittest.rst#2025-04-20_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ninitializer = tortoise.contrib.test.env_initializer\nfinalizer = tortoise.contrib.test.finalizer\n```\n\n----------------------------------------\n\nTITLE: Documenting Tortoise ORM Models with Docstrings and Comments for Schema Generation\nDESCRIPTION: Example showing how to add documentation to Tortoise ORM models using docstrings and special comments. These are used as documentation and DDL descriptions in the database schema.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Something(Model):\n    \"\"\"\n    A Docstring.\n\n    Some extra info.\n    \"\"\"\n\n    # A regular comment\n    name = fields.CharField(max_length=50)\n    #: A docstring comment\n    chars = fields.CharField(max_length=50, description=\"Some chars\")\n    #: A docstring comment\n    #: Some more detail\n    blip = fields.CharField(max_length=50)\n\n# When looking at the describe model:\n{\n    \"description\": \"A Docstring.\",\n    \"docstring\": \"A Docstring.\\n\\nSome extra info.\",\n    ...\n    \"data_fields\": [\n        {\n            \"name\": \"name\",\n            ...\n            \"description\": null,\n            \"docstring\": null\n        },\n        {\n            \"name\": \"chars\",\n            ...\n            \"description\": \"Some chars\",\n            \"docstring\": \"A docstring comment\"\n        },\n        {\n            \"name\": \"blip\",\n            ...\n            \"description\": \"A docstring comment\",\n            \"docstring\": \"A docstring comment\\nSome more detail\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using __models__ Variable for Model Discovery Override in Python\nDESCRIPTION: Demonstrates how to override the automatic model discovery mechanism in Tortoise-ORM by defining a __models__ variable in your models module. This allows explicit control over which models are used during schema generation.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# In yourapp.models.py\n__models__ = [User, Post, Comment]  # Only these models will be used by generate_schema()\n```\n\n----------------------------------------\n\nTITLE: Defining Tortoise ORM Examples Table of Contents in reStructuredText\nDESCRIPTION: This code snippet defines the structure for the Tortoise ORM examples documentation using reStructuredText. It sets up a table of contents with links to various example pages, including basic usage and integration with frameworks like FastAPI, Quart, Sanic, Starlette, AIOHTTP, and BlackSheep.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/examples.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _examples:\n\n========\nExamples\n========\n\n.. toctree::\n   :maxdepth: 3\n\n   examples/basic\n   examples/pydantic\n   examples/fastapi\n   examples/quart\n   examples/sanic\n   examples/starlette\n   examples/aiohttp\n   examples/blacksheep\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Syntax Highlighting with Pygments in Tortoise Logging\nDESCRIPTION: Creates a custom logging formatter that adds SQL syntax highlighting using Pygments library. The formatter specifically targets SQL queries logged by tortoise.db_client and applies PostgreSQL syntax coloring.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/logging.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nfrom pygments import highlight\nfrom pygments.formatters.terminal import TerminalFormatter\nfrom pygments.lexers.sql import PostgresLexer\n\npostgres = PostgresLexer()\nterminal_formatter = TerminalFormatter()\n\n\nclass PygmentsFormatter(logging.Formatter):\n    def __init__(\n        self,\n        fmt=\"{asctime} - {name}:{lineno} - {levelname} - {message}\",\n        datefmt=\"%H:%M:%S\",\n    ):\n        self.datefmt = datefmt\n        self.fmt = fmt\n        logging.Formatter.__init__(self, None, datefmt)\n\n    def format(self, record: logging.LogRecord):\n        \"\"\"Format the logging record with slq's syntax coloration.\"\"\"\n        own_records = {\n            attr: val\n            for attr, val in record.__dict__.items()\n            if not attr.startswith(\"_\")\n        }\n        message = record.getMessage()\n        name = record.name\n        asctime = self.formatTime(record, self.datefmt)\n\n        if name == \"tortoise.db_client\":\n            if (\n                record.levelname == \"DEBUG\"\n                and not message.startswith(\"Created connection pool\")\n                and not message.startswith(\"Closed connection pool\")\n            ):\n                message = highlight(message, postgres, terminal_formatter).rstrip()\n\n        own_records.update(\n            {\n                \"message\": message,\n                \"name\": name,\n                \"asctime\": asctime,\n            }\n        )\n\n        return self.fmt.format(**own_records)\n\n\n\n# Then replace the formatter above by the following one\nfmt = PygmentsFormatter(\n    fmt=\"{asctime} - {name}:{lineno} - {levelname} - {message}\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n)\n```\n\n----------------------------------------\n\nTITLE: Annotating QuerySet with Coalesce Function in Python\nDESCRIPTION: This snippet demonstrates how to use the Coalesce function to annotate a QuerySet in Tortoise ORM. It adds a new attribute 'clean_desc' to each SomeModel instance, containing the annotated data.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/functions.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresults = await SomeModel.filter(...).annotate(clean_desc=Coalesce(\"desc\", \"N/A\"))\n```\n\n----------------------------------------\n\nTITLE: Model Relationship Definition Example (Python)\nDESCRIPTION: Code example from the changelog showing M2M field usage with create_unique_index parameter\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nM2MField(create_unique_index=True)\n```\n\n----------------------------------------\n\nTITLE: Simplified model inheritance example in Tortoise ORM\nDESCRIPTION: Shows a minimal model definition that inherits from multiple mixins and a base model without defining additional fields or a Meta class.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass RoleModel(TimestampMixin, NameMixin, MyAbstractBaseModel):\n    pass\n```\n\n----------------------------------------\n\nTITLE: URL Encoding Password for Database Connection\nDESCRIPTION: Demonstrates how to URL encode special characters in database passwords using urllib\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/databases.rst#2025-04-20_snippet_0\n\nLANGUAGE: python3\nCODE:\n```\n>>> import urllib.parse\n>>> urllib.parse.quote_plus(\"kx%jj5/g\")\n'kx%25jj5%2Fg'\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Changelog Formatting\nDESCRIPTION: ReStructuredText formatted changelog documenting version changes, bug fixes, and new features for Tortoise ORM. The document uses RST headings, sections, and bullet points to organize version information.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=========\nChangelog\n=========\n\n.. rst-class:: emphasize-children\n\n0.25\n====\n\n0.25.0\n------\nFixed\n^^^^^\n- Fix `pydantic_model_creator` incompatibility with Pydantic 2.11 (#1925)\n\nChanged\n^^^^^^^\n- Skip database selection if the router is not configured to improve performance (#1915)\n- `.values()`, `.values_list()` and `.only()` cannot be used together (#1923)\n\nAdded\n^^^^^\n- `.only` supports selecting related fields, e.g. `.only(\"related__field\")` (#1923)\n```\n\n----------------------------------------\n\nTITLE: Using Concat Function in Tortoise ORM\nDESCRIPTION: The Concat function allows concatenating multiple string fields or values in MySQL and PostgreSQL databases. This is useful for combining text fields in query results.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nConcat(\"field1\", \"field2\")\n```\n\n----------------------------------------\n\nTITLE: Importing Tortoise-ORM FastAPI Integration Module\nDESCRIPTION: This snippet shows how to import the Tortoise-ORM FastAPI integration module. The RegisterTortoise class from this module can be used to set up and clean up Tortoise-ORM in a FastAPI application's lifespan context.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/fastapi.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tortoise.contrib.fastapi import RegisterTortoise\n```\n\n----------------------------------------\n\nTITLE: Schema Generation in Tortoise ORM with SQLite\nDESCRIPTION: Example of schema generation in Tortoise ORM using SQLite client. This demonstrates how to create a database connection, initialize Tortoise, and generate the schema, introduced in version 0.3.0.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import Tortoise\nfrom tortoise.backends.sqlite.client import SqliteClient\nfrom tortoise.utils import generate_schema\n\nclient = SqliteClient(db_name)\nawait client.create_connection()\nTortoise.init(client)\nawait generate_schema(client)\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure with TOC Tree\nDESCRIPTION: Sphinx documentation configuration using RST format to create a table of contents tree with maximum depth of 4 levels, organizing all major Tortoise ORM documentation sections.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/reference.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   setup\n   databases\n   models\n   fields\n   indexes\n   timezone\n   schema\n   query\n   manager\n   functions\n   expressions\n   transactions\n   connections\n   exceptions\n   signals\n   migration\n   validators\n   logging\n   router\n   cli\n```\n\n----------------------------------------\n\nTITLE: Importing MySQL-specific Indexes in Tortoise ORM\nDESCRIPTION: Imports the FullTextIndex and SpatialIndex classes from the tortoise.contrib.mysql.indexes module. These classes provide MySQL-specific indexing capabilities for Tortoise ORM models.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/mysql.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tortoise.contrib.mysql.indexes import FullTextIndex, SpatialIndex\n```\n\n----------------------------------------\n\nTITLE: Field Definition Example (Python)\nDESCRIPTION: Example showing renamed field arguments for primary key and database index\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nField(primary_key=True, db_index=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation for Tortoise ORM Exceptions\nDESCRIPTION: ReStructuredText configuration for automatically generating documentation for the tortoise.exceptions module. Includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/exceptions.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tortoise.exceptions\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Quart Commands with Tortoise-ORM Integration\nDESCRIPTION: This snippet demonstrates how to use Quart CLI commands with Tortoise-ORM integration. It shows commands for listing available options, generating schemas, and running the development server.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/quart.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nQUART_APP=main quart\n        ...\n        Commands:\n          generate-schemas  Populate DB with Tortoise-ORM schemas.\n          run               Start and run a development server.\n          shell             Open a shell within the app context.\n\n# To generate schemas\nQUART_APP=main quart generate-schemas\n\n# To run\nQUART_APP=main quart run\n```\n\n----------------------------------------\n\nTITLE: QuerySet Select For Update Example\nDESCRIPTION: Demonstration of select_for_update() method with additional parameters\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nqueryset.select_for_update(nowait=True, skip_locked=True, of=[])\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Tortoise ORM Logging in Python\nDESCRIPTION: Sets up basic logging configuration for Tortoise ORM with custom formatting. Configures both tortoise.db_client for SQL query logging and tortoise for runtime logging at DEBUG level.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/logging.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nfmt = logging.Formatter(\n    fmt=\"%(asctime)s - %(name)s:%(lineno)d - %(levelname)s - %(message)s\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n)\nsh = logging.StreamHandler(sys.stdout)\nsh.setLevel(logging.DEBUG)\nsh.setFormatter(fmt)\n\n# will print debug sql\nlogger_db_client = logging.getLogger(\"tortoise.db_client\")\nlogger_db_client.setLevel(logging.DEBUG)\nlogger_db_client.addHandler(sh)\n\nlogger_tortoise = logging.getLogger(\"tortoise\")\nlogger_tortoise.setLevel(logging.DEBUG)\nlogger_tortoise.addHandler(sh)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Model Instances for List Serialization\nDESCRIPTION: Creating multiple Tournament model instances to demonstrate list serialization. This code creates three different tournament records that will be queried and serialized as a list.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/pydantic.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create objects\nawait Tournament.create(name=\"New Tournament\")\nawait Tournament.create(name=\"Another\")\nawait Tournament.create(name=\"Last Tournament\")\n\ntourpy = await Tournament_Pydantic_List.from_queryset(Tournament.all())\n```\n\n----------------------------------------\n\nTITLE: Aerich Init Command Help\nDESCRIPTION: Help information for the init command showing available options for initializing Aerich configuration.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> aerich init -h\n\nUsage: aerich init [OPTIONS]\n\n  Initialize aerich config and create migrations folder.\n\nOptions:\n  -t, --tortoise-orm TEXT  Tortoise-ORM config dict location, like\n                          `settings.TORTOISE_ORM`.  [required]\n  --location TEXT          Migrations folder.  [default: ./migrations]\n  -s, --src_folder TEXT    Folder of the source, relative to the project root.\n  -h, --help               Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Using Rand/Random Function in Tortoise ORM\nDESCRIPTION: The Rand/Random function in the contrib module provides random value generation at the database level. This can be used for random sorting or selection of records.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nRand()\n```\n\n----------------------------------------\n\nTITLE: Aerich Initialization Example\nDESCRIPTION: Example of initializing Aerich with a specific Tortoise-ORM configuration.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> aerich init -t tests.backends.mysql.TORTOISE_ORM\n\nSuccess create migrate location ./migrations\nSuccess generate config file aerich.ini\n```\n\n----------------------------------------\n\nTITLE: Filtering Events with Rating Threshold in Tortoise ORM\nDESCRIPTION: A simple query example that returns all events with a rating greater than 5. This demonstrates the basic filtering capability in Tortoise ORM.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait Event.filter(rating__gt=5)\n```\n\n----------------------------------------\n\nTITLE: Early Initialization of Tortoise ORM Models Without Database Connection\nDESCRIPTION: Example demonstrating how to initialize Tortoise ORM models without connecting to a database, useful for schema generation or model introspection.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Lets say you defined your models in \"some/models.py\", and \"other/ddef.py\"\n# And you are going to use them in the \"model\" namespace:\nTortoise.init_models([\"some.models\", \"other.ddef\"], \"models\")\n\n# Now the models will have relationships built, so introspection of schema will be comprehensive\n```\n\n----------------------------------------\n\nTITLE: Aerich Database Initialization\nDESCRIPTION: Command to initialize the database and create migration folders.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> aerich init-db\n\nSuccess create app migrate location ./migrations/models\nSuccess generate schema for app \"models\"\n```\n\n----------------------------------------\n\nTITLE: Using Model Docstrings for Field Documentation in Python\nDESCRIPTION: Example showing how docstrings and comments preceding field definitions are used as descriptions in Tortoise ORM models. The model includes regular comments, docstring comments, and explicitly described fields.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Something(Model):\n    \"\"\"\n    A Docstring.\n\n    Some extra info.\n    \"\"\"\n\n    # A regular comment\n    name = fields.CharField(max_length=50)\n    #: A docstring comment\n    chars = fields.CharField(max_length=50, description=\"Some chars\")\n    #: A docstring comment\n    #: Some more detail\n    blip = fields.CharField(max_length=50)\n\n# When looking at the describe model:\n{\n    \"description\": \"A Docstring.\",\n    \"docstring\": \"A Docstring.\\n\\nSome extra info.\",\n    ...\n    \"data_fields\": [\n        {\n            \"name\": \"name\",\n            ...\n            \"description\": null,\n            \"docstring\": null\n        },\n        {\n            \"name\": \"chars\",\n            ...\n            \"description\": \"Some chars\",\n            \"docstring\": \"A docstring comment\"\n        },\n        {\n            \"name\": \"blip\",\n            ...\n            \"description\": \"A docstring comment\",\n            \"docstring\": \"A docstring comment\\nSome more detail\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Downgrade Command Help\nDESCRIPTION: Help information for the downgrade command showing available options.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> aerich init -h\n\nUsage: aerich downgrade [OPTIONS]\n\n  Downgrade to specified version.\n\nOptions:\n  -v, --version INTEGER  Specified version, default to last.  [default: -1]\n  -h, --help             Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Importing the Model class in Tortoise ORM\nDESCRIPTION: Shows how to import the base Model class from Tortoise ORM, which is required for all model definitions.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/models.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise.models import Model\n```\n\n----------------------------------------\n\nTITLE: Importing MySQL Full-Text Search in Tortoise ORM\nDESCRIPTION: Imports the SearchCriterion class from the tortoise.contrib.mysql.search module. This class enables full-text search capabilities for MySQL databases in Tortoise ORM.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/mysql.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom tortoise.contrib.mysql.search import SearchCriterion\n```\n\n----------------------------------------\n\nTITLE: Downgrade Migration Example\nDESCRIPTION: Example of downgrading to a previous migration version.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> aerich downgrade\n\nSuccess downgrade 1_202029051520102929_drop_column.json\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Example\nDESCRIPTION: Example of creating a new migration with a specific name.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n> aerich migrate --name drop_column\n\nSuccess migrate 1_202029051520102929_drop_column.json\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Dependencies for Tortoise ORM with Bash\nDESCRIPTION: Command to install all optional performance-enhancing dependencies for Tortoise ORM using pip.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/getting_started.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install tortoise-orm[accel]\n```\n\n----------------------------------------\n\nTITLE: Using SQL Method in Tortoise ORM QuerySet\nDESCRIPTION: The .sql() method on QuerySet returns the SQL representation of the query without executing it. This is useful for debugging or understanding the actual SQL being generated by the ORM.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsql_query = queryset.sql()\n```\n\n----------------------------------------\n\nTITLE: Upgrade Migration Example\nDESCRIPTION: Example of upgrading to the latest migration version.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> aerich upgrade\n\nSuccess upgrade 1_202029051520102929_drop_column.json\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI with Tortoise ORM using uvicorn\nDESCRIPTION: Command to run a FastAPI application with Tortoise ORM using uvicorn server with auto-reload enabled for development.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/examples/fastapi.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn main:app --reload\n```\n\n----------------------------------------\n\nTITLE: Nose2 Configuration for Tortoise ORM\nDESCRIPTION: Example of configuring Nose2 to work with Tortoise ORM tests, showing both command line options and configuration file setup.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/contrib/unittest.rst#2025-04-20_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[unittest]\nplugins = tortoise.contrib.test.nose2\n\n[tortoise]\n# Must specify at least one module path\ndb-module =\n    tests.testmodels\n# You can optionally override the db_url here\ndb-url = sqlite://testdb-{}.sqlite\n```\n\n----------------------------------------\n\nTITLE: Running AIOHTTP Example with Tortoise ORM\nDESCRIPTION: Command to execute the AIOHTTP example application that uses Tortoise ORM. This command runs the main.py file which sets up the AIOHTTP server with Tortoise ORM integration.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/examples/aiohttp.rst#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Defining Custom TruncMonth Function in Python for Tortoise ORM\nDESCRIPTION: This example shows how to define a custom TruncMonth function in Tortoise ORM. It uses CustomFunction from pypika_tortoise to create a DATE_FORMAT function that can be used in queries.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/functions.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypika_tortoise import CustomFunction\nfrom tortoise.expressions import F, Function\n\nclass TruncMonth(Function):\n    database_func = CustomFunction(\"DATE_FORMAT\", [\"name\", \"dt_format\"])\n\nsql = Task.all().annotate(date=TruncMonth('created_at', '%Y-%m-%d')).values('date').sql()\nprint(sql)\n# SELECT DATE_FORMAT(`created_at`,'%Y-%m-%d') `date` FROM `task`\n```\n\n----------------------------------------\n\nTITLE: Aerich CLI Help Command\nDESCRIPTION: Shows the main help menu and available commands for the Aerich CLI tool.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> aerich -h\n\nUsage: aerich [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -V, --version      Show the version and exit.\n  -c, --config TEXT  Config file.  [default: pyproject.toml]\n  --app TEXT         Tortoise-ORM app name.\n  -h, --help         Show this message and exit.\n\nCommands:\n  downgrade  Downgrade to specified version.\n  heads      Show currently available heads (unapplied migrations).\n  history    List all migrations.\n  init       Initialize aerich config and create migrations folder.\n  init-db    Generate schema and generate app migration folder.\n  inspectdb  Prints the current database tables to stdout as Tortoise-ORM...\n  migrate    Generate a migration file for the current state of the models.\n  upgrade    Upgrade to specified migration version.\n```\n\n----------------------------------------\n\nTITLE: Running Starlette Example with Tortoise ORM\nDESCRIPTION: Command to execute the Starlette example application that uses Tortoise ORM. This runs the main.py file which sets up the Starlette app with Tortoise ORM integration.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/examples/starlette.rst#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Starting TortoiseCLI Interactive Shell with Config File\nDESCRIPTION: Shows how to start an interactive shell for TortoiseORM using a configuration file specified with the -c option.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/cli.rst#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntortoise-cli -c settings.TORTOISE_ORM shell\n```\n\n----------------------------------------\n\nTITLE: Running the Sanic Example Application\nDESCRIPTION: Command to execute the Sanic example application that demonstrates Tortoise ORM integration.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/examples/sanic.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Running Tortoise-ORM with Quart via Command Line\nDESCRIPTION: Shell commands for setting up and running a Quart application integrated with Tortoise-ORM. Demonstrates how to view available commands, generate database schemas, and launch a development server using the QUART_APP environment variable.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/examples/quart/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nQUART_APP=main quart\n        ...\n        Commands:\n          generate-schemas  Populate DB with Tortoise-ORM schemas.\n          run               Start and run a development server.\n          shell             Open a shell within the app context.\n\n    # To generate schemas\n    QUART_APP=main quart generate-schemas\n\n    # To run\n    QUART_APP=main quart run\n```\n\n----------------------------------------\n\nTITLE: Setting TortoiseORM Config via Environment Variable\nDESCRIPTION: Demonstrates how to set the TortoiseORM configuration using an environment variable, allowing for easier command execution.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/cli.rst#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport TORTOISE_ORM=settings.TORTOISE_ORM\n```\n\n----------------------------------------\n\nTITLE: Running the Tortoise-ORM aiohttp Example in Shell\nDESCRIPTION: Command to execute the main application file that demonstrates the Tortoise-ORM aiohttp integration. This runs the example application which likely contains the integration code using register_tortoise.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/examples/aiohttp/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Filtering Events by Name Prefix in Tortoise ORM\nDESCRIPTION: Demonstrates filtering records by a name prefix using the 'startswith' modifier. Returns all events with names starting with 'FIFA'.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/query.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait Event.filter(name__startswith='FIFA')\n```\n\n----------------------------------------\n\nTITLE: Running a BlackSheep Application with Tortoise ORM\nDESCRIPTION: Command to start a BlackSheep server with uvicorn, enabling hot reload for development.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/examples/blacksheep.rst#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nuvicorn server:app --reload\n```\n\n----------------------------------------\n\nTITLE: View Pending Migrations\nDESCRIPTION: Example of viewing pending migrations that need to be applied.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n> aerich heads\n\n1_202029051520102929_drop_column.json\n```\n\n----------------------------------------\n\nTITLE: Migration History Example\nDESCRIPTION: Example of viewing migration history.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/migration.rst#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n> aerich history\n\n1_202029051520102929_drop_column.json\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Skip Based on Database Capability\nDESCRIPTION: Example of using the requireCapability decorator to conditionally skip tests based on database driver capabilities.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@requireCapability(dialect='sqlite')\nasync def test_run_sqlite_only(self):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running a BlackSheep Server with Tortoise-ORM Integration\nDESCRIPTION: This command starts a BlackSheep server with Tortoise-ORM integration using Uvicorn. The '--reload' flag enables auto-reloading for development purposes.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/examples/blacksheep/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nuvicorn server:app --reload\n```\n\n----------------------------------------\n\nTITLE: Importing Tortoise ORM Signals Module\nDESCRIPTION: This code snippet demonstrates how to import the signals module from Tortoise ORM. It uses the automodule directive to automatically generate documentation for the module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/signals.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: tortoise.signals\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Displaying TortoiseCLI Help Information\nDESCRIPTION: Shows how to use the help command to display usage information, options, and available commands for tortoise-cli.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/cli.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> tortoise-cli -h                                                                                                                                                                 23:59:38\nUsage: tortoise-cli [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -V, --version      Show the version and exit.\n  -c, --config TEXT  TortoiseORM config dictionary path, like settings.TORTOISE_ORM\n  -h, --help         Show this message and exit.\n\nCommands:\n  shell  Start an interactive shell.\n```\n\n----------------------------------------\n\nTITLE: Running Makefile Commands for Tortoise ORM Development\nDESCRIPTION: This snippet shows the output of the Makefile help command, displaying the available targets for common development operations such as updating dependencies, running tests, and formatting code.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CONTRIBUTING.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTortoise ORM development makefile\n\nusage: make <target>\nTargets:\n    up          Updates dev/test dependencies\n    deps        Ensure dev/test dependencies are installed\n    check       Checks that build is sane\n    lint        Reports all linter violations\n    test        Runs all tests\n    docs        Builds the documentation\n    style       Auto-formats the code\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with Sphinx toctree in RST\nDESCRIPTION: Sphinx table of contents directive that organizes the Tortoise ORM documentation into logical sections. It includes the main index, getting started guide, reference documentation, examples, contribution guidelines, and project information.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/toc.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 5\n   :includehidden:\n\n   index\n   getting_started\n   reference\n   examples\n   contrib\n   CHANGELOG\n   roadmap\n   CONTRIBUTING\n   CONTRIBUTORS\n```\n\n----------------------------------------\n\nTITLE: Using ON CONFLICT in Tortoise ORM\nDESCRIPTION: ON CONFLICT support in INSERT statements allows for handling duplicate records gracefully. This feature enables 'upsert' operations that update existing records or insert new ones based on conflict detection.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/CHANGELOG.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nModel.create(**values, on_conflict=[\"field\"])\n```\n\n----------------------------------------\n\nTITLE: Bulk Create Model Instances in Python\nDESCRIPTION: Example of using bulk_create() to efficiently insert multiple model instances at once. Note that this is optimized for performance but may result in incomplete references.\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nUser.bulk_create([\n    User(name=\"...\", email=\"...\"),\n    User(name=\"...\", email=\"...\")\n])\n```\n\n----------------------------------------\n\nTITLE: Array Field Operations Example (Python)\nDESCRIPTION: Implementation of array field operations including contains, contained_by, overlap and len\nSOURCE: https://github.com/tortoise/tortoise-orm/blob/develop/docs/CHANGELOG.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n__contains__, __contained_by__, __overlap__ and __len__ for ArrayField\n```"
  }
]