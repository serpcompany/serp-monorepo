[
  {
    "owner": "clariity",
    "repo": "react-chessboard",
    "content": "TITLE: Stockfish vs Stockfish Game Component\nDESCRIPTION: This snippet demonstrates a React component (`StockfishVsStockfish`) where Stockfish plays against itself.  It uses the `Engine` class to evaluate chess positions and make moves. The component uses `useMemo` to create the engine and game instances and `useState` to manage the chessboard position.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/stories/StockfishIntegration.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const StockfishVsStockfish = () => {\n  const engine = useMemo(() => new Engine(), []);\n  const game = useMemo(() => new Chess(), []);\n  const [chessBoardPosition, setChessBoardPosition] = useState(game.fen());\n\n  function findBestMove() {\n    engine.evaluatePosition(game.fen(), 10);\n    engine.onMessage(({ bestMove }) => {\n      if (bestMove) {\n        game.move({\n          from: bestMove.substring(0, 2),\n          to: bestMove.substring(2, 4),\n          promotion: bestMove.substring(4, 5),\n        });\n\n        setChessBoardPosition(game.fen());\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (!game.game_over() || game.in_draw()) {\n      setTimeout(findBestMove, 300);\n    }\n  }, [chessBoardPosition]);\n\n  return <Chessboard position={chessBoardPosition} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Engine Class for Stockfish Communication\nDESCRIPTION: This snippet defines an `Engine` class to manage communication with the Stockfish chess engine. It initializes a web worker with 'stockfish.js', sets up a message listener to extract the best move from Stockfish's output, and provides methods to evaluate a position, stop the engine, and quit the worker.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/stories/StockfishIntegration.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Engine {\n  constructor() {\n    this.stockfish = new Worker(\"./stockfish.js\");\n    this.onMessage = (callback) => {\n      this.stockfish.addEventListener(\"message\", (e) => {\n        const bestMove = e.data?.match(/bestmove\\s+(\\S+)/)?.[1];\n\n        callback({ bestMove });\n      });\n    };\n    // Init engine\n    this.sendMessage(\"uci\");\n    this.sendMessage(\"isready\");\n  }\n\n  evaluatePosition(fen, depth) {\n    this.stockfish.postMessage(`position fen ${fen}`);\n    this.stockfish.postMessage(`go depth ${depth}`);\n  }\n  stop() {\n    this.sendMessage(\"stop\"); // Run when changing positions\n  }\n  quit() {\n    this.sendMessage(\"quit\"); // Good to run this before unmounting.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stockfish Web Worker Usage with useEffect Hook\nDESCRIPTION: This snippet demonstrates how to run the 'stockfish.js' file as a web worker within a React useEffect hook. It initializes Stockfish, sets the initial position using FEN notation, sends a 'go depth' command to initiate the engine's search, and logs the engine's responses to the console.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/stories/StockfishIntegration.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const stockfish = new Worker(\"./stockfish.js\");\n  const DEPTH = 8; // number of halfmoves the engine looks ahead\n  const FEN_POSITION =\n    \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\n  stockfish.postMessage(\"uci\");\n  stockfish.postMessage(`position fen ${FEN_POSITION}`);\n  stockfish.postMessage(`go depth ${DEPTH}`);\n\n  stockfish.onmessage = (e) => {\n    console.log(e.data); // in the console output you will see `bestmove e2e4` message\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Basic Chessboard Example with Random Move Engine (React, Chess.js)\nDESCRIPTION: Illustrates a basic example of using react-chessboard with Chess.js to create a chessboard with a simple random move engine. It uses React state to manage the game and defines functions for making moves and handling piece drops.  This implementation requires chess.js version ^0.12.0.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/README.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState } from \"react\";\nimport Chess from \"chess.js\";\nimport { Chessboard } from \"react-chessboard\";\n\nexport default function PlayRandomMoveEngine() {\n  const [game, setGame] = useState(new Chess());\n\n  function makeAMove(move) {\n    const gameCopy = { ...game };\n    const result = gameCopy.move(move);\n    setGame(gameCopy);\n    return result; // null if the move was illegal, the move object if the move was legal\n  }\n\n  function makeRandomMove() {\n    const possibleMoves = game.moves();\n    if (game.game_over() || game.in_draw() || possibleMoves.length === 0)\n      return; // exit if the game is over\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length);\n    makeAMove(possibleMoves[randomIndex]);\n  }\n\n  function onDrop(sourceSquare, targetSquare) {\n    const move = makeAMove({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\", // always promote to a queen for example simplicity\n    });\n\n    // illegal move\n    if (move === null) return false;\n    setTimeout(makeRandomMove, 200);\n    return true;\n  }\n\n  return <Chessboard\n    position={game.fen()}\n    onPieceDrop={onDrop}\n    autoPromoteToQueen={true} // always promote to a queen for example simplicity\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Bare Minimum Chessboard Implementation in React\nDESCRIPTION: Demonstrates the most basic implementation of the react-chessboard component within a React application. It imports the Chessboard component and renders it within a div element.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/README.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Chessboard } from \"react-chessboard\";\n\nexport default function App() {\n  return (\n    <div>\n      <Chessboard id=\"BasicBoard\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-chessboard\nDESCRIPTION: Installs the react-chessboard library using npm, making it available for use in your React project.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i react-chessboard\n```\n\n----------------------------------------\n\nTITLE: Running Storybook with npm\nDESCRIPTION: This snippet shows how to run Storybook, allowing you to test and visualize your changes within the React Chessboard component library.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/README.md#_snippet_6\n\nLANGUAGE: npm\nCODE:\n```\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote with Git\nDESCRIPTION: This snippet demonstrates how to stage, commit, and push your changes to your forked repository on GitHub. The `--set-upstream` flag connects your local branch to the remote branch.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/README.md#_snippet_7\n\nLANGUAGE: git\nCODE:\n```\ngit add .\ngit commit -m \"feature/cool-new-feature\"\ngit push --set-upstream origin your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Updating and Creating New Branch with Git\nDESCRIPTION: This snippet describes how to update your main branch with the latest changes from the upstream repository and then create a new branch for further contributions.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/README.md#_snippet_8\n\nLANGUAGE: git\nCODE:\n```\ngit checkout main\ngit pull upstream main\ngit checkout -b your-new-branch-name\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Git\nDESCRIPTION: This snippet demonstrates how to clone the forked repository onto your local development machine. It includes navigating to the newly created directory after cloning.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/README.md#_snippet_3\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://github.com/yourUsernameHere/react-chessboard.git\ncd react-chessboard\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch with Git\nDESCRIPTION: This snippet shows how to create a new branch for your contribution using Git. This isolates your changes and allows for easier pull request management.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/README.md#_snippet_4\n\nLANGUAGE: git\nCODE:\n```\ngit checkout -b your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Remote with Git\nDESCRIPTION: This snippet configures the upstream remote, linking your local repository to the original Clariity/react-chessboard repository. This is essential for staying up to date with the main project.\nSOURCE: https://github.com/clariity/react-chessboard/blob/main/README.md#_snippet_5\n\nLANGUAGE: git\nCODE:\n```\ngit remote add upstream https://github.com/Clariity/react-chessboard.git\n```"
  }
]