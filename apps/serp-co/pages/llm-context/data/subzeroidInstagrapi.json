[
  {
    "owner": "subzeroid",
    "repo": "instagrapi",
    "content": "TITLE: Login to Instagram with Username and Password in Instagrapi\nDESCRIPTION: This code snippet demonstrates how to log in to an Instagram account using a username and password with the instagrapi library. It also shows how to set a proxy and retrieve account settings and user information.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/interactions.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncl.login(\"instagrapi\", \"42\")\n# cl.login(\"instagrapi\", \"42\", verification_code=\"123456\")  # with 2FA verification_code\n# cl.login_by_sessionid(\"peiWooShooghahdi2Eip7phohph0eeng\")\ncl.set_proxy(\"socks5://127.0.0.1:30235\")\n# cl.set_proxy(\"http://username:password@127.0.0.1:8080\")\n# cl.set_proxy(\"socks5://username:password@127.0.0.1:30235\")\n# when addressing the proxy via hostname:\n# cl.set_proxy(\"socks5h://username:password@exampleproxy.tld:30235\")\n\nprint(cl.get_settings())\nprint(cl.user_info(cl.user_id))\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Session with Instagrapi\nDESCRIPTION: Demonstrates how to save and load session settings to avoid logging in repeatedly. The first snippet logs in and saves the session to a JSON file.  The second snippet loads the session and attempts to login using the session, followed by a call to `get_timeline_feed()` to validate the session. Requires the `instagrapi` library.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/best-practices.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\n\ncl = Client()\ncl.login(USERNAME, PASSWORD)\ncl.dump_settings(\"session.json\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\n\ncl = Client()\ncl.load_settings(\"session.json\")\ncl.login (USERNAME, PASSWORD) # this doesn't actually login using username/password but uses the session\ncl.get_timeline_feed() # check session\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Instagrapi Session Settings\nDESCRIPTION: This snippet illustrates how to save the current instagrapi session settings to a file and then load them later. This allows the library to reuse the same device and IP, improving trust with Instagram.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/interactions.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncl = Client()\ncl.login(USERNAME, PASSWORD)\ncl.dump_settings('/tmp/dump.json')\n```\n\nLANGUAGE: python\nCODE:\n```\ncl = Client()\ncl.load_settings('/tmp/dump.json')\ncl.login(USERNAME, PASSWORD)\ncl.get_timeline_feed()  # check session\n```\n\n----------------------------------------\n\nTITLE: Get Account Information Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to retrieve private information for your Instagram account, such as email and phone number, using the `account_info()` method from the Instagrapi library. It requires an initialized Instagrapi client and a logged-in user. The output is a dictionary containing the account details.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/account.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n>>> cl.account_info().dict()\n{'pk': 1903424587,\n 'username': 'example',\n 'full_name': 'Example Example',\n 'is_private': False,\n 'profile_pic_url': HttpUrl('https://instagram.frix7-1.fna.fbcdn.net/v/t51.2885-19/s150x150/200092102_504535360754500_904902738723095864_n.jpg?tp=1&_nc_ht=instagram.frix7-1.fna.fbcdn.net&_nc_ohc=T2ZT6yA6XzoAX9MvAQA&edm=AJlpnE4BAAAA&ccb=7-4&oh=3865b51bb33b365c9de8bcf9775e519c&oe=60E982F2&_nc_sid=312772'),\n 'is_verified': False,\n 'biography': 'Engineer: Python, JavaScript, Erlang, Go, Swift\\n@dhbastards \\n@bestskatetrick \\n@asphalt_kings_lb \\n@best_drift_daily \\n@wrclive \\n@surferyone \\n@bmxtravel',\n 'external_url': 'https://example.org/',\n 'is_business': False,\n 'birthday': '1984-01-01',\n 'phone_number': '+79991234567',\n 'gender': 1,\n 'email': '...@gmail.com'}\n```\n\n----------------------------------------\n\nTITLE: Get Media Info and IDs - Instagrapi - Python\nDESCRIPTION: This snippet demonstrates how to use Instagrapi to log in, retrieve media IDs from codes and URLs, and fetch detailed media information.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> cl.media_pk_from_code(\"B-fKL9qpeab\")\n2278584739065882267\n\n>>> cl.media_pk_from_code(\"B8jnuB2HAbyc0q001y3F9CHRSoqEljK_dgkJjo0\")\n2243811726252050162\n\n>>> cl.media_pk_from_url(\"https://www.instagram.com/p/BjNLpA1AhXM/\")\n1787135824035452364\n\n>>> cl.media_info(1787135824035452364).dict()\n{'pk': 1787135824035452364,\n 'id': '1787135824035452364_1903424587',\n 'code': 'BjNLpA1AhXM',\n 'taken_at': datetime.datetime(2018, 5, 25, 15, 46, 53, tzinfo=datetime.timezone.utc),\n 'media_type': 8,\n 'product_type': '',\n 'thumbnail_url': None,\n 'location': {'pk': 260916528,\n  'name': 'Foros, Crimea',\n  'address': '',\n  'lng': 33.7878,\n  'lat': 44.3914,\n  'external_id': 181364832764479,\n  'external_id_source': 'facebook_places'},\n 'user': {'pk': 1903424587,\n  'username': 'example',\n  'full_name': 'Example Example',\n  'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/123884060_...&oe=5FD7600E')},\n 'comment_count': 0,\n 'like_count': 48,\n 'caption_text': '@mind__flowers в Форосе под дождём, 24 мая 2018 #downhill #skateboarding #downhillskateboarding #crimea #foros',\n 'usertags': [],\n 'video_url': None,\n 'view_count': 0,\n 'video_duration': 0.0,\n 'title': '',\n 'resources': [{'pk': 1787135361353462176,\n   'video_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t50.2886-16/33464086_3755...0e2362', scheme='https', ...),\n   'thumbnail_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-15/e35/3220311...AE7332', scheme='https', ...),\n   'media_type': 2},\n  {'pk': 1787135762219834098,\n   'video_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t50.2886-16/32895...61320_n.mp4', scheme='https', ...),\n   'thumbnail_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-15/e35/3373413....8480_n.jpg', scheme='https', ...),\n   'media_type': 2},\n  {'pk': 1787133803186894424,\n   'video_url': None,\n   'thumbnail_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-15/e35/324307712_n.jpg...', scheme='https', ...),\n   'media_type': 1}]}\n```\n\n----------------------------------------\n\nTITLE: Uploading Photo with Caption - Instagrapi Python\nDESCRIPTION: This code snippet demonstrates how to upload a photo to Instagram using the Instagrapi library, including setting a caption with hashtags and mentioning users. It also shows how to customize accessibility captions and disable like/view counts and comments.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> media = cl.photo_upload(\n    \"/app/image.jpg\",\n    \"Test caption for photo with #hashtags and mention users such @example\",\n    extra_data={\n        \"custom_accessibility_caption\": \"alt text example\",\n        \"like_and_view_counts_disabled\": 1,\n        \"disable_comments\": 1,\n    }\n)\n\n>>> media.dict()\n{'pk': 2573347427873726764,\n 'id': '2573347427873726764_1903424587',\n 'code': 'CO2Xdn6FCEs',\n 'taken_at': datetime.datetime(2021, 5, 14, 10, 9, tzinfo=datetime.timezone.utc),\n 'media_type': 1,\n 'product_type': 'feed',\n 'thumbnail_url': HttpUrl('https://instagram.fhel5-1.fna.fbcdn.net/v/t51.2885-15/e35/185486538_463522984736407_6315244509641560230_n.jpg?se=8&tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=107&_nc_ohc=6tBMsh9HlmMAX9zI_jc&edm=ACqnv0EBAAAA&ccb=7-4&oh=2b46f1e9fbd2416eb7d08b398e0f639e&oe=60C30437&_nc_sid=9ec724&ig_cache_key=MjU3MzM0NzQyNzg3MzcyNjc2NA%3D%3D.2-ccb7-4', scheme='https', host='instagram.fhel5-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/185486538_463522984736407_6315244509641560230_n.jpg', query='se=8&tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=107&_nc_ohc=6tBMsh9HlmMAX9zI_jc&edm=ACqnv0EBAAAA&ccb=7-4&oh=2b46f1e9fbd2416eb7d08b398e0f639e&oe=60C30437&_nc_sid=9ec724&ig_cache_key=MjU3MzM0NzQyNzg3MzcyNjc2NA%3D%3D.2-ccb7-4'),\n 'location': None,\n 'user': {'pk': 1903424587,\n  'username': 'example',\n  'full_name': 'Example Example',\n  'profile_pic_url': HttpUrl('https://instagram.fhel5-1.fna.fbcdn.net/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg?tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_ohc=EtzrL0pAdg8AX-Xq8yS&edm=ACqnv0EBAAAA&ccb=7-4&oh=e2fd6a9d362f8587ea8123f23b248f1b&oe=60C2CB91&_nc_sid=9ec724', scheme='https', host='instagram.fhel5-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg', query='tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_ohc=EtzrL0pAdg8AX-Xq8yS&edm=ACqnv0EBAAAA&ccb=7-4&oh=e2fd6a9d362f8587ea8123f23b248f1b&oe=60C2CB91&_nc_sid=9ec724'),\n  'stories': []},\n 'comment_count': 0,\n 'like_count': 0,\n 'has_liked': None,\n 'caption_text': 'Test caption for photo with #hashtags and mention users such @example',\n 'usertags': [],\n 'video_url': None,\n 'view_count': 0,\n 'video_duration': 0.0,\n 'title': '',\n 'resources': []}\n```\n\n----------------------------------------\n\nTITLE: Edit Account Information Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to edit your Instagram profile data, specifically the external URL, using the `account_edit()` method from the Instagrapi library. It requires an initialized Instagrapi client and a logged-in user. The output is an Account object reflecting the updated profile information.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/account.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.account_edit(external_url='https://github.com/subzeroid/instagrapi')\nAccount(pk=1903424587, username='example', ..., external_url='https://github.com/subzeroid/instagrapi')\n```\n\n----------------------------------------\n\nTITLE: Basic Instagrapi Usage in Python\nDESCRIPTION: Demonstrates basic usage of the Instagrapi library, including importing the client, logging in with credentials, retrieving a user ID from a username, and fetching a specified number of media items for that user. It requires a valid Instagram username and password.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\n\ncl = Client()\ncl.login(ACCOUNT_USERNAME, ACCOUNT_PASSWORD)\n\nuser_id = cl.user_id_from_username(\"example\")\nmedias = cl.user_medias(user_id, 20)\n```\n\n----------------------------------------\n\nTITLE: Creating, Modifying, and Deleting Highlights with Instagrapi\nDESCRIPTION: This section demonstrates the creation, modification, and deletion of Instagram highlights using Instagrapi. It includes examples of creating a new highlight, changing its title and cover, adding and removing stories, and finally deleting the highlight.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/highlight.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.highlight_create(\"Test\", [\"2722223419628084989_29817608135\"])\nHighlight(pk='17920472818962144', id='highlight:17920472818962144', latest_reel_media=1638734336, ...)\n\n>>> cl.highlight_change_title(17907771728171896, \"Example title\")\nHighlight(pk='17907771728171896', id='highlight:17907771728171896', latest_reel_media=1638039687, ...)\n\n>>> cl.highlight_change_cover(17907771728171896, \"/tmp/test.jpg\")  # recommend 720x720\nHighlight(pk='17907771728171896', id='highlight:17907771728171896', ...)\n\n>>> cl.highlight_add_stories(17907771728171896, [2722223419628084989])\nHighlight(pk='17907771728171896', id='highlight:17907771728171896', latest_reel_media=1638734336, ...)\n\n>>> cl.highlight_remove_stories(17907771728171896, [2722223419628084989])\nHighlight(pk='17907771728171896', id='highlight:17907771728171896', latest_reel_media=1638039687, ...)\n\n>>> cl.highlight_delete(17920472818962144)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Instagrapi Client Initialization and Login\nDESCRIPTION: This snippet demonstrates how to initialize the Instagrapi client and log in to an Instagram account. Replace `USERNAME` and `PASSWORD` with your actual credentials. Ensure you have the `instagrapi` library installed.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/track.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n```\n\n----------------------------------------\n\nTITLE: Uploading Photo with Usertags and Location - Instagrapi Python\nDESCRIPTION: This code snippet illustrates how to upload a photo with user tags and location information using Instagrapi. It retrieves user information by username and uses it to create a Usertag object. It also creates a Location object with the specified name, latitude, and longitude.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> from instagrapi.types import Usertag, Location\n\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> example = cl.user_info_by_username('example')\n>>> media = cl.photo_upload(\n    \"/app/image.jpg\",\n    \"Test caption for photo with #hashtags and mention users such @example\",\n    usertags=[Usertag(user=example, x=0.5, y=0.5)],\n    location=Location(name='Russia, Saint-Petersburg', lat=59.96, lng=30.29)\n)\n\n>>> media.dict()\n{'pk': 2573355619819242434,\n 'id': '2573355619819242434_1903424587',\n 'code': 'CO2ZU1QFMPC',\n 'taken_at': datetime.datetime(2021, 5, 14, 10, 25, 16, tzinfo=datetime.timezone.utc),\n 'media_type': 1,\n 'product_type': 'feed',\n 'thumbnail_url': HttpUrl('https://instagram.fhel5-1.fna.fbcdn.net/v/t51.2885-15/e35/185426950_474602463640866_4228057388625412955_n.jpg?se=8&tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=106&_nc_ohc=7NrVvAEG7f4AX_XPaOK&edm=ACqnv0EBAAAA&ccb=7-4&oh=bd2c90c2dcb693184e07c2777e09bb0b&oe=60C4E326&_nc_sid=9ec724&ig_cache_key=MjU3MzM1NTYxOTgxOTI0MjQzNA%3D%3D.2-ccb7-4', scheme='https', host='instagram.fhel5-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/185426950_474602463640866_4228057388625412955_n.jpg', query='se=8&tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=106&_nc_ohc=7NrVvAEG7f4AX_XPaOK&edm=ACqnv0EBAAAA&ccb=7-4&oh=bd2c90c2dcb693184e07c2777e09bb0b&oe=60C4E326&_nc_sid=9ec724&ig_cache_key=MjU3MzM1NTYxOTgxOTI0MjQzNA%3D%3D.2-ccb7-4'),\n 'location': {'pk': 107617247320879,\n  'name': 'Russia, Saint-Petersburg',\n  'address': 'Russia, Saint-Petersburg',\n  'lng': 30.30605,\n  'lat': 59.93318,\n  'external_id': 107617247320879,\n  'external_id_source': 'facebook_places'},\n 'user': {'pk': 1903424587,\n  'username': 'example',\n  'full_name': 'Example Example',\n  'profile_pic_url': HttpUrl('https://instagram.fhel5-1.fna.fbcdn.net/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg?tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_ohc=EtzrL0pAdg8AX-Xq8yS&edm=ACqnv0EBAAAA&ccb=7-4&oh=e2fd6a9d362f8587ea8123f23b248f1b&oe=60C2CB91&_nc_sid=9ec724', scheme='https', host='instagram.fhel5-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg', query='tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_ohc=EtzrL0pAdg8AX-Xq8yS&edm=ACqnv0EBAAAA&ccb=7-4&oh=e2fd6a9d362f8587ea8123f23b248f1b&oe=60C2CB91&_nc_sid=9ec724'),\n  'stories': []},\n 'comment_count': 0,\n 'like_count': 0,\n 'has_liked': None,\n 'caption_text': 'Test caption for photo with #hashtags and mention users such @example',\n 'usertags': [{'user': {'pk': 1903424587,\n    'username': 'example',\n    'full_name': 'Example Example',\n    'profile_pic_url': HttpUrl('https://instagram.fhel5-1.fna.fbcdn.net/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg?tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_ohc=EtzrL0pAdg8AX-Xq8yS&edm=ACqnv0EBAAAA&ccb=7-4&oh=e2fd6a9d362f8587ea8123f23b248f1b&oe=60C2CB91&_nc_sid=9ec724', scheme='https', host='instagram.fhel5-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg', query='tp=1&_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_ohc=EtzrL0pAdg8AX-Xq8yS&edm=ACqnv0EBAAAA&ccb=7-4&oh=e2fd6a9d362f8587ea8123f23b248f1b&oe=60C2CB91&_nc_sid=9ec724'),\n    'stories': []},\n   'x': 0.5,\n   'y': 0.5}],\n 'video_url': None,\n 'view_count': 0,\n 'video_duration': 0.0,\n 'title': '',\n 'resources': []}\n```\n\n----------------------------------------\n\nTITLE: Advanced Instagrapi Usage in Python\nDESCRIPTION: This snippet showcases a more advanced example of using Instagrapi. It includes logging in with 2FA, retrieving media information from a URL, downloading a video, retrieving user and hashtag information, and uploading a video to a story with mentions, links, hashtags and media.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\nfrom instagrapi.types import StoryMention, StoryMedia, StoryLink, StoryHashtag\n\ncl = Client()\ncl.login(USERNAME, PASSWORD, verification_code=\"<2FA CODE HERE>\")\n\nmedia_pk = cl.media_pk_from_url('https://www.instagram.com/p/CGgDsi7JQdS/')\nmedia_path = cl.video_download(media_pk)\nexample = cl.user_info_by_username('example')\nhashtag = cl.hashtag_info('dhbastards')\n\ncl.video_upload_to_story(\n    media_path,\n    \"Credits @example\",\n    mentions=[StoryMention(user=example, x=0.49892962, y=0.703125, width=0.8333333333333334, height=0.125)],\n    links=[StoryLink(webUri='https://github.com/subzeroid/instagrapi')],\n    hashtags=[StoryHashtag(hashtag=hashtag, x=0.23, y=0.32, width=0.5, height=0.22)],\n    medias=[StoryMedia(media_pk=media_pk, x=0.5, y=0.5, width=0.6, height=0.8)]\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Direct Messages to Users and Threads in Python\nDESCRIPTION: This example demonstrates how to send direct messages to specific users or threads using the `direct_send` function. It shows how to send messages to oneself using the user ID and to a specific thread using the thread ID.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_send('How are you?', user_ids=[cl.user_id])  # send youself\nDirectMessage(id=30076213210116812312341061613568, user_id=None, thread_id=34028236684171031231231231233331238762, timestamp=datetime.datetime(2021, 8, 31, 18, 33, 5, 127298, tzinfo=datetime.timezone.utc), item_type=None, is_shh_mode=None, reactions=None, text=None, animated_media=None, media=None, media_share=None, reel_share=None, story_share=None, felix_share=None, clip=None, placeholder=None)\n\n>>> cl.direct_send('How are you?', thread_ids=[thread.id])\nDirectMessage(id=30076213210116812312341061613568, user_id=None, thread_id=34028236684171031231231231233331238762, timestamp=datetime.datetime(2021, 8, 31, 18, 33, 5, 127298, tzinfo=datetime.timezone.utc), item_type=None, is_shh_mode=None, reactions=None, text=None, animated_media=None, media=None, media_share=None, reel_share=None, story_share=None, felix_share=None, clip=None, placeholder=None)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Media and Account Insights with Instagrapi in Python\nDESCRIPTION: This code snippet demonstrates how to use the `instagrapi` library to retrieve insights for Instagram media posts and account. It initializes the client, logs in, retrieves media feed insights, account insights, and insights for a specific media post given its URL. Dependencies include the `instagrapi` library and predefined `USERNAME` and `PASSWORD` variables for login.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/insight.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\n\ncl = Client()\ncl.login(USERNAME, PASSWORD)\n\ncl.insights_media_feed_all(\"VIDEO\", \"ONE_WEEK\", \"LIKE_COUNT\", 42)\ncl.insights_account()\n\nmedia_pk = cl.media_pk_from_url('https://www.instagram.com/p/CP5h-I1FuPr/')\ncl.insights_media(media_pk)\n```\n\n----------------------------------------\n\nTITLE: Upload Video to Story with Mentions/Links/Hashtags Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to upload a video to an Instagram Story with mentions, links, hashtags and media. It downloads a video, retrieves user and hashtag information, and then uploads the video with the specified metadata. It requires an initialized Instagrapi client `cl`, username, and password for login.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/story.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\nfrom instagrapi.types import StoryMention, StoryMedia, StoryLink, StoryHashtag\n\ncl = Client()\ncl.login(USERNAME, PASSWORD)\n\nmedia_pk = cl.media_pk_from_url('https://www.instagram.com/p/CGgDsi7JQdS/')\nmedia_path = cl.video_download(media_pk)\nexample = cl.user_info_by_username('example')\nhashtag = cl.hashtag_info('dhbastards')\n\ncl.video_upload_to_story(\n    media_path,\n    \"Credits @example\",\n    mentions=[StoryMention(user=example, x=0.49892962, y=0.703125, width=0.8333333333333334, height=0.125)],\n    links=[StoryLink(webUri='https://github.com/subzeroid/instagrapi')],\n    hashtags=[StoryHashtag(hashtag=hashtag, x=0.23, y=0.32, width=0.5, height=0.22)],\n    medias=[StoryMedia(media_pk=media_pk, x=0.5, y=0.5, width=0.6, height=0.8)],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Client and Retrieving Direct Threads in Python\nDESCRIPTION: This code snippet demonstrates how to initialize an Instagrapi client, log in, and retrieve direct message threads. It showcases how to access thread properties such as the thread's primary key (`pk`), users involved, and messages.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> thread = cl.direct_threads(1)[0]\n>>> thread.pk\n18123276039123479\n\n>>> thread.users\n[UserShort(pk=123123123, username='something', full_name='Dima Something', profile_pic_url=HttpUrl('https://instagram.frix7-1.fna.fbcdn.net/v/t51.2885-19/s150x150/11374323_1630877790512376_1081658215_a.jpg?_nc_ht=instagram.frix7-1.fna.fbcdn.net&_nc_ohc=k22oMvVv8xEAX-UEVRB&edm=AI8ESKwBAAAA&ccb=7-4&oh=be799948b28f19d85158153d886d16d3&oe=6135D80F&_nc_sid=195af5', scheme='https', host='instagram.frix7-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-19/s150x150/11374323_1630877790512376_1081658215_a.jpg', query='_nc_ht=instagram.frix7-1.fna.fbcdn.net&_nc_ohc=k22oMvVv8xEAX-UEVRB&edm=AI8ESKwBAAAA&ccb=7-4&oh=be799948b28f19d85158153d886d16d3&oe=6135D80F&_nc_sid=195af5'), profile_pic_url_hd=None, is_private=False, stories=[])]\n\n>>> thread.messages[0]\nDirectMessage(id=300761992574947211231231241955932160, user_id=123123123, thread_id=None, timestamp=datetime.datetime(2021, 8, 31, 18, 20, 28, 754135, tzinfo=datetime.timezone.utc), item_type='text', is_shh_mode=False, reactions=None, text='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua', animated_media=None, media=None, media_share=None, reel_share=None, story_share=None, felix_share=None, clip=None, placeholder=None)\n```\n\n----------------------------------------\n\nTITLE: Get User Info by Username Instagrapi Python\nDESCRIPTION: This example shows how to get user information by username using `user_info_by_username`. The returned information is a dictionary, where the `HttpUrl` is a custom class representing URL types. Requires an initialized `instagrapi.Client` instance as `cl` and an existing instagram username. Returns a dictionary with keys such as `pk`, `username`, `full_name`, `is_private` and more.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/user.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.user_info_by_username('example').dict()\n{'pk': 1903424587,\n 'username': 'example',\n 'full_name': 'Example Example',\n 'is_private': False,\n 'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/123884060_803537687159702_2508263208740189974_n.jpg?...', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', ...'),\n 'is_verified': False,\n 'media_count': 102,\n 'follower_count': 576,\n 'following_count': 538,\n 'biography': 'Engineer: Python, JavaScript, Erlang',\n 'external_url': HttpUrl('https://example.org/', scheme='https', host='example.org', tld='com', host_type='domain', path='/'),\n 'is_business': False}\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy with Instagrapi\nDESCRIPTION: Demonstrates how to configure a proxy using the Instagrapi library. It initializes a Client object, fetches the current IP address, sets the proxy with the specified credentials and address, and then fetches the IP address again to verify the proxy is in effect. Requires the `instagrapi` library.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/best-practices.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\n\ncl = Client()\nbefore_ip = cl._send_public_request(\"https://api.ipify.org/\")\ncl.set_proxy(\"http://<api_key>:wifi;ca;;;toronto@proxy.soax.com:9137\")\nafter_ip = cl._send_public_request(\"https://api.ipify.org/\")\n\nprint(f\"Before: {before_ip}\")\nprint(f\"After: {after_ip}\")\n```\n\n----------------------------------------\n\nTITLE: Code Verification Handler with Instagrapi (Python)\nDESCRIPTION: This snippet defines a function `challenge_code_handler` to handle code verification challenges. It receives the username and challenge choice (SMS or Email) and returns the corresponding code.  It relies on helper functions `get_code_from_sms` and `get_code_from_email` to retrieve the code. The code uses `ChallengeChoice` enum from `instagrapi.mixins.challenge`.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/challenge_resolver.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi.mixins.challenge import ChallengeChoice\n\n\ndef challenge_code_handler(username, choice):\n    if choice == ChallengeChoice.SMS:\n        return get_code_from_sms(username)\n    elif choice == ChallengeChoice.EMAIL:\n        return get_code_from_email(username)\n    return False\n\ncl = Client()\ncl.challenge_code_handler = challenge_code_handler\ncl.login(IG_USERNAME, IG_PASSWORD)\n```\n\n----------------------------------------\n\nTITLE: Build and Upload Story Instagrapi Python\nDESCRIPTION: This snippet demonstrates using StoryBuilder to create a story with a correctly formatted resolution, user mentions, and then upload it. It downloads a video, retrieves user information, builds the story using StoryBuilder, and uploads it using `cl.video_upload_to_story()`. Requires an Instagrapi client and valid paths.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/story.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi.types import StoryMention, StoryMedia, StoryLink\nfrom instagrapi.story import StoryBuilder\n\nmedia_pk = cl.media_pk_from_url('https://www.instagram.com/p/CGgDsi7JQdS/')\nmedia_path = cl.video_download(media_pk)\nexample = cl.user_info_by_username('example')\n\nbuildout = StoryBuilder(\n    media_path,\n    'Credits @example',\n    [StoryMention(user=example)],\n    Path('/path/to/background_720x1280.jpg')\n).video(15)  # seconds\n\ncl.video_upload_to_story(\n    buildout.path,\n    \"Credits @example\",\n    mentions=buildout.mentions,\n    links=[StoryLink(webUri='https://github.com/subzeroid/instagrapi')],\n    medias=[StoryMedia(media_pk=media_pk)]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Locale and Timezone for Instagrapi\nDESCRIPTION: This code snippet shows how to set the proxy, locale, and timezone for the Instagrapi client. This is important for simulating a user from a specific geographic location and ensuring correct time-based operations.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/interactions.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncl = Client()\n\n# Los Angles user:\ncl.set_proxy('http://los:angeles@proxy.address:8080')\ncl.set_locale('en_US')\ncl.set_timezone_offset(-7 * 60 * 60)  # Los Angeles UTC (GMT) -7 hours == -25200 seconds\ncl.get_settings()\n{\n    ...\n    'user_agent': 'Instagram 194.0.0.36.172 Android (26/8.0.0; 480dpi; 1080x1920; Xiaomi; MI 5s; capricorn; qcom; en_US; 301484483)',\n    'country': 'US',\n    'country_code': 1,\n    'locale': 'en_US',\n    'timezone_offset': -25200\n}\n\n# Moscow user:\ncl.set_proxy('socks5://moscow:proxy@address:8080')\ncl.set_locale('ru_RU')\ncl.set_country_code(7)  # +7\ncl.set_timezone_offset(3 * 3600)  # Moscow UTC+3\ncl.get_settings()\n{\n    ...\n    'user_agent': 'Instagram 194.0.0.36.172 Android (26/8.0.0; 480dpi; 1080x1920; Xiaomi; MI 5s; capricorn; qcom; ru_RU; 301484483)',\n    'country': 'RU',\n    'country_code': 7,\n    'locale': 'ru_RU',\n    'timezone_offset': 10800\n}\n```\n\n----------------------------------------\n\nTITLE: Download Video by URL - Instagrapi - Python\nDESCRIPTION: Downloads a video from a given Instagram media URL to a specified folder using the Instagrapi library, after authenticating with the Instagram API.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> cl.media_pk_from_url(\"https://www.instagram.com/p/BqNQJleFoSJ/\")\n1913256444155036809\n\n>>> video_url = cl.media_info(1913256444155036809).video_url\n>>> cl.video_download_by_url(video_url, folder='/tmp')\nPosixPath('/tmp/45588546_367538213983456_6830188946193737023_n.mp4')\n```\n\n----------------------------------------\n\nTITLE: Facebook Place Search with Coordinates - Instagrapi\nDESCRIPTION: This snippet demonstrates searching for a place using Facebook search, providing both a query string and geographical coordinates.  It then retrieves and prints the place information dictionary.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/location.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> place = cl.fbsearch_places(\"Villa Sirot\", 46.7032028502, 4.3093986902)[0]\n>>> place.dict()\n{'pk': 1001956449,\n 'name': 'Villa Sirot',\n 'phone': '',\n 'website': '',\n 'category': '',\n 'hours': {},\n 'address': None,\n 'city': None,\n 'zip': None,\n 'lng': 4.3093986902426,\n 'lat': 46.703202850229,\n 'external_id': 165573396905197,\n 'external_id_source': 'facebook_places'}\n\n>>> cl.location_info(place.pk).dict()\n{'pk': 1001956449,\n 'name': 'Villa Sirot',\n 'phone': '',\n 'website': None,\n 'category': 'Local Business',\n 'hours': {'status': '',\n  'current_status': '',\n  'hours_today': '',\n  'schedule': []},\n 'address': None,\n 'city': None,\n 'zip': None,\n 'lng': None,\n 'lat': None,\n 'external_id': 165573396905197,\n 'external_id_source': None}\n```\n\n----------------------------------------\n\nTITLE: Posting Comments with Instagrapi in Python\nDESCRIPTION: This snippet shows how to post a comment on an Instagram media using the `media_comment` method of the Instagrapi client. It also shows how to reply to an existing comment using the `replied_to_comment_id` parameter. The snippet requires a valid Instagram client, username, password, and media ID.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/comment.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> media_id = cl.media_id(cl.media_pk_from_url('https://www.instagram.com/p/ByU3LAslgWY/'))\n\n>>> comment = cl.media_comment(media_id, \"Test comment\")\n>>> comment.dict()\n{'pk': 17926777897585108,\n 'text': 'Test comment',\n 'user': {'pk': 1903424587,\n  'username': 'example',\n  'full_name': 'Example Example',\n  'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=EtzrL0pAdg8AX9pE_wN&edm=ABQSlwABAAAA&ccb=7-4&oh=e04d45b7651140e7fef61b1f67f1f408&oe=60C65AD1&_nc_sid=b2b2bd', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=EtzrL0pAdg8AX9pE_wN&edm=ABQSlwABAAAA&ccb=7-4&oh=e04d45b7651140e7fef61b1f67f1f408&oe=60C65AD1&_nc_sid=b2b2bd'),\n  'stories': []},\n 'created_at_utc': datetime.datetime(2021, 5, 15, 14, 50, 3, tzinfo=datetime.timezone.utc),\n 'content_type': 'comment',\n 'status': 'Active',\n 'has_liked': None,\n 'like_count': None}\n\n>>> comment = cl.media_comment(media_id, \"Test comment 2\", replied_to_comment_id=comment.pk)\n>>> comment.dict()\n{'pk': 17926777897585109,\n 'text': 'Test comment 2',\n 'user': {'pk': 1903424587,\n  'username': 'example',\n  'full_name': 'Example Example',\n  'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=EtzrL0pAdg8AX9pE_wN&edm=ABQSlwABAAAA&ccb=7-4&oh=e04d45b7651140e7fef61b1f67f1f408&oe=60C65AD1&_nc_sid=b2b2bd', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=EtzrL0pAdg8AX9pE_wN&edm=ABQSlwABAAAA&ccb=7-4&oh=e04d45b7651140e7fef61b1f67f1f408&oe=60C65AD1&_nc_sid=b2b2bd'),\n  'stories': []},\n 'created_at_utc': datetime.datetime(2021, 5, 15, 14, 50, 3, tzinfo=datetime.timezone.utc),\n 'content_type': 'comment',\n 'status': 'Active',\n 'has_liked': None,\n 'like_count': None}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Comments with Instagrapi in Python\nDESCRIPTION: This snippet shows how to retrieve all comments on an Instagram media using the `media_comments` method of the Instagrapi client. It accesses the first comment in the list and prints its dictionary representation using `comment.dict()`. It requires a valid Instagram client, username, password, and media ID.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/comment.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> comments = cl.media_comments(media_id)\n>>> comments[0].dict()\n {'pk': 17926777897585108,\n 'text': 'Test comment',\n 'user': {'pk': 1903424587,\n  'username': 'example',\n  'full_name': 'Example Example',\n  'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=EtzrL0pAdg8AX9pE_wN&edm=AId3EpQBAAAA&ccb=7-4&oh=e3fbafcdb63cec3535004e85eb3397ae&oe=60C65AD1&_nc_sid=705020', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-19/s150x150/156689363_269505058076642_6448820957073669709_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=EtzrL0pAdg8AX9pE_wN&edm=AId3EpQBAAAA&ccb=7-4&oh=e3fbafcdb63cec3535004e85eb3397ae&oe=60C65AD1&_nc_sid=705020'),\n  'stories': []},\n 'created_at_utc': datetime.datetime(2021, 5, 15, 14, 50, 3, tzinfo=datetime.timezone.utc),\n 'content_type': 'comment',\n 'status': 'Active',\n 'has_liked': False,\n 'like_count': 0}\n```\n\n----------------------------------------\n\nTITLE: Location Search and Info Retrieval - Instagrapi\nDESCRIPTION: This snippet demonstrates how to search for a location using geographical coordinates and retrieve detailed location information using the Instagrapi library. It uses the `location_search` and `location_complete` methods to find a location and complete any missing fields.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/location.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> location = cl.location_search(59.96, 30.29)[0]\n>>> location.dict()\n{'pk': None,\n 'name': 'Russia, Saint-Petersburg',\n 'address': 'Russia, Saint-Petersburg',\n 'lng': 30.30605,\n 'lat': 59.93318,\n 'external_id': 107617247320879,\n 'external_id_source': 'facebook_places'}\n\n>>> location = cl.location_complete(location)\n>>> location.dict()\n{'pk': 107617247320879,\n 'name': 'Russia, Saint-Petersburg',\n 'address': 'Russia, Saint-Petersburg',\n 'lng': 30.30605,\n 'lat': 59.93318,\n 'external_id': 107617247320879,\n 'external_id_source': 'facebook_places'}\n```\n\n----------------------------------------\n\nTITLE: Send Confirmation Phone Number Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to send a confirmation code to a specified phone number using the `send_confirm_phone_number()` method from the Instagrapi library. It requires an initialized Instagrapi client and a logged-in user. The output is a dictionary indicating the success or failure of the phone number confirmation process, along with related settings.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/account.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.send_confirm_phone_number(\"+5599999999\")\n{\n    'action': 'sms_sent',\n    'phone_verification_settings': {'max_sms_count': 2,\n    'resend_sms_delay_sec': 60,\n    'robocall_count_down_time_sec': 30,\n    'robocall_after_max_sms': True},\n    'status': 'ok'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Messages and Answering Threads in Python\nDESCRIPTION: This code shows how to fetch messages from a direct message thread and send a reply using the `direct_messages` and `direct_answer` functions of the Instagrapi library.  It demonstrates how to interact with existing conversations.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> message = cl.direct_messages(thread.id, 1)[0]\nDirectMessage(id=300712312341231237412312312360, user_id=12312312, thread_id=None, timestamp=datetime.datetime(2021, 8, 31, 18, 20, 28, 754135, tzinfo=datetime.timezone.utc), item_type='text', is_shh_mode=False, reactions=None, text='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua', animated_media=None, media=None, media_share=None, reel_share=None, story_share=None, felix_share=None, clip=None, placeholder=None)\n\n>>> cl.direct_answer(thread.id, 'Hello!')\nDirectMessage(id=30076213210116812312341061613568, user_id=None, thread_id=34028236684171031231231231233331238762, timestamp=datetime.datetime(2021, 8, 31, 18, 33, 5, 127298, tzinfo=datetime.timezone.utc), item_type=None, is_shh_mode=None, reactions=None, text=None, animated_media=None, media=None, media_share=None, reel_share=None, story_share=None, felix_share=None, clip=None, placeholder=None)\n```\n\n----------------------------------------\n\nTITLE: Get News Inbox V1 Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to retrieve the \"Active recently\" news inbox data using the `news_inbox_v1()` method from the Instagrapi library. This fetches both old and new stories.  It requires an initialized Instagrapi client and a logged-in user. The `mark_as_seen` parameter defaults to `False`. The output is a dictionary containing the news inbox information.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/account.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.news_inbox_v1()\n{'story_mentions': {'mentions_count_string': '0 stories mention you.',\n  'reels': [],\n  'product_stories_count': '0 stories mention your product.',\n  'product_stories_reels': []},\n 'counts': {'likes': 0,\n  'activity_feed_dot_badge': 0,\n  'relationships': 0,\n  'new_posts': 0,\n  'comments': 0,\n  'comment_likes': 0,\n  'shopping_notification': 0,\n  'fundraiser': 0,\n  'usertags': 0,\n  'campaign_notification': 0,\n  'photos_of_you': 0,\n  'story_mentions': 0,\n  'requests': 0},\n 'last_checked': 1625468461.1633658,\n 'friend_request_stories': [],\n 'new_stories': [{'story_type': 159,\n   'type': 13,\n   'args': {'rich_text': 'An unrecognized XiaoMi MI 5s just logged in near Moscow, Russia, RU',\n    'destination': 'login_activity',\n    'icon_url': 'https://i.instagram.com/static/images/activity/info-1.5.png/3385260677b8.png',\n    'should_icon_apply_filter': True,\n    'icon_should_apply_filter': True,\n    'extra': {'lat': 55.7522, 'long': 37.6156},\n    'actions': ['hide'],\n    'timestamp': 1625475888.805998,\n    'tuuid': '0ceff44c-dd70-11eb-8080-808080808080',\n    'clicked': False},\n   'counts': {},\n   'pk': 'xjQlWRMfNO+f739i2qZ1zf8HJTo='}],\n 'old_stories': [{'type': 3,\n   'story_type': 101,\n   'args': {'links': [{'start': 24,\n      'end': 33,\n  ...\n```\n\n----------------------------------------\n\nTITLE: Sharing Media and Stories via Direct Message in Python\nDESCRIPTION: This snippet demonstrates how to share media and stories via direct message using the `direct_media_share` and `direct_story_share` functions. It shows how to share content with users using their IDs and also with entire threads.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_media_share(media.pk, user_ids=[cl.user_id])\nDirectMessage(id=3007629312312312312312300374016, user_id=None, thread_id=340282366812313212334410641298762, timestamp=datetime.datetime(2021, 8, 31, 19, 45, 20, 708276, tzinfo=datetime.timezone.utc), item_type=None, is_shh_mode=None, reactions=None, text=None, animated_media=None, media=None, media_share=None, reel_share=None, story_share=None, felix_share=None, clip=None, placeholder=None)\n\n>>> cl.direct_story_share(media.pk, user_ids=[cl.user_id])\nDirectMessage(id=30076291231321231369939116032, user_id=None, thread_id=340282312312312334410641298762, timestamp=datetime.datetime(2021, 8, 31, 19, 48, 12, 217677, tzinfo=datetime.timezone.utc), item_type=None, is_shh_mode=None, reactions=None, text=None, animated_media=None, media=None, media_share=None, reel_share=None, story_share=None, felix_share=None, clip=None, placeholder=None)\n\n>>> cl.direct_story_share(media.pk, thread_ids=[thread.id])\nDirectMessage(id=30076291231231230352896, user_id=None, thread_id=3402812312312310641298762, timestamp=datetime.datetime(2021, 8, 31, 19, 48, 38, 482706, tzinfo=datetime.timezone.utc), item_type=None, is_shh_mode=None, reactions=None, text=None, animated_media=None, media=None, media_share=None, reel_share=None, story_share=None, felix_share=None, clip=None, placeholder=None)\n```\n\n----------------------------------------\n\nTITLE: Creating a Note using Instagrapi\nDESCRIPTION: This snippet demonstrates how to create a new Instagram Direct Note using the `create_note` method from the Instagrapi client. The `text` parameter specifies the note's content, and the `audience` parameter controls who can view the note (0 for followers you follow back). The method returns a `Note` object, which can be accessed to view the note's details.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/notes.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> note = cl.create_note(\"Hello from Instagrapi, everyone can see it!\", 0)\n>>> print(note.dict())\n{'id': '17849203563031468', \n'text': 'Hello from Instagrapi, everyone can see it!', \n'user_id': 12312312312, \n'user': {\n  'pk': '12312312312', \n  'username': 'something', \n  'full_name': 'merimi on top', \n  'profile_pic_url': HttpUrl('https://scontent-dus1-1.cdninstagram.com/v/t51.2885-19/364347953_6289474204435297_7603222331512295081_n.jpg?stp=dst-jpg_s150x150&_nc_ht=scontent-dus1-1.cdninstagram.com&_nc_cat=101&_nc_ohc=DVaE0MQwn0YAX8-S8dm&edm=AE-H4JwBAAAA&ccb=7-5&oh=00_AfAnH4mHGMl7B5tqzU7b9PMz9qSC4QE_-EX067lwPHnN1w&oe=64DDA1CB&_nc_sid=cff473', ), \n  'profile_pic_url_hd': None, \n  'is_private': False, \n  'stories': []}, \n'audience': 0, \n'created_at': datetime.datetime(2023, 8, 13, 14, 33, 43, tzinfo=datetime.timezone.utc),\n'expires_at': datetime.datetime(2023, 8, 14, 14, 33, 43, tzinfo=datetime.timezone.utc), \n'is_emoji_only': False, \n'has_translation': False, \n'note_style': 0}\n```\n\n----------------------------------------\n\nTITLE: Change Profile Picture Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to change your Instagram profile picture using the `account_change_picture()` method from the Instagrapi library. It requires an initialized Instagrapi client, a logged-in user, and a path to the new profile picture. The output is a UserShort object representing the updated user profile.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/account.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> media_pk = cl.media_pk_from_url('https://www.instagram.com/p/BWnh360Fitr/')\n1560364774164147051\n\n>>> profile_pic_path = cl.photo_download(media_pk, folder='/tmp')\nPosixPath('/tmp/example_1560364774164147051.jpg')\n\n>>> cl.account_change_picture(profile_pic_path)\nUserShort(pk=1903424587, username='example', ...)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Notes using Instagrapi\nDESCRIPTION: This snippet demonstrates how to retrieve Instagram Direct Notes using the `get_notes` method from the Instagrapi client. The method returns a list of `Note` objects representing the current user's notes.  Each `Note` object contains information about the note, such as its ID, text, and audience.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/notes.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> notes = cl.get_notes()\n>>> print(notes)\n[Note(id='17849203563031468', text='Hello from Instagrapi, everyone can see it!', ..., has_translation=False, note_style=0), Note(id='17902958207826742', text='Am so happy 💃💃💃💃🙈🤭', ..., has_translation=False, note_style=0)]\n```\n\n----------------------------------------\n\nTITLE: Adding Random Delays in Instagrapi\nDESCRIPTION: Illustrates how to introduce random delays between requests to mimic real user behavior and avoid rate limits. This example initializes an Instagrapi Client object and sets the `delay_range` attribute to a list containing the minimum and maximum delay in seconds. Requires the `instagrapi` library.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/best-practices.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\n\ncl = Client()\n\n# adds a random delay between 1 and 3 seconds after each request\ncl.delay_range = [1, 3]\n```\n\n----------------------------------------\n\nTITLE: Get User Following Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to retrieve a dictionary of users that a specific user is following using the `user_following` method of the Instagrapi client.  The keys of the dictionary are user IDs and the values are `UserShort` objects containing basic information about the followed users. Requires an initialized `instagrapi.Client` instance as `cl`.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/user.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.user_following(cl.user_id)\n{\n  8530498223: UserShort(\n    pk=8530498223,\n    username=\"something\",\n    full_name=\"Example description\",\n    profile_pic_url=HttpUrl(\n      'https://instagram.frix7-1.fna.fbcdn.net/v/t5...9217617140_n.jpg',\n      scheme='https',\n      host='instagram.frix7-1.fna.fbcdn.net',\n      ...\n    ),\n  ),\n  49114585: UserShort(\n    pk=49114585,\n    username='gx1000',\n    full_name='GX1000',\n    profile_pic_url=HttpUrl(\n      'https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/10388...jpg',\n      scheme='https',\n      host='scontent-hel3-1.cdninstagram.com',\n      ...\n    )\n  ),\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Archive/Unarchive Media - Instagrapi - Python\nDESCRIPTION: This snippet shows how to archive and unarchive a media item using its media ID with the Instagrapi library.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> cl.media_archive('2155832952940083788_1903424587')\nTrue\n\n>>> cl.media_unarchive('2155832952940083788_1903424587')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Getting Highlight Information with Instagrapi\nDESCRIPTION: This snippet demonstrates how to retrieve highlight information using the `highlight_info` method from the Instagrapi library. It showcases the structure of the returned dictionary containing details like PK, ID, cover media, user information, title, and media IDs.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/highlight.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.highlight_info(17895485201104054).dict()\n{\n    'pk': 17895485201104054,\n    'id': 'highlight:17895485201104054',\n    'latest_reel_media': 1622366765,\n    'cover_media': {\n        'cropped_image_version': {'width': 150, 'height': 150, 'url': 'https://instagram.frix7-1.fna.fbcdn.net/v/t51.2885-...'},\n        'crop_rect': [0, 0.21855760773966576, 1, 0.7814423922603342],\n        'media_id': '2584323966581791455_8641392340'\n    },\n    'user': {\n        'pk': 8641392340,\n        'username': 'bestskatetrick',\n        'full_name': 'The Best Skate Tricks',\n        'profile_pic_url': HttpUrl('https://instagram.frix7-1.fna.fbcdn.net/v/t51.2885-19/s150x150/6526...'),\n        'profile_pic_url_hd': None,\n        'is_private': False,\n        'stories': []\n    },\n    'title': 'Picnic 2021',\n    'created_at': datetime.datetime(2021, 5, 29, 19, 39, 15, tzinfo=datetime.timezone.utc),\n    'is_pinned_highlight': False,\n    'media_count': 19,\n    'media_ids': [2584323966581791455, 2584328925731679183, 2584328595757338887, ...],  # story ids\n    'items': [Story, Story, Story, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Instagrapi client with session settings\nDESCRIPTION: This code snippet shows how to initialize the instagrapi Client with pre-existing settings, including uuids, cookies, device settings, and user agent. This is useful for maintaining a persistent session across multiple runs and devices.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/interactions.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsettings = {\n   \"uuids\": {\n      \"phone_id\": \"57d64c41-a916-3fa5-bd7a-3796c1dab122\",\n      \"uuid\": \"8aa373c6-f316-44d7-b49e-d74563f4a8f3\",\n      \"client_session_id\": \"6c296d0a-3534-4dce-b5aa-a6a6ab017443\",\n      \"advertising_id\": \"8dc88b76-dfbc-44dc-abbc-31a6f1d54b04\",\n      \"device_id\": \"android-e021b636049dc0e9\"\n   },\n   \"cookies\":  {},  # set here your saved cookies\n   \"last_login\": 1596069420.0000145,\n   \"device_settings\": {\n      \"cpu\": \"h1\",\n      \"dpi\": \"640dpi\",\n      \"model\": \"h1\",\n      \"device\": \"RS988\",\n      \"resolution\": \"1440x2392\",\n      \"app_version\": \"117.0.0.28.123\",\n      \"manufacturer\": \"LGE/lge\",\n      \"version_code\": \"168361634\",\n      \"android_release\": \"6.0.1\",\n      \"android_version\": 23\n   },\n   \"user_agent\": \"Instagram 117.0.0.28.123 Android (23/6.0.1; ...US; 168361634)\"\n}\n\ncl = Client(settings)\n```\n\n----------------------------------------\n\nTITLE: Sending Photos via Direct Message in Python\nDESCRIPTION: This code demonstrates how to send a photo via direct message to either a user or a thread.  It involves downloading the photo first and then using the `direct_send_photo` function.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> photo_path = cl.photo_download(cl.media_pk_from_url('https://www.instagram.com/p/BgqFyjqloOr/'))\n>>> cl.direct_send_photo(photo_path, user_ids=[cl.user_id])  # or\n>>> cl.direct_send_photo(photo_path, thread_ids=[thread.id])\nDirectMessage(id=300775273512312312312321568, user_id=None, thread_id=34028236123123123123128762, timestamp=datetime.datetime(2021, 9, 1, 14, 20, 24, 949673, tzinfo=datetime.timezone.utc), item_type=None, is_shh_mode=None, reactions=None, text=None, animated_media=None, media=None, media_share=None, reel_share=None, story_share=None, felix_share=None, clip=None, placeholder=None)\n```\n\n----------------------------------------\n\nTITLE: Download Story Video and Thumbnail Instagrapi Python\nDESCRIPTION: This snippet shows how to download a story's video and thumbnail using `cl.story_info()` to fetch the URLs, and then `cl.story_download_by_url()` to download the video and thumbnail. It relies on a valid story ID and an initialized Instagrapi client object `cl`.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/story.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> s = cl.story_info(2581281926631793076)\n\n>>> cl.story_download_by_url(s.video_url)  # url to mp4 file\nPosixPath('/app/189361307_229642088942817_9180243596650100310_n.mp4')\n\n>>> cl.story_download_by_url(s.thumbnail_url)  # URL to jpg file\nPosixPath('/app/191260083_2908005872746895_8988438451809588865_n.jpg')\n```\n\n----------------------------------------\n\nTITLE: Download Story by URL Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to download an Instagram Story using its URL. It first retrieves the story ID from the URL using `cl.story_pk_from_url()`, then downloads the story using `cl.story_download()`. The snippet assumes that `cl` is an initialized Instagrapi client object.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/story.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.story_download(cl.story_pk_from_url('https://www.instagram.com/stories/example/2581281926631793076/'))\nPosixPath('/app/189361307_229642088942817_9180243596650100310_n.mp4')\n```\n\n----------------------------------------\n\nTITLE: Like and Unlike Story Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to like and unlike an Instagram Story using its URL. It retrieves the story ID from the URL, gets story information, and then uses `cl.story_like()` and `cl.story_unlike()` to like and unlike the story. Requires an initialized Instagrapi client and valid story URL.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/story.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npk = cl.story_pk_from_url(\"https://instagram.com/stories/purely.anand/2884886531427631361/\")\ninfo = cl.story_info(pk).dict()\n\ncl.story_like(info['id']) # To like story\ncl.story_unlike(info['id']) # To unlike story\n\n# another way to unlike story\ncl.story_like(info['id'], revert=True)\n```\n\n----------------------------------------\n\nTITLE: Hashtag Media Chunk Retrieval with Cursor (Private Mobile API)\nDESCRIPTION: Demonstrates how to retrieve a chunk of media from a hashtag using the `hashtag_medias_v1_chunk` function from the Instagrapi client (`cl`). This method uses the Private Mobile API and supports pagination via a cursor (`max_id`).\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/hashtag.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> medias, cursor = cl.hashtag_medias_v1_chunk('test', max_amount=32, tab_key='recent')\n>>> len(medias)\n32\n>>> cursor\nQVFDR0dzT3FJT0V4amFjMaQ3czlGVzRKV3FNWDJqaE1mWmltWU5VWGYtbnV6RVpoOUlsR3dCN05RRmpLc2R5SVlCQTNaekV5bUVOV0F4Vno1MDkxN1Nndg==\n\n# NEXT cursor:\n\n>>> medias, cursor = cl.hashtag_medias_v1_chunk('test', max_amount=32, tab_key='recent', max_id=cursor)\n>>> len(medias)\n32\n>>> cursor\nQVFEUXpfM0RtaDdmMExPQ0k0UWRlaHFJa2RVdVlaX01LTzhkNF9Dd1N2UlhtVy1vSTZvMERfYW5XN205OTBRNFBCSVJ2ZTVfTG5ZMXVmY0VJbUM5TU9URQ==\n```\n\n----------------------------------------\n\nTITLE: Get Paginated User Media - Instagrapi - Python\nDESCRIPTION: This snippet uses a paginated interface to retrieve media from a specified user, allowing retrieval to resume from a stored cursor using Instagrapi.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n# Use paginated interface to resume fetch from stored cursor\n\n>>> end_cursor = None\n... for page in range(3):\n...     medias, end_cursor = client.user_medias_paginated(1903424587, 5, end_cursor=end_cursor)\n...     print([ m.taken_at.date().isoformat() for m in medias ])\n...\n```\n\n----------------------------------------\n\nTITLE: Get Media Oembed - Instagrapi - Python\nDESCRIPTION: This code snippet demonstrates retrieving Oembed information for a given Instagram media URL using the Instagrapi library after logging in.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> cl.media_oembed(\"https://www.instagram.com/p/B3mr1-OlWMG/\").dict()\n{'version': '1.0',\n 'title': 'В гостях у ДК @delai_krasivo_kaifui',\n 'author_name': 'example',\n 'author_url': 'https://www.instagram.com/example',\n 'author_id': 1903424587,\n 'media_id': '2154602296692269830_1903424587',\n 'provider_name': 'Instagram',\n 'provider_url': 'https://www.instagram.com',\n 'type': 'rich',\n 'width': 658,\n 'height': None,\n 'html': '<blockquote>...',\n 'thumbnail_url': 'https://instagram.frix7-1.fna.fbcdn.net/v...0655800983_n.jpg',\n 'thumbnail_width': 640,\n 'thumbnail_height': 480,\n 'can_view': True}\n```\n\n----------------------------------------\n\nTITLE: Handling API Request Errors in Python\nDESCRIPTION: This code snippet demonstrates how to handle potential errors when making API requests with Instagrapi. It attempts to retrieve media information using the `media_info_gql` method, and if a `ClientError` is raised (e.g., due to restricted video or a private account), it falls back to the `media_info_v1` method. This snippet assumes that `self` refers to an instance of a class containing the Instagrapi client.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef media_info(media_pk):\n    try:\n        return self.media_info_gql(media_pk)\n    except ClientError as e:\n        # Restricted Video: This video is not available in your country.\n        # Or media from private account\n        return self.media_info_v1(media_pk)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pending Inbox and Specific Thread in Python\nDESCRIPTION: This snippet illustrates retrieving threads from the pending inbox and fetching a specific thread by its ID using the Instagrapi library. It showcases how to access the messages within each thread and their associated properties.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_pending_inbox(1)[0]\nDirectThread(\n    pk=17881231232408606,\n    id=3402823668123123123949128156938656669726,\n    messages=[\n        DirectMessage(\n            id=30073094913010429825449992959033344,\n            user_id=123123123123,\n            ...\n        )\n    ],\n    ...\n)\n\n>>> cl.direct_thread(thread.id, 1)\nDirectThread(\n    pk=18103276039108479,\n    id=340282366841710300949128373114263369599,\n    messages=[\n        DirectMessage(\n            id=30076199257494728485375741955932160,\n            user_id=7789547,\n            ...\n        )\n    ],\n    ...)\n```\n\n----------------------------------------\n\nTITLE: Fetching Top Location Media - Instagrapi\nDESCRIPTION: This snippet illustrates how to retrieve the top media posts associated with a specific location using the `location_medias_top` method of the Instagrapi client. It retrieves a specified amount of top media and prints the details of the first media item as a dictionary.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/location.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> medias = cl.location_medias_top(107617247320879, amount=2)\n>>> medias[0].dict()\n{'pk': 2574095228556148891,\n 'id': '2574095228556148891_8227888596',\n 'code': 'CO5BfjkHgCb',\n 'taken_at': datetime.datetime(2021, 5, 15, 11, 6, 25, tzinfo=datetime.timezone.utc),\n 'media_type': 2,\n 'product_type': 'feed',\n 'thumbnail_url': HttpUrl('https://instagram.fhel3-1.fna.fbcdn.net/v/t51.2885-15/e35/185874360_510656656615872_846247842213042525_n.jpg?tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=1&_nc_ohc=vUIk3PZPPrMAX_GGZ7n&edm=AP_V10EBAAAA&ccb=7-4&oh=e418e018b9fc07b7d6b78f0790ddb481&oe=60A24C1F&_nc_sid=4f375e', scheme='https', host='instagram.fhel3-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/185874360_510656656615872_846247842213042525_n.jpg', query='tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=1&_nc_ohc=vUIk3PZPPrMAX_GGZ7n&edm=AP_V10EBAAAA&ccb=7-4&oh=e418e018b9fc07b7d6b78f0790ddb481&oe=60A24C1F&_nc_sid=4f375e'),\n 'location': {'pk': 107617247320879,\n  'name': 'Russia, Saint-Petersburg',\n  'address': '',\n  'lng': 30.30605,\n  'lat': 59.93318,\n  'external_id': 107617247320879,\n  'external_id_source': 'facebook_places'},\n 'user': {'pk': 8227888596,\n  'username': 'mzefirov',\n  'full_name': 'МИХАИЛ ЗЕФИРОВ🌶️🔥ПРО ОТНОШЕНИЯ',\n  'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/54513886_664942437287042_6311410572676038656_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=mOWHIYJXbMsAX8wXvzf&edm=AP_V10EBAAAA&ccb=7-4&oh=90fa78d26bbb2c577dbc27d012c7cf09&oe=60C6A82B&_nc_sid=4f375e', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-19/s150x150/54513886_664942437287042_6311410572676038656_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=mOWHIYJXbMsAX8wXvzf&edm=AP_V10EBAAAA&ccb=7-4&oh=90fa78d26bbb2c577dbc27d012c7cf09&oe=60C6A82B&_nc_sid=4f375e'),\n  'stories': []},\n 'comment_count': 94,\n 'like_count': 3995,\n 'has_liked': None,\n 'caption_text': 'Антонина Роббинс, или немного о мотивации.\\n\\nСтавь ❤️и делись в сторис... это мотивирует.',\n 'usertags': [],\n 'video_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t50.2886-16/185466467_1373704339669543_4721533329541547409_n.mp4?_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_cat=107&_nc_ohc=IdbMAqYCjngAX987nBb&edm=AP_V10EBAAAA&ccb=7-4&oe=60A1DADD&oh=7c69dc13e5344f7095a94eb717b1ee9e&_nc_sid=4f375e', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t50.2886-16/185466467_1373704339669543_4721533329541547409_n.mp4', query='_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_cat=107&_nc_ohc=IdbMAqYCjngAX987nBb&edm=AP_V10EBAAAA&ccb=7-4&oe=60A1DADD&oh=7c69dc13e5344f7095a94eb717b1ee9e&_nc_sid=4f375e'),\n 'view_count': 36295,\n 'video_duration': 55.433,\n 'title': '',\n 'resources': []}\n```\n\n----------------------------------------\n\nTITLE: Deleting Messages in Python\nDESCRIPTION: This example demonstrates how to delete a specific message from a direct message thread using the `direct_message_delete` function, requiring both the thread ID and the message ID.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_message_delete(thread.id, message.pk)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Location Media - Instagrapi\nDESCRIPTION: This snippet demonstrates how to fetch the most recent media posts associated with a specific location using the `location_medias_recent` method of the Instagrapi client.  It retrieves a given amount of recent media and prints the dictionary representation of the first media item.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/location.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> medias = cl.location_medias_recent(107617247320879, amount=2)\n>>> medias[0].dict()\n{'pk': 2574187014843321420,\n 'id': '2574187014843321420_5600296444',\n 'code': 'CO5WXONKMxM',\n 'taken_at': datetime.datetime(2021, 5, 15, 13, 57, 6, tzinfo=datetime.timezone.utc),\n 'media_type': 1,\n 'product_type': '',\n 'thumbnail_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-15/e35/p1080x1080/186279877_479327446453989_5642409805215171470_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_cat=109&_nc_ohc=Nx9KwOGWXLYAX_bh1Dx&edm=AP_V10EBAAAA&ccb=7-4&oh=999395b5e4a3c688bcb388616f405161&oe=60C4C08C&_nc_sid=4f375e', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-15/e35/p1080x1080/186279877_479327446453989_5642409805215171470_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_cat=109&_nc_ohc=Nx9KwOGWXLYAX_bh1Dx&edm=AP_V10EBAAAA&ccb=7-4&oh=999395b5e4a3c688bcb388616f405161&oe=60C4C08C&_nc_sid=4f375e'),\n 'location': {'pk': 107617247320879,\n  'name': 'Russia, Saint-Petersburg',\n  'address': '',\n  'lng': 30.30605,\n  'lat': 59.93318,\n  'external_id': 107617247320879,\n  'external_id_source': 'facebook_places'},\n 'user': {'pk': 5600296444,\n  'username': 'sultanieriabinina',\n  'full_name': 'Султание Беляловна',\n  'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/92693550_492095081670507_2163230119093600256_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=_8hEZtz-JSIAX_NCxXx&edm=AP_V10EBAAAA&ccb=7-4&oh=17d2d1a8ae00765b8471cde868937c13&oe=60C69D73&_nc_sid=4f375e', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-19/s150x150/92693550_492095081670507_2163230119093600256_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=_8hEZtz-JSIAX_NCxXx&edm=AP_V10EBAAAA&ccb=7-4&oh=17d2d1a8ae00765b8471cde868937c13&oe=60C69D73&_nc_sid=4f375e'),\n  'stories': []},\n 'comment_count': 0,\n 'like_count': 0,\n 'has_liked': None,\n 'caption_text': '',\n 'usertags': [{'user': {'pk': 3955327494,\n    'username': '_parikmakher_irishka3127',\n    'full_name': 'ИрИнА',\n    'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/176040256_461659781826794_5379061705031591554_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=uVHqkpa8v0UAX-cmGUE&edm=AP_V10EBAAAA&ccb=7-4&oh=22db3640b911117484d78422eec4f778&oe=60C523D5&_nc_sid=4f375e', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-19/s150x150/176040256_461659781826794_5379061705031591554_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=uVHqkpa8v0UAX-cmGUE&edm=AP_V10EBAAAA&ccb=7-4&oh=22db3640b911117484d78422eec4f778&oe=60C523D5&_nc_sid=4f375e'),\n    'stories': []},\n   'x': 0.352,\n   'y': 0.292}],\n 'video_url': None,\n 'view_count': 0,\n 'video_duration': 0.0,\n 'title': '',\n 'resources': []}\n```\n\n----------------------------------------\n\nTITLE: Sending Videos via Direct Message in Python\nDESCRIPTION: This code demonstrates sending a video via direct message.  It first downloads the video from a given URL and then sends it either to a specified user or to an entire thread using `direct_send_video`.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> video_path = cl.video_download(cl.media_pk_from_url('https://www.instagram.com/p/B3rFQPblq40/'))\n>>> cl.direct_send_video(video_path, user_ids=[cl.user_id])  # or\n>>> cl.direct_send_video(video_path, thread_ids=[thread.id])\n```\n\n----------------------------------------\n\nTITLE: Query User Media - Instagrapi - Python\nDESCRIPTION: This snippet fetches the most recent media of a user using their user ID via the GraphQL endpoint with Instagrapi library.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> cl.user_medias_gql(1903424587, amount=1)[0].dict()\n{'pk': 2592252466151482347,\n 'id': '2592252466151482347_1903424587',\n 'code': 'CP5h-I1FuPr',\n 'taken_at': datetime.datetime(2021, 6, 9, 12, 9, 56, tzinfo=datetime.timezone.utc),\n 'media_type': 8,\n 'product_type': '',\n 'thumbnail_url': None,\n 'location': None,\n 'user': {'pk': 1903424587,\n  'username': 'example',\n  'full_name': '',\n  'profile_pic_url': None,\n  'profile_pic_url_hd': None,\n  'stories': []},\n 'comment_count': 5,\n 'like_count': 63,\n 'has_liked': None,\n 'caption_text': 'Любимые подвески ♥️ @daewon1song @tensortrucks',\n 'usertags': [{'user': {'pk': 53860445,\n    'username': 'tensortrucks',\n    'full_name': '',\n    'profile_pic_url': None,\n    'profile_pic_url_hd': None,\n    'stories': []},\n   'x': 0.3146666667,\n   'y': 0.368159204}],\n 'video_url': None,\n 'view_count': 0,\n 'video_duration': 0.0,\n 'title': '',\n 'resources': [{'pk': 2592252463089480898,\n   'video_url': None,\n   'thumbnail_url': HttpUrl('https://instagram.fhel5-1.fna.fbcdn.net/v/t51.2885-15/e35/s1080x1080/198404255_317668533141074_749682826672118306_n.jpg?_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=102&_nc_ohc=f8FR-bZNbp8AX-A6YQ4&edm=APU89FABAAAA&ccb=7-4&oh=864bb145a4fa7e523f5cc22f9ac5d015&oe=61145E4F&_nc_sid=86f79a', scheme='https', host='instagram.fhel5-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/s1080x1080/198404255_317668533141074_749682826672118306_n.jpg', query='_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=102&_nc_ohc=f8FR-bZNbp8AX-A6YQ4&edm=APU89FABAAAA&ccb=7-4&oh=864bb145a4fa7e523f5cc22f9ac5d015&oe=61145E4F&_nc_sid=86f79a'),\n   'media_type': 1},\n  {'pk': 2592252463081081550,\n   'video_url': None,\n   'thumbnail_url': HttpUrl('https://instagram.fhel5-1.fna.fbcdn.net/v/t51.2885-15/e35/s1080x1080/198228498_303261361473979_3031095263106513772_n.jpg?_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=107&_nc_ohc=C9SeKrAO6poAX-nXhCG&edm=APU89FABAAAA&ccb=7-4&oh=6aab825e12fef746449be22c322762a1&oe=61132FB0&_nc_sid=86f79a', scheme='https', host='instagram.fhel5-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/s1080x1080/198228498_303261361473979_3031095263106513772_n.jpg', query='_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=107&_nc_ohc=C9SeKrAO6poAX-nXhCG&edm=APU89FABAAAA&ccb=7-4&oh=6aab825e12fef746449be22c322762a1&oe=61132FB0&_nc_sid=86f79a'),\n   'media_type': 1},\n  {'pk': 2592252463056089912,\n   'video_url': None,\n   'thumbnail_url': HttpUrl('https://instagram.fhel5-1.fna.fbcdn.net/v/t51.2885-15/e35/s1080x1080/199142152_323583732599636_4553823395468898634_n.jpg?_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=108&_nc_ohc=_feIkorChpsAX_wzTff&edm=APU89FABAAAA&ccb=7-4&oh=a22a2f5b30772fbbb02db92b9394e981&oe=61147D59&_nc_sid=86f79a', scheme='https', host='instagram.fhel5-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/s1080x1080/199142152_323583732599636_4553823395468898634_n.jpg', query='_nc_ht=instagram.fhel5-1.fna.fbcdn.net&_nc_cat=108&_nc_ohc=_feIkorChpsAX_wzTff&edm=APU89FABAAAA&ccb=7-4&oh=a22a2f5b30772fbbb02db92b9394e981&oe=61147D59&_nc_sid=86f79a'),\n   'media_type': 1}]}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Location Info by ID - Instagrapi\nDESCRIPTION: This snippet demonstrates how to retrieve location information using the location's primary key (ID) with the `location_info` method of the Instagrapi client. It then prints the location details as a dictionary.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/location.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> location = cl.location_info(107617247320879)\n>>> location.dict()\n{'pk': 107617247320879,\n 'name': 'Russia, Saint-Petersburg',\n 'address': '',\n 'lng': 30.30605,\n 'lat': 59.93318,\n 'external_id': None,\n 'external_id_source': None}\n```\n\n----------------------------------------\n\nTITLE: Upload Photo to Story Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to upload a photo to an Instagram Story using the `cl.photo_upload_to_story()` method. It requires the path to the photo file.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/story.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncl.photo_upload_to_story('/app/image.jpg')\n```\n\n----------------------------------------\n\nTITLE: Chunked Comments Retrieval in Python with Instagrapi\nDESCRIPTION: This snippet demonstrates how to retrieve comments in chunks using the `media_comments_chunk` method. It retrieves two chunks of comments, utilizing the `next_min_id` to paginate through the results. It requires a valid Instagram client, media ID, and the initial setup including login and media ID retrieval.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/comment.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> (comments_part1, next_min_id) = cl.media_comments_chunk(media_id, 100)\n>>> next_min_id\nQVFBQmZCa1dxaFB5eFpBY2luVFMwLWdmN2ZCcUV6OF9hQWlIQk12ZWZqUlctZ2pOa1J5YjJ6bFY5Q1doSGNuUmpxSS1DdXRvZ0NLemJrR1hXd2p0dS1JMg==\n>>> (comments_part2, next_min_id) = cl.media_comments_chunk(media_id, 100, next_min_id)\n>>> next_min_id\nQVFEbHpIWmpFc3BNUkgzUFVuOGZOQlhDQ1hHeWlVWHlJSnBhb2FHbFB3YlJtNThnOUlrd01JUWdKRmRwZTRpWWU0bnZmX3VMNHlwcDBkWTJpZjQ2NE9SeQ==\n```\n\n----------------------------------------\n\nTITLE: Uploading Video to Direct Message with Instagrapi (Python)\nDESCRIPTION: This code snippet demonstrates how to upload a video file to an Instagram Direct thread using the `video_upload_to_direct` function.  It takes the path to the video file and a list of thread IDs as input. The video is analyzed and a thumbnail is generated before uploading.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.video_upload_to_direct(video_path, thread_ids=[thread.id])\nAnalyzing video file \"/.../example_2155839952940084788.mp4\"\nGenerating thumbnail \"/.../example_2155839952940084788.mp4.jpg\"...\n```\n\n----------------------------------------\n\nTITLE: Send Confirmation Email Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to send a confirmation email to a specified address using the `send_confirm_email()` method from the Instagrapi library. It requires an initialized Instagrapi client and a logged-in user. The output is a dictionary indicating the success or failure of the email sending process and related information such as error messages.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/account.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.send_confirm_email(\"addr@example.com\")\n{\n    'is_email_legit': False,\n    'title': 'Email Already in Use',\n    'body': 'The email address you entered is already used on your account. Enter a different one to update your contact info.',\n    'error_type': 'email_unchanged',\n    'status': 'ok'\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Followers Keys Instagrapi Python\nDESCRIPTION: This snippet shows how to retrieve a dictionary containing the keys of a user's followers using the `user_followers` method. It assumes the `cl` object is an initialized `instagrapi.Client` and `cl.user_id` represents the target user ID. The keys represent the user IDs of the followers.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/user.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.user_followers(cl.user_id).keys()\ndict_keys([5563084402, 43848984510, 1498977320, ...])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thread by Participants in Python\nDESCRIPTION: This code snippet retrieves a direct message thread by specifying the participants (user IDs) involved. It utilizes the `direct_thread_by_participants` function to fetch the relevant thread.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_thread_by_participants([cl.user_id])\nDirectThread(pk=178612312342, id=340282366812312312312341298762, messages=[DirectMessage(id=30076214123123123123123864, user_id=1903424587, thread_id=None, timestamp=datetime.datetime(2021, 8, 31, 18, 33, 49, 107154, ...)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reels by User ID - Instagrapi Python\nDESCRIPTION: This code snippet demonstrates how to retrieve a specified number of recent reels from a given user ID using the Instagrapi library.  It calls the `user_clips_v1` method and then prints the dictionary representation of the first retrieved reel object.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> clips = cl.user_clips_v1(25025320, amount=2)\n>>> clips[0].dict()\n\n{'pk': '3052048407587698594',\n 'id': '3052048407587698594_25025320',\n 'code': 'CpbDdszj7ei',\n 'taken_at': datetime.datetime(2023, 3, 5, 21, 50, 4, tzinfo=datetime.timezone.utc),\n 'media_type': 2,\n 'product_type': 'clips',\n 'thumbnail_url': HttpUrl('https://scontent-den4-1.cdninstagram.com/v/t51.2885-15/333966975_152901010970043_8971338145148712917_n.jpg?stp=dst-jpg_e15_p150x150&_nc_ht=scontent-den4-1.cdninstagram.com&_nc_cat=1&_nc_ohc=rRuJ7u4YrqEAX-UEMFq&edm=ACHbZRIBAAAA&ccb=7-5&ig_cache_key=MzA1MjA0ODQwNzU4NzY5ODU5NA%3D%3D.2-ccb7-5&oh=00_AfC_tNEWVjJLM5RQYUiQJFHQZSmvnDtAcpzs42DRSYt1pQ&oe=6409C451&_nc_sid=4a9e64', scheme='https', host='scontent-den4-1.cdninstagram.com', tld='com', host_type='domain', port='443', path='/v/t51.2885-15/333966975_152901010970043_8971338145148712917_n.jpg', query='stp=dst-jpg_e15_p150x150&_nc_ht=scontent-den4-1.cdninstagram.com&_nc_cat=1&_nc_ohc=rRuJ7u4YrqEAX-UEMFq&edm=ACHbZRIBAAAA&ccb=7-5&ig_cache_key=MzA1MjA0ODQwNzU4NzY5ODU5NA%3D%3D.2-ccb7-5&oh=00_AfC_tNEWVjJLM5RQYUiQJFHQZSmvnDtAcpzs42DRSYt1pQ&oe=6409C451&_nc_sid=4a9e64'),\n 'location': {'pk': 213011753,\n  'name': 'Sydney, Australia',\n  'phone': '',\n  'website': '',\n  'category': '',\n  'hours': {},\n  'address': '',\n  'city': '',\n  'zip': None,\n  'lng': 151.20797,\n  'lat': -33.86751,\n  'external_id': 110884905606108,\n  'external_id_source': 'facebook_places'},\n....\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Instagrapi Usage: Login and Media Retrieval\nDESCRIPTION: This code demonstrates the basic usage of the Instagrapi library for logging into an Instagram account and retrieving user media. It initializes the client, logs in with provided credentials, retrieves the user ID from the username, and fetches the user's media.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\n\ncl = Client()\ncl.login(ACCOUNT_USERNAME, ACCOUNT_PASSWORD)\n\nuser_id = cl.user_id_from_username(ACCOUNT_USERNAME)\nmedias = cl.user_medias(user_id, 20)\n```\n\n----------------------------------------\n\nTITLE: Password Change Handler with Instagrapi (Python)\nDESCRIPTION: This code snippet defines a function `change_password_handler` that generates a random password and assigns it to the `change_password_handler` attribute of the `Client` object.  This allows the program to automatically respond to password change challenges from Instagram. It depends on the `Client` class from the `instagrapi` library and the `random` module.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/challenge_resolver.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef change_password_handler(username):\n    # Simple way to generate a random string\n    chars = list(\"abcdefghijklmnopqrstuvwxyz1234567890!&£@#\")\n    password = \"\".join(random.sample(chars, 8))\n    return password\n\ncl = Client()\ncl.change_password_handler = change_password_handler\ncl.login(IG_USERNAME, IG_PASSWORD)\n```\n\n----------------------------------------\n\nTITLE: Listing User Highlights with Instagrapi\nDESCRIPTION: This snippet shows how to retrieve a list of highlights for a given user ID using the `user_highlights` method. The method returns a list of `Highlight` objects.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/highlight.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.user_highlights(29817608135)\n[Highlight(pk='17907771728171896', id='highlight:17907771728171896', latest_reel_media=1638039687, ...), ...]\n```\n\n----------------------------------------\n\nTITLE: Facebook Place Search - Instagrapi\nDESCRIPTION: This snippet shows how to search for places using Facebook's search functionality via the Instagrapi library. It demonstrates searching for a place by name and then retrieving detailed information about the place using its primary key.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/location.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> place = cl.fbsearch_places('Perch')[2]\n>>> place.dict()\n{\n 'pk': 3824034,\n 'name': 'Perch',\n 'phone': '',\n 'website': '',\n 'category': '',\n 'hours': {},\n 'address': None,\n 'city': None,\n 'zip': None,\n 'lng': -118.25135,\n 'lat': 34.04882,\n 'external_id': 207298912632228,\n 'external_id_source': 'facebook_places'\n}\n\n>>> cl.location_info(place.pk).dict()\n{\n 'pk': 3824034,\n 'name': 'Perch',\n 'phone': '(213) 802-1770',\n 'website': 'http://www.perchla.com',\n 'category': '',\n 'hours': {},\n 'address': '448 S Hill St',\n 'city': 'Los Angeles, California',\n 'zip': '90013',\n 'lng': -118.25135,\n 'lat': 34.04882,\n 'external_id': None,\n 'external_id_source': None\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Last Seen Note Time using Instagrapi\nDESCRIPTION: This snippet shows how to update the last seen time of the notes using the `last_seen_update_note` method of the Instagrapi client. This function acknowledges that the user has seen the notes.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/notes.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.last_seen_update_note()\n```\n\n----------------------------------------\n\nTITLE: Get Media Clips Music Canonical IDs\nDESCRIPTION: This code retrieves a list of music canonical IDs from a specified amount of reels. The `reels` method fetches media from Instagram, and the list comprehension extracts the `music_canonical_id` from the `clips_metadata` attribute of each media item.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/track.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> [media.clips_metadata['music_canonical_id'] for media in cl.reels(amount=10)]\n```\n\n----------------------------------------\n\nTITLE: Liking and Unliking Comments in Python with Instagrapi\nDESCRIPTION: This snippet demonstrates how to like and unlike a comment using the `comment_like` and `comment_unlike` methods respectively. It requires a valid comment ID. The methods return a boolean indicating the success of the operation.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/comment.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.comment_like(17926777897585108)\nTrue\n\n>>> cl.comment_unlike(17926777897585108)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Muting Video Calls in Direct Thread with Instagrapi (Python)\nDESCRIPTION: This snippet mutes video call notifications for a specific direct thread using the `direct_thread_mute_video_call` function. The function takes the thread ID as input and returns `True` if the muting is successful.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_thread_mute_video_call(340282366841710301949128122292511813703)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Download Album - Instagrapi - Python\nDESCRIPTION: Downloads an album from a given Instagram media ID to the current directory using the Instagrapi library.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/media.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> cl.media_pk_from_url(\"http://www.instagram.com/p/BjNLpA1AhXM/\")\n1787135824035452364\n\n>>> cl.album_download(1787135824035452364)\n[PosixPath('/app/example_1787135361353462176.mp4'),\n PosixPath('/app/example_1787135762219834098.mp4'),\n PosixPath('/app/example_1787133803186894424.jpg')]\n```\n\n----------------------------------------\n\nTITLE: Login Function with Session Handling in Instagrapi\nDESCRIPTION: Presents a complete login function that attempts to login using a saved session first and falls back to username and password if the session is invalid.  It handles potential `LoginRequired` exceptions and uses the same device UUIDs across logins. Requires the `instagrapi` library and `LoginRequired` exception, and the `logging` module.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/best-practices.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\nfrom instagrapi.exceptions import LoginRequired\nimport logging\n\nlogger = logging.getLogger()\n\ndef login_user():\n    \"\"\"\n    Attempts to login to Instagram using either the provided session information\n    or the provided username and password.\n    \"\"\"\n\n    cl = Client()\n    session = cl.load_settings(\"session.json\")\n\n    login_via_session = False\n    login_via_pw = False\n\n    if session:\n        try:\n            cl.set_settings(session)\n            cl.login(USERNAME, PASSWORD)\n\n            # check if session is valid\n            try:\n                cl.get_timeline_feed()\n            except LoginRequired:\n                logger.info(\"Session is invalid, need to login via username and password\")\n\n                old_session = cl.get_settings()\n\n                # use the same device uuids across logins\n                cl.set_settings({})\n                cl.set_uuids(old_session[\"uuids\"])\n\n                cl.login(USERNAME, PASSWORD)\n            login_via_session = True\n        except Exception as e:\n            logger.info(\"Couldn't login user using session information: %s\" % e)\n\n    if not login_via_session:\n        try:\n            logger.info(\"Attempting to login via username and password. username: %s\" % USERNAME)\n            if cl.login(USERNAME, PASSWORD):\n                login_via_pw = True\n        except Exception as e:\n            logger.info(\"Couldn't login user using username and password: %s\" % e)\n\n    if not login_via_pw and not login_via_session:\n        raise Exception(\"Couldn't login user with either password or session\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Comments in Bulk with Instagrapi in Python\nDESCRIPTION: This snippet demonstrates how to delete comments in bulk using the `comment_bulk_delete` method. It takes a media ID and a list of comment IDs as input.  It requires a valid Instagram client, media ID, and a list of comment IDs to delete.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/comment.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.comment_bulk_delete(media_id, [17926777897585108])\nTrue\n```\n\n----------------------------------------\n\nTITLE: Get Track Information by Canonical ID\nDESCRIPTION: This snippet retrieves detailed information about a track using its canonical ID. The `track_info_by_canonical_id` method fetches the track data, and the `.dict()` method converts it to a dictionary format for easy access. It takes `music_canonical_id` as a parameter.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/track.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.track_info_by_canonical_id(18159860503036324).dict()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Note using Instagrapi\nDESCRIPTION: This snippet demonstrates how to delete an Instagram Direct Note using the `delete_note` method from the Instagrapi client. The `note.id` parameter specifies the ID of the note to be deleted. The method returns a boolean indicating whether the deletion was successful.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/notes.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.delete_note(note.id)\n```\n\n----------------------------------------\n\nTITLE: Get Code from Email using IMAP (Python)\nDESCRIPTION: This Python code snippet demonstrates how to retrieve a verification code from an email using IMAP. It connects to a Gmail account, searches for unread emails, extracts the code based on a username pattern, and returns it. It depends on the `imaplib`, `email`, and `re` modules. It assumes `CHALLENGE_EMAIL` and `CHALLENGE_PASSWORD` are defined.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/challenge_resolver.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_code_from_email(username):\n    mail = imaplib.IMAP4_SSL(\"imap.gmail.com\")\n    mail.login(CHALLENGE_EMAIL, CHALLENGE_PASSWORD)\n    mail.select(\"inbox\")\n    result, data = mail.search(None, \"(UNSEEN)\")\n    assert result == \"OK\", \"Error1 during get_code_from_email: %s\" % result\n    ids = data.pop().split()\n    for num in reversed(ids):\n        mail.store(num, \"+FLAGS\", \"\\\\Seen\")  # mark as read\n        result, data = mail.fetch(num, \"(RFC822)\")\n        assert result == \"OK\", \"Error2 during get_code_from_email: %s\" % result\n        msg = email.message_from_string(data[0][1].decode())\n        payloads = msg.get_payload()\n        if not isinstance(payloads, list):\n            payloads = [msg]\n        code = None\n        for payload in payloads:\n            body = payload.get_payload(decode=True).decode()\n            if \"<div\" not in body:\n                continue\n            match = re.search(\">([^>]*?({u})[^<]*?)<\".format(u=username), body)\n            if not match:\n                continue\n            print(\"Match from email:\", match.group(1))\n            match = re.search(r\">(\\d{6})<\", body)\n            if not match:\n                print('Skip this email, \"code\" not found')\n                continue\n            code = match.group(1)\n            if code:\n                return code\n    return False\n```\n\n----------------------------------------\n\nTITLE: Marking Direct Thread as Unread with Instagrapi (Python)\nDESCRIPTION: This snippet shows how to mark a specific direct thread as unread using the `direct_thread_mark_unread` function. It requires the thread ID as input and returns `True` if the operation is successful.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_thread_mark_unread(340282366841710301949128122292511813703)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Get Track URI by Canonical ID\nDESCRIPTION: This code retrieves the URI of a track using its canonical ID.  It calls `track_info_by_canonical_id` to fetch track information and then accesses the `uri` attribute, which represents the URL of the track.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/track.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> track_uri = cl.track_info_by_canonical_id(18159860503036324).uri\n```\n\n----------------------------------------\n\nTITLE: Muting Direct Thread with Instagrapi (Python)\nDESCRIPTION: This code snippet demonstrates how to mute a direct thread using the `direct_thread_mute` function. It takes the thread ID as input and returns `True` upon successful execution, silencing notifications for the specified thread.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_thread_mute(340282366841710301949128122292511813703)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Download Track by URL\nDESCRIPTION: This snippet demonstrates how to download a track by its URL using the `track_download_by_url` method. The `url` parameter specifies the download URL, the `filename` is optional, and the `folder` parameter specifies the destination folder. The method returns the `Path` to the downloaded file.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/track.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.track_download_by_url(track_uri, folder=\"/tmp\")\n```\n\n----------------------------------------\n\nTITLE: Unmuting Video Calls in Direct Thread with Instagrapi (Python)\nDESCRIPTION: This snippet unmutes video call notifications for a specific direct thread using the `direct_thread_unmute_video_call` function. It requires the thread ID as input and returns `True` if the operation is successful, re-enabling video call notifications.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_thread_unmute_video_call(340282366841710301949128122292511813703)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Search Music Tracks\nDESCRIPTION: This code searches for music tracks based on a query string. The `search_music` method returns a list of `Track` objects. The example accesses the first track in the list and converts it to a dictionary using the `.dict()` method.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/track.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.search_music(\"love\")[0].dict()\n```\n\n----------------------------------------\n\nTITLE: Building Location JSON - Instagrapi\nDESCRIPTION: This snippet shows how to build a serialized JSON representation of a location object using the `location_build` method of the Instagrapi client. This is useful for storing or transmitting location data.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/location.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.location_build(location)\n'{\"name\":\"Russia, Saint-Petersburg\",\"address\":\"Russia, Saint-Petersburg\",\"lat\":59.93318,\"lng\":30.30605,\"external_source\":\"facebook_places\",\"facebook_places_id\":107617247320879}'\n```\n\n----------------------------------------\n\nTITLE: Upload Photo as Video Instagrapi Python\nDESCRIPTION: This snippet shows how to upload a photo to a story by treating it as a video. It uses the StoryBuilder to convert the photo into a video clip and then uploads it using `cl.video_upload_to_story()`. Requires a valid Instagrapi client.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/story.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbuildout = StoryBuilder('/app/image.jpg').photo()\ncl.video_upload_to_story(buildout.path)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Docker\nDESCRIPTION: This command runs the complete test suite within a Docker container, ensuring a consistent testing environment. It utilizes docker-compose to manage the container and its dependencies. The '--rm' flag removes the container after the tests are completed.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/development-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run --rm test\n```\n\n----------------------------------------\n\nTITLE: Unfollow Followers Instagrapi Python\nDESCRIPTION: This snippet demonstrates how to unfollow all of a user's followers using the Instagrapi library. It requires an initialized `instagrapi.Client` instance (`cl`) with valid login credentials (USERNAME, PASSWORD).  It iterates through the user's followers and unfollows each one using the `user_unfollow` method.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/user.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\ncl = Client()\ncl.login(USERNAME, PASSWORD)\n\nfollowers = cl.user_followers(cl.user_id)\nfor user_id in followers.keys():\n    cl.user_unfollow(user_id)\n```\n\n----------------------------------------\n\nTITLE: Advanced Instagrapi: Story Upload with Mentions, Links, and Hashtags\nDESCRIPTION: This example demonstrates a more complex use case of the Instagrapi library, specifically uploading a video to a story with mentions, links, and hashtags. It includes steps for downloading media, retrieving user and hashtag information, and then uploading the video with associated metadata.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom instagrapi import Client\nfrom instagrapi.types import StoryMention, StoryMedia, StoryLink, StoryHashtag\n\ncl = Client()\ncl.login(USERNAME, PASSWORD, verification_code=\"<2FA CODE HERE>\")\n\nmedia_pk = cl.media_pk_from_url('https://www.instagram.com/p/CGgDsi7JQdS/')\nmedia_path = cl.video_download(media_pk)\nsubzeroid = cl.user_info_by_username('subzeroid')\nhashtag = cl.hashtag_info('dhbastards')\n\ncl.video_upload_to_story(\n    media_path,\n    \"Credits @subzeroid\",\n    mentions=[StoryMention(user=subzeroid, x=0.49892962, y=0.703125, width=0.8333333333333334, height=0.125)],\n    links=[StoryLink(webUri='https://github.com/subzeroid/instagrapi')],\n    hashtags=[StoryHashtag(hashtag=hashtag, x=0.23, y=0.32, width=0.5, height=0.22)],\n    medias=[StoryMedia(media_pk=media_pk, x=0.5, y=0.5, width=0.6, height=0.8)]\n)\n```\n\n----------------------------------------\n\nTITLE: Unmuting Direct Thread with Instagrapi (Python)\nDESCRIPTION: This code snippet demonstrates how to unmute a previously muted direct thread using the `direct_thread_unmute` function. It takes the thread ID as input and returns `True` if the operation succeeds, restoring notifications for the specified thread.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/direct.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> cl.direct_thread_unmute(340282366841710301949128122292511813703)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Installing Instagrapi with pip\nDESCRIPTION: This command installs the instagrapi package using pip, the Python package installer. It ensures that the package and its dependencies are installed in the current Python environment.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install instagrapi\n```\n\n----------------------------------------\n\nTITLE: Executing Code in Devbox Environment\nDESCRIPTION: This command starts a development environment (devbox) using Docker. It allows developers to execute code within a pre-configured container with all necessary dependencies. The '--rm' flag removes the container after the session ends.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/development-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run --rm devbox\n(your code here)\n```\n\n----------------------------------------\n\nTITLE: Installing Instagrapi with pip\nDESCRIPTION: This snippet shows how to install the Instagrapi library using pip, the Python package installer. It's a simple command that fetches and installs the library and its dependencies.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install instagrapi\n```\n\n----------------------------------------\n\nTITLE: Instagrapi TOTP Example in Python\nDESCRIPTION: This example demonstrates how to generate a TOTP seed, generate a TOTP code, enable TOTP, and disable TOTP using the Instagrapi library. It requires an existing Instagrapi client object and a valid username and password. The TOTP seed should be stored securely after generation, and the backup codes returned by `totp_enable` should also be stored securely.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/totp.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> from instagrapi import Client\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> seed = cl.totp_generate_seed()\n\"67EIYPWCIJDTTVX632NEODKEU2PY5BIW\"\n\n>>> code = cl.totp_generate_code(seed)\n\"123456\"\n\n>>> cl.totp_enable(code)\n[\"1234 5678\", \"1234 5678\", \"1234 5678\", \"1234 5678\", \"1234 5678\"]\n\n>>> cl.totp_disable()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Debugging with pdb++\nDESCRIPTION: This code snippet shows how to set a breakpoint in Python code using the `breakpoint()` function. When the code is executed, it will drop into an interactive pdb++ debugger, allowing developers to step through the code, inspect variables, and diagnose issues. It requires pdb++ to be installed in the environment.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/development-guide.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef my_function():\n    breakpoint()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Python Package List\nDESCRIPTION: This code snippet provides a list of Python packages and their specific versions required for the instagrapi project. It includes libraries such as requests, PySocks, pydantic, moviepy, and pycryptodomex. These packages provide functionalities for HTTP requests, socket proxying, data validation, video editing, and cryptography, respectively.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/requirements.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrequests==2.32.3\nPySocks==1.7.1\npydantic==2.11.3\nmoviepy==1.0.3\npycryptodomex==3.22.0\n```\n\n----------------------------------------\n\nTITLE: Running Tests, Linting and Code Coverage with Docker\nDESCRIPTION: This command executes the full testing suite, including linting and code coverage checks, inside a Docker container. It mirrors the CI pipeline, ensuring code quality and adherence to standards. The `black` and `isort` tools are configured to automatically correct any detected issues.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/development-guide.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run --rm test\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading Python Package\nDESCRIPTION: These commands are used to build a source distribution package and upload it to a package index like PyPI using twine.  `python setup.py sdist` creates the distribution package, and `twine upload dist/*` uploads all files in the 'dist' directory.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython setup.py sdist\n```\n\nLANGUAGE: python\nCODE:\n```\ntwine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Hashtag Info and Media Retrieval with Instagrapi in Python\nDESCRIPTION: This snippet demonstrates how to use the Instagrapi library to retrieve hashtag information and associated media. It covers logging in to Instagram, fetching hashtag details, retrieving top posts, and retrieving recent posts.  The `USERNAME` and `PASSWORD` variables must be defined before running this code.\nSOURCE: https://github.com/subzeroid/instagrapi/blob/master/docs/usage-guide/hashtag.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from instagrapi import Client\n\n>>> cl = Client()\n>>> cl.login(USERNAME, PASSWORD)\n\n>>> hashtag = cl.hashtag_info('downhill')\n>>> hashtag.dict()\n{'id': 17841563089103670,\n 'name': 'downhill',\n 'media_count': 5178255,\n 'profile_pic_url': HttpUrl('https://instagram.fhel3-1.fna.fbcdn.net/v/t51.2885-15/e35/s150x150/184304495_294863488920457_8839934375675895594_n.jpg?tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=101&_nc_ohc=L3i9yzFUBR8AX_MAXgr&edm=ABZsPhsBAAAA&ccb=7-4&oh=21a944a197506a42658e8273d92740b7&oe=60C37E35&_nc_sid=4efc9f', scheme='https', host='instagram.fhel3-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/s150x150/184304495_294863488920457_8839934375675895594_n.jpg', query='tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=101&_nc_ohc=L3i9yzFUBR8AX_MAXgr&edm=ABZsPhsBAAAA&ccb=7-4&oh=21a944a197506a42658e8273d92740b7&oe=60C37E35&_nc_sid=4efc9f')}\n\n>>> medias = cl.hashtag_medias_top('downhill', amount=2)\n>>> medias[0].dict()\n{'pk': 2574092718364154697,\n 'id': '2574092718364154697_376712420',\n 'code': 'CO5A7BxA9tJ',\n 'taken_at': datetime.datetime(2021, 5, 15, 10, 49, 45, tzinfo=datetime.timezone.utc),\n 'media_type': 1,\n 'product_type': '',\n 'thumbnail_url': HttpUrl('https://instagram.fhel3-1.fna.fbcdn.net/v/t51.2885-15/e35/s1080x1080/186430270_473573763896149_2030909827389015824_n.jpg?tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=101&_nc_ohc=4jFHY_INCnMAX-7fObK&edm=AP_V10EBAAAA&ccb=7-4&oh=9fb0c4cdb01a7aa376a96c0df366d844&oe=60C4C01A&_nc_sid=4f375e', scheme='https', host='instagram.fhel3-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/s1080x1080/186430270_473573763896149_2030909827389015824_n.jpg', query='tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=101&_nc_ohc=4jFHY_INCnMAX-7fObK&edm=AP_V10EBAAAA&ccb=7-4&oh=9fb0c4cdb01a7aa376a96c0df366d844&oe=60C4C01A&_nc_sid=4f375e'),\n 'location': {'pk': 517543,\n  'name': 'Sestola',\n  'address': '',\n  'lng': 10.77328,\n  'lat': 44.2266,\n  'external_id': 103150459725396,\n  'external_id_source': 'facebook_places'},\n 'user': {'pk': 376712420,\n  'username': 'vascobica',\n  'full_name': '⚡Vasco Bica®⚡',\n  'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/96211403_922669918147090_5138958292701151232_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=tYlGX8kDuSgAX9WtBRF&edm=AP_V10EBAAAA&ccb=7-4&oh=ac96c75846d17519e53923a0ddb3aad0&oe=60C51486&_nc_sid=4f375e', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-19/s150x150/96211403_922669918147090_5138958292701151232_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=tYlGX8kDuSgAX9WtBRF&edm=AP_V10EBAAAA&ccb=7-4&oh=ac96c75846d17519e53923a0ddb3aad0&oe=60C51486&_nc_sid=4f375e'),\n  'stories': []},\n 'comment_count': 8,\n 'like_count': 327,\n 'has_liked': None,\n 'caption_text': 'Ready to fight ⚔️\\n#js7 \\n.\\n.\\n#swissmountainsports #racing #coppaitaliadh \\n#mirandabikeparts\\xa0#burning\\xa0#jumping \\xa0#whipit\\xa0#scrubit\\xa0#enduro\\xa0#mtblife\\xa0 #downhill\\xa0#mountainbiking\\xa0#sliding\\xa0#dirt\\xa0#dh\\xa0 #mtb\\xa0#bike\\xa0#bikelife\\xa0#friends\\xa0#mtbswitzerland\\xa0#downhillmtb\\xa0#valais\\xa0 #swissmountains\\xa0\\xa0#italy #italydownhill',\n 'usertags': [{'user': {'pk': 3636959873,\n    'username': 'christopherstrm',\n    'full_name': 'Christopher Ström',\n    'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/173775865_527371595096868_8991176723035066304_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=tbsAzTDoLtEAX_HaT9Z&edm=AP_V10EBAAAA&ccb=7-4&oh=94a18b3b4d0d39d9dbda849b4c23a5a9&oe=60C5192F&_nc_sid=4f375e', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-19/s150x150/173775865_527371595096868_8991176723035066304_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=tbsAzTDoLtEAX_HaT9Z&edm=AP_V10EBAAAA&ccb=7-4&oh=94a18b3b4d0d39d9dbda849b4c23a5a9&oe=60C5192F&_nc_sid=4f375e'),\n    'stories': []},\n   'x': 0.211352657,\n   'y': 0.8478260870000001}],\n 'video_url': None,\n 'view_count': 0,\n 'video_duration': 0.0,\n 'title': '',\n 'resources': []}\n\n>>> medias = cl.hashtag_medias_recent('downhill', amount=2)\n>>> medias[0].dict()\n{'pk': 2574205305714324167,\n 'id': '2574205305714324167_2984719638',\n 'code': 'CO5ahY6BzLH',\n 'taken_at': datetime.datetime(2021, 5, 15, 14, 33, 27, tzinfo=datetime.timezone.utc),\n 'media_type': 8,\n 'product_type': '',\n 'thumbnail_url': None,\n 'location': {'pk': 703017966745848,\n  'name': 'Le Canyon Du Diable',\n  'address': '',\n  'lng': 3.4480762482,\n  'lat': 43.6966105493,\n  'external_id': 703017966745848,\n  'external_id_source': 'facebook_places'},\n 'user': {'pk': 2984719638,\n  'username': 'lilian.champion',\n  'full_name': 'Lilian 🇨🇵',\n  'profile_pic_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-19/s150x150/169115203_291696755653751_6779914563403118432_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=VEqYwd5W1FYAX_7ID-6&edm=AP_V10EBAAAA&ccb=7-4&oh=7fe193da2e706c0cafd9e1d432734891&oe=60C59786&_nc_sid=4f375e', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-19/s150x150/169115203_291696755653751_6779914563403118432_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_ohc=VEqYwd5W1FYAX_7ID-6&edm=AP_V10EBAAAA&ccb=7-4&oh=7fe193da2e706c0cafd9e1d432734891&oe=60C59786&_nc_sid=4f375e'),\n  'stories': []},\n 'comment_count': 0,\n 'like_count': 0,\n 'has_liked': None,\n 'caption_text': \"Quand on te prend en photo sans que tu aies demandé et que la personne t'envoie tout par mail après...😂😁🤙🏻 Merci l'inconnu du coup \\n\\n#downhill #mountainlovers #ytowners #vanlife #vanlifefrance\",\n 'usertags': [],\n 'video_url': None,\n 'view_count': 0,\n 'video_duration': 0.0,\n 'title': '',\n 'resources': [{'pk': 2574205301050111226,\n   'video_url': None,\n   'thumbnail_url': HttpUrl('https://instagram.fhel3-1.fna.fbcdn.net/v/t51.2885-15/e35/184312115_2977220092557985_8274386175388868273_n.jpg?tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=101&_nc_ohc=YoLLGA0cAhsAX8MxnSo&edm=AP_V10EBAAAA&ccb=7-4&oh=b0f2740aaff1d80c5f5219ffa267a186&oe=60C4273E&_nc_sid=4f375e', scheme='https', host='instagram.fhel3-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/184312115_2977220092557985_8274386175388868273_n.jpg', query='tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=101&_nc_ohc=YoLLGA0cAhsAX8MxnSo&edm=AP_V10EBAAAA&ccb=7-4&oh=b0f2740aaff1d80c5f5219ffa267a186&oe=60C4273E&_nc_sid=4f375e'),\n   'media_type': 1},\n  {'pk': 2574205301083731874,\n   'video_url': None,\n   'thumbnail_url': HttpUrl('https://instagram.fhel6-1.fna.fbcdn.net/v/t51.2885-15/e35/186524178_143770224434390_4909324648747352588_n.jpg?tp=1&_nc_ht=instagram.fhel6-1.fna.fbcdn.net&_nc_cat=102&_nc_ohc=w6z9v4MwYg8AX9FdWk0&edm=AP_V10EBAAAA&ccb=7-4&oh=99295fa82472bf4a425fc49bd03c1310&oe=60C40AFC&_nc_sid=4f375e', scheme='https', host='instagram.fhel6-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/186524178_143770224434390_4909324648747352588_n.jpg', query='tp=1&_nc_ht=instagram.fhel6-1.fna.fbcdn.net&_nc_cat=102&_nc_ohc=w6z9v4MwYg8AX9FdWk0&edm=AP_V10EBAAAA&ccb=7-4&oh=99295fa82472bf4a425fc49bd03c1310&oe=60C40AFC&_nc_sid=4f375e'),\n   'media_type': 1},\n  {'pk': 2574205301066842492,\n   'video_url': None,\n   'thumbnail_url': HttpUrl('https://scontent-hel3-1.cdninstagram.com/v/t51.2885-15/e35/186787154_332065288355469_7843843424299639709_n.jpg?tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_cat=109&_nc_ohc=-qZy9_HakCQAX-Cqk9v&edm=AP_V10EBAAAA&ccb=7-4&oh=031077ab2f56db0bab7ffbc920f80a41&oe=60C4F57B&_nc_sid=4f375e', scheme='https', host='scontent-hel3-1.cdninstagram.com', tld='com', host_type='domain', path='/v/t51.2885-15/e35/186787154_332065288355469_7843843424299639709_n.jpg', query='tp=1&_nc_ht=scontent-hel3-1.cdninstagram.com&_nc_cat=109&_nc_ohc=-qZy9_HakCQAX-Cqk9v&edm=AP_V10EBAAAA&ccb=7-4&oh=031077ab2f56db0bab7ffbc920f80a41&oe=60C4F57B&_nc_sid=4f375e'),\n   'media_type': 1},\n  {'pk': 2574205301075310332,\n   'video_url': None,\n   'thumbnail_url': HttpUrl('https://instagram.fhel3-1.fna.fbcdn.net/v/t51.2885-15/e35/185727252_524026898594344_9165723485744355754_n.jpg?tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=104&_nc_ohc=45NguRpEtZQAX83VSGE&edm=AP_V10EBAAAA&ccb=7-4&oh=c8c087ecfba444d9d85f7bd059f42a2a&oe=60C5C3C2&_nc_sid=4f375e', scheme='https', host='instagram.fhel3-1.fna.fbcdn.net', tld='net', host_type='domain', path='/v/t51.2885-15/e35/185727252_524026898594344_9165723485744355754_n.jpg', query='tp=1&_nc_ht=instagram.fhel3-1.fna.fbcdn.net&_nc_cat=104&_nc_ohc=45NguRpEtZQAX83VSGE&edm=AP_V10EBAAAA&ccb=7-4&oh=c8c087ecfba444d9d85f7bd059f42a2a&oe=60C5C3C2&_nc_sid=4f375e'),\n   'media_type': 1}]}\n```"
  }
]