[
  {
    "owner": "reactphp",
    "repo": "promise",
    "content": "TITLE: Creating a Deferred Object in PHP\nDESCRIPTION: Creates a Deferred object representing an operation whose resolution is pending, with methods to access its promise and control its state.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$deferred = new React\\Promise\\Deferred();\n\n$promise = $deferred->promise();\n\n$deferred->resolve(mixed $value);\n$deferred->reject(\\Throwable $reason);\n```\n\n----------------------------------------\n\nTITLE: Using Deferred for Asynchronous Operations in PHP\nDESCRIPTION: Shows how to use the Deferred class to create promises for asynchronous operations that follow the callback pattern. The example demonstrates creating, resolving/rejecting a Deferred and consuming the resulting promise.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction getAwesomeResultPromise()\n{\n    $deferred = new React\\Promise\\Deferred();\n\n    // Execute a Node.js-style function using the callback pattern\n    computeAwesomeResultAsynchronously(function (\\Throwable $error, $result) use ($deferred) {\n        if ($error) {\n            $deferred->reject($error);\n        } else {\n            $deferred->resolve($result);\n        }\n    });\n\n    // Return the promise\n    return $deferred->promise();\n}\n\ngetAwesomeResultPromise()\n    ->then(\n        function ($value) {\n            // Deferred resolved, do something with $value\n        },\n        function (\\Throwable $reason) {\n            // Deferred rejected, do something with $reason\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating a Promise with Resolver and Canceller in PHP\nDESCRIPTION: Demonstrates how to create a Promise with a resolver function that controls the state of the promise and an optional canceller function that handles cancellation. The resolver receives $resolve and $reject callbacks to determine the promise's fate.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$resolver = function (callable $resolve, callable $reject) {\n    // Do some work, possibly asynchronously, and then\n    // resolve or reject.\n\n    $resolve($awesomeResult);\n    // or throw new Exception('Promise rejected');\n    // or $resolve($anotherPromise);\n    // or $reject($nastyError);\n};\n\n$canceller = function () {\n    // Cancel/abort any running operations like network connections, streams etc.\n\n    // Reject promise by throwing an exception\n    throw new Exception('Promise cancelled');\n};\n\n$promise = new React\\Promise\\Promise($resolver, $canceller);\n```\n\n----------------------------------------\n\nTITLE: Using resolve() Function with ReactPHP Promise\nDESCRIPTION: Shows how to use the resolve() function to create a promise from a value, thenable object, or another promise. The resulting promise can be consumed using the then() method to handle the resolved value or potential error.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$promise = React\\Promise\\resolve(mixed $promiseOrValue);\n```\n\nLANGUAGE: php\nCODE:\n```\n$promise = React\\Promise\\resolve(42);\n\n$promise->then(function (int $result): void {\n    var_dump($result);\n}, function (\\Throwable $e): void {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\n----------------------------------------\n\nTITLE: Using all() Function with ReactPHP Promise\nDESCRIPTION: Shows how to use the all() function to create a promise that resolves when all promises in the provided iterable have resolved. The resolution value will be an array containing the resolution values of each promise.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$promise = React\\Promise\\all(iterable $promisesOrValues);\n```\n\n----------------------------------------\n\nTITLE: Using race() Function with ReactPHP Promise\nDESCRIPTION: Demonstrates the race() function which creates a promise that resolves or rejects as soon as the first promise in the provided iterable settles. The returned promise will be infinitely pending if the iterable is empty.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$promise = React\\Promise\\race(iterable $promisesOrValues);\n```\n\n----------------------------------------\n\nTITLE: Using any() Function with ReactPHP Promise\nDESCRIPTION: Shows how to use the any() function to create a promise that resolves when any promise in the provided iterable resolves. It rejects only if all promises reject, with a CompositeException containing all rejection reasons.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$promise = React\\Promise\\any(iterable $promisesOrValues);\n```\n\n----------------------------------------\n\nTITLE: Using reject() Function with ReactPHP Promise\nDESCRIPTION: Demonstrates creating a rejected promise with a Throwable reason using the reject() function. The example shows how to handle the rejection using the then() method and also explains the importance of always handling rejected promises.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$promise = React\\Promise\\reject(\\Throwable $reason);\n```\n\nLANGUAGE: php\nCODE:\n```\n$promise = React\\Promise\\reject(new RuntimeException('Request failed'));\n\n$promise->then(function (int $result): void {\n    var_dump($result);\n}, function (\\Throwable $e): void {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction incorrect(): int\n{\n     $promise = React\\Promise\\reject(new RuntimeException('Request failed'));\n\n     // Commented out: No rejection handler registered here.\n     // $promise->then(null, function (\\Throwable $e): void { /* ignore */ });\n\n     // Returning from a function will remove all local variable references, hence why\n     // this will report an unhandled promise rejection here.\n     return 42;\n}\n\n// Calling this function will log an error message plus its stack trace:\n// Unhandled promise rejection with RuntimeException: Request failed in example.php:10\nincorrect();\n```\n\n----------------------------------------\n\nTITLE: Using Promise::then() Method in PHP\nDESCRIPTION: Transforms a promise's value by applying functions to its fulfillment or rejection value, returning a new promise for the transformed result.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$transformedPromise = $promise->then(callable $onFulfilled = null, callable $onRejected = null);\n```\n\n----------------------------------------\n\nTITLE: Using Promise::catch() Method in PHP\nDESCRIPTION: Registers a rejection handler for a promise, with optional type hinting to catch specific error types.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$promise->catch(callable $onRejected);\n```\n\n----------------------------------------\n\nTITLE: Using Promise::finally() Method in PHP\nDESCRIPTION: Registers a handler that will be called regardless of whether the promise is fulfilled or rejected, similar to the synchronous finally statement.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$newPromise = $promise->finally(callable $onFulfilledOrRejected);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Promise Chain with Catch and Finally in PHP\nDESCRIPTION: Demonstrates how to use promises to create asynchronous code that mimics the synchronous try-catch-finally pattern.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn doSomething()\n    ->catch('handleError')\n    ->finally('cleanup');\n```\n\n----------------------------------------\n\nTITLE: Promise Resolution Forwarding in PHP\nDESCRIPTION: Demonstrates how resolved promises forward values through promise chains using then() callbacks. Each handler receives the return value of the previous handler, creating a promise pipeline that processes values sequentially.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$deferred = new React\\Promise\\Deferred();\n\n$deferred->promise()\n    ->then(function ($x) {\n        // $x will be the value passed to $deferred->resolve() below\n        // and returns a *new promise* for $x + 1\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        // $x === 2\n        // This handler receives the return value of the\n        // previous handler.\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        // $x === 3\n        // This handler receives the return value of the\n        // previous handler.\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        // $x === 4\n        // This handler receives the return value of the\n        // previous handler.\n        echo 'Resolve ' . $x;\n    });\n\n$deferred->resolve(1); // Prints \"Resolve 4\"\n```\n\n----------------------------------------\n\nTITLE: Promise Rejection Forwarding in PHP\nDESCRIPTION: Shows how rejected promises handle error propagation similar to try/catch blocks. Demonstrates rejection propagation through throwing exceptions or returning rejected promises in the chain.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$deferred = new React\\Promise\\Deferred();\n\n$deferred->promise()\n    ->then(function ($x) {\n        throw new \\Exception($x + 1);\n    })\n    ->catch(function (\\Exception $x) {\n        // Propagate the rejection\n        throw $x;\n    })\n    ->catch(function (\\Exception $x) {\n        // Can also propagate by returning another rejection\n        return React\\Promise\\reject(\n            new \\Exception($x->getMessage() + 1)\n        );\n    })\n    ->catch(function ($x) {\n        echo 'Reject ' . $x->getMessage(); // 3\n    });\n\n$deferred->resolve(1);  // Prints \"Reject 3\"\n```\n\n----------------------------------------\n\nTITLE: Mixed Promise Resolution and Rejection in PHP\nDESCRIPTION: Illustrates how promises can handle mixed resolution and rejection scenarios, showing how results are forwarded predictably through the chain even when mixing success and error handlers.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$deferred = new React\\Promise\\Deferred();\n\n$deferred->promise()\n    ->then(function ($x) {\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        throw new \\Exception($x + 1);\n    })\n    ->catch(function (\\Exception $x) {\n        // Handle the rejection, and don't propagate.\n        // This is like catch without a rethrow\n        return $x->getMessage() + 1;\n    })\n    ->then(function ($x) {\n        echo 'Mixed ' . $x; // 4\n    });\n\n$deferred->resolve(1);  // Prints \"Mixed 4\"\n```\n\n----------------------------------------\n\nTITLE: Getting a Promise from a Deferred in PHP\nDESCRIPTION: Retrieves the promise from a Deferred object, which can be shared while maintaining control over its state.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$promise = $deferred->promise();\n```\n\n----------------------------------------\n\nTITLE: Resolving a Deferred in PHP\nDESCRIPTION: Resolves a promise with a value, notifying all consumers by calling their registered onFulfilled callbacks.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$deferred->resolve(mixed $value);\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Deferred in PHP\nDESCRIPTION: Rejects a promise with a reason, signaling computation failure and notifying all consumers by calling their registered onRejected callbacks.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$deferred->reject(\\Throwable $reason);\n```\n\n----------------------------------------\n\nTITLE: Using Promise::cancel() Method in PHP\nDESCRIPTION: Cancels a promise, notifying its creator that there is no further interest in the results of the operation.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$promise->cancel();\n```\n\n----------------------------------------\n\nTITLE: Type Hinting in Promise::catch() Method in PHP\nDESCRIPTION: Demonstrates how to use type hints in catch() handlers to selectively catch specific error types.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$promise\n    ->catch(function (\\RuntimeException $reason) {\n        // Only catch \\RuntimeException instances\n        // All other types of errors will propagate automatically\n    })\n    ->catch(function (\\Throwable $reason) {\n        // Catch other errors\n    });\n```\n\n----------------------------------------\n\nTITLE: Alternative Promise::catch() Implementation in PHP\nDESCRIPTION: Shows the equivalent implementation of catch() using the then() method with a null fulfillment handler.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$promise->then(null, $onRejected);\n```\n\n----------------------------------------\n\nTITLE: Setting a Global Rejection Handler for ReactPHP Promises\nDESCRIPTION: Demonstrates how to use set_rejection_handler() to customize handling of unhandled promise rejections. This function allows setting a callback for unhandled rejections or restoring the default handler.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nReact\\Promise\\set_rejection_handler(?callable $callback): ?callable;\n```\n\nLANGUAGE: php\nCODE:\n```\n// Unhandled promise rejection with RuntimeException: Unhandled in example.php:2\nReact\\Promise\\reject(new RuntimeException('Unhandled'));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Promise Interface Evolution in ReactPHP\nDESCRIPTION: Shows the transition from multiple interfaces to a single consolidated PromiseInterface. In v3, all promises implement a unified interface with then(), catch(), finally(), and cancel() methods, replacing the previous separated interfaces.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// old (multiple interfaces may or may not be implemented)\nassert($promise instanceof PromiseInterface);\nassert(method_exists($promise, 'then'));\nif ($promise instanceof ExtendedPromiseInterface) { assert(method_exists($promise, 'otherwise')); }\nif ($promise instanceof ExtendedPromiseInterface) { assert(method_exists($promise, 'always')); }\nif ($promise instanceof CancellablePromiseInterface) { assert(method_exists($promise, 'cancel')); }\n\n// new (single PromiseInterface with all methods)\nassert($promise instanceof PromiseInterface);\nassert(method_exists($promise, 'then'));\nassert(method_exists($promise, 'catch'));\nassert(method_exists($promise, 'finally'));\nassert(method_exists($promise, 'cancel'));\n```\n\n----------------------------------------\n\nTITLE: Updated Promise Resolution and Rejection in ReactPHP v3\nDESCRIPTION: Demonstrates the change in ReactPHP Promise v3 where resolve() and reject() functions now require explicit arguments. The null value should be used when resolving without a value, and Throwable exceptions are required for rejections.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// old (arguments used to be optional)\n$promise = resolve();\n$promise = reject();\n\n// new (already supported before)\n$promise = resolve(null);\n$promise = reject(new RuntimeException());\n```\n\n----------------------------------------\n\nTITLE: Unhandled Promise Rejection Reporting in ReactPHP v3\nDESCRIPTION: Shows how unhandled promise rejections are now automatically reported by default in ReactPHP Promise v3, eliminating the need for the done() method. Exceptions will be reported with their source location.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Unhandled promise rejection with RuntimeException: Unhandled in example.php:2\nreject(new RuntimeException('Unhandled'));\n```\n\n----------------------------------------\n\nTITLE: Synchronous Try-Catch-Finally Example in PHP\nDESCRIPTION: Shows a synchronous try-catch-finally code block for comparison with the promise-based approach.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    return doSomething();\n} catch (\\Throwable $e) {\n    return handleError($e);\n} finally {\n    cleanup();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ReactPHP Promise via Composer\nDESCRIPTION: Command for installing the latest supported version of ReactPHP Promise through Composer package manager.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require react/promise:^3.2\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple ReactPHP Promise Versions\nDESCRIPTION: Composer command for installing multiple versions of ReactPHP Promise to support different PHP versions.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"react/promise:^3 || ^2 || ^1\"\n```\n\n----------------------------------------\n\nTITLE: Running ReactPHP Promise Tests\nDESCRIPTION: Commands for installing dependencies and running the test suite for ReactPHP Promise development.\nSOURCE: https://github.com/reactphp/promise/blob/3.x/README.md#2025-04-18_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan\n```"
  }
]