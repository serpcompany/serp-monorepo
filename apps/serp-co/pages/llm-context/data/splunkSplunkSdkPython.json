[
  {
    "owner": "splunk",
    "repo": "splunk-sdk-python",
    "content": "TITLE: Connecting to Splunk Enterprise Using Username/Password in Python\nDESCRIPTION: Demonstrates how to connect to a Splunk Enterprise instance using username and password authentication with the Splunk SDK for Python.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport splunklib.client as client\nservice = client.connect(host=<host_url>, username=<username>, password=<password>, autologin=True)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Splunk Enterprise Using Bearer Token in Python\nDESCRIPTION: Shows how to authenticate with Splunk Enterprise using a bearer token instead of username/password credentials.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport splunklib.client as client\nservice = client.connect(host=<host_url>, splunkToken=<bearer_token>, autologin=True)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Splunk Enterprise Using Session Key in Python\nDESCRIPTION: Demonstrates authentication to Splunk Enterprise using a session key for existing authenticated sessions.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport splunklib.client as client\nservice = client.connect(host=<host_url>, token=<session_key>, autologin=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing JSONResultsReader in Python SDK\nDESCRIPTION: Added a new JSONResultsReader class to improve performance by 80-90% when parsing results. This requires setting the 'output_mode' query parameter to 'json'. The older ResultsReader is now deprecated.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#441](https://github.com/splunk/splunk-sdk-python/pull/441) JSONResultsReader added and deprecated ResultsReader\n  * Pre-requisite: Query parameter 'output_mode' must be set to 'json'\n  * Improves performance by approx ~80-90%\n  * ResultsReader is deprecated and will be removed in future releases (NOTE: Please migrate to JSONResultsReader)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Streaming Command with Field Addition in Python\nDESCRIPTION: Recommended approach for adding fields to records in a Custom Streaming Command using the add_field method to ensure field retention.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CustomStreamingCommand(StreamingCommand):\n    def stream(self, records):\n        for index, record in enumerate(records):\n            if index % 1 == 0:\n                self.add_field(record, \"odd_record\", \"true\")\n            yield record\n```\n\n----------------------------------------\n\nTITLE: Implementing Generating Custom Search Command in Python\nDESCRIPTION: Recommended approach for generating events in a Custom Generating Command using the gen_record method to ensure proper event formatting.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@Configuration()\nclass GeneratorTest(GeneratingCommand):\n    def generate(self):\n        yield self.gen_record(_time=time.time(), one=1)\n        yield self.gen_record(_time=time.time(), two=2)\n```\n\n----------------------------------------\n\nTITLE: Accessing Splunk Service in Custom Search Commands (Python)\nDESCRIPTION: Demonstrates how to access the Splunk service object within a custom search command's generate method. The service object is created from the Splunkd URI and session key passed to the command invocation.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef generate(self):\n    # other code\n    \n    # access service object that can be used to connect Splunk Service\n    service = self.service\n    # to get Splunk Service Info\n    info = service.info\n```\n\n----------------------------------------\n\nTITLE: Accessing Splunk Service in Modular Inputs (Python)\nDESCRIPTION: Shows how to access the Splunk service object within a modular input's stream_events method. The service object is created from the Splunkd URI and session key passed to the command invocation on the modular input stream.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef stream_events(self, inputs, ew):\n    # other code\n    \n    # access service object that can be used to connect Splunk Service\n    service = self.service\n    # to get Splunk Service Info\n    info = service.info\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logging for Splunklib (Python)\nDESCRIPTION: Demonstrates how to set up logging for the Splunk SDK using the setup_logging method. This example sets the logging level to DEBUG, which will show debug and above level logs. The default level is WARNING if not specified.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom splunklib import setup_logging\n\n# To see debug and above level logs\nsetup_logging(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Setup Function in Python SDK\nDESCRIPTION: Introduced a new setup_logging() method in the splunklib module to facilitate easier logging configuration for SDK users.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#437](https://github.com/splunk/splunk-sdk-python/pull/437) Added setup_logging() method in splunklib for logging\n```\n\n----------------------------------------\n\nTITLE: Implementing Float Parameter Validator for Custom Search Commands\nDESCRIPTION: Added a new Float parameter validator to be used with custom search commands, allowing for more precise input validation.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#384](https://github.com/splunk/splunk-sdk-python/pull/384) Added Float parameter validator for custom search commands\n```\n\n----------------------------------------\n\nTITLE: Using Python's 'in' Operator with Collections in Splunk SDK\nDESCRIPTION: Demonstrates the correct usage pattern for checking if an entity exists in a collection using Python's 'in' operator instead of the deprecated 'contains' method.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# correct usage\n'search' in service.apps\n\n# incorrect usage\nservice.apps.contains('search')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fluent Interface for Entity Operations in Splunk SDK\nDESCRIPTION: Shows how to use the fluent interface style with entity operations, enabling method chaining for operations like update and refresh in a single line of code.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nentity.update(attr=value).refresh()\n```\n\n----------------------------------------\n\nTITLE: Chaining Entity Action Methods with Refresh in Splunk SDK\nDESCRIPTION: Demonstrates how to chain an entity action method (disable) with refresh to update the local state cache after the action is performed.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nentity.disable().refresh()\n```\n\n----------------------------------------\n\nTITLE: Accessing Metadata in Modular Input Apps in Python\nDESCRIPTION: Shows how to access metadata properties like server_host, server_uri, and checkpoint directories from the InputDefinition object in a modular input app.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    def stream_events(self, inputs, ew):\n        # other code\n        \n        # access metadata (like server_host, server_uri, etc) of modular inputs app from InputDefinition object\n        # here inputs is a InputDefinition object\n        server_host = inputs.metadata[\"server_host\"]\n        server_uri = inputs.metadata[\"server_uri\"]\n        \n        # Get the checkpoint directory out of the modular input's metadata\n        checkpoint_dir = inputs.metadata[\"checkpoint_dir\"]\n```\n\n----------------------------------------\n\nTITLE: Dispatching Search Commands in Splunk Python SDK\nDESCRIPTION: Function signature for dispatching search commands, showing the main parameters including command class, arguments, input/output files and module configuration options.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/docs/searchcommands.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndispatch(command_class[, argv=sys.argv, input_file=sys.stdin, output_file=sys.stdout, module_name=None, allow_empty_input=True])\n```\n\n----------------------------------------\n\nTITLE: Processing Arguments in StreamingCommand\nDESCRIPTION: Method signature for processing arguments in StreamingCommand class, showing input/output handling and empty input configuration.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/docs/searchcommands.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprocess(args=sys.argv[, input_file=sys.stdin, output_file=sys.stdout, allow_empty_input=True])\n```\n\n----------------------------------------\n\nTITLE: Processing Arguments in ReportingCommand\nDESCRIPTION: Method signature for processing arguments in ReportingCommand class, showing standard input/output handling.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/docs/searchcommands.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprocess(args=sys.argv[, input_file=sys.stdin, output_file=sys.stdout])\n```\n\n----------------------------------------\n\nTITLE: Using ResponseReader with BufferedReader Example\nDESCRIPTION: Example showing how to wrap a ResponseReader in an io.BufferedReader to improve performance when reading job results.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport io\n...\nresponse = job.results(count=maxRecords, offset=self._offset)\nresultsList = results.ResultsReader(io.BufferedReader(response))\n```\n\n----------------------------------------\n\nTITLE: Adding IPv6 Address Support in Python SDK\nDESCRIPTION: Updated the SDK to include support for checking IPv6 addresses in network-related functionality.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#502](https://github.com/splunk/splunk-sdk-python/pull/502) Updated check for IPv6 addresses\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Custom Streaming Command in Python\nDESCRIPTION: Shows the incorrect approach for adding fields to records in a Custom Streaming Command, which may lead to issues with field retention.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CustomStreamingCommand(StreamingCommand):\n    def stream(self, records):\n        for index, record in enumerate(records):\n            if index % 1 == 0:\n                record[\"odd_record\"] = \"true\"\n            yield record\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Generating Custom Search Command in Python\nDESCRIPTION: Shows the incorrect approach for generating events in a Custom Generating Command, which may lead to issues with event formatting.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@Configuration()\nclass GeneratorTest(GeneratingCommand):\n    def generate(self):\n        yield {'_time': time.time(), 'one': 1}\n        yield {'_time': time.time(), 'two': 2}\n```\n\n----------------------------------------\n\nTITLE: Fixing Infinite Loop in Entity Name Handling\nDESCRIPTION: Resolved an issue where identical entity names were causing an infinite loop in the SDK's entity handling logic.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#148](https://github.com/splunk/splunk-sdk-python/pull/148) Identical entity names will cause an infinite loop\n```\n\n----------------------------------------\n\nTITLE: Updating Authentication Token References in Python SDK Documentation\nDESCRIPTION: Updated authentication token names in SDK documentation to reduce confusion for developers.\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#504](https://github.com/splunk/splunk-sdk-python/pull/504) Updated authentication token names in docs to reduce confusion\n```\n\n----------------------------------------\n\nTITLE: Running Complete Test Suite - Python Setup\nDESCRIPTION: Command to execute the entire test suite using Python's setup.py\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py test\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test File - Python\nDESCRIPTION: Example command for running a specific test file (test_role.py) from the tests directory\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython test_role.py\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage Analysis\nDESCRIPTION: Command to generate a code coverage report using setup.py, which creates an HTML report in the coverage_report directory\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/tests/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py coverage\n```\n\n----------------------------------------\n\nTITLE: Installing Coverage Tool - Easy Install\nDESCRIPTION: Command to install the Coverage.py tool using easy_install package manager\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neasy_install coverage\n```\n\n----------------------------------------\n\nTITLE: Installing Coverage Tool - Pip\nDESCRIPTION: Command to install the Coverage.py tool using pip package manager\nSOURCE: https://github.com/splunk/splunk-sdk-python/blob/master/tests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install coverage\n```"
  }
]