[
  {
    "owner": "unleash",
    "repo": "unleash",
    "content": "TITLE: Starting Unleash Server with Configuration Options - JavaScript\nDESCRIPTION: This snippet initializes the Unleash server with specified configuration options including database connection settings, request logging, and other server parameters. This setup is essential for deploying the Unleash feature toggle system.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst unleash = require('unleash-server');\n\nconst unleashOptions = {\n    db: {\n        user: 'unleash_user',\n        password: 'password',\n        host: 'localhost',\n        port: 5432,\n        database: 'unleash',\n        ssl: false,\n        pool: {\n            min: 0,\n            max: 4,\n            idleTimeoutMillis: 30000,\n        },\n    },\n    enableRequestLogger: true,\n};\n\nunleash.start(unleashOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Flag Naming Pattern with JavaScript RegExp\nDESCRIPTION: Create a naming convention for feature flags using a JavaScript regular expression to enforce consistent and unique flag names across a project\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/feature-toggles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n^(red|blue|green)\\.[a-z-]+\\.[0-9]+$\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash PHP SDK with Basic Configuration\nDESCRIPTION: This snippet demonstrates how to initialize the Unleash client with basic configuration. It sets up the app name, API URL, authorization header, and instance ID. It also includes a loop to continuously check a feature flag's status.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/php.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Unleash\\Client\\UnleashBuilder;\n\nrequire 'vendor/autoload.php';\n\n$unleash = UnleashBuilder::create()\n    ->withAppName('unleash-onboarding-php')\n    ->withAppUrl('<YOUR_API_URL>')\n    ->withHeader('Authorization', '<YOUR_API_TOKEN>') // in production use environment variable\n    ->withInstanceId('unleash-onboarding-instance')\n    ->build();\n\nwhile (true) {\n    echo 'Feature flag is:  ' . $unleash->isEnabled('<YOUR_FLAG>') . PHP_EOL;\n    sleep(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with Feature Flags in JavaScript\nDESCRIPTION: Demonstrates how to use the isEnabled method with a default value, which is returned when the client doesn't know about a particular flag.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/client-specification.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nboolean value = unleash.isEnabled(\"unknownFeatureFlag\", false);\n//value==false because default value was used.\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flag Strategy via API in Python\nDESCRIPTION: This code snippet demonstrates how to use the Unleash API to update a feature flag strategy for gradual rollouts. It sends a POST request to create a new flexibleRollout strategy with specific parameters.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/django-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies\"\n\npayload = json.dumps({\n  \"name\": \"flexibleRollout\",\n  \"disabled\": False,\n  \"constraints\": [],\n  \"variants\": [],\n  \"parameters\": {\n    \"groupId\": \"delete_survey_flag\",\n    \"rollout\": \"50\",\n    \"stickiness\": \"sessionId\"\n  },\n  \"segments\": []\n})\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Implementing the isEnabled Function in JavaScript\nDESCRIPTION: Provides a reference implementation of the isEnabled function that checks if a feature flag is enabled by evaluating its activation strategies against the provided context.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/client-specification.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isEnabled(name, unleashContext = {}, defaultValue = false) {\n  const flag = toggleRepository.get(name);\n  let enabled = false;\n\n  if (!flag) {\n    return defaultValue;\n  } else if (!flag.isEnabled) {\n    return false;\n  } else {\n    for (let i = 0; i < flag.strategies.length; i++) {\n      let strategyDef = flag.strategies[i];\n      let strategyImpl = strategyImplRepository.get(strategyDef.name);\n      if (strategyImpl.isEnabled(flag.parameters, unleashContext)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Graceful Shutdown of Unleash SDK in AWS Lambda\nDESCRIPTION: This snippet demonstrates how to handle graceful shutdown of the Unleash SDK in an AWS Lambda function. It listens for the SIGTERM signal and ensures that any outstanding metrics are flushed back to the Unleash API before the function instance is terminated.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/serverless/implementing-feature-flags-in-aws-lambda.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet unleash;\n\nprocess.on(\"SIGTERM\", async () => {\n    console.info(\"[runtime] SIGTERM received\");\n\n    if (unleash) {\n        await destroyWithFlush();\n        unleash = undefined;\n    }\n\n    process.exit(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Server-Side Node.js SDK\nDESCRIPTION: Example showing how to initialize and use the Unleash Node.js server-side SDK to check feature flags\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/quickstart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { initialize } = require(\"unleash-client\");\n\nconst unleash = initialize({\n    url: \"https://<your-unleash-instance>/api/\",\n    appName: \"<your-app-name>\",\n    customHeaders: {\n        Authorization: \"<your-token>\",\n    },\n});\n\nunleash.on(\"synchronized\", () => {\n    // Unleash is ready to serve updated feature flags.\n\n    if (unleash.isEnabled(\"some-flag\")) {\n        // do cool new things when the flag is enabled\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing A/B Test Logic in Delete Survey Route\nDESCRIPTION: Python route handler that implements A/B testing logic for survey deletion, handling different variants for either storing or permanently deleting surveys based on feature flag status\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/examples.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_survey(survey_id):\n   delete_survey_flag_variant = client.get_variant(\"delete_survey_flag\")\n   if not delete_survey_flag_variant.get(\"enabled\"):\n       abort(404, description=\"Resource not found\")\n   else:\n       delete_survey_flag_variant_name = delete_survey_flag_variant.get(\"name\")\n\n       if delete_survey_flag_variant_name == \"store_deleted_surveys\":\n           # do things here to store in a \"deleted survey\" table\n           print(\"STATUS: storing in DeletedSurvey table....\")\n       elif delete_survey_flag_variant_name == \"permanently_delete_surveys\":\n           # remove survey without storing\n           print(\"STATUS: removing survey without storing it....\")\n           survey = db.get_or_404(Survey, survey_id)\n           db.session.delete(survey)\n           db.session.commit()\n\n       return redirect(url_for(\"surveys.surveys_list_page\"))\n```\n\n----------------------------------------\n\nTITLE: Disabled Variant JSON Structure\nDESCRIPTION: The default JSON structure returned when a flag has no variants or is disabled for a user. This represents the built-in fallback variant in Unleash.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/feature-toggle-variants.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"disabled\",\n  \"enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping App Component with FlagProvider\nDESCRIPTION: This code snippet wraps the main App component with the FlagProvider, passing the configuration object to enable feature flag functionality throughout the application.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<FlagProvider config={config}>\n    <App />\n</FlagProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Canary Deployment Strategy in Go\nDESCRIPTION: Configures a flexible rollout strategy with environment-based constraints for canary deployments. Sets up a 50% rollout with session-based stickiness and environment constraints.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/golang-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npayload := map[string]interface{}{\n    \"name\":     \"flexibleRollout\",\n    \"disabled\": false,\n    \"constraints\": []map[string]interface{}{\n        {\n            \"values\":         []string{\"production\"},\n            \"inverted\":       false,\n            \"operator\":       \"NOT_IN\",\n            \"contextName\":    \"environment\",\n            \"caseInsensitive\": false,\n        },\n    },\n    \"variants\": []interface{}{},\n    \"parameters\": map[string]interface{}{\n        \"groupId\":    \"delete_survey_flag\",\n        \"rollout\":    \"50\",\n        \"stickiness\": \"sessionId\",\n    },\n    \"segments\": []interface{}{},\n}\n\njsonData, err := json.Marshal(payload)\n\nurl := fmt.Sprintf(\"%s/api/admin/projects/%s/features/%s/environments/%s/strategies/%s\",\n    unleashURL, projectID, featureName, environment, strategyID)\n\nreq, err := http.NewRequest(\"PUT\", url, bytes.NewBuffer(jsonData))\n\nreq.Header.Set(\"Content-Type\", \"application/json\")\nreq.Header.Set(\"Authorization\", apiKey)\n\nclient := &http.Client{}\nresp, err := client.Do(req)\ndefer resp.Body.Close()\n```\n\n----------------------------------------\n\nTITLE: Complete Google Auth Implementation\nDESCRIPTION: This snippet presents the complete code for implementing Google authentication in an Unleash server. It includes importing necessary modules, setting up the Google OAuth2 strategy using Passport.js, configuring middleware, and defining routes for login and callback handling.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/google-auth-hook.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst unleash = require('unleash-server');\nconst passport = require('@passport-next/passport');\nconst GoogleOAuth2Strategy = require('@passport-next/passport-google-oauth2');\n\nconst GOOGLE_CLIENT_ID = '...';\nconst GOOGLE_CLIENT_SECRET = '...';\nconst GOOGLE_CALLBACK_URL = 'http://localhost:4242/api/auth/callback';\n\nfunction googleAdminAuth(app, config, services) {\n  const { baseUriPath } = config.server;\n  const { userService } = services;\n\n  passport.use(\n    new GoogleOAuth2Strategy(\n      {\n        clientID: GOOGLE_CLIENT_ID,\n        clientSecret: GOOGLE_CLIENT_SECRET,\n        callbackURL: GOOGLE_CALLBACK_URL,\n      },\n      async (accessToken, refreshToken, profile, cb) => {\n        const email = profile.emails[0].value;\n        const user = await userService.loginUserWithoutPassword(email, true);\n        cb(null, user);\n      },\n    ),\n  );\n\n  app.use(passport.initialize());\n  app.use(passport.session());\n  passport.serializeUser((user, done) => done(null, user));\n  passport.deserializeUser((user, done) => done(null, user));\n\n  app.get(\n    '/auth/google/login',\n    passport.authenticate('google', { scope: ['email'] }),\n  );\n  app.get(\n    '/api/auth/callback',\n    passport.authenticate('google', {\n      failureRedirect: '/api/admin/error-login',\n    }),\n    (req, res) => {\n      res.redirect('/');\n    },\n  );\n\n  app.use('/api/', (req, res, next) => {\n    if (req.user) {\n      next();\n    } else {\n      return res\n        .status('401')\n        .json(\n          new unleash.AuthenticationRequired({\n            path: '/auth/google/login',\n            type: 'custom',\n            message: `You have to identify yourself in order to use Unleash. Click the button and follow the instructions.`,\n          }),\n        )\n        .end();\n    }\n  });\n}\n\nconst options = {\n  authentication: {\n    type: 'custom',\n    customAuthHandler: googleAdminAuth,\n  },\n};\n\nunleash.start(options);\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flags in Components\nDESCRIPTION: Example component demonstrating how to use the useFlag hook to check feature flag status and conditionally render content.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/react.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst TestComponent = () => {\n  const enabled = useFlag('<YOUR_FLAG>');\n\n  return enabled ? 'Flag is enabled' : 'Flag is disabled'\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client with Production Configuration\nDESCRIPTION: Production-ready example of Unleash client initialization using environment variables for secure API token storage.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/javascript.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = new UnleashClient({\n    url: '<YOUR_API_URL>',\n    clientKey: process.env.UNLEASH_API_TOKEN,\n    appName: 'unleash-onboarding-javascript',\n});\nunleash.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Control in JavaScript with Unleash SDK\nDESCRIPTION: Demonstrates how to implement feature flag control for a checkout process using the Unleash SDK. The code shows initialization of the Unleash client, conditional feature activation, and fallback mechanisms for handling both new and existing implementations.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/trunk-based-development.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the Unleash client\nimport { initialize, isEnabled } from 'unleash-client';\n\n// Initialize the Unleash client with your configuration\ninitialize({\n  appName: 'my-web-application',\n  url: 'https://your-unleash-instance.com/client/features',\n  instanceId: 'unique-client-identifier'\n});\n\n// Example of a feature flag-wrapped checkout process\nfunction processCheckout(cart) {\n  // Check if the new checkout flow is enabled\n  if (isEnabled('new-checkout-flow')) {\n    // New checkout implementation\n    return advancedCheckoutProcess(cart);\n  } else {\n    // Original checkout implementation\n    return standardCheckoutProcess(cart);\n  }\n}\n\n// Advanced checkout process (new feature)\nfunction advancedCheckoutProcess(cart) {\n  // Implement the new, more sophisticated checkout flow\n  console.log('Using advanced checkout process');\n\n  // Add new features like:\n  // - Enhanced payment options\n  // - Detailed order preview\n  // - Advanced shipping calculations\n  return {\n    status: 'success',\n    orderDetails: /* new implementation */\n  };\n}\n\n// Standard checkout process (existing implementation)\nfunction standardCheckoutProcess(cart) {\n  // Existing checkout logic\n  console.log('Using standard checkout process');\n  return {\n    status: 'success',\n    orderDetails: /* existing implementation */\n  };\n}\n\n// Example usage\nfunction handleCheckout(cart) {\n  try {\n    const checkoutResult = processCheckout(cart);\n    return checkoutResult;\n  } catch (error) {\n    // Fallback mechanism\n    console.error('Checkout failed', error);\n    return standardCheckoutProcess(cart);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UserIDs Strategy Implementation\nDESCRIPTION: Strategy that activates features for specific user IDs. Requires a list of user IDs as parameter for enabling the feature flag.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/predefined-strategy-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Parameters:**\n- userIds - _List of user IDs you want the feature flag to be enabled for_\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Component Based on Feature Flag\nDESCRIPTION: This code snippet shows how to conditionally render a Badge component based on the state of the 'newNotificationsBadge' feature flag.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    notificationsBadgeEnabled && (\n        <Badge\n            badgeContent={allNotifications?.length}\n            data-test=\"nav-top-notifications-count\"\n            classes={{ badge: classes.customBadge }}\n        >\n            <NotificationsIcon />\n        </Badge>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unleash SDK for Feature Flags in AWS Lambda\nDESCRIPTION: This code snippet shows a complete example of using the Unleash SDK in an AWS Lambda function. It includes initialization, graceful shutdown handling, and checking a feature flag value. The function returns the status of the 'simpleFlag' feature flag in its response.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/serverless/implementing-feature-flags-in-aws-lambda.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    startUnleash,\n    InMemStorageProvider,\n    destroyWithFlush,\n} from \"unleash-client\";\n\nlet unleash;\n\nasync function init() {\n    if (!unleash) {\n        console.log(\"[runtime] Starting unleash\");\n        unleash = await startUnleash({\n            url: \"https://sandbox.getunleash.io/enterprise/api/\",\n            appName: \"lambda-example-app\",\n            customHeaders: {\n                authorization: process.env.API_TOKEN,\n            },\n            storageProvider: new InMemStorageProvider(),\n        });\n        unleash.on(\"initialized\", () =>\n            console.log(\"[runtime] Unleash initialized\")\n        );\n    }\n}\n\nprocess.on(\"SIGTERM\", async () => {\n    console.info(\"[runtime] SIGTERM received\");\n\n    if (unleash) {\n        await destroyWithFlush();\n        unleash = null;\n    }\n\n    process.exit(0);\n});\n\nexport const handler = async (event, context) => {\n    // Only the first invocation will trigger SDK initialization.\n    await init();\n\n    const isEnabled = unleash.isEnabled(\"simpleFlag\");\n\n    return {\n        statusCode: 200,\n        body: {\n            message: `Feature flag 'simpleFlag' is ${\n                isEnabled ? \"enabled\" : \"disabled\"\n            }`,\n        },\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of a Feature Flag\nDESCRIPTION: Shows the JSON structure of a feature flag definition, including its name, description, enabled status, and strategies with their parameters.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/client-specification.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Feature.B\",\n  \"description\": \"lorem ipsum\",\n  \"enabled\": true,\n  \"strategies\": [\n    {\n      \"name\": \"ActiveForUserWithId\",\n      \"parameters\": {\n        \"userIdList\": \"123,221,998\"\n      }\n    },\n    {\n      \"name\": \"GradualRolloutRandom\",\n      \"parameters\": {\n        \"percentage\": \"10\"\n      }\n    }\n  ],\n  \"strategy\": \"ActiveForUserWithId\",\n  \"parameters\": {\n    \"userIdList\": \"123,221,998\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Unleash Feature Flag in Django View\nDESCRIPTION: Update the post_list view to use the Unleash client for dynamically checking the feature flag status. This allows runtime toggling of the feature flag to control the number of displayed posts.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\nfrom .models import Post\nfrom .unleash_client import unleash_client\n\ndef post_list(request):\n    if unleash_client.is_enabled(\"top-3\"):\n        posts = Post.objects.order_by('-published_date')[:3]\n    else:\n        posts = Post.objects.order_by('-published_date')\n    return render(request, 'blog/post_list.html', {'posts': posts})\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash FlagProvider\nDESCRIPTION: Sets up the Unleash FlagProvider component with configuration including API URL, client key, and app name. Wraps the main App component to provide feature flag context.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/react.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport { FlagProvider } from '@unleash/proxy-client-react';\n\nconst config = {\n  url: '<YOUR_API_URL>',\n  clientKey: '<YOUR_API_TOKEN>', // in production use environment variable\n  appName: 'unleash-onboarding-react',\n};\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <FlagProvider config={config}>\n      <App />\n    </FlagProvider>\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash SDK in Android Application Class\nDESCRIPTION: Sets up the Unleash SDK by creating and configuring an instance in the Application class. This creates a singleton Unleash instance, configures it with your API URL and token, and handles the start and shutdown lifecycle.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/android.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyApplication: Application() {\n    val unleash: Unleash by lazy {\n        val instance = DefaultUnleash(\n            androidContext = this,\n            unleashConfig = UnleashConfig.newBuilder(appName = \"unleash-onboarding-android\")\n                .proxyUrl(\"<YOUR_API_URL>\")\n                .clientKey(\"<YOUR_API_TOKEN>\")\n                .build()\n        )\n        instance.start()\n        instance\n    }\n\n    override fun onTerminate() {\n        super.onTerminate()\n        unleash.close()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag with Activity Component\nDESCRIPTION: React component using Unleash feature flag to control the display of a random activity from Bored API\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/nextjs/implementing-feature-flags-nextjs.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { useFlag } from \"@unleash/nextjs/client\";\n\nconst Activity = () => {\n    const [activityData, setActivityData] = useState({});\n\n    const showActivity = useFlag(\"activity\");\n\n    useEffect(() => {\n        const fetchActivity = async () => {\n            try {\n                const response = await fetch(\n                    \"https://www.boredapi.com/api/activity/\"\n                );\n                const data = await response.json();\n                setActivityData(data);\n            } catch (error) {\n                console.error(\"Error fetching activity:\", error);\n            }\n        };\n\n        if (showActivity) {\n            fetchActivity();\n        }\n    }, [showActivity]);\n\n    return (\n        <div className=\"bg-gray-100 min-h-screen flex items-center justify-center\">\n            <div className=\"bg-white p-8 rounded shadow-lg\">\n                <h1 className=\"text-3xl font-bold mb-4\">\n                    Here is an activity for you!\n                </h1>\n                {showActivity ? (\n                    <>\n                        <p className=\"mb-2\">\n                            Activity: {activityData.activity}\n                        </p>\n                        <p className=\"mb-2\">\n                            Participants: {activityData.participants}\n                        </p>\n                        <p>Price: ${activityData.price}</p>\n                    </>\n                ) : (\n                    <p>Activity not available</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Activity;\n```\n\n----------------------------------------\n\nTITLE: Flexible Gradual Rollout Strategy Parameters\nDESCRIPTION: Configurable rollout strategy with stickiness options for consistent user experiences. Supports various stickiness modes and customizable rollout percentages.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/predefined-strategy-types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- stickiness - Used to define how we guarantee consistency for a gradual rollout\n- groupId - Used to ensure different flags hash differently for the same user\n- rollout - The percentage (0-100) you want to enable the feature flag for\n```\n\n----------------------------------------\n\nTITLE: Connecting Client-Side JavaScript SDK\nDESCRIPTION: Example showing how to initialize and use the Unleash JavaScript client-side SDK to check feature flags\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/quickstart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UnleashClient } from \"unleash-proxy-client\";\n\nconst unleash = new UnleashClient({\n    url: \"https://<your-unleash-instance>/api/frontend\",\n    clientKey: \"<your-token>\",\n    appName: \"<your-app-name>\",\n});\n\nunleash.on(\"synchronized\", () => {\n    // Unleash is ready to serve updated feature flags.\n\n    // Check a feature flag\n    if (unleash.isEnabled(\"some-flag\")) {\n        // do cool new things when the flag is enabled\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash Client with Impression Event Handling in JavaScript\nDESCRIPTION: Complete example showing how to initialize Unleash client, start it, check for feature flags, and handle impression events with event listeners.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/impression-data.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = new UnleashClient({\n  url: 'https://eu.unleash-hosted.com/hosted/proxy',\n  clientKey: 'your-proxy-key',\n  appName: 'my-webapp',\n});\n\nunleash.start();\n\nunleash.on('ready', () => {\n  unleash.isEnabled('my-feature-flag');\n});\n\nunleash.on('impression', (event) => {\n  // Capture the event here and pass it to internal data lake or analytics provider\n  console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag State in Java\nDESCRIPTION: Example of how to check the state of a feature flag named 'AwesomeFeature' in Java code using the Unleash SDK. This demonstrates the basic usage of feature flags in application code.\nSOURCE: https://github.com/unleash/unleash/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nif (unleash.isEnabled(\"AwesomeFeature\")) {\n  // do new, flashy thing\n} else {\n  // do old, boring stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client with Feature Flag Check\nDESCRIPTION: Demonstrates how to initialize the Unleash client with API credentials and implement a basic feature flag check. Includes a polling interval to continuously check flag status.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/nodejs.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { initialize } = require('unleash-client');\n\nconst unleash = initialize({\n  url: '<YOUR_API_URL>',\n  appName: 'unleash-onboarding-node',\n  customHeaders: {\n    Authorization: '<YOUR_API_TOKEN>' // in production use environment variable\n  },\n});\n\nsetInterval(() => {\n  console.log('Is enabled', unleash.isEnabled('<YOUR_FLAG>'));\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash Client in Django\nDESCRIPTION: Create an Unleash client configuration file. This initializes the connection to the Unleash API with the application name and authentication token.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# You DO NOT want to do this in a production environment\n# Rather, you would create a singleton that is shared across your application\nfrom UnleashClient import UnleashClient\n\nunleash_client = UnleashClient(\n    url=\"http://localhost:4242/api/\",\n    app_name=\"django-blog\",\n    custom_headers={'Authorization': '<YOUR_API_TOKEN>'}\n)\nunleash_client.initialize_client()\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Unleash API Token in Rust\nDESCRIPTION: A secure implementation of the Unleash client initialization that retrieves the API token from environment variables instead of hardcoding it in the source code.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/rust.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet api_token = env::var(\"UNLEASH_API_TOKEN\").expect(\"UNLEASH_API_TOKEN environment variable not set\");\n\nlet client: Client<Flags, reqwest::Client> = ClientBuilder::default()\n    .into_client(\n        \"<YOUR_API_URL>\",\n        \"unleash-onboarding-rust\",\n        \"unleash-onboarding-instance\",\n        Some(api_token.to_owned()),\n    )?;\nclient.register().await?;\n```\n\n----------------------------------------\n\nTITLE: Create a Feature Flag with curl\nDESCRIPTION: This command uses curl to create a new feature flag named 'Feature.A' on the Unleash server. It sends a POST request to the '/api/admin/features' endpoint with the required headers (Authorization and Content-Type) and a JSON payload containing the feature flag's details.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location -H \"Authorization: <apitoken from previous step>\" \\\n  --request POST 'http://localhost:4242/api/admin/features' \\\n  --header 'Content-Type: application/json' --data-raw '{\\\n  \"name\": \"Feature.A\",\\\n  \"description\": \"Dolor sit amet.\",\\\n  \"type\": \"release\",\\\n  \"enabled\": false,\\\n  \"stale\": false,\\\n  \"strategies\": [\\\n    {\\\n      \"name\": \"default\",\\\n      \"parameters\": {}\n    }\n  ]\\\n}'\n```\n\n----------------------------------------\n\nTITLE: Model Variants Configuration\nDESCRIPTION: JavaScript object defining different AI model configurations for feature flag variants.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/ai.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst variants = {\n    variant1: {\n        model: \"gpt-3.5-turbo\",\n        max_tokens: 4096,\n        temperature: 1,\n    },\n    variant2: {\n        model: \"gpt-4-turbo\",\n        max_tokens: 4096,\n        temperature: 1,\n    },\n    variant3: {\n        model: \"gpt-4-vision-preview\",\n        max_tokens: 4096,\n        temperature: 1,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client with Development Configuration\nDESCRIPTION: Example showing how to initialize and start the Unleash client with a basic configuration for development, including a polling interval to check feature flag status.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/javascript.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { UnleashClient } = require('unleash-proxy-client');\n\nconst unleash = new UnleashClient({\n    url: '<YOUR_API_URL>',\n    clientKey: '<YOUR_API_TOKEN>', // in production use environment variable\n    appName: 'unleash-onboarding-javascript',\n});\n\nunleash.start();\n\nsetInterval(() => {\n    console.log('Is enabled', unleash.isEnabled('<YOUR_FLAG>'));\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Final Chat API with Unleash Integration\nDESCRIPTION: Updated implementation of the chat API endpoint using Unleash for feature flag management.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/ai.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initialize } from \"unleash-client\";\nimport { createOpenAI } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\nimport { env } from \"$env/dynamic/private\";\n\nconst openai = createOpenAI({\n    apiKey: env.OPENAI_API_KEY ?? \"\",\n});\n\nconst unleash = initialize({\n    url: \"http://localhost:4242/api/\",\n    appName: \"my-ai-app\",\n    customHeaders: { Authorization: env.UNLEASH_API_KEY ?? \"\" },\n});\n\nexport const POST = async ({ request }) => {\n    const { messages } = await request.json();\n\n    // Get the feature flag variant\n    const variant = unleash.getVariant(\"ai-model\");\n\n    const result = await streamText({\n        model: openai(variant.model),\n        messages,\n        max_tokens: variant.max_tokens,\n        temperature: variant.temperature,\n    });\n\n    return result.toDataStreamResponse();\n};\n```\n\n----------------------------------------\n\nTITLE: Feature Flag Conditional Rendering in Node.js\nDESCRIPTION: This snippet demonstrates how to conditionally render a stylesheet based on the state of a feature flag in Unleash using the Node.js SDK. It checks if the 'new-color-scheme' feature is enabled and loads the appropriate stylesheet.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/understanding-unleash/the-anatomy-of-unleash.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (unleash.isEnabled(\"new-color-scheme\")) {\n  // load stylesheet with the new color scheme\n} else {\n  // load stylesheet with the old color scheme\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFlags Hook to Retrieve All Feature Flags in React\nDESCRIPTION: This example shows how to use the useFlags hook to retrieve all available feature flags in a React component. The output includes flag names, enabled status, variant information, and impression data settings.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst allFlags = useFlags();\n\n// output\n[\n    {\n        name: \"string\",\n        enabled: true,\n        variant: {\n            name: \"string\",\n            enabled: false,\n        },\n        impressionData: false,\n    },\n    {\n        name: \"string\",\n        enabled: true,\n        variant: {\n            name: \"string\",\n            enabled: false,\n        },\n        impressionData: false,\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag Status in Android Activity with Jetpack Compose\nDESCRIPTION: Demonstrates how to check a feature flag's status in an Android activity using Jetpack Compose. This example polls the flag status every 3 seconds and updates the UI accordingly, showing a common pattern for feature flag integration.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/android.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val unleashInstance = (application as MyApplication).unleash\n\n        setContent {\n            var flagStatus by remember { mutableStateOf(\"loading\") }\n            LaunchedEffect(Unit) {\n                while (isActive) {\n                    val isFlagEnabled = unleashInstance.isEnabled(\"<YOUR_FLAG>\")\n                    flagStatus = if (isFlagEnabled) \"enabled\" else \"disabled\"\n                    delay(3000L)\n                }\n            }\n\n            Text(text = \"Flag is $flagStatus!\")\n        }\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client with Environment Variable in Python\nDESCRIPTION: This code snippet shows how to initialize the Unleash client using an API token stored in an environment variable, which is a more secure approach for production environments.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/python.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom UnleashClient import UnleashClient\nimport asyncio\nimport os\n\nclient = UnleashClient(\n    url=\"<YOUR_API_URL>\",\n    app_name=\"unleash-onboarding-python\",\n    custom_headers={'Authorization': os.getenv('UNLEASH_API_TOKEN')}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Variant - React\nDESCRIPTION: This snippet demonstrates how to use the `useVariant` hook to get the variant information of a specific feature flag. The feature flag name is passed as a parameter and returns flag and variant data.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst variant = useVariant(\"newFeatureFlag\");\\n// output\\n{ enabled: true, feature_enabled: true, name: \"newVariant\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing AddHabit component with premium features\nDESCRIPTION: Svelte component for adding new habits with a limit based on the user's tier (free or premium).\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/sveltekit/implementing-feature-flags-sveltekit.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  // src/lib/AddHabit.svelte\n  import { habitStore } from '$lib/stores.js';\n\n  export let maxHabits = 3;\n\n  let habitsFull = false;\n\n  function addHabit(e) {\n    let numHabits = $habitStore.length;\n\n    if (numHabits === maxHabits) {\n      habitsFull = true;\n    } else {\n      let form = e.target;\n      const formData = new FormData(e.target);\n\n      habitStore.update((items) => {\n        items.push({ id: items.length + 1, name: formData.get('name'), completedDays: [] });\n        return items;\n      });\n\n      // reset the form\n      form.reset();\n    }\n  }\n</script>\n\n<dialog open={habitsFull}>\n  <h2>❌ Maximum Habits Reached</h2>\n  <p>You can only have up to {maxHabits} on the free tier. Purchase a premium version to unlock more.</p>\n  <form method=\"dialog\">\n    <button>OK</button>\n  </form>\n</dialog>\n\n<form on:submit|preventDefault={addHabit}>\n  <input type=\"text\" name=\"name\" />\n  <button type=\"submit\"> Add new habit </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Evaluating Feature Flag State - React\nDESCRIPTION: This snippet illustrates the use of the `useFlag` hook to determine if a specific feature flag is enabled within a React component. It accepts the feature flag name as a parameter.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst newFeature = useFlag(\"newFeatureFlag\");\\n// output\\ntrue\n```\n\n----------------------------------------\n\nTITLE: Implementing Unleash Feature Flags in Rust\nDESCRIPTION: Complete example of a Rust application that initializes the Unleash client, registers with the Unleash server, and checks the status of a feature flag. It uses tokio for asynchronous execution and enum_map to define feature flags.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/rust.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse enum_map::Enum;\nuse serde::{Deserialize, Serialize};\nuse std::error::Error;\nuse std::time::Duration;\nuse tokio::time::sleep;\nuse unleash_api_client::client::ClientBuilder;\nuse unleash_api_client::Client;\n\n#[derive(Debug, Deserialize, Serialize, Enum, Clone)]\nenum Flags {\n    #[serde(rename = \"<YOUR_FLAG>\")]\n    TestFlag,\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error + Send + Sync>> {\n    let client: Client<Flags, reqwest::Client> = ClientBuilder::default()\n        .into_client(\n            \"<YOUR_API_URL>\",\n            \"unleash-onboarding-rust\",\n            \"unleash-onboarding-instance\",\n            Some(\"<YOUR_API_TOKEN>\".to_owned()), // in production use environment variable\n        )?;\n    client.register().await?;\n\n    let (_, _) = tokio::join!(client.poll_for_updates(), async {\n        sleep(Duration::from_millis(1000)).await;\n\n        let is_enabled = client.is_enabled(Flags::TestFlag, None, true);\n        println!(\"\\nIs flag enabled: {}\\n\", is_enabled);\n\n        sleep(Duration::from_millis(5000)).await;\n\n        client.stop_poll().await;\n        Ok::<(), Box<dyn Error + Send + Sync>>(())\n    });\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unleash Event Hook for Slack Notifications in JavaScript\nDESCRIPTION: Sets up an event hook function to send Unleash feature flag change notifications to Slack. Handles events like feature creation, updates, archival and revival. Uses axios for HTTP requests and formats messages with feature links and details.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-send-feature-updates-to-slack-deprecated.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = require('unleash-server');\nconst axios = require('axios');\n\nfunction onEventHook(event, eventData) {\n  const { createdBy: user, data } = eventData;\n  let text = '';\n\n  const unleashUrl = 'http://your.unleash.host.com';\n  const feature = `<${unleashUrl}/#/features/strategies/${data.name}|${data.name}>`;\n\n  switch (event) {\n    case 'feature-created':\n    case 'feature-updated': {\n      const verb =\n        event === 'feature-created' ? 'created a new' : 'updated the';\n      text = `${user} ${verb} feature ${feature}\\ndescription: ${\n        data.description\n      }\\nenabled: ${data.enabled}\\nstrategies: \\`${JSON.stringify(\n        data.strategies,\n      )}\\``;\n      break;\n    }\n    case 'feature-archived':\n    case 'feature-revived': {\n      const verb = event === 'feature-archived' ? 'archived' : 'revived';\n      text = `${user} ${verb} the feature ${feature}`;\n      break;\n    }\n    default: {\n      console.error(`Unknown event ${event}`);\n      return;\n    }\n  }\n\n  axios\n    .post(\n      'https://hooks.slack.com/services/THIS_IS_WHERE_THE_CUSTOM_URL_GOES',\n      {\n        username: 'Unleash',\n        icon_emoji: ':unleash:',\n        text: text,\n      },\n    )\n    .then((res) => {\n      console.log(`Slack post statusCode: ${res.status}. Text: ${text}`);\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n}\n\nconst options = {\n  eventHook: onEventHook,\n};\n\nunleash.start(options).then((server) => {\n  console.log(`Unleash started on http://localhost:${server.app.get('port')}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Unleash Go SDK Implementation\nDESCRIPTION: Complete example showing Unleash SDK initialization and feature flag checking in a Go application. Demonstrates basic setup with hardcoded API token and continuous flag checking.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/Unleash/unleash-client-go/v4\"\n    \"net/http\"\n    \"time\"\n)\n\nfunc init() {\n    unleash.Initialize(\n        unleash.WithListener(&unleash.DebugListener{}),\n        unleash.WithAppName(\"unleash-onboarding-golang\"),\n        unleash.WithUrl(\"<YOUR_API_URL>\"),\n        unleash.WithCustomHeaders(http.Header{\"Authorization\": {\"<YOUR_API_TOKEN>\"}}), // in production use environment variable\n    )\n}\n\nfunc main() {\n    for {\n        unleash.IsEnabled(\"<YOUR_FLAG>\")\n        time.Sleep(time.Second)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash Client in .NET Application\nDESCRIPTION: Implementation of Unleash client configuration and registration as a singleton service in the .NET dependency injection container. Includes setting up the API URL and authorization headers.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/implementing-feature-flags-dotnet.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unleash;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nvar settings = new UnleashSettings()\n{\n    AppName = \"dotnet-tutorial\",\n    UnleashApi = new Uri(\"http://localhost:4242/api/\"),\n    CustomHttpHeaders = new Dictionary<string, string>()\n    {\n        {\"Authorization\",\"default:development.unleash-insecure-api-token\" }\n    }\n};\n\nvar unleash = new DefaultUnleash(settings);\nbuilder.Services.AddSingleton<IUnleash>(c => unleash);\n// the other services don't change\n\n// Add services to the container.\nbuilder.Services.AddHttpClient(); // Register HttpClient\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash with Environment Variable for API Key\nDESCRIPTION: Set up UnleashConfig using an environment variable for the API key. This is a more secure approach for production environments, avoiding hardcoded credentials.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/java.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nUnleashConfig config = UnleashConfig.builder()\n    .appName(\"unleash-onboarding-java\")\n    .instanceId(\"unleash-onboarding-instance\")\n    .unleashAPI(\"<YOUR_API_URL>\")\n    .apiKey(System.getenv(\"UNLEASH_API_KEY\"))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Feature Flag Workflow Automation in Go\nDESCRIPTION: Demonstrates how to automate feature flag operations including enabling, updating, and archiving flags as part of the development workflow.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/golang-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nurl := fmt.Sprintf(\"%s/api/admin/projects/%s/features/%s/environments/%s/on\",\n    unleashURL, projectID, featureName, environment)\n\nreq, err := http.NewRequest(\"POST\", url, nil)\nif err != nil {\n    return fmt.Errorf(\"error creating request: %v\", err)\n}\n\nreq.Header.Add(\"Accept\", \"application/json\")\nreq.Header.Add(\"Authorization\", apiKey)\n\nclient := &http.Client{}\nresp, err := client.Do(req)\nif err != nil {\n    return fmt.Errorf(\"error making request: %v\", err)\n}\ndefer resp.Body.Close()\n```\n\nLANGUAGE: go\nCODE:\n```\nurl := fmt.Sprintf(\"%s/api/admin/projects/%s/features/%s\",\n    unleashURL, projectID, featureName)\n\npayload := FeatureUpdate{\n    Description:     \"Controls disabling of the comments section in case of an incident\",\n    Type:           \"kill-switch\",\n    Stale:          true,\n    Archived:       true,\n    ImpressionData: false,\n}\n\njsonPayload, err := json.Marshal(payload)\nif err != nil {\n    return fmt.Errorf(\"error marshaling payload: %v\", err)\n}\n\nreq, err := http.NewRequest(\"PUT\", url, bytes.NewBuffer(jsonPayload))\nreq.Header.Add(\"Accept\", \"application/json\")\nreq.Header.Add(\"Authorization\", apiKey)\nreq.Header.Add(\"Content-Type\", \"application/json\")\n```\n\nLANGUAGE: go\nCODE:\n```\nurl := fmt.Sprintf(\"%s/api/admin/projects/%s/features/%s\",\n    unleashURL, projectID, featureName)\n\nreq, err := http.NewRequest(\"DELETE\", url, nil)\nif err != nil {\n    return fmt.Errorf(\"error creating request: %v\", err)\n}\n\nreq.Header.Add(\"Authorization\", apiKey)\n\nclient := &http.Client{}\nresp, err := client.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Defining PetProductsService Interface with Unleash Toggle\nDESCRIPTION: Creates a Java interface for pet products service with an Unleash toggle annotation to switch between implementations based on the feature flag state.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.samples.petclinic.owner;\n\nimport org.unleash.features.annotation.ContextPath;\nimport org.unleash.features.annotation.Toggle;\n\npublic interface PetProductsService {\n\n   @Toggle(name = \"productsPageFlag\", alterBean = \"petPrescriptionServiceImpl\")\n   String getPetProductsString(String name);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client in JavaScript\nDESCRIPTION: Code snippet showing how to initialize the Unleash client with the necessary configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/javascript/implementing-feature-flags-js.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = new UnleashClient({\n    url: \"http://localhost:4242/api/\",\n    clientKey: \"YOUR_API_KEY\",\n    appName: \"corgi-site\",\n});\n\nunleash.start();\n```\n\n----------------------------------------\n\nTITLE: Survey Delete Route Implementation\nDESCRIPTION: Route handler for deleting surveys with feature flag check\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@bp.route(\"/surveys/<int:survey_id>/delete\", methods=[\"GET\", \"POST\", \"DELETE\"])\ndef delete_survey(survey_id):\n   # if flag is not enabled, return a 404 page\n   if not client.is_enabled('delete_survey_flag'):\n      abort(404, description=\"Resource not found\")\n   else:\n      # otherwise, delete the survey\n      survey = db.get_or_404(Survey, survey_id)\n      db.session.delete(survey)\n      db.session.commit()\n\n      return redirect(url_for(\"surveys.surveys_list_page\"))\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flags with Unleash API in Python\nDESCRIPTION: This code snippet shows how to update a feature flag in a project using the Unleash API. It sets several parameters, like description and type, within the payload and requires the 'requests' and 'json' libraries. Ensure that the URL, including the projectId and featureName placeholders, is replaced with actual values. The API Key must be specified for authentication, and the response is printed to the console.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/examples.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\n\npayload = json.dumps({\n\"description\": \"Controls disabling of the comments section in case of an incident\",\n\"type\": \"kill-switch\",\n\"stale\": True,\n\"archived\": True,\n\"impressionData\": False\n})\nheaders = {\n'Content-Type': 'application/json',\n'Accept': 'application/json',\n'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Using Unleash React SDK to Handle Feature Flag Variants\nDESCRIPTION: This code snippet demonstrates how to retrieve and handle feature flag variants using the Unleash React SDK. It checks the variant name and conditionally renders different components based on the active variant. The prerequisite is to have the Unleash React SDK installed and properly configured in the project. Inputs include the feature flag identifier, and outputs are the corresponding component renderings based on the variant.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/troubleshooting/flag-abn-test-unexpected-result.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport { useVariant } from '@unleash/proxy-client-react';\n\nexport const TestComponent = () => {\n  const variant = useVariant('ab-test-flag');\n\n  if (variant.name === 'A') {\n    return <AComponent />;\n  } else if (variant.name === 'B') {\n    return <BComponent />;\n  }\n  return <DefaultComponent />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using useFlagsStatus Hook to Check Feature Flags Status in React\nDESCRIPTION: This example demonstrates how to use the useFlagsStatus hook to check whether feature flags are ready for use and if there are any errors. This is useful for handling loading states in components that depend on feature flags.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst flagsStatus = useFlagsStatus();\n\n// output\n{ flagsReady: true, flagsError: null }\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Unleash Client in Java\nDESCRIPTION: Configure and initialize the Unleash client, then continuously check a feature flag status. This snippet demonstrates setting up the UnleashConfig, creating an Unleash instance, and using it in a loop to check flag status.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/java.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nUnleashConfig config = UnleashConfig.builder()\n    .appName(\"unleash-onboarding-java\")\n    .instanceId(\"unleash-onboarding-instance\")\n    .unleashAPI(\"<YOUR_API_URL>\")\n    .apiKey(\"<YOUR_API_TOKEN>\") // in production use environment variable\n    .build();\n\nUnleash unleash = new DefaultUnleash(config);\n\nwhile (true) {\n    boolean featureEnabled = unleash.isEnabled(\"<YOUR_FLAG>\");\n    System.out.println(\"Feature enabled: \" + featureEnabled);\n    Thread.sleep(1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash in React\nDESCRIPTION: This code snippet creates a configuration object for Unleash, including the API URL, client key, refresh interval, and app name.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    url: \"http://localhost:4242/api/frontend\", // Your local instance Unleash API URL\n    clientKey: \"<client_key>\", // Your client-side API token\n    refreshInterval: 15, // How often (in seconds) the client should poll the proxy for updates\n    appName: \"cypress-realworld-app\", // The name of your application. It's only used for identifying your application\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flag via Unleash API in Java\nDESCRIPTION: Code to enable a feature flag in a specific environment using Unleash's REST API with OkHttp client. Requires API key authentication and project/feature/environment identifiers.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/on\")\n  .method(\"POST\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"<API_KEY_VALUE>\")\n  .build();\nResponse response = client.newCall(request).execute();\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flag in React Component\nDESCRIPTION: This code snippet demonstrates how to use the useFlag hook to check the state of a feature flag named 'newNotificationsBadge' within a React component.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst notificationsBadgeEnabled = useFlag(\"newNotificationsBadge\");\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Unleash Client in Swift\nDESCRIPTION: Example of how to initialize the Unleash client with configuration parameters and periodically check if a feature flag is enabled. The code sets up a timer to check the status of a specified feature flag every second.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/swift.md#2025-04-21_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport UnleashProxyClientSwift\n\nvar unleash = UnleashProxyClientSwift.UnleashClient(\n   unleashUrl: \"<YOUR_API_URL>\",\n   clientKey: \"<YOUR_API_TOKEN>\", // in production use environment variable\n   appName: \"unleash-onboarding-swift\",\n   context: [:])\n\nunleash.start()\n\nTimer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in\n    print(\"Is enabled\", unleash.isEnabled(name: \"<YOUR_FLAG>\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST and GraphQL API Calls with Static Feature Flag\nDESCRIPTION: Ruby code demonstrating how to toggle between REST and GraphQL API calls using a static feature flag.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/implementing-feature-flags-ruby.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'httpx'\nrequire 'json'\nrequire 'unleash'\n\n# Define a static feature flag\nis_graphql = true\nif is_graphql\n  # Call the GraphQL API\n  query = {\n    query: '\n      {\n        allPlanets {\n          planets {\n            population\n            name\n          }\n        }\n      }\n    '\n  }\n\n  response = HTTPX.post('https://swapi-graphql.netlify.app/.netlify/functions/index', body: query.to_json,\n    headers: { 'Content-Type': 'application/json' })\n  planets = JSON.parse(response.body)['data']['allPlanets']['planets']\n  puts \"Hello GraphQL\"\nelse\n  # Call the REST API\n  response = HTTPX.get('https://swapi.py4e.com/api/planets/')\n  planets = JSON.parse(response.body)['results'].map do |planet|\n    { name: planet['name'], population: planet['population'] }\n  end\nend\n\nputs \"There are #{planets.length} planets\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client\nDESCRIPTION: Configuration and initialization of UnleashClient with API token and server URL\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient = UnleashClient(\n   url=\"http://host.docker.internal:4242/api\",\n   app_name=\"flask-surveys-container-app\",\n   custom_headers={'Authorization': '<API token>'}\n)\n\nclient.initialize_client()\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash and Mixpanel in Flutter Service Locator\nDESCRIPTION: This code snippet shows how to initialize Unleash client and Mixpanel in a Flutter app's service locator. It sets up dependencies for feature flag management and analytics tracking.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/flutter/a-b-testing.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ServiceLocator {\n ServiceLocator._();\n\n static GetIt get getIt => GetIt.instance;\n\n static Future<void> initialize() async {\n   /// ...\n\n   final unleash = UnleashClient(\n     url: Uri.parse('http://127.0.0.1:4242/api/frontend'),\n     clientKey: dotenv.env[\"UNLEASH_API_KEY\"] as String,\n     appName: 'unplash_demo',\n   );\n\n   await unleash.start();\n\n   getIt.registerLazySingleton(() => unleash);\n   getIt.registerLazySingleton<UnleashConfig>(\n     () => UnleashConfigImpl(getIt()),\n   );\n\n   getIt.registerLazySingleton<WebPlatformResolver>(\n     () => WebPlatformResolverImpl(),\n   );\n\n\n   final TargetPlatformExtended targetPlatformExtended =\n       TargetPlatformExtendedImpl(getIt());\n\n   getIt.registerLazySingleton<TargetPlatformExtended>(\n     () => targetPlatformExtended,\n   );\n\n   if (targetPlatformExtended.isMobile) {\n     final mixPanel = await Mixpanel.init(\n       dotenv.env[\"MIXPANEL_KEY\"] as String,\n       trackAutomaticEvents: false,\n     );\n\n     getIt.registerLazySingleton(() => mixPanel);\n   }\n\n   getIt.registerLazySingleton<MixpanelConfig>(\n     () => MixpanelConfigImpl(getIt()),\n   );\n\n   /// ...\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client in .NET Application\nDESCRIPTION: Demonstrates how to initialize the Unleash client with application settings, API URL, and authentication headers. The example shows a continuous loop checking if a feature flag is enabled every second.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/dotnet.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unleash;\nusing Unleash.ClientFactory;\n\npublic class Program\n{\n    public static async Task Main()\n    {\n        var settings = new UnleashSettings()\n        {\n            AppName = \"unleash-onboarding-dotnet\",\n            UnleashApi = new Uri(\"<YOUR_API_URL>\"),\n            CustomHttpHeaders = new Dictionary<string, string>()\n            {\n                {\"Authorization\",\"<YOUR_API_TOKEN>\"} // in production use environment variable\n            }\n        };\n\n        var unleash =  new DefaultUnleash(settings);\n\n        while (true) {\n            Console.WriteLine($\"Flag is enabled: {unleash.IsEnabled(\"<YOUR_FLAG>\")}\");\n            await Task.Delay(1000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Unleash feature flags in Rust application\nDESCRIPTION: Complete Rust code that integrates Unleash feature flags to control image conversion between JPEG and WebP formats using asynchronous operations with tokio.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/implementing-feature-flags-rust.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse enum_map::Enum;\nuse image::ImageReader;\nuse serde::{Deserialize, Serialize};\nuse std::error::Error;\nuse std::fs;\nuse std::time::Duration;\nuse tokio::time::sleep;\nuse unleash_api_client::client::ClientBuilder;\nuse unleash_api_client::Client;\nuse webp::Encoder;\n\n#[derive(Debug, Deserialize, Serialize, Enum, Clone)]\nenum Flags {\n    webp,\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error + Send + Sync>> {\n    let client:Client<Flags, reqwest::Client> = ClientBuilder::default().into_client(\n        \"http://localhost:4242/api\",\n        \"unleash-rust-client-example\",\n        \"unleash-rust-client-example\",\n        Some(\"default:development.unleash-insecure-api-token\".to_string()),\n    )?;\n    client.register().await?;\n\n    let (_, _) = tokio::join!(client.poll_for_updates(), async {\n        // Ensure we have features for this demo.\n        sleep(Duration::from_millis(500)).await;\n\n        let is_webp = client.is_enabled(Flags::webp, None, false);\n        process_image(is_webp)?;\n\n        // allow tokio::join to finish\n        client.stop_poll().await;\n        Ok::<(), Box<dyn Error + Send + Sync>>(())\n    });\n\n    Ok(())\n}\n\nfn process_image(is_webp: bool) -> Result<(), Box<dyn Error + Send + Sync>> {\n    let img = ImageReader::open(\"input.png\")?.decode()?;\n\n    if is_webp {\n        let webp_data = Encoder::from_image(&img)?.encode(0.75);\n        fs::write(\"output.webp\", webp_data.to_vec())?;\n    } else {\n        img.save_with_format(\"output.jpeg\", image::ImageFormat::Jpeg)?;\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Unleash Feature Flag in Ruby Application\nDESCRIPTION: Ruby code showing how to integrate the Unleash feature flag into the application logic.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/implementing-feature-flags-ruby.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'httpx'\nrequire 'json'\nrequire 'unleash'\n\n@unleash = Unleash::Client.new(app_name: 'starwars_ruby', url: 'http://localhost:4242/api/', custom_http_headers: {\n 'Authorization': 'YOUR_API_KEY'\n})\n\nif @unleash.is_enabled?(\"graphql\")\n  # Call the GraphQL API\n\n  # ... rest of the code\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Variants for Multiple Color Themes\nDESCRIPTION: This code shows how to implement multiple variants of a feature flag to serve different color schemes to users. It retrieves the variant name from the feature flag and conditionally loads the corresponding stylesheet based on whether the variant is 'green', 'blue', 'purple', or the default.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/understanding-unleash/the-anatomy-of-unleash.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = unleash.getVariant(\"new-color-scheme\").name;\n\nif (theme === \"green\") {\n  // load stylesheet with green color scheme\n} else if (theme === \"blue\") {\n  // load stylesheet with blue color scheme\n} else if (theme === \"purple\") {\n  // load stylesheet with purple color scheme\n} else {\n  // load stylesheet with old color scheme\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash SDK in AWS Lambda\nDESCRIPTION: This code snippet shows how to initialize the Unleash SDK in an AWS Lambda function. It ensures the SDK is only initialized once during the function's lifespan and sets up the necessary configuration to connect to the Unleash API.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/serverless/implementing-feature-flags-in-aws-lambda.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    startUnleash,\n    InMemStorageProvider,\n    destroyWithFlush,\n} from \"unleash-client\";\nlet unleash;\n\nasync function init() {\n    if (!unleash) {\n        unleash = await startUnleash({\n            url: \"<YOUR_UNLEASH_URL>\",\n            appName: \"lambda-example-app\",\n            customHeaders: {\n                authorization: process.env.API_TOKEN,\n            },\n            storageProvider: new InMemStorageProvider(),\n        });\n        unleash.on(\"initialized\", () =>\n            console.log(\"[runtime] Unleash initialized\")\n        );\n    }\n}\n\nexport const handler = async (event, context) => {\n    // Only the first invocation will trigger SDK initialization.\n    await init();\n    return {\n        statusCode: 200,\n        body: { message: `` },\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Check in Endpoint\nDESCRIPTION: Diff showing the modification of an HTTP endpoint to use Unleash feature flag for conditional logic, replacing a hardcoded boolean with a dynamic feature flag check.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/implementing-feature-flags-dotnet.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n+app.MapGet(\"/\", async (HttpClient httpClient, IUnleash unleash) =>\n+{\n+        bool isGraphql = unleash.IsEnabled(\"graphql-api\"); // Change to true to use GraphQL\n-app.MapGet(\"/\", async (HttpClient httpClient) =>\n-{\n-        bool isGraphql = true; // Change to true to use GraphQL\n  // ... rest of the code\n\n```\n\n----------------------------------------\n\nTITLE: Basic Feature Flag Check in JavaScript\nDESCRIPTION: Shows the basic usage of the isEnabled method to check if a feature flag is enabled. This is the core API that all client implementations should provide.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/client-specification.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nunleash.isEnabled('myAwesomeFlag');\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash FlagProvider in SvelteKit\nDESCRIPTION: Svelte component that wraps the main App component with Unleash's FlagProvider for feature flag functionality.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/sveltekit/implementing-feature-flags-sveltekit.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  // src/routes/+page.svelte\n  import App from '../lib/App.svelte';\n  import { FlagProvider } from '@unleash/proxy-client-svelte';\n\n  const config = {\n    url: 'https://eu.app.unleash-hosted.com/jdfkdjfkd/api/frontend', // Your Front-end API\n    clientKey: '', // Front-end API token (or proxy client key)\n    appName: 'habits'\n  };\n</script>\n\n<FlagProvider {config}>\n  <App />\n</FlagProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing A/B Test Variants in Django Route Handler\nDESCRIPTION: Route handler implementation that uses Unleash variants to control survey deletion behavior. Demonstrates how to split traffic between storing and permanently deleting surveys.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/django-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_survey(survey_id):\n   delete_survey_flag_variant = client.get_variant(\"delete_survey_flag\")\n   if not delete_survey_flag_variant.get(\"enabled\"):\n       abort(404, description=\"Resource not found\")\n   else:\n       delete_survey_flag_variant_name = delete_survey_flag_variant.get(\"name\")\n\n       if delete_survey_flag_variant_name == \"store_deleted_surveys\":\n           # do things here to store in a \"deleted survey\" table\n           print(\"STATUS: storing in DeletedSurvey table....\")\n       elif delete_survey_flag_variant_name == \"permanently_delete_surveys\":\n           # remove survey without storing\n           print(\"STATUS: removing survey without storing it....\")\n           survey = db.get_or_404(Survey, survey_id)\n           db.session.delete(survey)\n           db.session.commit()\n\n       return redirect(url_for(\"surveys.surveys_list_page\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Impression Data Tracking in React\nDESCRIPTION: React component code using useUnleashClient hook to track and log impression events for feature flag usage\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleashClient = useUnleashClient();\n\nuseEffect(() => {\n    unleashClient.start();\n\n    unleashClient.on(\"ready\", () => {\n        const enabledImpression = unleashClient.isEnabled(\n            \"newNotificationsBadge\"\n        );\n        console.log(enabledImpression);\n    });\n\n    unleashClient.on(\"impression\", (impressionEvent: object) => {\n        console.log(impressionEvent);\n        // Capture the event here and pass it internal data lake or analytics provider\n    });\n}, [unleashClient]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client with Flag Polling\nDESCRIPTION: Example demonstrating how to initialize the Unleash client and periodically check feature flag status. Includes imports, client configuration, and a timer for checking flag state.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/flutter.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:unleash_proxy_client_flutter/unleash_proxy_client_flutter.dart';\nimport 'dart:async';\n\nfinal unleash = UnleashClient(\n    url: Uri.parse('<YOUR_API_URL>'),\n    clientKey: '<YOUR_API_TOKEN>', // in production use environment variable\n    appName: 'unleash-onboarding-flutter');\n\nunleash.start();\n\nTimer.periodic(Duration(seconds: 1), (Timer timer) {\n   final flagStatus = unleash.isEnabled('<YOUR_FLAG>');\n   print('Flag is ${unleash.isEnabled(\"<YOUR_FLAG>\") ? \"enabled\" : \"disabled\"}');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradual Rollout Strategy in .NET\nDESCRIPTION: Code to configure a gradual rollout strategy via the Unleash API. Sets up a flexible rollout with customizable parameters including rollout percentage and stickiness.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/dotnet-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nHttpClient client = new HttpClient();\n\nstring url = $\"{unleashUrl}/api/admin/projects/:{projectId}/features/:{featureName}/environments/:{environment}/strategies\";\nvar payload = new\n{\n    name = \"flexibleRollout\",\n    disabled = false,\n    constraints = new object[] { },\n    variants = new object[] { },\n    parameters = new\n    {\n        groupId = \"delete_survey_flag\",\n        rollout = \"50\",\n        stickiness = \"sessionId\"\n    },\n    segments = new object[] { }\n};\n\nclient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"<API_KEY_VALUE>\");\n\nvar response = await client.PostAsJsonAsync(url, payload);\nvar responseBody = await response.Content.ReadAsStringAsync();\n\nConsole.WriteLine(responseBody);\n```\n\n----------------------------------------\n\nTITLE: Implementing Unleash Feature Flag in Rails Controller\nDESCRIPTION: Updating the PostsController to use the Unleash client for checking the feature flag status.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/implementing-feature-flags-rails.md#2025-04-21_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  def index\n    is_top3 = UNLEASH.is_enabled?('top-3', @unleash_context)\n    @posts = is_top3 ? Post.order(created_at: :desc).limit(3) : Post.all\n  end\n```\n\n----------------------------------------\n\nTITLE: Enabling Impression Data via API in Ruby\nDESCRIPTION: Makes a PATCH request to enable impression data collection for a specific feature flag. Requires Unleash URL, project ID, feature flag name, and API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/ruby-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/<your-project-id>/features/<your-feature-flag>\"\n\npayload = [\n  {\n    op: \"replace\",\n    path: \"/impressionData\",\n    value: true\n  }\n].to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.patch(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Deployment Strategy Constraints in Ruby\nDESCRIPTION: Implementation of a canary deployment strategy using constraints to exclude production environment, with a 50% gradual rollout configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/ruby-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/:strategyId\"\npayload = {\n  name: \"flexibleRollout\",\n  disabled: false,\n  constraints: [\n    {\n      values: [\"production\"],\n      inverted: false,\n      operator: \"NOT_IN\",\n      contextName: \"environment\",\n      caseInsensitive: false\n    }\n  ],\n  variants: [],\n  parameters: {\n    groupId: \"delete_survey_flag\",\n    rollout: \"50\",\n    stickiness: \"sessionId\"\n  },\n  segments: []\n}.to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.put(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash PHP SDK with Environment Variable for API Token\nDESCRIPTION: This snippet shows how to initialize the Unleash client using an environment variable for the API token. This is a more secure approach for production environments, as it avoids hardcoding sensitive information.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/php.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$unleash = UnleashBuilder::create()\n    ->withAppName('unleash-onboarding-php')\n    ->withAppUrl('<YOUR_API_URL>')\n    ->withHeader('Authorization', getenv('UNLEASH_API_TOKEN'))\n    ->withInstanceId('unleash-onboarding-instance')\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Using useUnleashContext Hook for Context Updates in React\nDESCRIPTION: This example demonstrates how to use the useUnleashContext hook to update the Unleash context when a user ID changes. The hook returns an update function that can be called with new context values.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst updateContext = useUnleashContext();\n\nuseEffect(() => {\n    // context is updated with userId\n    updateContext({ userId });\n}, [userId]);\n```\n\n----------------------------------------\n\nTITLE: Configuring UnleashClient with UnleashProxyClientSwift in Swift\nDESCRIPTION: This code snippet demonstrates how to import the necessary libraries and configure the UnleashClient within the AppDelegate of an iOS application using Swift. The UnleashClient is initialized with specific parameters like the Unleash server's URL, a client key, and other configuration values. The code snippet includes functions to handle the 'ready' and 'update' events for a feature flag called 'tempUnit', checking its enabled status and printing the result. This setup requires the UnleashProxyClientSwift package and the SwiftUI framework to function correctly. After configuring the client, the app will authenticate with the Unleash server to manage feature flags dynamically.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/implementing-feature-flags-ios.md#2025-04-21_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport UnleashProxyClientSwift\n\npublic let unleash = UnleashProxyClientSwift.UnleashClient(unleashUrl: \"http://localhost:4242/api/frontend\", clientKey: \"<client_key>\", refreshInterval: 15, appName: \"OpenMeteo\")\n\nfunc handleReady () {\n    let isEnabled = unleash.isEnabled(name: \"tempUnit\")\n    print(isEnabled)\n}\n\nfunc handleUpdate () {\n    let isEnabled = unleash.isEnabled(name: \"tempUnit\")\n    print(isEnabled)\n}\n\nfunc application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {\n    unleash.start()\n    return true\n}\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    unleash.subscribe(name: \"ready\", callback: handleReady)\n    unleash.subscribe(name: \"update\", callback: handleUpdate)\n    return true\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Unleash Client in Ruby\nDESCRIPTION: Sets up the Unleash client with API credentials and demonstrates continuous checking of a feature flag status. Replace <YOUR_API_URL>, <YOUR_API_TOKEN>, and <YOUR_FLAG> with actual values.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/ruby.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'unleash'\n\n@unleash = Unleash::Client.new(\n  url: \"<YOUR_API_URL>\",\n  custom_http_headers: { 'Authorization': \"<YOUR_API_TOKEN>\" },  # in production use environment variable\n  app_name: 'unleash-onboarding-ruby',\n  instance_id: 'unleash-onboarding-ruby',\n)\n\nwhile true\n  if @unleash.is_enabled?(\"<YOUR_FLAG>\")\n    puts \"Flag is enabled\"\n  else\n    puts \"Flag is not enabled\"\n  end\n  sleep 3\nend\n```\n\n----------------------------------------\n\nTITLE: Creating HTTPS Server for Unleash using Node.js\nDESCRIPTION: This snippet demonstrates how to manually set up HTTPS termination in Unleash using Node.js. It leverages the 'https' module to create a secure server and requires access to SSL certificate files. Key parameters include 'key' and 'cert' for the SSL setup, and the server listens on port 443.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/troubleshooting/https.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst https = require('node:https');\nconst fs = require('node:fs');\nconst options = {\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\n};\n\nlet app = unleash.create();\nhttps.createServer(options, app).listen(443);\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Between REST and GraphQL APIs\nDESCRIPTION: Updated endpoint implementation that can switch between REST and GraphQL versions of the Rick and Morty API based on a static boolean flag. This demonstrates the toggle functionality before integrating with Unleash.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/implementing-feature-flags-dotnet.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGet(\"/\", async (HttpClient httpClient) =>\n{\n        bool isGraphql = true; // Change to true to use GraphQL\n\n        if (isGraphql)\n        {\n            var query = new {\n                query = @\"\n                {\n                    characters {\n                        results {\n                            name\n                        }\n                    }\n                }\n                \"\n            };\n\n            var response = await httpClient.PostAsJsonAsync(\"https://rickandmortyapi.com/graphql\", query);\n            var result = await response.Content.ReadFromJsonAsync<RickAndMortyGraphQLResponse>();\n            var characters = result?.Data?.Characters?.Results;\n\n            Console.WriteLine(\"Hello GraphQL\");\n            Console.WriteLine($\"There are {characters?.Length} characters\");\n            return characters;\n        }\n        else\n        {\n            var response = await httpClient.GetFromJsonAsync<RickAndMortyApiResponse>(\"https://rickandmortyapi.com/api/character/\");\n            var characters = response?.Results;\n\n            Console.WriteLine(\"Hello REST API\");\n            Console.WriteLine($\"There are {characters?.Length} characters\");\n            return characters;\n        }\n\n\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Archiving Feature Flag via Unleash API in Java\nDESCRIPTION: Code snippet for archiving a feature flag using Unleash's REST API. Implements DELETE request using OkHttp client and requires API key authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\")\n  .method(\"DELETE\", body)\n  .addHeader(\"Authorization\", \"<API_KEY_VALUE>\")\n  .build();\nResponse response = client.newCall(request).execute();\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client in Ruby\nDESCRIPTION: Ruby code to initialize the Unleash client with the necessary configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/implementing-feature-flags-ruby.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n@unleash = Unleash::Client.new(app_name: 'starwars_ruby', url: 'http://localhost:4242/api/', custom_http_headers: {\n  'Authorization': 'YOUR_API_KEY'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Unleash Client - React\nDESCRIPTION: This snippet shows how to initialize the Unleash client and handle its events, checking whether a specific feature flag is enabled. It provides ways to respond to client readiness and impression events.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst unleashClient = useUnleashClient();\\nunleashClient.start();\\nunleashClient.on(\"ready\", () => {\\nconst impressionEnabled = unleashClient.isEnabled(\"newFeatureFlag\");\\n\\t// do something here\\n});\\nunleashClient.on(\"impression\", (events) => {\\n\\tconsole.log(events);\\n\\t// do something with impression data here\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash in Rails\nDESCRIPTION: Creating an initializer file to configure Unleash with the application name, URL, and API token.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/implementing-feature-flags-rails.md#2025-04-21_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nUnleash.configure do |config|\n  config.app_name = Rails.application.class.module_parent_name\n  config.url      = 'http://localhost:4242/api/'\n  # config.instance_id = \"#{Socket.gethostname}\"\n  config.logger   = Rails.logger\n  config.custom_http_headers = {'Authorization': '<YOUR_API_TOKEN>'}\nend\n\nUNLEASH = Unleash::Client.new\n```\n\n----------------------------------------\n\nTITLE: Integrating Unleash with Express without Auto-Start\nDESCRIPTION: Example of how to integrate Unleash with an Express application without automatic server start. This allows incorporating Unleash as part of a larger Express app by creating the Unleash instance and attaching it to the parent application.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst unleash = require('unleash-server');\nconst app = express();\n\nconst start = async () => {\n    const instance = await unleash.create({\n        databaseUrl: 'postgres://unleash_user:password@localhost:5432/unleash',\n    });\n    app.use(instance.app);\n    console.log(`Unleash app generated and attached to parent application`);\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Implementing isEnabled Impression Event Structure in JavaScript\nDESCRIPTION: Example structure of an impression event triggered by isEnabled check. Shows the event object containing context information, feature flag status, and unique event identification.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/impression-data.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  eventType: 'isEnabled',\n  eventId: '84b41a43-5ba0-47d8-b21f-a60a319607b0',\n  context: {\n    sessionId: 54085233,\n    appName: 'my-webapp',\n    environment: 'default'\n  },\n  enabled: true,\n  featureName: 'my-feature-flag',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Variants in iOS\nDESCRIPTION: Swift function to handle temperature unit variants in iOS app. Checks if feature flag is enabled and handles different temperature unit variants.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/examples.md#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc handleUpdate () {\n    let isEnabled = unleash.isEnabled(name: \"tempUnit\")\n    print(isEnabled)\n    var celsiusUnit = unleash.getVariant(name: \"celsius\")\n    var fahrenheitUnit = unleash.getVariant(name: \"fahrenheit\")\n    if celsiusUnit.enabled {\n        print(celsiusUnit)\n        // manipulate weather api query to use celsius\n    } else {\n        print(fahrenheitUnit)\n        // manipulate weather api query to use fahrenheit\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication in Unleash using Custom Auth Handler - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Unleash Open-Source to use a custom authentication handler by specifying a customAuthHandler in the authentication configuration. The snippet also includes starting Unleash with a specific database configuration. Dependencies include the 'unleash-server' library and a custom authentication handler module. This setup is intended for securing the Admin API with tailored authentication mechanisms.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/securing-unleash.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = require('unleash-server');\nconst myCustomAdminAuth = require('./auth-hook');\n\nunleash\n  .start({\n    databaseUrl: 'postgres://unleash_user:password@localhost:5432/unleash',\n    authentication: {\n      type: 'custom',\n      customAuthHandler: myCustomAdminAuth,\n    },\n  })\n  .then((unleash) => {\n    console.log(\n      `Unleash started on http://localhost:${unleash.app.get('port')}`,\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Go Implementation with Static Feature Flag for REST/GraphQL Toggle\nDESCRIPTION: Go code implementing a static feature flag to toggle between REST and GraphQL API endpoints for retrieving country information.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/implementing-feature-flags-golang.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"log\"\n    \"net/http\"\n)\n\ntype Country struct {\n    Name string `json:\"name\"`\n    Capital string `json:\"capital\"`\n}\n\nfunc main() {\n    // Define a static feature flag\n    isGraphQL := true\n\n    var country Country\n    if isGraphQL {\n        // Call the GraphQL API\n        query := `{\"query\": \"query { country(code: \\\"NO\\\") { name capital } }\"}`\n        req, err := http.NewRequest(\"POST\", \"https://countries.trevorblades.com/\", bytes.NewBuffer([]byte(query)))\n        if err != nil {\n            log.Fatal(err)\n        }\n        req.Header.Set(\"Content-Type\", \"application/json\")\n\n        client := &http.Client{}\n        resp, err := client.Do(req)\n        if err != nil {\n            log.Fatal(err)\n        }\n        defer resp.Body.Close()\n\n        body, _ := io.ReadAll(resp.Body)\n        var response struct {\n            Data struct {\n                Country Country `json:\"country\"`\n            } `json:\"data\"`\n        }\n        json.Unmarshal(body, &response)\n\n        country = response.Data.Country\n        fmt.Println(\"Hello GraphQL\")\n    } else {\n        // Call the REST API\n        resp, err := http.Get(\"https://restcountries.com/v2/alpha/no\")\n        if err != nil {\n            log.Fatal(err)\n        }\n        defer resp.Body.Close()\n\n        body, _ := io.ReadAll(resp.Body)\n        var countries []Country\n        json.Unmarshal(body, &countries)\n        country = countries[0]\n    }\n\n    fmt.Printf(\"Country: %s, Capital: %s\\n\", country.Name, country.Capital)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Impression Data via API\nDESCRIPTION: API request to enable impression data collection for a feature flag by patching the flag settings\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/examples.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\n\npayload = json.dumps([\n {\n    \"op\": \"replace\",\n    \"path\": \"/impressionData\",\n    \"value\": true\n  }\n])\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client in Go\nDESCRIPTION: Code snippet for initializing the Unleash client with the necessary configuration parameters including URL, app name, and API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/implementing-feature-flags-golang.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nunleash.Initialize(\n    unleash.WithUrl(\"http://localhost:4242/api/\"),\n    unleash.WithAppName(\"country_go\"),\n    unleash.WithCustomHeaders(http.Header{\"Authorization\": {\"YOUR_API_KEY\"}}),\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Unleash with Docker\nDESCRIPTION: Commands to clone the Unleash repository and start the server using Docker Compose\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/quickstart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:Unleash/unleash.git\n\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Sending Enabled Impression Data to Google Analytics in JavaScript\nDESCRIPTION: This example shows how to send impression data to Google Analytics only when the feature is enabled, using the variant as the treatment.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/a-b-testing.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nunleash.on(UnleashEvents.Impression, (e: ImpressionEvent) => {\n    if (e.enabled) {\n        // send to google analytics, something like\n        gtag(\"event\", \"screen_view\", {\n            app_name: e.context.appName,\n            feature: e.featureName,\n            treatment: e.variant, // in case we use a variant for the control treatment\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flag Properties via Unleash API in Java\nDESCRIPTION: Implementation for updating feature flag properties including description, type, and status using Unleash's REST API. Uses OkHttp client and requires API key authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"description\\\": \\\"Controls disabling of the comments section in case of an incident\\\",\\n  \\\"type\\\": \\\"kill-switch\\\",\\n  \\\"stale\\\": true,\\n  \\\"archived\\\": true,\\n  \\\"impressionData\\\": false\\n}\");\nRequest request = new Request.Builder()\n  .url(\"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\")\n  .method(\"PUT\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"<API_KEY_VALUE>\")\n  .build();\nResponse response = client.newCall(request).execute();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Unleash Client in Python\nDESCRIPTION: This snippet demonstrates how to initialize the Unleash client with API credentials and continuously check a feature flag's status. It includes a loop that checks the flag status every second.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/python.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom UnleashClient import UnleashClient\nimport asyncio\n\nclient = UnleashClient(\n    url=\"<YOUR_API_URL>\",\n    app_name=\"unleash-onboarding-python\",\n    custom_headers={'Authorization': '<YOUR_API_TOKEN>'}) # in production use environment variable\n\nclient.initialize_client()\n\nwhile True:\n    print(client.is_enabled(\"<YOUR_FLAG>\"))\n    asyncio.run(asyncio.sleep(1))\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixpanel Configuration for A/B Testing in Flutter\nDESCRIPTION: This code snippet defines an abstract MixpanelConfig class and its implementation for tracking A/B testing events and variants in a Flutter app. It includes methods for tracking like events and assigned variants.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/flutter/a-b-testing.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class MixpanelConfig {\n /// ...\n\n /// Helps you get the metrics of experimentation to analysis\n /// the different position of the share image button.\n void trackLikeEventForExperimentation({\n   required LikeButtonPosition likeButtonPosition,\n   required String photoId,\n });\n\n /// Help you get the variant based on which we can create funnel\n /// for analytics.\n void trackLikeVariant(LikeButtonPosition likeButtonPosition);\n}\n\nclass MixpanelConfigImpl implements MixpanelConfig {\n final TargetPlatformExtended targetPlatformExtended;\n\n MixpanelConfigImpl(this.targetPlatformExtended);\n\n Mixpanel get mixpanel {\n   return ServiceLocator.getIt<Mixpanel>();\n }\n\n /// ...\n\n @override\n void trackLikeEventForExperimentation({\n   required LikeButtonPosition likeButtonPosition,\n   required String photoId,\n }) {\n   if (targetPlatformExtended.isMobile) {\n     mixpanel.track('like-experimentation', properties: {\n       \"variant\": describeEnum(likeButtonPosition),\n       \"photoId\": photoId,\n     });\n   }\n }\n\n @override\n void trackLikeVariant(LikeButtonPosition likeButtonPosition) {\n   if (targetPlatformExtended.isMobile) {\n     mixpanel.track('like-variant', properties: {\n       \"variant\": describeEnum(likeButtonPosition),\n     });\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Run Configuration for Unleash Proxy\nDESCRIPTION: Docker run command with essential environment variables for starting the Unleash Proxy. Requires proxy client key, Unleash API URL, and client API token.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-run-the-unleash-proxy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    -e UNLEASH_PROXY_CLIENT_KEYS=<proxy-client-key> \\\n    -e UNLEASH_URL='<unleash-api-url>' \\\n    -e UNLEASH_API_TOKEN=<client-api-token> \\\n    -p 3000:3000 \\\n    unleashorg/unleash-proxy\n```\n\n----------------------------------------\n\nTITLE: Implementing Canary Deployment Strategy in Rust\nDESCRIPTION: API implementation to update a feature flag strategy with environment-based constraints for canary deployments\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/rust-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse reqwest::blocking::Client;\nuse serde_json::json;\nuse std::error::Error;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let client = Client::new();\n\n    let unleash_url = \"your_unleash_url\";\n    let project_id = \"your_project_id\";\n    let feature_name = \"your_feature_name\";\n    let environment = \"your_environment\";\n    let strategy_id = \"your_strategy_id\";\n    let url = format!(\"{}/api/admin/projects/{}/features/{}/environments/{}/strategies/{}\",\n                      unleash_url, project_id, feature_name, environment, strategy_id);\n\n    let payload = json!({\n        \"name\": \"flexibleRollout\",\n        \"disabled\": false,\n        \"constraints\": [\n            {\n                \"values\": [\"production\"],\n                \"inverted\": false,\n                \"operator\": \"NOT_IN\",\n                \"contextName\": \"environment\",\n                \"caseInsensitive\": false\n            }\n        ],\n        \"variants\": [],\n        \"parameters\": {\n            \"groupId\": \"delete_survey_flag\",\n            \"rollout\": \"50\",\n            \"stickiness\": \"sessionId\"\n        },\n        \"segments\": []\n    });\n\n    let response = client.put(&url)\n        .header(\"Accept\", \"application/json\")\n        .header(\"Authorization\", \"<YOUR_API_KEY>\")\n        .json(&payload)\n        .send()?;\n\n    let response_body = response.text()?;\n\n    println!(\"{}\", response_body);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Variant Creation API Command Reference\nDESCRIPTION: API payload example showing how to create or overwrite variants for a feature flag across all environments.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-create-feature-toggles.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/reference/api/unleash/overwrite-feature-variants\n```\n\n----------------------------------------\n\nTITLE: Feature Flag Status Monitoring Logic\nDESCRIPTION: Java code implementing continuous monitoring of feature flag status with periodic checks.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n    while (true) {\n        Thread.sleep(2000);\n        if (unleash.isEnabled(\"endpointFlag\")) {\n            System.out.println(\"STATUS: Endpoint flag is enabled...\");\n        }\n        else {\n            System.out.println(\"STATUS: Endpoint flag is disabled...\");\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Start Unleash server using Docker\nDESCRIPTION: This command starts the Unleash server in a Docker container, mapping port 4242, and setting environment variables for database connection details and disabling SSL. It connects to a PostgreSQL container via the 'unleash' network and ensures the latest image is used.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -p 4242:4242 \\\n  -e DATABASE_HOST=postgres -e DATABASE_NAME=unleash \\\n  -e DATABASE_USERNAME=unleash_user -e DATABASE_PASSWORD=some_password \\\n  -e DATABASE_SSL=false \\\n  --network unleash --pull=always unleashorg/unleash-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradual Rollout Strategy via API\nDESCRIPTION: API request to update a feature flag strategy for gradual rollout with a 50% rollout parameter. The request configures the 'newNotificationsBadge' feature in the development environment.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'http://localhost:4242/api/admin/projects/default/features/newNotificationsBadge/environments/development/strategies/{STRATEGY_ID}' \\\n    --header 'Authorization: INSERT_API_KEY' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '{\n  \"name\": \"flexibleRollout\",\n  \"title\": \"\",\n  \"constraints\": [],\n  \"parameters\": {\n    \"rollout\": \"50\",\n    \"stickiness\": \"default\",\n    \"groupId\": \"newNotificationsBadge\"\n  },\n  \"variants\": [],\n  \"segments\": [],\n  \"disabled\": false\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash with Environment Variables\nDESCRIPTION: A more secure configuration example that loads the API key from an environment variable instead of hardcoding it. This approach is recommended for production environments.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/dotnet.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = new UnleashSettings()\n{\n    AppName = \"unleash-onboarding-dotnet\",\n    UnleashApi = new Uri(\"<YOUR_API_URL>\"),\n    CustomHttpHeaders = new Dictionary<string, string>()\n    {\n        {\"Authorization\",Environment.GetEnvironmentVariable(\"UNLEASH_API_KEY\")}\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing PetPrescriptionServiceImpl Class\nDESCRIPTION: Defines an alternative implementation of the PetProductsService interface, which will be used when the feature flag is enabled.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.samples.petclinic.owner;\n\nimport org.springframework.samples.petclinic.owner.PetProductsService;\nimport org.springframework.stereotype.Service;\n\n@Service(\"petPrescriptionServiceImpl\")\npublic class PetPrescriptionServiceImpl implements PetProductsService {\n\n   @Override\n   public String getPetProductsString(String name) {\n       System.out.println(\"We are triggering PET_PRESCRIPTION_SERVICE_IMPL\");\n       System.out.println(name);\n       return \"PET PRESCRIPTION SERVICE IMPLEMENTATION\";\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Unleash Configuration with Environment Variables\nDESCRIPTION: Example configuration object showing how to use environment variables for the client key in production environments.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/react.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst config = {\n  url: '<YOUR_API_URL>', \n  clientKey: process.env.UNLEASH_API_TOKEN,\n  appName: 'unleash-onboarding-react',\n};\n```\n\n----------------------------------------\n\nTITLE: Unleash SDK Initialization with Environment Variables\nDESCRIPTION: Example showing how to initialize the Unleash SDK using environment variables for API key configuration, which is the recommended approach for production environments.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/go.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n    unleash.Initialize(\n        unleash.WithListener(&unleash.DebugListener{}),\n        unleash.WithAppName(\"unleash-onboarding-golang\"),\n        unleash.WithUrl(\"<YOUR_API_URL>\"),\n        unleash.WithCustomHeaders(http.Header{\n            \"Authorization\": {os.Getenv(\"UNLEASH_API_KEY\")},\n        })\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Impression Data Events in Rust\nDESCRIPTION: Implementation of a PATCH request to enable impression data events for a feature flag. Uses reqwest client to update flag settings via the Unleash API.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/rust-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse reqwest::blocking::Client;\nuse serde_json::json;\nuse std::error::Error;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let client = Client::new();\n\n    let unleash_url = \"http://your_unleash_url.com\";\n    let project_id = \"your_project_id\";\n    let feature_name = \"your_feature_name\";\n    let url = format!(\"{}/api/admin/projects/{}/features/{}\",\n                      unleash_url, project_id, feature_name);\n\n    let payload = json!([{\n        \"op\": \"replace\",\n        \"path\": \"/impressionData\",\n        \"value\": true\n    }]);\n\n    let response = client.patch(&url)\n        .header(\"Accept\", \"application/json\")\n        .header(\"Authorization\", \"<YOUR_API_KEY>\")\n        .json(&payload)\n        .send()?;\n\n    let response_body = response.text()?;\n\n    println!(\"{}\", response_body);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Strategy Management API Endpoint Reference\nDESCRIPTION: Collection of API endpoints for managing feature flag strategies including adding new strategies and updating existing ones.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-create-feature-toggles.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/reference/api/unleash/add-feature-strategy\n/reference/api/unleash/update-feature-strategy\n/reference/api/unleash/patch-feature-strategy\n```\n\n----------------------------------------\n\nTITLE: Updating Gradual Rollout Strategy via API in Java\nDESCRIPTION: This code snippet demonstrates how to update a gradual rollout strategy for a feature flag using the Unleash API in Java. It sets up an HTTP client, creates a request body with strategy details, and sends a POST request to update the strategy.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(\"{\n  \\\"name\\\": \\\"flexibleRollout\\\",\n  \\\"title\\\": \\\"\\\",\n  \\\"disabled\\\": false,\n  \\\"sortOrder\\\": 9999,\n  \\\"constraints\\\": [\n    {\n      \\\"values\\\": [\n        \\\"1\\\",\n        \\\"2\\\"\n      ],\n      \\\"inverted\\\": false,\n      \\\"operator\\\": \\\"IN\\\",\n      \\\"contextName\\\": \\\"appName\\\",\n      \\\"caseInsensitive\\\": false\n    }\n  ],\n  \\\"variants\\\": [\n    {\n      \\\"name\\\": \\\"blue_group\\\",\n      \\\"weight\\\": 0,\n      \\\"weightType\\\": \\\"fix\\\",\n      \\\"stickiness\\\": \\\"custom.context.field\\\",\n      \\\"payload\\\": {\n        \\\"type\\\": \\\"json\\\",\n        \\\"value\\\": \\\"{\\\\\\\"color\\\\\\\": \\\\\\\"red\\\\\\\"}\\\"\n      }\n    }\n  ],\n  \\\"parameters\\\": {\n    \\\"groupId\\\": \\\"some_new\\\",\n    \\\"rollout\\\": \\\"25\\\",\n    \\\"stickiness\\\": \\\"sessionId\\\"\n  },\n  \\\"segments\\\": [\n    1,\n    2\n  ]\n}\", mediaType);\nRequest request = new Request.Builder()\n  .url(\"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"<API_KEY_VALUE>\")\n  .build();\nResponse response = client.newCall(request).execute();\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth2 Strategy with Passport.js\nDESCRIPTION: This code snippet configures the Google OAuth2 strategy within the `googleAdminAuth` function using Passport.js. It defines the Google OAuth2 strategy, passing in the client ID, client secret, and callback URL, along with a verify function that handles user authentication after successful authorization by Google.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/google-auth-hook.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst GOOGLE_CLIENT_ID = '...';\nconst GOOGLE_CLIENT_SECRET = '...';\nconst GOOGLE_CALLBACK_URL = 'http://localhost:4242/api/auth/callback';\n\nfunction googleAdminAuth(app, config, services) {\n  const { baseUriPath } = config.server;\n  const { userService } = services;\n\n  passport.use(\n    new GoogleOAuth2Strategy(\n      {\n        clientID: GOOGLE_CLIENT_ID,\n        clientSecret: GOOGLE_CLIENT_SECRET,\n        callbackURL: GOOGLE_CALLBACK_URL,\n      },\n      async function (accessToken, refreshToken, profile, cb) {\n        // Extract the minimal profile information we need from the profile object\n        // and connect with Unleash\n        const email = profile.emails[0].value;\n        const user = await userService.loginUserWithoutPassword(email, true);\n        cb(null, user);\n      },\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy Constraints for Canary Deployments\nDESCRIPTION: Python code to update an existing feature flag strategy with environment-based constraints for canary deployment. The code adds a constraint to exclude production environment from the rollout.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/examples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/:strategyId\"\n\npayload = json.dumps({\n  \"name\": \"flexibleRollout\",\n  \"disabled\": False,\n  \"constraints\": [\n    {\n      \"values\": [\n        \"production\"\n      ],\n      \"inverted\": false,\n      \"operator\": \"NOT_IN\",\n      \"contextName\": \"environment\",\n      \"caseInsensitive\": false\n    }\n],\n  \"variants\": [],\n  \"parameters\": {\n    \"groupId\": \"delete_survey_flag\",\n    \"rollout\": \"50\",\n    \"stickiness\": \"sessionId\"\n  },\n  \"segments\": []\n})\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics Collection in Go\nDESCRIPTION: Shows how to implement metrics collection for feature flags using the Unleash client SDK. Includes structures for metrics data and toggle statistics.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/golang-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype MetricsData struct {\n    AppName    string                 `json:\"appName\"`\n    InstanceID string                 `json:\"instanceId\"`\n    Bucket     map[string]ToggleStats `json:\"bucket\"`\n}\n\ntype ToggleStats struct {\n    Yes int `json:\"yes\"`\n    No  int `json:\"no\"`\n}\n\nfunc fetchMetrics(unleashURL, featureName, apiKey string) error {\n    url := fmt.Sprintf(\"%s/api/admin/metrics/feature-toggles/%s\", unleashURL, featureName)\n\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        return fmt.Errorf(\"error creating request: %v\", err)\n    }\n\n    req.Header.Set(\"Authorization\", apiKey)\n\n    client := &http.Client{\n        Timeout: 10 * time.Second,\n    }\n\n    resp, err := client.Do(req)\n    if err != nil {\n        return fmt.Errorf(\"error making request: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    var metricsData MetricsData\n    if err := json.NewDecoder(resp.Body).Decode(&metricsData); err != nil {\n        return fmt.Errorf(\"error decoding response: %v\", err)\n    }\n\n    // Process metrics data\n    fmt.Printf(\"Metrics for %s: %+v\\n\", featureName, metricsData)\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Reading SSL Certificates from Filesystem in JavaScript for Unleash\nDESCRIPTION: Example showing how to read SSL certificate files using JavaScript and include them in the Unleash database configuration. This approach is used when initializing Unleash via code.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleashOptions = {\n    db: {\n        // other options omitted for brevity\n        ssl: {\n            ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString(),\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Feature Flag in Django View\nDESCRIPTION: Modify the post_list view to use a static boolean flag for controlling the number of posts displayed. This demonstrates the basic concept of feature flagging before connecting to Unleash.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\nfrom .models import Post\n\ndef post_list(request):\n    is_top3 = True\n    posts = Post.objects.order_by('-published_date')[:3] if is_top3 else Post.objects.all()\n    return render(request, 'blog/post_list.html', {'posts': posts})\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI via Configuration in Unleash Server\nDESCRIPTION: JavaScript configuration for enabling OpenAPI in Unleash server using the enableOAS option.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-enable-openapi.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = require('unleash-server');\n\nunleash\n    .start({\n        // ... Other options emitted for brevity\n        enableOAS: true,\n    })\n    .then((unleash) => {\n        console.log(\n            `Unleash started on http://localhost:${unleash.app.get('port')}`,\n        );\n    });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Events in Rust\nDESCRIPTION: Implementation of a GET request to retrieve event logs for a specific feature flag. Uses reqwest client to fetch event data from the Unleash API.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/rust-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse reqwest::blocking::Client;\nuse std::error::Error;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let client = Client::new();\n\n    let unleash_url = \"http://your_unleash_url.com\";\n    let feature_name = \"your_feature_name\";\n    let url = format!(\"{}/api/admin/events/{}\", unleash_url, feature_name);\n\n    let response = client.get(&url)\n        .header(\"Accept\", \"application/json\")\n        .header(\"Authorization\", \"<YOUR_API_KEY>\")\n        .send()?;\n\n    let response_body = response.text()?;\n\n    println!(\"{}\", response_body);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flag in Environment\nDESCRIPTION: HTTP POST request to enable a feature flag in a specific environment. Uses the HTTPX library to make the API call.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/rails-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/on\"\npayload = {}\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.post(url, headers: headers)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradual Rollout Strategy in Ruby using Unleash API\nDESCRIPTION: Code to create a gradual rollout strategy for feature flags using the Unleash API. Sets up a flexible rollout with 50% distribution and session-based stickiness.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/ruby-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies\"\npayload = {\n  name: \"flexibleRollout\",\n  disabled: false,\n  constraints: [],\n  variants: [],\n  parameters: {\n    groupId: \"delete_survey_flag\",\n    rollout: \"50\",\n    stickiness: \"sessionId\"\n  },\n  segments: []\n}.to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.post(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Start Unleash server from Node.js\nDESCRIPTION: This JavaScript code snippet imports the unleash-server module and starts the Unleash server with a specified database configuration (host, port, database name, user, password, SSL) and server port. It then logs a message to the console indicating that Unleash has started on the specified port. Note that the database password in the example is a placeholder and should be replaced with a secure password.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst unleash = require('unleash-server');\n\n   unleash\n     .start({\n       db: {\n         ssl: false,\n         host: 'localhost',\n         port: 5432,\n         database: 'unleash',\n         user: 'unleash_user',\n         password: 'password',\n       },\n       server: {\n         port: 4242,\n       },\n     })\n     .then((unleash) => {\n       console.log(\n         `Unleash started on http://localhost:${unleash.app.get('port')}`,\n       );\n     });\n```\n\n----------------------------------------\n\nTITLE: Capturing Impression Events with Unleash and Posthog\nDESCRIPTION: Implements an event listener for Unleash impression events, transforms the data, and sends it to Posthog analytics. Includes context, feature name, enabled state, and variant information.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-capture-impression-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// listen for impression events\nunleash.on(\"impression\", (event) => {\n    // capture and transform events\n    posthog.capture(event.eventType, {\n        ...event.context,\n        distinct_id: event.context?.userId,\n        featureName: event.featureName,\n        enabled: event.enabled,\n        variant: event.variant,\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradual Rollout Strategy via API in Ruby\nDESCRIPTION: This snippet demonstrates how to configure a gradual rollout strategy for a feature flag using the Unleash API in Ruby. It sets up a flexible rollout with a 50% rollout percentage and session-based stickiness.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/rails-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies\"\npayload = {\n  name: \"flexibleRollout\",\n  disabled: false,\n  constraints: [],\n  variants: [],\n  parameters: {\n    groupId: \"delete_survey_flag\",\n    rollout: \"50\",\n    stickiness: \"sessionId\"\n  },\n  segments: []\n}.to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.post(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Enabling Impression Data for Feature Flag in .NET\nDESCRIPTION: Sends a PATCH request to enable impression data collection for a feature flag. Uses JSON Patch format to update the impressionData property. Requires API key authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/dotnet-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nHttpClient client = new HttpClient();\n\nstring url = $\"{unleashUrl}/api/admin/projects/{projectId}/features/{featureName}\";\nvar payload = new[]\n{\n    new\n    {\n        op = \"replace\",\n        path = \"/impressionData\",\n        value = true\n    }\n};\n\nvar jsonPayload = JsonSerializer.Serialize(payload);\nvar content = new StringContent(jsonPayload, Encoding.UTF8, \"application/json\");\n\nclient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"<API_KEY_VALUE>\");\n\nvar response = await client.PatchAsync(url, content);\nvar responseBody = await response.Content.ReadAsStringAsync();\n\nConsole.WriteLine(responseBody);\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash Properties in Spring Boot\nDESCRIPTION: Sets up the Unleash configuration properties for connecting to the Unleash server in a Spring Boot application.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nio.getunleash.app-name=spring-petclinic\nio.getunleash.instance-id=spring-petclinic\nio.getunleash.environment=development\nio.getunleash.api-url=http://localhost:4242/api\nio.getunleash.api-token=<API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client with Environment Variables\nDESCRIPTION: Shows the recommended production setup for Unleash client initialization using environment variables for API credentials.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/nodejs.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { initialize } = require('unleash-client');\n\nconst unleash = initialize({\n    url: '<YOUR_API_URL>',\n    appName: 'unleash-onboarding-node',\n    customHeaders: { Authorization: process.env.UNLEASH_API_KEY  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy Variants via Python API\nDESCRIPTION: API request to configure strategy variants for A/B testing by patching feature flag variants with store_deleted_surveys and permanently_delete_surveys options\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/examples.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/variants\"\n\npayload = json.dumps([\n {\n    \"op\": \"replace\",\n    \"path\": \"/1/name\",\n    \"value\": \"permanently_delete_surveys\"\n  },\n  {\n    \"op\": \"replace\",\n    \"path\": \"/0/name\",\n    \"value\": \"store_deleted_surveys\"\n  }\n])\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Events in Ruby\nDESCRIPTION: Makes a GET request to fetch events for a specific feature flag. Requires Unleash URL, feature name, and API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/ruby-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/events/:featureName\"\npayload = {}\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.get(url, headers: headers)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: IP-Based Strategy Configuration\nDESCRIPTION: Strategy for activating features based on remote IP addresses. Requires a list of IP addresses as parameter.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/predefined-strategy-types.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Parameters:**\n- IPs - List of IPs to enable the feature for.\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flag Properties\nDESCRIPTION: Makes a PUT request to update various properties of a feature flag including description, type, and status flags. Requires Unleash URL, project ID, feature name, and API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/ruby-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\npayload = {\n  description: \"Controls disabling of the comments section in case of an incident\",\n  type: \"kill-switch\",\n  stale: true,\n  archived: true,\n  impressionData: false\n}.to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.put(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags with Unleash API in Python\nDESCRIPTION: This code snippet demonstrates how to enable a feature flag in a specified environment of a project using the Unleash API. It requires the 'requests' library for making HTTP requests and an API Key for authorization. The URL needs to be replaced with the actual Unleash server URL, including the projectId, featureName, and environment placeholders. The result of the operation is printed to the console.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/examples.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/on\"\n\npayload={}\nheaders = {\n'Accept': 'application/json',\n'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching with useSWR in TypeScript\nDESCRIPTION: This code snippet demonstrates the recommended approach for fetching segment data using the useSWR library. It includes type definitions, error handling, and conditional fetching based on feature flags.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-data-fetching-method.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// useSegments.ts\n\nimport useSWR from 'swr';\nimport { useCallback } from 'react';\nimport { formatApiPath } from 'utils/formatPath';\nimport handleErrorResponses from '../httpErrorResponseHandler';\nimport { ISegment } from 'interfaces/segment';\nimport useUiConfig from 'hooks/api/getters/useUiConfig/useUiConfig';\nimport { IFlags } from 'interfaces/uiConfig';\n\nexport interface UseSegmentsOutput {\n    segments?: ISegment[];\n    refetchSegments: () => void;\n    loading: boolean;\n    error?: Error;\n}\n\nexport const useSegments = (strategyId?: string): UseSegmentsOutput => {\n    const { uiConfig } = useUiConfig();\n\n    const { data, error, mutate } = useSWR(\n        [strategyId, uiConfig.flags],\n        fetchSegments\n    );\n\n    const refetchSegments = useCallback(() => {\n        mutate().catch(console.warn);\n    }, [mutate]);\n\n    return {\n        segments: data,\n        refetchSegments,\n        loading: !error && !data,\n        error,\n    };\n};\n\nexport const fetchSegments = async (\n    strategyId?: string,\n    flags?: IFlags\n): Promise<ISegment[]> => {\n    if (!flags?.SE) {\n        return [];\n    }\n\n    return fetch(formatSegmentsPath(strategyId))\n        .then(handleErrorResponses('Segments'))\n        .then(res => res.json())\n        .then(res => res.segments);\n};\n\nconst formatSegmentsPath = (strategyId?: string): string => {\n    return strategyId\n        ? formatApiPath(`api/admin/segments/strategies/${strategyId}`)\n        : formatApiPath('api/admin/segments');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy Constraints for Canary Deployments via API in Ruby\nDESCRIPTION: This code snippet shows how to configure strategy constraints for canary deployments using the Unleash API in Ruby. It updates an existing gradual rollout strategy with a constraint to exclude the production environment.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/rails-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/:strategyId\"\npayload = {\n  name: \"flexibleRollout\",\n  disabled: false,\n  constraints: [\n    {\n      values: [\"production\"],\n      inverted: false,\n      operator: \"NOT_IN\",\n      contextName: \"environment\",\n      caseInsensitive: false\n    }\n  ],\n  variants: [],\n  parameters: {\n    groupId: \"delete_survey_flag\",\n    rollout: \"50\",\n    stickiness: \"sessionId\"\n  },\n  segments: []\n}.to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.put(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Flag Variants via API in Unleash\nDESCRIPTION: API command to create temperature unit variants (celsius and fahrenheit) for A/B testing using PATCH request. Sets up variant names through JSON patch operations.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/examples.md#2025-04-21_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PATCH 'http://localhost:4242/api/admin/projects/default/features/tempUnit/environments/development/variants' \\\n    --header 'Authorization: INSERT_API_KEY' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/1/name\",\n    \"value\": \"fahrenheit\"\n  },\n  {\n    \"op\": \"replace\",\n    \"path\": \"/0/name\",\n    \"value\": \"celsius\"\n  }\n]'\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash FlagProvider Component\nDESCRIPTION: Setup of the Unleash FlagProvider component with configuration including API URL, client key, and application name. Wraps the main application content to provide feature flag context.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/svelte.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { FlagProvider } from '@unleash/proxy-client-svelte';\n\n\tconst config = {\n        url: '<YOUR_API_URL>',\n        clientKey: '<YOUR_API_TOKEN>', // in production use environment variable\n        appName: 'unleash-onboarding-svelte',\n\t};\n</script>\n\n<div class=\"app\">\n\t<FlagProvider {config}>\n\t\t<main>\n\t\t\t<slot />\n\t\t</main>\n\t</FlagProvider>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Strategy Constraints for Canary Deployments in Java\nDESCRIPTION: This code snippet shows how to update strategy constraints for canary deployments using the Unleash API in Java. It creates a request to update an existing strategy with new constraints, targeting specific app names.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\n  \\\"name\\\": \\\"string\\\",\n  \\\"sortOrder\\\": 0,\n  \\\"constraints\\\": [\n    {\n      \\\"contextName\\\": \\\"appName\\\",\n      \\\"operator\\\": \\\"IN\\\",\n      \\\"caseInsensitive\\\": false,\n      \\\"inverted\\\": false,\n      \\\"values\\\": [\n        \\\"my-app\\\",\n        \\\"my-other-app\\\"\n      ],\n      \\\"value\\\": \\\"my-app\\\"\n    }\n  ],\n  \\\"title\\\": \\\"Gradual Rollout 25-Prod\\\",\n  \\\"disabled\\\": false,\n  \\\"parameters\\\": {}\n}\");\nRequest request = new Request.Builder()\n  .url(\"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/:strategyId\")\n  .method(\"PUT\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"<API_KEY_VALUE>\")\n  .build();\nResponse response = client.newCall(request).execute();\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-Based Canary Deployment Constraints for iOS with cURL\nDESCRIPTION: This cURL request implements a canary deployment strategy with a time-based constraint, allowing a feature to be available only before a specific date. The gradual rollout is configured for 50% of users with a DATE_BEFORE constraint.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/examples.md#2025-04-21_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'http://localhost:4242/api/admin/projects/default/features/tempUnit/environments/development/strategies/806ebcbd-bb03-4713-8081-7dca3905e612' \\\n    --header 'Authorization: INSERT_API_KEY' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '{\n  \"name\": \"flexibleRollout\",\n  \"title\": \"\",\n  \"constraints\": [\n    {\n      \"value\": \"2024-02-27T17:00:00.000Z\",\n      \"values\": [],\n      \"inverted\": false,\n      \"operator\": \"DATE_BEFORE\",\n      \"contextName\": \"currentTime\",\n      \"caseInsensitive\": false\n    }\n  ],\n  \"parameters\": {\n    \"rollout\": \"50\",\n    \"stickiness\": \"default\",\n    \"groupId\": \"tempUnit\"\n  },\n  \"variants\": [],\n  \"segments\": [],\n  \"disabled\": false\n}'\n\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Signal Endpoint - Curl Command\nDESCRIPTION: This snippet demonstrates how to send a POST request to a signal endpoint using the Curl command. The request requires an API token for authorization and optionally includes a JSON payload with details of the signal. This setup allows external systems to notify Unleash of events by sending HTTP requests to the specified endpoint.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/signals.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -X POST https://unleash.example.com/api/signal-endpoint/my-signal-endpoint \\\n  -H \"Authorization: Bearer your_token_secret\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"type\": \"my-signal\",\n    \"data\": {\n      \"key\": \"value\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Adding Strategy with Scheduled Activation via Unleash API\nDESCRIPTION: API request payload for adding a feature activation strategy with a scheduled activation time. Uses the strategy's endpoint with date-based constraints in RFC 3339 format.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-schedule-feature-releases.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"name\": \"default\",\n      \"constraints\": [\n        {\n          \"value\": \"<activation-date>\",\n          \"operator\": \"DATE_AFTER\",\n          \"contextName\": \"currentTime\"\n        }\n      ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing in Go\nDESCRIPTION: Implements A/B testing using strategy variants with a 50% rollout configuration. Sets up a flexible rollout strategy with default stickiness.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/golang-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npayload := map[string]interface{}{\n    \"name\":  \"flexibleRollout\",\n    \"title\": \"\",\n    \"constraints\": []interface{}{},\n    \"parameters\": map[string]interface{}{\n        \"rollout\":    \"50\",\n        \"stickiness\": \"default\",\n        \"groupId\":    \"\",\n    },\n    \"variants\":  []interface{}{},\n    \"segments\":  []interface{}{},\n    \"disabled\": false,\n}\n\njsonData, err := json.Marshal(payload)\n\nurl := fmt.Sprintf(\"%s/api/admin/projects/%s/features/%s/environments/%s/strategies/%s\",\n    unleashURL, projectID, featureName, environment, strategyID)\n\nreq, err := http.NewRequest(\"PUT\", url, bytes.NewBuffer(jsonData))\n\n\nreq.Header.Set(\"Content-Type\", \"application/json\")\nreq.Header.Set(\"Authorization\", apiKey)\n\nclient := &http.Client{}\nresp, err := client.Do(req)\ndefer resp.Body.Close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Standardized API Calls with useTagTypesApi Hook in TypeScript\nDESCRIPTION: This code snippet demonstrates the implementation of a custom hook 'useTagTypesApi' that utilizes the standardized 'useAPI' hook for managing tag-related API calls. It includes functions for creating, validating, updating, and deleting tags, showcasing consistent error handling and request formatting.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-data-mutation-method.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ITagPayload } from 'interfaces/tags';\nimport useAPI from '../useApi/useApi';\n\nexport const useTagTypesApi = () => {\n    const { makeRequest, createRequest, errors, loading } = useAPI({\n        propagateErrors: true,\n    });\n\n    const createTag = async (payload: ITagPayload) => {\n        const path = `api/admin/tag-types`;\n        const req = createRequest(path, {\n            method: 'POST',\n            body: JSON.stringify(payload),\n        });\n\n        try {\n            const res = await makeRequest(req.caller, req.id);\n\n            return res;\n        } catch (e) {\n            throw e;\n        }\n    };\n\n    const validateTagName = async (name: string) => {\n        const path = `api/admin/tag-types/validate`;\n        const req = createRequest(path, {\n            method: 'POST',\n            body: JSON.stringify({ name }),\n        });\n        try {\n            const res = await makeRequest(req.caller, req.id);\n            return res;\n        } catch (e) {\n            throw e;\n        }\n    };\n    const updateTagType = async (tagName: string, payload: ITagPayload) => {\n        const path = `api/admin/tag-types/${tagName}`;\n        const req = createRequest(path, {\n            method: 'PUT',\n            body: JSON.stringify(payload),\n        });\n\n        try {\n            const res = await makeRequest(req.caller, req.id);\n            return res;\n        } catch (e) {\n            throw e;\n        }\n    };\n\n    const deleteTagType = async (tagName: string) => {\n        const path = `api/admin/tag-types/${tagName}`;\n        const req = createRequest(path, { method: 'DELETE' });\n\n        try {\n            const res = await makeRequest(req.caller, req.id);\n            return res;\n        } catch (e) {\n            throw e;\n        }\n    };\n\n    return {\n        createTag,\n        validateTagName,\n        updateTagType,\n        deleteTagType,\n        errors,\n        loading,\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradual Rollout Strategy in Rust\nDESCRIPTION: Implementation of a PUT request to configure a gradual rollout strategy with 50% user targeting. Uses reqwest client to interact with Unleash API for strategy configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/rust-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse reqwest::blocking::Client;\nuse serde_json::json;\nuse std::error::Error;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let client = Client::new();\n\n    let unleash_url = \"your_unleash_url\";\n    let project_id = \"your_project_id\";\n    let feature_name = \"your_feature_name\";\n    let environment = \"your_environment\";\n    let strategy_id = \"your_strategy_id\";\n    let url = format!(\"{}/api/admin/projects/{}/features/{}/environments/{}/strategies/{}\",\n                      unleash_url, project_id, feature_name, environment, strategy_id);\n\n    let payload = json!({\n        \"name\": \"flexibleRollout\",\n        \"title\": \"\",\n        \"constraints\": [],\n        \"parameters\": {\n            \"rollout\": \"50\",\n            \"stickiness\": \"default\",\n            \"groupId\": \"\"\n        },\n        \"variants\": [],\n        \"segments\": [],\n        \"disabled\": false\n    });\n\n    let response = client.put(&url)\n        .header(\"Accept\", \"application/json\")\n        .header(\"Authorization\", \"<YOUR_API_KEY>\")\n        .json(&payload)\n        .send()?;\n\n    let response_body = response.text()?;\n\n    println!(\"{}\", response_body);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced OIDC Configuration in Unleash\nDESCRIPTION: This snippet demonstrates advanced configuration options for OIDC in Unleash. It includes variables for setting Authentication Context Class Reference (ACR) values, specifying the ID token signing algorithm, and enabling single sign-out.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-add-sso-open-id-connect.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nOIDC_ACR_VALUES=\"value1 value2\"\nOIDC_ID_TOKEN_SIGNING_ALGORITHM=RS256\nOIDC_ENABLE_SINGLE_SIGN_OUT=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Impression Data Events in Go\nDESCRIPTION: Demonstrates how to enable impression data collection for feature flag analytics using HTTP client in Go.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/golang-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npayload := []map[string]interface{}{\n    {\n        \"op\":    \"replace\",\n        \"path\":  \"/impressionData\",\n        \"value\": true,\n    },\n}\n\njsonData, err := json.Marshal(payload)\n\n\nurl := fmt.Sprintf(\"%s/api/admin/projects/%s/features/%s\",\n    unleashURL, projectID, featureName)\n\nreq, err := http.NewRequest(\"PATCH\", url, bytes.NewBuffer(jsonData))\n\nreq.Header.Set(\"Content-Type\", \"application/json\")\nreq.Header.Set(\"Authorization\", apiKey)\n\nclient := &http.Client{}\nresp, err := client.Do(req)\ndefer resp.Body.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy Variants via Unleash API in Python\nDESCRIPTION: Makes a PATCH request to the Unleash API to configure strategy variants for A/B testing. Sets up two variants: 'store_deleted_surveys' and 'permanently_delete_surveys'.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/django-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/variants\"\n\npayload = json.dumps([\n {\n    \"op\": \"replace\",\n    \"path\": \"/1/name\",\n    \"value\": \"permanently_delete_surveys\"\n  },\n  {\n    \"op\": \"replace\",\n    \"path\": \"/0/name\",\n    \"value\": \"store_deleted_surveys\"\n  }\n])\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI via Configuration in Unleash Proxy\nDESCRIPTION: JavaScript configuration for enabling OpenAPI in Unleash proxy using the enableOAS option.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-enable-openapi.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst port = 3000;\n\nconst { createApp } = require('@unleash/proxy');\n\nconst app = createApp({\n    // ... Other options elided for brevity\n    enableOAS: true,\n});\n\napp.listen(port, () =>\n    console.log(`Unleash Proxy listening on http://localhost:${port}/proxy`),\n);\n```\n\n----------------------------------------\n\nTITLE: Node.js Unleash Proxy Implementation\nDESCRIPTION: Example Node.js application code for configuring and running the Unleash Proxy, including essential configuration options like API URL, token, and client keys.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-run-the-unleash-proxy.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst port = 3000;\n\nconst { createApp } = require('@unleash/proxy');\n\nconst app = createApp({\n    unleashUrl: '<unleash-api-url>',\n    unleashApiToken: '<client-api-token>',\n    clientKeys: ['<proxy-client-key>'],\n    proxyPort: 3000,\n});\n\napp.listen(port, () =>\n    console.log(`Unleash Proxy listening on http://localhost:${port}/proxy`),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Flag Variants via cURL\nDESCRIPTION: API command to create new variants for a feature flag using PATCH request to Unleash API\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'http://localhost:4242/api/admin/projects/default/features/newNotificationsBadge/environments/development/variants' \\\n    --header 'Authorization: INSERT_API_KEY' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/1/name\",\n    \"value\": \"announcementsIcon\"\n  },\n  {\n    \"op\": \"replace\",\n    \"path\": \"/0/name\",\n    \"value\": \"notificationsIcon\"\n  }\n]'\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags via Unleash API in Rust\nDESCRIPTION: This code snippet demonstrates how to enable a feature flag in a specific environment using the Unleash API. It uses the `reqwest` crate to make a POST request to the Unleash API endpoint, enabling the feature for a given project and environment.  The code requires the `reqwest` crate and expects the Unleash URL, project ID, feature name, environment, and API key to be defined.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/rust-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse reqwest::blocking::Client;\nuse std::error::Error;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let client = Client::new();\n\n    let unleash_url = \"http://your_unleash_url.com\";\n    let project_id = \"your_project_id\";\n    let feature_name = \"your_feature_name\";\n    let environment = \"your_environment\";\n    let url = format!(\"{}/api/admin/projects/{}/features/{}/environments/{}/on\",\n                    unleash_url, project_id, feature_name, environment);\n\n    let response = client.post(&url)\n        .header(\"Accept\", \"application/json\")\n        .header(\"Authorization\", \"<YOUR_API_KEY>\")\n        .send()?;\n\n    let response_body = response.text()?;\n\n    println!(\"{}\", response_body);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logger for Unleash Server\nDESCRIPTION: Example of implementing a custom logger for Unleash by providing an implementation of the getLogger function. This enables custom filtering of log levels and redirection of output streams.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getLogger(name) {\n    // do something with the name\n    return {\n        debug: console.log,\n        info: console.log,\n        warn: console.log,\n        error: console.error,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flag in Environment\nDESCRIPTION: Makes a POST request to enable a feature flag in a specific environment. Requires Unleash URL, project ID, feature name, environment, and API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/ruby-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/on\"\npayload = {}\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.post(url, headers: headers)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flag via Unleash Admin API using cURL\nDESCRIPTION: Example of using cURL to enable a feature flag named 'checkout-flow' in the development environment through the Unleash Admin API. Requires an admin API token for authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-use-the-admin-api.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" \\\n     -H \"Authorization: <your-token>\" \\\n     https://app.unleash-hosted.com/docs-demo/api/admin/projects/docs-project/features/checkout-flow/environments/development/on\n```\n\n----------------------------------------\n\nTITLE: Implementing Audit Logging in Go\nDESCRIPTION: Implements audit logging functionality to track feature flag changes over time using the Unleash API.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/golang-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc getAuditLogs(unleashURL, featureName, apiKey string) error {\n    url := fmt.Sprintf(\"%s/api/admin/events/%s\", unleashURL, featureName)\n\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        return fmt.Errorf(\"error creating request: %v\", err)\n    }\n\n    req.Header.Add(\"Accept\", \"application/json\")\n    req.Header.Add(\"Authorization\", apiKey)\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        return fmt.Errorf(\"error making request: %v\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return fmt.Errorf(\"error reading response: %v\", err)\n    }\n\n    fmt.Println(string(body))\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Unleash Instance Synchronization\nDESCRIPTION: Configuration examples showing the required environment variables for source and target Unleash instances. Includes API URLs and authentication tokens needed for the synchronization process.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-synchronize-unleash-instances.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSOURCE_URL=\"http://localhost:4242/api/admin/features-batch/export\"\nSOURCE_API_TOKEN=\"user:98b555423fa020a3e67267fb8462fdeea13a1d62e7ea61d5fe4f3022\"\nTARGET_URL=\"http://localhost:4242/api/admin/features-batch/import\"\nTARGET_API_TOKEN=\"user:98b555423fa020a3e67267fb8462fdeea13a1d62e7ea61d5fe4f3022\"\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI in Docker for Unleash Server\nDESCRIPTION: Docker run command demonstrating how to enable OpenAPI via environment variable for Unleash server.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-enable-openapi.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    -e ENABLE_OAS=true \\ # other variables omitted for brevity\n    unleashorg/unleash-server\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Login Route\nDESCRIPTION: This code snippet implements the `/auth/google/login` route, which initiates the Google OAuth2 authentication flow. It uses `passport.authenticate` middleware to redirect the user to Google for authentication with the specified `email` scope.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/google-auth-hook.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction googleAdminAuth(app, config, services) {\n  // ...\n  app.get(\n    '/auth/google/login',\n    passport.authenticate('google', { scope: ['email'] }),\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Impression Data to Google Analytics in JavaScript\nDESCRIPTION: This example demonstrates how to capture Unleash impression events and send them to Google Analytics, including the app name, feature name, and treatment (variant or control).\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/a-b-testing.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nunleash.on(UnleashEvents.Impression, (e: ImpressionEvent) => {\n    // send to google analytics, something like\n    gtag(\"event\", \"screen_view\", {\n        app_name: e.context.appName,\n        feature: e.featureName,\n        treatment: e.enabled ? e.variant : \"Control\", // in case we use feature disabled for control\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Deployment Strategy Constraints in .NET\nDESCRIPTION: Implementation of strategy constraints for canary deployments using the Unleash API. Includes environment-based constraints and rollout parameters.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/dotnet-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nHttpClient client = new HttpClient();\n\nstring url = $\"{unleashUrl}/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}\";;\n\nvar payload = new\n{\n    name = \"flexibleRollout\",\n    disabled = false,\n    constraints = new[]\n    {\n        new\n        {\n            values = new[] { \"production\" },\n            inverted = false,\n            @operator = \"NOT_IN\",\n            contextName = \"environment\",\n            caseInsensitive = false\n        }\n    },\n    variants = new object[] { },\n    parameters = new\n    {\n        groupId = \"delete_survey_flag\",\n        rollout = \"50\",\n        stickiness = \"sessionId\"\n    },\n    segments = new object[] { }\n};\n\nclient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"<API_KEY_VALUE>\");\n\nvar response = await client.PutAsJsonAsync(url, payload);\nvar responseBody = await response.Content.ReadAsStringAsync();\n\nConsole.WriteLine(responseBody);\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flag Properties\nDESCRIPTION: HTTP PUT request to update feature flag properties including description, type, and other settings. Uses the HTTPX library to make the API call with JSON payload.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/rails-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\npayload = {\n  description: \"Controls disabling of the comments section in case of an incident\",\n  type: \"kill-switch\",\n  stale: true,\n  archived: true,\n  impressionData: false\n}.to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.put(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection with JavaScript Object in Unleash\nDESCRIPTION: Example JavaScript configuration object for Unleash database connection. Shows how to set connection parameters including database URL, credentials, host information, SSL settings, and connection pool configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleashOptions = {\n    databaseUrl: 'postgres:/USER:PASSWORD@HOST:PORT/DATABASE',\n    databaseUrlFile: '/path/to/file',\n    db: {\n        user: 'unleash_user',\n        password: 'password',\n        host: 'localhost',\n        port: 5432,\n        database: 'unleash',\n        ssl: false,\n        pool: {\n            min: 0,\n            max: 4,\n            idleTimeoutMillis: 30000,\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Group Syncing in Unleash OIDC\nDESCRIPTION: This snippet shows how to enable and configure group syncing from OIDC login requests in Unleash. It includes variables for enabling group syncing, specifying the JSON path for group information, and setting the default root role.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-add-sso-open-id-connect.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOIDC_ENABLE_GROUP_SYNCING=true\nOIDC_GROUP_JSON_PATH=groups\nOIDC_ADD_GROUPS_SCOPE=true\nOIDC_DEFAULT_ROOT_ROLE='Viewer'\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flag via Unleash API in Python\nDESCRIPTION: Makes a POST request to enable a feature flag in a specific environment. Requires Unleash URL and API key for authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/django-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/on\"\n\npayload={}\nheaders = {\n'Accept': 'application/json',\n'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Events in Ruby\nDESCRIPTION: HTTP GET request to fetch events for a specific feature flag. Uses the HTTPX library to make the API call.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/rails-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/events/:featureName\"\npayload = {}\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.get(url, headers: headers)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Enabling Self-Signed Certificates in Unleash Database Configuration\nDESCRIPTION: This snippet demonstrates how to configure Unleash to use self-signed certificates for database connections. It sets the SSL property 'rejectUnauthorized' to false and loads the certificate file.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleashOptions = {\n    db: {\n        // other options omitted for brevity\n        ssl: {\n            rejectUnauthorized: false,\n            ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString(),\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Passport Middleware\nDESCRIPTION: This code snippet configures Passport.js middleware within the `googleAdminAuth` function. It initializes Passport, sets up session management, and defines serialization and deserialization functions for user objects.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/google-auth-hook.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction googleAdminAuth(app, config, services) {\n  // ...\n  app.use(passport.initialize());\n  app.use(passport.session());\n  passport.serializeUser((user, done) => done(null, user));\n  passport.deserializeUser((user, done) => done(null, user));\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Webhook Body Template with Mustache\nDESCRIPTION: Example template for customizing the webhook payload format using Mustache templating. The template includes event type, creator, feature toggle name, and timestamp fields.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/integrations/webhook.md#2025-04-21_snippet_0\n\nLANGUAGE: mustache\nCODE:\n```\n{\n  \"event\": \"{{event.type}}\",\n  \"createdBy\": \"{{event.createdBy}}\",\n  \"featureToggle\": \"{{event.data.name}}\",\n  \"timestamp\": \"{{event.data.createdAt}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Authentication Middleware\nDESCRIPTION: This code snippet implements middleware to protect the `/api/` route, ensuring that only authenticated users can access it. If a user is not authenticated (i.e., `req.user` is not present), it returns a 401 status code with a JSON response that includes a path to initiate Google login.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/google-auth-hook.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction googleAdminAuth(app, config, services) {\n  // ...\n  app.use('/api/', (req, res, next) => {\n    if (req.user) {\n      next();\n    } else {\n      // Instruct unleash-frontend to pop-up auth dialog\n      return res\n        .status('401')\n        .json(\n          new unleash.AuthenticationRequired({\n            path: '/auth/google/login',\n            type: 'custom',\n            message: `You have to identify yourself in order to use Unleash. Click the button and follow the instructions.`,\n          }),\n        )\n        .end();\n    }\n  });\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag Status in Vue Component\nDESCRIPTION: Demonstrates how to use the useFlag hook to check the status of a feature flag in a Vue component. The component renders different text based on the flag's status.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/vue.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n    import { useFlag } from '@unleash/proxy-client-vue'\n    const enabled = useFlag('<YOUR_FLAG>')\n</script>\n\n<template>\n  <div>\n    {{ enabled ? 'Feature is enabled!' : 'Feature is disabled!' }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Feature Creation Event Example in JSON\nDESCRIPTION: Example of a feature-created event showing the event schema with details of a newly created feature flag including metadata and tracking information.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27332,\n  \"type\": \"feature-created\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"name\": \"test-flag\",\n    \"description\": null,\n    \"type\": \"release\",\n    \"project\": \"test-project\",\n    \"stale\": false,\n    \"createdAt\": \"2024-10-03T11:09:53.201Z\",\n    \"lastSeenAt\": null,\n    \"impressionData\": false,\n    \"archivedAt\": null,\n    \"archived\": false\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": \"test-flag\",\n  \"project\": \"test-project\",\n  \"environment\": null,\n  \"label\": \"Flag created\",\n  \"summary\": \"**user@getunleash.io** created **test-flag** in ... \"\n}\n```\n\n----------------------------------------\n\nTITLE: Managing API Tokens in Terraform HCL\nDESCRIPTION: The snippet demonstrates how to define a resource for managing Unleash API tokens using Terraform's HCL language. It requires a token name, type, expiration date, project, and environment. The resource allows secure communication with verified integrations, maintaining access control.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/terraform.mdx#2025-04-21_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"unleash_api_token\" \"client_token\" {\n  token_name  = \"client_token\"\n  type        = \"client\"\n  expires_at  = \"2024-12-31T23:59:59Z\"\n  project     = \"default\"\n  environment = \"development\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flag via Unleash API\nDESCRIPTION: HTTP POST request to enable a feature flag in a specific environment. Requires Unleash URL, project ID, feature name, environment, and API key for authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/examples.md#2025-04-21_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -L -X POST '<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/on' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: <API_KEY_VALUE>'\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flags via Unleash API in Rust\nDESCRIPTION: This code snippet demonstrates how to update the properties of a feature flag using the Unleash API. It utilizes the `reqwest` and `serde_json` crates to construct and send a PUT request with a JSON payload to the Unleash API. The code requires `reqwest` and `serde_json` and expects the Unleash URL, project ID, feature name, and API key to be defined.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/rust-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse reqwest::blocking::Client;\nuse serde_json::json;\nuse std::error::Error;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let client = Client::new();\n\n    let unleash_url = \"http://your_unleash_url.com\";\n    let project_id = \"your_project_id\";\n    let feature_name = \"your_feature_name\";\n    let url = format!(\"{}/api/admin/projects/{}/features/{}\",\n                    unleash_url, project_id, feature_name);\n\n    let payload = json!({\n        \"description\": \"Controls disabling of the comments section in case of an incident\",\n        \"type\": \"kill-switch\",\n        \"stale\": true,\n        \"archived\": true,\n        \"impressionData\": false\n    });\n\n    let response = client.put(&url)\n        .header(\"Accept\", \"application/json\")\n        .header(\"Authorization\", \"<YOUR_API_KEY>\")\n        .json(&payload)\n        .send()?;\n\n    let response_body = response.text()?;\n\n    println!(\"{}\", response_body);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Authentication Callback Route\nDESCRIPTION: This code snippet implements the `/api/auth/callback` route, which handles the callback from Google after successful authentication. It uses `passport.authenticate` to verify the authentication and redirects the user to the specified URL upon successful authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/google-auth-hook.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction googleAdminAuth(app, config, services) {\n  // ...\n  app.get(\n    '/api/auth/callback',\n    passport.authenticate('google', {\n      failureRedirect: '/api/admin/error-login',\n    }),\n    (req, res) => {\n      // Successful authentication, redirect to your app.\n      res.redirect('/');\n    },\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Unleash Java SDK Classes\nDESCRIPTION: Java import statements for required Unleash SDK classes.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport io.getunleash.DefaultUnleash;\nimport io.getunleash.Unleash;\nimport io.getunleash.util.UnleashConfig;\n```\n\n----------------------------------------\n\nTITLE: User Created Event\nDESCRIPTION: This JSON snippet represents the event data generated when a new user is created in Unleash. The event includes the ID, type, creator, and creation timestamp of the event, along with the created user's information, such as ID, name, email, and root role.  The `data` property contains the new user's information.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27344,\n  \"type\": \"user-created\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"id\": 111,\n    \"name\": \"New User Name\",\n    \"email\": \"newuser@getunleash.io\",\n    \"rootRole\": 2\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null,\n  \"label\": \"User created\",\n  \"summary\": \"**user@getunleash.io** created user **New User Name**\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Feature Flag via API - Shell\nDESCRIPTION: This snippet demonstrates how to update a feature flag's properties using a PUT request to the Unleash API. The request must include a JSON object describing the updates and requires an API key for authorization.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L -X PUT '<your-unleash-url>/api/admin/projects/:projectId/features/:featureName' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: <API_KEY_VALUE>' \\\n--data-raw '{\\n    \"description\": \"Controls disabling of the comments section in case of an incident\",\\n    \"type\": \"kill-switch\",\\n    \"stale\": true,\\n    \"archived\": true,\\n    \"impressionData\": false\\n}'\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flags in Svelte Components\nDESCRIPTION: Example of checking feature flag status in a Svelte component using the useFlag hook. Demonstrates conditional rendering based on flag state.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/svelte.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { useFlag } from '@unleash/proxy-client-svelte';\n\tconst enabled = useFlag('<YOUR_FLAG>');\n</script>\n\n<section>\n    <p>\n        {$enabled ? 'Feature is enabled!' : 'Feature is disabled!'}\n    </p>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Tag Created Event\nDESCRIPTION: This JSON snippet represents the event data generated when a tag is created in Unleash. It provides details about the tag's ID, type, creation timestamp, creator, and the tag's values. The `data` property specifically contains the tag's `type` and `value`.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27341,\n  \"type\": \"tag-created\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"type\": \"6.1.0\",\n    \"value\": \"release\"\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null,\n  \"label\": \"tag-created\",\n  \"summary\": \"**user@getunleash.io** triggered **tag-created**\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Impression Data via API\nDESCRIPTION: API command to enable impression data collection for a feature flag using PATCH request. Updates the impressionData property to true.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/examples.md#2025-04-21_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PATCH 'http://localhost:4242/api/admin/projects/default/features/tempUnit' \\\n    --header 'Authorization: INSERT_API_KEY' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/impressionData\",\n    \"value\": true\n  }\n]'\n```\n\n----------------------------------------\n\nTITLE: Preferred SQL Query Syntax with Explicit Table Naming in TypeScript\nDESCRIPTION: This example demonstrates the preferred approach of explicitly referencing table names or aliases for each column in SQL queries. It uses aliases 'u' for 'users' and 'o' for 'orders' to improve readability while ensuring each column's source is clearly specified.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/specificity-db-columns.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst rows = await this.db\n    .select(\n        'u.id', \n        'u.name', \n        'u.email',\n        'o.description',\n    )\n    .from('users as u')\n    .join('orders as o', 'o.user_id', 'u.id')\n    .where('o.status', 'active')\n    .orderBy('o.created_at', 'desc')\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flag via Unleash API in C#\nDESCRIPTION: Makes an HTTP POST request to enable a feature flag in a specific environment. Requires Unleash URL, project ID, feature name, environment name, and API key for authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/dotnet-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nHttpClient client = new HttpClient();\nstring url = $\"{unleashUrl}/api/admin/projects/:{projectId}/features/:{featureName}/environments/:{environment}/on\";\n\nclient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"<API_KEY_VALUE>\");\n\nvar response = await client.PostAsync(url, null);\nvar responseBody = await response.Content.ReadAsStringAsync();\n\nConsole.WriteLine(responseBody);\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash FlagProvider in Next.js\nDESCRIPTION: Implementation of the Unleash FlagProvider wrapper in Next.js _app.tsx file\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/nextjs/implementing-feature-flags-nextjs.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { AppProps } from \"next/app\";\nimport { FlagProvider } from \"@unleash/nextjs/client\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n    return (\n        <FlagProvider>\n            <Component {...pageProps} />\n        </FlagProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unleash Context in Rails Application Controller\nDESCRIPTION: Adding a method to set the Unleash context before each action in the application controller.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/implementing-feature-flags-rails.md#2025-04-21_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\n  before_action :set_unleash_context\n\n  private\n  def set_unleash_context\n    @unleash_context = Unleash::Context.new(\n      session_id: session.id,\n      remote_address: request.remote_ip,\n      user_id: session[:user_id]\n    )\n  end\n```\n\n----------------------------------------\n\nTITLE: Adding Unleash Configuration to application.properties\nDESCRIPTION: YAML configuration for connecting Spring Boot application to Unleash server\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating PetProductsController for Handling Product Requests\nDESCRIPTION: Implements a Spring MVC controller to handle requests for the products page, utilizing the PetProductsService interface.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.samples.petclinic.owner;\n\nimport org.springframework.samples.petclinic.owner.PetProductsService;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\n\n@Controller\nclass PetProductsController {\n\n   private final PetProductsService petProductsService;\n\n   public PetProductsController(@Qualifier(\"petProductsServiceImpl\") PetProductsService petProductsService) {\n       this.petProductsService = petProductsService;\n   }\n\n   @GetMapping(\"/products\")\n   public String loadProductsPage(Model map) {\n       map.addAttribute(\"petProductsPage\", getPetProducts(\"VIEWING CLINIC PRODUCTS PAGE\"));\n       return \"products\";\n   }\n\n   public String getPetProducts(final String name) {\n       return petProductsService.getPetProductsString(name);\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Archiving Feature Flags with Unleash API in Python\nDESCRIPTION: This snippet demonstrates how to archive a feature flag for a project using the Unleash API. The 'requests' library is used to perform an HTTP DELETE request. An API Key is needed for authorization. The URL's projectId and featureName placeholders must be replaced with actual data. The success or failure of the operation is printed to the console.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/examples.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\n\npayload={}\nheaders = {\n'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Proxy for Outgoing Requests in Unleash\nDESCRIPTION: This JavaScript snippet demonstrates how to set up a global proxy for all outgoing requests from Unleash using the node-global-proxy package. It includes options for both HTTP and HTTPS proxies.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst proxy = require(\"node-global-proxy\").default;\n\nproxy.setConfig({\n    http: \"http://user:password@url:8080\",      //proxy adress, replace values as needed\n    //https: \"https://user:password@url:1080\",  //if a https proxy is needed\n  });\n\nproxy.start();      //this starts the proxy, after this call all requests will be proxied\n```\n\n----------------------------------------\n\nTITLE: Delete Button Template Implementation\nDESCRIPTION: HTML template code for conditional rendering of delete button based on feature flag\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n{% if client.is_enabled('delete_survey_flag') %}\n<td class=\"text-end\">\n    <a\n        href=\"{{ url_for('surveys.delete_survey', survey_id=survey.id) }}\"\n        class=\"btn btn-sm btn-danger\"\n        >Delete</a\n    >\n</td>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flag Strategy with Gradual Rollout in .NET\nDESCRIPTION: Makes a PUT request to update a feature flag strategy with 50% gradual rollout configuration. Includes parameters for rollout percentage, stickiness, and groupId. Requires API key authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/dotnet-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nHttpClient client = new HttpClient();\n\nstring url = $\"{unleashUrl}/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}\";\nvar payload = new\n{\n    name = \"flexibleRollout\",\n    title = \"\",\n    constraints = new object[] { },\n    parameters = new\n    {\n        rollout = \"50\",\n        stickiness = \"default\",\n        groupId = \"\"\n    },\n    variants = new object[] { },\n    segments = new object[] { },\n    disabled = false\n};\n\nclient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"<API_KEY_VALUE>\");\n\nvar response = await client.PutAsJsonAsync(url, payload);\nvar responseBody = await response.Content.ReadAsStringAsync();\n\nConsole.WriteLine(responseBody);\n```\n\n----------------------------------------\n\nTITLE: Starting Unleash Server\nDESCRIPTION: This snippet demonstrates how to start the Unleash server with specified options, including custom authentication. It uses the `unleash-server` package to initiate the server and logs the server's address to the console.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/google-auth-hook.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = require('unleash-server');\n\nunleash.start(options).then((unleash) => {\n  console.log(`Unleash started on http://localhost:${unleash.app.get('port')}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Impression Data via API\nDESCRIPTION: cURL command to enable impression data tracking for a feature flag through the Unleash API\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncurl --location --request PATCH 'http://localhost:4242/api/admin/projects/default/features/newNotificationsBadge' \\\n    --header 'Authorization: INSERT_API_KEY' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/impressionData\",\n    \"value\": true\n  }\n]'\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Email Configuration in Node\nDESCRIPTION: This snippet demonstrates how to configure the email settings when starting the Unleash server using Node.js.\nIt sets the SMTP server details and sender address required for sending emails to users.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/email-service.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = require('unleash-server');\\n\\nunleash.start({\\n  email: {\\n    host: 'myhost',\\n    smtpuser: 'username',\\n    smtppass: 'password',\\n    sender: 'noreply@mycompany.com',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking AWS Lambda Function with Feature Flag\nDESCRIPTION: This bash command demonstrates how to invoke the AWS Lambda function with a public function URL. The response includes the status of the 'simpleFlag' feature flag.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/serverless/implementing-feature-flags-in-aws-lambda.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://z5w5lkzlsozutfhaixbjsj27cm0dhnfh.lambda-url.eu-north-1.on.aws\n\n{\"message\":\"Feature flag 'simpleFlag' is enabled\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flag Properties via Unleash API\nDESCRIPTION: HTTP PUT request to update feature flag properties including description, type, stale status, archive status, and impression data settings. Requires Unleash URL, project ID, feature name, and API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/examples.md#2025-04-21_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -L -X PUT '<your-unleash-url>/api/admin/projects/:projectId/features/:featureName' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: <API_KEY_VALUE>' \\\n--data-raw '{\n\"description\": \"Controls disabling of the comments section in case of an incident\",\n\"type\": \"kill-switch\",\n\"stale\": true,\n\"archived\": true,\n\"impressionData\": false\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Database Migrations in Unleash\nDESCRIPTION: Commands to create new migration files, and run migrations up or down. It uses the db-migrate tool.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/backend/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=postgres://unleash_user:password@localhost:5432/unleash\n\n> yarn run db-migrate create YOUR-MIGRATION-NAME\n\n> yarn run db-migrate up\n> yarn run db-migrate down\n```\n\n----------------------------------------\n\nTITLE: Single Project API Token Example\nDESCRIPTION: Example of an API token for accessing the development environment of a specific project\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/api-tokens-and-client-keys.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnew-checkout-flow:development.be44368985f7fb3237c584ef86f3d6bdada42ddbd63a019d26955178\n```\n\n----------------------------------------\n\nTITLE: Defining googleAdminAuth Function and Options\nDESCRIPTION: This snippet defines the `googleAdminAuth` function, which will handle Google authentication logic. It also defines the `options` object, configuring custom authentication for Unleash to use the `googleAdminAuth` function. The `unleash.start` function is then called to initialize the server.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/google-auth-hook.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction googleAdminAuth(app, config, services) {\n  const { baseUriPath } = config.server;\n  const { userService } = services;\n}\n\nlet options = {\n  authentication: {\n    type: 'custom',\n    customAuthHandler: googleAdminAuth,\n  },\n};\n\nunleash.start(options).then((instance) => {\n  console.log(\n    `Unleash started on http://localhost:${instance.app.get('port')}`,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Hostname-Based Strategy Setup\nDESCRIPTION: Strategy for activating features based on client hostnames. Requires a list of hostnames as parameter.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/predefined-strategy-types.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n**Parameters**\n- hostNames - List of hostnames to enable the feature flag for.\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradual Rollout Strategy via Python API\nDESCRIPTION: Python code to create a flexible rollout strategy with 50% rollout using the Unleash API. The code configures a feature flag strategy with session-based stickiness and specific rollout parameters.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies\"\n\npayload = json.dumps({\n  \"name\": \"flexibleRollout\",\n  \"disabled\": False,\n  \"constraints\": [],\n  \"variants\": [],\n  \"parameters\": {\n    \"groupId\": \"delete_survey_flag\",\n    \"rollout\": \"50\",\n    \"stickiness\": \"sessionId\"\n  },\n  \"segments\": []\n})\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flag Properties via Unleash API in C#\nDESCRIPTION: Sends an HTTP PUT request to update feature flag properties including description, type, and various boolean flags. Requires Unleash URL, project ID, feature name, and API key for authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/dotnet-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nHttpClient client = new HttpClient();\n\nstring url = $\"{unleashUrl}/api/admin/projects/:{projectId}/features/:{featureName}\";\nvar payload = new\n{\n    description = \"Controls disabling of the comments section in case of an incident\",\n    type = \"kill-switch\",\n    stale = true,\n    archived = true,\n    impressionData = false\n};\n\nclient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"<API_KEY_VALUE>\");\n\nvar response = await client.PutAsJsonAsync(url, payload);\nvar responseBody = await response.Content.ReadAsStringAsync();\n\nConsole.WriteLine(responseBody);\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flag Strategy with Constraints via API in Python\nDESCRIPTION: This code snippet shows how to update a feature flag strategy with constraints for canary deployments using the Unleash API. It sends a PUT request to modify an existing strategy, adding an environment-based constraint.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/django-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/:strategyId\"\n\npayload = json.dumps({\n  \"name\": \"flexibleRollout\",\n  \"disabled\": False,\n  \"constraints\": [\n    {\n      \"values\": [\n        \"production\"\n      ],\n      \"inverted\": false,\n      \"operator\": \"NOT_IN\",\n      \"contextName\": \"environment\",\n      \"caseInsensitive\": false\n    }\n],\n  \"variants\": [],\n  \"parameters\": {\n    \"groupId\": \"delete_survey_flag\",\n    \"rollout\": \"50\",\n    \"stickiness\": \"sessionId\"\n  },\n  \"segments\": []\n})\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Implementing getVariant Impression Event Structure in JavaScript\nDESCRIPTION: Example structure of an impression event triggered by getVariant check. Includes all isEnabled properties plus variant information.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/impression-data.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  eventType: 'getVariant',\n  eventId: '84b41a43-5ba0-47d8-b21f-a60a319607b0',\n  context: {\n    sessionId: 54085233,\n    appName: 'my-webapp',\n    environment: 'default'\n  },\n  enabled: true,\n  featureName: 'my-feature-flag',\n  variant: 'variantA'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash Edge with Docker Bash Script\nDESCRIPTION: This snippet provides the Bash commands required to run the Unleash Edge container using Docker. It requires setting the `UPSTREAM_URL` and `TOKENS` environment variables. The `UPSTREAM_URL` should point to the Unleash instance URL, and `TOKENS` must provide the necessary Client API tokens for Edge to fetch configurations. This setup is essential for integrating Unleash Edge within the hybrid hosting model.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/understanding-unleash/hosting-options.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3063:3063 \\\n-e UPSTREAM_URL='<UPSTREAM_URL>' \\\n-e TOKENS='<CLIENT_API_TOKEN>' \\\nunleashorg/unleash-edge:latest edge\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Create Users in Unleash OIDC\nDESCRIPTION: This snippet demonstrates how to configure Unleash to automatically create users from specific email domains when using OIDC. It includes variables for enabling auto-create and specifying allowed email domains.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-add-sso-open-id-connect.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOIDC_AUTO_CREATE=true\nOIDC_AUTO_CREATE_EMAIL_DOMAINS=getunleash.io,getunleash.ai\n```\n\n----------------------------------------\n\nTITLE: Implementing Corgi Image Fetching and Fun Facts in JavaScript\nDESCRIPTION: JavaScript code to fetch Corgi images from an API, display random fun facts, and set up event listeners. It also includes the initial setup for the Unleash client.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/javascript/implementing-feature-flags-js.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UnleashClient } from \"https://esm.sh/unleash-proxy-client\";\n\nconst corgiImg = document.getElementById(\"corgi-img\");\nconst funFact = document.getElementById(\"fun-fact\");\nconst newCorgiBtn = document.getElementById(\"new-corgi-btn\");\nconst unleash = null;\n\nconst funFacts = [\n    \"Corgis were originally bred for herding cattle and sheep.\",\n    \"The name 'Corgi' means 'Dwarf Dog' in Welsh.\",\n    \"Corgis are the favorite dog breed of Queen Elizabeth II.\",\n    \"Corgis have a 'fairy saddle' marking on their back.\",\n    \"There are two types of Corgis: Pembroke and Cardigan.\",\n    \"Corgis are excellent swimmers despite their short legs.\",\n    \"A group of Corgis is called a 'corggle'.\",\n];\n\nasync function start() {\n    await fetchCorgi();\n}\n\nasync function fetchCorgi() {\n    corgiImg.alt = \"Loading...\";\n    funFact.textContent = \"Fetching a cute Corgi...\";\n\n    const response = await fetch(\n        \"https://dog.ceo/api/breed/corgi/images/random\"\n    );\n    const data = await response.json();\n    corgiImg.src = data.message;\n\n    funFact.textContent = funFacts[Math.floor(Math.random() * funFacts.length)];\n}\n\nnewCorgiBtn.addEventListener(\"click\", fetchCorgi);\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates for SAML Single Sign-Out\nDESCRIPTION: Commands to generate a private key and public certificate pair required for signing SAML single sign-out requests. Uses OpenSSL to create a 2048-bit RSA private key and a SHA256 public certificate valid for 1095 days.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-add-sso-saml.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out private.pem 2048\nopenssl req -new -x509 -sha256 -key private.pem -out cert.pem -days 1095\n```\n\n----------------------------------------\n\nTITLE: Importing FlagProvider in React\nDESCRIPTION: This code snippet imports the FlagProvider component from the Unleash React SDK, which is used to wrap the main App component.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FlagProvider } from \"@unleash/proxy-client-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash SDK and Dependencies\nDESCRIPTION: Commands to install the Unleash .NET client SDK and its Newtonsoft.Json dependency using the .NET CLI.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/implementing-feature-flags-dotnet.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package unleash.client\n```\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package Newtonsoft.Json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Events via API\nDESCRIPTION: API request to fetch event logs for a specific feature flag. Used for audit logging and tracking changes to flag configurations.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/django-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"<your-unleash-url>/api/admin/events/:featureName\"\n\npayload={}\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Enabling Impression Data via API in Ruby\nDESCRIPTION: HTTP PATCH request to enable impression data collection for a specific feature flag. Uses the HTTPX library to make the API call with JSON payload.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/rails-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/<your-project-id>/features/<your-feature-flag>\"\n\npayload = [\n  {\n    op: \"replace\",\n    path: \"/impressionData\",\n    value: true\n  }\n].to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.patch(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Segment Management API Endpoint Reference\nDESCRIPTION: API endpoint reference for adding segments to an existing feature flag strategy.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-create-feature-toggles.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n/reference/api/unleash/update-feature-strategy-segments\n```\n\n----------------------------------------\n\nTITLE: Implementing Separated Segment Models in TypeScript\nDESCRIPTION: This code snippet showcases the implementation of three separate classes for different responsibilities: SegmentStore for CRUD operations (Write Model), SegmentViewModel for UI data (External Read Model), and SegmentReadModel for cross-module queries (Internal Read Model). This approach improves separation of concerns and reduces coupling.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/write-model-vs-read-models.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// used to perform actions on segment\nclass SegmentStore {\n    create(segment: Segment): Promise<Segment> {}\n    get(id: number): Promise<Segment> {}\n    update(id: number, segment: Segment): Promise<Segment> {}\n    delete(id: number): Promise<void> {}\n}\n\n// used by UI\nclass SegmentViewModel {\n    getAll(): Promise<SegmentWithUsageInfo[]> {}\n}\n\n// used by another module checking existing names\nclass SegmentReadModel {\n    getSegmentNames(): Promise<string[]> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Passport.js and Google OAuth2 Dependencies\nDESCRIPTION: This code snippet shows how to include the necessary dependencies for Passport.js and Google OAuth2 authentication in a JavaScript file. It uses `require` to import the packages, allowing their functionalities to be used in the application.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/google-auth-hook.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = require('unleash-server');\nconst passport = require('@passport-next/passport');\nconst GoogleOAuth2Strategy =\n  require('@passport-next/passport-google-oauth2').Strategy;\n```\n\n----------------------------------------\n\nTITLE: Archiving Feature Flag via Unleash API in C#\nDESCRIPTION: Executes an HTTP DELETE request to archive a feature flag. Requires Unleash URL, project ID, feature name, and API key for authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/dotnet-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nHttpClient client = new HttpClient();\n\nstring url = $\"{unleashUrl}/api/admin/projects/:{projectId}/features/:{featureName}\";\n\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"<API_KEY_VALUE>\");\n\nvar response = await client.DeleteAsync(url);\nvar responseBody = await response.Content.ReadAsStringAsync();\n\nConsole.WriteLine(responseBody);\n```\n\n----------------------------------------\n\nTITLE: Initial Chat API Implementation\nDESCRIPTION: Implementation of the chat API endpoint with hardcoded model variants using OpenAI API.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/ai.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createOpenAI } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\nimport { env } from \"$env/dynamic/private\";\n\nconst openai = createOpenAI({\n    apiKey: env.OPENAI_API_KEY ?? \"\",\n});\n\nconst variants = {\n    variant1: {\n        model: \"gpt-3.5-turbo\",\n        max_tokens: 4096,\n        temperature: 1,\n    },\n    variant2: {\n        model: \"gpt-4-turbo\",\n        max_tokens: 4096,\n        temperature: 1,\n    },\n    variant3: {\n        model: \"gpt-4-vision-preview\",\n        max_tokens: 4096,\n        temperature: 1,\n    },\n};\n\nexport const POST = async ({ request }) => {\n    const { messages } = await request.json();\n    const variant = variants[\"variant1\"];\n    const result = await streamText({\n        model: openai(variant.model),\n        messages,\n        max_tokens: variant.max_tokens,\n        temperature: variant.temperature,\n    });\n    return result.toDataStreamResponse();\n};\n```\n\n----------------------------------------\n\nTITLE: Example Database Migration for Unleash\nDESCRIPTION: A JavaScript example of a typical database migration in Unleash. It shows how to create a table in the 'up' method and drop it in the 'down' method.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/backend/overview.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint camelcase: \"off\" */\n'use strict';\n\nexports.up = function(db, cb) {\n  db.createTable(\n    'examples',\n    {\n      id: { type: 'int', primaryKey: true, notNull: true },\n      created_at: { type: 'timestamp', defaultValue: 'now()' },\n    },\n    cb,\n  );\n};\n\nexports.down = function(db, cb) {\n  return db.dropTable('examples', cb);\n};\n```\n\n----------------------------------------\n\nTITLE: Archiving Feature Flag via Unleash API\nDESCRIPTION: HTTP DELETE request to archive a feature flag. Requires Unleash URL, project ID, feature name, and API key for authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/examples.md#2025-04-21_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -L -X DELETE '<your-unleash-url>/api/admin/projects/:projectId/features/:featureName' \\\n-H 'Authorization: <API_KEY_VALUE>'\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradual Rollout Strategy in Rust\nDESCRIPTION: API call implementation to create a gradual rollout strategy for feature flags with 50% rollout and session-based stickiness\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/rust-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse reqwest::blocking::Client;\nuse serde_json::json;\nuse std::error::Error;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let client = Client::new();\n\n    let unleash_url = \"your_unleash_url\";  // Replace with your unleashUrl\n    let project_id = \"your_project_id\";    // Replace with your projectId\n    let feature_name = \"your_feature_name\";  // Replace with your featureName\n    let environment = \"your_environment\";  // Replace with your environment\n    let url = format!(\"{}/api/admin/projects/{}/features/{}/environments/{}/strategies\",\n                      unleash_url, project_id, feature_name, environment);\n\n    let payload = json!({\n        \"name\": \"flexibleRollout\",\n        \"disabled\": false,\n        \"constraints\": [],\n        \"variants\": [],\n        \"parameters\": {\n            \"groupId\": \"delete_survey_flag\",\n            \"rollout\": \"50\",\n            \"stickiness\": \"sessionId\"\n        },\n        \"segments\": []\n    });\n\n    let response = client.post(&url)\n        .header(\"Accept\", \"application/json\")\n        .header(\"Authorization\", \"<API_KEY_VALUE>\")\n        .json(&payload)\n        .send()?;\n\n    let response_body = response.text()?;\n\n    println!(\"{}\", response_body);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flag Properties via Unleash API in Python\nDESCRIPTION: Sends a PUT request to update feature flag properties including description, type, and status flags. Uses JSON payload to specify flag attributes.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/django-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\n\npayload = json.dumps({\n\"description\": \"Controls disabling of the comments section in case of an incident\",\n\"type\": \"kill-switch\",\n\"stale\": True,\n\"archived\": True,\n\"impressionData\": False\n})\nheaders = {\n'Content-Type': 'application/json',\n'Accept': 'application/json',\n'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Archiving Feature Flags via Unleash API in Rust\nDESCRIPTION: This code snippet demonstrates how to archive a feature flag using the Unleash API. It uses the `reqwest` crate to send a DELETE request to the Unleash API endpoint for the specified feature flag. The code expects the Unleash URL, project ID, feature name, and API key to be defined, and it requires the `reqwest` crate.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/rust-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse reqwest::blocking::Client;\nuse std::error::Error;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let client = Client::new();\n\n    let unleash_url = \"http://your_unleash_url.com\";\n    let project_id = \"your_project_id\";\n    let feature_name = \"your_feature_name\";\n    let url = format!(\"{}/api/admin/projects/{}/features/{}\",\n                    unleash_url, project_id, feature_name);\n\n    let response = client.delete(&url)\n        .header(\"Authorization\", \"<YOUR_API_KEY>\")\n        .send()?;\n\n    let response_body = response.text()?;\n\n    println!(\"{}\", response_body);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Strategy Add Event Example in JSON\nDESCRIPTION: Example of a feature-strategy-add event showing the structure when a new strategy is added to a feature flag.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27335,\n  \"type\": \"feature-strategy-add\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"id\": \"3f4bf713-696c-43a4-8ce7-d6c607108858\",\n    \"name\": \"flexibleRollout\",\n    \"title\": null,\n    \"disabled\": false,\n    \"parameters\": {\n      \"groupId\": \"new-feature\",\n      \"rollout\": \"67\",\n      \"stickiness\": \"default\"\n    },\n    \"variants\": [],\n    \"sortOrder\": 0,\n    \"segments\": []\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": \"new-feature\",\n  \"project\": \"my-other-project\",\n  \"environment\": \"default\",\n  \"label\": \"Flag strategy added\",\n  \"summary\": \"**user@getunleash.io** added strategy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating && Operator Pitfalls in React JSX\nDESCRIPTION: Examples showing how the && operator can lead to unintended rendering of falsy values in React components.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/jsx-conditionals.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{NaN && <p>❔</p>} // will render `NaN`\n{0 && <p>❔</p>} // will render `0`\n{arr?.length && <p>❔</p>} // can render `0`\n```\n\n----------------------------------------\n\nTITLE: Adding Unleash SDK Dependency to Spring Boot\nDESCRIPTION: XML configuration to add the Unleash Spring Boot SDK dependency to the project's pom.xml file\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.getunleash</groupId>\n    <artifactId>springboot-unleash-starter</artifactId>\n    <version>1.1.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash SDK for .NET\nDESCRIPTION: Install the required NuGet packages for using Unleash in a .NET application. This includes the main client library and optionally Newtonsoft.Json if it's not already in the project.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/dotnet.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package unleash.client\n// If you do not have a json library in your project:\ndotnet add package Newtonsoft.Json\n```\n\n----------------------------------------\n\nTITLE: Implementing Clean Domain-Infrastructure Separation in TypeScript\nDESCRIPTION: Corrected implementation showing proper separation between domain types and API types, with explicit mapping at the boundary layer\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/correct-type-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Domain-layer store uses a domain type\nstore.createUser(user: DomainUser): Promise<void>;\n\n// API-layer controller maps OpenAPI to domain\nconst domainUser = mapFromApiType(apiUser);\nawait store.createUser(domainUser);\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication in Unleash v4\nDESCRIPTION: Example of how to authenticate a user with the new RBAC system in Unleash v4. This code demonstrates using the userService to login a user without password and setting the user on the current session.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/upgrading-unleash.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = userService.loginUserWithoutPassword(\n  'some@getunleash.io',\n  false, // autoCreateUser. Set to true if you want to create users on the fly.\n);\n\n// The user needs to be set on the current active session\nreq.session.user = user;\n```\n\n----------------------------------------\n\nTITLE: Runtime State Service Operations in JavaScript\nDESCRIPTION: Example of using Unleash's StateService to import and export data at runtime. Shows how to export data with specific inclusion parameters and import data with options for dropping existing data.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-import-export.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst unleash = require('unleash-server');\n\nconst { services } = await unleash.start({...});\nconst { stateService } = services;\n\nconst exportedData = await stateService.export({includeStrategies: false, includeFeatureToggles: true, includeTags: true, includeProjects: true});\n\nawait stateService.import({data: exportedData, userName: 'import', dropBeforeImport: false});\n\nawait stateService.importFile({file: 'exported-data.yml', userName: 'import', dropBeforeImport: true})\n```\n\n----------------------------------------\n\nTITLE: Enabling Impression Data via Unleash API\nDESCRIPTION: API request to enable impression data tracking for a feature flag. This allows collecting usage analytics and monitoring flag exposure.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/django-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\n\npayload = json.dumps([\n {\n    \"op\": \"replace\",\n    \"path\": \"/impressionData\",\n    \"value\": true\n  }\n])\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash Client with Environment Variable\nDESCRIPTION: Initializes the Unleash client using an environment variable for the API token, which is a more secure approach for production environments.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/ruby.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n@unleash = Unleash::Client.new(\n  url: \"<YOUR_API_URL>\",\n  custom_http_headers: { 'Authorization': ENV['UNLEASH_API_TOKEN'] },\n  app_name: 'unleash-onboarding-ruby',\n  instance_id: 'unleash-onboarding-ruby',\n)\n```\n\n----------------------------------------\n\nTITLE: Strategy Created Event\nDESCRIPTION: This JSON snippet represents the event data generated when a new strategy is created in Unleash. It includes details such as the strategy's ID, type, creation timestamp, creating user, and the strategy's configuration (name, description, parameters). The `data` property contains the strategy's configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 273357,\n  \"type\": \"strategy-created\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"name\": \"new-strategy\",\n    \"description\": \"this strategy does ...\",\n    \"parameters\": [],\n    \"editable\": true,\n    \"deprecated\": false\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null,\n  \"label\": \"strategy-created\",\n  \"summary\": \"**user@getunleash.io** triggered **strategy-created**\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ConditionallyRender Component\nDESCRIPTION: Example of using the ConditionallyRender component to safely handle conditional rendering.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/jsx-conditionals.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ConditionallyRender\n    condition={arr?.length}\n    show={<p>❔</p>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Unleash Backend in Development\nDESCRIPTION: Commands to enable corepack, install dependencies, and start the Unleash backend in development mode.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/backend/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Environment Variables in Unleash\nDESCRIPTION: This snippet shows the essential environment variables needed to set up OpenID Connect (OIDC) in Unleash. It includes variables for enabling OIDC, setting the discovery URL, client ID, and client secret.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-add-sso-open-id-connect.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOIDC_ENABLED=true\nOIDC_DISCOVER_URL=https://myoidchost.azure.com/.well-known/openid-configuration\nOIDC_CLIENT_ID=FB87266D-CDDB-4BCF-BB1F-8392FD0EDC1B\nOIDC_CLIENT_SECRET=qjcVfeFjEfoYAF3AEsX2IMUWYuUzAbXO\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI in Docker for Unleash Proxy\nDESCRIPTION: Docker run command demonstrating how to enable OpenAPI via environment variable for Unleash proxy.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-enable-openapi.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    -e ENABLE_OAS=true \\ # other variables omitted for brevity\n    unleashorg/unleash-proxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Permissions for Maintenance Mode in SQL\nDESCRIPTION: SQL commands to grant necessary database permissions for maintenance mode operation. The Unleash database user requires DELETE and UPDATE permissions on the unleash_session table, even in maintenance mode.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/maintenance-mode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGRANT DELETE ON unleash_session TO my_db_role;\nGRANT UPDATE ON unleash_session TO my_db_role;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Headers for Datadog Integration\nDESCRIPTION: Example JSON configuration for setting additional custom HTTP headers when Unleash communicates with Datadog.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/integrations/datadog.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SOME_CUSTOM_HTTP_HEADER\": \"SOME_VALUE\",\n  \"SOME_OTHER_CUSTOM_HTTP_HEADER\": \"SOME_OTHER_VALUE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing Strategy via API in Ruby\nDESCRIPTION: This code example demonstrates how to set up an A/B testing strategy using the Unleash API in Ruby. It configures a flexible rollout strategy with a 50% rollout percentage for a feature flag.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/rails-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/<your-project-id>/features/<your-feature-flag>/environments/<your-environment>/strategies/3a76899f-582b-422f-be72-34c995388f77\"\npayload = {\n  name: \"flexibleRollout\",\n  title: \"\",\n  constraints: [],\n  parameters: {\n    rollout: \"50\",\n    stickiness: \"default\",\n    groupId: \"\"\n  },\n  variants: [],\n  segments: [],\n  disabled: false\n}.to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.put(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradual Rollout for iOS Feature Flags with cURL\nDESCRIPTION: This cURL request updates a feature flag strategy to implement a gradual rollout to 50% of users. It sets the flexible rollout parameter with stickiness for consistent user experience.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'http://localhost:4242/api/admin/projects/default/features/tempUnit/environments/development/strategies/{STRATEGY_ID}' \\\n    --header 'Authorization: INSERT_API_KEY' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '{\n  \"name\": \"flexibleRollout\",\n  \"title\": \"\",\n  \"constraints\": [],\n  \"parameters\": {\n    \"rollout\": \"50\",\n    \"stickiness\": \"default\",\n    \"groupId\": \"tempUnit\"\n  },\n  \"variants\": [],\n  \"segments\": [],\n  \"disabled\": false\n}'\n\n```\n\n----------------------------------------\n\nTITLE: Adding WebP support to image conversion in Rust\nDESCRIPTION: Extended Rust code that adds support for WebP conversion using the webp crate, with a boolean flag to toggle between JPEG and WebP.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/implementing-feature-flags-rust.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse image::ImageReader;\nuse std::{error::Error, fs};\nuse webp::Encoder;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    println!(\"Hello, world!\");\n\n    let is_webp = true;\n    process_image(is_webp)?\n\n    Ok(())\n}\n\nfn process_image(is_webp: bool) -> Result<(), Box<dyn Error>> {\n    let img = ImageReader::open(\"input.png\")?.decode()?;\n\n    if is_webp {\n        let webp_data = Encoder::from_image(&img)?.encode(0.75);\n        fs::write(\"output.webp\", webp_data.to_vec())?;\n    } else {\n        img.save_with_format(\"output.jpeg\", image::ImageFormat::Jpeg)?;\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Java SDK Dependency\nDESCRIPTION: Add the Unleash Java SDK dependency to your project's Maven configuration. This snippet specifies the latest version of the SDK.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/java.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.getunleash</groupId>\n    <artifactId>unleash-client-java</artifactId>\n    <version>LATEST</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: React Component Naming Convention Example\nDESCRIPTION: Demonstrates the correct and incorrect ways to name React components and their corresponding files. Shows that component names should match their filenames and begin with an uppercase letter.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/component-naming.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Do:\n// MyComponent.ts\n\nconst MyComponent = () => {};\n\n// Don't:\n// someRandomName.ts\n\nconst MyComponent = () => {};\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL User and Database for Unleash\nDESCRIPTION: This snippet creates a PostgreSQL user named `unleash_user` with the password `password`, creates a database named `unleash`, and grants all privileges on the database to the user. This ensures that the Unleash application can access and modify the database.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/database-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ psql postgres <<SQL\nCREATE USER unleash_user WITH PASSWORD 'password';\nCREATE DATABASE unleash;\nGRANT ALL PRIVILEGES ON DATABASE unleash to unleash_user;\nSQL\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO Group Sync in Unleash\nDESCRIPTION: This snippet details the configuration needed to enable group synchronization with Single Sign-On (SSO) providers in Unleash. It includes necessary options such as enabling group syncing and setting the JSON path for group field extraction.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/rbac.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://some-url.com\",\n  \"azp\": \"1234987819200.apps.some-url.com\",\n  \"aud\": \"1234987819200.apps.some-url.com\",\n  \"sub\": \"10769150350006150715113082367\",\n  \"at_hash\": \"HK6E_P6Dh8Y93mRNtsDB1Q\",\n  \"hd\": \"example.com\",\n  \"email\": \"jsmith@example.com\",\n  \"email_verified\": \"true\",\n  \"groups\": [\"test-group\", \"test-group-2\"], //the field where groups are specified\n  \"iat\": 1353601026,\n  \"exp\": 1353604926,\n  \"nonce\": \"0394852-3190485-2490358\"\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended WARN-level Logging for Traffic Data Usage Failures in TypeScript\nDESCRIPTION: This improved implementation downgrades the log level from ERROR to WARN for traffic data usage failures, as these are self-healing issues that don't require immediate SRE intervention.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/overarching/logging-levels.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait Promise.all(promises)\n            .then(() => {\n                this.logger.debug('Traffic data usage saved');\n            })\n            .catch((err) => {\n                this.logger.warn('Failed to save traffic data usage', err); \n            });\n```\n\n----------------------------------------\n\nTITLE: Ternary Operator Usage\nDESCRIPTION: Examples of using the ternary operator for safe conditional rendering.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/jsx-conditionals.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n{NaN ? <p>👍</p> : null}  // Won't render anything\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Events via API\nDESCRIPTION: API command to fetch events for a specific feature flag. Returns event history including creation, strategy updates, and variant configurations.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/examples.md#2025-04-21_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -L -X GET '<your-unleash-url>/api/admin/events/:featureName' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: <API_KEY_VALUE>'\n```\n\n----------------------------------------\n\nTITLE: Adding Unleash Java SDK Dependency\nDESCRIPTION: XML dependency configuration to add the Unleash Java client SDK to the project's pom.xml file.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.getunleash</groupId>\n    <artifactId>unleash-client-java</artifactId>\n    <version>9.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash SDK and dependencies in Rust\nDESCRIPTION: Commands to add the Unleash SDK and its dependencies to the Rust project.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/implementing-feature-flags-rust.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo add enum-map@2.0.3\ncargo add reqwest --features json\ncargo add serde --features derive\ncargo add tokio --features full\ncargo add unleash-api-client --features reqwest\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Preferred and Discouraged Props Usage in React Components\nDESCRIPTION: This code snippet illustrates the preferred method of using props destructuring inline in React components, as well as the discouraged approach. The preferred method enhances code readability and makes it easier to identify component dependencies at a glance.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-component-props-usage.md#2025-04-21_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n// Do:\nconst MyComponent = ({ name, age, occupation }: IComponentProps) => {\n    return (\n        <div>\n            <p>{age}</p>\n            <p>{name}</p>\n            <p>{occupation}</p>\n        </>\n    )\n};\n\n// Don't:\nfunction MyComponent(props) {\n       return (\n        <div>\n            <p>{props.age}</p>\n            <p>{props.name}</p>\n            <p>{props.occupation}</p>\n        </>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash with Docker\nDESCRIPTION: Commands to clone the Unleash repository and run it locally using Docker Compose.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/implementing-feature-flags-rails.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Fallback Variant in Unleash\nDESCRIPTION: This JSON snippet represents a fallback variant which is returned by Unleash if no suitable variant matches the current context or if the feature flag is disabled. The fallback includes properties such as 'name', 'enabled', and 'feature_enabled', all of which are set to values indicating the fallback's disabled status. No specific dependencies other than a JSON parsing mechanism are required.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/strategy-variants.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"disabled\",\n  \"enabled\": false,\n  \"feature_enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Job for Unleash Metrics\nDESCRIPTION: YAML configuration for setting up a Prometheus scraping job to collect internal metrics from Unleash's backstage API. This configuration is essential for populating the Network dashboard with request data.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/network-view.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  - job_name: unleash_internal_metrics\n    metrics_path: /internal-backstage/prometheus\n    static_configs:\n      - targets: ['unleash-url']\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash with Docker\nDESCRIPTION: Clone the Unleash repository and use Docker Compose to run it locally. This sets up a local Unleash instance that will be accessible at http://localhost:4242.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Implementing A/B Testing Strategy in Ruby\nDESCRIPTION: Code to set up an A/B testing strategy with 50% rollout distribution using the Unleash API.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/ruby-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/<your-project-id>/features/<your-feature-flag>/environments/<your-environment>/strategies/3a76899f-582b-422f-be72-34c995388f77\"\npayload = {\n  name: \"flexibleRollout\",\n  title: \"\",\n  constraints: [],\n  parameters: {\n    rollout: \"50\",\n    stickiness: \"default\",\n    groupId: \"\"\n  },\n  variants: [],\n  segments: [],\n  disabled: false\n}.to_json\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.put(url, headers: headers, body: payload)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Archiving Feature Flag via Unleash API in Python\nDESCRIPTION: Executes a DELETE request to archive a feature flag. Requires feature flag name and project ID in the URL path.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/django-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\n\npayload={}\nheaders = {\n'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Addon Configuration Created Event\nDESCRIPTION: This JSON snippet represents the event data generated when an integration configuration (addon) is created in Unleash. The snippet includes the ID, type, creator, and creation timestamp, along with the configuration details, such as provider type, enabled status, description, events, projects, and environments.  The `data` property contains these configuration details.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27343,\n  \"type\": \"addon-config-created\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"id\": 14,\n    \"provider\": \"webhook\",\n    \"enabled\": true,\n    \"description\": \"Test Webhooks\",\n    \"events\": [\n      \"feature-updated\"\n    ],\n    \"projects\": [\n      \"test-project\"\n    ],\n    \"environments\": [\n      \"production\"\n    ]\n  },  \n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null,\n  \"label\": \"Integration configuration created\",\n  \"summary\": \"**user@getunleash.io** created a new **webhook** integration configuration\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash Client with Environment Variable\nDESCRIPTION: Example showing how to initialize the Unleash client using an environment variable for the client key, which is a more secure approach for production environments.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/flutter.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:unleash_proxy_client_flutter/unleash_proxy_client_flutter.dart';\nimport 'dart:async';\nimport 'dart:io';\n\nfinal unleash = UnleashClient(\n    url: Uri.parse('<YOUR_API_URL>'),\n    clientKey: Platform.environment['UNLEASH_CLIENT_KEY']!,\n    appName: 'unleash-onboarding-flutter');\n\nunleash.start();\n```\n\n----------------------------------------\n\nTITLE: Problem Example of Default Exports in React Components\nDESCRIPTION: An example showing how default exports can lead to component renaming across files, causing confusion in the codebase.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-export.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Problem example\n// File A\n\nconst MyComponent = () => {\n\n}\n\nexport default MyComponent;\n\n// File B\nimport NewName from '../components/MyComponent/MyComponent.tsx';\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Ruby Gem\nDESCRIPTION: Command to add the Unleash gem to the Rails project.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/implementing-feature-flags-rails.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbundle add unleash\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Proxy NPM Package\nDESCRIPTION: Command to install the Unleash Proxy package as a dependency in a Node.js project.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-run-the-unleash-proxy.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unleash/proxy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Events\nDESCRIPTION: API request to fetch event logs for a specific feature flag to track changes and configurations over time\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/examples.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"<your-unleash-url>/api/admin/events/:featureName\"\n\npayload={}\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Updated API Error Message Structure in v5\nDESCRIPTION: New error message structure introduced in Unleash v5, providing more descriptive and human-friendly error details\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/upgrading-unleash.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"37a1765f-a5a0-4371-8aa2-341f331579f9\",\n  \"name\": \"ValidationError\",\n  \"message\": \"Request validation failed: the payload you provided doesn't conform to the schema. Check the `details` property for a list of errors that we found.\",\n  \"details\": [\n    {\n      \"description\": \"The .parameters property should be object. You sent [].\",\n      \"path\": \"parameters\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash with Docker\nDESCRIPTION: Commands to clone and run Unleash locally using Docker for feature flag management\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/implementing-feature-flags-ios.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Python Client\nDESCRIPTION: Install the UnleashClient package for Python. This package provides the SDK for connecting to and interacting with the Unleash API.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npip install UnleashClient\n```\n\n----------------------------------------\n\nTITLE: Example Google Analytics Payload with Impression Data\nDESCRIPTION: This snippet illustrates the structure of a Google Analytics payload that includes impression event data from Unleash, showing how the data is formatted for analysis.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/a-b-testing.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"client_id\": \"unleash_client\"\n    \"user_id\": \"uuid1234\"\n    \"timestamp_micros\": \"1730407349525000\"\n    \"non_personalized_ads\": true\n    \"events\": [\n        {\n            \"name\":\"select_item\"\n            \"params\": {\n                \"items\":[]\n                \"event\":\"screen_view\"\n                \"app_name\":\"myAppName\"\n                \"feature\":\"myFeatureName\"\n                \"treatment\":\"variantValue\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting License Key via Environment Variable\nDESCRIPTION: Demonstrates how to set a license key using the UNLEASH_LICENSE environment variable during container deployment for Unleash Enterprise\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/license-keys.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUNLEASH_LICENSE=your_license_key\n```\n\n----------------------------------------\n\nTITLE: Recommended Named Export Pattern for React Components\nDESCRIPTION: Demonstrates the preferred approach of using named exports instead of default exports, along with an anti-pattern to avoid.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-export.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Do:\nexport const MyComponent = () => {};\n\n// Don't:\nconst MyComponent = () => {};\n\nexport default MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Spring Pet Clinic with Maven\nDESCRIPTION: Commands to clone the Spring Pet Clinic repository and build/run it using Maven\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:spring-projects/spring-petclinic.git\ncd spring-petclinic\n./mvnw package\njava -jar target/*.jar\n```\n\n----------------------------------------\n\nTITLE: Installing the Unleash Swift SDK\nDESCRIPTION: Instructions for adding the Unleash Proxy Client Swift SDK to your project. The SDK can be installed by following the instructions at the provided GitHub repository URL.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/swift.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// Instructions to add the Swift SDK can be found at the provided URL:\nhttps://github.com/Unleash/unleash-proxy-client-swift.git\n```\n\n----------------------------------------\n\nTITLE: Documenting Environment Import Event Format in JSON\nDESCRIPTION: Example of an 'environment-import' event that's generated when importing an environment as part of an import job. The data property contains the configuration details of the imported environment including name, type, and settings.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27345,\n  \"type\": \"environment-import\",\n  \"createdBy\": \"import-API-token\",\n  \"createdAt\": \"2022-06-03T11:30:40.557Z\",\n  \"data\": {\n    \"name\": \"custom-environment\",\n    \"type\": \"test\",\n    \"sortOrder\": 9999,\n    \"enabled\": true,\n    \"protected\": false\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Unleash Server Startup Import Command\nDESCRIPTION: Command line example showing how to start Unleash server with import configuration parameters. Demonstrates importing from a configuration file.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-import-export.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nunleash-server --databaseUrl [...] \\\n\t       --importFile configuration.yml\n```\n\n----------------------------------------\n\nTITLE: Archiving Feature Flag\nDESCRIPTION: Makes a DELETE request to archive a feature flag. Requires Unleash URL, project ID, feature name, and API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/ruby-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\npayload = {}\nheaders = {\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.delete(url, headers: headers)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Logic in JavaScript\nDESCRIPTION: Updated fetchCorgi function that uses the Unleash client to check if the 'show-info' feature flag is enabled and conditionally displays the fun fact.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/javascript/implementing-feature-flags-js.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchCorgi() {\n  corgiImg.alt = \"Loading...\";\n  funFact.textContent = \"Fetching a cute Corgi...\";\n\n  const showInfo = unleash.isEnabled(\"show-info\");\n  funFact.style.display = showInfo ? \"block\" : \"none\";\n\n  const response = await fetch(\"https://dog.ceo/api/breed/corgi/images/random\");\n  const data = await response.json();\n  corgiImg.src = data.message;\n\n  funFact.textContent = funFacts[Math.floor(Math.random() * funFacts.length)];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash SDK with pip\nDESCRIPTION: This command installs the UnleashClient package using pip, which is required to use Unleash in Python applications.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/python.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install UnleashClient\n```\n\n----------------------------------------\n\nTITLE: Basic REST API Implementation in Program.cs\nDESCRIPTION: Initial Program.cs file that sets up an ASP.NET Core Web API with an endpoint to fetch characters from the Rick and Morty REST API. Includes data model definitions for both REST and GraphQL responses.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/implementing-feature-flags-dotnet.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Net.Http.Json;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddHttpClient(); // Register HttpClient\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.MapGet(\"/\", async (HttpClient httpClient) =>\n{\n    var response = await httpClient.GetFromJsonAsync<RickAndMortyApiResponse>(\"https://rickandmortyapi.com/api/character/\");\n    var characters = response?.Results;\n    Console.WriteLine(\"Hello REST API\");\n    Console.WriteLine($\"There are {characters?.Length} characters\");\n    return characters;\n});\n\napp.Run();\n\npublic record RickAndMortyApiResponse(Character[]? Results);\npublic record RickAndMortyGraphQLResponse(Data? Data);\npublic record Data(Characters? Characters);\npublic record Characters(Character[]? Results);\npublic record Character\n{\n    public string? Name { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Unleash Open Source with Docker\nDESCRIPTION: Commands to clone the Unleash repository and start it using Docker Compose. This sets up a local instance of Unleash accessible at localhost:4242.\nSOURCE: https://github.com/unleash/unleash/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions for Functions and Components in JSX\nDESCRIPTION: This snippet demonstrates the preferred way of defining functions and React components using arrow functions, as well as the discouraged traditional function declarations. The use of arrow functions is encouraged to maintain consistency, improve code navigation, and avoid scope issues with 'this'.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-function-type.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Do:\nconst myFunction = () => {};\nconst MyComponent = () => {};\n\n// Don't:\nfunction myFunction() {}\nfunction MyComponent() {}\n```\n\n----------------------------------------\n\nTITLE: Setting up SvelteKit project and installing dependencies\nDESCRIPTION: Commands to create a new SvelteKit project named 'habits' and install necessary dependencies including date-fns and the Unleash Svelte SDK.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/sveltekit/implementing-feature-flags-sveltekit.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create svelte@latest habits\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm i date-fns @unleash/proxy-client-svelte\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Go SDK\nDESCRIPTION: Command to install the Unleash Go client SDK using go get\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/go.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Unleash/unleash-client-go/v4\n```\n\n----------------------------------------\n\nTITLE: TypeScript-Friendly Ternary Example\nDESCRIPTION: Example showing how ternary operators work well with TypeScript type checking.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/jsx-conditionals.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Test: FC<{ maybeString?: string }> = ({ maybeString }) =>\n    maybeString ? <SubComponent text={maybeString} /> : null;\n```\n\n----------------------------------------\n\nTITLE: Unleash Login Credentials\nDESCRIPTION: Default login credentials for accessing the local Unleash instance. These are used to log into the Unleash dashboard after setting up the local server.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Username\": \"admin\",\n  \"Password\": \"unleash4all\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Backup with pg_dump - Bash\nDESCRIPTION: This snippet executes the pg_dump command to create a full backup of the Unleash database. It connects to the database using the specified user and host, ensuring that the backup file is created safely.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/database-backup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npg_dump --clean -U unleash_user -W -h localhost unleash > unleash-db.dump\n\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash PHP SDK via Composer\nDESCRIPTION: This snippet shows how to install the Unleash PHP SDK using Composer. It adds the Unleash client package to your project's dependencies.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/php.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require unleash/client\n```\n\n----------------------------------------\n\nTITLE: Integrating Unleash Feature Flag with Go Application\nDESCRIPTION: Diff showing how to update the Go application to use a real feature flag from Unleash instead of a static boolean value.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/implementing-feature-flags-golang.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"log\"\n    \"net/http\"\n\n+\t\"github.com/Unleash/unleash-client-go/v4\"\n)\n\n// ... rest of the types ...\n\nfunc main() {\n+\t// Initialize Unleash client\n+\tunleash.Initialize(\n+\t\tunleash.WithUrl(\"http://localhost:4242/api/\"),\n+\t\tunleash.WithAppName(\"country_go\"),\n+\t\tunleash.WithCustomHeaders(http.Header{\"Authorization\": {\"YOUR_API_KEY\"}}),\n+\t)\n+\n+\tunleash.WaitForReady()\n\n+\tisGraphQL := unleash.IsEnabled(\"graphql-api\")\n-\t// Define a static feature flag\n-\tisGraphQL := true\n\n    // ... rest of the code ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Server with Docker\nDESCRIPTION: Commands to clone the Unleash repository and start it using Docker Compose\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:Unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Named Exports vs Default Exports Example\nDESCRIPTION: Demonstrates the preferred named export pattern over default exports to prevent component renaming issues and improve refactoring capabilities.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/preferred-export.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Preferred: Named exports\nexport const MyComponent = () => {};\n\n// Discouraged: Default exports\nexport default MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the App\nDESCRIPTION: These commands install the project dependencies and start the development server for the Cypress Real World App.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Initialize npm and install unleash-server\nDESCRIPTION: These commands initialize a new npm project and install the unleash-server package as a dependency.  The `npm init` command creates a package.json file, and `npm install` downloads and installs the unleash-server package and its dependencies into the node_modules directory.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\nnpm install unleash-server --save\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Unleash\nDESCRIPTION: Example of using environment variables for Unleash configuration in a Svelte application, specifically using Vite's environment variable system.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/svelte.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\nconst config = {\n    url: '<YOUR_API_URL>',\n    clientKey: import.meta.env.VITE_UNLEASH_API_TOKEN,\n    appName: 'unleash-onboarding-svelte',\n};\n```\n\n----------------------------------------\n\nTITLE: Start PostgreSQL container for Unleash\nDESCRIPTION: This command starts a PostgreSQL container with specified environment variables for password, user, and database name.  It also configures the container to use a Docker network named 'unleash'. The environment variables are used to configure the database instance.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -e POSTGRES_PASSWORD=some_password \\\n  -e POSTGRES_USER=unleash_user -e POSTGRES_DB=unleash \\\n  --network unleash --name postgres postgres\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash SDK in Android using Gradle\nDESCRIPTION: Adds the Unleash Android SDK dependency to your Android project's build configuration. The SDK provides feature flag functionality for Android applications.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/android.md#2025-04-21_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(\"io.getunleash:unleash-android:1\")\n```\n\n----------------------------------------\n\nTITLE: Implementing feature flag in App component\nDESCRIPTION: Code diff showing how to use the Unleash feature flag to set the maxHabits value in the App component.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/sveltekit/implementing-feature-flags-sveltekit.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n+  import { useFlag } from '@unleash/proxy-client-svelte';\n+  const maxHabitsIncreased = useFlag('maxHabitsIncreased');\n+  let maxHabits = $maxHabitsIncreased ? 6 : 2;\n-  lex maxHabits = 3;\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Dependencies in Rust\nDESCRIPTION: Install the necessary crates for using Unleash with Rust, including the unleash-api-client and its dependencies for HTTP clients and serialization.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add unleash-api-client --features async-std,reqwest,surf\ncargo add serde --features derive\ncargo add serde reqwest --features json\ncargo add serde tokio --features full\ncargo add serde anyhow cfg cfg-if enum-map@~2.0.0 surf\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Dynamic Configuration of Unleash Edge\nDESCRIPTION: This Bash snippet uses `curl` to send an authorized GET request to an Unleash Edge instance. It allows for the dynamic addition of configurations for other projects or environments after the initial startup. Adjust the `<your-edge-host>` and `<NEW_CLIENT_API_TOKEN>` placeholders to match the specific Edge instance and token required for access.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/understanding-unleash/hosting-options.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'http://<your-edge-host>:3063/api/client/features' \\\n--header 'Authorization: <NEW_CLIENT_API_TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: NPM Project Initialization\nDESCRIPTION: Command to initialize a new Node.js project for running the Unleash Proxy.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-run-the-unleash-proxy.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Discouraged SQL Query Syntax with Implicit Table Naming in TypeScript\nDESCRIPTION: This example shows the discouraged approach of using implicit table naming for columns in SQL queries. This style lacks clarity about which table each column belongs to, potentially causing ambiguity errors, especially when tables have columns with identical names.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/specificity-db-columns.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst rows = await this.db\n    .select(\n        'id', \n        'name', \n        'email',\n        'description',\n    )\n    .from('users')\n    .join('orders', 'orders.user_id', 'users.id')\n    .where('status', 'active')\n    .orderBy('created_at', 'desc')\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies\nDESCRIPTION: Commands to navigate to the website directory and install required dependencies using Yarn package manager.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncd unleash/website\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Events via API - Shell\nDESCRIPTION: This snippet demonstrates how to retrieve events related to a specific feature flag by making a GET request to the Unleash API. It requires the feature name and authorization using an API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L -X GET '<your-unleash-url>/api/admin/events/:featureName' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: <API_KEY_VALUE>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash with Environment Variables in Svelte\nDESCRIPTION: Shows how to set up Unleash configuration using environment variables in a Svelte application. The client key is retrieved from a Vite environment variable.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/vue.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\nconst config = {\n    url: '<YOUR_API_URL>',\n    clientKey: import.meta.env.VITE_UNLEASH_API_TOKEN,\n    appName: 'unleash-onboarding-vue',\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Client Import\nDESCRIPTION: Import statement for database and Unleash client\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom backend import db, client\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash SDK via RubyGems\nDESCRIPTION: Installs the Unleash SDK using the gem package manager for Ruby.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/ruby.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngem install unleash\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Flutter SDK via pub\nDESCRIPTION: Command to install the Unleash proxy client package for Flutter using pub package manager.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/flutter.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub add unleash_proxy_client_flutter\n```\n\n----------------------------------------\n\nTITLE: Adding Required Android Permissions for Unleash SDK\nDESCRIPTION: Configures the necessary Android permissions in the manifest file to allow Unleash SDK to function. Internet access is needed to fetch feature flags, and network state access helps with connectivity handling.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/android.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres for Unleash e2e tests with Docker in Bash\nDESCRIPTION: Docker command to start a Postgres container configured for Unleash end-to-end tests.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name unleash-postgres -p 5432:5432 -e POSTGRES_USER=unleash_user -e POSTGRES_PASSWORD=password -e POSTGRES_DB=unleash_test -d postgres:15\n```\n\n----------------------------------------\n\nTITLE: All Projects API Token Example\nDESCRIPTION: Example of an API token with access to development environment for all current and future projects\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/api-tokens-and-client-keys.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*:development.be44368985f7fb3237c584ef86f3d6bdada42ddbd63a019d26955178\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Documentation\nDESCRIPTION: Command to generate OpenAPI documentation that will be available in the Reference documentation section.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn generate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Flag Events in .NET\nDESCRIPTION: Makes a GET request to fetch event logs for a specific feature flag. Returns historical changes and activities related to the flag. Requires API key authentication.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/dotnet-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nHttpClient client = new HttpClient();\n\nstring url = $\"{unleashUrl}/api/admin/events/:{featureName}\";\n\nclient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"<API_KEY_VALUE>\");\n\nvar response = await client.GetAsync(url);\nvar responseBody = await response.Content.ReadAsStringAsync();\n\nConsole.WriteLine(responseBody);\n```\n\n----------------------------------------\n\nTITLE: Flask Import Statement Update\nDESCRIPTION: Updated import statement including abort function for error handling\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import redirect, render_template, request, url_for, abort\n```\n\n----------------------------------------\n\nTITLE: Creating a New .NET Web API Project\nDESCRIPTION: Command to create a new ASP.NET Core Web API project. This sets up the base project structure for implementing feature flags.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/implementing-feature-flags-dotnet.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new webapi -o dotnet-tutorial\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown for Unleash Server\nDESCRIPTION: Example of how to gracefully shut down an Unleash server instance. This code demonstrates creating and starting an Unleash server instance and then properly stopping it to close database connections and terminate running tasks.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst unleash = require('unleash-server');\nconst app = express();\n\nconst start = async () => {\n    const instance = await unleash.start({\n        databaseUrl: 'postgres://unleash_user:password@localhost:5432/unleash',\n        port: 4242,\n    });\n\n    //Sometime later\n    await instance.stop();\n    console.log('Unleash has now stopped');\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Proxy Client for Svelte\nDESCRIPTION: Command to install the Unleash proxy client SDK for Svelte via npm.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/svelte.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @unleash/proxy-client-svelte\n```\n\n----------------------------------------\n\nTITLE: Specifying SAML Endpoint URL for Keycloak Configuration\nDESCRIPTION: This snippet shows the format of the SAML Endpoint URL to be used when configuring the Keycloak client for Unleash. Replace 'unleash.hostname.com' with your actual Unleash instance hostname.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-add-sso-saml-keycloak.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<unleash.hostname.com>/auth/saml/callback\n```\n\n----------------------------------------\n\nTITLE: Creating a new version tag for Unleash release in Bash\nDESCRIPTION: npm command to set a new version in package.json and create a corresponding git tag.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm version 3.10.0\n```\n\n----------------------------------------\n\nTITLE: Project Created Event\nDESCRIPTION: This JSON snippet represents the event data generated when a project is created in Unleash. It provides information such as the project's ID, type, creation timestamp, creator, and the project's configuration details (name, description, default stickiness, mode, change request environments). The `data` property holds the project's configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27340,\n  \"type\": \"project-created\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"id\": \"my-other-project\",\n    \"name\": \"my other project\",\n    \"description\": \"a project for important work\",\n    \"defaultStickiness\": \"default\",\n    \"mode\": \"private\",\n    \"changeRequestEnvironments\": []\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": \"my-other-project\",\n  \"environment\": null,\n  \"label\": \"Project created\",\n  \"summary\": \"**user@getunleash.io** created project **my-other-project** ...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting an image to JPEG in Rust\nDESCRIPTION: Rust code to read an input image and convert it to JPEG format using the image crate.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/implementing-feature-flags-rust.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse image::ImageReader;\nuse std::{error::Error, fs};\n\nfn main() -> Result<(), Box<dyn Error>> {\n    println!(\"Hello, world!\");\n\n    process_image()?\n\n    Ok(())\n}\n\nfn process_image() -> Result<(), Box<dyn Error>> {\n    let img = ImageReader::open(\"input.png\")?.decode()?;\n    img.save_with_format(\"output.jpeg\", image::ImageFormat::Jpeg)?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Teams Events for Unleash Integration\nDESCRIPTION: List of supported event types that can trigger notifications in Microsoft Teams when feature flags are modified. Available in Unleash version 4.0+.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/integrations/teams.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- feature-created\n- feature-metadata-updated\n- feature-project-change\n- feature-archived\n- feature-revived\n- feature-strategy-update\n- feature-strategy-add\n- feature-strategy-remove\n- feature-stale-on\n- feature-stale-off\n- feature-environment-enabled\n- feature-environment-disabled\n- feature-updated (deprecated in v4.3)\n```\n\n----------------------------------------\n\nTITLE: Using Styled Components and sx Prop in TypeScript for Unleash Project\nDESCRIPTION: This snippet shows how to use the reusable styles defined earlier with styled components and the sx prop in the Unleash project. It demonstrates creating a styled Link component and applying styles to an IconButton.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-styling-method.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst StyledLink = styled(Link)(({ theme }) => ({\n    ...focusable(theme),\n}));\n\n<IconButton sx={focusable}/>\n```\n\n----------------------------------------\n\nTITLE: Testing Demo Instance API Access\nDESCRIPTION: cURL command to test access to the Unleash demo instance API using authentication\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/quickstart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://app.unleash-hosted.com/demo/api/client/features \\\n-H \"Authorization: 56907a2fa53c1d16101d509a10b78e36190b0f918d9f122d\"\n```\n\n----------------------------------------\n\nTITLE: Running Application in Docker\nDESCRIPTION: Command to build and run the application in a Docker container.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake dist image run\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Node.js Client SDK\nDESCRIPTION: Installs the Unleash client SDK package using npm package manager.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/nodejs.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install unleash-client\n```\n\n----------------------------------------\n\nTITLE: Template Rendering with Client\nDESCRIPTION: Updated template rendering to include Unleash client for feature flag checking\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nreturn render_template(\"surveys_list.html\", surveys=surveys, client=client)\n```\n\n----------------------------------------\n\nTITLE: Testing Enterprise Features\nDESCRIPTION: Commands to start the enterprise version of Unleash and run the end-to-end tests against it to verify feature compatibility.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run start:enterprise\nyarn run e2e\n```\n\n----------------------------------------\n\nTITLE: Context Field Created Event\nDESCRIPTION: This JSON snippet represents the event data generated when a context field is created in Unleash. It contains details like the context field's ID, type, creation timestamp, creator, and the field's configuration (name, description, legal values, stickiness). The `data` property encapsulates the configuration details.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27339,\n  \"type\": \"context-field-created\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"name\": \"new-context-field\",\n    \"description\": \"this context field is for describing events\",\n    \"legalValues\": [],\n    \"stickiness\": false\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null,\n  \"label\": \"Context field created\",\n  \"summary\": \"**user@getunleash.io** created context field **new-context-field**\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Rust Dependencies\nDESCRIPTION: Command to add HTTP and JSON dependencies (reqwest and serde) to a Rust project using cargo\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/rust-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add reqwest --features reqwest/blocking,reqwest/json serde serde_json\n```\n\n----------------------------------------\n\nTITLE: Setting up Rails Blog App\nDESCRIPTION: Shell commands to clone a basic Rails blog repository, install dependencies, set up the database, and run the server.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/implementing-feature-flags-rails.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/alvinometric/rails-basic-blog\ncd rails-basic-blog\nbundle install\nrails db:migrate\nrails db:seed\nrails server\n```\n\n----------------------------------------\n\nTITLE: Setting Self-Signed Certificates via Environment Variables in Unleash\nDESCRIPTION: This bash snippet shows how to set the database SSL configuration using environment variables. It includes the certificate content inline.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_SSL=\"{ \\\"rejectUnauthorized\\\": false, \\\"ca\\\": \\\"$(cat /path/to/server-certificates/root.crt)\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js and Unleash Dependencies\nDESCRIPTION: Commands to create a new Next.js project and install the Unleash package\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/nextjs/implementing-feature-flags-nextjs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app activity-app\ncd activity-app\nnpm install @unleash/nextjs\n```\n\n----------------------------------------\n\nTITLE: Running the .NET Application\nDESCRIPTION: Commands to run the .NET application. The first command runs the application normally, while the second uses hot reload to automatically restart on file changes.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/implementing-feature-flags-dotnet.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run\n```\n\nLANGUAGE: sh\nCODE:\n```\ndotnet watch --hotreload run\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Styles in TypeScript for Unleash Project\nDESCRIPTION: This snippet demonstrates how to create reusable style functions and objects in TypeScript for the Unleash project. It includes a themeable function for focusable elements and an object literal for flex row layout.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-styling-method.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Theme } from '@mui/material';\n\nexport const focusable = (theme: Theme) => ({\n    color: theme.palette.primary.main,\n});\n\nexport const flexRow = {\n    display: 'flex',\n    alignItems: 'center',\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling a Feature Flag via API - Shell\nDESCRIPTION: This snippet shows how to enable a feature flag for a specific environment using a POST request to the Unleash API. An API key is required for authorization.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L -X POST '<your-unleash-url>/api/admin/projects/:projectId/features/:featureName/environments/:environment/on' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: <API_KEY_VALUE>'\n```\n\n----------------------------------------\n\nTITLE: Making REST API Call in Ruby\nDESCRIPTION: Ruby code to make a REST API call to the Star Wars API and retrieve a list of planets.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/implementing-feature-flags-ruby.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'httpx'\nrequire 'json'\nrequire 'unleash'\n\n# Call the REST API\nresponse = HTTPX.get('https://swapi.py4e.com/api/planets/')\nplanets = JSON.parse(response.body)['results'].map do |planet|\n  { name: planet['name'], population: planet['population'] }\nend\n\nputs \"There are #{planets.length} planets\"\n```\n\n----------------------------------------\n\nTITLE: Tag Type Created Event\nDESCRIPTION: This JSON snippet represents the event data generated when a tag type is created in Unleash. It provides information such as the tag type's ID, type, creation timestamp, creator, and its configuration details (name, description). The `data` property holds the tag type's configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27343,\n  \"type\": \"tag-type-created\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"name\": \"new-tag-type\",\n    \"description\": \"event testing\"\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null,\n  \"label\": \"tag-type-created\",\n  \"summary\": \"**user@getunleash.io** triggered **tag-type-created**\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unleash Platform Login Credentials\nDESCRIPTION: Default login credentials for accessing the local Unleash instance\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUsername: admin\nPassword: unleash4all\n```\n\n----------------------------------------\n\nTITLE: Unleash SDK Installation Requirement\nDESCRIPTION: Python package requirement for Unleash SDK\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nUnleashClient==5.11.1\n```\n\n----------------------------------------\n\nTITLE: Triggering Admin Interface Sign-In Prompt with 401 Status - JSON\nDESCRIPTION: This snippet provides the JSON response required to prompt the admin interface to ask for login by sending a 401 status along with a 'message' and 'path'. The 'message' informs the user of the need to log in, and the 'path' indicates the URL for the login route. This is used in middleware configurations for access control in Unleash.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/securing-unleash.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"You must be logged in to use Unleash\",\n  \"path\": \"/custom/login\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash with Docker\nDESCRIPTION: Commands to download and run Unleash using Docker Compose\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/nextjs/implementing-feature-flags-nextjs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget getunleash.io/docker-compose.yml\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Dependencies\nDESCRIPTION: Command to install the required Ruby gems for the project.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/implementing-feature-flags-ruby.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngem install httpx unleash\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash SDK Dependencies\nDESCRIPTION: Command to install the required Unleash React proxy client packages using npm.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/react.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @unleash/proxy-client-react unleash-proxy-client\n```\n\n----------------------------------------\n\nTITLE: Implementing main App component in SvelteKit\nDESCRIPTION: Svelte component for the main application logic, including habit display and date formatting.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/sveltekit/implementing-feature-flags-sveltekit.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  // src/lib/App.svelte\n  import { format, addDays } from 'date-fns';\n  import Habit from '$lib/Habit.svelte';\n  import { habitStore } from '$lib/stores.js';\n  import AddHabit from '../lib/AddHabit.svelte';\n  let maxHabits = 2;\n\n  // go back 5 days\n  const dates = new Array(5).fill(0).map((_, i) => {\n    let today = new Date();\n    return addDays(today, -i);\n  });\n</script>\n\n<AddHabit {maxHabits} />\n\n<table>\n  <thead>\n    <tr>\n      <th>Habit</th>\n      {#each dates as date}\n        <th>{format(date, 'MMM do')}</th>\n      {/each}\n    </tr>\n  </thead>\n\n  <tbody>\n    {#each $habitStore as habit}\n      <Habit {habit} {dates} />\n    {/each}\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash with Docker\nDESCRIPTION: Commands to clone the Unleash repository and start it using Docker Compose\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Cloning Spring Boot Java Example Repository\nDESCRIPTION: Command to clone the sample Spring Boot Java application repository that will be used for the Unleash integration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:jecklgamis/spring-boot-java-example.git\n```\n\n----------------------------------------\n\nTITLE: Running Unleash Frontend with Sandbox API\nDESCRIPTION: Commands to set up and start the Unleash frontend using a remote sandbox API instance instead of running a local backend server.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ./frontend\nyarn install\nyarn run start:sandbox\n```\n\n----------------------------------------\n\nTITLE: Multi-Project API Token Example\nDESCRIPTION: Example of an API token with access to production environment across multiple projects\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/api-tokens-and-client-keys.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[]:production.be44368985f7fb3237c584ef86f3d6bdada42ddbd63a019d26955178\n```\n\n----------------------------------------\n\nTITLE: Docker Pull Command for Unleash Proxy\nDESCRIPTION: Command to pull the Unleash Proxy Docker image from Docker Hub.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-run-the-unleash-proxy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull unleashorg/unleash-proxy\n```\n\n----------------------------------------\n\nTITLE: Git Clone Command for Flask Surveys App\nDESCRIPTION: Command to clone the Flask Surveys Container application repository\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:nnennandukwe/flask-surveys-container-app.git\n```\n\n----------------------------------------\n\nTITLE: Structuring React Components in a Tree-like Folder Hierarchy\nDESCRIPTION: Example folder structure showing how React components should be organized hierarchically. Components are grouped with their related files in folders that mirror their relationship in the application, making navigation and maintenance easier.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-folder-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nProfilePage\n  ProfilePage.tsx\n  ProfilePage.styles.ts\n  ProfileSettings\n    ProfileSettings.tsx\n    ProfileSettings.styles.ts\n  ProfilePicture\n    ProfilePicture.tsx\n    ProfilePicture.styles.ts\n```\n\n----------------------------------------\n\nTITLE: Setting up Local Unleash Server with Docker\nDESCRIPTION: Commands to clone the Unleash repository and run it locally using Docker Compose. This sets up a local feature flag management server that will be accessible at http://localhost:4242.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/implementing-feature-flags-dotnet.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating index route in SvelteKit\nDESCRIPTION: Svelte component for the index route that includes the main App component.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/sveltekit/implementing-feature-flags-sveltekit.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  // src/routes/+page.svelte\n  import App from '../lib/App.svelte';\n</script>\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash locally using Docker\nDESCRIPTION: Commands to clone the Unleash repository and run it locally using Docker Compose.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/implementing-feature-flags-rust.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Corgi Website\nDESCRIPTION: HTML markup for a basic website displaying Corgi images and fun facts, including styling and script references.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/javascript/implementing-feature-flags-js.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Corgi Cuteness</title>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://cdn.simplecss.org/simple.min.css\"\n        />\n        <style>\n            :root {\n                --accent: #f4a261;\n                --border: #d9c3b8;\n            }\n\n            h1 {\n                color: var(--accent);\n            }\n\n            main {\n                padding: 1rem;\n                text-align: center;\n            }\n        </style>\n    </head>\n    <body>\n        <main>\n            <h1>🐾 Corgi Cuteness 🐾</h1>\n            <img id=\"corgi-img\" src=\"#\" alt=\"Adorable Corgi\" />\n            <p id=\"fun-fact\" class=\"notice\"></p>\n            <button id=\"new-corgi-btn\">Show Me Another Corgi!</button>\n        </main>\n\n        <script src=\"./index.js\"></script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Unleash Server Startup Import with Drop Command\nDESCRIPTION: Command line example showing how to start Unleash server with import configuration and drop existing data. Includes both the import file path and drop flag.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-import-export.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nunleash-server --databaseUrl [...] \\\n\t       --importFile configuration.yml \\\n\t       --dropBeforeImport\n```\n\n----------------------------------------\n\nTITLE: Project Settings API Call - Unleash 5.6\nDESCRIPTION: Updated curl command showing the project settings PUT request format in Unleash 5.6, introducing the new featureLimit field while maintaining backwards compatibility.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/POST-PUT-api-payload.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request PUT 'http://localhost:4242/api/admin/projects/default' \\\n--header 'Authorization: INSERT_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"id\": \"default\",\n  \"name\": \"Default\",\n  \"description\": \"Default project\",\n  \"defaultStickiness\": \"default\",\n  \"featureLimit\": 2\n}'\n```\n\n----------------------------------------\n\nTITLE: Starting Unleash Application and Running Tests\nDESCRIPTION: Commands to install dependencies, start Unleash in development mode, and run tests across all packages.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/backend/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n// Install dependencies\nyarn install\n\n// Start Unleash in development\nyarn dev\n\n// Unleash UI\nhttp://localhost:3000\n\n// API:\nhttp://localhost:3000/api/\n\n// Execute tests in all packages:\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Drop Tags Event\nDESCRIPTION: This JSON snippet represents the event data generated when existing tags are deleted as part of an import job in Unleash. The `data.name` property specifically contains the value `\"all-tags\"`. This signals the complete removal of tags during the import process.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27342,\n  \"type\": \"drop-tags\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"name\": \"all-tags\"\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null,\n  \"label\": \"drop-tags\",\n  \"summary\": \"**user@getunleash.io** triggered **drop-tags**\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Proxy Client SDK\nDESCRIPTION: Command to install the Unleash proxy client package via npm package manager.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/javascript.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install unleash-proxy-client\n```\n\n----------------------------------------\n\nTITLE: Importing useFlag Hook in React Component\nDESCRIPTION: This code snippet imports the useFlag hook from the Unleash React SDK, which is used to check the state of a feature flag within a component.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFlag } from \"@unleash/proxy-client-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash with Docker\nDESCRIPTION: Commands to clone the Unleash repository and run it using Docker Compose.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ruby/implementing-feature-flags-ruby.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-purpose Segment Store in TypeScript\nDESCRIPTION: This code snippet demonstrates a single SegmentStore class handling multiple responsibilities including CRUD operations, UI data retrieval, and cross-module queries. This approach leads to coupling and overloaded stores.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/write-model-vs-read-models.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SegmentStore {\n    // used to perform actions on segment\n    create(segment: Segment): Promise<Segment> {}\n    get(id: number): Promise<Segment> {}\n    update(id: number, segment: Segment): Promise<Segment> {}\n    delete(id: number): Promise<void> {}\n    \n    // used by UI\n    getAll(): Promise<SegmentWithUsageInfo[]> {}\n    \n    // used by another module checking existing names\n    getSegmentNames(): Promise<string[]> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Archiving a Feature Flag via API - Shell\nDESCRIPTION: This snippet shows how to archive a feature flag using a DELETE request to the Unleash API. An API key is required for authorization.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L -X DELETE '<your-unleash-url>/api/admin/projects/:projectId/features/:featureName' \\\n-H 'Authorization: <API_KEY_VALUE>'\n```\n\n----------------------------------------\n\nTITLE: Documenting Segment Creation Event Format in JSON\nDESCRIPTION: Example of a 'segment-created' event that's generated when a new segment is created. The data property contains the complete details of the newly created segment, including its constraints and metadata.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27346,\n  \"type\": \"segment-created\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"id\": 5,\n    \"name\": \"new segment\",\n    \"description\": \"this segment is for events\",\n    \"project\": \"development\",\n    \"constraints\": [\n      {\n        \"values\": [\"appA\", \"appB\", \"appC\"],\n        \"inverted\": false,\n        \"operator\": \"IN\",\n        \"contextName\": \"appName\",\n        \"caseInsensitive\": false\n      }\n    ],\n    \"createdBy\": \"user@getunleash.io\",\n    \"createdAt\": \"2024-10-03T11:09:53.225Z\"\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": \"development\",\n  \"environment\": null,\n  \"label\": \"Segment created\",\n  \"summary\": \"**user@getunleash.io** created segment **new segment**\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing and Releasing New Unleash Packages\nDESCRIPTION: Commands for testing, publishing, and performing a dry run of package publishing for Unleash.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/backend/overview.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n> yarn test\n\nRun `npm run publish` to start the publishing process.\n\n`npm run publish:dry`\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with nvm in Bash\nDESCRIPTION: Command to use nvm to install the correct version of Node.js for the Unleash project.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm use\n```\n\n----------------------------------------\n\nTITLE: Configuring Unleash Client\nDESCRIPTION: Java code to configure and initialize the Unleash client with application settings and API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n       UnleashConfig config = UnleashConfig.builder()\n               .appName(\"spring-boot-java-example\")\n               .instanceId(\"spring-boot-java-example\")\n               .unleashAPI(\"http://localhost:4242/api\")\n               .apiKey(\"<API_KEY>\")\n               .synchronousFetchOnInitialisation(true)\n               .build();\n\n       Unleash unleash = new DefaultUnleash(config);\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to copy environment variables file and set OpenAI API key.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/ai.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nOPENAI_API_KEY=sk-...\n```\n\n----------------------------------------\n\nTITLE: Importing VideoContent Component in React\nDESCRIPTION: This snippet demonstrates how to import the VideoContent component from the specified path. This component is necessary for displaying video content related to segment functionality within the Unleash documentation. The dependency is the '@site/src/components/VideoContent.jsx' module, which is part of the application's component structure.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/segments.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport VideoContent from '@site/src/components/VideoContent.jsx'\n```\n\n----------------------------------------\n\nTITLE: Unleash Login Credentials for Local Instance\nDESCRIPTION: Default username and password for logging into the local Unleash instance.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/implementing-feature-flags-golang.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsername: admin\nPassword: unleash4all\n```\n\n----------------------------------------\n\nTITLE: File Naming Convention Example in JavaScript/TypeScript\nDESCRIPTION: An example demonstrating the proper file naming convention where the kebab-case filename (feature-toggle-service.ts) directly corresponds to the PascalCase class name (FeatureToggleService) it contains.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/naming.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfeature-toggle-service.ts\n\nclass FeatureToggleService {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Go HTTP Request to REST Countries API\nDESCRIPTION: Initial Go code to retrieve country information from the REST Countries API. This code makes an HTTP GET request and parses the JSON response.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/implementing-feature-flags-golang.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"log\"\n    \"net/http\"\n)\n\ntype Country struct {\n    Name    string `json:\"name\"`\n    Capital string `json:\"capital\"`\n}\n\nfunc main() {\n    resp, err := http.Get(\"https://restcountries.com/v2/alpha/no\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer resp.Body.Close()\n\n    body, _ := io.ReadAll(resp.Body)\n    var country Country\n    json.Unmarshal(body, &country)\n\n    fmt.Printf(\"Country: %s, Capital: %s\\n\", country.Name, country.Capital)\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Data Fetching Approach in React Component\nDESCRIPTION: This code snippet shows the discouraged method of fetching data using useEffect in a React component. It's provided as a contrast to the recommended useSWR approach.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/preferred-data-fetching-method.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n    useEffect(() => {\n        const getData = () => {\n            fetch(API_URL)\n                .then(res => res.json())\n                .then(setData);\n        };\n        getData();\n    }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Run server.js with Node.js\nDESCRIPTION: This command executes the server.js file using Node.js, which in turn starts the Unleash server as configured in the file.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Unleash Login Credentials\nDESCRIPTION: Default credentials for logging into the local Unleash server. These are used to access the Unleash admin interface at http://localhost:4242.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/dotnet/implementing-feature-flags-dotnet.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsername: admin\nPassword: unleash4all\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Banner Configuration Options\nDESCRIPTION: Table defining the main configuration options for banners including type, icon, and message\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/banners.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Option      | Description                                                                                                                                  |\n| ----------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Type**    | The type of banner, which controls the banner's color and its icon, if using the default icon option.                                        |\n| **Icon**    | The icon displayed on the banner. This can be the default for the banner type, a [custom icon](#custom-icon), or hidden by selecting \"None\". |\n| **Message** | The banner's message. Supports [Markdown](https://www.markdownguide.org/basic-syntax/).                                                      |\n```\n\n----------------------------------------\n\nTITLE: Implementing individual Habit component in SvelteKit\nDESCRIPTION: Svelte component for displaying and toggling individual habits.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/sveltekit/implementing-feature-flags-sveltekit.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  // src/lib/Habit.svelte\n  import { habitStore } from '$lib/stores.js';\n  import { format } from 'date-fns';\n\n  export let habit;\n  export let dates;\n\n  function toggleDay(day) {\n    let updatedDays = [...habit.completedDays];\n\n    const index = updatedDays.indexOf(day);\n    if (index !== -1) {\n      updatedDays.splice(index, 1);\n    } else {\n      updatedDays.push(day);\n    }\n\n    habitStore.update((items) => {\n      return items.map((item) => {\n        if (item.id === habit.id) {\n          return { ...item, completedDays: updatedDays };\n        }\n        return item;\n      });\n    });\n  }\n</script>\n\n<tr>\n  <td>{habit.name}</td>\n\n  {#each dates as date}\n    <td>\n      <input\n        type=\"checkbox\"\n        on:click={() => toggleDay(date)}\n        checked={habit.completedDays.includes(date)}\n      />\n      {format(date, 'MMM do')}\n    </td>\n  {/each}\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Interface Naming Convention in JSX\nDESCRIPTION: Demonstrates the accepted pattern for naming interfaces in the Unleash codebase. Interfaces should be prefixed with 'I', and component props interfaces should follow the pattern 'IComponentNameProps'.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/interface-naming.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Do:\ninterface IMyInterface {}\ninterface IMyComponentNameProps {}\n\n// Don't:\ninterface MyInterface {}\ninterface MyComponentName {}\n```\n\n----------------------------------------\n\nTITLE: Running Django Development Server\nDESCRIPTION: Start the Django development server. This makes the blog application accessible at http://localhost:8000.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Nested Ternary Operator Example\nDESCRIPTION: Equivalent code using nested ternary operators, showing clearer code structure.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/jsx-conditionals.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n    {a ? (\n        b ? <p>This is bad</p> : null\n    ) : 'Should be refactored'}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cypress Real World App Repository\nDESCRIPTION: This command clones the Cypress Real World App repository from GitHub, which will be used as the base React application for the tutorial.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:cypress-io/cypress-realworld-app.git\n```\n\n----------------------------------------\n\nTITLE: Building Unleash Docker image with Buildx in Bash\nDESCRIPTION: Docker command to build a local Unleash image using Buildx.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build . -t unleash:local\n```\n\n----------------------------------------\n\nTITLE: Restoring Database Backup with psql - Bash\nDESCRIPTION: This snippet uses the psql command to restore a previously created backup of the Unleash database. It requires access to the same user and database settings used during the backup process.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/database-backup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql -U unleash_user -W -h localhost unleash < unleash-db.dump\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Course Banner Component\nDESCRIPTION: The CourseBanner component is rendered with props that define the target audience and a brief description of the course. This is aimed at beginners and provides an overview of the course's intent. The props include 'level' for the target audience and 'description' to summarize key learnings. This output will be shown on the course page under a dedicated banner section.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/foundational.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<CourseBanner level='beginners' description='Gain a baseline understanding of why to use Unleash in your development and a general introduction to CI/CD. An understanding of Unleash anatomy and architecture and how the different systems connect together.'/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Link Configuration\nDESCRIPTION: Table showing configuration options for banner links\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/banners.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Option   | Description                                               |\n| -------- | --------------------------------------------------------- |\n| **URL**  | The URL to open when the user uses the banner link.       |\n| **Text** | The text to display on the banner link.                   |\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Feature in Unleash\nDESCRIPTION: This code snippet illustrates how to set an environment variable to enable an experimental feature in a self-hosted Unleash instance. Ensure the feature is enabled by setting the 'UNLEASH_EXPERIMENTAL_NEW_FEATURE' variable to true in your configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/troubleshooting/feature-not-available.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUNLEASH_EXPERIMENTAL_NEW_FEATURE=true\n```\n\n----------------------------------------\n\nTITLE: Nested ConditionallyRender Example\nDESCRIPTION: Example showing how nested ConditionallyRender components can obscure code complexity.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/jsx-conditionals.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n    <ConditionallyRender\n        condition={Boolean(a)} \n        show={(\n            <ConditionallyRender\n                condition={Boolean(b)}\n                show={<p>This is bad</p>}\n            />\n        )}\n        elseShow={'Should be refactored'}\n    />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Chaining Cypress Commands with TypeScript\nDESCRIPTION: Demonstrates how to chain multiple Cypress commands using TypeScript, showing the pattern for adding, updating, and deleting a gradual rollout strategy. Uses promise chaining to handle sequential operations and pass strategy ID between commands.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/cypress/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nit('can add, update and delete a gradual rollout strategy to the development environment', async () => {\n    cy.addFlexibleRolloutStrategyToFeature_UI({\n        featureToggleName,\n    }).then(value => {\n        strategyId = value;\n        cy.updateFlexibleRolloutStrategy_UI(featureToggleName, strategyId).then(\n            () => cy.deleteFeatureStrategy_UI(featureToggleName, strategyId)\n        );\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Violating Domain-Infrastructure Separation in TypeScript\nDESCRIPTION: Example showing problematic direct usage of OpenAPI schema types in domain store interface\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/correct-type-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstore.createUser(user: CreateUserSchema): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Using Tabs and TabItem Components in React\nDESCRIPTION: This code snippet demonstrates the use of Tabs and TabItem components to create a tabbed interface for course selection in the Unleash Academy, allowing users to navigate based on their persona. It requires the @theme library for proper functioning.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/academy.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs>\n  <TabItem value=\"Developer\" label=\"Developer\" default>\n<ol>\n<li><a href=\"foundational\"><strong>Foundational</strong></a> (75min)  </li>\n<li><a href=\"advanced-for-devs\"><strong>Advanced for Developers</strong></a> (45min)</li>\n</ol>\n  </TabItem>\n  <TabItem value=\"DevOps / Admin\" label=\"DevOps / Admin\">\n<ol>\n<li><a href=\"foundational\"><strong>Foundational</strong></a> (75min)  </li>\n<li><a href=\"managing-unleash-for-devops\"><strong>Managing Unleash for DevOps/Admins</strong></a> (45min)</li>\n</ol>\n  </TabItem>\n  <TabItem value=\"Product Owner\" label=\"Product Owner\">\n<ol>\n<li><a href=\"foundational\"><strong>Foundational</strong></a> (75min)  </li>\n</ol>\n  </TabItem>\n  <TabItem value=\"People Leader\" label=\"People Leader\">\n<ol>\n<li><a href=\"foundational\"><strong>Foundational</strong></a> (75min)  </li>\n</ol>\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Content Component\nDESCRIPTION: This snippet embeds a video player that displays a series of instructional videos from YouTube. The 'VideoContent' component takes a 'videoUrls' prop that includes the URL for the video series. It's designed to facilitate the viewing of course-related videos on the Unleash Academy page, enhancing engagement and learning outcomes. The expected input is an array of video URLs, while the output is an embedded video player.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/foundational.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<VideoContent videoUrls={['https://www.youtube.com/embed/videoseries?si=YyLiIYQck7fsG5HK&amp;list=PLcVJ5JY19ncU_6cq2QaCuXDBbbitiJEn4']}/>\n```\n\n----------------------------------------\n\nTITLE: Use LearningLinks React Component in MDX\nDESCRIPTION: This MDX code uses the `LearningLinks` React component. This component likely renders a list of links to other courses or relevant resources.  It is used to display all of the Unleash courses that are available.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/advanced-for-devs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<LearningLinks />\n```\n\n----------------------------------------\n\nTITLE: Basic API Token Format Structure\nDESCRIPTION: Shows the general format of API tokens with project information, environment, and hash components\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/api-tokens-and-client-keys.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{projects}}:{{environment}}.{{hash}}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Sticky Banner Configuration\nDESCRIPTION: Table showing sticky banner configuration options\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/banners.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Option     | Description                                                |\n| ---------- | ---------------------------------------------------------- |\n| **Sticky** | Whether the banner is sticky on the screen when scrolling. |\n```\n\n----------------------------------------\n\nTITLE: markSeenAt Method with ERROR-level Logging in account-store TypeScript File\nDESCRIPTION: This snippet shows another example of a method using ERROR-level logging for a non-critical operation failure. The method attempts to update the 'seen_at' timestamp for personal access tokens but logs at ERROR level if it fails.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/overarching/logging-levels.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync markSeenAt(secrets: string[]): Promise<void> {\n        const now = new Date();\n        try {\n            await this.db('personal_access_tokens')\n                .whereIn('secret', secrets)\n                .update({ seen_at: now });\n        } catch (err) {\n            this.logger.error('Could not update lastSeen, error: ', err);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Analyzing Bundle Size\nDESCRIPTION: Command to visualize and analyze the frontend bundle size, which is useful for performance optimization and identifying large dependencies.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx vite-bundle-visualizer\n```\n\n----------------------------------------\n\nTITLE: Drop Strategies Event\nDESCRIPTION: This JSON snippet represents the event data generated when existing strategies are deleted as part of an import job in Unleash. The `data.name` property is specifically set to `\"all-strategies\"`. This event signals a wholesale removal of strategies during an import process.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27338,\n  \"type\": \"drop-strategies\",\n  \"createdBy\": \"import-API-token\",\n  \"createdAt\": \"2022-06-03T11:30:40.579Z\",\n  \"data\": {\n    \"name\": \"all-strategies\"\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Error Logging Pattern in TypeScript\nDESCRIPTION: The recommended approach passes the error object as a separate argument to the logger, which preserves the complete stack trace and context information.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/overarching/logging.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction errors() {\n    try {\n    } catch (e) {\n        this.logger.error('Something went wrong', e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Unleash with Docker network in Bash\nDESCRIPTION: Docker command to start the Unleash container on the Unleash network.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 4242:4242 \\\n  -e DATABASE_HOST=postgres -e DATABASE_NAME=unleash \\\n  -e DATABASE_USERNAME=unleash_user -e DATABASE_PASSWORD=password \\\n  -e DATABASE_SSL=false \\\n  --network unleash unleash:local\n```\n\n----------------------------------------\n\nTITLE: Reading SSL Certificates from Filesystem with Bash for Unleash\nDESCRIPTION: Example showing how to read SSL certificate files using bash and include them in the DATABASE_SSL environment variable. This approach is used when configuring Unleash via environment variables.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/configuring-unleash.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_SSL=\"{ \\\"ca\\\": \\\"$(cat /path/to/server-certificates/root.crt)\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Django Blog Application\nDESCRIPTION: Clone a basic Django blog repository, set up a virtual environment, and install Django. This provides a starting point for implementing feature flags.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/alvinometric/django-basic-blog\ncd django-basic-blog\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI Icons in React\nDESCRIPTION: Import statement for Material UI icons including the new Announcement icon\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    Menu as MenuIcon,\n    Notifications as NotificationsIcon,\n    Announcement as AnnouncementsIcon,\n    AttachMoney as AttachMoneyIcon,\n} from \"@material-ui/icons\";\n```\n\n----------------------------------------\n\nTITLE: Personal Access Token Example\nDESCRIPTION: Example of a personal access token format\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/api-tokens-and-client-keys.mdx#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nuser:be7536c3a160ff15e3a92da45de531dd54bc1ae15d8455c0476f086b\n```\n\n----------------------------------------\n\nTITLE: Default Markdown Event Template\nDESCRIPTION: Default markdown template used by Unleash when no custom body template is specified.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/integrations/datadog.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nusername created feature flag (featurename)[http://your.url/projects/projectname/features/featurename] in project *projectname*\n```\n\n----------------------------------------\n\nTITLE: Previous Error Logging Pattern in TypeScript\nDESCRIPTION: The previous error logging pattern that used string interpolation to include error information, which doesn't preserve the stack trace.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/overarching/logging.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction errors() {\n    try {\n    } catch (e) {\n        this.logger.error(`Something went wrong {$e}`);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Project Change Event Example in JSON\nDESCRIPTION: Example of a feature-project-change event showing the data structure when a feature flag is moved between projects.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27332,\n  \"type\": \"feature-project-change\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"newProject\": \"test-project\",\n    \"oldProject\": \"old-test-project\"\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": \"test-flag\",\n  \"project\": \"test-project\",\n  \"environment\": null,\n  \"label\": \"Flag moved to a new project\",\n  \"summary\": \"**user@getunleash.io** moved **test-flag** from ... \"\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Tag Event Example in JSON\nDESCRIPTION: Example of a feature-tagged event showing the structure when a tag is added to a feature flag.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27333,\n  \"type\": \"feature-tagged\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"type\": \"simple\",\n    \"value\": \"tag2\"\n  },\n  \"preData\": null,\n  \"tags\": [\n    {\n      \"type\": \"simple\",\n      \"value\": \"tag2\"\n    }\n  ],\n  \"featureName\": \"test-flag\",\n  \"project\": \"test-project\",\n  \"environment\": null,\n  \"label\": \"Flag tagged\",\n  \"summary\": \"**user@getunleash.io** tagged **test-flag** with ... \"\n}\n```\n\n----------------------------------------\n\nTITLE: Import React Components for Documentation\nDESCRIPTION: This JavaScript code snippet imports React components used within the documentation. It imports `VideoContent`, `CourseBanner`, and `LearningLinks` components from their respective file paths, enabling their use in rendering dynamic content within the documentation pages.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/advanced-for-devs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport VideoContent from '@site/src/components/VideoContent.jsx'\nimport CourseBanner from '@site/src/components/unleash-academy/CourseBanner.jsx'\nimport LearningLinks from '@site/src/components/unleash-academy/Links.jsx'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Project with Dependencies\nDESCRIPTION: Commands to create a new Go project and install the Unleash client dependency.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/implementing-feature-flags-golang.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir unleash-go\ncd unleash-go\ngo mod init unleash-demo\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Unleash/unleash-client-go/v4\n```\n\n----------------------------------------\n\nTITLE: Pushing new version tag for Unleash release in Bash\nDESCRIPTION: Git command to push the new version tag to the remote repository.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin main --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Handling Email Configuration Warning in Bash\nDESCRIPTION: This snippet outlines a warning log message that occurs when email configuration is lacking in the Unleash user controller.\nIt informs about the absence of necessary configurations for sending emails.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/email-service.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[2021-05-07T12:59:04.572] [WARN] routes/user-controller.ts - email\\nwas not sent to the user because email configuration is lacking\n```\n\n----------------------------------------\n\nTITLE: Rendering Learning Links Component in React\nDESCRIPTION: This snippet imports and renders the LearningLinks component, which provides links to various learning resources in the Unleash Academy. Dependencies include React and the specified component file path.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/academy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport LearningLinks from '@site/src/components/unleash-academy/Links.jsx'\n\n<LearningLinks />\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Page Template\nDESCRIPTION: Example of a markdown documentation page with front matter for configuring page metadata and title\nSOURCE: https://github.com/unleash/unleash/blob/main/website/static/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: page-needs-edit\ntitle: This Doc Needs To Be Edited\n---\n\nEdit me...\n```\n\n----------------------------------------\n\nTITLE: Feature Tag Import Event Example in JSON\nDESCRIPTION: Example of a feature-tag-import event showing the structure when a tagged feature is imported.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27334,\n  \"type\": \"feature-tag-import\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"featureName\": \"new-feature\",\n    \"tag\": {\n      \"type\": \"simple\",\n      \"value\": \"tag1\"\n    }\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null,\n  \"label\": null,\n  \"summary\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Proxy Client for Vue\nDESCRIPTION: Command to install the Unleash proxy client SDK for Vue.js using npm.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/vue.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @unleash/proxy-client-vue\n```\n\n----------------------------------------\n\nTITLE: Cleaning Dependencies and Caches\nDESCRIPTION: Commands to clean up node modules, Docusaurus cache, API docs, and yarn lock file for fresh dependency installation.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nrm -rf node_modules\nrm -rf .docusaurus\nrm -rf docs/reference/api/unleash\nrm -rf yarn.lock\ntouch yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Creating Docker network for Unleash in Bash\nDESCRIPTION: Docker command to create a network for Unleash containers.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create unleash\n```\n\n----------------------------------------\n\nTITLE: Navigation Bar Configuration in Docusaurus\nDESCRIPTION: JavaScript configuration for adding links to documentation, custom pages, and external resources in the site's top navigation bar\nSOURCE: https://github.com/unleash/unleash/blob/main/website/static/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  headerLinks: [\n    ...\n    { doc: 'my-examples', label: 'Examples' },\n    { page: 'help', label: 'Help' },\n    { href: 'https://github.com/facebook/Docusaurus', label: 'GitHub' },\n    ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Unleash Locally with Docker\nDESCRIPTION: Commands to clone the Unleash repository and start a local instance using Docker Compose.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/golang/implementing-feature-flags-golang.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres for Unleash with Docker network in Bash\nDESCRIPTION: Docker command to start a Postgres container on the Unleash network.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e POSTGRES_PASSWORD=password \\\n  -e POSTGRES_USER=unleash_user -e POSTGRES_DB=unleash \\\n  --network unleash --name postgres postgres\n```\n\n----------------------------------------\n\nTITLE: Default Unleash Login Credentials\nDESCRIPTION: Default login credentials for accessing the local Unleash instance\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/implementing-feature-flags-ios.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsername: admin\nPassword: unleash4all\n```\n\n----------------------------------------\n\nTITLE: Project Settings API Call - Unleash 5.3\nDESCRIPTION: Example curl command demonstrating the project settings PUT request format in Unleash 5.3, showing the basic payload structure without the featureLimit field.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/back-end/POST-PUT-api-payload.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request PUT 'http://localhost:4242/api/admin/projects/default' \\\n--header 'Authorization: INSERT_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"id\": \"default\",\n  \"name\": \"Default\",\n  \"description\": \"Default project\",\n  \"defaultStickiness\": \"default\",\n  \"mode\": \"open\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Root Roles Documentation in Markdown\nDESCRIPTION: Documentation showing the process of creating and assigning custom root roles in Unleash Enterprise version 5.4+. Includes steps for navigating the admin UI, creating new root roles, and assigning permissions.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-create-and-assign-custom-root-roles.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: How to create and assign custom root roles\n---\n\n:::note Availability\n\n**Plan**: [Enterprise](https://www.getunleash.io/pricing) | **Version**: `5.4+`\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Drop Features Event Example in JSON\nDESCRIPTION: Example of a drop-features event showing the structure when features are deleted during an import job.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/events.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 27336,\n  \"type\": \"drop-features\",\n  \"createdBy\": \"user@getunleash.io\",\n  \"createdAt\": \"2024-10-03T11:09:53.225Z\",\n  \"createdByUserId\": 110,\n  \"data\": {\n    \"name\": \"all-features\"\n  },\n  \"preData\": null,\n  \"tags\": [],\n  \"featureName\": null,\n  \"project\": null,\n  \"environment\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Unleash Login Credentials\nDESCRIPTION: Default login credentials for accessing the local Unleash instance\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUsername: admin\nPassword: unleash4all\n```\n\n----------------------------------------\n\nTITLE: Fixing Chalk Error in macOS sed\nDESCRIPTION: MacOS sed command to remove chalk references from serverEntry.js.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsed -i '' 's/chalk\\(\\w\\|\\.\\)\\+//g' node_modules/@docusaurus/core/lib/client/serverEntry.js\n```\n\n----------------------------------------\n\nTITLE: Installing iOS App Dependencies\nDESCRIPTION: Command to install the required dependencies using CocoaPods\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/implementing-feature-flags-ios.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Starting Unleash development server with Yarn in Bash\nDESCRIPTION: Command to start the Unleash development server using Yarn.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Fixing Chalk Error in GNU sed\nDESCRIPTION: GNU sed command to remove chalk references from serverEntry.js.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/README.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's/chalk\\(\\w\\|\\.\\)\\+//g' node_modules/@docusaurus/core/lib/client/serverEntry.js\n```\n\n----------------------------------------\n\nTITLE: Legacy API Token Format\nDESCRIPTION: Example of an API token format for Unleash v4.3 or earlier versions\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/api-tokens-and-client-keys.mdx#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nbe44368985f7fb3237c584ef86f3d6bdada42ddbd63a019d26955178\n```\n\n----------------------------------------\n\nTITLE: Customizing Datadog Event Body Template\nDESCRIPTION: Mustache template example for customizing the event payload sent to Datadog, including event type, creator, feature toggle name, and timestamp.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/integrations/datadog.md#2025-04-21_snippet_1\n\nLANGUAGE: mustache\nCODE:\n```\n{\n  \"event\": \"{{event.type}}\",\n  \"createdBy\": \"{{event.createdBy}}\",\n  \"featureToggle\": \"{{event.data.name}}\",\n  \"timestamp\": \"{{event.data.createdAt}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unleash PostgreSQL Databases\nDESCRIPTION: SQL commands to create a user, databases, and set permissions for Unleash in PostgreSQL. It creates both the main and test databases.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/backend/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ psql postgres <<SQL\nCREATE USER unleash_user WITH PASSWORD 'password';\nALTER USER unleash_user CREATEDB;\nCREATE DATABASE unleash WITH OWNER unleash_user;\nCREATE DATABASE unleash_test WITH OWNER unleash_user;\nALTER DATABASE unleash_test SET timezone TO 'UTC';\nSQL\n```\n\n----------------------------------------\n\nTITLE: Restarting Postgres container for Unleash in Bash\nDESCRIPTION: Docker command to restart an existing Postgres container for Unleash development.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker start postgres\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Setup\nDESCRIPTION: Environment variables configuration for Flask application including database credentials\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nFLASK_DEBUG=True\nDBHOST=db\nDBNAME=postgres\nDBUSER=app_user\nDBPASS=app_password\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment and Installing Django\nDESCRIPTION: Create a Python virtual environment and install Django. This isolates the project dependencies and prepares the environment for development.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install django\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Docusaurus Website\nDESCRIPTION: Command to start the local development server for the Unleash documentation website\nSOURCE: https://github.com/unleash/unleash/blob/main/website/static/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Start the site\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Strategy Parameter Types Table in Markdown\nDESCRIPTION: A table showing the different parameter types available for custom activation strategies, including their code representation, example values, and corresponding UI controls.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/custom-activation-strategies.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| type name | code representation | example value | UI control |\n| --- | --- | --- | --- |\n| string | `string` | `\"a string\"` | A standard input field |\n| percentage | a `string` representing a number between 0 and 100 (inclusive) | `\"99\"` | A value slider |\n| list | `string` (values are comma-separated) | `\"one,two\"` | A multi-input text field |\n| number | `string` | `\"123\"` | A numeric text field |\n| boolean | a `string`: one of `\"true\"` or `\"false\"` | `\"true\"` | An on/off toggle |\n```\n\n----------------------------------------\n\nTITLE: Cloning Feature Flags AI Repository\nDESCRIPTION: Command to clone the example repository containing the feature flags AI implementation.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/ai.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/alvinometric/feature-flags-ai\ncd feature-flags-ai\n```\n\n----------------------------------------\n\nTITLE: Loading Initial Data for Django Blog\nDESCRIPTION: Seed the SQLite database with initial blog post data. This populates the blog with content for testing the feature flag functionality.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py loaddata initial_data.json\n```\n\n----------------------------------------\n\nTITLE: Cloning Open Meteo iOS App\nDESCRIPTION: Command to clone the example Open Meteo weather application repository\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/ios/implementing-feature-flags-ios.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:ighiba/open-meteo.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Banner Status Configuration\nDESCRIPTION: Table showing banner status options and their descriptions\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/banners.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Option      | Description                                                                      |\n| ----------- | -------------------------------------------------------------------------------- |\n| **Enabled** | Whether the banner is currently displayed to all users of your Unleash instance. |\n```\n\n----------------------------------------\n\nTITLE: Previous ERROR-level Logging for Traffic Data Usage Failures in TypeScript\nDESCRIPTION: This snippet shows the previous implementation where failures to save traffic data usage were logged at ERROR level, which could trigger unnecessary SRE alerts for self-healing issues.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/overarching/logging-levels.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait Promise.all(promises)\n            .then(() => {\n                this.logger.debug('Traffic data usage saved');\n            })\n            .catch((err) => {\n                this.logger.error('Failed to save traffic data usage', err);\n            });\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Globally\nDESCRIPTION: This command installs Yarn globally on the system, which is required to run the Cypress Real World App.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install yarn@latest -g\n```\n\n----------------------------------------\n\nTITLE: Creating a global store for habits\nDESCRIPTION: JavaScript code to create a Svelte writable store that will contain the habits and their completion dates.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/sveltekit/implementing-feature-flags-sveltekit.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/lib/stores.js\nimport { writable } from \"svelte/store\";\n\nexport const habitStore = writable([\n    {\n        id: 1,\n        name: \"Walk 10k steps\",\n        completedDays: [],\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash React SDK\nDESCRIPTION: This command installs the Unleash React SDK and its dependencies in the project.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unleash/proxy-client-react unleash-proxy-client\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component\nDESCRIPTION: Import statement for the DocCardList component used in the documentation page.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/integrations/integrations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: X509 Certificate XML Structure\nDESCRIPTION: Example structure showing the X509Certificate XML tag containing the SAML certificate data that needs to be extracted for configuration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-add-sso-azure-saml.mdx#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<X509Certificate>Certificate_Data_Here</X509Certificate>\n```\n\n----------------------------------------\n\nTITLE: Running Unleash Frontend with Local API\nDESCRIPTION: Commands to install dependencies and start the Unleash frontend development server alongside a local backend instance. This runs the frontend on port 3000 and the backend on port 4242.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: TypeScript Issues with ConditionallyRender\nDESCRIPTION: Demonstration of TypeScript type checking issues when using the ConditionallyRender component with optional props.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/jsx-conditionals.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { FC } from 'react';\nimport { ConditionallyRender } from 'component/common/ConditionallyRender/ConditionallyRender';\n\nconst SubComponent: FC<{ text: string }> = ({ text }) => <>{text}</>;\n\nexport const Test: FC<{ maybeString?: string }> = ({ maybeString }) => (\n    <ConditionallyRender\n        condition={maybeString}\n        // ❌ TS Error: Type 'string | undefined' is not assignable to type 'boolean'\n        // You have to use `Boolean(maybeString)`\n\n        show={<SubComponent text={maybeString} />}\n        // ❌ TS Error: Type 'string | undefined' is not assignable to type 'string'\n        // you have to use `maybeString!` here\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Content in React/JSX\nDESCRIPTION: React component for embedding YouTube video using VideoContent with video URL configuration\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/change-requests.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<VideoContent videoUrls={[\"https://www.youtube.com/embed/ENUqFVcdr-w\"]}/>\n```\n\n----------------------------------------\n\nTITLE: Creating a new Rust project and adding dependencies\nDESCRIPTION: Commands to create a new Rust project and add required dependencies for image processing and Unleash integration.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rust/implementing-feature-flags-rust.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo new rust-ff-tutorial\ncargo add image webp\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Client\nDESCRIPTION: Commands to regenerate the OpenAPI client from the backend's OpenAPI specification, clean up unnecessary API files, and modify the exports. This is required when there are changes to the backend API.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn gen:api\nrm -rf src/openapi/apis\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content in the build directory for production deployment.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests Against Local Instance\nDESCRIPTION: Command to run end-to-end tests against a local Unleash server instance when testing patches to the local server.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run e2e\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that provides live preview of documentation changes.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Deprecated API Error Message Structure in v4\nDESCRIPTION: Example of the previous error message structure in Unleash v4, which was changed in later versions to provide more human-friendly messages\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/deploy/upgrading-unleash.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Request validation failed\",\n  \"validation\": [\n    {\n      \"keyword\": \"type\",\n      \"dataPath\": \".body.parameters\",\n      \"schemaPath\": \"#/components/schemas/addonCreateUpdateSchema/properties/parameters/type\",\n      \"params\": {\n        \"type\": \"object\"\n      },\n      \"message\": \"should be object\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Feature Flag in Rails Controller\nDESCRIPTION: Modifying the index method in the PostsController to use a static boolean flag for restricting the number of posts displayed.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/implementing-feature-flags-rails.md#2025-04-21_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n  # GET /posts or /posts.json\n  def index\n    is_top3 = true\n    @posts = is_top3 ? Post.order(created_at: :desc).limit(3) : Post.all\n  end\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests Against Heroku\nDESCRIPTION: Command to execute Cypress end-to-end tests against the Heroku-deployed version of Unleash, which is the recommended approach for testing before submitting a PR.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run e2e:heroku\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm\nDESCRIPTION: Command to install all required dependencies for the Unleash documentation website using npm package manager\nSOURCE: https://github.com/unleash/unleash/blob/main/website/static/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install dependencies\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Audit Log Entry Example in JSON\nDESCRIPTION: This JSON snippet represents an example audit log entry from Unleash. It includes a timestamp, user details, the action performed (feature flag update), details about the change (flag name, previous/new state, environment), and the source IP address. This log format facilitates integration with enterprise reporting and analytics tools.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/user-management-access-controls.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"timestamp\": \"2024-03-15T14:22:11Z\",\n    \"user\": {\n        \"id\": \"user-123\",\n        \"email\": \"jane.developer@company.com\"\n    },\n    \"action\": \"feature_flag_updated\",\n    \"details\": {\n        \"flag_name\": \"payment-gateway-experiment\",\n        \"previous_state\": \"enabled\",\n        \"new_state\": \"disabled\",\n        \"environment\": \"production\"\n    },\n    \"source_ip\": \"192.168.1.100\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres database for Unleash with Docker in Bash\nDESCRIPTION: Docker command to start a Postgres database container with the required configuration for Unleash development.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    -e POSTGRES_USER=unleash_user \\\n    -e POSTGRES_PASSWORD=password \\\n    -e POSTGRES_DB=unleash \\\n    --name postgres \\\n    -p 5432:5432 \\\n    -d \\\n    postgres\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Dialog Configuration\nDESCRIPTION: Table describing dialog configuration options for banner interactions\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/banners.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Option             | Description                                                                                             |\n| ------------------ | ------------------------------------------------------------------------------------------------------- |\n| **Text**           | The text to display on the banner link.                                                                 |\n| **Dialog title**   | The title to display on the dialog.                                                                     |\n| **Dialog content** | The content to display on the dialog. Supports [Markdown](https://www.markdownguide.org/basic-syntax/). |\n```\n\n----------------------------------------\n\nTITLE: Info MDX Block about Embedded Player\nDESCRIPTION: This is a Markdown extension using :::info syntax to explain the features and controls available within the embedded video player.  It informs users how to navigate the playlist, view progress, and access other viewing options.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/advanced-for-devs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n:::info Embedded Player\nThe full course is shown above.\nClick the icon in the top right corner of the embedded player to view your progress as you work through the videos.\nOptions to go full screen, view the playlist on YouTube or share are also enabled.\n:::\n```\n\n----------------------------------------\n\nTITLE: Displaying a Video using the VideoContent Component\nDESCRIPTION: This snippet showcases the usage of the previously imported VideoContent component to display a video embedded from YouTube. The video URL is passed as a prop in an array format, enabling the inclusion of multiple video URLs if desired. The expected input is an array of video URLs, and the output is the rendered video player on the page.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/segments.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<VideoContent videoUrls={['https://www.youtube.com/embed/LWMCCFcRic0']}/>\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies with Yarn in Bash\nDESCRIPTION: Command to install all required packages for the Unleash project using Yarn package manager.\nSOURCE: https://github.com/unleash/unleash/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Import Components JavaScript\nDESCRIPTION: This snippet imports the Content and Cards components from a specified path within the project. These components are used to render parts of the homepage for the Unleash documentation. No external dependencies are required other than the local project structure.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/welcome.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Content, Cards } from \"@site/src/components/Homepage/\";\n```\n\n----------------------------------------\n\nTITLE: Unleash Credentials for Local Instance\nDESCRIPTION: Default login credentials for the local Unleash instance. These are used to access the Unleash UI at http://localhost:4242.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/django/implementing-feature-flags-django.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUsername: admin\nPassword: unleash4all\n```\n\n----------------------------------------\n\nTITLE: Use VideoContent React Component in MDX\nDESCRIPTION: This MDX code utilizes the `VideoContent` React component to embed a YouTube playlist. It sets the `videoUrls` property to the URL of the playlist, enabling users to watch the course videos directly within the documentation.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/advanced-for-devs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<VideoContent videoUrls={[\"https://www.youtube.com/embed/videoseries?si=ry507OKlfb1liKFD&amp;list=PLcVJ5JY19ncXmAbFqfamyAV698WINtQaJ\"]}/>\n```\n\n----------------------------------------\n\nTITLE: Importing Course Components with React\nDESCRIPTION: This snippet imports essential React components needed for the Unleash Academy course page. The components imported include 'VideoContent' for embedding video content, 'CourseBanner' for displaying course information, and 'LearningLinks' for providing navigation links. The expected input is the respective component paths, and the output is a set of React components ready for use in JSX.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/foundational.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport VideoContent from '@site/src/components/VideoContent.jsx'\nimport CourseBanner from '@site/src/components/unleash-academy/CourseBanner.jsx'\nimport LearningLinks from '@site/src/components/unleash-academy/Links.jsx'\n```\n\n----------------------------------------\n\nTITLE: Safe Boolean Conversion Examples\nDESCRIPTION: Examples of safely converting values to boolean for conditional rendering.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/ADRs/front-end/jsx-conditionals.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n{Boolean(NaN) && <p>❔</p>}  // Won't render anything\n{!!0 && <p>❔</p>}           // Also safe\n```\n\n----------------------------------------\n\nTITLE: Info MDX Block\nDESCRIPTION: This is a Markdown extension using :::info syntax to highlight a block of informational text within the documentation. It emphasizes that this Unleash Academy course is intended for developers with prior foundational knowledge.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/advanced-for-devs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::info\n**This Unleash Academy course is for all developer roles working with Unleash, after Foundational content has been reviewed.**\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing VideoContent Component in React\nDESCRIPTION: This snippet imports a 'VideoContent' component from a specific path into a React application. It is a part of the component import strategy used for enhancing the video handling capabilities within the application.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/topics/feature-flags/feature-flag-best-practices.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport VideoContent from '@site/src/components/VideoContent.jsx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Banner Component in React\nDESCRIPTION: This snippet imports and renders the Banner component to display a promotional banner for the Unleash Academy. It is part of a larger React application and requires React and the @theme library as dependencies.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/academy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Banner from '@site/src/components/unleash-academy/Banner.jsx'\n\n<Banner/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-Based Constraint Strategy via API\nDESCRIPTION: API request to update a feature flag strategy with a time-based constraint. Sets up a datetime-based strategy constraint for the 'newNotificationsBadge' feature with a 50% rollout.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/examples.md#2025-04-21_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'http://localhost:4242/api/admin/projects/default/features/newNotificationsBadge/environments/development/strategies/806ebcbd-bb03-4713-8081-7dca3905e612' \\\n    --header 'Authorization: INSERT_API_KEY' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '{\n  \"name\": \"flexibleRollout\",\n  \"title\": \"\",\n  \"constraints\": [\n    {\n      \"value\": \"2024-02-27T17:00:00.000Z\",\n      \"values\": [],\n      \"inverted\": false,\n      \"operator\": \"DATE_BEFORE\",\n      \"contextName\": \"currentTime\",\n      \"caseInsensitive\": false\n    }\n  ],\n  \"parameters\": {\n    \"rollout\": \"50\",\n    \"stickiness\": \"default\",\n    \"groupId\": \"newNotificationsBadge\"\n  },\n  \"variants\": [],\n  \"segments\": [],\n  \"disabled\": false\n}'\n```\n\n----------------------------------------\n\nTITLE: Fixing Chalk Error in Emacs\nDESCRIPTION: Emacs evil-ex command to remove chalk references from serverEntry.js to resolve formatting errors.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/README.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n%s/chalk\\(\\w\\|\\.\\)+//g\n```\n\n----------------------------------------\n\nTITLE: Sidebar Configuration in Docusaurus\nDESCRIPTION: JSON configuration for adding a new documentation page to an existing sidebar category in the Unleash documentation\nSOURCE: https://github.com/unleash/unleash/blob/main/website/static/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"docs\": {\n    \"Getting Started\": [\n      \"quick-start\",\n      \"newly-created-doc\"\n    ],\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying User in Posthog Analytics\nDESCRIPTION: Sets up user identification in Posthog to correlate event data with specific users.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-capture-impression-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nposthog.identify(userId);\n```\n\n----------------------------------------\n\nTITLE: Render Components JavaScript\nDESCRIPTION: The code snippet is responsible for rendering the Content and Cards components within the main structure of the homepage. It ensures these components are mounted and displayed correctly as part of the documentation site.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/welcome.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Content />\n\n<Cards />\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Products Page\nDESCRIPTION: Defines the HTML template for the products page using Thymeleaf templating engine, which will display the content based on the active service implementation.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html\n    xmlns:th=\"https://www.thymeleaf.org\"\n    th:replace=\"~{fragments/layout :: layout (~{::body},'products')}\"\n>\n    <body>\n        <h2>Clinic Products</h2>\n        <div th:text=\"${petProductsPage}\"></div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Verifying CORS Headers with curl\nDESCRIPTION: This snippet demonstrates how to use the curl command to inspect the HTTP headers of an Unleash endpoint. It is used to verify that the Access-Control-Allow-Origin header is present and configured correctly, which is essential for resolving CORS errors. Replace <host> and <endpoint> with the actual values.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/using-unleash/troubleshooting/cors.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"curl -I https://<host>/<endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table of Unleash Users\nDESCRIPTION: This markdown snippet creates a table with two columns: 'Company' and 'Website'. It lists various companies that use Unleash, along with their corresponding website URLs.\nSOURCE: https://github.com/unleash/unleash/blob/main/USERS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Company                                     | Website                        |\n|---------------------------------------------|--------------------------------|\n| 1Password                                   | https://1password.com/         |\n| Allianz                                     | https://www.allianz.com/       |\n| Amedia                                      | https://www.amedia.no/         |\n| Deutsche Telekom                            | https://www.telekom.com/       |\n| Docker                                      | https://www.docker.com/        |\n| FINN.no                                     | https://www.finn.no/           |\n| H-E-B                                       | https://www.heb.com/           |\n| Interflora                                  | https://www.interflora.co.uk/  |\n| Medidata                                    | https://www.medidata.com/      |\n| Norwegian Labour and Welfare Administration | https://www.nav.no             |\n| Otovo                                       | https://www.otovo.com/         |\n| Tink AB                                     | https://tink.com/              |\n| Total Wine & More                           | https://www.totalwine.com/     |\n| T-Mobile Czech Republic a.s.                | https://www.t-mobile.cz/       |\n```\n\n----------------------------------------\n\nTITLE: Capturing Impression Data in JavaScript with Unleash\nDESCRIPTION: This snippet shows the structure of impression data output from Unleash when using getVariant. It includes event type, ID, context, feature name, and variant information.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/a-b-testing.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"eventType\": \"getVariant\",\n    \"eventId\": \"c41aa58b-d2c7-45cf-b668-7267f465e01a\",\n    \"context\": {\n        \"sessionId\": 386689528,\n        \"appName\": \"my-example-app\",\n        \"environment\": \"default\"\n    },\n    \"enabled\": true,\n    \"featureName\": \"ab-testing-example\",\n    \"impressionData\": true,\n    \"variant\": \"variantA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PetProductsServiceImpl Class\nDESCRIPTION: Defines the default implementation of the PetProductsService interface, which will be used when the feature flag is disabled.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.samples.petclinic.owner;\n\nimport org.springframework.samples.petclinic.owner.PetProductsService;\nimport org.springframework.stereotype.Service;\n\n@Service(\"petProductsServiceImpl\")\npublic class PetProductsServiceImpl implements PetProductsService {\n\n   @Override\n   public String getPetProductsString(String name) {\n       System.out.println(\"We are triggering PET_PRODUCTS_SERVICE_IMPL\");\n\tSystem.out.println(name);\n       return \"GENERAL PET PRODUCTS SERVICE IMPLEMENTATION\";\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Products Page to Navigation Menu\nDESCRIPTION: Inserts a new list item in the layout.html file to include the products page in the application's navigation menu.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<li\n    th:replace=\"~{::menuItem ('/products', 'products', 'view clinic products', 'th-list', 'Clinic products')}\"\n>\n    <span class=\"fa fa-th-list\" aria-hidden=\"true\"></span>\n    <span>Clinic products</span>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Initializing Unleash FlagProvider in Vue\nDESCRIPTION: Sets up the Unleash FlagProvider component with configuration in a Vue.js application. It requires the API URL, client key, and application name.\nSOURCE: https://github.com/unleash/unleash/blob/main/frontend/src/component/onboarding/dialog/snippets/vue.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n    import { FlagProvider } from '@unleash/proxy-client-vue'\n\n    const config = {\n        url: '<YOUR_API_URL>',\n        clientKey: '<YOUR_API_TOKEN>', // in production use environment variable\n        appName: 'unleash-onboarding-vue',\n    }\n</script>\n\n<template>\n  <FlagProvider :config=\"config\">\n    <!-- <YourComponent /> -->\n  </FlagProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Use CourseBanner React Component in MDX\nDESCRIPTION: This MDX code uses the `CourseBanner` React component to display information about the advanced Unleash course. It configures the component's `level` and `description` properties to provide context for the course.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/advanced-for-devs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<CourseBanner level='advanced' description='Unlock the full potential of Unleash, streamline your development process and make data-driven decisions with confidence. Learn how Unleash can support your business needs and understand advanced usage like collaboration, data insights and A/B testing, auto-remediation, and integration into third party tools.'/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Learning Links Component\nDESCRIPTION: The 'LearningLinks' component is rendered to provide additional resources or navigational links related to the Unleash Academy. This component helps users find more information and connect to other learning materials that complement the course being attended. It is expected to be an interactive part of the course content, linking to relevant sections or resources.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/foundational.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<LearningLinks />\n```\n\n----------------------------------------\n\nTITLE: Cloning Unleash Repository and Running with Docker\nDESCRIPTION: Commands to clone the Unleash repository from GitHub and run it using Docker Compose. This sets up a local instance of the Unleash feature flag service.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/react/implementing-feature-flags.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Configuration\nDESCRIPTION: This robots.txt configuration allows all user agents to crawl the entire site. It also specifies the host and sitemap location for search engine optimization.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/static/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\"# *\nUser-agent: *\nAllow: /\n\n# Host\nHost: https://docs.getunleash.io\n\n# Sitemaps\nSitemap: https://docs.getunleash.io/sitemap.xml\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Unleash Database Connection\nDESCRIPTION: Commands to set environment variables for the main and test database URLs. These are optional as Unleash assumes these as default values.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/contributing/backend/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=postgres://unleash_user:password@localhost:5432/unleash\nexport TEST_DATABASE_URL=postgres://unleash_user:password@localhost:5432/unleash_test\n```\n\n----------------------------------------\n\nTITLE: Note MDX Block\nDESCRIPTION: This is a Markdown extension using :::note syntax to display a note containing estimated time to complete the advanced Unleash course. It provides the user with an understanding of time commitment.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/unleash-academy/advanced-for-devs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n**Estimated time:** 45 minutes\n:::\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Custom Icon Configuration\nDESCRIPTION: Table showing custom icon configuration options using Material Symbols\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/banners.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Option          | Description                                                                                              |\n| --------------- | -------------------------------------------------------------------------------------------------------- |\n| **Custom icon** | The custom icon to be displayed on the banner, using [Material Symbols](https://fonts.google.com/icons). |\n```\n\n----------------------------------------\n\nTITLE: Archiving Feature Flag\nDESCRIPTION: HTTP DELETE request to archive a feature flag. Uses the HTTPX library to make the API call.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/rails/rails-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'httpx'\n\nurl = \"<your-unleash-url>/api/admin/projects/:projectId/features/:featureName\"\npayload = {}\nheaders = {\n  'Authorization': '<API_KEY_VALUE>'\n}\n\nresponse = HTTPX.delete(url, headers: headers)\nputs response.body\n```\n\n----------------------------------------\n\nTITLE: Health Check JSON Response\nDESCRIPTION: Example JSON response from the application's health check endpoint.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"UP\",\n    \"components\": {\n        \"diskSpace\": {\n            \"status\": \"UP\",\n            \"details\": {\n                \"total\": 62671097856,\n                \"free\": 51487629312,\n                \"threshold\": 10485760,\n                \"path\": \"/app/.\",\n                \"exists\": true\n            }\n        },\n        \"ping\": { \"status\": \"UP\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Banner Action Configuration\nDESCRIPTION: Table describing banner action options and their functionality\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/reference/banners.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Option            | Description                                                                                                                                  |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Banner action** | The action activated when a user interacts with the banner link. Defaults to \"None\". Options include a [link](#link) or a [dialog](#dialog). |\n```\n\n----------------------------------------\n\nTITLE: Importing UnleashClient\nDESCRIPTION: Import statement for UnleashClient in the Flask application\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom UnleashClient import UnleashClient\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Command to build and run the Docker container for the application\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/python/implementing-feature-flags.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up --build\n```\n\n----------------------------------------\n\nTITLE: Building Java Application with Maven\nDESCRIPTION: Maven wrapper command to clean and package the Java application.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw clean package\n```\n\n----------------------------------------\n\nTITLE: Running Java Application\nDESCRIPTION: Command to run the compiled Java application JAR file.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/spring-boot-java-example.jar\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash with Docker\nDESCRIPTION: Commands to clone the Unleash repository and run it using Docker Compose.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/javascript/implementing-feature-flags-js.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash with Docker\nDESCRIPTION: Commands to clone the Unleash repository and start it using Docker Compose\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/implementing-feature-flags.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Alternative Build Commands for Spring Pet Clinic\nDESCRIPTION: Alternative commands to build and run Spring Pet Clinic using Maven plugin or Gradle\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/java/spring-boot-implementing-feature-flags.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./mvnw spring-boot:run\n```\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: NPM command to install project dependencies.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/ai.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Unleash Locally\nDESCRIPTION: Commands to clone and run Unleash using Docker for local feature flag management.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/ai.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/unleash/unleash.git\ncd unleash\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/feature-flag-tutorials/use-cases/ai.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI via Environment Variable in Bash\nDESCRIPTION: Sets the ENABLE_OAS environment variable to enable OpenAPI documentation.\nSOURCE: https://github.com/unleash/unleash/blob/main/website/docs/how-to/how-to-enable-openapi.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ENABLE_OAS=true\n```"
  }
]