[
  {
    "owner": "15r10nk",
    "repo": "inline-snapshot",
    "content": "TITLE: Basic Inline Snapshot Usage Python\nDESCRIPTION: This snippet demonstrates the basic usage of the `inline_snapshot` fixture within a pytest test function. It shows how to assert values against snapshots using the `snapshot()` function. The snapshots are stored inline within the test code itself and are updated when the test is run with the appropriate flags.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/pytest.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 1 == snapshot(5)\n    assert 2 <= snapshot(5)\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot: Basic Data Type Handling in Python\nDESCRIPTION: This code snippet demonstrates how the inline-snapshot library handles various Python data types, including strings, numbers, lists, sets, datetimes, complex numbers, and bytes. It defines a function that returns a dictionary containing these types and uses assert to compare the output to a snapshot.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/code_generation.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nimport datetime\n\n\ndef something():\n    return {\n        \"name\": \"hello\",\n        \"one number\": 5,\n        \"numbers\": list(range(10)),\n        \"sets\": {1, 2, 15},\n        \"datetime\": datetime.date(1, 2, 22),\n        \"complex stuff\": 5j + 3,\n        \"bytes\": b\"byte abc\\n\\x16\",\n    }\n\n\ndef test_something():\n    assert something() == snapshot()\n```\n\n----------------------------------------\n\nTITLE: Basic Inline Snapshot Assertion in Python\nDESCRIPTION: This code demonstrates a basic use case of inline-snapshot. The `snapshot()` function is used in place of the expected value in an assertion. When the test is run, inline-snapshot will record the result of the calculation.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 1548 * 18489 == snapshot()\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Usage - Original Code\nDESCRIPTION: This snippet demonstrates the most basic use case of `inline-snapshot`. It defines a simple function `something()` and a test function `test_something()` that asserts the result of `something()` against an inline snapshot. The snapshot value is initially empty and will be populated during the first test run with `--inline-snapshot=create`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef something():\n    return 1548 * 18489\n\n\ndef test_something():\n    assert something() == snapshot()\n```\n\n----------------------------------------\n\nTITLE: Create Snapshot Python\nDESCRIPTION: Shows how to create a snapshot with a specific initial value using `--inline-snapshot=create`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 2 + 4 == snapshot(6)\n```\n\n----------------------------------------\n\nTITLE: Snapshot Usage - Fix\nDESCRIPTION: This snippet shows how to update the snapshot value after intentionally changing the code. Running the tests with `--inline-snapshot=fix` updates the snapshot value to the new calculated result (1590054). This indicates that the change was intentional and the test now reflects the new behavior.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef something():\n    return (1548 * 18489) // 18\n\n\ndef test_something():\n    assert something() == snapshot(1590054)\n```\n\n----------------------------------------\n\nTITLE: Initializing snapshots with values using inline-snapshot in Python\nDESCRIPTION: This code demonstrates how to initialize snapshots with specific values using inline-snapshot. The `snapshot()` function is called with an argument representing the initial snapshot value.  The hl_lines attribute emphasizes the lines where the snapshot values are initialized.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 5 == snapshot(5)\n\n    assert 5 <= snapshot(5)\n\n    assert 5 in snapshot([5])\n\n    s = snapshot({\"key\": 5})\n    assert 5 == s[\"key\"]\n```\n\n----------------------------------------\n\nTITLE: Fixing snapshot values using inline-snapshot in Python\nDESCRIPTION: This code demonstrates how inline-snapshot helps fix incorrect snapshot values. The initial assertions fail because the expected values do not match the snapshot values. The updated code replaces the old snapshot values with the correct ones, highlighted by hl_lines.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 8 == snapshot(5)\n\n    assert 8 <= snapshot(5)\n\n    assert 8 in snapshot([5])\n\n    s = snapshot({\"key\": 5})\n    assert 8 == s[\"key\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Usage - Create\nDESCRIPTION: This snippet shows the state of the code after running the tests with `--inline-snapshot=create`. The `snapshot()` function now contains the calculated value (28620972) as an argument. This ensures that any future changes to the `something()` function will be detected by the test.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef something():\n    return 1548 * 18489\n\n\ndef test_something():\n    assert something() == snapshot(28620972)\n```\n\n----------------------------------------\n\nTITLE: Fixed Assertion in Python\nDESCRIPTION: This snippet shows the corrected assertion after running inline-snapshot with the `--inline-snapshot=fix-assert` option. The incorrect value (5) is replaced with the correct value (2).  `hl_lines=\"2\"` is used to highlight the generated/modified line in documentation examples.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/fix_assert.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_assert():\n    assert 1 + 1 == 2\n\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot with Create/Report Bash\nDESCRIPTION: This bash script automates the process of creating a test file, running pytest with the `--inline-snapshot=create,report` option, and displaying the output. It sets up a temporary directory, defines a helper function for executing commands, and uses `black` to format the python code. The python code uses inline_snapshot to test assertions and create or update snapshots.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/pytest.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $(mktemp -d)\nexport -n CI\nexport -n GITHUB_ACTIONS\n\nexport FORCE_COLOR=256\nexport COLUMNS=80\n\nfunction run(){\n    echo -en \"\\x1b[1;34m> \"\n    echo $@\n    echo -en \"\\x1b[0m\"\n    $@\n    echo\n}\n\nblack -q - > test_something.py << EOF\nfrom inline_snapshot import snapshot\n\ndef test_something():\n    assert 1 == snapshot()\n    assert 2 <= snapshot(5)\nEOF\n\nrun pytest test_something.py --inline-snapshot=create,report\n```\n\n----------------------------------------\n\nTITLE: Using IsJson Python\nDESCRIPTION: Demonstrates the usage of `IsJson` from the `dirty-equals` library to match the structure of a JSON string within a snapshot.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom dirty_equals import IsJson\nfrom inline_snapshot import snapshot\n\n\ndef test_foo():\n    assert {\"json_data\": '{\"value\": 1}'} == snapshot(\n        {\"json_data\": IsJson(snapshot())}\n    )\n```\n\n----------------------------------------\n\nTITLE: Using IsDatetime Python\nDESCRIPTION: Demonstrates replacing the fixed datetime with `IsDatetime()` to make the test less brittle to changes in time.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nfrom dirty_equals import IsDatetime\nimport datetime\n\n\ndef get_data():\n    return {\n        \"date\": datetime.datetime.utcnow(),\n        \"payload\": \"some data\",\n    }\n\n\ndef test_function():\n    assert get_data() == snapshot(\n        {\n            \"date\": IsDatetime(),\n            \"payload\": \"some data\",\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Example Python\nDESCRIPTION: Demonstrates a basic test using inline snapshots to compare a value with a snapshot. Shows how to record the value when the snapshot is empty and fix the value when the snapshot is outdated.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 2 + 4 == snapshot()\n```\n\n----------------------------------------\n\nTITLE: Datetime Normalization with dirty-equals Python\nDESCRIPTION: Illustrates how to use `dirty_equals.IsDatetime` to ignore the exact datetime value in snapshots, focusing on other parts of the data.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nimport datetime\n\n\ndef get_data():\n    return {\n        \"date\": datetime.datetime.utcnow(),\n        \"payload\": \"some data\",\n    }\n\n\ndef test_function():\n    assert get_data() == snapshot()\n```\n\n----------------------------------------\n\nTITLE: Value Check with Inline Snapshot in Python\nDESCRIPTION: This code snippet demonstrates how to use the inline-snapshot library to check if specific values are present within a dynamically generated snapshot. The snapshot will store all values used in the `in` operator checks. The example illustrates checking for integer and string values.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/in_snapshot.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    s = snapshot()\n\n    assert 5 in s\n    assert 5 in s\n    assert 8 in s\n\n    for v in [\"a\", \"b\"]:\n        assert v in s\n```\n\n----------------------------------------\n\nTITLE: GCD Calculation with Inline Snapshot (Create)\nDESCRIPTION: This snippet demonstrates how to create initial snapshot values for the GCD calculation test. Using `--inline-snapshot=create`, the undefined snapshots from the 'original code' example are populated with concrete values. The `hl_lines` indicates which lines are modified/relevant to the snapshot creation. It uses `snapshot(6)` and `snapshot(12)` to capture the expected result and maximum iterations, respectively.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/cmp_snapshot.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef gcd(x, y):\n    iterations = 0\n    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1, small + 1):\n        iterations += 1\n        if (x % i == 0) and (y % i == 0):\n            gcd = i\n\n    return gcd, iterations\n\n\ndef test_gcd():\n    result, iterations = gcd(12, 18)\n\n    assert result == snapshot(6)\n    assert iterations <= snapshot(12)\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Snapshot with initial values in Python\nDESCRIPTION: This example shows how to initialize the inline-snapshot with predefined values and perform assertions to check their presence. It demonstrates how to use the `create` option to initialize the snapshot with a list of values. Assertion verifies that all defined values are present in snapshot.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/in_snapshot.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    s = snapshot([5, 8, \"a\", \"b\"])\n\n    assert 5 in s\n    assert 5 in s\n    assert 8 in s\n\n    for v in [\"a\", \"b\"]:\n        assert v in s\n```\n\n----------------------------------------\n\nTITLE: Creating new snapshot values with inline-snapshot in Python\nDESCRIPTION: This code demonstrates how inline-snapshot handles the creation of new snapshots. The `snapshot()` function is called without arguments, and the assertion passes because inline-snapshot stores the provided value as a new snapshot.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 5 == snapshot()\n\n    assert 5 <= snapshot()\n\n    assert 5 in snapshot()\n\n    s = snapshot()\n    assert 5 == s[\"key\"]\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot Configuration - Format Command\nDESCRIPTION: This TOML snippet shows how to configure a custom format command for the `inline-snapshot` tool. The `format-command` is set to \"ruff format --stdin-filename {filename}\", which uses `ruff` to format the Python code. The `{filename}` placeholder allows specifying the filename for formatting options.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/configuration.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.inline-snapshot]\nformat-command=\"ruff format --stdin-filename {filename}\"\n```\n\n----------------------------------------\n\nTITLE: GCD Calculation with Euclidean Algorithm and Inline Snapshot\nDESCRIPTION: This snippet showcases an optimized GCD calculation using the Euclidean Algorithm and inline snapshots for verification. It demonstrates how the algorithm reduces iterations, providing a more efficient solution. The result and maximum iterations are asserted using `snapshot(6)` and `snapshot(12)`, respectively.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/cmp_snapshot.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef gcd(x, y):\n    # use Euclidean Algorithm\n    iterations = 0\n    while y:\n        iterations += 1\n        x, y = y, x % y\n    return abs(x), iterations\n\n\ndef test_gcd():\n    result, iterations = gcd(12, 18)\n\n    assert result == snapshot(6)\n    assert iterations <= snapshot(12)\n```\n\n----------------------------------------\n\nTITLE: Snapshot Comparison with dirty-equals\nDESCRIPTION: This code showcases how a snapshot containing a `dirty-equals` expression can be compared multiple times within a loop.  It uses the `IsString()` from `dirty-equals` to match any string value during comparison, addressing an issue where multiple comparisons with `dirty-equals` expressions could fail.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndef test_something():\n    greeting = \"hello\"\n    for name in [\"alex\", \"bob\"]:\n        assert (name, greeting) == snapshot((IsString(), \"hello\"))\n```\n\n----------------------------------------\n\nTITLE: Runtime Values in Snapshots (Python)\nDESCRIPTION: This snippet demonstrates how to include runtime values as part of the snapshot using the `Is` function.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, Is\n\ncurrent_version = \"1.5\"\nassert request() == snapshot(\n    {\"data\": \"page data\", \"version\": Is(current_version)}\n)\n```\n\n----------------------------------------\n\nTITLE: Created Assertion in Python\nDESCRIPTION: This snippet shows the automatically created assertion using inline-snapshot. The ellipsis in the original code is replaced with the calculated value (2).  `hl_lines=\"2\"` is used to highlight the generated/modified line in documentation examples.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/fix_assert.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_assert():\n    assert 1 + 1 == 2\n\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing with Enum\nDESCRIPTION: This snippet demonstrates how inline-snapshot captures the representation of an `Enum` member, using a custom implementation to serialize the `Enum` into a code-compatible representation. It uses the `snapshot` function to compare the actual value of the enum member with its expected representation during code generation.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/customize_repr.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nfrom enum import Enum\n\n\ndef test_enum():\n    E = Enum(\"E\", [\"a\", \"b\"])\n\n    # normal repr\n    assert repr(E.a) == \"<E.a: 1>\"\n\n    # the special implementation to convert the Enum into a code\n    assert E.a == snapshot(E.a)\n```\n\n----------------------------------------\n\nTITLE: Customizing Recursive Repr with Pair Class\nDESCRIPTION: This example shows how to customize the representation of a class (`Pair`) using `repr()` within its `__repr__` method to be compatible with inline-snapshot. It emphasizes the need to use the `repr()` function instead of f-strings with `!r` for correct recursive representation within inline-snapshot's code generation.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/customize_repr.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nfrom enum import Enum\n\n\nclass Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def __repr__(self):\n        # this would not work\n        # return f\"Pair({self.a!r}, {self.b!r})\"\n\n        # you have to use repr()\n        return f\"Pair({repr(self.a)}, {repr(self.b)})\"\n\n    def __eq__(self, other):\n        if not isinstance(other, Pair):\n            return NotImplemented\n        return self.a == other.a and self.b == other.b\n\n\ndef test_enum():\n    E = Enum(\"E\", [\"a\", \"b\"])\n\n    # the special repr implementation is used recursive here\n    # to convert every Enum to the correct representation\n    assert Pair(E.a, [E.b]) == snapshot(Pair(E.a, [E.b]))\n```\n\n----------------------------------------\n\nTITLE: Testing Inline Snapshots without Flags (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `Example` class to test inline snapshots without any flags. It defines a test case with a simple assertion that uses `snapshot()`. The `run_inline` and `run_pytest` methods are used to execute the test and verify the reported categories, changed files, report, and return code.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/testing.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot.testing import Example\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n\n    Example(\n        {\n            \"test_a.py\": \"\"\"\\\nfrom inline_snapshot import snapshot\ndef test_a():\n    assert 1+1 == snapshot()\n\"\"\"\n        }\n    ).run_inline(  # run without flags\n        reported_categories=snapshot(),\n    ).run_pytest(\n        [\"--inline-snapshot=short-report\"],  # check the pytest report\n        changed_files=snapshot(),\n        report=snapshot(),\n        returncode=snapshot(),\n    ).run_pytest(  # run with create flag and check the changed files\n        [\"--inline-snapshot=create\"],\n        changed_files=snapshot(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Fix Snapshot Python\nDESCRIPTION: Demonstrates how to update the snapshot value to the new value using `--inline-snapshot=fix`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 2 + 40 == snapshot(42)\n```\n\n----------------------------------------\n\nTITLE: Fix Payload Python\nDESCRIPTION: Demonstrates how to fix the snapshot after the payload has changed, keeping the `IsDatetime` in place.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nfrom dirty_equals import IsDatetime\nimport datetime\n\n\ndef get_data():\n    return {\n        \"date\": datetime.datetime.utcnow(),\n        \"payload\": \"data changed for some good reason\",\n    }\n\n\ndef test_function():\n    assert get_data() == snapshot(\n        {\n            \"date\": IsDatetime(),\n            \"payload\": \"data changed for some good reason\",\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Snapshot as Argument - Original Code\nDESCRIPTION: This snippet shows how to pass `snapshot()` as an argument to a function. The `test_string_len()` function calls `check_string_len()` with different strings and a snapshot for each call. The snapshot values are initially empty and will be populated when creating the snapshots.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef check_string_len(string, snapshot_value):\n    assert len(string) == snapshot_value\n\n\ndef test_string_len():\n    check_string_len(\"abc\", snapshot())\n    check_string_len(\"1234\", snapshot())\n    check_string_len(\".......\", snapshot())\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot with Initial Value\nDESCRIPTION: This example shows how to provide an initial value to the `snapshot()` function. This is useful for pre-populating the snapshot with a known value, which can be updated if the actual value changes.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 1548 * 18489 == snapshot(28620972)\n```\n\n----------------------------------------\n\nTITLE: Snapshot as Argument - Create\nDESCRIPTION: This snippet showcases the code after running with `--inline-snapshot=create` when passing snapshots as function arguments. The snapshot values are now populated with the corresponding lengths of the strings: 3, 4, and 7.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef check_string_len(string, snapshot_value):\n    assert len(string) == snapshot_value\n\n\ndef test_string_len():\n    check_string_len(\"abc\", snapshot(3))\n    check_string_len(\"1234\", snapshot(4))\n    check_string_len(\".......\", snapshot(7))\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot: Updating Snapshot with Multiline Strings in Python\nDESCRIPTION: This example shows how to update a snapshot containing a multiline string. Note the explicit newline characters (`\\n`) within the string in the original source and the added `\\` at the beginning and end of the string within the triple quotes of the snapshot value.  `hl_lines` indicates highlighted lines.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/code_generation.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert \"first line\\nsecond line\" == snapshot(\n        \"\"\"\\\nfirst line\nsecond line\\\n\"\"\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Testing Inline Snapshots with Create Flag (Python)\nDESCRIPTION: This snippet shows how to test inline snapshots with the `--inline-snapshot=create` flag using the `Example` class. It includes assertions for reported categories, changed files, the generated report, and the return code. The `hl_lines` attribute highlights the specific lines in the code where snapshot values are expected or where errors might occur due to missing values.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/testing.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot.testing import Example\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n\n    Example(\n        {\n            \"test_a.py\": \"\"\"\\\nfrom inline_snapshot import snapshot\ndef test_a():\n    assert 1+1 == snapshot()\n\"\"\"\n        }\n    ).run_inline(  # run without flags\n        reported_categories=snapshot([\"create\"]),\n    ).run_pytest(\n        [\"--inline-snapshot=short-report\"],  # check the pytest report\n        changed_files=snapshot({}),\n        report=snapshot(\n            \"\"\"\\\nError: one snapshot is missing a value (--inline-snapshot=create)\nYou can also use --inline-snapshot=review to approve the changes interactively\\\n\"\"\"\n        ),\n        returncode=snapshot(1),\n    ).run_pytest(  # run with create flag and check the changed files\n        [\"--inline-snapshot=create\"],\n        changed_files=snapshot(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Is in loops Python\nDESCRIPTION: Showcases the usage of `Is` inside a loop to correctly fix all the snapshot values if they change.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, Is\n\n\ndef test_function():\n    for c in \"abc\":\n        assert [c, \"correct\"] == snapshot([Is(c), \"wrong\"])\n```\n\n----------------------------------------\n\nTITLE: Attrs with Unmanaged Values and Snapshotting (Python)\nDESCRIPTION: This code illustrates the use of `attrs` with unmanaged values and the use of `Is` and `IsDatetime` for creating snapshots with dynamic values.  It demonstrates how runtime values can now be part of snapshots.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport datetime as dt\nimport uuid\nimport attrs\nfrom dirty_equals import IsDatetime\nfrom inline_snapshot import Is, snapshot\n\n\n@attrs.define\nclass Attrs:\n    ts: dt.datetime\n    id: uuid.UUID\n\n\ndef test():\n    id = uuid.uuid4()\n\n    assert Attrs(dt.datetime.now(), id) == snapshot(\n        Attrs(ts=IsDatetime(), id=Is(id))\n    )\n```\n\n----------------------------------------\n\nTITLE: Inner Snapshots with Function Python\nDESCRIPTION: Demonstrates how to extract the snapshot condition into a function.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, Snapshot\nfrom my_lib import version, get_schema\n\n\ndef version_snapshot(v1: Snapshot, v2: Snapshot):\n    return v1 if version < 2 else v2\n\n\ndef test_function():\n    assert get_schema() == snapshot(\n        [\n            {\n                \"name\": \"var_1\",\n                \"type\": version_snapshot(\n                    v1=snapshot(\"int\"), v2=snapshot(\"string\")\n                ),\n            }\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: GCD Calculation with Inline Snapshot (Original)\nDESCRIPTION: This snippet demonstrates the original GCD calculation and utilizes inline snapshots to assert the result and number of iterations. It shows a basic example of how `inline_snapshot` can be used to capture and verify values within a test function. The initial snapshot values are undefined, so `inline_snapshot` will need to either be in `create` mode or be populated by hand.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/cmp_snapshot.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef gcd(x, y):\n    iterations = 0\n    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1, small + 1):\n        iterations += 1\n        if (x % i == 0) and (y % i == 0):\n            gcd = i\n\n    return gcd, iterations\n\n\ndef test_gcd():\n    result, iterations = gcd(12, 18)\n\n    assert result == snapshot()\n    assert iterations <= snapshot()\n```\n\n----------------------------------------\n\nTITLE: Snapshotting Dataclass with Custom Constructor (Python)\nDESCRIPTION: This code shows how to use the `snapshot` function with a pydantic model that uses a custom constructor method.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nfrom pydantic import BaseModel\n\n\nclass A(BaseModel):\n    a: int\n\n    @classmethod\n    def from_str(cls, s):\n        return cls(a=int(s))\n\n\n\ndef test_something():\n    assert A(a=2) == snapshot(A.from_str(\"1\"))\n```\n\n----------------------------------------\n\nTITLE: Inner Snapshots Example (Python)\nDESCRIPTION: This snippet demonstrates the support for snapshots inside snapshots, allowing for more complex data structure comparisons with dynamic components.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nassert get_schema() == snapshot(\n    [\n        {\n            \"name\": \"var_1\",\n            \"type\": snapshot(\"int\") if version < 2 else snapshot(\"string\"),\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Original Code: Inline Snapshot Usage in Python\nDESCRIPTION: Shows a basic example of using inline-snapshot to assert values. The initial snapshot values are undefined, which would typically cause an error without the `--inline-snapshot=create` flag.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/getitem_snapshot.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    s = snapshot()\n\n    assert s[\"a\"] == 4\n    assert s[\"b\"] == 5\n```\n\n----------------------------------------\n\nTITLE: Trimming unused parts of snapshots with inline-snapshot in Python\nDESCRIPTION: This code demonstrates the 'trim' category, where parts of the snapshots are removed if they are no longer needed. The hl_lines attribute points to the lines where the snapshot values are being trimmed.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 2 <= snapshot(8)\n\n    assert 8 in snapshot([5, 8])\n\n    s = snapshot({\"key1\": 1, \"key2\": 2})\n    assert 2 == s[\"key2\"]\n```\n\n----------------------------------------\n\nTITLE: Outsource with External Data Creation in Python\nDESCRIPTION: This snippet shows how running the test with `--inline-snapshot=create` modifies the original code to include an `external()` object, which references the externally stored data based on its hash. The `external` object is used within the `snapshot` to represent the data.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/outsource.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, outsource\n\nfrom inline_snapshot import external\n\n\ndef test_something():\n    assert outsource(\"long text\\n\" * 1000) == snapshot(\n        external(\"f5a956460453*.txt\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic Outsource Usage in Python\nDESCRIPTION: This snippet demonstrates the basic usage of the `outsource()` function to store a large text string externally and compare it with an inline snapshot. The snapshot initially stores the data directly, and after running with `--inline-snapshot=create`, it stores a reference to the external data using the `external()` object.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/outsource.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, outsource\n\n\ndef test_something():\n    assert outsource(\"long text\\n\" * 1000) == snapshot()\n```\n\n----------------------------------------\n\nTITLE: Snapshot Reuse - Create\nDESCRIPTION: This snippet illustrates the code after running the tests with `--inline-snapshot=create` when reusing a snapshot. The `result` snapshot variable now holds the value 42, which is used in both test functions. This demonstrates how a single snapshot can enforce consistency across multiple assertions.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef something():\n    return 21 * 2\n\n\nresult = snapshot(42)\n\n\ndef test_something():\n    ...\n    assert something() == result\n\n\ndef test_something_again():\n    ...\n    assert something() == result\n```\n\n----------------------------------------\n\nTITLE: Snapshotting Mutable Objects\nDESCRIPTION: This snippet demonstrates the change in behavior related to snapshotting mutable objects. Previously, the snapshot would capture the mutated state of the object. Now, it snapshots the current value at the time of the assertion, ensuring that subsequent mutations do not affect the snapshot.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nl = [1]\nassert l == snapshot([1])  # old behaviour: snapshot([1, 2])\nl.append(2)\nassert l == snapshot([1, 2])\n```\n\n----------------------------------------\n\nTITLE: Customizing repr for external libraries\nDESCRIPTION: This snippet demonstrates how to use `customize_repr` decorator to customize the representation of a data type from an external library. This allows inline-snapshot to correctly represent and generate code for custom types.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/customize_repr.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import customize_repr\nfrom other_lib import SomeType\n\n\n@customize_repr\ndef _(value: SomeType):\n    return f\"SomeType(x={repr(value.x)})\"\n```\n\n----------------------------------------\n\nTITLE: Using Common Snapshot Parts with inline-snapshot in Python\nDESCRIPTION: This code snippet demonstrates how to extract common parts of snapshots into a separate snapshot variable for reusability. The `snapshot` function from the `inline_snapshot` library is used to define and compare data. This approach simplifies test data and ensures consistency across multiple assertions.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef some_data(name):\n    return {\"header\": \"really long header\\n\" * 5, \"your name\": name}\n\n\ndef test_function():\n\n    header = snapshot(\n        \"\"\"\\\nreally long header\nreally long header\nreally long header\nreally long header\nreally long header\n\"\"\"\n    )\n\n    assert some_data(\"Tom\") == snapshot(\n        {\n            \"header\": header,\n            \"your name\": \"Tom\",\n        }\n    )\n\n    assert some_data(\"Bob\") == snapshot(\n        {\n            \"header\": header,\n            \"your name\": \"Bob\",\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Multiline String Snapshot\nDESCRIPTION: This code shows how strings containing newlines are now converted to triple-quoted strings when used with the `snapshot` function, preserving formatting.  This allows for better readability and representation of multiline strings in snapshots.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nassert \"a\\nb\\n\" == snapshot(\n    \"\"\"a\nb\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating snapshot representation with inline-snapshot in Python\nDESCRIPTION: This example showcases the 'update' category, where the snapshot representation is updated without changing the underlying value. The updates can be due to changes in the `__repr__` method of a class or improvements in inline-snapshot logic. \nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        if not isinstance(other, Vector):\n            return NotImplemented\n        return self.x == other.x and self.y == other.y\n\n    def __repr__(self):\n        # return f\"Vector(x={self.x}, y={self.y})\"\n        return f\"Vector({self.x}, {self.y})\"\n\n\ndef test_something():\n    assert \"a\\nb\\nc\\n\" == snapshot(\"a\\nb\\nc\\n\")\n\n    assert 5 == snapshot(4 + 1)\n\n    assert Vector(1, 2) == snapshot(Vector(x=1, y=2))\n```\n\n----------------------------------------\n\nTITLE: Using Is Python\nDESCRIPTION: Demonstrates the usage of `Is` to ignore the value of a variable within a snapshot, but still keep track of the other values.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, Is\n\ncurrent_version = \"1.5\"\n\n\ndef request():\n    return {\"data\": \"page data\", \"version\": current_version}\n\n\ndef test_function():\n    assert request() == snapshot(\n        {\"data\": \"page data\", \"version\": Is(current_version)}\n    )\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot with Short-Report Bash\nDESCRIPTION: This bash script automates the process of creating a test file, running pytest with the `--inline-snapshot=short-report` option, and displaying the output. It sets up a temporary directory, defines a helper function for executing commands, and uses `black` to format the python code. The python code uses inline_snapshot to test assertions and report short changes.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/pytest.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $(mktemp -d)\nexport -n CI\nexport -n GITHUB_ACTIONS\n\nexport FORCE_COLOR=256\nexport COLUMNS=80\n\nfunction run(){\n    echo -en \"\\x1b[1;34m> \"\n    echo $@\n    echo -en \"\\x1b[0m\"\n    python -m $@\n    echo\n}\n\nblack -q - > test_something.py << EOF\nfrom inline_snapshot import snapshot\n\ndef test_something():\n    assert 1 == snapshot()\n    assert 2 <= snapshot(5)\nEOF\n\nrun pytest test_something.py --inline-snapshot=short-report\n```\n\n----------------------------------------\n\nTITLE: Conditional Xfail Tests with Snapshots (Python)\nDESCRIPTION: This code shows how snapshots are handled in tests marked as `xfail`. Snapshots inside conditionally marked xfail tests are treated differently. The first one is fixed; the second one is not.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.xfail(False, reason=\"...\")\ndef test_a():\n    assert 5 == snapshot(3)  # <- this will be fixed\n\n\n@pytest.mark.xfail(True, reason=\"...\")\ndef test_b():\n    assert 5 == snapshot(3)  # <- this not\n```\n\n----------------------------------------\n\nTITLE: Outsource Usage in Data Structures in Python\nDESCRIPTION: This snippet shows how the `outsource()` function can be used within data structures like lists. Each element generated by the list comprehension is stored externally. Initially, the snapshot stores data inline; running with `--inline-snapshot=create` updates the snapshot to use `external()` references.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/outsource.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, outsource\n\n\ndef test_something():\n    assert [\n        outsource(\"long text\\n\" * times) for times in [50, 100, 1000]\n    ] == snapshot()\n```\n\n----------------------------------------\n\nTITLE: Default Inline Snapshot Configuration TOML\nDESCRIPTION: This TOML snippet shows the default configuration for the `inline-snapshot` tool.  It configures hash length, default flags for standard and TUI modes, disables a format command, and sets `skip-snapshot-updates-for-now` to false.  These settings control the tool's behavior when managing inline snapshots during testing.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/configuration.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.inline-snapshot]\nhash-length=15\ndefault-flags=[\"report\"]\ndefault-flags-tui=[\"create\", \"review\"]\nformat-command=\"\"\nskip-snapshot-updates-for-now=false\n\n[tool.inline-snapshot.shortcuts]\nreview=[\"review\"]\nfix=[\"create\",\"fix\"]\n```\n\n----------------------------------------\n\nTITLE: Star Expression Warning\nDESCRIPTION: This snippet demonstrates an invalid star expression usage within a list or dictionary, which now raises a warning. It highlights the improper use of the `snapshot` function with star expressions inside list/dict literals.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nother=[2]\nassert [5,2]==snapshot([5,*other])\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot with Review Bash\nDESCRIPTION: This bash script automates the process of creating a test file, running pytest with the `--inline-snapshot=review` option, and displaying the output. It sets up a temporary directory, defines a helper function for executing commands, and uses `black` to format the python code. `yes |` is piped to automatically accept proposed changes.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/pytest.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd $(mktemp -d)\nexport -n CI\nexport -n GITHUB_ACTIONS\n\nexport FORCE_COLOR=256\nexport COLUMNS=80\n\nfunction run(){\n    echo -en \"\\x1b[1;34m> \"\n    echo $@\n    echo -en \"\\x1b[0m\"\n    $@\n    echo\n}\n\nblack -q - > test_something.py << EOF\nfrom inline_snapshot import snapshot\n\ndef test_something():\n    assert 1 == snapshot()\n    assert 2 <= snapshot(5)\nEOF\n\nyes | run pytest test_something.py --inline-snapshot=review\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot: Creating Snapshot with Specific Values in Python\nDESCRIPTION: This code shows how to explicitly create a snapshot with specific values for comparison using the inline-snapshot library. This is typically done when creating a snapshot for the first time, or when updating an existing snapshot.  `hl_lines` indicates highlighted lines.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/code_generation.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nimport datetime\n\n\ndef something():\n    return {\n        \"name\": \"hello\",\n        \"one number\": 5,\n        \"numbers\": list(range(10)),\n        \"sets\": {1, 2, 15},\n        \"datetime\": datetime.date(1, 2, 22),\n        \"complex stuff\": 5j + 3,\n        \"bytes\": b\"byte abc\\n\\x16\",\n    }\n\n\ndef test_something():\n    assert something() == snapshot(\n        {\n            \"name\": \"hello\",\n            \"one number\": 5,\n            \"numbers\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n            \"sets\": {1, 2, 15},\n            \"datetime\": datetime.date(1, 2, 22),\n            \"complex stuff\": (3 + 5j),\n            \"bytes\": b\"byte abc\\n\\x16\",\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Running pytest with Inline Snapshot Review\nDESCRIPTION: This command instructs pytest to run tests and review inline snapshots. The `--inline-snapshot=review` flag tells inline-snapshot to update the snapshots with the actual values.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest --inline-snapshot=review\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot as Function Parameters\nDESCRIPTION: This code shows how `snapshot()` can be used as a parameter for functions. It uses the `subprocess` module to run Python code and asserts that the output and error streams match the snapshots. This is useful for testing command-line tools or code that produces output.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nimport subprocess as sp\nimport sys\n\n\ndef run_python(cmd, stdout=None, stderr=None):\n    result = sp.run([sys.executable, \"-c\", cmd], capture_output=True)\n    if stdout is not None:\n        assert result.stdout.decode() == stdout\n    if stderr is not None:\n        assert result.stderr.decode() == stderr\n\n\ndef test_cmd():\n    run_python(\n        \"print('hello world')\",\n        stdout=snapshot(\n            \"\"\"\\\nhello world\n\"\"\"\n        ),\n        stderr=snapshot(\"\"),\n    )\n\n    run_python(\n        \"1/0\",\n        stdout=snapshot(\"\"),\n        stderr=snapshot(\n            \"\"\"\\\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nZeroDivisionError: division by zero\n\"\"\"\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Snapshot in Loop - Original Code\nDESCRIPTION: This example shows how to use `snapshot()` within a loop. The test asserts the length of each name in the list against a snapshot. Initially, the snapshot is empty and will be populated with the first encountered value during the initial run with `--inline-snapshot=create`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_loop():\n    for name in [\"Mia\", \"Eva\", \"Leo\"]:\n        assert len(name) == snapshot()\n```\n\n----------------------------------------\n\nTITLE: Fix Failing Assertion in Python\nDESCRIPTION: This snippet demonstrates how to fix an incorrect assertion using inline-snapshot. The assert statement initially compares 1 + 1 to 5, which is incorrect. This shows the original failing assertion that will be corrected.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/fix_assert.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_assert():\n    assert 1 + 1 == 5\n\n```\n\n----------------------------------------\n\nTITLE: Value Changed Snapshot Python\nDESCRIPTION: Illustrates a test failure when the compared value changes and doesn't match the existing snapshot.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 2 + 40 == snapshot(4)\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot: Handling Multiline Strings in Python\nDESCRIPTION: This code snippet demonstrates how the inline-snapshot library handles multiline strings, including escaping newlines at the start or end. It compares a string with embedded newlines to a snapshot containing a triple-quoted string.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/code_generation.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert \"first line\\nsecond line\" == snapshot(\n        \"\"\"first line\nsecond line\"\"\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Snapshot with Comparison (Create)\nDESCRIPTION: This snippet shows an example that creates an initial value for a snapshot used in comparison assertions. Using `--inline-snapshot=create`, the undefined snapshot value is initialized to 6 with `value = snapshot(6)`.  It asserts that the snapshot value is greater than or equal to both 5 and 6.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/cmp_snapshot.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    value = snapshot(6)\n\n    assert 5 <= value\n    assert 6 <= value\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot Configuration - cpython<3.11 Flags\nDESCRIPTION: This TOML snippet demonstrates the default flags configuration for `inline-snapshot` when using *cpython<3.11*. Due to technical limitations, the `default-flags` and `default-flags-tui` are set to `[\"short-report\"]`. This configuration adjusts the tool's behavior to work within the constraints of older Python versions.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/configuration.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.inline-snapshot]\ndefault-flags=[\"short-report\"]\ndefault-flags-tui=[\"short-report\"]\n```\n\n----------------------------------------\n\nTITLE: Install dirty-equals shell\nDESCRIPTION: Shows how to install the dirty-equals dependency for use with inline snapshots.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install inline-snapshot[dirty-equals]\n```\n\n----------------------------------------\n\nTITLE: Create IsJson Snapshot Python\nDESCRIPTION: Demonstrates how the `IsJson` snapshot gets created when using `--inline-snapshot=create`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom dirty_equals import IsJson\nfrom inline_snapshot import snapshot\n\n\ndef test_foo():\n    assert {\"json_data\": '{\"value\": 1}'} == snapshot(\n        {\"json_data\": IsJson(snapshot({\"value\": 1}))}\n    )\n```\n\n----------------------------------------\n\nTITLE: Generate Changelog using Python\nDESCRIPTION: This Python script reads changelog entries from the `changelog.d` directory, retrieves the next version using `cz bump`, and prepends new changes to the existing `CHANGELOG.md` file.  It requires the `pathlib`, `subprocess`, and `re` modules. The script also assumes the presence of a `cz` command for version bumping.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/changelog.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom subprocess import run\nimport re\n\nnew_changes = list(Path.cwd().glob(\"changelog.d/*.md\"))\nnext_version = (\n    run([\"cz\", \"bump\", \"--get-next\"], capture_output=True)\n    .stdout.decode()\n    .strip()\n)\n\nif new_changes:\n    print(f\"## upcoming version ({next_version})\")\n\nfor file in new_changes:\n    print(file.read_text())\n\nfull_changelog = Path(\"CHANGELOG.md\").read_text()\n\nfull_changelog = re.sub(\"^#\", \"##\", full_changelog, flags=re.M)\n\nprint(full_changelog)\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Black Dependency with pip\nDESCRIPTION: This shell command shows how to install the optional `black` dependency for the `inline-snapshot` library using `pip`. This allows the library to format the generated code with `black`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/code_generation.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install inline-snapshot[black]\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Sub-snapshots with 'create' Flag in Python\nDESCRIPTION: Illustrates how to create sub-snapshots automatically when using the `--inline-snapshot=create` flag.  The `snapshot()` function is initialized with a dictionary containing the expected values, which are then asserted.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/getitem_snapshot.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    s = snapshot({\"a\": 4, \"b\": 5})\n\n    assert s[\"a\"] == 4\n    assert s[\"b\"] == 5\n```\n\n----------------------------------------\n\nTITLE: Cog Script to Generate Extension List\nDESCRIPTION: This Python script uses the `cog`, `lxml`, and `requests` libraries to fetch a list of packages from PyPI that start with \"inline-snapshot-\" and generates a markdown list of these packages with their summaries. It excludes the base `inline-snapshot` package itself. The result is injected directly into the markdown file.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/third_party.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom lxml import html\nimport requests\nimport cog\n\nresponse = requests.get(\"https://pypi.org/simple/\")\n\ntree = html.fromstring(response.content)\n\npackage_list = [str(package) for package in tree.xpath('//a/text()') if str(package).startswith(\"inline-snapshot\")]\n\n\n\nfor package_name in package_list:\n    if package_name == \"inline-snapshot\":\n        continue\n\n    r = requests.get(f'https://pypi.org/pypi/{package_name}/json', headers = {'Accept': 'application/json'});\n\n    summary=r.json()['info'][\"summary\"]\n    cog.out(f\"* [{package_name}](https://pypi.org/project/{package_name}/) {summary}\")\n```\n\n----------------------------------------\n\nTITLE: Handling Impossible Conditions with Assertions in Python\nDESCRIPTION: This snippet demonstrates how to handle impossible conditions in Python code by using an assertion that will fail if the code reaches that point.  This can serve as both a runtime check and a marker in the code indicating that the condition should not be reachable. It also excludes the lines covered by the assertion from coverage reports.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif some_condition:\n    ...\nif some_other_condition:\n    ...\nelse:\n    assert False, \"unreachable because ...\"\n```\n\n----------------------------------------\n\nTITLE: Snapshot in Loop - Create\nDESCRIPTION: This snippet demonstrates the state after running the tests with `--inline-snapshot=create` in a loop scenario. The snapshot now holds the value 3, corresponding to the length of the first name (\"Mia\"). The same snapshot value is used for all subsequent names in the loop.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_loop():\n    for name in [\"Mia\", \"Eva\", \"Leo\"]:\n        assert len(name) == snapshot(3)\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot with Create/Report Python\nDESCRIPTION: This snippet demonstrates how to use the inline_snapshot fixture within a pytest test function with `create,report` flags. It shows how to assert values against snapshots using the `snapshot()` function. The snapshots are stored inline within the test code itself and are updated when the test is run with the appropriate flags.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/pytest.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 1 == snapshot()\n    assert 2 <= snapshot(5)\n```\n\n----------------------------------------\n\nTITLE: Install Insiders Version Bash\nDESCRIPTION: This command installs the inline-snapshot insiders version using pip directly from the git repository. It requires a GitHub account that is part of the insiders team to have access to the repository.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/insiders.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install git+ssh://git@github.com/15r10nk-insiders/inline-snapshot.git\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Built-in Types\nDESCRIPTION: This code lists the built-in data types that are supported by inline-snapshot.  It retrieves the supported types from `code_repr_dispatch.registry` and prints their names.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/customize_repr.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot._code_repr import code_repr_dispatch, code_repr\n\nfor name, obj in sorted(\n    (\n        getattr(\n            obj, \"_inline_snapshot_name\", f\"{obj.__module__}.{obj.__qualname__}\"\n        ),\n        obj,\n    )\n    for obj in code_repr_dispatch.registry.keys()\n):\n    if obj is not object:\n        print(f\"- `{name}`\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Inline Snapshot Usage\nDESCRIPTION: This snippet showcases various applications of `inline-snapshot`, including numeric limits, set membership, nested snapshots, external file storage using `outsource` and `external`, and multiline string comparisons. It utilizes features like `snapshot`, `outsource`, and `external` from the `inline_snapshot` library.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, outsource, external\n\n\ndef test_something():\n    for number in range(5):\n        # testing for numeric limits\n        assert number <= snapshot(4)\n        assert number >= snapshot(0)\n\n    for c in \"hello world\":\n        # test if something is part of a set\n        assert c in snapshot([\"h\", \"e\", \"l\", \"o\", \" \", \"w\", \"r\", \"d\"])\n\n    s = snapshot(\n        {\n            0: {\"square\": 0, \"pow_of_two\": False},\n            1: {\"square\": 1, \"pow_of_two\": True},\n            2: {\"square\": 4, \"pow_of_two\": True},\n            3: {\"square\": 9, \"pow_of_two\": False},\n            4: {\"square\": 16, \"pow_of_two\": True},\n        }\n    )\n\n    for number in range(5):\n        # create sub-snapshots at runtime\n        assert s[number][\"square\"] == number**2\n        assert s[number][\"pow_of_two\"] == (\n            (number & (number - 1) == 0) and number != 0\n        )\n\n    assert outsource(\"large string\\n\" * 1000) == snapshot(\n        external(\"8bf10bdf2c30*.txt\")\n    )\n\n    assert \"generates\\nmultiline\\nstrings\" == snapshot(\n        \"\"\"\\\ngenerates\nmultiline\nstrings\\\n\"\"\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Create Datetime Snapshot Python\nDESCRIPTION: Shows the snapshot creation with a fixed datetime when using `--inline-snapshot=create`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nimport datetime\n\n\ndef get_data():\n    return {\n        \"date\": datetime.datetime.utcnow(),\n        \"payload\": \"some data\",\n    }\n\n\ndef test_function():\n    assert get_data() == snapshot(\n        {\"date\": datetime.datetime(2024, 3, 14, 0, 0), \"payload\": \"some data\"}\n    )\n```\n\n----------------------------------------\n\nTITLE: Fixing Assertions Example Python\nDESCRIPTION: This code snippet demonstrates how inline-snapshot can be used to automatically fix failing assertions in Python code. It shows the original failing assertion and the corrected assertion after using the `--inline-snapshot=fix-assert` option.  The `hl_lines=\"2\"` highlights the corrected line.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/insiders.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test_assert():\n    assert 1 + 1 == 5\n```\n\nLANGUAGE: python\nCODE:\n```\ndef test_assert():\n    assert 1 + 1 == 2\n```\n\n----------------------------------------\n\nTITLE: Create Assertion with Ellipsis Placeholder in Python\nDESCRIPTION: This snippet demonstrates how to use ellipsis (...) within an assert statement for inline-snapshot to automatically create the correct value. The `--inline-snapshot=create` flag is used to trigger the creation of the new assertion value.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/fix_assert.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test_assert():\n    assert 1 + 1 == ...\n\n```\n\n----------------------------------------\n\nTITLE: Snapshot with Comparison (Original)\nDESCRIPTION: This snippet demonstrates using a snapshot value in multiple assertions with comparison operators. The initial value of `value` from `snapshot()` is undefined until `create` or `fix` options are used. The example uses the snapshot as the upper bound in two `assert` statements, `assert 5 <= value` and `assert 6 <= value`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/cmp_snapshot.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    value = snapshot()\n\n    assert 5 <= value\n    assert 6 <= value\n```\n\n----------------------------------------\n\nTITLE: Using F-strings with inline-snapshot in Python\nDESCRIPTION: This code snippet shows how to use f-strings within inline snapshots to replace dynamic parts of a string value. The `snapshot` function is used to assert that the result of `get_error()` matches a snapshot created using an f-string. The example illustrates a limitation where inline-snapshot cannot currently fix string constants within f-strings.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef get_error():\n    # example code which generates an error message\n    return __file__ + \": error at line 5\"\n\n\ndef test_get_error():\n    assert get_error() == snapshot(f\"{__file__}: error at line 5\")\n```\n\n----------------------------------------\n\nTITLE: Inner Snapshots Python\nDESCRIPTION: Demonstrates how to use inner snapshots to create different snapshots depending on the library version.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nfrom my_lib import version, get_schema\n\n\ndef test_function():\n    assert get_schema() == snapshot(\n        [\n            {\n                \"name\": \"var_1\",\n                \"type\": snapshot(\"int\") if version < 2 else snapshot(\"string\"),\n            }\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditional Snapshots v1 Python\nDESCRIPTION: Demonstrates how to use inner snapshots to create different snapshots depending on the library version.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nversion = 1\n\n\ndef get_schema():\n    return [{\"name\": \"var_1\", \"type\": \"int\"}]\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot Configuration - Multiple Format Commands\nDESCRIPTION: This TOML snippet shows how to configure multiple custom format commands for the `inline-snapshot` tool using the `|` operator. The `format-command` is set to \"ruff check --fix-only --stdin-filename {filename} | ruff format --stdin-filename {filename}\", which first checks and fixes with ruff and then formats the Python code. The `{filename}` placeholder allows specifying the filename for formatting options.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/configuration.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.inline-snapshot]\nformat-command=\"ruff check --fix-only --stdin-filename {filename} | ruff format --stdin-filename {filename}\"\n```\n\n----------------------------------------\n\nTITLE: Snapshot Usage - Changed Code\nDESCRIPTION: This example demonstrates what happens when the code changes and the test fails because the result no longer matches the snapshot. The `something()` function now includes a division by 18, resulting in a different value. The test will fail because it expects 28620972 but gets a different result.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef something():\n    return (1548 * 18489) // 18\n\n\ndef test_something():\n    assert something() == snapshot(28620972)\n```\n\n----------------------------------------\n\nTITLE: Trimming shared snapshot variable using inline-snapshot in Python\nDESCRIPTION: This example illustrates the danger of trimming snapshots if they are shared between different tests. If you only run one test, inline-snapshot trims the snapshot according to this specific test, potentially breaking other tests which rely on the original snapshot.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\ns = snapshot(5)\n\n\ndef test_a():\n    assert 2 <= s\n\n\ndef test_b():\n    assert 5 <= s\n```\n\n----------------------------------------\n\nTITLE: GCD Calculation with Trimmed Inline Snapshot Value\nDESCRIPTION: This snippet demonstrates the `--inline-snapshot=trim` option to reduce the maximum number of allowed iterations. It shows how `inline_snapshot` can update the maximum allowed iteration value if it contradicts the original value.  Here, iterations is trimmed from `snapshot(12)` to `snapshot(3)`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/cmp_snapshot.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef gcd(x, y):\n    # use Euclidean Algorithm\n    iterations = 0\n    while y:\n        iterations += 1\n        x, y = y, x % y\n    return abs(x), iterations\n\n\ndef test_gcd():\n    result, iterations = gcd(12, 18)\n\n    assert result == snapshot(6)\n    assert iterations <= snapshot(3)\n```\n\n----------------------------------------\n\nTITLE: Installing Inline Snapshot with pip\nDESCRIPTION: This command installs the inline-snapshot package using pip, the Python package installer. This is the first step to using the library in your Python projects.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install inline-snapshot\n```\n\n----------------------------------------\n\nTITLE: Fixing snapshots with updated values using inline-snapshot in Python\nDESCRIPTION: This snippet presents the corrected version of the failing test, fixing the snapshot values. The assertions now pass, as the values match the snapshot values. hl_lines indicates the lines with updated values.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 8 == snapshot(8)\n\n    assert 8 <= snapshot(8)\n\n    assert 8 in snapshot([5, 8])\n\n    s = snapshot({\"key\": 8})\n    assert 8 == s[\"key\"]\n```\n\n----------------------------------------\n\nTITLE: Snapshot Reuse - Original Code\nDESCRIPTION: This snippet demonstrates reusing a single snapshot across multiple tests. The `result` variable stores the snapshot, and both `test_something()` and `test_something_again()` assert against this single snapshot instance. The initial snapshot value is empty and will be populated during the first test run with `--inline-snapshot=create`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef something():\n    return 21 * 2\n\n\nresult = snapshot()\n\n\ndef test_something():\n    ...\n    assert something() == result\n\n\ndef test_something_again():\n    ...\n    assert something() == result\n```\n\n----------------------------------------\n\nTITLE: Trimming snapshots to minimal values using inline-snapshot in Python\nDESCRIPTION: This snippet illustrates how inline-snapshot trims the snapshots to the minimal required values to pass the assertions. The hl_lines highlights the modified snapshot values.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    assert 2 <= snapshot(2)\n\n    assert 8 in snapshot([8])\n\n    s = snapshot({\"key2\": 2})\n    assert 2 == s[\"key2\"]\n```\n\n----------------------------------------\n\nTITLE: Is in Loops Fix Python\nDESCRIPTION: Shows the correct snapshot after applying `--inline-snapshot=fix`.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, Is\n\n\ndef test_function():\n    for c in \"abc\":\n        assert [c, \"correct\"] == snapshot([Is(c), \"correct\"])\n```\n\n----------------------------------------\n\nTITLE: Disabling Snapshot in CI (Python)\nDESCRIPTION: This snippet shows the default behavior of the `snapshot()` function when inline-snapshot is disabled during CI runs.  `snapshot(x)` simply returns `x`, improving performance and test accuracy.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef snapshot(x):\n    return x\n```\n\n----------------------------------------\n\nTITLE: Capturing Warnings with Snapshotting (Python)\nDESCRIPTION: This snippet shows how to capture warnings and compare them against expected warnings using `inline_snapshot.extra.warns`. The `include_line` parameter controls whether the line number is included in the comparison.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef test_warns():\n    with warns(snapshot([(8, \"UserWarning: some problem\")]), include_line=True):\n        warn(\"some problem\")\n```\n\n----------------------------------------\n\nTITLE: Incorrect Snapshot Usage - Multiple Operations\nDESCRIPTION: This snippet shows an example of incorrect snapshot usage. A single snapshot is used with both `<=` and `==` operators, which is not supported. This will result in a `TypeError` because a snapshot can only be associated with one operation type.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/index.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\ndef test_something():\n    s = snapshot(5)\n    assert 5 <= s\n    assert 5 == s\n```\n\n----------------------------------------\n\nTITLE: Changed Payload Python\nDESCRIPTION: Shows a test failure when the payload changes while using `IsDatetime` to ignore the date.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\nfrom dirty_equals import IsDatetime\nimport datetime\n\n\ndef get_data():\n    return {\n        \"date\": datetime.datetime.utcnow(),\n        \"payload\": \"data changed for some good reason\",\n    }\n\n\ndef test_function():\n    assert get_data() == snapshot(\n        {\n            \"date\": IsDatetime(),\n            \"payload\": \"some data\",\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Deterministic Set Snapshotting (Python)\nDESCRIPTION: This example demonstrates that code generation for sets is now deterministic, ensuring consistent snapshots regardless of the order of elements in the set.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test():\n    assert {1j, 2j, 1, 2, 3} == snapshot({1, 1j, 2, 2j, 3})\n```\n\n----------------------------------------\n\nTITLE: Pydantic v1 and v2 Snapshotting (Python)\nDESCRIPTION: This example shows how to create the same snapshots in both pydantic v1 and v2, using `.dict()` for pydantic v1 to match the structure of snapshots created with inline-snapshot-0.15.0.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass M(BaseModel):\n    name: str\n\n\ndef test_pydantic():\n    m = M(name=\"Tom\")\n    assert m == snapshot(M(name=\"Tom\"))\n    assert m.dict() == snapshot({\"name\": \"Tom\"})\n```\n\n----------------------------------------\n\nTITLE: Enum Implementation Example in _code_repr.py\nDESCRIPTION: This snippet shows the implementation of the `Enum` representation within the `_code_repr.py` file, demonstrating how inline-snapshot customizes the `repr()` behavior for enum objects.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/customize_repr.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('--8<-- \"src/inline_snapshot/_code_repr.py:Enum\"')\n```\n\n----------------------------------------\n\nTITLE: Snapshotting Pydantic Models Multiple Times (Python)\nDESCRIPTION: This snippet illustrates the ability to compare snapshots with pydantic models multiple times within a loop, ensuring consistent behavior.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass A(BaseModel):\n    a: int\n\n\ndef test_something():\n    for _ in [1, 2]:\n        assert A(a=1) == snapshot(A(a=1))\n```\n\n----------------------------------------\n\nTITLE: Incorrectly trimming shared snapshots using inline-snapshot in Python\nDESCRIPTION: Here, the snapshot has been trimmed based on only `test_a()`, leading to a value that makes `test_b()` fail. This illustrates the importance of running the complete test suite when using the trim feature. The hl_lines indicates the line where snapshot variable is trimmed\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\ns = snapshot(2)\n\n\ndef test_a():\n    assert 2 <= s\n\n\ndef test_b():\n    assert 5 <= s\n```\n\n----------------------------------------\n\nTITLE: Outsource in Data Structures with External Data Creation in Python\nDESCRIPTION: This code shows the modified code after running with `--inline-snapshot=create`.  The `snapshot` now contains a list of `external` objects, each referencing a different externally stored data file based on its hash. This enables inline snapshots to work seamlessly with collections of large data.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/outsource.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot, outsource\n\nfrom inline_snapshot import external\n\n\ndef test_something():\n    assert [\n        outsource(\"long text\\n\" * times) for times in [50, 100, 1000]\n    ] == snapshot(\n        [\n            external(\"362ad8374ed6*.txt\"),\n            external(\"5755afea3f8d*.txt\"),\n            external(\"f5a956460453*.txt\"),\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Updating snapshot format with inline-snapshot in Python\nDESCRIPTION: This snippet demonstrates how inline-snapshot can update the format of the snapshot.  hl_lines highlights the updated lines.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/categories.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom inline_snapshot import snapshot\n\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        if not isinstance(other, Vector):\n            return NotImplemented\n        return self.x == other.x and self.y == other.y\n\n    def __repr__(self):\n        # return f\"Vector(x={self.x}, y={self.y})\"\n        return f\"Vector({self.x}, {self.y})\"\n\n\ndef test_something():\n    assert \"a\\nb\\nc\\n\" == snapshot(\n        \"\"\"\\\n    a\n    b\n    c\n    \"\"\"\n    )\n\n    assert 5 == snapshot(5)\n\n    assert Vector(1, 2) == snapshot(Vector(1, 2))\n```\n\n----------------------------------------\n\nTITLE: Conditional Snapshots v2 Python\nDESCRIPTION: Demonstrates how to use inner snapshots to create different snapshots depending on the library version.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/eq_snapshot.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nversion = 2\n\n\ndef get_schema():\n    return [{\"name\": \"var_1\", \"type\": \"string\"}]\n```\n\n----------------------------------------\n\nTITLE: Handling Trailing Whitespaces in Multiline Strings (Python)\nDESCRIPTION: This snippet demonstrates how trailing whitespaces in multiline strings are handled. It showcases the use of `snapshot()` function in testing and the expected output with a newline character at the end of lines with trailing spaces.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test_something():\n    assert \"a   \\nb\\n\" == snapshot(\n        \"\"\"\\\na   \\n\\\nb\n\"\"\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Snapshotting Tuples/Dicts (Python)\nDESCRIPTION: This example demonstrates how the `snapshot()` function previously crashed when used with empty tuples or dictionaries. This has been fixed in later versions.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsnapshot(tuple())\n# or\nsnapshot(dict())\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot with Report Bash\nDESCRIPTION: This bash script automates the process of creating a test file, running pytest with the `--inline-snapshot=report` option, and displaying the output. It sets up a temporary directory, defines a helper function for executing commands, and uses `black` to format the python code. The python code uses inline_snapshot to test assertions and report changes.\nSOURCE: https://github.com/15r10nk/inline-snapshot/blob/main/docs/pytest.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd $(mktemp -d)\nexport -n CI\nexport -n GITHUB_ACTIONS\n\nexport FORCE_COLOR=256\nexport COLUMNS=80\n\nfunction run(){\n    echo -en \"\\x1b[1;34m> \"\n    echo $@\n    echo -en \"\\x1b[0m\"\n    $@\n    echo\n}\n\nblack -q - > test_something.py << EOF\nfrom inline_snapshot import snapshot\n\ndef test_something():\n    assert 1 == snapshot()\n    assert 2 <= snapshot(5)\nEOF\n\nrun pytest test_something.py --inline-snapshot=report\n```"
  }
]