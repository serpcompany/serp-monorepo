[
  {
    "owner": "maplibre",
    "repo": "maplibre-react-native",
    "content": "TITLE: Converting Pixel Point to Geographic Coordinate in MapLibre React Native\nDESCRIPTION: Shows how to use the getCoordinateFromView method to convert a pixel point on the map view to a geographic coordinate. This is useful for interpreting user touch events or positioning elements based on screen coordinates.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/map-view.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst coordinate = await mapViewRef.current?.getCoordinateFromView([100, 100]);\n```\n\n----------------------------------------\n\nTITLE: Complete React Component Example with Custom Headers\nDESCRIPTION: A working example of a React component that adds custom HTTP headers. It demonstrates adding a header within a useEffect hook (which runs once on component mount) and adding another header directly in the component function.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/guides/custom-http-headers.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  useEffect(() => {\n    addCustomHeader(\"Authorization\", \"{auth header}\");\n  }, []);\n\n  addCustomHeader(\"X-Some-Header\", \"my-value\");\n\n  return <MapView style={{ flex: 1 }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering MapView Component in React Native\nDESCRIPTION: This code snippet demonstrates how to import and use the MapView component from @maplibre/maplibre-react-native in a React Native application. It creates a basic map that fills the entire screen.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/getting-started.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { MapView } from \"@maplibre/maplibre-react-native\";\n\nfunction App() {\n  return <MapView style={{ flex: 1 }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Map Snapshots with SnapshotManager in MapLibre React Native\nDESCRIPTION: Examples of using the SnapshotManager.takeSnap method to generate static map images. Demonstrates three different approaches: creating a temp file with specified view parameters, creating a base64 PNG without the Mapbox logo, and creating a snapshot using bounds coordinates.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/snapshot-manager.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// creates a temp file png of base map\nconst uri = await SnapshotManager.takeSnap({\n  centerCoordinate: [-74.12641, 40.797968],\n  width: width,\n  height: height,\n  zoomLevel: 12,\n  pitch: 30,\n  heading: 20,\n  styleURL: StyleURL.Default,\n  writeToDisk: true, // Create a temporary file\n});\n\n// creates base64 png of base map without logo\nconst uri = await SnapshotManager.takeSnap({\n  centerCoordinate: [-74.12641, 40.797968],\n  width: width,\n  height: height,\n  zoomLevel: 12,\n  pitch: 30,\n  heading: 20,\n  styleURL: StyleURL.Default,\n  withLogo: false, // Disable Mapbox logo (Android only)\n});\n\n// creates snapshot with bounds\nconst uri = await SnapshotManager.takeSnap({\n  bounds: [\n    [-74.12641, 40.797968],\n    [-74.143727, 40.772177],\n  ],\n  width: width,\n  height: height,\n  styleURL: StyleURL.Default,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Rendered Features at Point in MapLibre React Native\nDESCRIPTION: This method queries map features at a specific point with optional filtering by expression and layer IDs. It returns an array of rendered map features that intersect with the given point.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/map-view.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis._map.queryRenderedFeaturesAtPoint(\n  [30, 40],\n  [\"==\", \"type\", \"Point\"],\n  [\"id1\", \"id2\"],\n);\n```\n\n----------------------------------------\n\nTITLE: Using fitBounds Camera Control in MapLibre React Native\nDESCRIPTION: Demonstrates different ways to use fitBounds method to adjust camera view with optional padding and animation duration. Shows variations of padding configuration including single value and array-based padding.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/camera.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncameraRef.current?.fitBounds([lng, lat], [lng, lat]);\ncameraRef.current?.fitBounds([lng, lat], [lng, lat], 20, 1000); // padding for all sides\ncameraRef.current?.fitBounds(\n  [lng, lat],\n  [lng, lat],\n  [verticalPadding, horizontalPadding],\n  1000,\n);\ncameraRef.current?.fitBounds(\n  [lng, lat],\n  [lng, lat],\n  [top, right, bottom, left],\n  1000,\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Rendered Features in Rectangle in MapLibre React Native\nDESCRIPTION: This method returns an array of rendered map features that intersect with a given rectangle, with optional filtering by expression and layer IDs. The bbox parameter defines the rectangle's coordinates.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/map-view.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis._map.queryRenderedFeaturesInRect(\n  [30, 40, 20, 10],\n  [\"==\", \"type\", \"Point\"],\n  [\"id1\", \"id2\"],\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Features from VectorSource in TypeScript\nDESCRIPTION: Example showing how to call the features() method on a VectorSource instance to retrieve features from specific layers. This method returns all features that match the query parameters from currently-loaded vector tiles and GeoJSON source tiles.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/sources/vector-source.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvectorSource.features([\"id1\", \"id2\"]);\n```\n\n----------------------------------------\n\nTITLE: Getting Cluster Children in MapLibre React Native\nDESCRIPTION: This snippet demonstrates how to retrieve the child features of a cluster at the next zoom level. It returns a FeatureCollection containing the children of the specified cluster.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/sources/shape-source.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst collection = await shapeSource.getClusterChildren(clusterId);\n```\n\n----------------------------------------\n\nTITLE: Setting Connected State in MapLibre React Native\nDESCRIPTION: Examples of using setConnected() to control the connectivity state. Shows how to enable localhost connections when device is offline and how to block all style/source requests.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/mlrn-module.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetConnected(true);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetConnected(false);\n```\n\n----------------------------------------\n\nTITLE: Converting Geographic Coordinate to Pixel Point in MapLibre React Native\nDESCRIPTION: Demonstrates how to use the getPointInView method to convert a geographic coordinate to a pixel point on the map view. This method is useful for positioning overlays or determining screen positions of map features.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/map-view.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst pointInView = await mapViewRef.current?.getPointInView([\n  -37.81707, 144.949901,\n]);\n```\n\n----------------------------------------\n\nTITLE: Camera Component Method for Fitting Map Bounds in MapLibre React Native\nDESCRIPTION: The fitBounds() method transitions the map camera to fit the specified northeast and southwest boundaries. It accepts optional padding and animation duration parameters to customize the transition effect.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/camera.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `fitBounds(ne, sw, [padding], [animationDuration])`\n\nMap camera transitions to fit provided bounds\n```\n\n----------------------------------------\n\nTITLE: Getting Cluster Expansion Zoom Level in MapLibre React Native\nDESCRIPTION: This code retrieves the zoom level needed to expand a cluster. It takes a cluster feature as input and returns a Promise that resolves to the zoom level where the cluster expands.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/sources/shape-source.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst zoom = await shapeSource.getClusterExpansionZoom(clusterId);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Features from a ShapeSource in MapLibre React Native\nDESCRIPTION: This snippet demonstrates how to retrieve all features from a ShapeSource that match optional query parameters. The features method returns data regardless of whether the feature is currently rendered on the map.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/sources/shape-source.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nshapeSource.features();\n```\n\n----------------------------------------\n\nTITLE: Using SymbolLayer Component in MapLibre React Native\nDESCRIPTION: The SymbolLayer component renders icon and text labels at points or along lines on the map. It accepts customizable style attributes and an optional sourceID property.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<SymbolLayer \n  style={...} // SymbolLayerStyle\n  sourceID={...} // Optional, defaults to MLRNModule.StyleSource.DefaultSourceID\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating an Offline Map Pack with MapLibre React Native\nDESCRIPTION: This code demonstrates how to create and register an offline map pack that downloads the resources needed for offline use in a specified region with zoom levels.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst progressListener = (offlineRegion, status) =>\n  console.log(offlineRegion, status);\nconst errorListener = (offlineRegion, err) => console.log(offlineRegion, err);\n\nawait OfflineManager.createPack(\n  {\n    name: \"offlinePack\",\n    styleURL: \"https://demotiles.maplibre.org/tiles/tiles.json\",\n    minZoom: 14,\n    maxZoom: 20,\n    bounds: [\n      [neLng, neLat],\n      [swLng, swLat],\n    ],\n  },\n  progressListener,\n  errorListener,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Offline Packs in MapLibre React Native\nDESCRIPTION: Shows how to get all current offline packs stored in the database.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst offlinePacks = await OfflineManager.getPacks();\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Offline Pack Events in MapLibre React Native\nDESCRIPTION: Shows how to unsubscribe listeners associated with an offline pack. Recommended to call this in componentWillUnmount.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nOfflineManager.unsubscribe(\"packName\");\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Offline Pack Events in MapLibre React Native\nDESCRIPTION: Demonstrates how to subscribe to download status and error events for a specific offline pack. Note that createPack calls this internally if listeners are provided.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst progressListener = (offlinePack, status) =>\n  console.log(offlinePack, status);\nconst errorListener = (offlinePack, err) => console.log(offlinePack, err);\nOfflineManager.subscribe(\"packName\", progressListener, errorListener);\n```\n\n----------------------------------------\n\nTITLE: Using ShapeSource Component in MapLibre React Native\nDESCRIPTION: Example showing how to use the ShapeSource component to supply vector shapes to a map. It demonstrates that the shape can be provided either as a URL or as a GeoJSON object.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/sources/shape-source.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ShapeSource />\n```\n\n----------------------------------------\n\nTITLE: Setting Source Visibility in MapLibre React Native\nDESCRIPTION: This method sets the visibility of all layers referencing a specified source ID and/or source layer ID. It's useful for showing or hiding groups of related layers at once.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/map-view.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait this._map.setSourceVisibility(false, \"composite\", \"building\");\n```\n\n----------------------------------------\n\nTITLE: Resetting the Database in MapLibre React Native\nDESCRIPTION: Demonstrates how to delete the existing database (including ambient cache and offline packs) and reinitialize it.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nawait OfflineManager.resetDatabase();\n```\n\n----------------------------------------\n\nTITLE: Using flyTo Camera Control in MapLibre React Native\nDESCRIPTION: Shows how to use flyTo method to animate camera movement to new coordinates with optional animation duration. The camera will fly to the specified coordinates using a smooth animation.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/camera.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncameraRef.current?.flyTo([lng, lat]);\ncameraRef.current?.flyTo([lng, lat], 12000);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Translation Anchor in MapLibre React Native\nDESCRIPTION: Controls the frame of reference for textTranslate. It can be set to 'map' or 'viewport'. It requires both textField and textTranslate properties and supports zoom as an expression parameter.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_57\n\nLANGUAGE: markup\nCODE:\n```\n<dl>\n    <dt>Type</dt>\n    <dd>\n        <code>enum</code>\n    </dd>\n        <dt>Default Value</dt>\n        <dd><code>map</code></dd>\n    <dt>Supported Values</dt>\n    <dd>\n        <ul>\n                <li>\n                    <code>map</code>: The text is translated relative to the map.\n                </li>\n                <li>\n                    <code>viewport</code>: The text is translated relative to the viewport.\n                </li>\n        </ul>\n    </dd>\n        <dt>Requires</dt>\n        <dd><code>textField, textTranslate</code></dd>\n        <dt>Expression Parameters</dt>\n        <dd><code>zoom</code></dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Using the Annotation Component in MapLibre React Native\nDESCRIPTION: This is the API documentation for the Annotation component that shows all available props and methods. The component allows adding annotations to maps with options for coordinates, styling, animation, and custom icons.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/annotation.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Annotation />\n```\n\n----------------------------------------\n\nTITLE: PointAnnotation Component Type Definition\nDESCRIPTION: TypeScript interface showing the available props for the PointAnnotation component. This component renders a single point annotation on a map with support for custom styling, dragging, and interaction.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/point-annotation.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PointAnnotationProps {\n  id: string;\n  title?: string;\n  snippet?: string;\n  selected?: boolean;\n  draggable?: boolean;\n  coordinate: [number, number];\n  anchor?: {\n    x: number;\n    y: number;\n  };\n  children: ReactElement | [ReactElement, ReactElement];\n  style?: ViewProps[\"style\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing the Ambient Cache in MapLibre React Native\nDESCRIPTION: Demonstrates how to erase resources from the ambient cache to decrease the amount of space that map resources take up on the device.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nawait OfflineManager.clearAmbientCache();\n```\n\n----------------------------------------\n\nTITLE: RasterSource Component Usage Example (JSX/TSX)\nDESCRIPTION: Example declaration of the RasterSource component showing the available props and their types. This component is used to configure raster tile sources in MapLibre React Native maps.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/sources/raster-source.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<RasterSource\n  id=\"source-id\"\n  url=\"https://example.com/tilejson.json\"\n  tileUrlTemplates={['https://example.com/raster-tiles/{z}/{x}/{y}.png']}\n  minZoomLevel={0}\n  maxZoomLevel={22}\n  tileSize={256}\n  tms={false}\n  attribution=\"© Example Attribution\"\n/>\n```\n\n----------------------------------------\n\nTITLE: ImageSource Component Props Interface\nDESCRIPTION: Defines the required and optional properties for the ImageSource component including id, url, coordinates and children. The component is used to display georeferenced raster images that scale and rotate with map interactions.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/sources/image-source.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ImageSourceProps {\n  id: string;  // Required unique identifier\n  url?: number | string;  // Source image URL\n  coordinates?: tuple;  // Image corner coordinates\n  children?: ReactNode;  // Child components\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Leaves in MapLibre React Native\nDESCRIPTION: This method retrieves a FeatureCollection from a cluster with pagination support. It requires a cluster feature, a limit for the number of points to return, and an offset for pagination.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/sources/shape-source.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst collection = await shapeSource.getClusterLeaves(clusterId, limit, offset);\n```\n\n----------------------------------------\n\nTITLE: Setting iconTextFit Property in MapLibre React Native\nDESCRIPTION: Controls how the icon is scaled to fit around associated text. Can be set to none, width, height, or both. Requires both iconImage and textField properties.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nenum\n```\n\n----------------------------------------\n\nTITLE: Using moveTo Camera Control in MapLibre React Native\nDESCRIPTION: Demonstrates moveTo method usage for moving camera to new coordinates while maintaining zoom level. Shows both immediate movement and eased animation with duration.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/camera.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncameraRef.current?.moveTo([lng, lat], 200); // eases camera to new location based on duration\ncameraRef.current?.moveTo([lng, lat]); // snaps camera to new location without any easing\n```\n\n----------------------------------------\n\nTITLE: Setting Log Callback in MapLibre React Native\nDESCRIPTION: Method to customize logging behavior by providing a callback function. The callback receives a log object containing message, level, and tag properties. Returns falsy value to fallback to default logging.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/logger.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsetLogCallback(LogCallback: (logObject: { message: String, level: LogLevel, tag: String }) => any)\n```\n\n----------------------------------------\n\nTITLE: Setting iconImage Property in MapLibre React Native\nDESCRIPTION: Specifies the name of image in sprite to use for drawing an image background. This is a required property for most icon-related properties.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nresolvedImage\n```\n\n----------------------------------------\n\nTITLE: Using CircleLayer Component in MapLibre React Native\nDESCRIPTION: Example of how to use the CircleLayer component in MapLibre React Native applications for rendering circle elements on maps. The CircleLayer renders one or more filled circles and supports various customizable style attributes.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/circle-layer.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CircleLayer />\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of MapLibre React Native Annotation Features\nDESCRIPTION: Markdown table comparing features and implementations of different annotation types in MapLibre React Native, including support for images, React Native views, interactions, z-index control, clustering, and style expressions.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/guides/annotations.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature                | `CircleLayer`                                                                                                                                                | `SymbolLayer`                                                                                                                                                | `PointAnnotation`                                                                                                                                                         | `MarkerView`                                                                                                                                                                      |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Can use Images         | &cross;                                                                                                                                                      | &check;                                                                                                                                                      | &cross;                                                                                                                                                                   | &cross;                                                                                                                                                                           |\n| `children` RN View     | &cross;                                                                                                                                                      | iOS: Static                                                                                                                                                  | iOS: Interactive<br/>Android: Static                                                                                                                                      | Interactive                                                                                                                                                                       |\n| Interactions           | Click                                                                                                                                                        | Click                                                                                                                                                        | iOS: Complete<br/>Android: Click, drag, callout                                                                                                                           | Only `children` RN View is interactive                                                                                                                                            |\n| Control z-index        | &check;                                                                                                                                                      | &check;                                                                                                                                                      | iOS: Always on top<br/>Android: Not available                                                                                                                             | Always on top                                                                                                                                                                     |\n| Clustering             | &check;                                                                                                                                                      | &check;                                                                                                                                                      | &cross;                                                                                                                                                                   | &cross;                                                                                                                                                                           |\n| Style with Expressions | &check;                                                                                                                                                      | &check;                                                                                                                                                      | &cross;                                                                                                                                                                   | &cross;                                                                                                                                                                           |\n| Android Implementation | [`CircleLayer`](https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.layers/-circle-layer/index.html) | [`SymbolLayer`](https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.layers/-symbol-layer/index.html) | [`annotation.Symbol`](https://github.com/maplibre/maplibre-plugins-android/blob/main/plugin-annotation/src/main/java/org/maplibre/android/plugins/annotation/Symbol.java) | [`annotation.MarkerView`](https://github.com/maplibre/maplibre-plugins-android/blob/main/plugin-markerview/src/main/java/org/maplibre/android/plugins/markerview/MarkerView.java) |\n| iOS Implementation     | [`MLNCircleStyleLayer`](https://maplibre.org/maplibre-native/ios/latest/documentation/maplibre/mlncirclestylelayer/)                                         | [`MLNSymbolStyleLayer`](https://maplibre.org/maplibre-native/ios/latest/documentation/maplibre/mlnsymbolstylelayer/)                                         | [`MLNAnnotationView`](https://maplibre.org/maplibre-native/ios/latest/documentation/maplibre/mlnannotationview/)                                                          | [`MLNAnnotationView`](https://maplibre.org/maplibre-native/ios/latest/documentation/maplibre/mlnannotationview/)                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Line Offset Configuration\nDESCRIPTION: Controls the line's offset position relative to its direction. For linear features, positive values offset right and negative left. For polygons, positive values create insets, negative create outsets.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/line-layer.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  lineOffset: number; // Default: 0\n  lineOffsetTransition: { duration: number, delay: number }; // Default: { duration: 300, delay: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Visible Bounds of MapLibre React Native Map\nDESCRIPTION: Demonstrates how to get the coordinate bounds (northeast and southwest corners) of the currently visible map area using the getVisibleBounds method. This is useful for determining the extent of the map that the user can see.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/map-view.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst visibleBounds = await this._map.getVisibleBounds();\n```\n\n----------------------------------------\n\nTITLE: Updating MapView Style Props in MapLibre React Native\nDESCRIPTION: The styleURL and styleJSON props have been unified into a single mapStyle prop for controlling the MapView style.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/migrations/v10.md#2025-04-19_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n<MapView\n-  styleURL=\"https://some-style-url\"\n+  mapStyle=\"https://some-style-url\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in MapLibre React Native\nDESCRIPTION: Method to configure the logging verbosity level. Accepts a string parameter that can be 'error', 'warning', 'info', 'debug', or 'verbose'.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/logger.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetLogLevel(LogLevel: \"error\" | \"warning\" | \"info\" | \"debug\" | \"verbose\")\n```\n\n----------------------------------------\n\nTITLE: Using BackgroundLayer Component in MapLibre React Native\nDESCRIPTION: Example of the BackgroundLayer component with its available props. This component allows customizing the map background with style attributes and optionally specifying a sourceID.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/background-layer.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<BackgroundLayer \n  style={{\n    visibility: 'visible',\n    backgroundColor: '#000000',\n    backgroundPattern: 'pattern-name',\n    backgroundOpacity: 1\n  }}\n  sourceID={MLRNModule.StyleSource.DefaultSourceID}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting textField Property in MapLibre React Native\nDESCRIPTION: Specifies the value to use for a text label. If a plain string is provided, it will be treated as formatted text with default/inherited formatting options.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nformatted\n```\n\n----------------------------------------\n\nTITLE: Setting iconOffset Property in MapLibre React Native\nDESCRIPTION: Specifies the offset distance of icon from its anchor. Positive values move right and down, negative values move left and up. Each component is multiplied by iconSize for final pixel offset.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnumber[]\n```\n\n----------------------------------------\n\nTITLE: Invalidating an Offline Pack in MapLibre React Native\nDESCRIPTION: Shows how to invalidate a specified offline pack to check if local tiles match those from the server and update them if needed, which is more efficient than re-downloading the entire pack.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nawait OfflineManager.invalidatePack(\"packName\");\n```\n\n----------------------------------------\n\nTITLE: Using FillLayer Component in MapLibre React Native\nDESCRIPTION: Example usage of the FillLayer component to render filled polygons on a map. The component accepts style properties and a sourceID to customize the appearance and data source of the fill layer.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/fill-layer.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FillLayer \n  style={customFillLayerStyle} \n  sourceID=\"custom-source\" \n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Anchor in MapLibre React Native\nDESCRIPTION: Defines which part of the text is placed closest to the anchor. Default is center. Requires textField and is disabled by textVariableAnchor. Supports camera style functions.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\ncenter\n```\n\n----------------------------------------\n\nTITLE: Using zoomTo Camera Control in MapLibre React Native\nDESCRIPTION: Shows how to use zoomTo method to change the camera zoom level with optional animation duration. The method allows smooth transitions between zoom levels.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/camera.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncameraRef.current?.zoomTo(16);\ncameraRef.current?.zoomTo(16, 100);\n```\n\n----------------------------------------\n\nTITLE: FillExtrusionLayer Component Usage Example\nDESCRIPTION: Basic structure of the FillExtrusionLayer component. This component renders one or more 3D extruded polygons on the map with customizable style attributes and optional source ID.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/fill-extrusion-layer.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FillExtrusionLayer \n  style={/* FillExtrusionLayerStyle object */} \n  sourceID={/* Optional source ID */} \n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Size in MapLibre React Native\nDESCRIPTION: Font size property measured in pixels. The minimum allowed value is 0 and the default is 16. Requires textField to be set and supports zoom and feature as expression parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n16\n```\n\n----------------------------------------\n\nTITLE: Using MarkerView Component in MapLibre React Native\nDESCRIPTION: Example usage of the MarkerView component that places an interactive React Native marker on a map. The component is based on the MarkerView plugin on Android and PointAnnotation on iOS.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/marker-view.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `<MarkerView />`\n\nMarkerView allows you to place a interactive react native marker to the map.<br/><br/>If you have static view consider using PointAnnotation or SymbolLayer they'll offer much better performance<br/>.<br/>This is based on [MakerView plugin](https://github.com/maplibre/maplibre-plugins-android/tree/main/plugin-markerview) on Android<br/>and PointAnnotation on iOS.\n```\n\n----------------------------------------\n\nTITLE: LineLayer Component Basic Usage\nDESCRIPTION: Example structure showing the usage of LineLayer component with its two main props - style and sourceID.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/line-layer.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LineLayer \n  style={lineLayerStyle} \n  sourceID={MLRNModule.StyleSource.DefaultSourceID} \n/>\n```\n\n----------------------------------------\n\nTITLE: Using HeatmapLayer JSX Component in MapLibre React Native\nDESCRIPTION: Basic usage example of the HeatmapLayer component, which renders one or more filled circles on the map as a heatmap visualization. The component accepts style attributes and sourceID as props.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/heatmap-layer.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HeatmapLayer />\n```\n\n----------------------------------------\n\nTITLE: Setting Text Halo Blur in MapLibre React Native\nDESCRIPTION: Specifies the halo's fadeout distance towards the outside. It requires the textField property and supports zoom, feature, and feature-state as expression parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_53\n\nLANGUAGE: markup\nCODE:\n```\n<dl>\n    <dt>Type</dt>\n    <dd>\n        <code>number</code>\n    </dd>\n        <dt>Default Value</dt>\n        <dd><code>0</code></dd>\n        <dt>Units</dt>\n        <dd><code>pixels</code></dd>\n        <dt>Minimum</dt>\n        <dd><code>0</code></dd>\n        <dt>Requires</dt>\n        <dd><code>textField</code></dd>\n        <dt>Expression Parameters</dt>\n        <dd><code>zoom, feature, feature-state</code></dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Zoom Level in MapLibre React Native\nDESCRIPTION: This method returns the current zoom level of the map view. It's an asynchronous function that returns a promise resolving to the zoom value.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/map-view.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst zoom = await this._map.getZoom();\n```\n\n----------------------------------------\n\nTITLE: MapView Component Declaration\nDESCRIPTION: React Native component import header showing MapView component definition. This is noted as auto-generated from the source TypeScript file.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/map-view.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `<MapView />`\n```\n\n----------------------------------------\n\nTITLE: Defining Text Halo Color in MapLibre React Native\nDESCRIPTION: Specifies the color of the text's halo, which helps it stand out from backgrounds. It requires the textField property and supports zoom, feature, and feature-state as expression parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_49\n\nLANGUAGE: markup\nCODE:\n```\n<dl>\n    <dt>Type</dt>\n    <dd>\n        <code>color</code>\n    </dd>\n        <dt>Default Value</dt>\n        <dd><code>rgba(0, 0, 0, 0)</code></dd>\n        <dt>Requires</dt>\n        <dd><code>textField</code></dd>\n        <dt>Expression Parameters</dt>\n        <dd><code>zoom, feature, feature-state</code></dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Configuring MapLibre Plugin in Expo TypeScript\nDESCRIPTION: This snippet demonstrates how to customize the MapLibre React Native plugin in an Expo project using TypeScript. It shows how to set native versions for both Android and iOS platforms.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/library-customizations.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MapLibrePluginProps } from \"@maplibre/maplibre-react-native\";\n\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  plugins: [\n    [\n      \"@maplibre/maplibre-react-native\",\n      {\n        android: {\n          nativeVersion: \"x.x.x\",\n        },\n        ios: {\n          nativeVersion: \"x.x.x\",\n        },\n      } as MapLibrePluginProps,\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Event Throttle in MapLibre React Native\nDESCRIPTION: Shows how to set the period (in milliseconds) at which download status events will be sent over the React Native bridge. Default is 500ms.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nOfflineManager.setProgressEventThrottle(500);\n```\n\n----------------------------------------\n\nTITLE: Setting textPitchAlignment Property in MapLibre React Native\nDESCRIPTION: Controls the orientation of text when map is pitched. Can be set to map, viewport, or auto (matching text-rotation-alignment). Requires the textField property.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nenum\n```\n\n----------------------------------------\n\nTITLE: Deleting an Offline Pack in MapLibre React Native\nDESCRIPTION: Demonstrates how to unregister an offline pack and free resources that are no longer required by any remaining packs.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nawait OfflineManager.deletePack(\"packName\");\n```\n\n----------------------------------------\n\nTITLE: Setting Text Radial Offset in MapLibre React Native\nDESCRIPTION: Radial offset of text in the direction of the symbol's anchor, measured in ems. Default value is 0. Useful with textVariableAnchor and requires textField to be set.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n0\n```\n\n----------------------------------------\n\nTITLE: Images Component Props Table - Markdown\nDESCRIPTION: Markdown table defining the props available for the Images component, including their types, default values, requirements, and descriptions.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/images.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop                |    Type     | Default | Required | Description                                                                                                                                                                                                                                                 |\n| ------------------- | :---------: | :-----: | :------: | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `images`            |   `shape`   | `none`  | `false`  | Specifies the external images in key-value pairs required for the shape source.<br/>Keys are names - see iconImage expressions, values can be either urls-s objects<br/>with format `{uri: 'http://...'}` or `require('image.png')` or `import \"image.png\"` |\n| `  [object Object]` |   `union`   | `none`  |  `true`  | FIX ME NO DESCRIPTION                                                                                                                                                                                                                                       |\n| `nativeAssetImages` |   `Array`   | `none`  | `false`  | If you have an asset under Image.xcassets on iOS and the drawables directory on android<br/>you can specify an array of string names with assets as the key `['pin']`.                                                                                      |\n| `id`                |  `string`   | `none`  | `false`  | FIX ME NO DESCRIPTION                                                                                                                                                                                                                                       |\n| `children`          | `ReactNode` | `none`  | `false`  | FIX ME NO DESCRIPTION                                                                                                                                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Text Offset Property Definition in MapLibre React Native\nDESCRIPTION: The textOffset property controls the offset distance of text from its anchor, with positive values indicating right and down. When used with textVariableAnchor, input values are taken as absolute values.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n0,0\n```\n\n----------------------------------------\n\nTITLE: Installing MapLibre React Native with Expo\nDESCRIPTION: Command to install the MapLibre React Native package using Expo's installation tool\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/expo.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @maplibre/maplibre-react-native\n```\n\n----------------------------------------\n\nTITLE: Defining RasterLayer Component Props in React Native\nDESCRIPTION: This code snippet defines the props for the RasterLayer component, including style and sourceID. The style prop is of type RasterLayerStyle and is used for customizing the layer's appearance.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/raster-layer.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n# `<RasterLayer />`\n\n## Props\n\n| Prop       |         Type          |                 Default                  | Required | Description                   |\n| ---------- | :-------------------: | :--------------------------------------: | :------: | ----------------------------- |\n| `style`    |  `RasterLayerStyle`   |                  `none`                  | `false`  | Customizable style attributes |\n| `sourceID` | `FIX ME UNKNOWN TYPE` | `MLRNModule.StyleSource.DefaultSourceID` | `false`  | FIX ME NO DESCRIPTION         |\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Headers in iOS AppDelegate\nDESCRIPTION: Example of how to initialize custom HTTP headers in iOS by including the header file, initializing headers to enable method swizzling, and optionally adding global headers. This should be implemented in the AppDelegate.m file's application:didFinishLaunchingWithOptions: method.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/guides/custom-http-headers.md#2025-04-19_snippet_0\n\nLANGUAGE: objectivec\nCODE:\n```\n// (1) Include the header file\n#import \"MLRNCustomHeaders.h\"\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\n                                                   moduleName:@\"SampleApp\"\n                                            initialProperties:nil];\n  // (2) Init headers, add swizzle method\n  [[MLRNCustomHeaders sharedInstance] initHeaders];\n  // (3*) Optionally you can add some global headers here\n  [[MLRNCustomHeaders sharedInstance] addHeader:@\"IP\" forHeaderName:@\"X-For-Real\"];\n\n  ...\n  return YES;\n}\n\n...\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Maximum Width in MapLibre React Native\nDESCRIPTION: Maximum line width for text wrapping, measured in ems. Default value is 10 with a minimum of 0. Requires textField and supports camera style functions with zoom and feature parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n10\n```\n\n----------------------------------------\n\nTITLE: Removing a Custom HTTP Header in TypeScript\nDESCRIPTION: Example of removing a previously added custom HTTP header using the removeCustomHeader function in TypeScript. This function takes the header name to be removed as a parameter.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/guides/custom-http-headers.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nremoveCustomHeader(\"Authorization\");\n```\n\n----------------------------------------\n\nTITLE: Using setCamera Advanced Configuration in MapLibre React Native\nDESCRIPTION: Demonstrates advanced camera control using setCamera method with configuration object. Shows both single update and multiple sequential camera updates using stops array.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/camera.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncameraRef.current?.setCamera({\n  centerCoordinate: [lng, lat],\n  zoomLevel: 16,\n  animationDuration: 2000,\n});\n\ncameraRef.current?.setCamera({\n  stops: [\n    { pitch: 45, animationDuration: 200 },\n    { heading: 180, animationDuration: 300 },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Keep Upright in MapLibre React Native\nDESCRIPTION: Boolean property that determines if text may be flipped vertically to prevent upside-down rendering. Default is true. Requires textField and supports zoom as an expression parameter.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Line Pattern Configuration\nDESCRIPTION: Specifies sprite image for drawing patterned lines. Image width must be power of 2 for seamless patterns.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/line-layer.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  linePattern: resolvedImage;\n  linePatternTransition: { duration: number, delay: number }; // Default: { duration: 300, delay: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating the Ambient Cache in MapLibre React Native\nDESCRIPTION: Shows how to force revalidation of tiles in the ambient cache and download fresh versions from the server, which is the recommended method for clearing the cache.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nawait OfflineManager.invalidateAmbientCache();\n```\n\n----------------------------------------\n\nTITLE: Setting Raster Opacity for RasterLayer in React Native\nDESCRIPTION: This code snippet details the 'rasterOpacity' style property for the RasterLayer component. It controls the opacity of the raster image and can be set between 0 and 1.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/raster-layer.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `rasterOpacity`\n\nThe opacity at which the image will be drawn.\n\n<dl>\n    <dt>Type</dt>\n    <dd>\n        <code>number</code>\n    </dd>\n        <dt>Default Value</dt>\n        <dd><code>1</code></dd>\n        <dt>Minimum</dt>\n        <dd><code>0</code></dd>\n        <dt>Maximum</dt>\n        <dd><code>1</code></dd>\n        <dt>Expression Parameters</dt>\n        <dd><code>zoom</code></dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Line Gradient Configuration\nDESCRIPTION: Defines color gradient for line features. Only works with GeoJSON sources having lineMetrics enabled.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/line-layer.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  lineGradient: color;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Dependencies\nDESCRIPTION: Commands to navigate to iOS directory and install CocoaPods dependencies.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/react-native.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\n```\n\n----------------------------------------\n\nTITLE: Setting iconTextFitPadding Property in MapLibre React Native\nDESCRIPTION: Specifies additional padding area around dimensions determined by iconTextFit, in clockwise order: top, right, bottom, left. Requires both iconImage and textField properties.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnumber[]\n```\n\n----------------------------------------\n\nTITLE: Setting Text Line Height in MapLibre React Native\nDESCRIPTION: Leading value for multiline text, measured in ems. Default value is 1.2. Requires textField to be set and supports zoom as an expression parameter.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n1.2\n```\n\n----------------------------------------\n\nTITLE: Setting LocationManager Running State for UserLocation Component\nDESCRIPTION: Method to control whether the LocationManager should be listening for location updates. The location manager starts automatically when either onUpdate or visible props are set.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/user-location.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetLocationManager({\n  running,\n}: {\n  running: boolean;\n})\n```\n\n----------------------------------------\n\nTITLE: Setting iconPitchAlignment Property in MapLibre React Native\nDESCRIPTION: Controls the orientation of icon when map is pitched. Can be set to map, viewport, or auto (matching icon-rotation-alignment). Requires the iconImage property.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nenum\n```\n\n----------------------------------------\n\nTITLE: Specifying Text Font in MapLibre React Native\nDESCRIPTION: Font stack property for displaying text. Requires textField to be set. Supports camera style functions and can use zoom and feature as expression parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nOpen Sans Regular,Arial Unicode MS Regular\n```\n\n----------------------------------------\n\nTITLE: Setting Text Padding in MapLibre React Native\nDESCRIPTION: Size of additional area around the text bounding box for detecting symbol collisions, measured in pixels. Default is 2 with minimum of 0. Requires textField to be set.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n2\n```\n\n----------------------------------------\n\nTITLE: Running Expo App Commands\nDESCRIPTION: Commands for building and running the Expo example application on different platforms\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn examples:expo android\nyarn examples:expo ios\nyarn examples:expo start\nyarn examples:expo purge\n```\n\n----------------------------------------\n\nTITLE: Line Blur Configuration\nDESCRIPTION: Applies blur effect to lines measured in pixels. Includes transition properties for smooth animations.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/line-layer.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  lineBlur: number; // Default: 0, Minimum: 0\n  lineBlurTransition: { duration: number, delay: number }; // Default: { duration: 300, delay: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Color Property Definition in MapLibre React Native\nDESCRIPTION: The textColor property sets the color of text elements. Default color is black (#000000).\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n#000000\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Ambient Cache Size in MapLibre React Native\nDESCRIPTION: Shows how to set the maximum size of the ambient cache in bytes. Setting to 0 disables the ambient cache. May be computationally expensive if decreasing the size.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nawait OfflineManager.setMaximumAmbientCacheSize(5000000);\n```\n\n----------------------------------------\n\nTITLE: Line Dash Pattern Configuration\nDESCRIPTION: Defines alternating dash and gap lengths for creating dashed lines. Lengths are scaled by line width. Note: Only works at integer zoom levels.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/line-layer.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  lineDasharray: number[]; // Minimum: 0\n  lineDasharrayTransition: { duration: number, delay: number }; // Default: { duration: 300, delay: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Halo Width in MapLibre React Native\nDESCRIPTION: Specifies the distance of halo to the font outline. The maximum text halo width is 1/4 of the fontSize. It requires the textField property and supports zoom, feature, and feature-state as expression parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_51\n\nLANGUAGE: markup\nCODE:\n```\n<dl>\n    <dt>Type</dt>\n    <dd>\n        <code>number</code>\n    </dd>\n        <dt>Default Value</dt>\n        <dd><code>0</code></dd>\n        <dt>Units</dt>\n        <dd><code>pixels</code></dd>\n        <dt>Minimum</dt>\n        <dd><code>0</code></dd>\n        <dt>Requires</dt>\n        <dd><code>textField</code></dd>\n        <dt>Expression Parameters</dt>\n        <dd><code>zoom, feature, feature-state</code></dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Text Opacity Property Definition in MapLibre React Native\nDESCRIPTION: The textOpacity property sets the opacity level for text. Values range from 0 (transparent) to 1 (opaque). Default is 1.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS Podfile Configuration\nDESCRIPTION: Required modification to the iOS Podfile to add MapLibre React Native post-installation hook.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/react-native.md#2025-04-19_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\npost_install do |installer|\n  # Other post install hooks...\n+ $MLRN.post_install(installer)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Letter Spacing in MapLibre React Native\nDESCRIPTION: Text tracking amount measured in ems. Default value is 0. Requires textField to be set and supports camera style functions with zoom and feature parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n0\n```\n\n----------------------------------------\n\nTITLE: Icon Translate Property Definition in MapLibre React Native\nDESCRIPTION: The iconTranslate property sets the distance an icon's anchor is moved from its original placement. Positive values move right and down. Default is no translation.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n0,0\n```\n\n----------------------------------------\n\nTITLE: Running React Native App Commands\nDESCRIPTION: Commands for building, running and managing the React Native example application\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn examples:react-native android\nyarn examples:react-native ios:pod-install\nyarn examples:react-native ios\nyarn examples:react-native start\n```\n\n----------------------------------------\n\nTITLE: Setting iconPadding Property in MapLibre React Native\nDESCRIPTION: Defines the size of additional area around the icon bounding box used for detecting symbol collisions. Measured in pixels and requires the iconImage property.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnumber[]\n```\n\n----------------------------------------\n\nTITLE: Setting Text Translation in MapLibre React Native\nDESCRIPTION: Specifies the distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up. It requires the textField property and supports zoom as an expression parameter.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_55\n\nLANGUAGE: markup\nCODE:\n```\n<dl>\n    <dt>Type</dt>\n    <dd>\n        <code>number[]</code>\n    </dd>\n        <dt>Default Value</dt>\n        <dd><code>0,0</code></dd>\n        <dt>Units</dt>\n        <dd><code>pixels</code></dd>\n        <dt>Requires</dt>\n        <dd><code>textField</code></dd>\n        <dt>Expression Parameters</dt>\n        <dd><code>zoom</code></dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Icon Opacity Property Definition in MapLibre React Native\nDESCRIPTION: The iconOpacity property sets the opacity level for icons. Values range from 0 (transparent) to 1 (opaque). Default is 1.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Annotation Component Method Usage\nDESCRIPTION: Documentation for the onPress method of the Annotation component which handles press events on annotations. The method takes an OnPressEvent parameter.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/annotation.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nonPress(event)\n```\n\n----------------------------------------\n\nTITLE: Defining Callout Component Props in Markdown\nDESCRIPTION: This code snippet defines a markdown table that lists the props for the Callout component. It includes prop names, types, default values, whether they are required, and descriptions for each prop.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/callout.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop             |    Type     | Default | Required | Description                                                                |\n| ---------------- | :---------: | :-----: | :------: | -------------------------------------------------------------------------- |\n| `title`          |  `string`   | `none`  | `false`  | String that get's displayed in the default callout.                        |\n| `style`          | `ViewStyle` | `none`  | `false`  | Style property for the Animated.View wrapper, apply animations to this     |\n| `containerStyle` | `ViewStyle` | `none`  | `false`  | Style property for the native MLRNCallout container, set at your own risk. |\n| `contentStyle`   | `ViewStyle` | `none`  | `false`  | Style property for the content bubble.                                     |\n| `tipStyle`       | `ViewStyle` | `none`  | `false`  | Style property for the triangle tip under the content.                     |\n| `textStyle`      | `ViewStyle` | `none`  | `false`  | Style property for the title in the content bubble.                        |\n```\n\n----------------------------------------\n\nTITLE: Light Transition Properties\nDESCRIPTION: Default transition configuration for light property changes, specifying duration and delay in milliseconds.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/light.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  duration: 300,\n  delay: 0\n}\n```\n\n----------------------------------------\n\nTITLE: MarkerView Component Props Table in Markdown\nDESCRIPTION: Markdown table documenting all available props for the MarkerView component, including types, default values, requirements, and descriptions for each property.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/marker-view.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop           |      Type      |       Default        | Required | Description                                                                                                                                                                                                                                                                                                                                                            |\n| -------------- | :------------: | :------------------: | :------: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `coordinate`   |    `Array`     |        `none`        |  `true`  | The center point (specified as a map coordinate) of the marker.<br/>See also #anchor.                                                                                                                                                                                                                                                                                  |\n| `anchor`       |    `shape`     | `{ x: 0.5, y: 0.5 }` | `false`  | Specifies the anchor being set on a particular point of the annotation.<br/>The anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0],<br/>where (0, 0) is the top-left corner of the image, and (1, 1) is the bottom-right corner.<br/>Note this is only for custom annotations not the default pin view.<br/>Defaults to the center of the view. |\n| `  x`          |    `number`    |        `none`        |  `true`  | `x` of anchor                                                                                                                                                                                                                                                                                                                                                          |\n| `  y`          |    `number`    |        `none`        |  `true`  | `y` of anchor                                                                                                                                                                                                                                                                                                                                                          |\n| `allowOverlap` |   `boolean`    |       `false`        | `false`  | FIX ME NO DESCRIPTION                                                                                                                                                                                                                                                                                                                                                  |\n| `isSelected`   |   `boolean`    |       `false`        | `false`  | FIX ME NO DESCRIPTION                                                                                                                                                                                                                                                                                                                                                  |\n| `children`     | `ReactElement` |        `none`        |  `true`  | Expects one child - can be container with multiple elements                                                                                                                                                                                                                                                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Checking LocationManager Running State for UserLocation Component\nDESCRIPTION: Method to determine if the LocationManager should be running based on the component's current configuration.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/user-location.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nneedsLocationManagerRunning()\n```\n\n----------------------------------------\n\nTITLE: Setting Text Justification in MapLibre React Native\nDESCRIPTION: Text justification options with values auto, left, center, or right. Default is center. Requires textField and supports camera style functions with zoom and feature parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\ncenter\n```\n\n----------------------------------------\n\nTITLE: Updating Camera Component Props in MapLibre React Native\nDESCRIPTION: The default animationMode for a controlled Camera is now CameraMode.None. To maintain previous behavior, animationDuration and animationMode props should be added.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/migrations/v10.md#2025-04-19_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n<Camera\n  centerCoordinate={[0, 0]}\n+  animationDuration={2000}\n+  animationMode=\"easeTo\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Offline Pack in MapLibre React Native\nDESCRIPTION: Demonstrates how to get a specific offline pack from the database by name.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst offlinePack = await OfflineManager.getPack();\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom HTTP Header in TypeScript\nDESCRIPTION: Simple example of adding a custom HTTP header for tile requests using the addCustomHeader function in TypeScript. This function takes the header name and value as parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/guides/custom-http-headers.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naddCustomHeader(\"Authorization\", \"{auth header}\");\n```\n\n----------------------------------------\n\nTITLE: Changing styleJSON Prop to mapStyle in MapLibre React Native\nDESCRIPTION: When using a style object, it should now be passed directly to the mapStyle prop without JSON.stringify.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/migrations/v10.md#2025-04-19_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n<MapView\n-  styleJSON={JSON.stringify(someStyleObject)}\n+  mapStyle={someStyleObject}\n/>\n```\n\n----------------------------------------\n\nTITLE: Light Component Props\nDESCRIPTION: Props definition for the Light component that controls lighting for extruded geometries. Takes a style prop of type LightLayerStyle which is optional.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/light.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LightProps {\n  style?: LightLayerStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: PointAnnotation Refresh Method\nDESCRIPTION: Method declaration for refreshing the point annotation's rendered image on Android. This is particularly useful when the annotation's appearance needs to be updated after loading images or making visual changes.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/point-annotation.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PointAnnotation {\n  refresh(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Transformation in MapLibre React Native\nDESCRIPTION: Specifies how to capitalize text (similar to CSS textTransform). Options are none, uppercase, or lowercase. Default is none. Requires textField and supports zoom and feature parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\nnone\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Halo Width Transition in MapLibre React Native\nDESCRIPTION: Defines the transition affecting changes to the textHaloWidth property. It specifies the duration and delay of the transition in milliseconds.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_52\n\nLANGUAGE: markup\nCODE:\n```\n<dl>\n  <dt>Type</dt>\n  <dd>\n    <code>&lcub; duration, delay &rcub;</code>\n  </dd>\n\n  <dt>Units</dt>\n  <dd>\n    <code>milliseconds</code>\n  </dd>\n\n  <dt>Default Value</dt>\n  <dd>\n    <code>&lcub; duration: 300, delay: 0 &rcub;</code>\n  </dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Configuring Visibility Style for RasterLayer in React Native\nDESCRIPTION: This snippet describes the 'visibility' style property for the RasterLayer component. It controls whether the layer is displayed and can be set to 'visible' or 'none'.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/raster-layer.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `visibility`\n\nWhether this layer is displayed.\n\n<dl>\n    <dt>Type</dt>\n    <dd>\n        <code>enum</code>\n    </dd>\n        <dt>Default Value</dt>\n        <dd><code>visible</code></dd>\n    <dt>Supported Values</dt>\n    <dd>\n        <ul>\n                <li>\n                    <code>visible</code>: The layer is shown.\n                </li>\n                <li>\n                    <code>none</code>: The layer is not shown.\n                </li>\n        </ul>\n    </dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Text Ignore Placement Property Definition in MapLibre React Native\nDESCRIPTION: The textIgnorePlacement property specifies whether other symbols can be visible even if they collide with the text. Default is false.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Text Color Transition Property Definition in MapLibre React Native\nDESCRIPTION: The textColorTransition property defines animation duration and delay for changes to text color. Default duration is 300ms with no delay.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n{ duration: 300, delay: 0 }\n```\n\n----------------------------------------\n\nTITLE: Setting iconSize Property in MapLibre React Native\nDESCRIPTION: Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by this value. Requires iconImage property.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnumber\n```\n\n----------------------------------------\n\nTITLE: Defining circleStrokeOpacityTransition in MapLibre React Native\nDESCRIPTION: The circleStrokeOpacityTransition property is an object that specifies the duration and delay for transitions affecting the circleStrokeOpacity. It uses milliseconds as units and has a default duration of 300ms with no delay.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/circle-layer.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ duration: 300, delay: 0 }\n```\n\n----------------------------------------\n\nTITLE: Text Opacity Transition Property Definition in MapLibre React Native\nDESCRIPTION: The textOpacityTransition property defines animation duration and delay for changes to text opacity. Default duration is 300ms with no delay.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n{ duration: 300, delay: 0 }\n```\n\n----------------------------------------\n\nTITLE: Sideloading Offline Regions in MapLibre React Native\nDESCRIPTION: Shows how to merge offline regions from an external database file.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nawait OfflineManager.mergeOfflineRegions(path);\n```\n\n----------------------------------------\n\nTITLE: LineLayer Style Interface\nDESCRIPTION: Interface showing the structure of transition properties used in line styling.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/line-layer.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LineLayerTransition {\n  duration: number; // milliseconds\n  delay: number; // milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Removing setAccessToken in MapLibre React Native\nDESCRIPTION: The setAccessToken(null) call is now obsolete. Vendor-specific access tokens should be set via style or tile URLs instead.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/migrations/v10.md#2025-04-19_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- setAccessToken(null)\n```\n\n----------------------------------------\n\nTITLE: Creating and Installing Package Tarball\nDESCRIPTION: Commands for creating a tarball package and installing it in another project\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn pack --out %s-%v.tgz\nyarn add ./@maplibre-maplibre-react-native-X.X.X.tgz\n```\n\n----------------------------------------\n\nTITLE: Icon Color Property Definition in MapLibre React Native\nDESCRIPTION: The iconColor property sets the color of SDF icons. Default value is black (#000000).\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n#000000\n```\n\n----------------------------------------\n\nTITLE: Light Position Default Value\nDESCRIPTION: Default position value for the light source specified as [r, a, p] coordinates where r is radial distance, a is azimuthal angle, and p is polar angle.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/light.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[1.15, 210, 30]\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Camera Props in MapLibre React Native\nDESCRIPTION: The allowUpdates and triggerKey props have been removed from the Camera component. Use stable props or the imperative setCamera method instead.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/migrations/v10.md#2025-04-19_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n<Camera\n  centerCoordinate={[0, 0]}\n-  allowUpdates={false}\n-  triggerKey={someKey}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting iconAnchor Property in MapLibre React Native\nDESCRIPTION: Determines which part of the icon is placed closest to the anchor point. Options include center, left, right, top, bottom, and corner positions. Requires the iconImage property.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nenum\n```\n\n----------------------------------------\n\nTITLE: Icon Halo Blur Property Definition in MapLibre React Native\nDESCRIPTION: The iconHaloBlur property controls how much the halo fades out toward the outside. Values are in pixels with a minimum of 0.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n0\n```\n\n----------------------------------------\n\nTITLE: Removing Style Component in MapLibre React Native\nDESCRIPTION: The Style component has been removed. Style objects should now be passed directly to the MapView's mapStyle prop.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/migrations/v10.md#2025-04-19_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- <MapView>\n-  <Style json={someStyleObject} />\n- </MapView>\n+ <MapView mapStyle={someStyleObject} />\n```\n\n----------------------------------------\n\nTITLE: Setting Tile Count Limit in MapLibre React Native\nDESCRIPTION: Demonstrates how to set the maximum number of tiles that may be downloaded and stored on the device. Requires checking Terms of Service for map tile host.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/modules/offline-manager.md#2025-04-19_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nOfflineManager.setTileCountLimit(1000);\n```\n\n----------------------------------------\n\nTITLE: Installing MapLibre React Native Package\nDESCRIPTION: Command to install the MapLibre React Native package using Yarn package manager.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/react-native.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @maplibre/maplibre-react-native\n```\n\n----------------------------------------\n\nTITLE: Updating Import Style for MapLibre React Native\nDESCRIPTION: The default export is deprecated. Use named imports or namespace imports instead to prepare for future major releases.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/migrations/v10.md#2025-04-19_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- import MapLibreGL from \"@maplibre/maplibre-react-native\";\n+ import { MapView } from \"@maplibre/maplibre-react-native\";\n\n- <MapLibreGL.MapView />\n+ <MapView />\n```\n\n----------------------------------------\n\nTITLE: Customizing Swift Package Manager Spec for MapLibre iOS\nDESCRIPTION: This Ruby code snippet shows how to customize the Swift Package Manager specification for MapLibre on iOS. It allows for more granular control over the native library version and source.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/library-customizations.md#2025-04-19_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n$MLRN_SPM_SPEC = {\n  url: \"https://github.com/maplibre/maplibre-gl-native-distribution\",\n  requirement: {\n    kind: \"upToNextMajorVersion\",\n    minimumVersion: \"x.x.x\"\n  },\n  product_name: \"MapLibre\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Plugin for MapLibre\nDESCRIPTION: Configuration required in app.json or app.config files to enable the MapLibre React Native plugin in an Expo project\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/expo.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      \"@maplibre/maplibre-react-native\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Module Exports in MapLibre React Native\nDESCRIPTION: The camelCase module exports are deprecated. Use PascalCase exports instead for future compatibility.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/migrations/v10.md#2025-04-19_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- import { locationManager, offlineManager, snapshotManager } from \"@maplibre/maplibre-react-native\";\n+ import { LocationManager, OfflineManager, SnapshotManager } from \"@maplibre/maplibre-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Setting iconRotate Property in MapLibre React Native\nDESCRIPTION: Rotates the icon clockwise in degrees. Default value is 0. Requires the iconImage property to be set.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnumber\n```\n\n----------------------------------------\n\nTITLE: Icon Color Transition Property Definition in MapLibre React Native\nDESCRIPTION: The iconColorTransition property defines animation duration and delay for changes to icon color. Default duration is 300ms with no delay.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{ duration: 300, delay: 0 }\n```\n\n----------------------------------------\n\nTITLE: Icon Halo Width Transition Property Definition in MapLibre React Native\nDESCRIPTION: The iconHaloWidthTransition property defines animation duration and delay for changes to icon halo width. Default duration is 300ms with no delay.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{ duration: 300, delay: 0 }\n```\n\n----------------------------------------\n\nTITLE: Setting iconKeepUpright Property in MapLibre React Native\nDESCRIPTION: When set to true, allows the icon to be flipped to prevent it from being rendered upside down. Default is false and requires the iconImage property.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Icon Opacity Transition Property Definition in MapLibre React Native\nDESCRIPTION: The iconOpacityTransition property defines animation duration and delay for changes to icon opacity. Default duration is 300ms with no delay.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{ duration: 300, delay: 0 }\n```\n\n----------------------------------------\n\nTITLE: Text Optional Property Definition in MapLibre React Native\nDESCRIPTION: The textOptional property determines if icons display without their text when text collides with other symbols but the icon does not. Default is false.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Setting textRotationAlignment Property in MapLibre React Native\nDESCRIPTION: Determines the rotation behavior of individual glyphs forming the text, in combination with symbolPlacement. Options include map, viewport, viewport-glyph, and auto. Requires textField property.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nenum\n```\n\n----------------------------------------\n\nTITLE: Icon Halo Blur Transition Property Definition in MapLibre React Native\nDESCRIPTION: The iconHaloBlurTransition property defines animation duration and delay for changes to icon halo blur. Default duration is 300ms with no delay.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n{ duration: 300, delay: 0 }\n```\n\n----------------------------------------\n\nTITLE: Visibility Property Definition in MapLibre React Native\nDESCRIPTION: The visibility property controls whether a layer is displayed. Supports values 'visible' (shown) or 'none' (not shown).\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvisible\n```\n\n----------------------------------------\n\nTITLE: Setting Text Maximum Angle in MapLibre React Native\nDESCRIPTION: Maximum angle change between adjacent characters, measured in degrees. Default value is 45. Requires textField to be set and supports zoom as an expression parameter.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n45\n```\n\n----------------------------------------\n\nTITLE: Icon Translate Transition Property Definition in MapLibre React Native\nDESCRIPTION: The iconTranslateTransition property defines animation duration and delay for changes to icon translation. Default duration is 300ms with no delay.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n{ duration: 300, delay: 0 }\n```\n\n----------------------------------------\n\nTITLE: Using Namespace Import for MapLibre React Native\nDESCRIPTION: An alternative to named imports is using a namespace import. Avoid using MapLibreGL as the namespace to prevent confusion.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/migrations/v10.md#2025-04-19_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- import MapLibreGL from \"@maplibre/maplibre-react-native\";\n+ import * as MapLibreRN from \"@maplibre/maplibre-react-native\";\n\n- <MapLibreGL.MapView />\n+ <MapLibreRN.MapView />\n```\n\n----------------------------------------\n\nTITLE: Setting Text Rotation in MapLibre React Native\nDESCRIPTION: Rotates the text clockwise by the specified amount in degrees. Default value is 0. Requires textField to be set and supports zoom and feature as expression parameters.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n0\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Halo Color Transition in MapLibre React Native\nDESCRIPTION: Defines the transition affecting changes to the textHaloColor property. It specifies the duration and delay of the transition in milliseconds.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_50\n\nLANGUAGE: markup\nCODE:\n```\n<dl>\n  <dt>Type</dt>\n  <dd>\n    <code>&lcub; duration, delay &rcub;</code>\n  </dd>\n\n  <dt>Units</dt>\n  <dd>\n    <code>milliseconds</code>\n  </dd>\n\n  <dt>Default Value</dt>\n  <dd>\n    <code>&lcub; duration: 300, delay: 0 &rcub;</code>\n  </dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Setting MapLibre Native Version in Android gradle.properties\nDESCRIPTION: This diff snippet shows how to set the MapLibre native version for Android in the gradle.properties file. The property is prefixed with 'org.maplibre.reactnative'.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/library-customizations.md#2025-04-19_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n+ org.maplibre.reactnative.nativeVersion=x.x.x\n```\n\n----------------------------------------\n\nTITLE: Text Allow Overlap Property Definition in MapLibre React Native\nDESCRIPTION: The textAllowOverlap property determines whether text will be visible even when it collides with previously drawn symbols. Default is false.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Configuring MapLibre Native Version in iOS Podfile\nDESCRIPTION: This diff snippet demonstrates how to set the MapLibre native version for iOS in the Podfile. It uses a global variable prefixed with '$MLRN'.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/setup/library-customizations.md#2025-04-19_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ $MLRN_NATIVE_VERSION=\"x.x.x\"\n\ntarget \"AppName\" do\n```\n\n----------------------------------------\n\nTITLE: Referencing MapLibre React Native Package\nDESCRIPTION: Package reference for the MapLibre React Native library used within the example application.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/examples/react-native-app/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@maplibre/maplibre-react-native\n```\n\n----------------------------------------\n\nTITLE: Icon Halo Color Property Definition in MapLibre React Native\nDESCRIPTION: The iconHaloColor property sets the color of an icon's halo, only usable with SDF icons. Default is transparent.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nrgba(0, 0, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Using Corepack\nDESCRIPTION: Command sequence for properly installing and configuring Yarn package manager using Corepack\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\ncorepack prepare yarn@stable --activate\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Referencing MapLibre React Native Package in Expo\nDESCRIPTION: Shows the package reference format for MapLibre React Native in an Expo application. This represents how the package would be imported in a project.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/examples/expo-app/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@maplibre/maplibre-react-native\n```\n\n----------------------------------------\n\nTITLE: Icon Halo Color Transition Property Definition in MapLibre React Native\nDESCRIPTION: The iconHaloColorTransition property defines animation duration and delay for changes to icon halo color. Default duration is 300ms with no delay.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n{ duration: 300, delay: 0 }\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies with Yarn\nDESCRIPTION: Command to install all required dependencies for the Docusaurus website using Yarn package manager\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Icon Halo Width Property Definition in MapLibre React Native\nDESCRIPTION: The iconHaloWidth property sets the distance of halo to the icon outline. Values are in pixels, with scaling based on display density. Default is 0.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n0\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that provides live preview of the documentation website with hot reloading capabilities\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Icon Translate Anchor Property Definition in MapLibre React Native\nDESCRIPTION: The iconTranslateAnchor property controls the frame of reference for icon translation. Can be 'map' (relative to map) or 'viewport' (relative to viewport).\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nmap\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Halo Blur Transition in MapLibre React Native\nDESCRIPTION: Defines the transition affecting changes to the textHaloBlur property. It specifies the duration and delay of the transition in milliseconds.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_54\n\nLANGUAGE: markup\nCODE:\n```\n<dl>\n  <dt>Type</dt>\n  <dd>\n    <code>&lcub; duration, delay &rcub;</code>\n  </dd>\n\n  <dt>Units</dt>\n  <dd>\n    <code>milliseconds</code>\n  </dd>\n\n  <dt>Default Value</dt>\n  <dd>\n    <code>&lcub; duration: 300, delay: 0 &rcub;</code>\n  </dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Translation Transition in MapLibre React Native\nDESCRIPTION: Defines the transition affecting changes to the textTranslate property. It specifies the duration and delay of the transition in milliseconds.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/layers/symbol-layer.md#2025-04-19_snippet_56\n\nLANGUAGE: markup\nCODE:\n```\n<dl>\n  <dt>Type</dt>\n  <dd>\n    <code>&lcub; duration, delay &rcub;</code>\n  </dd>\n\n  <dt>Units</dt>\n  <dd>\n    <code>milliseconds</code>\n  </dd>\n\n  <dt>Default Value</dt>\n  <dd>\n    <code>&lcub; duration: 300, delay: 0 &rcub;</code>\n  </dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Getting Map Center Coordinates in MapLibre React Native\nDESCRIPTION: This method retrieves the map's geographical centerpoint. It returns a promise that resolves to the center coordinates.\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/content/components/general/map-view.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst center = await this._map.getCenter();\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content in the build directory, ready for deployment to any static hosting service\nSOURCE: https://github.com/maplibre/maplibre-react-native/blob/main/docs/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```"
  }
]