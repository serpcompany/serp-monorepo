[
  {
    "owner": "loadpartner",
    "repo": "tms",
    "content": "TITLE: Installing Composer Dependencies with Laravel Sail - Bash\nDESCRIPTION: This Bash code snippet runs a Docker container to install Composer dependencies needed for the Laravel application, bypassing platform requirements as required for some local dev environments. It uses the official Laravel Sail Composer image and mounts the current working directory. The \"composer install --ignore-platform-reqs\" command prepares the vendor dependencies needed for the application to function locally. Docker and internet access are required.\nSOURCE: https://github.com/loadpartner/tms/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n    -u \"$(id -u):$(id -g)\" \\\n    -v \"$(pwd):/var/www/html\" \\\n    -w /var/www/html \\\n    laravelsail/php84-composer:latest \\\n    composer install --ignore-platform-reqs\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Example File - Bash\nDESCRIPTION: Copies the .env.example file to .env as required for Laravel applications to work with individualized local settings. This provides a base set of environment variables for local configuration. Prerequisite: presence of \".env.example\" file in the application root.\nSOURCE: https://github.com/loadpartner/tms/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Sail Containers in Detached Mode - Bash\nDESCRIPTION: Starts Docker containers for the Laravel Sail-based development environment using the Sail CLI, running in detached mode. This initializes all defined services such as the web server, database, and more. Requires \"sail\" to be installed and configured.\nSOURCE: https://github.com/loadpartner/tms/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsail up -d\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations via Artisan inside Sail - Bash\nDESCRIPTION: Executes Laravel's artisan migrate command in the Sail Docker environment to create and update database schemas. Ensures the database structure is current for local development. Requires prior Docker and Sail setup.\nSOURCE: https://github.com/loadpartner/tms/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsail artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Generating Laravel Application Key inside Sail - Bash\nDESCRIPTION: Generates a new application key for the Laravel installation using artisan, securing session and user data. Run within Sail to maintain the Docker context. Prerequisite: Laravel installed, \".env\" file present.\nSOURCE: https://github.com/loadpartner/tms/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsail artisan key:generate\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Packages using Sail in Local Environment - Bash\nDESCRIPTION: Installs Node.js dependencies required by the TMS frontend using npm, executed within the Sail environment for proper container context. Ensures all frontend build tooling and required libraries are available. Node and npm must be configured in the Docker environment provided by Sail.\nSOURCE: https://github.com/loadpartner/tms/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsail npm install\n```\n\n----------------------------------------\n\nTITLE: Exporting Sail Path to Shell Environment - Bash\nDESCRIPTION: This snippet demonstrates how to add Laravel Sail's vendor binary location to the user's PATH variable in Bash or Zsh shells, making the \"sail\" command available globally. This is necessary if Sail is not already in the PATH. Appends to .bashrc or .zshrc for persistent effect. No external dependencies beyond Bash or Zsh.\nSOURCE: https://github.com/loadpartner/tms/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=./vendor/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Running Vite Development Server inside Sail - Bash\nDESCRIPTION: Starts the Vite-powered development server via npm, facilitating hot reloading and asset compilation for the React/Laravel frontend. Executed inside Sail to ensure path and environment consistency. Requires all npm dependencies to be installed.\nSOURCE: https://github.com/loadpartner/tms/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsail npm run dev\n```\n\n----------------------------------------\n\nTITLE: Refreshing Dev/Test Data with Artisan Command inside Sail - Bash\nDESCRIPTION: Optionally resets and seeds the development database with test data using a custom \"dev:refresh\" Artisan command inside the Sail Docker environment. Facilitates easy repopulation of the environment for testing. This command may be absent if not implemented in the Laravel codebase.\nSOURCE: https://github.com/loadpartner/tms/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsail artisan dev:refresh\n```\n\n----------------------------------------\n\nTITLE: Refreshing Development Database with Artisan (Bash)\nDESCRIPTION: Clears the application database and runs the demo seeder using the custom `dev:refresh` Artisan command. This command can be executed using either `sail` (if using Docker) or `php` directly. It's used to reset the development environment with fresh test data, including predefined admin and user accounts.\nSOURCE: https://github.com/loadpartner/tms/blob/main/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsail artisan dev:refresh\n// or \nphp artisan dev:refresh\n```\n\n----------------------------------------\n\nTITLE: Linking Public Storage Directory with Artisan (Bash)\nDESCRIPTION: Creates a symbolic link from `public/storage` to `storage/app/public` using the standard `storage:link` Artisan command via `sail`. This is a necessary step to make files stored in the `storage/app/public` directory publicly accessible, which is often required for file uploads to function correctly in web applications.\nSOURCE: https://github.com/loadpartner/tms/blob/main/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsail artisan storage:link\n```\n\n----------------------------------------\n\nTITLE: Running Development Environment Checks with Artisan (Bash)\nDESCRIPTION: Executes development environment checks using the custom `dev:check` Artisan command via `sail`. This command typically runs static analysis tools like PHPStan and generates IDE helper files or autocompletions for improved developer experience.\nSOURCE: https://github.com/loadpartner/tms/blob/main/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsail artisan dev:check\n```\n\n----------------------------------------\n\nTITLE: Allowing All Web Crawlers Full Access via robots.txt\nDESCRIPTION: This configuration uses the robots.txt standard to define access rules for web crawlers. The 'User-agent: *' directive applies the rules to all crawlers. An empty 'Disallow:' directive indicates that no parts of the site are restricted, granting full access.\nSOURCE: https://github.com/loadpartner/tms/blob/main/public/robots.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\\nDisallow:\n```"
  }
]