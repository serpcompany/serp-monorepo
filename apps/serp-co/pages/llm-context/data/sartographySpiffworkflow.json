[
  {
    "owner": "sartography",
    "repo": "spiffworkflow",
    "content": "TITLE: Creating a workflow specification in Python\nDESCRIPTION: Defines a workflow directly in Python code, representing the sequence of tasks and control flow for the nuclear strike procedure. It is used to programmatically specify the workflow logic, dependencies, and task order.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/tutorial/index.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n'''Example of defining a workflow in Python for a nuclear strike involving president and general approval.'''\n\n# Define workflow tasks and dependencies\n# This code fragment would contain task definitions, sequencing, and conditions for the workflow.\n\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating BPMN Engine with Configured Components - Python\nDESCRIPTION: This code creates an instance of the `BpmnEngine`, which is the central component for running workflows. It is initialized by providing the previously configured `parser`, `serializer`, and `script_env`. This setup allows the engine to use the specified methods for parsing diagrams, persisting workflow state, and executing scripts.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/application.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom ..engine import BpmnEngine\nengine = BpmnEngine(parser, serializer, script_env)\n```\n\n----------------------------------------\n\nTITLE: Creating a workflow specification in JSON\nDESCRIPTION: Provides a JSON-based workflow specification that mirrors the Python-defined workflow, enabling workflow creation from serialized data. This allows external or manual editing of the workflow structure, facilitating easier modifications.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/tutorial/index.rst#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"tasks\": [\n    {\"id\": \"sign_president\", \"type\": \"manual\"},\n    {\"id\": \"sign_general\", \"type\": \"manual\"},\n    {\"id\": \"launch_rockets\", \"type\": \"automatic\", \"depends_on\": [\"sign_president\", \"sign_general\"]}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running workflow execution with Spiff Workflow in Python\nDESCRIPTION: Uses SpiffWorkflow.Workflow.complete_all method to execute all the ready tasks in the workflow according to the definition. This method continues until no tasks are in the READY state, handling automatic task progression.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/tutorial/index.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nworkflow.complete_all()  # Executes all ready tasks until completion or waiting states are encountered.\n\n```\n\n----------------------------------------\n\nTITLE: Serializing a WorkflowSpec object in Python\nDESCRIPTION: Serializes the WorkflowSpec object into a storable format, such as JSON or XML, using the serialize method. This enables saving the workflow specification for later reconstruction or sharing.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/tutorial/index.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nserialized_spec = workflow_spec.serialize()\n\n```\n\n----------------------------------------\n\nTITLE: Serializing a Workflow object in Python\nDESCRIPTION: Serializes the active Workflow instance into a data format for storage or transmission, allowing the workflow state to be saved and later restored.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/tutorial/index.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nserialized_workflow = workflow.serialize()\n\n```\n\n----------------------------------------\n\nTITLE: Initializing File Serializer for JSON - Python\nDESCRIPTION: This code initializes the `FileSerializer`, which saves workflow data to JSON files. It specifies the directory (`wfdata`) for storing files, configures a registry for handling object serialization using `SPIFF_CONFIG`, and creates the serializer instance. The registry allows handling custom Python objects within workflow data.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/application.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndirname = 'wfdata'\nFileSerializer.initialize(dirname)\nregistry = FileSerializer.configure(SPIFF_CONFIG)\nserializer = FileSerializer(dirname, registry=registry)\n```\n\n----------------------------------------\n\nTITLE: Deserializing a WorkflowSpec in Python\nDESCRIPTION: Restores a WorkflowSpec object from serialized data, allowing reconstruction of the workflow structure from saved specifications.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/tutorial/index.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nworkflow_spec = WorkflowSpec.serialize(serialized_data)\n\n```\n\n----------------------------------------\n\nTITLE: Adding BPMN/DMN Specs to a Workflow Engine in Python\nDESCRIPTION: Illustrates methods within a hypothetical workflow engine class to add BPMN and optional DMN files using the parser's add_files method. It then retrieves the main process specification (get_spec) and its dependencies (get_subprocess_specs), handles potential ValidationExceptions by clearing the parser state, and finally serializes the specs. Depends on SpiffWorkflow parser and serializer components.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/parsing.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef add_spec(self, process_id, bpmn_files, dmn_files):\n    self.add_files(bpmn_files, dmn_files)\n    try:\n        spec = self.parser.get_spec(process_id)\n        dependencies = self.parser.get_subprocess_specs(process_id)\n    except ValidationException as exc:\n        self.parser.process_parsers = {}\n        raise exc\n    spec_id = self.serializer.create_workflow_spec(spec, dependencies)\n    logger.info(f'Added {process_id} with id {spec_id}')\n    return spec_id\n\ndef add_files(self, bpmn_files, dmn_files):\n    self.parser.add_bpmn_files(bpmn_files)\n    if dmn_files is not None:\n        self.parser.add_dmn_files(dmn_files)\n```\n\n----------------------------------------\n\nTITLE: Deserializing a Workflow in Python\nDESCRIPTION: Recreates an active Workflow instance from serialized data, enabling resumption or analysis of a previously saved workflow state.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/tutorial/index.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nworkflow = Workflow.serialize(serialized_workflow)\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating BpmnParser with Validation in Python\nDESCRIPTION: Demonstrates how to create an instance of BpmnParser and enable validation against the BPMN 2.0 specification by passing a BpmnValidator instance during initialization. This ensures that any files added to the parser will be validated.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/parsing.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.parser import BpmnParser, BpmnValidator\nparser = BpmnParser(validator=BpmnValidator())\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Task (NuclearStrike) - Python\nDESCRIPTION: This Python snippet defines a custom task named `NuclearStrike` that inherits from `SpiffWorkflow.specs.Simple`.  The `_on_complete_hook` method is overridden to print a message indicating the task's completion.  This code assumes that the SpiffWorkflow library is installed and available and that the user is familiar with its core concepts.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/custom-tasks/index.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.specs import Simple\n\nclass NuclearStrike(Simple):\n    def _on_complete_hook(self, my_task):\n        print(\"Rocket sent!\")\n```\n\n----------------------------------------\n\nTITLE: Migrating Workflow Instance to New Spec - Python\nDESCRIPTION: Provides the Python engine function for migrating a workflow instance to a new specification. It first performs a workflow diff, optionally validates if migration is safe, updates the task specs based on the diff alignment, handles subprocesses, updates dependencies, and then serializes the migrated workflow.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef migrate_workflow(self, wf_id, spec_id, validate=True):\n\n    wf = self.serializer.get_workflow(wf_id)\n    spec, deps = self.serializer.get_workflow_spec(spec_id)\n    wf_diff, sp_diffs = diff_workflow(self.serializer.registry, wf, spec, deps)\n\n    if validate and not self.can_migrate(wf_diff, sp_diffs):\n        raise Exception('Workflow is not safe to migrate!')\n\n    migrate_workflow(wf_diff, wf, spec)\n    for sp_id, sp in wf.subprocesses.items():\n        migrate_workflow(sp_diffs[sp_id], sp, deps.get(sp.spec.name))\n    wf.subprocess_specs = deps\n\n    self.serializer.delete_workflow(wf_id)\n    return self.serializer.create_workflow(wf, spec_id)\n```\n\n----------------------------------------\n\nTITLE: Preparing a Serializer - Python\nDESCRIPTION: This likely contains code to extend the `SpiffWorkflow.serializer.json.JSONSerializer` class in Python. The serializer is designed to handle the `NuclearStrike` task for JSON representations within the workflow.  Details about the specifics of the serializer and its dependencies on SpiffWorkflow and the `NuclearStrike` task can be determined by examining the `serializer.py` content when available.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/custom-tasks/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nserializer.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Script Environment with Custom Data and Functions\nDESCRIPTION: This snippet creates a customized 'TaskDataEnvironment' including the previously defined functions for product info and shipping costs, as well as the 'datetime' module for date-related operations. This environment allows script tasks to access dynamic data during workflow execution.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nscript_env = TaskDataEnvironment({\n    'datetime': datetime,\n    'lookup_product_info': lookup_product_info,\n    'lookup_shipping_cost': lookup_shipping_cost,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Deserializer - Python\nDESCRIPTION: This likely contains code to extend the `SpiffWorkflow.serializer.json.JSONSerializer` class in Python. The deserializer is designed to recreate the `NuclearStrike` task from its JSON representation within the workflow. Details about the specifics of the deserializer and its dependencies on SpiffWorkflow and the `NuclearStrike` task can be determined by examining the `strike.py` content when available.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/custom-tasks/index.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstrike.py\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Classes and Functions for Scripting Environment in Python\nDESCRIPTION: This snippet defines custom data structures and functions ('ProductInfo', 'lookup_product_info', 'lookup_shipping_cost') to provide dynamic information within the scripting environment. These functions enable store-specific data retrieval that can be called from script tasks, simulating database or API calls for product and shipping data.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom collections import namedtuple\n\nProductInfo = namedtuple('ProductInfo', ['color', 'size', 'style', 'price'])\nINVENTORY = {\n    'product_a': ProductInfo(False, False, False, 15.00),\n    'product_b': ProductInfo(False, False, False, 15.00),\n    'product_c': ProductInfo(True, False, False, 25.00),\n    'product_d': ProductInfo(True, True, False, 20.00),\n    'product_e': ProductInfo(True, True, True, 25.00),\n    'product_f': ProductInfo(True, True, True, 30.00),\n    'product_g': ProductInfo(False, False, True, 25.00),\n}\n\ndef lookup_product_info(product_name):\n    return INVENTORY[product_name]\n\ndef lookup_shipping_cost(shipping_method):\n    return 25.00 if shipping_method == 'Overnight' else 5.00\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow Specification (JSON)\nDESCRIPTION: This JSON snippet represents the workflow specification that utilizes the `NuclearStrike` custom task.  The workflow definition will reference the `NuclearStrike` class, and the format will adhere to the JSON schema supported by SpiffWorkflow. The example specification shows how to integrate the `NuclearStrike` class into a JSON based workflow definition.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/custom-tasks/index.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nnuclear.json\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Task Handlers - Python\nDESCRIPTION: This dictionary maps specific task types like `UserTask`, `ManualTask`, and `NoneTask` to handler classes provided by the application. These handlers define how the application interacts with human-facing tasks. While the library handles most task types, applications typically provide handlers for human tasks.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/application.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nhandlers = {\n    UserTask: UserTaskHandler,\n    ManualTask: ManualTaskHandler,\n    NoneTask: ManualTaskHandler,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Serializer & Task - Python\nDESCRIPTION: This Python snippet likely demonstrates the practical usage of the created custom serializer and task.  It would instantiate a workflow using the JSON specification from the previous step (nuclear.json) and initiate the `NuclearStrike` task.  The core functionality would involve creating a workflow instance and executing the workflow including the custom task.  It is dependent on the `serializer.py`, `strike.py` and `nuclear.json` files.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/core/custom-tasks/index.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstart.py\n```\n\n----------------------------------------\n\nTITLE: Running a model with custom task spec in Python\nDESCRIPTION: Commands for running a BPMN model with a custom task specification using the SpiffWorkflow runner script.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/custom_task_spec.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n./runner.py -e spiff_example.misc.custom_start_event add -p timer_start -b bpmn/tutorial/timer_start.bpmn\n./runner.py -e spiff_example.misc.custom_start_event\n```\n\n----------------------------------------\n\nTITLE: Running Workflow Tasks Automatically Until User Input Required in Python\nDESCRIPTION: These methods implement the execution loop for automatically running all tasks that are ready and do not require manual (human) intervention. The 'run_until_user_input_required' method fetches tasks that are ready and automatic, runs them, and processes any events triggered by running these tasks by calling 'run_ready_events'. The 'run_ready_events' method refreshes waiting tasks and runs any tasks that represent catch events which are ready to run. Both methods rely on the workflow's task retrieval based on state and task specification class, facilitating the progression of the workflow until a human task is reached.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef run_until_user_input_required(self, workflow):\n    task = workflow.get_next_task(state=TaskState.READY, manual=False)\n    while task is not None:\n        task.run()\n        self.run_ready_events(workflow)\n        task = workflow.get_next_task(state=TaskState.READY, manual=False)\n\ndef run_ready_events(self, workflow):\n    workflow.refresh_waiting_tasks()\n    task = workflow.get_next_task(state=TaskState.READY, spec_class=CatchingEvent)\n    while task is not None:\n        task.run()\n        task = workflow.get_next_task(state=TaskState.READY, spec_class=CatchingEvent)\n```\n\n----------------------------------------\n\nTITLE: Performing Spec and Dependency Diffs - Python\nDESCRIPTION: Shows Python functions within the engine that handle the logic for diffing workflow specifications and their dependencies. They retrieve the specs using a serializer and utilize a `SpecDiff` object or a helper function to compute the differences.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef diff_spec(self, original_id, new_id):\n    original, _ = self.serializer.get_workflow_spec(original_id, include_dependencies=False)\n    new, _ = self.serializer.get_workflow_spec(new_id, include_dependencies=False)\n    return SpecDiff(self.serializer.registry, original, new)\n\ndef diff_dependencies(self, original_id, new_id):\n    _, original = self.serializer.get_workflow_spec(original_id, include_dependencies=True)\n    _, new = self.serializer.get_workflow_spec(new_id, include_dependencies=True)\n    return diff_dependencies(self.serializer.registry, original, new)\n```\n\n----------------------------------------\n\nTITLE: Running a Human or Manual Task with Optional Data Update in Python\nDESCRIPTION: This function enables running a user or manual workflow task, optionally updating the task's data with provided dictionary inputs before execution. After running the task, depending on the execution mode, it either continues running all automatic tasks until user input is required or updates any UI-related task filters. This snippet is core for integrating user input forms and advancing the workflow accordingly. It depends on the Task object's set_data and run methods, and methods for continuing workflow execution or updating task filters.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef run_task(self, task, data=None):\n    if data is not None:\n        task.set_data(**data)\n    task.run()\n    if not self.step:\n        self.run_until_user_input_required()\n    else:\n        self.update_task_filter()\n```\n\n----------------------------------------\n\nTITLE: Instantiating BPMN Workflow using Python\nDESCRIPTION: This snippet defines the method for starting a BPMN workflow by loading the workflow specifications using a serializer, creating a BpmnWorkflow instance with the specs and a script engine, and then creating and returning a workflow Instance object associated with the generated workflow ID. The method accepts a spec ID as input to identify the workflow specification to instantiate. Dependencies include the serializer for specs retrieval and the BpmnWorkflow class. The output is an Instance representing the new workflow execution context.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef start_workflow(self, spec_id):\n    spec, sp_specs = self.serializer.get_workflow_spec(spec_id)\n    wf = BpmnWorkflow(spec, sp_specs, script_engine=self._script_engine)\n    wf_id = self.serializer.create_workflow(wf, spec_id)\n    return Instance(wf_id, workflow)\n```\n\n----------------------------------------\n\nTITLE: Performing Workflow Instance Diff - Python\nDESCRIPTION: Shows the Python engine function responsible for comparing a workflow instance against a new specification. It retrieves the instance and the new spec/dependencies via the serializer and calls a `diff_workflow` helper function.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef diff_workflow(self, wf_id, spec_id):\n    wf = self.serializer.get_workflow(wf_id)\n    spec, deps = self.serializer.get_workflow_spec(spec_id)\n    return diff_workflow(self.serializer.registry, wf, spec, deps)\n```\n\n----------------------------------------\n\nTITLE: Setting Instructions for Human BPMN Tasks using Jinja Templates in Python\nDESCRIPTION: This method sets user instructions for a human task UI by combining the BPMN task name and rendering custom user instruction templates using Jinja with the task's data dictionary. It retrieves the 'instructionsForEndUser' extension text and renders it dynamically, allowing instructions to incorporate relevant task instance data. This snippet depends on the Jinja2 templating engine and a UI abstraction capable of storing instructions text for display, facilitating customizable and data-driven user instructions.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom jinja2 import Template\n\ndef set_instructions(self, task):\n    user_input = self.ui._states['user_input']\n    user_input.instructions = f'{self.task.task_spec.bpmn_name}\\n\\n'\n    text = self.task.task_spec.extensions.get('instructionsForEndUser')\n    if text is not None:\n        template = Template(text)\n        user_input.instructions += template.render(self.task.data)\n    user_input.instructions += '\\n\\n'\n```\n\n----------------------------------------\n\nTITLE: Checking Workflow Migration Safety - Python\nDESCRIPTION: Presents a simple Python function (`can_migrate`) that determines if a workflow instance and its subprocesses are safe to migrate based on the diff results. It checks if any tasks corresponding to changed or removed specs have already been started or completed.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef can_migrate(self, wf_diff, sp_diffs):\n\n    def safe(result):\n        mask = TaskState.COMPLETED|TaskState.STARTED\n        tasks = result.changed + result.removed\n        return len(filter_tasks(tasks, state=mask)) == 0\n\n    for diff in sp_diffs.values():\n        if diff is None or not safe(diff):\n            return False\n    return safe(wf_diff)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Display Information for BPMN Tasks in Python\nDESCRIPTION: This helper function extracts important display attributes from a task instance, including depth in the workflow, human-readable state name, task name using BPMN name or default task spec name, and the BPMN lane information. This information is useful for UI rendering and task tracking purposes. The function depends on the TaskState enumeration for state naming and task spec attributes for retrieving BPMN-specific metadata.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_task_display_info(self, task):\n    return {\n        'depth': task.depth,\n        'state': TaskState.get_name(task.state),\n        'name': task.task_spec.bpmn_name or task.task_spec.name,\n        'lane': task.task_spec.lane,\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing Workflow Instances - Console\nDESCRIPTION: Presents the console command used to list existing workflow instances, showing their IDs, process IDs, start and end times. This helps identify specific instances for diffing or migration.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n./runner.py -e spiff_example.spiff.diffs list_instances\n```\n\n----------------------------------------\n\nTITLE: Filtering Ready Tasks by Lane in SpiffWorkflow (Python)\nDESCRIPTION: Retrieves tasks from a workflow instance that are in the `READY` state and belong to the 'Customer' lane. This filters tasks based on their assigned lane within the BPMN process definition, allowing for role-based task queries.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nready_tasks = workflow.get_tasks(state=TaskState.READY, lane='Customer')\n```\n\n----------------------------------------\n\nTITLE: Sample XML configuration for a BPMN Service Task using External Services\nDESCRIPTION: This XML snippet shows how to define a BPMN Service Task with extension elements for 'serviceTaskOperator' and 'postScript'. It illustrates how to specify the operation, parameters, and post-processing steps to retrieve and convert product information after invoking the service. This configuration enhances workflow capabilities by integrating external service calls.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<bpmn:serviceTask id=\"Activity_1ln3xkw\" name=\"Lookup Product Info\">\n  <bpmn:extensionElements>\n    <spiffworkflow:serviceTaskOperator id=\"lookup_product_info\" resultVariable=\"product_info\">\n      <spiffworkflow:parameters>\n        <spiffworkflow:parameter id=\"product_name\" type=\"str\" value=\"product_name\"/>\n      </spiffworkflow:parameters>\n    </spiffworkflow:serviceTaskOperator>\n    <spiffworkflow:postScript>product_info = product_info_from_dict(product_info)</spiffworkflow:postScript>\n  </bpmn:extensionElements>\n  <bpmn:incoming>Flow_104dmrv</bpmn:incoming>\n  <bpmn:outgoing>Flow_06k811b</bpmn:outgoing>\n</bpmn:serviceTask>\n```\n\n----------------------------------------\n\nTITLE: Filtering Ready, Non-Manual Tasks in SpiffWorkflow (Python)\nDESCRIPTION: Retrieves tasks from a workflow instance that are in the `READY` state and do not require manual input (`manual=False`). It utilizes the imported `TaskState` enum for specifying the desired state. The `workflow.get_tasks` method returns an iterator over matching tasks.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntasks = workflow.get_tasks(state=TaskState.READY, manual=False)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Functions in Script Tasks during Workflow Execution\nDESCRIPTION: This console command demonstrates how to load a BPMN diagram that includes script tasks utilizing custom Python functions. It showcases how external workflows can incorporate user-defined functions for dynamic data retrieval within script tasks, facilitating complex process logic.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\n./runner.py -e spiff_example.spiff.custom_object add -p order_product \\\n    -b bpmn/tutorial/{top_level_script,call_activity_script}.bpmn\n```\n\n----------------------------------------\n\nTITLE: Example User Input Data Dictionary for BPMN Form Task in Python\nDESCRIPTION: This example dictionary demonstrates the structured data typically submitted by a user through a BPMN User Task form, containing product selection and quantity. This data is intended to be set on the task before task execution to drive subsequent business rule and script task evaluations. The keys correspond to form fields expected by the process logic.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{\n    'product_name': 'product_a',\n    'product_quantity': 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Engine Interaction with Workflow\nDESCRIPTION: This snippet imports the `PythonScriptEngine` class from the `SpiffWorkflow.bpmn.script_engine` module. This class allows control over how the script engine interacts with the workflow, enabling customization of script execution and data access.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.script_engine import PythonScriptEngine\n```\n\n----------------------------------------\n\nTITLE: Overview of WorkflowSpec and TaskSpec\nDESCRIPTION: This snippet describes the WorkflowSpec and TaskSpec, representing the definitions of structure and behavior. These objects are the blueprint and define the different paths the workflow can take.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/concepts.rst#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n:code:`WorkflowSpec` and :code:`TaskSpec`\n```\n\n----------------------------------------\n\nTITLE: Importing TaskState for Filtering in SpiffWorkflow (Python)\nDESCRIPTION: Imports the `TaskState` enumeration from `SpiffWorkflow.util.task`. This class is used to filter workflow tasks based on their state (e.g., READY, COMPLETED) using human-readable names instead of raw integer values when calling methods like `workflow.get_tasks`.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.util.task import TaskState\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of BPMN Workflow Serializer\nDESCRIPTION: This snippet imports the `BpmnWorkflowSerializer` class from the `SpiffWorkflow.bpmn.serializer` module. This class provides basic functionality for serializing and deserializing BPMN workflows, allowing them to be stored and retrieved.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.serializer import BpmnWorkflowSerializer\n```\n\n----------------------------------------\n\nTITLE: Filtering Completed Tasks in SpiffWorkflow (Python)\nDESCRIPTION: Retrieves tasks from a workflow instance that are in the `COMPLETED` state. It uses the `TaskState` enum to specify the state criteria for the `workflow.get_tasks` method, which returns an iterator over all completed tasks found.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntasks = workflow.get_tasks(state=TaskState.COMPLETED)\n```\n\n----------------------------------------\n\nTITLE: Configuring FileSerializer with custom converter in Python\nDESCRIPTION: Code to configure a FileSerializer to use the CustomStartEventConverter for serializing and deserializing CustomStartEvent instances.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/custom_task_spec.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSPIFF_CONFIG[CustomStartEvent] = CustomStartEventConverter\nregistry = FileSerializer.configure(SPIFF_CONFIG)\nserializer = FileSerializer(dirname, registry=registry)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Spec Name in SpiffWorkflow (Python)\nDESCRIPTION: Retrieves tasks from a workflow instance whose specification name matches 'customize_product'. The `spec_name` parameter typically corresponds to the ID of a task element defined in the BPMN process definition. The `workflow.get_tasks` method returns matching tasks.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntasks = workflow.get_tasks(spec_name='customize_product')\n```\n\n----------------------------------------\n\nTITLE: Creating a CustomStartEventConverter for serialization in Python\nDESCRIPTION: Converter class for serializing and deserializing the CustomStartEvent. Extends SpiffBpmnTaskConverter to handle serialization of both the None Event Definition and the original Timer Event Definition.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/custom_task_spec.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.serializer import BpmnWorkflowSerializer\nfrom SpiffWorkflow.spiff.serializer.task_spec import SpiffBpmnTaskConverter\nfrom SpiffWorkflow.spiff.serializer import DEFAULT_CONFIG\n\nclass CustomStartEventConverter(SpiffBpmnTaskConverter):\n\n    def to_dict(self, spec):\n        dct = super().to_dict(spec)\n        dct['event_definition'] = self.registry.convert(spec.event_definition)\n        dct['timer_event'] = self.registry.convert(spec.timer_event)\n        return dct\n\n    def from_dict(self, dct):\n        spec = super().from_dict(dct)\n        spec.event_definition = self.registry.restore(dct['event_definition'])\n        spec.timer_event = self.registry.restore(dct['timer_event'])\n        return spec\n```\n\n----------------------------------------\n\nTITLE: Filtering Waiting Tasks by Update Timestamp in SpiffWorkflow (Python)\nDESCRIPTION: Filters tasks to find those currently in the `WAITING` state that were last updated after a specific timestamp (`ts`), calculated here as one hour ago. Requires importing `datetime` and `timedelta`. This allows retrieving tasks based on recent state changes.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nts = datetime.now() - timedelta(hours=1)\ntasks = workflow.get_tasks(state=TaskState.WAITING, updated_ts=ts)\n```\n\n----------------------------------------\n\nTITLE: Configuring SpiffBpmnParser to use custom task spec in Python\nDESCRIPTION: Code to configure a SpiffBpmnParser to use the CustomStartEvent class instead of the standard class when parsing Start Events in BPMN XML.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/custom_task_spec.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.spiff.parser import SpiffBpmnParser\nfrom SpiffWorkflow.spiff.parser.event_parsers import StartEventParser\nfrom SpiffWorkflow.bpmn.parser.util import full_tag\n\nparser = SpiffBpmnParser()\nparser.OVERRIDE_PARSER_CLASSES[full_tag('startEvent')] = (StartEventParser, CustomStartEvent)\n```\n\n----------------------------------------\n\nTITLE: Accessing Tasks within a Subprocess in SpiffWorkflow (Python)\nDESCRIPTION: Demonstrates how to access tasks contained within a subprocess or call activity. It first finds a specific parent task (a Call Activity named 'customize_product') using `get_next_task`, then retrieves the associated subprocess workflow using `workflow.get_subprocess`, and finally lists all tasks within that specific subprocess using `subprocess.get_tasks()`.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/workflows.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntask = workflow.get_next_task(spec_name='customize_product')\nsubprocess = workflow.get_subprocess(task)\nsubprocess_tasks = subprocess.get_tasks()\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Script Environment with RestrictedPython in Python\nDESCRIPTION: This snippet demonstrates how to replace the default scripting environment in SpiffWorkflow with a restricted environment provided by RestrictedPython to enhance security. It imports 'safe_globals' from RestrictedPython and creates a custom environment 'TaskDataEnvironment' for script execution, ensuring that potentially unsafe code cannot access system resources.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom RestrictedPython import safe_globals\nfrom SpiffWorkflow.bpmn.script_engine import TaskDataEnvironment\n\nscript_env = TaskDataEnvironment(safe_globals)\n```\n\n----------------------------------------\n\nTITLE: Using the Restricted Engine and Handling Errors in Console\nDESCRIPTION: This snippet shows command-line examples for running the workflow with the default and restricted script engine. It illustrates how attempting to run restricted scripts can produce errors due to import restrictions. These commands demonstrate how to switch between environments and handle security constraints during execution.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n./runner.py -e spiff_example.spiff.file add -p end_it_all -b bpmn/tutorial/dangerous.bpmn\n./runner.py -e spiff_example.spiff.file\n\n# Running with restricted environment, which will produce an error:\n./runner.py -e spiff_example.spiff.restricted\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering Custom Object Serialization (SpiffWorkflow, Python)\nDESCRIPTION: This snippet demonstrates how to create a namedtuple for product information and define two helper functions—one to convert a ProductInfo object to a dictionary and another to reconstruct it from a dictionary. These functions are essential for custom serialization, allowing ProductInfo to be saved and restored. No external dependencies are required beyond Python's collections.namedtuple. Input is a ProductInfo instance or dict; output is the corresponding dict or ProductInfo object. Limitations include requiring dictionaries as the interchange format.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/serialization.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nProductInfo = namedtuple('ProductInfo', ['color', 'size', 'style', 'price'])\n\ndef product_info_to_dict(obj):\n    return {\n        'color': obj.color,\n        'size': obj.size,\n        'style': obj.style,\n        'price': obj.price,\n    }\n\ndef product_info_from_dict(dct):\n    return ProductInfo(**dct)\n```\n\n----------------------------------------\n\nTITLE: Running Event Handling Example\nDESCRIPTION: These console commands load and run the event handling example. The first command adds the example and specifies the service name and BPMN file. The second command executes the example.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n    ./runner.py -e spiff_example.misc.event_handler add -p read_file -b bpmn/tutorial/event_handler.bpmn\n    ./runner.py -e spiff_example.misc.event_handler\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Serialization Methods with FileSerializer (SpiffWorkflow, Python)\nDESCRIPTION: This snippet shows how to configure a SpiffWorkflow file serializer registry, register custom serialization methods for the ProductInfo class, and instantiate a file serializer with an explicit registry. Dependencies include SpiffWorkflow.spiff.serializer.config.SPIFF_CONFIG and spiff.serializer.file.FileSerializer. Parameters are the class to serialize, its to_dict, and from_dict functions. Registration enables automatic conversion during serialization and deserialization. Limitations: the registry instance and correct mapping of conversion functions are required.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/serialization.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.spiff.serializer.config import SPIFF_CONFIG\nfrom ..serializer.file import FileSerializer\n\nregistry = FileSerializer.configure(SPIFF_CONFIG)\nregistry.register(ProductInfo, product_info_to_dict, product_info_from_dict)\nserializer = FileSerializer(dirname, registry=registry)\n```\n\n----------------------------------------\n\nTITLE: Diffing Workflow Instance Against New Spec - Console\nDESCRIPTION: Explains how to compare a specific workflow instance (`-w`) against a potentially newer workflow specification version (`-s`). The output indicates which tasks in the instance correspond to changed or removed specs in the new version and their current state.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n./runner.py -e spiff_example.spiff.diffs diff_workflow \\\n    -s 9da66c67-863f-4b88-96f0-76e76febccd0 \\\n    -w 4af0e043-6fd6-448d-85eb-d4e86067433e\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Serialization Adapters (SpiffWorkflow, Python)\nDESCRIPTION: This snippet configures the Python sqlite3 driver to support automatic serialization and deserialization of UUID and dict (JSON) types for use with workflow data. It registers adapters and converters for these types, enabling seamless round-trip storage and retrieval from a SQLite database. Dependencies: sqlite3, uuid.UUID, json. Required parameters are the SQLite connection and the intended adapters/converters; expected input is Python objects or serialized database blobs. Limitation: assumes all dicts will serialize correctly as JSON.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/serialization.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconn = sqlite3.connect(self.dbname, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)\nconn.execute(\"pragma foreign_keys=on\")\nsqlite3.register_adapter(UUID, lambda v: str(v))\nsqlite3.register_converter(\"uuid\", lambda s: UUID(s.decode('utf-8')))\nsqlite3.register_adapter(dict, lambda v: json.dumps(v))\nsqlite3.register_converter(\"json\", lambda s: json.loads(s))\n```\n\n----------------------------------------\n\nTITLE: Migrating Workflow Instance - Console\nDESCRIPTION: Shows the console command to migrate a specific workflow instance (`-w`) to a new specification version (`-s`) using the runner script. This leverages the backend migration logic to update the running instance.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n./runner.py -e spiff_example.spiff.diffs migrate \\\n    -s 9da66c67-863f-4b88-96f0-76e76febccd0 \\\n    -w 4af0e043-6fd6-448d-85eb-d4e86067433e\n```\n\n----------------------------------------\n\nTITLE: Customizing Workflow and Spec Converters for SQLite Serialization (SpiffWorkflow, Python)\nDESCRIPTION: This code snippet provides subclass implementations for BpmnWorkflowConverter, BpmnSubWorkflowConverter, and BpmnProcessSpecConverter, overriding their to_dict methods to reformat certain dictionary-based attributes as lists (e.g., tasks, task_specs) to facilitate direct storage into database tables. Dependencies include SpiffWorkflow's BPMN converter base classes. Input is a workflow or spec object; output is a dictionary ready for serialization. This approach is mainly used when item keys are not needed and where list representation is preferred for database insertion. Limitations: key information is discarded in favor of list structure.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/serialization.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass WorkflowConverter(BpmnWorkflowConverter):\n\n    def to_dict(self, workflow):\n        dct = super(BpmnWorkflowConverter, self).to_dict(workflow)\n        dct['bpmn_events'] = self.registry.convert(workflow.bpmn_events)\n        dct['subprocesses'] = {}\n        dct['tasks'] = list(dct['tasks'].values())\n        return dct\n\nclass SubworkflowConverter(BpmnSubWorkflowConverter):\n\n    def to_dict(self, workflow):\n        dct = super().to_dict(workflow)\n        dct['tasks'] = list(dct['tasks'].values())\n        return dct\n\nclass WorkflowSpecConverter(BpmnProcessSpecConverter):\n\n    def to_dict(self, spec):\n        dct = super().to_dict(spec)\n        dct['task_specs'] = list(dct['task_specs'].values())\n        return dct\n```\n\n----------------------------------------\n\nTITLE: Diffing Two Workflow Specs - Console\nDESCRIPTION: Illustrates how to perform a diff between two workflow specifications using their respective IDs (`-o` for original, `-n` for new) via the runner script. This compares the structure and details of the two BPMN models.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n./runner.py -e spiff_example.spiff.diffs diff_spec -o e0d11baa-c5c8-43bd-bf07-fe4dece39a07 -n 9da66c67-863f-4b88-96f0-76e76febccd0\n```\n\n----------------------------------------\n\nTITLE: Updating Serializer Configuration and Initializing SQLite Serializer (SpiffWorkflow, Python)\nDESCRIPTION: This snippet demonstrates updating the SpiffWorkflow serializer configuration to use custom converter classes for workflows, subworkflows, and workflow specs, then initializing and configuring a SQLite serializer instance for use with a database. Dependencies: SpiffWorkflow.spiff.serializer.DEFAULT_CONFIG, custom converter classes, spiff.serializer.sqlite.SqliteSerializer, sqlite3. Parameters: database name, registry mappings. This ensures that serialization and storage behavior matches the project requirements. Limitation: assumes prior table creation and adequate database permissions.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/serialization.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.spiff.serializer import DEFAULT_CONFIG\nfrom ..serializer.sqlite import (\n    SqliteSerializer,\n    WorkflowConverter,\n    SubworkflowConverter,\n    WorkflowSpecConverter\n)\n\nDEFAULT_CONFIG[BpmnWorkflow] = WorkflowConverter\nDEFAULT_CONFIG[BpmnSubWorkflow] = SubworkflowConverter\nDEFAULT_CONFIG[BpmnProcessSpec] = WorkflowSpecConverter\n\ndbname = 'spiff.db'\n\nwith sqlite3.connect(dbname) as db:\n    SqliteSerializer.initialize(db)\n\nregistry = SqliteSerializer.configure(DEFAULT_CONFIG)\nserializer = SqliteSerializer(dbname, registry=registry)\n```\n\n----------------------------------------\n\nTITLE: Spiff Workflow Parsing and Specification\nDESCRIPTION: This snippet imports `SpiffBpmnParser`, `VALIDATOR`, and `<TaskSpec>` from `SpiffWorkflow.spiff.parser` and `SpiffWorkflow.spiff.specs`. These components facilitate parsing Spiff-specific BPMN extensions and defining custom task specifications.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.spiff.parser import SpiffBpmnParser, VALIDATOR\nfrom SpiffWorkflow.spiff.specs import <TaskSpec>\nfrom SpiffWorkflow.spiff.serializer import DEFAULT_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Inserting a Serialized Workflow Record into SQLite (SpiffWorkflow, Python)\nDESCRIPTION: This snippet provides a method for inserting a serialized workflow into a SQLite database. It demonstrates converting a workflow to a dictionary representation, generating a UUID, and executing a parameterized SQL insert statement. Dependencies include Python's sqlite3, uuid, and SpiffWorkflow's serialization utilities. Inputs: database cursor, workflow instance, spec ID; output: a database record. Limitation: assumes matching schema and no handling for subprocesses beyond incomplete logic shown.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/serialization.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef _create_workflow(self, cursor, workflow, spec_id):\n    dct = super().to_dict(workflow)\n    wf_id = uuid4()\n    stmt = \"insert into workflow (id, workflow_spec_id, serialization) values (?, ?, ?)\"\n    cursor.execute(stmt, (wf_id, spec_id, dct))\n    if len(workflow.subprocesses) > 0:\n```\n\n----------------------------------------\n\nTITLE: Spec Customization with Serializer\nDESCRIPTION: This snippet imports several classes and variables related to customizing the serialization of task specifications in SpiffWorkflow. `DEFAULT_CONFIG` provides a default configuration, `<TaskSpecConverter>` is a placeholder for a custom converter, and `TaskSpecConverter`, `EventDefinitionConverter`, and `BpmnDataSpecificationConverter` provide helpers for creating custom converters for different BPMN elements.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.serializer import DEFAULT_CONFIG\nfrom SpiffWorkflow.bpmn.serializer.default import <TaskSpecConverter>\nfrom SpiffWorkflow.bpmn.serializer.helpers import (\n    TaskSpecConverter,\n    EventDefinitionConverter,\n    BpmnDataSpecificationConverter,\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workflow with Dependencies from Database in Python/SQL\nDESCRIPTION: This function retrieves a workflow from the database by ID, optionally including its subprocesses and dependencies. It executes SQL queries to fetch the main workflow and recursively loads any subprocess dependencies if requested.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/serialization.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef _get_workflow(self, cursor, wf_id, include_dependencies):\n    cursor.execute(\"select workflow_spec_id, serialization as 'serialization [json]' from workflow where id=?\", (wf_id, ))\n    row = cursor.fetchone()\n    spec_id, workflow = row[0], self.from_dict(row[1])\n    if include_dependencies:\n        workflow.subprocess_specs = self._get_subprocess_specs(cursor, spec_id)\n        cursor.execute(\n            \"select descendant as 'id [uuid]', serialization as 'serialization [json]' from workflow_dependency where root=? order by depth\",\n            (wf_id, )\n        )\n        for sp_id, sp in cursor:\n            task = workflow.get_task_from_id(sp_id)\n            workflow.subprocesses[sp_id] = self.from_dict(sp, task=task, top_workflow=workflow)\n    return workflow\n```\n\n----------------------------------------\n\nTITLE: DMN Parsing and Specification in SpiffWorkflow\nDESCRIPTION: This snippet imports `BpmnDmnParser`, `BusinessRuleTaskMixin`, and `BaseBusinessRuleTaskConverter` from `SpiffWorkflow.dmn.parser`, `SpiffWorkflow.dmn.specs`, and `SpiffWorkflow.dmn.serializer` respectively. These components are used for integrating Decision Model and Notation (DMN) models within BPMN workflows.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.dmn.parser import BpmnDmnParser\nfrom SpiffWorkflow.dmn.specs import BusinessRuleTaskMixin\nfrom SpiffWorkflow.dmn.serializer import BaseBusinessRuleTaskConverter\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dependencies from Database for Workflow Specs in Python/SQL\nDESCRIPTION: This code snippet demonstrates retrieving workflow specification dependencies from a database. It executes SQL queries to fetch serialized subprocesses and their relationships, storing them in a dictionary that maps subprocess names to their IDs.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/serialization.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncursor.execute(\"select serialization->>'name', descendant from spec_dependency where root=?\", (spec_id, ))\ndependencies = dict((name, id) for name, id in cursor)\nfor sp_id, sp in workflow.subprocesses.items():\n    cursor.execute(stmt, (sp_id, dependencies[sp.spec.name], self.to_dict(sp)))\nreturn wf_id\n```\n\n----------------------------------------\n\nTITLE: Extending Task Specification in SpiffWorkflow\nDESCRIPTION: This snippet imports `BpmnTaskSpec` and `<TaskSpecMixin>` from `SpiffWorkflow.bpmn.specs` and `SpiffWorkflow.bpmn.specs.mixins` respectively. `BpmnTaskSpec` implements generic BPMN behavior while `<TaskSpecMixin>` is a placeholder for a mixin that adds specific BPMN behavior to a task specification.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.specs import BpmnTaskSpec           # Implements generic BPMN behavior\nfrom SpiffWorkflow.bpmn.specs.mixins import <TaskSpecMixin> # Implements specific BPMN behavior\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exec/Eval in Script Engine\nDESCRIPTION: This snippet imports the `BasePythonScriptEngineEnvironment` class from the `SpiffWorkflow.bpmn.script_engine` module. This class provides a base environment for implementing custom exec/eval functionality for scripts within a BPMN workflow, allowing fine-grained control over script execution.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.script_engine import BasePythonScriptEngineEnvironment\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Task Environment for External Service Calls in Python\nDESCRIPTION: This code defines a subclass of 'TaskDataEnvironment' called 'ServiceTaskEnvironment' which overrides 'call_service' method. It directs service calls based on 'operation_name' and 'operation_params', executes the relevant functions, and returns JSON-encoded results. This allows workflow service tasks to invoke custom backend logic with transparent parameters handling.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass ServiceTaskEnvironment(TaskDataEnvironment):\n\n    def __init__(self):\n        super().__init__({\n            'datetime': datetime,\n            'product_info_from_dict': product_info_from_dict,\n        })\n\n    def call_service(self, task_data, operation_name, operation_params):\n        if operation_name == 'lookup_product_info':\n            product_info = lookup_product_info(operation_params['product_name']['value'])\n            result = product_info_to_dict(product_info)\n        elif operation_name == 'lookup_shipping_cost':\n            result = lookup_shipping_cost(operation_params['shipping_method']['value'])\n        else:\n            raise Exception(\"Unknown Service!\")\n        return json.dumps(result)\n\nscript_env = ServiceTaskEnvironment()\n```\n\n----------------------------------------\n\nTITLE: Custom Data Handling with Serializer\nDESCRIPTION: This snippet imports the `DefaultRegistry` class from the `SpiffWorkflow.bpmn.serializer` module. This registry is used to manage custom data types and their serialization/deserialization logic within the BPMN workflow.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.serializer import DefaultRegistry\n```\n\n----------------------------------------\n\nTITLE: EventHandlingServiceTask Implementation\nDESCRIPTION: This Python code defines a custom `EventHandlingServiceTask` that extends `ServiceTask`. It executes a service, handles `FileNotFoundError` by creating and catching a BPMN error event, and raises a `WorkflowTaskException` for other exceptions.  It uses the `script_engine` to evaluate parameters and call the service.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n    class EventHandlingServiceTask(ServiceTask):\n\n        def _execute(self, my_task):\n            script_engine = my_task.workflow.script_engine\n            # The param also has a type, but I don't need it\n            params = dict((name, script_engine.evaluate(my_task, p['value'])) for name, p in self.operation_params.items())\n            try:\n                result = script_engine.call_service(\n                    task.data,\n                    operation_name=self.operation_name,\n                    operation_params=params)\n                my_task.data[self.result_variable] = result\n                return True\n            except FileNotFoundError as exc:\n                event_definition = ErrorEventDefinition('file_not_found', code='1')\n                event = BpmnEvent(event_definition, payload=params['filename'])\n                my_task.workflow.top_workflow.catch(event)\n                return False\n            except Exception as exc:\n                raise WorkflowTaskException('Service Task execution error', task=my_task, exception=exc)\n```\n\n----------------------------------------\n\nTITLE: Importing BPMN Parsing Components\nDESCRIPTION: This snippet imports the `BpmnParser` and `BpmnValidator` classes from the `SpiffWorkflow.bpmn.parser` module. These classes are essential for parsing BPMN diagrams and validating their structure.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.parser import BpmnParser, BpmnValidator\n```\n\n----------------------------------------\n\nTITLE: Threaded Service Task Implementation\nDESCRIPTION: This python code implements a ThreadedServiceTask that extends the standard ServiceTask.  It calls the service and stores the future associated with the task.  It will return None, indicating that the task will transition to a STARTED state.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n    class ThreadedServiceTask(ServiceTask):\n\n        def _execute(self, my_task):\n            script_engine = my_task.workflow.script_engine\n            params = dict((name, script_engine.evaluate(my_task, p['value'])) for name, p in self.operation_params.items())\n            try:\n                future = script_engine.call_service(\n                    my_task.data,\n                    operation_name=self.operation_name,\n                    operation_params=params\n                )\n                script_engine.environment.futures[future] = my_task\n            except Exception as exc:\n                raise WorkflowTaskException('Service Task execution error', task=my_task, exception=exc)\n```\n\n----------------------------------------\n\nTITLE: Camunda Workflow Parsing and Specification\nDESCRIPTION: This snippet imports `CamundaParser`, `<TaskSpec>`, and `DEFAULT_CONFIG` from `SpiffWorkflow.camunda.parser`, `SpiffWorkflow.camunda.specs`, and `SpiffWorkfllw.camunda.serializer`.  These components are utilized to parse Camunda-specific BPMN extensions and define custom task specifications compatible with Camunda.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.camunda.parser import CamundaParser\nfrom SpiffWorkflow.camunda.specs import <TaskSpec>\nfrom SpiffWorkfllw.camunda.serializer import DEFAULT_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Update Completed Futures in ThreadInstance\nDESCRIPTION: This Python code extends the Instance class to create a ThreadInstance, which includes methods to update completed futures and run ready events.  The `update_completed_futures` method checks for completed futures, retrieves the result, sets the result variable in the task data, and completes the task.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n    class ThreadInstance(Instance):\n\n        def update_completed_futures(self):\n            futures = self.workflow.script_engine.environment.futures\n            finished = [f for f in futures if f.done()]\n            for future in finished:\n                task = futures.pop(future)\n                result = future.result()\n                task.data[task.task_spec.result_variable] = result\n                task.complete()\n\n        def run_ready_events(self):\n            self.update_completed_futures()\n            super().run_ready_events()\n```\n\n----------------------------------------\n\nTITLE: Importing Workflow Components in SpiffWorkflow\nDESCRIPTION: This snippet demonstrates how to import necessary classes for creating and running workflows in SpiffWorkflow. It imports `BpmnWorkflow`, `BpmnEvent` from the `SpiffWorkflow.bpmn` module, and `TaskState` from `SpiffWorfkflow`. These classes are fundamental for defining and managing BPMN workflows.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn import BpmnWorkflow, BpmnEvent\nfrom SpiffWorfkflow import TaskState\n```\n\n----------------------------------------\n\nTITLE: Simple Wait Service Function\nDESCRIPTION: This python code defines a simple wait service that accepts seconds and a job_id as input, waits for the specified number of seconds, and then returns a formatted string that indicates the job is complete.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n    def wait(seconds, job_id):\n        time.sleep(seconds)\n        return f'{job_id} slept {seconds} seconds'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Data Store in SpiffWorkflow\nDESCRIPTION: This snippet imports the `BpmnDataStoreSpecification` class from the `SpiffWorkflow.bpmn.spec` module. This class is used to define and implement data stores within a BPMN workflow, allowing the persistence and sharing of data between tasks.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.spec import BpmnDataStoreSpecification\n```\n\n----------------------------------------\n\nTITLE: Threaded Service Task Environment\nDESCRIPTION: This Python code creates a service task environment with a thread pool and a call_service function that submits the 'wait' task to the thread pool.  It returns a future to the calling process. If operation_name is not wait, then it raises a ValueError.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n    class ServiceTaskEnvironment(TaskDataEnvironment):\n\n        def __init__(self):\n            super().__init__()\n            self.pool = ThreadPoolExecutor(max_workers=10)\n            self.futures = {}\n\n        def call_service(self, context, operation_name, operation_params):\n            if operation_name == 'wait':\n                seconds = randrange(1, 30)\n                return self.pool.submit(wait, seconds, operation_params['job_id'])\n            else:\n                raise ValueError(\"Unknown Service!\")\n```\n\n----------------------------------------\n\nTITLE: Using a Task Specification in SpiffWorkflow\nDESCRIPTION: This snippet imports placeholder classes `<TaskSpec>` and `<EventDefinition>` from `SpiffWorkflow.bpmn.specs` and `SpiffWorkflow.bpmn.specs.event_definition` respectively.  In a real implementation, these would be replaced with actual TaskSpec and EventDefinition classes to define the behavior of tasks and events.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.specs import <TaskSpec>\nfrom SpiffWorkflow.bpmn.specs.event_definition import <EventDefinition>\n```\n\n----------------------------------------\n\nTITLE: Run Threaded Service Task Example\nDESCRIPTION: These console commands load and run the threaded service task example. The first command adds the example and specifies the service name and BPMN file. The second command executes the example.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n    ./runner.py -e spiff_example.misc.threaded_service_task add -p threaded_service -b bpmn/tutorial/threaded_service_task.bpmn\n    ./runner.py -e spiff_example.misc.threaded_service_task\n```\n\n----------------------------------------\n\nTITLE: Importing Customized Parsing Components\nDESCRIPTION: This snippet imports the `TaskParser` and `EventDefinitionParser` classes from the `SpiffWorkflow.bpmn.parser` module. These classes are used to customize the parsing process for specific task types or event definitions within a BPMN diagram.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.parser import TaskParser, EventDefinitionParser\n```\n\n----------------------------------------\n\nTITLE: Importing custom execution functions and JSON serializer in Python\nDESCRIPTION: Imports specific functions and a registry object from a local module named 'custom_exec'. These imports include 'lookup_product_info', 'lookup_shipping_cost', and 'registry' which is used for handling JSON serialization and deserialization of execution contexts. This sets up dependencies for executing and serializing script contexts.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom .custom_exec import (\n    lookup_product_info,\n    lookup_shipping_cost,\n    registry,\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Execution Environment for Script Engine\nDESCRIPTION: This snippet imports the `TaskDataEnvironment` class from the `SpiffWorkflow.bpmn.script_engine` module. This class can be extended or modified to customize the execution environment for scripts within a BPMN workflow, such as providing access to specific data or functions.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/imports.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.script_engine import TaskDataEnvironment\n```\n\n----------------------------------------\n\nTITLE: Data Storage Overview\nDESCRIPTION: This snippet outlines the different ways data is stored in a workflow: Workflow data, Task data, Task internal data, and Task spec data.  These are the different scopes that data can reside within SpiffWorkflow.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/concepts.rst#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n:code:`bpmn`\n```\n\n----------------------------------------\n\nTITLE: Handling script evaluation and execution with context restoration in Python\nDESCRIPTION: Restores local and external execution contexts from JSON serialized strings using the registry, integrates them with the global context for script execution, and supports two methods: 'eval' for evaluating expressions and returning results, and 'exec' for running scripts that modify the local context. The final results are serialized back to JSON. It requires 'json' and a 'registry' capable of context restoration and conversion.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nlocal_ctx = registry.restore(json.loads(args.context))\nglobal_ctx = globals()\nglobal_ctx.update(local_ctx)\nif args.external is not None:\n    global_ctx.update(registry.restore(json.loads(args.external)))\nif args.method == 'eval':\n    result = eval(args.expr, global_ctx, local_ctx)\nelif args.method == 'exec':\n    exec(args.script, global_ctx, local_ctx)\n    result = local_ctx\nprint(json.dumps(registry.convert(result)))\n```\n\n----------------------------------------\n\nTITLE: Defining custom Python subprocess scripting environment class\nDESCRIPTION: Defines a 'SubprocessScriptingEnvironment' class extending a base Python script engine environment, designed to evaluate expressions and execute scripts within a subprocess. The class uses an external Python module ('executable') to run scripts safely with serialized contexts and external contexts. It provides methods: 'evaluate' for expression evaluation, 'execute' for running scripts with context merging, 'run' for subprocess command execution with JSON contexts, and 'parse_output' for handling subprocess output and errors. Dependencies include 'subprocess', 'json', and a suitable 'registry' for serialization.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass SubprocessScriptingEnvironment(BasePythonScriptEngineEnvironment):\n\n    def __init__(self, executable, serializer, **kwargs):\n        super().__init__(**kwargs)\n        self.executable = executable\n        self.serializer = serializer\n\n    def evaluate(self, expression, context, external_context=None):\n        output = self.run(['eval', expression], context, external_context)\n        return self.parse_output(output)\n\n    def execute(self, script, context, external_context=None):\n        output = self.run(['exec', script], context, external_context)\n        DeepMerge.merge(context, self.parse_output(output))\n        return True\n\n    def run(self, args, context, external_context):\n        cmd = ['python', '-m', self.executable] + args + ['-c', json.dumps(registry.convert(context))]\n        if external_context is not None:\n            cmd.extend(['-x', json.dumps(registry.convert(external_context))])\n        return subprocess.run(cmd, capture_output=True)\n\n    def parse_output(self, output):\n        if output.stderr:\n            raise Exception(output.stderr.decode('utf-8'))\n        return registry.restore(json.loads(output.stdout))\n\nexecutable = 'spiff_example.spiff.subprocess_engine'\nscript_env = SubprocessScriptingEnvironment(executable, serializer)\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Script Engine with Datetime - Python\nDESCRIPTION: This snippet initializes the `PythonScriptEngine` used by SpiffWorkflow to execute script tasks and evaluate expressions. It creates a `TaskDataEnvironment` that provides the execution context, specifically including the `datetime` module, making it available within scripts. This environment can be customized to expose specific modules or variables to scripts.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/application.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nscript_env = TaskDataEnvironment({'datetime': datetime })\nscript_engine = PythonScriptEngine(script_env)\n```\n\n----------------------------------------\n\nTITLE: Running example spiffworkflow commands in console\nDESCRIPTION: Demonstrates example commands to execute the SpiffWorkflow runner script with a custom execution environment. The first command runs the runner with specific parameters '-e' for environment, '-p' for product, and '-b' for specifying BPMN files. The second command runs the runner again with the custom execution environment. These commands illustrate usage patterns for integration testing or script invocation in a shell environment.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n./runner.py -e spiff_example.spiff.custom_exec add -p order_product \\\n    -b bpmn/tutorial/{top_level_script,call_activity_script}.bpmn\n./runner.py -e spiff_example.spiff.custom_exec\n```\n\n----------------------------------------\n\nTITLE: Setting up SpiffWorkflow development environment and running tests\nDESCRIPTION: Commands to install SpiffWorkflow with development dependencies, change directory to the test location, and run test coverage.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install spiffworkflow[dev]\ncd tests/SpiffWorkflow\ncoverage run --source=SpiffWorkflow -m unittest discover -v . \"*Test.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing SpiffWorkflow via pip\nDESCRIPTION: Command to install the SpiffWorkflow package using pip package manager.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install spiffworkflow\n```\n\n----------------------------------------\n\nTITLE: Running Curses UI (spiff_example.spiff.file) - Console\nDESCRIPTION: This command starts the curses-based user interface of the example application. It loads the configuration defined in `spiff_example.spiff.file`, which uses JSON file serialization for workflow data. This is the default mode when no command-line action is specified after the configuration argument.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/application.rst#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n./runner.py -e spiff_example.spiff.file\n```\n\n----------------------------------------\n\nTITLE: Adding Workflow Spec via CLI (spiff_example.spiff.file) - Console\nDESCRIPTION: This command demonstrates using the example application's command-line interface to add a new workflow specification. It uses the `spiff_example.spiff.file` configuration, which serializes workflow specs to JSON files. The command specifies the process ID (`-p`) and the paths to the BPMN (`-b`) and DMN (`-d`) files.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/application.rst#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n./runner.py -e spiff_example.spiff.file add \\\n   -p order_product \\\n   -b bpmn/tutorial/{top_level,call_activity}.bpmn \\\n   -d bpmn/tutorial/{product_prices,shipping_costs}.dmn\n```\n\n----------------------------------------\n\nTITLE: Listing Workflow Specs - Console\nDESCRIPTION: Shows the command to list the workflow specifications that have been added to the system, displaying their IDs, process IDs, and base BPMN files. This is useful for obtaining the IDs needed for diff or migration commands.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n./runner.py -e spiff_example.spiff.diffs list_specs\n```\n\n----------------------------------------\n\nTITLE: Adding Specs with Runner Script - Console\nDESCRIPTION: Demonstrates how to add different versions of workflow specifications and their dependencies using the project's runner script. This is a prerequisite for comparing specs or instances against them.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n./runner.py -e spiff_example.spiff.diffs add -p order_product \\\n    -b bpmn/tutorial/task_types.bpmn \\\n    -d bpmn/tutorial/product_prices.dmn\n\n./runner.py -e spiff_example.spiff.diffs add -p order_product \\\n    -b bpmn/tutorial/gateway_types.bpmn \\\n    -d bpmn/tutorial/{product_prices,shipping_costs}.dmn\n\n./runner.py -e spiff_example.spiff.diffs add -p order_product \\\n    -b bpmn/tutorial/{top_level,call_activity}.bpmn \\\n    -d bpmn/tutorial/{shipping_costs,product_prices}.dmn\n\n./runner.py -e spiff_example.spiff.diffs add -p order_product \\\n    -b bpmn/tutorial/{top_level_script,call_activity_script}.bpmn \\\n    -d bpmn/tutorial/shipping_costs.dmn\n```\n\n----------------------------------------\n\nTITLE: Configuring Spiff Workflow and Task Loggers in Python\nDESCRIPTION: This Python code demonstrates configuring the 'spiff.task' and 'spiff.workflow' loggers by adding stream handlers and custom formatters. The formatters include extra log record attributes such as 'workflow_spec' and 'task_spec', which provide additional context for workflow and task-related log messages. Dependencies include the 'logging' module and the expectation that log records provide extra attributes; inputs are logger names, and outputs are structured log messages to stdout or stderr. The handlers can be added to further customize logging outputs for use in a command-line interface or other Python executions.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/logging.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntask_logger = logging.getLogger('spiff.task')\ntask_handler = logging.StreamHandler()\ntask_handler.setFormatter(logging.Formatter('%(asctime)s [%(name)s:%(levelname)s] (%(workflow_spec)s:%(task_spec)s) %(message)s'))\ntask_logger.addHandler(task_handler)\n\nwf_logger = logging.getLogger('spiff.workflow')\nwf_handler = logging.StreamHandler()\nwf_handler.setFormatter(logging.Formatter('%(asctime)s [%(name)s:%(levelname)s] (%(workflow_spec)s) %(message)s'))\nwf_logger.addHandler(wf_handler)\n```\n\n----------------------------------------\n\nTITLE: Parsing BPMN Collaborations in Python\nDESCRIPTION: Shows how to parse a BPMN collaboration using the `get_collaboration` method of the parser. This method processes the specified BPMN files (and optional DMN files), creates a wrapper specification containing subworkflows for each participant process, and returns this main spec along with its dependencies. Includes error handling for ValidationException.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/parsing.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef add_collaboration(self, collaboration_id, bpmn_files, dmn_files=None):\n    self.add_files(bpmn_files, dmn_files)\n    try:\n        spec, dependencies = self.parser.get_collaboration(collaboration_id)\n    except ValidationException as exc:\n        self.parser.process_parsers = {}\n        raise exc\n```\n\n----------------------------------------\n\nTITLE: Defining Error Event in BPMN XML\nDESCRIPTION: This XML snippet defines an error event named 'file_not_found' with a specific error code and a variable name associated with the error payload (filename).  This error event will be triggered when the specified file is not found.  The `spiffworkflow:variableName` extension element specifies the name of the variable that will hold the error payload.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n    <bpmn:error id=\"file_not_found\" name=\"file_not_found\" errorCode=\"1\">\n      <bpmn:extensionElements>\n        <spiffworkflow:variableName>filename</spiffworkflow:variableName>\n      </bpmn:extensionElements>\n    </bpmn:error>\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomStartEvent class in Python\nDESCRIPTION: Custom implementation of a Start Event that replaces Timer Event Definitions with None Event Definitions, effectively bypassing SpiffWorkflow's timer management. The class inherits from StartEventMixin and SpiffBpmnTask.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/custom_task_spec.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom SpiffWorkflow.bpmn.specs.event_definitions import NoneEventDefinition\nfrom SpiffWorkflow.bpmn.specs.event_definitions.timer import TimerEventDefinition\nfrom SpiffWorkflow.bpmn.specs.mixins import StartEventMixin\nfrom SpiffWorkflow.spiff.specs import SpiffBpmnTask\n\nclass CustomStartEvent(StartEventMixin, SpiffBpmnTask):\n\n    def __init__(self, wf_spec, bpmn_id, event_definition, **kwargs):\n\n        if isinstance(event_definition, TimerEventDefinition):\n            super().__init__(wf_spec, bpmn_id, NoneEventDefinition(), **kwargs)\n            self.timer_event = event_definition\n        else:\n            super().__init__(wf_spec, bpmn_id, event_definition, **kwargs)\n            self.timer_event = None\n```\n\n----------------------------------------\n\nTITLE: Implementing read_file Service\nDESCRIPTION: This Python code defines a `ServiceTaskEnvironment` class that overrides the `call_service` method to implement a 'read_file' service. The service opens the file specified by the 'filename' parameter and returns its contents. If the operation_name is not `read_file`, it will raise a ValueError.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    class ServiceTaskEnvironment(TaskDataEnvironment):\n\n        def call_service(self, context, operation_name, operation_params):\n            if operation_name == 'read_file':\n                return open(operation_params['filename']).read()\n            else:\n                raise ValueError('Unknown Service')\n```\n\n----------------------------------------\n\nTITLE: Diffing Two Workflow Specs Including Dependencies - Console\nDESCRIPTION: Demonstrates performing a spec diff that includes the dependencies (like called activities or DMN tables) of the top-level specifications by adding the `-d` flag. This provides a more comprehensive comparison when dependencies exist.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/diffs.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n./runner.py -e spiff_example.spiff.diffs diff_spec -d\\\n    -o 09400c6b-5e42-499d-964a-1e9fe9673e51 \\\n    -n f679a7ca-298a-4bff-8b2f-6101948715a9\n```\n\n----------------------------------------\n\nTITLE: Note on External Workflow Integration and Customization\nDESCRIPTION: This note discusses the complexity of embedding service configuration directly in BPMN diagrams and suggests using external tools or APIs to manage service definitions. It also references tools and mechanisms for facilitating service configuration, providing workflow authors a user-friendly interface for integrating external services into BPMN models.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/script_engine.rst#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Initializing Spiff BPMN Parser - Python\nDESCRIPTION: This snippet initializes the standard `SpiffBpmnParser`. This parser is included with SpiffWorkflow and is capable of parsing BPMN diagrams with Spiff extensions, as well as associated DMN files, without requiring further customization for basic use cases.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/bpmn/application.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nparser = SpiffBpmnParser()\n```\n\n----------------------------------------\n\nTITLE: Task State - Methods in TaskSpec\nDESCRIPTION: This snippet references the methods associated with TaskSpec behavior that determine the state of the task:  _update_hook, _on_ready_hook, run_hook, _on_complete_hook, _on_error_hook, and _on_trigger.  These methods change the state of a task.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/concepts.rst#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\n:code:`True`\n```\n\nLANGUAGE: None\nCODE:\n```\n:code:`False`\n```\n\nLANGUAGE: None\nCODE:\n```\n:code:`None`\n```\n\n----------------------------------------\n\nTITLE: Overview of Workflow and Task\nDESCRIPTION: This snippet describes the Workflow and Task, representing the state of a running workflow. This is an instance of the specification that has the current state and the actual path taken when the workflow runs.\nSOURCE: https://github.com/sartography/spiffworkflow/blob/main/doc/concepts.rst#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n:code:`Workflow`/:code:`BpmnWorkflow` and :code:`Task`\n```"
  }
]