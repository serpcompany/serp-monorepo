[
  {
    "owner": "ropl-btc",
    "repo": "satsterminal-sdk",
    "content": "TITLE: Complete Example Flow for Buying Runes with RBF Protection in JavaScript\nDESCRIPTION: This comprehensive example demonstrates the entire process of buying runes with RBF protection using the SatsTerminal SDK. It includes configuration, trade parameters, and steps for fetching quotes, creating PSBTs, and confirming transactions.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SatsTerminal } from 'satsterminal-sdk';\nimport readlineSync from 'readline-sync';\n\n// Configuration\nconst CONFIG = {\n  apiKey: 'your_api_key_here',\n  baseURL: 'https://api.satsterminal.com/v1',\n  timeout: 30000 // 30 seconds timeout\n};\n\n// Trade Parameters\nconst TRADE_PARAMS = {\n  runeName: 'LOBO•THE•WOLF•PUP',\n  address: 'bc1p...',\n  publicKey: '...',\n  paymentAddress: '3Pc...',\n  paymentPublicKey: '...',\n  btcAmount: 0.0001,\n  rbfProtection: true,\n  marketplaces: [\"MagicEden\"],\n  fill: true\n};\n\n// Initialize the SDK\nconst satsTerminal = new SatsTerminal(CONFIG);\n\n// Function to get user input for signed PSBT\nconst getSignedPSBT = () => {\n  console.log('\\nPlease sign the PSBT and enter the signed PSBT base64 string:');\n  return readlineSync.question('Signed PSBT: ');\n};\n\n// Function to get user input for signed RBF PSBT\nconst getSignedRbfPSBT = () => {\n  console.log('\\nPlease sign the RBF protection PSBT and enter the signed RBF PSBT base64 string:');\n  return readlineSync.question('Signed RBF PSBT: ');\n};\n\n// Main execution\n(async () => {\n  try {\n    // 1. Get a quote for the trade\n    console.log('\\n1. Fetching quote...');\n    const quote = await satsTerminal.fetchQuote({\n      btcAmount: TRADE_PARAMS.btcAmount,\n      runeName: TRADE_PARAMS.runeName,\n      address: TRADE_PARAMS.address,\n      marketplaces: TRADE_PARAMS.marketplaces,\n      rbfProtection: TRADE_PARAMS.rbfProtection,\n      fill: TRADE_PARAMS.fill\n    });\n  \n    console.log('Best marketplace:', quote.bestMarketplace);\n    console.log('Quote:', quote.selectedOrders);\n\n    // 2. Create a PSBT\n    console.log('\\n2. Creating PSBT...');\n    const psbtResponse = await satsTerminal.getPSBT({\n      orders: quote.selectedOrders,\n      address: TRADE_PARAMS.address,\n      publicKey: TRADE_PARAMS.publicKey,\n      paymentAddress: TRADE_PARAMS.paymentAddress,\n      paymentPublicKey: TRADE_PARAMS.paymentPublicKey,\n      utxos: [], \n      feeRate: 5, \n      runeName: TRADE_PARAMS.runeName,\n      themeID: null,\n      sell: false,\n      slippage: 9,\n      rbfProtection: TRADE_PARAMS.rbfProtection\n    });\n  \n    console.log('PSBT created:', psbtResponse);\n  \n    // Wait for user to input the signed PSBT\n    const signedPsbtBase64 = getSignedPSBT();\n  \n    // Get signed RBF PSBT if RBF protection is enabled\n    let signedRbfPsbtBase64 = null;\n    if (TRADE_PARAMS.rbfProtection && psbtResponse.rbfProtected.base64) {\n      console.log('\\nRBF Protection PSBT:', psbtResponse.rbfProtected.base64);\n      signedRbfPsbtBase64 = getSignedRbfPSBT();\n    }\n\n    // 3. Confirm the PSBT after signing\n    console.log('\\n3. Confirming PSBT...');\n    const confirmation = await satsTerminal.confirmPSBT({\n      orders: quote.selectedOrders,\n      address: TRADE_PARAMS.address,\n      publicKey: TRADE_PARAMS.publicKey,\n      paymentAddress: TRADE_PARAMS.paymentAddress,\n      paymentPublicKey: TRADE_PARAMS.paymentPublicKey,\n      signedRbfPsbtBase64: signedRbfPsbtBase64,\n      swapId: psbtResponse.swapId,\n      runeName: TRADE_PARAMS.runeName,\n      rbfProtection: TRADE_PARAMS.rbfProtection,\n      signedPsbtBase64: signedPsbtBase64\n    });\n  \n    console.log('Confirmation:', confirmation);\n\n  } catch (error) {\n    console.error('Error:', error.message);\n  \n    // Provide more helpful information for network errors\n    if (error.code === 'ECONNREFUSED') {\n      console.error('Connection refused. Make sure the API server is running and accessible.');\n    } else if (error.code === 'ECONNRESET' || error.message.includes('socket hang up')) {\n      console.error('Connection was reset or timed out. This could be due to:');\n      console.error('- Network connectivity issues');\n      console.error('- Server overload or maintenance');\n      console.error('- Invalid API key or authentication');\n      console.error('- Request timeout (the operation might take longer than expected)');\n    }\n  \n    if (process.env.NODE_ENV === 'development') {\n      console.error('Full error:', error);\n    }\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Initializing SatsTerminal SDK\nDESCRIPTION: Example of importing and initializing the SDK with basic search functionality.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SatsTerminal } from 'satsterminal-sdk';\n\nconst satsTerminal = new SatsTerminal({\n  apiKey: 'your_api_key_here'\n});\n\n// Example: Searching for runes\nconst searchResult = await satsTerminal.search({ rune_name: 'DOG•GO•TO•THE•MOON' });\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example for SatsTerminal SDK in TypeScript\nDESCRIPTION: This snippet demonstrates proper error handling when using the SatsTerminal SDK, including checks for specific error types and conditions.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const result = await satsTerminal.search({ rune_name: 'PEPE' });\n} catch (error) {\n  if (error.message.includes('API key')) {\n    console.error('Invalid API key');\n  } else if (error.code === 'ECONNRESET' || error.message.includes('socket hang up')) {\n    console.error('Network connection issue. Please try again.');\n  } else {\n    console.error('An error occurred:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming PSBT with SatsTerminal SDK in TypeScript\nDESCRIPTION: This snippet demonstrates the type definition and usage of the confirmPSBT method in the SatsTerminal SDK. It includes the method signature, parameters, and an example call.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync confirmPSBT(params: ConfirmPSBTParams): Promise<ConfirmPSBTResponse>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst confirmation = await satsTerminal.confirmPSBT({\n  orders: quote.selectedOrders,\n  address: \"bc1...\",\n  publicKey: \"...\",\n  paymentAddress: \"3Pc...\",\n  paymentPublicKey: \"...\",\n  signedPsbtBase64: \"cHNid...\",\n  signedRbfPsbtBase64: \"cHNid...\", // Only if rbfProtection is true\n  swapId: psbtResponse.swapId,\n  runeName: \"LOBO•THE•WOLF•PUP\",\n  rbfProtection: true\n});\n```\n\n----------------------------------------\n\nTITLE: Generating PSBT Transaction\nDESCRIPTION: Example of generating a Partially Signed Bitcoin Transaction with RBF protection.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst psbtResponse = await satsTerminal.getPSBT({\n  orders: quote.selectedOrders,\n  address: \"bc1...\",\n  publicKey: \"...\",\n  paymentAddress: \"3Pc...\",\n  paymentPublicKey: \"...\",\n  feeRate: 5,\n  runeName: \"LOBO•THE•WOLF•PUP\",\n  slippage: 9,\n  rbfProtection: true\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Quote for Rune Purchase\nDESCRIPTION: Example of fetching a quote for a rune purchase with various parameters including RBF protection.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst quote = await satsTerminal.fetchQuote({\n  btcAmount: 0.0001,\n  runeName: \"LOBO•THE•WOLF•PUP\",\n  address: \"bc1...\",\n  marketplaces: [\"MagicEden\"],\n  rbfProtection: true,\n  fill: true\n});\n```\n\n----------------------------------------\n\nTITLE: SignIn Method Implementation\nDESCRIPTION: Example of using the signIn method to authenticate a user with Bitcoin and Ordinals addresses.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst signIn = await satsTerminal.signIn({\n  ord_address: \"bc1...\",\n  btc_address: \"3Pc...\",\n  ord_public_key: \"...\",\n  btc_public_key: \"...\",\n  provider: \"xverse\"\n});\n```\n\n----------------------------------------\n\nTITLE: Example Response for confirmPSBT in JavaScript\nDESCRIPTION: This snippet shows an example response from the confirmPSBT method, including the marketplace, transaction ID, and RBF protection details.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  marketplace: 'magiceden',\n  txid: '4fb3ae350ae4366687a1e069b1d4de528f3dc9dc097382de041e979a8187312b',\n  rbfProtection: {\n    fundsPreparationTxId: '4fb3ae350ae4366687a1e069b1d4de528f3dc9dc097382de041e979a8187312b',\n    fulfillmentId: 'bd85a36b-7a54-458a-8585-e3af2b1a8fe1'\n  },\n  isRbfTxid: true\n}\n```\n\n----------------------------------------\n\nTITLE: Bind Method Implementation\nDESCRIPTION: Example of binding a user's wallet to Unisat and DotSwap services.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst bind = await satsTerminal.bind({\n  btcAddress: \"3Pc...\",\n  nftAddress: \"bc1...\",\n  sign: \"user_signature_here\"\n});\n```\n\n----------------------------------------\n\nTITLE: Rune Search Implementation\nDESCRIPTION: Example of searching for runes with optional sell order parameter.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await satsTerminal.search({\n  rune_name: 'LOBO•THE•WOLF•PUP',\n  sell: false\n});\n```\n\n----------------------------------------\n\nTITLE: Points Balance Query\nDESCRIPTION: Example of querying a user's Amber points balance using their Ordinals address.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst points = await satsTerminal.points({\n  ord_address: \"bc1...\"\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SatsTerminal SDK via NPM\nDESCRIPTION: Command to install the latest version of SatsTerminal SDK using npm package manager.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install satsterminal-sdk@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Environment configuration for the SDK API key in a .env file.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nSATSTERMINAL_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in JavaScript\nDESCRIPTION: Code to load environment variables using dotenv package.\nSOURCE: https://github.com/ropl-btc/satsterminal-sdk/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config();\n```"
  }
]