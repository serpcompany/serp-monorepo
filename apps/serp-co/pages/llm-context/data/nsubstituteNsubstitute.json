[
  {
    "owner": "nsubstitute",
    "repo": "nsubstitute",
    "content": "TITLE: Setting Return Values for Method Calls\nDESCRIPTION: This code sets up the `Add` method of the `calculator` substitute to return 3 when called with arguments 1 and 2. It then asserts that the method returns the expected value. This demonstrates how to define specific return values for method calls using NSubstitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\ncalculator.Add(1, 2).Returns(3);\nAssert.That(calculator.Add(1, 2), Is.EqualTo(3));\n```\n\n----------------------------------------\n\nTITLE: Checking Received Calls with Argument Matchers (C#)\nDESCRIPTION: This snippet demonstrates using argument matchers to check calls received with specific arguments using `Arg.Any<T>()` and `Arg.Is<T>(predicate)`. It checks calls to `calculator.Add` were received with a second argument of 2 and any first argument, and with a first argument less than 0 and a second argument of 100.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-01-received-calls.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncalculator.Add(1, 2);\ncalculator.Add(-100, 100);\n\n//Check received with second arg of 2 and any first arg:\ncalculator.Received().Add(Arg.Any<int>(), 2);\n//Check received with first arg less than 0, and second arg of 100:\ncalculator.Received().Add(Arg.Is<int>(x => x < 0), 100);\n//Check did not receive a call where second arg is >= 500 and any first arg:\ncalculator\n    .DidNotReceive()\n    .Add(Arg.Any<int>(), Arg.Is<int>(x => x >= 500));\n```\n\n----------------------------------------\n\nTITLE: Ignoring arguments of specific subtype C#\nDESCRIPTION: Illustrates how to match arguments of a specific subtype using Arg.Any<T>() to verify received calls.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nformatter.Format(new object());\nformatter.Format(\"some string\");\n\nformatter.Received().Format(Arg.Any<object>());\nformatter.Received().Format(Arg.Any<string>());\nformatter.DidNotReceive().Format(Arg.Any<int>());\n```\n\n----------------------------------------\n\nTITLE: Verifying Received Calls\nDESCRIPTION: This code demonstrates how to verify that a substitute received a specific call and did not receive another.  The `Received()` method asserts that the `Add` method was called with arguments 1 and 2, while `DidNotReceive()` asserts that it was not called with arguments 5 and 7. This helps ensure that the correct methods are being called during the test.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\ncalculator.Add(1, 2);\ncalculator.Received().Add(1, 2);\ncalculator.DidNotReceive().Add(5, 7);\n```\n\n----------------------------------------\n\nTITLE: Returning Value Based on Function\nDESCRIPTION: Demonstrates how to use a lambda function with `Returns()` to define the return value of the `Add` method based on the arguments passed to it. It matches all calls to `Add()` using argument matchers and returns the sum of the arguments.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-03-return-from-function.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncalculator\n    .Add(Arg.Any<int>(), Arg.Any<int>())\n    .Returns(x => (int)x[0] + (int)x[1]);\n\nAssert.That(calculator.Add(1, 1), Is.EqualTo(2));\nAssert.That(calculator.Add(20, 30), Is.EqualTo(50));\nAssert.That(calculator.Add(-73, 9348), Is.EqualTo(9275));\n```\n\n----------------------------------------\n\nTITLE: Initializing Substitute for Interface (C#)\nDESCRIPTION: Creates a simple substitute for an interface using NSubstitute. This is the standard way to create a substitute for a type in NSubstitute. The type is normally an interface but can be a class.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-02-creating-a-substitute.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar substitute = Substitute.For<ISomeInterface>();\n```\n\n----------------------------------------\n\nTITLE: Using Argument Matching\nDESCRIPTION: This code demonstrates how to use argument matching when verifying received calls. It uses `Arg.Any<int>()` to match any integer and `Arg.Is<int>(x => x < 0)` to match any negative integer. This allows for more flexible and powerful verification of method calls.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\ncalculator.Add(10, -5);\ncalculator.Received().Add(10, Arg.Any<int>());\ncalculator.Received().Add(10, Arg.Is<int>(x => x < 0));\n```\n\n----------------------------------------\n\nTITLE: Checking a Call Was Not Received with NSubstitute (C#)\nDESCRIPTION: This snippet illustrates how to check if a specific call was *not* received by a substitute using the `DidNotReceive()` extension method. It builds on the previous example with the `ICommand` interface and `SomethingThatNeedsACommand` class, and tests that the `Execute()` method was not called.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-01-received-calls.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar command = Substitute.For<ICommand>();\nvar something = new SomethingThatNeedsACommand(command);\n//Act\nsomething.DontDoAnything();\n//Assert\ncommand.DidNotReceive().Execute();\n```\n\n----------------------------------------\n\nTITLE: Setting a Sequence of Return Values\nDESCRIPTION: This code shows how to set up a sequence of return values for a property. The `Mode` property will return \"HEX\" on the first call, \"DEC\" on the second, and \"BIN\" on the third. This is useful for simulating scenarios where a property's value changes over time.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_9\n\nLANGUAGE: CSharp\nCODE:\n```\ncalculator.Mode.Returns(\"HEX\", \"DEC\", \"BIN\");\nAssert.That(calculator.Mode, Is.EqualTo(\"HEX\"));\nAssert.That(calculator.Mode, Is.EqualTo(\"DEC\"));\nAssert.That(calculator.Mode, Is.EqualTo(\"BIN\"));\n```\n\n----------------------------------------\n\nTITLE: Raising Event with Custom EventArgs C#\nDESCRIPTION: Illustrates raising the `LowFuelWarning` event, which requires a custom `LowFuelWarningEventArgs` instance.  It uses `Raise.EventWith` to provide this instance, both with and without specifying a sender. It also adds a handler that increments a counter and asserts that the counter is 2 after raising the event twice.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-06-01-raising-events.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nengine.LowFuelWarning += (sender, args) => numberOfEvents++;\n\n//Raise event with specific args, any sender:\nengine.LowFuelWarning += Raise.EventWith(new LowFuelWarningEventArgs(10));\n//Raise event with specific args and sender:\nengine.LowFuelWarning += Raise.EventWith(new object(), new LowFuelWarningEventArgs(10));\n\nAssert.AreEqual(2, numberOfEvents);\n```\n\n----------------------------------------\n\nTITLE: Clear Received Calls using NSubstitute in C#\nDESCRIPTION: Demonstrates how to use NSubstitute to substitute for the ICommand interface, create an instance of the OnceOffCommandRunner, and test that the Execute method is called only once. The ClearReceivedCalls() method is used to clear the received calls after the first run.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-10-clear-received-calls.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar command = Substitute.For<ICommand>();\nvar runner = new OnceOffCommandRunner(command);\n\n//First run\nrunner.Run();\ncommand.Received().Execute();\n\n//Forget previous calls to command\ncommand.ClearReceivedCalls();\n\n//Second run\nrunner.Run();\ncommand.DidNotReceive().Execute();\n```\n\n----------------------------------------\n\nTITLE: Setting Return Value for Property with Returns() and Setter C#\nDESCRIPTION: Illustrates two ways to set return values for properties: using `Returns()` and using the standard property setter.  The `Mode` property is set to \"DEC\" using `Returns()` and then set to \"HEX\" using the property setter. The assertions verify the set values.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-01-set-return-value.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncalculator.Mode.Returns(\"DEC\");\nAssert.AreEqual(calculator.Mode, \"DEC\");\n\ncalculator.Mode = \"HEX\";\nAssert.AreEqual(calculator.Mode, \"HEX\");\n```\n\n----------------------------------------\n\nTITLE: Multiple Returns with Callbacks C#\nDESCRIPTION: Configures a Substitute property to return values or execute actions using callbacks on successive calls.  Demonstrates setting up the `Mode` property of an `ICalculator` Substitute to return \"DEC\", \"HEX\", and then throw an exception on subsequent accesses. Requires the Substitute library and an `ICalculator` interface Substitute object named `calculator`.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-04-multiple-returns.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ncalculator.Mode.Returns(x => \"DEC\", x => \"HEX\", x => { throw new Exception(); });\nAssert.AreEqual(\"DEC\", calculator.Mode);\nAssert.AreEqual(\"HEX\", calculator.Mode);\nAssert.Throws<Exception>(() => { var result = calculator.Mode; });\n```\n\n----------------------------------------\n\nTITLE: Substitute Usage Example in C#\nDESCRIPTION: This code snippet demonstrates basic usage of NSubstitute for creating a substitute, setting a return value for a method, checking that the method was called with specific arguments, checking that a method was not called with specific arguments, and raising an event on the substitute. The interface `ICalculator` is substituted to provide a test double for testing purposes.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//Create:\nvar calculator = Substitute.For<ICalculator>();\n\n//Set a return value:\ncalculator.Add(1, 2).Returns(3);\nAssert.AreEqual(3, calculator.Add(1, 2));\n\n//Check received calls:\ncalculator.Received().Add(1, Arg.Any<int>());\ncalculator.DidNotReceive().Add(2, 2);\n\n//Raise events\ncalculator.PoweringUp += Raise.Event();\n```\n\n----------------------------------------\n\nTITLE: Checking Received Calls in C#\nDESCRIPTION: This C# code demonstrates how to verify that a substitute received a specific method call using NSubstitute. The `Received()` method asserts that the `Add` method was called with arguments 1 and 2. The `DidNotReceive()` method asserts that the `Add` method was not called with arguments 5 and 7.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n_calculator.Add(1, 2);\n_calculator.Received().Add(1, 2);\n_calculator.DidNotReceive().Add(5, 7);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Arguments with ReceivedWithAnyArgs (C#)\nDESCRIPTION: This snippet shows how to check if a call was received or not received while ignoring the arguments using `ReceivedWithAnyArgs()` and `DidNotReceiveWithAnyArgs()`. This is useful when you only care that the method was called, not the specific arguments passed.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-01-received-calls.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncalculator.Add(1, 3);\n\ncalculator.ReceivedWithAnyArgs().Add(default, default);\ncalculator.DidNotReceiveWithAnyArgs().Subtract(default, default);\n```\n\n----------------------------------------\n\nTITLE: Creating a Substitute for an Interface\nDESCRIPTION: This code creates a substitute instance of the `ICalculator` interface using `Substitute.For<ICalculator>()`.  This allows you to control the behavior of the `ICalculator` in your tests.  The created substitute can then be used to define return values, verify received calls, and simulate events.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\ncalculator = Substitute.For<ICalculator>();\n```\n\n----------------------------------------\n\nTITLE: Checking a Received Call with NSubstitute (C#)\nDESCRIPTION: This snippet demonstrates how to check if a specific call has been received by a substitute using the `Received()` extension method. It defines an `ICommand` interface, a class `SomethingThatNeedsACommand` that uses the interface, and a test that verifies the `Execute()` method was called on the substitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-01-received-calls.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICommand {\n    void Execute();\n    event EventHandler Executed;\n}\n\npublic class SomethingThatNeedsACommand {\n    ICommand command;\n    public SomethingThatNeedsACommand(ICommand command) {\n        this.command = command;\n    }\n    public void DoSomething() { command.Execute(); }\n    public void DontDoAnything() { }\n}\n\n[Test]\npublic void Should_execute_command() {\n    //Arrange\n    var command = Substitute.For<ICommand>();\n    var something = new SomethingThatNeedsACommand(command);\n    //Act\n    something.DoSomething();\n    //Assert\n    command.Received().Execute();\n}\n```\n\n----------------------------------------\n\nTITLE: Raising Event with Default EventArgs C#\nDESCRIPTION: Demonstrates raising the `Idling` event using `Raise.Event`, allowing NSubstitute to create the `EventArgs` instance.  It adds a handler to the `Idling` event that sets a boolean when called and then asserts the boolean is true after raising the event.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-06-01-raising-events.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nengine.Idling += Raise.Event();\nAssert.True(wasCalled);\n```\n\n----------------------------------------\n\nTITLE: Interface definition for IFoo\nDESCRIPTION: Defines a simple interface IFoo with a single method Bar which accepts an integer and a string and returns a string. This interface is used in the subsequent example to demonstrate argument access using Arg<T>().\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-03-return-from-function.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFoo {\n    string Bar(int a, string b);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Return Value for Method with Returns() C#\nDESCRIPTION: Demonstrates how to set a return value for a method call using the `Returns()` extension method.  The `Add` method of the `ICalculator` substitute is configured to return 3 when called with arguments 1 and 2.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-01-set-return-value.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar calculator = Substitute.For<ICalculator>();\ncalculator.Add(1, 2).Returns(3);\n```\n\n----------------------------------------\n\nTITLE: Install NSubstitute Analyzers for VB via NuGet\nDESCRIPTION: This code snippet provides the command to install the optional NSubstitute analyzers for Visual Basic (VB) via NuGet package manager. These analyzers can help identify potential issues in your NSubstitute usage during development.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/index.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nInstall-Package NSubstitute.<wbr>Analyzers.<wbr>VisualBasic\n```\n\n----------------------------------------\n\nTITLE: Using Argument Matching with Returns\nDESCRIPTION: This code uses argument matching with the `Returns` method to define a more complex behavior for the `Add` method. It returns the sum of the two arguments, regardless of their specific values. This demonstrates how to create dynamic return values based on the input arguments.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\ncalculator\n   .Add(Arg.Any<int>(), Arg.Any<int>())\n   .Returns(x => (int)x[0] + (int)x[1]);\nAssert.That(calculator.Add(5, 10), Is.EqualTo(15));\n```\n\n----------------------------------------\n\nTITLE: Asserting Call Order with Received.InOrder in C#\nDESCRIPTION: This snippet demonstrates how to use `Received.InOrder` to assert the specific order in which calls are made to substituted objects. It checks that `connection.Open()`, `command.Run(connection)`, and `connection.Close()` are called in that exact sequence. It relies on NSubstitute and a controller class with `IConnection` and `ICommand` dependencies. If the calls are not received in the specified order, an exception is thrown.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-01-01-received-in-order.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void TestCommandRunWhileConnectionIsOpen() {\n  var connection = Substitute.For<IConnection>();\n  var command = Substitute.For<ICommand>();\n  var subject = new Controller(connection, command);\n\n  subject.DoStuff();\n\n  Received.InOrder(() => {\n    connection.Open();\n    command.Run(connection);\n    connection.Close();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally matching an argument with Arg.Is C#\nDESCRIPTION: Shows how to use Arg.Is<T>(Predicate<T> condition) to conditionally match arguments based on a predicate when verifying received calls.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\ncalculator.Add(1, -10);\n\n//Received call with first arg 1 and second arg less than 0:\ncalculator.Received().Add(1, Arg.Is<int>(x => x < 0));\n//Received call with first arg 1 and second arg of -2, -5, or -10:\ncalculator\n    .Received()\n    .Add(1, Arg.Is<int>(x => new[] {-2,-5,-10}.Contains(x)));\n//Did not receive call with first arg greater than 10:\ncalculator.DidNotReceive().Add(Arg.Is<int>(x => x > 10), -10);\n```\n\n----------------------------------------\n\nTITLE: Returning a Value Based on Arguments in C#\nDESCRIPTION: This C# code shows how to use a function with `Returns()` to compute a return value based on the arguments passed to a method. In this example, the `Add` method returns the sum of its two arguments. The code also includes an assertion to verify the returned value.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/README.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n_calculator\n   .Add(Arg.Any<int>(), Arg.Any<int>())\n   .Returns(x => (int)x[0] + (int)x[1]);\nAssert.That(_calculator.Add(5, 10), Is.EqualTo(15));\n```\n\n----------------------------------------\n\nTITLE: Accessing Arguments with Arg<T>()\nDESCRIPTION: Shows how to use `Arg<T>()` to access arguments passed to a call. It sets up a substitute for `IFoo` and defines the return value of `Bar` using `ReturnsForAnyArgs()`, accessing the string argument with `x.Arg<string>()`.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-03-return-from-function.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar foo = Substitute.For<IFoo>();\nfoo.Bar(default, default).ReturnsForAnyArgs(x => \"Hello \" + x.Arg<string>());\nAssert.That(foo.Bar(1, \"World\"), Is.EqualTo(\"Hello World\"));\n```\n\n----------------------------------------\n\nTITLE: Setting up callbacks with ReturnsForAnyArgs and AndDoes in C#\nDESCRIPTION: This snippet demonstrates how to execute a callback function when a specific method (in this case, `Add`) is called on the substitute, using `ReturnsForAnyArgs` to define a return value and `AndDoes` to specify the callback to execute. This is useful for performing actions like incrementing a counter whenever the method is invoked. The example verifies that the callback is executed the expected number of times.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-05-01-callbacks.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar counter = 0;\ncalculator\n    .Add(default, default)\n    .ReturnsForAnyArgs(x => 0)\n    .AndDoes(x => counter++);\n\ncalculator.Add(7, 3);\ncalculator.Add(2, 2);\ncalculator.Add(11, -3);\nAssert.AreEqual(counter, 3);\n```\n\n----------------------------------------\n\nTITLE: Argument Matching in C#\nDESCRIPTION: This C# code demonstrates how to use argument matching with NSubstitute. `Arg.Any<int>()` matches any integer value. `Arg.Is<int>(x => x < 0)` matches any integer value less than 0. The code verifies that the `Add` method was called with specific arguments using these matchers.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/README.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n_calculator.Add(10, -5);\n_calculator.Received().Add(10, Arg.Any<int>());\n_calculator.Received().Add(10, Arg.Is<int>(x => x < 0));\n```\n\n----------------------------------------\n\nTITLE: Initializing Substitute for Class with Constructor Args (C#)\nDESCRIPTION: Creates a substitute for a class with constructor arguments. This is done using the `Substitute.For<T>(params object[] constructorArguments)` overload. Note the warning about substituting for classes only working with virtual members.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-02-creating-a-substitute.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar someClass = Substitute.For<SomeClassWithCtorArgs>(5, \"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Return Value for Any Args with Default C#\nDESCRIPTION: Configures the `Add` method of the substitute `calculator` to return 100 regardless of the arguments passed to it using `ReturnsForAnyArgs()` and the `default` keyword for better readability. This is equivalent to using `Arg.Any<int>()` for each argument.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-03-return-for-any-args.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\ncalculator.Add(default, default).ReturnsForAnyArgs(100);\n```\n\n----------------------------------------\n\nTITLE: Checking Call Count with NSubstitute (C#)\nDESCRIPTION: This example shows how to check if a call was received a specific number of times using `Received(int)`. It defines a `CommandRepeater` class that executes a command a specified number of times and asserts that the command was executed exactly that many times by the substitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-01-received-calls.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CommandRepeater {\n    ICommand command;\n    int numberOfTimesToCall;\n    public CommandRepeater(ICommand command, int numberOfTimesToCall) {\n      this.command = command;\n      this.numberOfTimesToCall = numberOfTimesToCall;\n    }\n\n    public void Execute() {\n      for (var i=0; i<numberOfTimesToCall; i++) command.Execute();\n    }\n}\n\n[Test]\npublic void Should_execute_command_the_number_of_times_specified() {\n  var command = Substitute.For<ICommand>();\n  var repeater = new CommandRepeater(command, 3);\n  //Act\n  repeater.Execute();\n  //Assert\n  command.Received(3).Execute(); // << This will fail if 2 or 4 calls were received\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring arguments with Arg.Any C#\nDESCRIPTION: Demonstrates how to use Arg.Any<T>() to ignore arguments when configuring return values for a substitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ncalculator.Add(Arg.Any<int>(), 5).Returns(7);\n\nAssert.AreEqual(7, calculator.Add(42, 5));\nAssert.AreEqual(7, calculator.Add(123, 5));\nAssert.AreNotEqual(7, calculator.Add(1, 7));\n```\n\n----------------------------------------\n\nTITLE: Checking Event Invocation with NSubstitute (C#)\nDESCRIPTION: This snippet demonstrates how to use substitutes for event handlers to confirm that a particular event was raised correctly. It defines a `FuelManagement` class that raises a `LowFuelDetected` event, and shows how to verify that the event was raised with the expected arguments using both a lambda expression and a substitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-01-received-calls.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LowFuelWarningEventArgs : EventArgs {\n    public int PercentLeft { get; }\n    public LowFuelWarningEventArgs(int percentLeft){\n        PercentLeft = percentLeft;\n    }\n}\n\npublic class FuelManagement{\n    public event EventHandler<LowFuelWarningEventArgs> LowFuelDetected;\n    public void DoSomething(){\n        LowFuelDetected?.Invoke(this, new LowFuelWarningEventArgs(15));\n    }\n}\n\n// Often it is easiest to use a lambda for this, as shown in the following test:\n[Test]\npublic void ShouldRaiseLowFuel_WithoutNSub(){\n    var fuelManagement = new FuelManagement();\n    var eventWasRaised = false;\n    fuelManagement.LowFuelDetected += (o,e) => eventWasRaised = true;\n\n    fuelManagement.DoSomething();\n\n    Assert.That(eventWasRaised);\n}\n\n// We can also use NSubstitute for this if we want more involved argument matching logic.\n// NSubstitute also gives us a descriptive message if the assertion fails which may be helpful in some cases.\n// (For example, if the call was not received with the expected arguments, we'll get a list of the non-matching\n// calls made to that member.)\n//\n// Note we could still use lambdas and standard assertions for this, but a substitute may be worth considering\n// in some of these cases.\n[Test]\npublic void ShouldRaiseLowFuel(){\n    var fuelManagement = new FuelManagement();\n    var handler = Substitute.For<EventHandler<LowFuelWarningEventArgs>>();\n    fuelManagement.LowFuelDetected += handler;\n\n    fuelManagement.DoSomething();\n\n    handler\n        .Received()\n        .Invoke(fuelManagement, Arg.Is<LowFuelWarningEventArgs>(x => x.PercentLeft < 20));\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions with Returns and Do\nDESCRIPTION: This snippet illustrates how to use the `Returns` and `When(...).Do()` methods in NSubstitute to simulate throwing exceptions when a method is called. The lambda expressions within `Returns` and `Do` are executed when the corresponding method is invoked, allowing for custom exception logic.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-05-02-throwing-exceptions.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n//For non-voids:\ncalculator.Add(-1, -1).Returns(x => { throw new Exception(); });\n\n//For voids and non-voids:\ncalculator\n    .When(x => x.Add(-2, -2))\n    .Do(x => { throw new Exception(); });\n\n//Both calls will now throw.\nAssert.Throws<Exception>(() => calculator.Add(-1, -1));\nAssert.Throws<Exception>(() => calculator.Add(-2, -2));\n```\n\n----------------------------------------\n\nTITLE: Manual Substitute Creation with NSubstitute (C#)\nDESCRIPTION: This example demonstrates manually creating substitutes for INumberParserFactory and INumberParser, configuring them to return a specific set of integers for a given expression. It showcases the traditional way of creating mocks and setting up their behavior.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-10-01-auto-and-recursive-mocks.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar factory = Substitute.For<INumberParserFactory>();\nvar parser = Substitute.For<INumberParser>();\nfactory.Create(',').Returns(parser);\nparser.Parse(\"an expression\").Returns(new[] {1,2,3});\n\nAssert.AreEqual(\n    factory.Create(',').Parse(\"an expression\"),\n    new[] {1,2,3});\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions with Throws\nDESCRIPTION: This example demonstrates how to use the `Throws` and `When(...).Throw()` methods in NSubstitute to configure a substitute to throw an exception when specific methods are called. The example uses `Assert.Throws` to verify that the exceptions are thrown as expected.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-05-02-throwing-exceptions.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n//For non-voids:\ncalculator.Add(-1, -1).Throws(new Exception()); // Or .Throws<Exception>()\n\n//For voids and non-voids:\ncalculator\n    .When(x => x.Add(-2, -2))\n    .Throw(x => new Exception()); // Or .Throw<Exception>() -  - don't use .Throw*s* in this case\n\n//Both calls will now throw.\nAssert.Throws<Exception>(() => calculator.Add(-1, -1));\nAssert.Throws<Exception>(() => calculator.Add(-2, -2));\n```\n\n----------------------------------------\n\nTITLE: Return Value for Any Args C#\nDESCRIPTION: Configures the `Add` method of the substitute `calculator` to return 100 regardless of the arguments passed to it using `ReturnsForAnyArgs()`.  It then asserts that calling `Add` with different arguments will always return 100.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-03-return-for-any-args.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ncalculator.Add(1, 2).ReturnsForAnyArgs(100);\nAssert.AreEqual(100, calculator.Add(1, 2));\nAssert.AreEqual(100, calculator.Add(-7, 15));\n```\n\n----------------------------------------\n\nTITLE: Replacing Return Values with NSubstitute in C#\nDESCRIPTION: This snippet shows how to replace the return value of a property using NSubstitute's `Returns` method.  Multiple calls to `Returns` are made, and the assertion verifies that only the last value set is returned when the property is accessed. It requires the NSubstitute library and assumes an `ICalculator` interface with a `Mode` property is defined.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-10-replacing-return-values.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ncalculator.Mode.Returns(\"DEC,HEX,OCT\");\ncalculator.Mode.Returns(x => \"???\");\ncalculator.Mode.Returns(\"HEX\");\ncalculator.Mode.Returns(\"BIN\");\nAssert.AreEqual(calculator.Mode, \"BIN\");\n```\n\n----------------------------------------\n\nTITLE: Multiple Returns Configuration C#\nDESCRIPTION: Configures a Substitute property to return a sequence of values on successive calls.  Demonstrates setting up the `Mode` property of an `ICalculator` Substitute to return \"DEC\", \"HEX\", and \"BIN\" on subsequent accesses. Requires the Substitute library and an `ICalculator` interface Substitute object named `calculator`.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-04-multiple-returns.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ncalculator.Mode.Returns(\"DEC\", \"HEX\", \"BIN\");\nAssert.AreEqual(\"DEC\", calculator.Mode);\nAssert.AreEqual(\"HEX\", calculator.Mode);\nAssert.AreEqual(\"BIN\", calculator.Mode);\n```\n\n----------------------------------------\n\nTITLE: Recursive Mocking with NSubstitute (C#)\nDESCRIPTION: This example demonstrates using NSubstitute's recursive mocking feature to avoid explicitly creating each substitute. The INumberParserFactory is configured to return a substitute for INumberParser automatically, simplifying the setup process.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-10-01-auto-and-recursive-mocks.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar factory = Substitute.For<INumberParserFactory>();\nfactory.Create(',').Parse(\"an expression\").Returns(new[] {1,2,3});\n\nAssert.AreEqual(\n    factory.Create(',').Parse(\"an expression\"),\n    new[] {1,2,3});\n```\n\n----------------------------------------\n\nTITLE: Modifying Matched Argument with Struct in NSubstitute (C#)\nDESCRIPTION: Illustrates how using a struct (value type) instead of a class avoids the issue of argument modification affecting assertions. Because structs are passed by value, NSubstitute stores a copy of the struct at the time of the call. Subsequent changes to the original struct do not affect the value stored by the substitute, ensuring assertions are based on the original state.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic struct PersonStruct {\n    public string Name { get; set; }\n}\n\n[Test]\npublic void MutatingAStruct() {\n    var person = new PersonStruct { Name = \"Carrot\" };\n    var lookup = Substitute.For<IPersonStructLookup>();\n\n    lookup.Add(person);\n\n    person.Name = \"Vimes\";\n\n    // `person` was passed by value, and that value still has the original Name\n    lookup.Received().Add(Arg.Is<PersonStruct>(p => p.Name == \"Carrot\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Properties\nDESCRIPTION: This code shows how to set and get property values on a substitute. It uses both the `Returns` syntax and standard property setters. This demonstrates the flexibility of NSubstitute in handling property interactions.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\ncalculator.Mode.Returns(\"DEC\");\nAssert.That(calculator.Mode, Is.EqualTo(\"DEC\"));\n\ncalculator.Mode = \"HEX\";\nAssert.That(calculator.Mode, Is.EqualTo(\"HEX\"));\n```\n\n----------------------------------------\n\nTITLE: Matching a specific argument with Arg.Is C#\nDESCRIPTION: Illustrates how to match a specific argument value using Arg.Is<T>(T value) when verifying received calls, primarily useful when NSubstitute can't infer the argument to which the matcher applies.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ncalculator.Add(0, 42);\n\n//This won't work; NSubstitute isn't sure which arg the matcher applies to:\n//calculator.Received().Add(0, Arg.Any<int>());\n\ncalculator.Received().Add(Arg.Is(0), Arg.Any<int>());\n```\n\n----------------------------------------\n\nTITLE: Raising Events on Substitutes\nDESCRIPTION: This code demonstrates how to raise an event on a substitute. It first sets up a handler for the `PoweringUp` event, then raises the event using `Raise.Event()`. This allows you to test how your code responds to events raised by the substituted object.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\nbool eventWasRaised = false;\ncalculator.PoweringUp += (sender, args) => eventWasRaised = true;\n\ncalculator.PoweringUp += Raise.Event();\nAssert.That(eventWasRaised);\n```\n\n----------------------------------------\n\nTITLE: Raising Event with Sender and EventArgs C#\nDESCRIPTION: Demonstrates raising the `Idling` event using `Raise.EventWith` providing both a sender (object) and `EventArgs`.  It adds a handler to the `Idling` event that sets a boolean when called and then asserts the boolean is true after raising the event.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-06-01-raising-events.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar wasCalled = false;\nengine.Idling += (sender, args) => wasCalled = true;\n\n//Tell the substitute to raise the event with a sender and EventArgs:\nengine.Idling += Raise.EventWith(new object(), new EventArgs());\n\nAssert.True(wasCalled);\n```\n\n----------------------------------------\n\nTITLE: Substituting for Multiple Interfaces (C#)\nDESCRIPTION: Creates a substitute that implements multiple interfaces.  This is useful when the code checks for `IDisposable` or other interfaces. The example shows substituting for both `ICommand` and `IDisposable`, then verifying interactions with both.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-02-creating-a-substitute.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar command = Substitute.For<ICommand, IDisposable>();\nvar runner = new CommandRunner(command);\n\nrunner.RunCommand();\n\ncommand.Received().Execute();\n((IDisposable)command).Received().Dispose();\n```\n\n----------------------------------------\n\nTITLE: Handling exceptions in Arg.Is predicate C#\nDESCRIPTION: Demonstrates how NSubstitute handles exceptions thrown by the predicate passed to Arg.Is<T>(). Exceptions are swallowed, and the argument is considered non-matching.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nformatter.Format(Arg.Is<string>(x => x.Length <= 10)).Returns(\"matched\");\n\nAssert.AreEqual(\"matched\", formatter.Format(\"short\"));\nAssert.AreNotEqual(\"matched\", formatter.Format(\"not matched, too long\"));\n// Will not match because trying to access .Length on null will throw an exception when testing\n// our condition. NSubstitute will assume it does not match and swallow the exception.\nAssert.AreNotEqual(\"matched\", formatter.Format(null));\n```\n\n----------------------------------------\n\nTITLE: Configuring callbacks with Arg.Do and When C#\nDESCRIPTION: Shows how to use Arg.Do and When to configure callbacks that are executed when a matching call is made to the substitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n/* ARRANGE */\nvar widgetFactory = Substitute.For<IWidgetFactory>();\nvar subject = new Sprocket(widgetFactory);\n\n// OK: Use arg matcher to configure a callback:\nvar testLog = new List<string>();\nwidgetFactory.When(x => x.Make(Arg.Any<WidgetInfo>())).Do(x => testLog.Add(x.Arg<WidgetInfo>().Name));\n\n// OK: Use Arg.Do to configure a callback:\nvar testLog2 = new List<string>();\nwidgetFactory.Make(Arg.Do<WidgetInfo>(info => testLog2.Add(info.Name)));\n\n/* ACT */\nsubject.StartWithWidget(new WidgetInfo { Name = \"Test Widget\" });\n\n/* ASSERT */\nAssert.AreEqual(new[] { \"Test Widget\" }, testLog);\nAssert.AreEqual(new[] { \"Test Widget\" }, testLog2);\n```\n\n----------------------------------------\n\nTITLE: Returns Takes Precedence over ReturnsForAll\nDESCRIPTION: Illustrates that explicitly stubbed return values using `Returns` take precedence over values set using `ReturnsForAll`. This test shows that `GetWidget(1)` returns the explicitly stubbed `widget`, while `GetWidget(42)` returns the value set by `ReturnsForAll`.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-03-01-return-for-all.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void ReturnsTakesPrecedence() {\n  var widget = new Widget();\n  var otherWidget = new Widget();\n  var sub = Substitute.For<IWidgetExample>();\n  sub.GetWidget(1).Returns(widget);\n  sub.ReturnsForAll<Widget>(otherWidget);\n\n  Assert.That(sub.GetWidget(1), Is.SameAs(widget));\n  Assert.That(sub.GetWidget(42), Is.SameAs(otherWidget));\n}\n```\n\n----------------------------------------\n\nTITLE: Ambiguous Call Resolution Fix\nDESCRIPTION: Shows how to fix a compilation error (CS0121) caused by ambiguous method overloads in `Returns()` or `ReturnsForAnyArgs()` when using a sequence of callbacks. The ambiguity is resolved by explicitly casting the argument types or using lambda syntax.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nsub.Call().Returns(x => null, x => null);\n```\n\n----------------------------------------\n\nTITLE: Using AndDoes for Callbacks\nDESCRIPTION: Demonstrates how to use `AndDoes` to specify a callback that is executed after the return value has been determined. The example increments a counter each time the `Add` method is called on the calculator substitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-03-return-from-function.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar counter = 0;\ncalculator\n    .Add(default, default)\n    .ReturnsForAnyArgs(x => 0)\n    .AndDoes(x => counter++);\n\ncalculator.Add(7,3);\ncalculator.Add(2,2);\nAssert.AreEqual(counter, 2);\n```\n\n----------------------------------------\n\nTITLE: Checking Event Subscriptions with NSubstitute (C#)\nDESCRIPTION: This example illustrates how to check that a subscription was received for an event. It defines a `CommandWatcher` class that subscribes to an event on an `ICommand` interface, and shows how to verify that the subscription occurred. Note: it also contains a better approach, using Raise.Event and verifying the resulting behavior.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-01-received-calls.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CommandWatcher {\n    ICommand command;\n    public CommandWatcher(ICommand command) {\n        command.Executed += OnExecuted;\n    }\n    public bool DidStuff { get; private set; }\n    public void OnExecuted(object o, EventArgs e) { DidStuff = true; }\n}\n\n[Test]\npublic void ShouldDoStuffWhenCommandExecutes() {\n  var command = Substitute.For<ICommand>();\n  var watcher = new CommandWatcher(command);\n\n  command.Executed += Raise.Event();\n\n  Assert.That(watcher.DidStuff);\n}\n\n[Test]\npublic void MakeSureWatcherSubscribesToCommandExecuted() {\n    var command = Substitute.For<ICommand>();\n    var watcher = new CommandWatcher(command);\n\n    // Not recommended. Favour testing behaviour over implementation specifics.\n    // Can check subscription:\n    command.Received().Executed += watcher.OnExecuted;\n    // Or, if the handler is not accessible:\n    command.Received().Executed += Arg.Any<EventHandler>();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Use of Argument Matchers in C#\nDESCRIPTION: Illustrates the correct and incorrect ways to use argument matchers within a `Returns()` call. Argument matchers should only be used within the member call itself, not within the `Returns()` statement.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Correct use:   `sub.Method(Arg.Any<string>()).Returns(\"hi\")`\n\n// Incorrect use: `sub.Method().Returns(Arg.Any<string>())`\n```\n\n----------------------------------------\n\nTITLE: Collecting Arguments with Arg.Do in C#\nDESCRIPTION: This code snippet shows how to use Arg.Do to collect the first arguments passed to the Multiply method when the second argument is 10. The collected arguments are stored in the firstArgsBeingMultiplied list.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-12-01-actions-with-arguments.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar firstArgsBeingMultiplied = new List<int>();\ncalculator.Multiply(Arg.Do<int>(x => firstArgsBeingMultiplied.Add(x)), 10);\n\ncalculator.Multiply(2, 10);\ncalculator.Multiply(5, 10);\ncalculator.Multiply(7, 4567); //Will not match our Arg.Do as second arg is not 10\n\nAssert.AreEqual(firstArgsBeingMultiplied, new[] { 2, 5 });\n```\n\n----------------------------------------\n\nTITLE: Using the Callback builder for complex callbacks in C#\nDESCRIPTION: This snippet shows how to use the `Callback` builder for more complex callback scenarios with multiple chained actions. It uses `Callback.First()`, `Then()`, `ThenKeepDoing()`, and `AndAlways()` to build a chain of callbacks that add strings to a list and increment a counter. The assertions verify that the callbacks are executed in the correct order and the correct number of times.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-05-01-callbacks.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar sub = Substitute.For<ISomething>();\n\nvar calls = new List<string>();\nvar counter = 0;\n\nsub\n  .When(x => x.Something())\n  .Do(\n    Callback.First(x => calls.Add(\"1\"))\n        .Then(x => calls.Add(\"2\"))\n        .Then(x => calls.Add(\"3\"))\n        .ThenKeepDoing(x => calls.Add(\"+\"))\n        .AndAlways(x => counter++)\n  );\n\nfor (int i = 0; i < 5; i++)\n{\n  sub.Something();\n}\nAssert.That(String.Concat(calls), Is.EqualTo(\"123++\"));\nAssert.That(counter, Is.EqualTo(5));\n```\n\n----------------------------------------\n\nTITLE: NSubstitute: Substitute Chains (C#)\nDESCRIPTION: This example illustrates using recursive mocks to set up chains of substitutes, making it easier to configure complex object hierarchies for testing. However, it also cautions against overusing this approach due to the Law of Demeter.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-10-01-auto-and-recursive-mocks.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar context = Substitute.For<IContext>();\ncontext.CurrentRequest.Identity.Name.Returns(\"My pet fish Eric\");\nAssert.AreEqual(\n    \"My pet fish Eric\",\n    context.CurrentRequest.Identity.Name);\n```\n\n----------------------------------------\n\nTITLE: Using When..Do for non-void methods in C#\nDESCRIPTION: This snippet shows how to use the `When..Do` syntax with non-void methods.  While `Returns()` is often preferred for brevity, `When..Do` allows side effects without altering the return value. The example demonstrates how to increment a counter when `Add` is called. The code asserts that both the return value of the method and the counter are correct.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-05-01-callbacks.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar counter = 0;\ncalculator.Add(1, 2).Returns(3);\ncalculator\n    .When(x => x.Add(Arg.Any<int>(), Arg.Any<int>()))\n    .Do(x => counter++);\n\nvar result = calculator.Add(1, 2);\nAssert.AreEqual(3, result);\nAssert.AreEqual(1, counter);\n```\n\n----------------------------------------\n\nTITLE: Return Value Based on Argument Matching in C#\nDESCRIPTION: Demonstrates how to configure return values for a mocked `ICalculator`'s `Add` method based on different argument matchers. The examples show how to use `Arg.Any`, `Arg.Is` to define specific argument conditions.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-02-return-for-args.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n//Return when first arg is anything and second arg is 5:\ncalculator.Add(Arg.Any<int>(), 5).Returns(10);\nAssert.AreEqual(10, calculator.Add(123, 5));\nAssert.AreEqual(10, calculator.Add(-9, 5));\nAssert.AreNotEqual(10, calculator.Add(-9, -9));\n\n//Return when first arg is 1 and second arg less than 0:\ncalculator.Add(1, Arg.Is<int>(x => x < 0)).Returns(345);\nAssert.AreEqual(345, calculator.Add(1, -2));\nAssert.AreNotEqual(345, calculator.Add(1, 2));\n\n//Return when both args equal to 0:\ncalculator.Add(Arg.Is(0), Arg.Is(0)).Returns(99);\nAssert.AreEqual(99, calculator.Add(0, 0));\n```\n\n----------------------------------------\n\nTITLE: Renamed Raise.Event Method\nDESCRIPTION: Illustrates the renaming of the `Raise.Event<TEventArgs>(...)` method to `Raise.EventWith<TEventArgs>()` to avoid conflicts with the `Raise.Event<THandler>()` method. This snippet showcases the updated syntax.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: ReturnsForAll with Fluent Interface\nDESCRIPTION: Demonstrates using `ReturnsForAll` to make all calls returning `IWidgetBuilder` return the substitute itself. This allows chaining calls in a fluent interface. Requires NSubstitute.Extensions.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-03-01-return-for-all.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void ShouldReturnWidgetsFromBuilder() {\n  var builder = Substitute.For<IWidgetBuilder>();\n  builder.ReturnsForAll<IWidgetBuilder>(builder);\n  var line = new ProductionLine(builder);\n\n  var result = line.Run();\n\n  Assert.That(result, Is.EqualTo(builder.GetWidgets()));\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Arg.Is and Arg.Do for Actions in C#\nDESCRIPTION: This example combines Arg.Is and Arg.Do to specify a call where the first argument is less than 0 and perform an action on the second argument. It increments a counter and sets a return value for calls that match the specification.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-12-01-actions-with-arguments.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar numberOfCallsWhereFirstArgIsLessThan0 = 0;\n//Specify a call where the first arg is less than 0, and the second is any int.\n//When this specification is met we'll increment a counter in the Arg.Do action for\n//the second argument that was used for the call, and we'll also make it return 123.\ncalculator\n    .Multiply(\n        Arg.Is<int>(x => x < 0),\n        Arg.Do<int>(x => numberOfCallsWhereFirstArgIsLessThan0++)\n    ).Returns(123);\n\nvar results = new[] {\n    calculator.Multiply(-4, 3),\n    calculator.Multiply(-27, 88),\n    calculator.Multiply(-7, 8),\n    calculator.Multiply(123, 2) //First arg greater than 0, so spec won't be met.\n};\n\nAssert.AreEqual(3, numberOfCallsWhereFirstArgIsLessThan0); //3 of 4 calls have first arg < 0\nAssert.AreEqual(results, new[] {123, 123, 123, 0}); //Last call returns 0, not 123\n```\n\n----------------------------------------\n\nTITLE: Replaced Raise.Action with Raise.Event\nDESCRIPTION: Demonstrates how to replace calls to `Raise.Action()` methods, which were removed, with equivalent calls to `Raise.Event<Action>()`. The different overloads for `Raise.Action` are covered.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Setting Out Argument with Returns() Callback C#\nDESCRIPTION: Demonstrates how to configure an `out` parameter using a `Returns()` callback in NSubstitute. The callback modifies the `out` parameter's value, and the example asserts that the value is correctly set after the method call. The `Returns` callback accesses the arguments via the `x` parameter; in this case, `x[1]` refers to the second argument (the `out` parameter).\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-11-01-setting-out-and-ref-arguments.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n//Arrange\nvar lookup = Substitute.For<ILookup>();\nlookup\n    .TryLookup(\"hello\", out Arg.Any<string>())\n    .Returns(x => {\n        x[1] = \"world!\";\n        return true;\n    });\n\n//Act\nvar result = lookup.TryLookup(\"hello\", out var value);\n\n//Assert\nAssert.True(result);\nAssert.AreEqual(value, \"world!\");\n```\n\n----------------------------------------\n\nTITLE: Substituting for Multiple Types with Object Array (C#)\nDESCRIPTION: Creates a substitute that implements multiple types using an array of types and an array of constructor arguments. This method allows for substituting for one class and multiple interfaces, if needed. Constructor arguments are passed as an object array.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-02-creating-a-substitute.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar substitute = Substitute.For(\n    new[] { typeof(ICommand), typeof(ISomeInterface), typeof(SomeClassWithCtorArgs) },\n    new object[] { 5, \"hello world\" }\n);\nAssert.IsInstanceOf<ICommand>(substitute);\nAssert.IsInstanceOf<ISomeInterface>(substitute);\nAssert.IsInstanceOf<SomeClassWithCtorArgs>(substitute);\n```\n\n----------------------------------------\n\nTITLE: Setup Return Value with Arg.Is\nDESCRIPTION: Demonstrates the older, more verbose way to setup a return value for a method call with a substitute argument using `Arg.Is`.  This was required before improvements to `.Equals` and `GetHashCode` in NSubstitute. This pattern is no longer necessary in recent versions.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nsomeObject.SomeCall(Arg.Is<TypeBeingSubstituted>(a => a == aSubstitute)).Returns(1);\n```\n\n----------------------------------------\n\nTITLE: EmailServer Partial Substitute Test C#\nDESCRIPTION: This test demonstrates how to prevent a void method on a partial substitute from calling the real method using `When .. DoNotCallBase`. It creates a partial substitute for the `EmailServer` class and uses `DoNotCallBase` to prevent the real `Send` method from being executed. It then verifies that the `Send` method was called with the expected arguments.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-02-01-partial-subs.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void ShouldSendMultipleEmails() {\n  var server = Substitute.ForPartsOf<EmailServer>();\n  server.WhenForAnyArgs(x => x.Send(default, default, default)).DoNotCallBase(); // Make sure Send won't call real implementation\n\n  server.SendMultiple(\n    new [] { \"alice\", \"bob\", \"charlie\" },\n    \"nsubstitute\",\n    \"Partial subs should be used with caution.\"); // This won't run the real Send now, thanks to DoNotCallBase().\n\n  server.Received().Send(\"alice\", \"nsubstitute\", Arg.Any<string>());\n  server.Received().Send(\"bob\", \"nsubstitute\", Arg.Any<string>());\n  server.Received().Send(\"charlie\", \"nsubstitute\", Arg.Any<string>());\n}\n```\n\n----------------------------------------\n\nTITLE: Raising Events in C#\nDESCRIPTION: This C# code shows how to raise events on a substitute using NSubstitute. The `Raise.Event<Action>()` method triggers the `PoweringUp` event. The code also includes an event handler to verify that the event was raised.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/README.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nbool eventWasRaised = false;\n_calculator.PoweringUp += () => eventWasRaised = true;\n\n_calculator.PoweringUp += Raise.Event<Action>();\nAssert.That(eventWasRaised);\n```\n\n----------------------------------------\n\nTITLE: Project File Tag for Internal Visibility in XML\nDESCRIPTION: Demonstrates how to use an ItemGroup with InternalsVisibleTo elements in a .csproj file to allow test assemblies and DynamicProxyGenAssembly2 to access internal members and types in .NET 5 and above.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2015-01-01-how-nsub-works.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  ...\n  <ItemGroup>\n    <InternalsVisibleTo Include=\"DynamicProxyGenAssembly2\" />\n    <InternalsVisibleTo Include=\"name of the assembly that contains your tests\" />\n  </ItemGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Checking Indexer Calls with NSubstitute (C#)\nDESCRIPTION: This snippet shows how to check calls to indexers, treating them as properties. It verifies that the indexer on a substitute `IDictionary` was set to a specific value.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-01-received-calls.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar dictionary = Substitute.For<IDictionary<string, int>>();\ndictionary[\"test\"] = 1;\n\ndictionary.Received()[\"test\"] = 1;\ndictionary.Received()[\"test\"] = Arg.Is<int>(x => x < 5);\n```\n\n----------------------------------------\n\nTITLE: Asserting Call Order with Argument Matchers in C#\nDESCRIPTION: This snippet showcases the use of argument matchers within a `Received.InOrder` block. It verifies that `connection.SomethingHappened` is assigned an action handler before `connection.Open()` is called. It uses `Arg.Any<Action>()` to match any action handler passed to the event subscription. It depends on NSubstitute and the `IConnection` interface with a `SomethingHappened` event.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-01-01-received-in-order.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void SubscribeToEventBeforeOpeningConnection() {\n  var connection = Substitute.For<IConnection>();\n  connection.SomethingHappened += () => { /* some event handler */ };\n  connection.Open();\n\n  Received.InOrder(() => {\n    connection.SomethingHappened += Arg.Any<Action>();\n    connection.Open();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: SummingReader Partial Substitute Test C#\nDESCRIPTION: This test demonstrates how to use `Substitute.ForPartsOf` to create a partial substitute for the `SummingReader` class. It configures the `ReadFile` method to return a specific string, allowing the `Read` method to be tested without accessing the file system.  `Configure().ReadFile()` ensures that the real `ReadFile` method isn't executed before it's overridden.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-02-01-partial-subs.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void ShouldSumAllNumbersInFile() {\n  var reader = Substitute.ForPartsOf<SummingReader>();\n  reader.Configure().ReadFile(\"foo.txt\").Returns(\"1,2,3,4,5\"); // CAUTION: real code warning!\n\n  var result = reader.Read(\"foo.txt\");\n\n  Assert.That(result, Is.EqualTo(15));\n}\n```\n\n----------------------------------------\n\nTITLE: Implement OnceOffCommandRunner in C#\nDESCRIPTION: Implements a OnceOffCommandRunner class that takes an ICommand interface in its constructor and executes it only once. The command is set to null after the first execution to prevent further calls.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-10-clear-received-calls.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OnceOffCommandRunner {\n    ICommand command;\n    public OnceOffCommandRunner(ICommand command) {\n        this.command = command;\n    }\n    public void Run() {\n        if (command == null) return;\n        command.Execute();\n        command = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Substitute Instance in C#\nDESCRIPTION: This C# code demonstrates how to create a substitute instance of the `ICalculator` interface using NSubstitute. The `Substitute.For<ICalculator>()` method generates a mock object that can be used in unit tests.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/README.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n_calculator = Substitute.For<ICalculator>();\n```\n\n----------------------------------------\n\nTITLE: Setup for Exception Throwing\nDESCRIPTION: This code snippet sets up the necessary interface and test fixture for demonstrating exception throwing with NSubstitute. It defines an `ICalculator` interface with an `Add` method and creates a substitute for it in the `SetUp` method.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-05-02-throwing-exceptions.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICalculator { int Add(int a, int b); }\nICalculator calculator;\n[SetUp] public void SetUp() { calculator = Substitute.For<ICalculator>(); }\n```\n\n----------------------------------------\n\nTITLE: Raising Delegate Events C#\nDESCRIPTION: Shows how to raise a `PropertyChanged` event, which uses a `PropertyChangedEventHandler` delegate.  It adds a handler to the `PropertyChanged` event that sets a boolean when called and then asserts the boolean is true after raising the event.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-06-01-raising-events.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar sub = Substitute.For<INotifyPropertyChanged>();\nbool wasCalled = false;\nsub.PropertyChanged += (sender, args) => wasCalled = true;\n\nsub.PropertyChanged += Raise.Event<PropertyChangedEventHandler>(this, new PropertyChangedEventArgs(\"test\"));\n\nAssert.That(wasCalled);\n```\n\n----------------------------------------\n\nTITLE: Define Interface and Setup Substitute\nDESCRIPTION: Defines an interface ICalculator with an Add method and a Mode property, then sets up a substitute for this interface using NSubstitute. This is a prerequisite for the examples demonstrating return values from functions.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-03-return-from-function.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICalculator {\n    int Add(int a, int b);\n    string Mode { get; set; }\n}\nICalculator calculator;\n[SetUp] public void SetUp() { calculator = Substitute.For<ICalculator>(); }\n```\n\n----------------------------------------\n\nTITLE: Testing Order Processing with NSubstitute in C#\nDESCRIPTION: This test uses NSubstitute to verify that the RaiseOrderProcessed event is raised when order processing is successful. It arranges for the processor to invoke the callback with `true` whenever processing order id 3 using Arg.Invoke(true).\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-12-01-actions-with-arguments.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void Placing_order_should_raise_order_processed_when_processing_is_successful() {\n    //Arrange\n    var cart = Substitute.For<ICart>();\n    var events = Substitute.For<IEvents>();\n    var processor = Substitute.For<IOrderProcessor>();\n    cart.OrderId = 3;\n    //Arrange for processor to invoke the callback arg with `true` whenever processing order id 3\n    processor.ProcessOrder(3, Arg.Invoke(true));\n\n    //Act\n    var command = new OrderPlacedCommand(processor, events);\n    command.Execute(cart);\n\n    //Assert\n    events.Received().RaiseOrderProcessed(3);\n}\n```\n\n----------------------------------------\n\nTITLE: NSubstitute: Auto Values for String and Array (C#)\nDESCRIPTION: This snippet shows that properties and methods returning String or Array types will automatically get empty, non-null defaults in NSubstitute. This helps avoid null reference exceptions when a reference is needed but its specific value is not critical.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-10-01-auto-and-recursive-mocks.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar identity = Substitute.For<IIdentity>();\nAssert.AreEqual(String.Empty, identity.Name);\nAssert.AreEqual(0, identity.Roles().Length);\n```\n\n----------------------------------------\n\nTITLE: Setup Return Value Directly\nDESCRIPTION: Illustrates the newer, more concise way to setup a return value for a method call with a substitute argument. This is possible due to improvements in how NSubstitute handles `.Equals` and `.GetHashCode`.  This example replaces the need for `Arg.Is` shown in the previous snippet.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nsomeObject.SomeCall(aSubstitute).Returns(1);\n```\n\n----------------------------------------\n\nTITLE: Verifying Return Values for Specific Arguments C#\nDESCRIPTION: Shows how the `Returns()` method only affects calls with the specified arguments. Calls with different arguments will return default values.  It asserts the return value for specific arguments and demonstrates the default behavior for other argument combinations.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-01-set-return-value.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n//Make a call return 3:\ncalculator.Add(1, 2).Returns(3);\nAssert.AreEqual(calculator.Add(1, 2), 3);\nAssert.AreEqual(calculator.Add(1, 2), 3);\n\n//Call with different arguments does not return 3\nAssert.AreNotEqual(calculator.Add(3, 6), 3);\n```\n\n----------------------------------------\n\nTITLE: Using When..Do for void method callbacks in C#\nDESCRIPTION: This snippet illustrates how to use the `When..Do` syntax to configure a callback for a `void` method. The `When` method specifies the method call to intercept, and the `Do` method defines the action to execute when that method is called. The example demonstrates incrementing a counter each time `SayHello(\"World\")` is called. The counter is asserted to ensure that the callback is executed the correct number of times.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-05-01-callbacks.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void SayHello() {\n    var counter = 0;\n    var foo = Substitute.For<IFoo>();\n    foo.When(x => x.SayHello(\"World\"))\n        .Do(x => counter++);\n\n    foo.SayHello(\"World\");\n    foo.SayHello(\"World\");\n    Assert.AreEqual(2, counter);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Calculator Interface in C#\nDESCRIPTION: This C# code defines a simple `ICalculator` interface with methods for addition, a property for mode, and an event for powering up. This interface serves as an example for demonstrating the capabilities of the NSubstitute mocking library.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICalculator\n{\n    int Add(int a, int b);\n    string Mode { get; set; }\n    event Action PoweringUp;\n}\n```\n\n----------------------------------------\n\nTITLE: Controller, IConnection, and ICommand Definitions in C#\nDESCRIPTION: This snippet provides the definitions for the `Controller` class, `IConnection` interface, and `ICommand` interface used in the previous examples. The `Controller` class depends on `IConnection` and `ICommand` instances, and the `DoStuff` method orchestrates calls to the connection and command. The interfaces define the required methods and event for interacting with the connection and command objects.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-01-01-received-in-order.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Controller {\n  IConnection connection;\n  ICommand cmd;\n  public Controller(IConnection connection, ICommand cmd) {\n    this.connection = connection;\n    this.cmd = cmd;\n  }\n\n  public void DoStuff() {\n    connection.Open();\n    cmd.Run(connection);\n    connection.Close();\n  }\n}\npublic interface IConnection {\n  void Open();\n  void Close();\n  event Action SomethingHappened;\n}\npublic interface ICommand {\n  void Run(IConnection c);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OrderPlacedCommand Class in C#\nDESCRIPTION: This code defines the OrderPlacedCommand class, which uses an IOrderProcessor to process an order and raises an event using IEvents when the processing is successful. The Execute method processes the order and raises the event if the order processing was successful.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-12-01-actions-with-arguments.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderPlacedCommand {\n    IOrderProcessor orderProcessor;\n    IEvents events;\n    public OrderPlacedCommand(IOrderProcessor orderProcessor, IEvents events) {\n        this.orderProcessor = orderProcessor;\n        this.events = events;\n    }\n    public void Execute(ICart cart) {\n        orderProcessor.ProcessOrder(\n            cart.OrderId,\n            wasOk => { if (wasOk) events.RaiseOrderProcessed(cart.OrderId); }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define ICommand Interface in C#\nDESCRIPTION: Defines a simple ICommand interface with an Execute method. This interface is used as the basis for creating a substitute and testing the OnceOffCommandRunner class.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-10-clear-received-calls.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICommand {\n    void Execute();\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Matched Argument with Class in NSubstitute (C#)\nDESCRIPTION: Demonstrates how changing the properties of a class instance after it's passed to a substituted method affects subsequent assertions. NSubstitute stores references to the arguments, not copies, so changes to the original object will be reflected in the substitute's record of the call. This behavior may lead to unexpected results when verifying method calls with `Arg.Is`.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person {\n    public string Name { get; set; }\n}\n\n[Test]\npublic void MutatingAMatchedArgument() {\n    var person = new Person { Name = \"Carrot\" };\n    var lookup = Substitute.For<IPersonLookup>();\n\n    // Called with a Person that has a .Name property of \"Carrot\"\n    lookup.Add(person);\n\n    // The Name in that person reference later gets updated ...\n    person.Name = \"Vimes\";\n\n    // When the substitute is queried, it will check the fields of the person reference it was called with.\n    // This means the argument it was called with does NOT have a .Name of \"Carrot\" (it was changed!)\n    lookup.DidNotReceive().Add(Arg.Is<Person>(p => p.Name == \"Carrot\"));\n    // Instead, it now has the updated name:\n    lookup.Received().Add(Arg.Is<Person>(p => p.Name == \"Vimes\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Class Substitution Example in C#\nDESCRIPTION: Demonstrates how NSubstitute works by inheriting from a class using Castle DynamicProxy. The SubstituteForOriginal class overrides the DoStuffWith method to intercept calls and return configured values.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2015-01-01-how-nsub-works.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Original {\n    public virtual int DoStuffWith(string s) => s.Length;\n}\n\n// Now if we do:\n//      var sub = Substitute.For<Original>();\n//\n// This is a bit like doing:\npublic class SubstituteForOriginal : Original {\n    public override int DoStuffWith(string s) {\n        // Tell NSubstitute to record the call, run when..do actions etc,\n        // then return the value configured for this call.\n        handle_call_invocation();\n        return configured_value_for_call();\n    }\n}\nOriginal sub = new SubstituteForOriginal();\n```\n\n----------------------------------------\n\nTITLE: Returning a Sequence of Values in C#\nDESCRIPTION: This C# code demonstrates how to set up a sequence of return values for a property using the `Returns()` method. Each subsequent call to the `Mode` property will return the next value in the sequence. Assertions are used to verify the sequence of returned values.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/README.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n_calculator.Mode.Returns(\"HEX\", \"DEC\", \"BIN\");\nAssert.That(_calculator.Mode, Is.EqualTo(\"HEX\"));\nAssert.That(_calculator.Mode, Is.EqualTo(\"DEC\"));\nAssert.That(_calculator.Mode, Is.EqualTo(\"BIN\"));\n```\n\n----------------------------------------\n\nTITLE: Defining IEngine Interface with Events C#\nDESCRIPTION: Defines an interface `IEngine` with three events: `Idling` (standard EventHandler), `LowFuelWarning` (EventHandler with custom EventArgs), and `RevvedAt` (Action delegate).\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-06-01-raising-events.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IEngine {\n    event EventHandler Idling;\n    event EventHandler<LowFuelWarningEventArgs> LowFuelWarning;\n    event Action<int> RevvedAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Matching out and ref args C#\nDESCRIPTION: Demonstrates how to use argument matchers with out and ref parameters to configure return values.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\ncalculator\n    .LoadMemory(1, out Arg.Any<int>())\n    .Returns(x => {\n        x[1] = 42;\n        return true;\n    });\n\nvar hasEntry = calculator.LoadMemory(1, out var memoryValue);\nAssert.AreEqual(true, hasEntry);\nAssert.AreEqual(42, memoryValue);\n```\n\n----------------------------------------\n\nTITLE: SummingReader Class Definition C#\nDESCRIPTION: Defines a `SummingReader` class with virtual methods `Read` and `ReadFile`. The `Read` method reads a file, splits its contents by commas, parses them as integers, and returns their sum. `ReadFile` is intended to read the file from the file system.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-02-01-partial-subs.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SummingReader {\n  public virtual int Read(string path) {\n    var s = ReadFile(path);\n    return s.Split(',').Select(int.Parse).Sum();\n  }\n  public virtual string ReadFile(string path) { return \"the result of reading the file here\"; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arg.Compat with NSubstitute\nDESCRIPTION: This code snippet demonstrates how to use `Arg.Compat` instead of `Arg` when using NSubstitute with pre-C# 7.0. It shows how to replace `Arg.` with `Arg.Compat.` to make the code compatible with older C# versions, especially when dealing with argument matchers.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-04-15-compat-args.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncalculator.Add(1, -10);\n\n// Instead of `Arg.Is<int>(x => x < 0)`, use:\ncalculator.Received().Add(1, Arg.Compat.Is<int>(x => x < 0));\n\n// Instead of `Arg.Any<int>()`, use:\ncalculator\n    .Received()\n    .Add(1, Arg.Compat.Any<int>());\n\n// Same for Returns and DidNotReceive:\ncalculator.Add(Arg.Compat.Any<int>(), Arg.Compat.Is(42)).Returns(123);\ncalculator.DidNotReceive().Add(Arg.Compat.Is<int>(x => x > 10), -10);\n```\n\n----------------------------------------\n\nTITLE: EmailServer Class Definition C#\nDESCRIPTION: Defines an `EmailServer` class with virtual methods `Send` and `SendMultiple`. `Send` is intended to send an email. `SendMultiple` iterates through a list of recipients and calls `Send` for each one.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-02-01-partial-subs.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class EmailServer {\n  public virtual void Send(string to, string from, string message) {\n    // Insert real email sending code here\n    throw new NotImplementedException();\n  }\n\n  public virtual void SendMultiple(IEnumerable<string> recipients, string from, string message) {\n    foreach (var recipient in recipients) {\n        Send(recipient, from, message);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Substituting for Delegates (C#)\nDESCRIPTION: Creates a substitute for a delegate type using NSubstitute. When substituting for delegates, you cannot specify additional interfaces or classes.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-02-creating-a-substitute.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar func = Substitute.For<Func<string>>();\n\nfunc().Returns(\"hello\");\nAssert.AreEqual(\"hello\", func());\n```\n\n----------------------------------------\n\nTITLE: Interface Definition with Out Parameter C#\nDESCRIPTION: Defines an interface `ILookup` with a method `TryLookup` that uses an `out` parameter. This interface is used in subsequent examples to demonstrate how to work with `out` parameters in NSubstitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-11-01-setting-out-and-ref-arguments.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ILookup {\n    bool TryLookup(string key, out string value);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arg.Compat in Expression Trees\nDESCRIPTION: This example shows how to use `Arg.Compat` when argument matchers are used in expression trees.  Standard `Arg` matchers can cause compilation errors (CS8153) when used in expression trees, so `Arg.Compat` provides a workaround.  The final line illustrates rewriting the test to avoid expression trees completely.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-04-15-compat-args.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFoo { void DoStuff(int i); }\n\n[Test]\npublic void Sample() {\n    var sub = Substitute.For<IFoo>();\n    sub.DoStuff(42);\n    // If `specify` takes an `Expression<Action>` argument, this will fail with CS8153:\n    //   specify(() => sub.Received().DoStuff(Arg.Any<int>()));\n\n    // Instead use compat matcher:\n    specify(() => sub.Received().DoStuff(Arg.Compat.Any<int>()));\n\n    // Or re-write without expression tree if possible:\n    sub.Received().DoStuff(Arg.Any<int>());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IQueryable Substitute in C#\nDESCRIPTION: Demonstrates how to explicitly configure a substitute for IQueryable<T> to avoid null pointer exceptions when the auto-subbed value is not suitable. It is required when a substitute IQueryable is needed instead of the default empty IQueryable.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nsub.MyQueryable().Returns(Substitute.For<IQueryable<int>>());\n```\n\n----------------------------------------\n\nTITLE: Checking Property Calls with NSubstitute (C#)\nDESCRIPTION: This example demonstrates how to check calls to property getters and setters. While generally discouraged in favor of testing behavior, this shows how to verify that a property getter or setter was called.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-03-01-received-calls.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar mode = calculator.Mode;\ncalculator.Mode = \"TEST\";\n\n//Check received call to property getter\n//We need to assign the result to a variable to keep\n//the compiler happy or use discards (since C# 7.0).\n_ = calculator.Received().Mode;\n\n//Check received call to property setter with arg of \"TEST\"\ncalculator.Received().Mode = \"TEST\";\n```\n\n----------------------------------------\n\nTITLE: Argument Matching and Assignment Pitfall C#\nDESCRIPTION: Illustrates a common pitfall when using argument matchers with `out` parameters that are also assigned to within the callback. Changing the assigned value can cause subsequent calls to no longer match the original argument matcher, as the matcher uses the initial value. The example shows how the value assigned inside the Returns callback can impact the matching of the `Arg.Is(value)` argument matcher in subsequent calls.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-11-01-setting-out-and-ref-arguments.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar counter = 0;\nvar value = \"\";\nvar lookup = Substitute.For<ILookup>();\nlookup\n    .TryLookup(\"hello\", out Arg.Is(value)) // value is \"\", matcher will check for \"\"\n    .Returns(x => {\n        x[1] = \"assigned\"; // Assign to 2nd arg\n        counter++;         // Count this matching call\n        return true;\n    });\n\n// value is \"\", this will match!\nlookup.TryLookup(\"hello\", out value);\n// Call matches, counter is now 1:\nAssert.AreEqual(1, counter);\n\n// value is now \"assigned\" but arg matcher is still looking for \"\", will NOT match anymore!\nlookup.TryLookup(\"hello\", out value);\n// Call does NOT match anymore, counter is still 1:\nAssert.AreEqual(1, counter);\n```\n\n----------------------------------------\n\nTITLE: Defining IOrderProcessor Interface in C#\nDESCRIPTION: This code defines the IOrderProcessor interface with a ProcessOrder method that takes an orderId and a callback Action<bool>. The callback is intended to be invoked after processing the order, indicating whether the operation was successful.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-12-01-actions-with-arguments.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IOrderProcessor {\n    void ProcessOrder(int orderId, Action<bool> orderProcessed);\n}\n```\n\n----------------------------------------\n\nTITLE: IWidgetBuilder Interface Definition\nDESCRIPTION: Defines a builder-style interface `IWidgetBuilder` with methods for configuring widgets and retrieving the final widget container. This interface is used to demonstrate `ReturnsForAll` with fluent interfaces.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-03-01-return-for-all.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IWidgetBuilder {\n  IWidgetBuilder Quantity(int i);\n  IWidgetBuilder AddLineItem(string s);\n  IWidgetContainer GetWidgets();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Specific Returns After General Exception Setup - C#\nDESCRIPTION: This example demonstrates how to use `Configure()` to set up a specific return value for `calculator.Add(1, 2)` after a general exception setup has been defined for `calculator.Add(Arg.Any<int>(), Arg.Any<int>())`.  `Configure()` ensures that the exception callback from the initial setup doesn't execute during the configuration of the more specific `Returns(3)`.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-05-10-configure.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncalculator.Add(Arg.Any<int>(), Arg.Any<int>()).Returns(x => { throw new Exception(); });\n\n// Now if we try to add a return value for a more specific returns this will throw\n// before it gets a chance to configure the call:\n//    calculator.Add(1, 2).Returns(3);\n\n// Instead, we can use Configure to ensure the previous callback does not run:\ncalculator.Configure().Add(1, 2).Returns(3);\n\n// Now both the exception callback and our other return have been configured:\nAssert.AreEqual(3, calculator.Add(1, 2));\nAssert.Throws<Exception>(() => calculator.Add(-2, -2));\n```\n\n----------------------------------------\n\nTITLE: ProductionLine Class Using IWidgetBuilder\nDESCRIPTION: Defines a `ProductionLine` class that uses the `IWidgetBuilder` interface to create a widget container. This demonstrates how chained calls to a builder interface can be handled using `ReturnsForAll`.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-03-01-return-for-all.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ProductionLine {\n  IWidgetBuilder builder;\n  public ProductionLine(IWidgetBuilder builder) {\n    this.builder = builder;\n  }\n\n  public IWidgetContainer Run() {\n    return builder\n              .Quantity(2)\n              .AddLineItem(\"Thingoe\")\n              .AddLineItem(\"Other thingoe\")\n              .GetWidgets();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Generic Type Argument for Returns in C#\nDESCRIPTION: Shows how to resolve the ambiguous call error (CS0121) when setting up a substitute to throw an exception for a method with a return type of Task<T>. The generic type argument needs to be explicitly specified.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Old: `sub.Method().Returns(x => { throw new Exception() });`\n\n// New: `sub.Method().Returns<string>(x => { throw new Exception() });`\n```\n\n----------------------------------------\n\nTITLE: Install NSubstitute via NuGet\nDESCRIPTION: This code snippet provides the command to install the NSubstitute package via NuGet package manager.  It allows users to easily add the NSubstitute library to their .NET projects for mocking and testing purposes.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nInstall-Package NSubstitute\n```\n\n----------------------------------------\n\nTITLE: Explicitly Returning Null from Methods in C#\nDESCRIPTION: Demonstrates how to explicitly return null from methods or property getters in a substitute when required for a test. This is necessary due to auto-substitution behavior changes for pure virtual classes.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nsub.Method().Returns(x => null);\n```\n\n----------------------------------------\n\nTITLE: Setting Return Values for Method Calls in C#\nDESCRIPTION: This C# code shows how to configure a substitute to return a specific value when a method is called. The `Returns()` method is used to specify the return value for the `Add` method when called with arguments 1 and 2. The example also includes an assertion to verify the returned value.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/README.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n_calculator.Add(1, 2).Returns(3);\nAssert.That(_calculator.Add(1, 2), Is.EqualTo(3));\n```\n\n----------------------------------------\n\nTITLE: Expression Tree Compilation Error Workaround 1 in C#\nDESCRIPTION: Addresses the CS8153 compilation error that occurs when argument matchers are used within expression trees. The workaround involves moving the NSubstitute statement outside of the expression tree.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Given `void specify(Expression<Action> expectation)`, the following will fail to compile (CS8153):\nspecify(() => sub.Received().SomeCall(Arg.Any<int>()));\n\n// Workaround 1: move out of expression tree\nsub.Received().SomeCall(Arg.Any<int>());\n```\n\n----------------------------------------\n\nTITLE: Install NSubstitute Analyzers for C# via NuGet\nDESCRIPTION: This code snippet provides the command to install the optional NSubstitute analyzers for C# via NuGet package manager. These analyzers can help identify potential issues in your NSubstitute usage during development.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/index.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nInstall-Package NSubstitute.<wbr>Analyzers.<wbr>CSharp\n```\n\n----------------------------------------\n\nTITLE: Using NSubstitute.Compatibility.CompatArg\nDESCRIPTION: This code snippet demonstrates how to use `CompatArg` in the `NSubstitute.Compatibility` namespace to avoid compatibility issues with older C# versions. By declaring a static readonly `CompatArg` field, existing `Arg` references can be redirected to use the compatible version.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-04-15-compat-args.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class SampleCompatArgFixture {\n\n    // Declare Arg field. Any existing `Arg` references will now go via `CompatArg`, instead\n    // of the new `Arg` type that is incompatible with older C# compilers.\n    private static readonly NSubstitute.Compatibility.CompatArg Arg = NSubstitute.Compatibility.CompatArg.Instance;\n\n    [Test]\n    public void DemonstrationOfCompatArgs() {\n        var calculator = Substitute.For<ICalculator>();\n\n        calculator.Add(1, -10);\n\n        // Arg.Is will now go via CompatArg. It is equivalent to Arg.Compat.Is.\n        calculator.Received().Add(1, Arg.Is<int>(x => x < 0));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Calculator Interface\nDESCRIPTION: This code defines a simple `ICalculator` interface with an `Add` method, a `Mode` property, and a `PoweringUp` event.  This interface serves as an example for demonstrating how to create and configure substitutes using NSubstitute. The interface includes a method, a property, and an event to cover various substitution scenarios.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\npublic interface ICalculator\n{\n    int Add(int a, int b);\n    string Mode { get; set; }\n    event EventHandler PoweringUp;\n}\n```\n\n----------------------------------------\n\nTITLE: Assembly Attribute for Internal Visibility in C#\nDESCRIPTION: Shows how to use the InternalsVisibleTo attribute to allow access to internal members and types from test assemblies and DynamicProxyGenAssembly2, which is used by NSubstitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2015-01-01-how-nsub-works.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(\"DynamicProxyGenAssembly2\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(\"name of the assembly that contains your tests\")]\n```\n\n----------------------------------------\n\nTITLE: BaseTestFixture using CompatArg\nDESCRIPTION: This snippet shows how to create a base test fixture class that defines a `CompatArg` field. This allows derived test classes to automatically use compatible argument matchers without requiring individual declarations in each test class, simplifying maintenance and future upgrades.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2013-04-15-compat-args.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BaseTestFixture {\n\n    // Declare Arg field. Any existing `Arg` references will now go via `CompatArg`, instead\n    // of the new `Arg` type that is incompatible with older C# compilers.\n    protected static readonly NSubstitute.Compatibility.CompatArg Arg = NSubstitute.Compatibility.CompatArg.Instance;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom EventArgs C#\nDESCRIPTION: Defines a custom EventArgs class `LowFuelWarningEventArgs` which does not have a default constructor, requiring a value for `PercentLeft` to be passed in on construction.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-06-01-raising-events.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LowFuelWarningEventArgs : EventArgs {\n    public int PercentLeft { get; private set; }\n    public LowFuelWarningEventArgs(int percentLeft) {\n        PercentLeft = percentLeft;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Expression Tree Compilation Error Workaround 2 in C#\nDESCRIPTION: Addresses the CS8153 compilation error that occurs when argument matchers are used within expression trees. The workaround involves using `Arg.Compat` matcher.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// Given `void specify(Expression<Action> expectation)`, the following will fail to compile (CS8153):\nspecify(() => sub.Received().SomeCall(Arg.Any<int>()));\n\n// Workaround 2: use Arg.Compat\nspecify(() => sub.Received().SomeCall(Arg.Compat.Any<int>()));\n```\n\n----------------------------------------\n\nTITLE: Manual Argument Snapshot in NSubstitute (C#)\nDESCRIPTION: Demonstrates how to manually capture the value of an argument at the time of a method call using `Arg.Do`. This allows you to assert on the original value even if the argument is subsequently modified. The captured value is stored in a separate variable (e.g., a list), which can then be asserted upon using standard assertion libraries. This approach is useful for complex objects or scenarios where more detailed assertions are needed.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-04-01-argument-matchers.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void ManualArgSnapshot() {\n    var person = new Person { Name = \"Carrot\" };\n    var lookup = Substitute.For<IPersonLookup>();\n    var namesAdded = new List<string>();\n    // Manually snapshot the value or values we care about:\n    lookup.Add(Arg.Do<Person>(p => namesAdded.Add(p.Name)));\n\n\n    lookup.Add(person);\n    person.Name = \"Vimes\";\n\n    Assert.AreEqual(\"Carrot\", namesAdded[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Return Null from Method\nDESCRIPTION: Shows how to explicitly return null from a method after auto-substitution was introduced for pure virtual classes. This is necessary when a method that previously returned null by default should still return null in a specific test scenario.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nsub.Method().Returns(x => null);\n```\n\n----------------------------------------\n\nTITLE: Installing NSubstitute NuGet Package\nDESCRIPTION: This command installs the NSubstitute NuGet package to a .NET project.  This package provides the core NSubstitute library for creating and working with substitutes in unit tests. It is installed using the NuGet package manager.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n> Install-Package NSubstitute\n```\n\n----------------------------------------\n\nTITLE: Define Interface and Setup Substitute C#\nDESCRIPTION: Defines an interface `ICalculator` with an `Add` method and a `Mode` property. Sets up an NSubstitute instance of this interface for testing purposes. This is a prerequisite for the subsequent examples.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-03-return-for-any-args.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICalculator {\n    int Add(int a, int b);\n    string Mode { get; set; }\n}\nICalculator calculator;\n[SetUp] public void SetUp() { calculator = Substitute.For<ICalculator>(); }\n```\n\n----------------------------------------\n\nTITLE: Explicitly Return Null from Delegate\nDESCRIPTION: Demonstrates how to explicitly return null from a substituted delegate (`Func`) after auto-substitution was introduced for delegates. This is required when the delegate should return null for a particular test case.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/BreakingChanges.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nsubFunc().Returns(x => null);\n```\n\n----------------------------------------\n\nTITLE: ReceivedCallsException Example\nDESCRIPTION: This text snippet shows an example of an exception message generated by NSubstitute when an expected call was not received. It displays the expected call, indicates that no matching calls were received, and lists any non-matching calls with argument mismatches highlighted with '*' characters, assisting in debugging test failures.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nReceivedCallsException : Expected to receive a call matching:\n    Add(1, 2)\nActually received no matching calls.\nReceived 2 non-matching calls (non-matching arguments indicated with '*' characters):\n    Add(*4*, *7*)\n    Add(1, *5*)\n```\n\n----------------------------------------\n\nTITLE: Embedding Google Custom Search Element\nDESCRIPTION: This HTML tag embeds the Google Custom Search element into the webpage. The gcse:search tag is a custom element recognized by the Google Custom Search Engine library and is replaced with the actual search interface when the library is loaded and initialized by the Javascript code.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2019-01-01-search.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<gcse:search></gcse:search>\n```\n\n----------------------------------------\n\nTITLE: Using Arg.Do to Capture Arguments in C#\nDESCRIPTION: This example demonstrates how to use Arg.Do to capture the second argument passed to the Multiply method of the ICalculator interface. The value of the second argument is stored in the argumentUsed variable.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-12-01-actions-with-arguments.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar argumentUsed = 0;\ncalculator.Multiply(Arg.Any<int>(), Arg.Do<int>(x => argumentUsed = x));\n\ncalculator.Multiply(123, 42);\n\nAssert.AreEqual(42, argumentUsed);\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Custom Search\nDESCRIPTION: This script initializes and loads the Google Custom Search Engine (GCSE). It dynamically creates a script element, sets its source to the GCSE library URL with the provided search engine ID (cx), and inserts it into the document's head. This enables the Google Custom Search functionality on the page.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2019-01-01-search.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n  var cx = '005697633880271604295:lw9srlgcpg8';\n  var gcse = document.createElement('script');\n  gcse.type = 'text/javascript';\n  gcse.async = true;\n  gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;\n  var s = document.getElementsByTagName('script')[0];\n  s.parentNode.insertBefore(gcse, s);\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with ReturnsForAnyArgs\nDESCRIPTION: Illustrates how to use `ReturnsForAnyArgs` with a lambda function to execute a callback whenever a call is made. In this example, a counter is incremented each time the `Add` method is called on the calculator substitute.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-03-return-from-function.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar counter = 0;\ncalculator\n    .Add(default, default)\n    .ReturnsForAnyArgs(x => {\n        counter++;\n        return 0;\n    });\n\ncalculator.Add(7,3);\ncalculator.Add(2,2);\ncalculator.Add(11,-3);\nAssert.AreEqual(counter, 3);\n```\n\n----------------------------------------\n\nTITLE: Installing NSubstitute Analyzers NuGet Package\nDESCRIPTION: These commands install the NSubstitute.Analyzers NuGet packages for C# or Visual Basic. These analyzers help detect potential misuses of the NSubstitute API during development, improving test reliability. They are optional but recommended for enhanced code quality.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-01-01-getting-started.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n> Install-Package NSubstitute.Analyzers.CSharp\n// or\n> Install-Package NSubstitute.Analyzers.VisualBasic\n```\n\n----------------------------------------\n\nTITLE: Working with Properties in C#\nDESCRIPTION: This C# code shows how to work with properties using NSubstitute. The `Returns()` method is used to set the return value for the `Mode` property. The code also demonstrates how to set the property directly using the assignment operator. Assertions are used to verify the property values.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/README.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n_calculator.Mode.Returns(\"DEC\");\nAssert.That(_calculator.Mode, Is.EqualTo(\"DEC\"));\n\n_calculator.Mode = \"HEX\";\nAssert.That(_calculator.Mode, Is.EqualTo(\"HEX\"));\n```\n\n----------------------------------------\n\nTITLE: Raising Action Events C#\nDESCRIPTION: Demonstrates raising an event declared as an `Action<int>`, specifically the `RevvedAt` event.  It adds a handler to the `RevvedAt` event that captures the rpm value and then asserts the captured value is 123 after raising the event with the value 123.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-06-01-raising-events.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nint revvedAt = 0;;\nengine.RevvedAt += rpm => revvedAt = rpm;\n\nengine.RevvedAt += Raise.Event<Action<int>>(123);\n\nAssert.AreEqual(123, revvedAt);\n```\n\n----------------------------------------\n\nTITLE: Interface definition and setup with NSubstitute\nDESCRIPTION: Defines an interface `ICalculator` with an `Add` method and a `Mode` property. It then sets up an NSubstitute mock for this interface for use in testing return values.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-02-return-for-args.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICalculator {\n    int Add(int a, int b);\n    string Mode { get; set; }\n}\nICalculator calculator;\n[SetUp] public void SetUp() { calculator = Substitute.For<ICalculator>(); }\n```\n\n----------------------------------------\n\nTITLE: NSubstitute: Same Arguments, Same Substitute (C#)\nDESCRIPTION: This code demonstrates that when a recursively-subbed method is called with the same arguments, NSubstitute will return the same substitute instance. If called with different arguments, a new substitute will be returned.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-10-01-auto-and-recursive-mocks.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar firstCall = factory.Create(',');\nvar secondCall = factory.Create(',');\nvar thirdCallWithDiffArg = factory.Create('x');\n\nAssert.AreSame(firstCall, secondCall);\nAssert.AreNotSame(firstCall, thirdCallWithDiffArg);\n```\n\n----------------------------------------\n\nTITLE: ICalculator Interface Definition C#\nDESCRIPTION: Defines a simple `ICalculator` interface with an `Add` method and a `Mode` property. This interface is used as the basis for substitution examples.\nSOURCE: https://github.com/nsubstitute/nsubstitute/blob/main/docs/docs/2010-02-01-set-return-value.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICalculator {\n    int Add(int a, int b);\n    string Mode { get; set; }\n}\n```"
  }
]