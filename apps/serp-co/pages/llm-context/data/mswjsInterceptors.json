[
  {
    "owner": "mswjs",
    "repo": "interceptors",
    "content": "TITLE: Mocking responses with interceptors (JavaScript)\nDESCRIPTION: This code snippet shows how to mock a response to an intercepted request using MSW Interceptors in JavaScript.  It uses the `controller.respondWith()` method to return a mocked `Response` instance with a JSON body, status code 201, status text 'Created', and a 'Content-Type' header set to 'application/json'.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ninterceptor.on('request', ({ request, controller }) => {\n  controller.respondWith(\n    new Response(\n      JSON.stringify({\n        firstName: 'John',\n        lastName: 'Maverick',\n      }),\n      {\n        status: 201,\n        statusText: 'Created',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    )\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying request headers with interceptors (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to modify request headers using MSW Interceptors in JavaScript. It adds an 'X-My-Header' with the value 'true' to the request's headers in the 'request' listener. The request object is readonly, but its headers can be mutated.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\ninterceptor.on('request', ({ request }) => {\n  request.headers.set('X-My-Header', 'true')\n})\n```\n\n----------------------------------------\n\nTITLE: Using ClientRequestInterceptor\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `ClientRequestInterceptor` to intercept `http.ClientRequest` instances. It creates an interceptor, applies it, and attaches listeners to the 'request' and 'response' events to log request details and response information.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ClientRequestInterceptor } from '@mswjs/interceptors/ClientRequest'\n\nconst interceptor = new ClientRequestInterceptor()\n\n// Enable the interception of requests.\ninterceptor.apply()\n\n// Listen to any \"http.ClientRequest\" being dispatched,\n// and log its method and full URL.\ninterceptor.on('request', ({ request, requestId }) => {\n  console.log(request.method, request.url)\n})\n\n// Listen to any responses sent to \"http.ClientRequest\".\n// Note that this listener is read-only and cannot affect responses.\ninterceptor.on(\n  'response',\n  ({ response, isMockedResponse, request, requestId }) => {\n    console.log('response to %s %s was:', request.method, request.url, response)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Observing responses with interceptors (JavaScript)\nDESCRIPTION: This code snippet shows how to observe incoming responses using the 'response' event of MSW Interceptors in JavaScript. The listener receives the response, a flag indicating if the response is mocked, the original request, and a request ID. This listener is executed after the response has been received, regardless of whether the request was mocked or not.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\ninterceptor.on(\n  'response',\n  ({ response, isMockedResponse, request, requestId }) => {\n    // react to the incoming response...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Request Body as JSON\nDESCRIPTION: This JavaScript snippet demonstrates how to read the request body as JSON within an interceptor's `request` event listener. It emphasizes the importance of cloning the request before reading its body to avoid consuming the original request stream.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ninterceptor.on('request', async ({ request, requestId }) => {\n  const json = await request.clone().json()\n})\n```\n\n----------------------------------------\n\nTITLE: Using Node.js Preset with BatchInterceptor\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Node.js preset with `BatchInterceptor`. The Node.js preset includes `ClientRequestInterceptor` and `XMLHttpRequestInterceptor`, simplifying the interception of requests in a Node.js environment.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BatchInterceptor } from '@mswjs/interceptors'\nimport nodeInterceptors from '@mswjs/interceptors/presets/node'\n\nconst interceptor = new BatchInterceptor({\n  name: 'my-interceptor',\n  interceptors: nodeInterceptors,\n})\n\ninterceptor.apply()\n\ninterceptor.on('request', listener)\n```\n\n----------------------------------------\n\nTITLE: Using Browser Preset with BatchInterceptor\nDESCRIPTION: This JavaScript snippet illustrates the usage of the Browser preset with `BatchInterceptor`. This preset combines `XMLHttpRequestInterceptor` and `FetchInterceptor`, designed for intercepting requests in a browser environment.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BatchInterceptor } from '@mswjs/interceptors'\nimport browserInterceptors from '@mswjs/interceptors/presets/browser'\n\nconst interceptor = new BatchInterceptor({\n  name: 'my-interceptor',\n  interceptors: browserInterceptors,\n})\n\ninterceptor.on('request', listener)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Interceptors with BatchInterceptor\nDESCRIPTION: This JavaScript snippet shows how to combine multiple interceptors using `BatchInterceptor`.  It creates a `BatchInterceptor` with `ClientRequestInterceptor` and `XMLHttpRequestInterceptor` to intercept requests from both `http.ClientRequest` and `XMLHttpRequest`.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BatchInterceptor } from '@mswjs/interceptors'\nimport { ClientRequestInterceptor } from '@mswjs/interceptors/ClientRequest'\nimport { XMLHttpRequestInterceptor } from '@mswjs/interceptors/XMLHttpRequest'\n\nconst interceptor = new BatchInterceptor({\n  name: 'my-interceptor',\n  interceptors: [\n    new ClientRequestInterceptor(),\n    new XMLHttpRequestInterceptor(),\n  ],\n})\n\ninterceptor.apply()\n\n// This \"request\" listener will be called on both\n// \"http.ClientRequest\" and \"XMLHttpRequest\" being dispatched.\ninterceptor.on('request', listener)\n```\n\n----------------------------------------\n\nTITLE: Mocking delayed responses with interceptors (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to mock a delayed response with a 500 status code using MSW Interceptors in JavaScript. It uses an async function and the `sleep` function to introduce a 500ms delay before responding with the mocked response. This example requires the `sleep` function to be defined elsewhere.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// Respond to all requests with a 500 response\n// delayed by 500ms.\ninterceptor.on('request', async ({ controller }) => {\n  await sleep(500)\n  controller.respondWith(new Response(null, { status: 500 }))\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Interceptor (JavaScript)\nDESCRIPTION: This code initializes a WebSocketInterceptor instance from the @mswjs/interceptors/WebSocket package.  This interceptor can be used to observe and modify WebSocket connections.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport { WebSocketInterceptor } from '@mswjs/interceptors/WebSocket'\n\nconst interceptor = new WebSocketInterceptor()\n```\n\n----------------------------------------\n\nTITLE: Adding WebSocket message event listener (JavaScript)\nDESCRIPTION: This code snippet shows how to add an event listener to the 'message' event of a WebSocket client connection.  The listener logs the data sent by the WebSocket client to the console. The event data represents the outgoing message from the client.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nclient.addEventListener('message', (event) => {\n  console.log('outgoing:', event.data)\n})\n```\n\n----------------------------------------\n\nTITLE: Sending data to intercepted WebSocket client (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to send data to an intercepted WebSocket client using the `client.send()` method. It shows sending a string, a Blob, and an ArrayBuffer to the client.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nclient.send('text')\nclient.send(new Blob(['blob']))\nclient.send(new TextEncoder().encode('array buffer'))\n```\n\n----------------------------------------\n\nTITLE: WebSocket Server Event Listener (message)\nDESCRIPTION: Adds an event listener to the WebSocket server for the 'message' event.  This allows you to intercept and process incoming messages to the WebSocket server. The event object contains the message data.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addEventListener('message', (event) => {\n  console.log('incoming:', event.data)\n})\n```\n\n----------------------------------------\n\nTITLE: WebSocket Client to Server Data Forwarding\nDESCRIPTION: Forwards data received from a WebSocket client to the original WebSocket server. This is useful for intercepting client-sent events and relaying them to the server. It requires both a client and server WebSocket connection.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nclient.addEventListener('message', (event) => {\n  server.send(event.data)\n})\n```\n\n----------------------------------------\n\nTITLE: Closing WebSocket client connection (JavaScript)\nDESCRIPTION: These code snippets show how to close a WebSocket client connection using the `client.close()` method. The first example closes the connection gracefully without a status code. The second example terminates the connection with a status code of 1003, indicating that the server was unable to process the received data.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n// Gracefully close the connection with the\n// intercepted WebSocket client.\nclient.close()\n```\n\nLANGUAGE: js\nCODE:\n```\n// Terminate the connection by emulating\n// the server unable to process the received data.\nclient.close(1003)\n```\n\n----------------------------------------\n\nTITLE: Mocking errors with interceptors (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to mock an error with a custom error reason using MSW Interceptors and `controller.errorWith()` in JavaScript. It provides a new `Error('reason')` as the error to be returned for the intercepted request. The actual rendering of the error depends on the request client.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\ninterceptor.on('request', ({ request, controller }) => {\n  controller.errorWith(new Error('reason'))\n})\n```\n\n----------------------------------------\n\nTITLE: Mocking response errors with interceptors (JavaScript)\nDESCRIPTION: This code snippet shows how to mock a generic network error using MSW Interceptors and `Response.error()` in JavaScript. It calls `controller.respondWith(Response.error())` to simulate a network error for the intercepted request.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ninterceptor.on('request', ({ request, controller }) => {\n  controller.respondWith(Response.error())\n})\n```\n\n----------------------------------------\n\nTITLE: BatchInterceptor Usage\nDESCRIPTION: Demonstrates how to use the BatchInterceptor to apply multiple request interceptors at once.  It imports necessary modules, creates a BatchInterceptor instance with node interceptors, applies it, and listens for 'request' events. Requires `@mswjs/interceptors` and `@mswjs/interceptors/presets/node`.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BatchInterceptor } from '@mswjs/interceptors'\nimport nodeInterceptors from '@mswjs/interceptors/presets/node'\n\nconst interceptor = new BatchInterceptor({\n  name: 'my-interceptor',\n  interceptors: nodeInterceptors,\n})\n\ninterceptor.apply()\n\ninterceptor.on('request', ({ request, requestId }) => {\n  // Inspect the intercepted \"request\".\n  // Optionally, return a mocked response.\n})\n```\n\n----------------------------------------\n\nTITLE: RemoteHttpInterceptor Usage (Child Process)\nDESCRIPTION: Shows how to use the RemoteHttpInterceptor in a child process to enable request interception while delegating response resolution to the parent process. It requires `@mswjs/interceptors/RemoteHttpInterceptor` and typically `ClientRequestInterceptor`.  It applies the interceptor and listens for the 'disconnect' event to dispose of it.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// child.js\nimport { RemoteHttpInterceptor } from '@mswjs/interceptors/RemoteHttpInterceptor'\nimport { ClientRequestInterceptor } from '@mswjs/interceptors/ClientRequest'\n\nconst interceptor = new RemoteHttpInterceptor({\n  // Alternatively, you can use presets.\n  interceptors: [new ClientRequestInterceptor()],\n})\n\ninterceptor.apply()\n\nprocess.on('disconnect', () => {\n  interceptor.dispose()\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding HTTP request function in Node.js (Traditional)\nDESCRIPTION: This JavaScript snippet demonstrates a traditional approach to API mocking in Node.js by overriding the `http.request` function. It checks if an outgoing request matches a predefined predicate and, if so, responds with a mocked response. Otherwise, it constructs and performs the original request.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from 'node:http'\n\n// Store the original request function.\nconst originalHttpRequest = http.request\n\n// Override the request function entirely.\nhttp.request = function (...args) {\n  // Decide if the outgoing request matches a predicate.\n  if (predicate(args)) {\n    // If it does, never create a request, respond to it\n    // using the mocked response from this blackbox.\n    return coerceToResponse.bind(this, mock)\n  }\n\n  // Otherwise, construct the original request\n  // and perform it as-is.\n  return originalHttpRequest(...args)\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting Requests in Interceptor's request event\nDESCRIPTION: This JavaScript snippet shows how to access the Fetch API `Request` instance within the `request` event listener of an interceptor. The request object provides access to request details like method and URL.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ninterceptor.on('request', ({ request, requestId, controller }) => {\n  console.log(request.method, request.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling unhandled exceptions with interceptors (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to listen for unhandled exceptions within the 'request' listener using MSW Interceptors in JavaScript. The listener receives the error, request, request ID, and controller. This allows you to log errors or propagate them to prevent the default coercion to a 500 error response.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\ninterceptor.on(\n  'unhandledException',\n  ({ error, request, requestId, controller }) => {\n    console.log(error)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Propagating unhandled exceptions with interceptors (JavaScript)\nDESCRIPTION: This code snippet shows how to propagate unhandled exceptions in the 'unhandledException' listener of MSW Interceptors in JavaScript. By throwing the error, you prevent the default coercion of the exception to a 500 error response, causing the process to throw the error as-is.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\ninterceptor.on('unhandledException', ({ error }) => {\n  // Now, any unhandled exception will NOT be coerced to a 500 error response,\n  // and instead will be thrown during the process execution as-is.\n  throw error\n})\n```\n\n----------------------------------------\n\nTITLE: RemoteHttpResolver Usage (Parent Process)\nDESCRIPTION: Demonstrates how to use the RemoteHttpResolver in a parent process to resolve intercepted requests from a child process. It requires `@mswjs/interceptors/RemoteHttpInterceptor` and the `child_process` module. It creates a resolver, listens for 'request' events, and applies the resolver.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// parent.js\nimport { spawn } from 'child_process'\nimport { RemoteHttpResolver } from '@mswjs/interceptors/RemoteHttpInterceptor'\n\nconst appProcess = spawn('node', ['app.js'], { // Corrected arguments for spawn\n  stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n})\n\nconst resolver = new RemoteHttpResolver({\n  process: appProcess,\n})\n\nresolver.on('request', ({ request, requestId }) => {\n  // Optionally, return a mocked response\n  // for a request that occurred in the \"appProcess\".\n})\n\nresolver.apply()\n```\n\n----------------------------------------\n\nTITLE: Extending XMLHttpRequest with Interceptors (Proxy Class)\nDESCRIPTION: This JavaScript snippet illustrates how Interceptors uses class extension to override the native `XMLHttpRequest` class. It intercepts the `send` method, checks for a mocked response, and if found, simulates the XMLHttpRequest state transitions to return the mocked response. Otherwise, it calls the original `send` method.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass XMLHttpRequestProxy extends XMLHttpRequest {\n  async send() {\n    // Call the request listeners and see if any of them\n    // returns a mocked response for this request.\n    const mockedResponse = await waitForRequestListeners({ request })\n\n    // If there is a mocked response, use it. This actually\n    // transitions the XMLHttpRequest instance into the correct\n    // response state (below is a simplified illustration).\n    if (mockedResponse) {\n      // Handle the response headers.\n      this.request.status = mockedResponse.status\n      this.request.statusText = mockedResponse.statusText\n      this.request.responseUrl = mockedResponse.url\n      this.readyState = 2\n      this.trigger('readystatechange')\n\n      // Start streaming the response body.\n      this.trigger('loadstart')\n      this.readyState = 3\n      this.trigger('readystatechange')\n      await streamResponseBody(mockedResponse)\n\n      // Finish the response.\n      this.trigger('load')\n      this.trigger('loadend')\n      this.readyState = 4\n      return\n    }\n\n    // Otherwise, perform the original \"XMLHttpRequest.prototype.send\" call.\n    return super.send(...args)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ClientRequest socket connect limitation example\nDESCRIPTION: This TypeScript snippet demonstrates a limitation of Interceptors when calling `req.end()` in the 'connect' event listener of the socket. This scenario causes Interceptors to hang indefinitely due to the interception algorithm's dependency on request handling events.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreq.on('socket', (socket) => {\n  socket.on('connect', () => {\n    // ❌ While this is allowed in Node.js, this cannot be handled in Interceptors.\n    req.end()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Interceptor Class Definition (TypeScript)\nDESCRIPTION: Defines the generic Interceptor class, which serves as the base class for all interceptors in the library.  It provides methods for applying, listening to events, and disposing of the interceptor.  It is not intended for direct use.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nclass Interceptor {\n  // Applies the interceptor, enabling the interception of requests\n  // in the current process.\n  apply(): void\n\n  // Listens to the public interceptor events.\n  // For HTTP requests, these are \"request' and \"response\" events.\n  on(event, listener): void\n\n  // Cleans up any side-effects introduced by the interceptor\n  // and disables the interception of requests.\n  dispose(): void\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @mswjs/interceptors\nDESCRIPTION: This bash command installs the @mswjs/interceptors package using npm.\nSOURCE: https://github.com/mswjs/interceptors/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mswjs/interceptors\n```"
  }
]