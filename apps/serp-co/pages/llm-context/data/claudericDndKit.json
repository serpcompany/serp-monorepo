[
  {
    "owner": "clauderic",
    "repo": "dnd-kit",
    "content": "TITLE: Using Modifiers with DndContext and DragOverlay in React\nDESCRIPTION: Example of how to apply different modifiers to DndContext and DragOverlay components. It demonstrates using restrictToVerticalAxis for DndContext and restrictToWindowEdges for DragOverlay.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/modifiers/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {DndContext, DragOverlay} from '@dnd-kit';\nimport {\n  restrictToVerticalAxis,\n  restrictToWindowEdges,\n} from '@dnd-kit/modifiers';\n\nfunction App() {\n  return (\n    <DndContext modifiers={[restrictToVerticalAxis]}>\n      {/* ... */}\n      <DragOverlay modifiers={[restrictToWindowEdges]}>{/* ... */}</DragOverlay>\n    </DndContext>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Collisions with useDndContext in TypeScript\nDESCRIPTION: Example showing how to access the array of collisions in components wrapped by DndContext using the useDndContext hook. This enables components to react to collision data for advanced use cases.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useDndContext} from '@dnd-kit/core';\n\nfunction MyComponent() {\n  const {collisions} = useDndContext();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Shift Compensation in DndContext\nDESCRIPTION: Demonstrates how to configure the new layout shift compensation feature that automatically scrolls to adjust for layout shifts after drag start. Shows both axis-specific and complete disabling options.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<DndContext\n  autoScroll={{layoutShiftCompensation: {x: false, y: true}}}\n>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<DndContext\n  autoScroll={{layoutShiftCompensation: false}}\n>\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Activator Node Refs with useDraggable\nDESCRIPTION: Code example showing how to use the new setActivatorNodeRef function in useDraggable to implement optional activator node refs for better focus management.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nimport {useDraggable} from '@dnd-kit/core';\n\nfunction Draggable(props) {\n  const {\n    listeners,\n    setNodeRef,\n+   setActivatorNodeRef,\n  } = useDraggable({id: props.id});\n\n  return (\n    <div ref={setNodeRef}>\n      Draggable element\n      <button\n        {...listeners}\n+       ref={setActivatorNodeRef}\n      >\n        :: Drag Handle\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for DragPendingEvent\nDESCRIPTION: Interface defining the payload for the new onDragPending event, containing identifiers, constraints, and coordinate information needed for providing visual feedback during drag activation.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DragPendingEvent {\n  id: UniqueIdentifier;\n  constraint: PointerActivationConstraint;\n  initialCoordinates: Coordinates;\n  offset?: Coordinates | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dnd-kit core package via npm\nDESCRIPTION: Command to install the @dnd-kit/core package using npm. This is the first step to integrate the drag and drop functionality into a React application.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @dnd-kit/core\n```\n\n----------------------------------------\n\nTITLE: Using DndMonitor Hook with TypeScript\nDESCRIPTION: Example demonstrating how to use the useDndMonitor hook within components wrapped in a DndContext provider to monitor drag and drop events.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/accessibility/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\n\nfunction App() {\n  return (\n    <DndContext>\n      <Component />\n    </DndContext>\n  );\n}\n\nfunction Component() {\n  useDndMonitor({\n    onDragStart(event) {},\n    onDragMove(event) {},\n    onDragOver(event) {},\n    onDragEnd(event) {},\n    onDragCancel(event) {},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring CollisionDetection Interface in TypeScript\nDESCRIPTION: Breaking change to the CollisionDetection interface that now returns an array of Collision objects instead of a single UniqueIdentifier. This change enables support for multiple collisions and provides more detailed collision data.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n+export interface Collision {\n+  id: UniqueIdentifier;\n+  data?: Record<string, any>;\n+}\n\nexport type CollisionDetection = (args: {\n  active: Active;\n  collisionRect: ClientRect;\n  droppableContainers: DroppableContainer[];\n  pointerCoordinates: Coordinates | null;\n-}) => UniqueIdentifier;\n+}) => Collision[];\n```\n\n----------------------------------------\n\nTITLE: Configuring DND-Kit Measuring Configuration\nDESCRIPTION: Example showing how to configure custom measuring behavior for draggable nodes in DND-Kit using the measuring configuration prop.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DndContext,\n  getBoundingClientRect,\n  MeasuringConfiguration,\n} from '@dnd-kit/core';\n\nconst measuringConfig: MeasuringConfiguration = {\n  draggable: {\n    measure: getBoundingClientRect,\n  },\n};\n\nfunction App() {\n  return <DndContext measuring={measuringConfig} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @dnd-kit/sortable package via npm\nDESCRIPTION: This command installs the @dnd-kit/sortable package using npm. It's a prerequisite for using the sortable preset in your project.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @dnd-kit/sortable\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Drop Animation Side Effects\nDESCRIPTION: Demonstrates how to implement custom side effects during drop animations, including class name manipulation and cleanup functions that execute when the animation completes.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst customDropAnimation = {\n  sideEffects({active}) {\n    active.node.classList.add('dropAnimationInProgress');\n    active.node.animate([{opacity: 0}, {opacity: 1}], {\n      easing: 'ease-in',\n      duration: 250,\n    });\n\n    return () => {\n      // Clean up when the drop animation is complete\n      active.node.classList.remove('dropAnimationInProgress');\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Snap to Grid Modifier in JavaScript\nDESCRIPTION: Example of a custom implementation of a snap to grid modifier. This function adjusts the transform coordinates to snap to a predefined grid size.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/modifiers/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst gridSize = 20;\n\nfunction snapToGrid(args) {\n  const {transform} = args;\n\n  return {\n    ...transform,\n    x: Math.ceil(transform.x / gridSize) * gridSize,\n    y: Math.ceil(transform.y / gridSize) * gridSize,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Drop Animation with Keyframes\nDESCRIPTION: Shows how to create custom drop animations using the keyframes option, which allows for defining transition effects like fading out during the drop animation.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CSS} from '@dnd-kit/utilities';\n\nconst customDropAnimation = {\n  keyframes({transform}) {\n    return [\n      {opacity: 1, transform: CSS.Transform.toString(transform.initial)},\n      {opacity: 0, transform: CSS.Transform.toString(transform.final)},\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing bypassActivationConstraint with React Hook\nDESCRIPTION: Example of using the bypassActivationConstraint option with PointerSensor to conditionally skip activation constraints when the activator event target is the activatorNode of a draggable source.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseSensor(PointerSensor, {\n  activationConstraint: {\n    delay: 250,\n    tolerance: 5,\n  },\n  bypassActivationConstraint({event, activeNode}) {\n    return activeNode.activatorNode.current?.contains(event.target);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using DND Monitor Hook in TypeScript\nDESCRIPTION: Example showing how to use the useDndMonitor hook within components wrapped in a DndContext provider to monitor drag and drop events.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\n\nfunction App() {\n  return (\n    <DndContext>\n      <Component />\n    </DndContext>\n  );\n}\n\nfunction Component() {\n  useDndMonitor({\n    onDragStart(event) {},\n    onDragMove(event) {},\n    onDragOver(event) {},\n    onDragEnd(event) {},\n    onDragCancel(event) {},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Draggable and Droppable Components with Data Props\nDESCRIPTION: Demonstrates usage of data properties in draggable and droppable components, showing how to pass and access custom data in event handlers.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DndContext, useDraggable, useDroppable} from '@dnd-kit/core';\n\nfunction Draggable() {\n  const {attributes, listeners, setNodeRef, transform} = useDraggable({\n    id: 'draggable',\n    data: {\n      type: 'type1',\n    },\n  });\n\n  /* ... */\n}\n\nfunction Droppable() {\n  const {setNodeRef} = useDroppable({\n    id: 'droppable',\n    data: {\n      accepts: ['type1', 'type2'],\n    },\n  });\n\n  /* ... */\n}\n\nfunction App() {\n  return (\n    <DndContext\n      onDragEnd={({active, over}) => {\n        if (over?.data.current.accepts.includes(active.data.current.type)) {\n          // do stuff\n        }\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensors with Custom Activation Constraints in React\nDESCRIPTION: Demonstrates how to configure MouseSensor and TouchSensor with custom activation constraints for vertical sorting, using the new DistanceMeasurement interface.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst sensors = useSensors(\n  useSensor(MouseSensor, {\n    activationConstraint: {\n      distance: { y: 10 },\n    },\n  }),\n  useSensor(TouchSensor, {\n    activationConstraint: {\n      delay: 250,\n      tolerance: { y: 15, x: 5 },\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Scrolling Parameters in DndContext\nDESCRIPTION: Example demonstrating how to customize auto-scrolling thresholds, acceleration, and interval timing for fine-tuned control over scrolling behavior.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DndContext} from '@dnd-kit/core';\n\n<DndContext\n  autoScroll={{\n    thresholds: {\n      // Left and right 10% of the scroll container activate scrolling\n      x: 0.1,\n      // Top and bottom 25% of the scroll container activate scrolling\n      y: 0.25,\n    },\n    // Accelerate slower than the default value (10)\n    acceleration: 5,\n    // Auto-scroll every 10ms instead of the default value of 5ms\n    interval: 10,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: ResizeObserverConfig Interface for Droppable Containers\nDESCRIPTION: Interface definition for configuring ResizeObserver functionality on droppable containers. This allows for customizing how container resizing events are handled and which elements are re-measured in response.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResizeObserverConfig {\n  /** Whether the ResizeObserver should be disabled entirely */\n  disabled?: boolean;\n  /** Resize events may affect the layout and position of other droppable containers.\n   * Specify an array of `UniqueIdentifier` of droppable containers that should also be re-measured\n   * when this droppable container resizes. Specifying an empty array re-measures all droppable containers.\n   */\n  updateMeasurementsFor?: UniqueIdentifier[];\n  /** Represents the debounce timeout between when resize events are observed and when elements are re-measured */\n  timeout?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Snap to Grid Modifier in JavaScript\nDESCRIPTION: Example of creating a custom modifier to snap dragged items to a grid. It uses the createSnapModifier function from @dnd-kit/modifiers to create a modifier with a specified grid size.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/modifiers/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createSnapModifier} from '@dnd-kit/modifiers';\n\nconst gridSize = 20; // pixels\nconst snapToGridModifier = createSnapModifier(gridSize);\n```\n\n----------------------------------------\n\nTITLE: Configuring Distance and Tolerance Constraints\nDESCRIPTION: Example demonstrating how to configure distance and tolerance constraints for drag operations in DND-Kit.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  distance: {y: 10},\n  tolerance: {x: 5},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Scrolling Activator in DndContext\nDESCRIPTION: Example showing how to customize the auto-scrolling activator to use the draggable rectangle instead of the default pointer position.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AutoScrollActivator, DndContext} from '@dnd-kit/core';\n\n<DndContext autoScroll={{activator: AutoScrollActivator.DraggableRect}} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Activator Node Refs in useDraggable\nDESCRIPTION: A code example showing how to implement the new activator node refs feature in useDraggable. This allows setting a specific element as the activator, which helps with focus management and keyboard interaction.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\nimport {useDraggable} from '@dnd-kit/core';\n\nfunction Draggable(props) {\n  const {\n    listeners,\n    setNodeRef,\n+   setActivatorNodeRef,\n  } = useDraggable({id: props.id});\n\n  return (\n    <div ref={setNodeRef}>\n      Draggable element\n      <button\n        {...listeners}\n+       ref={setActivatorNodeRef}\n      >\n        :: Drag Handle\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CollisionDescriptor Interface Definition in TypeScript\nDESCRIPTION: Definition of the CollisionDescriptor interface which extends the Collision interface with additional data. Built-in collision detection algorithms like rectIntersection and closestCenter use this interface.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CollisionDescriptor extends Collision {\n  data: {\n    droppableContainer: DroppableContainer;\n    value: number;\n    [key: string]: any;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Scroll-Eligible Elements in DndContext\nDESCRIPTION: Example showing how to conditionally prevent certain elements from auto-scrolling using the canScroll callback function.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DndContext} from '@dnd-kit/core';\n\n<DndContext\n  autoScroll={{\n    canScroll(element) {\n      if (element === document.scrollingElement) {\n        return false;\n      }\n\n      return true;\n    },\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Scrolling Traversal Order in DndContext\nDESCRIPTION: Example showing how to change the traversal order when evaluating scrollable ancestors, using ReversedTreeOrder instead of the default TreeOrder.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DndContext, TraversalOrder} from '@dnd-kit/core';\n\n<DndContext autoScroll={{order: TraversalOrder.ReversedTreeOrder}} />;\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Focus Management in DndContext\nDESCRIPTION: Shows how to opt out of the new automatic focus management feature by setting the restoreFocus property to false in the accessibility configuration of DndContext.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n<DndContext\n  accessibility={{\n+   restoreFocus: false\n  }}\n```\n\n----------------------------------------\n\nTITLE: Updated CollisionDetection Interface\nDESCRIPTION: Breaking change to the CollisionDetection interface which now receives an object containing active draggable node, collisionRect and an array of droppableContainers.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Previous CollisionDetection interface\n\n// New CollisionDetection interface receives an object with:\n// - active: draggable node\n// - collisionRect: collision rectangle\n// - droppableContainers: array of droppable containers\n```\n\n----------------------------------------\n\nTITLE: Updating Modifiers to Use draggingNodeRect in DND-kit\nDESCRIPTION: Change in version 5.0.0 updating modifiers to use draggingNodeRect instead of activeNodeRect. This ensures modifiers are based on the rect of the node being dragged, whether it's the draggable node or drag overlay node.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/modifiers/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#567](https://github.com/clauderic/dnd-kit/pull/567) [`cd3adf3`](https://github.com/clauderic/dnd-kit/commit/cd3adf34f6d3336c539a34e203177322614623ec) Thanks [@clauderic](https://github.com/clauderic)! - Update modifiers to use `draggingNodeRect` instead of `activeNodeRect`. Modifiers should be based on the rect of the node being dragged, whether it is the draggable node or drag overlay node.\n```\n\n----------------------------------------\n\nTITLE: Adding snapCenterToCursor Modifier in DND-kit\nDESCRIPTION: Addition of the snapCenterToCursor modifier in version 4.0.0, as noted in the changelog. This modifier allows elements to snap their center to the cursor position during drag operations.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/modifiers/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [#334](https://github.com/clauderic/dnd-kit/pull/334) [`13be602`](https://github.com/clauderic/dnd-kit/commit/13be602229c6d5723b3ae98bca7b8f45f0773366) Thanks [@trentmwillis](https://github.com/trentmwillis)! - Add `snapCenterToCursor` modifier\n```\n\n----------------------------------------\n\nTITLE: Updating Collision Detection Interface in TypeScript\nDESCRIPTION: Refactoring of the CollisionDetection interface to return an array of Collisions instead of a single UniqueIdentifier. Introduces new Collision and CollisionDescriptor interfaces.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n+export interface Collision {\n+  id: UniqueIdentifier;\n+  data?: Record<string, any>;\n+}\n\nexport type CollisionDetection = (args: {\n  active: Active;\n  collisionRect: ClientRect;\n  droppableContainers: DroppableContainer[];\n  pointerCoordinates: Coordinates | null;\n-}) => UniqueIdentifier;\n+}) => Collision[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CollisionDescriptor extends Collision {\n  data: {\n    droppableContainer: DroppableContainer;\n    value: number;\n    [key: string]: any;\n  };\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useDndContext} from '@dnd-kit/core';\n\nfunction MyComponent() {\n  const {collisions} = useDndContext();\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for horizontalListSortingStrategy\nDESCRIPTION: Fix for a bug in the horizontalListSortingStrategy where it didn't check if the currentRect was undefined.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bug fix for horizontalListSortingStrategy\n// Added check to verify if currentRect is defined before using it\n```\n\n----------------------------------------\n\nTITLE: Refactoring Accessibility Props in DndContext\nDESCRIPTION: Changes how accessibility-related props are organized in DndContext, moving them under a consolidated 'accessibility' property to improve scalability and organization.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n<DndContext\n- announcements={customAnnouncements}\n- screenReaderInstructions={customScreenReaderInstructions}\n+ accessibility={{\n+  announcements: customAnnouncements,\n+  screenReaderInstructions: customScreenReaderInstructions,\n+ }}\n```\n\n----------------------------------------\n\nTITLE: Updating Announcement Callback Parameters\nDESCRIPTION: Changes the arguments passed to announcement callbacks from direct IDs to objects containing active and over properties, allowing access to data properties for customized announcements.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nexport const announcements: Announcements = {\n-  onDragStart(id) {\n+  onDragStart({active}) {\n-    return `Picked up draggable item ${id}.`;\n+    return `Picked up draggable item ${active.id}.`;\n  },\n-  onDragOver(id, overId) {\n+  onDragOver({active, over}) {\n-    if (overId) {\n+    if (over) {\n-      return `Draggable item ${id} was moved over droppable area ${overId}.`;\n+      return `Draggable item ${active.id} was moved over droppable area ${over.id}.`;\n    }\n\n-    return `Draggable item ${id} is no longer over a droppable area.`;\n+    return `Draggable item ${active.id} is no longer over a droppable area.`;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility DOM Container\nDESCRIPTION: Specifies how to configure the container for accessibility-related DOM nodes, which are no longer portaled to document.body by default to improve screen reader announcements in dialogs.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n<DndContext\n+ accessibility={{\n+  container: document.body,\n+ }}\n```\n\n----------------------------------------\n\nTITLE: Using Map Constructor for DroppableContainers Type\nDESCRIPTION: Example of refactoring DroppableContainers type from a Record to a custom Map instance with additional methods like toArray(), getEnabled(), and getNodeFor(id).\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Refactored from:\n// DroppableContainers type: Record<UniqueIdentifier, DroppableContainer>\n\n// To a custom instance extending Map constructor:\n// Has methods such as:\n// - toArray()\n// - getEnabled()\n// - getNodeFor(id)\n```\n\n----------------------------------------\n\nTITLE: Configuring ResizeObserver for Droppable Containers\nDESCRIPTION: Implementation of ResizeObserver configuration for droppable containers to monitor node size changes during drag operations.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResizeObserverConfig {\n  /** Whether the ResizeObserver should be disabled entirely */\n  disabled?: boolean;\n  /** Resize events may affect the layout and position of other droppable containers.\n   * Specify an array of `UniqueIdentifier` of droppable containers that should also be re-measured\n   * when this droppable container resizes. Specifying an empty array re-measures all droppable containers.\n   */\n  updateMeasurementsFor?: UniqueIdentifier[];\n  /** Represents the debounce timeout between when resize events are observed and when elements are re-measured */\n  timeout?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DistanceMeasurement and Constraint Interfaces in TypeScript\nDESCRIPTION: Defines TypeScript interfaces for distance measurements and activation constraints, allowing more flexible configuration of sensor activation.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntype DistanceMeasurement =\n  | number\n  | {x: number}\n  | {y: number}\n  | {x: number, y: number}\n\ninterface DistanceConstraint {\n  distance: DistanceMeasurement;\n}\n\ninterface DelayConstraint {\n  delay: number;\n  tolerance: DistanceMeasurement;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from dragSourceOpacity to Side Effects\nDESCRIPTION: Shows how to migrate from the deprecated dragSourceOpacity property to the new side effects approach for controlling the opacity of the source element during drop animations.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n+ import {defaultDropAnimationSideEffects} from '@dnd-kit/core';\n\nconst dropAnimation = {\n- dragSourceOpacity: 0.5,\n+ sideEffects: defaultDropAnimationSideEffects({\n+   styles : {\n+     active: {\n+       opacity: '0.5',\n+     },\n+   },\n+  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript UniqueIdentifier Type to useState Hook\nDESCRIPTION: Shows the migration of adding explicit UniqueIdentifier type to the useState hook initialization for items array.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  -  const [items, setItems] = useState(['A', 'B', 'C']);\n  +  const [items, setItems] = useState<UniqueIdentifier>(['A', 'B', 'C']);\n```\n\n----------------------------------------\n\nTITLE: Migrating draggableNodes Access from Object to Map\nDESCRIPTION: Demonstrates the change in accessing draggableNodes, which has been converted from an object to a Map data structure, requiring the use of .get() method instead of bracket notation.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  - draggableNodes[someId];\n  + draggableNodes.get(someId);\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Focus Management in DndContext\nDESCRIPTION: Code snippet demonstrating how to opt-out of automatic focus management in DndContext using the accessibility prop.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n<DndContext\n  accessibility={{\n+   restoreFocus: false\n  }}\n\n```\n\n----------------------------------------\n\nTITLE: Migrating to UniqueIdentifier Type in React State\nDESCRIPTION: Code snippet showing how to update React useState to use the UniqueIdentifier type that now accepts both string and number identifiers.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n+ import type {UniqueIdentifier} from '@dnd-kit/core';\n\nfunction MyComponent() {\n-  const [items, setItems] = useState(['A', 'B', 'C']);\n+  const [items, setItems] = useState<UniqueIdentifier>(['A', 'B', 'C']);\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from draggableNodes Object to Map\nDESCRIPTION: Code diff showing the migration steps for accessing draggableNodes, which has been converted from an object to a Map in version 7.0.0.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- draggableNodes[someId];\n+ draggableNodes.get(someId);\n```\n\n----------------------------------------\n\nTITLE: Major Refactor of Measuring and Collision Detection in DND-kit\nDESCRIPTION: Significant internal refactor in version 5.0.0 changing the frame of reference for collision detection from document-relative to viewport-relative, addressing issues with fixed position containers and cross-container dragging with different scroll positions.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/modifiers/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [#518](https://github.com/clauderic/dnd-kit/pull/518) [`6310227`](https://github.com/clauderic/dnd-kit/commit/63102272d0d63dae349e2e9f638277e16a7d5970) Thanks [@clauderic](https://github.com/clauderic)! - Major internal refactor of measuring and collision detection.\n\n  ### Summary of changes\n\n  Previously, all collision detection algorithms were relative to the top and left points of the document. While this approach worked in most situations, it broke down in a number of different use-cases, such as fixed position droppable containers and trying to drag between containers that had different scroll positions.\n\n  This new approach changes the frame of comparison to be relative to the viewport. This is a major breaking change, and will need to be released under a new major version bump.\n\n  ### Breaking changes:\n\n  - By default, `@dnd-kit` now ignores only the transforms applied to the draggable / droppable node itself, but considers all the transforms applied to its ancestors. This should provide the right balance of flexibility for most consumers.\n    - Transforms applied to the droppable and draggable nodes are ignored by default, because the recommended approach for moving items on the screen is to use the transform property, which can interfere with the calculation of collisions.\n    - Consumers can choose an alternate approach that does consider transforms for specific use-cases if needed by configuring the measuring prop of <DndContext>. Refer to the <Switch> example.\n  - Reduced the number of concepts related to measuring from `ViewRect`, `LayoutRect` to just a single concept of `ClientRect`.\n    - The `ClientRect` interface no longer holds the `offsetTop` and `offsetLeft` properties. For most use-cases, you can replace `offsetTop` with `top` and `offsetLeft` with `left`.\n    - Replaced the following exports from the `@dnd-kit/core` package with `getClientRect`:\n      - `getBoundingClientRect`\n      - `getViewRect`\n      - `getLayoutRect`\n      - `getViewportLayoutRect`\n  - Removed `translatedRect` from the `SensorContext` interface. Replace usage with `collisionRect`.\n  - Removed `activeNodeClientRect` on the `DndContext` interface. Replace with `activeNodeRect`.\n```\n\n----------------------------------------\n\nTITLE: Installing @dnd-kit/modifiers Package\nDESCRIPTION: Command to install the @dnd-kit/modifiers package using npm. This package is required to use modifiers in your project.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/modifiers/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @dnd-kit/modifiers\n```\n\n----------------------------------------\n\nTITLE: Fix for Default Layout Animation Function\nDESCRIPTION: Bug fix for the default layout animation function where it could incorrectly return true initially, now checking the wasDragging property to ensure no animation occurs if wasDragging is false.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Now checking wasDragging property to ensure no layout animation\n// occurs if wasDragging is false\n```\n\n----------------------------------------\n\nTITLE: Starting the Playground Server for dnd-kit Development\nDESCRIPTION: Command to launch the Parcel-powered playground environment on localhost:1234 for testing and developing dnd-kit packages locally. This allows hot reloading when making changes to modules in the packages directory.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/README.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn start:playground\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Development Server\nDESCRIPTION: Command to start the Storybook development server for viewing and testing components.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/README.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn start:storybook\n```\n\n----------------------------------------\n\nTITLE: Starting Development Environment\nDESCRIPTION: Command to run the development environment in watch mode, which builds packages and automatically rebuilds on changes.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Peer Dependency to @dnd-kit/modifiers\nDESCRIPTION: Patch in version 6.0.1 adding a missing peer dependency to the @dnd-kit/modifiers package, ensuring proper package relationships are defined.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/modifiers/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [#823](https://github.com/clauderic/dnd-kit/pull/823) [`b065c37`](https://github.com/clauderic/dnd-kit/commit/b065c3750078bee43caa5a79f54196d4612d2375) Thanks [@DaniGuardiola](https://github.com/DaniGuardiola)! - Add missing peer dependency to @dnd-kit/modifiers\n```\n\n----------------------------------------\n\nTITLE: Version History and Dependencies Updates\nDESCRIPTION: Changelog entry detailing version updates and dependency changes, including PointerEvent support addition and peer dependency configurations.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/modifiers/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#437](https://github.com/clauderic/dnd-kit/pull/437) [`0e628bc`](https://github.com/clauderic/dnd-kit/commit/0e628bce53fb1a7223cdedd203cb07b6e62e5ec1) Thanks [@chestozo](https://github.com/chestozo)! - Added PointerEvent support to the `getEventCoordinates` method. This fixes testing the PointerSensor with Cypress (#436)\n\n- Updated dependencies [[`13be602`](https://github.com/clauderic/dnd-kit/commit/13be602229c6d5723b3ae98bca7b8f45f0773366), [...], [`1f5ca27`](https://github.com/clauderic/dnd-kit/commit/1f5ca27b17879861c2c545160c2046a747544846)]:\n  - @dnd-kit/core@4.0.0\n  - @dnd-kit/utilities@3.0.0\n```\n\n----------------------------------------\n\nTITLE: Return undefined Instead of null for transition in useSortable\nDESCRIPTION: Change to return undefined instead of null for the transition property in useSortable hook.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/sortable/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Return undefined instead of null for transition in useSortable\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install all dependencies in the root directory using Yarn, required for the monorepo structure that uses Lerna and Yarn Workspaces.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Referencing Git Commit in Markdown\nDESCRIPTION: This snippet demonstrates how to reference a Git commit hash and link it to the corresponding GitHub commit page in Markdown format.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n[`5194696`](https://github.com/clauderic/dnd-kit/commit/5194696b4b91f26379cd3e6c11b2d66c92d32c5b)\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request in Markdown\nDESCRIPTION: This snippet shows how to reference a GitHub pull request number and link it to the corresponding pull request page in Markdown format.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n[#51](https://github.com/clauderic/dnd-kit/pull/51)\n```\n\n----------------------------------------\n\nTITLE: Mentioning GitHub User in Markdown\nDESCRIPTION: This snippet demonstrates how to mention a GitHub user and link to their profile page using Markdown syntax.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n[@clauderic](https://github.com/clauderic)\n```\n\n----------------------------------------\n\nTITLE: Referencing Pull Request and Commit in Markdown\nDESCRIPTION: This snippet shows how to reference a pull request and commit hash in a markdown changelog format. It includes a link to the pull request and a link to the specific commit.\nSOURCE: https://github.com/clauderic/dnd-kit/blob/master/packages/core/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[#759](https://github.com/clauderic/dnd-kit/pull/759) [`e5b9d38`](https://github.com/clauderic/dnd-kit/commit/e5b9d380887f71d50d8418f48fc3569db8367124)\n```"
  }
]