[
  {
    "owner": "prometheus",
    "repo": "docs",
    "content": "TITLE: Prometheus Config with Relabeling for Blackbox\nDESCRIPTION: This Prometheus configuration uses relabeling to dynamically set the target for the blackbox exporter. It moves the actual target URLs into static_configs, sets the __param_target label, and updates the __address__ label to point to the blackbox exporter.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nglobal:\n  scrape_interval: 5s\n\nscrape_configs:\n- job_name: blackbox # To get metrics about the exporter itself\n  metrics_path: /metrics\n  static_configs:\n    - targets:\n      - localhost:9115   # For Windows and macOS replace with - host.docker.internal:9115\n\n- job_name: blackbox-http # To get metrics about the exporter’s targets\n  metrics_path: /probe\n  params:\n    module: [http_2xx]\n  static_configs:\n    - targets:\n      - http://prometheus.io    # Target to probe with http\n      - https://prometheus.io   # Target to probe with https\n      - http://example.com:8080 # Target to probe with http on port 8080\n  relabel_configs:\n    - source_labels: [__address__]\n      target_label: __param_target\n    - source_labels: [__param_target]\n      target_label: instance\n    - target_label: __address__\n      replacement: localhost:9115  # The blackbox exporter’s real hostname:port. For Windows and macOS replace with - host.docker.internal:9115\n```\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus with Configuration File\nDESCRIPTION: Execute Prometheus using the binary along with a specified configuration file in YAML format. The command initiates Prometheus to start with the defined configurations.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/getting_started.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nprometheus --config.file=prometheus.yml\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Prometheus in Bash\nDESCRIPTION: Commands to download the latest Prometheus release and extract it to a local directory.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/introduction/first_steps.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar xvfz prometheus-*.tar.gz\ncd prometheus-*\n```\n\n----------------------------------------\n\nTITLE: Registering and Exposing Metrics in Go\nDESCRIPTION: This snippet shows how to register the Prometheus counter and expose the metrics using the promhttp package in Go.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/instrumenting_http_server_in_go.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n   prometheus.MustRegister(pingCounter)\n   http.HandleFunc(\"/ping\", ping)\n   http.Handle(\"/metrics\", promhttp.Handler())\n   http.ListenAndServe(\":8090\", nil)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration - Single Relabeling Rule\nDESCRIPTION: This snippet shows a single relabeling rule where the value from the label `__address__` is copied to the label `__param_target`.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n  relabel_configs:\n    - source_labels: [__address__]\n      target_label: __param_target\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus in YAML\nDESCRIPTION: Sample Prometheus configuration file in YAML format, defining global settings, rule files, and scrape configs.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/introduction/first_steps.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - \"first.rules\"\n  # - \"second.rules\"\n\nscrape_configs:\n  - job_name: prometheus\n    static_configs:\n      - targets: ['localhost:9090']\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Interval\nDESCRIPTION: This YAML configuration sets the 'scrape_interval' for Prometheus to collect metrics every 15 seconds. It specifies the target (localhost:9090) from which Prometheus should scrape metrics.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/getting_started.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: prometheus\n    static_configs:\n      - targets: [\"localhost:9090\"]\n```\n\n----------------------------------------\n\nTITLE: Prometheus File SD Configuration\nDESCRIPTION: Prometheus scrape configuration using file_sd to read targets from custom service discovery JSON output.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2018-07-05-implementing-custom-sd.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: \"custom-sd\"\n    scrape_interval: \"15s\"\n    file_sd_configs:\n    - files:\n      - /path/to/custom_sd.json\n```\n\n----------------------------------------\n\nTITLE: Using Gauge Metrics in Prometheus - Markdown\nDESCRIPTION: This snippet demonstrates how to reference a gauge metric representing the heap allocation bytes in Prometheus.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/understanding_metric_types.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<code> go\\_memstats\\_heap\\_alloc\\_bytes</code>\n```\n\n----------------------------------------\n\nTITLE: Custom Metrics Implementation\nDESCRIPTION: Extended Go application that implements a custom counter metric (myapp_processed_ops_total) along with default metrics, incrementing the counter every 2 seconds.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/go-application.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"net/http\"\n        \"time\"\n\n        \"github.com/prometheus/client_golang/prometheus\"\n        \"github.com/prometheus/client_golang/prometheus/promauto\"\n        \"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc recordMetrics() {\n        go func() {\n                for {\n                        opsProcessed.Inc()\n                        time.Sleep(2 * time.Second)\n                }\n        }()\n}\n\nvar (\n        opsProcessed = promauto.NewCounter(prometheus.CounterOpts{\n                Name: \"myapp_processed_ops_total\",\n                Help: \"The total number of processed events\",\n        })\n)\n\nfunc main() {\n        recordMetrics()\n\n        http.Handle(\"/metrics\", promhttp.Handler())\n        http.ListenAndServe(\":2112\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus to Scrape Node Exporter\nDESCRIPTION: YAML configuration for Prometheus to scrape metrics from Node Exporter. Sets a global scrape interval of 15 seconds and configures a job named 'node' targeting the Node Exporter at localhost:9100.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/node-exporter.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n- job_name: node\n  static_configs:\n  - targets: ['localhost:9100']\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Since Event in Prometheus\nDESCRIPTION: This snippet demonstrates how to calculate the time since an event using the `time()` function and a timestamp metric in Prometheus. Instead of tracking 'time since' directly, export the Unix timestamp of the event.  The `time() - my_timestamp_metric` expression calculates the time elapsed, mitigating update logic issues and potential stuck states.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/practices/instrumentation.md#2025-04-21_snippet_0\n\nLANGUAGE: PromQL\nCODE:\n```\n\"time() - my_timestamp_metric\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Node Exporter on Linux\nDESCRIPTION: Commands to download, extract, and run the Node Exporter. The Node Exporter is downloaded as a tarball, extracted, and then executed to expose system metrics on port 9100.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/node-exporter.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NOTE: Replace the URL with one from the above mentioned \"downloads\" page.\n# <VERSION>, <OS>, and <ARCH> are placeholders.\nwget https://github.com/prometheus/node_exporter/releases/download/v<VERSION>/node_exporter-<VERSION>.<OS>-<ARCH>.tar.gz\ntar xvfz node_exporter-*.*-amd64.tar.gz\ncd node_exporter-*.*-amd64\n./node_exporter\n```\n\n----------------------------------------\n\nTITLE: Basic Go Metrics Exposition\nDESCRIPTION: Minimal Go application that exposes default Prometheus metrics via HTTP endpoint at localhost:2112/metrics using the promhttp handler.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/go-application.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"net/http\"\n\n        \"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc main() {\n        http.Handle(\"/metrics\", promhttp.Handler())\n        http.ListenAndServe(\":2112\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Server in Prometheus YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up TLS server configuration for Prometheus. It specifies the paths to the certificate and key files generated in the previous step.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/tls-encryption.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntls_server_config:\n  cert_file: /home/prometheus/certs/example.com/example.com.crt\n  key_file: /home/prometheus/certs/example.com/example.com.key\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Latency in PromQL\nDESCRIPTION: This snippet demonstrates how to calculate average request latency over a time period using a Summary metric. It calculates the rate of the sum and count of latency observations, then divides the sum rate by the count rate to get the average latency.  Aggregation is performed by summing the numerator and denominator separately before dividing.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/practices/rules.md#2025-04-21_snippet_2\n\nLANGUAGE: PromQL\nCODE:\n```\n\n- record: instance_path:request_latency_seconds_count:rate5m\n  expr: rate(request_latency_seconds_count{job=\"myjob\"}[5m])\n\n- record: instance_path:request_latency_seconds_sum:rate5m\n  expr: rate(request_latency_seconds_sum{job=\"myjob\"}[5m])\n\n- record: instance_path:request_latency_seconds:mean5m\n  expr: |2\n      instance_path:request_latency_seconds_sum:rate5m{job=\"myjob\"}\n    /\n      instance_path:request_latency_seconds_count:rate5m{job=\"myjob\"}\n\n# Aggregate up numerator and denominator, then divide.\n- record: path:request_latency_seconds:mean5m\n  expr: |2\n      sum without (instance)(instance_path:request_latency_seconds_sum:rate5m{job=\"myjob\"})\n    /\n      sum without (instance)(instance_path:request_latency_seconds_count:rate5m{job=\"myjob\"})\n\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Alert Rule for Request Count\nDESCRIPTION: Creates an alert rule that triggers when the ping request count metric exceeds 5, with a 10-second evaluation window\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/alerting_based_on_metrics.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n - name: Count greater than 5\n   rules:\n   - alert: CountGreaterThan5\n     expr: ping_request_count > 5\n     for: 10s\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running the Go HTTP Server\nDESCRIPTION: This snippet outlines the steps to compile and run the Go HTTP server using the command line.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/instrumenting_http_server_in_go.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build server.go\n./server\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus YAML for File-Based Service Discovery\nDESCRIPTION: YAML configuration for Prometheus to use file-based service discovery, specifying the job name and the JSON file containing target information.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/file-sd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: 'node'\n  file_sd_configs:\n  - files:\n    - 'targets.json'\n```\n\n----------------------------------------\n\nTITLE: Defining Scrape Targets in JSON for Prometheus\nDESCRIPTION: JSON configuration defining the scrape targets for Prometheus, including labels and target addresses.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/file-sd.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"labels\": {\n      \"job\": \"node\"\n    },\n    \"targets\": [\n      \"localhost:9100\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Go Client Libraries\nDESCRIPTION: Commands to install the required Prometheus Go client libraries using go get, including prometheus, promauto, and promhttp packages.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/go-application.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/prometheus/client_golang/prometheus\ngo get github.com/prometheus/client_golang/prometheus/promauto\ngo get github.com/prometheus/client_golang/prometheus/promhttp\n```\n\n----------------------------------------\n\nTITLE: Calculating 95th Percentile Using Histograms\nDESCRIPTION: This snippet uses the 'histogram_quantile()' function in Prometheus to calculate the 95th percentile of request durations obtained from a histogram called 'http_request_duration_seconds'. It aggregates data over the last 5 minutes using the bucket counts.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/practices/histograms.md#2025-04-21_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\n    histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le)) // GOOD.\n```\n\n----------------------------------------\n\nTITLE: Updating Ping Handler to Increment Counter\nDESCRIPTION: This snippet modifies the ping handler to increment the ping request counter each time the endpoint is accessed.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/instrumenting_http_server_in_go.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc ping(w http.ResponseWriter, req *http.Request) {\n   pingCounter.Inc()\n   fmt.Fprintf(w, \"pong\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for cAdvisor Scraping in YAML\nDESCRIPTION: This YAML configuration sets up Prometheus to scrape metrics from cAdvisor every 5 seconds.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/cadvisor.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: cadvisor\n  scrape_interval: 5s\n  static_configs:\n  - targets:\n    - cadvisor:8080\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Prometheus\nDESCRIPTION: Commands to download, extract, and navigate to the Prometheus directory. Downloads the latest release of Prometheus for the AMD64 architecture.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/node-exporter.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/prometheus/prometheus/releases/download/v*/prometheus-*.*-amd64.tar.gz\ntar xvf prometheus-*.*-amd64.tar.gz\ncd prometheus-*.*\n```\n\n----------------------------------------\n\nTITLE: Calculating Observation Rate from Native Histograms\nDESCRIPTION: Query demonstrating how to calculate the rate of observations (requests per second) from a native histogram\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_10\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_count(rate(http_request_duration_seconds[10m]))\n```\n\n----------------------------------------\n\nTITLE: Running Node Exporter for Machine Metrics\nDESCRIPTION: This Bash command runs the Node Exporter, a standard Prometheus exporter for machine metrics. It enables Prometheus to collect metrics from the host system.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/getting_started.md#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n./node_exporter\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus Server in Bash\nDESCRIPTION: Command to start the Prometheus server with a specified configuration file.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/introduction/first_steps.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus --config.file=prometheus.yml\n```\n\n----------------------------------------\n\nTITLE: Aggregating Requests Per Second in PromQL\nDESCRIPTION: This snippet demonstrates how to calculate and aggregate requests per second with a `path` label using Prometheus' recording rules.  It first calculates the rate of requests per instance and path, then aggregates to the path level using `sum without (instance)`. The `rate` function calculates the per-second average rate of increase over a 5-minute window.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/practices/rules.md#2025-04-21_snippet_0\n\nLANGUAGE: PromQL\nCODE:\n```\n\n- record: instance_path:requests:rate5m\n  expr: rate(requests_total{job=\"myjob\"}[5m])\n\n- record: path:requests:rate5m\n  expr: sum without (instance)(instance_path:requests:rate5m{job=\"myjob\"})\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Prometheus Counter in Go\nDESCRIPTION: This snippet demonstrates how to create a Prometheus counter metric to track the number of requests handled by the '/ping' endpoint.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/instrumenting_http_server_in_go.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar pingCounter = prometheus.NewCounter(\n   prometheus.CounterOpts{\n       Name: \"ping_request_count\",\n       Help: \"No of request handled by Ping handler\",\n   },\n)\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Query Rate in PromQL\nDESCRIPTION: This snippet demonstrates how to calculate the average query rate across instances and paths using the `avg()` function. It averages the request latency seconds count rate, removing the `instance` and `path` labels during aggregation to arrive at the job level.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/practices/rules.md#2025-04-21_snippet_3\n\nLANGUAGE: PromQL\nCODE:\n```\n\n- record: job:request_latency_seconds_count:avg_rate5m\n  expr: avg without (instance, path)(instance:request_latency_seconds_count:rate5m{job=\"myjob\"})\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Log in Prometheus YAML\nDESCRIPTION: This YAML snippet shows how to configure Prometheus to log all queries to a file. It sets the query_log_file in the global configuration and includes a basic scrape config.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/query-log.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n  query_log_file: /prometheus/query.log\nscrape_configs:\n- job_name: 'prometheus'\n  static_configs:\n  - targets: ['localhost:9090']\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Prometheus Binary\nDESCRIPTION: Bash commands to download the latest Prometheus release and extract it from the tarball.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/file-sd.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/prometheus/prometheus/releases/download/v*/prometheus-*.*-amd64.tar.gz\ntar xvf prometheus-*.*-amd64.tar.gz\ncd prometheus-*.*\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus with a Custom Configuration\nDESCRIPTION: Command to start Prometheus with a specific configuration file. Uses the --config.file flag to point to the prometheus.yml file created earlier.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/node-exporter.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus --config.file=./prometheus.yml\n```\n\n----------------------------------------\n\nTITLE: Verifying Node Exporter Metrics with cURL\nDESCRIPTION: Command to check that Node Exporter is correctly exposing metrics by querying its /metrics endpoint with cURL.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/node-exporter.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:9100/metrics\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Format in EBNF for Prometheus\nDESCRIPTION: This snippet defines the Extended Backus-Naur Form (EBNF) syntax for describing metric samples in Prometheus' text-based format. It specifies the structure for metric names, labels, values, and timestamps.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/exposition_formats.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmetric_name [\n  \"{\" label_name \"=\" `\"` label_value `\"` { \",\" label_name \"=\" `\"` label_value `\"` } [ \",\" ] \"}\"\n] value [ timestamp ]\n```\n\n----------------------------------------\n\nTITLE: Calculating Histogram Bucket Boundaries in Python\nDESCRIPTION: Calculates the boundaries of a standard schema histogram bucket using Python syntax. Depending on the value of n, it determines the upper and lower limits for both positive and negative buckets. No external dependencies are required. The method relies on the schema parameter n and the bucket index i. Adjustments for edge cases involve bounds like MaxFloat64 and MinFloat64.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n(2**2**-n)**i\n```\n\nLANGUAGE: Python\nCODE:\n```\n(2**2**-n)**(i-1)\n```\n\nLANGUAGE: Python\nCODE:\n```\n-((2**2**-n)**i)\n```\n\nLANGUAGE: Python\nCODE:\n```\n-((2**2**-n)**(i-1))\n```\n\n----------------------------------------\n\nTITLE: Calculating Request Failure Ratio in PromQL\nDESCRIPTION: This snippet demonstrates how to calculate the request failure ratio and aggregate it to the job level. It calculates the failure rate per instance and path, divides it by the request rate to get a ratio, and then aggregates the numerator and denominator separately before dividing at the path and job levels.  The `rate` function calculates the per-second average rate of increase over a 5-minute window.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/practices/rules.md#2025-04-21_snippet_1\n\nLANGUAGE: PromQL\nCODE:\n```\n\n- record: instance_path:request_failures:rate5m\n  expr: rate(request_failures_total{job=\"myjob\"}[5m])\n\n- record: instance_path:request_failures_per_requests:ratio_rate5m\n  expr: |2\n      instance_path:request_failures:rate5m{job=\"myjob\"}\n    /\n      instance_path:requests:rate5m{job=\"myjob\"}\n\n# Aggregate up numerator and denominator, then divide to get path-level ratio.\n- record: path:request_failures_per_requests:ratio_rate5m\n  expr: |2\n      sum without (instance)(instance_path:request_failures:rate5m{job=\"myjob\"})\n    /\n      sum without (instance)(instance_path:requests:rate5m{job=\"myjob\"})\n\n# No labels left from instrumentation or distinguishing instances,\n# so we use 'job' as the level.\n- record: job:request_failures_per_requests:ratio_rate5m\n  expr: |2\n      sum without (instance, path)(instance_path:request_failures:rate5m{job=\"myjob\"})\n    /\n      sum without (instance, path)(instance_path:requests:rate5m{job=\"myjob\"})\n\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Documentation Development Server\nDESCRIPTION: These commands start a local development server for the Prometheus documentation site. The first command rebuilds the site whenever relevant files change, and the second command starts the local server. The site can then be viewed at http://localhost:3000/.\nSOURCE: https://github.com/prometheus/docs/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Rebuild the site whenever relevant files change:\nmake guard\n# Start the local development server in a separate shell:\nmake serve\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple HTTP Server in Go\nDESCRIPTION: This snippet initializes a simple HTTP server in Go, which listens on port 8090 and has a '/ping' endpoint that responds with 'pong'.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/instrumenting_http_server_in_go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n   \"fmt\"\n   \"net/http\"\n)\n\nfunc ping(w http.ResponseWriter, req *http.Request){\n   fmt.Fprintf(w,\"pong\")\n}\n\nfunc main() {\n   http.HandleFunc(\"/ping\",ping)\n\n   http.ListenAndServe(\":8090\", nil)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus with TLS Configuration in Bash\nDESCRIPTION: This bash command demonstrates how to start Prometheus with TLS configuration. It specifies the paths to the main configuration file, web configuration file, and sets the external URL.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/tls-encryption.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprometheus \\\n  --config.file=/path/to/prometheus.yml \\\n  --web.config.file=/path/to/web-config.yml \\\n  --web.external-url=https://example.com/\n```\n\n----------------------------------------\n\nTITLE: Prometheus Config for Blackbox Target Probing\nDESCRIPTION: This Prometheus configuration adds a scrape job to probe specific targets using the blackbox exporter. It sets the metrics_path to /probe and uses parameters to define the module and target to be probed.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nglobal:\n  scrape_interval: 5s\n\nscrape_configs:\n- job_name: blackbox # To get metrics about the exporter itself\n  metrics_path: /metrics\n  static_configs:\n    - targets:\n      - localhost:9115   # For Windows and macOS replace with - host.docker.internal:9115\n\n- job_name: blackbox-http # To get metrics about the exporter’s targets\n  metrics_path: /probe\n  params:\n    module: [http_2xx]\n    target: [prometheus.io]\n  static_configs:\n    - targets:\n      - localhost:9115   # For Windows and macOS replace with - host.docker.internal:9115\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus to Scrape Metrics\nDESCRIPTION: This YAML snippet provides the configuration for Prometheus to scrape metrics from the Go HTTP server along with a global scrape interval.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/instrumenting_http_server_in_go.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: prometheus\n    static_configs:\n      - targets: [\"localhost:9090\"]\n  - job_name: simple_server\n    static_configs:\n      - targets: [\"localhost:8090\"]\n\n```\n\n----------------------------------------\n\nTITLE: Downloading Blackbox Exporter Configuration File\nDESCRIPTION: This command downloads the default `blackbox.yml` configuration file from the Prometheus Blackbox Exporter's GitHub repository. The file is saved locally as `blackbox.yml`, allowing for modification and customization.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"curl -o blackbox.yml https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/blackbox.yml\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration - Relabeling Rules\nDESCRIPTION: This snippet defines the relabeling rules within the Prometheus configuration. It shows how to copy the `__address__` to `__param_target`, then `__param_target` to `instance`, and finally sets `__address__` to the blackbox exporter's address.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n  relabel_configs:\n    - source_labels: [__address__]\n      target_label: __param_target\n    - source_labels: [__param_target]\n      target_label: instance\n    - target_label: __address__\n      replacement: localhost:9115  # The blackbox exporter’s real hostname:port. For Windows and macOS replace with - host.docker.internal:9115\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Node Exporter Metrics via Bash\nDESCRIPTION: Command to fetch metrics from the Node Exporter running on localhost:9100 using curl.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/file-sd.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:9100/metrics\n```\n\n----------------------------------------\n\nTITLE: Example of Prometheus Metric Exposition\nDESCRIPTION: This code snippet demonstrates a comprehensive example of Prometheus metric exposition in the text-based format. It includes various metric types such as counters, histograms, and summaries, along with HELP and TYPE metadata.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/exposition_formats.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# HELP http_requests_total The total number of HTTP requests.\n# TYPE http_requests_total counter\nhttp_requests_total{method=\"post\",code=\"200\"} 1027 1395066363000\nhttp_requests_total{method=\"post\",code=\"400\"}    3 1395066363000\n\n# Escaping in label values:\nmsdos_file_access_time_seconds{path=\"C:\\\\DIR\\\\FILE.TXT\",error=\"Cannot find file:\\n\\\"FILE.TXT\\\"\"} 1.458255915e9\n\n# Minimalistic line:\nmetric_without_timestamp_and_labels 12.47\n\n# A weird metric from before the epoch:\nsomething_weird{problem=\"division by zero\"} +Inf -3982045\n\n# A histogram, which has a pretty complex representation in the text format:\n# HELP http_request_duration_seconds A histogram of the request duration.\n# TYPE http_request_duration_seconds histogram\nhttp_request_duration_seconds_bucket{le=\"0.05\"} 24054\nhttp_request_duration_seconds_bucket{le=\"0.1\"} 33444\nhttp_request_duration_seconds_bucket{le=\"0.2\"} 100392\nhttp_request_duration_seconds_bucket{le=\"0.5\"} 129389\nhttp_request_duration_seconds_bucket{le=\"1\"} 133988\nhttp_request_duration_seconds_bucket{le=\"+Inf\"} 144320\nhttp_request_duration_seconds_sum 53423\nhttp_request_duration_seconds_count 144320\n\n# Finally a summary, which has a complex representation, too:\n# HELP rpc_duration_seconds A summary of the RPC duration in seconds.\n# TYPE rpc_duration_seconds summary\nrpc_duration_seconds{quantile=\"0.01\"} 3102\nrpc_duration_seconds{quantile=\"0.05\"} 3272\nrpc_duration_seconds{quantile=\"0.5\"} 4773\nrpc_duration_seconds{quantile=\"0.9\"} 9001\nrpc_duration_seconds{quantile=\"0.99\"} 76656\nrpc_duration_seconds_sum 1.7560473e+07\nrpc_duration_seconds_count 2693\n```\n\n----------------------------------------\n\nTITLE: Enabling Out-of-Order Sample Ingestion in Prometheus\nDESCRIPTION: YAML configuration for enabling out-of-order sample ingestion with a 30-minute time window.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/opentelemetry.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nstorage:\n  tsdb:\n    out_of_order_time_window: 30m\n```\n\n----------------------------------------\n\nTITLE: Running Blackbox Exporter in Docker with Custom Configuration\nDESCRIPTION: This `docker run` command launches the Prometheus Blackbox Exporter within a Docker container, mounting the custom `blackbox.yml` configuration file into the container. It maps port 9115, making the exporter accessible, and specifies the configuration file path for the exporter.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"docker \\\\\n  run -p 9115:9115 \\\\\n  --mount type=bind,source=\\\"$(pwd)\\\"/blackbox.yml,target=/blackbox.yml,readonly \\\\\n  prom/blackbox-exporter \\\\\n  --config.file=\\\"/blackbox.yml\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Blackbox Exporter (Linux)\nDESCRIPTION: This Prometheus configuration sets up a scrape job for the blackbox exporter itself. It defines the scrape interval, the metrics path, and the target as localhost:9115, suitable for Linux environments.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nglobal:\n  scrape_interval: 5s\n\nscrape_configs:\n- job_name: blackbox # To get metrics about the exporter itself\n  metrics_path: /metrics\n  static_configs:\n    - targets:\n      - localhost:9115\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML in Prometheus Exporters\nDESCRIPTION: YAML is the standard configuration format for Prometheus exporters. This snippet shows a basic YAML configuration structure.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/writing_exporters.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporter:\n  name: example_exporter\n  port: 9100\nmetrics:\n  - name: http_requests_total\n    type: counter\n    help: \"Total number of HTTP requests\"\n  - name: response_time_seconds\n    type: histogram\n    help: \"Response time in seconds\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Apdex Score Using Histograms\nDESCRIPTION: This snippet provides a Prometheus query to calculate the Apdex score over the last 5 minutes based on response times tracked by a histogram called 'http_request_duration_seconds'. It counts requests within specified buckets and divides the sum of two buckets by half to yield the Apdex score.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/practices/histograms.md#2025-04-21_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\n    (\n      sum(rate(http_request_duration_seconds_bucket{le=\"0.3\"}[5m])) by (job)\n    +\n      sum(rate(http_request_duration_seconds_bucket{le=\"1.2\"}[5m])) by (job)\n    ) / 2 / sum(rate(http_request_duration_seconds_count[5m])) by (job)\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate and Key for TLS in Bash\nDESCRIPTION: This snippet demonstrates how to generate a self-signed certificate and private key using OpenSSL. It creates a directory for the certificates and uses the openssl command to generate the required files.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/tls-encryption.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /home/prometheus/certs/example.com && cd /home/prometheus/certs/certs/example.com\nopenssl req \\\n  -x509 \\\n  -newkey rsa:4096 \\\n  -nodes \\\n  -keyout example.com.key \\\n  -out example.com.crt\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus with Docker on MacOS and Windows\nDESCRIPTION: This Docker command runs a Prometheus container, mounting the prometheus.yml configuration file and exposing port 9090. This command is tailored for macOS and Windows.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ndocker \\\n  run -p 9090:9090 \\\n  --mount type=bind,source=\"$(pwd)\"/prometheus.yml,target=/prometheus.yml,readonly \\\n  prom/prometheus \\\n  --config.file=\"/prometheus.yml\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon for Metrics Exposure\nDESCRIPTION: JSON configuration to enable Docker daemon metrics on a specific address and port. This configuration is added to the /etc/docker/daemon.json file to expose Docker metrics for Prometheus scraping.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/dockerswarm.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metrics-addr\" : \"0.0.0.0:9323\",\n  \"experimental\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus Server via Bash\nDESCRIPTION: Command to start the Prometheus server using the binary in the current directory.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/file-sd.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus with Alert Rules and Alertmanager\nDESCRIPTION: Defines Prometheus configuration including scrape intervals, rule files, and Alertmanager connection settings for metric monitoring and alerting\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/alerting_based_on_metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n scrape_interval: 15s\n evaluation_interval: 10s\nrule_files:\n  - rules.yml\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets:\n       - localhost:9093\nscrape_configs:\n - job_name: prometheus\n   static_configs:\n       - targets: [\"localhost:9090\"]\n - job_name: simple_server\n   static_configs:\n       - targets: [\"localhost:8090\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Node Exporter to Prometheus Configuration\nDESCRIPTION: The YAML snippet adds 'node_exporter' to the list of scrape targets in Prometheus configuration. It updates the configuration to scrape metrics from 'localhost:9100', where the node exporter runs.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/getting_started.md#2025-04-21_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: prometheus\n    static_configs:\n      - targets: [\"localhost:9090\"]\n  - job_name: node_exporter\n    static_configs:\n      - targets: [\"localhost:9100\"]\n```\n\n----------------------------------------\n\nTITLE: HTTP Requests Example with @ Modifier\nDESCRIPTION: Demonstrates using the @ modifier with unix timestamp to get HTTP requests metrics at a specific time. Shows both instant metric query and rate calculation examples.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2021-02-18-introducing-the-@-modifier.md#2025-04-21_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nhttp_requests_total @ 1609746000\\nrate(http_requests_total[5m] @ 1609746000)\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Auth with cURL (Authorized Access)\nDESCRIPTION: cURL command to access the Prometheus metrics endpoint with basic authentication, providing the username and prompting for password.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/basic-auth.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u admin http://localhost:9090/metrics\nEnter host password for user 'admin':\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Docker Daemon Scraping\nDESCRIPTION: YAML configuration for Prometheus to scrape itself and Docker daemons. It uses dockerswarm_sd_configs for node discovery and relabel_configs to set the correct scraping address and instance label.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/dockerswarm.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  # Make Prometheus scrape itself for metrics.\n  - job_name: 'prometheus'\n    static_configs:\n    - targets: ['localhost:9090']\n\n  # Create a job for Docker daemons.\n  - job_name: 'docker'\n    dockerswarm_sd_configs:\n      - host: unix:///var/run/docker.sock\n        role: nodes\n    relabel_configs:\n      # Fetch metrics on port 9323.\n      - source_labels: [__meta_dockerswarm_node_address]\n        target_label: __address__\n        replacement: $1:9323\n      # Set hostname as instance label\n      - source_labels: [__meta_dockerswarm_node_hostname]\n        target_label: instance\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Family Metadata\nDESCRIPTION: Specification for creating metric family metadata including name, type, unit, and help text with strict naming conventions and requirements\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMetricFamily MUST have a name, HELP, TYPE, and UNIT metadata\n```\n\n----------------------------------------\n\nTITLE: Querying Classic Histogram Quantiles in Prometheus\nDESCRIPTION: Example query showing how to calculate the 90th percentile using classic histograms with rate and aggregation\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_8\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.9, sum by (job, le) (rate(http_request_duration_seconds_bucket[10m])))\n```\n\n----------------------------------------\n\nTITLE: Validating Prometheus Web Configuration\nDESCRIPTION: Shell command to validate the web configuration file using promtool before applying it to the Prometheus server.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/basic-auth.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ promtool check web-config web.yml\nweb.yml SUCCESS\n```\n\n----------------------------------------\n\nTITLE: Initializing Prometheus Graph Object\nDESCRIPTION: This code snippet demonstrates how to initialize a Prometheus graph object using JavaScript. It configures the graph to display a time series query, sets formatting options for the y-axis and hover details, and defines units and a title for the y-axis. The graph will be rendered inside the HTML element with the ID `queryGraph`.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/visualization/consoles.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew PromConsole.Graph({\n  node: document.querySelector(\"#queryGraph\"),\n  expr: \"sum(rate(http_query_count{job='myjob'}[5m]))\",\n  name: \"Queries\",\n  yAxisFormatter: PromConsole.NumberFormatter.humanizeNoSmallPrefix,\n  yHoverFormatter: PromConsole.NumberFormatter.humanizeNoSmallPrefix,\n  yUnits: \"/s\",\n  yTitle: \"Queries\"\n})\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Container Monitoring\nDESCRIPTION: YAML configuration for Prometheus to discover and scrape Docker Swarm tasks. It includes relabel configurations to filter running containers with specific labels and set job names.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/dockerswarm.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  # Make Prometheus scrape itself for metrics.\n  - job_name: 'prometheus'\n    static_configs:\n    - targets: ['localhost:9090']\n\n  # Create a job for Docker Swarm containers.\n  - job_name: 'dockerswarm'\n    dockerswarm_sd_configs:\n      - host: unix:///var/run/docker.sock\n        role: tasks\n    relabel_configs:\n      # Only keep containers that should be running.\n      - source_labels: [__meta_dockerswarm_task_desired_state]\n        regex: running\n        action: keep\n      # Only keep containers that have a `prometheus-job` label.\n      - source_labels: [__meta_dockerswarm_service_label_prometheus_job]\n        regex: .+\n        action: keep\n      # Use the prometheus-job Swarm label as Prometheus job label.\n      - source_labels: [__meta_dockerswarm_service_label_prometheus_job]\n        target_label: job\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Metric Name Pattern in Regex\nDESCRIPTION: Regex pattern that defines valid Prometheus metric names. Metric names must start with a letter, underscore, or colon, followed by any number of letters, numbers, underscores, or colons.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/concepts/data_model.md#2025-04-21_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n[a-zA-Z_:][a-zA-Z0-9_:]*\n```\n\n----------------------------------------\n\nTITLE: Creating a Recording Rule for Link Utilization in Prometheus\nDESCRIPTION: This PromQL recording rule precomputes link utilization percentages for non-access layer interfaces, improving query performance for top utilized links.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-24-monitoring-dreamhack.md#2025-04-21_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nprecomputed_link_utilization_percent = rate(ifHCOutOctets{layer!='access'}[10m])*8/1000/1000\n                                             / on (device,interface,alias)\n                                           ifHighSpeed{layer!='access'}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Export Environment Variables\nDESCRIPTION: Environment variables setup for configuring OpenTelemetry metrics export to Prometheus using HTTP protocol.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/opentelemetry.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://localhost:9090/api/v1/otlp/v1/metrics\n```\n\n----------------------------------------\n\nTITLE: Graph Library Invocation Example\nDESCRIPTION: This example shows how to invoke the Prometheus graph library in JavaScript and HTML.  It requires a div element with an ID where the graph will be rendered, and a script tag to initialize the `PromConsole.Graph` object. The `head` template is assumed to load the necessary JavaScript and CSS files.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/visualization/consoles.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"queryGraph\"></div>\n<script>\nnew PromConsole.Graph({\n  node: document.querySelector(\"#queryGraph\"),\n  expr: \"sum(rate(http_query_count{job='myjob'}[5m]))\"\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Prometheus Web Configuration with Basic Auth\nDESCRIPTION: YAML configuration file that defines basic authentication users for Prometheus. Each user entry contains a username and bcrypt-hashed password.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/basic-auth.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbasic_auth_users:\n    admin: $2b$12$hNf2lSsxfm0.i4a.1kVpSOVyBCfIB51VRjgBUyv6kdnyTlgWj81Ay\n```\n\n----------------------------------------\n\nTITLE: Metric Value Type Specifications\nDESCRIPTION: Detailed rules for representing metric values, including support for floating points, integers, and special values like NaN and infinity\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMetric values MUST be either floating points or integers\nSupport for NaN, +Inf, and -Inf\nBoolean values follow 1==true, 0==false\n```\n\n----------------------------------------\n\nTITLE: Enabling OTLP Receiver in Prometheus CLI\nDESCRIPTION: Command to start Prometheus with OTLP receiver enabled for accepting OpenTelemetry metrics via HTTP.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/opentelemetry.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ prometheus --web.enable-otlp-receiver\n```\n\n----------------------------------------\n\nTITLE: Probing with curl\nDESCRIPTION: This curl command probes `prometheus.io` using the `http_2xx` module with the configured Blackbox Exporter. It expects the exporter to be running on localhost:9115, and the `http_2xx` module to be configured to use IPv4.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"curl 'localhost:9115/probe?target=prometheus.io&module=http_2xx'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UTF-8 Validation in Go Client\nDESCRIPTION: Code snippet showing how to enable UTF-8 validation in the Prometheus Go client library. This must be set before metric instantiation.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/utf8.md#2025-04-21_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nimport \"github.com/prometheus/common/model\"\n\nfunc init() {\n\tmodel.NameValidationScheme = model.UTF8Validation\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Prometheus with Basic Auth Enabled\nDESCRIPTION: Shell command to start Prometheus with the web configuration file that contains basic authentication settings.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/basic-auth.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ prometheus --web.config.file=web.yml\n```\n\n----------------------------------------\n\nTITLE: Subquery Syntax in PromQL\nDESCRIPTION: The general syntax for subqueries in PromQL, including optional resolution and offset parameters.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2019-01-28-subquery-support.md#2025-04-21_snippet_0\n\nLANGUAGE: PromQL\nCODE:\n```\n<instant_query> '[' <range> ':' [ <resolution> ] ']' [ offset <duration> ]\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration\nDESCRIPTION: YAML configuration for Prometheus to scrape metrics from the Go application running on localhost:2112.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/go-application.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: myapp\n  scrape_interval: 10s\n  static_configs:\n  - targets:\n    - localhost:2112\n```\n\n----------------------------------------\n\nTITLE: New YAML-based Rule Format\nDESCRIPTION: Demonstrates the new YAML-based rule format in Prometheus 2.0 that supports rule grouping, custom intervals, and sequential execution. Includes examples of recording rules and alerts with labels and annotations.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2017-06-21-prometheus-20-alpha3-new-rule-format.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n- name: my-group-name\n  interval: 30s   # defaults to global interval\n  rules:\n  - record: instance:errors:rate5m\n    expr: rate(errors_total[5m])\n  - record: instance:requests:rate5m\n    expr: rate(requests_total[5m])\n  - alert: HighErrors\n    # Expressions remain PromQL as before and can be spread over\n    # multiple lines via YAML's multi-line strings.\n    expr: |\n      sum without(instance) (instance:errors:rate5m)\n      / \n      sum without(instance) (instance:requests:rate5m)\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      description: \"stuff's happening with {{ $labels.service }}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global Legacy Validation in Prometheus Config\nDESCRIPTION: YAML configuration for setting legacy character validation globally in Prometheus configuration file.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/utf8.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  metric_name_validation_scheme: legacy\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Setup for Prometheus, cAdvisor, and Redis\nDESCRIPTION: This Docker Compose configuration defines three services: Prometheus, cAdvisor, and Redis. It specifies image versions, port mappings, volumes, and dependencies between containers.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/cadvisor.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.2'\nservices:\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: prometheus\n    ports:\n    - 9090:9090\n    command:\n    - --config.file=/etc/prometheus/prometheus.yml\n    volumes:\n    - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro\n    depends_on:\n    - cadvisor\n  cadvisor:\n    image: gcr.io/cadvisor/cadvisor:latest\n    container_name: cadvisor\n    ports:\n    - 8080:8080\n    volumes:\n    - /:/rootfs:ro\n    - /var/run:/var/run:rw\n    - /sys:/sys:ro\n    - /var/lib/docker/:/var/lib/docker:ro\n    depends_on:\n    - redis\n  redis:\n    image: redis:latest\n    container_name: redis\n    ports:\n    - 6379:6379\n```\n\n----------------------------------------\n\nTITLE: Detecting Latency Outliers with PromQL\nDESCRIPTION: A PromQL query to identify instances with latency more than two standard deviations above the mean and 20% above the average. It also includes a check for minimum traffic levels.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-18-practical-anomaly-detection.md#2025-04-21_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\n(\n    instance:latency_seconds:mean5m\n  > on (job) group_left()\n    (\n        avg by (job)(instance:latency_seconds:mean5m)\n      + on (job)\n        2 * stddev by (job)(instance:latency_seconds:mean5m)\n    )\n)\n> on (job) group_left()\n1.2 * avg by (job)(instance:latency_seconds:mean5m)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Alertmanager Slack Integration in YAML\nDESCRIPTION: This snippet shows a simple Alertmanager configuration that sends all alerts to Slack. It specifies the Slack webhook URL, routing, and receiver configuration.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-03-03-custom-alertmanager-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  slack_api_url: '<slack_webhook_url>'\n\nroute:\n  receiver: 'slack-notifications'\n  # All alerts in a notification have the same value for these labels.\n  group_by: [alertname, datacenter, app]\n\nreceivers:\n- name: 'slack-notifications'\n  slack_configs:\n  - channel: '#alerts'\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Alert for Bad Uplink on Access Switch\nDESCRIPTION: This snippet defines a Prometheus alert rule to detect when an access switch's uplink is operating at a non-optimal speed. It checks the ifHighSpeed metric for the GigabitEthernet0/2 interface on access layer switches.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-24-monitoring-dreamhack.md#2025-04-21_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\nALERT BadUplinkOnAccessSwitch\n  IF ifHighSpeed{layer='access', interface='GigabitEthernet0/2'} < 1000 FOR 2m\n  SUMMARY \"Interface linking at {{$value}} Mbps\"\n  DESCRIPTION \"Interface {{$labels.interface}} on {{$labels.device}} linking at {{$value}} Mbps\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Job Legacy Validation in Prometheus\nDESCRIPTION: YAML configuration showing how to set legacy character validation for specific scrape jobs in Prometheus.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/utf8.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: prometheus\n    metric_name_validation_scheme: legacy\n```\n\n----------------------------------------\n\nTITLE: Incorrect Metric Labeling in Prometheus\nDESCRIPTION: Examples of incorrect labeling practices in Prometheus metrics. These approaches break aggregation and should be avoided in favor of proper Prometheus aggregation.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/writing_exporters.md#2025-04-21_snippet_1\n\nLANGUAGE: prometheus\nCODE:\n```\nmy_metric{label=\"a\"} 1\nmy_metric{label=\"b\"} 6\nmy_metric{label=\"total\"} 7\n```\n\nLANGUAGE: prometheus\nCODE:\n```\nmy_metric{label=\"a\"} 1\nmy_metric{label=\"b\"} 6\nmy_metric{} 7\n```\n\n----------------------------------------\n\nTITLE: PromQL Query for Joining Resource Attributes\nDESCRIPTION: Example PromQL query demonstrating how to join metrics with target_info to include resource attributes.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/opentelemetry.md#2025-04-21_snippet_7\n\nLANGUAGE: promql\nCODE:\n```\nrate(http_server_request_duration_seconds_count[2m])\n* on (job, instance) group_left (k8s_cluster_name)\ntarget_info\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Rule for Latency Outliers in YAML\nDESCRIPTION: A YAML configuration defining an alert rule for detecting instance latency outliers. It includes the PromQL query and sets a duration threshold of 30 minutes.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-18-practical-anomaly-detection.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n- name: Practical Anomaly Detection\n  rules:\n  - alert: InstanceLatencyOutlier\n    expr: >\n      (\n            (\n                instance:latency_seconds:mean5m\n              > on (job) group_left()\n                (\n                    avg by (job)(instance:latency_seconds:mean5m)\n                  + on (job)\n                    2 * stddev by (job)(instance:latency_seconds:mean5m)\n                )\n            )\n          > on (job) group_left()\n            1.2 * avg by (job)(instance:latency_seconds:mean5m)\n        and on (job)\n            avg by (job)(instance:latency_seconds_count:rate5m)\n          >\n            1\n      )\n    for: 30m\n```\n\n----------------------------------------\n\nTITLE: Defining the TimeSeries Message in Protobuf\nDESCRIPTION: This code defines the `TimeSeries` message, representing a single time series. It includes fields for labels (`labels_refs`), samples, histograms, exemplars, metadata, and a creation timestamp. The message supports either samples or histograms, but not both in the same message, and specifies constraints and recommendations for the presence and formatting of various fields.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n// TimeSeries represents a single series.\nmessage TimeSeries {\n  // labels_refs is a list of label name-value pair references, encoded\n  // as indices to the Request.symbols array. This list's length is always\n  // a multiple of two, and the underlying labels should be sorted lexicographically.\n  //\n  // Note that there might be multiple TimeSeries objects in the same\n  // Requests with the same labels e.g. for different exemplars, metadata\n  // or created timestamp.\n  repeated uint32 labels_refs = 1;\n\n  // Timeseries messages can either specify samples or (native) histogram samples\n  // (histogram field), but not both. For a typical sender (real-time metric\n  // streaming), in healthy cases, there will be only one sample or histogram.\n  //\n  // Samples and histograms are sorted by timestamp (older first).\n  repeated Sample samples = 2;\n  repeated Histogram histograms = 3;\n\n  // exemplars represents an optional set of exemplars attached to this series' samples.\n  repeated Exemplar exemplars = 4;\n\n  // metadata represents the metadata associated with the given series' samples.\n  Metadata metadata = 5;\n\n  // created_timestamp represents an optional created timestamp associated with\n  // this series' samples in ms format, typically for counter or histogram type\n  // metrics. Created timestamp represents the time when the counter started\n  // counting (sometimes referred to as start timestamp), which can increase\n  // the accuracy of query results.\n  //\n  // Note that some receivers might require this and in return fail to\n  // write such samples within the Request.\n  //\n  // For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go\n  // for conversion from/to time.Time to Prometheus timestamp.\n  //\n  // Note that the \"optional\" keyword is omitted due to\n  // https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields\n  // Zero value means value not set. If you need to use exactly zero value for\n  // the timestamp, use 1 millisecond before or after.\n  int64 created_timestamp = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Basic Metrics Application\nDESCRIPTION: Command to run the basic Go metrics application.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/go-application.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Request Duration Using Histograms and Summaries\nDESCRIPTION: This snippet provides a Prometheus query to calculate the average request duration over the last 5 minutes using a histogram or summary called 'http_request_duration_seconds'. The calculation is done by dividing the rate of the sum of observations by the rate of the count of observations.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/practices/histograms.md#2025-04-21_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\n      rate(http_request_duration_seconds_sum[5m])\n    /\n      rate(http_request_duration_seconds_count[5m])\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration - Set Address to Exporter URI\nDESCRIPTION: This snippet shows a single relabeling rule where the value of the label `__address__` is set to the address of the blackbox exporter.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n  relabel_configs:\n    - target_label: __address__\n      replacement: localhost:9115  # The blackbox exporter’s real hostname:port. For Windows and macOS replace with - host.docker.internal:9115\n```\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Setup\nDESCRIPTION: This command starts the Docker Compose setup defined in the docker-compose.yml file.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/cadvisor.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Defining Streaming Interfaces in Go\nDESCRIPTION: This snippet defines interfaces for iterating over series and samples in Prometheus, allowing it to fetch data on demand and minimize memory allocations. The `SeriesSet`, `Series`, and `SeriesIterator` interfaces facilitate a streaming data flow that reduces the need for precomputed lists of data.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2019-10-10-remote-read-meets-streaming.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// SeriesSet contains a set of series.\ntype SeriesSet interface {\n\tNext() bool\n\tAt() Series\n\tErr() error\n}\n\n// Series represents a single time series.\ntype Series interface {\n\t// Labels returns the complete set of labels identifying the series.\n\tLabels() labels.Labels\n\t// Iterator returns a new iterator of the data of the series.\n\tIterator() SeriesIterator\n}\n\n// SeriesIterator iterates over the data of a time series.\ntype SeriesIterator interface {\n\t// At returns the current timestamp/value pair.\n\tAt() (t int64, v float64)\n\t// Next advances the iterator by one.\n\tNext() bool\n\tErr() error\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Prometheus Configuration via cURL\nDESCRIPTION: This shell command demonstrates how to reload the Prometheus configuration using the management API. It sends a POST request to the reload endpoint.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/query-log.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST http://127.0.0.1:9090/-/reload\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager for Webhook Notifications\nDESCRIPTION: A YAML configuration for Alertmanager to send alert notifications to an external webhook. This setup can be used to trigger automatic remediation actions.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-18-practical-anomaly-detection.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# A simple notification configuration which only sends alert notifications to\n# an external webhook.\nreceivers:\n- name: restart_webhook\n  webhook_configs:\n    url: \"http://example.org/my/hook\"\n\nroute:\n  receiver: restart_webhook\n```\n\n----------------------------------------\n\nTITLE: Go Module Initialization and Running the Server\nDESCRIPTION: This snippet shows how to initialize a Go module and run the HTTP server while ensuring that necessary dependencies are resolved.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/instrumenting_http_server_in_go.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo mod init prom_example\ngo mod tidy\ngo run server.go\n\n```\n\n----------------------------------------\n\nTITLE: Defining OpenMetrics ABNF Grammar\nDESCRIPTION: This snippet defines the ABNF grammar for the OpenMetrics text format, specifying the structure of expositions, metric sets, metric families, descriptors, and various metric types. It includes definitions for samples, labels, numbers, timestamps, and character sets.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_3\n\nLANGUAGE: abnf\nCODE:\n```\n\"exposition = metricset HASH SP eof [ LF ]\\n\\nmetricset = *metricfamily\\n\\nmetricfamily = *metric-descriptor *metric\\n\\nmetric-descriptor = HASH SP type SP metricname SP metric-type LF\\nmetric-descriptor =/ HASH SP help SP metricname SP escaped-string LF\\nmetric-descriptor =/ HASH SP unit SP metricname SP *metricname-char LF\\n\\nmetric = *sample\\n\\nmetric-type = counter / gauge / histogram / gaugehistogram / stateset\\nmetric-type =/ info / summary / unknown\\n\\nsample = metricname [labels] SP number [SP timestamp] [exemplar] LF\\n\\nexemplar = SP HASH SP labels SP number [SP timestamp]\\n\\nlabels = \\\"{\\\" [label *(COMMA label)] \\\"}\\\"\\n\\nlabel = label-name EQ DQUOTE escaped-string DQUOTE\\n\\nnumber = realnumber\\n; Case insensitive\\nnumber =/ [SIGN] (\\\"inf\\\" / \\\"infinity\\\")\\nnumber =/ \\\"nan\\\"\\n\\ntimestamp = realnumber\\n\\n; Not 100% sure this captures all float corner cases.\\n; Leading 0s explicitly okay\\nrealnumber = [SIGN] 1*DIGIT\\nrealnumber =/ [SIGN] 1*DIGIT [\\\".\\\" *DIGIT] [ \\\"e\\\" [SIGN] 1*DIGIT ]\\nrealnumber =/ [SIGN] *DIGIT \\\".\\\" 1*DIGIT [ \\\"e\\\" [SIGN] 1*DIGIT ]\\n\\n\\n; RFC 5234 is case insensitive.\\n; Uppercase\\neof = %d69.79.80\\ntype = %d84.89.80.69\\nhelp = %d72.69.76.80\\nunit = %d85.78.73.84\\n; Lowercase\\ncounter = %d99.111.117.110.116.101.114\\ngauge = %d103.97.117.103.101\\nhistogram = %d104.105.115.116.111.103.114.97.109\\ngaugehistogram = gauge histogram\\nstateset = %d115.116.97.116.101.115.101.116\\ninfo = %d105.110.102.111\\nsummary = %d115.117.109.109.97.114.121\\nunknown = %d117.110.107.110.111.119.110\\n\\nBS = \\\"\\\\\\\"\\nEQ = \\\"=\\\"\\nCOMMA = \\\",\\\"\\nHASH = \\\"#\\\"\\nSIGN = \\\"-\\\" / \\\"+\\\"\\n\\nmetricname = metricname-initial-char 0*metricname-char\\n\\nmetricname-char = metricname-initial-char / DIGIT\\nmetricname-initial-char = ALPHA / \\\"_\\\" / \\\":\\\"\\n\\nlabel-name = label-name-initial-char *label-name-char\\n\\nlabel-name-char = label-name-initial-char / DIGIT\\nlabel-name-initial-char = ALPHA / \\\"_\\\"\\n\\nescaped-string = *escaped-char\\n\\nescaped-char = normal-char\\nescaped-char =/ BS (\\\"n\\\" / DQUOTE / BS)\\nescaped-char =/ BS normal-char\\n\\n; Any unicode character, except newline, double quote, and backslash\\nnormal-char = %x00-09 / %x0B-21 / %x23-5B / %x5D-D7FF / %xE000-10FFFF\"\n```\n\n----------------------------------------\n\nTITLE: Text Representation of a Prometheus Float Histogram\nDESCRIPTION: Example showing the string representation of a native float histogram as rendered by the FloatHistogram.String method in Go. The format uses mathematical interval notation to represent bucket boundaries, and includes count, sum, and individual bucket values.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n{count:3493.3, sum:2.349209324e+06, [-22.62741699796952,-16):1000, [-16,-11.31370849898476):123400, [-4,-2.82842712474619):3, [-2.82842712474619,-2):3.1, [-0.01,0.01]:5.5, (0.35355339059327373,0.5]:1, (1,1.414213562373095]:3.3, (1.414213562373095,2]:4.2, (2,2.82842712474619]:0.1}\n```\n\n----------------------------------------\n\nTITLE: Filtering Node Exporter Metrics by Prefix\nDESCRIPTION: Command to filter the output of Node Exporter metrics to only show those prefixed with 'node_', which represents system-specific metrics.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/node-exporter.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:9100/metrics | grep \"node_\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager with Webhook Receiver\nDESCRIPTION: Sets up Alertmanager configuration with a webhook receiver for sending alerts when metrics exceed defined thresholds\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/alerting_based_on_metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  resolve_timeout: 5m\nroute:\n  receiver: webhook_receiver\nreceivers:\n    - name: webhook_receiver\n      webhook_configs:\n        - url: '<INSERT-YOUR-WEBHOOK>'\n          send_resolved: false\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Blackbox Exporter (macOS/Windows)\nDESCRIPTION: This Prometheus configuration sets up a scrape job for the blackbox exporter itself, tailored for macOS and Windows environments. It uses host.docker.internal:9115 as the target due to Docker networking differences.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nglobal:\n  scrape_interval: 5s\n\nscrape_configs:\n- job_name: blackbox # To get metrics about the exporter itself\n  metrics_path: /metrics\n  static_configs:\n    - targets:\n      - host.docker.internal:9115\n```\n```\n\n----------------------------------------\n\nTITLE: Example Prometheus Console Template\nDESCRIPTION: This example demonstrates a basic Prometheus console template using Go templating. It includes a right-hand-side table to display metrics and a main content area with a graph of queries per second.  It uses the `prom_query_drilldown` template function to link to the expression browser.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/visualization/consoles.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\n{{template \"head\" .}}\n\n{{template \"prom_right_table_head\"}}\n<tr>\n  <th>MyJob</th>\n  <th>{{ template \"prom_query_drilldown\" (args \"sum(up{job='myjob'})\") }}\n      / {{ template \"prom_query_drilldown\" (args \"count(up{job='myjob'})\") }}\n  </th>\n</tr>\n<tr>\n  <td>CPU</td>\n  <td>{{ template \"prom_query_drilldown\" (args\n      \"avg by(job)(rate(process_cpu_seconds_total{job='myjob'}[5m]))\"\n      \"s/s\" \"humanizeNoSmallPrefix\") }}\n  </td>\n</tr>\n<tr>\n  <td>Memory</td>\n  <td>{{ template \"prom_query_drilldown\" (args\n       \"avg by(job)(process_resident_memory_bytes{job='myjob'})\"\n       \"B\" \"humanize1024\") }}\n  </td>\n</tr>\n{{template \"prom_right_table_tail\"}}\n\n\n{{template \"prom_content_head\" .}}\n<h1>MyJob</h1>\n\n<h3>Queries</h3>\n<div id=\"queryGraph\"></div>\n<script>\nnew PromConsole.Graph({\n  node: document.querySelector(\"#queryGraph\"),\n  expr: \"sum(rate(http_query_count{job='myjob'}[5m]))\",\n  name: \"Queries\",\n  yAxisFormatter: PromConsole.NumberFormatter.humanizeNoSmallPrefix,\n  yHoverFormatter: PromConsole.NumberFormatter.humanizeNoSmallPrefix,\n  yUnits: \"/s\",\n  yTitle: \"Queries\"\n})\n</script>\n\n{{template \"prom_content_tail\" .}}\n\n{{template \"tail\"}}\n\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Configuration for Multiple Scrape Targets\nDESCRIPTION: Extended JSON configuration to include multiple Node Exporter instances as scrape targets for Prometheus.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/file-sd.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"targets\": [\n      \"localhost:9100\"\n    ],\n    \"labels\": {\n      \"job\": \"node\"\n    }\n  },\n  {\n    \"targets\": [\n      \"localhost:9200\"\n    ],\n    \"labels\": {\n      \"job\": \"node\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus to Monitor JSON Files\nDESCRIPTION: This YAML snippet configures Prometheus to monitor JSON files in a specified directory for target groups. It specifies a job name and the file patterns that Prometheus should watch for updates.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-01-advanced-service-discovery.md#2025-04-21_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n- job_name: 'overwritten-default'\n\n  file_sd_configs:\n  - names: ['tgroups/*.json']\n```\n\n----------------------------------------\n\nTITLE: Customizing Slack Notification Text with Runbook Links in YAML\nDESCRIPTION: This configuration adds a custom text field to the Slack notification, including a link to a runbook based on the alert name and app. It uses Go templating to access GroupLabels.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-03-03-custom-alertmanager-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  slack_api_url: '<slack_webhook_url>'\n\nroute:\n- receiver: 'slack-notifications'\n  group_by: [alertname, datacenter, app]\n\nreceivers:\n- name: 'slack-notifications'\n  slack_configs:\n  - channel: '#alerts'\n    # Template for the text field in Slack messages.\n    text: 'https://internal.myorg.net/wiki/alerts/{{ .GroupLabels.app }}/{{ .GroupLabels.alertname }}'\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Service Identification\nDESCRIPTION: Environment variables for setting service name and instance ID for OpenTelemetry metrics.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/opentelemetry.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_SERVICE_NAME=\"my-example-service\"\nexport OTEL_RESOURCE_ATTRIBUTES=\"service.instance.id=$(uuidgen)\"\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Connection to Prometheus API with cURL\nDESCRIPTION: This bash snippet shows how to use cURL to test the TLS connection to the Prometheus API. It specifies the path to the certificate file and makes a request to the label values endpoint.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/tls-encryption.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --cacert /home/prometheus/certs/example.com/example.com.crt \\\n  https://example.com/api/v1/label/job/values\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrotate for Prometheus Query Log\nDESCRIPTION: This configuration snippet for logrotate shows how to set up automatic rotation of the Prometheus query log file. It rotates the log daily, keeps a week of history, and signals Prometheus to reopen the log file.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/query-log.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/prometheus/query.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    postrotate\n        killall -HUP prometheus\n    endscript\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Subquery Example in PromQL\nDESCRIPTION: A subquery example that calculates the minimum 5-minute rate of http_requests_total over the past 30 minutes, with a 1-minute resolution.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2019-01-28-subquery-support.md#2025-04-21_snippet_1\n\nLANGUAGE: PromQL\nCODE:\n```\nmin_over_time( rate(http_requests_total[5m])[30m:1m] )\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Slack Notification Template in a Separate File\nDESCRIPTION: This snippet shows how to define a custom template in a separate file for Slack notifications. It creates a template named 'slack.myorg.text' that generates a runbook link.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-03-03-custom-alertmanager-templates.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{ define \"slack.myorg.text\" }}https://internal.myorg.net/wiki/alerts/{{ .GroupLabels.app }}/{{ .GroupLabels.alertname }}{{ end}}\n```\n\n----------------------------------------\n\nTITLE: Prometheus 2.0 Alpha Configuration with Simplified Storage\nDESCRIPTION: Example of a simplified Prometheus 2.0 configuration, removing most storage-related flags while retaining retention setting\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2017-04-10-promehteus-20-sneak-peak.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus -storage.local.retention=200h -config.file=/etc/prometheus.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying cAdvisor as a Docker Swarm Service\nDESCRIPTION: Shell command to create a global cAdvisor service in Docker Swarm. This service exposes container resource metrics and is labeled for Prometheus discovery.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/dockerswarm.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker service create --name cadvisor -l prometheus-job=cadvisor \\\n    --mode=global --publish target=8080,mode=host \\\n    --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock,ro \\\n    --mount type=bind,src=/,dst=/rootfs,ro \\\n    --mount type=bind,src=/var/run,dst=/var/run \\\n    --mount type=bind,src=/sys,dst=/sys,ro \\\n    --mount type=bind,src=/var/lib/docker,dst=/var/lib/docker,ro \\\n    google/cadvisor -docker_only\n```\n\n----------------------------------------\n\nTITLE: Implementing Prometheus Service Discovery Adapter in Go\nDESCRIPTION: Core adapter structure and run function for implementing custom service discovery. Handles conversion of target groups to JSON format compatible with Prometheus file_sd.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2018-07-05-implementing-custom-sd.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Adapter struct {\n    ctx     context.Context\n    disc    discovery.Discoverer\n    groups  map[string]*customSD\n    manager *discovery.Manager\n    output  string\n    name    string\n    logger  log.Logger\n}\n\nfunc (a *Adapter) Run() {\n    go a.manager.Run()\n    a.manager.StartCustomProvider(a.ctx, a.name, a.disc)\n    go a.runCustomSD(a.ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Time Series Examples\nDESCRIPTION: Shows the format of automatically generated time series metrics for monitoring instance health, scrape duration, and sample counts. Includes standard and feature-flag enabled metrics.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/concepts/jobs_instances.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nup{job=\"<job-name>\", instance=\"<instance-id>\"}: 1\nscrape_duration_seconds{job=\"<job-name>\", instance=\"<instance-id>\"}\nscrape_samples_post_metric_relabeling{job=\"<job-name>\", instance=\"<instance-id>\"}\nscrape_samples_scraped{job=\"<job-name>\", instance=\"<instance-id>\"}\nscrape_series_added{job=\"<job-name>\", instance=\"<instance-id>\"}\n```\n\n----------------------------------------\n\nTITLE: Example OpenMetrics Exposition\nDESCRIPTION: This example showcases a complete OpenMetrics exposition including TYPE, UNIT, HELP metadata, and sample metric data for summaries, gauges, and counters. It demonstrates the structure and formatting of metric families and metric points.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_5\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE acme_http_router_request_seconds summary\n# UNIT acme_http_router_request_seconds seconds\n# HELP acme_http_router_request_seconds Latency though all of ACME's HTTP request router.\nacme_http_router_request_seconds_sum{path=\\\"/api/v1\\\",method=\\\"GET\\\"} 9036.32\nacme_http_router_request_seconds_count{path=\\\"/api/v1\\\",method=\\\"GET\\\"} 807283.0\nacme_http_router_request_seconds_created{path=\\\"/api/v1\\\",method=\\\"GET\\\"} 1605281325.0\nacme_http_router_request_seconds_sum{path=\\\"/api/v2\\\",method=\\\"POST\\\"} 479.3\nacme_http_router_request_seconds_count{path=\\\"/api/v2\\\",method=\\\"POST\\\"} 34.0\nacme_http_router_request_seconds_created{path=\\\"/api/v2\\\",method=\\\"POST\\\"} 1605281325.0\n# TYPE go_goroutines gauge\n# HELP go_goroutines Number of goroutines that currently exist.\ngo_goroutines 69\n# TYPE process_cpu_seconds counter\n# UNIT process_cpu_seconds seconds\n# HELP process_cpu_seconds Total user and system CPU time spent in seconds.\nprocess_cpu_seconds_total 4.20072246e+06\n# EOF\"\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Write Protocol RPC Schema in Protobuf\nDESCRIPTION: Defines the structured message types for sending time series data, including WriteRequest, TimeSeries, Label, and Sample message types with their respective fields and constraints\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec.md#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nfunc Send(WriteRequest)\n\nmessage WriteRequest {\n  repeated TimeSeries timeseries = 1;\n  reserved  2;\n  reserved  3;\n}\n\nmessage TimeSeries {\n  repeated Label labels   = 1;\n  repeated Sample samples = 2;\n}\n\nmessage Label {\n  string name  = 1;\n  string value = 2;\n}\n\nmessage Sample {\n  double value    = 1;\n  int64 timestamp = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Native Histogram Quantiles in Prometheus\nDESCRIPTION: Equivalent query for native histograms to calculate the 90th percentile using rate and aggregation\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_9\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.9, sum by (job) (rate(http_request_duration_seconds[10m])))\n```\n\n----------------------------------------\n\nTITLE: Initial Blackbox Exporter Configuration (YAML)\nDESCRIPTION: This YAML snippet shows the initial structure of the `blackbox.yml` configuration file. It defines two modules, `http_2xx` and `http_post_2xx`, both using the `http` prober, with `http_post_2xx` specifically setting the HTTP method to `POST`.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"modules:\\n  http_2xx:\\n    prober: http\\n  http_post_2xx:\\n    prober: http\\n    http:\\n      method: POST\"\n```\n\n----------------------------------------\n\nTITLE: Using Histogram Metrics in Prometheus - Markdown\nDESCRIPTION: This snippet provides an example of querying a histogram metric for HTTP request duration in Prometheus.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/understanding_metric_types.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<code>prometheus\\_http\\_request\\_duration\\_seconds\\_bucket{handler=\"/graph\"}</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>histogram\\_quantile(0.9,prometheus\\_http\\_request\\_duration\\_seconds\\_bucket{handler=\"/graph\"})</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>histogram\\_quantile(0.9, rate(prometheus\\_http\\_request\\_duration\\_seconds\\_bucket{handler=\"/graph\"}[5m]))</code>\n```\n\n----------------------------------------\n\nTITLE: Histogram Metric with Various Buckets\nDESCRIPTION: Illustrates a 'histogram' metric with wide variety of bucket 'le' values and associated metrics such as count and sum. The data is organized with increasing order of 'le'.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo histogram\nfoo_bucket{le=\"0.0\"} 0\nfoo_bucket{le=\"1e-05\"} 0\nfoo_bucket{le=\"0.0001\"} 5\nfoo_bucket{le=\"0.1\"} 8\nfoo_bucket{le=\"1.0\"} 10\nfoo_bucket{le=\"10.0\"} 11\nfoo_bucket{le=\"100000.0\"} 11\nfoo_bucket{le=\"1e+06\"} 15\nfoo_bucket{le=\"1e+23\"} 16\nfoo_bucket{le=\"1.1e+23\"} 17\nfoo_bucket{le=\"+Inf\"} 17\nfoo_count 17\nfoo_sum 324789.3\nfoo_created 1520430000.123\n\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffers for Streaming Responses\nDESCRIPTION: Defines a Protobuf message structure for chunked streaming responses, optimizing how Prometheus sends time series data. The `ChunkedReadResponse` and `ChunkedSeries` messages allow Prometheus to stream data by series, reducing memory usage and handling more efficient data transmission.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2019-10-10-remote-read-meets-streaming.md#2025-04-21_snippet_3\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\n// ChunkedReadResponse is a response when response_type equals STREAMED_XOR_CHUNKS.\n// We strictly stream full series after series, optionally split by time. This means that a single frame can contain\n// partition of the single series, but once a new series is started to be streamed it means that no more chunks will\n// be sent for previous one.\nmessage ChunkedReadResponse {\n  repeated prometheus.ChunkedSeries chunked_series = 1;\n}\n\n// ChunkedSeries represents single, encoded time series.\nmessage ChunkedSeries {\n  // Labels should be sorted.\n  repeated Label labels = 1 [(gogoproto.nullable) = false];\n  // Chunks will be in start time order and may overlap.\n  repeated Chunk chunks = 2 [(gogoproto.nullable) = false];\n}\n```\n\n----------------------------------------\n\nTITLE: Probing External Target with Blackbox Exporter\nDESCRIPTION: Command to probe prometheus.io website using the blackbox exporter's http_2xx module\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:9115/probe?target=prometheus.io&module=http_2xx'\n```\n\n----------------------------------------\n\nTITLE: Modified Blackbox Exporter Configuration (YAML)\nDESCRIPTION: This YAML snippet demonstrates a modified `blackbox.yml` configuration file.  It sets the `preferred_ip_protocol` to `ip4` for the `http_2xx` module's `http` prober, forcing IPv4 resolution. The other module, `http_post_2xx`, remains unchanged.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"modules:\\n  http_2xx:\\n    prober: http\\n    http:\\n      preferred_ip_protocol: \\\"ip4\\\"\\n  http_post_2xx:\\n    prober: http\\n    http:\\n      method: POST\"\n```\n\n----------------------------------------\n\nTITLE: Example Histogram Metric Series Format\nDESCRIPTION: Demonstrates the time series format exposed by a histogram metric during scraping. Shows the bucket format, sum, and count series naming conventions.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/concepts/metric_types.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<basename>_bucket{le=\"<upper inclusive bound>\"}\n<basename>_sum\n<basename>_count\n```\n\n----------------------------------------\n\nTITLE: Exposing Queue Capacity and Length in Prometheus Format\nDESCRIPTION: Example showing how to expose thresholds alongside current measurements in Prometheus metrics. This demonstrates best practices for exposing capacity limits together with current usage values for better monitoring context.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_43\n\nLANGUAGE: prometheus\nCODE:\n```\n# HELP acme_notifications_queue_capacity The capacity of the notifications queue.\n# TYPE acme_notifications_queue_capacity gauge\nacme_notifications_queue_capacity 10000\n# HELP acme_notifications_queue_length The number of notifications in the queue.\n# TYPE acme_notifications_queue_length gauge\nacme_notifications_queue_length 42\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Alert for DHCP Scope Near Capacity\nDESCRIPTION: This snippet defines a Prometheus alert rule to detect when a DHCP scope is nearing full capacity. It calculates the percentage of used leases and triggers an alert when it exceeds 90% for 2 minutes.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-24-monitoring-dreamhack.md#2025-04-21_snippet_3\n\nLANGUAGE: promql\nCODE:\n```\nALERT DhcpScopeAlmostFull\n  IF ceil((dhcp_leases_current_count / dhcp_leases_max_count)*100) > 90 FOR 2m\n  SUMMARY \"DHCP scope {{$labels.network}} is almost full\"\n  DESCRIPTION \"DHCP scope {{$labels.network}} is {{$value}}% full\"\n```\n\n----------------------------------------\n\nTITLE: Running Blackbox Exporter in Docker\nDESCRIPTION: Command to start the Prometheus blackbox exporter container with port 9115 exposed\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9115:9115 prom/blackbox-exporter\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in Prometheus (Markdown Link)\nDESCRIPTION: A link to the documentation for configuring TLS encryption in Prometheus.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/operating/security.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`here`](https://prometheus.io/docs/guides/tls-encryption/)\n```\n\n----------------------------------------\n\nTITLE: Histogram with Exemplars\nDESCRIPTION: This snippet includes examples of histogram metrics with exemplars for various buckets. Each exemplar illustrates different styles and combinations of labels and timestamps.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_34\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo histogram\nfoo_bucket{le=\"0.01\"} 0\nfoo_bucket{le=\"0.1\"} 8 # {} 0.054\nfoo_bucket{le=\"1\"} 11 # {trace_id=\"KOO5S4vxi0o\"} 0.67\nfoo_bucket{le=\"10\"} 17 # {trace_id=\"oHg5SJYRHA0\"} 9.8 1520879607.789\nfoo_bucket{le=\"+Inf\"} 17\nfoo_count 17\nfoo_sum 324789.3\nfoo_created  1520430000.123\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Translation Strategy\nDESCRIPTION: YAML configuration for setting the OTLP translation strategy to preserve UTF-8 characters in metric and label names.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/utf8.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\notlp:\n  # Ingest OTLP data keeping UTF-8 characters in metric/label names.\n  translation_strategy: NoUTF8EscapingWithSuffixes\n```\n\n----------------------------------------\n\nTITLE: Example Summary Metric Series Format\nDESCRIPTION: Shows the time series format exposed by a summary metric during scraping. Includes quantile format, sum, and count series naming conventions.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/concepts/metric_types.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<basename>{quantile=\"<φ>\"}\n<basename>_sum\n<basename>_count\n```\n\n----------------------------------------\n\nTITLE: Querying Blackbox Exporter Metrics\nDESCRIPTION: Command to fetch internal metrics from the blackbox exporter using curl\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:9115/metrics'\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager to Use External Template File for Slack Notifications\nDESCRIPTION: This configuration loads an external template file and uses a named template for the Slack notification text. It demonstrates how to reference the template and specify the file path.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-03-03-custom-alertmanager-templates.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  slack_api_url: '<slack_webhook_url>'\n\nroute:\n- receiver: 'slack-notifications'\n  group_by: [alertname, datacenter, app]\n\nreceivers:\n- name: 'slack-notifications'\n  slack_configs:\n  - channel: '#alerts'\n    text: '{{ template \"slack.myorg.text\" . }}'\n\ntemplates:\n- '/etc/alertmanager/templates/myorg.tmpl'\n```\n\n----------------------------------------\n\nTITLE: Example MetricFamily with a counter type and Unit metadata\nDESCRIPTION: This is an example of a valid MetricFamily with a counter type and unit metadata.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_9\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo_seconds counter\"\n```\n\n----------------------------------------\n\nTITLE: Setting Written Response Headers\nDESCRIPTION: This snippet shows the response headers that Receivers must send upon successful content negotiation. The `X-Prometheus-Remote-Write-*-Written` headers provide the precise number of successfully written elements (Samples, Histograms, and Exemplars). Missing headers should be interpreted as a count of `0` for the corresponding category.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\n\"X-Prometheus-Remote-Write-Samples-Written <count of all successfully written Samples>\"\n\n```\n\nLANGUAGE: HTTP\nCODE:\n```\n\"X-Prometheus-Remote-Write-Histograms-Written <count of all successfully written Histogram samples>\"\n\n```\n\nLANGUAGE: HTTP\nCODE:\n```\n\"X-Prometheus-Remote-Write-Exemplars-Written <count of all successfully written Exemplars>\"\n```\n\n----------------------------------------\n\nTITLE: Storing HTTP Request Metrics in Prometheus\nDESCRIPTION: Example of how the same HTTP request metrics would be encoded in Prometheus, showing individual values for each API server instance with labels for dimensions.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/introduction/comparison.md#2025-04-21_snippet_1\n\nLANGUAGE: prometheus\nCODE:\n```\napi_server_http_requests_total{method=\"POST\",handler=\"/tracks\",status=\"500\",instance=\"<sample1>\"} -> 34\napi_server_http_requests_total{method=\"POST\",handler=\"/tracks\",status=\"500\",instance=\"<sample2>\"} -> 28\napi_server_http_requests_total{method=\"POST\",handler=\"/tracks\",status=\"500\",instance=\"<sample3>\"} -> 31\n```\n\n----------------------------------------\n\nTITLE: Testing Insecure TLS Connection to Prometheus API with cURL\nDESCRIPTION: This bash command demonstrates how to use cURL to test the TLS connection to the Prometheus API without certificate verification. It uses the --insecure flag to skip certificate validation.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/tls-encryption.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -k https://example.com/api/v1/label/job/values\n```\n\n----------------------------------------\n\nTITLE: Generating bcrypt Password Hash in Python\nDESCRIPTION: A Python script that prompts for a password and generates a bcrypt hash suitable for use in Prometheus basic authentication configuration.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/basic-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport getpass\nimport bcrypt\n\npassword = getpass.getpass(\"password: \")\nhashed_password = bcrypt.hashpw(password.encode(\"utf-8\"), bcrypt.gensalt())\nprint(hashed_password.decode())\n```\n\n----------------------------------------\n\nTITLE: Counter MetricFamily example\nDESCRIPTION: This example demonstrates a MetricFamily of type counter with no labels, and a MetricPoint with no timestamp and no created. The MetricPoint's Total Value Sample MetricName MUST have the suffix `_total`.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_22\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo counter\nfoo_total 17.0\"\n```\n\n----------------------------------------\n\nTITLE: Using Counter Metrics in Prometheus - Markdown\nDESCRIPTION: This snippet illustrates how to query a counter metric in Prometheus which tracks the garbage collection duration count.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/tutorials/understanding_metric_types.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code>go\\_gc\\_duration\\_seconds\\_count</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code> rate(go\\_gc\\_duration\\_seconds\\_count[5m])</code>\n```\n\n----------------------------------------\n\nTITLE: Defining the Request Message in Protobuf\nDESCRIPTION: This code defines the `Request` message in Protobuf, which represents a request to write timeseries data to a remote destination. It includes a `symbols` field for string interning and a `timeseries` field containing the actual time series data. The `reserved` field is included for deterministic interop with the older prometheus.WriteRequest.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// Request represents a request to write the given timeseries to a remote destination.\nmessage Request {\n  // Since Request supersedes 1.0 spec's prometheus.WriteRequest, we reserve the top-down message\n  // for the deterministic interop between those two.\n  // Generally it's not needed, because Receivers must use the Content-Type header, but we want to\n  // be sympathetic to adopters with mistaken implementations and have deterministic error (empty\n  // message if you use the wrong proto schema).\n  reserved 1 to 3;\n\n  // symbols contains a de-duplicated array of string elements used for various\n  // items in a Request message, like labels and metadata items. For the sender's convenience\n  // around empty values for optional fields like unit_ref, symbols array MUST start with\n  // empty string.\n  //\n  // To decode each of the symbolized strings, referenced, by \"ref(s)\" suffix, you\n  // need to lookup the actual string by index from symbols array. The order of\n  // strings is up to the sender. The receiver should not assume any particular encoding.\n  repeated string symbols = 4;\n  // timeseries represents an array of distinct series with 0 or more samples.\n  repeated TimeSeries timeseries = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Counter with Java Simpleclient\nDESCRIPTION: This snippet demonstrates how to register a Counter metric using Java Simpleclient's builder approach. The Counter is set with a name and help description. By default, it registers to the default CollectorRegistry unless specified otherwise. This can be beneficial for testing and batch jobs where explicit metric registration is required.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/writing_clientlibs.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass YourClass {\n  static final Counter requests = Counter.build()\n      .name(\"requests_total\")\n      .help(\"Requests.\").register();\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Auth with cURL (Unauthorized Access)\nDESCRIPTION: cURL command to test the Prometheus endpoint without authentication, which should return a 401 Unauthorized response.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/basic-auth.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --head http://localhost:9090/graph\n```\n\n----------------------------------------\n\nTITLE: Metric with Timestamped Total Sample\nDESCRIPTION: This example displays a 'counter' metric with an additional timestamp for the total count. It requires only the metric name and timestamps, and there's no need for labels.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo counter\nfoo_total 17.0 1520879607.789\nfoo_created 1520430000.123 1520879607.789\n\n```\n\n----------------------------------------\n\nTITLE: Info Metric with Entity Label\nDESCRIPTION: Shows an 'info' type metric with an entity label and additional name and version labels. All values remain fixed at 1.0, reflecting constant informational states.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo info\nfoo_info{entity=\"controller\",name=\"pretty name\",version=\"8.2.7\"} 1.0\nfoo_info{entity=\"replica\",name=\"prettier name\",version=\"8.1.9\"} 1.0\n\n```\n\n----------------------------------------\n\nTITLE: Remote Write Data Flow Diagram\nDESCRIPTION: This diagram illustrates the flow of data from the Write-Ahead Log (WAL) to remote endpoints through sharded queues. Understanding this flow helps in tuning parameters for efficient data transfer and resource management.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/practices/remote_write.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n      |-->  queue (shard_1)   --> remote endpoint\nWAL --|-->  queue (shard_...) --> remote endpoint\n      |-->  queue (shard_n)   --> remote endpoint\n\n```\n\n----------------------------------------\n\nTITLE: Refreshing Target Groups from MySQL using Python\nDESCRIPTION: This Python script reads instances from a MySQL database every 30 seconds and writes the information as JSON target groups to a file. It uses the MySQLdb library for database connection and processes data in atomic operations for safe updates.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-01-advanced-service-discovery.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport os, time, json\n\nfrom itertools import groupby\nfrom MySQLdb import connect\n\n\ndef refresh(cur):\n    # Fetch all rows.\n    cur.execute(\"SELECT address, job, zone FROM instances\")\n\n    tgs = []\n    # Group all instances by their job and zone values.\n    for key, vals in groupby(cur.fetchall(), key=lambda r: (r[1], r[2])):\n        tgs.append({\n            'labels': dict(zip(['job', 'zone'], key)),\n            'targets': [t[0] for t in vals],\n        })\n\n    # Persist the target groups to disk as JSON file.\n    with open('tgroups/target_groups.json.new', 'w') as f:\n        json.dump(tgs, f)\n        f.flush()\n        os.fsync(f.fileno())\n\n    os.rename('tgroups/target_groups.json.new', 'tgroups/target_groups.json')\n\n\nif __name__ == '__main__':\n    while True:\n        with connect('localhost', 'root', '', 'test') as cur:\n            refresh(cur)\n        time.sleep(30)\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Compose Container Status\nDESCRIPTION: This command lists the status of all containers defined in the Docker Compose setup.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/cadvisor.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose ps\n```\n\n----------------------------------------\n\nTITLE: Summary Metric with Sum, Count, and Created Values\nDESCRIPTION: Defines a 'summary' type metric with count, sum, and created values. Useful for summarizing metric samples, this snippet shows a basic configuration without labels.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo summary\nfoo_count 17.0\nfoo_sum 324789.3\nfoo_created 1520430000.123\n\n```\n\n----------------------------------------\n\nTITLE: Native Histogram Chunk Encodings in Go\nDESCRIPTION: Definition of new chunk encoding types for integer and float histograms in Prometheus TSDB, with numerical identifiers for different histogram representations\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nchunkenc.EncHistogram // Numerical value 2, integer histograms\nchunkenc.EncFloatHistogram // Numerical value 3, float histograms\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Prometheus and Consul\nDESCRIPTION: Docker Compose configuration for setting up Prometheus and Consul containers for testing custom service discovery implementation.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2018-07-05-implementing-custom-sd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  consul:\n    image: consul:latest\n    container_name: consul\n    ports:\n    - 8300:8300\n    - 8500:8500\n    volumes:\n    - ${PWD}/consul.json:/consul/config/consul.json\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: prometheus\n    volumes:\n    - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    ports:\n    - 9090:9090\n```\n\n----------------------------------------\n\nTITLE: Example Prometheus metrics\nDESCRIPTION: This text shows example Prometheus metrics returned by probing `prometheus.io` using the `http_2xx` module with the configured Blackbox Exporter.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_8\n\nLANGUAGE: N/A\nCODE:\n```\n\n\"# HELP probe_dns_lookup_time_seconds Returns the time taken for probe dns lookup in seconds\n# TYPE probe_dns_lookup_time_seconds gauge\nprobe_dns_lookup_time_seconds 0.02679421\n# HELP probe_duration_seconds Returns how long the probe took to complete in seconds\n# TYPE probe_duration_seconds gauge\nprobe_duration_seconds 0.461619124\n# HELP probe_failed_due_to_regex Indicates if probe failed due to regex\n# TYPE probe_failed_due_to_regex gauge\nprobe_failed_due_to_regex 0\n# HELP probe_http_content_length Length of http content response\n# TYPE probe_http_content_length gauge\nprobe_http_content_length -1\n# HELP probe_http_duration_seconds Duration of http request by phase, summed over all redirects\n# TYPE probe_http_duration_seconds gauge\nprobe_http_duration_seconds{phase=\\\"connect\\\"} 0.062076202999999996\nprobe_http_duration_seconds{phase=\\\"processing\\\"} 0.23481845699999998\nprobe_http_duration_seconds{phase=\\\"resolve\\\"} 0.029594103\nprobe_http_duration_seconds{phase=\\\"tls\\\"} 0.163420078\nprobe_http_duration_seconds{phase=\\\"transfer\\\"} 0.002243199\n# HELP probe_http_redirects The number of redirects\n# TYPE probe_http_redirects gauge\nprobe_http_redirects 1\n# HELP probe_http_ssl Indicates if SSL was used for the final redirect\n# TYPE probe_http_ssl gauge\nprobe_http_ssl 1\n# HELP probe_http_status_code Response HTTP status code\n# TYPE probe_http_status_code gauge\nprobe_http_status_code 200\n# HELP probe_http_uncompressed_body_length Length of uncompressed response body\n# TYPE probe_http_uncompressed_body_length gauge\nprobe_http_uncompressed_body_length 14516\n# HELP probe_http_version Returns the version of HTTP of the probe response\n# TYPE probe_http_version gauge\nprobe_http_version 1.1\n# HELP probe_ip_protocol Specifies whether probe ip protocol is IP4 or IP6\n# TYPE probe_ip_protocol gauge\nprobe_ip_protocol 4\n# HELP probe_ssl_earliest_cert_expiry Returns earliest SSL cert expiry in unixtime\n# TYPE probe_ssl_earliest_cert_expiry gauge\nprobe_ssl_earliest_cert_expiry 1.581897599e+09\n# HELP probe_success Displays whether or not the probe was a success\n# TYPE probe_success gauge\nprobe_success 1\n# HELP probe_tls_version_info Contains the TLS version used\n# TYPE probe_tls_version_info gauge\nprobe_tls_version_info{version=\\\"TLS 1.3\\\"} 1\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Metrics Push Interval\nDESCRIPTION: Environment variable to configure the metrics export interval to 15 seconds.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/opentelemetry.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_METRIC_EXPORT_INTERVAL=15000\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration - Static Targets and Module\nDESCRIPTION: This snippet shows the `static_configs` and `params` sections of the Prometheus configuration. It defines the targets to be probed and the modules to be used by the blackbox exporter.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n  params:\n    module: [http_2xx]\n  static_configs:\n    - targets:\n      - http://prometheus.io    # Target to probe with http\n      - https://prometheus.io   # Target to probe with https\n      - http://example.com:8080 # Target to probe with http on port 8080\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Metrics Endpoint\nDESCRIPTION: Command to access the metrics endpoint using curl.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/go-application.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:2112/metrics\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram and Bucket in Protobuf\nDESCRIPTION: This protobuf snippet defines the structure of a Histogram, including fields for both native and classic histograms. Dependencies include the 'gogoproto' for nullable fields and 'google.protobuf.Timestamp' for timestamps, and it requires understanding of protobuf syntax and Prometheus data modeling. Keys parameters are sample_count and sample_sum for classic histograms, with additional fields like schema, zero_threshold, and zero_count for native histograms. The expected input aligns with various histogram counts and structures while the output is a serialized Histogram object. Notably, the format distinguishes between integer and float histograms and requires a no-op span for native histograms lacking observations.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n// [...]\n\nmessage Histogram {\n  uint64 sample_count       = 1;\n  double sample_count_float = 4; // Overrides sample_count if > 0.\n  double sample_sum         = 2;\n  // Buckets for the classic histogram.\n  repeated Bucket bucket = 3 [(gogoproto.nullable) = false]; // Ordered in increasing order of upper_bound, +Inf bucket is optional.\n\n  google.protobuf.Timestamp created_timestamp = 15;\n\n  // Everything below here is for native histograms (also known as sparse histograms).\n  // Native histograms are an experimental feature without stability guarantees.\n\n  // schema defines the bucket schema. Currently, valid numbers are -4 <= n <= 8.\n  // They are all for base-2 bucket schemas, where 1 is a bucket boundary in each case, and\n  // then each power of two is divided into 2^n logarithmic buckets.\n  // Or in other words, each bucket boundary is the previous boundary times 2^(2^-n).\n  // In the future, more bucket schemas may be added using numbers < -4 or > 8.\n  sint32 schema           = 5;\n  double zero_threshold   = 6; // Breadth of the zero bucket.\n  uint64 zero_count       = 7; // Count in zero bucket.\n  double zero_count_float = 8; // Overrides sb_zero_count if > 0.\n\n  // Negative buckets for the native histogram.\n  repeated BucketSpan negative_span = 9 [(gogoproto.nullable) = false];\n  // Use either \"negative_delta\" or \"negative_count\", the former for\n  // regular histograms with integer counts, the latter for float\n  // histograms.\n  repeated sint64 negative_delta = 10; // Count delta of each bucket compared to previous one (or to zero for 1st bucket).\n  repeated double negative_count = 11; // Absolute count of each bucket.\n\n  // Positive buckets for the native histogram.\n  // Use a no-op span (offset 0, length 0) for a native histogram without any\n  // observations yet and with a zero_threshold of 0. Otherwise, it would be\n  // indistinguishable from a classic histogram.\n  repeated BucketSpan positive_span = 12 [(gogoproto.nullable) = false];\n  // Use either \"positive_delta\" or \"positive_count\", the former for\n  // regular histograms with integer counts, the latter for float\n  // histograms.\n  repeated sint64 positive_delta = 13; // Count delta of each bucket compared to previous one (or to zero for 1st bucket).\n  repeated double positive_count = 14; // Absolute count of each bucket.\n\n  // Only used for native histograms. These exemplars MUST have a timestamp.\n  repeated Exemplar exemplars = 16;\n}\n\nmessage Bucket {\n  uint64   cumulative_count       = 1; // Cumulative in increasing order.\n  double   cumulative_count_float = 4; // Overrides cumulative_count if > 0.\n  double   upper_bound            = 2; // Inclusive.\n  Exemplar exemplar               = 3;\n}\n\n// A BucketSpan defines a number of consecutive buckets in a native\n// histogram with their offset. Logically, it would be more\n// straightforward to include the bucket counts in the Span. However,\n// the protobuf representation is more compact in the way the data is\n// structured here (with all the buckets in a single array separate\n// from the Spans).\nmessage BucketSpan {\n  sint32 offset = 1; // Gap to previous span, or starting point for 1st span (which can be negative).\n  uint32 length = 2; // Length of consecutive buckets.\n}\n\n\n// A BucketSpan defines a number of consecutive buckets in a native\n// histogram with their offset. Logically, it would be more\n// straightforward to include the bucket counts in the Span. However,\n// the protobuf representation is more compact in the way the data is\n// structured here (with all the buckets in a single array separate\n// from the Spans).\nmessage BucketSpan {\n  sint32 offset = 1; // Gap to previous span, or starting point for 1st span (which can be negative).\n  uint32 length = 2; // Length of consecutive buckets.\n}\n\n// [...]\n```\n\n----------------------------------------\n\nTITLE: Sample Prometheus Query Log JSON Output\nDESCRIPTION: This JSON snippet illustrates the format of a Prometheus query log entry. It includes query parameters, execution statistics, and timestamp information.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/query-log.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"params\": {\n        \"end\": \"2020-02-08T14:59:50.368Z\",\n        \"query\": \"up == 0\",\n        \"start\": \"2020-02-08T13:59:50.368Z\",\n        \"step\": 5\n    },\n    \"stats\": {\n        \"timings\": {\n            \"evalTotalTime\": 0.000447452,\n            \"execQueueTime\": 7.599e-06,\n            \"execTotalTime\": 0.000461232,\n            \"innerEvalTime\": 0.000427033,\n            \"queryPreparationTime\": 1.4177e-05,\n            \"resultSortTime\": 6.48e-07\n        }\n    },\n    \"ts\": \"2020-02-08T14:59:50.387Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting User-Agent Header\nDESCRIPTION: This snippet shows the mandatory User-Agent header format. Senders must include the User-Agent header, following RFC 9110, to identify themselves and their version. This header helps Receivers understand the source of the data.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\n\"User-Agent: <name & version of the Sender>\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration - Copy Target to Instance\nDESCRIPTION: This snippet shows a single relabeling rule where the value from the label `__param_target` is copied to the label `instance`.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n  relabel_configs:\n    - source_labels: [__param_target]\n      target_label: instance\n```\n```\n\n----------------------------------------\n\nTITLE: StateSet Metric Example\nDESCRIPTION: Illustrates a 'stateset' type metric, which assigns a state value to different labels. Each state is represented with a label value, set to 1 if true and 0 if false.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo stateset\nfoo{foo=\"a\"} 0\nfoo{foo=\"bb\"} 1\nfoo{foo=\"ccc\"} 0\n\n```\n\n----------------------------------------\n\nTITLE: Nested Subquery Example in PromQL\nDESCRIPTION: A complex nested subquery example that calculates the maximum derivative of rates over different time ranges.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2019-01-28-subquery-support.md#2025-04-21_snippet_2\n\nLANGUAGE: PromQL\nCODE:\n```\nmax_over_time( deriv( rate(distance_covered_meters_total[1m])[5m:1m] )[10m:] )\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Prometheus Guides Page\nDESCRIPTION: This YAML snippet defines the frontmatter for a documentation page about Prometheus guides. It sets the title to 'Guides', assigns a sort rank of 9, and specifies a 'map' icon for navigation.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Guides\nsort_rank: 9\nnav_icon: map\n---\n```\n\n----------------------------------------\n\nTITLE: Defining the Exemplar Message in Protobuf\nDESCRIPTION: This code defines the `Exemplar` message, which represents additional information attached to a series' samples. It includes fields for labels, a value, and a timestamp.  The labels field is a list of references to the `symbols` table in the `Request` message. The timestamp represents the timestamp of the exemplar in milliseconds.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// Exemplar represents additional information attached to some series' samples.\nmessage Exemplar {\n  // labels_refs is an optional list of label name-value pair references, encoded\n  // as indices to the Request.symbols array. This list's len is always\n  // a multiple of 2, and the underlying labels should be sorted lexicographically.\n  // If the exemplar references a trace it should use the `trace_id` label name, as a best practice.\n  repeated uint32 labels_refs = 1;\n  // value represents an exact example value. This can be useful when the exemplar\n  // is attached to a histogram, which only gives an estimated value through buckets.\n  double value = 2;\n  // timestamp represents the timestamp of the exemplar in ms.\n  // For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go\n  // for conversion from/to time.Time to Prometheus timestamp.\n  int64 timestamp = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Time Since Boot in Prometheus Format\nDESCRIPTION: Example of a Prometheus metric showing how to represent time since boot in seconds. This demonstrates the proper use of UNIT annotation with the appropriate unit type for time-based metrics.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_42\n\nLANGUAGE: prometheus\nCODE:\n```\n# UNIT my_time_since_boot_seconds seconds\nmy_time_since_boot_seconds 123\n```\n\n----------------------------------------\n\nTITLE: Gauge Metric Family example\nDESCRIPTION: This example shows an example of a MetricFamily of type Gauge with no labels and a MetricPoint with no timestamp.  The Sample MetricName MUST NOT have a suffix.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_16\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo gauge\nfoo 17.0\"\n```\n\n----------------------------------------\n\nTITLE: Counter MetricFamily with Created example\nDESCRIPTION: This example demonstrates a MetricFamily of type counter with no labels, and a MetricPoint with no timestamp and a created. If present, the MetricPoint's Created Value Sample MetricName MUST have the suffix `_created`.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_24\n\nLANGUAGE: None\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Correct MetricPoints example\nDESCRIPTION: This example showcases the correct way to format multiple MetricPoints and Samples within a MetricFamily. The count and sum are listed together for each label.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_13\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo_seconds summary\n# UNIT foo_seconds seconds\nfoo_seconds_count{a=\\\"bb\\\"} 0 123\nfoo_seconds_sum{a=\\\"bb\\\"} 0 123\nfoo_seconds_count{a=\\\"bb\\\"} 0 456\nfoo_seconds_sum{a=\\\"bb\\\"} 0 456\nfoo_seconds_count{a=\\\"ccc\\\"} 0 123\nfoo_seconds_sum{a=\\\"ccc\\\"} 0 123\nfoo_seconds_count{a=\\\"ccc\\\"} 0 456\nfoo_seconds_sum{a=\\\"ccc\\\"} 0 456\"\n```\n\n----------------------------------------\n\nTITLE: Custom SD Data Structure Definition in Go\nDESCRIPTION: Definition of the customSD struct used to represent target groups in JSON format for Prometheus file_sd compatibility.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2018-07-05-implementing-custom-sd.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype customSD struct {\n    Targets []string          `json:\"targets\"`\n    Labels  map[string]string `json:\"labels\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Write Version Header\nDESCRIPTION: This snippet shows the required header for specifying the Remote Write protocol version. Senders must set the `X-Prometheus-Remote-Write-Version` header to indicate the major and minor version of the remote write specification they are using. For compatibility with 1.x Receivers, Senders must use `0.1.0`.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\n\"X-Prometheus-Remote-Write-Version: <Remote-Write spec major and minor version>\"\n```\n\n----------------------------------------\n\nTITLE: Absolute Boot Time Metric Exposition\nDESCRIPTION: Recommended way of exposing absolute timestamp for system boot time\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_41\n\nLANGUAGE: text\nCODE:\n```\n# TYPE my_boot_time_seconds gauge\n# HELP my_boot_time_seconds Boot time of the machine\n# UNIT my_boot_time_seconds seconds\nmy_boot_time_seconds 1256060124\n```\n\n----------------------------------------\n\nTITLE: Representing a Metric without Labels\nDESCRIPTION: This snippet demonstrates a metric type 'counter' for a metric named 'foo', showing its total count and creation timestamp using Prometheus format. There's no requirement for additional labels, and the example illustrates basic metric data points.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo counter\nfoo_total 17.0\nfoo_created 1520430000.123\n\n```\n\n----------------------------------------\n\nTITLE: Label Naming Conventions\nDESCRIPTION: Strict guidelines for creating and using labels in metrics, including restrictions on naming and value handling\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nLabel names beginning with underscores are RESERVED\nEmpty label values SHOULD be treated as not present\nLabel names MUST be unique within a LabelSet\n```\n\n----------------------------------------\n\nTITLE: Example MetricFamily metadata\nDESCRIPTION: This code snippet shows how to define a metric family metadata with TYPE information. It demonstrates the basic syntax for defining the type of a metric.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_6\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo counter\"\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus with Docker on Linux\nDESCRIPTION: This Docker command runs a Prometheus container, mounting the prometheus.yml configuration file. The `--network=\"host\"` option is used for networking on Linux, allowing the container to access the host's network (not recommended for production).\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/multi-target-exporter.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ndocker \\\n  run --network=\"host\"\\\n  --mount type=bind,source=\"$(pwd)\"/prometheus.yml,target=/prometheus.yml,readonly \\\n  prom/prometheus \\\n  --config.file=\"/prometheus.yml\"\n```\n```\n\n----------------------------------------\n\nTITLE: Go Constants for Counter Reset Header\nDESCRIPTION: These Go constants of type `CounterResetHeader` in the `chunkenc` package represent the bit patterns used in the histogram flags to indicate the counter reset status of a chunk. The constants include `GaugeType`, `CounterReset`, `NotCounterReset`, and `UnknownCounterReset`, each representing a different state regarding counter resets.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n\"// The four possible bit patterns are represented as Go constants of type `CounterResetHeader` in the `chunkenc`\n// package. Their names and meanings are the following:\n\n// - `GaugeType` (bit pattern `11`): The chunk contains gauge histograms.\n//   Counter resets are irrelevant for gauge histograms.\n// - `CounterReset` (bit pattern `10`): A counter reset happened between the last\n//   histogram of the previous chunk and the 1st histogram of this chunk. (It is\n//   likely that the counter reset was actually the reason why the new chunk was\n//   cut.)\n// - `NotCounterReset` (bit pattern `01`): No counter reset happened between the\n//   last histogram of the previous chunk and the 1st histogram of this chunk.\n//   (This commonly happens if a new chunk is cut because the previous chunk hit\n//   the size limit.)\n// - `UnknownCounterReset` (bit pattern `00`): It is unknown if there was a\n//   counter reset between the last histogram of the previous chunk and the 1st\n//   histogram of this chunk.\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Sample Message in Protobuf\nDESCRIPTION: This code defines the `Sample` message, which represents a series sample. It includes fields for the value and timestamp of the sample. The timestamp is an int64 representing milliseconds since the Unix epoch, and the value is a double representing the sample value.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n// Sample represents series sample.\nmessage Sample {\n  // value of the sample.\n  double value = 1;\n  // timestamp represents timestamp of the sample in ms.\n  int64 timestamp = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Example MetricFamily with Unit metadata\nDESCRIPTION: This example showcases the proper way to include UNIT metadata. The unit must be included as a suffix in the MetricFamily name\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_7\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo_seconds counter\n# UNIT foo_seconds seconds\"\n```\n\n----------------------------------------\n\nTITLE: Gauge Metric Family with Labels example\nDESCRIPTION: This example shows an example of a MetricFamily of type Gauge with two metrics with a label and MetricPoints with no timestamp.  The Sample MetricName MUST NOT have a suffix.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_17\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo gauge\nfoo{a=\\\"bb\\\"} 17.0\nfoo{a=\\\"ccc\\\"} 17.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Metadata Message in Protobuf\nDESCRIPTION: This code defines the `Metadata` message, which represents metadata associated with a time series. It includes the metric type, help reference, and unit reference, all as references to the `symbols` table in the `Request` message. The MetricType enum defines the possible types of metrics.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\n// Metadata represents the metadata associated with the given series' samples.\nmessage Metadata {\n  enum MetricType {\n    METRIC_TYPE_UNSPECIFIED    = 0;\n    METRIC_TYPE_COUNTER        = 1;\n    METRIC_TYPE_GAUGE          = 2;\n    METRIC_TYPE_HISTOGRAM      = 3;\n    METRIC_TYPE_GAUGEHISTOGRAM = 4;\n    METRIC_TYPE_SUMMARY        = 5;\n    METRIC_TYPE_INFO           = 6;\n    METRIC_TYPE_STATESET       = 7;\n  }\n  MetricType type = 1;\n  // help_ref is a reference to the Request.symbols array representing help\n  // text for the metric. Help is optional, reference should point to an empty string in\n  // such a case.\n  uint32 help_ref = 3;\n  // unit_ref is a reference to the Request.symbols array representing a unit\n  // for the metric. Unit is optional, reference should point to an empty string in\n  // such a case.\n  uint32 unit_ref = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Time Series with Metric and Label Notation\nDESCRIPTION: Example showing Prometheus notation for identifying time series using metric name and labels. This format is used in Prometheus queries and is similar to OpenTSDB's notation.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/concepts/data_model.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n<metric name>{<label name>=<label value>, ...}\n```\n\n----------------------------------------\n\nTITLE: Defining the Histogram Message in Protobuf\nDESCRIPTION: This code defines the `Histogram` message, which represents a native histogram. The full message definition is located in the specified proto file and follows the native histogram specification for both sparse and exponential bucketing.  It also supports custom bucketing.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\n// A native histogram, also known as a sparse histogram.\n// See https://github.com/prometheus/prometheus/blob/remote-write-2.0/prompb/io/prometheus/write/v2/types.proto#L142\n// for a full message that follows the native histogram spec for both sparse\n// and exponential, as well as, custom bucketing.\nmessage Histogram { ... }\n```\n\n----------------------------------------\n\nTITLE: Gauge Metric Family with Timestamps example\nDESCRIPTION: This example shows a MetricFamily with no labels and a MetricPoint with a timestamp. The Sample MetricName MUST NOT have a suffix.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_20\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo gauge\nfoo 17.0 1520879607.789\"\n```\n\n----------------------------------------\n\nTITLE: Gauge Metric Family with Labels and Timestamps example\nDESCRIPTION: This example shows a MetricFamily with a label and MetricPoint with a timestamp. The Sample MetricName MUST NOT have a suffix.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_19\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo gauge\nfoo{a=\\\"b\\\"} 17.0 1520879607.789\"\n```\n\n----------------------------------------\n\nTITLE: Promoting OpenTelemetry Resource Attributes Configuration\nDESCRIPTION: YAML configuration for promoting specific OpenTelemetry resource attributes to Prometheus labels.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/opentelemetry.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\notlp:\n  # Recommended attributes to be promoted to labels.\n  promote_resource_attributes:\n    - service.instance.id\n    - service.name\n    - service.namespace\n    - service.version\n    - cloud.availability_zone\n    - cloud.region\n    - container.name\n    - deployment.environment\n    - deployment.environment.name\n    - k8s.cluster.name\n    - k8s.container.name\n    - k8s.cronjob.name\n    - k8s.daemonset.name\n    - k8s.deployment.name\n    - k8s.job.name\n    - k8s.namespace.name\n    - k8s.pod.name\n    - k8s.replicaset.name\n    - k8s.statefulset.name\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus in Agent Mode\nDESCRIPTION: Command to run Prometheus binary with the experimental Agent Mode feature flag enabled. This optimizes Prometheus for remote write use cases by disabling querying, alerting, and local storage.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2021-11-16-agent.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n--enable-feature=agent\n```\n\n----------------------------------------\n\nTITLE: Gauge Metric Family with multiple Timestamps example\nDESCRIPTION: This example shows a MetricFamily with no labels and two MetricPoints with timestamps. The Sample MetricName MUST NOT have a suffix.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_21\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo gauge\nfoo 17.0 123\nfoo 18.0 456\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Counter Increment with Timestamp\nDESCRIPTION: Example of an incorrect way to expose a counter with an explicit timestamp\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_39\n\nLANGUAGE: text\nCODE:\n```\n# HELP my_counter Bad increment example\n# TYPE my_counter counter\nmy_counter_total 1 123\n```\n\n----------------------------------------\n\nTITLE: Referencing Insecure Cipher Suites (Markdown Link)\nDESCRIPTION: A link to the Go crypto/tls library documentation section on insecure cipher suites.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/operating/security.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[marked as insecure](https://golang.org/pkg/crypto/tls/#InsecureCipherSuites)\n```\n\n----------------------------------------\n\nTITLE: Counter MetricFamily with Timestamp example\nDESCRIPTION: This example demonstrates a MetricFamily of type counter with no labels, and a MetricPoint with a timestamp and no created. The MetricPoint's Total Value Sample MetricName MUST have the suffix `_total`.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_23\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo counter\nfoo_total 17.0 1520879607.789\"\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenTelemetry Traces and Logs\nDESCRIPTION: Environment variables to disable OpenTelemetry traces and logs export.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/opentelemetry.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_TRACES_EXPORTER=none\nexport OTEL_LOGS_EXPORTER=none\n```\n\n----------------------------------------\n\nTITLE: Consul Service Configuration\nDESCRIPTION: JSON configuration for registering Prometheus as a service in Consul with health checks.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2018-07-05-implementing-custom-sd.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"service\": {\n    \"name\": \"prometheus\",\n    \"port\": 9090,\n    \"checks\": [\n    {\n        \"id\": \"metrics\",\n        \"name\": \"Prometheus Server Metrics\",\n        \"http\": \"http://prometheus:9090/metrics\",\n        \"interval\": \"10s\"\n    }\n    ]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Metric with Labels and Escaping\nDESCRIPTION: This snippet shows a valid example of a metric with two labels, demonstrating the proper escaping of special characters in label values.  It contains labels with \\\" and \\n.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_12\n\nLANGUAGE: None\nCODE:\n```\n\"bar_seconds_count{a=\\\"x\\\",b=\\\"escaping\\\\\\\" example \\\\n \\\"} 0\"\n```\n\n----------------------------------------\n\nTITLE: Fully Merged Integer Histogram Bucket Representation\nDESCRIPTION: Fully merged representation of integer histogram buckets including all unpopulated buckets\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Positive bucket list: `[3, 2, -5, 0, 1, -1, 3, -1]`\n- Positive span list: `[[-2, 8]]`\n```\n\n----------------------------------------\n\nTITLE: StateSet with Entity Label\nDESCRIPTION: This snippet expands on the 'stateset' metric by incorporating an 'entity' label, assigning values based on the state of different entities. Total count remains standardized at 1.0 or 0.0.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo stateset\nfoo{entity=\"controller\",foo=\"a\"} 1.0\nfoo{entity=\"controller\",foo=\"bb\"} 0.0\nfoo{entity=\"controller\",foo=\"ccc\"} 0.0\nfoo{entity=\"replica\",foo=\"a\"} 1.0\nfoo{entity=\"replica\",foo=\"bb\"} 0.0\nfoo{entity=\"replica\",foo=\"ccc\"} 1.0\n\n```\n\n----------------------------------------\n\nTITLE: Defining Target Groups in YAML\nDESCRIPTION: This snippet demonstrates how to define target groups in YAML format for Prometheus to scrape. Each entry includes a list of target addresses and associated labels such as job.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-01-advanced-service-discovery.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- targets: ['10.11.150.1:7870', '10.11.150.4:7870']\n  labels:\n    job: 'mysql'\n\n- targets: ['10.11.122.11:6001', '10.11.122.15:6002']\n  labels:\n    job: 'postgres'\n```\n\n----------------------------------------\n\nTITLE: Info Metric without Labels\nDESCRIPTION: An 'info' type metric requiring the '_info' suffix, setting its value as 1. Demonstrates usage without additional labels, focusing on conveying constant state information.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo info\nfoo_info{name=\"pretty name\",version=\"8.2.7\"} 1\n\n```\n\n----------------------------------------\n\nTITLE: Example Job Structure in Prometheus\nDESCRIPTION: Demonstrates the hierarchy of a job containing multiple instances. Shows an API server job with four replicated instances across different IP addresses and ports.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/concepts/jobs_instances.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njob: api-server\n  instance 1: 1.2.3.4:5670\n  instance 2: 1.2.3.4:5671\n  instance 3: 5.6.7.8:5670\n  instance 4: 5.6.7.8:5671\n```\n\n----------------------------------------\n\nTITLE: Displaying Remote Write Compliance Test Results Table in Markdown\nDESCRIPTION: A markdown table showing the Remote Write compliance test results for various systems, including their versions and scores.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2021-05-04-prometheus-conformance-remote-write-compliance.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Sender | Version | Score\n|--------|---------|------\n| Grafana Agent | 0.13.1 | **100%**\n| Prometheus | 2.26.0 | **100%**\n| OpenTelemetry Collector | 0.26.0 | **41%**\n| Telegraf | 1.18.2 | **65%**\n| Timber Vector | 0.13.1 | **35%**\n| VictoriaMetrics Agent | 1.59.0 | **76%**\n```\n\n----------------------------------------\n\nTITLE: Summary Metric with Quantile Values\nDESCRIPTION: Showcases summary metrics with quantile values. No labels are needed, and the example reflects how quantile measurements can be represented.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo summary\nfoo{quantile=\"0.95\"} 123.7\nfoo{quantile=\"0.99\"} 150.0\n\n```\n\n----------------------------------------\n\nTITLE: TopK Query with @ Modifier\nDESCRIPTION: Complex query example showing how to use the @ modifier with topk() to ensure consistent ranking across time ranges. Combines rate calculations with end() timestamp function.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2021-02-18-introducing-the-@-modifier.md#2025-04-21_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\nrate(http_requests_total[1m]) # This acts like the actual selector.\\n  and\\ntopk(5, rate(http_requests_total[1h] @ end())) # This acts like a ranking function which filters the selector.\n```\n\n----------------------------------------\n\nTITLE: Gauge Metric Family with no metrics example\nDESCRIPTION: This example shows an example of a MetricFamily of type Gauge with no Metrics.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_18\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo gauge\"\n```\n\n----------------------------------------\n\nTITLE: Defining ReadResponse Protobuf Message Structure\nDESCRIPTION: This snippet defines the structure of the ReadResponse message that the remote read API returns. It includes fields for querying results and the samples for each time series that match the request.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2019-10-10-remote-read-meets-streaming.md#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ReadResponse {\n  // In same order as the request's queries.\n  repeated QueryResult results = 1;\n}\n\nmessage Sample {\n  double value    = 1;\n  int64 timestamp = 2;\n}\n\nmessage TimeSeries {\n  repeated Label labels   = 1;\n  repeated Sample samples = 2;\n}\n\nmessage QueryResult {\n  repeated prometheus.TimeSeries timeseries = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Prometheus Help Output with Agent Mode Flag\nDESCRIPTION: This bash command shows the help output for Prometheus, including the new flags related to Agent mode. It demonstrates how to enable the Agent feature and highlights the differences between server and agent storage paths.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2021-11-16-agent.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nusage: prometheus [<flags>]\n\nThe Prometheus monitoring server\n\nFlags:\n  -h, --help                     Show context-sensitive help (also try --help-long and --help-man).\n      (... other flags)\n      --storage.tsdb.path=\"data/\"\n                                 Base path for metrics storage. Use with server mode only.\n      --storage.agent.path=\"data-agent/\"\n                                 Base path for metrics storage. Use with agent mode only.\n      (... other flags)\n      --enable-feature= ...      Comma separated feature names to enable. Valid options: agent, exemplar-storage, expand-external-labels, memory-snapshot-on-shutdown, promql-at-modifier, promql-negative-offset, remote-write-receiver,\n                                 extra-scrape-metrics, new-service-discovery-manager. See https://prometheus.io/docs/prometheus/latest/feature_flags/ for more details.\n```\n\n----------------------------------------\n\nTITLE: GaugeHistogram with Various Buckets\nDESCRIPTION: Exemplifies how 'gaugehistogram' metrics represent bucket values and sums. Clearly shows the relationship between buckets with increasing 'le' values and encompasses the behaviors expected with 'gsum' and 'gcount'.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_35\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo gaugehistogram\nfoo_bucket{le=\"0.01\"} 20.0\nfoo_bucket{le=\"0.1\"} 25.0\nfoo_bucket{le=\"1\"} 34.0\nfoo_bucket{le=\"10\"} 34.0\nfoo_bucket{le=\"+Inf\"} 42.0\nfoo_gcount 42.0\nfoo_gsum 3289.3\n\n```\n\n----------------------------------------\n\nTITLE: Prometheus 1.x Configuration with Multiple Storage Flags\nDESCRIPTION: Example of a Prometheus 1.x configuration with multiple local storage configuration parameters, demonstrating the complexity of previous storage settings\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2017-04-10-promehteus-20-sneak-peak.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus -storage.local.retention=200h -storage.local.memory-chunks=1000000 -storage.local.max-chunks-to-persist=500000 -storage.local.chunk-encoding=2 -config.file=/etc/prometheus.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Target Groups in JSON\nDESCRIPTION: This code shows the structure of target groups defined in JSON format. Similar to the YAML example, it contains a list of target addresses with labels that categorize by job.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-01-advanced-service-discovery.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"targets\": [\"10.11.150.1:7870\", \"10.11.150.4:7870\"],\n    \"labels\": {\n      \"job\": \"mysql\"\n    }\n  },\n  {\n    \"targets\": [\"10.11.122.11:6001\", \"10.11.122.15:6002\"],\n    \"labels\": {\n      \"job\": \"postgres\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Integer Histogram Bucket Example\nDESCRIPTION: Example of representing an integer histogram with sparse buckets using bucket and span lists\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Positive bucket list: `[3, 2, -4, 2, -1]`\n- Positive span list: `[[-2, 2], [2,1], [1,2]]`\n```\n\n----------------------------------------\n\nTITLE: Basic @ Modifier Syntax in PromQL\nDESCRIPTION: Shows the basic syntax patterns for using the @ modifier with different types of selectors. The timestamp parameter can be a unix timestamp float literal.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2021-02-18-introducing-the-@-modifier.md#2025-04-21_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\n<vector-selector> @ <timestamp>\\n<range-vector-selector> @ <timestamp>\\n<subquery> @ <timestamp>\n```\n\n----------------------------------------\n\nTITLE: Defining Target Metadata in OpenMetrics Text Format\nDESCRIPTION: Example of exposing target metadata using an Info MetricFamily with labels describing system context\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n# TYPE target info\n# HELP target Target metadata\ntarget_info{env=\"prod\",hostname=\"myhost\",datacenter=\"sdc\",region=\"europe\",owner=\"frontend\"} 1\n```\n\n----------------------------------------\n\nTITLE: Alert Rule Example in PromQL\nDESCRIPTION: Example showing a potential race condition in rule evaluation where an alert depends on a recording rule metric\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2017-06-21-prometheus-20-alpha3-new-rule-format.md#2025-04-21_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\ninstance:network_bytes:rate1m = sum by(instance) (rate(network_bytes_total[1m]))\n\nALERT HighNetworkTraffic\n  IF instance:network_bytes:rate1m > 10e6\n  FOR 5m\n```\n\n----------------------------------------\n\nTITLE: Running the Password Generator Script\nDESCRIPTION: Shell command to execute the Python password generator script which will prompt for a password and output the bcrypt hash.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/basic-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 gen-pass.py\n```\n\n----------------------------------------\n\nTITLE: Metric without labels or timestamp\nDESCRIPTION: This example shows how to render a metric sample without labels or a timestamp and a value of 0.  It shows two valid ways to achieve the same result.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_11\n\nLANGUAGE: None\nCODE:\n```\n\"bar_seconds_count 0\"\n```\n\nLANGUAGE: None\nCODE:\n```\n\"bar_seconds_count{} 0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Label Name Pattern in Regex\nDESCRIPTION: Regex pattern that defines valid Prometheus label names. Label names must start with a letter or underscore, followed by any number of letters, numbers, or underscores.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/concepts/data_model.md#2025-04-21_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n[a-zA-Z_][a-zA-Z0-9_]*\n```\n\n----------------------------------------\n\nTITLE: Example MetricFamily with an invalid Unit metadata\nDESCRIPTION: This snippet shows an invalid example where the unit is not a suffix of the MetricFamily name.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_8\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo counter\n# UNIT foo seconds\"\n```\n\n----------------------------------------\n\nTITLE: Last Counter Increment Timestamp Tracking\nDESCRIPTION: Recommended method for tracking the last time a counter was incremented using a separate gauge metric\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_40\n\nLANGUAGE: text\nCODE:\n```\n# HELP my_counter Good increment example\n# TYPE my_counter counter\nmy_counter_total 1\n# HELP my_counter_last_increment_timestamp_seconds When my_counter was last incremented\n# TYPE my_counter_last_increment_timestamp_seconds gauge\n# UNIT my_counter_last_increment_timestamp_seconds seconds\nmy_counter_last_increment_timestamp_seconds 123\n```\n\n----------------------------------------\n\nTITLE: Defining ReadRequest and Query Protobuf Messages\nDESCRIPTION: This snippet defines the structure of the ReadRequest message used for the remote read API, which includes a repeated field for queries. Each query contains parameters such as timestamps and matchers to filter time series data.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2019-10-10-remote-read-meets-streaming.md#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ReadRequest {\n  repeated Query queries = 1;\n}\n\nmessage Query {\n  int64 start_timestamp_ms = 1;\n  int64 end_timestamp_ms = 2;\n  repeated prometheus.LabelMatcher matchers = 3;\n  prometheus.ReadHints hints = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Stale Marker Value Definition\nDESCRIPTION: This snippet defines the special NaN value that MUST be used to signal stale markers. This value MUST NOT be used otherwise and helps receivers handle discontinuation of time series.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/prw/remote_write_spec_2_0.md#2025-04-21_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n\"Stale markers MUST be signalled by the special NaN value `0x7ff0000000000002`. This value MUST NOT be used otherwise.\"\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Prometheus Concepts Page\nDESCRIPTION: YAML frontmatter header that configures metadata for a documentation page about Prometheus concepts. Includes title, sort ranking, and navigation icon properties.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/concepts/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Concepts\nsort_rank: 2\nnav_icon: flask\n---\n```\n\n----------------------------------------\n\nTITLE: MetricFamily with escaped Help\nDESCRIPTION: This code snippet shows escaped characters within a HELP line, demonstrating how to properly escape special characters in metadata descriptions.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_10\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo_seconds counter\n# UNIT foo_seconds seconds\n# HELP foo_seconds Some text and \\n some \\\" escaping\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Reverse Proxy for Prometheus Components\nDESCRIPTION: This Apache configuration sets up reverse proxying for Prometheus, Alertmanager, and PromDash, allowing them to be served from a single web server.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-06-24-monitoring-dreamhack.md#2025-04-21_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nProxyPass /prometheus http://localhost:9090/prometheus\nProxyPass /alertmanager http://localhost:9093/alertmanager\nProxyPass /dash http://localhost:3000/dash\n```\n\n----------------------------------------\n\nTITLE: Incorrect interleaved Metrics example\nDESCRIPTION: This example showcases an incorrect format due to interleaved metrics. Metrics MUST NOT be interleaved within a MetricFamily.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_14\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo_seconds summary\n# UNIT foo_seconds seconds\nfoo_seconds_count{a=\\\"bb\\\"} 0 123\nfoo_seconds_count{a=\\\"ccc\\\"} 0 123\nfoo_seconds_count{a=\\\"bb\\\"} 0 456\nfoo_seconds_count{a=\\\"ccc\\\"} 0 456\"\n```\n\n----------------------------------------\n\nTITLE: Counter Increment Example in OpenMetrics Text Format\nDESCRIPTION: Correct way to expose a counter increment without explicit timestamp\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n# HELP my_counter Good increment example\n# TYPE my_counter counter\nmy_counter_total 1\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Blog Post in Markdown\nDESCRIPTION: This code snippet defines the YAML frontmatter for a blog post, including title, creation date, content type, and author information.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-04-24-prometheus-monitring-spreads-through-the-internet.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Prometheus Monitoring Spreads through the Internet\ncreated_at: 2015-04-24\nkind: article\nauthor_name: Brian Brazil\n---\n```\n\n----------------------------------------\n\nTITLE: Unknown Type Metric Example\nDESCRIPTION: Illustrates an 'unknown' metric type that lacks labels and complex data points. Simply assigns a value to the metric name, following the conventions for unknown types.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_36\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE foo unknown\nfoo 42.23\n\n```\n\n----------------------------------------\n\nTITLE: Defining Native Histogram JSON Structure in Prometheus Query API\nDESCRIPTION: Specifies the JSON structure for representing native histograms in Prometheus query API responses. This format includes count, sum, and buckets with boundary rules and counts.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": \"<count_of_observations>\",\n  \"sum\": \"<sum_of_observations>\",\n  \"buckets\": [ [ <boundary_rule>, \"<left_boundary>\", \"<right_boundary>\", \"<count_in_bucket>\" ], ... ]\n}\n```\n\n----------------------------------------\n\nTITLE: Community Channel Links in Markdown\nDESCRIPTION: Collection of links and references for various communication channels including Slack, IRC, Matrix and mailing lists.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/community.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`#prometheus` on CNCF [Slack](https://slack.cncf.io/).\n\n`#prometheus` on [irc.libera.chat](https://libera.chat/).\n\n[`#prometheus:matrix.org`](https://app.element.io/#/room/#prometheus:matrix.org)\n```\n\n----------------------------------------\n\nTITLE: Set Content Type for OpenMetrics\nDESCRIPTION: This snippet specifies the content type for OpenMetrics, indicating the version and character set. It ensures proper interpretation of the data by parsers.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_4\n\nLANGUAGE: None\nCODE:\n```\n\"application/openmetrics-text; version=1.0.0; charset=utf-8\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Prometheus 2.43 Stringlabels Release\nDESCRIPTION: Instructions for obtaining the Prometheus 2.43 release with stringlabels optimization from GitHub releases or Docker images\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2023-03-21-stringlabel.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# GitHub Release\nhttps://github.com/prometheus/prometheus/releases/tag/v2.43.0+stringlabels\n\n# Docker Image\ndocker pull quay.io/prometheus/prometheus:v2.43.0-stringlabels\n```\n\n----------------------------------------\n\nTITLE: Alternative Integer Histogram Bucket Representation\nDESCRIPTION: Alternative representation of integer histogram buckets with merged spans\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Positive bucket list: `[3, 2, -4, -1, 3, -1]`\n- Positive span list: `[[-2, 2], [2,4]]`\n```\n\n----------------------------------------\n\nTITLE: Rendering LTS Release Table in HTML\nDESCRIPTION: HTML table structure displaying Prometheus LTS releases with their release dates and end of support dates. Uses Bootstrap classes for styling and status indication.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/introduction/release-cycle.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"table table-bordered downloads\">\n    <thead>\n        <tr>\n            <th>Release</th>\n            <th>Date</th>\n            <th>End of support</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"danger\">\n            <td>Prometheus 2.37</td><td>2022-07-14</td><td>2023-07-31</td>\n        </tr>\n        <tr class=\"danger\">\n            <td>Prometheus 2.45</td><td>2023-06-23</td><td>2024-07-31</td>\n        </tr>\n        <tr class=\"success\">\n            <td>Prometheus 2.53</td><td>2024-06-16</td><td>2025-07-31</td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Developer Channel Links in Markdown\nDESCRIPTION: Links to developer-specific communication channels for contributing to Prometheus.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/community.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`#prometheus-dev` on CNCF [Slack](https://slack.cncf.io/).\n\n`#prometheus-dev` on [irc.libera.chat](https://libera.chat/).\n\n[`#prometheus-dev:matrix.org`](https://app.element.io/#/room/#prometheus-dev:matrix.org)\n```\n\n----------------------------------------\n\nTITLE: Example of Prometheus Time Series Notation\nDESCRIPTION: A concrete example of a time series identified by the metric name 'api_http_requests_total' and two labels specifying the HTTP method and handler path.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/concepts/data_model.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\napi_http_requests_total{method=\"POST\", handler=\"/messages\"}\n```\n\n----------------------------------------\n\nTITLE: Running Additional Node Exporter Instance\nDESCRIPTION: Command to start a second instance of Node Exporter on a different port (9200).\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/guides/file-sd.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./node_exporter --web.listen-address=\":9200\"\n```\n\n----------------------------------------\n\nTITLE: Native Histogram Record Types in Go\nDESCRIPTION: Record types for WAL and in-memory snapshots representing different histogram sample types, including legacy versions for backwards compatibility\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/native_histograms.md#2025-04-21_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nrecord.HistogramSamples // Numerical value 9, integer histograms\nrecord.FloatHistogramSamples // Numerical value 10, float histograms\nrecord.HistogramSamplesLegacy // Numerical value 7, legacy integer histograms\nrecord.FloatHistogramSamplesLegacy // Numerical value 8, legacy float histograms\n```\n\n----------------------------------------\n\nTITLE: Markdown Metadata Header for Prometheus Documentation\nDESCRIPTION: Defines metadata for a documentation page, including title, sorting rank, and navigation icon\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\ntitle: Specifications\\nsort_rank: 11\\nnav_icon: file-description\\n---\n```\n\n----------------------------------------\n\nTITLE: Inserting 'Read More' Break in Markdown\nDESCRIPTION: This code snippet inserts a 'Read More' break in the Markdown content, typically used to separate the preview from the full content in blog systems.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2015-04-24-prometheus-monitring-spreads-through-the-internet.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- more -->\n```\n\n----------------------------------------\n\nTITLE: Git Commit Amendment with Sign-Off\nDESCRIPTION: This snippet provides the git commands to amend the last commit with a DCO sign-off and force push to the remote repository. It guides users on how to properly sign their commits to comply with the project's legal requirements for merging pull requests.\nSOURCE: https://github.com/prometheus/docs/blob/main/snippets/saved_replies.md#2025-04-21_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit commit --amend --signoff\ngit push -f $remote $remote_branch_for_pr\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Help Command in Bash\nDESCRIPTION: Command to display Prometheus help information by running the binary with the --help flag.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/introduction/first_steps.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus --help\n```\n\n----------------------------------------\n\nTITLE: Referencing bcrypt Algorithm (Markdown Link)\nDESCRIPTION: A link to the Wikipedia page for the bcrypt algorithm, used for password hashing in Prometheus.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/operating/security.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[bcrypt](https://en.wikipedia.org/wiki/Bcrypt)\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: This snippet embeds a Twitter tweet into an HTML document. It uses a blockquote element with specific classes and data attributes to represent the tweet, and then includes a JavaScript script to render the Twitter widget.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-09-04-promcon-2016-its-a-wrap.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<blockquote class=\"twitter-tweet tw-align-center\" data-lang=\"en\"><p lang=\"en\n```\n\nLANGUAGE: HTML\nCODE:\n```\n\" dir=\"ltr\">I had to admit as well - one of the best tech conf I have ever attended. <a href=\"https://twitter.com/PrometheusIO\">@PrometheusIO</a> <a href=\"https://twitter.com/Percona\">@Percona</a> <a href=\"https://twitter.com/hashtag/promcon2016?src=hash\">#promcon2016</a> <a href=\"https://t.co/5HgKt0r9cu\">pic.twitter.com/5HgKt0r9cu</a></p>&mdash; Roman Vynar (@rvynar) <a href=\"https://twitter.com/rvynar/status/769260722496954368\">August 26, 2016</a></blockquote>\n```\n\n----------------------------------------\n\nTITLE: Incorrect interleaved MetricPoints example\nDESCRIPTION: This example showcases an incorrect format due to interleaved MetricPoints. MetricPoints MUST NOT be interleaved within a MetricFamily.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/specs/om/open_metrics_spec_2_0.md#2025-04-21_snippet_15\n\nLANGUAGE: None\nCODE:\n```\n\"# TYPE foo_seconds summary\n# UNIT foo_seconds seconds\nfoo_seconds_count{a=\\\"bb\\\"} 0 123\nfoo_seconds_count{a=\\\"bb\\\"} 0 456\nfoo_seconds_sum{a=\\\"bb\\\"} 0 123\nfoo_seconds_sum{a=\\\"bb\\\"} 0 456\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Go TLS Library (Markdown Link)\nDESCRIPTION: A link to the Go crypto/tls library documentation, which is used as the basis for TLS implementation in Prometheus projects.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/operating/security.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[crypto/tls](https://golang.org/pkg/crypto/tls)\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Remote Write Compliance Test Results\nDESCRIPTION: Raw test results showing pass/fail status for various test cases across different systems, including Grafana, Prometheus, OpenTelemetry Collector, Telegraf, Vector, and VictoriaMetrics Agent.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2021-05-04-prometheus-conformance-remote-write-compliance.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--- PASS: TestRemoteWrite/grafana (0.01s)\n    --- PASS: TestRemoteWrite/grafana/Counter (10.02s)\n    --- PASS: TestRemoteWrite/grafana/EmptyLabels (10.02s)\n    --- PASS: TestRemoteWrite/grafana/Gauge (10.02s)\n    --- PASS: TestRemoteWrite/grafana/Headers (10.02s)\n    --- PASS: TestRemoteWrite/grafana/Histogram (10.02s)\n    --- PASS: TestRemoteWrite/grafana/HonorLabels (10.02s)\n    --- PASS: TestRemoteWrite/grafana/InstanceLabel (10.02s)\n    --- PASS: TestRemoteWrite/grafana/Invalid (10.02s)\n    --- PASS: TestRemoteWrite/grafana/JobLabel (10.02s)\n    --- PASS: TestRemoteWrite/grafana/NameLabel (10.02s)\n    --- PASS: TestRemoteWrite/grafana/Ordering (26.12s)\n    --- PASS: TestRemoteWrite/grafana/RepeatedLabels (10.02s)\n    --- PASS: TestRemoteWrite/grafana/SortedLabels (10.02s)\n    --- PASS: TestRemoteWrite/grafana/Staleness (10.01s)\n    --- PASS: TestRemoteWrite/grafana/Summary (10.01s)\n    --- PASS: TestRemoteWrite/grafana/Timestamp (10.01s)\n    --- PASS: TestRemoteWrite/grafana/Up (10.02s)\n--- PASS: TestRemoteWrite/prometheus (0.01s)\n    --- PASS: TestRemoteWrite/prometheus/Counter (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/EmptyLabels (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/Gauge (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/Headers (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/Histogram (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/HonorLabels (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/InstanceLabel (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/Invalid (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/JobLabel (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/NameLabel (10.03s)\n    --- PASS: TestRemoteWrite/prometheus/Ordering (24.99s)\n    --- PASS: TestRemoteWrite/prometheus/RepeatedLabels (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/SortedLabels (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/Staleness (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/Summary (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/Timestamp (10.02s)\n    --- PASS: TestRemoteWrite/prometheus/Up (10.02s)\n--- FAIL: TestRemoteWrite/otelcollector (0.00s)\n    --- FAIL: TestRemoteWrite/otelcollector/Counter (10.01s)\n    --- FAIL: TestRemoteWrite/otelcollector/Histogram (10.01s)\n    --- FAIL: TestRemoteWrite/otelcollector/InstanceLabel (10.01s)\n    --- FAIL: TestRemoteWrite/otelcollector/Invalid (10.01s)\n    --- FAIL: TestRemoteWrite/otelcollector/JobLabel (10.01s)\n    --- FAIL: TestRemoteWrite/otelcollector/Ordering (13.54s)\n    --- FAIL: TestRemoteWrite/otelcollector/RepeatedLabels (10.01s)\n    --- FAIL: TestRemoteWrite/otelcollector/Staleness (10.01s)\n    --- FAIL: TestRemoteWrite/otelcollector/Summary (10.01s)\n    --- FAIL: TestRemoteWrite/otelcollector/Up (10.01s)\n    --- PASS: TestRemoteWrite/otelcollector/EmptyLabels (10.01s)\n    --- PASS: TestRemoteWrite/otelcollector/Gauge (10.01s)\n    --- PASS: TestRemoteWrite/otelcollector/Headers (10.01s)\n    --- PASS: TestRemoteWrite/otelcollector/HonorLabels (10.01s)\n    --- PASS: TestRemoteWrite/otelcollector/NameLabel (10.01s)\n    --- PASS: TestRemoteWrite/otelcollector/SortedLabels (10.01s)\n    --- PASS: TestRemoteWrite/otelcollector/Timestamp (10.01s)\n--- FAIL: TestRemoteWrite/telegraf (0.01s)\n    --- FAIL: TestRemoteWrite/telegraf/EmptyLabels (14.60s)\n    --- FAIL: TestRemoteWrite/telegraf/HonorLabels (14.61s)\n    --- FAIL: TestRemoteWrite/telegraf/Invalid (14.61s)\n    --- FAIL: TestRemoteWrite/telegraf/RepeatedLabels (14.61s)\n    --- FAIL: TestRemoteWrite/telegraf/Staleness (14.59s)\n    --- FAIL: TestRemoteWrite/telegraf/Up (14.60s)\n    --- PASS: TestRemoteWrite/telegraf/Counter (14.61s)\n    --- PASS: TestRemoteWrite/telegraf/Gauge (14.60s)\n    --- PASS: TestRemoteWrite/telegraf/Headers (14.61s)\n    --- PASS: TestRemoteWrite/telegraf/Histogram (14.61s)\n    --- PASS: TestRemoteWrite/telegraf/InstanceLabel (14.61s)\n    --- PASS: TestRemoteWrite/telegraf/JobLabel (14.61s)\n    --- PASS: TestRemoteWrite/telegraf/NameLabel (14.60s)\n    --- PASS: TestRemoteWrite/telegraf/Ordering (14.61s)\n    --- PASS: TestRemoteWrite/telegraf/SortedLabels (14.61s)\n    --- PASS: TestRemoteWrite/telegraf/Summary (14.60s)\n    --- PASS: TestRemoteWrite/telegraf/Timestamp (14.61s)\n--- FAIL: TestRemoteWrite/vector (0.01s)\n    --- FAIL: TestRemoteWrite/vector/Counter (10.02s)\n    --- FAIL: TestRemoteWrite/vector/EmptyLabels (10.01s)\n    --- FAIL: TestRemoteWrite/vector/Headers (10.02s)\n    --- FAIL: TestRemoteWrite/vector/HonorLabels (10.02s)\n    --- FAIL: TestRemoteWrite/vector/InstanceLabel (10.02s)\n    --- FAIL: TestRemoteWrite/vector/Invalid (10.02s)\n    --- FAIL: TestRemoteWrite/vector/JobLabel (10.01s)\n    --- FAIL: TestRemoteWrite/vector/Ordering (13.01s)\n    --- FAIL: TestRemoteWrite/vector/RepeatedLabels (10.02s)\n    --- FAIL: TestRemoteWrite/vector/Staleness (10.02s)\n    --- FAIL: TestRemoteWrite/vector/Up (10.02s)\n    --- PASS: TestRemoteWrite/vector/Gauge (10.02s)\n    --- PASS: TestRemoteWrite/vector/Histogram (10.02s)\n    --- PASS: TestRemoteWrite/vector/NameLabel (10.02s)\n    --- PASS: TestRemoteWrite/vector/SortedLabels (10.02s)\n    --- PASS: TestRemoteWrite/vector/Summary (10.02s)\n    --- PASS: TestRemoteWrite/vector/Timestamp (10.02s)\n--- FAIL: TestRemoteWrite/vmagent (0.01s)\n    --- FAIL: TestRemoteWrite/vmagent/Invalid (20.66s)\n    --- FAIL: TestRemoteWrite/vmagent/Ordering (22.05s)\n    --- FAIL: TestRemoteWrite/vmagent/RepeatedLabels (20.67s)\n    --- FAIL: TestRemoteWrite/vmagent/Staleness (20.67s)\n    --- PASS: TestRemoteWrite/vmagent/Counter (20.67s)\n    --- PASS: TestRemoteWrite/vmagent/EmptyLabels (20.64s)\n    --- PASS: TestRemoteWrite/vmagent/Gauge (20.66s)\n    --- PASS: TestRemoteWrite/vmagent/Headers (20.64s)\n    --- PASS: TestRemoteWrite/vmagent/Histogram (20.66s)\n    --- PASS: TestRemoteWrite/vmagent/HonorLabels (20.66s)\n    --- PASS: TestRemoteWrite/vmagent/InstanceLabel (20.66s)\n    --- PASS: TestRemoteWrite/vmagent/JobLabel (20.66s)\n    --- PASS: TestRemoteWrite/vmagent/NameLabel (20.66s)\n    --- PASS: TestRemoteWrite/vmagent/SortedLabels (20.66s)\n    --- PASS: TestRemoteWrite/vmagent/Summary (20.66s)\n    --- PASS: TestRemoteWrite/vmagent/Timestamp (20.67s)\n    --- PASS: TestRemoteWrite/vmagent/Up (20.66s)\n```\n\n----------------------------------------\n\nTITLE: Rendering Twitter Widget in JavaScript\nDESCRIPTION: This script is responsible for rendering embedded Twitter tweets as interactive widgets on a webpage. It asynchronously loads the Twitter widgets JavaScript library, which then automatically transforms the blockquote elements into fully functional tweet displays.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-09-04-promcon-2016-its-a-wrap.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Alertmanager Documentation Frontmatter in YAML\nDESCRIPTION: YAML frontmatter block that configures the Alertmanager documentation page with metadata including title, sort rank, and navigation icon.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/alerting/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Alertmanager\nsort_rank: 7\nnav_icon: bell\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video of Prometheus Documentary with HTML iframe\nDESCRIPTION: HTML code that embeds a YouTube video of the Prometheus documentary with specific dimensions and settings. The iframe has a width of 560 pixels, height of 315 pixels, and includes standard YouTube embed attributes.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2023-09-01-promcon2023-schedule.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rT4fJNbfe14\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: This snippet embeds a Twitter tweet into an HTML document. It uses a blockquote element with specific classes and data attributes to represent the tweet, and then includes a JavaScript script to render the Twitter widget.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-09-04-promcon-2016-its-a-wrap.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<blockquote class=\"twitter-tweet tw-align-center\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/promcon2016?src=hash\">#promcon2016</a> was amazing. Thanks to everybody involved <a href=\"https://twitter.com/PrometheusIO\">@PrometheusIO</a> <a href=\"https://twitter.com/juliusvolz\">@juliusvolz</a></p>&mdash; tex (@texds) <a href=\"https://twitter.com/texds/status/769213616541298688\">August 26, 2016</a></blockquote>\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: This snippet embeds a Twitter tweet into an HTML document. It uses a blockquote element with specific classes and data attributes to represent the tweet, and then includes a JavaScript script to render the Twitter widget.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-09-04-promcon-2016-its-a-wrap.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<blockquote class=\"twitter-tweet tw-align-center\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Sad that <a href=\"https://twitter.com/hashtag/PromCon2016?src=hash\">#PromCon2016</a> is over. Best tech conference I&#39;ve been to yet!</p>&mdash; Nick Cabatoff (@NickCabatoff) <a href=\"https://twitter.com/NickCabatoff/status/769223981882900481\">August 26, 2016</a></blockquote>\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: This snippet embeds a Twitter tweet into an HTML document. It uses a blockquote element with specific classes and data attributes to represent the tweet, and then includes a JavaScript script to render the Twitter widget.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-09-04-promcon-2016-its-a-wrap.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<blockquote class=\"twitter-tweet tw-align-center\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Promcon was nice. Looking forward to next time. Bye Berlin. <a href=\"https://twitter.com/hashtag/promcon2016?src=hash\">#promcon2016</a> <a href=\"https://t.co/XInN9OR3pL\">pic.twitter.com/XInN9OR3pL</a></p>&mdash; Robert Jacob (@xperimental) <a href=\"https://twitter.com/xperimental/status/769520813385117697\">August 27, 2016</a></blockquote>\n```\n\n----------------------------------------\n\nTITLE: Twitter Embed Scripts HTML\nDESCRIPTION: HTML code blocks for embedding Twitter posts and widget functionality to display attendee feedback from PromCon 2017.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2017-09-04-promcon-2017-recap.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Generating Prometheus Target Config with Ruby and Chef API\nDESCRIPTION: A Ruby script that queries the Chef API to generate a Prometheus target configuration file for all hosts. This is used with file_sd_config to ensure all hosts are discovered and scraped as soon as they register with Chef.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-09-21-interview-with-compose.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Ruby script to generate Prometheus target config\n# Uses Chef API to query for all hosts\n# Writes out a Prometheus target config file\n```\n\n----------------------------------------\n\nTITLE: Building Prometheus Documentation Static Site\nDESCRIPTION: This command generates the static site for Prometheus documentation. It uses the 'make' utility to run the 'build' command, which likely executes a series of tasks to compile and generate the static HTML files. The resulting site is stored in the 'output' directory.\nSOURCE: https://github.com/prometheus/docs/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub API Token for Prometheus Documentation Build\nDESCRIPTION: This command sets an environment variable to use a GitHub API token for authentication. This helps avoid rate limits when making API calls during the build process. The token should be obtained from the GitHub settings page.\nSOURCE: https://github.com/prometheus/docs/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GITHUB_AUTHENTICATION='-u user:token'\n```\n\n----------------------------------------\n\nTITLE: Installing Required Gems for Prometheus Documentation Build\nDESCRIPTION: This command installs the necessary Ruby gems for building the Prometheus documentation site. It uses the 'make' utility to run the 'bundle' command, which installs dependencies specified in the project's Gemfile.\nSOURCE: https://github.com/prometheus/docs/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake bundle\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: This snippet embeds a Twitter tweet into an HTML document. It uses a blockquote element with specific classes and data attributes to represent the tweet, and then includes a JavaScript script to render the Twitter widget.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-09-04-promcon-2016-its-a-wrap.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<blockquote class=\"twitter-tweet tw-align-center\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">For two days it was tangible that we already have something amazing and that many more, even greater things are still to come. <a href=\"https://twitter.com/hashtag/PromCon2016?src=hash\">#PromCon2016</a></p>&mdash; Hynek Schlawack (@hynek) <a href=\"https://twitter.com/hynek/status/769245966847373312\">August 26, 2016</a></blockquote>\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: This snippet embeds a Twitter tweet into an HTML document. It uses a blockquote element with specific classes and data attributes to represent the tweet, and then includes a JavaScript script to render the Twitter widget.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/blog/2016-09-04-promcon-2016-its-a-wrap.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<blockquote class=\"twitter-tweet tw-align-center\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/PrometheusIO\">@PrometheusIO</a>  I can&#39;t remember the last time I learned so much(or laughed so much) at a tech conference Thanks to all! So glad I attended!</p>&mdash; cliff-ops (@cliff_ops) <a href=\"https://twitter.com/cliff_ops/status/769239347828822016\">August 26, 2016</a></blockquote>\n```\n\n----------------------------------------\n\nTITLE: Storing HTTP Request Metrics in Graphite/StatsD\nDESCRIPTION: Example of how HTTP request metrics would be encoded in Graphite/StatsD, showing a single aggregated value for API server requests.\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/introduction/comparison.md#2025-04-21_snippet_0\n\nLANGUAGE: graphite\nCODE:\n```\nstats.api-server.tracks.post.500 -> 93\n```\n\n----------------------------------------\n\nTITLE: 404 Page Front Matter in Markdown\nDESCRIPTION: YAML front matter configuration for a 404 error page, setting the title and hiding the page from navigation\nSOURCE: https://github.com/prometheus/docs/blob/main/content/docs/404.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 404\nis_hidden: true\n---\n```"
  }
]