[
  {
    "owner": "openresty",
    "repo": "openresty",
    "content": "TITLE: Building OpenResty Bundle\nDESCRIPTION: Command to reproduce the OpenResty bundle tarball from the source repository. This requires having the necessary dependencies installed.\nSOURCE: https://github.com/openresty/openresty/blob/master/README.markdown#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Installing OpenResty Dependencies on Fedora\nDESCRIPTION: Commands to install the required dependencies (perl, dos2unix, and mercurial) for building OpenResty on Fedora 22 using the dnf package manager.\nSOURCE: https://github.com/openresty/openresty/blob/master/README.markdown#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install perl dos2unix mercurial\n```\n\n----------------------------------------\n\nTITLE: OpenResty Build Configuration\nDESCRIPTION: Complete build configuration script showing dependencies and compilation options\nSOURCE: https://github.com/openresty/openresty/blob/master/doc/README-windows.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPCRE=pcre-8.42\nZLIB=zlib-1.2.11\nOPENSSL=openssl-1.1.0h\n\nmkdir -p objs/lib || exit 1\ncd objs/lib || exit 1\nls ../../..\ntar -xf ../../../$OPENSSL.tar.gz || exit 1\ntar -xf ../../../$ZLIB.tar.gz || exit 1\ntar -xf ../../../$PCRE.tar.gz || exit 1\ncd ../..\n\ncd objs/lib/$OPENSSL || exit 1\npatch -p1 < ../../../patches/openssl-1.1.0d-sess_set_get_cb_yield.patch || exit 1\ncd ../../..\n\n./configure \\\n    --with-cc=gcc \\\n    --with-ipv6 \\\n    --prefix= \\\n    --with-cc-opt='-DFD_SETSIZE=1024' \\\n    --sbin-path=nginx.exe \\\n    --with-pcre-jit \\\n    --without-http_rds_json_module \\\n    --without-http_rds_csv_module \\\n    --without-lua_rds_parser \\\n    --with-ipv6 \\\n    --with-stream \\\n    --with-stream_ssl_module \\\n    --with-stream_ssl_preread_module \\\n    --with-http_v2_module \\\n    --without-mail_pop3_module \\\n    --without-mail_imap_module \\\n    --without-mail_smtp_module \\\n    --with-http_stub_status_module \\\n    --with-http_realip_module \\\n    --with-http_addition_module \\\n    --with-http_auth_request_module \\\n    --with-http_secure_link_module \\\n    --with-http_random_index_module \\\n    --with-http_gzip_static_module \\\n    --with-http_sub_module \\\n    --with-http_dav_module \\\n    --with-http_flv_module \\\n    --with-http_mp4_module \\\n    --with-http_gunzip_module \\\n    --with-select_module \\\n    --with-luajit-xcflags=\"-DLUAJIT_NUMMODE=2 -DLUAJIT_ENABLE_LUA52COMPAT\" \\\n    --with-pcre=objs/lib/$PCRE \\\n    --with-zlib=objs/lib/$ZLIB \\\n    --with-openssl=objs/lib/$OPENSSL \\\n    -j9 || exit 1\n\nmake -j9\nmake install\n```\n\n----------------------------------------\n\nTITLE: Adding Zero Header Name Length Validation in HTTP/2 Protocol\nDESCRIPTION: Adds early validation to reject HTTP/2 headers with zero-length names at the protocol level by checking header name length and logging an error before returning a protocol error.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2019.h2.txt#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nif (header->name.len == 0) {\n    ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,\n                  \"client sent zero header name length\");\n\n    return ngx_http_v2_connection_error(h2c,\n                                        NGX_HTTP_V2_PROTOCOL_ERROR);\n}\n```\n\n----------------------------------------\n\nTITLE: Server Control Commands\nDESCRIPTION: Commands for stopping and managing the NGINX server\nSOURCE: https://github.com/openresty/openresty/blob/master/doc/README-windows.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnginx -s stop\n```\n\nLANGUAGE: bash\nCODE:\n```\nnginx -s quit\n```\n\n----------------------------------------\n\nTITLE: Starting NGINX Server\nDESCRIPTION: Basic commands to start the NGINX server with optional path prefix specification\nSOURCE: https://github.com/openresty/openresty/blob/master/doc/README-windows.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstart nginx\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/my/openresty/app/\nstart nginx -p $PWD\n```\n\n----------------------------------------\n\nTITLE: Limiting concurrent stream creation in HTTP/2 headers state handler\nDESCRIPTION: Implements a protection mechanism that refuses new streams when a client creates too many streams at once. The limit is set to twice the configured concurrent_streams value, and exceeding it triggers a REFUSED_STREAM response.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2023.h2.txt#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nif (h2c->new_streams++ >= 2 * h2scf->concurrent_streams) {\n    ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,\n                  \"client sent too many streams at once\");\n\n    status = NGX_HTTP_V2_REFUSED_STREAM;\n    goto rst_stream;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP/2 Idle Connection Flood Protection in C\nDESCRIPTION: Adds a counter to track how many times a connection has gone idle. If this exceeds a threshold (10 times the max_requests setting), the connection is terminated to prevent resource exhaustion attacks.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2018.h2.txt#2025-04-18_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n    h2scf = ngx_http_get_module_srv_conf(h2c->http_connection->conf_ctx,\n                                         ngx_http_v2_module);\n\n    if (h2c->idle++ > 10 * h2scf->max_requests) {\n        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,\n                      \"http2 flood detected\");\n        ngx_http_v2_finalize_connection(h2c, NGX_HTTP_V2_NO_ERROR);\n        return;\n    }\n\n    c->destroyed = 0;\n    ngx_reusable_connection(c, 0);\n```\n\n----------------------------------------\n\nTITLE: Protecting against refused stream flooding attacks in HTTP/2\nDESCRIPTION: Adds protection against clients that repeatedly send invalid streams causing the server to send RST_STREAM frames. This code tracks refused streams and terminates the connection if the count exceeds the greater of concurrent_streams or 100.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2023.h2.txt#2025-04-18_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nif (h2c->refused_streams++ > ngx_max(h2scf->concurrent_streams, 100)) {\n    ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,\n                  \"client sent too many refused streams\");\n    return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_NO_ERROR);\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing DNS Label Parsing in C\nDESCRIPTION: Modified code section that handles DNS label parsing and domain name reconstruction. The change moves the dot placement check before the label copying to ensure proper domain name formatting.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2021.resolver.txt#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nif (dst != name->data) {\n    *dst++ = '.';\n}\n\nngx_strlow(dst, src, n);\ndst += n;\nsrc += n;\n\nn = *src++;\n```\n\n----------------------------------------\n\nTITLE: Implementing PRIORITY Frame Flood Protection in HTTP/2\nDESCRIPTION: Adds protection against excessive PRIORITY frames in HTTP/2 by decrementing a counter and rejecting requests when too many PRIORITY frames are received, preventing potential denial of service attacks.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2019.h2.txt#2025-04-18_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nif (--h2c->priority_limit == 0) {\n    ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,\n                  \"client sent too many PRIORITY frames\");\n\n    return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_ENHANCE_YOUR_CALM);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Size Validation for 64-bit MP4 Atom Headers in NGINX\nDESCRIPTION: This code adds validation to ensure that MP4 atoms with 64-bit headers are not smaller than the header size itself. If an atom is too small, an error is logged and processing is stopped to prevent potential issues with malformed MP4 files.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2018.mp4.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nif (atom_size < sizeof(ngx_mp4_atom_header64_t)) {\n    ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,\n                  \"\\\"%s\\\" mp4 atom is too small:%uL\",\n                  mp4->file.name.data, atom_size);\n    return NGX_ERROR;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Range Size Overflow Check in C\nDESCRIPTION: Adds a safety check to prevent integer overflow when calculating the total size of HTTP range requests. The check ensures that adding the difference between end and start positions to the current size won't exceed NGX_MAX_OFF_T_VALUE.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2017.ranges.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nif (size > NGX_MAX_OFF_T_VALUE - (end - start)) {\n    return NGX_HTTP_RANGE_NOT_SATISFIABLE;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking NGINX Processes\nDESCRIPTION: Command to list running NGINX processes using Windows tasklist\nSOURCE: https://github.com/openresty/openresty/blob/master/doc/README-windows.md#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nC:\\> tasklist /fi \"imagename eq nginx.exe\"\n\nImage Name                     PID Session Name        Session#    Mem Usage\n========================= ======== ================ =========== ============\nnginx.exe                     4616 Console                    1      7,412 K\nnginx.exe                     5836 Console                    1      7,800 K\n\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP/2 Flood Protection in Data Frame Allocation\nDESCRIPTION: Enhances the data frame allocation function to track frame counts and detect potential HTTP/2 flooding attacks by limiting the maximum number of frames per connection to 10000.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2019.h2.txt#2025-04-18_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nframe = stream->free_frames;\nh2c = stream->connection;\n\nif (frame) {\n    stream->free_frames = frame->next;\n\n} else if (h2c->frames < 10000) {\n    frame = ngx_palloc(stream->request->pool,\n                       sizeof(ngx_http_v2_out_frame_t));\n    if (frame == NULL) {\n        return NULL;\n    }\n\n    stream->frames++;\n    h2c->frames++;\n\n} else {\n    ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,\n                  \"http2 flood detected\");\n\n    h2c->connection->error = 1;\n    return NULL;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Resty Script\nDESCRIPTION: Example of using the resty command-line utility\nSOURCE: https://github.com/openresty/openresty/blob/master/doc/README-windows.md#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nC:\\> resty -e \"ngx.say('Hello, OpenResty!')\"\nHello, OpenResty!\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP/2 Frame Allocation with Flood Protection in C\nDESCRIPTION: Modifies the frame allocation function to limit the number of frames that can be created to 10000. If this limit is exceeded, it logs a flood detection warning and terminates the connection.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2018.h2.txt#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n    } else if (h2c->frames < 10000) {\n        pool = h2c->pool ? h2c->pool : h2c->connection->pool;\n\n        frame = ngx_pcalloc(pool, sizeof(ngx_http_v2_out_frame_t));\n        if (frame == NULL) {\n            return NULL;\n        }\n\n        frame->first = ngx_palloc(pool, total);\n        if (frame->first == NULL) {\n            return NULL;\n        }\n\n        buffer = frame->first->start = frame->first->pos = frame->first->last =\n                     (u_char *) frame->first + sizeof(ngx_buf_t);\n\n        frame->handler = ngx_http_v2_frame_handler;\n\n        h2c->frames++;\n\n    } else {\n        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,\n                      \"http2 flood detected\");\n\n        h2c->connection->error = 1;\n        return NULL;\n    }\n```\n\n----------------------------------------\n\nTITLE: Process Management with Taskkill\nDESCRIPTION: Example of forcibly terminating NGINX processes using Windows taskkill command\nSOURCE: https://github.com/openresty/openresty/blob/master/doc/README-windows.md#2025-04-18_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nC:\\> taskkill /pid 5488 /F\n```\n\n----------------------------------------\n\nTITLE: Adding Frame Counter to HTTP/2 Stream Structure\nDESCRIPTION: Adds a frame counter field to the HTTP/2 stream structure to track the number of frames allocated per stream, enabling better resource management and protection against resource exhaustion attacks.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2019.h2.txt#2025-04-18_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nngx_uint_t                       frames;\n```\n\n----------------------------------------\n\nTITLE: Writing Chain of Buffers to File in OpenResty (C)\nDESCRIPTION: This snippet is part of the ngx_write_chain_to_file function, which writes a chain of buffers to a file. It includes logic for coalescing neighboring buffers and skipping special buffers. The function uses an iovec structure to optimize write operations.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2016.write2.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nwhile (cl && vec.nelts < IOV_MAX) {\n\n    if (ngx_buf_special(cl->buf)) {\n        cl = cl->next;\n        continue;\n    }\n\n    if (prev == cl->buf->pos) {\n        iov->iov_len += cl->buf->last - cl->buf->pos;\n\n```\n\n----------------------------------------\n\nTITLE: Initializing new stream counter in HTTP/2 read handler\nDESCRIPTION: Resets the new_streams counter to 0 when the HTTP/2 read handler is invoked, establishing a clean state for tracking newly created streams in each read cycle.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2023.h2.txt#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nh2c->blocked = 1;\nh2c->new_streams = 0;\n```\n\n----------------------------------------\n\nTITLE: Handling Special Buffers in OpenResty File Operations (C)\nDESCRIPTION: This snippet adds a check for special buffers in the file processing loop. It uses the ngx_buf_special function to identify and skip special buffers, improving the efficiency of file operations.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2016.write.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfor ( /* void */ ; cl; cl = cl->next) {\n\n    if (ngx_buf_special(cl->buf)) {\n        continue;\n    }\n\n    size = cl->buf->last - cl->buf->pos;\n\n    if (prev == cl->buf->pos) {\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP/2 Priority Frame Limit\nDESCRIPTION: Adds initialization for the priority_limit field in the HTTP/2 connection structure, setting it to the maximum number of concurrent streams to limit potential PRIORITY frame flooding attacks.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2019.h2.txt#2025-04-18_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nh2c->priority_limit = h2scf->concurrent_streams;\n```\n\n----------------------------------------\n\nTITLE: Replenishing HTTP/2 PRIORITY Frame Limit on Stream Creation\nDESCRIPTION: Updates the stream creation function to increase the PRIORITY frame limit when a new stream is created, ensuring that legitimate use of PRIORITY frames is still allowed while preventing abuse.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2019.h2.txt#2025-04-18_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nh2c->priority_limit += h2scf->concurrent_streams;\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Request Line with Space Handling in C\nDESCRIPTION: This snippet shows part of the state machine for parsing an HTTP request line. It handles different states and characters, particularly focusing on the treatment of spaces in URIs and state transitions. The code adds additional logic to handle spaces in URIs by setting flags and adjusting the parsing state.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2013.space.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n            default:\n                r->space_in_uri = 1;\n                state = sw_check_uri;\n                p--;\n                break;\n            }\n            break;\n\n@@ -670,6 +671,7 @@ ngx_http_parse_request_line(ngx_http_req\n            default:\n                r->space_in_uri = 1;\n                state = sw_uri;\n                p--;\n                break;\n            }\n            break;\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP/2 Connection Frame Counter in C\nDESCRIPTION: Adds initialization of the frames counter to zero when setting up an HTTP/2 connection. This counter will track the number of frames created for flood protection.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2018.h2.txt#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nh2c->pool = NULL;\nh2c->free_frames = NULL;\nh2c->frames = 0;\nh2c->free_fake_connections = NULL;\n```\n\n----------------------------------------\n\nTITLE: Adding stream tracking counters to HTTP/2 connection structure\nDESCRIPTION: Extends the HTTP/2 connection structure (ngx_http_v2_connection_s) with two new fields: new_streams for tracking streams created in the current cycle and refused_streams for counting invalid streams that were rejected.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2023.h2.txt#2025-04-18_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nngx_uint_t                       processing;\nngx_uint_t                       frames;\nngx_uint_t                       idle;\nngx_uint_t                       new_streams;\nngx_uint_t                       refused_streams;\nngx_uint_t                       priority_limit;\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame Counting for HTTP/2 Stream Cleanup\nDESCRIPTION: Updates the stream closing function to decrement the connection's frame count when a stream is closed, helping to track and manage frame allocation across the HTTP/2 connection.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2019.h2.txt#2025-04-18_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nh2c->frames -= stream->frames;\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP/2 Connection Frames Counter in C\nDESCRIPTION: Adds a frames counter field to the HTTP/2 connection structure to track the number of frames allocated per connection for flood protection.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2018.h2.txt#2025-04-18_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n    ngx_http_connection_t           *http_connection;\n\n    ngx_uint_t                       processing;\n    ngx_uint_t                       frames;\n\n    ngx_uint_t                       pushing;\n    ngx_uint_t                       concurrent_pushes;\n```\n\n----------------------------------------\n\nTITLE: Adding Priority Limit Field to HTTP/2 Connection Structure\nDESCRIPTION: Adds a priority_limit field to the HTTP/2 connection structure to track and limit the number of PRIORITY frames allowed, helping prevent potential denial of service attacks via PRIORITY frame flooding.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2019.h2.txt#2025-04-18_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nngx_uint_t                       priority_limit;\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP/2 Connection Idle Counter in C\nDESCRIPTION: Adds an idle counter field to the HTTP/2 connection structure to track how many times a connection has gone idle, used for flood protection.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2018.h2.txt#2025-04-18_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n    ngx_uint_t                       processing;\n    ngx_uint_t                       frames;\n    ngx_uint_t                       idle;\n\n    ngx_uint_t                       pushing;\n    ngx_uint_t                       concurrent_pushes;\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Header Name Length Check in HTTP/2 Validation\nDESCRIPTION: Removes a redundant check for zero-length header names that was moved to an earlier validation stage in the HTTP/2 protocol processing, eliminating duplicate validation.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2019.h2.txt#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nif (header->name.len == 0) {\n    return NGX_ERROR;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying SPDY State Saving Debug Logic in C\nDESCRIPTION: This snippet modifies the debug logging condition in the ngx_http_spdy_state_save function. It changes the condition from a debug-only build check to always true, ensuring the debug log is always executed.\nSOURCE: https://github.com/openresty/openresty/blob/master/patches/patch.2014.spdy2.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstatic u_char *\nngx_http_spdy_state_save(ngx_http_spdy_connection_t *sc,\n    u_char *pos, u_char *end, ngx_http_spdy_handler_pt handler)\n{\n#if 1\n    if (end - pos > NGX_SPDY_STATE_BUFFER_SIZE) {\n        ngx_log_error(NGX_LOG_ALERT, sc->connection->log, 0,\n                      \"spdy state buffer overflow: \"\n\n```"
  }
]