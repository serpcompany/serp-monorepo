[
  {
    "owner": "flet-dev",
    "repo": "flet",
    "content": "TITLE: Building a Counter App in Python with Flet\nDESCRIPTION: A complete example of a counter application built using Flet in Python. The app displays a number that can be incremented or decremented using buttons. This demonstrates core Flet concepts including page setup, controls (TextField, IconButton), event handling, and UI updates.\nSOURCE: https://github.com/flet-dev/flet/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport flet\nfrom flet import IconButton, Page, Row, TextField, icons\n\ndef main(page: Page):\n    page.title = \"Flet counter example\"\n    page.vertical_alignment = \"center\"\n\n    txt_number = TextField(value=\"0\", text_align=\"right\", width=100)\n\n    def minus_click(e):\n        txt_number.value = str(int(txt_number.value) - 1)\n        page.update()\n\n    def plus_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    page.add(\n        Row(\n            [\n                IconButton(icons.REMOVE, on_click=minus_click),\n                txt_number,\n                IconButton(icons.ADD, on_click=plus_click),\n            ],\n            alignment=\"center\",\n        )\n    )\n\nflet.app(target=main)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Counter App in Python with Flet\nDESCRIPTION: A complete Python example showing how to create a counter application with Flet. It demonstrates basic UI components like TextField, IconButton, and Row, as well as event handling for button clicks.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport flet\nfrom flet import IconButton, Page, Row, TextField, icons\n\ndef main(page: Page):\n    page.title = \"Flet counter example\"\n    page.vertical_alignment = \"center\"\n\n    txt_number = TextField(value=\"0\", text_align=\"right\", width=100)\n\n    def minus_click(e):\n        txt_number.value = int(txt_number.value) - 1\n        page.update()\n\n    def plus_click(e):\n        txt_number.value = int(txt_number.value) + 1\n        page.update()\n\n    page.add(\n        Row(\n            [\n                IconButton(icons.REMOVE, on_click=minus_click),\n                txt_number,\n                IconButton(icons.ADD, on_click=plus_click),\n            ],\n            alignment=\"center\",\n        )\n    )\n\nflet.app(target=main, port=8550)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flet Project using CLI\nDESCRIPTION: This command demonstrates how to use the Flet CLI to create a new Flet project. It initializes a new project named 'myapp' with the necessary structure and files.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-cli/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflet create myapp\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter App with Flet in Python\nDESCRIPTION: Complete example demonstrating how to build a simple counter application with Flet. The app includes a text field displaying the counter value and buttons to increment or decrement the value.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Flet counter example\"\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n\n    txt_number = ft.TextField(value=\"0\", text_align=ft.TextAlign.RIGHT, width=100)\n\n    def minus_click(e):\n        txt_number.value = str(int(txt_number.value) - 1)\n        page.update()\n\n    def plus_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    page.add(\n        ft.Row(\n            [\n                ft.IconButton(ft.icons.REMOVE, on_click=minus_click),\n                txt_number,\n                ft.IconButton(ft.icons.ADD, on_click=plus_click),\n            ],\n            alignment=ft.MainAxisAlignment.CENTER,\n        )\n    )\n\nft.app(main)\n```\n\n----------------------------------------\n\nTITLE: Installing Flet with pip\nDESCRIPTION: Command to install Flet framework using pip package manager.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flet\n```\n\n----------------------------------------\n\nTITLE: Installing Flet Package in Flutter\nDESCRIPTION: Command to add the Flet package to a Flutter project using the Flutter package manager.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add flet\n```\n\n----------------------------------------\n\nTITLE: Using FletApp as the Root Widget in Flutter\nDESCRIPTION: Dart code example showing how to use FletApp as the root widget in a Flutter application. This approach is necessary when the Flet app needs to handle page route changes or deep linking.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/README.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flet/flet.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() async {\n  await setupDesktop();\n  runApp(const FletApp(pageUrl: \"http://localhost:8550\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flet-FastAPI App with Uvicorn\nDESCRIPTION: Command to start the Uvicorn server and run the Flet-FastAPI application.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-web/src/flet_web/fastapi/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn counter:app\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flet Counter App with FastAPI\nDESCRIPTION: Python code for a simple Flet app with a counter and increment button, integrated with FastAPI. It demonstrates how to set up a Flet app within a FastAPI application.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-web/src/flet_web/fastapi/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport flet as ft\nimport flet_fastapi\n\nasync def main(page: ft.Page):\n    counter = ft.Text(\"0\", size=50, data=0)\n\n    async def add_click(e):\n        counter.data += 1\n        counter.value = str(counter.data)\n        counter.update()\n\n    page.floating_action_button = ft.FloatingActionButton(\n        icon=ft.icons.ADD, on_click=add_click\n    )\n    await page.add_async(\n        ft.Container(counter, alignment=ft.alignment.center, expand=True)\n    )\n\napp = flet_fastapi.app(main)\n```\n\n----------------------------------------\n\nTITLE: Installing Flet Dependencies with Poetry\nDESCRIPTION: Command to install all Flet dependencies and enable the project as an editable package using Poetry.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Running a Flet Python Application with Poetry\nDESCRIPTION: Command to run a Python file using Poetry's virtual environment. This will download and start the Flet Client during the first run.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python hello.py\n```\n\n----------------------------------------\n\nTITLE: Running Flet App as a Web Application\nDESCRIPTION: Command to run a Flet application as a web application that can be accessed through a browser.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflet run --web main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Flet App for Web Browser Deployment\nDESCRIPTION: Code snippet showing how to modify a Flet application to run in a web browser instead of a native window. This demonstrates Flet's ability to target different platforms with minimal code changes.\nSOURCE: https://github.com/flet-dev/flet/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nflet.app(target=main, view=flet.AppView.WEB_BROWSER)\n```\n\n----------------------------------------\n\nTITLE: Starting Flutter Client for Debugging\nDESCRIPTION: Command to run the Flutter client in debug mode. This connects to the Flet Python application and allows viewing debug outputs in the terminal.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Flet Python Application\nDESCRIPTION: A basic Flet Python program that displays 'Hello, world!' in a native OS window. Used to test the Flet installation.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport flet\nfrom flet import Page, Text\n\ndef main(page: Page):\n    page.add(Text(\"Hello, world!\"))\n\nflet.app(target=main)\n```\n\n----------------------------------------\n\nTITLE: Updating Flutter Dependencies for Release\nDESCRIPTION: Command to update Flutter dependencies in the client directory before releasing a new version of Flet.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: Hosting Multiple Flet Apps with FastAPI\nDESCRIPTION: Python code demonstrating how to host multiple Flet apps under the same domain using FastAPI. It shows how to create and mount separate Flet apps at different routes.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-web/src/flet_web/fastapi/README.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport flet as ft\nimport flet_fastapi\n\n\nasync def root_main(page: ft.Page):\n    await page.add_async(ft.Text(\"This is root app!\"))\n\n\nasync def sub_main(page: ft.Page):\n    await page.add_async(ft.Text(\"This is sub app!\"))\n\n\napp = flet_fastapi.FastAPI()\n\n\napp.mount(\"/sub-app\", flet_fastapi.app(sub_main))\napp.mount(\"/\", flet_fastapi.app(root_main))\n```\n\n----------------------------------------\n\nTITLE: Using Enum Parameters with ft.app() in Python\nDESCRIPTION: Example of using enumerated parameters for the ft.app() function, specifically setting the view to web browser and web renderer to HTML. This approach provides better type safety than using string values.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nft.app(main, view=ft.AppView.WEB_BROWSER, web_renderer=ft.WebRenderer.HTML)\n```\n\n----------------------------------------\n\nTITLE: Integrating FletApp Widget Inside MaterialApp in Flutter\nDESCRIPTION: Dart code example showing how to integrate a FletApp widget inside a MaterialApp in a Flutter application. This approach is suitable when Flet is part of a larger Flutter app.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/README.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flet/flet.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() async {\n  await setupDesktop();\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Flet Flutter Demo',\n      home: FletApp(pageUrl: \"http://localhost:8550\"),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Client for macOS\nDESCRIPTION: Command to build the Flet Flutter client for macOS operating system. The build output will be placed in the FLET_VIEW_PATH directory.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nflutter build macos\n```\n\n----------------------------------------\n\nTITLE: Adding Flet to Existing FastAPI App\nDESCRIPTION: Python code showing how to add a Flet app to an existing FastAPI application. It demonstrates the use of lifespan context manager for managing Flet app lifecycle.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-web/src/flet_web/fastapi/README.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import asynccontextmanager\n\nimport flet as ft\nimport flet_fastapi\nfrom fastapi import FastAPI\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await flet_fastapi.app_manager.start()\n    yield\n    await flet_fastapi.app_manager.shutdown()\n\napp = FastAPI(lifespan=lifespan)\n\nasync def main(page: ft.Page):\n    await page.add_async(ft.Text(\"Hello, Flet!\"))\n\napp.mount(\"/flet-app\", flet_fastapi.app(main))\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry on macOS\nDESCRIPTION: Bash command to install Poetry package manager on macOS systems using curl.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://install.python-poetry.org | python3 -\n```\n\n----------------------------------------\n\nTITLE: Installing Flet Package with pip\nDESCRIPTION: Command to install the Flet Python package using pip. This is a prerequisite for running any Flet application.\nSOURCE: https://github.com/flet-dev/flet/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install flet\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter with FVM\nDESCRIPTION: Use Flutter Version Manager (FVM) to install Flutter version 3.24.3 and set it as the global version.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nfvm install 3.24.3\nfvm global 3.24.3\n```\n\n----------------------------------------\n\nTITLE: Installing Flet Python Module with pip\nDESCRIPTION: Command to install the Flet Python module using pip package manager. Requires Python 3.7 or above.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flet\n```\n\n----------------------------------------\n\nTITLE: Configuring FVM PATH\nDESCRIPTION: Add FVM's Flutter installation to the PATH for system-wide access.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\necho 'export PATH=$HOME/fvm/default/bin:$PATH' >> ~/.zprofile\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth Providers in Flet\nDESCRIPTION: Example showing how to import OAuth providers from the flet.auth.providers module, specifically importing the GitHubOAuthProvider class for authentication functionality.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flet.auth.providers import GitHubOAuthProvider\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn for Production\nDESCRIPTION: Command to install Gunicorn, a production-grade WSGI HTTP server, using pip.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-web/src/flet_web/fastapi/README.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install gunicorn\n```\n\n----------------------------------------\n\nTITLE: Setting Color Opacity in Flet (Python)\nDESCRIPTION: Two methods for setting color opacity in Flet: using the comma syntax with color values or using the with_opacity function from ft.colors module.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncolor=red,0.5\n# or\nft.colors.with_opacity(0.5, \"red\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flet Environment Variables on Linux\nDESCRIPTION: Commands to set FLET_VIEW_PATH and FLET_WEB_PATH environment variables on Linux systems for Flutter client development.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Flet\nexport FLET_VIEW_PATH=\"$HOME/{path-to-flet}/flet/client/build/linux/{arch}/release/bundle\"\nexport FLET_WEB_PATH=\"$HOME/{path-to-flet}/flet/client/build/web\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Flet Package Dependencies with Mermaid Diagram\nDESCRIPTION: A Mermaid diagram showing the hierarchical relationships between Flet packages. It illustrates how flet-core is a dependency for both flet-runtime and flet-pyodide, and how flet-runtime is a dependency for both flet-embed and flet.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/README.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    flet-core-->flet-runtime;\n    flet-core-->flet-pyodide;\n    flet-runtime-->flet-embed;\n    flet-runtime-->flet;\n```\n\n----------------------------------------\n\nTITLE: Verifying Python installation\nDESCRIPTION: Check the installed Python version and its location to ensure correct setup.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nwhich python\n```\n\n----------------------------------------\n\nTITLE: Running a Flet Application in Development Mode\nDESCRIPTION: Command to run a Flet Python application in development mode with web server enabled on port 8550. Changes to the source file will trigger hot reload.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npoetry run flet run -w -p 8550 playground/<your-main.py>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Python SDK Directory\nDESCRIPTION: Command to change directory to the Python SDK folder in the Flet project.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd sdk/python\n```\n\n----------------------------------------\n\nTITLE: Running a Flet Python Application\nDESCRIPTION: Command to execute a Flet application Python script. This launches the application in a native OS window by default.\nSOURCE: https://github.com/flet-dev/flet/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython counter.py\n```\n\n----------------------------------------\n\nTITLE: Displaying Property Settings in pyproject.toml\nDESCRIPTION: Example of setting Android manifest <application> element properties in pyproject.toml configuration file.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntool.flet.splash.icon_bgcolor = \"#FFFFFF\"\ntool.flet.splash.icon_dark_bgcolor = \"#000000\"\ntool.flet.app.boot_screen = \"custom_boot_screen.png\"\ntool.flet.app.startup_screen = \"custom_startup_screen.png\"\n```\n\n----------------------------------------\n\nTITLE: Running Flet App as a Desktop Application\nDESCRIPTION: Command to run a Flet application as a native desktop application in an OS window.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflet run main.py\n```\n\n----------------------------------------\n\nTITLE: Material Colors and Icons Reference Links\nDESCRIPTION: Documentation links for Material Design color system and icon implementations in Flutter\nSOURCE: https://github.com/flet-dev/flet/blob/main/docs/roadmap.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Colors\n\n* [Full list of Material colors](https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/material/colors.dart)\n* [Themed colors](https://api.flutter.dev/flutter/material/ColorScheme-class.html)\n* [Material color roles](https://m3.material.io/styles/color/the-color-system/color-roles)\n\n## Icons\n\n[Full list of Material icons](https://raw.githubusercontent.com/flutter/flutter/master/packages/flutter/lib/src/material/icons.dart)\n```\n\n----------------------------------------\n\nTITLE: Running Flet-FastAPI App with Gunicorn in Production\nDESCRIPTION: Command to start the Gunicorn server with Uvicorn workers to run the Flet-FastAPI application in a production environment.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-web/src/flet_web/fastapi/README.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn -k uvicorn.workers.UvicornWorker counter:app\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command for Flutter iOS Project\nDESCRIPTION: Terminal command to open the Flutter iOS project workspace in Xcode for asset customization.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Cloning the Flet Repository\nDESCRIPTION: Command to clone the Flet repository from GitHub to your local machine.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flet-dev/flet\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up custom commands to run the Flutter tool backend for generating necessary files. Creates a phony output to ensure the command runs every time and defines a custom target for Flutter assembly.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/flutter/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Client for Web\nDESCRIPTION: Command to build the Flet Flutter client for web browsers. The build output will be placed in the client/build/web directory.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nflutter build web\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library in CMake\nDESCRIPTION: Builds the static library for Flutter plugin development, containing the core and plugin wrapper sources. Sets properties for position-independent code and proper linking against the Flutter interface.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/flutter/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Library in CMake for Windows\nDESCRIPTION: Defines the Flutter Windows library, its headers, and dependencies. This section creates the core Flutter interface library that projects will link against.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/flutter/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules and System Dependencies\nDESCRIPTION: Includes Flutter library build rules and sets up system-level dependencies, particularly GTK for the Linux build.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build with CMake\nDESCRIPTION: Configures the build settings for a Flutter Windows desktop application executable. Sets up the target with necessary source files, applies standard build settings, defines version information, and links required dependencies including Flutter libraries.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/runner/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\") \ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings including C++17 standard and compiler options.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic CMake Configuration for Flet Project\nDESCRIPTION: Initializes the CMake project with core settings including minimum required version, project name, language specification, binary name, and application ID for GTK.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"flet\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.appveyor.flet\")\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources for Flutter in CMake\nDESCRIPTION: Lists and transforms the C++ wrapper source files for the core, plugin, and app components of the Flutter engine. These sources are used to build the wrapper libraries.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/flutter/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring Python with Pyenv\nDESCRIPTION: Install Python 3.12.6 using Pyenv and set it as the global Python version.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npyenv install 3.12.6\npyenv global 3.12.6\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines the list of Flutter library headers required for the build and configures include directories and link libraries for the Flutter interface library.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/flutter/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry on Windows\nDESCRIPTION: PowerShell command to install Poetry package manager on Windows systems. Adds Python scripts to PATH.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: Sets the default build type to Debug if not specified and defines available build configuration types (Debug, Profile, Release).\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Poetry\nDESCRIPTION: Command to run pytest within Poetry's virtual environment for the Flet project.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target and Dependencies\nDESCRIPTION: Creates the executable target for the application and links required libraries including Flutter and GTK.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: Includes Flutter plugin build rules that manage building plugins and adding them to the application.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Flet Environment Variables on macOS\nDESCRIPTION: Commands to set FLET_VIEW_PATH and FLET_WEB_PATH environment variables on macOS, which are required for Flutter client development.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Flet\nexport FLET_VIEW_PATH=\"$HOME/{path-to-flet}/flet/client/build/macos/Build/Products/Release\"\nexport FLET_WEB_PATH=\"$HOME/{path-to-flet}/flet/client/build/web\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Environment Variables for Edge on macOS\nDESCRIPTION: Command to set CHROME_EXECUTABLE environment variable to use Microsoft Edge for debugging Flutter apps on macOS.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Flutter\nexport CHROME_EXECUTABLE=\"/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge\"\n```\n\n----------------------------------------\n\nTITLE: Installing Application Binary and Flutter Resources\nDESCRIPTION: Configures installation of the application binary and Flutter resources including ICU data and the Flutter library.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries and Native Assets\nDESCRIPTION: Installs plugin bundled libraries and native assets required by the application.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library\nDESCRIPTION: Installs Flutter assets with a clean directory each time, and installs the AOT library for non-Debug builds only.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Build Custom Command Configuration\nDESCRIPTION: Sets up custom build commands to generate Flutter library and headers using the Flutter tool backend. Creates a phony target to ensure the command runs on every build.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/flutter/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing xz libraries with Homebrew\nDESCRIPTION: Use Homebrew to install xz libraries, which are required for the development environment.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nbrew install xz\n```\n\n----------------------------------------\n\nTITLE: Configuring shell environment for Pyenv\nDESCRIPTION: Add Pyenv configuration to the shell profile to ensure proper integration.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zprofile\necho '[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zprofile\necho 'eval \"$(pyenv init -)\"' >> ~/.zprofile\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring Ruby with Rbenv\nDESCRIPTION: Install Ruby 3.3.5 using Rbenv and set it as the global Ruby version.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nrbenv install 3.3.5\nrbenv global 3.3.5\n```\n\n----------------------------------------\n\nTITLE: Verifying Ruby installation\nDESCRIPTION: Check the installed Ruby version and its location to ensure correct setup.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nruby --version\nwhich ruby\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry PATH\nDESCRIPTION: Add Poetry's bin directory to the PATH to ensure it can be run from anywhere.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\necho 'export PATH=$HOME/.local/bin:$PATH' >> ~/.zprofile\n```\n\n----------------------------------------\n\nTITLE: Verifying Poetry installation\nDESCRIPTION: Check the installed Poetry version to ensure it's properly set up.\nSOURCE: https://github.com/flet-dev/flet/blob/main/CONTRIBUTING.md#2025-04-20_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npoetry --version\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Runtime Path\nDESCRIPTION: Sets modern CMake behaviors and configures the runtime path to load bundled libraries from the lib directory relative to the binary.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Root Filesystem\nDESCRIPTION: Sets up the root filesystem for cross-building if a target platform sysroot is specified, including find root path modes for programs, packages, libraries, and includes.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings including C++14 standard, warning flags, optimization levels, and debug/release definitions.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror -Wno-unused-variable -Wno-unused-function)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Implementation in CMake\nDESCRIPTION: Helper function that prepends a prefix to each element in a list, providing functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/flutter/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Settings in CMake\nDESCRIPTION: Sets up basic project configuration including minimum CMake version and project language specification.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(flet LANGUAGES CXX)\n\nset(BINARY_NAME \"flet\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types in CMake\nDESCRIPTION: Defines build configuration types (Debug, Profile, Release) and handles multi-configuration generators.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules\nDESCRIPTION: Sets up installation rules for the application bundle including executable, libraries, and assets.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library in CMake\nDESCRIPTION: Builds the static library for Flutter application development, containing the core and app wrapper sources. Sets up proper linking against the Flutter interface library.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/windows/flutter/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings\nDESCRIPTION: Sets up installation directories and ensures a clean build bundle directory for each build.\nSOURCE: https://github.com/flet-dev/flet/blob/main/client/linux/CMakeLists.txt#2025-04-20_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running a Python Flet Application\nDESCRIPTION: Command to run a Python Flet application from the command line. This starts the Fletd web server on port 8550 which acts as a bridge between Python and Flutter.\nSOURCE: https://github.com/flet-dev/flet/blob/main/packages/flet/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython counter.py\n```\n\n----------------------------------------\n\nTITLE: Installing Flet for FastAPI\nDESCRIPTION: Command to install the Flet-FastAPI integration package using pip.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-web/src/flet_web/fastapi/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flet-fastapi\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn Web Server\nDESCRIPTION: Command to install Uvicorn, a lightweight ASGI server, using pip.\nSOURCE: https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-web/src/flet_web/fastapi/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install uvicorn\n```"
  }
]