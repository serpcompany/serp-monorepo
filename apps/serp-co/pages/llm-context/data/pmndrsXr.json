[
  {
    "owner": "pmndrs",
    "repo": "xr",
    "content": "TITLE: Complete Teleportation VR Application Component\nDESCRIPTION: A full implementation of a React component that combines all teleportation elements into a working VR application. It includes store configuration, position state management, VR entry button, and the 3D scene with teleport targets.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/teleport.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst store = createXRStore({\n  hand: { teleportPointer: true },\n  controller: { teleportPointer: true },\n})\n\nexport function App() {\n  const [position, setPosition] = useState(new Vector3())\n  return (\n    <>\n      <button onClick={() => store.enterVR()}>Enter VR</button>\n      <Canvas>\n        <XR store={store}>\n          <ambientLight />\n          <XROrigin position={position} />\n          <TeleportTarget onTeleport={setPosition}>\n            <mesh scale={[10, 1, 10]} position={[0, -0.5, 0]}>\n              <boxGeometry />\n              <meshBasicMaterial color=\"green\" />\n            </mesh>\n          </TeleportTarget>\n        </XR>\n      </Canvas>\n    </>\n )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Three Fiber XR Application\nDESCRIPTION: A complete example of a React Three Fiber XR application with a color-changing 3D box that toggles between red and blue when clicked. Shows how to create an XR store, implement an AR entry button, and wrap 3D content in the XR component.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/introduction.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber'\nimport { XR, createXRStore } from '@react-three/xr'\nimport { useState } from 'react'\n\nconst store = createXRStore()\n\nexport function App() {\n  const [red, setRed] = useState(false)\n  return <>\n    <button onClick={() => store.enterAR()}>Enter AR</button>\n    <Canvas>\n      <XR store={store}>\n        <mesh pointerEventsType={{ deny: 'grab' }} onClick={() => setRed(!red)} position={[0, 1, -1]}>\n          <boxGeometry />\n          <meshBasicMaterial color={red ? 'red' : 'blue'} />\n        </mesh>\n      </XR>\n    </Canvas>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing XR Controller Locomotion in React Three Fiber\nDESCRIPTION: Examples demonstrating basic XR controller locomotion implementation, including both standard movement and integration with Rapier physics engine. Shows how to handle user movement and rotation in VR space.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/all-hooks.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Example showing basic usage\nexport const userMovement = () => {\n  const originRef = useRef<THREE.Group>(null);\n   useXRControllerLocomotion(originRef);\n  return <XROrigin ref={originRef} />\n}\n\n// Example using rapier physics\nexport const userMovementWithPhysics = () => {\n  const userRigidBodyRef = useRef<RapierRigidBody>(null);\n\n  const userMove = (inputVector: Vector3, rotationInfo: Euler) => {\n    if (userRigidBodyRef.current) {\n      const currentLinvel = userRigidBodyRef.current.linvel()\n      const newLinvel = { x: inputVector.x, y: currentLinvel.y, z: inputVector.z }\n      userRigidBodyRef.current.setLinvel(newLinvel, true)\n      userRigidBodyRef.current.setRotation(new Quaternion().setFromEuler(rotationInfo), true)\n    }\n  }\n\n  useXRControllerLocomotion(userMove)\n\n  return <>\n    <RigidBody\n      ref={userRigidBodyRef}\n      colliders={false}\n      type='dynamic'\n      position={[0, 2, 0]}\n      enabledRotations={[false, false, false]}\n      canSleep={false}\n    >\n      <CapsuleCollider args={[.3, .5]} />\n      <XROrigin position={[0, -1, 0]} />\n    </RigidBody>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Three XR Application Setup\nDESCRIPTION: Example showing how to create a basic XR-enabled React Three Fiber application with an interactive mesh that changes color on click. Demonstrates XR store creation, AR entry, and basic interaction handling.\nSOURCE: https://github.com/pmndrs/xr/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber'\nimport { XR, createXRStore } from '@react-three/xr'\nimport { useState } from 'react'\n\nconst store = createXRStore()\n\nexport function App() {\n  const [red, setRed] = useState(false)\n  return (\n    <>\n      <button onClick={() => store.enterAR()}>Enter AR</button>\n      <Canvas>\n        <XR store={store}>\n          <mesh pointerEventsType={{ deny: 'grab' }} onClick={() => setRed(!red)} position={[0, 1, -1]}>\n            <boxGeometry />\n            <meshBasicMaterial color={red ? 'red' : 'blue'} />\n          </mesh>\n        </XR>\n      </Canvas>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive AR Experience with DOM Overlay in TSX\nDESCRIPTION: This code snippet demonstrates a complete AR experience using WebXR and the XRDomOverlay component. It includes an 'Enter AR' button and an interactive overlay that changes color when clicked. The example uses React hooks and a custom XR store.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/dom-overlay.md#2025-04-11_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst store = createXRStore()\n\nexport function App() {\n  const [bool, setBool] = useState(false)\n  return (\n    <>\n      <button onClick={() => store.enterAR()}>Enter AR</button>\n      <Canvas>\n        <XR store={store}>\n          <ambientLight />\n          <XRDomOverlay\n            style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n          >\n            <div\n              style={{ backgroundColor: bool ? 'red' : 'green', padding: '1rem 2rem' }}\n              onClick={() => setBool((b) => !b)}\n            >\n Hello World\n            </div>\n          </XRDomOverlay>\n        </XR>\n      </Canvas>\n    </>\n )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable XR Experience with XROrigin in React Three Fiber\nDESCRIPTION: This snippet shows how to use the XROrigin component to create a resizable XR experience. It demonstrates scaling and repositioning the XROrigin based on a state variable, allowing the user to switch between normal and miniature views of the scene.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/origin.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst store = createXRStore()\n\nfunction App() {\n  const [miniature, setMinitature] = useState(false)\n  return (\n    <>\n      <button onClick={() => store.enterAR()}>Enter VR</button>\n      <Canvas>\n        <XR store={store}>\n          <Gltf src=\"model.glb\" />\n          <XROrigin scale={miniature ? 0.01 : 1} position-y={miniature ? -1 : 0} />\n        </XR>\n      </Canvas>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complete AR Anchor Component Implementation with react-three/xr\nDESCRIPTION: A complete example of an Anchor component that uses useXRAnchor to create an anchor at the right hand or controller position when selected, and renders a box at that position.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/anchors.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Anchor() {\n  const [anchor, requestAnchor] = useXRAnchor()\n  const controllerState = useXRInputSourceState('controller', 'right')\n  const handState = useXRInputSourceState('hand', 'right')\n  const inputSource = controllerState?.inputSource ?? handState?.inputSource\n  useXRInputSourceEvent(\n    inputSource,\n    'select',\n    async () => {\n      if (inputSource == null) {\n        return\n      }\n      requestAnchor({ relativeTo: 'space', space: inputSource.targetRaySpace })\n    },\n    [requestAnchor, inputSource],\n  )\n  if (anchor == null) {\n    return null\n  }\n  return (\n    <XRSpace space={anchor.anchorSpace}>\n      <mesh scale={0.1}>\n        <boxGeometry />\n      </mesh>\n    </XRSpace>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Component replacement examples for migrating from Natuerlich to @react-three/xr\nDESCRIPTION: Examples showing the equivalent components and structure when moving from Natuerlich to @react-three/xr. This includes replacing ImmersiveSessionOrigin with XROrigin, changing XRCanvas to a Canvas+XR combination, and using createXRStore for configuration.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/migration/from-natuerlich.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- use `XROrigin` instead of `ImmersiveSessionOrigin`\n- use `<Canvas><XR>...</XR></Canvas>` instead of `XRCanvas`\n- configure settings such as `foveation` through `createXRStore`\n- use `store.enterXR` instead of `useEnterXR`\n- use `DragControls` **TBD** instead of `Grabbale`\n- don't add hands and controllers yourself, and configure them through the `createXRStore` options. Click [here](../tutorials/custom-inputs.md) for more info regarding controller/hand/... customization.\n- use teleport as described [here](../tutorials/teleport.md)\n```\n\n----------------------------------------\n\nTITLE: Basic Three.js XR Scene Implementation\nDESCRIPTION: Example showing how to create a basic Three.js scene with XR capabilities, including a clickable mesh that changes color and proper rendering setup. Demonstrates scene initialization, XR store creation, animation loop, and window resize handling.\nSOURCE: https://github.com/pmndrs/xr/blob/main/packages/xr/README.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createXRStore } from '@pmndrs/xr'\nimport { BoxGeometry, Mesh, MeshBasicMaterial, PerspectiveCamera, Scene, WebGLRenderer } from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\n\nconst camera = new PerspectiveCamera(70, 1, 0.01, 100)\nconst scene = new Scene()\nconst canvas = document.getElementById('root') as HTMLCanvasElement\nconst renderer = new WebGLRenderer({ antialias: true, canvas, alpha: true })\n\nconst boxMaterial = new MeshBasicMaterial({ color: 'red' })\nconst box = new Mesh(new BoxGeometry(), boxMaterial)\nbox.pointerEventsType = { deny: 'grab' }\nlet red = false\nbox.addEventListener('click', () => {\n  red = !red\n  boxMaterial.color.set(red ? 'red' : 'blue')\n})\nscene.add(box)\n\nconst store = createXRStore(canvas, scene, camera, renderer.xr)\ndocument.getElementById('enter-ar')?.addEventListener('click', () => store.enterAR())\n\nlet prevTime: undefined | number\n\nrenderer.setAnimationLoop((time, frame) => {\n  const delta = prevTime == null ? 0 : time - prevTime\n  prevTime = time\n  store.update(frame, delta)\n  renderer.render(scene, camera)\n})\n\nfunction updateSize() {\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  renderer.setPixelRatio(window.devicePixelRatio)\n  camera.aspect = window.innerWidth / window.innerHeight\n  camera.updateProjectionMatrix()\n}\n\nupdateSize()\nwindow.addEventListener('resize', updateSize)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic VR Locomotion with XR Controller Gamepad\nDESCRIPTION: This example demonstrates how to create a simple VR locomotion system that reads thumbstick input from the right controller to move the XROrigin. It sets up the XR store, creates a basic scene with a floor, and implements the locomotion logic using the controller's gamepad thumbstick values.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/gamepad.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst store = createXRStore()\n\nexport function App() {\n  return (\n    <>\n      <button onClick={() => store.enterVR()}>Enter VR</button>\n      <Canvas>\n        <XR store={store}>\n          <ambientLight />\n          <Locomotion />\n          <mesh scale={[10, 1, 10]} position={[0, -0.5, 0]}>\n            <boxGeometry />\n            <meshBasicMaterial color=\"green\" />\n          </mesh>\n        </XR>\n      </Canvas>\n    </>\n  )\n}\n\nfunction Locomotion() {\n  const controller = useXRInputSourceState('controller', 'right')\n  const ref = useRef<Group>(null)\n  useFrame((_, delta) => {\n    if (ref.current == null || controller == null) {\n      return\n    }\n    const thumstickState = controller.gamepad['xr-standard-thumbstick']\n    if (thumstickState == null) {\n      return\n    }\n    ref.current.position.x += (thumstickState.xAxis ?? 0) * delta\n    ref.current.position.z += (thumstickState.yAxis ?? 0) * delta\n  })\n  return <XROrigin ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing XR Roller Coaster with XROrigin in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to create an XR roller coaster experience using the XROrigin component. It includes setting up the XR store, creating a Canvas with a roller coaster model, and positioning the XROrigin within the moving roller coaster seat.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/origin.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst store = createXRStore({\n  controller: false,\n})\n\nexport function App() {\n  return (\n    <>\n      <button onClick={() => store.enterVR()}>Enter VR</button>\n      <Canvas>\n        <directionalLight position={[1, 1, 1]} />\n        <ambientLight />\n        <OrbitControls />\n        <XR store={store}>\n          <RollerCoaster />\n        </XR>\n      </Canvas>\n    </>\n  )\n}\n\nfunction RollerCoaster() {\n  const gltf = useGLTF('rollercoaster.glb')\n\n  const mixer = useMemo(() => new AnimationMixer(gltf.scene), [])\n  useEffect(() => {\n    for (const animation of gltf.animations) {\n      mixer.clipAction(animation).play()\n    }\n  }, [gltf, mixer])\n  useFrame((state, delta) => mixer.update(delta))\n  return (\n    <>\n      <primitive object={gltf.scene} />\n      {createPortal(\n        <group rotation-y={-Math.PI / 2} rotation-x={Math.PI / 2}>\n          <XROrigin scale={0.24} position-y={-0.1} />\n        </group>,\n        gltf.scene.getObjectByName('Sessel')!,\n      )}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complete WebXR Video Layer Application\nDESCRIPTION: A complete React Three Fiber application that creates a WebXR scene with a video layer. It combines the video element creation and the XRLayer component within a Canvas and XR context.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/layers.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App() {\n  const video = useMemo(() => {\n    const result = document.createElement('video')\n    result.src = 'test.mp4'\n    return result\n  }, [])\n  return (\n    <Canvas>\n      <XR store={store}>\n        <XRLayer position={[0, 1.5, -0.5]} onClick={() => video.play()} scale={0.5} src={video} />\n      </XR>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Hit Testing with XRHitTest in React Three XR\nDESCRIPTION: This code snippet demonstrates how to set up hit testing for the right hand using the XRHitTest component. It uses a matrix helper and a vector to store the world position of the hit test result.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/hit-test.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst matrixHelper = new Matrix4()\nconst hitTestPosition = new Vector3()\n\nconst store = createXRStore({\n  hand: {\n    right: () => {\n      const state = useXRHandState()\n      return (\n        <>\n          <XRHandModel />\n          <XRHitTest\n            space={state.inputSource.targetRaySpace}\n            onResults={(results, getWorldMatrix) => {\n              if (results.length === 0) {\n                return\n              }\n              getWorldMatrix(matrixHelper, results[0])\n              hitTestPosition.setFromMatrixPosition(matrixHelper)\n            }}\n          />\n        </>\n      )\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Handle Component Implementation in React Three Fiber\nDESCRIPTION: Example showing how to implement a Handle component to enable scaling of a cube by dragging it outward from its center.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/handles/handle-component.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Handle translate=\"as-scale\" scale={{ uniform: true }}>\n    <mesh>\n        <boxGeometry />\n    </mesh>\n</Handle>\n```\n\n----------------------------------------\n\nTITLE: Using IfInSessionMode Guard with @react-three/xr\nDESCRIPTION: This example demonstrates how to conditionally render content based on XR session mode. It creates an XR store, provides an 'Enter AR' button, and uses the IfInSessionMode guard to only display a red background when not in AR mode.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/guards.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber'\nimport { IfInSessionMode, XR, createXRStore } from '@react-three/xr'\n\nconst store = createXRStore()\n\nexport function App() {\n  return (\n    <>\n      <button onClick={() => store.enterAR()}>Enter AR</button>\n      <Canvas>\n        <XR store={store}>\n          <IfInSessionMode deny=\"immersive-ar\">\n            <color args={['red']} attach=\"background\" />\n          </IfInSessionMode>\n        </XR>\n      </Canvas>\n    </>\n )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XR Store Session Parameters\nDESCRIPTION: Configuration options for initializing and controlling XR sessions, including layer management, detection capabilities, input handling, and session types.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/store.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  layers: true,\n  meshDetection: true,\n  planeDetection: true,\n  depthSensing: false,\n  customSessionInit: undefined,\n  hitTest: true,\n  domOverlay: true,\n  secondaryInputSources: false,\n  offerSession: true\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic 3D Content to an XRLayer\nDESCRIPTION: Creates an XRLayer that renders a dynamic 3D scene with a red cube. Unlike the video example, this demonstrates how to render Three.js meshes directly onto a layer for fully dynamic content that updates every frame.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/layers.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<XRLayer position={[0, 1.5, -0.5]} scale={0.5}>\n  <mesh>\n    <boxGeometry />\n    <meshBasicMaterial color=\"red\" />\n  </mesh>\n</XRLayer>\n```\n\n----------------------------------------\n\nTITLE: Rendering Detected Wall Planes in WebXR using React\nDESCRIPTION: This code demonstrates how to use the useXRPlanes hook to detect wall planes in AR/VR environments and render them with a red material. It maps through detected planes, positions them using XRSpace, and applies styling with XRPlaneModel.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/object-detection.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RedWalls() {\n  const wallPlanes = useXRPlanes('wall')\n  return (\n    <>\n      {wallPlanes.map((plane) => (\n        <XRSpace space={plane.planeSpace}>\n          <XRPlaneModel plane={plane}>\n            <meshBasicMaterial color=\"red\" />\n          </XRPlaneModel>\n        </XRSpace>\n ))}    \n</>\n )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Camera Position in XR with React Three Fiber\nDESCRIPTION: This snippet demonstrates how to read the current global camera position in XR using the useFrame hook from React Three Fiber. It works both inside and outside of XR sessions.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/faq.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseFrame((state) => console.log(state.camera.getWorldPosition(new Vector3())))\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive 3D Scene with React Three Handle\nDESCRIPTION: Example of how to use @react-three/handle to create an interactive 3D scene with a red cube that can be manipulated in XR and non-XR applications. It demonstrates the usage of Canvas, PointerEvents, Environment, and Handle components.\nSOURCE: https://github.com/pmndrs/xr/blob/main/packages/react/handle/README.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber'\nimport { noEvents, PointerEvents } from '@react-three/xr'\nimport { Handle } from '@react-three/handle'\n\nexport function App() {\n  return (\n    <Canvas events={noEvents}>\n      <PointerEvents />\n      <Environment preset=\"city\" />\n      <Handle>\n        <mesh position-z={-1}>\n          <boxGeometry />\n          <meshStandardMaterial color=\"red\" />\n        </mesh>\n      </Handle>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Door with Handles in React Three Fiber\nDESCRIPTION: This code snippet demonstrates how to create a 3D door with interactive handles using @react-three/handle. It separates the door components and wraps them with Handle and HandleTarget components for interaction.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/handles/introduction.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Door() {\n  const { nodes, materials } = useGLTF('/door.glb')\n  return (\n    <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>\n      <group position={[-0.435, -0.101, 0.249]}>\n        <HandleTarget>\n          <mesh geometry={nodes.Plane001_Glossy_0.geometry} material={materials.Glossy} />\n          <mesh geometry={nodes.Plane001_Door_0.geometry} material={materials.Door} />\n          <mesh geometry={nodes.Plane003_Door_0.geometry} material={materials.Door} position={[0.852, 0.017, 0.782]} />\n          <Handle targetRef=\"from-context\" translate=\"as-rotate\" rotate={{ x: false, y: false, z: [-Math.PI, 0] }}>\n            <group position={[0.81, 0.043, 0.803]}>\n              <mesh geometry={nodes.Circle002_Glossy_0.geometry} material={materials.Glossy} />\n            </group>\n          </Handle>\n        </HandleTarget>\n      </group>\n      <mesh geometry={nodes.Plane002_Glossy_0.geometry} material={materials.Glossy} />\n      <mesh geometry={nodes.Plane002_Door_0.geometry} material={materials.Door} />\n    </group>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Scene with XR Component in React\nDESCRIPTION: Wrapping the existing scene with the XR component and passing the XR store. This final step makes the application usable with AR or VR headsets.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/convert-to-xr.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n    <button onClick={() => store.enterVR()}>Enter VR</button>\n    <button onClick={() => store.enterAR()}>Enter AR</button>\n    <Canvas>\n        <XR store={store}>\n ...your scene\n        </XR>\n    </Canvas>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing XRDomOverlay Component in TSX for WebXR\nDESCRIPTION: This snippet shows how to use the XRDomOverlay component to add an HTML div element as an overlay in a WebXR experience. The overlay is centered and displays a red 'Hello World' message.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/dom-overlay.md#2025-04-11_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n<XRDomOverlay\n  style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n>\n  <div style={{ backgroundColor: 'red', padding: '1rem 2rem' }}>Hello World</div>\n</XRDomOverlay>\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable 3D Cube with Pointer Events\nDESCRIPTION: Demonstrates how to implement a simple dragging interaction using pointer events. This component tracks the dragging state with a ref and updates the mesh position based on pointer movement. Note that this implementation works only for meshes not inside transformed groups.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/interactions.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DraggableCube() {\n  const isDraggingRef = useRef(false)\n  const meshRef = useRef<Mesh>(null)\n\n  return (\n    <mesh\n      ref={meshRef}\n      onPointerDown={(e) => {\n        if (isDraggingRef.current) {\n          return\n }\n        isDraggingRef.current = true\n        meshRef.position.copy(e.point)\n }}\n      onPointerMove={(e) => {\n        if (!isDraggingRef.current) {\n          return\n }\n        meshRef.position.copy(e.point)\n }}\n      onPointerUp={(e) => (isDraggingRef.current = false)}\n    >\n      <boxGeometry />\n    </mesh>\n )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Video Layer in WebXR with React Three Fiber\nDESCRIPTION: Creates an XRLayer component positioned in 3D space that displays a video and plays it when clicked. The component is scaled to 0.5 of its original size and positioned at coordinates [0, 1.5, -0.5].\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/layers.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<XRLayer position={[0, 1.5, -0.5]} onClick={() => video.play()} scale={0.5} src={video} />\n```\n\n----------------------------------------\n\nTITLE: Implementing OrbitHandles with PointerEvents in React Three Fiber\nDESCRIPTION: Basic code setup for adding OrbitHandles to a React Three Fiber Canvas. This requires disabling the built-in event system and adding the PointerEvents component from @react-three/xr to handle interactions appropriately.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/handles/screen-handle-components.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OrbitHandles } from '@react-three/handles'\nimport { noEvents, PointerEvents } from '@react-three/xr'\n\n<Canvas events={noEvents}>\n  <PointerEvents />\n  <OrbitHandles />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance with CombinedPointer in Three.js\nDESCRIPTION: Example demonstrating how to improve performance when using multiple pointers simultaneously by combining them with CombinedPointer. This reduces scene graph traversals by calculating intersections once per combined pointer.\nSOURCE: https://github.com/pmndrs/xr/blob/main/packages/pointer-events/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nleftGrabPointer.move()\nleftTouchPointer.move()\nleftRayPointer.move()\nrightGrabPointer.move()\nrightTouchPointer.move()\nrightRayPointer.move()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst leftPointer = new CombinedPointer()\nconst rightPointer = new CombinedPointer()\nleftPointer.register(leftGrabPointer)\nleftPointer.register(leftTouchPointer)\nleftPointer.register(leftRayPointer)\nrightPointer.register(rightGrabPointer)\nrightPointer.register(rightTouchPointer)\nrightPointer.register(rightRayPointer)\n\nleftPointer.move()\nrightPointer.move()\n```\n\n----------------------------------------\n\nTITLE: Setting Up OrbitHandles for XR in React Three Fiber\nDESCRIPTION: This code snippet shows how to set up OrbitHandles from @react-three/handles for XR sessions. It includes the necessary components and event handling setup to prevent conflicts with WebXR camera controls.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/faq.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OrbitHandles } from '@react-three/handles'\nimport { noEvents, PointerEvents } from '@react-three/xr'\n\n<Canvas events={noEvents}>\n  <PointerEvents />\n  <OrbitHandles />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: XR Store Control Functions\nDESCRIPTION: Core functions for managing XR sessions, including session initialization, input handling, and performance controls. These functions enable runtime control and modification of XR experiences.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/store.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  destroy: () => void,\n  enterXR: (mode) => Promise<XRSession | undefined>,\n  enterAR: () => Promise<XRSession | undefined>,\n  enterVR: () => Promise<XRSession | undefined>,\n  setHand: (implementation, handedness?) => void,\n  setController: (implementation, handedness?) => void,\n  setGaze: (implementation) => void,\n  setScreenInput: (implementation) => void,\n  setTransientPointer: (implementation, handedness?) => void,\n  setFrameRate: (value) => void,\n  requestFrame: () => Promise<XRFrame>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for WebXR Development with React and SSL\nDESCRIPTION: A basic Vite configuration for developing WebXR applications. It includes the React plugin for hot module reloading and the Basic SSL plugin to enable HTTPS, which is required for WebXR experiences. After setup, the application can be exposed to the local network with the '--host' argument.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/development-setup.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport basicSsl from '@vitejs/plugin-basic-ssl'\n\nexport default defineConfig({\n  plugins: [react(), basicSsl()],\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving XR Session with useXR Hook in React\nDESCRIPTION: Demonstrates how to use the useXR hook to access the current XR session state from any component within the XR component hierarchy. The hook accepts a selector function that extracts the desired state from the XR store.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/store.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst session = useXR(xr => xr.session)\n```\n\n----------------------------------------\n\nTITLE: Suspense Boundary for XR Scene Loading in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to properly set up a Suspense boundary around the scene content within an XR component. This ensures that the XR component remains mounted while the scene assets are loading.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/faq.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Canvas>\n  <XR>\n    <Suspense>... your scene</Suspense>\n  </XR>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Managing Teleportation Position State with React Hooks\nDESCRIPTION: Creates a state variable to track the user's current position in 3D space using React's useState hook. This gives full control over when and how teleportation updates the user's position.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/teleport.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [position, setPosition] = useState(new Vector3())\n```\n\n----------------------------------------\n\nTITLE: HandleTarget Component with Nested Handle Implementation\nDESCRIPTION: Example demonstrating how to use HandleTarget component with a nested Handle component to control a hierarchical structure of 3D objects.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/handles/handle-component.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<HandleTarget>\n    <group>\n        <mesh>\n            <boxGeometry />\n            <Handle targetRef=\"from-context\">\n                <mesh position-x={2}>  \n                    <boxGeometry />\n                </mesh>\n            </Handle>\n        </mesh>\n    </group>\n</HandleTarget>\n```\n\n----------------------------------------\n\nTITLE: Implementing onClick Handler with React-Three XR\nDESCRIPTION: A basic example showing how to attach a click event handler to a 3D mesh, which will work in both XR and non-XR environments. The event object contains useful information like the intersection point in world space.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/interactions.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<mesh onClick={(event) => console.log(\"I've been clicked\", event)}>\n  <boxGeometry />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Creating a Teleport Target in the Scene\nDESCRIPTION: Implements a teleport target with an onTeleport handler that updates the user's position when teleportation occurs. The target is visualized as a green platform that users can teleport to.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/teleport.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TeleportTarget onTeleport={setPosition}>\n    <mesh scale={[10, 1, 10]} position={[0, -0.5, 0]}>\n        <boxGeometry />\n        <meshBasicMaterial color=\"green\" />\n    </mesh>\n</TeleportTarget>\n```\n\n----------------------------------------\n\nTITLE: Enabling Teleport Pointers in XR Store Configuration\nDESCRIPTION: Configures the XR store to enable teleport pointers for both hands and controllers, which allows users to point and select teleportation destinations in VR.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/teleport.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst store = createXRStore({\n  hand: { teleportPointer: true },\n  controller: { teleportPointer: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Object Synced with Hit Test Position in React Three Fiber\nDESCRIPTION: This code snippet shows how to create a 3D sphere that syncs its position with the hit test result on every frame. It uses the useRef and useFrame hooks from React Three Fiber.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/hit-test.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Point() {\n  const ref = useRef<Mesh>(null)\n  useFrame(() => ref.current?.position.copy(hitTestPosition))\n  return (\n    <mesh scale={0.05} ref={ref}>\n      <sphereGeometry />\n      <meshBasicMaterial />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Fiber XR packages\nDESCRIPTION: Command to install the necessary dependencies for creating XR experiences with React Three Fiber, including three.js, @react-three/fiber, and the latest version of @react-three/xr.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/introduction.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @react-three/fiber @react-three/xr@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pointer Events in Three.js\nDESCRIPTION: A basic example showing how to set up pointer events in a Three.js scene. The code creates a cube that changes color when the pointer hovers over it, using the forwardHtmlEvents function to connect DOM events to the 3D scene.\nSOURCE: https://github.com/pmndrs/xr/blob/main/packages/pointer-events/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as THREE from 'three'\nimport { forwardHtmlEvents } from '@pmndrs/pointer-events'\n\nconst canvas = document.getElementById('canvas')\nconst scene = new THREE.Scene()\nconst camera = new THREE.PerspectiveCamera(70, width / height, 0.01, 10)\ncamera.position.z = 1\nconst { update } = forwardHtmlEvents(canvas, () => camera, scene)\n\nconst width = window.innerWidth,\n  height = window.innerHeight\n\nconst geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2)\nconst material = new THREE.MeshBasicMaterial({ color: new THREE.Color('red') })\nconst mesh = new THREE.Mesh(geometry, material)\nscene.add(mesh)\n\nmesh.addEventListener('pointerover', () => material.color.set('blue'))\nmesh.addEventListener('pointerout', () => material.color.set('red'))\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true })\nrenderer.setSize(width, height)\nrenderer.setAnimationLoop(() => {\n  update()\n  renderer.render(scene, camera)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing an Anchor with useXRAnchor in react-three/xr\nDESCRIPTION: Basic usage of the useXRAnchor hook which returns a tuple containing the current anchor and a function to request a new anchor.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/anchors.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst [anchor, requestAnchor] = useXRAnchor()\n```\n\n----------------------------------------\n\nTITLE: Configuring XR Store Controller Settings in TypeScript\nDESCRIPTION: Example demonstrating how to disable the default controller for the left hand when creating an XR store. This shows basic configuration using the controller option object.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/store.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateXRStore({\n  controller: { left: false },\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Controller Rendering Based on Input Source Type\nDESCRIPTION: Implementation showing how to render different controller visualizations based on whether the input source is primary or secondary. Primary controllers use the default XR controller component while secondary inputs are rendered as simple cubes.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/secondary-input-sources.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ncreateXRStore({\n  secondaryInputSources: true,\n  controller: () => {\n    const { isPrimary } = useXRInputSourceStateContext('controller')\n    if (isPrimary) {\n      return <DefaultXRController />\n    }\n    return (\n      <mesh>\n        <boxGeometry />\n      </mesh>\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding VR/AR Entry Buttons in React\nDESCRIPTION: Adding HTML buttons to enter VR and AR experiences using the XR store. These buttons are placed above the Canvas component containing the scene.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/convert-to-xr.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n    <button onClick={() => store.enterVR()}>Enter VR</button>\n    <button onClick={() => store.enterAR()}>Enter AR</button>\n    <Canvas>\n ...your scene\n    </Canvas>\n</>\n```\n\n----------------------------------------\n\nTITLE: Rendering Content in an AR Anchor with XRSpace in react-three/xr\nDESCRIPTION: How to use the XRSpace component to render content in an anchor's space once the anchor has been created.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/anchors.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<XRSpace space={anchor.anchorSpace}>...your content</XRSpace>\n```\n\n----------------------------------------\n\nTITLE: Enabling Secondary Input Sources in XR Store\nDESCRIPTION: Basic configuration to enable secondary input source tracking in the XR store. This allows access to additional input sources beyond the primary controller inputs.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/secondary-input-sources.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateXRStore({ secondaryInputSources: true })\n```\n\n----------------------------------------\n\nTITLE: Applying Position to XR Origin\nDESCRIPTION: Sets the position of the XR origin component based on the current position state, which moves the user's viewpoint in the virtual environment.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/teleport.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<XROrigin position={position}>\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Hand Implementation in React Three Fiber\nDESCRIPTION: This is the full implementation of a custom hand component that renders a hand model with a touch interaction using the middle finger.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/custom-inputs.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport function CustomHand() {\n  const state = useXRInputSourceStateContext('hand')\n  const middleFingerRef = useRef<Object3D>(null)\n  const pointer = useTouchPointer(middleFingerRef, state)\n  return (\n    <>\n      <XRSpace ref={middleFingerRef} space={state.inputSource.hand.get('middle-finger-tip')!} />\n      <Suspense>\n        <XRHandModel />\n      </Suspense>\n      <PointerCursorModel pointer={pointer} opacity={defaultTouchPointerOpacity} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating XR Store in React\nDESCRIPTION: Importing createXRStore and XR from @react-three/xr and creating an XR store. This store will be used to manage the XR state and interactions.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/convert-to-xr.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createXRStore, XR } from '@react-three/xr'\n\nconst store = createXRStore()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Hand State and Touch Pointer\nDESCRIPTION: This snippet shows how to get the state of the hand, create a reference to the middle finger position, and set up a touch pointer for custom hand implementation.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/custom-inputs.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useXRInputSourceStateContext('hand')\nconst middleFingerRef = useRef<Object3D>(null)\nconst pointer = useTouchPointer(middleFingerRef, state)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray Pointer Color in XR Store\nDESCRIPTION: This snippet shows how to configure the ray color of the ray pointer in the user's hand using the createXRStore function.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/custom-inputs.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst store = createXRStore({ hand: { rayPointer: { rayModel: { color: 'red' } } } })\n```\n\n----------------------------------------\n\nTITLE: Installing React Three XR Dependencies\nDESCRIPTION: NPM installation command for required dependencies including Three.js, React Three Fiber, and React Three XR.\nSOURCE: https://github.com/pmndrs/xr/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @react-three/fiber @react-three/xr@latest\n```\n\n----------------------------------------\n\nTITLE: Exiting XR Session with react-three/xr\nDESCRIPTION: This code snippet shows how to programmatically exit an active XR session using the react-three/xr store state.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/faq.md#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nstore.getState().session?.end()\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Video Element for WebXR Layer\nDESCRIPTION: Uses React's useMemo hook to create an HTML video element that loads a video file from 'test.mp4'. The memoization ensures the element is only created once during component initialization.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/layers.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst video = useMemo(() => {\n  const result = document.createElement('video')\n  result.src = 'test.mp4'\n  return result\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Installing @react-three/xr Package\nDESCRIPTION: Command to install the latest version of @react-three/xr using npm. This is the first step in converting a React Three Fiber app to XR.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/convert-to-xr.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/xr@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a Translation Handle in Three.js with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a handle that constrains an object's movement to the x-axis translation only. It creates a HandleStore instance bound to the object itself, disabling scale and rotate operations while enabling x-axis translation.\nSOURCE: https://github.com/pmndrs/xr/blob/main/packages/handle/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//lets create a handle to translate the object on the x axis (the target and the handle are both the object)\nconst store = new HandleStore(object, () => ({ scale: false, rotate: false, translate: \"x\" }))\nstore.bind(object)\n```\n\n----------------------------------------\n\nTITLE: Requesting an AR Anchor Relative to a Space in react-three/xr\nDESCRIPTION: Example of requesting an anchor relative to a specific space using the requestAnchor function.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/anchors.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nrequestAnchor({ relativeTo: \"space\", space: ... })\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Hand Implementation in XR Store\nDESCRIPTION: This code sample demonstrates how to provide a custom hand implementation through the XR store options.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/custom-inputs.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst store = createXRStore({ hand: CustomHand })\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout with XR Demo Examples\nDESCRIPTION: A grid layout component displaying interactive gif thumbnails that link to various XR demos. The grid is structured with 3 columns and contains links to live examples with preview images.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/examples.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Grid cols={3}>\n  <li>\n    [![Screenshot from Room demo](./room-demo.gif)](https://pmndrs.github.io/xr/examples/room-with-shadows/)\n  </li>\n  <li>\n    [![Screenshot from Stage demo](./stage-demo.gif)](https://pmndrs.github.io/xr/examples/stage/)\n  </li>\n  <li>\n    [![Screenshot from Ragdoll demo](./ragdoll-demo.gif)](https://pmndrs.github.io/xr/examples/rag-doll/)\n  </li>\n  <li>\n    [![Screenshot from Watch demo](./watch-demo.gif)](https://pmndrs.github.io/xr/examples/watch/)\n  </li>\n  <li>\n    [![Screenshot from Minecraft demo](./minecraft-demo.gif)](https://pmndrs.github.io/xr/examples/minecraft/)\n  </li>\n  <li>\n    [![Screenshot from Pingpong demo](./pingpong-demo.gif)](https://pmndrs.github.io/xr/examples/pingpong/)\n  </li>\n  <li>\n    [![Screenshot from Layers demo](./layers.gif)](https://pmndrs.github.io/xr/examples/layers/)\n  </li>\n  <li>\n    [![Screenshot from Secondary Input Sources demo](./secondary-input-sources.gif)](https://pmndrs.github.io/xr/examples/secondary-input-sources/)\n  </li>\n  <li>\n    [![Screenshot from the React-three-handle Editor demo](./editor.gif)](https://pmndrs.github.io/xr/examples/editor/)\n  </li>\n  <li>\n    [![Screenshot from the hit testing demo](./hit-testing.gif)](https://pmndrs.github.io/xr/examples/hit-testing/)\n    by [Sung Powley](https://bsky.app/profile/sung-powley.bsky.social) \n  </li>\n  <li>\n    [![Screenshot from the uikit + handle demo](./uikit.gif)](https://pmndrs.github.io/xr/examples/uikit/)\n  </li>\n  <li>\n    [![Screenshot from the portal demo](./portal.gif)](https://pmndrs.github.io/xr/examples/portal/)\n  </li>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pointer Events Filtering in Three.js\nDESCRIPTION: Example showing how to configure pointer event filtering for a 3D object using the pointerEvents property. This controls whether an object responds to pointer events, similar to the CSS pointer-events property.\nSOURCE: https://github.com/pmndrs/xr/blob/main/packages/pointer-events/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nobject.pointerEvents = 'none'\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Hand Components in React Three Fiber\nDESCRIPTION: This code renders the custom hand components, including the XRSpace for the middle finger, XRHandModel, and PointerCursorModel for visualization.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/tutorials/custom-inputs.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<XRSpace ref={middleFingerRef} space={state.inputSource.hand.get('middle-finger-tip')!}/>\n<Suspense>\n  <XRHandModel />\n</Suspense>\n<PointerCursorModel pointer={pointer} opacity={defaultTouchPointerOpacity} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building XR Libraries\nDESCRIPTION: Commands to install project dependencies, generate necessary files, and build the libraries using PNPM package manager. Requires Node.js and PNPM to be installed.\nSOURCE: https://github.com/pmndrs/xr/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm -r copy\npnpm -r build\n```\n\n----------------------------------------\n\nTITLE: Installing XR Library Dependencies\nDESCRIPTION: Command to install the required npm packages for using XR functionality with Three.js\nSOURCE: https://github.com/pmndrs/xr/blob/main/packages/xr/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @pmndrs/xr\n```\n\n----------------------------------------\n\nTITLE: Running XR Example Development Server\nDESCRIPTION: Commands to navigate to the React Three XR example directory and start the development server. Note that Vite cache needs to be cleared when making changes to packages.\nSOURCE: https://github.com/pmndrs/xr/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/react-three-xr\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Handle and Dependencies\nDESCRIPTION: Command to install the necessary dependencies for using @react-three/handle, including Three.js, React Three Fiber, and React Three XR.\nSOURCE: https://github.com/pmndrs/xr/blob/main/packages/react/handle/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @react-three/fiber @react-three/handle@latest @react-three/xr@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout for XR Showcases in Markdown\nDESCRIPTION: Markdown code for displaying a grid of showcase items with images and links. The code creates a 2-column grid with a single showcase item for Volu.dev, a spatial development hub.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/getting-started/showcases.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Grid cols={2}>\n  <li>\n    ![volu.dev](./showcases/volu-dev.gif)\n    [Spatial development hub](https://volu.dev)\n  </li>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing TransformHandles in React Three Fiber\nDESCRIPTION: Basic setup for using TransformHandles component in React Three Fiber with XR event system. Requires disabling default events and adding PointerEvents from @react-three/xr.\nSOURCE: https://github.com/pmndrs/xr/blob/main/docs/handles/prebuild-handles.md#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TransformHandles } from '@react-three/handles'\nimport { noEvents, PointerEvents } from '@react-three/xr'\n\n<Canvas events={noEvents}>\n  <PointerEvents />\n  <TransformHandles>\n    <mesh>\n      <boxGeometry />\n    </mesh>\n  </TransformHandles>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all user agents (web crawlers) to access all content on the website. The configuration is minimal with no path restrictions.\nSOURCE: https://github.com/pmndrs/xr/blob/main/examples/minecraft/public/robots.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```"
  }
]