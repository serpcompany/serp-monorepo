[
  {
    "owner": "pointfreeco",
    "repo": "swift-dependencies",
    "content": "TITLE: Testing Swift Feature with Controlled Dependencies\nDESCRIPTION: Demonstrates how to use withDependencies to override dependencies for testing purposes, allowing for deterministic and fast tests.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n@Test\nfunc add() async throws {\n  let model = withDependencies {\n    // 1Ô∏è‚É£ Override any dependencies that your feature uses.\n    $0.clock = .immediate\n    $0.date.now = Date(timeIntervalSinceReferenceDate: 1234567890)\n    $0.uuid = .incrementing\n  } operation: {\n    // 2Ô∏è‚É£ Construct the feature's model\n    FeatureModel()\n  }\n  // 3Ô∏è‚É£ The model now executes in a controlled environment of dependencies,\n  //    and so we can make assertions against its behavior.\n  try await model.addButtonTapped()\n  #expect(\n    model.items == [\n      Item(\n        id: UUID(uuidString: \"00000000-0000-0000-0000-000000000000\")!,\n        name: \"\",\n        createdAt: Date(timeIntervalSinceReferenceDate: 1234567890)\n      )\n    ]\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Dependencies in Swift Unit Test\nDESCRIPTION: This code snippet demonstrates how to control dependencies in a unit test using the withDependencies function. It overrides clock, date, and UUID dependencies to create a controlled environment for testing the FeatureModel.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/QuickStart.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@Test\nfunc add() async throws {\n  let model = withDependencies {\n    // 1Ô∏è‚É£ Override any dependencies that your feature uses.\n    $0.clock = .immediate\n    $0.date.now = Date(timeIntervalSinceReferenceDate: 1234567890)\n    $0.uuid = .incrementing\n  } operation: {\n    // 2Ô∏è‚É£ Construct the feature's model\n    FeatureModel()\n  }\n\n  // 3Ô∏è‚É£ The model now executes in a controlled environment of dependencies,\n  //    and so we can make assertions against its behavior.\n  try await model.addButtonTapped()\n  #expect(\n    model.items == [\n      Item(\n        id: UUID(uuidString: \"00000000-0000-0000-0000-000000000000\")!,\n        name: \"\",\n        createdAt: Date(timeIntervalSinceReferenceDate: 1234567890)\n      )\n    ]\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Controlled Dependencies in Swift Feature Logic\nDESCRIPTION: Shows how to use the declared dependencies within a feature's logic, replacing direct calls to Date(), UUID(), and Task.sleep with their controlled counterparts.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n@Observable\nfinal class FeatureModel {\n  // ...\n\n  func addButtonTapped() async throws {\n    try await clock.sleep(for: .seconds(1))  // üëà Don't use 'Task.sleep'\n    items.append(\n      Item(\n        id: uuid(),  // üëà Don't use 'UUID()'\n        name: \"\",\n        createdAt: now  // üëà Don't use 'Date()'\n      )\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies for Testing in Swift\nDESCRIPTION: This snippet shows how to override dependencies with deterministic versions for testing purposes using the withDependencies function.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/UsingDependencies.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\n@Test\nfunc todos() async {\n  let model = withDependencies {\n    $0.continuousClock = .immediate\n    $0.date.now = Date(timeIntervalSinceReferenceDate: 1234567890)\n    $0.uuid = .incrementing\n  } operation: {\n    TodosModel()\n  }\n\n  // Invoke methods on `model` and make assertions...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Declared Dependencies in Swift FeatureModel Method\nDESCRIPTION: This snippet shows how to use the declared dependencies within a method of the FeatureModel class. It demonstrates using the clock for sleeping, UUID for ID generation, and date for timestamp creation.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/QuickStart.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nfinal class FeatureModel {\n  // ...\n\n  func addButtonTapped() async throws {\n    try await clock.sleep(for: .seconds(1))  // üëà Don't use 'Task.sleep'\n    items.append(\n      Item(\n        id: uuid(),  // üëà Don't use 'UUID()'\n        name: \"\",\n        createdAt: now  // üëà Don't use 'Date()'\n      )\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Swift Feature Model\nDESCRIPTION: Demonstrates how to declare controllable dependencies in a Swift feature model class using property wrappers. This includes examples for clock, date, main queue, and UUID dependencies.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n@Observable\nfinal class FeatureModel {\n  var items: [Item] = []\n\n  @ObservationIgnored\n  @Dependency(\\.continuousClock) var clock  // Controllable way to sleep a task\n  @ObservationIgnored\n  @Dependency(\\.date.now) var now           // Controllable way to ask for current date\n  @ObservationIgnored\n  @Dependency(\\.mainQueue) var mainQueue    // Controllable scheduling on main queue\n  @ObservationIgnored\n  @Dependency(\\.uuid) var uuid              // Controllable UUID creation\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring with Dependency Injection for Clock in Swift\nDESCRIPTION: This snippet demonstrates how to refactor the FeatureModel to use dependency injection with the Clock protocol. It replaces the direct call to Task.sleep with an injected clock dependency, making the code more testable.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/WhatAreDependencies.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nfinal class FeatureModel {\n  var message: String?\n\n  @ObservationIgnored\n  @Dependency(\\.continuousClock) var clock\n\n  func onAppear() async {\n    do {\n      try await clock.sleep(for: .seconds(10))\n      message = \"Welcome!\"\n    } catch {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in a Swift FeatureModel Class\nDESCRIPTION: This code snippet demonstrates how to declare various built-in dependencies in a Swift FeatureModel class using property wrappers. It includes dependencies for clock, date, main queue, and UUID generation.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/QuickStart.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nfinal class FeatureModel {\n  var items: [Item] = []\n\n  @ObservationIgnored\n  @Dependency(\\.continuousClock) var clock  // Controllable way to sleep a task\n  @ObservationIgnored\n  @Dependency(\\.date.now) var now           // Controllable way to ask for current date\n  @ObservationIgnored\n  @Dependency(\\.mainQueue) var mainQueue    // Controllable scheduling on main queue\n  @ObservationIgnored\n  @Dependency(\\.uuid) var uuid              // Controllable UUID creation\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Parameterized Tests with Dependencies in Swift Testing Framework\nDESCRIPTION: This example shows how to properly handle parameterized tests when using the Swift Testing framework with the Dependencies library. By resetting dependency values for each parameter, it prevents state leakage between test runs.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n@Test(arguments: [1, 2, 3])\nfunc feature(_ number: Int) {\n  withDependencies {\n    $0 = DependencyValues()\n  } operation: {\n    // All test code in here...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withEscapedDependencies for Accessing Dependencies in Escaping Closures\nDESCRIPTION: This snippet demonstrates how to properly access dependencies in escaping closures like DispatchQueue.asyncAfter. It uses withEscapedDependencies to capture the current dependency context and the yield method to restore it when the escaping closure executes.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Lifetimes.md#2025-04-20_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nwithEscapedDependencies { dependencies in\n  DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n    dependencies.yield {\n      // All code in here will use dependencies at the time of calling withEscapedDependencies.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Audio Player Feature in Swift\nDESCRIPTION: Example of testing a feature that uses the audio player client with dependency override.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/DesigningDependencies.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc testFeature() {\n  let isPlaying = ActorIsolated(false)\n\n  let model = withDependencies {\n    $0.audioPlayer.play = { _ in await isPlaying.setValue(true) }\n  } operation: {\n    FeatureModel()\n  }\n\n  await model.play()\n  XCTAssertEqual(isPlaying.value, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Dependencies with Mocked Data\nDESCRIPTION: Shows how to override dependencies in tests to return mock data using withDependencies.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/RegisteringDependencies.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\n@Test\nfunc fetchUser() async {\n  let model = withDependencies {\n    $0[APIClient.self].fetchTodos = { _ in Todo(id: 1, title: \"Get milk\") }\n  } operation: {\n    TodosModel()\n  }\n\n  await store.loadButtonTapped()\n  #expect(\n    model.todos == [Todo(id: 1, title: \"Get milk\")]\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Dependency Interface and Implementation\nDESCRIPTION: Demonstrates how to separate the interface and live implementation of a dependency into different modules for better compilation performance.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/LivePreviewTest.md#2025-04-20_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n// Module: AnalyticsClient\nstruct AnalyticsClient: TestDependencyKey {\n  // ...\n\n  static let testValue = Self(/* ... */)\n}\n```\n\nLANGUAGE: Swift\nCODE:\n```\n// Module: LiveAnalyticsClient\nextension AnalyticsClient: DependencyKey {\n  static let liveValue = Self(/* ... */)\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies with withDependencies in Swift Testing Framework\nDESCRIPTION: Demonstrates how to override dependencies for a test by wrapping the test function in withDependencies(_:operation:) to control the UUID dependency for the test duration.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Test func basics() {\n  withDependencies {\n    $0.uuid = .incrementing\n  } operation: {\n    let model = FeatureModel()\n    // Invoke methods on 'model' and make assertions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies Library to SwiftPM Project in Package.swift\nDESCRIPTION: This snippet shows how to add the Dependencies library as a dependency in a SwiftPM project's Package.swift file. It specifies the package URL, version requirement, and target configuration.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/QuickStart.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet package = Package(\n  dependencies: [\n    .package(\n      url: \"https://github.com/pointfreeco/swift-dependencies\",\n      from: \"1.0.0\"\n    ),\n  ],\n  targets: [\n    .target(\n      name: \"<your-target-name>\",\n      dependencies: [\n        .product(name: \"Dependencies\", package: \"swift-dependencies\")\n      ]\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies in Xcode Previews\nDESCRIPTION: Shows how to override dependencies in Xcode previews to test specific configurations, such as empty states or error handling.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/LivePreviewTest.md#2025-04-20_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nstruct Feature_Previews: PreviewProvider {\n  static var previews: some View {\n    FeatureView(\n      model: withDependencies {\n        $0.apiClient.fetchUsers = { _ in [] }\n      } operation: {\n        FeatureModel()\n      }\n    )\n  }\n}\n```\n\nLANGUAGE: Swift\nCODE:\n```\nstruct Feature_Previews: PreviewProvider {\n  static var previews: some View {\n    FeatureView(\n      model: withDependencies {\n        $0.apiClient.fetchUser = { _ in\n          struct SomeError: Error {}\n          throw SomeError()\n        }\n      } operation: {\n        FeatureModel()\n      }\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Audio Player Client in Feature Model with Swift\nDESCRIPTION: Example of using the audio player client in a feature model with dependency injection.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/DesigningDependencies.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nfinal class FeatureModel {\n  @ObservationIgnored\n  @Dependency(\\.audioPlayer.play) var play\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies in Swift UI Previews\nDESCRIPTION: Shows how to use the .dependencies preview trait to override dependencies specifically for Xcode previews, allowing for faster and more controlled preview experiences.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n#Preview(trait: .dependencies { $0.continuousClock = ImmediateClock() }) {\n  // All access of '@Dependency(\\.continuousClock)' in this preview will \n  // use an immediate clock.\n  FeatureView(model: FeatureModel())\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies in Swift Xcode Preview\nDESCRIPTION: This snippet shows how to override dependencies specifically for Xcode previews using the PreviewTrait. It demonstrates overriding the continuousClock dependency with an ImmediateClock for faster preview updates.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/QuickStart.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n#Preview(trait: .dependencies { $0.continuousClock = ImmediateClock() }) {\n  // All access of '@Dependency(\\.continuousClock)' in this preview will\n  // use an immediate clock.\n  FeatureView(model: FeatureModel())\n}\n```\n\n----------------------------------------\n\nTITLE: Extending DependencyValues with Custom Property\nDESCRIPTION: Shows how to extend DependencyValues to add a custom property for accessing dependencies through key paths.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/RegisteringDependencies.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nextension DependencyValues {\n  var apiClient: APIClient {\n    get { self[APIClientKey.self] }\n    set { self[APIClientKey.self] = newValue }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Swift Observable Class\nDESCRIPTION: This snippet demonstrates how to declare dependencies for date, clock, and UUID in a Swift Observable class using the @Dependency property wrapper.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/UsingDependencies.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nfinal class TodosModel {\n  @ObservationIgnored @Dependency(\\.continuousClock) var clock\n  @ObservationIgnored @Dependency(\\.date) var date\n  @ObservationIgnored @Dependency(\\.uuid) var uuid\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Multiple Dependencies with dependencies Trait\nDESCRIPTION: Shows how to override multiple dependencies simultaneously using the .dependencies test trait in Swift's Testing framework.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@Suite(.dependencies {\n  $0.date.now = Date(timeIntervalSince1970:12324567890)\n  $0.uuid = .incrementing\n})\nstruct MySuite {\n  @Test func basics() {\n    let model = FeatureModel()\n    // Invoke methods on 'model' and make assertions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing App Code Execution During Tests with SwiftUI\nDESCRIPTION: Shows how to prevent the application code from running during tests in a SwiftUI app by checking the isTesting flag from IssueReporting.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nimport IssueReporting\nimport SwiftUI\n\n@main\nstruct MyApp: App {\n  var body: some Scene {\n    WindowGroup {\n      if !isTesting {\n        // Your real root view\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preview with Custom Dependencies\nDESCRIPTION: Shows how to customize dependencies in an Xcode preview to test specific scenarios.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Lifetimes.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n#Preview(traits: .dependencies {\n  $0.apiClient.fetchUser = { _ in throw SomeError() }\n}) {\n  FeatureView(model: FeatureModel())\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing App Code Execution During Tests with UIKit\nDESCRIPTION: Shows how to prevent the application code from running during tests in a UIKit app by checking the isTesting flag in the application delegate.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(\n_ application: UIApplication,\ndidFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n) -> Bool {\n  guard !isTesting else { return true }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Audio Player Protocol Conformances in Swift\nDESCRIPTION: Implementation examples of the AudioPlayer protocol including live, mock, and unimplemented versions.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/DesigningDependencies.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct LiveAudioPlayer: AudioPlayer {\n  let audioEngine: AVAudioEngine\n  // ...\n}\nstruct MockAudioPlayer: AudioPlayer {\n  // ...\n}\nstruct UnimplementedAudioPlayer: AudioPlayer {\n  func loop(url: URL) async throws {\n    reportIssue(\"AudioPlayer.loop is unimplemented\")\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Property Wrapper\nDESCRIPTION: Demonstrates how to access a registered dependency using the @Dependency property wrapper in an Observable class.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/RegisteringDependencies.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nfinal class TodosModel {\n  @ObservationIgnored\n  @Dependency(APIClient.self) var apiClient\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Dependency Context in Swift UI Tests\nDESCRIPTION: This snippet shows how to force a specific dependency context in UI tests by setting the SWIFT_DEPENDENCIES_CONTEXT environment variable. This allows the application target to run with test dependencies during UI testing.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/LivePreviewTest.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc testFeature() {\n  self.app.launchEnvironment[\"SWIFT_DEPENDENCIES_CONTEXT\"] = \"test\"\n  self.app.launch()\n  ‚Ä¶\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependency Property Wrapper in Swift\nDESCRIPTION: Two overloaded initializers for the Dependency property wrapper. These initializers allow for creating a dependency with file information for debugging purposes.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Extensions/Dependency.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\ninit(_:fileID:filePath:line:column:)-1f0mh\n```\n\nLANGUAGE: Swift\nCODE:\n```\ninit(_:fileID:filePath:line:column:)-1ytea\n```\n\n----------------------------------------\n\nTITLE: Using Test Traits for Dependency Overrides in Swift Testing Framework\nDESCRIPTION: Shows how to use test traits from DependenciesTestSupport to override a single dependency without nesting the entire test in withDependencies.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Test(.dependency(\\.uuid, .incrementing)) \nfunc basics() {\n  let model = FeatureModel()\n  // Invoke methods on 'model' and make assertions\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Dependencies with withDependencies\nDESCRIPTION: Shows how to override dependencies when creating a model using withDependencies.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Lifetimes.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet onboardingModel = withDependencies {\n  $0.apiClient = .mock\n} operation: {\n  FeatureModel()\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting withDependencies Function Overloads in Swift\nDESCRIPTION: This snippet provides documentation for the 'withDependencies' function and its overloads in the Dependencies module. It lists the main function and an overloaded version with additional parameters.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Extensions/WithDependencies.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n# ``Dependencies/withDependencies(_:operation:)``\n\n## Topics\n\n### Overloads\n\n- ``withDependencies(isolation:_:operation:)``\n```\n\n----------------------------------------\n\nTITLE: Writing a Swift Test with Dependency Override\nDESCRIPTION: This snippet demonstrates how to write a test for the feature by overriding the clock dependency with an immediate clock. It shows how to use the withDependencies helper to create a model with controlled dependencies.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/WhatAreDependencies.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@Test\nfunc message() async {\n  let model = withDependencies {\n    $0.continuousClock = .immediate\n  } operation: {\n    FeatureModel()\n  }\n\n  #expect(model.message == nil)\n  await model.onAppear()\n  #expect(model.message == \"Welcome!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Live Dependencies in Swift Tests\nDESCRIPTION: This snippet demonstrates how to explicitly override a dependency with a live value in a test context to prevent test failures. This is necessary when you intentionally want to use a live dependency during testing.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/LivePreviewTest.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@Test\nfunc feature() async throws {\n  let model = withDependencies {\n    // ‚ö†Ô∏è Explicitly say you want to use a live dependency.\n    $0.apiClient = .liveValue\n  } operation: {\n    FeatureModel()\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Task Local with DispatchQueue\nDESCRIPTION: Shows how task local values are not inherited when using DispatchQueue for async operations.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Lifetimes.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nprint(Locals.value)  // 1\nLocals.$value.withValue(42) {\n  print(Locals.value)  // 42\n  DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n    print(Locals.value)  // 1\n  }\n  print(Locals.value)  // 42\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies at Suite Level in Swift Testing Framework\nDESCRIPTION: Demonstrates how to override dependencies for an entire test suite using suite traits, affecting all tests within the suite.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Suite(.dependency(\\.uuid, .incrementing))\nstruct MySuite {\n  @Test func basics() {\n    let model = FeatureModel()\n    // Invoke methods on 'model' and make assertions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Model with Dependency\nDESCRIPTION: Example of a feature model class using @Dependency property wrapper to access an API client.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Lifetimes.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass FeatureModel {\n  var user: User?\n\n  @ObservationIgnored\n  @Dependency(\\.apiClient) var apiClient\n\n  func onAppear() async {\n    do {\n      user = try await apiClient.fetchUser()\n    } catch {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature - withDependencies Base Method\nDESCRIPTION: Base method signature for withDependencies function that takes source dependencies and an operation to perform with those dependencies.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Extensions/WithDependenciesFrom.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nwithDependencies(from:operation:fileID:filePath:line:column:)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Client with Macro in Swift\nDESCRIPTION: Example of using the @DependencyClient macro to simplify dependency interface definition.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/DesigningDependencies.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport DependenciesMacros\n\n@DependencyClient\nstruct AudioPlayerClient {\n  var loop: (_ url: URL) async throws -> Void\n  var play: (_ url: URL) async throws -> Void\n  var setVolume: (_ volume: Float) async -> Void\n  var stop: () async -> Void\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting Dependencies from Parent\nDESCRIPTION: Demonstrates how to inherit dependencies from a parent model while creating a child model.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Lifetimes.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet onboardingModel = withDependencies(from: self) {\n  $0.apiClient = .mock\n} operation: {\n  FeatureModel()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Swift Preview with Dependency Override\nDESCRIPTION: This snippet shows how to create a SwiftUI preview that overrides the clock dependency with an ImmediateClock. This allows the preview to display the welcome message instantly instead of waiting 10 seconds.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/WhatAreDependencies.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n#Preview(traits: .dependencies { $0.continuousClock = ImmediateClock() }) {\n  FeatureView(model: FeatureModel())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Suite for Test Isolation\nDESCRIPTION: Demonstrates how to create a base suite with isolated dependencies for each test to prevent test interference when running in parallel.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@Suite(.dependencies) struct BaseSuite {}\n```\n\n----------------------------------------\n\nTITLE: Function Signature - withDependencies with Isolation\nDESCRIPTION: Overloaded method signature that includes an isolation parameter for controlling dependency access patterns.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Extensions/WithDependenciesFrom.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nwithDependencies(from:isolation:operation:fileID:filePath:line:column:)\n```\n\n----------------------------------------\n\nTITLE: Handling Live Dependencies in Tests\nDESCRIPTION: Demonstrates how to explicitly use live dependencies in tests by overriding the dependency and setting the live value.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/LivePreviewTest.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n@Test\nfunc feature() async throws {\n  let model = withDependencies {\n    // ‚ö†Ô∏è Explicitly say you want to use a live dependency.\n    $0.apiClient = .liveValue\n  } operation: {\n    FeatureModel()\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Audio Player Client Dependencies in Swift\nDESCRIPTION: Extension implementation for AudioPlayerClient with dependency key conformance and value accessors.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/DesigningDependencies.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nextension AudioPlayerClient: DependencyKey {\n  static var liveValue: Self {\n    let audioEngine: AVAudioEngine\n    return Self(/* ... */)\n  }\n\n  static let previewValue = Self(/* ... */)\n\n  static let testValue = Self(\n    loop: unimplemented(\"AudioPlayerClient.loop\"),\n    play: unimplemented(\"AudioPlayerClient.play\"),\n    setVolume: unimplemented(\"AudioPlayerClient.setVolume\"),\n    stop: unimplemented(\"AudioPlayerClient.stop\")\n  )\n}\n\nextension DependencyValues {\n  var audioPlayer: AudioPlayerClient {\n    get { self[AudioPlayerClient.self] }\n    set { self[AudioPlayerClient.self] = newValue }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature - withDependencies with Isolation and Unnamed Parameter\nDESCRIPTION: Overloaded method signature combining both isolation control and unnamed parameter options.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Extensions/WithDependenciesFrom.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nwithDependencies(from:isolation:_:operation:fileID:filePath:line:column:)\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Dependency with DependencyKey Protocol\nDESCRIPTION: Shows how to conform a type to DependencyKey protocol by implementing the liveValue static property. This is used when running the app in simulator or on device.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/RegisteringDependencies.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nextension APIClient: DependencyKey {\n  static let liveValue = APIClient(/*\n    Construct the \"live\" API client that actually makes network \n    requests and communicates with the outside world.\n  */)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Preview Dependencies\nDESCRIPTION: Demonstrates how to provide a preview implementation of an API client that returns mock data synchronously.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/LivePreviewTest.md#2025-04-20_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nextension APIClient: TestDependencyKey {\n  static let previewValue = Self(\n    fetchUsers: {\n      [\n        User(id: 1, name: \"Blob\"),\n        User(id: 2, name: \"Blob Jr.\"),\n        User(id: 3, name: \"Blob Sr.\"),\n      ]\n    },\n    fetchUser: { id in\n      User(id: id, name: \"Blob, id: \\(id)\")\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature - withDependencies with Unnamed Parameter\nDESCRIPTION: Overloaded method signature that includes an unnamed parameter for additional configuration options.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Extensions/WithDependenciesFrom.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nwithDependencies(from:_:operation:fileID:filePath:line:column:)\n```\n\n----------------------------------------\n\nTITLE: Changing Dependencies During Tests for Complex Flows\nDESCRIPTION: Demonstrates how to change dependencies mid-test to simulate different states, such as transitioning from a failure state to a success state.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@Test(.dependency(\\.apiClient.login, { _, _ in throw LoginFailure() }))\nfunc retryFlow() async {\n  let model = LoginModel()\n  await model.loginButtonTapped()\n  #expect(model.errorMessage == \"We could not log you in. Please try again\")\n\n  withDependencies {\n    $0.apiClient.login = { email, password in \n      LoginResponse(user: User(id: 42, name: \"Blob\"))\n    }\n  } operation: {\n    await model.loginButtonTapped()\n    #expect(model.errorMessage == nil)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Struct-Based Audio Player Client in Swift\nDESCRIPTION: Implementation of an audio player client using a struct with closure properties instead of a protocol.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/DesigningDependencies.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct AudioPlayerClient {\n  var loop: (_ url: URL) async throws -> Void\n  var play: (_ url: URL) async throws -> Void\n  var setVolume: (_ volume: Float) async -> Void\n  var stop: () async -> Void\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies in XCTest Framework\nDESCRIPTION: Demonstrates how to override dependencies for a test in Xcode's XCTest framework using withDependencies.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc testBasics() {\n  withDependencies {\n    $0.uuid = .incrementing\n  } operation: {\n    let model = FeatureModel()\n    // Invoke methods on 'model' and make assertions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Local Inheritance with async Task\nDESCRIPTION: Demonstrates how task locals are inherited in async tasks even across time boundaries.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Lifetimes.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nenum Locals {\n  @TaskLocal static var value = 1\n}\n\nprint(Locals.value)  // 1\nLocals.$value.withValue(42) {\n  print(Locals.value)  // 42\n  Task {\n    try await Task.sleep(for: .seconds(1))\n    print(Locals.value)  // 42\n  }\n  print(Locals.value)  // 42\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol-Based Audio Player Interface in Swift\nDESCRIPTION: Protocol definition for an audio player interface with methods for playing, looping, volume control, and stopping audio playback.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/DesigningDependencies.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nprotocol AudioPlayer {\n  func loop(url: URL) async throws\n  func play(url: URL) async throws\n  func setVolume(_ volume: Float) async\n  func stop() async\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unimplemented Test Dependencies\nDESCRIPTION: Shows how to create an unimplemented version of a dependency for test environments using the Issue Reporting library.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/LivePreviewTest.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nstruct AnalyticsClient {\n  var track: (String, [String: String]) async throws -> Void\n}\n\nimport Dependencies\n\nextension AnalyticsClient: TestDependencyKey {\n  static let testValue = Self(\n    track: unimplemented(\"AnalyticsClient.track\")\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies for an Entire XCTest Case\nDESCRIPTION: Shows how to override dependencies for all tests in an XCTest case by implementing the invokeTest method.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass FeatureTests: XCTestCase {\n  override func invokeTest() {\n    withDependencies { \n      $0.uuid = .incrementing\n    } operation: {\n      super.invokeTest()\n    }\n  }\n\n  func testBasics() {\n    // Test has 'uuid' dependency overridden.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dependency Value in Swift\nDESCRIPTION: The wrappedValue property allows access to the underlying value of the Dependency property wrapper.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Extensions/Dependency.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nwrappedValue\n```\n\n----------------------------------------\n\nTITLE: Registering Audio Player Dependency Key in Swift\nDESCRIPTION: Registration of AudioPlayer implementations as dependency keys for live, preview, and test environments.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/DesigningDependencies.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprivate enum AudioPlayerKey: DependencyKey {\n  static let liveValue: any AudioPlayer = LiveAudioPlayer()\n  static let previewValue: any AudioPlayer = MockAudioPlayer()\n  static let testValue: any AudioPlayer = UnimplementedAudioPlayer()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Indirect Dependency Key Conformance\nDESCRIPTION: Demonstrates how to create a separate type conforming to DependencyKey for types you don't own, like UserDefaults.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/RegisteringDependencies.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nenum UserDefaultsKey: DependencyKey {\n  static let liveValue = UserDefaults.standard\n}\n```\n\n----------------------------------------\n\nTITLE: Using Task Local withValue Method\nDESCRIPTION: Shows how to temporarily override a task local value within a specific scope using withValue.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Lifetimes.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nprint(Locals.value)  // 1\nLocals.$value.withValue(42) {\n  print(Locals.value)  // 42\n}\nprint(Locals.value)  // 1\n```\n\n----------------------------------------\n\nTITLE: Defining Task Local Variable in Swift\nDESCRIPTION: Demonstrates how to define a basic task local variable using an enum and @TaskLocal property wrapper.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Lifetimes.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nenum Locals {\n  @TaskLocal static var value = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Dependencies Product to Target\nDESCRIPTION: This snippet demonstrates how to add the Dependencies product to a target in a Swift Package Manager project. It specifies the product name and package in the target's dependencies.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n.product(name: \"Dependencies\", package: \"swift-dependencies\"),\n```\n\n----------------------------------------\n\nTITLE: Nesting Test Suites for Dependency Isolation\nDESCRIPTION: Shows how to nest test suites within a base suite to ensure each test gets its own isolated set of dependencies.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nextension BaseSuite {\n  @Suite struct FeatureTests {\n    @Test func basics() {\n      // ...  \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Feature with Uncontrolled Dependencies in Swift\nDESCRIPTION: This code snippet shows a simple feature implementation with an uncontrolled dependency on Task.sleep. The model waits 10 seconds before displaying a welcome message, which creates problems for testing and previews.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/WhatAreDependencies.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nfinal class FeatureModel {\n  var message: String?\n\n  func onAppear() async {\n    do {\n      try await Task.sleep(for: .seconds(10))\n      message = \"Welcome!\"\n    } catch {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SwiftUI View with Feature Model\nDESCRIPTION: This snippet defines a SwiftUI view that uses the FeatureModel to display a message. It demonstrates how the view connects to the model and triggers the onAppear method using a task.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/WhatAreDependencies.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct FeatureView: View {\n  let model: FeatureModel\n\n  var body: some View {\n    Form {\n      if let message = model.message {\n        Text(message)\n      }\n\n      // ...\n    }\n    .task { await model.onAppear() }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Dependencies Package in SwiftPM\nDESCRIPTION: This snippet shows how to add the Swift Dependencies package to a Swift Package Manager project. It specifies the package URL and version requirement in the dependencies array of the Package.swift file.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n  .package(url: \"https://github.com/pointfreeco/swift-dependencies\", from: \"1.0.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Test Case Leakage in Swift XCTest\nDESCRIPTION: This code shows how escaping closures in tests can cause test leakage, where one test's execution continues after the test completes, potentially affecting other tests. Here, testA launches a task that fails after a delay, and testB might receive that failure even though it's a separate test.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nfinal class SomeTest: XCTestCase {\n  func testA() {\n    Task {\n      try await Task.sleep(for: .seconds(0.1))\n      XCTFail()\n    }\n  }\n  func testB() async throws {\n    try await Task.sleep(for: .seconds(0.15))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Static @Dependency in Swift\nDESCRIPTION: This example demonstrates an anti-pattern when using the @Dependency property wrapper. Static dependencies cannot be overridden normally, so this approach should be avoided.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nclass Model {\n  @Dependency(\\.date) static var date\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dependencies DependencyValues assert Framework Documentation\nDESCRIPTION: Documentation header for the assertion functionality in the Swift Dependencies package, indicating the related topics and dependency values that are available for use.\nSOURCE: https://github.com/pointfreeco/swift-dependencies/blob/main/Sources/Dependencies/Documentation.docc/Extensions/DependencyValuesAssert.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ``Dependencies/DependencyValues/assert``\n\n## Topics\n\n### Dependency values\n\n- ``AssertionEffect``\n- ``AssertionFailureEffect``\n```"
  }
]