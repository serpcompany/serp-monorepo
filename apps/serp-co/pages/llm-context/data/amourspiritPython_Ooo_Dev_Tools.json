[
  {
    "owner": "amourspirit",
    "repo": "python_ooo_dev_tools",
    "content": "TITLE: Typing Services at Design Time in Python\nDESCRIPTION: This snippet demonstrates how to use `typing.TYPE_CHECKING` and `typing.cast` in Python to provide type hints for LibreOffice services at design time, while avoiding runtime errors. It relies on the `types-unopy` library to import service classes, and it checks if a graphic supports the `com.sun.star.graphic.Graphic` service before casting it to that type.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import cast, TYPE_CHECKING\nfrom ooodev.utils.info import Info\nfrom ooodev.utils.images_lo import ImagesLo\n\nif TYPE_CHECKING:\n    # only import if design time, will error if runtime.\n    from com.sun.star.graphic import Graphic\n\ndef insert_graphic(file_name: str) -> None:\n    graphic = ImagesLo.load_graphic_file(file_name)\n    if Info.support_service(graphic, \"com.sun.star.graphic.Graphic\"):\n        # cast type as string as it will not be available during runtime\n        img = cast(\"Graphic\", graphic)\n        # img now has full typing support in code editor\n    else:\n        raise ValueError(f\"Unable to get service for {file_name}\")\n\n    # do work with image here\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Table Borders via style_direct in Python\nDESCRIPTION: This snippet demonstrates how to set table borders using the `style_direct` property of a table object.  It adds a table to the document and then calls `table.style_direct.style_borders_side()` which sets the borders using the default side style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n        table.style_direct.style_borders_side()\n```\n\n----------------------------------------\n\nTITLE: LibreOffice Integration Script Python\nDESCRIPTION: Python script demonstrating integration with LibreOffice using 'oooenv'. It imports necessary libraries, defines a function to modify spreadsheet cells, and executes a simple test to validate the setup.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_poetry_env.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> import uno\n>>> from ooodev.loader import Lo\n>>> from ooodev.calc import CalcDoc\n>>>\n>>> def say_hello(cell_name):\n...     doc = CalcDoc.from_current_doc()\n...     sheet = doc.sheets[0]\n...     sheet[cell_name].value=\"Hello World!\"\n...\n>>> _ = Lo.load_office(Lo.ConnectSocket())\n>>> doc = CalcDoc.create_doc(visible=True)\n>>> say_hello(\"A1\")\n>>> doc.close()\n>>> Lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing a Spreadsheet Document with ooodev in Python\nDESCRIPTION: Provides an example method that creates a spreadsheet document, manipulates its visibility and zoom levels, populates data, optionally adds pictures and charts, applies styles, and saves the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# BuildTable.main() of build_table.py\ndef main(self) -> None:\n    loader = Lo.load_office(Lo.ConnectSocket())\n\n    try:\n        doc = CalcDoc(Calc.create_doc(loader))\n\n        doc.set_visible()\n        Lo.delay(300)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.get_sheet(0)\n\n        self._convert_addresses(sheet)\n\n        # other possible build methods\n        # self._build_cells(sheet)\n        # self._build_rows(sheet)\n        # self._build_cols(sheet)\n\n        self._build_array(sheet)\n\n        if self._add_pic:\n            self._add_picture(sheet)\n\n        # add a chart\n        if self._add_chart and Chart2:\n            # assumes _build_array() has filled the spreadsheet with data\n            rng_addr = sheet.get_address(range_name=\"B2:M4\")\n            chart_cell = \"B6\" if self._add_pic else \"D6\"\n            Chart2.insert_chart(\n                sheet=sheet.component,\n                cells_range=rng_addr,\n                cell_name=chart_cell,\n                width=21,\n                height=11,\n                diagram_name=\"Column\",\n            )\n\n        if self._add_style:\n            self._create_styles(doc)\n            self._apply_styles(sheet)\n\n        if self._out_fnm:\n            doc.save_doc(fnm=self._out_fnm)\n\n        msg_result = MsgBox.msgbox(\n            \"Do you wish to close document?\",\n            \"All done\",\n            boxtype=MessageBoxType.QUERYBOX,\n            buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n        )\n        if msg_result == MessageBoxResultsEnum.YES:\n            doc.close_doc()\n            Lo.close_office()\n        else:\n            print(\"Keeping document open\")\n\n    except Exception:\n        Lo.close_office()\n        raise\n```\n\n----------------------------------------\n\nTITLE: Exporting a Slide as Image in Python\nDESCRIPTION: This method `Draw.save_page` in the Draw class is used to export a presentation page to a specified file format using a MIME type. The method utilizes LibreOffice's GraphicExportFilter for the conversion. It requires the file name and MIME type as parameters, and outputs the converted file to the specified location.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class (simplified)\n@staticmethod\ndef save_page(page: XDrawPage, fnm: PathOrStr, mime_type: str) -> None:\n    save_file_url = FileIO.fnm_to_url(fnm)\n    Lo.print(f'Saving page in \"{fnm}\"')\n\n    # create graphics exporter\n    gef = Lo.create_instance_mcf(\n        XGraphicExportFilter, \"com.sun.star.drawing.GraphicExportFilter\", raise_err=True\n    )\n\n    # set the output 'document' to be specified page\n    doc = Lo.qi(XComponent, page, True)\n    # link exporter to the document\n    gef.setSourceDocument(doc)\n    \n    # export the page by converting to the specified mime type\n    props = Props.make_props(MediaType=mime_type, URL=save_file_url)\n\n    gef.filter(props)\n    Lo.print(\"Export Complete\")\n```\n\n----------------------------------------\n\nTITLE: Creating SolverConstraint Objects for Linear Solver in Python\nDESCRIPTION: Code that creates constraint objects for the linear solver by combining cell references with inequality operators and values. These constraints define the boundaries of the solution space that the solver will explore.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# in linear_solve.py\n# create the constraints\n# constraints are equations and their inequalities\nsc1 = Calc.make_constraint(\n    num=15000, op=\"<=\", sheet=sheet.component, cell_name=\"B4\"\n)\n#   20x + 210y <= 15000\n#   B4 is the address of the cell that is constrained\nsc2 = Calc.make_constraint(\n    num=4000,\n    op=SolverConstraintOperator.LESS_EQUAL,\n    sheet=sheet.component,\n    cell_name=\"B5\",\n)\n#   110x + 30y <= 4000\nsc3 = Calc.make_constraint(\n    num=75, op=\"<=\", sheet=sheet.component, cell_name=\"B6\"\n)\n#   x + y <= 75\n\n# could also include x >= 0 and y >= 0\nconstraints = (sc1, sc2, sc3)\n```\n\n----------------------------------------\n\nTITLE: Accessing the First Sheet of a Spreadsheet Document - Python\nDESCRIPTION: This code snippet demonstrates how to access the first sheet in a spreadsheet document ('test.odt') using the LibreOffice Calc API. It utilizes the Calc API's methods to load the office environment, open the document, and retrieve the sheet by index.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nloader = Lo.load_office(Lo.ConnectSocket())\ncompdoc = Lo.open_doc(\"test.odt\", loader)\ndoc = Lo.qi(XSpreadsheetDocument, compdoc)\nsheets = doc.getSheets()\nsheets_idx = Lo.qi(XIndexAccess, sheets)\nsheet = Lo.qi(XSpreadsheet, sheets_idx.getByIndex(0))\n```\n\n----------------------------------------\n\nTITLE: Linear Optimization: Solver Example with Multiple Constraints\nDESCRIPTION: Complex linear optimization problem solving using LibreOffice Calc solver, demonstrating constraint setup and profit maximization\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# in linear_solve.py\n@staticmethod\ndef main(verbose: bool = False) -> None:\n    with Lo.Loader(\n        connector=Lo.ConnectPipe(), opt=Lo.Options(verbose=verbose)\n    ) as loader:\n        doc = CalcDoc(Calc.create_doc(loader))\n        sheet = doc.get_active_sheet()\n        Calc.list_solvers()\n\n        # specify the variable cells\n        x_pos = Calc.get_cell_address(sheet=sheet.component, cell_name=\"B1\")  # X\n        y_pos = Calc.get_cell_address(sheet=sheet.component, cell_name=\"B2\")  # Y\n        vars = (x_pos, y_pos)\n\n        # specify profit equation\n        sheet.set_val(value=\"=143*B1 + 60*B2\", cell_name=\"B3\")\n        profit_eq = Calc.get_cell_address(sheet.component, \"B3\")\n\n        # set up equation formulae without inequalities\n        sheet.set_val(value=\"=120*B1 + 210*B2\", cell_name=\"B4\")\n        sheet.set_val(value=\"=110*B1 + 30*B2\", cell_name=\"B5\")\n        sheet.set_val(value=\"=B1 + B2\", cell_name=\"B6\")\n\n        # create the constraints\n        # constraints are equations and their inequalities\n        sc1 = Calc.make_constraint(\n            num=15000, op=\"<=\", sheet=sheet.component, cell_name=\"B4\"\n        )\n        #   20x + 210y <= 15000\n        #   B4 is the address of the cell that is constrained\n        sc2 = Calc.make_constraint(\n            num=4000,\n            op=SolverConstraintOperator.LESS_EQUAL,\n            sheet=sheet.component,\n            cell_name=\"B5\",\n        )\n        #   110x + 30y <= 4000\n        sc3 = Calc.make_constraint(\n            num=75, op=\"<=\", sheet=sheet.component, cell_name=\"B6\"\n        )\n        #   x + y <= 75\n\n        # could also include x >= 0 and y >= 0\n```\n\n----------------------------------------\n\nTITLE: Adding an Image Link to a Writer Document in Python\nDESCRIPTION: This code snippet demonstrates how to add an image to a LibreOffice Writer document by creating a link to an image file. It uses the `TextGraphicObject` service, sets properties such as `AnchorType` and `GraphicURL`, and appends the image to the document using a text cursor.  The image's width and height can also be set.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# in Write class\n@classmethod\ndef add_image_link(\n    cls, doc: XTextDocument, cursor: XTextCursor, fnm: PathOrStr, width: int = 0, height: int = 0\n) -> bool:\n    cargs = CancelEventArgs(Write.add_image_link.__qualname__)\n    cargs.event_data = {\n        \"doc\": doc,\n        \"cursor\": cursor,\n        \"fnm\": fnm,\n        \"width\": width,\n        \"height\": height,\n    }\n    _Events().trigger(WriteNamedEvent.IMAGE_LINK_ADDING, cargs)\n    if cargs.cancel:\n        return False\n\n    fnm = cargs.event_data[\"fnm\"]\n    width = cargs.event_data[\"width\"]\n    height = cargs.event_data[\"height\"]\n\n    try:\n        tgo = Lo.create_instance_msf(XTextContent, \"com.sun.star.text.TextGraphicObject\")\n        if tgo is None:\n            raise mEx.CreateInstanceMsfError(XTextContent, \"com.sun.star.text.TextGraphicObject\")\n\n        props = Lo.qi(XPropertySet, tgo, True)\n        props.setPropertyValue(\"AnchorType\", TextContentAnchorType.AS_CHARACTER)\n        props.setPropertyValue(\"GraphicURL\", FileIO.fnm_to_url(fnm))\n\n        # optionally set the width and height\n        if width > 0 and height > 0:\n            props.setPropertyValue(\"Width\", width)\n            props.setPropertyValue(\"Height\", height)\n\n        # append image to document, followed by a newline\n        cls._append_text_content(cursor, tgo)\n        cls.end_line(cursor)\n    except CreateInstanceMsfError:\n        raise\n    except MissingInterfaceError:\n        raise\n    except Exception as e:\n        raise Exception(f\"Insertion of graphic in '{fnm}' failed:\") from e\n    _Events().trigger(WriteNamedEvent.IMAGE_LINK_ADDED, EventArgs.from_args(cargs))\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementation of Array Storage Helper Methods in Calc Class\nDESCRIPTION: Implementation details of helper methods that handle storage of 2D arrays in cell ranges. This includes set_array_range for explicit ranges, set_array_cell for using a starting cell, and set_cell_range_array which interacts with the LibreOffice API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class (simplified)\n@classmethod\ndef set_array_range(cls, sheet: XSpreadsheet, range_name: str, values: Table) -> None:\n    v_len = len(values)\n    if v_len == 0:\n        Lo.print(\"Values has not data\")\n        return\n    cell_range = cls.get_cell_range(sheet=sheet, range_name=range_name)\n    cls.set_cell_range_array(cell_range=cell_range, values=values)\n\n@classmethod\ndef set_array_cell(cls, sheet: XSpreadsheet, cell_name: str, values: Table) -> None:\n    v_len = len(values)\n    if v_len == 0:\n        Lo.print(\"Values has not data\")\n        return\n    pos = cls.get_cell_position(cell_name)\n    col_end = pos.X + (len(values[0]) - 1)\n    row_end = pos.Y + (v_len - 1)\n    cell_range = cls._get_cell_range_col_row(\n        sheet=sheet, start_col=pos.X, start_row=pos.Y, end_col=col_end, end_row=row_end\n    )\n    cls.set_cell_range_array(cell_range=cell_range, values=values)\n\n@staticmethod\ndef set_cell_range_array(cell_range: XCellRange, values: Table) -> None:\n    v_len = len(values)\n    if v_len == 0:\n        Lo.print(\"Values has not data\")\n        return\n    cr_data = mLo.Lo.qi(XCellRangeData, cell_range)\n    if cr_data is None:\n        return\n    cr_data.setDataArray(values)\n```\n\n----------------------------------------\n\nTITLE: Accessing a Cell (Simplified) in LibreOffice Calc with Python\nDESCRIPTION: This snippet demonstrates a simplified way to access a cell using the `get_cell` method of the `CalcDoc` class.  It provides a more object-oriented approach, making the code more readable and maintainable.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndoc = CalcDoc(Calc.create_doc())\nsheet = doc.get_sheet(idx=0)\ncell = sheet.get_cell(col=2, row=4) # Zero-based\n```\n\n----------------------------------------\n\nTITLE: Setting Row Height in Calc (Python)\nDESCRIPTION: This method sets the height of a specified row in a Calc spreadsheet. It uses the XCellRange interface and the TableRow service to manipulate the row's height property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef set_row_height(\n    cls, sheet: XSpreadsheet, height: int, idx: int\n    ) -> XCellRange:\n\n    if height <= 0:\n        Lo.print(\"Height must be greater then 0\")\n        return None\n    cell_range = cls.get_row_range(sheet=sheet, idx=idx)\n    # Info.show_services(obj_name=\"Cell range for a row\", obj=cell_range)\n    Props.set(cell_range, Height=(height * 100))\n    return cell_range\n```\n\n----------------------------------------\n\nTITLE: Setting Up Equation Formulae in Calc Cells for Linear Solver in Python\nDESCRIPTION: Code that defines the profit equation and constraint formulae in spreadsheet cells. These formulae represent the mathematical relationships between variables that the solver will use to find the optimal solution.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# in linear_solve.py\n# specify profit equation\nsheet = doc.get_active_sheet()\n\nsheet.set_val(value=\"=143*B1 + 60*B2\", cell_name=\"B3\")\nprofit_eq = Calc.get_cell_address(sheet.component, \"B3\")\n\n# set up equation formulae without inequalities\nsheet.set_val(value=\"=120*B1 + 210*B2\", cell_name=\"B4\")\nsheet.set_val(value=\"=110*B1 + 30*B2\", cell_name=\"B5\")\nsheet.set_val(value=\"=B1 + B2\", cell_name=\"B6\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Solver with Constraints and Objective in Python\nDESCRIPTION: This snippet sets up a solver for a linear problem with three variables (x, y, z) in a Calc spreadsheet. It defines the variable cells, the objective function, and the constraints, then initializes and configures the solver before execution.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n\"# part of main() in solver1.py\ndoc = CalcDoc(Calc.create_doc(loader))\nsheet = doc.get_sheet(0)\n\n# specify the variable cells\nx_pos = sheet.get_cell_address(cell_name=\\\"B1\\\")  # X\ny_pos = sheet.get_cell_address(cell_name=\\\"B2\\\")  # Y\nz_pos = sheet.get_cell_address(cell_name=\\\"B3\\\")  # z\nvars = (x_pos, y_pos, z_pos)\n\n# set up equation formula without inequality\nsheet.set_val(value=\\\"=B1+B2-B3\\\", cell_name=\\\"B4\\\")\nobjective = sheet.get_cell_address(cell_name=\\\"B4\\\")\n\n# create three constraints (using the 3 variables)\n\nsc1 = sheet.make_constraint(num=6, op=\\\"<=\\\", cell_name=\\\"B1\\\")\n#   x <= 6\nsc2 = sheet.make_constraint(num=8, op=\\\"<=\\\", cell_name=\\\"B2\\\")\n#   y <= 8\nsc3 = sheet.make_constraint(num=4, op=\\\">=\\\", cell_name=\\\"B3\\\")\n#   z >= 4\n\nconstraints = (sc1, sc2, sc3)\n\n# initialize the nonlinear solver (SCO)\nsolver = Lo.create_instance_mcf(\n    XSolver, \\\"com.sun.star.comp.Calc.NLPSolver.SCOSolverImpl\\\", raise_err=True\n)\nsolver.Document = doc.component\nsolver.Objective = objective\nsolver.Variables = vars\nsolver.Constraints = constraints\nsolver.Maximize = True\n\n# restrict the search to the top-right quadrant of the graph\nProps.show_obj_props(\\\"Solver\\\", solver)\n# switch off nonlinear dialog about current progress\nProps.set(solver, EnhancedSolverStatus=False)\n\n# execute the solver\nsolver.solve()\n# Profit max == 10; vars are very close to 6, 8, and 4, but off by 6-7 dps\nCalc.solver_report(solver)\ndoc.close_doc()\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring the Solver in LibreOffice Calc with Python\nDESCRIPTION: This code snippet shows how to dynamically select an available solver service, create a solver instance, and configure it with objective, variables, and constraints. It includes fallback logic to handle different LibreOffice versions where certain solvers might not be available.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nsolvers = Info.get_service_names(service_name=\"com.sun.star.sheet.Solver\")\npotential_solvers = (\n    \"com.sun.star.comp.Calc.CoinMPSolver\",\n    \"com.sun.star.comp.Calc.LpsolveSolver\",\n)\n\nsrv_solver = \"\"\nfor val in potential_solvers:\n    if val in solvers:\n        srv_solver = val\n        break\n\nif not srv_solver:\n    raise ValueError(\"No valid solver was found\")\n# initialize the linear solver (CoinMP or basic linear)\nsolver = Lo.create_instance_mcf(XSolver, srv_solver, raise_err=True)\n\nsolver.Document = doc.component\nsolver.Objective = profit_eq\nsolver.Variables = vars\nsolver.Constraints = constraints\nsolver.Maximize = True\n\n# restrict the search to the top-right quadrant of the graph\nProps.set(solver, NonNegative=True)\n\n# execute the solver\nsolver.solve()\nCalc.solver_report(solver)\ndoc.close_doc()\n```\n\n----------------------------------------\n\nTITLE: Accessing Cells and Cell Ranges in LibreOffice Calc with Python\nDESCRIPTION: This snippet shows how to access a specific cell and cell ranges within a spreadsheet using the getCellByPosition(), getCellRangeByPosition(), and getCellRangeByName() methods. It demonstrates how to retrieve a cell by its coordinates (column, row) or a range of cells defined by start and end coordinates or by name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsheet = Calc.get_sheet(doc, 0)\ncell = sheet.getCellByPosition(2, 4) # (column,row)\n\n# startColumn, startRow, endColumn, endRow\ncell_range1 = sheet.getCellRangeByPosition(1, 1, 3, 2)\n\ncell_range2 = sheet.getCellRangeByName(\"B2:D3\")\n```\n\n----------------------------------------\n\nTITLE: Setting Character Borders in Writer with Python\nDESCRIPTION: This snippet demonstrates how to apply borders to text characters in LibreOffice Writer. It creates a document, adds text with green borders around the word 'World', and displays the result.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.char.borders import Borders, Side\nfrom ooodev.format.writer.direct.char.borders import Padding\nfrom ooodev.format.writer.direct.char.borders import Shadow\nfrom ooodev.format import StandardColor\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n        cursor = Write.get_cursor(doc)\n\n        Write.append(cursor, \"Hello \")\n\n        side = Side(color=StandardColor.GREEN_LIGHT2)\n        border_style = Borders(all=side)\n\n        Write.append(cursor, \"World\", styles=[border_style])\n        Write.end_paragraph(cursor)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting a Cell Value (Simplified) in LibreOffice Calc with Python\nDESCRIPTION: This snippet demonstrates a simplified way to set the value of a cell using the `set_val` method of the `CalcDoc` class.  It complements the simplified cell access method shown earlier, creating a more concise way to write to cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndoc = CalcDoc(Calc.create_doc())\nsheet = doc.get_sheet(idx=0)\ncell = sheet.get_cell(col=2, row=4) # Zero-based\ncell.set_val(9)\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Values in Calc Spreadsheets Using Different Approaches\nDESCRIPTION: Demonstrates two approaches for setting cell values: by specifying column and row coordinates, or by using cell names. Both approaches ultimately call the Calc.set_val method to store values in cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# in _build_cells() of build_table.py\n# ...\nfor i, val in enumerate(header_vals):\n    sheet.set_val(value=val, col=i + 1, row=0)\n\n# ...\nfor i, val in enumerate(vals):\n    cell_name = TableHelper.make_cell_name(row=2, col=i + 2)\n    sheet.set_val(value=val, cell_name=cell_name)\n# ...\n```\n\n----------------------------------------\n\nTITLE: Closing LibreOffice using Lo.close_office in Python\nDESCRIPTION: This snippet demonstrates how to properly shut down the LibreOffice instance created by the Lo.load_office method, ensuring cleanup in case of runtime exceptions to avoid leftover processes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\n\ndef main():\n    # Assume Lo.load_office() was called earlier\n    Lo.close_office()  # shuts down Office instance\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Accessing a Sheet through CalcDoc - Python\nDESCRIPTION: This snippet illustrates how to access a sheet by utilizing the CalcDoc class. It employs the Calc utility to open a document and retrieve the specific sheet as a CalcSheet instance, providing an object-oriented approach to handling spreadsheets.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# from ooodev.calc import CalcDoc, Calc\nloader = Lo.load_office(Lo.ConnectSocket())\ndoc = CalcDoc(Calc.open_doc(doc_path, loader))\nsheet = doc.get_sheet(0) # CalcSheet instance\n```\n\n----------------------------------------\n\nTITLE: Filling Shape with Color Using Python\nDESCRIPTION: This script snippet shows how to use the ShapeColor class to fill a shape with a color. It requires predefined colors from the StandardColor class and a shape previously added to a drawing page. The shape color is set and applied to the rectangle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/color.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.area import Color as ShapeColor\n# ... other code\n\nstyle = ShapeColor(color=StandardColor.GREEN_LIGHT2)\n\n# get the page\npage = Write.get_draw_page(doc)\n# draw a rectangle\nrect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\n# apply the style\nstyle.apply(rect)\n# add the rectangle to the page\npage.add(rect)\n```\n\n----------------------------------------\n\nTITLE: Drawing a Bezier Curve in LibreOffice Draw using Python-UNO\nDESCRIPTION: This method creates a Bezier curve in a LibreOffice Draw document. It defines the curve's points and flags, then uses the draw_bezier_open method to create an OpenBezierShape on the slide.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# in bezier_builder.py\ndef _draw_curve(\n    self, slide: DrawPage[DrawDoc]\n) -> OpenBezierShape[DrawDoc]:\n    # sample data, same as bpts3.txt\n    path_pts: List[Point] = []\n    path_flags: List[PolygonFlags] = []\n\n    path_pts.append(Point(1_000, 2_500))\n    path_flags.append(PolygonFlags.NORMAL)\n\n    path_pts.append(Point(1_000, 1_000))  # control point\n    path_flags.append(PolygonFlags.CONTROL)\n\n    path_pts.append(Point(4_000, 1_000))  # control point\n    path_flags.append(PolygonFlags.CONTROL)\n\n    path_pts.append(Point(4_000, 2_500))\n    path_flags.append(PolygonFlags.NORMAL)\n\n    return slide.draw_bezier_open(\n        pts=path_pts, flags=path_flags\n    )\n```\n\n----------------------------------------\n\nTITLE: Numbering Paragraphs in Python\nDESCRIPTION: This snippet shows how to number paragraphs using `ListStyle` and `StyleListKind` from the `ooodev.format.writer.direct.para.outline_list` module. It applies a numbered list style to the cursor's component, appends the numbered paragraphs, and then resets the style to the default.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.para.outline_list import ListStyle, StyleListKind\n# ...\n\ncursor.append_para(\"The following points are important:\")\n\nlist_style = ListStyle(list_style=StyleListKind.NUM_123, num_start=-2)\nlist_style.apply(cursor.component)\n\ncursor.append_para(\"Have a good breakfast\")\ncursor.append_para(\"Have a good lunch\")\ncursor.append_para(\"Have a good dinner\")\n\n# Reset to default which set cursor to No List Style\nlist_style.default.apply(cursor.component)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a LibreOffice Writer Document for Paragraph Background Color\nDESCRIPTION: A complete example showing how to create a Writer document and apply paragraph background color. The code imports necessary modules, opens a document connection, creates a document, and applies a yellow-green background color to a paragraph.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/color.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.writer.direct.para.area import Color as ParaBgColor\n\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n        cursor = Write.get_cursor(doc)\n        fc = ParaBgColor(CommonColor.YELLOW_GREEN)\n        Write.append_para(cursor=cursor, text=\"Fill Color starts Here\", styles=[fc])\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Defining Italicize All Function in Python\nDESCRIPTION: The Python function italicize_all searches for a phrase in a LibreOffice document and applies italic style and specified color to the found occurrences. It relies on LibreOffice's XSearchable and XTextRange interfaces.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef italicize_all(doc: WriteDoc, phrase: str, color: Color) -> int:\n    # cursor = Write.get_view_cursor(doc) # can be used when visible\n    cursor = doc.get_cursor()\n    cursor.goto_start()\n    page_cursor = doc.get_view_cursor()\n    result = 0\n    try:\n        searchable = doc.qi(XSearchable, True)\n        search_desc = searchable.createSearchDescriptor()\n        print(f\"Searching for all occurrences of '{phrase}'\")\n        phrase_len = len(phrase)\n        search_desc.setSearchString(phrase)\n        # If SearchWords==True, only complete words will be found.\n        Props.set(search_desc, SearchCaseSensitive=False, SearchWords=True)\n\n        matches = searchable.findAll(search_desc)\n        result = matches.getCount()\n\n        print(f\"No. of matches: {result}\")\n\n        font_effect = Font(i=True, color=color)\n\n        for i in range(result):\n            match_tr = Lo.qi(XTextRange, matches.getByIndex(i))\n            if match_tr is not None:\n                cursor.goto_range(match_tr, False)\n                print(f\"  - found: '{match_tr.getString()}'\")\n                print(f\"    - on page {page_cursor.get_page()}\")\n                cursor.goto_start(True)\n                print(\n                    f\"    - starting at char position: {len(cursor.get_string()) - phrase_len}\"\n                )\n\n                font_effect.apply(match_tr)\n\n    except Exception:\n        raise\n    return result\n```\n\n----------------------------------------\n\nTITLE: Simple Document Dialog Python Macro\nDESCRIPTION: A basic LibreOffice macro that creates and displays a document-based dialog. Demonstrates the required g_exportedScripts tuple for macro registration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/embed_python.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import unicode_literals\n\ndef doc_dialog():\n    \"\"\"Display a doc-based dialog\"\"\"\n    model = XSCRIPTCONTEXT.getDocument()\n    smgr = XSCRIPTCONTEXT.getComponentContext().ServiceManager\n    dp = smgr.createInstanceWithArguments(\"com.sun.star.awt.DialogProvider\", (model,))\n    dlg = dp.createDialog(\"vnd.sun.star.script:Standard.Dialog1?location=document\")\n    dlg.execute()\n    dlg.dispose()\n\n\ng_exportedScripts = (doc_dialog,)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Line Error Chart in Python\nDESCRIPTION: This function initializes a scatter line error chart in a spreadsheet document using LibreOffice's Chart2 API. It establishes a data range and inserts a chart, setting the chart and axis titles, and creates y-axis error bars based on provided data labels and ranges. Dependencies include XSpreadsheetDocument, XSpreadsheet, and XChartDocument interfaces, and it returns an XChartDocument representing the new chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Chart2View._scatter_line_error_chart() in chart_2_views.py\ndef _scatter_line_error_chart(\n    self, doc: XSpreadsheetDocument, sheet: XSpreadsheet\n) -> XChartDocument:\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"A142:B146\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"F115\",\n        width=14,\n        height=16,\n        diagram_name=ChartTypes.XY.TEMPLATE_LINE.SCATTER_LINE_SYMBOL,\n    )\n    Calc.goto_cell(cell_name=\"A123\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A141\")\n    )\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A142\")\n        )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=\"Impact Energy (Joules)\"\n    )\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n\n    Lo.print(\"Adding y-axis error bars\")\n    sheet_name = Calc.get_sheet_name(sheet)\n    error_label = f\"{sheet_name}.C142\"\n    error_range = f\"{sheet_name}.C143:C146\"\n    Chart2.set_y_error_bars(\n        chart_doc=chart_doc, data_label=error_label, data_range=error_range\n    )\n    return chart_doc\n\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row in Calc Sheet using Python\nDESCRIPTION: This snippet shows how to insert a new row at a specific index in a Calc sheet using the `insert_row` method.  It leverages the `XColumnRowRange` interface to retrieve the `XTableRows` interface, allowing row insertion at the specified index. The code inserts one row at the given index.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n\"# in garlic_secrets.py\n# ...\n# add a new first row, and label that as at the bottom\nsheet.insert_row(idx=0)\nself._add_garlic_label(sheet=sheet, empty_row_num=0)\n# ...\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"# in Calc class (simplified)\n@staticmethod\ndef insert_row(sheet: XSpreadsheet, idx: int) -> bool:\n    cr_range = Lo.qi(XColumnRowRange, sheet, True)\n    rows = cr_range.getRows()\n    rows.insertByIndex(idx, 1)  # add 1 row at idx position\n    return True\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Table from File Data in LibreOffice Writer using Python\nDESCRIPTION: The `main` function reads data from `bondMovies.txt` and creates a text table in LibreOffice Writer. It uses Python's `csv.reader` for processing file contents and requires `Lo.Loader` for loading documents. This function demonstrates harnessing Python file processing with LibreOffice API to format external data as a structured table in a Writer document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> int:\n\n    fnm = Path(__file__).parent / \"data\" / \"bondMovies.txt\"  # source csv file\n\n    tbl_data = read_table(fnm)\n\n    delay = 2_000  # delay so users can see changes.\n\n    with Lo.Loader(Lo.ConnectSocket()) as loader:\n\n        doc = Write.create_doc(loader=loader)\n\n        try:\n            GUI.set_visible(is_visible=True, odoc=doc)\n\n            cursor = Write.get_cursor(doc)\n\n            Write.append_para(cursor, \"Table of Bond Movies\")\n            Write.style_prev_paragraph(cursor, \"Heading 1\")\n            Write.append_para(cursor, 'The following table comes form \"bondMovies.txt\"\\n')\n\n            # Lock display updating for faster writing of table into document.\n            with Lo.ControllerLock():\n                Write.add_table(cursor=cursor, table_data=tbl_data)\n                Write.end_paragraph(cursor)\n\n            Lo.delay(delay)\n            Write.append(cursor, f\"Timestamp: {DateUtil.time_stamp()}\")\n            Lo.delay(delay)\n            Lo.save_doc(doc, \"table.odt\")\n\n        finally:\n            Lo.close_doc(doc)\n\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Simplified Access to Spreadsheet Document Sheet - Python\nDESCRIPTION: This snippet simplifies the process of accessing the first sheet of a document using the Calc utility class. It abstracts the loading and document opening steps, allowing for a cleaner access method to the sheet.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nloader = Lo.load_office(Lo.ConnectSocket())\nCalc.open_doc(doc_path, loader)\nsheet = Calc.get_sheet(doc, 0)\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing LibreOffice Writer Hyperlinks\nDESCRIPTION: Demonstrates a complete example of creating a document, adding hyperlinks, removing them, and retrieving hyperlink properties. Uses the ooodev library to interface with LibreOffice Writer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/hyperlink.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom ooodev.format.writer.direct.char.hyperlink import Hyperlink, TargetKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n        cursor = Write.get_cursor(doc)\n\n        ln_name = \"OooDev\"\n        ln_url = \"https://python-ooo-dev-tools.readthedocs.io/en/latest/\"\n\n        hl = Hyperlink(name=ln_name, url=ln_url)\n        Write.append(cursor, \"OOO Development Tools\", (hl,))\n        Write.append_para(cursor, \" Docs\")\n\n        Write.append(cursor, \"Source on Github \")\n\n        pos = Write.get_position(cursor)\n\n        ln_name = \"OOODEV_GITHUB\"\n        ln_url = \"https://github.com/Amourspirit/python_ooo_dev_tools\"\n        hl = Hyperlink(name=ln_name, url=ln_url, target=TargetKind.BLANK)\n        Write.append(cursor, \"OOO Development Tools on Github\", (hl,))\n\n        Lo.delay(2_000)\n\n        # remove the hyperlink\n        Write.style_left(cursor=cursor, pos=pos, styles=(hl.empty,))\n\n        # get the hyperlink from the document\n        cursor.gotoStart(False)\n        cursor.goRight(21, True)\n        ooo_dev_hl = Hyperlink.from_obj(cursor)\n        cursor.gotoEnd(False)\n        print(ooo_dev_hl.prop_url)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: ShowSheet.main() function\nDESCRIPTION: Opens a spreadsheet document, optionally setting it to visible, accessing a specific sheet, protecting and unprotecting a sheet with a password, saving the document to a specified output file, and prompting the user to close the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n        # ShowSheet.main() function of show_sheet.py\n        def main(self) -> None:\n            loader = Lo.load_office(Lo.ConnectSocket())\n\n            try:\n                doc = CalcDoc(Calc.open_doc(fnm=self._input_fnm, loader=loader))\n\n                # doc = Lo.open_readonly_doc(fnm=self._input_fnm, loader=loader)\n                # doc = Calc.get_ss_doc(doc)\n\n                if self._visible:\n                    doc.set_visible()\n\n                sheet = doc.get_active_sheet()\n\n                sheet.goto_cell(cell_name=\"A1\")\n                sheet_names = doc.get_sheet_names()\n                print(f\"Names of Sheets ({len(sheet_names)}):\")\n                for name in sheet_names:\n                    print(f\"  {name}\")\n\n                doc.set_active_sheet(sheet.component)\n                pro = sheet.qi(XProtectable, True)\n                pro.protect(\"foobar\")\n                print(f\"Is protected: {pro.isProtected()}\")\n\n                Lo.delay(2000)\n                # query the user for the password\n                pwd = GUI.get_password(\"Password\", \"Enter sheet Password\")\n                if pwd == \"foobar\":\n                    pro.unprotect(pwd)\n                    MsgBox.msgbox(\n                        \"Password is Correct\", \"Password\", boxtype=MessageBoxType.INFOBOX\n                    )\n                else:\n                    MsgBox.msgbox(\n                        \"Password is incorrect\", \"Password\", boxtype=MessageBoxType.ERRORBOX\n                    )\n\n                if self._out_fnm:\n                    doc.save_doc(fnm=self._out_fnm)\n\n                msg_result = MsgBox.msgbox(\n                    \"Do you wish to close document?\",\n                    \"All done\",\n                    boxtype=MessageBoxType.QUERYBOX,\n                    buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n                )\n                if msg_result == MessageBoxResultsEnum.YES:\n                    doc.close_doc()\n                    Lo.close_office()\n                else:\n                    print(\"Keeping document open\")\n\n            except Exception:\n                Lo.close_office()\n                raise\n```\n\n----------------------------------------\n\nTITLE: Accessing a Cell in LibreOffice Calc with Python\nDESCRIPTION: This snippet shows how to access a specific cell within a spreadsheet using the getCellByPosition() method, which takes the column and row indices as arguments. This method is part of the XSpreadsheet interface and allows direct access to individual cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# sheet is XSpreadsheet\ncell = sheet.getCellByPosition(2, 4)\n```\n\n----------------------------------------\n\nTITLE: Sorting Data with XSortable Interface in Python\nDESCRIPTION: This snippet demonstrates how to use the XSortable interface to sort a range of cells in a LibreOffice Calc document. It involves obtaining the interface, specifying sorting criteria, creating a sort descriptor, and executing the sort. Dependencies include the LibreOffice environment and related Python modules.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# in data_sort.py\n\ndef main(self) -> None:\n    loader = Lo.load_office(Lo.ConnectSocket())\n\n    try:\n        doc = CalcDoc(Calc.create_doc(loader))\n\n        doc.set_visible()\n\n        sheet = doc.get_sheet(0)\n\n        # create the table that needs sorting\n        vals = (\n            (\"Level\", \"Code\", \"No.\", \"Team\", \"Name\"),\n            (\"BS\", 20, 4, \"B\", \"Elle\"),\n            (\"BS\", 20, 6, \"C\", \"Sweet\"),\n            (\"BS\", 20, 2, \"A\", \"Chcomic\"),\n            (\"CS\", 30, 5, \"A\", \"Ally\"),\n            (\"MS\", 10, 1, \"A\", \"Joker\"),\n            (\"MS\", 10, 3, \"B\", \"Kevin\"),\n            (\"CS\", 30, 7, \"C\", \"Tom\"),\n        )\n        sheet.set_array(values=vals, name=\"A1:E8\")  # or just \"A1\"\n\n        # 1. obtain an XSortable interface for the cell range\n        source_range = sheet.get_range(range_name=\"A1:E8\")\n        x_sort = source_range.qi(XSortable, True)\n\n        # 2. specify the sorting criteria as a TableSortField array\n        sort_fields = (self._make_sort_asc(1, True), self._make_sort_asc(2, True))\n\n        # 3. define a sort descriptor\n        props = Props.make_props(\n            SortFields=Props.any(*sort_fields), ContainsHeader=True\n        )\n\n        Lo.wait(2_000)  # wait so user can see original before it is sorted\n        # 4. do the sort\n        print(\"Sorting...\")\n        x_sort.sort(props)\n\n        if self._out_fnm:\n            doc.save_doc(fnm=self._out_fnm)\n\n        msg_result = MsgBox.msgbox(\n            \"Do you wish to close document?\",\n            \"All done\",\n            boxtype=MessageBoxType.QUERYBOX,\n            buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n        )\n        if msg_result == MessageBoxResultsEnum.YES:\n            doc.close_doc()\n            Lo.close_office()\n        else:\n            print(\"Keeping document open\")\n\n    except Exception:\n        Lo.close_office()\n        raise\n```\n\nLANGUAGE: python\nCODE:\n```\n# in data_sort.py\n# ...\n# 1. obtain an XSortable interface for the cell range\nsource_range = Calc.get_cell_range(sheet=sheet, range_name=\"A1:E8\")\nxsort = Lo.qi(XSortable, source_range, True)\n\n# 2. specify the sorting criteria as a TableSortField array\nsort_fields = (self._make_sort_asc(1, True), self._make_sort_asc(2, True))\n\n# 3. define a sort descriptor\nprops = Props.make_props(SortFields=Props.any(*sort_fields), ContainsHeader=True)\n\nLo.wait(2_000)  # wait so user can see original before it is sorted\n# 4. do the sort\nprint(\"Sorting...\")\nxsort.sort(props)\n# ...\n```\n\nLANGUAGE: python\nCODE:\n```\n# in data_sort.py\n\ndef _make_sort_asc(self, index: int, is_ascending: bool) -> TableSortField:\n    return TableSortField(Field=index, IsAscending=is_ascending, IsCaseSensitive=False)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell Ranges in LibreOffice Calc with Python\nDESCRIPTION: Shows how to convert a range address into an XCellRange reference using the get_cell_range method. This method provides a simple interface to access a range of cells in a spreadsheet by its name (e.g., 'A1:D5').\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# sheet is an XSpreadsheet\ncell = Calc.get_cell_range(sheet=sheet, range_name=\"A1:D5\");\n```\n\n----------------------------------------\n\nTITLE: Adding Hyperlink to Spreadsheet Cell in Python\nDESCRIPTION: Demonstrates inserting text paragraphs and a hyperlink into a cell using XText interface and text cursor\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncell = sheet.get_cell(cell_name=\"B4\")\nx_text = cell.qi(XText, True)\ncursor = x_text.createTextCursor()\nWrite.append_para(cursor=cursor, text=\"Text in first line.\")\nWrite.append(cursor=cursor, text=\"And a \")\nWrite.add_hyperlink(\n    cursor=cursor,\n    label=\"hyperlink\",\n    url_str=\"https://github.com/Amourspirit/python_ooo_dev_tools\",\n)\n```\n\n----------------------------------------\n\nTITLE: Read-only Document Opening in Python-UNO\nDESCRIPTION: Opens a Calc document in read-only mode using the Lo class helper method. Uses the ReadOnly property with Hidden set to True.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndoc = Lo.open_readonly_doc(fnm=self._input_fnm, loader=loader)\ndoc = Calc.get_ss_doc(doc)\n```\n\n----------------------------------------\n\nTITLE: Initializing Calc Document and Setting Up Borders\nDESCRIPTION: This code initializes a Calc document, creates a visible sheet, and sets a blue border around a specified cell range. It demonstrates the use of the `Borders` class from the `ooodev` library to apply styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format import Styler\nfrom ooodev.format.calc.direct.cell.borders import Borders, Shadow, Side, BorderLineKind, Padding\nfrom ooodev.office.calc import Calc\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.gui.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(300)\n        Calc.zoom_value(doc, 130)\n\n        rng_obj = Calc.get_range_obj(\"B2:F6\")\n        cr = Calc.get_cell_range(sheet, rng_obj)\n        borders = Borders(border_side=Side(color=CommonColor.BLUE))\n        Styler.apply(cr, borders)\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech Function for OpenOffice Documents in Python\nDESCRIPTION: This function iterates through paragraphs and sentences in an OpenOffice text document, speaking each sentence using a text-to-speech library. It demonstrates cursor manipulation and text range comparison.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef speak_sentences(doc: XTextDocument) -> None:\n    tvc = Write.get_view_cursor(doc)\n    para_cursor = Write.get_paragraph_cursor(doc)\n    para_cursor.gotoStart(False)  # go to start test; no selection\n\n    while 1:\n        para_cursor.gotoEndOfParagraph(True)  # select all of paragraph\n        end_para = para_cursor.getEnd()\n        curr_para_str = para_cursor.getString()\n        print(f\"P<{curr_para_str}>\")\n\n        if len(curr_para_str) > 0:\n            # set sentence cursor pointing to start of this paragraph\n            cursor = para_cursor.getText().createTextCursorByRange(para_cursor.getStart())\n            sc = Lo.qi(XSentenceCursor, cursor)\n            sc.gotoStartOfSentence(False)\n            while 1:\n                sc.gotoEndOfSentence(True)  # select all of sentence\n\n                # move the text view cursor to highlight the current sentence\n                tvc.gotoRange(sc.getStart(), False)\n                tvc.gotoRange(sc.getEnd(), True)\n                curr_sent_str = strip_non_word_chars(sc.getString())\n                print(f\"S<{curr_sent_str}>\")\n                if len(curr_sent_str) > 0:\n                    speak(\n                        curr_sent_str,\n                    )\n                if Write.compare_cursor_ends(sc.getEnd(), end_para) >= Write.CompareEnum.EQUAL:\n                    print(\"Sentence cursor passed end of current paragraph\")\n                    break\n\n                if sc.gotoNextSentence(False) is False:\n                    print(\"# No next sentence\")\n                    break\n\n        if para_cursor.gotoNextParagraph(False) is False:\n            break\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Chart with Logarithmic Axes and Power Regression in Python\nDESCRIPTION: This method creates a scatter chart with logarithmic scaling on both axes and adds a power regression curve. It uses data from a specific range in a spreadsheet and sets various chart properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef _scatter_line_log_chart(\n    self, doc: XSpreadsheetDocument, sheet: XSpreadsheet\n) -> XChartDocument:\n    # uses the \"Power Function Test\" table\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"E110:F120\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"A121\",\n        width=20,\n        height=11,\n        diagram_name=ChartTypes.XY.TEMPLATE_LINE.SCATTER_LINE_SYMBOL,\n    )\n    Calc.goto_cell(cell_name=\"A121\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E109\")\n    )\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E110\")\n    )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"F110\")\n    )\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n\n    # change x- and y- axes to log scaling\n    x_axis = Chart2.scale_x_axis(chart_doc=chart_doc, scale_type=CurveKind.LOGARITHMIC)\n    _ = Chart2.scale_y_axis(chart_doc=chart_doc, scale_type=CurveKind.LOGARITHMIC)\n    Chart2.draw_regression_curve(chart_doc=chart_doc, curve_kind=CurveKind.POWER)\n    return chart_doc\n```\n\n----------------------------------------\n\nTITLE: Creating Impress Slides with Python\nDESCRIPTION: This code snippet demonstrates how to create an Impress document, add slides, set titles and subtitles, add a video, create button shapes, and display shapes using dispatches. It utilizes the Lo, ImpressDoc, Draw, and MsgBox classes from the odev library. The script handles closing the document based on user input.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"# in make_slides.py\ndef main(self) -> None:\n    loader = Lo.load_office(Lo.ConnectPipe())\n\n    try:\n        doc = ImpressDoc(Draw.create_impress_doc(loader))\n        curr_slide = doc.get_slide(idx=0)\n\n        doc.set_visible()\n        Lo.delay(1_000)  # delay to make sure zoom takes\n        doc.zoom(ZoomKind.ENTIRE_PAGE)\n\n        curr_slide.title_slide(\n            title=\"Python-Generated Slides\",\n            sub_title=\"Using LibreOffice\",\n        )\n\n        # second slide\n        curr_slide = doc.add_slide()\n        self._do_bullets(curr_slide=curr_slide)\n\n        # third slide: title and video\n        curr_slide = doc.add_slide()\n        curr_slide.title_only_slide(\"Clock Video\")\n        curr_slide.draw_media(fnm=self._fnm_clock, x=20, y=70, width=50, height=50)\n\n        # fourth slide\n        curr_slide = doc.add_slide()\n        self._button_shapes(curr_slide=curr_slide)\n\n        # fifth slide\n        if DrawDispatcher:\n            # windows only\n            # a bit slow due to gui interaction but a good demo\n            self._dispatch_shapes(doc)\n\n        Lo.print(f\"Total no. of slides: {doc.get_slides_count()}\")\n\n        Lo.delay(2000)\n        msg_result = MsgBox.msgbox(\n            \"Do you wish to close document?\",\n            \"All done\",\n            boxtype=MessageBoxType.QUERYBOX,\n            buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n        )\n        if msg_result == MessageBoxResultsEnum.YES:\n            doc.close_doc()\n            Lo.close_office()\n        else:\n            print(\"Keeping document open\")\n\n    except Exception:\n        Lo.close_office()\n        raise\n\n```\n\n----------------------------------------\n\nTITLE: Inserting Cells in Calc Sheet with Shifting using Python\nDESCRIPTION: This snippet shows how to insert blank cells into a Calc sheet, shifting existing cells either to the right or downwards. The `insert_cells` method leverages the `XCellRangeMovement` interface to move the specified cell range in the chosen direction, determined by the `is_shift_right` boolean.  It uses the `CellInsertMode` enum to specify the direction.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n\"# in Calc class (simplified)\n@classmethod\ndef insert_cells(cls, sheet: XSpreadsheet, cell_range: XCellRange, is_shift_right: bool) -> bool:\n    mover = mLo.Lo.qi(XCellRangeMovement, sheet, True)\n    addr = cls.get_address(cell_range)\n    if is_shift_right:\n        mover.insertCells(addr, CellInsertMode.RIGHT)\n    else:\n        mover.insertCells(addr, CellInsertMode.DOWN)\n    return True\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"blanks = Calc.get_cell_range(sheet=sheet, range_name=\\\"A4999:B5001\\\")\nCalc.insert_cells(sheet=sheet, cell_range=blanks, is_shift_right=True)  # shift right\"\n```\n\n----------------------------------------\n\nTITLE: Basic LibreOffice Program Structure in Python\nDESCRIPTION: Demonstrates the typical structure of a Python program that loads LibreOffice, manipulates a document, and closes LibreOffice. It uses the Lo class from the ooodev.loader module to handle office connections.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\n\ndef main() -> None:\n    loader = Lo.load_office(Lo.ConnectSocket(headless=True)) # XComponentLoader\n\n    # load, manipulate and close a document\n\n    Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Computing Function in LibreOffice Calc with Python\nDESCRIPTION: This method in the Calc class applies a specified GeneralFunction enum over a given cell range using the XSheetOperation interface. It attempts to convert the provided function name to an enum and compute the result. Dependencies include the uno package and Calc methods. The function takes a GeneralFunction or string as fn, and an XCellRange as arguments, returning a float result.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@classmethod\ndef compute_function(cls, fn: GeneralFunction | str, cell_range: XCellRange) -> float:\n    try:\n        sheet_op = Lo.qi(XSheetOperation, cell_range, raise_err=True)\n        func = GeneralFunction(fn)  # convert to enum value if str\n        if not isinstance(fn, uno.Enum):\n            Lo.print(\"Arg fn is invalid, returning 0.0\")\n            return 0.0\n        return sheet_op.computeFunction(func)\n    except Exception as e:\n        Lo.print(\"Compute function failed. Returning 0.0\")\n        Lo.print(f\"    {e}\")\n    return 0.0\n```\n\n----------------------------------------\n\nTITLE: Checking Spelling of a Word in Python\nDESCRIPTION: The static method 'spell_word' in the 'Write' class is used to determine if a word is correctly spelled using 'XSpellChecker'. If the word is unknown, it prints suggested alternatives. It sets a default locale to 'en_US' if none is provided. The method is part of a larger spell checker service integration and requires the 'XSpellChecker' dependency to function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# in the Write class\n@staticmethod\ndef spell_word(word: str, speller: XSpellChecker, loc: Locale | None = None) -> bool:\n    if loc is None:\n        loc = Locale(\"en\", \"US\", \"\")\n    alts = speller.spell(word, loc, ())\n    if alts is not None:\n        print(f\"* '{word}' is unknown. Try:\")\n        alt_words = alts.getAlternatives()\n        mLo.Lo.print_names(alt_words)\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Processing Text Portions within Paragraphs in Python\nDESCRIPTION: This Python code demonstrates how to iterate over text portions within paragraphs. By verifying the type of paragraph with the `TextTable` service, it skips tables and processes text portions using the `XTextRange` interface. It provides insights into accessing and using text portion properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nif not Info.support_service(text_con, \"com.sun.star.text.TextTable\"):\n    para_enum = Write.get_enumeration(text_con)\n    while para_enum.hasMoreElements():\n        txt_range = Lo.qi(XTextRange, para_enum.nextElement())\n        # use the text portion (txt_range) in some way...\n```\n\n----------------------------------------\n\nTITLE: Calculating Regression Curves using Calc in Python\nDESCRIPTION: This class method calculates various regression curves (linear, logarithmic, etc.) for a given chart document in Calc. It iterates through different curve types and uses an inner function to print the regression results. This function requires that the chart document is already created and available. It is primarily used for evaluating regression accuracy using the given data on a scatter chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@classmethod\ndef calc_regressions(cls, chart_doc: XChartDocument) -> None:\n\n    def curve_info(curve_kind: CurveKind) -> None:\n        curve = cls.create_curve(curve_kind=curve_kind)\n        print(f\"{curve_kind.label} regression curve:\")\n        cls.eval_curve(chart_doc=chart_doc, curve=curve)\n        print()\n\n    curve_info(CurveKind.LINEAR)\n    curve_info(CurveKind.LOGARITHMIC)\n    curve_info(CurveKind.EXPONENTIAL)\n    curve_info(CurveKind.POWER)\n    curve_info(CurveKind.POLYNOMIAL)\n    curve_info(CurveKind.MOVING_AVERAGE)\n```\n\n----------------------------------------\n\nTITLE: Recommended Headless Settings for LibreOffice in Python\nDESCRIPTION: This snippet sets both the profile path to an empty string and disables shared extensions while loading LibreOffice in headless mode, ensuring optimal behavior in automated scenarios.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.conn.cache import Cache\n\ndef main():\n    with Lo.Loader(\n        Lo.ConnectSocket(headless=True),\n        cache_obj=Cache(profile_path='', no_shared_ext=True),\n    ) as loader:\n        # do work and then loader will be closed automatically.\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Setting up cell protection for ranges in LibreOffice Calc\nDESCRIPTION: A complete example that demonstrates applying cell protection to a range of cells. The code creates a Calc document, adds values to cells, and then applies protection properties to the entire range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/cell_protection.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.cell_protection import CellProtection\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        Calc.set_val(value=\"Hello\", sheet=sheet, cell_name=\"A1\")\n        Calc.set_val(value=\"World\", sheet=sheet, cell_name=\"B1\")\n        rng = Calc.get_cell_range(sheet=sheet, range_name=\"A1:B1\")\n\n        style = CellProtection(hide_all=False, hide_formula=True, protected=True, hide_print=True)\n        style.apply(rng)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Opening Multiple Documents Using LibreOffice Bridge Connection - Python\nDESCRIPTION: This code demonstrates how to open multiple documents from a single LibreOffice bridge connection using the LoInst class. It shows how to load the office and create documents while keeping the primary document visible and editable.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.loader.inst.lo_inst import LoInst\nfrom ooodev.utils.inst.lo.doc_type import DocTypeStr\nfrom ooodev.gui import GUI\n\ndef main() -> None:\n    # Start LibreOffice using a Socket bridge.\n    _ = Lo.load_office(Lo.ConnectSocket())\n    # create a new Calc document.\n    primary_doc= Calc.create_doc()\n    # get the first sheet in the primary document\n    primary_sheet = Calc.get_sheet(primary_doc, 0)\n    # show the primary document\n    GUI.set_visible(visible=True, doc=primary_doc)\n    # set a value in the primary document sheet\n    Calc.set_val(value=\"LO TEST\", sheet=primary_sheet, cell_name=\"A1\")\n\n    # Create a new instance of LoInst and pass the bridge connection from the static Lo class\n    inst = LoInst()\n    inst.load_office(Lo.bridge_connector)\n\n    # Create a new document from the new instance of LoInst\n    secondary_doc = inst.create_doc(DocTypeStr.CALC)\n    # show the secondary document\n    GUI.set_visible(visible=True, doc=secondary_doc)\n    secondary_sheet = Calc.get_sheet(doc, 0)\n    # set a value in the secondary document sheet\n    Calc.set_val(value=\"LO INST\", sheet=secondary_sheet, cell_name=\"A1\")\n    # ... other code\n\n```\n\n----------------------------------------\n\nTITLE: Initializing LibreOffice WriteDoc with Table Background Color\nDESCRIPTION: Sets up a LibreOffice Writer document, creates a table with a lime light background color using OOO Development Tools. Demonstrates table creation with color styling and object retrieval.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/background.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport uno\nfrom ooodev.write import WriteDoc\nfrom ooodev.format.writer.direct.table.background import Color as TblBgColor\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader import Lo\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.utils.table_helper import TableHelper\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = WriteDoc.create_doc(visible=True)\n        Lo.delay(300)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n        cursor = doc.get_cursor()\n\n        tbl_data = TableHelper.make_2d_array(num_rows=5, num_cols=5)\n        bg_color_style = TblBgColor(StandardColor.LIME_LIGHT3)\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            styles=[bg_color_style],\n        )\n\n        tbl_bg_color_style = TblBgColor.from_obj(table.component)\n        assert tbl_bg_color_style is not None\n\n        Lo.delay(1_000)\n        doc.close()\n\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Applying Borders with Increased Width in Python\nDESCRIPTION: This snippet illustrates setting border width using the `Side` class's `width` parameter. It applies a green border with a specific width to the left and right sides of the range `B2:F6`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\nside_left_right = Side(color=CommonColor.GREEN, width=1.8)\ncell_rng.style_borders(\n    left=side_left_right, right=side_left_right\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Buttons on Slide - Python\nDESCRIPTION: Creates interactive buttons on a slide that trigger different actions, like video playback or navigation, on click. Requires a slide object, modifying it with interactive elements. Uses shape properties like OnClick and Bookmark combined with click actions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n        def _button_shapes(self, curr_slide: ImpressPage[ImpressDoc]) -> None:\n            # fourth slide: title and rectangle (button) for playing a video\n            # and a rounded button back to start\n            curr_slide.title_only_slide(\"Wildlife Video Via Button\")\n\n            # button in the center of the slide\n            sz = curr_slide.get_size_mm()\n            width = 80\n            height = 40\n\n            ellipse = curr_slide.draw_ellipse(\n                x=round((sz.Width - width) / 2),\n                y=round((sz.Height - height) / 2),\n                width=width,\n                height=height,\n            )\n\n            ellipse.add_text(msg=\"Start Video\", font_size=30)\n            ellipse.set_property(\n                OnClick=ClickAction.DOCUMENT, Bookmark=FileIO.fnm_to_url(self._fnm_wildlife)\n            )\n            # set Animation\n            ellipse.set_property(\n                Effect=AnimationEffect.MOVE_FROM_LEFT, Speed=AnimationSpeed.FAST\n            )\n\n            # draw a rounded rectangle with text\n            button = curr_slide.draw_rectangle(\n                x=sz.Width - width - 4,\n                y=sz.Height - height - 5,\n                width=width,\n                height=height,\n            )\n            button.add_text(msg=\"Click to go\\nto slide 1\")\n            button.set_gradient_color(name=DrawingGradientKind.SUNSHINE)\n            # clicking makes the presentation jump to first slide\n            button.set_property(CornerRadius=300, OnClick=ClickAction.FIRSTPAGE)\n\n```\n\n----------------------------------------\n\nTITLE: Setting up cell protection in LibreOffice Calc with Python\nDESCRIPTION: A complete example showing how to create a Calc document, apply cell protection settings to a cell, and verify the settings. The code demonstrates connecting to LibreOffice, creating a document, and applying protection properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/cell_protection.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.cell_protection import CellProtection\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        cell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\n        style = CellProtection(hide_all=False, hide_formula=True, protected=True, hide_print=True)\n        Calc.set_val(value=\"Hello\", cell=cell, styles=[style])\n\n        f_style = CellProtection.from_obj(cell)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in Calc Cells for Linear Solver in Python\nDESCRIPTION: Code that assigns variables to specific cells in a LibreOffice Calc spreadsheet and retrieves their cell addresses for use with the solver. This is a critical step in setting up the problem space for the linear solver.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# in linear_solve.py\nx_pos = Calc.get_cell_address(\n    sheet=sheet.component, cell_name=\"B1\"\n)  # X\ny_pos = Calc.get_cell_address(\n    sheet=sheet.component, cell_name=\"B2\"\n)  # Y\nvars = (xpos, ypos)\n```\n\n----------------------------------------\n\nTITLE: Executing Goal Seek in Python\nDESCRIPTION: Main function demonstrating goal seek functionality. Using 'XGoalSeek', it computes the input that yields the desired output for a given formula, with a specific start value and result.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# in goal_seek.py\ndef main(self) -> None:\n    with Lo.Loader(connector=Lo.ConnectPipe()) as loader:\n        doc = CalcDoc(Calc.create_doc(loader))\n        sheet = doc.get_sheet(0)\n        gs = doc.qi(XGoalSeek, True)\n\n        # -------------------------------------------------\n        # x-variable and starting value\n        cell1 = sheet.get_cell(cell_name=\"C1\")\n        # formula\n        cell2 = cell1.get_cell_down()\n        cell2.set_val(\"=SQRT(C1)\")\n        x = cell1.goal_seek(\n            gs=gs, formula_cell_name=cell2.cell_obj, result=4.0\n        )\n        print(f\"x == {x}\\n\")  # 16.0\n\n        # more goal seek examples ...\n```\n\n----------------------------------------\n\nTITLE: Finding Used Range with Sheet Cursors\nDESCRIPTION: Method to locate the used area of a spreadsheet sheet using sheet cursors and UNO interfaces\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef find_used_range(cls, sheet: XSpreadsheet, cell_name: str = None) -> XCellRange:\n    if cell_name is None:\n        cursor = sheet.createCursor()\n    else:\n        xrange = cls._get_cell_range_rng_name(sheet=sheet, range_name=cell_name)\n        cell_range = Lo.qi(XSheetCellRange, xrange)\n        cursor = sheet.createCursorByRange(cell_range)\n    return cls.find_used_cursor(cursor)\n\n@staticmethod\ndef find_used_cursor(cursor: XSheetCellCursor) -> XCellRange:\n    ua_cursor = Lo.qi(XUsedAreaCursor, cursor, True)\n    ua_cursor.gotoStartOfUsedArea(False)\n    ua_cursor.gotoEndOfUsedArea(True)\n\n    used_range = Lo.qi(XCellRange, ua_cursor, True)\n    return used_range\n```\n\n----------------------------------------\n\nTITLE: Creating Area Chart in LibreOffice Calc\nDESCRIPTION: Creates an area chart from enrollment data table. Configures chart title, axis titles, and legend. Supports different area chart types including stacked and percentage stacked variations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef _area_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n    # draws an area (stacked) chart;\n    # uses \"Trends in Enrollment in Public Schools in the US\" table\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"E45:G50\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"A52\",\n        width=16,\n        height=11,\n        diagram_name=ChartTypes.Area.TEMPLATE_STACKED.AREA,\n    )\n    Calc.goto_cell(cell_name=\"A43\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E43\")\n    )\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E45\")\n    )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"F44\")\n    )\n    Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n    return chart_doc\n```\n\n----------------------------------------\n\nTITLE: Text Document Casting Utility in Python\nDESCRIPTION: A utility method for casting a document object to XTextDocument interface, enabling text-specific operations in the LibreOffice/OpenOffice API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntext_doc = Lo.qi(XTextDocument, doc, True)\n```\n\n----------------------------------------\n\nTITLE: Storing 2D Arrays of Data in Calc Spreadsheets\nDESCRIPTION: Demonstrates how to store a 2D array of data in a spreadsheet using the set_array method. The method takes a 2D array of values and a cell range or starting cell name, handling both data storage and formula creation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# in build_table.py\ndef _build_array(self, sheet: CalcSheet) -> None:\n    vals = (\n        (\"\", \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"),\n        (\"Smith\", 42, 58.9, -66.5, 43.4, 44.5, 45.3, -67.3, 30.5, 23.2, -97.3, 22.4, 23.5),\n        (\"Jones\", 21, 40.9, -57.5, -23.4, 34.5, 59.3, 27.3, -38.5, 43.2, 57.3, 25.4, 28.5),\n        (\"Brown\", 31.45, -20.9, -117.5, 23.4, -114.5, 115.3, -171.3, 89.5, 41.2, 71.3, 25.4, 38.5),\n    )\n    sheet.set_array(values=vals, name=\"A1:M4\")  # or just A1\n\n    sheet.set_val(cell_name=\"N1\", value=\"SUM\")\n    sheet.set_val(cell_name=\"N2\", value=\"=SUM(B2:M2)\")\n    sheet.set_val(cell_name=\"N3\", value=\"=SUM(B3:M3)\")\n    sheet.set_val(cell_name=\"N4\", value=\"=SUM(B4:M4)\")\n```\n\n----------------------------------------\n\nTITLE: Implementation of set_row Method in Calc Class\nDESCRIPTION: Implementation of the set_row method overloads in Calc class. These methods handle setting a row of data starting from either a cell name or specific column/row coordinates.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class (overload method, simplified)\n@classmethod\ndef set_row(cls, sheet: XSpreadsheet, values: Row, cell_name: str) -> None:\n    pos = cls.get_cell_position(cell_name)\n    # column row\n    cls.set_row(sheet=sheet, values=values, col_start=pos.X, ros_start=pos.Y)\n\n@classmethod\ndef set_row(cls, sheet: XSpreadsheet, values: Row, col_start: int, row_start: int) -> None:\n    try:\n        cell_range = sheet.getCellRangeByPosition(start_col, start_row, end_col, end_row)\n        if cell_range is None:\n            raise Exception\n        return cell_range\n    except Exception as e:\n        raise Exception(\n            f\"Could not access cell range : ({start_col}, {start_row}, {end_col}, {end_row})\"\n        ) from e\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Frame in a LibreOffice Document using Python\nDESCRIPTION: This snippet illustrates the process of creating a text frame within a document, including setting its position, style, and dimensions using different classes and methods from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# code fragment from build doc\nfrom ooodev.format.writer.direct.frame.area import Color as FrameColor\nfrom ooodev.format.writer.direct.frame.borders import Side, Sides, BorderLineKind, LineSize\nfrom ooodev.write import Write, WriteDoc\n# ...\ndoc = WriteDoc(Write.create_doc(loader=loader))\ncursor = doc.get_cursor()\n# ...\ncursor.append_para(\"Here's some code:\")\ntvc = doc.get_view_cursor()\ntvc.goto_range(cursor.component.getEnd(), False)\ny_pos = tvc.get_position().Y\ncursor.end_paragraph()\ncode_font = Font(name=Info.get_font_mono_name(), size=10)\ncode_font.apply(cursor.component)\ncursor.append_line(\"public class Hello\")\ncursor.append_line(\"{\")\ncursor.append_line(\"  public static void main(String args[]\")\ncursor.append_line('  {  System.out.println(\"Hello World\");  }')\ncursor.append_para(\"}  // end of Hello class\")\n\n# reset the cursor formatting\nParaStyle.default.apply(cursor.component)\n\n# Format the background color of the previous paragraph.\nbg_color = ParaBgColor(CommonColor.LIGHT_GRAY)\ncursor.style_prev_paragraph(styles=[bg_color])\ncursor.append_para(\"A text frame\")\n\npg = tvc.get_current_page()\n\nframe_color = FrameColor(CommonColor.DEFAULT_BLUE)\n# create a border\nbdr_sides= Sides(\n    all=Side(line=BorderLineKind.SOLID, color=CommonColor.RED, width=LineSize.THIN)\n)\n\n_ = cursor.add_text_frame(\n    text=\"This is a newly created text frame.\\nWhich is over on the right of the page, next to the code.\",\n    ypos=y_pos,\n    page_num=pg,\n    width=UnitMM(40),\n    height=UnitMM(15),\n    styles=[frame_color, bdr_sides],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Text Cursor for Document Navigation\nDESCRIPTION: Creates a text cursor for moving and selecting text within a document using XText's createTextCursor method\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntext_cursor = xText.createTextCursor()\n```\n\n----------------------------------------\n\nTITLE: Adding Label in LibreOffice Calc with Python\nDESCRIPTION: The method inserts a prominent label \"Top Secret Garlic Changes\" at the first cell of a specified row by merging several cells. It adjusts text style to bold and sets background color to red, employing Font and BgColor classes for styling. Prerequisites include a row index and a CalcSheet object. The function performs in-place sheet updates with no return value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in garlic_secrets.py\ndef _add_garlic_label(self, sheet: CalcSheet, empty_row_num: int) -> None:\n    \"\"\"\n    Add a large text string (\"Top Secret Garlic Changes\") to the first cell\n    in the empty row. Make the cell bigger by merging a few cells, and taller\n    The text is black and bold in a red cell, and is centered.\n    \"\"\"\n\n    sheet.goto_cell(cell_obj=sheet.get_cell(col=0, row=empty_row_num).cell_obj)\n\n    # Merge first few cells of the last row\n    rng_obj = Calc.get_range_obj(\n        col_start=0, row_start=empty_row_num, col_end=3, row_end=empty_row_num\n    )\n\n    # merge and center range\n    sheet.merge_cells(range_obj=rng_obj, center=True)\n\n    # make the row taller\n    sheet.set_row_height(height=18, idx=empty_row_num)\n    # get the cell from the range cell start\n    font_red = Font(b=True, size=24, color=CommonColor.BLACK)\n    bg_color = BgColor(CommonColor.RED)\n\n    cell = sheet.get_cell(cell_obj=rng_obj.cell_start)\n    cell.set_val(value=\"Top Secret Garlic Changes\", styles=[font_red, bg_color])\n```\n\n----------------------------------------\n\nTITLE: Initializing XSearchable Search Descriptor in Python\nDESCRIPTION: This snippet demonstrates how to utilize the XSearchable and XSearchDescriptor interfaces to set up a search operation. It initializes a search descriptor with a regular expression pattern. Make sure to have the LibreOffice instance and document context properly set up for the query interface operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsearchable = Lo.qi(XSearchable, doc)\nsrch_desc = searchable.createSearchDescriptor()\nsrch_desc.setSearchString(\"colou?r\")\n```\n\n----------------------------------------\n\nTITLE: Converting Cell Names and Positions in ooodev Calc Python\nDESCRIPTION: Demonstrates a method of converting cell names and cell range names into (column, row) positions and vice versa. It uses ooodev Calc's methods to print converted values and requires a CalcSheet object for operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# in build_table.py\ndef _convert_addresses(self, sheet: CalcSheet) -> None:\n    # cell name <--> position\n    pos = sheet.get_cell(cell_name=\"A22\").get_cell_position()\n    print(f\"Position of AA2: ({pos.X}, {pos.Y})\")\n\n    cell = sheet.get_cell(col=pos.X, row=pos.Y)\n    Calc.print_cell_address(cell.component)\n\n    print(f\"AA2: {cell.get_cell_str()}\")\n    print()\n\n    # cell range name <--> position\n    rng = Calc.get_cell_range_positions(\"A1:D5\")\n    print(f\"Range of A1:D5: ({rng[0].X}, {rng[0].Y}) -- ({rng[1].X}, {rng[1].Y})\")\n\n    cell_rng = Calc.get_cell_range(\n        sheet=sheet.component,\n        col_start=rng[0].X,\n        row_start=rng[0].Y,\n        col_end=rng[1].X,\n        row_end=rng[1].Y,\n    )\n    Calc.print_address(cell_rng)\n    print(\n        \"A1:D5: \"\n        + Calc.get_range_str(\n            col_start=rng[0].X,\n            row_start=rng[0].Y,\n            col_end=rng[1].X,\n            row_end=rng[1].Y,\n        )\n    )\n    print()\n```\n\n----------------------------------------\n\nTITLE: Adding Hidden Message in LibreOffice Calc with Python\nDESCRIPTION: The function identifies an empty row to insert a hidden message labeled \"Top Secret Garlic Changes\" in large, bold red text. It uses CalcSheet for finding the empty row and merging cells, while styling is managed by auxiliary classes like Font and BgColor. The function does not return values but modifies the sheet directly based on the row index provided.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in GarlicSecrets.main() of garlic_secrets.py\n# ...\nempty_row_num = self._find_empty_row(sheet)\nself._add_garlic_label(sheet=sheet, empty_row_num=empty_row_num)\nLo.delay(2_000)  # wait a bit before hiding last row\n\nrow_range = sheet.get_row_range(idx=empty_row_num)\nrow_range.is_visible = False\n# ...\n```\n\n----------------------------------------\n\nTITLE: Write Hello World in Writer document\nDESCRIPTION: This Python code snippet demonstrates how to interact with LibreOffice Writer using `ooo-dev-tools`. It loads LibreOffice, creates a new Writer document, and writes the text \"Hello World!\" into it, demonstrating basic API usage.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nPython 3.10.6 (main, May 29 2023, 11:10:38) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from ooodev.loader import Lo\n>>> from ooodev.write import WriteDoc\n>>> \n>>> def say_hello():\n...     doc = WriteDoc.from_current_doc()\n...     cursor = doc.get_cursor()\n...     cursor.append_para(text=\"Hello World!\")\n...\n>>> _ = Lo.load_office(Lo.ConnectSocket())\n>>> doc = WriteDoc.create_doc(visible=True)\n>>> say_hello()\n>>> doc.close()\n>>> Lo.close_office()\nTrue\n>>>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Character Borders Modification Environment in Writer\nDESCRIPTION: Basic setup code for working with character borders in Writer. It imports necessary modules and includes a main function for connecting to LibreOffice, creating a document, and applying border styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.char.borders import Sides, Padding, Shadow\nfrom ooodev.format.writer.modify.char.borders import Side\nfrom ooodev.format.writer.modify.char.borders import StyleCharKind\nfrom ooodev.format.writer.modify.char.borders import BorderLineKind\nfrom ooodev.format.writer.modify.char.borders import LineSize\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        side = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\n        sides_style = Sides(border_side=side, style_name=StyleCharKind.EXAMPLE)\n        sides_style.apply(doc)\n\n        style_obj = Sides.from_style(doc=doc, style_name=StyleCharKind.EXAMPLE)\n        assert style_obj.prop_style_name == str(StyleCharKind.EXAMPLE)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Starting a LibreOffice Slide Show with Python\nDESCRIPTION: This code snippet demonstrates how to start a slide show in LibreOffice using the API. It loads the LibreOffice, opens a document named 'foo', gets the XPresentationSupplier interface, retrieves the XPresentation object, and then starts the slide show using `show.start()`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter11.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\n\nloader = Lo.load_office(Lo.ConnectPipe())\ndoc = Lo.open_doc(\"foo\", loader)\nps = Lo.qi(XPresentationSupplier, doc)\nLo.qi(XPresentation, ps.getPresentation())\nshow.start()\n```\n\n----------------------------------------\n\nTITLE: Complete Menu Management Class Implementation\nDESCRIPTION: A comprehensive class implementation for managing menus in LibreOffice. Includes methods for creating menu entries, handling events, and executing commands. The class demonstrates menu creation, event handling, and command execution patterns.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any, cast, TYPE_CHECKING\nfrom ooodev.calc import CalcDoc\nfrom ooodev.events.args.event_args import EventArgs\nfrom ooodev.gui.menu.menu_bar import MenuBar\nfrom ooodev.gui.menu.popup_menu import PopupMenu\nfrom ooodev.loader import Lo\nfrom ooodev.macro.script.macro_script import MacroScript\nfrom ooodev.utils.kind.menu_item_style_kind import MenuItemStyleKind\nfrom ooodev.utils.kind.menu_lookup_kind import MenuLookupKind\n\nif TYPE_CHECKING:\n    from com.sun.star.awt import MenuEvent\n\nMY_MENU = None\n\nclass MyMenu:\n    \"\"\"Sample Menu Class\"\"\"\n    def __init__(self, doc: CalcDoc) -> None:\n        self._doc = doc\n        self._exec_menu_ids = set()\n        self._init_events()\n        self._add_tools_entry()\n\n    def _init_events(self) -> None:\n        self._fn_on_my_cmd_menu_select = self._on_my_cmd_menu_select\n\n    def _on_my_cmd_menu_select(self, src: Any, event: EventArgs, menu: PopupMenu) -> None:\n        me = cast(\"MenuEvent\", event.event_data)\n        if me.MenuId in self._exec_menu_ids:\n            menu.execute_cmd(me.MenuId, in_thread=True)\n            return\n        cmd = menu.get_command(me.MenuId)\n        if cmd:\n            self._doc.msgbox(f\"Command: {cmd}\", title=\"Info\", boxtype=1)\n\n    def _get_menu_bar(self) -> MenuBar:\n        self._doc.activate()\n        comp = self._doc.get_frame_comp()\n        if comp is None:\n            raise ValueError(\"No frame component found\")\n        lm = comp.layout_manager\n        mb = lm.get_menu_bar()\n        if mb is None:\n            raise ValueError(\"No menu bar found\")\n        return mb\n\n    def _get_tools_popup(self) -> PopupMenu:\n        mb = self._get_menu_bar()\n        menu_id, _ = mb.find_item_menu_id(str(MenuLookupKind.TOOLS))\n        tools_popup = mb.get_popup_menu(menu_id)\n        if tools_popup is None:\n            raise ValueError(\"No tools popup found\")\n        return tools_popup\n\n    def _add_tools_entry(self) -> None:\n        mnu_command = \"MyCommand\"\n        tools_popup = self._get_tools_popup()\n        menu_id, _ = tools_popup.find_item_menu_id(mnu_command)\n        if menu_id != -1:\n            raise ValueError(\"Menu already exists\")\n        new_id = tools_popup.get_max_menu_id() + 1\n        tools_popup.insert_item(new_id, \"~Tools Entry\", MenuItemStyleKind.NONE, 0)\n        tools_popup.set_command(new_id, mnu_command)\n\n        pm = self._get_tools_popup_menu()\n        tools_popup.set_popup_menu(new_id, pm)\n\n        new_pop = tools_popup.get_popup_menu(new_id)\n        if new_pop is None:\n            raise ValueError(\"No new popup found\")\n        new_pop.add_event_item_selected(self._fn_on_my_cmd_menu_select)\n\n    def _get_tools_popup_menu(self) -> PopupMenu:\n        pm = PopupMenu.from_lo()\n        pm.insert_item(0, \"~Toggle Formula\", MenuItemStyleKind.NONE, 0)\n        pm.insert_separator(1)\n        pm.insert_item(2, \"~Hello World\", MenuItemStyleKind.NONE, 2)\n        pm.insert_separator(3)\n        pm.insert_item(4, \"~Other Entry 1\", MenuItemStyleKind.NONE, 4)\n        pm.insert_item(5, \"~Other Entry 2\", MenuItemStyleKind.NONE, 5)\n\n        pm.set_command(0, \".uno:ToggleFormula\")\n        self._exec_menu_ids.add(0)\n\n        url = MacroScript.get_url_script(\n            name=\"HelloWorldPython\", library=\"HelloWorld\", language=\"Python\", location=\"share\"\n        )\n        pm.set_command(2, url)\n        self._exec_menu_ids.add(2)\n\n        pm.set_command(4, \"MyCommand1\")\n        pm.set_command(5, \"MyCommand2\")\n\n        return pm\n```\n\n----------------------------------------\n\nTITLE: Summing Complex Numbers with IMSUM - Python\nDESCRIPTION: This code snippet illustrates how to use the 'IMSUM' function to compute the sum of two complex numbers, highlighting how complex numbers must be represented as strings when passed to Calc functions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in calc_functions.py\n# sum two imaginary numbers: \"13+4j\" + \"5+3j\" returns 18+7j.\nsum = doc.call_fun(\"IMSUM\", \"13+4j\", \"5+3j\")\nprint(f\"13+4j + 5+3j: {sum}\")\n```\n\n----------------------------------------\n\nTITLE: Duplicating Slides in Python Presentations\nDESCRIPTION: This snippet demonstrates duplicating slides in a presentation using the 'XDrawPageDuplicator' interface. Duplicated slides are automatically placed after the original. Includes a method for handling 'XComponent' documents in Python.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n# doc is an XComponent\ndup = Lo.qi(XDrawPageDuplicator, doc, True)\ndup_slide = dup.duplicate(slide)  # XDrawPage\n    # dup_slide is located after original slide in the deck\n```\n\n----------------------------------------\n\nTITLE: Creating Document from LibreOffice Template\nDESCRIPTION: Load a presentation template using a specified template file path and component loader, setting template-specific properties\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntmpl_name = \"Inspiration.otp\"  # \"Piano.otp\"\ntemplate_fnm = Path(Draw.get_slide_template_path(), tmpl_name)\n_ = FileIO.is_exist_file(template_fnm, True)\ndoc = ImpressDoc(\n    Lo.create_doc_from_template(template_path=template_fnm, loader=loader)\n)\n```\n\n----------------------------------------\n\nTITLE: Document Save Implementation in Python\nDESCRIPTION: Handles document saving with event triggers and error handling. Uses CancelEventArgs for save cancellation support and XStorable interface for document storage.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ncargs = CancelEventArgs(Lo.save.__qualname__)\ncargs.event_data = {\"doc\": doc}\n_Events().trigger(LoNamedEvent.DOC_SAVING, cargs)\nif cargs.cancel:\n    return False\n\nstore = cls.qi(XStorable, doc, True)\ntry:\n    store.store()\n    cls.print(\"Saved the document by overwriting\")\nexcept IOException as e:\n    raise Exception(f\"Could not save the document\") from e\n\n_Events().trigger(LoNamedEvent.DOC_SAVED, EventArgs.from_args(cargs))\nreturn True\n```\n\n----------------------------------------\n\nTITLE: Obtaining Cell Ranges by Using Queries in Python using Calc\nDESCRIPTION: This code snippet demonstrates how to leverage the SheetRangesQuery to dynamically find and extract cell ranges based on content queries rather than pre-defined static ranges. It highlights the utility of the find_used_range method for efficient searching.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in extract_nums.py\n        # create a cell range that spans the used area of the sheet\n        used_cell_rng = sheet.find_used_range()\n        # ...\n\n        # find cell ranges that cover all the specified data types\n        cr_qry = used_cell_rng.qi(XCellRangesQuery, True)\n        cell_ranges = cr_qry.queryContentCells(CellFlags.VALUE)\n```\n\n----------------------------------------\n\nTITLE: Cell Text Alignment in Python\nDESCRIPTION: Demonstrates how to set text alignment for a single cell using horizontal and vertical alignment options.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/alignment.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncell = sheet[\"A1\"]\ncell.value = \"Hello\"\ncell.style_align_text(\n    hori_align=HoriAlignKind.CENTER,\n    vert_align=VertAlignKind.MIDDLE,\n)\n```\n\n----------------------------------------\n\nTITLE: Menu Event Callback Implementation\nDESCRIPTION: Demonstrates the implementation of a menu event callback function that handles menu selection events and executes commands based on menu IDs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef _on_my_cmd_menu_select(self, src: Any, event: EventArgs, menu: PopupMenu) -> None:\n    me = cast(\"MenuEvent\", event.event_data)\n    if me.MenuId in self._exec_menu_ids:\n        menu.execute_cmd(me.MenuId, in_thread=True)\n        return\n```\n\n----------------------------------------\n\nTITLE: Defining Nonlinear Constraints in Python\nDESCRIPTION: This snippet demonstrates how to set up nonlinear constraints in Python for the solver using the LibreOffice Calc API. It defines two constraints based on a specific cell formula referencing cells B1 and B2.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nsc1 = sheet.make_constraint(num=1, op=\">=\", cell_name=\"B4\")\n        #   x^2 + y^2 >= 1\n        sc2 = sheet.make_constraint(num=2, op=\"<=\", cell_name=\"B4\")\n        #   x^2 + y^2 <= 2\n```\n\n----------------------------------------\n\nTITLE: Calculate Spreadsheet Column Range with Python\nDESCRIPTION: This code snippet demonstrates the use of get_col_range method within the Calc class to calculate and return a specific column range using the XColumnRowRange interface. It retrieves the column based on the provided index number. Dependencies include the XSpreadsheet interface for accessing the column and the necessary interface to handle missing error handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n        @staticmethod\n        def get_col_range(sheet: XSpreadsheet, idx: int) -> XCellRange:\n            cr_range = Lo.qi(XColumnRowRange, sheet)\n            if cr_range is None:\n                raise MissingInterfaceError(XColumnRowRange)\n            cols = cr_range.getColumns()\n            con = Lo.qi(XIndexAccess, cols)\n            if con is None:\n                raise MissingInterfaceError(XIndexAccess)\n            cell_range = Lo.qi(XCellRange, con.getByIndex(idx))\n            if cell_range is None:\n                raise MissingInterfaceError(\n                    XCellRange, f\"Could not access range for column position: {idx}\"\n                )\n            return cell_range\n```\n\n----------------------------------------\n\nTITLE: Defining Goal Seek Functionality in Python\nDESCRIPTION: This method performs goal seeking by using XGoalSeek to adjust input values to match a desired formula result. The method handles divergence errors if calculations are not accurate.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@classmethod\ndef goal_seek(\n    cls, gs: XGoalSeek, sheet: XSpreadsheet, cell_name: str,\n    formula_cell_name: str, result: numbers.Number\n) -> float:\n    xpos = cls._get_cell_address_sheet(sheet=sheet, cell_name=cell_name)\n    formula_pos = cls._get_cell_address_sheet(sheet=sheet, cell_name=formula_cell_name)\n\n    goal_result = gs.seekGoal(formula_pos, xpos, f\"{float(result)}\")\n    if goal_result.Divergence >= 0.1:\n        Lo.print(f\"NO result; divergence: {goal_result.Divergence}\")\n        raise GoalDivergenceError(goal_result.Divergence)\n    return goal_result.Result\n```\n\n----------------------------------------\n\nTITLE: Opening a Document and Manipulating with LibreOffice in Python\nDESCRIPTION: This snippet exemplifies the procedure for opening a document using LibreOffice, performing manipulations, and saving it as a new file, demonstrating integration with the Office API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> None:\n    fnm = sys.argv[1:]  # get file from first args\n\n    loader = Lo.load_office(Lo.ConnectSocket(headless=True))\n    doc = Lo.open_doc(fnm=fnm, loader=loader)\n\n    # use the Office API to manipulate doc...\n    Lo.save_doc(doc, 'foo.docx')  # save as a Word file\n    Lo.close_doc(doc)\n    lo.close_office()\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Finding Empty Row in LibreOffice Calc with Python\nDESCRIPTION: This function finds the first empty row in a given sheet column using the XCellRangesQuery interface, which requires a cell range provided by Calc functions. It calculates the smallest starting row from the empty ranges found. The requisite is a CalcSheet instance, and it outputs the index of the first empty row.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# in garlic_secrets.py\ndef _find_empty_row(self, sheet: CalcSheet) -> int:\n    \"\"\"\n    Return the index of the first empty row by finding all the empty cell ranges in\n    the first column, and return the smallest row index in those ranges.\n    \"\"\"\n\n    # create a ranges query for the first column of the sheet\n    cell_range = sheet.get_col_range(idx=0)\n    Calc.print_address(cell_range=cell_range.component)\n    cr_query = cell_range.qi(XCellRangesQuery, True)\n    sc_ranges = cr_query.queryEmptyCells()\n    addresses = sc_ranges.getRangeAddresses()\n    Calc.print_addresses(*addresses)\n\n    # find smallest row index\n    row = -1\n    if addresses is not None and len(addresses) > 0:\n        row = addresses[0].StartRow\n        for addr in addresses:\n            if row < addr.StartRow:\n                row = addr.StartRow\n        print(f\"First empty row is at position: {row}\")\n    else:\n        print(\"Could not find an empty row\")\n    return row\n```\n\n----------------------------------------\n\nTITLE: Generating Math Questions and Saving to PDF in LibreOffice with Python\nDESCRIPTION: This code generates random math formulas, adds them to a LibreOffice document, and saves the document as a PDF file. It utilizes a loop to create multiple formulas, replacing square brackets with curly braces for correct formatting, and adds a timestamp to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> int:\n    delay = 2_000  # delay so users can see changes.\n\n    loader = Lo.load_office(Lo.ConnectPipe())\n\n    doc = WriteDoc(Write.create_doc(loader=loader))\n\n    try:\n        doc.set_visible()\n\n        cursor = doc.get_cursor()\n        cursor.append_para(\"Math Questions\")\n        cursor.style_prev_paragraph(\"Heading 1\")\n\n        cursor.append_para(\"Solve the following formulae for x:\\n\")\n\n        # lock screen updating and add formulas\n        # locking screen is not strictly necessary but is faster when add lost of input.\n        with Lo.ControllerLock():\n            for _ in range(10):  # generate 10 random formulae\n                iA = random.randint(0, 7) + 2\n                iB = random.randint(0, 7) + 2\n                iC = random.randint(0, 8) + 1\n                iD = random.randint(0, 7) + 2\n                iE = random.randint(0, 8) + 1\n                iF1 = random.randint(0, 7) + 2\n\n                choice = random.randint(0, 2)\n\n                # formulas should be wrapped in {} but for formatting reasons it is easier to work with [] and replace later.\n                if choice == 0:\n                    formula = f\"[[[sqrt[{iA}x]] over {iB}] + [{iC} over {iD}]=[{iE} over {iF1} ]]\"\n                elif choice == 1:\n                    formula = (\n                        f\"[[[{iA}x] over {iB}] + [{iC} over {iD}]=[{iE} over {iF1}]]\"\n                    )\n                else:\n                    formula = f\"[{iA}x + {iB} = {iC}]\"\n\n                # replace [] with {}\n                cursor.add_formula(formula.replace(\"[\", \"{\").replace(\"]\", \"}\"))\n                cursor.end_paragraph()\n\n        cursor.append_para(f\"Timestamp: {DateUtil.time_stamp()}\")\n\n        Lo.delay(delay)\n        doc.save_doc(pth / \"mathQuestions.pdf\")\n        doc.close_doc()\n        Lo.close_office()\n\n    except Exception:\n        Lo.close_office()\n        raise\n\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell by Position in ooodev Calc with Python\nDESCRIPTION: Explains how to retrieve a cell reference from a spreadsheet by specifying column and row indices. This operation calls the getCellByPosition method on the provided XSpreadsheet interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncell = Calc.get_cell(sheet=sheet, col=26, row=1);\n```\n\n----------------------------------------\n\nTITLE: Creating Calc Document Using CalcDoc Class\nDESCRIPTION: Demonstrates creating a new Calc document, manipulating its content, and saving it with comprehensive error handling\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom ooodev.loader.lo import Lo\nfrom ooodev.calc import CalcDoc\nfrom pathlib import Path\n\n\ndef main():\n    pth = Path.cwd()  / \"example.ods\"\n    doc = None\n    try:\n        loader = Lo.load_office(connector=Lo.ConnectPipe())\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].value = 10\n        doc.msgbox(\"All done\")\n        doc.save_doc(pth)\n        doc.close()\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        if doc:\n            doc.close()\n        Lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Property Values from a Graphic Object using Python\nDESCRIPTION: This code snippet demonstrates how to convert a graphic object to a property set using the Lo.qi function and retrieve specific property values, such as the GraphicURL.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprops =  Lo.qi(XPropertySet, obj_graphic)\nfnm = props.getPropertyValue(\"GraphicURL\") # string\n```\n\n----------------------------------------\n\nTITLE: Finding LibreOffice Calc Function by Name\nDESCRIPTION: Static method implementation for finding a function's metadata using XFunctionDescriptions interface. Searches through function descriptions and returns PropertyValue tuple for a given function name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef find_function(func_nm: str) -> Tuple[PropertyValue] | None:\n    if not func_nm:\n        raise ValueError(\"Invalid arg, please supply a function name to find.\")\n    try:\n        func_desc = Lo.create_instance_mcf(\n            XFunctionDescriptions, \"com.sun.star.sheet.FunctionDescriptions\", raise_err=True\n        )\n    except Exception as e:\n        raise Exception(\"No function descriptions were found\") from e\n\n    for i in range(func_desc.getCount()):\n        try:\n            props = cast(Sequence[PropertyValue], func_desc.getByIndex(i))\n            for p in props:\n                if p.Name == \"Name\" and str(p.Value) == func_nm:\n                    return tuple(props)\n        except Exception:\n            continue\n    Lo.print(f\"Function '{func_nm}' not found\")\n    return None\n```\n\n----------------------------------------\n\nTITLE: Connecting to LibreOffice Using LoSocketStart in Python\nDESCRIPTION: This example demonstrates how to use the LoSocketStart class to establish a connection with a LibreOffice instance via socket using Python. It requires the `ooodev.conn.connect` and `ooodev.conn.connectors` modules. The code creates a connection and obtains the service manager to interact with LibreOffice services. Inputs include the connection setup, and outputs involve the desktop instance for performing operations. It's important to call `kill_soffice()` to terminate the office instance properly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/conn/connect/lo_socket_start.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.conn.connect import LoSocketStart\nfrom ooodev.conn.connectors import ConnectSocket\nconn = LoSocketStart(ConnectSocket())\nconn.connect() # may take a few seconds\nsmgr = conn.ctx.getServiceManager()\ndesktop = smgr.createInstanceWithContext(\"com.sun.star.frame.Desktop\", conn.ctx)\n# do some work ...\nconn.kill_soffice()\n```\n\n----------------------------------------\n\nTITLE: Rotating Text Labels in Chart Data Point\nDESCRIPTION: Rotates the text label for a specific data point (the third one) by setting the angle, direction mode, and enabling leader lines. Uses DirectionModeKind to specify left-to-right, top-to-bottom text flow.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.direct.chart2.title.alignment.direction import DirectionModeKind\n# ... other code\nds = chart_doc.get_data_series()[0]\ndp = ds[2]\ndp.style_orientation(angle=60, mode=DirectionModeKind.LR_TB, leaders=True)\n```\n\n----------------------------------------\n\nTITLE: Applying Font Styles to Left of Cursor in Python\nDESCRIPTION: These functions show how to apply specific font styles (bold, italic, color, code) to text to the left of the cursor. They call the `style_left` function with appropriate property names and values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef style_left_bold(cls, cursor: XTextCursor, pos: int) -> None:\n    cls.style_left(cursor, pos, \"CharWeight\", FontWeight.BOLD)\n\n@classmethod\ndef style_left_italic(cls, cursor: XTextCursor, pos: int) -> None:\n    cls.style_left(cursor, pos, \"CharPosture\", FontSlant.ITALIC)\n\n@classmethod\ndef style_left_color(cls, cursor: XTextCursor, pos: int, color: Color) -> None:\n    cls.style_left(cursor, pos, \"CharColor\", color)\n\n@classmethod\ndef style_left_code(cls, cursor: XTextCursor, pos: int) -> None:\n    cls.style_left(cursor, pos, \"CharFontName\", Info.get_font_mono_name())\n    cls.style_left(cursor, pos, \"CharHeight\", 10)\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer document and setting paragraph tabs\nDESCRIPTION: This code snippet demonstrates how to create a Writer document, set paragraph tabs using the `Tabs` class, and append a paragraph with the specified tab settings. It uses `Lo` for document loading and closing, `GUI` for visibility and zooming, and `Write` for document creation and cursor manipulation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/tabs.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.writer.direct.para.tabs import Tabs, TabAlign, FillCharKind\n\n\n        def main() -> int:\n            with Lo.Loader(Lo.ConnectSocket()):\n                doc = Write.create_doc()\n                GUI.set_visible(True, doc)\n                Lo.delay(500)\n                GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n                cursor = Write.get_cursor(doc)\n                tb = Tabs(position=11.3, align=TabAlign.LEFT, fill_char=FillCharKind.UNDER_SCORE)\n                Write.append_para(cursor=cursor, text=\\\"Some Paragraph\\\", styles=[tb])\n\n                tb = Tabs(position=12.0, align=TabAlign.DECIMAL)\n                tb.apply(cursor)\n\n                tb = Tabs(position=6.5, align=TabAlign.CENTER, fill_char=\\\"*\\\")\n                tb.apply(cursor)\n\n                tb = Tabs.find(cursor, 6.5)\n                tb.prop_align = TabAlign.RIGHT\n                tb.prop_fill_char = FillCharKind.DASH\n                tb.apply(cursor)\n\n                Tabs.remove_by_pos(cursor, 12.0)\n\n                Tabs.remove_all(cursor)\n\n                Lo.delay(1_000)\n                Lo.close_doc(doc)\n            return 0\n\n\n        if __name__ == \\\"__main__\\\":\n            SystemExit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Setting Justified Alignment with Last Line Options\nDESCRIPTION: Shows how to set justified alignment with different last line handling options. Demonstrates center and justified alignment for the last line of justified paragraphs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/alignment.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nal = Alignment(align_last=LastLineKind.CENTER).justified\nWrite.append_para(cursor=cursor, text=p_txt, styles=[al])\n```\n\nLANGUAGE: python\nCODE:\n```\nal = Alignment(align_last=LastLineKind.JUSTIFY).justified\nWrite.append_para(cursor=cursor, text=p_txt, styles=[al])\n```\n\n----------------------------------------\n\nTITLE: Finding Next Match in Calc with Python\nDESCRIPTION: This snippet retrieves the next match of the search string using the `XSearchable.findNext()` function and indicates available services for that match.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\no_next = srch.findNext(cr, sd)\nInfo.show_services(\"Find Next\", o_next)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart and Applying Number Formatting to Y-Axis in Python\nDESCRIPTION: This code snippet demonstrates setting up a chart document, applying background styling, and formatting the Y-axis numbers to currency format with two decimal places.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.axis.numbers import Numbers, NumberFormatIndexEnum\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange, Offset\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(Path.cwd() / \"tmp\" / \"bon_voyage.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"Object 1\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK2, width=0.9)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=0,\n            offset=Offset(41, 50),\n            style=GradientStyle.RADIAL,\n            grad_color=ColorRange(StandardColor.TEAL, StandardColor.YELLOW_DARK1),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        num_style = Numbers(\n            chart_doc, source_format=False, num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2\n        )\n        Chart2.style_y_axis(chart_doc=chart_doc, styles=[num_style])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Main Table Addition Method with Event Handling\nDESCRIPTION: Comprehensive method for adding tables to LibreOffice documents with extensive configuration options, including color styling, header handling, and event-based extensibility.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef add_table(\n    cls,\n    cursor: XTextCursor,\n    table_data: Table,\n    header_bg_color: Color | None = CommonColor.DARK_BLUE,\n    header_fg_color: Color | None = CommonColor.WHITE,\n    tbl_bg_color: Color | None = CommonColor.LIGHT_BLUE,\n    tbl_fg_color: Color | None = CommonColor.BLACK,\n    first_row_header: bool = True,\n    styles: Iterable[StyleT] = None,\n) -> XTextTable:\n```\n\n----------------------------------------\n\nTITLE: Inserting a Chart with Specified Parameters in Python\nDESCRIPTION: This code snippet demonstrates how to insert a chart into a LibreOffice Calc sheet using the `Chart2.insert_chart` method. It specifies the cell range for the data, the cell where the chart should be placed, the width and height of the chart, and the diagram name (chart type). The example uses a donut pie chart template.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n        range_addr = Calc.get_address(sheet=sheet, range_name=\"A44:C50\")\n        chart_doc = Chart2.insert_chart(\n            sheet=sheet,\n            cells_range=range_addr,\n            cell_name=\"D43\",\n            width=15,\n            height=11,\n            diagram_name=ChartTypes.Pie.TEMPLATE_DONUT.DONUT,\n        )\n```\n\n----------------------------------------\n\nTITLE: Inserting a Column in Calc Sheet using Python\nDESCRIPTION: This code demonstrates how to insert a new column at a specific index in a Calc sheet. The `insert_column` method uses the `XColumnRowRange` interface to get the `XTableColumns` interface, which allows the insertion of columns. The snippet inserts a single column at the specified index.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n\"# in Calc class (simplified)\n@staticmethod\ndef insert_column(sheet: XSpreadsheet, idx: int) -> bool:\n    cr_range = mLo.Lo.qi(XColumnRowRange, sheet, True)\n    cols = cr_range.getColumns()\n    cols.insertByIndex(idx, 1)  # add 1 column at idx position\n    return True\"\n```\n\n----------------------------------------\n\nTITLE: Adding Bullets to a Slide's Text Area in Python\nDESCRIPTION: The function `_do_bullets` adds bullet points to a slide, uses bullet levels to structure the content, and optionally includes an image at a defined offset. It requires that the slide has a title and a bullet layout set beforehand.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef _do_bullets(self, curr_slide: ImpressPage[ImpressDoc]) -> None:\n    body = curr_slide.bullets_slide(title=\"What is an Algorithm?\")\n\n    body.add_bullet(\n        level=0,\n        text=\"An algorithm is a finite set of unambiguous instructions for solving a problem.\",\n    )\n\n    body.add_bullet(\n        level=1,\n        text=\"An algorithm is correct if on all legitimate inputs, it outputs the right answer in a finite amount of time\",\n    )\n\n    body.add_bullet(level=0, text=\"Can be expressed as\")\n    body.add_bullet(level=1, text=\"pseudocode\")\n    body.add_bullet(level=0, text=\"flow charts\")\n    body.add_bullet(\n        level=1,\n        text=\"text in a natural language (e.g. English)\",\n    )\n    body.add_bullet(level=1, text=\"computer code\")\n\n    im = curr_slide.draw_image_offset(\n        fnm=self._fnm_img,\n        xoffset=ImageOffset(0.6),\n        yoffset=ImageOffset(0.5),\n    )\n    im.move_to_bottom()\n```\n\n----------------------------------------\n\nTITLE: Examining Office Configuration and Paths in Python with LibreOffice API\nDESCRIPTION: Code that demonstrates how to retrieve the Office application information including OS platform details, Office version, language settings, and various directory paths using the Info class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# in demo\n\nwith Lo.Loader(Lo.ConnectSocket(headless=True)) as loader:\n    print(f\"OS Platform: {platform.platform()}\")\n    print(f\"OS Version: {platform.version()}\")\n    print(f\"OS Release: {platform.release()}\")\n    print(f\"OS Architecture: {platform.architecture()}\")\n\n    print(f\"\\nOffice Name: {Info.get_config('ooName')}\")\n    print(f\"\\nOffice version (long): {Info.get_config('ooSetupVersionAboutBox')}\")\n    print(f\"Office version (short): {Info.get_config('ooSetupVersion')}\")\n    print(f\"\\nOffice language location: {Info.get_config('ooLocale')}\")\n    print(f\"System language location: {Info.get_config('ooSetupSystemLocale')}\")\n\n    print(f\"\\nWorking Dir: {Info.get_paths('Work')}\")\n    print(f\"\\nOffice Dir: {Info.get_office_dir()}\")\n    print(f\"\\nAddin Dir: {Info.get_paths('Addin')}\")\n    print(f\"\\nFilters Dir: {Info.get_paths('Filter')}\")\n    print(f\"\\nTemplates Dirs: {Info.get_paths('Template')}\")\n    print(f\"\\nGallery Dir: {Info.get_paths('Gallery')}\")\n\n```\n\n----------------------------------------\n\nTITLE: Recursively Searching MenuBar for Menu Items\nDESCRIPTION: Demonstrates how to recursively search through the menu bar to find a specific command (Design Mode) within nested menus.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> design_menu_id, popup = mb.find_item_menu_id(\n>>> \tcmd=\".uno:SwitchControlDesignMode\",\n>>> \tsearch_sub_menu=True,\n>>> )\n>>> if popup is not None:\n>>> \tprint(popup.get_command(design_menu_id), design_menu_id, sep=\": \")\n.uno:SwitchControlDesignMode: 563\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Class with QryModuleStateLastItem Example\nDESCRIPTION: Demonstrates usage of Result class to handle operation outcomes, showing how to implement success/failure cases with typing support. The code shows a query class that returns either a successful ModuleStateItem result or a failure Exception.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.result import Result\n\nclass QryModuleStateLastItem(QryBase):\n    def __init__(self, mod: PyModuleT) -> None:\n        QryBase.__init__(self)\n        self._mod = mod\n\n    def execute(self) -> Result[ModuleStateItem, None] | Result[None, Exception]:\n        mod_state = PyModuleState(self._mod)\n        result = mod_state.get_last_item()\n        if result is None:\n            return Result.failure(Exception(\"No state found\"))\n        return Result.success(result)\n\n\nqry = QryModuleStateLastItem(my_mod)\nqry_result = qry.execute()\n\nif Result.is_success(qry_result):\n    # qry_result.data has full typing support as ModuleStateItem at this point.\n    mod_date_item = qry_result.data\nelse:\n    # handle error\n    mod_date_item = get_default_state()\n```\n\n----------------------------------------\n\nTITLE: Implementation of set_array Method in Calc Class\nDESCRIPTION: Implementation of the set_array method in Calc class, which handles both cell range and single cell specifications. It delegates to specialized methods for each case after determining the type of name provided.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class (overload method, simplified)\n@classmethod\ndef set_array(cls, values: Table, sheet: XSpreadsheet, name: str) -> None:\n        # set_array(values: Sequence[Sequence[object]], sheet: XSpreadsheet, name: str)\n    if cls.is_cell_range_name(name):\n        cls.set_array_range(sheet=sheet, range_name=name, values=values)\n    else:\n        cls.set_array_cell(sheet=sheet, cell_name=name, values=values)\n```\n\n----------------------------------------\n\nTITLE: Extracting Cell Values and Ranges in Python\nDESCRIPTION: This snippet demonstrates how to extract specific cell values and ranges from a spreadsheet using the UNO API in Python. It shows how to get the value and type of each cell and formats the output with custom rules. Dependencies include the UNO API and various utilities for formatting and handling data.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# from extract_nums.py\nfrom __future__ import annotations\nfrom typing import cast\nimport uno\nfrom com.sun.star.sheet import XCellRangesQuery\nfrom ooo.dyn.sheet.cell_flags import CellFlags\n\nfrom ooodev.dialog.msgbox import (\n    MsgBox,\n    MessageBoxType,\n    MessageBoxButtonsEnum,\n    MessageBoxResultsEnum,\n)\nfrom ooodev.calc import Calc\nfrom ooodev.calc import CalcDoc\nfrom ooodev.formatters.formatter_table import FormatterTable, FormatTableItem\nfrom ooodev.utils.file_io import FileIO\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.type_var import PathOrStr, Row, Column\n\nclass ExtractNums:\n    def __init__(self, fnm: PathOrStr) -> None:\n        _ = FileIO.is_exist_file(fnm, True)\n        self._fnm = FileIO.get_absolute_path(fnm)\n\n    def main(self) -> None:\n        loader = Lo.load_office(Lo.ConnectSocket())\n\n        try:\n            doc = CalcDoc(Calc.open_doc(fnm=self._fnm, loader=loader))\n\n            doc.set_visible()\n\n            sheet = doc.get_active_sheet()\n\n            # basic data extraction\n            # this code assumes the input file is \"small totals.ods\"\n            print()\n            print(f'A1 string: {sheet.get_val(cell_name=\"A1\")}')  # string\n\n            cell_name = \"A2\"\n            cell = sheet.get_cell(cell_name=cell_name)\n            print(f\"{cell_name} type: {cell.get_type_string()}\")\n            print(f\"{cell_name} value: {sheet.get_num(cell_name=cell_name)}\")  # float\n\n            cell_name = \"E2\"\n            cell = sheet.get_cell(cell_name=cell_name)\n            print(f\"{cell_name} type: {cell.get_type_string()}\")\n            print(f\"{cell_name} value: {cell.get_val()}\")  # formula string\n\n            rng = sheet.get_range(range_name=\"A1:E10\")\n            data = rng.get_array()\n            # apply formatting entire table except for first and last rows.\n            start_idx = Calc.get_row_used_first_index(sheet.component)\n            end_idx = Calc.get_row_used_last_index(sheet.component)\n            # format as float with two decimal places.\n            fl = FormatterTable(format=(\".2f\", \">9\"), idxs=(start_idx, end_idx))\n\n            # add a custom row item formatter for first and last row only and pad items 9 spaces.\n            fl.row_formats.append(\n                FormatTableItem(format=\">9\", idxs_inc=(start_idx, end_idx))\n            )\n\n            # add a custom column formatter that formats the first column as integer values and move center in the column\n            fl.col_formats.append(\n                FormatTableItem(\n                    format=(\".0f\", \"^9\"),\n                    idxs_inc=(start_idx,),\n                    row_idxs_exc=(start_idx, end_idx),\n                )\n            )\n\n            # add a custom column formatter that formats the last column as percent\n            fl.col_formats.append(\n                FormatTableItem(\n                    format=(\".0%\", \">9\"),\n                    idxs_inc=(4,),\n                    row_idxs_exc=(start_idx, end_idx),\n                )\n            )\n            Calc.print_array(data, fl)\n\n            ids = sheet.get_float_array(range_name=\"A2:A7\")\n            fl = FormatterTable(format=(\".1f\", \">9\"))\n            Calc.print_array(ids, fl)\n\n            projects = Calc.convert_to_floats(\n                cast(Column, sheet.get_col(range_name=\"B2:B7\"))\n            )\n            print(\"Project scores\")\n            for proj in projects:\n                print(f\"  {proj:.2f}\")\n\n            stud = Calc.convert_to_floats(cast(Row, sheet.get_row(range_name=\"A4:E4\")))\n            print()\n            print(\"Student scores\")\n            for v in stud:\n                print(f\"  {v:.2f}\")\n\n            # create a cell range that spans the used area of the sheet\n            used_cell_rng = sheet.find_used_range()\n            print()\n            print(f\"The used area is: {used_cell_rng.get_range_str()}\")\n\n            # find cell ranges that cover all the specified data types\n            cr_qry = used_cell_rng.qi(XCellRangesQuery, True)\n            cell_ranges = cr_qry.queryContentCells(CellFlags.VALUE)\n            # (CellFlags.VALUE | CellFlags.FORMULA)\n            # (CellFlags.STRING)\n\n            # process each of the cell ranges\n            # -- extract each range as a 2D array of floats\n            if cell_ranges is None:\n                print(\"No cell ranges found\")\n            else:\n                print(f\"Found cell ranges: {cell_ranges.getRangeAddressesAsString()}\")\n                print()\n                addresses = cell_ranges.getRangeAddresses()\n                print(f\"Cell Ranges: ({len(addresses)}):\")\n                fl = FormatterTable(format=(\".2f\", \"<7\"))\n                # format the first col as integers\n                fl.col_formats.append(\n                    FormatTableItem(format=(\".0f\", \"<7\"), idxs_inc=(start_idx,))\n                )\n                for addr in addresses:\n                    Calc.print_address(addr)\n                    vals = sheet.get_float_array(range_name=Calc.get_range_str(addr))\n                    print(\"WITH FORMATTING\")\n                    Calc.print_array(vals, fl)\n                    # print(\"WITHOUT FORMATTING\")\n                    # Calc.print_array(vals)\n\n            msg_result = MsgBox.msgbox(\n                \"Do you wish to close document?\",\n                \"All done\",\n                boxtype=MessageBoxType.QUERYBOX,\n                buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n            )\n            if msg_result == MessageBoxResultsEnum.YES:\n                doc.close_doc()\n                Lo.close_office()\n            else:\n                print(\"Keeping document open\")\n\n        except Exception:\n            Lo.close_office()\n            raise\n```\n\n----------------------------------------\n\nTITLE: Storing a Row of Data in Calc Spreadsheet\nDESCRIPTION: Shows how to store a 1D array as a row of data in a spreadsheet using the set_row method. This provides a simpler interface when dealing specifically with row data rather than 2D arrays.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# in BuildTable._build_rows() of build_table.py\nvals = (42, 58.9, -66.5, 43.4, 44.5, 45.3, -67.3, 30.5, 23.2, -97.3, 22.4, 23.5)\nsheet.set_row(values=vals, cell_name=\"B2\")\n```\n\n----------------------------------------\n\nTITLE: Replacing Words Using XReplaceable in Python\nDESCRIPTION: This method replaces occurrences of words in a document, using pairs of old and new word sequences. It employs the XReplaceable and XReplaceDescriptor interfaces to perform replacements across the entire document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef replace_words(\n    doc: WriteDoc, old_words: Sequence[str], new_words: Sequence[str]\n) -> int:\n    replaceable = doc.qi(XReplaceable, True)\n    replace_desc = Lo.qi(XReplaceDescriptor, replaceable.createSearchDescriptor())\n\n    for old, new in zip(old_words, new_words):\n        replace_desc.setSearchString(old)\n        replace_desc.setReplaceString(new)\n    return replaceable.replaceAll(replace_desc)\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Spacing in OOo Writer\nDESCRIPTION: This snippet illustrates the usage of the 'Spacing' class to set spacing above and below a paragraph. It requires a cursor and text to which the spacing style is applied. Dependencies include 'ooodev.format.writer.direct.para.indent_space'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/indent_spacing.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nspacing = Spacing(above=8.0, below=10.0)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[spacing])\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Getting Axis - Python\nDESCRIPTION: This class method retrieves a specific axis from the chart document. It uses the XCoordinateSystem to access the correct axis by dimension, handling errors appropriately.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in chart2 class\n@classmethod\ndef get_axis(cls, chart_doc: XChartDocument, axis_val: AxisKind, idx: int) -> XAxis:\n    try:\n        coord_sys = cls.get_coord_system(chart_doc)\n        result = coord_sys.getAxisByDimension(int(axis_val), idx)\n        if result is None:\n            raise UnKnownError(\"None Value: getAxisByDimension() returned None\")\n        return result\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error getting Axis for chart\") from e\n```\n\n----------------------------------------\n\nTITLE: Extracting Control from Event Callbacks in Python\nDESCRIPTION: This snippet provides an alternate way to handle events, particularly when control retrieval is deferred to processing 'kwargs'. It underscores how to cast and extract 'control_src' from 'kwargs' for further control operations. This approach allows for flexible event processing without requiring 'control_src' as a positional argument.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_button.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlButton, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Popup Menu from Dictionary in LibreOffice with Python\nDESCRIPTION: Complete example demonstrating how to create a popup menu in LibreOffice Calc using a Python dictionary structure. The code shows menu definition, event handling, and menu execution. It uses the OOO Dev Tools library to interact with LibreOffice's UNO API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any, cast, TYPE_CHECKING\nimport uno\nfrom com.sun.star.awt import Rectangle\nfrom ooo.dyn.awt.menu_item_style import MenuItemStyleEnum\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.events.args.event_args import EventArgs\nfrom ooodev.gui.menu.popup.popup_creator import PopupCreator\nfrom ooodev.utils.kind.module_names_kind import ModuleNamesKind\n\nif TYPE_CHECKING:\n    from com.sun.star.awt import MenuEvent\n    from ooodev.gui.menu.popup_menu import PopupMenu\n\n\ndef on_menu_select(src: Any, event: EventArgs, menu: PopupMenu) -> None:\n    print(\"Menu Selected\")\n    me = cast(\"MenuEvent\", event.event_data)\n    print(\"MenuId\", me.MenuId)\n    command = menu.get_command(me.MenuId)\n    if command:\n        print(\"Command\", command)\n        # check if command is a dispatch command\n        if menu.is_dispatch_cmd(command):\n            menu.execute_cmd(command)\n\ndef get_popup_menu() -> list:\n\n    new_menu = [\n        {\"command\": \".uno:Cut\", \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT},\n        {\"command\": \".uno:Copy\", \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT},\n        {\"command\": \".uno:Paste\", \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT},\n        {\n            \"text\": \"Paste Special\",\n            \"command\": \".uno:PasteSpecialMenu\",\n            \"submenu\": [\n                {\n                    # \"text\": \"Paste Unformatted\",\n                    \"command\": \".uno:PasteUnformatted\",\n                    \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT,\n                },\n                {\"text\": \"-\"},\n                {\"text\": \"My Paste Only Text\", \"command\": \".uno:PasteOnlyText\", \"module\": ModuleNamesKind.NONE},\n                {\"text\": \"Paste Only Text\", \"command\": \".uno:PasteOnlyValue\"},\n                {\"text\": \"Paste Only Formula\", \"command\": \".uno:PasteOnlyFormula\"},\n                {\"text\": \"-\"},\n                {\"text\": \"Paste Transposed\", \"command\": \".uno:PasteTransposed\"},\n                {\"text\": \"-\"},\n                {\n                    \"command\": \".uno:PasteSpecial\",\n                    \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT,\n                },\n            ],\n        },\n        {\"text\": \"-\"},\n        {\"text\": \"Data Select\", \"command\": \".uno:DataSelect\"},\n        {\"text\": \"Current Validation\", \"command\": \".uno:CurrentValidation\"},\n        {\"text\": \"Define Current Name\", \"command\": \".uno:DefineCurrentName\"},\n        {\"text\": \"-\"},\n        {\"text\": \"Insert cells\", \"command\": \".uno:InsertCell\"},\n        {\"text\": \"Del cells\", \"command\": \".uno:DeleteCell\"},\n        {\"text\": \"Delete\", \"command\": \".uno:Delete\"},\n        {\"text\": \"Merge Cells\", \"command\": \".uno:MergeCells\"},\n        {\"text\": \"Split Cell\", \"command\": \".uno:SplitCell\"},\n        {\"text\": \"-\"},\n        {\"text\": \"Format Paintbrush\", \"command\": \".uno:FormatPaintbrush\"},\n        {\"text\": \"Reset Attributes\", \"command\": \".uno:ResetAttributes\"},\n        {\n            \"text\": \"Format Styles Menu\",\n            \"command\": \".uno:FormatStylesMenu\",\n            \"submenu\": [\n                {\"text\": \"Edit Style\", \"command\": \".uno:EditStyle\"},\n                {\"text\": \"-\"},\n                {\n                    \"text\": \"Default Cell Styles\",\n                    \"command\": \".uno:DefaultCellStylesmenu\",\n                    \"style\": MenuItemStyleEnum.RADIOCHECK,\n                },\n                {\n                    \"text\": \"Accent1 Cell Styles\",\n                    \"command\": \".uno:Accent1CellStyles\",\n                    \"style\": MenuItemStyleEnum.RADIOCHECK,\n                },\n                {\n                    \"text\": \"Accent2 Cell Styles\",\n                    \"style\": MenuItemStyleEnum.RADIOCHECK,\n                },\n                {\n                    \"text\": \"Accent 3 Cell Styles\",\n                    \"command\": \".uno:Accent3CellStyles\",\n                    \"style\": MenuItemStyleEnum.RADIOCHECK,\n                },\n                {\"text\": \"-\"},\n                {\"text\": \"Bad Cell Styles\", \"command\": \".uno:BadCellStyles\", \"style\": MenuItemStyleEnum.RADIOCHECK},\n                {\n                    \"text\": \"Error Cell Styles\",\n                    \"command\": \".uno:ErrorCellStyles\",\n                    \"style\": MenuItemStyleEnum.RADIOCHECK,\n                },\n                {\"text\": \"Good Cell Styles\", \"command\": \".uno:GoodCellStyles\", \"style\": MenuItemStyleEnum.RADIOCHECK},\n                {\n                    \"text\": \"Neutral Cell Styles\",\n                    \"command\": \".uno:NeutralCellStyles\",\n                    \"style\": MenuItemStyleEnum.RADIOCHECK,\n                },\n                {\n                    \"text\": \"Warning Cell Styles\",\n                    \"command\": \".uno:WarningCellStyles\",\n                    \"style\": MenuItemStyleEnum.RADIOCHECK,\n                },\n                {\n                    \"text\": \"-\",\n                },\n                {\n                    \"text\": \"Footnote Cell Styles\",\n                    \"command\": \".uno:FootnoteCellStyles\",\n                    \"style\": MenuItemStyleEnum.RADIOCHECK,\n                },\n                {\"text\": \"Note Cell Styles\", \"command\": \".uno:NoteCellStyles\", \"style\": MenuItemStyleEnum.RADIOCHECK},\n            ],\n        },\n        {\"text\": \"-\"},\n        {\"text\": \"Insert Annotation\", \"command\": \".uno:InsertAnnotation\"},\n        {\"text\": \"Edit Annotation\", \"command\": \".uno:EditAnnotation\"},\n        {\"text\": \"Delete Note\", \"command\": \".uno:DeleteNote\"},\n        {\"text\": \"Show Note\", \"command\": \".uno:ShowNote\"},\n        {\"text\": \"Hide Note\", \"command\": \".uno:HideNote\"},\n        {\"text\": \"-\"},\n        {\"text\": \"Format Sparkline\", \"command\": \".uno:FormatSparklineMenu\"},\n        {\"text\": \"-\"},\n        {\"command\": \".uno:CurrentConditionalFormatDialog\", \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT},\n        {\n            \"text\": \"Current Conditional Format Manager Dialog ...\",\n            \"command\": \".uno:CurrentConditionalFormatManagerDialog\",\n        },\n        {\"text\": \"Format Cell Dialog ...\", \"command\": \".uno:FormatCellDialog\"},\n    ]\n    return new_menu\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        creator = PopupCreator()\n        menus = get_popup_menu()\n        pm = creator.create(menus)\n        pm.subscribe_all_item_selected(on_menu_select)\n        rect = Rectangle(100, 100, 100, 100)\n        doc.activate()\n        pm.execute(doc.get_frame().ComponentWindow, rect, 0)\n        # place a breakpoint here to inspect the menu\n        assert pm\n    finally:\n        doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Getting Data from a Cell Range in Python using Calc\nDESCRIPTION: This method extracts data from a range of cells, returning it as a 2D tuple structure. The method also ensures that any formulas present are evaluated and that it integrates seamlessly with the Calc data extraction architecture.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\n    def get_array(cls, sheet: XSpreadsheet, range_name: str) -> TupleArray:\n        cell_range = cls.get_cell_range(sheet=sheet, range_name=range_name)\n        cr_data = Lo.qi(XCellRangeData, cell_range, raise_err=True)\n        return cr_data.getDataArray()\n```\n\n----------------------------------------\n\nTITLE: Listing Style Families and Their Properties - Python\nDESCRIPTION: The `show_styles()` function lists all style family names in an OpenOffice document and iterates through them to print the style names and properties for each family. It uses the `WriteDoc` and `Info` classes for accessing the styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef show_styles(doc: WriteDoc) -> None:\n    # get all the style families for this document\n    families = doc.get_style_families()\n    style_families = families.get_names()\n\n    print(f\"No. of Style Family Names: {len(style_families)}\")\n    for style_family in style_families:\n        print(f\"  {style_family}\")\n    print()\n\n    # list all the style names for each style family\n    for i, style_family in enumerate(style_families):\n        print(f'{i} \"{style_family}\" Style Family contains containers:')\n        style_names = Info.get_style_names(doc.component, style_family)\n        Lo.print_names(style_names)\n\n    # Report the properties for the paragraph styles family under the \"Standard\" name\n    Props.show_props(\n        'ParagraphStyles \"Standard\"',\n        Info.get_style_props(doc.component, \"ParagraphStyles\", \"Header\"),\n    )\n    print()\n```\n\n----------------------------------------\n\nTITLE: Defining the Main Function for Chart Generation in Python with LibreOffice\nDESCRIPTION: The main() function initializes the LibreOffice connection and handles the creation of charts based on the specified chart kind. It orchestrates loading a document, getting the respective sheet, and invoking methods to create the required chart. The function also manages user interaction regarding document closure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Chart2View.main() ofchart_2_views.py\n\ndef main(self) -> None:\n    _ = Lo.load_office(connector=Lo.ConnectPipe(), opt=Lo.Options(verbose=True))\n\n    try:\n        doc = Calc.open_doc(fnm=self._data_fnm)\n        GUI.set_visible(is_visible=True, odoc=doc)\n        sheet = Calc.get_sheet(doc=doc)\n\n        chart_doc = None\n        if self._chart_kind == ChartKind.AREA:\n            chart_doc = self._area_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.BAR:\n            chart_doc = self._bar_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.BUBBLE_LABELED:\n            chart_doc = self._labeled_bubble_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.COLUMN:\n            chart_doc = self._col_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.COLUMN_LINE:\n            chart_doc = self._col_line_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.COLUMN_MULTI:\n            chart_doc = self._mult_col_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.DONUT:\n            chart_doc = self._donut_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.HAPPY_STOCK:\n            chart_doc = self._happy_stock_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.LINE:\n            chart_doc = self._line_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.LINES:\n            chart_doc = self._lines_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.NET:\n            chart_doc = self._net_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.PIE:\n            chart_doc = self._pie_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.PIE_3D:\n            chart_doc = self._pie_3d_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.SCATTER:\n            chart_doc = self._scatter_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.SCATTER_LINE_ERROR:\n            chart_doc = self._scatter_line_error_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.SCATTER_LINE_LOG:\n            chart_doc = self._scatter_line_log_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.STOCK_PRICES:\n            chart_doc = self._stock_prices_chart(doc=doc, sheet=sheet)\n\n        if chart_doc:\n            Chart2.print_chart_types(chart_doc)\n\n            template_names = Chart2.get_chart_templates(chart_doc)\n            Lo.print_names(template_names, 1)\n\n        Lo.delay(2000)\n        msg_result = MsgBox.msgbox(\n            \"Do you wish to close document?\",\n            \"All done\",\n            boxtype=MessageBoxType.QUERYBOX,\n            buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n        )\n        if msg_result == MessageBoxResultsEnum.YES:\n            Lo.close_doc(doc=doc, deliver_ownership=True)\n            Lo.close_office()\n        else:\n            print(\"Keeping document open\")\n    except Exception:\n        Lo.close_office()\n        raise\n```\n\n----------------------------------------\n\nTITLE: Creating a Gradient with Common Colors in Draw\nDESCRIPTION: This code snippet demonstrates how to create a gradient fill for a rectangle in a LibreOffice Draw slide using specified start and end colors, and an angle, utilizing the `Draw` class from the `ooo-dev-tools` library.  It creates a rectangle and sets its gradient color by directly specifying the start color, end color, and angle. This results in a gradient that transitions between the two specified colors at the given angle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n        # in DrawGradient Class()\n        # creates gradient CommonColor\n        def _gradient(self, curr_slide: DrawPage[DrawDoc]) -> None:\n            rect1 = curr_slide.draw_rectangle(\n                x=self._x,\n                y=self._y,\n                width=self._width,\n                height=self._height,\n            )\n            rect1.set_gradient_color(\n                start_color=self._start_color,\n                end_color=self._end_color,\n                angle=Angle(self._angle),\n            )\n```\n\n----------------------------------------\n\nTITLE: Shape Transformation Matrix Handling in Python\nDESCRIPTION: Implements static methods for getting and displaying transformation matrices from LibreOffice Draw shapes. Includes methods to extract the matrix and calculate rotation angles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter14.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# in the Draw Class (simplified)\n@staticmethod\ndef get_transformation(shape: XShape) -> HomogenMatrix3:\n    return mProps.Props.get(shape, \"Transformation\")\n\n@staticmethod\ndef print_matrix(mat: HomogenMatrix3) -> None:\n    print(\"Transformation Matrix:\")\n    print(f\"\\t{mat.Line1.Column1:10.2f}\\t{mat.Line1.Column2:10.2f}\\t{mat.Line1.Column3:10.2f}\")\n    print(f\"\\t{mat.Line2.Column1:10.2f}\\t{mat.Line2.Column2:10.2f}\\t{mat.Line2.Column3:10.2f}\")\n    print(f\"\\t{mat.Line3.Column1:10.2f}\\t{mat.Line3.Column2:10.2f}\\t{mat.Line3.Column3:10.2f}\")\n\n    rad_angle = math.atan2(mat.Line2.Column1, mat.Line1.Column1)\n    #       sin(t), cos(t)\n    curr_angle = round(math.degrees(rad_angle))\n    print(f\"  Current angle: {curr_angle}\")\n    print()\n```\n\n----------------------------------------\n\nTITLE: Styling Chart Data Series Border\nDESCRIPTION: Code that applies border formatting to an entire data series in a chart using SeriesLineProperties to set color and width properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ndata_series_border = SeriesLineProperties(color=StandardColor.MAGENTA_DARK1, width=0.75)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_series_border])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font from Calc Cell Style with Python\nDESCRIPTION: This snippet illustrates retrieving font style information from a Calc document using the `FontOnly.from_style` method. It confirms that the property style name matches the expected default style. The prerequisites are a LibreOffice instance, and input includes the document and style name. The output is the `FontOnly` object with font properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = FontOnly.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\nassert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing LibreOffice Calc Document with Python\nDESCRIPTION: Demonstrates the basic workflow of connecting to LibreOffice, creating a Calc document, and properly closing resources. Uses the ooodev library to handle office automation tasks with proper resource management.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/utils/lo_connect_pipe_ex.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.calc import Calc\n\nloader = Lo.load_office(connector=Lo.ConnectPipe())\ndoc = Calc.create_doc(loader)\n# do work ...\nLo.close_doc(doc=doc)\nLo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Slide Deck Appending Implementation\nDESCRIPTION: Implementation of AppendSlides class for combining multiple presentation files. Handles file validation, office connections, and slide copying between documents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass AppendSlides:\n    def __init__(self, *fnms: PathOrStr) -> None:\n        if len(fnms) == 0:\n            raise ValueError(\"At lease one file is required. fnms has no values.\")\n        for fnm in fnms:\n            _ = FileIO.is_exist_file(fnm, True)\n\n        self._fnms = fnms\n\n    def main(self) -> None:\n        loader = Lo.load_office(Lo.ConnectPipe())\n\n        try:\n            doc = Lo.open_doc(fnm=self._fnms[0], loader=loader)\n\n            GUI.set_visible(is_visible=True, odoc=doc)\n\n            self._to_ctrl = GUI.get_current_controller(doc)\n            self._to_frame = GUI.get_frame(doc)\n\n            Lo.delay(500)\n            Lo.dispatch_cmd(cmd=DrawViewDispatch.DIA_MODE, frame=self._to_frame)\n\n            to_slides = Draw.get_slides(doc)\n            \n            if DialogAuto:\n                DialogAuto.monitor_dialog('y')\n\n            for fnm in self._fnms[1:]:\n                try:\n                    app_doc = Lo.open_doc(fnm=fnm, loader=loader)\n                except Exception as e:\n                    print(f'Could not open the file \"{fnm}\"')\n                    print(f\"  {e}\")\n                    continue\n\n                self._append_doc(to_slides=to_slides, doc=app_doc)\n\n            Lo.delay(500)\n            Lo.dispatch_cmd(cmd=DrawDrawingDispatch.DRAWING_MODE)\n            Lo.delay(1000)\n\n            msg_result = MsgBox.msgbox(\n                \"Do you wish to close document?\",\n                \"All done\",\n                boxtype=MessageBoxType.QUERYBOX,\n                buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n            )\n            if msg_result == MessageBoxResultsEnum.YES:\n                Lo.close_doc(doc=doc,deliver_ownership=True)\n                Lo.close_office()\n            else:\n                print(\"Keeping document open\")\n        except Exception:\n            Lo.close_office()\n            raise\n```\n\n----------------------------------------\n\nTITLE: Password Protection and Verification\nDESCRIPTION: Complete implementation of sheet protection with password verification dialog and user feedback.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npro = sheet.qi(XProtectable, True)\npro.protect(\"foobar\")\n\n# query the user for the password\npwd = GUI.get_password(\"Password\", \"Enter sheet Password\")\nif pwd == \"foobar\":\n    pro.unprotect(pwd)\n    MsgBox.msgbox(\"Password is Correct\", \"Password\", boxtype=MessageBoxType.INFOBOX)\nelse:\n    MsgBox.msgbox(\"Password is incorrect\", \"Password\", boxtype=MessageBoxType.ERRORBOX)\n```\n\n----------------------------------------\n\nTITLE: Applying Transparency to a Draw Object in Python\nDESCRIPTION: This example demonstrates how to create a Draw document, add a rectangle, and apply a transparency style to it. The code creates a rectangle, sets text inside it, and applies 88% transparency using the Transparency class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/transparency/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\nfrom ooodev.format.draw.modify.transparency import Transparency, Intensity\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n        style = Transparency(\n            value=Intensity(88),\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(style)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Moving View Cursor in LibreOffice Text Document\nDESCRIPTION: Code snippet demonstrating how to move a view cursor to different ranges within a text document. Uses goto_range() to set cursor position and select text between start and end positions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntvc = doc.get_view_cursor()\ncursor = doc.get_cursor()\n...\n    tvc.goto_range(cursor.component.getStart())\n    tvc.goto_range(cursor.component.getEnd(), True)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Properties from Writer Document\nDESCRIPTION: Demonstrates how to get font properties from existing text in a Writer document using a paragraph cursor. Uses the FontOnly.from_obj method to extract font information from selected text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\n\nfont_style = FontOnly.from_obj(para_cursor)\n\nassert font_style.prop_name == \"Liberation Serif\"\nassert font_style.prop_size.value == 20\npara_cursor.gotoEnd(False)\n```\n\n----------------------------------------\n\nTITLE: Initializing Calc Document with Menu Intercept\nDESCRIPTION: Main function that initializes LibreOffice Calc document with menu interceptor. Creates a new document, adds sample content, and implements menu interception.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/context_class_example.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe(), opt=Options(log_level=logging.DEBUG))\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        menu_intercept = CalcMenuIntercept(doc)\n        sheet = doc.sheets[0]\n        sheet[0, 0].value = \"Hello, World!\"\n        # set breakpoint here to see the menu\n        assert menu_intercept\n\n    finally:\n        doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Title - Python\nDESCRIPTION: This static method creates a title for a chart by initializing an XTitle instance and setting its text to the provided title string. It handles exceptions and raises a ChartError in case of failure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@staticmethod\ndef create_title(title: str) -> XTitle:\n    try:\n        xtitle = Lo.create_instance_mcf(XTitle, \"com.sun.star.chart2.Title\", raise_err=True)\n        xtitle_str = Lo.create_instance_mcf(\n            XFormattedString, \"com.sun.star.chart2.FormattedString\", raise_err=True\n        )\n        xtitle_str.setString(title)\n        title_arr = (xtitle_str,)\n        xtitle.setText(title_arr)\n        return xtitle\n    except Exception as e:\n        raise ChartError(f'Error creating title for: \"{title}\"') from e\n```\n\n----------------------------------------\n\nTITLE: Adding Number Format to Data Point in Python\nDESCRIPTION: This code demonstrates changing the number format of individual data points using the `style_numbers_numbers` method, allowing the display of numeric values in your preferred format.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\ndp = ds[1]\ndp.style_text_attributes(show_number=True)\ndp.style_numbers_numbers(\n    source_format=False,\n    num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Style Settings to Chart Document in Python\nDESCRIPTION: This code snippet applies style settings to the chart document, including background and wall colors. It also sets data point labels if the chart is using x-axis categories. These settings enhance the visual appearance of the chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n        # part of Chart2.insert_chart()...\n        # apply style settings to chart doc\n        # background and wall colors\n        cls.set_background_colors(chart_doc, color_bg, color_wall)\n\n        if has_cats:  # charts using x-axis categories\n            cls.set_data_point_labels(chart_doc, DataPointLabelTypeKind.NUMBER)\n```\n\n----------------------------------------\n\nTITLE: Applying Border with Dash-Dot Line to Cell Range in Calc\nDESCRIPTION: Sets a dash-dot border with dark green color to a cell range. The code gets a range object, creates a Borders object with specific Side properties, and applies it using the Styler.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ncr = Calc.get_cell_range(sheet, rng_obj)\nborders = Borders(\n    border_side=Side(line=BorderLineKind.DASH_DOT, color=CommonColor.DARK_GREEN)\n)\nStyler.apply(cr, borders)\n```\n\n----------------------------------------\n\nTITLE: Applying Cell Protection to a Single Cell in Calc with Python\nDESCRIPTION: Code snippet showing how to apply specific cell protection settings to a single cell. The example sets the cell value and configures protection to hide formulas, protect the cell, and hide content when printing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/cell_protection.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncell = sheet[\"A1\"]\ncell.value = \"Hello\"\ncell.style_protection(\n    hide_all=False,\n    hide_formula=True,\n    protected=True,\n    hide_print=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Data Using XCellSeries Interface in Python\nDESCRIPTION: This snippet illustrates how to generate cell data using the XCellSeries interface. It showcases the use of fillAuto() method to complete a series based on initial seed values in a LibreOffice spreadsheet. Dependencies include the LibreOffice environment and relevant Python components.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# in Filler._fill_series() of filler.py\n# set first two values of three rows\n\n# ascending integers: 1, 2\nsheet.set_val(cell_name=\"B7\", value=2)\nsheet.set_val(cell_name=\"A7\", value=1)\n\n# dates, decreasing by month\nsheet.get_cell(cell_name=\"A8\").set_date(day=28, month=2, year=2015)\nsheet.get_cell(cell_name=\"B8\").set_date(day=28, month=1, year=2015)\n\n# descending integers: 6, 4\nsheet.set_val(cell_name=\"A9\", value=6)\nsheet.set_val(cell_name=\"B9\", value=4)\n\n# get cell range series\nseries = sheet.get_range(range_name=\"A7:G9\").get_cell_series()\n\n# use first 2 cells for series, and fill to the right\nseries.fillAuto(FillDirection.TO_RIGHT, 2)\n\n```\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@staticmethod\ndef get_cell_series(sheet: XSpreadsheet, range_name: str) -> XCellSeries:\n```\n\n----------------------------------------\n\nTITLE: Scaling Chart Axes in Python for OpenOffice\nDESCRIPTION: These methods provide functionality to scale the X and Y axes of a chart. They support different scaling types such as linear, logarithmic, exponential, and power scaling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef scale_x_axis(cls, chart_doc: XChartDocument, scale_type: CurveKind) -> XAxis:\n    return cls.scale_axis(chart_doc=chart_doc, axis_val=AxisKind.X, idx=0, scale_type=scale_type)\n\n@classmethod\ndef scale_y_axis(cls, chart_doc: XChartDocument, scale_type: CurveKind) -> XAxis:\n    return cls.scale_axis(chart_doc=chart_doc, axis_val=AxisKind.Y, idx=0, scale_type=scale_type)\n\n@classmethod\ndef scale_axis(\n    cls, chart_doc: XChartDocument, axis_val: AxisKind, idx: int, scale_type: CurveKind\n) -> XAxis:\n    try:\n        axis = cls.get_axis(chart_doc=chart_doc, axis_val=axis_val, idx=idx)\n        sd = axis.getScaleData()\n        s = None\n        if scale_type == CurveKind.LINEAR:\n            s = \"LinearScaling\"\n        elif scale_type == CurveKind.LOGARITHMIC:\n            s = \"LogarithmicScaling\"\n        elif scale_type == CurveKind.EXPONENTIAL:\n            s = \"ExponentialScaling\"\n        elif scale_type == CurveKind.POWER:\n            s = \"PowerScaling\"\n        if s is None:\n            Lo.print(f'Did not reconize scaling type: \"{scale_type}\"')\n        else:\n            sd.Scaling = Lo.create_instance_mcf(\n                XScaling, f\"com.sun.star.chart2.{s}\", raise_err=True\n            )\n        axis.setScaleData(sd)\n        return axis\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error setting axis scale\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Shadow to Cell Range in Calc\nDESCRIPTION: Adds a blue border with a default shadow to a cell range. The code gets a range object, creates a Borders object with blue color and default Shadow properties, and applies it using the Styler.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nrng_obj = Calc.get_range_obj(\"B2:F6\")\ncr = Calc.get_cell_range(sheet, rng_obj)\nborders = Borders(border_side=Side(color=CommonColor.BLUE), shadow=Shadow())\nStyler.apply(cr, borders)\n```\n\n----------------------------------------\n\nTITLE: Adding an Image Shape with Specified Dimensions in Python\nDESCRIPTION: This code defines the `add_image_shape` method, which adds an image to a LibreOffice document as a shape. It handles the creation of a graphic shape, sets the image data as the `GraphicURL` property, and adds it to the document using the provided cursor. If no width or height are passed then it will get the images width and height to be able to add it correctly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# in Write class\n@classmethod\ndef add_image_shape(\n    cls, cursor: XTextCursor, fnm: PathOrStr, width: int = 0, height: int = 0\n) -> bool:\n    cargs = CancelEventArgs(Write.add_image_shape.__qualname__)\n    cargs.event_data = {\n        \"cursor\": cursor,\n        \"fnm\": fnm,\n        \"width\": width,\n        \"height\": height,\n    }\n    _Events().trigger(WriteNamedEvent.IMAGE_SHAPE_ADDING, cargs)\n    if cargs.cancel:\n        return False\n\n    # get value after event has been raised in case any have been changed.\n    fnm = cargs.event_data[\"fnm\"]\n    width = cargs.event_data[\"width\"]\n    height = cargs.event_data[\"height\"]\n\n    pth = FileIO.get_absolute_path(fnm)\n\n    try:\n        if width > 0 and height > 0:\n            im_size = Size(width, height)\n        else:\n```\n\n----------------------------------------\n\nTITLE: Automatic Slide Show Controller Implementation\nDESCRIPTION: Controls the automatic progression of slides by monitoring the current slide index until the last slide is reached. Includes delay functionality for final slide viewing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter18.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef wait_last(sc: XSlideShowController, delay: int) -> None:\n    wait = int(delay)\n    num_slides = sc.getSlideCount()\n    while True:\n        curr_index = sc.getCurrentSlideIndex()\n        if curr_index == -1:\n            break\n        if curr_index >= num_slides - 1:\n            break\n        Lo.delay(500)\n\n    if wait > 0:\n        Lo.delay(wait)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Column Formatting (Percentage)\nDESCRIPTION: This code snippet adds a custom column formatter that formats the fifth column (index 4) as a percentage, padded to a minimum width of 9 characters on the left. It excludes row indexes 0 and 9 from this formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfl.col_formats.append(FormatTableItem(format=(\".0%\", \">9\"), idxs_inc=(4,), row_idxs_exc=(0, 9)))\n```\n\n----------------------------------------\n\nTITLE: Getting Image Size in 1/100 mm Units using Python\nDESCRIPTION: This code demonstrates how to obtain the size of an image in 1/100 mm units using the `ImagesLo.get_size_100mm` method. It utilizes the `Size100thMM` property of the image and relies on the `load_graphic_file` to load the graphic into a `graphic` object. This is used for scaling images correctly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in ImagesLo class\n@classmethod\ndef get_size_100mm(cls, im_fnm: PathOrStr) -> Size:\n    graphic = cls.load_graphic_file(im_fnm)\n    return Props.get_property(prop_set=graphic, name=\"Size100thMM\")\n\n@staticmethod\ndef load_graphic_link(graphic_link: object) -> XGraphic:\n    gprovider = Lo.create_instance_mcf(\n        XGraphicProvider, \"com.sun.star.graphic.GraphicProvider\", raise_err=True\n    )\n\n    xprops = Lo.qi(XPropertySet, graphic_link, True)\n\n    try:\n        gprops = Props.make_props(URL=str(xprops.getPropertyValue(\"GraphicURL\")))\n        return gprovider.queryGraphic(gprops)\n    except Exception as e:\n        raise Exception(f\"Unable to retrieve graphic\") from e\n```\n\n----------------------------------------\n\nTITLE: Connecting to LibreOffice via Pipe in Python\nDESCRIPTION: This Python code snippet demonstrates how to use the LoPipeStart class to establish a connection to LibreOffice using a pipe. It imports necessary classes from the ooodev package, establishes a connection, retrieves the service manager to create a desktop instance, and finally terminates the LibreOffice process. This requires the ooodev package, and LibreOffice must be installed and configured for pipe connections.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/conn/connect/lo_pipe_start.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.conn.connect import LoPipeStart\\nfrom ooodev.conn.connectors import ConnectPipe\\nconn = LoPipeStart(ConnectPipe())\\nconn.connect() # may take a few seconds\\nsmgr = conn.ctx.getServiceManager()\\ndesktop = smgr.createInstanceWithContext(\\\"com.sun.star.frame.Desktop\\\", conn.ctx)\\n# do some work ...\\nconn.kill_soffice()\n```\n\n----------------------------------------\n\nTITLE: Modifying Slide Layout and Adding Bullets in Draw Class Python\nDESCRIPTION: This simplifies slide setup and modification by setting a layout and finding shapes to add content to. The `bullets_slide` method initializes the slide layout for titles and bullets, and returns a text shape to which text can be added. Dependencies include layout and shape management classes or services.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef bullets_slide(cls, slide: XDrawPage, title: str) -> XText:\n    Props.set(slide, Layout=PresentationLayoutKind.TITLE_BULLETS.value)\n\n    xs = cls.find_shape_by_type(slide=slide, shape_type=DrawingNameSpaceKind.TITLE_TEXT)\n    txt_field = Lo.qi(XText, xs, True)\n    txt_field.setString(title)\n\n    xs = cls.find_shape_by_type(slide=slide, shape_type=DrawingNameSpaceKind.BULLETS_TEXT)\n    return Lo.qi(XText, xs, True)\n```\n\n----------------------------------------\n\nTITLE: Appending Paragraph with Style in Python\nDESCRIPTION: This snippet demonstrates how to append a paragraph to a document using the `append_para` method of a cursor object. It applies a specific style to the paragraph, in this case, the `Subtitle` style, using the `StylePara` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nelif line.startswith(\"Author: \"):\n    cursor.append_para(line[8:], styles=[StylePara(StyleParaKind.SUBTITLE)])\n```\n\n----------------------------------------\n\nTITLE: Adding Tools Entry Menu Item\nDESCRIPTION: Shows how to insert a new menu item into the Tools menu and set up event subscriptions. The code demonstrates menu item creation, command assignment, and popup menu setup.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nte_popup.insert_item(new_id, \"~Tools Entry\", MenuItemStyleKind.NONE, 0)\nte_popup.set_command(new_id, \"MyCommand\")\n\nte_popup.set_popup_menu(new_id, pm)\nnew_pop = te_popup.get_popup_menu(new_id)\nif new_pop is None:\n    rasie Exception(f\"Not able to find menu inserted into Tools Entry menu for menu idL {new_id})\n\nmb.subscribe_all_item_highlighted(on_menu_my_cmd_highlighted)\nmb.subscribe_all_item_selected(on_my_cmd_menu_select)\n```\n\n----------------------------------------\n\nTITLE: Modifying All Data Point Labels in a Chart\nDESCRIPTION: This code changes the formatting of all data point labels in a pie chart to be more visible. It sets all labels to use 14pt bold white text, which improves readability especially on darker pie segments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2View._pie_3d_chart() in chart_2_views.py\n# ...\n# change all the data points to be bold white 14pt\nds = Chart2.get_data_series(chart_doc)\nProps.set(ds[0], CharHeight=14.0, CharColor=CommonColor.WHITE, CharWeight=FontWeight.BOLD)\n#...\n```\n\n----------------------------------------\n\nTITLE: Applying Font Style to Y-Axis - Python\nDESCRIPTION: This snippet focuses on applying a specific font style to the Y-Axis of the chart without the additional surrounding context of loading the document. It demonstrates the use of the `style_font` method to set the font characteristics.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n_ = chart_doc.axis_y.style_font(\\n    name=\"Lucida Calligraphy\", size=14, font_style=\"italic\"\\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Split in Calc Class (Python)\nDESCRIPTION: This method implements the split_window functionality in the Calc class, using the SplitWindow dispatch command to split the window at a specified cell.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef split_window(cls, doc: XSpreadsheetDocument, cell_name: str) -> None:\n    frame = cls.get_controller(doc).getFrame()\n    cls.goto_cell(cell_name=cell_name, frame=frame)\n    props = Props.make_props(ToPoint=cell_name)\n    Lo.dispatch_cmd(cmd=\"SplitWindow\", props=props, frame=frame)\n```\n\n----------------------------------------\n\nTITLE: Storing Column Data in LibreOffice Calc\nDESCRIPTION: Method to populate a spreadsheet with column data including months and numerical values. Demonstrates use of set_col and set_val methods to build a data table with summation formulas.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef _build_cols(self, sheet: CalcSheet) -> None:\n    vals = (\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\")\n    sheet.set_col(values=vals, cell_name=\"A2\")\n    sheet.set_val(value=\"SUM\", cell_name=\"A14\")\n\n    sheet.set_val(value=\"Smith\", cell_name=\"B1\")\n    vals = (42, 58.9, -66.5, 43.4, 44.5, 45.3, -67.3, 30.5, 23.2, -97.3, 22.4, 23.5)\n    sheet.set_col(values=vals, cell_name=\"B2\")\n    sheet.set_val(value=\"=SUM(B2:M2)\", cell_name=\"B14\")\n\n    sheet.set_val(value=\"Jones\", col=2, row=0)\n    vals = (21, 40.9, -57.5, -23.4, 34.5, 59.3, 27.3, -38.5, 43.2, 57.3, 25.4, 28.5)\n    sheet.set_col(values=vals, col_start=2, row_start=1)\n    sheet.set_val(value=\"=SUM(B3:M3)\", col=2, row=13)\n\n    sheet.set_val(value=\"Brown\", col=3, row=0)\n    vals = (31.45, -20.9, -117.5, 23.4, -114.5, 115.3, -171.3, 89.5, 41.2, 71.3, 25.4, 38.5)\n    sheet.set_col(values=vals, col_start=3, row_start=1)\n    sheet.set_val(value=\"=SUM(A4:L4)\", col=3, row=13)\n```\n\n----------------------------------------\n\nTITLE: Querying Cell Ranges with CellFlags\nDESCRIPTION: Query cell ranges containing values or formulae using bitwise operations on CellFlags\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncell_ranges = cr_query.queryContentCells((CellFlags.VALUE | CellFlags.FORMULA))\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Chart with Regression Analysis in Python\nDESCRIPTION: This function creates a scatter chart with regression analysis in a Calc spreadsheet document. It utilizes specified data ranges, sets the chart's titles, and optionally supports drawing regression curves. Inputs required include the document, spreadsheet references, and chart range information. The function also supports setting chart dimensions and allows for regression functions, like linear and logarithmic, to be drawn if corresponding code lines are uncommented.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# \ndef _scatter_chart(\n    self, doc: XSpreadsheetDocument, sheet: XSpreadsheet\n) -> XChartDocument:\n    # uses the \"Ice Cream Sales vs Temperature\" table\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"A110:B122\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"C109\",\n        width=16,\n        height=11,\n        diagram_name=ChartTypes.XY.TEMPLATE_LINE.SCATTER_SYMBOL,\n    )\n    Calc.goto_cell(cell_name=\"A104\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A109\")\n    )\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A110\")\n    )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"B110\")\n    )\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n\n    # Chart2.calc_regressions(chart_doc)\n    # Chart2.draw_regression_curve(chart_doc=chart_doc, curve_kind=CurveKind.LINEAR)\n    return XChartDocument\n```\n\n----------------------------------------\n\nTITLE: Setting up and applying paragraph alignment in Writer (Python)\nDESCRIPTION: This snippet demonstrates how to set up a Writer document, create an Alignment object with specific properties, and apply it to a paragraph style. It also shows how to retrieve alignment information from an existing style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.alignment import Alignment, StyleParaKind\nfrom ooodev.format.writer.modify.para.alignment import ParagraphAdjust, ParagraphVertAlignEnum\nfrom ooodev.format.writer.modify.para.alignment import WritingMode, WritingMode2Enum\nfrom ooodev.format.writer.modify.para.alignment import LastLineKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        shadow_style = Alignment(\n            align=ParagraphAdjust.BLOCK,\n            align_vert=ParagraphVertAlignEnum.TOP,\n            txt_direction=WritingMode(WritingMode2Enum.LR_TB),\n            expand_single_word=True,\n            align_last=LastLineKind.JUSTIFY,\n            style_name=StyleParaKind.STANDARD,\n        )\n        shadow_style.apply(doc)\n\n        cursor = Write.get_cursor(doc)\n        Write.append_para(cursor=cursor, text=p_txt)\n\n        style_obj = Alignment.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Calculating Page Text Width - Python\nDESCRIPTION: This method calculates the width available for text in the document by taking into account the page dimensions and margins. It retrieves properties from the standard page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# in Write class\n@staticmethod\ndef get_page_text_width(text_doc: XTextDocument) -> int:\n    props = Info.get_style_props(doc=text_doc, family_style_name=\"PageStyles\", prop_set_nm=\"Standard\")\n    if props is None:\n        Lo.print(\"Could not access the standard page style\")\n        return 0\n\n    try:\n        width = int(props.getPropertyValue(\"Width\"))\n        left_margin = int(props.getPropertyValue(\"LeftMargin\"))\n        right_margin = int(props.getPropertyValue(\"RightMargin\"))\n        return width - (left_margin + right_margin)\n    except Exception as e:\n        Lo.print(\"Could not access standard page style dimensions\")\n        Lo.print(f\"    {e}\")\n        return 0\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Range in Python\nDESCRIPTION: Shows how to iterate over cells in a range using a for loop. The iteration is done in column-major order, where cells are iterated by column first, then by row.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# each cell is an instance of CellObj\n>>> rng = RangeObj.from_range(\"A1:C4\")\n>>> for cell in rng:\n>>>     print(cell)\nA1\nB1\nC1\nA2\nB2\nC2\nA3\nB3\nC3\nA4\nB4\nC4\n```\n\n----------------------------------------\n\nTITLE: Initializing Calc Document with Animal Grid\nDESCRIPTION: Creates a 15x6 grid of animal names in a Calc document, setting up a spreadsheet for search and replace operations with custom styling\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main(self) -> None:\n    loader = Lo.load_office(Lo.ConnectSocket())\n\n    try:\n        doc = CalcDoc(Calc.create_doc(loader))\n\n        doc.set_visible()\n        Lo.delay(300)\n        doc.zoom(ZoomKind.ZOOM_150_PERCENT)\n\n        sheet = doc.get_sheet(0)\n\n        def cb(row: int, col: int, prev) -> str:\n            # call back function for make_2d_array, sets the value for the cell\n            # return animals repeating until all cells are filled\n            v = (row * ReplaceAll.TOTAL_COLS) + col\n\n            a_len = len(ReplaceAll.ANIMALS)\n            if v > a_len - 1:\n                i = v % a_len\n            else:\n                i = v\n            return ReplaceAll.ANIMALS[i]\n```\n\n----------------------------------------\n\nTITLE: Getting a Column of Data in Python using Calc\nDESCRIPTION: This method fetches a specified column from a sheet and returns it as a 1D list. It checks for valid column indices and navigates the data structure in row-major order to extract the correct values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\n    def get_col(cls, sheet: XSpreadsheet, range_name: str) -> List[Any] | None:\n        vals = cls.get_array(sheet=sheet, range_name=range_name)\n        return cls.extract_col(vals=vals, col_idx=0)\n\n    @staticmethod\n    def extract_col(vals: Table, col_idx: int) -> List[Any] | None:\n        row_len = len(vals)\n        if row_len == 0:\n            return None\n        col_len = len(vals[0])\n        if col_idx < 0 or col_idx > col_len - 1:\n            Lo.print(\"Column index out of range\")\n            return None\n\n        col_vals = []\n        for row in vals:\n            col_vals.append(row[col_idx])\n        return col_vals\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Column Charts in Python\nDESCRIPTION: Function that creates a multi-column chart from spreadsheet data. It configures the chart dimensions, sets titles for the chart and axes, enables a legend, and positions the chart in the spreadsheet. It includes commented options for 3D chart variations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# \ndef _mult_col_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"E15:G21\")\n    d_name = ChartTypes.Column.TEMPLATE_STACKED.COLUMN\n    # d_name = ChartTypes.Column.TEMPLATE_PERCENT.COLUMN_DEEP_3D\n    # d_name = ChartTypes.Column.TEMPLATE_PERCENT.COLUMN_FLAT_3D\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"A22\",\n        width=20,\n        height=11,\n        diagram_name=d_name,\n    )\n    ChartTypes.Column.TEMPLATE_STACKED.COLUMN\n    Calc.goto_cell(cell_name=\"A13\", doc=doc)\n\n    Chart2.set_title(chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E13\"))\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E15\")\n    )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"F14\")\n    )\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n    Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n\n    # for the 3D versions\n    # Chart2.show_axis_label(chart_doc=chart_doc, axis_val=AxisKind.Z, idx=0, is_visible=False)\n    # Chart2.set_chart_shape_3d(chart_doc=chart_doc, shape=DataPointGeometry3DEnum.CYLINDER)\n    return chart_doc\n```\n\n----------------------------------------\n\nTITLE: Applying Cell Text Formatting in Python\nDESCRIPTION: Shows how to format cell text using font and border properties inherited from SheetCell service\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfont = Font(color=CommonColor.DARK_BLUE, size=18.0)\nbdr = Borders(padding=Padding(left=UnitMM(5)))\nStyler.apply(cell.component, font, bdr)\n```\n\n----------------------------------------\n\nTITLE: Getting Slide Show Object in Impress\nDESCRIPTION: This snippet illustrates the retrieval of the slide show object from a document using the Draw class. It includes error handling to manage situations where the presentation might not be accessible.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter18.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# in the Draw class\n@staticmethod\ndef get_show(doc: XComponent) -> XPresentation2:\n    try:\n        ps = Lo.qi(XPresentationSupplier, doc, True)\n        return Lo.qi(XPresentation2, ps.getPresentation(), True)\n    except Exception as e:\n        raise DrawError(\"Unable to get Presentation\") from e\n```\n\n----------------------------------------\n\nTITLE: Styling Chart Data Point with Background Image in Python\nDESCRIPTION: This snippet shows how to style a specific data point in a chart with a background image. It uses the Chart2.style_data_point method, targeting series index 0 and point index 0.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=0, styles=[data_series_img])\n```\n\n----------------------------------------\n\nTITLE: Adding Cell Annotation in Python\nDESCRIPTION: Class method to add an annotation to a specific cell, with options to control visibility\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef add_annotation(\n    cls, sheet: XSpreadsheet, cell_name: str, msg: str, is_visible=True\n) -> XSheetAnnotation:\n    addr = cls.get_cell_address(sheet=sheet, cell_name=cell_name)\n    anns_supp = Lo.qi(XSheetAnnotationsSupplier, sheet, True)\n    anns = anns_supp.getAnnotations()\n    anns.insertNew(addr, msg)\n\n    xcell = cls.get_cell(sheet=sheet, cell_name=cell_name)\n    ann_anchor = Lo.qi(XSheetAnnotationAnchor, xcell, True)\n    ann = ann_anchor.getAnnotation()\n    ann.setIsVisible(is_visible)\n    return ann\n```\n\n----------------------------------------\n\nTITLE: Opening Calc Document Using CalcDoc Class\nDESCRIPTION: Example of opening an existing Calc document using the CalcDoc class with error handling and office connection management\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom ooodev.loader.lo import Lo\nfrom ooodev.calc import CalcDoc\nfrom pathlib import Path\n\n\ndef main():\n    pth = Path.cwd() / \"example.ods\"\n    doc = None\n    try:\n        loader = Lo.load_office(connector=Lo.ConnectPipe())\n        doc = CalcDoc.open_doc(fnm=pth, visible=True)\n        doc.msgbox(\"All done\")\n        doc.close()\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        if doc:\n            doc.close()\n        Lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Executing the Solver and Reporting Results\nDESCRIPTION: This snippet executes the previously configured solver and generates a report for the solver's results. It utilizes the Calc module's methods to solve the optimization problem and report on the output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nsolver.solve()\n        Calc.solver_report(solver)\n        doc.close_doc()\n```\n\n----------------------------------------\n\nTITLE: Inserting Text with Shuffling in Python\nDESCRIPTION: This Python function `apply_shuffle()` shuffles words of four or more letters in a document by randomizing the middle letters. It inserts the shuffled text back into the document. Dependencies include the `WriteDoc` class for accessing document text, and functions like `do_mid_shuffle()`. Parameters include `delay` for managing delay timings and `visible` to determine the visibility of the process. The function processes one word at a time, inserting their shuffled versions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef apply_shuffle(doc: WriteDoc, delay: int, visible: bool) -> None:\n    doc_text = doc.get_text()\n    if visible:\n        cursor = doc.get_view_cursor()\n    else:\n        cursor = doc.get_cursor()\n\n    word_cursor = doc.get_cursor()\n    word_cursor.goto_start()  # go to start of text\n\n    while True:\n        word_cursor.goto_next_word(True)\n\n        # move the text view cursor, and highlight the current word\n        cursor.goto_range(word_cursor.component.getStart())\n        cursor.goto_range(word_cursor.component.getEnd(), True)\n        curr_word = word_cursor.get_string()\n\n        # get whitespace padding amounts\n        c_len = len(curr_word)\n        curr_word = curr_word.lstrip()\n        l_pad = c_len - len(curr_word)  # left whitespace padding amount\n        curr_word = curr_word.rstrip()\n        r_pad = c_len - len(curr_word) - l_pad  # right whitespace padding amount\n        if len(curr_word) > 0:\n            pad_l = \" \" * l_pad  # recreate left padding\n            pad_r = \" \" * r_pad  # recreate right padding\n            Lo.delay(delay)\n            mid_shuffle = do_mid_shuffle(curr_word)\n            doc_text.insert_string(\n                word_cursor.component, f\"{pad_l}{mid_shuffle}{pad_r}\", True\n            )\n\n        if word_cursor.goto_next_word() is False:\n            break\n\n    word_cursor.goto_start()  # go to start of text\n    cursor.goto_start()\n```\n\n----------------------------------------\n\nTITLE: Accessing Calc Spreadsheet in Python\nDESCRIPTION: This code snippet shows how to get a Calc spreadsheet document using the `ooodev` library. It imports `Lo` and `Calc` from `ooodev`, and then uses `Calc.get_ss_doc(Lo.ThisComponent)` to retrieve the current spreadsheet document. `Lo.ThisComponent` represents the current LibreOffice component.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/utils/lo_connect_direct_ex.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.calc import Calc\n\ndoc = Calc.get_ss_doc(Lo.ThisComponent)\n# do work ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text from Shapes in Python\nDESCRIPTION: The `get_shapes_text` method in the Draw class is used to collect text from all shapes in a document. It iterates over shapes, converts each one to text, and joins them into a single string. The inputs are a document object and the return value is a concatenated string of all shape texts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# in Draw Class (simplified)\n@classmethod\ndef get_shapes_text(cls, doc: XComponent) -> str:\n    sb: List[str] = []\n    shapes = cls.get_ordered_shapes(doc)\n    for shape in shapes:\n        text = cls.get_shape_text(shape)\n        sb.append(text)\n    return \"\\n\".join(sb)\n```\n\n----------------------------------------\n\nTITLE: Formatting Data Labels as Percentages in Python\nDESCRIPTION: Illustrates the `style_numbers_percent` method for applying percentage formats to data labels in a series, using the `NumberFormatIndexEnum` for lookup. This allows data to appear as percentages on the chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\nds.style_text_attributes(show_number_in_percent=True)\nds.style_numbers_percent(\n    source_format=False,\n    num_format_index=NumberFormatIndexEnum.PERCENT_DEC2,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Text in LibreOffice Calc with Python\nDESCRIPTION: This snippet shows how to assign plain text to a cell using the setFormula() method. Despite its name, setFormula() can be used to set both formulas and plain text. It demonstrates how to insert the text \"hello\" into a cell.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncell.setFormula(\"hello\") # put \"hello\" text in the cell\n```\n\n----------------------------------------\n\nTITLE: Setting Data Series Settings\nDESCRIPTION: This code snippet shows how to set various settings for a chart's data series, such as spacing, overlap, and side-by-side display, using the `Settings` class from the `ooodev` library. These settings control the visual arrangement and presentation of data within the chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/options.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.chart2.direct.series.data_series.options import Settings\n# ... other code\n\nsetting_options = Settings(\n    chart_doc=chart_doc.component, spacing=150, overlap=22, side_by_side=True\n)\nChart2.style_data_series(chart_doc=chart_doc.component, styles=[setting_options])\"\n```\n\n----------------------------------------\n\nTITLE: Applying font effects to a Calc range\nDESCRIPTION: Snippet showing how to apply font effects to a range of cells. The example applies red text color, blue single underline, and shadow effects to a cell range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font_effects.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_rng = sheet.get_range(range_obj=rng)\ncell_rng.style_font_effect(\n    color=CommonColor.RED,\n    underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n    shadowed=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Document and Styles in Writer using Python\nDESCRIPTION: This code snippet showcases how to set up a new Writer document and apply paragraph indent styles using the 'Indent' class from the 'ooodev' library. It initializes the document, makes it visible, and applies specific indentation parameters before closing the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/indent_spacing.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.indent_space import Indent, Spacing, LineSpacing\\nfrom ooodev.format.writer.modify.para.indent_space import StyleParaKind, ModeKind\\nfrom ooodev.office.write import Write\\nfrom ooodev.gui import GUI\\nfrom ooodev.loader.lo import Lo\\n\\ndef main() -> int:\\n    with Lo.Loader(Lo.ConnectPipe()):\\n        doc = Write.create_doc()\\n        GUI.set_visible(doc=doc)\\n        Lo.delay(300)\\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\\n\\n        para_indent_style = Indent(\\n            before=22.0, after=20.0, first=8.0, style_name=StyleParaKind.STANDARD\\n        )\\n        para_indent_style.apply(doc)\\n\\n        style_obj = Indent.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\\n        Lo.delay(1_000)\\n\\n        Lo.close_doc(doc)\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Overload for Retrieving Cell by Name in ooodev Calc Python\nDESCRIPTION: Describes a method overload to get a cell reference using its name. This utilizes the getCellRangeByName method and extends it with positional access to support named cells systematically.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class (overloads method, simplified)\n@classmethod\ndef get_cell(cls, sheet: XSpreadsheet, cell_name: str) -> XCell:\n    cell_range = sheet.getCellRangeByName(cell_name)\n    return cls.get_cell(cell_range=cell_range, col=0, row=0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Slope with Cell Range in Calc - Python\nDESCRIPTION: This example demonstrates how to calculate the slope of a line using the `SLOPE` function, which requires coordinates to be passed in as ranges taken directly from a sheet after writing the initial values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# in calc_functions.py\n# the slope function only seems to work if passed XCellRange\narr = [[1.0, 2.0, 3.0], [3.0, 6.0, 9.0]]\nsheet.set_array(values=arr, name=\"A1\")\nLo.delay(500)\nx_rng = sheet.get_range(range_name=\"A1:C1\").get_cell_range()\ny_rng = sheet.get_range(range_name=\"A2:C2\").get_cell_range()\nslope = float(Calc.call_fun(\"SLOPE\", y_rng, x_rng))\nprint(f\"SLOPE of the line: {slope}\")\n```\n\n----------------------------------------\n\nTITLE: Reading and Formatting Text File Content\nDESCRIPTION: Processes a text file and applies different paragraph styles based on content patterns. Handles titles, authors, and regular paragraphs with specific formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef read_text(fnm: Path, cursor: WriteTextCursor) -> None:\n    sb: List[str] = []\n    with open(fnm, \"r\") as file:\n        i = 0\n        for ln in file:\n            line = ln.rstrip()  # remove new line \\n\n            if len(line) == 0:\n                if len(sb) > 0:\n                    cursor.append_para(\" \".join(sb))\n                sb.clear()\n            elif line.startswith(\"Title: \"):\n                cursor.append_para(line[7:], styles=[StylePara(StyleParaKind.TITLE)])\n            elif line.startswith(\"Author: \"):\n                cursor.append_para(line[8:], styles=[StylePara(StyleParaKind.SUBTITLE)])\n            elif line.startswith(\"Part \"):\n                cursor.append_para(line, styles=[StylePara(StyleParaKind.HEADING_1)])\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Message Box in Python\nDESCRIPTION: This code snippet demonstrates how to import the MsgBox class and utilize it to display a confirmation dialog. It handles user input by checking the result of the dialog and prints corresponding messages based on the user's choice. Dependencies include the ooodev.dialog.msgbox module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/msgbox.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.dialog.msgbox import MsgBox, MessageBoxType, MessageBoxButtonsEnum, MessageBoxResultsEnum\n\nresult = MsgBox.msgbox(\n    \"Are you sure?\",\n    boxtype=MessageBoxType.QUERYBOX,\n    buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO\n    )\n\nif result == MessageBoxResultsEnum.Results.YES:\n    print(\"All is OK\")\nelif result == MessageBoxResultsEnum.Results.NO:\n    print(\"No is the choice!\")\n```\n\n----------------------------------------\n\nTITLE: Printing Comprehensive Function Information\nDESCRIPTION: Wrapper method that combines function finding and argument printing to provide a complete overview of a LibreOffice Calc function's properties and arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef print_function_info(cls, func_name: str) -> None:\n    prop_vals = cls.find_function(func_name)\n    if prop_vals is None:\n        return\n    Props.show_props(func_name, prop_vals)\n    cls.print_fun_arguments(prop_vals)\n    print()\n```\n\n----------------------------------------\n\nTITLE: Set and Apply Style While Setting Cell Value in Calc\nDESCRIPTION: This snippet shows how to apply a style to a cell in LibreOffice Calc when setting its value using Python. It utilizes the Calc.get_cell_obj method to identify the targeted cell and applies the CellStyle while setting the cell's value with Calc.set_val. This example requires accessing the Calc and CellStyle classes from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/static/cell.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncell_obj = Calc.get_cell_obj(\"A1\")\n\nstyle = CellStyle(name=StyleCellKind.ACCENT_1)\nCalc.set_val(value=\"Hello\", sheet=sheet, cell_obj=cell_obj, styles=[style])\n```\n\n----------------------------------------\n\nTITLE: Calc.get_ss_doc Method\nDESCRIPTION: Converts an XComponent document to an XSpreadsheetDocument, verifying that the document is indeed a spreadsheet. It raises an exception if the document is not a spreadsheet and closes it if not in macro mode.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n        @staticmethod\n        def get_ss_doc(doc: XComponent) -> XSpreadsheetDocument:\n            if not Info.is_doc_type(doc_type=mLo.Lo.Service.CALC, obj=doc):\n                if not Lo.is_macro_mode:\n                    Lo.close_doc(doc=doc)\n                raise Exception(\"Not a spreadsheet doc\")\n\n            ss_doc = Lo.qi(XSpreadsheetDocument, doc)\n            if ss_doc is None:\n                if not Lo.is_macro_mode:\n                    Lo.close_doc(doc=doc)\n                raise MissingInterfaceError(XSpreadsheetDocument)\n            return ss_doc\n```\n\n----------------------------------------\n\nTITLE: Adding a Text Frame with Parameters in Python\nDESCRIPTION: This code defines the method to add a text frame, specifying parameters for cursor, text, positioning, dimensions, page number, colors, and styles to configure the text frame effectively.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in Write Class\n@classmethod\ndef add_text_frame(\n    cls,\n    *,\n    cursor: XTextCursor,\n    text: str = \"\",\n    ypos: int | UnitT = 300,\n    width: int | UnitT = 5000,\n    height: int | UnitT = 5000,\n    page_num: int = 1,\n    border_color: Color | None = None,\n    background_color: Color | None = None,\n    styles: Iterable[StyleT] = None,\n) -> XTextFrame:\n\n    result = None\n    cargs = CancelEventArgs(Write.add_text_frame.__qualname__)\n    cargs.event_data = {\n        \"cursor\": cursor,\n        \"ypos\": ypos,\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Net Chart in LibreOffice Calc with Python\nDESCRIPTION: This code snippet demonstrates how to create a net chart in LibreOffice Calc using the Chart2 service. It retrieves data from a specified range in a spreadsheet, inserts a chart at a given cell location, sets the chart title, and customizes the x-axis orientation to increase clockwise.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"# Chart2View._net_chart() of chart_2_views.py\ndef _net_chart(\n    self, doc: XSpreadsheetDocument, sheet: XSpreadsheet\n) -> XChartDocument:\n    # uses the \\\"No of Calls per Day\\\" table\n    range_addr = Calc.get_address(sheet=sheet, range_name=\\\"A56:D63\\\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\\\"E55\\\",\n        width=16,\n        height=11,\n        diagram_name=ChartTypes.Net.TEMPLATE_LINE.NET_LINE,\n    )\n    Calc.goto_cell(cell_name=\\\"E55\\\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\\\"A55\\\")\n    )\n    Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n    Chart2.set_data_point_labels(\n        chart_doc=chart_doc, label_type=DataPointLabelTypeKind.NONE\n    )\n\n    # reverse x-axis so days increase clockwise around net\n    x_axis = Chart2.get_x_axis(chart_doc)\n    sd = x_axis.getScaleData()\n    sd.Orientation = AxisOrientation.REVERSE\n    x_axis.setScaleData(sd)\n    return chart_doc\"\n```\n\n----------------------------------------\n\nTITLE: Applying Styles Using Text Cursor\nDESCRIPTION: Shows two methods of applying paragraph styles using a text cursor: direct property setting and simplified Props.set_property approach.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\ncursor.gotoEnd(True) # select the entire document\n\nprops = Lo.qi(XPropertySet, cursor)\nprops.setProperty(\"ParaStyleName\", \"adParagraph\")\n```\n\n----------------------------------------\n\nTITLE: Generating Scatter Charts with Calc in Python\nDESCRIPTION: This Python function, part of the Chart2View class, initializes a scatter chart using data from a Calc spreadsheet. It sets up the chart document based on different chart kinds such as scatter, line, and pie, and returns the generated chart document. Prerequisites include a valid connection to LibreOffice and the necessary data, which should be prepared in the spreadsheet. It handles chart type decision logic and requires the document and data sheet references as inputs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Chart2View.main() ofchart_2_views.py\ndef main(self) -> None:\n    _ = Lo.load_office(connector=Lo.ConnectPipe(), opt=Lo.Options(verbose=True))\n\n    try:\n        doc = Calc.open_doc(fnm=self._data_fnm)\n        GUI.set_visible(is_visible=True, odoc=doc)\n        sheet = Calc.get_sheet(doc=doc)\n\n        chart_doc = None\n        if self._chart_kind == ChartKind.AREA:\n            chart_doc = self._area_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.BAR:\n            chart_doc = self._bar_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.BUBBLE_LABELED:\n            chart_doc = self._labeled_bubble_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.COLUMN:\n            chart_doc = self._col_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.COLUMN_LINE:\n            chart_doc = self._col_line_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.COLUMN_MULTI:\n            chart_doc = self._mult_col_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.DONUT:\n            chart_doc = self._donut_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.HAPPY_STOCK:\n            chart_doc = self._happy_stock_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.LINE:\n            chart_doc = self._line_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.LINES:\n            chart_doc = self._lines_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.NET:\n            chart_doc = self._net_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.PIE:\n            chart_doc = self._pie_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.PIE_3D:\n            chart_doc = self._pie_3d_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.SCATTER:\n            chart_doc = self._scatter_chart(doc=doc, sheet=sheet) # sections 1-3\n        elif self._chart_kind == ChartKind.SCATTER_LINE_ERROR:\n            chart_doc = self._scatter_line_error_chart(doc=doc, sheet=sheet) # section 5\n        elif self._chart_kind == ChartKind.SCATTER_LINE_LOG:\n            chart_doc = self._scatter_line_log_chart(doc=doc, sheet=sheet) # section 4\n        elif self._chart_kind == ChartKind.STOCK_PRICES:\n            chart_doc = self._stock_prices_chart(doc=doc, sheet=sheet)\n\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Initializing CalcDoc and Styling Chart\nDESCRIPTION: This code snippet demonstrates how to open a Calc document, access a chart, and style its border and area gradient. It then retrieves the chart title and applies font styling using the `style_font_general()` method, setting properties like bold, italic, underline, color, and shadow.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/font.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.PURPLE_DARK1,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.BLUE_DARK1,\n                StandardColor.PURPLE_LIGHT2,\n            ),\n        )\n\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_font_general(\n            b=True,\n            i=True,\n            u=True,\n            color=StandardColor.PURPLE_DARK2,\n            shadowed=True,\n        )\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Opening and Styling Calc Document in Python\nDESCRIPTION: This snippet demonstrates how to set up a Calc document with a chart and style its legend using colors and transparency using the ooodev library. Dependencies include the `uno` library and `ooodev` modules such as `CalcDoc` and `Lo`. The main function opens a document, adjusts zoom, and styles the chart legend’s border line and area gradient.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BRICK,\n            width=1,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.GREEN_DARK4,\n                StandardColor.TEAL_LIGHT2,\n            ),\n        )\n        legend = chart_doc.first_diagram.get_legend()\n        if legend is None:\n            raise ValueError(\"Legend is None\")\n        _ = legend.style_area_transparency_transparency(0)\n        _ = legend.style_area_color(color=StandardColor.GREEN_LIGHT2)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Updating an existing tab\nDESCRIPTION: This code snippet demonstrates how to update an existing tab in a Writer document. It retrieves a tab by its position, updates its alignment and fill character, and applies the changes to the cursor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/tabs.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n        cursor = Write.get_cursor(doc)\n        tb = Tabs(position=11.3, align=TabAlign.LEFT, fill_char=FillCharKind.UNDER_SCORE)\n        Write.append_para(cursor=cursor, text=\\\"Some Paragraph\\\", styles=[tb])\n\n        tb = Tabs(position=12.0, align=TabAlign.DECIMAL)\n        tb.apply(cursor)\"\n```\n\n----------------------------------------\n\nTITLE: Drawing Media on Slide - Python\nDESCRIPTION: Attaches a media shape to a slide, setting properties such as loop and media URL. Depends on a URL conversion method and logs the media loading. Takes the slide object and media details, returning an XShape object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n        @classmethod\n        def draw_media(\n            cls, slide: XDrawPage, fnm: PathOrStr, x: int, y: int, width: int, height: int\n        ) -> XShape:\n\n            shape = cls.add_shape(\n                slide=slide, shape_type=DrawingShapeKind.MEDIA_SHAPE, x=x, y=y, width=width, height=height\n            )\n\n            Lo.print(f'Loading media: \"{fnm}\"')\n            cls.set_shape_props(shape, Loop=True, MediaURL=mFileIO.FileIO.fnm_to_url(fnm))\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Document and Creating Paragraph Style\nDESCRIPTION: Creates a new Writer document and applies a custom paragraph style named 'adParagraph'. Shows error handling for style creation failure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndoc = WriteDoc(Write.create_doc(loader=loader))\n# ...\nif not create_para_style(doc, \"adParagraph\"):\n    raise RuntimeError(\"Could not create new paragraph style\")\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Monitoring Dialog Confirmation\nDESCRIPTION: Code that sets up automatic monitoring for confirmation dialogs during slide operations. This is particularly useful for handling confirmation dialogs in Windows environments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# in main() of append_slides.py\n# monitor for Confirmation dialog\nif DialogAuto:\n    DialogAuto.monitor_dialog('y')\n```\n\n----------------------------------------\n\nTITLE: Getting Diagram from Chart Document in Python\nDESCRIPTION: This snippet retrieves the first diagram from a chart document, demonstrating how to access the diagram component directly from the document within the insert_chart method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# part of Chart2.insert_chart()...\ndigram = chart_doc.getFirstDiagram() # XDiagram\n```\n\n----------------------------------------\n\nTITLE: Creating a Column Chart in Python with LibreOffice\nDESCRIPTION: _col_chart() generates a column chart using data from the specified spreadsheet. It defines the range of data to be used for the chart and configures various chart properties, including titles and dimensions. The function returns the chart document created.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Chart2View._col_chart() of chart_2_views.py\n\ndef _col_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n    # draw a column chart;\n    # uses \"Sneakers Sold this Month\" table\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"A2:B8\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"C3\",\n        width=15,\n        height=11,\n        diagram_name=ChartTypes.Column.TEMPLATE_STACKED.COLUMN,\n    )\n    Calc.goto_cell(cell_name=\"A1\", doc=doc)\n\n    Chart2.set_title(chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A1\"))\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A2\")\n    )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"B2\")\n    )\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n    return chart_doc\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Paragraph Borders with Default Merge Behavior\nDESCRIPTION: Example demonstrating how to apply a basic border around a paragraph. This shows the default merge behavior where the next paragraph has the same border properties because merge is the default behavior.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\ncursor = Write.get_cursor(doc)\nbdr = Borders(all=Side(line=BorderLineKind.DASH_DOT, color=CommonColor.BLUE_VIOLET))\nWrite.append_para(cursor=cursor, text=p_txt, styles=[bdr])\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Getting a Row of Data in Python using Calc\nDESCRIPTION: This method retrieves a specified row of data from a sheet by utilizing the previously defined method for extracting array data, assuming a row-major order organization. It supports validation for the row index to prevent out-of-range errors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\n    def get_row(cls, sheet: XSpreadsheet, range_name: str) -> List[Any]:\n        vals = cls.get_array(sheet=sheet, range_name=range_name)\n        return cls.extract_row(vals=vals, row_idx=0)\n\n    @staticmethod\n    def extract_row(vals: Table, row_idx: int) -> List[Any]:\n        row_len = len(vals)\n        if row_idx < 0 or row_idx > row_len - 1:\n            raise IndexError(\"Row index out of range\")\n\n        return vals[row_idx]\n```\n\n----------------------------------------\n\nTITLE: Setting Border Padding for Paragraph Style in Python\nDESCRIPTION: This code snippet shows how to set border padding for a paragraph style. It creates a Padding object with specific values for each side and applies it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/bordes.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npadding_style = Padding(left=5, right=5, top=3, bottom=3, style_name=StyleParaKind.STANDARD)\npadding_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Calc.get_controller Method\nDESCRIPTION: Retrieves the XController for a given XSpreadsheetDocument. This controller is necessary for manipulating the document's view, such as navigating to specific cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n        # in the Calc class\n        @staticmethod\n        def get_controller(doc: XSpreadsheetDocument) -> XController:\n            model = Lo.qi(XModel, doc, True)\n            return model.getCurrentController()\n```\n\n----------------------------------------\n\nTITLE: Setting Legend Transparency and Color in Python\nDESCRIPTION: This snippet shows how to set the transparency and background color of a chart legend in a LibreOffice document using `ooodev`. It requires methods for setting legend transparency and color. It expects a legend object with methods `style_area_transparency_transparency` and `style_area_color`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n# set the transparency of the legend to 0 and the color to green light2\n_ = legend.style_area_transparency_transparency(0)\n_ = legend.style_area_color(color=StandardColor.GREEN_LIGHT2)\n```\n\n----------------------------------------\n\nTITLE: Adding Bookmarks in LibreOffice Writer Documents\nDESCRIPTION: Adds a named bookmark at the current cursor position in a Writer document. Includes event handling and error checking for bookmark creation and naming.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef add_bookmark(cls, cursor: XTextCursor, name: str) -> None:\n    cargs = CancelEventArgs(Write.add_bookmark.__qualname__)\n    cargs.event_data = {\"cursor\": cursor, \"name\": name}\n    _Events().trigger(WriteNamedEvent.BOOKMARK_ADDING, cargs)\n    if cargs.cancel:\n        return False\n\n    name = cargs.event_data[\"name\"]\n\n    try:\n        bmk_content = Lo.create_instance_msf(XTextContent, \"com.sun.star.text.Bookmark\")\n        if bmk_content is None:\n            raise ValueError(\"Null Value\")\n    except Exception as e:\n        raise CreateInstanceMsfError(XTextContent, \"com.sun.star.text.Bookmark\") from e\n    try:\n        bmk_named = Lo.qi(XNamed, bmk_content, True)\n        bmk_named.setName(name)\n\n        cls._append_text_content(cursor, bmk_content)\n    except Exception as e:\n        raise Exception(\"Unable to add bookmark\") from e\n    _Events().trigger(WriteNamedEvent.BOOKMARK_ADDED, EventArgs.from_args(cargs))\n    return True\n```\n\n----------------------------------------\n\nTITLE: Drawing Text Shape in LibreOffice Draw (Python)\nDESCRIPTION: This snippet creates a text shape with specified properties such as position, size, and font size. It uses the Draw class methods to create and configure the text shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ntext1 = curr_slide.draw_text(\n    msg=\"Hello LibreOffice\",\n    x=120,\n    y=120,\n    width=60,\n    height=30,\n    font_size=24,\n)\ntext1.component.Name = \"text1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Bezier Shapes in LibreOffice Draw using Python-UNO\nDESCRIPTION: This method creates either an open or closed Bezier shape in a LibreOffice Draw document. It sets up the PolyPolygonBezierCoords structure with the provided points and flags, then assigns it to the shape's PolyPolygonBezier property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# in the Draw class (simplified)\n@classmethod\ndef draw_bezier(\n    cls,\n    slide: XDrawPage,\n    pts: Sequence[Point],\n    flags: Sequence[PolygonFlags],\n    is_open: bool\n) -> XShape:\n\n    if len(pts) != len(flags):\n        raise IndexError(\"pts and flags must be the same length\")\n\n    bezier_type = \"OpenBezierShape\" if is_open else \"ClosedBezierShape\"\n    bezier_poly = cls.add_shape(\n        slide=slide, shape_type=bezier_type, x=0, y=0, width=0, height=0\n    )\n    # create space for one bezier shape\n    coords = PolyPolygonBezierCoords()\n    coords.Coordinates = (pts,)\n    coords.Flags = (flags,)\n\n    Props.set(bezier_poly, PolyPolygonBezier=coords)\n    return bezier_poly\n```\n\n----------------------------------------\n\nTITLE: Setting Document Visibility in GUI - Python\nDESCRIPTION: This method defines how to set the visibility of a document in the LibreOffice GUI. It handles both cases when a document reference is provided or when it defaults to the current window, ensuring that the visibility state is properly toggled.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# in GUI class\n@classmethod\ndef set_visible(cls, is_visible: bool, odoc: object = None) -> None:\n    if odoc is None:\n        xwindow = cls.get_window()\n    else:\n        doc = Lo.qi(XComponent, odoc)\n        if doc is None:\n            return\n        xwindow = cls.get_frame(doc).getContainerWindow()\n\n    if xwindow is not None:\n        xwindow.setVisible(is_visible)\n        xwindow.setFocus()\n```\n\n----------------------------------------\n\nTITLE: Implementation of set_val Method Overloads in Calc Class\nDESCRIPTION: Shows the implementation of three overloaded versions of set_val method in the Calc class. These methods handle setting values by cell name, by column/row coordinates, or directly to an XCell object, with type-specific handling for numbers vs. strings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class (overload methods, simplified)\n@classmethod\ndef set_val(cls, value: object, sheet: XSpreadsheet, cell_name: str) -> None:\n    pos = cls.get_cell_position(cell_name)\n    cls.set_val(value=value, sheet=sheet, col=pos.X, row=pos.Y)\n\n@classmethod\ndef set_val(cls, value: object, sheet: XSpreadsheet, col: int, row: int) -> None:\n    cell = cls.get_cell(sheet=sheet, col=col, row=row)\n    cls.set_val(value=value, cell=cell)\n\n@classmethod\ndef set_val(cls, value: object, cell: XCell) -> None:\n    if isinstance(value, numbers.Number):\n        cell.setValue(float(value))\n    elif isinstance(value, str):\n        cell.setFormula(str(value))\n    else:\n        Lo.print(f\"Value is not a number or string: {value}\")\n```\n\n----------------------------------------\n\nTITLE: Getting Slides Count in Python\nDESCRIPTION: This code snippet defines two methods for getting the number of slides in a Draw or Impress document. `get_slides_count` calls `get_slides` to retrieve an `XDrawPages` object and then returns the count of slides. The `get_slides` method obtains the `XDrawPages` interface from the document and returns it.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter12.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# in the Draw class (simplified)\n@classmethod\ndef get_slides_count(cls, doc: XComponent) -> int:\n    slides = cls.get_slides(doc)\n    if slides is None:\n        return 0\n    return slides.getCount()\n\n@staticmethod\ndef get_slides(doc: XComponent) -> XDrawPages:\n    try:\n        supplier = Lo.qi(XDrawPagesSupplier, doc, True)\n        pages = supplier.getDrawPages()\n        if pages is None:\n            raise DrawPageMissingError(\"Draw page supplier returned no pages\")\n        return pages\n    except DrawPageMissingError:\n        raise\n    except Exception as e:\n        raise DrawPageError(\"Error getting slides\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Calc Footer Style\nDESCRIPTION: This snippet demonstrates how to apply a specific footer style to a Calc document. It initializes the footer style with various properties such as `on`, `shared_first`, `shared`, `height`, `spacing`, `margin_left`, `margin_right`, and `style_name` and then applies it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/footer.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfooter_style = Footer(\n    on=True,\n    shared_first=True,\n    shared=True,\n    height=10.0,\n    spacing=3.0,\n    margin_left=1.5,\n    margin_right=2.0,\n    style_name=CalcStylePageKind.DEFAULT,\n)\nfooter_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Loading LibreOffice with Cache Object in Python\nDESCRIPTION: This snippet demonstrates how to load a LibreOffice instance using a cache object with shared extensions disabled. It allows for automatic closure of the loader after use while setting a controlled environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.conn.cache import Cache\n\ndef main():\n    with Lo.Loader(\n        Lo.ConnectSocket(),\n        cache_obj=Cache(no_shared_ext=True),\n    ) as loader:\n        # do work and then loader will be closed automatically.\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Using Calc Function Example - Python\nDESCRIPTION: This snippet demonstrates how to utilize the `call_fun` method to call the 'ROUND' function from Calc, providing an example of rounding a number to the nearest integer and printing the result.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# in calc_functions.py\ndef main(self) -> None:\n    with Lo.Loader(Lo.ConnectPipe()) as loader:\n        doc = Calc.create_doc(loader)\n        sheet = Calc.get_sheet(doc=doc, index=0)\n        # round\n        print(\"ROUND result for 1.999 is: \", end=\"\")\n        print(Calc.call_fun(\"ROUND\", 1.999))\n        # more explained below.\n\n        Lo.close(closeable=doc, deliver_ownership=False)\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Cell Ranges\nDESCRIPTION: Method to apply custom styles to specific cell ranges in a spreadsheet. Includes applying header and data styles to different ranges and adding custom borders with specific colors and widths.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter22.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef _apply_styles(self, sheet: CalcSheet) -> None:\n    sheet.change_style(style_name=BuildTable.HEADER_STYLE_NAME, range_name=\"B1:N1\")\n\n    sheet.change_style(style_name=BuildTable.HEADER_STYLE_NAME, range_name=\"A2:A4\")\n    rng = sheet.get_range(range_name=\"B2:N4\")\n    rng.change_style(style_name=BuildTable.DATA_STYLE_NAME)\n\n    # create a border side, default width units are points\n    side = direct_borders.Side(width=2.85, color=CommonColor.DARK_BLUE)\n    # create a border setting bottom side\n    bdr = direct_borders.Borders(bottom=side)\n    # Apply border to range\n    sheet.set_style_range(range_name=\"A4:N4\", styles=[bdr])\n\n    # create a border with left and right\n    bdr = direct_borders.Borders(left=side, right=side)\n    # Apply border to range\n    rng = sheet.get_range(range_name=\"N1:N4\")\n    rng.set_style(styles=[bdr])\n```\n\n----------------------------------------\n\nTITLE: Directional Navigation with CellObj in Python\nDESCRIPTION: Shows how to navigate cells in different directions (right, left, up, down) using CellObj properties. Demonstrates chaining operations and handling out of range errors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/cell_obj.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.cell_obj import CellObj \n\nb4 = CellObj(\"B\", 4, 0)\nb4.right # gets cell to the right\nCellObj(col='C', row=4, sheet_idx=0)\n\nb4.left # get cell to the left\nCellObj(col='A', row=4, sheet_idx=0)\n\nb4.up # get cell above\nCellObj(col='B', row=3, sheet_idx=0)\n\nb4.down # get cell below\nCellObj(col='B', row=5, sheet_idx=0)\n\nb4.down.right\nCellObj(col='C', row=5, sheet_idx=0)\n\nb4.down.right.right\nCellObj(col='D', row=5, sheet_idx=0)\n\nb4.left.left # out of range\nIndexError\n```\n\n----------------------------------------\n\nTITLE: Drawing Text Shape Implementation in LibreOffice Draw (Python)\nDESCRIPTION: This function implements the drawing of a text shape. It adds the shape to the slide, sets the text content, and applies the specified font size.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# in the draw class (simplified)\n@classmethod\ndef draw_text(\n    cls,\n    slide: XDrawPage,\n    msg: str,\n    x: int | UnitT,\n    y: int | UnitT,\n    width: int | UnitT,\n    height: int | UnitT,\n    font_size: float | UnitT = 0,\n) -> XShape:\n\n    shape = cls.add_shape(\n        slide=slide,\n        shape_type=DrawingShapeKind.TEXT_SHAPE,\n        x=x,\n        y=y,\n        width=width,\n        height=height\n    )\n    cls.add_text(shape=shape, msg=msg, font_size=font_size)\n    return shape\n```\n\n----------------------------------------\n\nTITLE: Ordering Shapes in a Slide in Python\nDESCRIPTION: The overloaded `get_ordered_shapes` method gathers all shapes from a document's slides, sorting them according to their z-order. The method returns a list of shapes, ensuring their order matches the typical reading sequence. It requires a document object and returns a list of `XShape` objects.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# in Draw Class (overload method, simplified)\n@classmethod\ndef get_ordered_shapes(cls, doc: XComponent) -> List[XShape]:\n    # get all the shapes in all the pages of the doc, in z-order per slide\n    slides = cls.get_slides_list(doc)\n    if not slides:\n        return []\n    shapes: List[XShape] = []\n    for slide in slides:\n        shapes.extend(cls.get_ordered_shapes(slide))\n    return shapes\n```\n\n----------------------------------------\n\nTITLE: Applying Left-Side Green Border in Python\nDESCRIPTION: This example demonstrates how to apply a green border to the left side of a range using the `Side` class. The range is specified as `B2:F6`, and only the left border is styled.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\ncell_rng.style_borders(left=Side(color=CommonColor.GREEN))\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart Template in Python\nDESCRIPTION: This code snippet shows the 'set_template' method which creates a chart template inside the Chart2 class. It verifies that the diagram name is correct and creates an instance of the chart type template.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@staticmethod\ndef set_template(\n    chart_doc: XChartDocument, diagram: XDiagram, diagram_name: ChartTemplateBase | str\n) -> XChartTypeTemplate:\n\n    # ensure diagram_name is ChartTemplateBase | str\n    Info.is_type_enum_multi(\n        alt_type=\"str\", enum_type=ChartTemplateBase, enum_val=diagram_name, arg_name=\"diagram_name\"\n    )\n\n    try:\n        ct_man = chart_doc.getChartTypeManager()\n        msf = Lo.qi(XMultiServiceFactory, ct_man, True)\n        template_nm = f\"com.sun.star.chart2.template.{diagram_name}\"\n        ct_template = Lo.qi(XChartTypeTemplate, msf.createInstance(template_nm))\n```\n\n----------------------------------------\n\nTITLE: Using LoManager to Connect and Create Desktop Instance\nDESCRIPTION: This snippet demonstrates how to utilize the LoManager class from the ooodev library to connect to LibreOffice. It also highlights the context management feature which ensures that resources are cleaned up after use. The primary dependency for this snippet is the ooodev library, specifically the connect module. The snippet shows how to create a service manager and an instance of the LibreOffice desktop.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/conn/connect/lo_manager.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.conn.connect import LoManager\n\nwith LoManager() as mgr:\n    smgr = mgr.ctx.getServiceManager()\n    desktop = smgr.createInstanceWithContext(\"com.sun.star.frame.Desktop\", mgr.ctx)\n    # other processing\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Template and Handling Errors in Python\nDESCRIPTION: This code snippet demonstrates creating a chart template based on the diagram name. If the template creation fails, it falls back to creating a column chart. It then links the template to the chart diagram and handles potential exceptions by raising a custom ChartError.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n                if ct_template is None:\n                    Lo.print(\n                        f'Could not create chart template \"{diagram_name}\"; using a column chart instead'\n                    )\n                    ct_template = Lo.qi(\n                        XChartTypeTemplate, msf.createInstance(\"com.sun.star.chart2.template.Column\"), True\n                    )\n\n                ct_template.changeDiagram(diagram)\n                return ct_template\n            except Exception as e:\n                raise ChartError(\"Error setting chart template\") from e\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Pie Chart in LibreOffice Calc with Python\nDESCRIPTION: This function creates a 3D pie chart in a LibreOffice Calc spreadsheet using the Chart2 API. It sets up the chart with data from a specific range, positions it on the sheet, and configures the title, subtitle, and legend visibility.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Chart2View._pie_3d_chart() in chart_2_views.py\ndef _pie_3d_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n    # uses \"Top 5 States with the Most Elementary and Secondary Schools\"\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"E2:F8\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"B10\",\n        width=12,\n        height=11,\n        diagram_name=ChartTypes.Pie.TEMPLATE_3D.PIE_3D,\n    )\n    Calc.goto_cell(cell_name=\"A1\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E1\")\n    )\n    Chart2.set_subtitle(\n        chart_doc=chart_doc, subtitle=Calc.get_string(sheet=sheet, cell_name=\"F2\")\n    )\n    Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n\n    # ...\n    # more code explained in a moment\n```\n\n----------------------------------------\n\nTITLE: Finding Words Using XSearchable in Python\nDESCRIPTION: This function iterates over a sequence of words, using regular expressions to find and report their first occurrences in a document. It utilizes the document's view cursor for positioning and accessing page numbers.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef find_words(doc: WriteDoc, words: Sequence[str]) -> None:\n    # get the view cursor and link the page cursor to it\n    tvc = doc.get_view_cursor()\n    tvc.goto_start()\n    searchable = doc.qi(XSearchable, True)\n    search_desc = searchable.createSearchDescriptor()\n\n    for word in words:\n        print(f\"Searching for fist occurrence of '{word}'\")\n        search_desc.setSearchString(word)\n\n        search_props = Lo.qi(XPropertySet, search_desc, raise_err=True)\n        search_props.setPropertyValue(\"SearchRegularExpression\", True)\n\n        search = searchable.findFirst(search_desc)\n\n        if search is not None:\n            match_tr = Lo.qi(XTextRange, search)\n\n            tvc.goto_range(match_tr)\n            print(f\"  - found '{match_tr.getString()}'\")\n            print(f\"    - on page {tvc.get_page()}\")\n            # tvc.gotoStart(True)\n            tvc.go_right(len(match_tr.getString()), True)\n            print(f\"    - at char position: {len(tvc.get_string())}\")\n            Lo.delay(500)\n```\n\n----------------------------------------\n\nTITLE: Simplified LibreOffice Connection Logic in Python\nDESCRIPTION: Shows a simplified version of the Lo.load_office method, illustrating how connections to LibreOffice are established using different connector types (pipe or socket). It demonstrates error handling and initialization of key LibreOffice components.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# in Lo class (simplified)\n@classmethod\ndef load_office(\n    cls, connector: ConnectPipe | ConnectSocket | None = None, cache_obj: Cache | None = None\n) -> XComponentLoader:\n\n    Lo.print(\"Loading Office...\")\n    if connector is None:\n        try:\n            cls._lo_inst = LoDirectStart()\n            cls._lo_inst.connect()\n        except Exception as e:\n            Lo.print((\n                \"Office context could not be created.\"\n                \" A connector must be supplied if not running as a macro\"\n            ))\n            Lo.print(f\"    {e}\")\n            raise SystemExit(1)\n    elif isinstance(connector, ConnectPipe):\n        try:\n            cls._lo_inst = LoPipeStart(connector=connector, cache_obj=cache_obj)\n            cls._lo_inst.connect()\n        except Exception as e:\n            Lo.print(\"Office context could not be created\")\n            Lo.print(f\"    {e}\")\n            raise SystemExit(1)\n    elif isinstance(connector, ConnectSocket):\n        try:\n            cls._lo_inst = LoSocketStart(connector=connector, cache_obj=cache_obj)\n            cls._lo_inst.connect()\n        except Exception as e:\n            Lo.print(\"Office context could not be created\")\n            Lo.print(f\"    {e}\")\n            raise SystemExit(1)\n    else:\n        Lo.print(\"Invalid Connector type. Fatal Error.\")\n        raise SystemExit(1)\n\n    cls._xcc = cls._lo_inst.ctx\n    cls._mc_factory = cls._xcc.getServiceManager()\n    if cls._mc_factory is None:\n        Lo.print(\"Office Service Manager is unavailable\")\n        raise SystemExit(1)\n    cls._xdesktop = cls.create_instance_mcf(XDesktop, \"com.sun.star.frame.Desktop\")\n    if cls._xdesktop is None:\n        Lo.print(\"Could not create a desktop service\")\n        raise SystemExit(1)\n    loader = cls.qi(XComponentLoader, cls._xdesktop)\n    if loader is None:\n        Lo.print(\"Unable to access XComponentLoader\")\n        SystemExit(1)\n    return loader\n```\n\n----------------------------------------\n\nTITLE: Creating Cell Styles in Calc\nDESCRIPTION: Creates two custom cell styles (header and data) with specific formatting including background colors, font effects, and text alignment. The styles are applied to different cell ranges in a spreadsheet.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter22.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef _create_styles(self, doc: CalcDoc) -> None:\n    try:\n        # create a style using Calc\n        header_style = doc.create_cell_style(\n            style_name=BuildTable.HEADER_STYLE_NAME\n        )\n\n        # create formats to apply to header_style\n        header_bg_color_style = BgColor(\n            color=CommonColor.ROYAL_BLUE, style_name=BuildTable.HEADER_STYLE_NAME\n        )\n        effects_style = FontEffects(\n            color=CommonColor.WHITE, style_name=BuildTable.HEADER_STYLE_NAME\n        )\n        txt_align_style = TextAlign(\n            hori_align=HoriAlignKind.CENTER,\n            vert_align=VertAlignKind.MIDDLE,\n            style_name=BuildTable.HEADER_STYLE_NAME,\n        )\n        # Apply formatting to header_style\n        Styler.apply(\n            header_style, header_bg_color_style, effects_style, txt_align_style\n        )\n\n        # create style\n        data_style = doc.create_cell_style(style_name=BuildTable.DATA_STYLE_NAME)\n\n        # create formats to apply to data_style\n        footer_bg_color_style = BgColor(\n            color=CommonColor.LIGHT_BLUE, style_name=BuildTable.DATA_STYLE_NAME\n        )\n        bdr_style = modify_borders.Borders(\n            padding=modify_borders.Padding(left=UnitMM(5))\n        )\n\n        # Apply formatting to data_style\n        Styler.apply(data_style, footer_bg_color_style, bdr_style, txt_align_style)\n\n    except Exception as e:\n        print(e)\n```\n\n----------------------------------------\n\nTITLE: Setting Bitmap File Color for Shape in LibreOffice Draw (Python)\nDESCRIPTION: This function sets the bitmap file color for a given shape. It uses the XPropertySet interface to set the FillStyle and FillBitmapURL properties of the shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class (simplified)\n@staticmethod\ndef set_bitmap_file_color(shape: XShape, fnm: PathOrStr) -> None:\n\n    props = Lo.qi(XPropertySet, shape, True)\n    props.setPropertyValue(\"FillStyle\", FillStyle.BITMAP)\n    props.setPropertyValue(\"FillBitmapURL\", FileIO.fnm_to_url(fnm))\n```\n\n----------------------------------------\n\nTITLE: Cursor Movement Methods\nDESCRIPTION: Demonstrates cursor movement methods for navigating text with optional text selection\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncursor.goLeft(char_count, is_selected)\ncursor.goRight(char_count, is_selected)\ncursor.gotoRange(text_range, is_selected)\n```\n\n----------------------------------------\n\nTITLE: Printing Chart Types\nDESCRIPTION: Utility method to print information about chart types in a chart document. Shows whether chart uses single or multiple chart types.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef print_chart_types(cls, chart_doc: XChartDocument) -> None:\n    chart_types = cls.get_chart_types(chart_doc)\n    if len(chart_types) > 1:\n        print(f\"No. of chart types: {len(chart_types)}\")\n        for ct in chart_types:\n            print(f\"  {ct.getChartType()}\")\n    else:\n        print(f\"Chart Type: {chart_types[0].getChartType()}\")\n    print()\n```\n\n----------------------------------------\n\nTITLE: Styling Text to the Left of Cursor in Python\nDESCRIPTION: This snippet shows how to apply a style to a portion of text to the left of the current cursor position. It involves saving the current property value, moving the cursor left, setting the new property value, moving the cursor back, and restoring the original property value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef style_left(cursor: XTextCursor, pos: int, prop_name: str, prop_val: object) -> None:\n    old_val = Props.get_property(cursor, prop_name)\n\n    curr_pos = Selection.get_position(cursor)\n    cursor.goLeft(curr_pos - pos, True)\n    Props.set_property(prop_set=cursor, name=prop_name, value=prop_val)\n\n    cursor.goRight(curr_pos - pos, False)\n    Props.set_property(prop_set=cursor, name=prop_name, value=old_val)\n```\n\n----------------------------------------\n\nTITLE: Creating Paragraph Cursor in LibreOffice\nDESCRIPTION: Method to create a paragraph cursor from either a document or existing cursor object. Uses Lo.qi for interface querying and handles type conversion.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_paragraph_cursor(cls, cursor_obj: DocOrCursor) -> XParagraphCursor:\n    try:\n        if Lo.qi(XTextDocument, cursor_obj) is None:\n            cursor = cursor_obj\n        else:\n            cursor = cls.get_cursor(cursor_obj)\n        para_cursor = Lo.qi(XParagraphCursor, cursor, True)\n        return para_cursor\n    except Exception as e:\n        raise ParagraphCursorError(str(e)) from e\n```\n\n----------------------------------------\n\nTITLE: Applying Font to a Range in Python\nDESCRIPTION: This snippet demonstrates how to apply font styles to a range of cells in a Calc document using Python and the ooodev library. It requires initializing a document, setting cell range values, and applying font styles to this range. Dependencies include the uno and ooodev libraries. The main input is the cell range and font styles, with the output being a styled range visible in Calc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        rng = sheet.rng(\"A1:B1\")\n        sheet.set_array(values=[[\"Hello\", \"World\"]], range_obj=rng)\n\n        cell_rng = sheet.get_range(range_obj=rng)\n        cell_rng.style_font(\n            name=\"Lucida Calligraphy\",\n            size=20,\n            font_style=\"italic\",\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart and Applying Axis Line Formatting in Python\nDESCRIPTION: This snippet demonstrates how to open a Calc document, access a chart, apply background styling, and format the X-axis line. It uses the ooodev library's Calc, Chart2, and LineProperties classes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/line.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.axis.line import LineProperties as AxisLineProperties\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange, Offset\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(Path.cwd() / \"tmp\" / \"bon_voyage.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"Object 1\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK2, width=0.9)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=0,\n            offset=Offset(41, 50),\n            style=GradientStyle.RADIAL,\n            grad_color=ColorRange(StandardColor.TEAL, StandardColor.YELLOW_DARK1),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        axis_line_props = AxisLineProperties(color=StandardColor.TEAL, width=0.75)\n        Chart2.style_x_axis(chart_doc=chart_doc, styles=[axis_line_props])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Creating an Alternative Solver Instance in Python\nDESCRIPTION: Example of creating a CoinMP solver instance instead of the default LpsolveSolver. This demonstrates how to use different solver implementations while maintaining the same interface for configuration and execution.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nsolver = Lo.create_instance_mcf(\n    XSolver, \"com.sun.star.comp.Calc.CoinMPSolver\", raise_err=True\n)\n```\n\n----------------------------------------\n\nTITLE: Setup for Applying Page Styles in LibreOffice Writer with Python\nDESCRIPTION: This snippet sets up the necessary imports and defines a main function for applying page styles in LibreOffice Writer using the ooodev library. It includes creating a document, setting visibility, applying styles, and writing text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/page.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.writer.style import Page, WriterStylePageKind\nfrom ooodev.format.writer.modify.page.area import Color as PageAreaColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import StandardColor\n\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        pg_cursor = Write.get_page_cursor(doc)\n        style = Page(name=WriterStylePageKind.FIRST_PAGE)\n        style.apply(pg_cursor)\n\n        color_style = PageAreaColor(\n            color=StandardColor.GREEN_DARK2, style_name=WriterStylePageKind.FIRST_PAGE\n        )\n        color_style.apply(doc)\n\n        cursor = Write.get_cursor(doc)\n        Write.append_para(cursor=cursor, text=p_txt)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart and Applying Border and Gradient Styles\nDESCRIPTION: This snippet demonstrates how to set up a spreadsheet document, apply border styles, and gradient styles to a chart in Python using the ooodev library. It initializes necessary imports, creates a document, and styles the chart components.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/font.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BRICK,\n            width=1,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.GREEN_DARK4,\n                StandardColor.TEAL_LIGHT2,\n            ),\n        )\n        legend = chart_doc.first_diagram.get_legend()\n        if legend is None:\n            raise ValueError(\"Legend is None\")\n        _ = legend.style_font_general(b=True, color=StandardColor.PURPLE, size=12)\n\n        # f_style = legend.style_font_get()\n        # assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Resetting Paragraph Styles in OOo Writer\nDESCRIPTION: Shows resetting paragraph styles in an OOo Writer document by applying default styles using the 'Para' class from 'ooodev.format.writer.style'. It demonstrates obtaining the document cursor and applying styles to reset formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/indent_spacing.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.style import Para as StylePara\n# ... other code\n\n# get the XTextRange of the document\nxtext_range = doc.getText().getStart()\n# Created the spacing values apply them to the text range.\nln_spc = LineSpacing(mode=ModeKind.PROPORTIONAL, value=85)\nindent = Indent(before=8.0, after=8.0, first=8.0)\nStyler.apply(xtext_range, ln_spc, indent)\n\ncursor = Write.get_cursor(doc)\nWrite.append_para(cursor=cursor, text=p_txt)\n# reset the paragraph styles\nStylePara.default.apply(cursor)\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Creating Pivot Table Description in Python\nDESCRIPTION: Configures pivot table fields by setting source range, defining field orientations (column, row, data), and creating a new pivot table\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef _create_pivot_table(\n    self, sheet: CalcSheet, dp_sheet: CalcSheet\n) -> XDataPilotTable | None:\n    cell_range = sheet.find_used_range()\n    print(f\"The used area is: { cell_range.get_range_str()}\")\n    print()\n\n    dp_tables = sheet.get_pilot_tables()\n    dp_desc = dp_tables.createDataPilotDescriptor()\n    dp_desc.setSourceRange(cell_range.get_address())\n\n    fields = dp_desc.getHiddenFields()\n    field_names = Lo.get_container_names(con=fields)\n    print(f\"Field Names ({len(field_names)}):\")    \n\n    # Set column field\n    props = Lo.find_container_props(con=fields, nm=\"Category\")\n    Props.set(props, Orientation=DataPilotFieldOrientation.COLUMN)\n\n    # Set row field\n    props = Lo.find_container_props(con=fields, nm=\"Period\")\n    Props.set(props, Orientation=DataPilotFieldOrientation.ROW)\n\n    # Set data field, calculating the sum\n    props = Lo.find_container_props(con=fields, nm=\"Revenue\")\n    Props.set(props, Orientation=DataPilotFieldOrientation.DATA)\n    Props.set(props, Function=GeneralFunction.SUM)\n\n    # Place onto sheet\n    dest_addr = dp_sheet.get_cell_address(cell_name=\"A1\")\n    dp_tables.insertNewByName(\"PivotTableExample\", dest_addr, dp_desc)\n    dp_sheet.set_col_width(width=60, idx=0)\n\n    dp_tables2 = dp_sheet.get_pilot_tables()\n    return self._refresh_table(\n        dp_tables=dp_tables2, table_name=\"PivotTableExample\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing the Calc Document in Python\nDESCRIPTION: This snippet demonstrates setting up a LibreOffice Calc document through the Uno API with specified zoom settings and data series modifications. It requires the `ooodev` library to interact with the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.i18n.number_format_index import NumberFormatIndexEnum\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.GREEN_LIGHT3,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient_from_preset(\n            preset=PresetGradientKind.NEON_LIGHT,\n        )\n\n        chart_doc.first_diagram.wall.style_area_transparency_transparency(60)\n        ds = chart_doc.get_data_series()[0]\n\n        ds.style_text_attributes(show_number=True)\n        ds.style_numbers_numbers(\n            source_format=False,\n            num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2,\n        )\n\n        # f_style = ds.style_label_border_line_get()\n        # assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Replacing All Matches in Calc with Python\nDESCRIPTION: The `_replace_all()` method executes a search and replace operation in a cell range, allowing for string replacement while highlighting matches using previously defined methods. It makes use of `XReplaceable.replaceAll()` for replacing text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef _replace_all(self, cell_rng: CalcCellRange, srch_str: str, repl_str: str) -> None:\n    print(f'Replacing \"{srch_str}\" with \"{repl_str}\"')\n    Lo.delay(2000)  # wait a bit before search & replace\n    try:\n        repl = cell_rng.qi(XReplaceable, True)\n        rd = repl.createReplaceDescriptor()\n\n        rd.setSearchString(srch_str)\n        rd.setReplaceString(repl_str)\n        rd.setPropertyValue(\"SearchWords\", True)\n        # rd.setPropertyValue(\"SearchRegularExpression\", True)\n\n        count = repl.replaceAll(rd)\n        print(f\"Search text replaced {count} times\")\n        print()\n\n    except Exception as e:\n        print(e)\n```\n\n----------------------------------------\n\nTITLE: Reporting Solver Results in Python\nDESCRIPTION: This code defines the `solver_report` method, which extracts and prints solver results, including whether the solution was successful, the value of the objective function, and the values of the variables.  It takes an `XSolver` object as input and prints a formatted report to the console.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n\"# in Calc class (simplified)\n@classmethod\ndef solver_report(cls, solver: XSolver) -> None:\n    is_successful = solver.Success\n    cell_name = cls.get_cell_str(solver.Objective)\n    print(\"Solver result: \")\n    print(f\"  {cell_name} == {solver.ResultValue:.4f}\")\n    addrs = solver.Variables\n    solns = solver.Solution\n    print(\"Solver variables: \")\n    for i, num in enumerate(solns):\n        cell_name = cls.get_cell_str(addrs[i])\n        print(f\"  {cell_name} == {num:.4f}\")\n    print()\"\n```\n\n----------------------------------------\n\nTITLE: Creating Stock Prices Chart in LibreOffice Python\nDESCRIPTION: This method creates a stock prices chart in LibreOffice by adding a line representing pork bellies data points. It retrieves data labels and ranges from the sheet, adds the stock line to the chart document and includes a legend visibility option.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef _stock_prices_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n            # ...\n            Lo.print(\"Adding Pork Bellies line\")\n            sheet_name = Calc.get_sheet_name(sheet)\n            pork_label = f\"{sheet_name}.J141\"\n            pork_points = f\"{sheet_name}.J142:J146\"\n            Chart2.add_stock_line(\n                chart_doc=chart_doc, data_label=pork_label, data_range=pork_points\n            )\n\n            Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n            return chart_doc\n```\n\n----------------------------------------\n\nTITLE: Starting a Slide Show in Impress using Python\nDESCRIPTION: This snippet demonstrates how to start a slide show in Impress by creating a 'BasicShow' class that initializes with a file name and opens the document. It uses methods to make the document visible and starts the slideshow while suspending the script until the show ends.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter18.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# basic_show.py module.\nfrom __future__ import annotations\n\nimport uno\nfrom ooodev.draw import Draw, ImpressDoc\nfrom ooodev.utils.dispatch.draw_view_dispatch import DrawViewDispatch\nfrom ooodev.utils.file_io import FileIO\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.props import Props\nfrom ooodev.utils.type_var import PathOrStr\n\nclass BasicShow:\n    def __init__(self, fnm: PathOrStr) -> None:\n        _ = FileIO.is_exist_file(fnm=fnm, raise_err=True)\n        self._fnm = FileIO.get_absolute_path(fnm)\n\n    def main(self) -> None:\n        with Lo.Loader(Lo.ConnectPipe()) as loader:\n            doc = ImpressDoc(Lo.open_doc(fnm=self._fnm, loader=loader))\n            try:\n                # slideshow start() crashes if the doc is not visible\n                doc.set_visible()\n\n                show = doc.get_show()\n                Props.show_obj_props(\"Slide show\", show)\n\n                Lo.delay(500)\n                Lo.dispatch_cmd(DrawViewDispatch.PRESENTATION)\n                # show.start() starts slideshow but not necessarily in 100% full screen\n                # show.start()\n\n                sc = doc.get_show_controller()\n                Draw.wait_ended(sc)\n\n            finally:\n                doc.close_doc()\n```\n\n----------------------------------------\n\nTITLE: Implementation of get_cell_range Method in Calc Class\nDESCRIPTION: Implementation of the get_cell_range static method that wraps a call to XCellRange.getCellRangeByName(). It retrieves a cell range from a sheet using a range name and raises an exception if the range cannot be accessed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class (overload method, simplified)\n@staticmethod\ndef get_cell_range(sheet: XSpreadsheet, range_name: str) -> XCellRange:\n    cell_range = sheet.getCellRangeByName(range_name)\n    if cell_range is None:\n        raise Exception(f\"Could not access cell range: {range_name}\")\n    return cell_range\n```\n\n----------------------------------------\n\nTITLE: Applying Code Style to Text in Python\nDESCRIPTION: This snippet showcases how to apply a 'code' styling to text in a document. It sets a specific font for code, applies it to the cursor's component, appends code lines, and then resets the cursor formatting to the default paragraph style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ncursor.append_para(\"Here's some code:\")\n\ncode_font = Font(name=Info.get_font_mono_name(), size=10)\ncode_font.apply(cursor.component)\n\ncursor.append_line(\"public class Hello\")\ncursor.append_line(\"{\")\ncursor.append_line(\"  public static void main(String args[]\")\ncursor.append_line('  {  System.out.println(\"Hello World\");  }')\ncursor.append_para(\"}  // end of Hello class\")\n\n# reset the cursor formatting\nParaStyle.default.apply(cursor.component)\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Pivot Table in Python\nDESCRIPTION: This snippet refreshes a pivot table to correct display issues. It searches XDataPilotTables for the desired table and calls its 'refresh()' method to update display in case of errors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# in PivotTable1._create_pivot_table()\ndef _create_pivot_table(\n    self, sheet: CalcSheet, dp_sheet: CalcSheet\n) -> XDataPilotTable | None:\n    # ...\n    dp_tables2 = dp_sheet.get_pilot_tables()\n    return self._refresh_table(\n        dp_tables=dp_tables2, table_name=\"PivotTableExample\"\n    )\n\ndef _refresh_table(\n    self, dp_tables: XDataPilotTables, table_name: str\n) -> XDataPilotTable | None:\n    nms = dp_tables.getElementNames()\n    print(f\"No. of DP tables: {len(nms)}\")\n    for nm in nms:\n        print(f\"  {nm}\")\n\n    dp_table = Calc.get_pilot_table(dp_tables=dp_tables, name=table_name)\n    if dp_table is not None:\n        dp_table.refresh()\n    return dp_table\n```\n\n----------------------------------------\n\nTITLE: Getting Alignment from Existing Paragraph\nDESCRIPTION: Shows how to retrieve the alignment settings from an existing paragraph using a paragraph cursor. Useful for checking or copying existing alignment settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/alignment.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\nal = Alignment().align_right\nWrite.append_para(cursor=cursor, text=p_txt, styles=[al])\n\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\n\npara_align = Alignment.from_obj(para_cursor)\nassert para_align.prop_align == ParagraphAdjust.RIGHT\n```\n\n----------------------------------------\n\nTITLE: Changing Cell Style Implementation\nDESCRIPTION: Class method that implements the style change functionality for a cell range. Sets the CellStyle property of the specified range to the given style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter22.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef change_style(cls, sheet: XSpreadsheet, style_name: str, range_name: str) -> bool:\n    cell_range = cls.get_cell_range(sheet=sheet, range_name=range_name)\n    Props.set(cell_range, CellStyle=style_name)\n```\n\n----------------------------------------\n\nTITLE: Setting a Title Slide Layout\nDESCRIPTION: This code demonstrates how to set the layout of a slide to a title/subtitle layout and then set the text for the title and subtitle shapes. It uses the Props.set method to set the Layout property to PresentationLayoutKind.TITLE_SUB.  find_shape_by_type is used to locate the shape by name space kind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"# in Draw class (simplified)\n@classmethod\ndef title_slide(cls, slide: XDrawPage, title: str, sub_title: str = \"\") -> None:\n\n    Props.set(slide, Layout=PresentationLayoutKind.TITLE_SUB.value)\n\n    xs = cls.find_shape_by_type(slide=slide, shape_type=DrawingNameSpaceKind.TITLE_TEXT)\n    txt_field = Lo.qi(XText, xs, True)\n    txt_field.setString(title)\n\n    if sub_title:\n        xs = cls.find_shape_by_type(slide=slide, shape_type=DrawingNameSpaceKind.SUBTITLE_TEXT)\n        txt_field = Lo.qi(XText, xs, True)\n        txt_field.setString(sub_title)\n\"\n```\n\n----------------------------------------\n\nTITLE: Setting Enhanced Solver Properties in Python\nDESCRIPTION: This snippet initializes solver properties such as EnhancedSolverStatus and AssumeNonNegative before executing the solver. It uses the Calc API to configure the solver instance accurately.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nProps.set(solver, EnhancedSolverStatus=False, AssumeNonNegative=True)\n```\n\n----------------------------------------\n\nTITLE: Animating an Image with Python UNO\nDESCRIPTION: The `_animate_bike()` method animates a bicycle image by moving it to the right and rotating it counter-clockwise. This animation is achieved by updating the position and rotation of a `GraphicObjectShape` created by `draw_image()` within a LibreOffice Draw slide. The animation includes periodic timing control using `Lo.delay`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter14.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# from anim_bicycle.py\ndef _animate_bike(self, slide: DrawPage[DrawDoc]) -> None:\n    shape = slide.draw_image(fnm=self._fnm_bike, x=60, y=100, width=90, height=50)\n\n    pt = shape.get_position_mm()\n    angle = shape.get_rotation()\n    print(f\"Start Angle: {int(angle)}\")\n    for i in range(19):\n        shape.set_position(x=pt.X + (i * 5), y=pt.Y)  # move right\n        shape.set_rotation(angle=angle + (i * 5))  # rotates ccw\n        Lo.delay(200)\n\n    print(f\"Final Angle: {int(shape.get_rotation())}\")\n    Draw.print_matrix(shape.get_transformation())\n\n```\n\n----------------------------------------\n\nTITLE: Styling Chart X-Axis Line in Python\nDESCRIPTION: This code snippet demonstrates how to style the X-axis line of a chart in a Calc document using the `style_axis_line()` method. It sets the color of the line to `StandardColor.TEAL` and the width to `0.75`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/line.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n\n# ... other code\n_ = chart_doc.axis_x.style_axis_line(\n    color=StandardColor.TEAL, width=0.75\n)\"\n```\n\n----------------------------------------\n\nTITLE: Saving Chart as Image\nDESCRIPTION: Method to save a chart graphic from a spreadsheet as a PNG image file\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter33.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    ImagesLo.save_graphic(\n        pic=Chart2.get_chart_image(sheet),\n        fnm=Path(self._out_dir, \"chartImage.png\")\n    )\nexcept mEx.ImageError:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Formatting Chart Subtitle Font in Python\nDESCRIPTION: Code snippet showing how to apply font formatting to a chart subtitle, using the same approach as for the title but with the style_subtitle method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/font_only.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_subtitle(chart_doc=chart_doc, styles=[title_font])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell Series Object\nDESCRIPTION: Obtains a cell series from a spreadsheet range using LibreOffice's XCellSeries interface for data generation and manipulation\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncell_range = sheet.getCellRangeByName(range_name)\nseries = Lo.qi(XCellSeries, cell_range, True)\nreturn series\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Cell Protection Style in Calc using Python\nDESCRIPTION: This snippet demonstrates how to create a CellProtection object, set its properties, and apply it to a Calc document. It initializes the document, sets visibility, and defines how cell protection behaves. Dependencies include 'uno', 'ooodev', and related modules.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/cell_protection.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.cell.cell_protection import CellProtection, StyleCellKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        style = CellProtection(\n            hide_all=False,\n            hide_formula=True,\n            protected=True,\n            hide_print=True,\n            style_name=StyleCellKind.DEFAULT,\n        )\n        style.apply(doc)\n\n        style_obj = CellProtection.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\n        assert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting up Solver with Nonlinear Constraints in Python\nDESCRIPTION: This snippet demonstrates setting up a solver with nonlinear constraints in a Calc spreadsheet. It defines the variable cells, the objective function, and the nonlinear constraints (x^2 + y^2 >= 1 and x^2 + y^2 <= 2), then initializes the solver.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n\"# part of main() in solver2.py\ndoc = CalcDoc(Calc.create_doc(loader))\nsheet = doc.get_sheet(0)\n\n\n# specify the variable cells\nx_pos = sheet.get_cell_address(cell_name=\\\"B1\\\")  # X\ny_pos = sheet.get_cell_address(cell_name=\\\"B2\\\")  # Y\nvars = (x_pos, y_pos)\n\n# specify profit equation\nsheet.set_val(value=\\\"=B1+B2\\\", cell_name=\\\"B3\\\")\nobjective = sheet.get_cell_address(cell_name=\\\"B3\\\")\n\n# set up equation formula without inequality (only one needed)\n# x^2 + y^2\nsheet.set_val(value=\\\"=B1*B1 + B2*B2\\\", cell_name=\\\"B4\\\")\n\n# create three constraints (using the 3 variables)\n\nsc1 = sheet.make_constraint(num=1, op=\\\">=\\\", cell_name=\\\"B4\\\")\n#   x^2 + y^2 >= 1\nsc2 = sheet.make_constraint(num=2, op=\\\"<=\\\", cell_name=\\\"B4\\\")\n#   x^2 + y^2 <= 2\n\nconstraints = (sc1, sc2)\n\n# initialize the nonlinear solver (SCO)\nsolver = Lo.create_instance_mcf(\n    XSolver, \\\"com.sun.star.comp.Calc.NLPSolver.SCOSolverImpl\\\", raise_err=True\n)\nsolver.Document = doc.component\nsolver.Objective = objective\nsolver.Variables = vars\nsolver.Constraints = constraints\nsolver.Maximize = True\n\nProps.show_obj_props(\\\"Solver\\\", solver)\n# switch off nonlinear dialog about current progress\n# and restrict the search to the top-right quadrant of the graph\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Numbered List in Python for LibreOffice Writer\nDESCRIPTION: This snippet shows how to reset the numbering for a new list of numbered paragraphs, ensuring it starts from 1 regardless of previous numbering in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nlist_style = ListStyle(list_style=StyleListKind.NUM_123, num_start=-2)\n```\n\n----------------------------------------\n\nTITLE: Getting a Cell Value in Python using Calc\nDESCRIPTION: This method retrieves a value from a specified cell, supporting multiple ways to access by cell address or name. It handles empty cells, numerical values, text, and formulas, returning the appropriate data type while notifying if the cell type is unknown.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\n    def get_val(cls, sheet: XSpreadsheet, addr: CellAddress) -> object | None:\n        if addr is None:\n            return None\n        return cls.get_val(sheet=sheet, col=addr.Column, row=addr.Row)\n\n    @classmethod\n    def get_val(cls, sheet: XSpreadsheet, cell_name: str) -> object | None:\n        pos = cls.get_cell_position(cell_name)\n        return cls.get_val(sheet=sheet, col=pos.X, row=pos.Y)\n\n    @classmethod\n    def get_val(cls, sheet: XSpreadsheet, col: int, row: int) -> object | None:\n        xcell = cls.get_cell(sheet=sheet, col=col, row=row)\n        return cls.get_val(cell=xcell)\n\n    @classmethod\n    def get_val(cls, cell: XCell) -> object | None:\n        t = cell.getType()\n        if t == CellContentType.EMPTY:\n            return None\n        if t == CellContentType.VALUE:\n            return cls.convert_to_float(cell.getValue())\n        if t == CellContentType.TEXT or t == CellContentType.FORMULA:\n            return cell.getFormula()\n        Lo.print(\"Unknown cell type; returning None\")\n        return None\n```\n\n----------------------------------------\n\nTITLE: Getting a Slide by Index in Python\nDESCRIPTION: This code snippet defines two methods for retrieving a specific slide from a Draw or Impress document by its index. The first `get_slide` method takes a document and index as input, calls the second `get_slide` method with the slides object. The second `get_slide` method retrieves an `XDrawPage` object from the `XDrawPages` collection using the provided index.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter12.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# from draw class (simplified)\n@classmethod\ndef get_slide(cls, doc: XComponent, idx: int) -> XDrawPage:\n    # call: get_slide(cls, slides: XDrawPages, idx: int)\n    return cls.get_slide(cls.get_slides(doc), idx)\n\n@classmethod\ndef get_slide(cls, slides: XDrawPages, idx: int) -> XDrawPage:\n    try:\n        slide = Lo.qi(XDrawPage, slides.getByIndex(idx), True)\n        return slide\n    except IndexOutOfBoundsException:\n        raise IndexError(f\"Index out of bounds: {idx}\")\n    except Exception as e:\n        raise DrawError(f\"Could not get slide: {idx}\") from e\n```\n\n----------------------------------------\n\nTITLE: Main Method for Chart Generation in Python\nDESCRIPTION: The 'main' method orchestrates the loading of a spreadsheet document and the generation of various types of charts based on the chart kind specified. It utilizes the 'Calc' and 'GUI' modules to interact with the document, set visibility, and select the appropriate chart method from the Chart2View class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n        # Chart2View.main() of chart_2_views.py\n        def main(self) -> None:\n            _ = Lo.load_office(connector=Lo.ConnectPipe(), opt=Lo.Options(verbose=True))\n\n            try:\n                doc = Calc.open_doc(fnm=self._data_fnm)\n                GUI.set_visible(is_visible=True, odoc=doc)\n                sheet = Calc.get_sheet(doc=doc)\n\n                chart_doc = None\n                if self._chart_kind == ChartKind.AREA:\n                    chart_doc = self._area_chart(doc=doc, sheet=sheet) # section 3\n                elif self._chart_kind == ChartKind.BAR:\n                    chart_doc = self._bar_chart(doc=doc, sheet=sheet) # section 1\n                elif self._chart_kind == ChartKind.BUBBLE_LABELED:\n                    chart_doc = self._labeled_bubble_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.COLUMN:\n                    chart_doc = self._col_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.COLUMN_LINE:\n                    chart_doc = self._col_line_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.COLUMN_MULTI:\n                    chart_doc = self._mult_col_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.DONUT:\n                    chart_doc = self._donut_chart(doc=doc, sheet=sheet) # 2.3\n                elif self._chart_kind == ChartKind.HAPPY_STOCK:\n                    chart_doc = self._happy_stock_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.LINE:\n                    chart_doc = self._line_chart(doc=doc, sheet=sheet) # section 4\n                elif self._chart_kind == ChartKind.LINES:\n                    chart_doc = self._lines_chart(doc=doc, sheet=sheet) # section 4\n                elif self._chart_kind == ChartKind.NET:\n                    chart_doc = self._net_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.PIE:\n                    chart_doc = self._pie_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.PIE_3D:\n                    chart_doc = self._pie_3d_chart(doc=doc, sheet=sheet) # section 2.1\n                elif self._chart_kind == ChartKind.SCATTER:\n                    chart_doc = self._scatter_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.SCATTER_LINE_ERROR:\n                    chart_doc = self._scatter_line_error_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.SCATTER_LINE_LOG:\n                    chart_doc = self._scatter_line_log_chart(doc=doc, sheet=sheet)\n                elif self._chart_kind == ChartKind.STOCK_PRICES:\n                    chart_doc = self._stock_prices_chart(doc=doc, sheet=sheet)\n\n                # ...\n\n```\n\n----------------------------------------\n\nTITLE: Saving Graphics with Property Values\nDESCRIPTION: This method saves a graphic object using the graphic provider's storeGraphic() method. It sets up the required properties, including the URL and MIME type for the image format.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# in ImagesLo class\n@staticmethod\ndef save_graphic(pic: XGraphic, fnm: PathOrStr, im_format: str) -> None:\n    print(f\"Saving graphic in '{fnm}'\")\n\n    if pic is None:\n        print(\"Supplied image is null\")\n        return\n\n    gprovider = Lo.create_instance_mcf(XGraphicProvider, \"com.sun.star.graphic.GraphicProvider\")\n    if gprovider is None:\n        print(\"Graphic Provider could not be found\")\n        return\n\n    png_props = Props.make_props(URL=FileIO.fnm_to_url(fnm), MimeType=f\"image/{im_format}\")\n\n    try:\n        gprovider.storeGraphic(pic, png_props)\n    except Exception as e:\n        print(\"Unable to save graphic\")\n        print(f\"    {e}\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Dictionary Information with Office API in Python\nDESCRIPTION: This Write class method retrieves and prints details about the active Office dictionaries and their properties, such as number of entries, locale, and type. The method first lists standard dictionaries and then conversion dictionaries, iterating through each to gather and display relevant attributes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# in the Write class\n@classmethod\ndef dicts_info(cls) -> None:\n    dict_lst = Lo.create_instance_mcf(\n        XSearchableDictionaryList, \"com.sun.star.linguistic2.DictionaryList\"\n    )\n    if not dict_lst:\n        print(\"No list of dictionaries found\")\n        return\n    cls.print_dicts_info(dict_lst)\n\n    cd_list = mLo.Lo.create_instance_mcf(\n        XConversionDictionaryList, \"com.sun.star.linguistic2.ConversionDictionaryList\"\n    )\n    if cd_list is None:\n        print(\"No list of conversion dictionaries found\")\n        return\n    cls.print_con_dicts_info(cd_list)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Hyperlink to Writer Document\nDESCRIPTION: Shows how to create and add a hyperlink to a LibreOffice Writer document using the Hyperlink class. Demonstrates setting the hyperlink name and URL.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/hyperlink.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\nln_name = \"OooDev\"\nln_url = \"https://python-ooo-dev-tools.readthedocs.io/en/latest/\"\nhl = Hyperlink(name=ln_name, url=ln_url)\n\nWrite.append(cursor, \"OOO Development Tools\", (hl,))\nWrite.append_para(cursor, \" Docs\")\n# ... other code\n```\n\n----------------------------------------\n\nTITLE: Setting Scientific Number Format for a Range\nDESCRIPTION: This code snippet demonstrates how to apply a scientific number format to a range of cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/numbers.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_rng = sheet.get_range(range_obj=rng)\ncell_rng.style_numbers_scientific()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Properties in Calc with OooDev\nDESCRIPTION: Demonstrates setting and retrieving custom properties for sheets and cells in Calc. Shows adding individual properties and bulk setting properties using DotDict.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\ndoc = CalcDoc.create_doc(visible=True)\n\nsheet = doc.sheets[0]\nsheet.set_custom_property(\"MyProp\", \"MyValue\")\nassert sheet.get_custom_property(\"MyProp\") == \"MyValue\"\n\ncell = sheet[\"A1\"]\ncell.set_custom_property(\"MyProp\", \"MyValue\")\nassert cell.get_custom_property(\"MyProp\") == \"MyValue\"\n\ncell.set_custom_property(\"MyNum\", 22.3)\nassert cell.get_custom_property(\"MyNum\") == 22.3\n\n\n# alternatively use DotDict\nfrom ooodev.utils.helper.dot_dict import DotDict\nprops = DotDict()\nprops.MyProp = \"MyValue\"\nprops.MyProp2 = \"MyValue2\"\ncell.set_custom_properties(props)\n\n# get all custom properties\nprops = cell.get_custom_properties() # DotDict instance\nprint(props.MyProp)\nprint(props.MyProp2)\n```\n\n----------------------------------------\n\nTITLE: Setting up LibreOffice Writer and Applying Drop Caps in Python\nDESCRIPTION: This snippet demonstrates how to set up a LibreOffice Writer document, apply drop caps to a paragraph style, and verify the changes. It uses the ooodev library to interact with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/drop_caps.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.drop_caps import DropCaps, StyleParaKind, StyleCharKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_dc_style = DropCaps(\n            count=4, style=StyleCharKind.DROP_CAPS, spaces=5.0, style_name=StyleParaKind.STANDARD\n        )\n        para_dc_style.apply(doc)\n\n        style_obj = DropCaps.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Title - Python\nDESCRIPTION: This class method sets the title for a specified axis by obtaining its reference, creating a title, and applying font settings. It manages exceptions during this process.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@classmethod\n def set_axis_title(\n    cls, chart_doc: XChartDocument, title: str, axis_val: AxisKind, idx: int\n) -> XTitle:\n    try:\n        axis = cls.get_axis(chart_doc=chart_doc, axis_val=axis_val, idx=idx)\n        titled_axis = Lo.qi(XTitled, axis, True)\n        xtitle = cls.create_title(title)\n        titled_axis.setTitleObject(xtitle)\n        fname = Info.get_font_general_name()\n        cls.set_x_title_font(xtitle, fname, 12)\n        return xtitle\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(f'Error setting axis tile: \"{title}\" for chart') from e\n```\n\n----------------------------------------\n\nTITLE: Initializing DataProvider in Chart Document with Python\nDESCRIPTION: This code snippet demonstrates how to access a chart's data provider within an XChartDocument using Python. It initializes an XDataProvider interface, essential for managing data sequences in charts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndp = chart_doc.getDataProvider() # XDataProvider\n\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Colors Internally in Draw\nDESCRIPTION: This code snippet illustrates the internal implementation within the `Draw` class for setting gradient colors on a shape. It creates a `Gradient` object, configures its style, start and end colors, and angle, and sets other properties such as border, offsets, and intensity. Finally it uses the `set_gradient_properties` method to apply these gradient settings to the provided shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n        # from the Draw class (simplified)\n        # called by set_gradient_color() overload method\n        @classmethod\n        def _set_gradient_color_colors(\n            cls, shape: XShape, start_color: Color, end_color: Color, angle: Angle\n        ) -> Gradient:\n\n            grad = Gradient()\n            grad.Style = GradientStyle.LINEAR\n            grad.StartColor = start_color\n            grad.EndColor = end_color\n\n            grad.Angle = angle.Value * 10  # in 1/10 degree units\n            grad.Border = 0\n            grad.XOffset = 0\n            grad.YOffset = 0\n            grad.StartIntensity = 100\n            grad.EndIntensity = 100\n            grad.StepCount = 10\n\n            cls.set_gradient_properties(shape, grad)\n\n            return Props.get(shape, \"FillGradient\")\n```\n\n----------------------------------------\n\nTITLE: Getting Slide Size in Python\nDESCRIPTION: This code snippet defines a method `get_slide_size` that retrieves the size of a slide in a Draw or Impress document. It accesses the `Width` and `Height` properties of the slide's `XPropertySet` interface, converts the values from 1/100 mm to millimeters, and returns a `Size` object representing the dimensions of the slide.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter12.rst#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# from Draw class (simplified)\n@staticmethod\ndef get_slide_size(slide: XDrawPage) -> Size:\n    try:\n        props = Lo.qi(XPropertySet, slide)\n        if props is None:\n            raise PropertySetMissingError(\"No slide properties found\")\n        width = int(props.getPropertyValue(\"Width\"))\n        height = int(props.getPropertyValue(\"Height\"))\n        return Size(round(width / 100), round(height / 100))\n    except Exception as e:\n        raise SizeError(\"Could not get shape size\") from e\n```\n\n----------------------------------------\n\nTITLE: Creating the Data Sink for Error Bars in Python\nDESCRIPTION: This snippet initiates an ErrorBar service, sets its properties for displaying positive and negative error bars, and converts it into a data sink. It is critical for linking the error bar data sequences to the chart's data series. Dependencies include the XPropertySet and ErrorBar services.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2.set_y_error_bars(); see section 5.4 below\nerror_bars_ps = Lo.create_instance_mcf(\n    XPropertySet, \"com.sun.star.chart2.ErrorBar\", raise_err=True\n)\nProps.set(\n    error_bars_ps,\n    ShowPositiveError=True,\n    ShowNegativeError=True,\n    ErrorBarStyle=ErrorBarStyle.FROM_DATA\n)\n\n# convert into data sink\ndata_sink = Lo.qi(XDataSink, error_bars_ps, True)\n\n# ...\n\n```\n\n----------------------------------------\n\nTITLE: Finding All Matches in Calc with Python\nDESCRIPTION: The `find_all()` method utilizes `XSearchable.findAll()` to find all occurrences of a search string in a cell range, returning a list of `XCellRange` objects. It checks for null results and retrieves cell ranges based on the match.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef find_all(srch: XSearchable, sd: XSearchDescriptor) -> List[XCellRange] | None:\n    con = srch.findAll(sd)\n    if con is None:\n        Lo.print(\"Match result is null\")\n        return None\n    c_count = con.getCount()\n    if c_count == 0:\n        Lo.print(\"No matches found\")\n        return None\n\n    crs = []\n    for i in range(c_count):\n        try:\n            cr = Lo.qi(XCellRange, con.getByIndex(i))\n            if cr is None:\n                continue\n            crs.append(cr)\n        except Exception:\n            Lo.print(f\"Could not access match index {i}\")\n    if len(crs) == 0:\n        Lo.print(f\"Found {c_count} matches but unable to access any match\")\n        return None\n    return crs\n```\n\n----------------------------------------\n\nTITLE: Retrieve Sheet by Index or Name in Python\nDESCRIPTION: Access a specific sheet from a Calc document by either its index or name using the CalcSheets class. Indexing supports both integer (for position) and string (for name) identifiers.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_sheets.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\\n>>> doc.sheets[0]\\n<ooodev.calc.CalcSheet object at 0x7f8b1c0b4a90>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\\n>>> doc.sheets['Sheet1']\\n<ooodev.calc.CalcSheet object at 0x7f8b1c0b4a90>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\\n>>> doc.insert_sheet(name=\"Sheet2\", idx=1)\\n>>> doc.sheets[-1]\\n<ooodev.calc.CalcSheet object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Transparency to Chart Wall in Python\nDESCRIPTION: Code snippet that demonstrates how to create a gradient transparency effect for a chart wall. It uses the WallGradientTransparency class to create a transparency that transitions from 0% to 100% at a 30-degree angle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.wall.transparency import Gradient as WallGradientTransparency\nfrom ooodev.format.chart2.direct.wall.transparency import IntensityRange\nfrom ooodev.utils.data_type.angle import Angle\n# ... other code\n\nwall_grad_transparent = WallGradientTransparency(\n    chart_doc=chart_doc, angle=Angle(30), grad_intensity=IntensityRange(0, 100)\n)\nChart2.style_wall(chart_doc=chart_doc, styles=[wall_grad_transparent])\n```\n\n----------------------------------------\n\nTITLE: Using Spell Checker for Words in Python\nDESCRIPTION: In the 'Write' utility, 'spell_word' is a static method that checks the spelling of a word using 'XSpellChecker'. The method accepts a word, a spell checker instance, and an optional locale. It returns a boolean indicating if the word is spelled correctly, and suggests alternatives for incorrect words. Dependence is on 'XSpellChecker' for spelling checks.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in lingo example\n# use spell checker\nWrite.spell_word(\"horseback\", speller)\nWrite.spell_word(\"ceurse\", speller)\nWrite.spell_word(\"magisian\", speller)\nWrite.spell_word(\"ellucidate\", speller)\n```\n\n----------------------------------------\n\nTITLE: Initialize Draw Document and Create Shape with Text Spacing\nDESCRIPTION: Creates a LibreOffice Draw document, adds a rectangle shape with text, and applies custom text spacing. Demonstrates the full setup process including document creation and shape manipulation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text/spacing.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\n\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.text.text import Spacing as TextSpacing\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 50\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        cursor = rect.get_shape_text_cursor()\n        cursor.append_para(\"Hello World!\")\n\n        txt_spacing = TextSpacing(left=2.5, right=0.75, top=2.0, bottom=1.7)\n        txt_spacing.apply(rect.component)\n\n        f_style = TextSpacing.from_obj(rect.component)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Page Numbers in Footers in LibreOffice Writer with Python\nDESCRIPTION: The `set_page_numbers` method inserts page number and page count fields into the footer of a document using the `XTextDocument` interface. It requires setting properties to format text appropriately and makes use of helper functions to get page number and page count fields with specific properties. This method ensures that document footers display the correct page numbering.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# in Write Class\n@classmethod\ndef set_page_numbers(cls, text_doc: XTextDocument) -> None:\n    props = Info.get_style_props(doc=text_doc, family_style_name=\"PageStyles\", prop_set_nm=\"Standard\")\n    if props is None:\n        raise PropertiesError(\"Could not access the standard page style\")\n\n    try:\n        props.setPropertyValue(\"FooterIsOn\", True)\n        #   footer must be turned on in the document\n        footer_text = Lo.qi(XText, props.getPropertyValue(\"FooterText\"), True)\n        footer_cursor = footer_text.createTextCursor()\n\n        Props.set_property(\n            prop_set=footer_cursor, name=\"CharFontName\", value=Info.get_font_general_name()\n        )\n        Props.set_property(prop_set=footer_cursor, name=\"CharHeight\", value=12.0)\n        Props.set_property(prop_set=footer_cursor, name=\"ParaAdjust\", value=ParagraphAdjust.CENTER)\n\n        # add text fields to the footer\n        pg_number = cls.get_page_number()\n        pg_xcontent = Lo.qi(XTextContent, pg_number)\n        if pg_xcontent is None:\n            raise MissingInterfaceError(\n                XTextContent, f\"Missing interface for page number. {XTextContent.__pyunointerface__}\"\n            )\n        cls._append_text_content(cursor=footer_cursor, text_content=pg_xcontent)\n        cls._append_text(cursor=footer_cursor, text=\" of \")\n        pg_count = cls.get_page_count()\n        pg_count_xcontent = Lo.qi(XTextContent, pg_count)\n        if pg_count_xcontent is None:\n            raise MissingInterfaceError(\n                XTextContent, f\"Missing interface for page count. {XTextContent.__pyunointerface__}\"\n            )\n        cls._append_text_content(cursor=footer_cursor, text_content=pg_count_xcontent)\n    except Exception as e:\n        raise Exception(\"Unable to set page numbers\") from e\n\n@staticmethod\ndef get_page_number() -> XTextField:\n    num_field = Lo.create_instance_msf(XTextField, \"com.sun.star.text.TextField.PageNumber\")\n    Props.set_property(prop_set=num_field, name=\"NumberingType\", value=NumberingType.ARABIC)\n    Props.set_property(prop_set=num_field, name=\"SubType\", value=PageNumberType.CURRENT)\n    return num_field\n\n@staticmethod\ndef get_page_count() -> XTextField:\n    pc_field = Lo.create_instance_msf(XTextField, \"com.sun.star.text.TextField.PageCount\")\n    Props.set_property(prop_set=pc_field, name=\"NumberingType\", value=NumberingType.ARABIC)\n    return pc_field\n```\n\n----------------------------------------\n\nTITLE: Setting Page Background Image in Calc with Python\nDESCRIPTION: This snippet shows how to set a background image for a Calc page using a preset image. It uses the from_preset static method to create a PageStyleImg object with a coffee beans image pattern and applies it to the default page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/background.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# .. other code\npage_img_style = PageStyleImg.from_preset(\n    preset=PresetImageKind.COFFEE_BEANS, style_name=CalcStylePageKind.DEFAULT\n)\npage_img_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Effects from a Range in Calc\nDESCRIPTION: This snippet demonstrates how to retrieve font effects applied to a range in a Calc document using Python and the ooodev library. It extracts font attributes from the range, such as color, to validate the applied styles. This requires a range with pre-applied font effects.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_effects.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\n        f_effects = FontEffects.from_obj(cell)\n        assert f_effects.prop_color == CommonColor.RED\n```\n\n----------------------------------------\n\nTITLE: Styling Chart Borders with ooodev in Python\nDESCRIPTION: This code snippet demonstrates how to style the borders of a data series in a chart. It opens a Calc document, applies border styling to the chart using the ooodev library methods, and then closes the document. Dependencies include the ooodev library and a Calc spreadsheet file to apply the styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BLUE_LIGHT3,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient_from_preset(\n            preset=PresetGradientKind.TEAL_BLUE,\n        )\n\n        ds = chart_doc.get_data_series()[0]\n        ds.style_border_line(\n            color=StandardColor.MAGENTA_DARK1,\n            width=0.75,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Graphic Shape's URL Property - Python\nDESCRIPTION: This code sets the property 'GraphicURL' of a graphic shape to the bitmap value retrieved previously, enabling the graphic shape to utilize the image.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nProps.set_property(prop_set=gos, name=\"GraphicURL\", value=bitmap)\n```\n\n----------------------------------------\n\nTITLE: Creating a Draw Document in Python\nDESCRIPTION: This Python code snippet defines a static method `create_draw_doc` within the `Draw` class. It uses the `Lo.create_doc` function to create a new Draw document, specifying the document type as `Lo.DocTypeStr.DRAW`.  It takes an `XComponentLoader` instance as input.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# in the Draw class\\n@staticmethod\\ndef create_draw_doc(loader: XComponentLoader) -> XComponent:\\n    return Lo.create_doc(doc_type=Lo.DocTypeStr.DRAW, loader=loader)\"\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Style to Chart Legend in Python\nDESCRIPTION: Method to set chart legend hatch using preset hatch kind and transparency control. Requires setting transparency to 0 to make hatch visible.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_hatch import PresetHatchKind\n# ... other code\n\n_ = legend.style_area_transparency_transparency(0)\n_ = legend.style_area_hatch_from_preset(\n    preset=PresetHatchKind.YELLOW_45_DEGREES_CROSSED,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Background to Chart Data Series in Python\nDESCRIPTION: This snippet demonstrates how to apply a background pattern to a chart data series using the style_area_pattern_from_preset() method. It uses the PresetPatternKind enum to select a pattern preset.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.area import Pattern as SeriesPattern\nfrom ooodev.format.inner.preset.preset_pattern import PresetPatternKind\n# ... other code\n\nds = chart_doc.get_data_series()[0]\nds.style_area_pattern_from_preset(\n    preset=PresetPatternKind.ZIG_ZAG\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Numbered Lists with Different Styles\nDESCRIPTION: Demonstrates creating numbered lists using various list styles, including list numbering reset and different numbering formats. Shows how to apply list styles directly to the cursor and reset styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/outline_list.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith Lo.Loader(Lo.ConnectSocket()):\n    doc = Write.create_doc()\n    GUI.set_visible(True, doc)\n    Lo.delay(500)\n    GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n    cursor = Write.get_cursor(doc)\n\n    ol = ListStyle(StyleListKind.NUM_123)\n    # apply numbered list directly to cursor\n    ol.apply(cursor)\n    for i in range(1, 6):\n        Write.append_para(cursor=cursor, text=f\"Num Point {i}\")\n    # reset cursor for next paragraph\n    ol.default.apply(cursor)\n    Write.append_para(cursor=cursor, text=p_txt)\n    Lo.delay(1_000)\n    Lo.close_doc(doc)\nreturn 0\n```\n\n----------------------------------------\n\nTITLE: Applying Default Borders to Range using ooodev in Python\nDESCRIPTION: This snippet shows how to apply default borders to a range of cells. It uses the `default` property of the `Borders` class on a specified cell range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        rng_obj = Calc.get_range_obj(\"B2:F6\")\n        cr = Calc.get_cell_range(sheet, rng_obj)\n        Styler.apply(cr, Borders().default)\n```\n\n----------------------------------------\n\nTITLE: Setting Font Based on Cell Values in Calc using Python\nDESCRIPTION: This snippet demonstrates how to set font properties based on cell values in a Calc sheet. It generates random numbers, applies different font styles for positive and negative values, and formats a range of cells accordingly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport random\n# ... other code\n\nnum_rng = 5\ndata = [[random.randint(-100, 100) for _ in range(num_rng)] for _ in range(num_rng)]\n\ncell_obj = Calc.get_cell_obj(\"A1\")\nCalc.set_array(values=data, sheet=sheet, cell_obj=cell_obj)\nrng_obj = Calc.find_used_range_obj(sheet)\n\nft_pos = Font(color=CommonColor.DARK_GREEN, b=True)\nft_neg = ft_pos.fmt_color(CommonColor.DARK_RED).underline\n\nfor cell_objs in rng_obj.get_cells():\n    for co in cell_objs:\n        val = Calc.get_num(sheet=sheet, cell_obj=co)\n        cell = Calc.get_cell(sheet=sheet, cell_obj=co)\n        if val < 0:\n            Styler.apply(cell, ft_neg)\n        else:\n            Styler.apply(cell, ft_pos)\n```\n\n----------------------------------------\n\nTITLE: Setting Font Properties in LibreOffice Writer with Python\nDESCRIPTION: Creates a new Writer document and applies custom font formatting using the FontOnly class. Sets the font to Liberation Serif at 20pt size and writes 'Hello World!' with these properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.char.font import FontOnly\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.PAGE_WIDTH)\n        cursor = Write.get_cursor(doc)\n        font_style = FontOnly(name=\"Liberation Serif\", size=20)\n        Write.append_para(\n            cursor=cursor, text=\"Hello World!\", styles=[font_style]\n        )\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Style Names - Python\nDESCRIPTION: The `get_style_names()` class method retrieves all the style names from a specified style family in the document. It returns a sorted list of style names, handling exceptions that arise if the names cannot be accessed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_style_names(cls, doc: object, family_style_name: str) -> List[str]:\n    try:\n        style_container = cls.get_style_container(doc=doc, family_style_name=family_style_name)\n        names = style_container.getElementNames()\n        lst = list(names)\n        lst.sort()\n        return lst\n    except Exception as e:\n        raise Exception(\"Could not access style names\") from e\n```\n\n----------------------------------------\n\nTITLE: Loading LibreOffice with Default Profile Cache in Python\nDESCRIPTION: This snippet shows how to load LibreOffice with the user's default profile directory copied to a temporary directory, facilitating session changes without affecting the main profile.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.conn.cache import Cache\n\ndef main():\n    with Lo.Loader(\n        Lo.ConnectSocket(headless=True),\n        cache_obj=Cache(),\n    ) as loader:\n        # do work and then loader will be closed automatically.\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Animating Shapes with Python UNO\nDESCRIPTION: This code defines a method `_anim_shapes()` that animates a circle and line in a LibreOffice Draw slide. The circle moves across the slide while its radius decreases, and the line rotates counter-clockwise while its length changes. This method requires the `DrawPage` object to facilitate shape drawing and manipulation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter14.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# from draw_picture.py\ndef _anim_shapes(self, curr_slide: DrawPage[DrawDoc]) -> None:\n    xc = 40\n    yc = 150\n    radius = 40\n    circle = None\n    for _ in range(20):\n        # move right\n        if circle is not None:\n            curr_slide.remove(circle.component)\n        circle = curr_slide.draw_circle(x=xc, y=yc, radius=radius)\n\n        Lo.delay(200)\n        xc += 5\n        radius *= 0.95\n\n    x2 = 140\n    y2 = 110\n    line = None\n    for _ in range(25):\n        if line is not None:\n            curr_slide.remove(line.component)\n        line = curr_slide.draw_line(x1=40, y1=100, x2=x2, y2=y2)\n        x2 -= 4\n        y2 -= 4\n\n```\n\n----------------------------------------\n\nTITLE: Setting Size of Draw Shape - Python\nDESCRIPTION: This snippet sets the size of a drawable shape using the setSize method from the XShape interface, allowing for graphical representation within the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nxdraw_shape = Lo.qi(XShape, gos, True)\nxdraw_shape.setSize(im_size)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Text in Python for LibreOffice Writer\nDESCRIPTION: This code provides a lower-level implementation of setting header text in a Writer document, including turning on the header, setting font properties, and aligning the text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef set_header(text_doc: XTextDocument, text: str) -> None:\n    props = Info.get_style_props(\n        doc=text_doc, family_style_name=\"PageStyles\", prop_set_nm=\"Standard\"\n    )\n    if props is None:\n        raise PropertiesError(\"Could not access the standard page style container\")\n    try:\n        props.setPropertyValue(\"HeaderIsOn\", True)\n        # header must be turned on in the document\n        # props.setPropertyValue(\"TopMargin\", 2200)\n        header_text = Lo.qi(XText, props.getPropertyValue(\"HeaderText\"))\n        header_cursor = header_text.createTextCursor()\n        header_cursor.gotoEnd(False)\n\n        header_props = Lo.qi(XPropertySet, header_cursor, True)\n        header_props.setPropertyValue(\"CharFontName\", Info.get_font_general_name())\n        header_props.setPropertyValue(\"CharHeight\", 10)\n        header_props.setPropertyValue(\"ParaAdjust\", ParagraphAdjust.RIGHT)\n\n        header_text.setString(f\"{text}\\n\")\n    except Exception as e:\n        raise Exception(\"Unable to set header text\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Tabs to Cursor\nDESCRIPTION: This code snippet shows how to apply multiple tabs to a cursor in a Writer document. It initializes three `Tabs` objects with different positions, alignments, and fill characters, then applies each to the cursor sequentially.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/tabs.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n        cursor = Write.get_cursor(doc)\n        tb = Tabs(position=11.3, align=TabAlign.LEFT, fill_char=FillCharKind.UNDER_SCORE)\n        Write.append_para(cursor=cursor, text=\\\"Some Paragraph\\\", styles=[tb])\n\n        tb = Tabs(position=12.0, align=TabAlign.DECIMAL)\n        tb.apply(cursor)\n\n        tb = Tabs(position=6.5, align=TabAlign.CENTER, fill_char=\\\"*\\\")\n        tb.apply(cursor)\"\n```\n\n----------------------------------------\n\nTITLE: Building Impress Presentation from Template in Python\nDESCRIPTION: This code snippet demonstrates how to create a new Impress presentation document from a template using the LibreOffice API in Python. It initializes the LibreOffice environment, loads a template, creates a document from the template, reads points, sets the document to visible, and provides an option to close the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"# partial points_builder.py module\nclass PointsBuilder:\n    def __init__(self, points_fnm: PathOrStr) -> None:\n        _ = FileIO.is_exist_file(fnm=points_fnm, raise_err=True)\n        self._points_fnm = FileIO.get_absolute_path(points_fnm)\n\n    def main(self) -> None:\n        loader = Lo.load_office(Lo.ConnectPipe())\n\n        # create Impress page or Draw slide\n        try:\n            self._report_templates()\n            tmpl_name = \\\"Inspiration.otp\\\"  # \\\"Piano.otp\\\"\n            template_fnm = Path(Draw.get_slide_template_path(), tmpl_name)\n            _ = FileIO.is_exist_file(template_fnm, True)\n            doc = ImpressDoc(\n                Lo.create_doc_from_template(template_path=template_fnm, loader=loader)\n            )\n\n            self._read_points(doc)\n\n            print(f\\\"Total no. of slides: {doc.get_slides_count()}\\\")\n\n            doc.set_visible()\n            Lo.delay(2000)\n\n            msg_result = MsgBox.msgbox(\n                \\\"Do you wish to close document?\\\",\n                \\\"All done\\\",\n                boxtype=MessageBoxType.QUERYBOX,\n                buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n            )\n            if msg_result == MessageBoxResultsEnum.YES:\n                doc.close_doc()\n                Lo.close_office()\n            else:\n                print(\\\"Keeping document open\\\")\n        except Exception:\n            Lo.close_office()\n            raise\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Axis Title - Python\nDESCRIPTION: This method rotates the y-axis title to a specified angle, adjusting the text orientation for better visibility. It manages exceptions for accessing title properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@classmethod\ndef rotate_y_axis_title(cls, chart_doc: XChartDocument, angle: Angle) -> None:\n    cls.rotate_axis_title(chart_doc=chart_doc, axis_val=AxisKind.Y, idx=0, angle=angle)\n\n@classmethod\ndef rotate_axis_title(\n    cls, chart_doc: XChartDocument, axis_val: AxisKind, idx: int, angle: Angle\n) -> None:\n    try:\n        xtitle = cls.get_axis_title(chart_doc=chart_doc, axis_val=axis_val, idx=idx)\n        Props.set(xtitle, TextRotation=angle.Value)\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error while trying to rotate axis title\") from e\n```\n\n----------------------------------------\n\nTITLE: Inserting formula using TextEmbeddedObject in LibreOffice with Python\nDESCRIPTION: This code snippet demonstrates how to insert a formula into a LibreOffice document by creating a TextEmbeddedObject, setting its properties (CLSID and AnchorType), and assigning the formula string to the 'Formula' property. It relies on the Lo and XPropertySet interfaces to interact with the LibreOffice API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nembed_obj_model = embed_obj_supplier.getEmbeddedObject()\n\nformula_props = Lo.qi(XPropertySet, embed_obj_model, True)\nformula_props.setPropertyValue(\"Formula\", formula)\nLo.print(f'Inserted formula \"{formula}\"')\n\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Zoom Values in ooodev Calc with Python\nDESCRIPTION: Illustrates a method in the Calc class for setting a specific zoom value. This requires access to Calc and GUI modules and an XSpreadsheetDocument object. Key parameters include the document and an integer value for zoom.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@classmethod\ndef zoom_value(cls, doc: XSpreadsheetDocument, value: int) -> None:\n    ctrl = cls.get_controller(doc)\n    if ctrl is None:\n        return\n    Props.set(ctrl, ZoomType=GUI.ZoomEnum.BY_VALUE.value, ZoomValue=value)\n```\n\n----------------------------------------\n\nTITLE: Adding a Table Chart to a Spreadsheet in Python\nDESCRIPTION: This code snippet shows how to add a new table chart to a spreadsheet using the `Chart2.add_table_chart` method. It takes the spreadsheet, chart name, cell range for the data, cell position, width, and height as input. It creates a chart within the specified range and position.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n        # in Chart2 class\n        @staticmethod\n        def add_table_chart(\n            sheet: XSpreadsheet, chart_name: str, cells_range: CellRangeAddress,\n            cell_name: str, width: int, height: int\n        ) -> None:\n            try:\n                charts_supp = Lo.qi(XTableChartsSupplier, sheet, True)\n                tbl_charts = charts_supp.getCharts()\n\n                pos = Calc.get_cell_pos(sheet, cell_name)\n                rect = Rectangle(X=pos.X, Y=pos.Y, Width=width * 1_000, Height=height * 1_000)\n                addrs = (cells_range,)\n\n                tbl_charts.addNewByName(chart_name, rect, addrs, True, True)\n            except Exception as e:\n                raise ChartError(\"Error adding table chart\") from e\n```\n\n----------------------------------------\n\nTITLE: Getting Page Width and Number\nDESCRIPTION: This code snippet demonstrates how to obtain the width of a draw page and its page number using the properties of the GenericDrawPage service. It utilizes the Props class to fetch the width property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter11.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.props import Props\n\nwidth =  int(Props.get(page, \"Width\"))\n```\n\n----------------------------------------\n\nTITLE: Applying Alternative List Styles\nDESCRIPTION: Demonstrates using different predefined list styles like List 3 and List 5, showing how to apply custom list numbering styles to paragraphs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/outline_list.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\n# set num_start -2 to force number restart.\nol = ListStyle(list_style=StyleListKind.LIST_03, num_start=-2)\n# apply numbered list directly to cursor\nol.apply(cursor)\nfor i in range(1, 6):\n    Write.append_para(cursor=cursor, text=f\"Num Point {i}\")\n# reset cursor for next paragraph\nol.default.apply(cursor)\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Getting Image from a Paragraph\nDESCRIPTION: This snippet retrieves the background image set for a paragraph in the Writer document. It involves navigating to the relevant paragraph and using the Img class to extract the image data.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/img.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\\n\\npara_cursor = Write.get_paragraph_cursor(cursor)\\npara_cursor.gotoPreviousParagraph(False)\\npara_cursor.gotoEndOfParagraph(True)\\n\\ntext_para = cast(\"TextRangeContentProperties\", para_cursor)\\n\\npara_img = Img.from_obj(text_para.TextParagraph)\\nassert para_img is not None\\n\\npara_cursor.gotoEnd(False)\n```\n\n----------------------------------------\n\nTITLE: Generating Date Series with Month Increment\nDESCRIPTION: Uses DATE mode to incrementally generate dates by adding one month to the seed date\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsheet.get_cell(cell_name=\"A4\").set_date(day=20, month=11, year=2015)\n\nseries = sheet.get_range(range_name=\"A4:E4\").get_cell_series()\nseries.fillSeries(\n    FillDirection.TO_RIGHT,\n    FillMode.DATE,\n    FillDateMode.FILL_DATE_MONTH,\n    1,\n    Calc.MAX_VALUE\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Number Formatting to Chart2 Data Series in Python\nDESCRIPTION: Shows how to display values as numbers with specific formatting (currency with thousands separator and 2 decimal places) in chart data labels. Uses both TextAttribs and NumberFormat classes to control appearance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import TextAttribs\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import NumberFormat\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import NumberFormatIndexEnum\n# ... other code\n\ntext_attribs = TextAttribs(show_number=True)\nformat_number = NumberFormat(\n    chart_doc=chart_doc,\n    source_format=False,\n    num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2,\n)\nChart2.style_data_series(chart_doc=chart_doc, styles=[text_attribs, format_number])\n```\n\n----------------------------------------\n\nTITLE: Testing ooo-dev-tools in LibreOffice Writer\nDESCRIPTION: Python script using APSO console to test the installed ooo-dev-tools package by writing 'Hello World!' in a Writer document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_lo_install_pip.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.write import WriteDoc\ndef say_hello():\n    doc = WriteDoc.from_current_doc()\n    cursor = doc.get_cursor()\n    cursor.append_para(text=\"Hello World!\")\n\nsay_hello()\n```\n\n----------------------------------------\n\nTITLE: Combining Shapes in LibreOffice Draw using Python-UNO\nDESCRIPTION: This method combines multiple shapes in a LibreOffice Draw document using different operations like intersect, subtract, combine, or merge. It selects the shapes, applies the operation, and returns the resulting combined shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class (simplified)\n@staticmethod\ndef combine_shape(doc: XComponent, shapes: XShapes, combine_op: ShapeCombKind) -> XShape:\n\n    sel_supp = Lo.qi(XSelectionSupplier, GUI.get_current_controller(doc), True)\n    sel_supp.select(shapes)\n\n    if combine_op == ShapeCombKind.INTERSECT:\n        Lo.dispatch_cmd(\"Intersect\")\n    elif combine_op == ShapeCombKind.SUBTRACT:\n        Lo.dispatch_cmd(\"Substract\")  # misspelt!\n    elif combine_op == ShapeCombKind.COMBINE:\n        Lo.dispatch_cmd(\"Combine\")\n    else:\n        Lo.dispatch_cmd(\"Merge\")\n\n    Lo.delay(500)  # give time for dispatches to arrive and be processed\n\n    # extract the new single shape from the modified selection\n    xs = Lo.qi(XShapes, sel_supp.getSelection(), True)\n    combined_shape = Lo.qi(XShape, xs.getByIndex(0), True)\n    return combined_shape\n```\n\n----------------------------------------\n\nTITLE: Accessing XSearchable Interface for Cell Range\nDESCRIPTION: Demonstrates how to obtain the XSearchable interface from a cell range using QueryInterface for performing search operations\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsrch = cell_rng.qi(XSearchable, True)\n```\n\n----------------------------------------\n\nTITLE: Finding Shapes by Type in Draw Class Python\nDESCRIPTION: This method `find_shape_by_type` searches for a shape within a slide based on its type string. It returns the shape if found or raises an exception if no matching shape is found. This is useful for dynamically handling shapes without relying on index positions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef find_shape_by_type(cls, slide: XDrawPage, shape_type: DrawingNameSpaceKind | str) -> XShape:\n\n    shapes = cls.get_shapes(slide)\n    if not shapes:\n        raise ShapeMissingError(\"No shapes were found in the draw page\")\n\n    st = str(shape_type)\n\n    for shape in shapes:\n        if st == shape.getShapeType():\n            return shape\n    raise ShapeMissingError(f'No shape found for \"{st}\"')\n```\n\n----------------------------------------\n\nTITLE: Iterative Search Method\nDESCRIPTION: Implements an iterative search method using XSearchable.findFirst() and XSearchable.findNext() to search through a cell range\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef _search_iter(self, cell_rng: CalcCellRange, srch_str: str) -> None:\n    print(f'Searching (iterating) for all occurrences of \"{srch_str}\"')\n    try:\n        srch = cell_rng.qi(XSearchable, True)\n        sd = srch.createSearchDescriptor()\n\n        sd.setSearchString(srch_str)\n        # only complete words will be found\n        sd.setPropertyValue(\"SearchWords\", True)\n        # sd.setPropertyValue(\"SearchRegularExpression\", True)\n\n        o_first = srch.findFirst(sd)\n```\n\n----------------------------------------\n\nTITLE: Template Document Creation Method\nDESCRIPTION: Class method for creating a document from a template, handling file URL conversion and setting document properties\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef create_doc_from_template(cls, template_path: PathOrStr, loader: XComponentLoader) -> XComponent:\n    if not FileIO.is_openable(template_path):\n        raise Exception(f\"Template file can not be opened: '{template_path}'\")\n    Lo.print(f\"Opening template: '{template_path}'\")\n    template_url = FileIO.fnm_to_url(fnm=template_path)\n\n    props = Props.make_props(Hidden=True, AsTemplate=True)\n    cls._doc = loader.loadComponentFromURL(template_url, \"_blank\", 0, props)\n    cls._ms_factory = cls.qi(XMultiServiceFactory, cls._doc, raise_err=True)\n    return cls._doc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pivot Table from DataPilotTables\nDESCRIPTION: Utility method to safely retrieve a pivot table by name using LibreOffice Calc API, with error handling\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_pilot_table(dp_tables: XDataPilotTables, name: str) -> XDataPilotTable:\n    try:\n        otable = dp_tables.getByName(name)\n        if otable is None:\n            raise Exception(f\"Did not find data pilot table '{name}'\")\n        result = Lo.qi(XDataPilotTable, otable, raise_err=True)\n        return result\n    except Exception as e:\n        raise Exception(f\"Pilot table lookup failed for '{name}'\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Font to a Single Cell in Python\nDESCRIPTION: This snippet initializes a Calc document, sets a font style on a single cell, and retrieves it. It uses the ooodev library to open a document, modify a cell's font attributes, and then close the document. The main dependencies are the uno and ooodev packages. Inputs include cell coordinates and font details, while the output is a visibly styled cell in Calc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        cell = sheet[\"A1\"]\n        cell.value = \"Hello\"\n        cell.style_font(\n            name=\"Lucida Calligraphy\",\n            size=20,\n            font_style=\"italic\",\n        )\n\n        f_style = cell.style_font_get()\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Loading Macros for Execution in LibreOffice - Python\nDESCRIPTION: This code snippet demonstrates the use of the MacroLoader context manager for executing macros in LibreOffice. It includes methods for displaying messages and writing text to an active document, ensuring the context is set correctly when macros are executed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.writer.direct.char.font import Font\nfrom ooodev.dialog.msgbox import MsgBox, MessageBoxButtonsEnum, MessageBoxType\nfrom ooodev.format.writer.direct.para.alignment import Alignment\nfrom ooodev.macro import MacroLoader\n\ndef show_hello(*args) -> None:\n    with MacroLoader():\n        _ = MsgBox.msgbox(\n            \"Hello World!\",\n            \"HI\",\n            boxtype=MessageBoxType.INFOBOX,\n            buttons=MessageBoxButtonsEnum.BUTTONS_OK\n        )\n\ndef write_hello_msg(msg: str) -> None:\n    try:\n        cursor = Write.get_cursor(Write.active_doc)\n        cursor.gotoEnd(False)\n        al = Alignment().align_center\n        ft = Font(size=36, u=True, b=True, color=StandardColor.GREEN_DARK2)\n        Write.append_para(cursor=cursor, text=msg, styles=[ft, al])\n    except Exception as e:\n        _ = MsgBox.msgbox(f\"This method requires a Writer document.\\n{e}\")\n\ndef write_hello(*args) -> None:\n    with MacroLoader():\n        write_hello_msg(\"Hello World!\")\n\ng_exportedScripts = (show_hello, write_hello)\n\n```\n\n----------------------------------------\n\nTITLE: Drawing Shapes in Python\nDESCRIPTION: This Python code snippet defines the `_draw_shapes` method which is responsible for drawing six different shapes onto a slide (`curr_slide`). It creates a dashed line, a red ellipse, a lime rectangle, a text shape, a transparent gray circle, and a thick line using methods like `draw_line`, `draw_ellipse`, `draw_rectangle`, `draw_text`, and `draw_circle`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"def _draw_shapes(self, curr_slide: DrawPage[DrawDoc]) -> None:\\n    line1 = curr_slide.draw_line(x1=50, y1=50, x2=200, y2=200)\\n    line1.component.LineColor = CommonColor.BLACK\\n    line1.set_dashed_line(is_dashed=True)\\n\\n    # red ellipse; uses (x, y) width, height\\n    circle1 = curr_slide.draw_ellipse(x=100, y=100, width=75, height=25)\\n    circle1.component.FillColor = CommonColor.RED\\n\\n    # rectangle with different fills; uses (x, y) width, height\\n    rect1 = curr_slide.draw_rectangle(x=70, y=100, width=75, height=25)\\n    rect1.component.FillColor = CommonColor.LIME\\n\\n    text1 = curr_slide.draw_text(\\n        msg=\\\"Hello LibreOffice\\\",\\n        x=120,\\n        y=120,\\n        width=60,\\n        height=30,\\n        font_size=24,\\n    )\\n    text1.component.Name = \\\"text1\\\"\\n    # Props.show_props(\\\"TextShape's Text Properties\\\", Draw.get_text_properties(text1.component))\\n\\n    # gray transparent circle; uses (x,y), radius\\n    circle2 = curr_slide.draw_circle(x=40, y=150, radius=20)\\n    circle2.component.FillColor = CommonColor.GRAY\\n    circle2.set_transparency(level=Intensity(25))\\n\\n    # thick line; uses (x,y), angle clockwise from x-axis, length\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Calc Document with Font Formatting in Python\nDESCRIPTION: Creates a Calc document, applies a custom font to a cell, and verifies the font properties were correctly applied.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.font import FontOnly\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        cell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\n        font_style = FontOnly(name=\"Lucida Calligraphy\", size=20, font_style=\"italic\")\n        Calc.set_val(value=\"Hello\", cell=cell, styles=[font_style])\n\n        f_style = FontOnly.from_obj(cell)\n        assert f_style.prop_name == \"Lucida Calligraphy\"\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Area Style from Document\nDESCRIPTION: Demonstrates how to retrieve the area style properties from an existing document using the FillColor.from_style method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/color.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf_style = FillColor.from_style(\n    doc=doc.component,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Aligning Table Using Style Object Method in Python\nDESCRIPTION: This snippet shows the use of a 'TableProperties' style object to set alignment properties of a table when adding it via a cursor. Essential dependencies include 'TableProperties', 'CommonColor', 'TableAlignKind', 'UnitMM', and a 'cursor' object. This example sets manual alignment properties by encapsulating them in a styles list when inserting the table.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\"My_Table\",\n    relative=False,\n    align=TableAlignKind.MANUAL,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    left=UnitMM(66.0),\n    right=UnitMM(55.0),\n)\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n)\n```\n\n----------------------------------------\n\nTITLE: Loading LibreOffice with Custom Profile in Python\nDESCRIPTION: This snippet illustrates how to start LibreOffice with a user-defined profile path. The specified profile will be copied to a temporary directory, allowing for modifications during the session.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.conn.cache import Cache\n\ndef main():\n    with Lo.Loader(\n        Lo.ConnectSocket(headless=True),\n        cache_obj=Cache(profile_path='/path/to/profile'),\n    ) as loader:\n        # do work and then loader will be closed automatically.\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Accessing Cells by Name in CalcSheet Using Python\nDESCRIPTION: This Python snippet demonstrates how to access a cell value in a CalcSheet spreadsheet using a cell address in the format 'A1'. The 'sheets' attribute is accessed using index 0 to refer to the first sheet.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_sheet.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc.sheets[0][\"A2\"].get_val()\n1.0\n```\n\n----------------------------------------\n\nTITLE: Creating LibreOffice Calc Spreadsheet with Calc Class\nDESCRIPTION: Demonstrates loading LibreOffice in headless mode, creating a Calc document, accessing a sheet, and saving it as an ODS file\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/odev/02/create_save_tab.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> None:\n    loader = Lo.load_office(Lo.ConnectSocket(headless=True))\n    doc = Calc.create_doc(loader=loader)\n    sheet = Calc.get_sheet(doc=doc, index=0)\n\n    # use the Office API to manipulate doc...\n\n    Calc.save_doc(doc, \"foo.ods\")\n    Lo.close_doc(doc)\n    lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Creating a Gradient with Custom Properties in Draw\nDESCRIPTION: This code snippet demonstrates how to create a color gradient in a LibreOffice Draw slide and customize its properties using the `Draw` class from the `ooo-dev-tools` library. It creates a rectangle shape and applies a named gradient to it. The code then sets properties like `Angle`, `StartColor`, and `EndColor` for the gradient. Finally it sets the modified gradient properties on the rectangle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n        # in DrawGradient Class()\n        # creates color gradient and color Custom props gradient\n        def _gradient_name(self, curr_slide: DrawPage[DrawDoc], set_props: bool) -> None:\n            # rect1.component is com.sun.star.drawing.RectangleShape service which\n            # also implements com.sun.star.drawing.FillProperties service\n\n            rect1 = curr_slide.draw_rectangle(\n                x=self._x,\n                y=self._y,\n                width=self._width,\n                height=self._height,\n            )\n            grad = rect1.set_gradient_color(name=self._name_gradient)\n            if set_props:\n                grad.Angle = self._angle * 10  # in 1/10 degree units\n                grad.StartColor = self._start_color\n                grad.EndColor = self._end_color\n                rect1.set_gradient_properties(grad=grad)\n```\n\n----------------------------------------\n\nTITLE: Drawing Shapes Show Method in Python\nDESCRIPTION: This Python code snippet defines the `show` method within the `DrawPicture` class.  It loads a LibreOffice document, creates a Draw document, displays it, zooms to fit the entire page, draws shapes, adds a formula, animates shapes, finds a shape by name, and displays a message box to ask the user if they want to close the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"class DrawPicture:\\n    def show(self) -> None:\\n        loader = Lo.load_office(Lo.ConnectPipe())\\n\\n        try:\\n            doc = DrawDoc(Draw.create_draw_doc(loader))\\n            doc.set_visible()\\n            Lo.delay(1_000)  # need delay or zoom may not occur\\n            doc.zoom(ZoomKind.ENTIRE_PAGE)\\n\\n            curr_slide = doc.get_slide(idx=0)\\n            self._draw_shapes(curr_slide=curr_slide)\\n\\n            s = curr_slide.draw_formula(\\n                formula=\\\"func e^{i %pi} + 1 = 0\\\",\\n                x=70,\\n                y=20,\\n                width=75,\\n                height=40,\\n            )\\n            # Draw.report_pos_size(s)\\n\\n            self._anim_shapes(curr_slide=curr_slide)\\n\\n            s = curr_slide.find_shape_by_name(\\\"text1\\\")\\n            Draw.report_pos_size(s.component)\\n\\n            Lo.delay(2000)\\n            msg_result = MsgBox.msgbox(\\n                \\\"Do you wish to close document?\\\",\\n                \\\"All done\\\",\\n                boxtype=MessageBoxType.QUERYBOX,\\n                buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\\n            )\\n            if msg_result == MessageBoxResultsEnum.YES:\\n                doc.close_doc()\\n                Lo.close_office()\\n            else:\\n                print(\\\"Keeping document open\\\")\\n        except Exception:\\n            Lo.close_office()\\n            raise\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Cell Value in LibreOffice Calc with Python\nDESCRIPTION: This snippet shows how to store a numerical value in a specific cell within a spreadsheet using the setValue() method. It first retrieves the cell using getCellByPosition() and then sets its value to 9.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsheet = Calc.get_sheet(doc, 0)\ncell = sheet.getCellByPosition(2, 4) # (column,row)\ncell.setValue(9)\n```\n\n----------------------------------------\n\nTITLE: Getting Style Families - Python\nDESCRIPTION: The `get_style_families()` function retrieves the style families from the provided OpenOffice document object. It raises exceptions if the required interface is missing or if any other error occurs during the retrieval process.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_style_families(doc: object) -> XNameAccess:\n    try:\n        xsupplier = Lo.qi(XStyleFamiliesSupplier, doc, True)\n        return xsupplier.getStyleFamilies()\n    except MissingInterfaceError:\n        raise\n    except Exception as e:\n        raise Exception(\"Unable to get family style names\") from e\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color of a Shape in LibreOffice with Python\nDESCRIPTION: This code snippet shows how to set the fill color of a shape in LibreOffice. It uses the `Props.set` method from the `ooodev.utils.props` module to set the `FillColor` property of the shape to red, using the `CommonColor.RED` constant from `ooodev.utils.color` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter11.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.props import Props\nfrom ooodev.utils.color import CommonColor\n\nProps.set(shape, FillColor=CommonColor.RED)\n```\n\n----------------------------------------\n\nTITLE: Applying Background Color to Data Point\nDESCRIPTION: This code snippet styles the area color of a specific data point within a data series. The third data point in the first data series is targeted to apply the teal dark color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\ndp = ds[2]\ndp.style_area_color(StandardColor.TEAL_DARK2)\n```\n\n----------------------------------------\n\nTITLE: Adding Stock Line to Chart in LibreOffice Python\nDESCRIPTION: This method adds a stock line to a given chart document in LibreOffice by creating an empty data series and filling it with y-axis values sourced from a specified range of data. It handles exceptions that may arise during the process.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n    @classmethod\n        def add_stock_line(cls, chart_doc: XChartDocument, data_label: str, data_range: str) -> None:\n            try:\n                # add (empty) line chart to the doc\n                ct = cls.add_chart_type(\n                    chart_doc=chart_doc, chart_type=ChartTypes.Line.NAMED.LINE_CHART\n                )\n                data_series_cnt = Lo.qi(XDataSeriesContainer, ct, True)\n\n                # create (empty) data series in the line chart\n                ds = Lo.create_instance_mcf(\n                    XDataSeries, \"com.sun.star.chart2.DataSeries\", raise_err=True\n                )\n\n                Props.set(ds, Color=int(CommonColor.RED))\n                data_series_cnt.addDataSeries(ds)\n\n                # add data to series by treating it as a data sink\n                data_sink = Lo.qi(XDataSink, ds, True)\n\n                # add data as y values\n                dp = chart_doc.getDataProvider()\n                dl_seq = cls.create_ld_seq(\n                    dp=dp,\n                    role=DataRoleKind.VALUES_Y,\n                    data_label=data_label,\n                    data_range=data_range\n                )\n                ld_seq_arr = (dl_seq,)\n                data_sink.setData(ld_seq_arr)\n            except ChartError:\n                raise\n            except Exception as e:\n                raise ChartError(\"Error adding stock line\") from e\n```\n\n----------------------------------------\n\nTITLE: Setting up and applying Calc Footer Style\nDESCRIPTION: This snippet sets up a Calc document, applies a footer style using the `Footer` class, and then retrieves the style to verify its properties. It demonstrates how to create, apply, and read a footer style in a Calc document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/footer.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.page.footer import Footer, CalcStylePageKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        footer_style = Footer(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=CalcStylePageKind.DEFAULT,\n        )\n        footer_style.apply(doc)\n\n        style_obj = Footer.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Using Events for Automatic Cursor Resetting after Styling in Writer\nDESCRIPTION: Shows how to use the CHARACTER_STYLE_APPLIED event to automatically reset the cursor position and clear character formatting after applying styles. This approach requires re-selecting text between different style applications.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/cursor/cursor_char_style.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import cast, TYPE_CHECKING\nfrom ooodev.write import WriteDoc\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.writer.direct.char.font import FontScriptKind\nfrom ooodev.format.writer.direct.char.borders import BorderLineKind\nfrom ooodev.write.style.direct.character_styler import CharacterStyler\n\nif TYPE_CHECKING:\n    from ooodev.events.args.event_args import EventArgs\n\nif TYPE_CHECKING:\n    from com.sun.star.text import XTextCursor\n\ndef on_char_style_applied(src: Any, event_args: EventArgs) -> None:\n    styler = cast(CharacterStyler, src)\n    cursor = cast(\"XTextCursor\", event_args.event_data.get(\"this_component\", None))\n    if cursor is None:\n        return\n    cursor.gotoEnd(False)\n    styler.clear()\n    \n\n# ... other code\ndoc = WriteDoc.create_doc(visible=True)\ncursor = doc.get_cursor()\n\n# subscribe to the event that resets the cursor when a style is applied.\ncursor.subscribe_event(WriteNamedEvent.CHARACTER_STYLE_APPLIED, on_char_style_applied)\n\ncursor.append(\"Hello\")\n# go left and select the the last word appended\ncursor.go_left(5, True)\n\n# Style the Hello word to be Font size 30, bold, italic, underline and color blue.\n_ = cursor.style_direct_char.style_font_general(\n    size=30.0,\n    b=True,\n    i=True,\n    u=True,\n    color=StandardColor.BLUE,\n)\n# because the cursor position will be reset in the event need to select again.\n# A solution for this below.\ncursor.go_left(5, True)\n# put a border around Hello\n_ = cursor.style_direct_char.style_borders_side(\n    line=BorderLineKind.DOUBLE_THIN,\n    color=StandardColor.RED,\n)\n\n# append world without any character styling\n# note that there was no need to reset the cursor. It was done in the event.\ncursor.append(\" World\")\n# make the d in World subscript\n\ncursor.go_left(1, True) # select the d character\n_ = cursor.style_direct_char.style_font_position(script_kind=FontScriptKind.SUBSCRIPT)\ncursor.append(\". Nice Day!\") # unformatted characters\n```\n\n----------------------------------------\n\nTITLE: Combining RangeObj with String Range in Python\nDESCRIPTION: Demonstrates how to combine a RangeObj instance with a string range using the '/' operator. The example combines A2:B4 with the string 'C6:F8' to create an expanded range A2:F8.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>>\n>>> rng1 = RangeObj(col_start=\"A\", col_end=\"B\", row_start=2, row_end=4, sheet_idx=0)\n>>> str(rng1)\n'A2:B4'\n>>> rng2 = rng1 / 'C6:F8'\n>>> str(rng2)\n'A2:F8'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Cell Address for Modifications\nDESCRIPTION: This snippet retrieves the address of the cell currently selected when modifications occur. It relies on the XModel interface to get the current selection, ensuring it handles both single cell and cell range selections appropriately.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@classmethod\ndef get_selected_cell_addr(cls, doc: XSpreadsheetDocument) -> CellAddress:\n    cr_addr = cls.get_selected_addr(doc=doc)\n    if cls.is_single_cell_range(cr_addr):\n        sheet = cls.get_active_sheet(doc)\n        cell = cls.get_cell(sheet=sheet, col=cr_addr.StartColumn, row=cr_addr.StartRow)\n        return cls.get_cell_address(cell)\n    else:\n        raise CellError(\"Selected address is not a single cell\")\n\n@overload\n@classmethod\ndef get_selected_addr(cls, doc: XSpreadsheetDocument) -> CellRangeAddress:\n    model = Lo.qi(XModel, doc)\n    return cls.get_selected_addr(model)\n\n@overload\n@classmethod\ndef get_selected_addr(cls, model: XModel) -> CellRangeAddress:\n    ra = Lo.qi(XCellRangeAddressable, model.getCurrentSelection(), raise_err=True)\n    return ra.getRangeAddress()\n```\n\n----------------------------------------\n\nTITLE: Retrieve Style from Range in Calc\nDESCRIPTION: This code demonstrates how to retrieve and verify a style from a specified range of cells in LibreOffice Calc. The process involves identifying the range, acquiring the XCellRange object, and confirming style details through CellStyle.from_obj using Python.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/static/cell.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncell_rng = Calc.get_range_obj(range_name=\"A1:B1\")\nrng = Calc.get_cell_range(sheet=sheet, range_obj=cell_rng)\n\nstyle_obj = CellStyle.from_obj(rng)\nassert style_obj.prop_name == str(StyleCellKind.ACCENT_1)\n```\n\n----------------------------------------\n\nTITLE: Applying Shadows to Range in Python\nDESCRIPTION: This snippet demonstrates how to apply shadow effects to a range in a Calc sheet using the `Shadow` class. It adds a default shadow to the specified cell range `B2:F6`, enhancing the visual style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Shadow\n\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\ncell_rng.style_borders_sides(\n    color=CommonColor.BLUE,\n    shadow=Shadow(),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Text Frame to Document with Dimensions and Styles - Python\nDESCRIPTION: This method creates a text frame in a LibreOffice document with specified dimensions, colors, and properties. It handles events, manages the frame's anchoring to the document, and provides error handling for insertion failures.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nxframe = mLo.Lo.create_instance_msf(XTextFrame, \"com.sun.star.text.TextFrame\", raise_err=True)\n\ntry:\n    tf_shape = mLo.Lo.qi(XShape, xframe, True)\n\n    # set dimensions of the text frame\n    tf_shape.setSize(UnoSize(width, height))\n\n    #  anchor the text frame\n    frame_props = mLo.Lo.qi(XPropertySet, xframe, True)\n    # if page number is Not include for TextContentAnchorType.AT_PAGE\n    # then Lo Default so At AT_PARAGRAPH\n    if not page_num or page_num < 1:\n        frame_props.setPropertyValue(\"AnchorType\", TextContentAnchorType.AT_PARAGRAPH)\n    else:\n        frame_props.setPropertyValue(\"AnchorType\", TextContentAnchorType.AT_PAGE)\n        frame_props.setPropertyValue(\"AnchorPageNo\", page_num)\n\n    frame_props.setPropertyValue(\"FrameIsAutomaticHeight\", True)  # will grow if necessary\n\n    # add a red border around all 4 sides\n    border = BorderLine()\n    border.OuterLineWidth = 1\n    if border_color is not None:\n        border.Color = border_color\n\n    frame_props.setPropertyValue(\"TopBorder\", border)\n    frame_props.setPropertyValue(\"BottomBorder\", border)\n    frame_props.setPropertyValue(\"LeftBorder\", border)\n    frame_props.setPropertyValue(\"RightBorder\", border)\n\n    # make the text frame blue\n    if background_color is not None:\n        frame_props.setPropertyValue(\"BackTransparent\", False)  # not transparent\n        frame_props.setPropertyValue(\"BackColor\", background_color)  # light blue\n\n    # Set the horizontal and vertical position\n    frame_props.setPropertyValue(\"HoriOrient\", HoriOrientation.RIGHT)\n    frame_props.setPropertyValue(\"VertOrient\", VertOrientation.NONE)\n    frame_props.setPropertyValue(\"VertOrientPosition\", ypos)  # down from top\n\n    # insert text frame into document (order is important here)\n    cls._append_text_content(cursor, xframe)\n    cls.end_paragraph(cursor)\n\n    if text:\n        xframe_text = xframe.getText()\n        xtext_range = mLo.Lo.qi(XTextRange, xframe_text.createTextCursor(), True)\n        xframe_text.insertString(xtext_range, text, False)\n        result = xframe\n\n    if styles:\n        srv = (\"com.sun.star.text.TextFrame\", \"com.sun.star.text.ChainedTextFrame\")\n        for style in styles:\n            if style.support_service(*srv):\n                style.apply(xframe)\n\nexcept Exception as e:\n    raise Exception(\"Insertion of text frame failed:\") from e\n_Events().trigger(WriteNamedEvent.TEXT_FRAME_ADDED, EventArgs.from_args(cargs))\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Getting the Area Pattern from a Style\nDESCRIPTION: This snippet shows how to retrieve the area pattern from an existing paragraph style in a Writer document. It uses the `from_style` method of the `ParaStylePattern` class to get the style and then asserts that the style name is correct.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_pattern.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"style_obj = ParaStylePattern.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\"\n```\n\n----------------------------------------\n\nTITLE: Styling Data Point Border in Chart using Python\nDESCRIPTION: This snippet demonstrates how to apply a border style to a specific data point within a data series in a chart. The `style_border_line()` method is used with specified color and width. It is a continuation of the Python script for chart styling, leveraging the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nds = chart_doc.get_data_series()[0]\ndp = ds[1]\ndp.style_border_line(\n    color=StandardColor.MAGENTA_DARK1,\n    width=0.75,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Cells by CellObj in CalcSheet Using Python\nDESCRIPTION: This Python snippet illustrates accessing a CalcSheet cell using a 'CellObj' instance, which utilizes 1-based indexing for the row number. This provides a user-friendly manner to reference cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_sheet.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> doc.sheets[0][CellObj(\"A\", 2)].get_val()\n1.0\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Rotation Properties\nDESCRIPTION: Shows how to retrieve the rotation properties of a shape using the Rotation.from_obj() method. Demonstrates checking the rotation angle using Angle100 units.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/rotation/rotation.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.rotation import Rotation\nfrom ooodev.units import Angle100\n# ... other code\n\n# get the properties from the shape\nf_style = Rotation.from_obj(rect.component)\nassert f_style.prop_rotation == Angle100(4500)\n```\n\n----------------------------------------\n\nTITLE: Applying Colored Borders using ooodev in Python\nDESCRIPTION: This code snippet demonstrates how to apply colored borders (red) to a range of cells. It defines a border side color and applies it using the `Borders` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        rng_obj = Calc.get_range_obj(\"B2:F6\")\n        cr = Calc.get_cell_range(sheet, rng_obj)\n        borders = Borders(border_side=Side(color=CommonColor.RED))\n        Styler.apply(cr, borders)\n```\n\n----------------------------------------\n\nTITLE: Executing Linguistics Services with Office API in Python\nDESCRIPTION: The function initializes a connection to Office in headless mode, retrieves and displays various linguistic properties, and lists out the extensions, including linguistic ones. It further checks for and prints information on the linguistics manager, executing multiple linguistic operations via calls to various Office API methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> int:\n\n    with Lo.Loader(Lo.ConnectSocket(headless=True)) as loader:\n\n        # print linguistics info\n        Write.dicts_info()\n\n        lingu_props = Write.get_lingu_properties()\n        Props.show_props(\"Linguistic Manager\", lingu_props)\n\n        Info.list_extensions()  # these include linguistic extensions\n\n        lingo_mgr = Lo.create_instance_mcf(\n            XLinguServiceManager2, \"com.sun.star.linguistic2.LinguServiceManager\"\n        )\n        if lingo_mgr is None:\n            print(\"No linguistics manager found\")\n            return 0\n\n        Write.print_services_info(lingo_mgr)\n\n        # : code for using the services; see later\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent Global Shortcut in Python\nDESCRIPTION: Example showing how to create a persistent global keyboard shortcut using the Shortcuts class. The shortcut will be saved and available after restarting LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui.menu import Shortcuts\n# ...\n\nsc = Shortcuts()\nsc.set(\"Shift+Ctrl+Alt+A\", \".custom:alone.here\", True)\n```\n\n----------------------------------------\n\nTITLE: Applying and Resetting Paragraph Background Color on Cursor\nDESCRIPTION: Example showing how to apply a background color to the cursor, which affects subsequent paragraphs, and then reset to default style. The code demonstrates how to clear formatting using ParaStyle.default.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/color.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.style.para import Para as ParaStyle\n# ... other code\n\ncursor = Write.get_cursor(doc)\nfc = ParaBgColor(CommonColor.YELLOW_GREEN)\nfc.apply(cursor.TextParagraph)\nWrite.append_para(cursor=cursor, text=\"Fill Color starts Here\")\nWrite.append_para(cursor=cursor, text=\"And today Ends Here\")\nParaStyle.default.apply(cursor)\nWrite.append_para(cursor=cursor, text=\"Nothing to report\")\n```\n\n----------------------------------------\n\nTITLE: Setting Font Effects in Writer Document\nDESCRIPTION: Creates a new Writer document and applies direct font formatting including color, underline, and shadow effects. Uses the FontEffects class to set text color to red, add a blue underline, and enable text shadow.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.char.font import (\n    FontOnly, FontEffects, FontLine, FontUnderlineEnum\n)\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.PAGE_WIDTH)\n        cursor = Write.get_cursor(doc)\n        font_style = FontOnly(name=\"Liberation Serif\", size=20)\n        font_effects = FontEffects(\n            color=CommonColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n            shadowed=True,\n        )\n\n        Write.append_para(\n            cursor=cursor, text=\"Hello World!\", styles=[font_style, font_effects]\n        )\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Document in Python\nDESCRIPTION: This code snippet defines the method 'get_chart_doc' within the Chart2 class, which retrieves a chart document from a spreadsheet using the chart's name. It handles exceptions and returns the embedded chart document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@classmethod\ndef get_chart_doc(cls, sheet: XSpreadsheet, chart_name: str) -> XChartDocument:\n    try:\n        tbl_chart = cls.get_table_chart(sheet, chart_name)\n        eos = Lo.qi(XEmbeddedObjectSupplier, tbl_chart, True)\n        return Lo.qi(XChartDocument, eos.getEmbeddedObject(), True)\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(f'Error getting chart document for chart \"{chart_name}\"') from e\n```\n\nLANGUAGE: python\nCODE:\n```\n    @staticmethod\n    def get_table_chart(sheet: XSpreadsheet, chart_name: str) -> XTableChart:\n        try:\n            charts_supp = Lo.qi(XTableChartsSupplier, sheet, True)\n            tbl_charts = charts_supp.getCharts()\n            tc_access = Lo.qi(XNameAccess, tbl_charts, True)\n            tbl_chart = Lo.qi(XTableChart, tc_access.getByName(chart_name))\n            return tbl_chart\n        except Exception as e:\n            raise ChartError(f'Error getting table chart for chart \"{chart_name}\"') from e\n```\n\n----------------------------------------\n\nTITLE: Chart Main Function with ChartKind Handling in Python\nDESCRIPTION: This code snippet shows the main function responsible for creating different chart types based on the `ChartKind` enum. It loads the office suite, opens a spreadsheet document, and calls the appropriate chart creation function based on the specified chart kind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"# Chart2View.main() ofchart_2_views.py\ndef main(self) -> None:\n    _ = Lo.load_office(connector=Lo.ConnectPipe(), opt=Lo.Options(verbose=True))\n\n    try:\n        doc = Calc.open_doc(fnm=self._data_fnm)\n        GUI.set_visible(is_visible=True, odoc=doc)\n        sheet = Calc.get_sheet(doc=doc)\n\n        chart_doc = None\n        if self._chart_kind == ChartKind.AREA:\n            chart_doc = self._area_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.BAR:\n            chart_doc = self._bar_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.BUBBLE_LABELED:\n            chart_doc = self._labeled_bubble_chart(doc=doc, sheet=sheet) # section 1\n        elif self._chart_kind == ChartKind.COLUMN:\n            chart_doc = self._col_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.COLUMN_LINE:\n            chart_doc = self._col_line_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.COLUMN_MULTI:\n            chart_doc = self._mult_col_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.DONUT:\n            chart_doc = self._donut_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.HAPPY_STOCK:\n            chart_doc = self._happy_stock_chart(doc=doc, sheet=sheet) # section 3\n        elif self._chart_kind == ChartKind.LINE:\n            chart_doc = self._line_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.LINES:\n            chart_doc = self._lines_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.NET:\n            chart_doc = self._net_chart(doc=doc, sheet=sheet) # section 2\n        elif self._chart_kind == ChartKind.PIE:\n            chart_doc = self._pie_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.PIE_3D:\n            chart_doc = self._pie_3d_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.SCATTER:\n            chart_doc = self._scatter_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.SCATTER_LINE_ERROR:\n            chart_doc = self._scatter_line_error_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.SCATTER_LINE_LOG:\n            chart_doc = self._scatter_line_log_chart(doc=doc, sheet=sheet)\n        elif self._chart_kind == ChartKind.STOCK_PRICES:\n            chart_doc = self._stock_prices_chart(doc=doc, sheet=sheet) # section 4\n\n        # ...\"\n```\n\n----------------------------------------\n\nTITLE: Applying cell protection to a range in Calc\nDESCRIPTION: This snippet shows how to create and apply a CellProtection style directly to a range of cells using the apply method. This is more efficient than applying protection individually to each cell in the range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/cell_protection.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle = CellProtection(hide_all=False, hide_formula=True, protected=True, hide_print=True)\nstyle.apply(rng)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sentence Cursor in Python for OpenOffice\nDESCRIPTION: This snippet demonstrates how to create a sentence cursor from a paragraph cursor in an OpenOffice text document. It uses the createTextCursorByRange method and converts the result to an XSentenceCursor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ncursor = para_cursor.getText().createTextCursorByRange(para_cursor.getStart())\n\nsc = Lo.qi(XSentenceCursor, cursor)\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyListenerAdapter in Python\nDESCRIPTION: This code defines a `ModifyListenerAdapter` class that listens for document modifications using OooDev library. It initializes a spreadsheet, populates it with data, and attaches event listeners for modifications and window closing.  It demonstrates the new way of attaching event handlers directly to the document since OooDev 0.15.0.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ModifyListenerAdapter:\n    def __init__(self, out_fnm: PathOrStr) -> None:\n        super().__init__()\n        if out_fnm:\n            out_file = FileIO.get_absolute_path(out_fnm)\n            _ = FileIO.make_directory(out_file)\n            self._out_fnm = out_file\n        else:\n            self._out_fnm = \"\"\n        self.closed = False\n        loader = Lo.load_office(Lo.ConnectPipe())\n        self._doc = CalcDoc(Calc.create_doc(loader))\n\n        self._doc.set_visible()\n        self._sheet = self._doc.get_sheet(0)\n\n        # insert some data\n        self._sheet.set_col(\n            cell_name=\"A1\",\n            values=(\"Smith\", 42, 58.9, -66.5, 43.4, 44.5, 45.3),\n        )\n\n        # Event handlers are defined as methods on the class.\n        # However class methods are not callable by the event system.\n        # The solution is to assign the method to class fields and use them to add the event callbacks.\n        self._fn_on_window_closing = self.on_window_closing\n        self._fn_on_modified = self.on_modified\n        self._fn_on_disposing = self.on_disposing\n\n        # Since OooDev 0.15.0 it is possible to set call backs directly on the document.\n        # No deed to create a ModifyEvents object.\n        # It is possible to subscribe to event for document, sheets, ranges, cells, etc.\n        self._doc.add_event_modified(self._fn_on_modified)\n        self._doc.add_event_modify_events_disposing(self._fn_on_disposing)\n\n        # This is the pre 0.15.0 way of doing it.\n        # pass doc to constructor, this will allow listener to be automatically attached to document.\n        # self._m_events = ModifyEvents(subscriber=self._doc.component)\n        # self._m_events.add_event_modified(self._fn_on_modified)\n        # self._m_events.add_event_modify_events_disposing(self._fn_on_disposing)\n\n        # close down when window closes\n        self._top_win_ev = TopWindowEvents(add_window_listener=True)\n        self._top_win_ev.add_event_window_closing(self._fn_on_window_closing)\n\n    def on_window_closing(\n        self, source: Any, event_args: EventArgs, *args, **kwargs\n    ) -> None:\n        print(\"Closing\")\n        try:\n            self._doc.close_doc()\n            Lo.close_office()\n            self.closed = True\n        except Exception as e:\n            print(f\"  {e}\")\n\n    def on_modified(self, source: Any, event_args: EventArgs, *args, **kwargs) -> None:\n        print(\"Modified\")\n        try:\n            # event = cast(\"EventObject\", event_args.event_data)\n            # doc = Lo.qi(XSpreadsheetDocument, event.Source, True)\n            doc = self._doc\n            addr = doc.get_selected_cell_addr()\n            print(\n                f\"  {Calc.get_cell_str(addr=addr)} = {self._sheet.get_val(addr=addr)}\"\n            )\n        except Exception as e:\n            print(e)\n\n    def on_disposing(self, source: Any, event_args: EventArgs, *args, **kwargs) -> None:\n        print(\"Disposing\")\n```\n\n----------------------------------------\n\nTITLE: Creating Header Cursor in Python for LibreOffice Writer\nDESCRIPTION: This snippet demonstrates how to create a text cursor specifically for the header section of a Writer document, allowing for localized text manipulation within the header.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nheader_cursor = header_text.createTextCursor()\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color on a Single Cell with Python\nDESCRIPTION: This snippet demonstrates how to import necessary modules and set a background color for a single cell in Calc using the ooodev library. It establishes a connection, creates a document, and applies a color to a specific cell before verifying the styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/background.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.background import Color as BgColor\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        cell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\n        style = BgColor(StandardColor.BLUE_LIGHT2)\n        Calc.set_val(value=\"Hello\", cell=cell, styles=[style])\n\n        f_style = BgColor.from_obj(cell)\n        assert f_style.prop_color == StandardColor.BLUE_LIGHT2\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Generating a Pie Chart in Python\nDESCRIPTION: This '_pie_chart' method creates a pie chart from a specified range in the sheet using data related to the top 5 states. It places the chart appropriately in the document, sets the chart’s title and subtitle, and controls the visibility of the chart’s legend.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n        # Chart2View._pie_chart() in chart_2_views.py\n        def _pie_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n            # uses \"Top 5 States with the Most Elementary and Secondary Schools\"\n            range_addr = Calc.get_address(sheet=sheet, range_name=\"E2:F8\")\n            chart_doc = Chart2.insert_chart(\n                sheet=sheet,\n                cells_range=range_addr,\n                cell_name=\"B10\",\n                width=12,\n                height=11,\n                diagram_name=ChartTypes.Pie.TEMPLATE_DONUT.PIE,\n            )\n            Calc.goto_cell(cell_name=\"A1\", doc=doc)\n\n            Chart2.set_title(\n                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E1\")\n            )\n            Chart2.set_subtitle(\n                chart_doc=chart_doc, subtitle=Calc.get_string(sheet=sheet, cell_name=\"F2\")\n            )\n            Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n            return chart_doc\n\n```\n\n----------------------------------------\n\nTITLE: Using a Clean Profile in LibreOffice in Python\nDESCRIPTION: In this example, LibreOffice is loaded using an empty string for the profile path, resulting in a newly generated clean profile for the session, ideal for untouched environments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.conn.cache import Cache\n\ndef main():\n    with Lo.Loader(\n        Lo.ConnectSocket(headless=True),\n        cache_obj=Cache(profile_path=''),\n    ) as loader:\n        # do work and then loader will be closed automatically.\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Adjusting Line Properties in Python Stock Charts\nDESCRIPTION: This code snippet at the end of `_happy_stock_chart()` modifies the high-low lines in a candle stick chart, making them thicker and yellow. It uses properties like `LineWidth` and `Color` from the data series. Inputs include the chart document and type, and it outputs a chart with adjusted line properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# end of Chart2View._happy_stock_chart() in chart_2_views.py\n# ...\nct = ChartTypes.Stock.NAMED.CANDLE_STICK_CHART\n# ...\n# thicken the high-low line; make it yellow\nds = Chart2.get_data_series(chart_doc=chart_doc, chart_type=ct)\nLo.print(f\"No. of data series in candle stick chart: {len(ds)}\")\n# Props.show_obj_props(\"Candle Stick\", ds[0])\nProps.set(ds[0], LineWidth=120, Color=CommonColor.YELLOW)  # LineWidth in 1/100 mm\nreturn chart_doc\n```\n\n----------------------------------------\n\nTITLE: Inserting Hyperlink in Python\nDESCRIPTION: This snippet demonstrates how to insert a hyperlink into a document using the `Hyperlink` class from the `ooodev.format.writer.direct.char.hyperlink` module. It creates a `Hyperlink` object with a URL and target and applies it as a style when appending text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.char.hyperlink import Hyperlink, TargetKind\n# ...\n\n# Insert a hyperlink.\ncursor.append(\"A link to \")\n\nhl = Hyperlink(\n    name=\"ODEV_GITHUB\",\n    url=\"https://github.com/Amourspirit/python_ooo_dev_tools\",\n    target=TargetKind.BLANK\n)\ncursor.append(\"OOO Development Tools\", styles=[hl])\n\ncursor.append_para(\" Website.\")\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Color to Paragraph\nDESCRIPTION: Demonstrates how to apply a preset gradient color to a paragraph's background using the Gradient class and PresetGradientKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/gradient.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\ngradient_style = Gradient.from_preset(PresetGradientKind.MAHOGANY)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[gradient_style])\n```\n\n----------------------------------------\n\nTITLE: Applying Numbered List Styles in Python for LibreOffice Writer\nDESCRIPTION: This snippet demonstrates how to apply a lettered list style to paragraphs in a Writer document using the ooodev library. It sets the list style to 'Number abc' and forces a numbering reset.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.para.outline_list import ListStyle, StyleListKind\nfrom ooodev.format.writer.style.bullet_list import BulletList\n# ...\n\ncursor.append_para(\"Breakfast should include:\")\n\n# set cursor style to Number abc\nlist_style = ListStyle(list_style=StyleListKind.NUM_abc, num_start=-2)\nlist_style.apply(cursor.component)\n\ncursor.append_para(\"Porridge\")\ncursor.append_para(\"Orange Juice\")\ncursor.append_para(\"A Cup of Tea\")\n# reset cursor number style\nlist_style.default.apply(cursor.component)\n```\n\n----------------------------------------\n\nTITLE: Reporting Shape Position and Size in Draw Class - Python\nDESCRIPTION: This method prints the name, type, position, and size of a given shape. It requires the shape to access its attributes through Props.get() and methods like getPosition() and getSize(). The input is an XShape object, and the output is printed information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# in the draw class\n@classmethod\ndef report_pos_size(cls, shape: XShape) -> None:\n    if shape is None:\n        print(\"The shape is null\")\n        return\n    print(f'Shape Name: {Props.get(shape, \"Name\")}')\n    print(f\"  Type: {shape.getShapeType()}\")\n    cls.print_point(shape.getPosition())\n    cls.print_size(shape.getSize())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hidden Fields in Python\nDESCRIPTION: This snippet retrieves and stores hidden fields from a DataPilotDescriptor in a variable called 'fields'. The 'dp_desc.getHiddenFields()' method is called, expecting an instance of XDataPilotDescriptor to access and manipulate spreadsheet fields.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# in pivot_table1.py\nfields = dp_desc.getHiddenFields()\n```\n\n----------------------------------------\n\nTITLE: Adding About Dialog to Existing Popup Menu in LibreOffice Calc Using Python\nDESCRIPTION: This Python code demonstrates how to add an 'About' menu item to the Tools popup menu in a LibreOffice Calc document and handle its selection event. It finds the menu bar, locates the Tools menu, inserts the About menu item after AutoComplete, sets the UNO command, and adds an event handler to execute the command when selected.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/about_example.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any, cast, TYPE_CHECKING\nimport uno\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.utils.kind.menu_lookup_kind import MenuLookupKind\nfrom ooodev.gui.menu.menu_bar import MenuBar\n\nif TYPE_CHECKING:\n    from com.sun.star.awt import MenuEvent\n    from ooodev.events.args.event_args import EventArgs\n    from ooodev.gui.menu.popup_menu import PopupMenu\n\ndef on_tools_menu_select(src: Any, event: EventArgs, menu: PopupMenu) -> None:\n    me = cast(\"MenuEvent\", event.event_data)\n    command = menu.get_command(me.MenuId)\n    if command == \".uno:About\":\n        menu.execute_cmd(command)\n\ndef get_menu_bar(doc: CalcDoc) -> MenuBar:\n    # get the menubar of the active document\n    doc.activate()\n    comp = doc.get_frame_comp()\n    if comp is None:\n        raise ValueError(\"No frame component found\")\n    lm = comp.layout_manager\n    mb = lm.get_menu_bar()\n    if mb is None:\n        raise ValueError(\"No menu bar found\")\n    return mb\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        sheet = doc.sheets[0]\n        sheet[0, 0].value = \"Hello, World!\"\n\n        mb = get_menu_bar(doc)\n        menu_id, _ = mb.find_item_menu_id(str(MenuLookupKind.TOOLS))\n        menu = mb.get_popup_menu(menu_id)\n        if menu is None:\n            raise ValueError(\"No Tools Menu found\")\n\n        next_id = menu.insert_item_after(menu_id=-1, text=\"About\", after=\".uno:AutoComplete\")\n        menu.set_command(menu_id=next_id, command=\".uno:About\")\n        menu.add_event_item_selected(on_tools_menu_select)\n\n        # set breakpoint here to see the menu.\n        assert True\n    finally:\n        doc.close()\n        Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Using Context Manager for LibreOffice in Python\nDESCRIPTION: In this snippet, a context manager ensures that LibreOffice is closed automatically, thus simplifying session management and reducing code complexity related to cleanup after usage.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.calc import CalcDoc\n\ndef main():\n    with Lo.Loader(Lo.ConnectPipe()) as loader:\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        sheet['A1'].value = 10\n        doc.msgbox('All done')\n        doc.close()\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Creating OLE2Shape for Charts - Python\nDESCRIPTION: This snippet demonstrates creating an OLE2Shape for a chart by setting up class ID properties and accessing the model for further manipulation. It requires a slide and chart dimensions. The generated shape can be adjusted using layout attributes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nshape = cls.add_shape(\n        slide=slide, shape_type=DrawingShapeKind.OLE2_SHAPE, x=x, y=y, width=width, height=height\n    )\ncls.set_shape_props(shape, CLSID=str(Lo.CLSID.CHART_CLSID))\nmodel = Lo.qi(XModel, Props.get(shape, \"Model\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Manual) with Width using styles in Python\nDESCRIPTION: Creates a table with manual alignment and a specific width using the styles approach. Defines a TableProperties object with manual alignment and width parameter for precise control.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\"My_Table\",\n    relative=False,\n    align=TableAlignKind.MANUAL,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    width=UnitMM(60.0),\n)\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Document Modification Event\nDESCRIPTION: This snippet defines the on_modified method, which is implemented to execute when document modifications are detected. It retrieves the currently selected cell address and prints modifications.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in modify_listener_adapter.py\ndef on_modified(self, source: Any, event_args: EventArgs, *args, **kwargs) -> None:\n    print(\"Modified\")\n    try:\n        # event = cast(\"EventObject\", event_args.event_data)\n        # doc = Lo.qi(XSpreadsheetDocument, event.Source, True)\n        doc = self._doc\n        addr = doc.get_selected_cell_addr()\n        print(\n            f\"  {Calc.get_cell_str(addr=addr)} = {self._sheet.get_val(addr=addr)}\"\n        )\n    except Exception as e:\n        print(e)\n```\n\n----------------------------------------\n\nTITLE: LibreOffice Hello World Script\nDESCRIPTION: Python script demonstrating basic LibreOffice automation using ooo-dev-tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_poetry_env.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import uno\n>>> from ooodev.loader.lo import Lo\n>>> from ooodev.calc import CalcDoc\n>>>\n>>> def say_hello(cell_name):\n...     doc = CalcDoc.from_current_doc()\n...     sheet = doc.sheets[0]\n...     sheet[cell_name].value=\"Hello World!\"\n...\n>>> _ = Lo.load_office(Lo.ConnectSocket())\n>>> doc = CalcDoc.create_doc(visible=True)\n>>> say_hello(\"A1\")\n>>> doc.close()\n>>> Lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Retrieving LibreOffice Installation Paths with the Info Class\nDESCRIPTION: Code that demonstrates how to access Office installation paths such as Office directory, Add-in directory, Filters directory, Templates directories, and Gallery directory using the Info class methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"\\nOffice Dir: {Info.get_office_dir()}\")\nprint(f\"\\nAddin Dir: {Info.get_paths('Addin')}\")\nprint(f\"\\nFilters Dir: {Info.get_paths('Filter')}\")\nprint(f\"\\nTemplates Dirs: {Info.get_paths('Template')}\")\nprint(f\"\\nGallery Dir: {Info.get_paths('Gallery')}\")\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Nonlinear Solver with Python\nDESCRIPTION: This code snippet creates an instance of the nonlinear solver using the LibreOffice Calc API. It specifies the solver implementation to use, allowing flexible selection between different solver services for nonlinear optimization.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nsolver = Lo.create_instance_mcf(XSolver, \"com.sun.star.comp.Calc.NLPSolver.SCOSolverImpl\", raise_err=True)\n```\n\n----------------------------------------\n\nTITLE: General Purpose Document Converter - Python\nDESCRIPTION: This snippet illustrates a command line tool that converts documents to different formats based on user-provided input and extension. It demonstrates how to open, save, and close documents using the LibreOffice Python API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwith Lo.Loader(Lo.ConnectSocket(headless=True)) as loader:\n    # get the absolute path of input file\n    p_fnm = FileIO.get_absolute_path(args.file_path)\n\n    name = Info.get_name(p_fnm)  # get name part of file without ext\n    if not ext.startswith(\".\"):\n        # just in case user did not include . in --ext value\n        ext = \".\" + ext\n\n    p_save = Path(p_fnm.parent, f\"{name}{ext}\")  # new file, same as old file but different ext\n\n    doc = Lo.open_doc(fnm=p_fnm, loader=loader)\n    Lo.save_doc(doc=doc, fnm=p_save)\n    Lo.close_doc(doc)\n\nprint(f\"All done! converted file: {p_save}\")\n```\n\n----------------------------------------\n\nTITLE: Obtaining Available Services from a Service Factory in Python\nDESCRIPTION: Static method in Info class that retrieves a list of available services from an object implementing XMultiServiceFactory. It's used to get chart template names by accessing the chart type manager's service factory interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# in Info class\n@staticmethod\ndef get_available_services(obj: object) -> List[str]:\n    services: List[str] = []\n    try:\n        sf = Lo.qi(XMultiServiceFactory, obj, True)\n        service_names = sf.getAvailableServiceNames()\n        services.extend(service_names)\n        services.sort()\n    except Exception as e:\n        Lo.print(e)\n        raise Exception() from e\n    return services\n```\n\n----------------------------------------\n\nTITLE: Setting Line Spacing in OOo Writer\nDESCRIPTION: Demonstrates how to apply line spacing to a paragraph using the 'LineSpacing' class with a proportional mode and value. Requires inclusion of the 'ooodev.format.writer.direct.para.indent_space' module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/indent_spacing.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nln_spc = LineSpacing(mode=ModeKind.PROPORTIONAL, value=85)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[ln_spc])\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Styling individual data point with gradient in Python\nDESCRIPTION: Demonstrates applying a gradient to a specific data point (index -1, which typically refers to the last point) in a chart series using the style_data_point method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=-1, styles=[data_series_grad])\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving LibreOffice Text Document\nDESCRIPTION: Main function demonstrating creation of a new text document, adding paragraphs, and saving to file. Includes visibility settings and zoom operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectSocket()) as loader:\n        doc = WriteDoc(Write.create_doc(loader))\n\n        doc.set_visible()\n        Lo.delay(300)  # small delay before dispatching zoom command\n        doc.zoom(ZoomKind.PAGE_WIDTH)\n\n        cursor = doc.get_cursor()\n        cursor.goto_end()  # make sure at end of doc before appending\n        cursor.append_para(text=\"Hello LibreOffice.\\n\")\n        Lo.delay(1_000)  # Slow things down so user can see\n\n        cursor.append_para(text=\"How are you?\")\n        Lo.delay(2_000)\n        tmp = Path.cwd() / \"tmp\"\n        tmp.mkdir(exist_ok=True, parents=True)\n        doc.save_doc(fnm=tmp / \"hello.odt\")\n        doc.close_doc()\n\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Border Styles to Cell Ranges\nDESCRIPTION: Shows how to apply multiple border styles to different cell ranges in a single document. Includes setting diagonal borders, clearing existing borders, and applying new styles within a document lock context.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\nfrom ooodev.format.calc.direct.cell.borders import BorderLineKind\n\n# ... other code\nwith doc:\n    # lock document controllers for fast processing and avoid flickering.\n    cell_rng = sheet.get_range(range_name=\"B2:F6\")\n    cell_rng.style_borders(\n        border_side=Side(color=CommonColor.BLUE_VIOLET, width=1.3),\n        diagonal_up=Side(color=CommonColor.RED),\n        diagonal_down=Side(color=CommonColor.RED),\n    )\n\n    cell_rng = sheet.get_range(range_name=\"C3:E5\")\n    cell_rng.style_borders_clear()\n    cell_rng.style_borders(\n        border_side=Side(color=CommonColor.BLUE),\n        horizontal=Side(line=BorderLineKind.DASH_DOT_DOT, color=CommonColor.GREEN),\n        vertical=Side(line=BorderLineKind.DOUBLE, color=CommonColor.RED),\n    )\n```\n\n----------------------------------------\n\nTITLE: Sheet Name Management Methods\nDESCRIPTION: Static methods for getting and setting sheet names in a Calc document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_sheet_names(doc: XSpreadsheetDocument) -> Tuple[str, ...]:\n    sheets = doc.getSheets()\n    return sheets.getElementNames()\n\n@staticmethod\ndef set_sheet_name(sheet: XSpreadsheet, name: str) -> bool:\n    xnamed = Lo.qi(XNamed, sheet)\n    if xnamed is None:\n        Lo.print(\"Could not access spreadsheet\")\n        return False\n    xnamed.setName(name)\n    return True\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Text Styles with XStyleFamiliesSupplier in Python\nDESCRIPTION: This snippet demonstrates the steps involved in accessing and modifying text styles using the LibreOffice API in Python. It utilizes the XStyleFamiliesSupplier to retrieve style families and subsequently modifies a specific style within a style family. Essential dependencies include 'Lo' for casting objects to appropriate interfaces. The snippet focuses on accessing 'Standard' style within 'ParagraphStyles'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# 1. get the style families\nxsupplier = Lo.qi(XStyleFamiliesSupplier, doc)\nname_acc = xsupplier.getStyleFamilies()\n\n# 2. get the paragraph style family\npara_style_con = Lo.qi(XNameContainer, name_acc.getByName(\"ParagraphStyles\"))\n\n# 3. get the 'standard' style (property set)\nstandard_props = Lo.qi(XPropertySet, para_style_con.getByName(\"Standard\"))\n```\n\n----------------------------------------\n\nTITLE: Reporting Template Directories and Files in Python\nDESCRIPTION: This code snippet retrieves and prints the directories Office examines when looking for templates, and lists the files within the default slide template directory. It uses `Info.get_dirs` to obtain template directories and `Draw.get_slide_template_path` for the default directory. The function prints the directories and lists the template files found in the default directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"# in points_builder.py\ndef _report_templates(self) -> None:\n    template_dirs = Info.get_dirs(setting=\\\"Template\\\")\n    print(\\\"Templates dir:\\\")\n    for dir in template_dirs:\n        print(f\\\"  {dir}\\\")\n\n    template_dir = Draw.get_slide_template_path()\n    print()\n    print(f'Templates files in \\\"{template_dir}\\\"')\n    template_fnms = FileIO.get_file_paths(template_dir)\n    for fnm in template_fnms:\n        print(f\\\"  {fnm}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Automating Slide Show Progression in Impress\nDESCRIPTION: This snippet demonstrates an automated slide show in Impress, eliminating the need for user interactions to progress between slides. It sets up transitions for slides and manages properties for an automatic change between slides.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter18.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# in auto_show.py\ndef main(self) -> None:\n    loader = Lo.load_office(Lo.ConnectPipe())\n\n    try:\n        doc = ImpressDoc(Lo.open_doc(self._fnm, loader))\n\n        # slideshow start() crashes if the doc is not visible\n        doc.set_visible()\n\n        # set up a fast automatic change between all the slides\n        slides = doc.get_slides_list()\n        for slide in slides:\n            slide.set_transition(\n                fade_effect=self._fade_effect,\n                speed=AnimationSpeed.FAST,\n                change=DrawingSlideShowKind.AUTO_CHANGE,\n                duration=self._duration,\n            )\n\n        show = doc.get_show()\n        Props.show_obj_props(\"Slide Show\", show)\n        self._set_show_prop(show)\n        # Props.set(show, IsEndless=True, Pause=0)\n\n        Lo.delay(500)\n        Lo.dispatch_cmd(DrawViewDispatch.PRESENTATION)\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifyListener in Python\nDESCRIPTION: This code defines a `ModifyListener` class that implements the `XModifyListener` interface. It attaches to the document using `XModifyBroadcaster` and defines handlers for modifications, window closing, and disposing events. It uses `unohelper.Base` for UNO component implementation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ModifyListener(unohelper.Base, XModifyListener):\n    def __init__(self, out_fnm: PathOrStr) -> None:\n        super().__init__()\n        if out_fnm:\n            out_file = FileIO.get_absolute_path(out_fnm)\n            _ = FileIO.make_directory(out_file)\n            self._out_fnm = out_file\n        else:\n            self._out_fnm = \"\"\n        self.closed = False\n        loader = Lo.load_office(Lo.ConnectPipe())\n        self._doc = CalcDoc(Calc.create_doc(loader))\n\n        self._doc.set_visible()\n        self._sheet = self._doc.get_sheet(0)\n\n        # insert some data\n        self._sheet.set_col(\n            cell_name=\"A1\",\n            values=(\"Smith\", 42, 58.9, -66.5, 43.4, 44.5, 45.3),\n        )\n\n        mb = self._doc.qi(XModifyBroadcaster, True)\n        mb.addModifyListener(self)\n\n        # Event handlers are defined as methods on the class.\n        # However class methods are not callable by the event system.\n        # The solution is to create a function that calls the class method and pass that function to the event system.\n        # Also the function must be a member of the class so that it is not garbage collected.\n\n        def _on_window_closing(\n            source: Any, event_args: EventArgs, *args, **kwargs\n        ) -> None:\n            self.on_window_closing(source, event_args, *args, **kwargs)\n\n        self._fn_on_window_closing = _on_window_closing\n\n        # close down when window closes\n        self._twl = TopWindowListener()\n        self._twl.on(\"windowClosing\", _on_window_closing)\n\n    def on_window_closing(\n        self, source: Any, event_args: EventArgs, *args, **kwargs\n    ) -> None:\n        print(\"Closing\")\n        try:\n            self._doc.close_doc()\n            Lo.close_office()\n            self.closed = True\n        except Exception as e:\n            print(f\"  {e}\")\n\n    def modified(self, event: EventObject) -> None:\n        \"\"\"\n        is called when something changes in the object.\n\n        Due to such an event, it may be necessary to update views or controllers.\n\n        The source of the event may be the content of the object to which the listener\n        is registered.\n        \"\"\"\n        print(\"Modified\")\n        doc = Lo.qi(XSpreadsheetDocument, event.Source, True)\n        addr = Calc.get_selected_cell_addr(doc)\n        print(f\"  {Calc.get_cell_str(addr=addr)} = {self._sheet.get_val(addr=addr)}\")\n\n    def disposing(self, event: EventObject) -> None:\n        \"\"\"\n        gets called when the broadcaster is about to be disposed.\n\n        All listeners and all other objects, which reference the broadcaster\n        should release the reference to the source. No method should be invoked\n        anymore on this object ( including XComponent.removeEventListener() ).\n\n        This method is called for every listener registration of derived listener\n        interfaced, not only for registrations at XComponent.\n        \"\"\"\n        print(\"Disposing\")\n```\n\n----------------------------------------\n\nTITLE: Getting Document Text with XTextDocument\nDESCRIPTION: Retrieves text contents from a document by casting to XTextDocument and obtaining XText instance\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntext_doc = Lo.qi(XTextDocument, doc)\nxtext = text_doc.getText()\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Axis By Dimension\nDESCRIPTION: Retrieves a chart axis by dimension index with error handling. Returns the axis object or raises appropriate exceptions if errors occur.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nresult = coord_sys.getAxisByDimension(int(axis_val), idx)\nif result is None:\n    raise UnKnownError(\"None Value: getAxisByDimension() returned None\")\nreturn result\nexcept ChartError:\n    raise\nexcept Exception as e:\n    raise ChartError(\"Error getting Axis for chart\") from e\n```\n\n----------------------------------------\n\nTITLE: Configuring and Applying Footer Style\nDESCRIPTION: Creates a Footer object with specific settings like enabling the footer, sharing content between pages, setting height, spacing, and margins. Then applies this style to a Writer document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/footer.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfooter_style = Footer(\n    on=True,\n    shared_first=True,\n    shared=True,\n    height=10.0,\n    spacing=3.0,\n    spacing_dyn=True,\n    margin_left=1.5,\n    margin_right=2.0,\n    style_name=WriterStylePageKind.STANDARD,\n)\nfooter_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Get a Form by Index\nDESCRIPTION: Shows how to access a specific form within a Calc sheet using its index. The example checks if any forms exist and adds one if necessary. After ensuring at least one form is available, it retrieves the first form (index 0) from the draw page's forms collection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_forms.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> sheet = doc.sheets[0]\n>>> if len(sheet.draw_page.forms) == 0:\n...    sheet.draw_page.forms.add_form()\n>>> form = sheet.draw_page.forms[0]\n<ooodev.calc.CalcForm object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Running a Python script in LibreOffice APSO console\nDESCRIPTION: This Python code snippet demonstrates how to interact with a LibreOffice Writer document using the `ooodev` library within the APSO console. It defines a function `say_hello` that adds the text \"Hello World!\" to the current document at the cursor position.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\n    APSO python console [LibreOffice]\n    3.10.11 (main, Nov 10 2011, 15:00:00) [GCC 12.2.0]\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> from ooodev.write import WriteDoc\n    >>> def say_hello():\n    ...     doc = WriteDoc.from_current_doc()\n    ...     cursor = doc.get_cursor()\n    ...     cursor.append_para(text=\"Hello World!\")\n    ...\n    >>> say_hello()\n    >>>\n    \n```\n\n----------------------------------------\n\nTITLE: Setting Chart Border Line Properties - Python\nDESCRIPTION: This snippet showcases a single line of code that sets the border line properties of the chart. It utilizes the `style_border_line()` method of the `chart_doc` object to specify the color and width of the border.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n_ = chart_doc.style_border_line(color=StandardColor.GREEN_DARK3, width=2.2)\n```\n\n----------------------------------------\n\nTITLE: Setting Image Backgrounds for Chart Areas\nDESCRIPTION: Demonstrates applying preset image backgrounds to chart walls and floors using the Img class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.wall.area import Img as WallImg, PresetImageKind\n# ... other code\n\nwall_img = WallImg.from_preset(chart_doc, PresetImageKind.ICE_LIGHT)\nChart2.style_wall(chart_doc=chart_doc, styles=[wall_img])\n```\n\nLANGUAGE: python\nCODE:\n```\nfloor_img = WallImg.from_preset(chart_doc, PresetImageKind.MARBLE)\nChart2.style_floor(chart_doc=chart_doc, styles=[floor_img])\n```\n\n----------------------------------------\n\nTITLE: Applying Text Attributes to Data Series in Python\nDESCRIPTION: Demonstrates using the `style_text_attributes` method to set various text attribute options in a data series within the chart. It is vital to modify text styling like category names and legend symbols in charts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\nds.style_text_attributes(\n    show_category_name=True,\n    show_legend_symbol=True,\n    show_series_name=True,\n    auto_text_wrap=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart with Basic Wall Color in Python LibreOffice\nDESCRIPTION: Sets up basic chart formatting with wall coloring using the ooodev library. Demonstrates loading a document, accessing a chart, and applying background styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.wall.area import Color as WallColor\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart3d.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_DARK1, width=1.0)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_bdr_line])\n\n        wall_color = WallColor(color=StandardColor.DEFAULT_BLUE)\n        Chart2.style_wall(chart_doc=chart_doc, styles=[wall_color])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Iterating over Forms\nDESCRIPTION: Demonstrates how to iterate over the forms within a Calc sheet using a `for` loop. The example accesses the draw page's forms collection and iterates through each form, printing its name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_forms.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> sheet = doc.sheets[0]\n>>> for form in sheet.draw_page.forms:\n...     print(form.name)\nMyForm\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Transparency for Chart Legend in Python with OOoDev\nDESCRIPTION: This snippet illustrates how to set gradient transparency for a chart legend. It utilizes the style_area_transparency_gradient method from the OOoDev library and requires the gradient angle and intensity range parameters to function correctly. Proper error handling and setup of base colors for visibility are essential.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.intensity_range import IntensityRange\n# ... other code\n_ = legend.style_area_color(StandardColor.GREEN_LIGHT2)\n_ = legend.style_area_transparency_gradient(\n    angle=90, grad_intensity=IntensityRange(0, 100)\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Shadow using shadow_format in Python\nDESCRIPTION: This code snippet shows how to set the shadow properties of a table using the `shadow_format` property in OpenOffice Writer with Python and the ooodev library.  It configures the shadow color, location, transparency, and width to customize the table's shadow effect.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.units import UnitMM\nfrom ooo.dyn.table.shadow_location import ShadowLocation\n\n# ... other code\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.table_border2.left_line.color = StandardColor.BLUE_DARK2\ntable.table_border2.left_line.line_width = UnitPT(float(LineSize.THICK))\ntable.table_border2.left_line.line_style = BorderLineKind.SOLID\ntable.table_border2.right_line = table.table_border2.left_line\ntable.table_border2.top_line = table.table_border2.left_line\ntable.table_border2.bottom_line = table.table_border2.left_line\n\ntable.table_border2.vertical_line.color = StandardColor.GREEN_DARK1\ntable.table_border2.vertical_line.line_width = UnitPT(float(LineSize.THIN))\ntable.table_border2.vertical_line.line_style = BorderLineKind.SOLID\ntable.table_border2.horizontal_line = table.table_border2.vertical_line\n\ntable.shadow_format.color = StandardColor.BLUE_DARK2\ntable.shadow_format.location = ShadowLocation.BOTTOM_RIGHT\ntable.shadow_format.is_transparent = False\ntable.shadow_format.shadow_width = UnitMM(1.76)\n```\n\n----------------------------------------\n\nTITLE: Setting Scale Width/Height in Calc with Python\nDESCRIPTION: This snippet configures the scale for width and height of a Calc sheet using `ScalePagesWidthHeight`, specifying dimensions and applying them to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.sheet import ScalePagesWidthHeight, CalcStylePageKind\n\nstyle = ScalePagesWidthHeight(width=2, height=3, style_name=CalcStylePageKind.DEFAULT)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Converting Format to MIME Type for Image Export\nDESCRIPTION: Class method that converts a user-specified image format to the corresponding MIME type. It searches through the list of supported MIME types for a match with the specified format, defaulting to PNG if no match is found.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# in ImagesLo class\n@classmethod\ndef change_to_mime(cls, im_format: str) -> str:\n    names = cls.get_mime_types()\n    imf = im_format.lower().strip()\n    for name in names:\n        if imf in name:\n            print(f\"using mime type: {name}\")\n            return name\n    print(\"No matching mime type, so using image/png\")\n    return \"image/png\"\n```\n\n----------------------------------------\n\nTITLE: Processing Cell Ranges in Extract Numbers Script\nDESCRIPTION: Print cell range addresses and numerical data with formatting support\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nif cell_ranges is None:\n    print(\"No cell ranges found\")\nelse:\n    print(f\"Found cell ranges: {cell_ranges.getRangeAddressesAsString()}\")\n    print()\n    addresses = cell_ranges.getRangeAddresses()\n    print(f\"Cell Ranges: ({len(addresses)}):\\n\")\n    fl = FormatterTable(format=(\".2f\", \"<7\"))\n    fl.col_formats.append(\n        FormatTableItem(format=(\".0f\", \"<7\"), idxs_inc=(start_idx,))\n    )\n    for addr in addresses:\n        Calc.print_address(addr)\n        vals = sheet.get_float_array(range_name=Calc.get_range_str(addr))\n        print(\"WITH FORMATTING\")\n        Calc.print_array(vals, fl)\n```\n\n----------------------------------------\n\nTITLE: Accessing the First Row of a Sheet in LibreOffice Calc with Python\nDESCRIPTION: This snippet demonstrates how to obtain the first row of a spreadsheet using the XColumnRowRange interface. It retrieves all rows, treats them as an indexed container, and then accesses the first row as a cell range. This method provides low-level access to the sheet's rows.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# get the XColumnRowRange interface for the sheet\n# sheet is XSpreadsheet\ncr_range = Lo.qi(XColumnRowRange, sheet)\n\n# get all the rows\nrows = cr_range.getRows()\n\n# treat the rows as an indexed container\ncon = Lo.qi(XIndexAccess, rows)\n\n# access the first row as a cell range\nrow_range = Lo.qi(XCellRange, con.getByIndex(0));\n```\n\n----------------------------------------\n\nTITLE: Applying Text Properties to a Cell in Python\nDESCRIPTION: This snippet focuses on setting text properties to a specific cell in a Calc document using the Properties class to define how text should be wrapped and displayed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\nstyle = Properties(wrap_auto=True, hyphen_active=True, direction=TextDirectionKind.PAGE)\nCalc.set_val(value=\"Hello World! Sunny Day!\", cell=cell, styles=[style])\n```\n\n----------------------------------------\n\nTITLE: Querying Thesaurus and Printing Meanings in Python\nDESCRIPTION: This snippet demonstrates how to query the thesaurus for word meanings and print the results. It uses the XLinguServiceManager2 to get the thesaurus instance and then calls a custom print_meaning function to display the results.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nlingo_mgr = Lo.create_instance_mcf(\n    XLinguServiceManager2,\n    \"com.sun.star.linguistic2.LinguServiceManager\"\n    )\nif lingo_mgr is None:\n    print(\"No linguistics manager found\")\n    return 0\n\n# load thesaurus\nthesaurus = lingo_mgr.getThesaurus()\nWrite.spell_word(\"magisian\", speller)\nWrite.spell_word(\"ellucidate\", speller)\n```\n\n----------------------------------------\n\nTITLE: Applying Cell Protection to a Cell Range in Calc with Python\nDESCRIPTION: Code snippet showing how to apply specific cell protection settings to a range of cells. The example gets a range object and applies protection settings to all cells in the range simultaneously.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/cell_protection.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_rng = sheet.get_range(range_obj=rng)\ncell_rng.style_protection(\n    hide_all=False,\n    hide_formula=True,\n    protected=True,\n    hide_print=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Styling in Python\nDESCRIPTION: This code snippet demonstrates the setup required to open a Calc document, access a chart within the document, and prepare for styling its area. It utilizes the `ooodev` library to interact with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom pathlib import Path\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_area_color(StandardColor.GREEN_LIGHT2)\n        _ = chart_doc.style_border_line(color=StandardColor.GREEN_DARK3, width=0.7)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Adding Line Shadow to Shape in Python\nDESCRIPTION: This code snippet shows how to add a line shadow to a shape using the Shadow class from the ooodev library. It sets various properties of the shadow such as location, color, distance, blur, and transparency.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/shadow.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.line import Shadow, ShadowLocationKind\nfrom ooodev.utils.color import StandardColor\n# ... other code\n\nline = slide.draw_line(x1=x, y1=y, x2=x + width, y2=y + height)\nstyle = Shadow(\n    use_shadow=True,\n    location=ShadowLocationKind.TOP_RIGHT,\n    color=StandardColor.GRAY,\n    distance=2,\n    blur=1,\n    transparency=50,\n)\nstyle.apply(line.component)\n```\n\n----------------------------------------\n\nTITLE: Combining Ellipses with XShapeCombiner in Python\nDESCRIPTION: This method combines two ellipses using the XShapeCombiner interface of UNO, resulting in a single shape. It creates an XShapes instance, adds the ellipses, and then applies the combine function. The method requires a DrawPage and two XShapes and is useful when the ellipses overlap.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# _combine_ellipses() of grouper.py\ndef _combine_ellipses(self, slide: DrawPage[DrawDoc], s1: XShape, s2: XShape) -> None:\n    shapes = Lo.create_instance_mcf(\n        XShapes,\n        \"com.sun.star.drawing.ShapeCollection\",\n        raise_err=True,\n    )\n    shapes.add(s1)\n    shapes.add(s2)\n    combiner = slide.qi(XShapeCombiner, True)\n    combiner.combine(shapes)\n```\n\n----------------------------------------\n\nTITLE: Modifying Font in Calc Cell Style with Python\nDESCRIPTION: This snippet demonstrates how to connect to a LibreOffice instance, open a Calc document, and modify cell style font properties using the `FontOnly` class. It sets the font name to 'Consolas' and size to 14 for the default cell style. The necessary dependencies include the `uno` package and modules from `ooodev` such as `Calc`, `GUI`, and `Lo`. Inputs include style parameters like `name` and `size`, and it outputs modified document styles. Note the need for a running LibreOffice instance for remote connection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.cell.font import FontOnly, StyleCellKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        font_style = FontOnly(name=\"Consolas\", size=14, style_name=StyleCellKind.DEFAULT)\n        font_style.apply(doc)\n\n        style_obj = FontOnly.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\n        assert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Left) with Width using style_direct in Python\nDESCRIPTION: Creates a table and sets its alignment to left with specific margins and width using the style_direct approach. The code specifies spacing above and below the table along with a fixed width in millimeters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=False,\n    align=TableAlignKind.LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    width=UnitMM(60.0),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Slides to a Deck with Python\nDESCRIPTION: The 'ModifySlides' class demonstrates how to add slides to a presentation deck and manage visibility. It ensures files exist via 'FileIO', manages slide additions, and checks document types. Key functions include loading presentations, inserting slides, and handling user closure prompts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# in modify_slides.py\nclass ModifySlides:\n    def __init__(self, fnm: PathOrStr, im_fnm: PathOrStr) -> None:\n        _ = FileIO.is_exist_file(fnm=fnm, raise_err=True)\n        _ = FileIO.is_exist_file(fnm=im_fnm, raise_err=True)\n        self._fnm = FileIO.get_absolute_path(fnm)\n        self._im_fnm = FileIO.get_absolute_path(im_fnm)\n\n    def main(self) -> None:\n        loader = Lo.load_office(Lo.ConnectPipe())\n\n        try:\n            doc_component = Lo.open_doc(self._fnm, loader)\n\n            # slideshow start() crashes if the doc is not visible\n\n            if not Info.is_doc_type(obj=doc_component, doc_type=Lo.Service.IMPRESS):\n                print(\"-- Not a slides presentation\")\n                Lo.close_office()\n                return\n\n            doc = ImpressDoc(doc_component)\n            doc.set_visible()\n\n            slides = doc.get_slides()\n            num_slides = slides.get_count()\n            print(f\"No. of slides: {num_slides}\")\n\n            # add a title-only slide with a graphic at the end\n            last_page = ImpressPage(\n                owner=doc, component=slides.insert_new_by_index(num_slides)\n            )\n            last_page.title_only_slide(header=\"Any Questions?\")\n            last_page.draw_image(fnm=self._im_fnm)\n\n            # add a title/subtitle slide at the start\n            first_page = ImpressPage(owner=doc, component=slides.insert_new_by_index(0))\n            first_page.title_slide(\n                title=\"Interesting Slides\", sub_title=\"Brought to you by OooDev\"\n            )\n\n            Lo.delay(2000)\n            msg_result = MsgBox.msgbox(\n                \"Do you wish to close document?\",\n                \"All done\",\n                boxtype=MessageBoxType.QUERYBOX,\n                buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n            )\n            if msg_result == MessageBoxResultsEnum.YES:\n                doc.close_doc()\n                Lo.close_office()\n            else:\n                print(\"Keeping document open\")\n        except Exception:\n            Lo.close_office()\n            raise\n```\n\n----------------------------------------\n\nTITLE: Using TRANSPOSE Function with Arrays - Python\nDESCRIPTION: In this snippet, the `TRANSPOSE` function is shown. It involves passing a 2D array to the function after setting it in the Calc sheet, and then formatting the output for display.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# in calc_functions.py\narr = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nsheet.set_array(values=arr, name=\"A1\")\nLo.delay(500)\nrng = sheet.get_range(range_name=\"A1:C3\").get_cell_range()\ntrans_mat = doc.call_fun(\"TRANSPOSE\", rng)\n# add a little extra formatting\nfl = FormatterTable(format=(\".1f\", \">5\"))\nCalc.print_array(trans_mat, fl)\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Document in Python with OpenOffice\nDESCRIPTION: This snippet shows a simplified version of the Write.create_doc method, which creates a new text document using the OpenOffice API. It uses the Lo.create_doc method and casts the result to an XTextDocument interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef create_doc(loader: XComponentLoader) -> XTextDocument:\n    doc = Lo.qi(\n        XTextDocument,\n        Lo.create_doc(doc_type=Lo.DocTypeStr.WRITER, loader=loader),\n        True,\n    )\n    return doc\n```\n\n----------------------------------------\n\nTITLE: Applying Font Position Style Using ooodev in Python\nDESCRIPTION: This code snippet demonstrates how to apply a paragraph font position style using the ooodev library. It sets parameters like script kind (superscript), raise/lower amount, relative size, rotation, fit option, spacing, and style name. The snippet requires the ooodev library and a connection pipe for document manipulation. It opens the document, applies the style, and subsequently closes the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/font_position.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.font import FontPosition, FontScriptKind\nfrom ooodev.format.writer.modify.para.font import CharSpacingKind, StyleParaKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_font_style = FontPosition(\n            script_kind=FontScriptKind.SUPERSCRIPT,\n            raise_lower=12,\n            rel_size=80,\n            rotation=90,\n            fit=True,\n            spacing=CharSpacingKind.LOOSE,\n            style_name=StyleParaKind.STANDARD,\n        )\n        para_font_style.apply(doc)\n\n        style_obj = FontPosition.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Adding a pattern to a shape in LibreOffice Draw\nDESCRIPTION: This code snippet shows how to add a fill pattern to a shape using the ShapePattern class. It creates a rectangle and applies a preset 'SHINGLE' pattern to it.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/pattern.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Pattern as ShapePattern\nfrom ooodev.format.draw.direct.area import PresetPatternKind\n# ... other code\n\nrec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\nstyle = ShapePattern.from_preset(preset=PresetPatternKind.SHINGLE)\nstyle.apply(rec)\n```\n\n----------------------------------------\n\nTITLE: Setting Border Padding for Page Style in Calc\nDESCRIPTION: Demonstrates how to modify the padding between the content and the borders of a page in Calc. This code sets different padding values for each side of the default page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/bordes.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npadding_style = Padding(\n    left=5,\n    right=5,\n    top=3,\n    bottom=3,\n    style_name=CalcStylePageKind.DEFAULT,\n)\npadding_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Gradient on Legend in Python\nDESCRIPTION: This snippet explains how to create a custom gradient for a chart legend using the `ooodev` library. Involves specifying step count, style, angle, and gradient colors. Depends on `GradientStyle` and `ColorRange` classes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.utils.data_type.color_range import ColorRange\n# ... other code\n\n_ = legend.style_area_transparency_transparency(0)\n_ = legend.style_area_gradient(\n    step_count=64,\n    style=GradientStyle.SQUARE,\n    angle=45,\n    grad_color=ColorRange(StandardColor.BRICK_LIGHT1, StandardColor.TEAL_DARK1),\n)\n```\n\n----------------------------------------\n\nTITLE: Increasing Garlic Cost in LibreOffice Calc with Python\nDESCRIPTION: This function iterates through a sheet to find and update the cost for garlic entries by increasing the cost per pound by 5%. It utilizes styling to make costs bold and red, which requires the 'Font' and 'CommonColor' classes. Cell navigation and range processing rely on CalcSheet functions. Key inputs include the CalcSheet instance, and it returns the time taken for processing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# in garlic_secrets.py\ndef _increase_garlic_cost3(self, sheet: CalcSheet) -> int:\n    start_time = time.time()\n    row_count = 0\n    cell = sheet.get_cell(col=0, row=row_count)  # produce column\n    red_font = Font(b=True, color=CommonColor.RED)\n\n    used_rng = sheet.find_used_range_obj()\n    # operations can be preformed on RangeObj instances\n    rng_col1 = 1 - used_rng.get_col(0)  # omit the first row (header)\n    data = sheet.get_array(range_obj=rng_col1)\n    for row in data:\n        row_count += 1\n        if row[0] == \"Garlic\":\n            cell = sheet.get_cell(col=0, row=row_count)\n            _ = sheet.goto_cell(cell_obj=cell.cell_obj)\n            # change cost/pound column\n            cost_cell = sheet.get_cell(col=1, row=row_count)\n            # make the change more visible by making the text bold and red\n            cost_cell.set_val(1.05 * cost_cell.get_num(), [red_font])\n    end_time = time.time()\n    print(f\"Time to iterate over array: {end_time - start_time:.2f} seconds\")\n```\n\n----------------------------------------\n\nTITLE: Showing Shape Info with XShape in LibreOffice Draw using Python\nDESCRIPTION: This code snippet demonstrates how to access the shape's service name and z-order using the XShape interface in LibreOffice Draw. It retrieves the shape type using the inherited `getShapeType()` method from `XShapeDescriptor` and the z-order using a custom `get_zorder()` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n\"# in Draw class\n@classmethod\ndef show_shape_info(cls, shape: XShape) -> None:\n    print(f\"  Shape service: {shape.getShapeType()}; z-order: {cls.get_zorder(shape)}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell Number Format Properties from a Style\nDESCRIPTION: Demonstrates how to retrieve the number formatting properties from an existing cell style using the from_style static method. The code verifies that the style name matches what was expected.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/numbers.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Numbers.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\nassert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Get Chart Image from Spreadsheet\nDESCRIPTION: Method to retrieve a chart's graphic representation from a spreadsheet sheet\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter33.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_chart_image(cls, sheet: XSpreadsheet) -> XGraphic:\n    try:\n        chart_shape = cls.get_chart_shape(sheet)\n\n        graphic = Lo.qi(\n            XGraphic,\n            Props.get(chart_shape, \"Graphic\"),\n            True\n        )\n\n        tmp_fnm = FileIO.create_temp_file(\"png\")\n        ImagesLo.save_graphic(pic=graphic, fnm=tmp_fnm, im_format=\"png\")\n        im = ImagesLo.load_graphic_file(tmp_fnm)\n        FileIO.delete_file(tmp_fnm)\n        return im\n    except Exception as e:\n        raise ChartError(\"Error getting chart image\") from e\n```\n\n----------------------------------------\n\nTITLE: Calling Calc Functions for Calculation - Python\nDESCRIPTION: This snippet defines a static method `call_fun` in the `Calc` class that provides an interface to call Calc functions programmatically. It takes a function name and optional arguments, and returns the result of the function or prints an error message if the function cannot be invoked.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@staticmethod\ndef call_fun(func_name: str, *args: any) -> object:\n    args_len = len(args)\n    if args_len == 0:\n        arg = ()\n    else:\n        arg = args\n    try:\n        fa = Lo.create_instance_mcf(\n            XFunctionAccess, \"com.sun.star.sheet.FunctionAccess\", raise_err=True\n        )\n        return fa.callFunction(func_name.upper(), arg)\n    except Exception as e:\n        Lo.print(f\"Could not invoke function '{func_name.upper()}'\")\n        Lo.print(f\"    {e}\")\n    return None\n```\n\n----------------------------------------\n\nTITLE: Initializing Calc Document and Applying Font Styles in Python\nDESCRIPTION: This snippet demonstrates how to create a Calc document, set cell values, and apply font styles using the CalcDoc and Lo classes. It sets bold and colored text in cells A1 and B1.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.utils.color import CommonColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        a1 = sheet[\"A1\"]\n        a1.value = \"Hello\"\n        a1.style_font_general(\n            b=True, color=CommonColor.DARK_GREEN\n        )\n\n        b1 = a1.get_cell_right()\n        b1.value = \"World\"\n        b1.style_font_general(\n            b=True, u=True, color=CommonColor.DARK_GREEN\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Up Calc Document with Footer Border Styling\nDESCRIPTION: Creates a Calc document and applies footer styling with border configurations. The example shows how to enable footers with specific height, spacing, and margins, and then applies a double red border to the footer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/bordes.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format import Styler\nfrom ooodev.format.calc.modify.page.footer import Footer, CalcStylePageKind\nfrom ooodev.format.calc.modify.page.footer.borders import BorderLineKind, LineSize\nfrom ooodev.format.calc.modify.page.footer.borders import Padding, Shadow, Sides\nfrom ooodev.format.calc.modify.page.footer.borders import Sides, Side\nfrom ooodev.office.calc import Calc\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        footer_style = Footer(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=CalcStylePageKind.DEFAULT,\n        )\n        side = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\n        footer_sides_style = Sides(all=side, style_name=CalcStylePageKind.DEFAULT)\n        Styler.apply(doc, footer_style, footer_sides_style)\n\n        style_obj = Sides.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Name Conversions in ooodev Calc with Python\nDESCRIPTION: Illustrates a method to convert a cell name to a position coordinate using regular expressions. It interprets the alphabetical part as the column and the numerical part as the row in a spreadsheet. Returns a Point object upon success.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@classmethod\ndef get_cell_position(cls, cell_name: str) -> Point:\n    #  _rx_cell = re.compile(r\"([a-zA-Z]+)([0-9]+)\")\n    m = cls._rx_cell.match(cell_name)\n    if m:\n        ncolumn = cls.column_string_to_number(str(m.group(1)).upper())\n        nrow = cls.row_string_to_number(m.group(2))\n        return Point(ncolumn, nrow)\n    else:\n        raise ValueError(\"Not a valid cell name\")\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Chart Type\nDESCRIPTION: Searches for a specific chart type within a chart document. Useful for charts with multiple chart types like combination charts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef find_chart_type(\n    cls, chart_doc: XChartDocument, chart_type: ChartTypeNameBase | str\n) -> XChartType:\n    Info.is_type_enum_multi(\n        alt_type=\"str\", enum_type=ChartTypeNameBase, enum_val=chart_type, arg_name=\"chart_type\"\n    )\n    try:\n        srch_name = f\"com.sun.star.chart2.{str(chart_type).lower()}\"\n        chart_types = cls.get_chart_types(chart_doc)\n        for ct in chart_types:\n            ct_name = ct.getChartType().lower()\n            if ct_name == srch_name:\n                return ct\n    except Exception as e:\n        raise ChartError(f'Error Finding chart for \"{chart_type}\"') from e\n    raise NotFoundError(f'Chart for type \"{chart_type}\" was not found')\n```\n\n----------------------------------------\n\nTITLE: Applying Font Style to Legend in Calc Chart with Python\nDESCRIPTION: This snippet shows how to apply font style to the legend in a Calc chart.  It utilizes the `style_font` method of the `ChartLegend` class to set the font name and size, affecting the appearance of the legend in the chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n_ = legend.style_font(name=\\\"Liberation Sans Narrow\\\", size=13)\"\n```\n\n----------------------------------------\n\nTITLE: Applying Text Properties to a Range in Python\nDESCRIPTION: This snippet illustrates how to set the same text properties for a specific range of cells in a Calc document, leveraging the same Properties structure to apply styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\nstyle = Properties(wrap_auto=True, hyphen_active=True, direction=TextDirectionKind.PAGE)\nCalc.set_val(value=\"Hello World! Sunny Day!\", cell=cell, styles=[style])\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Paragraph Style in Python with OOoDEV\nDESCRIPTION: This code demonstrates how to initialize a new paragraph style, apply it to a text range, and append text to the document using the OOoDEV library. The paragraph style is defined with specific font, spacing, line spacing, and background color attributes. Required dependencies include the OOoDEV modules for formatting and document handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/para.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom com.sun.star.text import XTextDocument\n\nfrom ooodev.format.writer.direct.char.font import Font\nfrom ooodev.format.writer.direct.para.area import Color as ParaBgColor\nfrom ooodev.format.writer.direct.para.indent_space import Spacing, LineSpacing, ModeKind\nfrom ooodev.format.writer.style import Para as StylePara\nfrom ooodev.office.write import Write\nfrom ooodev.units import UnitMM\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n        new_style_name = \"CoolParagraph\"\n        if not create_para_style(doc, new_style_name):\n            raise RuntimeError(f\"Could not create new paragraph style: {new_style_name}\")\n\n        # get the XTextRange of the document\n        xtext_range = doc.getText().getStart()\n        # Load the paragraph style and apply it to the text range.\n        para_style = StylePara(new_style_name)\n        para_style.apply(xtext_range)\n\n        cursor = Write.get_cursor(doc)\n        Write.append_para(cursor=cursor, text=p_txt)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\ndef create_para_style(doc: XTextDocument, style_name: str) -> bool:\n    try:\n\n        # font style for the paragraph.\n        font = Font(\n            name=\"Liberation Serif\", size=12.0, color=StandardColor.PURPLE_DARK2, b=True\n        )\n\n        # spacing below paragraph\n        spc = Spacing(below=UnitMM(4))\n\n        # paragraph line spacing\n        ln_spc = LineSpacing(mode=ModeKind.FIXED, value=UnitMM(6))\n\n        # paragraph background color\n        bg_color = ParaBgColor(color=StandardColor.GREEN_LIGHT2)\n\n        _ = Write.create_style_para(\n            text_doc=doc,\n            style_name=style_name,\n            styles=[font, spc, ln_spc, bg_color]\n        )\n\n        return True\n\n    except Exception as e:\n        print(\"Could not set paragraph style\")\n        print(f\"  {e}\")\n    return False\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Executing and Reporting Solver Results in Python\nDESCRIPTION: This snippet executes the solver's `solve()` method and then calls `Calc.solver_report()` to print the results. It demonstrates how to run the solver and retrieve a human-readable report of the solution, printing the values of the objective function and variables.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n\"# in linear_solve.py\nsolver.solve()\nCalc.solver_report(solver)\ndoc.close_doc()\"\n```\n\n----------------------------------------\n\nTITLE: Getting Paragraph Style from Cursor in Python with OOoDEV\nDESCRIPTION: In this code snippet, the paragraph style is retrieved from a specific cursor position in the document and asserted if it matches a previously defined style name. This functionality is helpful for verifying the style applied to a certain section in a document. It requires the corresponding OOoDEV modules for style manipulation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/para.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.style import Para as StylePara\n# ... other code\n\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\npara_style = StylePara.from_obj(para_cursor)\n# assert name of paragraph style is CoolParagraph\nassert para_style.prop_name == new_style_name\n\n# ... other code\n```\n\n----------------------------------------\n\nTITLE: Applying Different Colors to Top/Bottom and Left/Right Borders in Calc\nDESCRIPTION: This snippet demonstrates how to apply different colors and widths to the top/bottom and left/right borders of a cell using multiple Side instances.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\nside_top_bottom = Side(color=CommonColor.CHARTREUSE, width=1.3)\nside_left_right = Side(color=CommonColor.ROYAL_BLUE, width=1.3)\ncell.style_borders(\n    top=side_top_bottom,\n    bottom=side_top_bottom,\n    left=side_left_right,\n    right=side_left_right,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing the First Row of a Sheet (Simplified) in LibreOffice Calc with Python\nDESCRIPTION: This snippet demonstrates a simplified way to access the first row of a spreadsheet using the Calc.get_row_range() method.  This approach hides the details of using the XColumnRowRange interface, providing a more convenient way to retrieve the row.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrow_range = Calc.get_row_range(sheet, 0);\n```\n\n----------------------------------------\n\nTITLE: Initializing ModifyListenerAdapter for Window Closing\nDESCRIPTION: This snippet defines the constructor `__init__` for the ModifyListenerAdapter class, which sets up a listener to manage events related to the application's close box. It creates an instance of `TopWindowEvents` to trigger a callback function when the window is closing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in modify_listener_adapter.py\n# close down when window closes\ndef __init__(self, out_fnm: PathOrStr) -> None:\n    # ... other code\n    self._fn_on_window_closing = self.on_window_closing\n    self._top_win_ev = TopWindowEvents(add_window_listener=True)\n    self._top_win_ev.add_event_window_closing(self._fn_on_window_closing)\n    # ... other code\n```\n\n----------------------------------------\n\nTITLE: Applying Line Properties to Chart Legend in Python\nDESCRIPTION: This snippet shows how to apply line properties to a chart legend using the LegendLineProperties class from the ooodev library. It sets the color, width, and transparency of the legend border.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.borders import LineProperties as LegendLineProperties\n# ... other code\n\nlegend_line_style = LegendLineProperties(color=StandardColor.BRICK, width=0.8, transparency=20)\nChart2.style_legend(chart_doc=chart_doc, styles=[legend_line_style])\n```\n\n----------------------------------------\n\nTITLE: Scaling and Adding an Image Link in Python\nDESCRIPTION: This snippet combines getting the image size and adding an image link to scale an image. It retrieves the image size using `ImagesLo.get_size_100mm`, calculates new width and height values based on a scaling factor (1.5 in this case), and then adds the image link with the new dimensions using `Write.add_image_link`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimg_size = ImagesLo.get_size_100mm(im_fnm=im_fnm)\n\n# enlarge by 1.5x\nh = round(img_size.Height * 1.5)\nw = round(img_size.Width * 1.5)\nWrite.add_image_link(doc, cursor, im_fnm, w, h)\n```\n\n----------------------------------------\n\nTITLE: Getting Data Provider in Python\nDESCRIPTION: This code snippet retrieves the data provider (XDataProvider) from the chart document. The data provider is then used to convert the chart's data range into an XDataSource.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n        # part of Chart2.insert_chart()...\n        dp = chart_doc.getDataProvider() # XDataProvider\n```\n\n----------------------------------------\n\nTITLE: Setting Up Calc Document and Applying Cell Background Color\nDESCRIPTION: This snippet shows how to create a Calc document, set up a cell with a value, and apply a background color to it. It uses the CalcDoc class to create a document and the style_area_color method to set the background color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/background.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        cell = sheet[\"A1\"]\n        cell.value = \"Hello\"\n        cell.style_area_color(StandardColor.BLUE_LIGHT2)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Creating a Stock Chart in LibreOffice Calc with Python\nDESCRIPTION: This Python code snippet illustrates how to create a stock chart in LibreOffice Calc, retrieving data from a specific range. It sets the chart title, x-axis title, and two y-axis titles, customizing their rotation. It adjusts the second y-axis scale to improve the chart's readability.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"# Chart2View._happy_stock_chart() in chart_2_views.py\ndef _happy_stock_chart(\n    self, doc: XSpreadsheetDocument, sheet: XSpreadsheet\n) -> XChartDocument:\n    # draws a fancy stock chart\n    # uses the \\\"Happy Systems (HASY)\\\" table\n\n    range_addr = Calc.get_address(sheet=sheet, range_name=\\\"A86:F104\\\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\\\"A105\\\",\n        width=25,\n        height=14,\n        diagram_name=ChartTypes.Stock.TEMPLATE_VOLUME.STOCK_VOLUME_OPEN_LOW_HIGH_CLOSE,\n    )\n    Calc.goto_cell(cell_name=\\\"A105\\\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\\\"A85\\\")\n    )\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\\\"A86\\\")\n    )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\\\"B86\\\")\n    )\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n    Chart2.set_y_axis2_title(chart_doc=chart_doc, title=\\\"Stock Value\\\")\n    Chart2.rotate_y_axis2_title(chart_doc=chart_doc, angle=Angle(90))\n\n    Chart2.set_data_point_labels(\n        chart_doc=chart_doc, label_type=DataPointLabelTypeKind.NONE\n    )\n    # Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n\n    # change 2nd y-axis min and max; default is poor ($0 - $20)\n    y_axis2 = Chart2.get_y_axis2(chart_doc)\n    sd = y_axis2.getScaleData()\n    # Chart2.print_scale_data(\\\"Secondary Y-Axis\\\", sd)\n    sd.Minimum = 83\n    sd.Maximum = 103\n    y_axis2.setScaleData(sd)\n\n    # more stock chart code; explained in a moment...\n    # ...\"\n```\n\n----------------------------------------\n\nTITLE: Getting View Cursor from Text Document\nDESCRIPTION: Method to obtain a view cursor from a text document through the document's controller and cursor supplier. Handles error cases and null cursor checks.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_view_cursor(text_doc: XTextDocument) -> XTextViewCursor:\n    try:\n        model = Lo.qi(XModel, text_doc, True)\n        xcontroller = model.getCurrentController()\n        supplier = Lo.qi(XTextViewCursorSupplier, xcontroller, True)\n        vc = supplier.getViewCursor()\n        if vc is None:\n            raise Exception(\"Supplier return null view cursor\")\n        return vc\n    except Exception as e:\n        raise ViewCursorError(str(e)) from e\n```\n\n----------------------------------------\n\nTITLE: Applying a Fill Shape Gradient\nDESCRIPTION: This snippet shows how to add a fill gradient to a shape by using the ShapeGradient class and applying a preset gradient. It demonstrates retrieving the gradient preset and applying it to the rectangle defined in the drawing document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/gradient.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.area import Color as ShapeColor\n# ... other code\n\nstyle = ShapeGradient.from_preset(preset=PresetGradientKind.DEEP_OCEAN)\nstyle.apply(rect)\npage.add(rect)\n```\n\n----------------------------------------\n\nTITLE: Applying Image to Chart Subtitle in Python\nDESCRIPTION: This snippet demonstrates how to apply an image style to a chart subtitle using the Chart2.style_subtitle() method. It assumes a 'title_img' object has been previously defined.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nChart2.style_subtitle(chart_doc=chart_doc, styles=[title_img])\n```\n\n----------------------------------------\n\nTITLE: Setting Character Border Sides in Writer\nDESCRIPTION: Code snippet that demonstrates how to create and apply border sides settings to a character style in Writer. It creates a Side object with double line type, red color, and medium width.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nside = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\nsides_style = Sides(border_side=side, style_name=StyleCharKind.EXAMPLE)\nsides_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Generating a Bar Chart in Python\nDESCRIPTION: The '_bar_chart' method generates a bar chart using data from a specified cell range in a sheet. It sets the chart's dimensions, the diagram type to a stacked bar, and configures titles for the chart and axes. The x-axis is rotated to be vertical for visual clarity.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n        # Chart2View._bar_chart() in chart_2_views.py\n        def _bar_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n            # uses \"Sneakers Sold this Month\" table\n            range_addr = Calc.get_address(sheet=sheet, range_name=\"A2:B8\")\n            chart_doc = Chart2.insert_chart(\n                sheet=sheet,\n                cells_range=range_addr,\n                cell_name=\"B3\",\n                width=15,\n                height=11,\n                diagram_name=ChartTypes.Bar.TEMPLATE_STACKED.BAR,\n            )\n            Calc.goto_cell(cell_name=\"A1\", doc=doc)\n\n            Chart2.set_title(\n                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A1\")\n            )\n            Chart2.set_x_axis_title(\n                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A2\")\n            )\n            Chart2.set_y_axis_title(\n                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"B2\")\n            )\n            # rotate x-axis which is now the vertical axis\n            Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n            return chart_doc\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving View Panes in Calc (Python)\nDESCRIPTION: This method retrieves all view panes in a Calc document using the XIndexAccess and XViewPane interfaces, returning them as a list of XViewPane objects.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_view_panes(cls, doc: XSpreadsheetDocument) -> List[XViewPane] | None:\n    con = Lo.qi(XIndexAccess, cls.get_controller(doc))\n    if con is None:\n        raise MissingInterfaceError(XIndexAccess, \"Could not access the view pane container\")\n\n    panes = []\n    for i in range(con.getCount()):\n        try:\n            panes.append(Lo.qi(XViewPane, con.getByIndex(i)))\n        except UnoException:\n            Lo.print(f\"Could not get view pane {i}\")\n    if len(panes) == 0:\n        Lo.print(\"No view panes found\")\n        return None\n    return panes\n```\n\n----------------------------------------\n\nTITLE: Appending Document Slides to Destination Deck\nDESCRIPTION: Method that appends slides from a source document to a destination slide deck. It sets up the source document controller and frame references, switches to slide sorter view, and calls _append_slides() to perform the actual copying.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# in AppendSlides of append_slides.py\ndef _append_doc(self, to_slides: XDrawPages, doc: XComponent) -> None:\n    # Append doc to the end of  toSlides.\n    # Access the slides in the document, and the document's controller and frame refs.\n    # Switch to slide sorter view so that slides can be copied.\n    GUI.set_visible(is_visible=True, odoc=doc)\n\n    from_ctrl = GUI.get_current_controller(doc)\n    from_frame = GUI.get_frame(doc)\n    Lo.dispatch_cmd(cmd=\"DiaMode\", frame=from_frame)\n    try:\n        from_slides = Draw.get_slides(doc)\n        print(\"- Adding slides\")\n        self._append_slides(\n            to_slides=to_slides, from_slides=from_slides,\n            from_ctrl=from_ctrl, from_frame=from_frame\n        )\n    except mEx.DrawPageMissingError:\n        print(\"- No Slides Found\")\n\n    # Lo.dispatchCmd(\"PageMode\");  // back to normal mode (not working)\n    Lo.dispatch_cmd(cmd=DrawDrawingDispatch.DRAWING_MODE)\n    Lo.close_doc(doc)\n    print()\n```\n\n----------------------------------------\n\nTITLE: Drawing Shapes on Master Page\nDESCRIPTION: Creates an ellipse and text on a master page with specified dimensions, position, and styling\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nellipse = master2.draw_ellipse(\n    x=5,\n    y=7,\n    width=round(sz.Width / 6),\n    height=round(sz.Height / 6),\n)\nellipse.component.FillColor = CommonColor.GREEN_YELLOW\n_ = master2.draw_text(\n    msg=\"Master Page 2\",\n    x=10,\n    y=15,\n    width=100,\n    height=10,\n    font_size=24,\n)\n```\n\n----------------------------------------\n\nTITLE: Saving a Document with Specified File Name and Format - Python\nDESCRIPTION: This code demonstrates how to save a document in a specified format by simply providing the name and extension of the file. It uses the method `Lo.save_doc`, which handles extension-to-filter name mapping for the document format.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nLo.save_doc(doc, \"foo.docx\") # save as a Word file\n```\n\n----------------------------------------\n\nTITLE: Creating Column and Line Combination Chart\nDESCRIPTION: Creates a combination chart with columns and line series from spreadsheet data. Sets chart properties including titles, axis labels and legend visibility.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef _col_line_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"E15:G21\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"B3\",\n        width=20,\n        height=11,\n        diagram_name=ChartTypes.ColumnAndLine.TEMPLATE_STACKED.COLUMN_WITH_LINE,\n    )\n    Calc.goto_cell(cell_name=\"A13\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E13\")\n    )\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E15\")\n    )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"F14\")\n    )\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n    Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n    return chart_doc\n```\n\n----------------------------------------\n\nTITLE: Combining Rectangles by Dispatching in UNO\nDESCRIPTION: The function combines two rectangles using dispatches to support multiple combining operations, including merge and subtract. It adds two rectangles to an XShapes collection and uses the combine_shape method. Requires a DrawPage, creates two rectangles, and combines them, outputting a PolyPolygonShape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in grouper.py\ndef _combine_rects(self, slide: DrawPage[DrawDoc]) -> DrawShape[DrawDoc]:\n    print()\n    print(\"Combining rectangles ...\")\n    r1 = slide.draw_rectangle(x=50, y=20, width=40, height=20)\n    r2 = slide.draw_rectangle(x=70, y=25, width=40, height=20)\n    shapes = Lo.create_instance_mcf(\n        XShapes, \"com.sun.star.drawing.ShapeCollection\", raise_err=True\n    )\n    shapes.add(r1.component)\n    shapes.add(r2.component)\n    comb = slide.owner.combine_shape(\n        shapes=shapes, combine_op=ShapeCombKind.COMBINE\n    )\n    return comb\n```\n\n----------------------------------------\n\nTITLE: Dispatching LibreOffice Commands\nDESCRIPTION: This snippet presents an example script that loads a document, sets it to read-only mode, and opens the LibreOffice Get Involved webpage using dispatch commands. It demonstrates how to use the `Lo.dispatch_cmd` method to execute commands within LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"#!/usr/bin/env python\n            # coding: utf-8\n            # region Imports\n            from __future__ import annotations\n            import argparse\n            import sys\n\n            from ooodev.loader.lo import Lo\n            from ooodev.gui import GUI\n\n            # endregion Imports\n\n            # region args\n            def args_add(parser: argparse.ArgumentParser) -> None:\n                parser.add_argument(\n                    \"-d\",\n                    \"--doc\",\n                    help=\"Path to document\",\n                    action=\"store\",\n                    dest=\"fnm_doc\",\n                    required=True,\n                )\n\n\n            # endregion args\n\n            # region Main\n            def main() -> int:\n                # create parser to read terminal input\n                parser = argparse.ArgumentParser(description=\"main\")\n\n                # add args to parser\n                args_add(parser=parser)\n\n                if len(sys.argv) <= 1:\n                    parser.print_help(sys.stderr)\n                    return 1\n\n                # read the current command line args\n                args = parser.parse_args()\n\n                fnm = args.fnm_doc\n                loader = Lo.load_office(Lo.ConnectPipe())\n                try:\n                    doc = Lo.open_doc(fnm=fnm, loader=loader)\n                    # breakpoint()\n                except Exception:\n                    print(f\"Could not open '{fnm}'\")\n                    Lo.close_office()\n                    raise SystemExit(1)\n\n                GUI.set_visible(is_visible=True, odoc=doc)\n                Lo.delay(3000)  # delay 3 seconds\n\n                # put doc into readonly mode\n                Lo.dispatch_cmd(\"ReadOnlyDoc\")\n                Lo.delay(1000)\n\n                # opens get involved webpage of LibreOffice in local browser\n                Lo.dispatch_cmd(\"GetInvolved\")\n\n                return 0\n\n\n            if __name__ == \"__main__\":\n                raise SystemExit(main())\n\n            # endregion main\"\"\n```\n\n----------------------------------------\n\nTITLE: Styling Chart Data Point Numbers\nDESCRIPTION: Formats a specific data point in a chart to display numbers as percentages with two decimal places. The code accesses the fourth data point from the first data series and applies percentage formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.i18n.number_format_index import NumberFormatIndexEnum\n# ... other code\nds = chart_doc.get_data_series()[0]\ndp = ds[3]\ndp.style_text_attributes(show_number_in_percent=True)\ndp.style_numbers_percent(\n    source_format=False,\n    num_format_index=NumberFormatIndexEnum.PERCENT_DEC2,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ooo-dev-tools with pip\nDESCRIPTION: This command uses pip to install the ooo-dev-tools package and its dependencies within the active virtual environment. It ensures that the necessary libraries for LibreOffice development are available.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\n    python -m pip install ooo-dev-tools\n    \n```\n\n----------------------------------------\n\nTITLE: Setting Border Sides for Paragraph Style in Python\nDESCRIPTION: This code snippet shows how to set border sides for a paragraph style. It creates a Side object with specific properties and applies it to all sides of the paragraph using the Sides class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/bordes.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nside = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\nsides_style = Sides(all=side, style_name=StyleParaKind.STANDARD)\nsides_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties with Left Alignment and Width Directly\nDESCRIPTION: This Python code snippet configures table properties such as alignment, above/below spacing, and width by directly applying styles using the `style_direct` method in LibreOffice Writer through `ooodev`. It sets the alignment to `FROM_LEFT` and specifies spacing and width.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntable = cursor.add_table(\n            name=\"My_Table\",\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n\n        table.style_direct.style_table_props(\n            relative=False,\n            align=TableAlignKind.FROM_LEFT,\n            above=UnitMM(2.0),\n            below=UnitMM(1.8),\n            width=UnitMM(60.0),\n        )\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Ranges in Python\nDESCRIPTION: Shows how to combine multiple ranges using chained '/' operators. The example combines four different ranges (A2:B4, C6:F8, J7:L14, K12:O22) into a single expanded range A2:O22.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>>\n>>> rng1 = RangeObj(col_start=\"A\", col_end=\"B\", row_start=2, row_end=4, sheet_idx=0)\n>>> rng2 = RangeObj(col_start=\"C\", col_end=\"F\", row_start=6, row_end=8, sheet_idx=0)\n>>> rng3 = RangeObj(col_start=\"J\", col_end=\"L\", row_start=7, row_end=14, sheet_idx=0)\n>>> rng4 = rng1 / rng2 / rng3 / \"K12:O22\"\n>>> str(rng4)\n'A2:O22'\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Legend Position in Python\nDESCRIPTION: This snippet focuses on the specific part of setting the legend position for a Chart2 object. It imports the necessary classes, creates a ChartLegendPosition object, and applies it to the chart using the style_legend method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/position.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.position_size import (\n    Position as ChartLegendPosition,\n    LegendPosition,\n    DirectionModeKind,\n)\n# ... other code\n\nlegend_pos = ChartLegendPosition(\n    pos=LegendPosition.PAGE_END, no_overlap=True, mode=DirectionModeKind.LR_TB\n)\nChart2.style_legend(chart_doc=chart_doc, styles=[legend_pos])\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Transparency for Chart Wall (Python)\nDESCRIPTION: This code demonstrates how to set a gradient transparency effect on a chart wall using `style_area_transparency_gradient`. It requires the `python_ooo_dev_tools` library and specifies an angle and intensity range for the gradient effect.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.intensity_range import IntensityRange\n\n# ... other code\nwall = chart_doc.first_diagram.wall\nwall.style_area_transparency_gradient(\n    angle=30,\n    grad_intensity=IntensityRange(0, 100),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Cell in Merged Range (Python)\nDESCRIPTION: This snippet demonstrates how to access a cell within a merged range using the Calc.get_cell method after merging cells with XMergeable.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsheet.get_cell(col=0, row=empty_row_num)\n```\n\n----------------------------------------\n\nTITLE: Applying Increased Size Border using ooodev in Python\nDESCRIPTION: This snippet demonstrates how to increase the width of the left and right borders on a cell range by setting the `width` parameter in the `Side` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        rng_obj = Calc.get_range_obj(\"B2:F6\")\n        cr = Calc.get_cell_range(sheet, rng_obj)\n        side_left_right = Side(color=CommonColor.GREEN, width=1.8)\n        borders = Borders(left=side_left_right, right=side_left_right)\n        Styler.apply(cr, borders)\n```\n\n----------------------------------------\n\nTITLE: Creating an Impress Document in Python\nDESCRIPTION: This Python code snippet defines a static method `create_impress_doc` within the `Draw` class. It utilizes the `Lo.create_doc` function to generate a new Impress document, explicitly setting the document type to `Lo.DocTypeStr.IMPRESS`.  The method requires an `XComponentLoader` instance as its input.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"# in the Draw class\\n@staticmethod\\ndef create_impress_doc(loader: XComponentLoader) -> XComponent:\\n    return Lo.create_doc(doc_type=Lo.DocTypeStr.IMPRESS, loader=loader)\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Through and Copying Slides\nDESCRIPTION: Method that cycles through slides in a source deck and copies each one to the destination deck. It processes each slide by calling _copy_to() to perform the actual copy and paste operation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# in AppendSlides of append_slides.py\ndef _append_slides(self,\n    to_slides: XDrawPages, from_slides: XDrawPages, from_ctrl: XController, from_frame: XFrame\n) -> None:\n    # Append fromSlides to the end of toSlides\n    # Loop through the fromSlides, copying each one.\n    for i in range(from_slides.getCount()):\n        from_slide = Draw.get_slide(from_slides, i)\n\n        # the copy will be placed after this slide\n        to_slide = Draw.get_slide(to_slides, to_slides.getCount() - 1)\n\n        self._copy_to(\n            from_slide=from_slide,\n            from_ctrl=from_ctrl,\n            from_frame=from_frame,\n            to_slide=to_slide,\n            to_ctrl=self._to_ctrl,\n            to_frame=self._to_frame,\n        )\n```\n\n----------------------------------------\n\nTITLE: Relative Positioning Using Style Object Method in Python\nDESCRIPTION: Through this code, a 'TableProperties' style object defines relative position and alignment properties for a table. Dependencies include 'TableProperties', 'CommonColor', 'TableAlignKind', 'UnitMM', 'Intensity', and a 'cursor' object. The properties are bundled in a styles array and utilized during table insertion via a cursor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\"My_Table\",\n    relative=True,\n    align=TableAlignKind.FROM_LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    left=Intensity(20),\n    width=Intensity(40),\n)\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Right) with Width using style_direct in Python\nDESCRIPTION: Creates a table with right alignment and a specific width using the style_direct approach. The code sets spacing above and below the table along with a fixed width in millimeters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=False,\n    align=TableAlignKind.RIGHT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    width=UnitMM(60.0),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plot Options for Chart Data Series in Python\nDESCRIPTION: Demonstrates how to set plot options for a chart's data series including missing value handling and cell visibility settings using the Plot class from ooodev library\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/options.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.options import Plot, MissingValueKind\n# ... other code\n\nplot_options = Plot(\n    chart_doc=chart_doc.component,\n    missing_values=MissingValueKind.USE_ZERO,\n    hidden_cell_values=False,\n)\nChart2.style_data_series(chart_doc=chart_doc.component, styles=[plot_options])\n```\n\n----------------------------------------\n\nTITLE: Adding RangeObj to RowObj\nDESCRIPTION: Shows how to add RangeObj to RowObj instance. Demonstrates transformation from F10:H15 to F8:H15.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.range_obj import RangeObj\nfrom ooodev.utils.data_type.row_obj import RowObj\n\nrng1 = RangeObj(col_start=\"F\", col_end=\"H\", row_start=10, row_end=15, sheet_idx=0) \nstr(rng1)\n'F10:H15'\nrng1.row_count \n6\nrng2 = RowObj.from_int(2) + rng1\nstr(rng2)\n'F8:H15'\nrepr(rng2)\n\"RangeObj(col_start='F', col_end='H', row_start=8, row_end=15, sheet_idx=0)\"\nrng2.row_count\n8\n```\n\n----------------------------------------\n\nTITLE: Assigning Pilot Field Orientation in Python\nDESCRIPTION: This snippet assigns a DataPilot field to a specific orientation, using the 'find_container_props' method to find field properties by name before setting their 'Orientation' to 'COLUMN'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# in PivotTable1._create_pivot_table()\nprops = Lo.find_container_props(con=fields, nm=\"Category\")\nProps.set(props, Orientation=DataPilotFieldOrientation.COLUMN)\n```\n\n----------------------------------------\n\nTITLE: Extracting Shapes from a Slide in Python\nDESCRIPTION: The `get_shapes` method extracts all shapes from a given slide and returns them as a list. It iterates through each shape, checking for their existence, and appends them to a list. The method inputs a slide object and outputs a list of `XShape` objects.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# in Draw Class (overload method, simplified)\n@classmethod\ndef get_shapes(cls, slide: XDrawPage) -> List[XShape]:\n    if slide.getCount() == 0:\n        Lo.print(\"Slide does not contain any shapes\")\n        return []\n\n    shapes: List[XShape] = []\n    for i in range(slide.getCount()):\n        shapes.append(Lo.qi(XShape, slide.getByIndex(i), True))\n    return shapes\n```\n\n----------------------------------------\n\nTITLE: Applying Transparency to Chart Wall (Python)\nDESCRIPTION: This code snippet applies transparency to the wall of a chart using the `style_area_transparency_transparency` method. It requires the chart document object from the `python_ooo_dev_tools` library and adjusts the transparency level to 30%.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\n# ... other code\nwall = chart_doc.first_diagram.wall\nwall.style_area_transparency_transparency(30)\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Document with Font Formatting\nDESCRIPTION: Sets up a LibreOffice Writer document and demonstrates basic font formatting including bold, red text, and underlined text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom ooodev.format.writer.direct.char.font import Font\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe(Lo.Options(verbose=True))):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.PAGE_WIDTH)\n        cursor = Write.get_cursor(doc)\n        ft_bold = Font(b=True)\n        Write.append(cursor=cursor, text=\"Have you \", styles=[ft_bold])\n        Write.append(\n            cursor=cursor,\n            text=\"RED\",\n            styles=[ft_bold, Font(color=CommonColor.DARK_RED)]\n        )\n        Write.append_para(\n            cursor=cursor, text=\" this?\", styles=[Font(b=True, i=True, u=True)]\n        )\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Adding Tabs via applying directly to Cursor\nDESCRIPTION: This code snippet demonstrates how to add tabs to a Writer document by directly applying them to the cursor. It uses the `Tabs` class to define tab properties such as position, alignment, and fill character, and then applies these properties to the current cursor position.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/tabs.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n        cursor = Write.get_cursor(doc)\n        tb = Tabs(position=11.3, align=TabAlign.LEFT, fill_char=FillCharKind.UNDER_SCORE)\n        Write.append_para(cursor=cursor, text=\\\"Some Paragraph\\\", styles=[tb])\n\n        tb = Tabs(position=12.0, align=TabAlign.DECIMAL)\n        tb.apply(cursor)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Popup Menu using PopupMenu in LibreOffice Python\nDESCRIPTION: Shows how to create a simple popup menu using PopupMenu class that displays an about dialog when clicked. Includes direct menu item insertion and event handling. Requires LibreOffice and ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/about_example.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any, cast, TYPE_CHECKING\nimport uno\nfrom com.sun.star.awt import Rectangle\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.gui.menu.popup_menu import PopupMenu\nfrom ooodev.loader import Lo\n\nif TYPE_CHECKING:\n    from com.sun.star.awt import MenuEvent\n    from ooodev.events.args.event_args import EventArgs\n\ndef on_menu_select(src: Any, event: EventArgs, menu: PopupMenu) -> None:\n    print(\"Menu Selected\")\n    me = cast(\"MenuEvent\", event.event_data)\n    command = menu.get_command(me.MenuId)\n    if command:\n        # check if command is a dispatch command\n        if menu.is_dispatch_cmd(command):\n            menu.execute_cmd(command)\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n\n        pm = PopupMenu.from_lo()\n        pm.insert_item(0, \"About\", 0, 0)\n        pm.set_command(0, \".uno:About\")\n        pm.add_event_item_selected(on_menu_select)\n\n        rect = Rectangle(100, 100, 100, 100)\n        doc.activate()\n        pm.execute(doc.get_frame().ComponentWindow, rect, 0)\n        # set a breakpoint here to see the popup menu.\n        assert pm\n    finally:\n        doc.close()\n        Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Applying Header Formatting in Python for LibreOffice Writer\nDESCRIPTION: This code demonstrates how to create and format a header in a Writer document, including setting font properties, header layout, and adding a background image.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# fragment from story creator\nfrom ooodev.format.writer.direct.char.font import Font\nfrom ooodev.format.writer.direct.page.header import Header\nfrom ooodev.format.writer.direct.page.header.area import Img, PresetImageKind\n# ...\n\n# header formatting\n# create a header font style with a size of 9 pt, italic and dark green.\nheader_font = Font(\n    name=Info.get_font_general_name(),\n    size=9.0,\n    i=True,\n    color=CommonColor.DARK_GREEN\n)\nheader_format = Header(\n    on=True,\n    shared_first=True,\n    shared=True,\n    height=13.0,\n    spacing=3.0,\n    spacing_dyn=True,\n    margin_left=1.5,\n    margin_right=2.0,\n)\n# create a header image from a preset\nheader_img = Img.from_preset(PresetImageKind.MARBLE)\n# Set header can be passed a list of styles to format the header.\ndoc.set_header(\n    text=f\"From: {fnm.name}\",\n    styles=[header_font, header_format, header_img],\n)\n\n# page format A4\n_ = doc.set_a4_page_format()\n_ = doc.set_page_numbers()\n```\n\n----------------------------------------\n\nTITLE: Calc.get_sheet Method\nDESCRIPTION: Retrieves a specific sheet from a spreadsheet document by its index.  It accesses the sheets collection and casts the sheet to the XSpreadsheet interface, raising an exception if access fails.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n        # in Calc class (overload method, simplified)\n        @staticmethod\n        def get_sheet(doc: XSpreadsheetDocument, index: int) -> XSpreadsheet:\n            try:\n                sheets = doc.getSheets()\n                xsheets_idx = Lo.qi(XIndexAccess, sheets, True)\n                sheet = Lo.qi(XSpreadsheet, xsheets_idx.getByIndex(index), raise_err=True)\n                return sheet\n            except Exception as e:\n                raise Exception(f\"Could not access spreadsheet: {index}\") from e\n```\n\n----------------------------------------\n\nTITLE: Column Data Setting Implementation in Calc Class\nDESCRIPTION: Implementation of set_col method in the Calc class that handles column data insertion. Uses cell position calculation and iterates through values to set individual cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef set_col(cls, sheet: XSpreadsheet, values: Column, cell_name: str) -> None:\n    pos = cls.get_cell_position(cell_name)\n    cls.set_col(sheet=sheet, value=values, col_start=pos.X, row_start=pos.Y)\n\n@classmethod\ndef set_col(cls, sheet: XSpreadsheet, values: Column, col_start: int, row_start: int) -> None:\n    cell_range = cls.get_cell_range(\n        sheet=sheet, col_start=col_start, row_start=y, col_end=x, row_end=y + val_len - 1\n    )\n    xcell: XCell = None\n    for val in range(val_len):\n        xcell = cls.get_cell(cell_range=cell_range, col=0, row=val)\n        cls.set_val(cell=xcell, value=values[val])\n```\n\n----------------------------------------\n\nTITLE: Drawing Multi-line Shapes Example\nDESCRIPTION: Example of creating crossed lines using draw_lines() method with x and y coordinate arrays.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nxs = (10, 30, 10, 30)\nys = (10, 100, 100, 10)\nslide.draw_lines(xs=xs, ys=ys)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Style from Cell in Calc\nDESCRIPTION: This example retrieves the style from a cell in LibreOffice Calc in Python by obtaining the XCell object and using CellStyle.from_obj to extract the style details. This method requires the ooodev library's calc and style cell functionalities.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/static/cell.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncell = Calc.get_cell(sheet=sheet, cell_obj=cell_obj)\n\nstyle_obj = CellStyle.from_obj(cell)\nassert style_obj.prop_name == str(StyleCellKind.ACCENT_1)\n```\n\n----------------------------------------\n\nTITLE: Setting Draw Indentation in Python\nDESCRIPTION: Example of creating a Draw document, adding a rectangle with text, and applying custom indentation settings. Uses the Indent class to set before, after and first line indentation values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/indent_space/indent.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\nfrom ooodev.format.draw.modify.indent_space import Indent\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n\n        style = Indent(\n            before=4.5,\n            after=5.5,\n            first=5.2,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(style)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Document with Alignment\nDESCRIPTION: Sets up a Writer document and demonstrates basic left alignment of a paragraph. Creates a new document, makes it visible, and appends a paragraph with left alignment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.writer.direct.para.alignment import Alignment, LastLineKind, ParagraphAdjust\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Write.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        cursor = Write.get_cursor(doc)\n        al = Alignment().align_left\n        Write.append_para(cursor=cursor, text=p_txt, styles=[al])\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Linking Diagram Data Source to Template in Python\nDESCRIPTION: This code snippet links the created data source to the chart template using the changeDiagramData method.  It passes in the diagram, data source, and any additional arguments to configure the link.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n        # part of Chart2.insert_chart()...\n        # add data source to chart template\n        args = Props.make_props(HasCategories=has_cats)\n        ct_template.changeDiagramData(diagram, ds, args)\n```\n\n----------------------------------------\n\nTITLE: Finding Shapes by Name in Draw Class - Python\nDESCRIPTION: This method finds a shape by its name within an XDrawPage. Dependencies include access to class methods get_shapes() and Props.get(). It requires the slide object and the shape's name as inputs, returning the shape object if found, or raising a ShapeMissingError if not. It assumes the slide contains at least one shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# in the draw class (simplified)\n@classmethod\ndef find_shape_by_name(cls, slide: XDrawPage, shape_name: str) -> XShape:\n    shapes = cls.get_shapes(slide)\n    sn = shape_name.casefold()\n    if not shapes:\n        raise ShapeMissingError(\"No shapes were found in the draw page\")\n\n    for shape in shapes:\n        nm = str(Props.get(shape, \"Name\")).casefold()\n        if nm == sn:\n            return shape\n    raise mEx.ShapeMissingError(f'No shape named \"{shape_name}\"')\n```\n\n----------------------------------------\n\nTITLE: Adjusting Search Descriptor Properties\nDESCRIPTION: This Python snippet demonstrates setting the SearchCaseSensitive property to False in a SearchDescriptor, allowing matches independent of letter casing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsrch_desc.setSearchString(phrase)\nProps.set(search_desc, SearchCaseSensitive=False, SearchWords=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Breaks in LibreOffice Writer using Python\nDESCRIPTION: This snippet shows how to set breaks in paragraphs within a LibreOffice Writer document using the `Breaks` class. It demonstrates adding a page break before paragraphs by applying the `BreakType.PAGE_BEFORE` break type. The placement and styling of breaks are managed through the cursor within the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/text_flow.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# ... other code\ncursor = Write.get_cursor(doc)\nWrite.append_para(cursor=cursor, text=\"Set Break in next paragraph...\")\ntf_breaks = Breaks(type=BreakType.PAGE_BEFORE, style=\"Right Page\")\nWrite.append_para(cursor=cursor, text=p_txt, styles=[tf_breaks])\n```\n\n----------------------------------------\n\nTITLE: Setting up Writer document and applying footer styles\nDESCRIPTION: This snippet demonstrates how to create a Writer document, set up a footer style, and apply a color to the footer area. It also shows how to retrieve the applied style from the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.header import Header, WriterStylePageKind\nfrom ooodev.format.writer.modify.page.area import Color as FooterAreaColor\nfrom ooodev.format import Styler\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        footer_style = Footer(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            spacing_dyn=True,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=WriterStylePageKind.STANDARD,\n        )\n        footer_color_style = HeaderAreaColor(\n            color=StandardColor.GOLD_LIGHT2, style_name=footer_style.prop_style_name\n        )\n        Styler.apply(doc, footer_style, footer_color_style)\n\n        style_obj = HeaderAreaColor.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal and Vertical Borders with Borders Class and apply() in Python\nDESCRIPTION: This snippet demonstrates how to use the `Borders` class to set horizontal and vertical borders and apply them to a table component. It defines a blue side for the outer border and a green side for the inner (horizontal and vertical) borders, then uses the `apply` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n\n        blue_side = Side(\n            line=BorderLineKind.SOLID, color=StandardColor.BLUE_DARK2, width=LineSize.THICK\n        )\n        green_side = Side(\n            line=BorderLineKind.SOLID, color=StandardColor.GREEN_DARK1, width=LineSize.THIN\n        )\n        bdr_style = Borders(\n            border_side=blue_side,\n            vertical=green_side,\n            horizontal=green_side,\n        )\n\n        bdr_style.apply(table.component)\n```\n\n----------------------------------------\n\nTITLE: Rotating Axis Labels in Python Stock Charts\nDESCRIPTION: This code rotates the x-axis labels by 45 degrees in a stock chart, using the Chart2 library. It makes the chart more readable by orienting text labels. Inputs include the chart document, and the output is a modified chart with rotated labels.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# part of _happy_stock_chart() in chart_2_views.py\n# ...\n# rotate the axis labels by 45 degrees\nx_axis = Chart2.get_x_axis(chart_doc)\nProps.set(x_axis, TextRotation=45)\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Line Style on Chart Y-Axis in Python\nDESCRIPTION: This snippet shows how to set the grid line style for the y-axis of a chart using the 'style_gird_line' method. It utilizes the 'ooodev' enums for line style and color, specifying a color 'RED' and line width '0.5' millimeters. This operation requires a chart document object initialized from 'ooodev'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/grid/line_properties.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_border_line import BorderLineKind\n\n# ... other code\nchart_doc.axis_y.style_gird_line(\n    style=BorderLineKind.CONTINUOUS,\n    color=StandardColor.RED,\n    width=0.5,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Text Highlighting\nDESCRIPTION: Demonstrates how to apply yellow-green highlighting to specific text in a Writer document using the Highlight class. Shows basic text manipulation with cursor positioning and style application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/highlight.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\nhl = Highlight(CommonColor.YELLOW_GREEN)\nWrite.append(cursor=cursor, text=\"Highlighting starts \")\npos = Write.get_position(cursor)\nWrite.append(cursor=cursor, text=\"here\", styles=[hl])\nWrite.append_para(cursor=cursor, text=\".\")\n```\n\n----------------------------------------\n\nTITLE: Adding Category Labels to Chart in Python\nDESCRIPTION: This Python code defines the `add_cat_labels` method, which adds category labels to a chart in LibreOffice Calc. It creates a labeled data sequence, assigns it the `CATEGORIES` role, and sets it as the scale data for the x-axis. It then labels the data points with these category values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# in Chart2 class\n@classmethod\ndef add_cat_labels(\n    cls, chart_doc: XChartDocument, data_label: str, data_range: str\n) -> None:\n    try:\n        dp = chart_doc.getDataProvider()\n        dl_seq = cls.create_ld_seq(\n            dp=dp,\n            role=DataRoleKind.CATEGORIES,\n            data_label=data_label,\n            data_range=data_range\n        )\n        axis = cls.get_axis(\n            chart_doc=chart_doc, axis_val=AxisKind.X, idx=0\n        )\n        sd = axis.getScaleData()\n        sd.Categories = dl_seq\n        axis.setScaleData(sd)\n\n        # abel the data points with these category values\n        cls.set_data_point_labels(\n            chart_doc=chart_doc, label_type=DataPointLabelTypeKind.CATEGORY\n        )\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error adding category lables\") from e\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Extensions in LibreOffice with Python\nDESCRIPTION: This code snippet illustrates how to list installed extensions in LibreOffice using the Python API. It obtains the package information provider (PIP) and iterates through the list of extensions, printing their ID, version, and location. The code depends on the Lo and Info modules and the XPackageInformationProvider interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"# in the Info class\n@classmethod\ndef list_extensions(cls) -> None:\n    try:\n        pip = cls.get_pip()\n    except MissingInterfaceError:\n        print(\"No package info provider found\")\n        return\n    exts_tbl = pip.getExtensionList()\n    print(\"\\nExtensions:\")\n    for i in range(len(exts_tbl)):\n        print(f\"{i+1}. ID: {exts_tbl[i][0]}\")\n        print(f\"   Version: {exts_tbl[i][1]}\")\n        print(f\"   Loc: {pip.getPackageLocation(exts_tbl[i][0])}\")\n        print()\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Error Bars into Chart Data Series with Python\nDESCRIPTION: This class method in Chart2 completes the setup for adding y-axis error bars by combining data sink creation, data sequence handling, and linking to the data series properties. It's a comprehensive implementation binding together various components to enable error bar visualization in charts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@classmethod\ndef set_y_error_bars(\n    cls, chart_doc: XChartDocument, data_label: str, data_range: str\n) -> None:\n    try:\n        error_bars_ps = Lo.create_instance_mcf(\n            XPropertySet, \"com.sun.star.chart2.ErrorBar\", raise_err=True\n        )\n        Props.set(\n            error_bars_ps,\n            ShowPositiveError=True,\n            ShowNegativeError=True,\n            ErrorBarStyle=ErrorBarStyle.FROM_DATA\n        )\n\n        # convert into data sink\n        # ...\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Categories in Chart Diagram Name in Python\nDESCRIPTION: This static method determines whether the diagram uses categories on the x-axis based on the diagram name. It checks if the name contains \"scatter\" or \"bubble\"; if so, it returns False, indicating no categories.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n        # in Chart2 class\n        @staticmethod\n        def has_categories(diagram_name: ChartTemplateBase | str) -> bool:\n            # Ensure diagram_name ChartTemplateBase | str\n            Info.is_type_enum_multi(\n                alt_type=\"str\", enum_type=ChartTemplateBase, enum_val=diagram_name, arg_name=\"diagram_name\"\n            )\n\n            dn = str(diagram_name).lower()\n            non_cats = (\"scatter\", \"bubble\")\n            for non_cat in non_cats:\n                if non_cat in dn:\n                    return False\n            return True\n```\n\n----------------------------------------\n\nTITLE: Inserting Timestamp into LibreOffice document using Python\nDESCRIPTION: This code snippet demonstrates how to insert a timestamp and a dynamic date/time field into a LibreOffice document. It uses `DateUtil.time_stamp()` to add a static timestamp string and `cursor.append_date_time()` to insert a text field that updates with the current date and time when the document is opened.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# code fragment from build doc\ncursor.append_para(\"\\nTimestamp: \" + DateUtil.time_stamp() + \"\\n\")\ncursor.append(\"Time (according to office): \")\ncursor.append_date_time()\ncursor.end_paragraph()\n```\n\n----------------------------------------\n\nTITLE: Adding Images to LibreOffice Calc Spreadsheet\nDESCRIPTION: Method to add an image to a spreadsheet using the XDrawPageSupplier interface. Demonstrates how to access the draw page and position an image.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ndef _add_picture(self, sheet: CalcSheet) -> None:\n    dp_sup = sheet.qi(XDrawPageSupplier, True)\n    page = dp_sup.getDrawPage()\n    x = 230 if self._add_chart else 125\n    Draw.draw_image(slide=page, fnm=self._im_fnm, x=x, y=32)\n\n    supplier = sheet.calc_doc.qi(XDrawPagesSupplier, True)\n    pages = supplier.getDrawPages()\n    print(f\"1. No. of draw pages: {pages.getCount()}\")\n\n    comp_doc = sheet.calc_doc.qi(XComponent, True)\n    print(f\"2. No. of draw pages: {Draw.get_slides_count(comp_doc)}\")\n```\n\n----------------------------------------\n\nTITLE: Using OooDev Extension with APSO Console in LibreOffice\nDESCRIPTION: This code demonstrates how to use the OooDev extension in LibreOffice through the APSO console. It imports OooDev modules, creates a document cursor, and appends text to the document using the MacroLoader context manager.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/guide_ooodev_oxt.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.macro.macro_loader import MacroLoader\n\nwith MacroLoader():\n    cursor = Write.get_cursor(Write.active_doc)\n    Write.append_para(cursor=cursor, text=\"Hello World!\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Menu in Calc using MenuApp\nDESCRIPTION: This snippet demonstrates how to create a custom menu in LibreOffice Calc using the MenuApp class. It shows how to access the Tools menu, create a new submenu with custom items, and insert it into the menu bar.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/create_a_menu_with_menu_app.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\nfrom ooodev.utils.kind.menu_lookup_kind import MenuLookupKind\n\ndoc = CalcDoc.create_doc(loader=loader, visible=True)\nmenu = doc.menu[MenuLookupKind.TOOLS] # or .menu[\".uno:ToolsMenu\"]\nitm = menu.items[\".uno:AutoComplete\"] # or .items[6]\n\nmenu_name = \".custom:my.custom_menu\"\nnew_menu = {\n    \"Label\": \"My Menu\",\n    \"CommandURL\": menu_name,\n    \"Submenu\": [\n        {\n            \"Label\": \"Execute macro...\",\n            \"CommandURL\": \"RunMacro\",\n            \"ShortCut\": \"Shift+Ctrl+Alt+E\",\n        },\n        {\n            \"Label\": \"My macro\",\n            \"CommandURL\": {\"library\": \"test\", \"name\": \"hello\"},\n            \"ShortCut\": {\"key\": \"Shift+Ctrl+Alt+F\", \"save\": True},\n        },\n    ],\n}\nif not menu_name in menu:\n    # only add the menu if it does not already exist\n    menu.insert(new_menu, after=itm.command, save=True)\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is in Range in Python\nDESCRIPTION: Demonstrates how to check if a cell is within a range using the 'in' operator. The example creates a range AA2:AB7 and checks if cell AA3 is within that range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>>\n>>> rng = RangeObj.from_range(\"AA2:AB7\")\n>>> print(\"AA3\" in rng)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Retrieving paragraph area color from a style in Writer\nDESCRIPTION: This snippet demonstrates how to retrieve the area color information from an existing paragraph style in the document. It uses the from_style class method to create a ParaStyleColor object from the Standard style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_color.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = ParaStyleColor.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document with Line Arrow Styles\nDESCRIPTION: Creates a Draw document and adds a line with custom arrow styles at both ends. Demonstrates setting up the document, creating a line, and applying arrow style properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/arrow_styles.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.line import ArrowStyles, GraphicArrowStyleKind\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 36\n        height = 36\n        x = round(width / 2)\n        y = round(height / 2)\n\n        line = slide.draw_line(x1=x, y1=y, x2=x + width, y2=y + height)\n        style = ArrowStyles(\n            start_line_name=GraphicArrowStyleKind.ARROW_LARGE,\n            start_line_center=True,\n            start_line_width=2.5,\n            end_line_name=GraphicArrowStyleKind.SQUARE_45,\n            end_line_center=False,\n            end_line_width=1.9,\n        )\n        style.apply(line.component)\n\n        f_style = ArrowStyles.from_obj(line.component)\n        assert f_style is not None\n        assert f_style.prop_start_line_name == GraphicArrowStyleKind.ARROW_LARGE.value\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Diagonal Border Up in Python\nDESCRIPTION: This snippet shows how to apply a diagonal-up border style within a cell range using the `Side` class. The example sets the color of the diagonal up border to red, affecting the specified range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\ncell_rng.style_borders(\n    border_side=Side(),\n    diagonal_up=Side(color=CommonColor.RED),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document with Shape Shadow\nDESCRIPTION: Creates a Draw document, adds a rectangle shape, and applies shadow formatting using the ShapeShadow class. Demonstrates complete setup including document creation, shape drawing, and shadow application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format.draw.direct.shadow import Shadow as ShapeShadow\nfrom ooodev.format.draw.direct.shadow import ShadowLocationKind\nfrom ooodev.office.draw import Draw\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Draw.create_draw_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_75_PERCENT)\n\n        slide = Draw.get_slide(doc)\n\n        width = 36\n        height = 36\n        x = int(width / 2)\n        y = int(height / 2) + 20\n\n        rect = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\n        style = ShapeShadow(\n            use_shadow=True,\n            location=ShadowLocationKind.BOTTOM_RIGHT,\n            blur=3,\n            color=StandardColor.GRAY_LIGHT2\n        )\n        style.apply(rect)\n\n        f_style = ShapeShadow.from_obj(rect)\n        assert f_style\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Border to a Specific Side of a Cell in Calc\nDESCRIPTION: This snippet demonstrates how to apply a border to a specific side (left in this case) of a cell using the style_borders() method with the Side class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell.style_borders(\n    left=Side(color=CommonColor.GREEN),\n)\n```\n\n----------------------------------------\n\nTITLE: Drawing Images with Python UNO\nDESCRIPTION: The overloaded `draw_image` methods in the Draw class deal with inserting images as `GraphicObjectShape` elements in a slide. The methods calculate image dimensions and positions before drawing on the slide. Dependencies include image size retrieval via the `ImagesLo` class and file handling for graphics initialization.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter14.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# represents draw_image() overloads in Draw Class (simplified)\n@classmethod\ndef draw_image(cls, slide: XDrawPage, fnm: PathOrStr) -> XShape:\n    slide_size = cls.get_slide_size(slide)\n    im_size = ImagesLo.get_size_100mm(fnm)\n    im_width = round(im_size.Width / 100)  # in mm units\n    im_height = round(im_size.Height / 100)\n    x = round((slide_size.Width - im_width) / 2)\n    y = round((slide_size.Height - im_height) / 2)\n    return cls.draw_image(slide=slide, fnm=fnm, x=x, y=y, width=im_width, height=im_height)\n\n@classmethod\ndef draw_image(\n    cls,\n    slide: XDrawPage,\n    fnm: PathOrStr,\n    x: int | UnitT,\n    y: int | UnitT,\n    width: int | UnitT,\n    height: int | UnitT\n) -> XShape:\n\n    # units in mm's\n    Lo.print(f'Adding the picture \"{fnm}\"')\n    im_shape = cls.add_shape(\n        slide=slide,\n        shape_type=DrawingShapeKind.GRAPHIC_OBJECT_SHAPE,\n        x=x,\n        y=y,\n        width=width,\n        height=height\n    )\n    cls.set_image(im_shape, fnm)\n    cls.set_line_style(shape=im_shape, style=LineStyle.NONE)\n    return im_shape\n\n```\n\nLANGUAGE: python\nCODE:\n```\n# represents draw_image() overload in Draw Class (simplified)\n@classmethod\ndef draw_image(\n    cls,\n    slide: XDrawPage,\n    fnm: PathOrStr,\n    x: int | UnitT,\n    y: int | UnitT,\n) -> XShape:\n    im_size = ImagesLo.get_size_100mm(fnm)\n    return cls.draw_image(\n        slide=slide,\n        fnm=fnm,\n        x=x,\n        y=y,\n        width=round(im_size.Width / 100),\n        height=round(im_size.Height / 100)\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Creating Donut Chart with Multiple Rings in LibreOffice Calc\nDESCRIPTION: Creates a donut chart with two rings from a data table. Sets chart title, subtitle showing ring descriptions, and displays legend. Uses the Annual Expenditure on Institutions table data.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef _donut_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n    # uses the \"Annual Expenditure on Institutions\" table\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"A44:C50\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"D43\",\n        width=15,\n        height=11,\n        diagram_name=ChartTypes.Pie.TEMPLATE_DONUT.DONUT,\n    )\n    Calc.goto_cell(cell_name=\"A48\", doc=doc)\n\n    Chart2.set_title(chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A43\"))\n    Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n    subtitle = (\n        f'Outer: {Calc.get_string(sheet=sheet, cell_name=\"B44\")}\\n'\n        f'Inner: {Calc.get_string(sheet=sheet, cell_name=\"C44\")}'\n    )\n    Chart2.set_subtitle(chart_doc=chart_doc, subtitle=subtitle)\n    return chart_doc\n```\n\n----------------------------------------\n\nTITLE: Setting Line Properties for Color and Style\nDESCRIPTION: Code to set line color to black and make it dashed using LineProperties service.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in _draw_Shapes()\nline1.component.LineColor = CommonColor.BLACK\nline1.set_dashed_line(is_dashed=True)\n```\n\n----------------------------------------\n\nTITLE: Setting X Title Font - Python\nDESCRIPTION: This static method sets the font name and point size for the x-axis title. It retrieves the text properties of the title and updates them accordingly while handling exceptions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@staticmethod\ndef set_x_title_font(xtitle: XTitle, font_name: str, pt_size: int) -> None:\n    try:\n        fo_strs = xtitle.getText()\n        if fo_strs:\n            Props.set_property(fo_strs[0], \"CharFontName\", font_name)\n            Props.set_property(fo_strs[0], \"CharHeight\", pt_size)\n    except Exception as e:\n        raise ChartError(\"Error setting x title font\") from e\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagram Properties in LibreOffice Calc\nDESCRIPTION: A simple utility function to display the current properties of a chart diagram object for debugging and inspection purposes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nProps.show_obj_props(\"Diagram\", diagram)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Left) with Width using styles in Python\nDESCRIPTION: Creates a table with left alignment, specific margins and width using the styles approach. Defines a TableProperties object that is passed to the add_table method to apply style properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\"My_Table\",\n    relative=False,\n    align=TableAlignKind.LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    width=UnitMM(60.0),\n)\n\ntable = cursor.add_table(\n    cursor=cursor,\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n    )\n```\n\n----------------------------------------\n\nTITLE: Connecting Using Cache in LibreOffice\nDESCRIPTION: This snippet provides an example of how to connect to LibreOffice using the Cache class. It illustrates the application of profile caching for single-session usage, ensuring that profiles are managed properly without affecting the user's main profile.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/conn/cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. include:: ../../resources/utils/lo_connect_socket_cache_ex.rst\n```\n\n----------------------------------------\n\nTITLE: Saving a File with Overwrite and Password Options - Python\nDESCRIPTION: This snippet saves a file using the LibreOffice API, with options to overwrite existing files and set a password. The snippet showcases the use of the `XStorable` interface to store the file at a specified URL with given properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsave_file_url = FileIO.fnm_to_url(fnm)\nstore_props = Props.make_props(Overwrite=True, FilterName=format, Password=password)\n\nstore = Lo.qi(XStorable, doc)\nstore.storeToURL(save_file_url, store_props);\n```\n\n----------------------------------------\n\nTITLE: Loading Popup Menu from JSON String in Python\nDESCRIPTION: Creates a popup menu by loading the configuration directly from a JSON string. Similar to loading from a file, but uses a string source instead, which might be useful when the JSON is dynamically generated or received from another source.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    # ...\n    creator = PopupCreator()\n    json_str = get_json_str()\n    menus = PopupCreator.json_loads(json_str)\n    pm = creator.create(menus)\n\n    pm.subscribe_all_item_selected(on_menu_select)\n    rect = Rectangle(100, 100, 100, 100)\n    doc.activate()\n    pm.execute(doc.get_frame().ComponentWindow, rect, 0)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Overriding Built-ins in DotDict in Python\nDESCRIPTION: Shows how to override built-in attributes in DotDict, which is possible but not recommended.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/helper/dot_dict.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nd = DotDict[str](a=\"hello\", keys=\"world\")\nprint(d.keys)  # \"world\" (not the keys() method)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Paragraph Style in LibreOffice Writer\nDESCRIPTION: Creates a new paragraph style with specified font, spacing, and line spacing properties. Uses Format classes to define style attributes and applies them using create_style_para method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef create_para_style(doc: WriteDoc, style_name: str) -> bool:\n    try:\n        # font 12 pt\n        font = Font(name=Info.get_font_general_name(), size=12.0)\n\n        # spacing below paragraphs\n        spc = Spacing(below=UnitMM(4))\n\n        # paragraph line spacing\n        ln_spc = LineSpacing(mode=ModeKind.FIXED, value=UnitMM(6))\n\n        _ = doc.create_style_para(style_name=style_name, styles=[font, spc, ln_spc])\n\n        return True\n\n    except Exception as e:\n        print(\"Could not set paragraph style\")\n        print(f\"  {e}\")\n    return False\n```\n\n----------------------------------------\n\nTITLE: Setting Border Shadow for Page Footer\nDESCRIPTION: This snippet shows how to set a border shadow for a page footer. It creates a Shadow object with specific color and width properties and applies it to the footer style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/bordes.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nshadow_style = Shadow(\n    color=StandardColor.BLUE_DARK2, width=1.5, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, footer_style, shadow_style)\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Chart Title in Python\nDESCRIPTION: This code snippet demonstrates how to apply font effects to the title of a chart in LibreOffice Calc. It retrieves the chart title and then uses `style_font_effect()` to apply color, underline, and shadow effects.  It depends on the `ooo` and `ooodev` libraries.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.font_underline import FontUnderlineEnum\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\n\n        # ... other code\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_font_effect(\n            color=StandardColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n            shadowed=True,\n        )\n```\n\n----------------------------------------\n\nTITLE: Initializing Calc Document and Applying Page Style\nDESCRIPTION: This code snippet demonstrates how to create a Calc document, make it visible, zoom in, apply a predefined paper format (A3 landscape) to the default page style, and then retrieve the style to verify its name. It utilizes the `ooodev` library for interacting with LibreOffice Calc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.page.page import PaperFormat, PaperFormatKind, CalcStylePageKind\n\n\n        def main() -> int:\n            with Lo.Loader(connector=Lo.ConnectSocket()):\n                doc = Calc.create_doc()\n                GUI.set_visible(True, doc)\n                Lo.delay(500)\n                Calc.zoom_value(doc, 100)\n\n                style = PaperFormat.from_preset(\n                    preset=PaperFormatKind.A3, landscape=False, style_name=CalcStylePageKind.DEFAULT\n                )\n                style.apply(doc)\n\n                style_obj = PaperFormat.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n                assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n\n                Lo.delay(1_000)\n                Lo.close_doc(doc)\n            return 0\n\n\n        if __name__ == \"__main__\":\n            SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Writer Paragraph Area Pattern in Python\nDESCRIPTION: This Python snippet demonstrates how to set a paragraph background pattern in OpenOffice Writer using the `Pattern` class from the `ooodev.format.writer.direct.para.area` module. It uses the `PresetPatternKind` enum to select a pattern preset, and `Write.append_para` is used to apply the pattern to text. Dependencies include `ooodev` modules such as `format`, `office`, `loader`, and `gui`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/pattern.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.format.writer.direct.para.area import Pattern, PresetPatternKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_100_PERCENT)\n        cursor = Write.get_cursor(doc)\n\n        pattern_style = Pattern.from_preset(PresetPatternKind.HORIZONTAL_BRICK)\n        Write.append_para(cursor=cursor, text=p_txt, styles=[pattern_style])\n\n        para_cursor = Write.get_paragraph_cursor(cursor)\n        para_cursor.gotoPreviousParagraph(False)\n        para_cursor.gotoEndOfParagraph(True)\n\n        text_para = cast(\"TextRangeContentProperties\", para_cursor)\n\n        para_img = Pattern.from_obj(text_para.TextParagraph)\n        assert para_img is not None\n\n        para_cursor.gotoEnd(False)\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Importing XML Class from ooodev_xml Package in Python\nDESCRIPTION: This code snippet demonstrates how to import the XML class from the ooodev_xml package after installation. This is the new import method following the relocation of the class to a separate package.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/xml_util.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev_xml.odxml import XML\n```\n\n----------------------------------------\n\nTITLE: Applying Font Styling to Chart2 Legend in Python\nDESCRIPTION: This snippet shows how to apply font styling to a chart legend using the LegendFontOnly class from the ooodev library. It sets the font name and size for the legend.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.font import FontOnly as LegendFontOnly\n\n# ... other code\nlegend_font_only_style = LegendFontOnly(name=\"Liberation Sans Narrow\", size=13)\nChart2.style_legend(chart_doc=chart_doc, styles=[legend_font_only_style])\n```\n\n----------------------------------------\n\nTITLE: Getting Font from Style in Draw with FontOnly in Python\nDESCRIPTION: This code snippet retrieves the font properties from an existing style in LibreOffice Draw using the FontOnly class from the ooodev library. It uses the `from_style` method to get the font style. It then asserts that the style name matches the expected value. The code relies on an existing Draw document and the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/font/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n\nf_style = FontOnly.from_style(\n    doc=doc.component,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\nassert f_style.prop_style_name == str(FamilyGraphics.DEFAULT_DRAWING_STYLE)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Regular Expression Search Property in Python\nDESCRIPTION: This snippet sets the property to enable regular expression searching on a search descriptor. It demonstrates accessing the XPropertySet to manipulate search descriptor properties. Ensure that the srch_desc is a valid search descriptor instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsrch_props = Lo.qi(XPropertySet, srch_desc, raise_err=True)\nsrch_props.setPropertyValue(\"SearchRegularExpression\", True)\n```\n\n----------------------------------------\n\nTITLE: Creating Regular Polygons in LibreOffice Draw with Python\nDESCRIPTION: Creates square and pentagon shapes using draw_polygon() method. Demonstrates setting shape properties like fill color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nsquare = slide.draw_polygon(x=125, y=125, sides=PolySides(4), radius=25)\nsquare.component.FillColor = CommonColor.LIGHT_GREEN\n\npentagon = slide.draw_polygon(x=150, y=75, sides=PolySides(5))\npentagon.component.FillColor = CommonColor.PURPLE\n```\n\n----------------------------------------\n\nTITLE: Adding Tabs via creating a paragraph\nDESCRIPTION: This code snippet demonstrates how to add a tab to a paragraph using the `Tabs` class and `Write.append_para`.  It sets the tab position, alignment, and fill character, and then appends a paragraph to the document with these tab settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/tabs.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n        cursor = Write.get_cursor(doc)\n        tb = Tabs(position=11.3, align=TabAlign.LEFT, fill_char=FillCharKind.UNDER_SCORE)\n        Write.append_para(cursor=cursor, text=\\\"Some Paragraph\\\", styles=[tb])\"\n```\n\n----------------------------------------\n\nTITLE: Applying character styles to specific words in LibreOffice Writer with Python\nDESCRIPTION: This code snippet shows how to apply a character style (Strong Emphasis) to a specific word in a sentence. It demonstrates cursor manipulation to select the word and apply the style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/char.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\nWrite.append(\n    cursor=cursor,\n    text=\"The quick fox jumped over the lazy dog.\",\n    styles=[StyleChar().quotation],\n)\n# select the word \"jumped\"\ncursor.goLeft(25, False)\ncursor.goRight(6, True)\nStyleChar(name=StyleCharKind.STRONG_EMPHASIS).apply(cursor)\ncursor.gotoEnd(False)\nWrite.end_paragraph(cursor)\n```\n\n----------------------------------------\n\nTITLE: Setting up and applying character styles in LibreOffice Writer with Python\nDESCRIPTION: This snippet demonstrates how to set up a LibreOffice Writer document, apply character styles to text, and manipulate the cursor. It uses the ooodev library to create a document, set visibility, apply styles, and close the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/char.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.style import Char as StyleChar, StyleCharKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Write.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        cursor = Write.get_cursor(doc)\n        Write.append(\n            cursor=cursor,\n            text=\"The quick fox jumped over the lazy dog.\",\n            styles=[StyleChar().quotation],\n        )\n        cursor.goLeft(25, False)\n        cursor.goRight(6, True)\n        StyleChar(name=StyleCharKind.STRONG_EMPHASIS).apply(cursor)\n        cursor.gotoEnd(False)\n        Write.end_paragraph(cursor)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Creating App Menu About Dialog using MenuApp Directly in Python\nDESCRIPTION: This code demonstrates a simpler approach to create an 'About' menu entry in the Tools menu using only the MenuApp class directly. It adds a menu entry that executes the standard LibreOffice about dialog command without the intermediate MACreator step.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/about_example.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import TYPE_CHECKING\nimport uno\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.utils.kind.menu_lookup_kind import MenuLookupKind\n\nif TYPE_CHECKING:\n    pass\n\ndef get_menu_data() -> list:\n    new_menu = [{\"Label\": \"About\", \"CommandURL\": \".uno:About\"}]\n    return new_menu\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        sheet = doc.sheets[0]\n        sheet[0, 0].value = \"Hello, World!\"\n\n        tools_menu = doc.menu[MenuLookupKind.TOOLS]\n\n        menu_data = get_menu_data()\n        for menu in menu_data[::-1]:\n            # insert the menus before the AutoComplete menu.\n            # loop in reverse to keep the order.\n            # save is set to false so that the menu is not saved to the configuration.\n            tools_menu.insert(menu=menu, after=\".uno:AutoComplete\", save=False)\n\n        # set breakpoint here to see the menu.\n        assert True\n    finally:\n        doc.close()\n        Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Comparing Column Objects in Python\nDESCRIPTION: Demonstrates various comparison operations between ColObj instances, integers (treated as one-based column numbers), and strings (treated as column names).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/col_obj.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.col_obj import ColObj\n>>> \n>>> a_col = ColObj('A')\n>>> c_col  = ColObj(\"C\") \n>>> c_col > a_col\n>>> \nTrue\n\n>>> c_col >= a_col \nTrue\n\n>>> c_col >= c_col \nTrue\n\n>>> c_col < a_col  \nFalse\n\n>>> a_col < c_col\nTrue\n\n>>> a_col > c_col \nFalse\n\n>>> c_col > \"B\"   \nTrue\n\n>>> c_col > \"C\" \nFalse\n\n>>> c_col >= \"C\"\nTrue\n\n>>> \"d\" > c_col \nTrue\n\n>>> c_col == 3 \nTrue\n\n>>> 4 < c_col  \nFalse\n```\n\n----------------------------------------\n\nTITLE: Basic Cell Alignment Setup in Python\nDESCRIPTION: Basic setup code for cell alignment examples, including imports and document creation with zoom settings. Shows how to create a new Calc document and apply basic text alignment to a cell.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.format.calc.direct.cell.alignment import HoriAlignKind, VertAlignKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        cell = sheet[\"A1\"]\n        cell.value = \"Hello\"\n        cell.style_align_text(\n            hori_align=HoriAlignKind.CENTER, vert_align=VertAlignKind.MIDDLE\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing LibreOffice Calc Document with Python OOO Dev Tools\nDESCRIPTION: Demonstrates establishing a socket connection to LibreOffice, creating a new Calc document, and properly cleaning up resources. Uses the Lo and Calc utility classes along with caching functionality for optimized performance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/utils/lo_connect_socket_cache_ex.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.conn.cache import Cache\nfrom ooodev.office.calc import Calc\n\nloader = Lo.load_office(connector=Lo.ConnectSocket(), cache_obj=Cache())\ndoc = Calc.create_doc(loader)\n# do work ...\nLo.close_doc(doc=doc)\nLo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Addition and Subtraction Operations with CellObj in Python\nDESCRIPTION: Demonstrates arithmetic operations for cell navigation including adding/subtracting integers for row movement and strings for column movement. Shows operations with RowObj and ColObj.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/cell_obj.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.cell_obj import CellObj \n\nb4 = CellObj(\"B\", 4, 0)\nc6 = CellObj(\"C\", 6, 0) \nb4 + 3\nCellObj(col='B', row=7, sheet_idx=0)\n\nb4 - 3\nCellObj(col='B', row=1, sheet_idx=0)\n\nb4 + \"C\" # get E4 by adding 3 col\nCellObj(col='E', row=4, sheet_idx=0)\n\nb4 - \"A\" # get A4 by subtracting 1 col\nCellObj(col='A', row=4, sheet_idx=0)\n\nb4 + (b4.row_obj + 5) # get B9\nCellObj(col='B', row=9, sheet_idx=0)\n\nb4 + b4.row_obj.next # same as b4.down\nCellObj(col='B', row=5, sheet_idx=0)\n\nb4 + (b4.col_obj + 5) # get G4\nCellObj(col='G', row=4, sheet_idx=0)\n\nb4 + b4.col_obj.next # same as b4.right\nCellObj(col='C', row=4, sheet_idx=0)\n\nb4.right            \nCellObj(col='C', row=4, sheet_idx=0)\n\nb4 - b4.col_obj.prev # same as b4.left\nCellObj(col='A', row=4, sheet_idx=0)\n\nb4.left\nCellObj(col='A', row=4, sheet_idx=0)\n\nb4 + c6 # get E10 add 3 col and 6 row to b4\nCellObj(col='E', row=10, sheet_idx=0)\n\nc6 - b4 # get A2 subtract 2 col and 4 row from c6\nCellObj(col='A', row=2, sheet_idx=0)\n\nb4 - (b4.col_obj - 2)\nIndexError\n```\n\n----------------------------------------\n\nTITLE: Removing Local Shortcut by Key Combination (Persistent) in Python\nDESCRIPTION: Removes a local document shortcut by its key combination and persists the change. The shortcut will be permanently removed and won't reappear after restarting LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# ...\ndoc = CalcDoc.from_current_doc()\ndoc.shortcuts.remove_by_shortcut(\"Shift+Ctrl+Alt+A\", True)\n```\n\n----------------------------------------\n\nTITLE: Drop Caps with Custom Spacing\nDESCRIPTION: Demonstrates how to adjust the spacing between the drop caps and the following text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/drop_caps.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\ndc = DropCaps(count=1, style=StyleCharKind.DROP_CAPS, spaces=5.0)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[dc])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Size in LibreOffice Draw\nDESCRIPTION: Shows how to retrieve the current size of a shape using the Size.from_obj() static method. Returns a Size object containing the shape's dimensions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/size.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.position_size import Size\n# ... other code\n\n# get the size from the shape\nf_style = Size.from_obj(rect.component)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Calc Header Style Example in Python\nDESCRIPTION: This code snippet demonstrates how to create and apply a page header style to a Calc document using the `ooodev` library. It sets various properties such as visibility, shared settings, height, spacing, and margins for the header. It also shows how to retrieve header style from the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/header.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.page.header import Header, CalcStylePageKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        header_style = Header(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=CalcStylePageKind.DEFAULT,\n        )\n        header_style.apply(doc)\n\n        style_obj = Header.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Line Numbering with Start Value 3 in Python OOO Dev Tools\nDESCRIPTION: Creates a LineNum object with a start value of 3 and applies it to a paragraph using the Write.append_para method. This causes the line numbering to restart at 3 for this paragraph.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/outline_list.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nln = LineNum(3)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[ln])\n```\n\n----------------------------------------\n\nTITLE: Applying Different Top and Side Colors in Python\nDESCRIPTION: This code snippet demonstrates applying distinct colors and styles to the top, bottom, left, and right borders of a range. It uses the `Side` class to define these styles, focusing on chartreuse for top and bottom sides and royal blue for left and right sides.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\nside_top_bottom = Side(color=CommonColor.CHARTREUSE, width=1.3)\nside_left_right = Side(color=CommonColor.ROYAL_BLUE, width=1.3)\ncell_rng.style_borders(\n    top=side_top_bottom,\n    bottom=side_top_bottom,\n    left=side_left_right,\n    right=side_left_right,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying for Interface with Typing Support\nDESCRIPTION: This example shows how to use `Lo.qi()` to query for a specific interface (`XSearchable`) on a cell range in LibreOffice. Using `Lo.qi()` ensures that the returned object (`srch`) has typing support for all the properties and methods of the queried interface. The snippet requires the `com.sun.star.util` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom com.sun.star.util import XSearchable\ncell_range = ...\nsrch = Lo.qi(XSearchable, cell_range)\n```\n\n----------------------------------------\n\nTITLE: Importing TextCursorPartial Class in Python\nDESCRIPTION: This code snippet shows how to import the TextCursorPartial class from the ooodev.write.partial.text_cursor_partial module. This class is likely used for manipulating text cursors in Writer documents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/partial/text_cursor_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.write.partial.text_cursor_partial import TextCursorPartial\n```\n\n----------------------------------------\n\nTITLE: Proofing a Sentence with Proofreader\nDESCRIPTION: This class method takes a sentence and an XProofreader instance to check for proofreading errors. It returns the number of errors found and prints detailed error messages for each detected issue.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef proof_sentence(cls, sent: str, proofreader: XProofreader, loc: Locale | None = None) -> int:\n    if loc is None:\n        loc = Locale(\"en\", \"US\", \"\")\n    pr_res = proofreader.doProofreading(\"1\", sent, loc, 0, len(sent), ())\n    num_errs = 0\n    if pr_res is not None:\n        errs = pr_res.aErrors\n        if len(errs) > 0:\n            for err in errs:\n                cls.print_proof_error(sent, err)\n                num_errs += 1\n    return num_errs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Effects from a Cell in Calc\nDESCRIPTION: A snippet to retrieve and validate the font effects applied to a cell in a Calc spreadsheet using the ooodev library. This requires setting up a cell with font effects before running the code. It fetches the font properties to verify their attributes, ensuring they match expected results, such as the color red.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_effects.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\n        f_effects = FontEffects.from_obj(cell)\n        assert f_effects.prop_color == CommonColor.RED\n```\n\n----------------------------------------\n\nTITLE: Retrieving shape protection settings in LibreOffice Draw using Python\nDESCRIPTION: This snippet demonstrates how to retrieve the protection settings of a shape using the Protect.from_obj() method from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/protect.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.position_size import Protect\n# ... other code\n\n# get the position from the shape\nf_style = Protect.from_obj(rect.component)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Styling Data Series with Font Effects in Python\nDESCRIPTION: This snippet demonstrates styling of data series labels in a chart using the FontEffects class, applying a specific font underline and shadowed effect. It relies on the python_ooo_dev_tools library. The series is styled with red color and single blue underline, enhancing its visual appeal on the chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.font_underline import FontUnderlineEnum\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\n# ... other code\nds = chart_doc.get_data_series()[0]\nds.style_font_effect(\n    color=StandardColor.RED,\n    underline=FontLine(\n        line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE\n    ),\n    shadowed=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Printing Chart Types in Python\nDESCRIPTION: This simple snippet prints out the types of charts within a document using Chart2's `print_chart_types` method. It requires a chart document as input and outputs the list of chart types present.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nChart2.print_chart_types(chart_doc)\n```\n\n----------------------------------------\n\nTITLE: Rotating Text for Chart Data Series Labels in Python\nDESCRIPTION: This snippet demonstrates how to rotate text for chart data labels using the Orientation class. It sets the rotation angle to 60 degrees and specifies the text direction and leader lines.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import Orientation\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import DirectionModeKind\n# ... other code\n\nrotation = Orientation(angle=60, mode=DirectionModeKind.LR_TB, leaders=True)\nChart2.style_data_series(chart_doc=chart_doc, idx=0, styles=[rotation])\n```\n\n----------------------------------------\n\nTITLE: Removing Global Shortcut by Command (Temporary) in Python\nDESCRIPTION: Removes a global shortcut by its command URL without persisting the change. The shortcut will be removed from the current session but will return after restarting LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui.menu import Shortcuts\n# ...\nsc = Shortcuts()\nsc.remove_by_command(\".custom:alone.here\", False)\n```\n\n----------------------------------------\n\nTITLE: Searching with Regular Expressions\nDESCRIPTION: Demonstrates setting up a search descriptor with regular expressions to find patterns of text\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# search for a non-empty series of lower-case letters\nsd.setSearchString(\"[a-z]+\")\n```\n\n----------------------------------------\n\nTITLE: Setting Data Point Labels in Python\nDESCRIPTION: Method for modifying data point label properties across all data series in a chart, supporting various label types\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef set_data_point_labels(\n    cls, chart_doc: XChartDocument, label_type: DataPointLabelTypeKind\n) -> None:\n    try:\n        data_series_arr = cls.get_data_series(chart_doc=chart_doc)\n        for data_series in data_series_arr:\n            dp_label = cast(DataPointLabel, Props.get_property(data_series, \"Label\"))\n            dp_label.ShowNumber = False\n            dp_label.ShowCategoryName = False\n            dp_label.ShowLegendSymbol = False\n            if label_type == DataPointLabelTypeKind.NUMBER:\n                dp_label.ShowNumber = True\n            elif label_type == DataPointLabelTypeKind.PERCENT:\n                dp_label.ShowNumber = True\n                dp_label.ShowNumberInPercent = True\n            elif label_type == DataPointLabelTypeKind.CATEGORY:\n                dp_label.ShowCategoryName = True\n            elif label_type == DataPointLabelTypeKind.SYMBOL:\n                dp_label.ShowLegendSymbol = True\n            elif label_type == DataPointLabelTypeKind.NONE:\n                pass\n            else:\n                raise UnKnownError(\"label_type is of unknown type\")\n\n            Props.set_property(data_series, \"Label\", dp_label)\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error setting data point labels\") from e\n```\n\n----------------------------------------\n\nTITLE: Processing Shortcut Keys for Menu Commands in Python\nDESCRIPTION: This code snippet demonstrates how to process shortcut keys from command data for use in popup menus. It extracts shortcut keys from a PopupItem, splits multiple shortcuts if present, and converts them to key events that can be used with accelerator keys.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/commands/getting_info_on_commands.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.string.str_list import StrList\nfrom ooodev.gui.menu import Shortcuts\n\n# ...\nclass PopupProcessor(EventsPartial):\n    # ...\n    def _process_shortcut(self, pop: PopupItem) -> None:\n        \"\"\"Process shortcut\"\"\"\n        keys = pop.shortcut.strip()\n        if not keys:\n            return\n        sl_keys = StrList.from_str(keys)\n        for key in sl_keys:\n            if not key:\n                continue\n            kv = Shortcuts.to_key_event(key)\n            if kv is not None:\n                self._popup.set_accelerator_key_event(pop.menu_id, kv)\n```\n\n----------------------------------------\n\nTITLE: Drawing Image with Offset in Draw Class Python\nDESCRIPTION: This class method, `draw_image_offset`, positions an image on a slide using fractional offsets from the slide's top-left corner. It scales the image to fit within the bounds, maintaining its aspect ratio. Requires an image file path and offset values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef draw_image_offset(\n    cls, slide: XDrawPage, fnm: PathOrStr, xoffset: ImageOffset, yoffset: ImageOffset\n) -> XShape:\n\n    slide_size = cls.get_slide_size(slide)\n    x = round(slide_size.Width * xoffset.Value)\n    y = round(slide_size.Height * yoffset.Value)\n\n    max_width = slide_size.Width - x\n    max_height = slide_size.Height - y\n\n    im_size = ImagesLo.calc_scale(fnm=fnm, max_width=max_width, max_height=max_height)\n```\n\n----------------------------------------\n\nTITLE: Listing Pilot Field Names in Python\nDESCRIPTION: This code lists the names of hidden fields within a DataPilot table using a container of fields. It calls 'Lo.get_container_names()', iterates over the resulting names, and prints each one.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# in pivot_table1.py\nfield_names = Lo.get_container_names(con=fields)\nprint(f\"Field Names ({len(field_names)}):\")\nfor name in field_names:\n    print(f\"  {name}\")\n```\n\n----------------------------------------\n\nTITLE: Alternate Cell Reference Method in Python\nDESCRIPTION: Retrieves a cell from a sheet using column and row coordinates\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncell = Calc.getCell(sheet=sheet, col=0, row=0)\n```\n\n----------------------------------------\n\nTITLE: Creating Labeled Bubble Chart in Python\nDESCRIPTION: This Python code defines the `_labeled_bubble_chart` function, which inserts a bubble chart into a LibreOffice Calc spreadsheet. It retrieves data from a specified range, sets the chart title and axis titles, and configures the appearance of the data points, including transparency, border style, and label placement.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# Chart2View._labeled_bubble_chart() in chart_2_views.py\ndef _labeled_bubble_chart(\n    self, doc: XSpreadsheetDocument, sheet: XSpreadsheet\n) -> XChartDocument:\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"H63:J93\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"A62\",\n        width=18,\n        height=11,\n        diagram_name=ChartTypes.Bubble.TEMPLATE_BUBBLE.BUBBLE,\n    )\n    Calc.goto_cell(cell_name=\"A62\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"H62\")\n    )\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"H63\")\n    )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"I63\")\n    )\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n    Chart2.view_legend(chart_doc=chart_doc, is_visible=True)\n\n    # change the data points\n    ds = Chart2.get_data_series(chart_doc)\n    Props.set(\n        ds[0],\n        Transparency=50,\n        BorderStyle=LineStyle.SOLID,\n        BorderColor=CommonColor.RED,\n        LabelPlacement=DataPointLabelPlacementKind.CENTER.value,\n    )\n\n    # Chart2.set_data_point_labels(\n    #     chart_doc=chart_doc, label_type=DataPointLabelTypeKind.NUMBER\n    # )\n\n    # sheet_name = Calc.get_sheet_name(sheet)\n    # label = f\"{sheet_name}.K63\"\n    # names = f\"{sheet_name}.K64:K93\"\n    # Chart2.add_cat_labels(chart_doc=chart_doc, data_label=label, data_range=names)\n    return chart_doc\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Calc document with font effects on a cell\nDESCRIPTION: Complete example that demonstrates how to create a Calc document, apply font effects to a cell, and close the document. The example applies red text color, blue underline, and shadow effects to a cell containing 'Hello'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.format.inner.direct.write.char.font.font_effects import (\n    FontLine, FontUnderlineEnum\n)\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        cell = sheet[\"A1\"]\n        cell.value = \"Hello\"\n        cell.style_font_effect(\n            color=CommonColor.RED,\n            underline=FontLine(\n                line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE\n            ),\n            shadowed=True,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Bitmap from Image Path - Python\nDESCRIPTION: This snippet demonstrates how to retrieve a bitmap of an image from a given path, and raises an error if it fails to retrieve the bitmap.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbitmap = ImagesLo.get_bitmap(pth)\nif bitmap is None:\n    raise ValueError(f\"Unable to get bitmap of {pth}\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Cursor Management with Extra Data in CharacterStyler Events\nDESCRIPTION: Demonstrates using the extra_data property of CharacterStyler to control when the cursor should be reset after applying styles. This approach allows multiple style applications to the same text selection without needing to reselect text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/cursor/cursor_char_style.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import cast, TYPE_CHECKING\nfrom ooodev.write import WriteDoc\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.writer.direct.char.font import FontScriptKind\nfrom ooodev.format.writer.direct.char.borders import BorderLineKind\nfrom ooodev.write.style.direct.character_styler import CharacterStyler\n\nif TYPE_CHECKING:\n    from com.sun.star.text import XTextCursor\n    from ooodev.events.args.event_args import EventArgs\n\ndef on_char_style_applied(src: Any, event_args: EventArgs) -> None:\n    styler = cast(CharacterStyler, src)\n    skip = styler.extra_data.get(\"skip\", False)\n    if skip:\n        return\n    cursor = cast(\"XTextCursor\", event_args.event_data.get(\"this_component\", None))\n    if cursor is None:\n        return\n    cursor.gotoEnd(False)\n    styler.clear()\n    \n\n# ... other code\ndoc = WriteDoc.create_doc(visible=True)\ncursor = doc.get_cursor()\n\n# subscribe to the event that resets the cursor when a style is applied.\ncursor.subscribe_event(WriteNamedEvent.CHARACTER_STYLE_APPLIED, on_char_style_applied)\n\ncursor.append(\"Hello\")\n# go left and select the the last word appended\ncursor.go_left(5, True)\n\n# set extra data the we can use in event.\n# don't want to reset the cursor until after border is set around Hello\ncursor.style_direct_char.extra_data[\"skip\"] = True\n# Style the Hello word to be Font size 30, bold, italic, underline and color blue.\n_ = cursor.style_direct_char.style_font_general(\n    size=30.0,\n    b=True,\n    i=True,\n    u=True,\n    color=StandardColor.BLUE,\n)\n# set custom flag to let event reset cursor\ncursor.style_direct_char.extra_data[\"skip\"] = False\n# put a border around Hello\n_ = cursor.style_direct_char.style_borders_side(\n    line=BorderLineKind.DOUBLE_THIN,\n    color=StandardColor.RED,\n)\n\n# append world without any character styling\n# note that there was no need to reset the cursor. It was done in the event.\ncursor.append(\" World\")\n# make the d in World subscript\n\ncursor.go_left(1, True) # select the d character\n_ = cursor.style_direct_char.style_font_position(script_kind=FontScriptKind.SUBSCRIPT)\ncursor.append(\". Nice Day!\") # unformatted characters\n```\n\n----------------------------------------\n\nTITLE: Style Data Point Font in Python\nDESCRIPTION: This snippet provides a method to style the font of a single data point within a data series in a chart. It changes the font attributes such as name, size, and style for the first data point.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/font_only.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nds = chart_doc.get_data_series()[0]\ndp = ds[0]\ndp.style_font(name=\"Lucida Calligraphy\", size=14, font_style=\"italic\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Effects Style for Axis in Python\nDESCRIPTION: This code retrieves the current font effects style of the primary Y-axis in a chart document using `style_font_effect_get()`, to allow inspections or modifications later. This is useful in scenarios where understanding current style settings is necessary, ensuring the axis properties can be assessed even within conditional logic.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/font_effects.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ny2_axis = chart_doc.axis2_y\nif y2_axis is not None:\n    f_style = chart_doc.axis_y.style_font_effect_get()\n    assert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Applying Default Border to a Cell\nDESCRIPTION: This code snippet demonstrates how to apply a default border to a specific cell after setting its value. It utilizes the `Borders.default` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_obj = Calc.get_cell_obj(\"B2\")\nCalc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\ncell = Calc.get_cell(sheet, cell_obj)\nStyler.apply(cell, Borders().default)\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Area Pattern in Writer\nDESCRIPTION: This snippet shows how to set a pattern for the footer area in a Writer document using the Pattern class and a preset pattern from the PresetPatternKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.footer.area import Pattern as FooterStylePattern, PresetPatternKind\n# ... other code\n\npattern_style = FooterStylePattern.from_preset(\n    preset=PresetPatternKind.HORIZONTAL_BRICK, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, footer_style, pattern_style)\n```\n\n----------------------------------------\n\nTITLE: Getting Text Properties of Shape in LibreOffice Draw (Python)\nDESCRIPTION: This function retrieves the text properties of a given shape. It creates a text cursor, selects the entire text range, and returns the property set of the text range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# in the draw class (simplified)\n@staticmethod\ndef get_text_properties(shape: XShape) -> XPropertySet:\n    xtxt = Lo.qi(XText, shape, True)\n    cursor = xtxt.createTextCursor()\n    cursor.gotoStart(False)\n    cursor.gotoEnd(True)\n    xrng = Lo.qi(XTextRange, cursor, True)\n    return Lo.qi(XPropertySet, xrng, True)\n```\n\n----------------------------------------\n\nTITLE: Event Handling Implementation\nDESCRIPTION: Comprehensive implementation of menu event handling including menu selection and popup creation events\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef on_menu_select(src: Any, event: EventArgs, menu: PopupMenu) -> None:\n    print(\"Menu Selected\")\n    me = cast(\"MenuEvent\", event.event_data)\n    print(\"MenuId\", me.MenuId)\n    command = menu.get_command(me.MenuId)\n    if command:\n        print(\"Command\", command)\n        # check if command is a dispatch command\n        if menu.is_dispatch_cmd(command):\n            menu.execute_cmd(command)\n\ndef on_popup_created(src, event: EventArgs):\n    # print(f\"on_before_process: {event.event_data}\")\n    e_data = cast(dict, event.event_data)\n    popup_menu = cast(\"PopupMenu\", e_data[\"popup_menu\"])\n    popup_menu.add_event_item_selected(on_menu_select)\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        creator = PopupCreator()\n        creator.subscribe_popup_created(on_popup_created)\n\n        menus = get_popup_menu()\n        pm = creator.create(menus)\n        # ...\n    finally:\n        doc.close()\n        Lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Background Color\nDESCRIPTION: This snippet demonstrates how to set the background color of a specific cell using the style_area_color method. It uses a predefined color from the StandardColor enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/background.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncell = sheet[\"A1\"]\ncell.value = \"Hello\"\ncell.style_area_color(StandardColor.BLUE_LIGHT2)\n```\n\n----------------------------------------\n\nTITLE: Creating LibreOffice Writer Document with Lo Class\nDESCRIPTION: Demonstrates loading LibreOffice in headless mode, creating a Writer document, and saving it as a Word file\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/odev/02/create_save_tab.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> None:\n    loader = Lo.load_office(Lo.ConnectSocket(headless=True))\n    doc = Lo.create_doc(doc_type=Lo.DocTypeStr.WRITER, loader=loader)\n\n    # use the Office API to manipulate doc...\n\n    Lo.save_doc(doc, \"foo.docx\") # save as a Word file\n    Lo.close_doc(doc)\n    lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Calc Sheets in Python\nDESCRIPTION: Iterate over all sheets in a Calc document using the CalcSheets collection with a for loop. Each sheet’s name can be accessed during iteration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_sheets.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\\n>>> doc.insert_sheet(name=\"Sheet2\")\\n>>> doc.insert_sheet(name=\"Sheet3\")\\n>>> for sheet in doc.sheets:\\n...     print(sheet.name)\\nSheet1\\nSheet2\\nSheet3\n```\n\n----------------------------------------\n\nTITLE: Setting up Range Font Formatting in Calc\nDESCRIPTION: Creates a Calc document with multiple cells, sets values, and applies font formatting to a range of cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_only.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.font import FontOnly\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        Calc.set_val(value=\"Hello\", sheet=sheet, cell_name=\"A1\")\n        Calc.set_val(value=\"World\", sheet=sheet, cell_name=\"B1\")\n        rng = Calc.get_cell_range(sheet=sheet, range_name=\"A1:B1\")\n\n        font_style = FontOnly(name=\"Lucida Calligraphy\", size=20, font_style=\"italic\")\n        font_style.apply(rng)\n\n        f_style = FontOnly.from_obj(rng)\n        assert f_style.prop_name == \"Lucida Calligraphy\"\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Casting Document to XTextDocument\nDESCRIPTION: Converts a document instance to XTextDocument for accessing document contents, with potential failure if document is not a text document\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntext_doc = Lo.qi(XTextDocument, doc)\n```\n\n----------------------------------------\n\nTITLE: Sorting Shapes by Z-order in Python\nDESCRIPTION: The `get_ordered_shapes` method for slides sorts all shapes on the slide based on their z-order for proper reading sequence. It uses a custom sorter function to order shapes, returning a sorted list of shapes. The input is a slide object, and the output is a list of ordered shapes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# in Draw Class (overload method, simplified)\n@classmethod\ndef get_ordered_shapes(cls, slide: XDrawPage) -> List[XShape]:\n    def sorter(obj: XShape) -> int:\n        return cls.get_zorder(obj)\n\n    shapes = cls.get_shapes(slide)\n    sorted_shapes = sorted(shapes, key=sorter, reverse=False)\n    return sorted_shapes\n```\n\n----------------------------------------\n\nTITLE: Displaying Document Type Properties in Text Format\nDESCRIPTION: This snippet shows the text output resulting from the python code that displays the document properties. It provides examples of properties like ClipboardFormat, Extensions, and MediaType associated with the 'writer8' document type. This allows the developer to see the different attributes that can be retrieved and used.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n    Doc type: writer8\n    Properties for 'writer8':\n    ClipboardFormat: Writer 8\n    DetectService: com.sun.star.comp.filters.StorageFilterDetect\n    Extensions: odt\n    Finalized: False\n    Mandatory: False\n    MediaType: application/vnd.oasis.opendocument.text\n    Name: writer8\n    Preferred: True\n    PreferredFilter: writer8\n    UIName: Writer 8\n    UINames: [\n        en-US = Writer 8\n    ]\n    URLPattern: private:factory/swriter\n```\n\n----------------------------------------\n\nTITLE: Creating Popup Menu using PopupCreator in LibreOffice Python\nDESCRIPTION: Demonstrates creating a popup menu using PopupCreator class that displays an about dialog when clicked. Includes event handling for menu selection and command execution. Requires LibreOffice and ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/about_example.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any, cast, TYPE_CHECKING\nimport uno\nfrom com.sun.star.awt import Rectangle\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.gui.menu.popup.popup_creator import PopupCreator\nfrom ooodev.loader import Lo\n\nif TYPE_CHECKING:\n    from com.sun.star.awt import MenuEvent\n    from ooodev.events.args.event_args import EventArgs\n    from ooodev.gui.menu.popup_menu import PopupMenu\n\ndef on_menu_select(src: Any, event: EventArgs, menu: PopupMenu) -> None:\n    print(\"Menu Selected\")\n    me = cast(\"MenuEvent\", event.event_data)\n    command = menu.get_command(me.MenuId)\n    if command:\n        # check if command is a dispatch command\n        if menu.is_dispatch_cmd(command):\n            menu.execute_cmd(command)\n\ndef get_popup_menu() -> list:\n    new_menu = [{\"text\": \"About\", \"command\": \".uno:About\"}]\n    return new_menu\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n\n        creator = PopupCreator()\n        pm = creator.create(get_popup_menu())\n        pm.add_event_item_selected(on_menu_select)\n        rect = Rectangle(100, 100, 100, 100)\n        doc.activate()\n        pm.execute(doc.get_frame().ComponentWindow, rect, 0)\n        # set a breakpoint here to see the popup menu.\n        assert pm\n    finally:\n        doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal and Vertical Borders via style_direct in Python\nDESCRIPTION: This snippet demonstrates how to set the horizontal and vertical borders of a table using the `style_direct` property and `style_borders` method.  It defines a blue side for the outer border and a green side for the inner (horizontal and vertical) borders.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n\n        blue_side = Side(\n            line=BorderLineKind.SOLID, color=StandardColor.BLUE_DARK2, width=LineSize.THICK\n        )\n        green_side = Side(\n            line=BorderLineKind.SOLID, color=StandardColor.GREEN_DARK1, width=LineSize.THIN\n        )\n        table.style_direct.style_borders(\n            border_side=blue_side, vertical=green_side, horizontal=green_side\n        )\n```\n\n----------------------------------------\n\nTITLE: Applying Different Style Border\nDESCRIPTION: This example demonstrates how to use different border styles by applying the `BorderLineKind` enumeration to the `Borders` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_obj = Calc.get_cell_obj(\"B2\")\nCalc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\ncell = Calc.get_cell(sheet, cell_obj)\nborders = Borders(\n    border_side=Side(line=BorderLineKind.DASH_DOT, color=CommonColor.DARK_GREEN)\n)\nStyler.apply(cell, borders)\n```\n\n----------------------------------------\n\nTITLE: Importing WriteNumberingStyle Class in Python\nDESCRIPTION: This snippet shows how to import the WriteNumberingStyle class from the ooodev.write.style module. The class is used for managing numbering styles in LibreOffice Writer documents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/write_numbering_style.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.write.style import WriteNumberingStyle\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend Entry Visibility for Chart Data Series in LibreOffice\nDESCRIPTION: This code demonstrates how to hide the legend for a chart data series using the LegendEntry class from OOO Dev Tools. The example sets the hide_legend parameter to True and applies the style to the chart document using Chart2.style_data_series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/options.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.options import LegendEntry\n# ... other code\n\nlegend_options = LegendEntry(chart_doc, hide_legend=True)\nChart2.style_data_series(chart_doc=chart_doc, styles=[legend_options])\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Draw Pages in Python\nDESCRIPTION: Demonstrates how to iterate over all draw pages in a document using a for loop.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_draw_pages.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc())\n>>> for draw_page in doc.draw_pages:\n...     print(draw_page.name)\n```\n\n----------------------------------------\n\nTITLE: Hiding a Row in Calc Spreadsheet (Python)\nDESCRIPTION: This code hides a specific row in a Calc spreadsheet by setting the IsVisible property of the row's cell range to False.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nLo.delay(2_000)  # wait a bit before hiding last row\n\nrow_range = sheet.get_row_range(idx=empty_row_num)\nrow_range.is_visible = False\n```\n\n----------------------------------------\n\nTITLE: Searching for Commands Across All Modules in Python\nDESCRIPTION: This snippet shows how to search for a command across all LibreOffice modules using the find_command method. It uses the CmdInfo class to find all occurrences of '.uno:Copy' command in all document types, benefiting from the built-in caching for performance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/commands/getting_info_on_commands.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pprint\n# ...\ninst = CmdInfo()\ndata = inst.find_command(\".uno:Copy\")\npprint.pprint(data)\n```\n\n----------------------------------------\n\nTITLE: Applying Font Formatting to Chart Title\nDESCRIPTION: Shows how to apply font effects like bold, italic, underline, color and shadow specifically to the chart title using TitleFont class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/font.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.font import Font as TitleFont\n\n# ... other code\ntitle_font_effect = TitleFont(\n    b=True, i=True, u=True, color=StandardColor.PURPLE_DARK2, shadowed=True\n)\nChart2.style_title(chart_doc=chart_doc, styles=[title_font_effect])\n```\n\n----------------------------------------\n\nTITLE: Applying Image Preset to Chart Title\nDESCRIPTION: Demonstrates how to apply a preset image style to a chart title using PresetImageKind enum. Requires the ooodev library and a valid chart title object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_image import PresetImageKind\n# ... other code\n\ntitle = chart_doc.get_title()\nif title is None:\n    raise ValueError(\"Title not found\")\n\ntitle.style_area_image_from_preset(\n    preset=PresetImageKind.SPACE,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining CalcCellTextCursor Class in Python\nDESCRIPTION: Documentation reference for a specialized text cursor class in the ooodev.calc module, supporting text manipulation within Calc cells\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_cell_text_cursor.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CalcCellTextCursor\n```\n\n----------------------------------------\n\nTITLE: Running Python Script for Password-Protected Spreadsheet (Windows)\nDESCRIPTION: Command for Windows systems to run the Python script that opens a password-protected spreadsheet. The command uses PowerShell syntax with backslashes for the script path.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Calc/Show_Sheet/README.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Calc\\Show_Sheet\\start.py --show --file \"tests/fixtures/calc/totals.ods\"\n```\n\n----------------------------------------\n\nTITLE: Appending DateTime Fields with Python in LibreOffice Writer\nDESCRIPTION: This method appends two DateTime text fields to a document: one for the current date and another for the current time. It uses the `XTextCursor` interface and requires creating instances of the `XTextField.ComSunStarText.TextField.DateTime` type. The main purpose is to insert dynamic content that reflects the current date and time.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# in Write Class\n\n@classmethod\ndef append_date_time(cls, cursor: XTextCursor) -> None:\n    dt_field = Lo.create_instance_msf(XTextField, \"com.sun.star.text.TextField.DateTime\")\n    Props.set_property(dt_field, \"IsDate\", True)  # so date is reported\n    xtext_content = Lo.qi(XTextContent, dt_field, True)\n    cls._append_text_content(cursor, xtext_content)\n    cls.append(cursor, \"; \")\n\n    dt_field = Lo.create_instance_msf(XTextField, \"com.sun.star.text.TextField.DateTime\")\n    Props.set_property(dt_field, \"IsDate\", False)  # so time is reported\n    xtext_content = Lo.qi(XTextContent, dt_field, True)\n    cls._append_text_content(cursor, xtext_content)\n```\n\n----------------------------------------\n\nTITLE: Generating Popup Menu Structure using BuilderItem in Python\nDESCRIPTION: This function creates a complex popup menu structure for a spreadsheet application. It uses BuilderItem and SepItem classes to define menu items, submenus, and separators. The menu includes operations like Cut, Copy, Paste Special, Data manipulation, Cell formatting, and Annotations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_via_builder_item.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooo.dyn.awt.menu_item_style import MenuItemStyleEnum\nfrom ooodev.utils.kind.module_names_kind import ModuleNamesKind\nfrom ooodev.gui.menu.popup.builder.builder_item import BuilderItem as BI\nfrom ooodev.gui.menu.popup.builder.sep_item import SepItem as SI\n\ndef get_popup_menu() -> list:\n    result = []\n    sep = SI()\n    pop = BI(command=\".uno:Cut\", module=ModuleNamesKind.SPREADSHEET_DOCUMENT)\n    result.append(pop.to_dict())\n\n    pop = BI(command=\".uno:Copy\", module=ModuleNamesKind.SPREADSHEET_DOCUMENT)\n    result.append(pop.to_dict())\n\n    pop = BI(text=\"Paste Special\", command=\".uno:PasteSpecialMenu\")\n    pop.submenu_add_popup(command=\".uno:PasteUnformatted\", module=ModuleNamesKind.SPREADSHEET_DOCUMENT)\n    pop.submenu_add_separator()\n    pop.submenu_add_popup(text=\"My Paste Only Text\", command=\".uno:PasteOnlyText\", module=ModuleNamesKind.NONE)\n    pop.submenu_add_popup(text=\"Paste Only Text\", command=\".uno:PasteOnlyValue\")\n    # pop.submenu_add_popup(text=\"Paste Only Formula\", command=\".uno:PasteOnlyFormula\") Same as next line\n    pop.submenu.append(BI(text=\"Paste Only Formula\", command=\".uno:PasteOnlyFormula\"))\n    pop.submenu_add_separator()\n    pop.submenu_add_popup(command=\".uno:PasteSpecial\", module=ModuleNamesKind.SPREADSHEET_DOCUMENT)\n    result.append(pop.to_dict())\n\n    result.append(sep.to_dict())\n\n    pop = BI(text=\"Data Select\", command=\".uno:DataSelect\")\n    result.append(pop.to_dict())\n    pop = BI(text=\"Current Validation\", command=\".uno:CurrentValidation\")\n    result.append(pop.to_dict())\n    pop = BI(text=\"Define Current Name\", command=\".uno:DefineCurrentName\")\n    result.append(pop.to_dict())\n    result.append(sep.to_dict())\n    pop = BI(text=\"Insert cells\", command=\".uno:InsertCell\")\n    result.append(pop.to_dict())\n    pop = BI(text=\"Del cells\", command=\".uno:DeleteCell\")\n    result.append(pop.to_dict())\n    pop = BI(text=\"Delete\", command=\".uno:Delete\")\n    result.append(pop.to_dict())\n    pop = BI(text=\"Merge Cells\", command=\".uno:MergeCells\")\n    result.append(pop.to_dict())\n    pop = BI(text=\"Split Cell\", command=\".uno:SplitCell\")\n    result.append(pop.to_dict())\n    result.append(sep.to_dict())\n    pop = BI(text=\"Format Paintbrush\", command=\".uno:FormatPaintbrush\")\n    result.append(pop.to_dict())\n    pop = BI(text=\"Reset Attributes\", command=\".uno:ResetAttributes\")\n    result.append(pop.to_dict())\n\n    pop = BI(text=\"Format Styles Menu\", command=\".uno:FormatStylesMenu\")\n    pop.submenu_add_popup(text=\"Edit Style\", command=\".uno:EditStyle\")\n    pop.submenu_add_separator()\n    pop.submenu_add_popup(\n        text=\"Default Cell Styles\", command=\".uno:DefaultCellStylesmenu\", style=MenuItemStyleEnum.RADIOCHECK\n    )\n    pop.submenu_add_popup(\n        text=\"Accent1 Cell Styles\", command=\".uno:Accent1CellStyles\", style=MenuItemStyleEnum.RADIOCHECK\n    )\n    pop.submenu_add_popup(text=\"Accent2 Cell Styles\", style=MenuItemStyleEnum.RADIOCHECK)\n    pop.submenu_add_popup(\n        text=\"Accent 3 Cell Styles\", command=\".uno:Accent3CellStyles\", style=MenuItemStyleEnum.RADIOCHECK\n    )\n    pop.submenu_add_separator()\n    pop.submenu_add_popup(text=\"Bad Cell Styles\", command=\".uno:BadCellStyles\", style=MenuItemStyleEnum.RADIOCHECK)\n    pop.submenu_add_popup(text=\"Error Cell Styles\", command=\".uno:ErrorCellStyles\", style=MenuItemStyleEnum.RADIOCHECK)\n    pop.submenu_add_popup(text=\"Good Cell Styles\", command=\".uno:GoodCellStyles\", style=MenuItemStyleEnum.RADIOCHECK)\n    pop.submenu_add_popup(\n        text=\"Neutral Cell Styles\", command=\".uno:NeutralCellStyles\", style=MenuItemStyleEnum.RADIOCHECK\n    )\n    pop.submenu_add_popup(\n        text=\"Warning Cell Styles\", command=\".uno:WarningCellStyles\", style=MenuItemStyleEnum.RADIOCHECK\n    )\n    pop.submenu_add_separator()\n    pop.submenu_add_popup(\n        text=\"Footnote Cell Styles\", command=\".uno:FootnoteCellStyles\", style=MenuItemStyleEnum.RADIOCHECK\n    )\n    pop.submenu_add_popup(text=\"Note Cell Styles\", command=\".uno:NoteCellStyles\", style=MenuItemStyleEnum.RADIOCHECK)\n    result.append(pop.to_dict())\n\n    result.append(sep.to_dict())\n    pop = BI(text=\"Insert Annotation\", command=\".uno:InsertAnnotation\")\n    result.append(pop.to_dict())\n\n    pop = BI(text=\"Edit Annotation\", command=\".uno:EditAnnotation\")\n    result.append(pop.to_dict())\n\n    pop = BI(text=\"Delete Note\", command=\".uno:DeleteNote\")\n    result.append(pop.to_dict())\n\n    pop = BI(text=\"Show Note\", command=\".uno:ShowNote\")\n    result.append(pop.to_dict())\n\n    pop = BI(text=\"Hide Note\", command=\".uno:HideNote\")\n    result.append(pop.to_dict())\n\n    result.append(sep.to_dict())\n\n    pop = BI(text=\"Format Sparkline\", command=\".uno:FormatSparklineMenu\")\n    result.append(pop.to_dict())\n\n    result.append(sep.to_dict())\n    pop = BI(command=\".uno:CurrentConditionalFormatDialog\", module=ModuleNamesKind.SPREADSHEET_DOCUMENT)\n    result.append(pop.to_dict())\n\n    pop = BI(\n        text=\"Current Conditional Format Manager Dialog ...\", command=\".uno:CurrentConditionalFormatManagerDialog\"\n    )\n    result.append(pop.to_dict())\n\n    pop = BI(text=\"Format Cell Dialog ...\", command=\".uno:FormatCellDialog\")\n    result.append(pop.to_dict())\n\n    return result\n```\n\n----------------------------------------\n\nTITLE: Removing Menu Items in LibreOffice/OpenOffice with Python\nDESCRIPTION: Shows how to remove a submenu using the menu.remove() method. Includes menu name specification and persistence option. Checks if menu exists before attempting removal.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmenu_name = \".custom:my.custom_menu\" # or can just be \"my.custom_menu\"\nif menu_name in menu:\n    menu.remove(menu_name, save=True)\n```\n\n----------------------------------------\n\nTITLE: Importing BorderKind Class in Python\nDESCRIPTION: This snippet shows how to import the BorderKind class from the ooodev.utils.kind.border_kind module. It's used to access the BorderKind functionality in Python OOO development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/border_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.utils.kind.border_kind import BorderKind\n```\n\n----------------------------------------\n\nTITLE: Custom Key-Value LRUCache Usage in Python\nDESCRIPTION: Shows how to create LRUCache instances with custom key-value pairs, demonstrating how different parameters create new instances while same parameters return existing instances.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/lru_cache.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.cache.singleton import LRUCache\n\ncache = LRUCache(custom1=\"custom1\", custom2=\"custom2\")\n\ncache[\"key1\"] = \"value1\"\ncache[\"key2\"] = \"value2\"\ncache[\"key3\"] = \"value3\"\n\nprint(cache[\"key1\"]) # prints \"value1\"\nprint(cache[\"key2\"]) # prints \"value2\"\nprint(cache[\"key3\"]) # prints \"value3\"\n\ndel cache[\"key1\"]\nassert \"key1\" not in cache\n\ncache2 = LRUCache()\nassert cache not is cache2 # True\n\ncache3 = LRUCache(custom1=\"custom1\", custom2=\"custom2\")\nassert cache is cache3 # True\nprint(cache3[\"key1\"]) # prints \"value1\"\n```\n\n----------------------------------------\n\nTITLE: Sheet Navigation Example\nDESCRIPTION: Example of accessing and activating a specific sheet by name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsheet = doc.get_sheet(sheet_name=\"Sheet1\")\ndoc.set_active_sheet(sheet.component)\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Properties in LibreOffice Draw\nDESCRIPTION: Demonstrates how to create a rectangle shape and apply shadow properties like location, color, distance, blur and transparency using the Shadow class. The example creates a rectangle with text and applies a light yellow shadow with specific formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/shadow/shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\nfrom ooodev.format.draw.modify.shadow import Shadow, ShadowLocationKind\nfrom ooodev.format.draw.modify.area.color import Color as AreaColor\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n\n        style = Shadow(\n            use_shadow=True,\n            location=ShadowLocationKind.BOTTOM_RIGHT,\n            color=StandardColor.YELLOW_LIGHT2,\n            distance=1.5,\n            blur=3,\n            transparency=88,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(style)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Borders with Borders Class in Python\nDESCRIPTION: This snippet initializes a table and sets its borders using the `Borders` class from the `ooodev.format.writer.direct.table.borders` module.  It demonstrates how to define different sides with specific line styles, colors, and widths, then applies these styles to a table component.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.table.borders import (\n            Borders,\n            Shadow,\n            Side,\n            BorderLineKind,\n            Padding,\n            LineSize,\n        )\n        from ooodev.write import WriteDoc\n        from ooodev.utils.color import CommonColor\n        from ooodev.utils.color import StandardColor\n        from ooodev.loader import Lo\n        from ooodev.utils.table_helper import TableHelper\n\n\n        def main() -> int:\n            with Lo.Loader(Lo.ConnectPipe()):\n                doc = WriteDoc.create_doc(visible=True)\n                Lo.delay(300)\n                doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n                cursor = doc.get_cursor()\n\n                tbl_data = TableHelper.make_2d_array(num_rows=5, num_cols=5)\n                # bg_img_style = TblBgImg.from_preset(PresetImageKind.PAPER_TEXTURE)\n                table = cursor.add_table(\n                    table_data=tbl_data,\n                    tbl_bg_color=CommonColor.LIGHT_BLUE,\n                    tbl_fg_color=CommonColor.BLACK,\n                    first_row_header=False,\n                )\n\n                blue_side = Side(line=BorderLineKind.SOLID, color=StandardColor.BLUE_DARK2, width=LineSize.THICK)\n                green_side = Side(line=BorderLineKind.SOLID, color=StandardColor.GREEN_DARK1, width=LineSize.THIN)\n                bdr_style = Borders(\n                    border_side=blue_side,\n                    vertical=green_side,\n                    horizontal=green_side,\n                    shadow=Shadow(color=StandardColor.BLUE_DARK2),\n                )\n\n                bdr_style.apply(table.component)\n\n                # getting the table properties\n                tbl_bdr_style = Borders.from_obj(table.component)\n                assert tbl_bdr_style is not None\n\n                Lo.delay(1_000)\n                Lo.close_doc(doc)\n\n            return 0\n\n\n        if __name__ == \"__main__\":\n            sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Drawing Slide with Title and Video in Impress - Python\nDESCRIPTION: Creates a new slide with a title and adds a video frame. Outputs a slide with the specified title and positions a video using file path and dimensions. It requires a document's slide object and the video's file path. No specific return value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n        curr_slide = doc.add_slide()\n        curr_slide.title_only_slide(\"Clock Video\")\n        curr_slide.draw_media(\n            fnm=self._fnm_clock, x=20, y=70, width=50, height=50\n        )\n\n```\n\n----------------------------------------\n\nTITLE: Applying Cumulative Borders in Python\nDESCRIPTION: This code snippet shows how to apply multiple border styles cumulatively to a cell. It uses the `Side` class from the `ooodev.format.calc.direct.cell.borders` module. Each call to `style_borders` applies an additional border, preserving previous styles. The example sets diagonal borders with different colors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\ncell.style_borders(diagonal_up=Side(color=CommonColor.RED))\ncell.style_borders(diagonal_down=Side(color=CommonColor.BLUE))\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Document with Paragraph Outline\nDESCRIPTION: Creates a Writer document and demonstrates setting paragraph outline levels using the Outline class. Shows how to apply different outline levels to paragraphs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/outline_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.writer.direct.para.outline_list import LevelKind, Outline, LineNum, ListStyle\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Write.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        cursor = Write.get_cursor(doc)\n        Write.append_para(\n            cursor=cursor, text=p_txt, styles=[Outline(LevelKind.LEVEL_01)]\n        )\n        Write.append_para(\n            cursor=cursor, text=p_txt, styles=[Outline(LevelKind.TEXT_BODY)]\n        )\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Adding an Image as a Shape in Python\nDESCRIPTION: This code shows how to add an image to a LibreOffice document as a shape, rather than as a linked image. It calls the cursor method `add_image_shape` which internally calls the class method `Write.add_image_shape`. It allows including image as a part of the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# code fragment from build doc\n# add image as shape to page\ncursor.append_line(\"Image as a shape: \")\ncursor.add_image_shape(fnm=im_fnm)\ncursor.end_paragraph()\n```\n\n----------------------------------------\n\nTITLE: Setting Header Area Gradient in LibreOffice Writer\nDESCRIPTION: Applies a gradient to the header area of a page style. Uses the from_preset method of the Gradient class to set a pre-defined gradient (DEEP_OCEAN) to the header background.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.header.area import Gradient, PresetGradientKind\n# ... other code\n\ngradient_style = Gradient.from_preset(\n    preset=PresetGradientKind.DEEP_OCEAN, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, header_style, gradient_style)\n```\n\n----------------------------------------\n\nTITLE: Applying Number Formatting to a Specific Chart2 Data Point in Python\nDESCRIPTION: Demonstrates how to apply number formatting to a specific data point in a chart series. This allows for individual control over how numbers appear in chart data labels for specific points.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(\n    chart_doc=chart_doc, series_idx=0, idx=1, styles=[text_attribs, format_number]\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Gradient to Legend in Python\nDESCRIPTION: Demonstrates how to apply a preset gradient to a chart legend using the `ooodev` library. Utilizes the `PresetGradientKind` enum to select gradient presets. Requires setting the legend transparency to 0 to ensure gradient visibility.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n# ... other code\n\n_ = legend.style_area_transparency_transparency(0)\n_ = legend.style_area_gradient_from_preset(\n    preset=PresetGradientKind.NEON_LIGHT,\n)\n```\n\n----------------------------------------\n\nTITLE: Adjusting 3D Pie Chart Rotation in LibreOffice Calc\nDESCRIPTION: This code adjusts the rotation angles of a 3D pie chart to provide a better perspective. It modifies both horizontal and vertical rotation properties of the diagram service to change how the pie chart appears to the viewer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# part of Chart2View._pie_3d_chart() in chart_2_views.py\ndiagram = chart_doc.getFirstDiagram()\nProps.set(\n    diagram,\n    RotationHorizontal=0,  # -ve rotates bottom edge out of page; default is -60\n    RotationVertical=-45,  # -ve rotates left edge out of page; default is 0 (i.e. no rotation)\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to a Single Cell in Python\nDESCRIPTION: This snippet demonstrates how to apply specified font effects to a single cell in a LibreOffice Calc spreadsheet using the ooodev library. It requires dependencies from the ooodev.format, ooodev.office.calc, ooodev.gui, and ooodev.loader.lo modules. The function sets the font color to red, applies a single blue underline, and enables text shadowing. Input is 'Hello', and it outputs a modified cell in Calc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format import CommonColor\n        from ooodev.office.calc import Calc\n        from ooodev.gui import GUI\n        from ooodev.loader.lo import Lo\n        from ooodev.format.calc.direct.cell.font import FontEffects, FontLine, FontUnderlineEnum\n\n        def main() -> int:\n            with Lo.Loader(connector=Lo.ConnectSocket(), opt=Lo.Options(verbose=True)):\n                doc = Calc.create_doc()\n                sheet = Calc.get_sheet()\n                GUI.set_visible(True, doc)\n                Lo.delay(500)\n                Calc.zoom_value(doc, 400)\n\n                cell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\n\n                font_effects = FontEffects(\n                    color=CommonColor.RED,\n                    underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n                    shadowed=True,\n                )\n                Calc.set_val(value=\"Hello\", cell=cell, styles=[font_effects])\n\n                f_effects = FontEffects.from_obj(cell)\n                assert f_effects.prop_color == CommonColor.RED\n\n                Lo.delay(1_000)\n                Lo.close_doc(doc)\n            return 0\n\n        if __name__ == \"__main__\":\n            SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Position from Style in ooodev Python\nDESCRIPTION: This snippet shows how to retrieve the font position properties of a specific paragraph style using the ooodev library. It demonstrates the use of the `FontPosition.from_style` method to extract style properties from a document that is manipulated using an active pipe connection. The main prerequisite is that a document must be open, and the ooodev library should be installed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/font_position.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nstyle_obj = FontPosition.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Configuring LanguageTool as Grammar Checker in Python\nDESCRIPTION: This code snippet demonstrates how to set LanguageTool as the default grammar checker (proofreader) in LibreOffice. It uses the XLinguServiceManager2 interface to configure the linguistic services.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom com.sun.star.linguistic2 import XLinguServiceManager2\n\nwith Lo.Loader(Lo.ConnectSocket(headless=True)) as loader:\n    lingo_mgr = Lo.create_instance_mcf(\n        XLinguServiceManager2, \"com.sun.star.linguistic2.LinguServiceManager\"\n    )\n    Write.set_configured_services(\n        lingo_mgr, \"Proofreader\", \"org.languagetool.openoffice.Main\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Gallery Access Implementation in Python\nDESCRIPTION: Demonstrates accessing LibreOffice Gallery themes and items programmatically. Includes methods for listing galleries, searching items, and reporting gallery information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter14.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# from gallery_info.py\nfrom __future__ import annotations\nimport uno\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.gallery import Gallery, GalleryKind, SearchByKind, SearchMatchKind\n\n\nclass GalleryInfo:\n    def main(self) -> None:\n        with Lo.Loader(Lo.ConnectPipe(headless=True)):\n            # list all the gallery themes (i.e. the sub-directories below gallery/)\n            Gallery.report_galleries()\n            print()\n\n            # list all the items for the Sounds theme\n            Gallery.report_gallery_items(GalleryKind.SOUNDS)\n            print()\n\n            # find an item that has \"applause\" as part of its name\n            # in the Sounds theme\n            itm = Gallery.find_gallery_obj(\n                gallery_name=GalleryKind.SOUNDS,\n                name=\"applause\",\n                search_match=SearchMatchKind.PARTIAL_IGNORE_CASE,\n                search_kind=SearchByKind.FILE_NAME,\n            )\n            print()\n            # print out the item's properties\n            Gallery.report_gallery_item(itm)\n```\n\n----------------------------------------\n\nTITLE: Applying Different Top and Side Border Colors\nDESCRIPTION: This code applies different colors for the top and side borders of a cell, illustrating the flexibility of the `Borders` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_obj = Calc.get_cell_obj(\"B2\")\nCalc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\ncell = Calc.get_cell(sheet, cell_obj)\nside_top_bottom = Side(color=CommonColor.CHARTREUSE, width=1.3)\nside_left_right = Side(color=CommonColor.ROYAL_BLUE, width=1.3)\nborders = Borders(\n    top=side_top_bottom,\n    bottom=side_top_bottom,\n    left=side_left_right,\n    right=side_left_right,\n)\nStyler.apply(cell, borders)\n```\n\n----------------------------------------\n\nTITLE: Setting Number Format for a Cell\nDESCRIPTION: This code snippet shows how to set a specific number format for a cell using the NumberFormatIndexEnum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/numbers.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.i18n.number_format_index import NumberFormatIndexEnum\n\n# ... other code\ncell = sheet[\"A1\"]\ncell.value = -123.0\ncell.style_numbers_numbers(\n    num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2_RED,\n)\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Data Points with Font Effects in Python\nDESCRIPTION: This snippet showcases styling an individual data point within a chart's data series. It uses the FontEffects class to apply a red color and single blue underline with a shadow effect to a particular data point, utilizing the python_ooo_dev_tools for LibreOffice. This granularity allows for focused styling of specific chart data points.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/font_effects.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nds = chart_doc.get_data_series()[0]\ndp = ds[4]\ndp.style_font_effect(\n    color=StandardColor.RED,\n    underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n    shadowed=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Searching Chart Shape in Draw Page\nDESCRIPTION: Iterate through shapes in a draw page to find a chart shape by its CLSID property\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter33.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnum_shapes = draw_page.getCount()\nchart_classid = Lo.CLSID.CHART.value\nfor i in range(num_shapes):\n    try:\n        shape = mLo.Lo.qi(XShape, draw_page.getByIndex(i), True)\n        classid = str(Props.get(shape, \"CLSID\")).lower()\n        if classid == chart_classid:\n            break\n    except Exception:\n        shape = None\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Preset to Chart Title\nDESCRIPTION: Shows how to apply a preset pattern to a chart title using PresetPatternKind enum. Uses the style_area_pattern_from_preset method to set background pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_pattern import PresetPatternKind\n\n# ... other code\ntitle = chart_doc.get_title()\nif title is None:\n    raise ValueError(\"Title not found\")\n\ntitle.style_area_pattern_from_preset(\n    preset=PresetPatternKind.HORIZONTAL_BRICK,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Root Menu in LibreOffice MenuBar\nDESCRIPTION: Demonstrates how to access a root menu (Tools menu) from the menu bar using menu lookup kinds and get the popup menu.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.kind.menu_lookup_kind import MenuLookupKind\n# ...\n\nmenu_id, _ = mb.find_item_menu_id(cmd=str(MenuLookupKind.TOOLS))\ntools_popup = mb.get_popup_menu(menu_id)\n```\n\n----------------------------------------\n\nTITLE: Main Function for Document Operations - Python\nDESCRIPTION: The main function sets up argument parsing, loads the LibreOffice application, opens a document, and handles various commands through event dispatching.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> int:\n    parser = argparse.ArgumentParser(description=\"main\")\n    args_add(parser=parser)\n\n    if len(sys.argv) <= 1:\n        parser.print_help(sys.stderr)\n        return 1\n\n    args = parser.parse_args()\n    fnm = args.fnm_doc\n    loader = Lo.load_office(Lo.ConnectPipe())\n    try:\n        doc = Lo.open_doc(fnm=fnm, loader=loader)\n    except Exception:\n        print(f\"Could not open '{fnm}'\")\n        Lo.close_office()\n        raise SystemExit(1)\n\n    events = Events()\n    events.on(LoNamedEvent.DISPATCHING, on_dispatching)\n    events.on(LoNamedEvent.DISPATCHED, on_dispatched)\n\n    GUI.set_visible(is_visible=True, odoc=doc)\n    Lo.delay(3000)\n    Lo.dispatch_cmd(\"ReadOnlyDoc\")\n    Lo.delay(1000)\n    Lo.dispatch_cmd(\"GetInvolved\")\n    Lo.dispatch_cmd(\"About\")\n\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Background to Data Series in Python\nDESCRIPTION: This example shows how to create and apply a blue crossed hatch background to a chart data series. It imports the necessary hatch classes and uses the from_preset method to create a predefined hatch style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.area import Hatch as SeriesHatch\nfrom ooodev.format.chart2.direct.series.data_series.area import PresetHatchKind\n# ... other code\n\ndata_series_hatch = SeriesHatch.from_preset(chart_doc, PresetHatchKind.BLUE_45_DEGREES_CROSSED)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_series_hatch])\n```\n\n----------------------------------------\n\nTITLE: Converting Number Format String to Key in Python for OpenOffice Charts\nDESCRIPTION: This method converts a number format string into a number format key for use in OpenOffice charts. It queries the number formats supported by the chart document and returns the corresponding key.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_number_format_key(chart_doc: XChartDocument, nf_str: str) -> int:\n    try:\n        xfs = Lo.qi(XNumberFormatsSupplier, chart_doc, True)\n        n_formats = xfs.getNumberFormats()\n        key = int(n_formats.queryKey(nf_str, Locale(\"en\", \"us\", \"\"), False))\n        if key == -1:\n            Lo.print(f'Could not access key for number format: \"{nf_str}\"')\n        return key\n    except Exception as e:\n        raise ChartError(\"Error getting number format key\") from e\n```\n\n----------------------------------------\n\nTITLE: Stock Prices Chart Creation in Python\nDESCRIPTION: The `_stock_prices_chart()` function inserts a stock prices chart into a spreadsheet document using the Chart2 library. It specifies the range, dimensions, title, data labels, and axis titles. It outputs the chart document created from the specified data range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# first part of Chart2View._stock_prices_chart() in chart_2_views.py\ndef _stock_prices_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"E141:I146\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"E148\",\n        width=12,\n        height=11,\n        diagram_name=ChartTypes.Stock.TEMPLATE_VOLUME.STOCK_OPEN_LOW_HIGH_CLOSE,\n    )\n    Calc.goto_cell(cell_name=\"A139\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E140\")\n    )\n    Chart2.set_data_point_labels(\n        chart_doc=chart_doc, label_type=DataPointLabelTypeKind.NONE\n    )\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"E141\")\n    )\n    Chart2.set_y_axis_title(chart_doc=chart_doc, title=\"Dollars\")\n    Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties with Center Alignment and Width via Styles\nDESCRIPTION: This Python code demonstrates setting table properties such as center alignment, above/below spacing, and width by creating a `TableProperties` style object and applying it during table creation in LibreOffice Writer using the `ooodev` library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprops_style = TableProperties(\n            name=\"My_Table\",\n            relative=False,\n            align=TableAlignKind.CENTER,\n            above=UnitMM(2.0),\n            below=UnitMM(1.8),\n            width=UnitMM(60.0),\n        )\n\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n            styles=[props_style],\n            )\n```\n\n----------------------------------------\n\nTITLE: Setting Table Borders and Padding using styles in Python\nDESCRIPTION: This code snippet demonstrates how to set table borders and padding using predefined `Borders` styles in OpenOffice Writer with Python and the ooodev library. It defines `Side` objects for the borders and a `Padding` object, creates a `Borders` object, and then applies it to the table using the `apply` method. This approach allows for reusable border styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\nblue_side = Side(line=BorderLineKind.SOLID, color=StandardColor.BLUE_DARK2, width=LineSize.THICK)\ngreen_side = Side(line=BorderLineKind.SOLID, color=StandardColor.GREEN_DARK1, width=LineSize.THIN)\npadding = Padding(all=5)\nbdr_style = Borders(\n    border_side=blue_side,\n    vertical=green_side,\n    horizontal=green_side,\n    padding=padding,\n)\n\nbdr_style.apply(table.component)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Get Master Page Method\nDESCRIPTION: Implements a static method to retrieve a master page by document and index, utilizing XMasterPagesSupplier\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_master_page(doc: XComponent, idx: int) -> XDrawPage:\n    mp_supp = Lo.qi(XMasterPagesSupplier, doc)\n    pgs = mp_supp.getMasterPages()\n    return Lo.qi(XDrawPage, pgs.getByIndex(idx), True)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Legend Font Properties in Calc with Python\nDESCRIPTION: This code snippet demonstrates how to modify the font of a chart legend in a Calc document using the ooodev library. It opens a Calc document, accesses the chart's legend, and sets the font name and size.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \\\"tmp\\\" / \\\"piechart.ods\\\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\\\"A1\\\"] = \\\"Hello\\\"\n        sheet[\\\"A1\\\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BRICK,\n            width=1,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.GREEN_DARK4,\n                StandardColor.TEAL_LIGHT2,\n            ),\n        )\n        legend = chart_doc.first_diagram.get_legend()\n        if legend is None:\n            raise ValueError(\\\"Legend is None\\\")\n        _ = legend.style_font(name=\\\"Liberation Sans Narrow\\\", size=13)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \\\"__main__\\\":\n    SystemExit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Chart Area Gradient in Python\nDESCRIPTION: This code snippet shows how to set a custom gradient for the chart area background using `style_area_gradient`. It requires specifying the gradient style (`GradientStyle.LINEAR`), angle, and a `ColorRange` for the gradient colors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.utils.data_type.color_range import ColorRange\n\n# ... other code\n_ = chart_doc.style_border_line(color=StandardColor.GREEN_DARK3, width=0.7)\n_ = chart_doc.style_area_gradient(\n    style=GradientStyle.LINEAR,\n    angle=45,\n    grad_color=ColorRange(StandardColor.GREEN_DARK3, StandardColor.GREEN_LIGHT2),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Highlight Information from a Writer Style\nDESCRIPTION: Shows how to retrieve the highlight information from an existing style in a Writer document using the Highlight.from_style() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/highlight.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Highlight.from_style(doc=doc, style_name=StyleCharKind.EXAMPLE)\nassert style_obj.prop_style_name == str(StyleCharKind.EXAMPLE)\n```\n\n----------------------------------------\n\nTITLE: Defining Popup Menu Structure in JSON for LibreOffice Calc\nDESCRIPTION: This JSON structure defines a popup menu configuration for LibreOffice Calc that mimics the right-click cell menu. It includes menu items for cut, copy, paste operations with their respective UNO commands, keyboard shortcuts, and nested submenus for specialized paste operations and other cell formatting options.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/sample_normal_json.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"ooodev.popup_menu\",\n    \"version\": \"0.41.0\",\n    \"dynamic\": false,\n    \"menus\": [\n        {\n            \"text\": \"~Cut\",\n            \"command\": \".uno:Cut\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"Ctrl+X\"\n        },\n        {\n            \"text\": \"Cop~y\",\n            \"command\": \".uno:Copy\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"Ctrl+C\"\n        },\n        {\n            \"text\": \"~Paste\",\n            \"command\": \".uno:Paste\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"Ctrl+V\"\n        },\n        {\n            \"text\": \"Paste Special\",\n            \"command\": \".uno:PasteSpecialMenu\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\",\n            \"submenu\": [\n                {\n                    \"text\": \"Paste Unformatted Text\",\n                    \"command\": \".uno:PasteUnformatted\",\n                    \"style\": 0,\n                    \"checked\": false,\n                    \"enabled\": true,\n                    \"default\": false,\n                    \"help_command\": \"\",\n                    \"help_text\": \"\",\n                    \"tip_help_text\": \"\",\n                    \"shortcut\": \"Shift+Ctrl+Alt+V\"\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"My Paste Only Text\",\n                    \"command\": \".uno:PasteOnlyText\",\n                    \"style\": 0,\n                    \"checked\": false,\n                    \"enabled\": true,\n                    \"default\": false,\n                    \"help_command\": \"\",\n                    \"help_text\": \"\",\n                    \"tip_help_text\": \"\",\n                    \"shortcut\": \"\"\n                },\n                {\n                    \"text\": \"Paste Only Text\",\n                    \"command\": \".uno:PasteOnlyValue\",\n                    \"style\": 0,\n                    \"checked\": false,\n                    \"enabled\": true,\n                    \"default\": false,\n                    \"help_command\": \"\",\n                    \"help_text\": \"\",\n                    \"tip_help_text\": \"\",\n                    \"shortcut\": \"\"\n                },\n                {\n                    \"text\": \"Paste Only Formula\",\n                    \"command\": \".uno:PasteOnlyFormula\",\n                    \"style\": 0,\n                    \"checked\": false,\n                    \"enabled\": true,\n                    \"default\": false,\n                    \"help_command\": \"\",\n                    \"help_text\": \"\",\n                    \"tip_help_text\": \"\",\n                    \"shortcut\": \"\"\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Paste Transposed\",\n                    \"command\": \".uno:PasteTransposed\",\n                    \"style\": 0,\n                    \"checked\": false,\n                    \"enabled\": true,\n                    \"default\": false,\n                    \"help_command\": \"\",\n                    \"help_text\": \"\",\n                    \"tip_help_text\": \"\",\n                    \"shortcut\": \"\"\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Paste ~Special...\",\n                    \"command\": \".uno:PasteSpecial\",\n                    \"style\": 0,\n                    \"checked\": false,\n                    \"enabled\": true,\n                    \"default\": false,\n                    \"help_command\": \"\",\n                    \"help_text\": \"\",\n                    \"tip_help_text\": \"\",\n                    \"shortcut\": \"Shift+Ctrl+V\"\n                }\n            ]\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Data Select\",\n            \"command\": \".uno:DataSelect\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"Current Validation\",\n            \"command\": \".uno:CurrentValidation\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"Define Current Name\",\n            \"command\": \".uno:DefineCurrentName\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Insert ~Cells...\",\n            \"command\": \".uno:InsertCell\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"Delete C~ells...\",\n            \"command\": \".uno:DeleteCell\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"Delete\",\n            \"command\": \".uno:Delete\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"Merge Cells\",\n            \"command\": \".uno:MergeCells\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"Split Cell\",\n            \"command\": \".uno:SplitCell\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Format Paintbrush\",\n            \"command\": \".uno:FormatPaintbrush\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"Reset Attributes\",\n            \"command\": \".uno:ResetAttributes\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\"\n        },\n        {\n            \"text\": \"Format Styles Menu\",\n            \"command\": \".uno:FormatStylesMenu\",\n            \"style\": 0,\n            \"checked\": false,\n            \"enabled\": true,\n            \"default\": false,\n            \"help_command\": \"\",\n            \"help_text\": \"\",\n            \"tip_help_text\": \"\",\n            \"shortcut\": \"\",\n            \"submenu\": [\n                {\n                    \"text\": \"Edit Style\",\n                    \"command\": \".uno:EditStyle\",\n                    \"style\": 0,\n                    \"checked\": false,\n                    \"enabled\": true,\n                    \"default\": false,\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Popup Menu in LibreOffice\nDESCRIPTION: Shows how to access a submenu (Forms menu) from a parent popup menu using the command string to find the menu ID.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> menu_id, _ = tools_popup.find_item_menu_id(\".uno:ToolsFormsMenu\")\n>>> forms_menu = tools_popup.get_popup_menu(menu_id)\n>>> len(forms_menu)\n12\n```\n\n----------------------------------------\n\nTITLE: Finding the First Matching Text Range in Python\nDESCRIPTION: This code fragment is used to locate the first occurrence of text matching a given search descriptor. It demonstrates how to navigate the matching text range using a text view cursor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsrch = searchable.findFirst(srch_desc)\n\nif srch is not None:\n    match_tr = Lo.qi(XTextRange, srch)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color on Multiple Cells with Python\nDESCRIPTION: This snippet shows how to apply background color to a range of cells (A1:B1) in Calc using the ooodev library. It initializes a document, sets values in cells, obtains a range, and applies a color, validating the color change afterward.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/background.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.background import Color as BgColor\nfrom ooodev.utils.color import StandardColor\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        Calc.set_val(value=\"Hello\", sheet=sheet, cell_name=\"A1\")\n        Calc.set_val(value=\"World\", sheet=sheet, cell_name=\"B1\")\n        rng = Calc.get_cell_range(sheet=sheet, range_name=\"A1:B1\")\n\n        style = BgColor(StandardColor.BLUE_LIGHT2)\n        style.apply(rng)\n\n        f_style = BgColor.from_obj(rng)\n        assert f_style.prop_color == StandardColor.BLUE_LIGHT2\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Highlighting Cells in Calc with Python\nDESCRIPTION: The `_highlight()` method applies styling to a given cell range by making the text bold and changing background and border colors. It requires imports from the `ooodev` library for formatting cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format import Styler\nfrom ooodev.format.calc.direct.cell.background import Color as BgColor\nfrom ooodev.format.calc.direct.cell.borders import Borders, BorderLineKind, Side, LineSize\nfrom ooodev.format.calc.direct.cell.font import Font\nfrom ooodev.format.calc.direct.cell.standard_color import StandardColor\n# ... other imports\n\ndef _highlight(self, cr: XCellRange) -> None:\n    # highlight by make cell bold, with text color of Light purple and a background color of light blue.\n    ft = Font(b=True, color=StandardColor.PURPLE_LIGHT1)\n    bg_color = BgColor(StandardColor.DEFAULT_BLUE)\n    borders = Borders(\n        border_side=Side(line=BorderLineKind.SOLID, color=StandardColor.RED_DARK3)\n    )\n    Styler.apply(cr, ft, bg_color, borders)\n```\n\n----------------------------------------\n\nTITLE: Deleting Calc Sheet in Python\nDESCRIPTION: Remove a sheet from a Calc document by either its index or name using the CalcSheets class collection deletion methods. The \"del\" keyword is employed for this operation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_sheets.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\\n>>> del doc.sheets[0]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\\n>>> del doc.sheets['Sheet1']\n```\n\n----------------------------------------\n\nTITLE: Accessing Draw Pages from Document\nDESCRIPTION: This code snippet shows how to access the draw pages in a document using the XDrawPagesSupplier interface. It requires a previously loaded document and retrieves the pages contained within it.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter11.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\n\nsupplier = Lo.qi(XDrawPagesSupplier, doc)\npages = supplier.getDrawPages() # XDrawPages\n```\n\n----------------------------------------\n\nTITLE: Modifying DocMonitor for Bridge Disposing\nDESCRIPTION: This snippet shows how to modify the DocMonitor class to detect when the UNO bridge between Python and LibreOffice is disposed. It attaches a listener to the bridge connection and defines an `on_disposing_bridge` method that is called when the bridge terminates unexpectedly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"# DocMonitor _set_internal_events changes\n        self._fn_on_disposing_bridge = self.on_disposing_bridge\n\n        # attach a listener to the bridge connection that gets notified if\n        # office bridge connection terminates unexpectedly.\n        # Lo.bridge is not available if a script is run as a macro.\n        self._bridge_events = EventEvents()\n        self._bridge_events.add_event_disposing(self._fn_on_disposing)\n        Lo.bridge.addEventListener(self._bridge_events.events_listener_event)\n\n        # DocMonitor new method\n        def on_disposing_bridge(self, source: Any, event_args: EventArgs, *args, **kwargs) -> None:\n            print(\"BR: Office bridge has gone!!\")\"\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Menu Items in LibreOffice/OpenOffice with Python\nDESCRIPTION: Demonstrates how to safely insert a new menu item by checking if it exists first. The save parameter determines if the menu change is persisted. Uses the menu.insert() method with options for positioning and persistence.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif not menu_name in menu:\n    # only add the menu if it does not already exist\n    menu.insert(new_menu, after=itm.command, save=True)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Line Properties in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the line properties of a shape using the LineProperties.from_obj() method and verify a specific property value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/line_properties.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.line import LineProperties\n# ... other code\n\n# get the properties from the shape\nf_style = LineProperties.from_obj(rect.component)\nassert f_style.prop_color == StandardColor.RED_DARK3\n```\n\n----------------------------------------\n\nTITLE: Setting Orientation for Pie and Donut Charts in Python\nDESCRIPTION: Demonstrates how to set the angle and direction of a pie or donut chart using the Orientation class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/options.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.options import Orientation\n# ... other code\n\norient = Orientation(chart_doc=chart_doc, clockwise=True, angle=Angle(45))\nChart2.style_data_series(chart_doc=chart_doc, styles=[orient])\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for DrawingHatchingKind Class\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the DrawingHatchingKind class from the ooodev.utils.kind.drawing_hatching_kind module. The directive includes all class members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/drawing_hatching_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.drawing_hatching_kind.DrawingHatchingKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Importing ooodev.format.writer.modify.para.outline_list Package in Python\nDESCRIPTION: This snippet demonstrates how to import the ooodev.format.writer.modify.para.outline_list package in Python. The package likely contains functionality for modifying outline lists in LibreOffice Writer documents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.para.outline_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.outline_list import *\n```\n\n----------------------------------------\n\nTITLE: Main Function: Initialize and Style Chart Document in Python\nDESCRIPTION: This Python function initializes a spreadsheet document, modifies a chart's appearance by setting font styles for data series and data points, and manages document resources. Dependencies include ooodev, CalcDoc, and various styling classes. Key parameters include the font name, size, and style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BLUE_LIGHT3,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient_from_preset(\n            preset=PresetGradientKind.TEAL_BLUE,\n        )\n\n        ds = chart_doc.get_data_series()[0]\n        ds.style_font(name=\"Lucida Calligraphy\", size=14, font_style=\"italic\")\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from Slide Deck in Python\nDESCRIPTION: The `ExtractText` class and its `main` method are used to extract all text from a presentation. It opens the document and checks if content is shape-based before retrieving text using `Draw.get_shapes_text`. The extracted text is printed, and the document is closed after a set delay.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# extract_text.py\nfrom __future__ import annotations\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.draw import Draw\nfrom ooodev.utils.type_var import PathOrStr\nfrom ooodev.utils.file_io import FileIO\n\nclass ExtractText:\n    def __init__(self, fnm: PathOrStr) -> None:\n        _ = FileIO.is_exist_file(fnm=fnm, raise_err=True)\n        self._fnm = FileIO.get_absolute_path(fnm)\n\n    def main(self) -> None:\n        with Lo.Loader(Lo.ConnectPipe(headless=True)) as loader:\n            doc = Lo.open_doc(fnm=self._fnm, loader=loader)\n\n            if Draw.is_shapes_based(doc):\n                print(\"Text Content\".center(46, \"-\"))\n                print(Draw.get_shapes_text(doc))\n                print(\"-\" * 46)\n            else:\n                print(\"Text extraction unsupported for this document type\")\n\n            Lo.delay(1000)\n            Lo.close_doc(doc)\n```\n\n----------------------------------------\n\nTITLE: Printing Text Portion Details in Python\nDESCRIPTION: This Python code prints details of a text portion, specifically the type and actual string content, using properties and methods from the `TextPortion` service and the `XTextRange` interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nprint(f'  {Props.get_property(txt_range, \"TextPortionType\")} = \"{txt_range.getString()}\"')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Gradient Background for Chart in Python\nDESCRIPTION: Shows how to create and apply a custom gradient background to a chart using the ChartGradient class. The gradient is set from dark green to light green at a 45-degree angle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, GradientStyle\nfrom ooodev.format.chart2.direct.general.area import ColorRange\n\n# ... other code\nchart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=0.7)\nchart_grad = ChartGradient(\n    chart_doc=chart_doc,\n    style=GradientStyle.LINEAR,\n    angle=45,\n    grad_color=ColorRange(StandardColor.GREEN_DARK3, StandardColor.GREEN_LIGHT2),\n)\nChart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n```\n\n----------------------------------------\n\nTITLE: Creating Gradient Transparency for Chart Data Series in Python\nDESCRIPTION: Example of creating and applying gradient transparency to chart data series. This creates a gradient that transitions from 0% to 100% transparency at a 30-degree angle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.transparency import Gradient as SeriesGradient\nfrom ooodev.format.chart2.direct.series.data_series.transparency import IntensityRange\nfrom ooodev.utils.data_type.angle import Angle\n# ... other code\n\ndata_series_grad_transparency = SeriesGradient(\n    chart_doc=chart_doc, angle=Angle(30), grad_intensity=IntensityRange(0, 100)\n)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_series_grad_transparency])\n```\n\n----------------------------------------\n\nTITLE: Initializing a Rectangle with a Solid Color Fill in Draw\nDESCRIPTION: This code snippet demonstrates how to create a rectangle shape in a LibreOffice Draw slide and set its fill color using the `Draw` class from the `ooo-dev-tools` library.  It initializes a rectangle with specified dimensions and sets the `FillColor` property of the rectangle's component to a given color, effectively filling the rectangle with a solid color. Other fill properties, such as transparency, can also be set.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n        # in DrawGradient Class()\n        def _gradient_fill(self, curr_slide: DrawPage[DrawDoc]) -> None:\n            # rect1.component is com.sun.star.drawing.RectangleShape service which\n            # also implements com.sun.star.drawing.FillProperties service.\n            rect1 = curr_slide.draw_rectangle(\n                x=self._x,\n                y=self._y,\n                width=self._width,\n                height=self._height,\n            )\n            rect1.component.FillColor = self._start_color\n            # other properties can be set\n            # rect1.component.FillTransparence = 55\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document and Applying Text Alignment in Python\nDESCRIPTION: This snippet demonstrates how to create a Draw document, add a rectangle shape, set its text content, and apply text alignment and column settings. It uses the ooodev library to interact with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/paragraph/alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.text import TextColumns\nfrom ooodev.format.draw.direct.text.text import TextAnchor, ShapeBasePointKind\nfrom ooodev.format.draw.direct.para.alignment import Alignment, ParagraphAdjust\nfrom ooodev.format import Styler\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        sb = []\n        for _ in range(12):\n            sb.append(\"Hello World!\")\n        rect.set_string(\"\\n\".join(sb))\n\n        anchor = TextAnchor(anchor_point=ShapeBasePointKind.CENTER, full_width=True)\n        align = Alignment(align=ParagraphAdjust.CENTER)\n        txt_cols = TextColumns(col_count=2, spacing=0.5)\n        Styler.apply(rect.component, anchor, align, txt_cols)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving shape pattern in LibreOffice Draw\nDESCRIPTION: This snippet demonstrates how to retrieve the fill pattern of a shape using the ShapePattern.from_obj() method. It assumes 'rec' is a previously created shape object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/pattern.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Pattern as ShapePattern\n# ... other code\n\n# get the pattern from the shape\nf_style = ShapePattern.from_obj(rec)\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: Documenting TextStream Class with Sphinx in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the TextStream class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/string/text_stream.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.string.text_stream.TextStream\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for package contents\nDESCRIPTION: This snippet utilizes the `automodule` directive to automatically generate documentation for the `ooodev.format.proto.area.transparency` package. It includes members, excludes undocumented members, and shows inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.area.transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.proto.area.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Styling Chart Y-Axis Line in Python\nDESCRIPTION: This code snippet demonstrates how to style the Y-axis line of a chart in a Calc document using the `style_axis_line()` method.  It sets the color of the line to `StandardColor.TEAL` and the width to `0.75`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/line.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n_ = chart_doc.axis_y.style_axis_line(\n    color=StandardColor.TEAL, width=0.75\n)\"\n```\n\n----------------------------------------\n\nTITLE: Draw Lines Implementation Method\nDESCRIPTION: Implementation of draw_lines() method that creates PolyLineShape with multiple connected lines.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef draw_lines(cls, slide: XDrawPage, xs: Sequence[int], ys: Sequence[int]) -> XShape:\n\n    num_points = len(xs)\n    if num_points != len(ys):\n        raise IndexError(\"xs and ys must be the same length\")\n\n    pts: List[Point] = []\n    for x, y in zip(xs, ys):\n        pts.append(Point(x * 100, y * 100))\n\n    line_paths = (tuple(pts),)\n\n    poly_line = cls.add_shape(\n        slide=slide, shape_type=DrawingShapeKind.POLY_LINE_SHAPE, x=0, y=0, width=0, height=0\n    )\n    prop_set = mLo.Lo.qi(XPropertySet, poly_line, raise_err=True)\n    seq = uno.Any(\"[][]com.sun.star.awt.Point\", line_paths)\n    uno.invoke(prop_set, \"setPropertyValue\", (\"PolyPolygon\", seq))\n    return poly_line\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Pages in Impress Document\nDESCRIPTION: This snippet illustrates how to iterate over pages in an Impress document using a for loop. Dependency: Requires the ImpressDoc class. The loop iterates over each page, processing or printing each ImpressPage object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/impress_pages.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> doc = ImpressDoc.open_doc(\"test.odp\")\n>>> for slide in doc.slides:\n...     print(slide)\n<ooodev.draw.ImpressPage object at 0x7f7f0c0b2b90>\n```\n\n----------------------------------------\n\nTITLE: Applying Auto Hyphenation in LibreOffice Writer using Python\nDESCRIPTION: This snippet demonstrates how to apply automatic hyphenation to a paragraph in a LibreOffice Writer document using the `Hyphenation` class from the `ooodev` module. The `cursor` is used to reference the current position in the document where the text is appended with hyphenation styles. The example works within a document session managed by the LibreOffice APIs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/text_flow.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# ... other code\ncursor = Write.get_cursor(doc)\ntf = Hyphenation(auto=True)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[tf])\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Font Formatting in Calc with Python\nDESCRIPTION: This snippet demonstrates how to apply conditional font formatting to a range of cells based on their values. It generates random numbers and applies different styles for positive and negative values using the Font class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.font import Font\nimport random\n# ... other code\n\nnum_rng = 5\ndata = [[random.randint(-100, 100) for _ in range(num_rng)] for _ in range(num_rng)]\nsheet.set_array(values=data, name=\"A1\")\nrng_obj = sheet.find_used_range_obj()\nft_pos = Font(color=CommonColor.DARK_GREEN, b=True)\nft_neg = ft_pos.fmt_color(CommonColor.DARK_RED).underline\nwith doc:\n    # lock controllers for faster processing and avoid flickering.\n    for cell_objs in rng_obj.get_cells():\n        for co in cell_objs:\n            cell = sheet[co]\n            val = cell.get_num()\n            if val < 0:\n                cell.apply_styles(ft_neg)\n            else:\n                cell.apply_styles(ft_pos)\n```\n\n----------------------------------------\n\nTITLE: Accessing Graphic Objects Supplier in LibreOffice Document\nDESCRIPTION: Demonstrates converting a document to a graphic objects supplier using LibreOffice API's XTextGraphicObjectsSupplier interface. Used to retrieve and manipulate graphic objects within a text document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# get the graphic objects supplier\nims_supplier = Lo.qi(XTextGraphicObjectsSupplier, doc)\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Font Effects in LibreOffice Writer using Python\nDESCRIPTION: This snippet demonstrates how to create a document, set font effects for a paragraph style, and apply the style. It uses the FontEffects class to set color, underline, and shadow properties for the Standard paragraph style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.font import FontEffects, FontLine\nfrom ooodev.format.writer.modify.para.font import FontUnderlineEnum, StyleParaKind\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_font_effects_style = FontEffects(\n            color=CommonColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n            shadowed=True,\n            style_name=StyleParaKind.STANDARD,\n        )\n        para_font_effects_style.apply(doc)\n\n        style_obj = FontEffects.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting a Slide from an Impress Document\nDESCRIPTION: This snippet shows how to retrieve a specific slide from an Impress document using its index.  The get_slide method returns an XDrawPage object, which represents the slide.  An ImpressDoc object is required as context.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"doc = ImpressDoc(Draw.create_impress_doc(loader))\ncurr_slide = doc.get_slide(idx=0)\n\"\n```\n\n----------------------------------------\n\nTITLE: Adding RangeObj to CellObj in Python LibreOffice\nDESCRIPTION: Demonstrates adding a RangeObj to a CellObj to create a new range. Combines range F10:H15 with a cell to create D8:H15.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>> from ooodev.utils.data_type.cell_obj import CellObj\n>>>\n>>> rng1 = RangeObj(col_start=\"F\", col_end=\"H\", row_start=10, row_end=15, sheet_idx=0) \n>>> str(rng1)\n'F10:H15'\n>>> rng1.row_count\n6\n>>> rng1.col_count\n3\n>>> rng2 = CellObj.from_idx(1, 1) + rng1\n>>> str(rng2)\n'D8:H15'\n>>> repr(rng2)\n\"RangeObj(col_start='D', col_end='H', row_start=8, row_end=15, sheet_idx=0)\"\n>>> rng2.row_count \n8\n>>> rng2.col_count \n5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Command Data for Specific Module in Python\nDESCRIPTION: This snippet demonstrates how to use the CmdInfo class to retrieve information about a specific UNO command ('.uno:Copy') for a spreadsheet document. It creates a Calc document, instantiates CmdInfo, and queries for command data in the spreadsheet module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/commands/getting_info_on_commands.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.gui.commands import CmdInfo\nfrom ooodev.utils.kind.module_names_kind import ModuleNamesKind\n\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=False)\n    try:\n\n        start_time = time.time()\n        inst = CmdInfo() # singleton class\n\n        cmd_data = inst.get_cmd_data(ModuleNamesKind.SPREADSHEET_DOCUMENT, \".uno:Copy\")\n        if cmd_data:\n            print(cmd_data)\n\n    finally:\n        doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Spell Sentence Method - Python\nDESCRIPTION: Class method in the 'Write' class that checks the spelling of each word in a given sentence using a provided spell checker. It splits a sentence into words and counts the number of misspelled words, returning this count.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef spell_sentence(cls, sent: str, speller: XSpellChecker, loc: Locale | None = None) -> int:\n    words = re.split(\"\\W+'\", sent)\n    count = 0\n    for word in words:\n        is_correct = cls.spell_word(word=word, speller=speller, loc=loc)\n        count = count + (0 if is_correct else 1)\n    return count\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Table with Dynamic Rows and Columns\nDESCRIPTION: Creates a LibreOffice text table with dynamically calculated rows and columns using XTextTable interface. Determines table dimensions from input data and initializes the table structure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nnum_rows = len(table_data)\nnum_cols = len(table_data[0])\nLo.print(f\"Creating table rows: {num_rows}, cols: {num_cols}\")\ntable.initialize(num_rows, num_cols)\n```\n\n----------------------------------------\n\nTITLE: Creating Title-only Slide Layout - Python\nDESCRIPTION: Sets up a slide with only a title by configuring its properties and locating a text field to set the title string. Requires the slide object and the title string as parameters. No return value as it modifies the slide directly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n        @classmethod\n        def title_only_slide(cls, slide: XDrawPage, header: str) -> None:\n\n            Props.set(slide, Layout=PresentationLayoutKind.TITLE_ONLY.value)\n\n            xs = cls.find_shape_by_type(slide=slide, shape_type=DrawingNameSpaceKind.TITLE_TEXT)\n            txt_field = Lo.qi(XText, xs, True)\n            txt_field.setString(header)\n\n```\n\n----------------------------------------\n\nTITLE: Clearing Borders from a Range in Python\nDESCRIPTION: This code snippet illustrates how to remove all borders from a range of cells using the `style_borders_clear` method on a cell range object. The example first applies default borders before clearing them.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\ncell_rng.style_borders_default()\n# ...\ncell_rng.style_borders_clear()\n```\n\n----------------------------------------\n\nTITLE: Setting Formula Property in LibreOffice using Python\nDESCRIPTION: This code snippet shows how to set the formula string as a property of the embedded object. The XPropertySet interface is used to access the properties of the embed_obj_model, and then the setPropertyValue method is called to set the 'Formula' property to the formula string.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nformula_props = Lo.qi(XPropertySet, embed_obj_model, True)\nformula_props.setPropertyValue(\"Formula\", formula)\n```\n\n----------------------------------------\n\nTITLE: Attaching Selection Change Events in Calc\nDESCRIPTION: The `_attach_listener` method in Python binds class methods to event callbacks in LibreOffice Calc. It maps methods to fields for event handling, like window closing and selection change. Prerequisites include building understanding how event-driven programming is done using UNO API. This setup wraps event listeners for handling user interactions like window closing and cell selection changes, ultimately triggering class-specific methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# in select_listener.py\ndef _attach_listener(self) -> None:\n    # Event handlers are defined as methods on the class.\n    # However class methods are not callable by the event system.\n    # The solution is to assign the method to class fields and use them to add the event callbacks.\n    self._fn_on_window_closing = self.on_window_closing\n    self._on_selection_changed = self.on_selection_changed\n    self._on_disposing = self.on_disposing\n\n    # close down when window closes\n    self._twe = TopWindowEvents(add_window_listener=True)\n    self._twe.add_event_window_closing(self._fn_on_window_closing)\n\n    # pass doc to constructor, this will allow listener events to be automatically attached to document.\n    self._sel_events = SelectionChangeEvents(doc=self._doc.component)\n    self._sel_events.add_event_selection_changed(self._on_selection_changed)\n    self._sel_events.add_event_selection_change_events_disposing(self._on_disposing)\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Preset to Chart Title\nDESCRIPTION: Shows how to apply a preset hatch style to a chart title using PresetHatchKind enum. Sets the background hatch pattern of the chart title.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_hatch import PresetHatchKind\n\n# ... other code\ntitle = chart_doc.get_title()\nif title is None:\n    raise ValueError(\"Title not found\")\n\ntitle.style_area_hatch_from_preset(\n    preset=PresetHatchKind.YELLOW_45_DEGREES_CROSSED,\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Calc Cell Alignment Properties\nDESCRIPTION: This snippet demonstrates how to retrieve the text alignment properties applied to a Calc cell using the `style_align_properties_get` method. It asserts that the returned style object is not None.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/alignment.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n        f_style = cell.style_align_properties_get()\n        assert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Setting up and applying paragraph area hatch style in LibreOffice Writer with Python\nDESCRIPTION: A complete example that demonstrates loading a Writer document, applying a preset hatch pattern to a paragraph style, and then retrieving the style back from the document for verification. The example uses the ParaStyleHatch class to modify the Standard paragraph style with a green 90-degree triple hatch pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.area import Pattern as ParaStylePattern\nfrom ooodev.format.writer.modify.para.area import StyleParaKind, PresetPatternKind\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_area_hatch_style = ParaStyleHatch.from_preset(\n            preset=PresetHatchKind.GREEN_90_DEGREES_TRIPLE, style_name=StyleParaKind.STANDARD\n        )\n        para_area_hatch_style.apply(doc)\n\n        style_obj = ParaStyleHatch.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Spell Check Properties in Python\nDESCRIPTION: This code snippet illustrates changing spelling properties using a properties maker and modifying 'IsSpellCapitalization' to 'False' to ignore capitalization during spelling checks. However, it notes limitations with 'XSpellChecker', as the method does not honor these property changes, emphasizing the need for manual settings adjustments through the UI.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprops = Props.make_props(IsSpellCapitalization=False)\nalts = speller.spell(word, loc, props);\n```\n\n----------------------------------------\n\nTITLE: Documenting DeletedAttrib Class in Python\nDESCRIPTION: Uses Sphinx autoclass directive to generate documentation for the DeletedAttrib class, exposing all members and undocumented members\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/meta/deleted_attrib.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.meta.deleted_attrib.DeletedAttrib\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Getting Controller and Frame References in Impress\nDESCRIPTION: Code that obtains controller and frame references for a document in LibreOffice Impress. These references are used to manipulate the document and reduce the number of arguments passed between methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# in AppendSlides.main() of append_slides.py\nself._to_ctrl = GUI.get_current_controller(doc)\nself._to_frame = GUI.get_frame(doc)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Title Position\nDESCRIPTION: Demonstrates how to set the position of a chart title using specific coordinates in millimeters with the TitlePosition class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/position_size.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.position_size import Position as TitlePosition\n# ... other code\n\ntitle_pos = TitlePosition(7.1, 66.3)\nChart2.style_title(chart_doc=chart_doc, styles=[title_pos])\n```\n\n----------------------------------------\n\nTITLE: Document Information Examination\nDESCRIPTION: Comprehensive example showing how to examine document services, interfaces, methods and properties using various utility functions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith BreakContext(Lo.Loader(Lo.ConnectSocket(headless=True))) as loader:\n    fnm = args.fnm_doc\n    doc_type = Info.get_doc_type(fnm=fnm)\n    print(f\"Doc type: {doc_type}\")\n    Props.show_doc_type_props(doc_type)\n\n    try:\n        doc = Lo.open_doc(fnm=fnm, loader=loader)\n    except Exception:\n        print(f\"Could not open '{fnm}'\")\n        raise BreakContext.Break\n\n    if args.service is True:\n        print()\n        print(\" Services for this document: \".center(80, \"-\"))\n        for service in Info.get_services(doc):\n            print(f\"  {service}\")\n        print()\n        print(f\"{Lo.Service.WRITER} is supported: {Info.is_doc_type(doc, Lo.Service.WRITER)}\")\n        print()\n\n        print(\"  Available Services for this document: \".center(80, \"-\"))\n        for i, service in enumerate(Info.get_available_services(doc)):\n            print(f\"  {service}\")\n        print(f\"No. available services: {i}\")\n\n    if args.interface is True:\n        print()\n        print(\" Interfaces for this document: \".center(80, \"-\"))\n        for i, intfs in enumerate(Info.get_interfaces(doc)):\n            print(f\"  {intfs}\")\n        print(f\"No. interfaces: {i}\")\n\n    if args.xdoc is True:\n        print()\n        print(f\" Method for interface: com.sun.star.text.XTextDocument \".center(80, \"-\"))\n\n        for i, meth in enumerate(Info.get_methods(\"com.sun.star.text.XTextDocument\")):\n            print(f\"  {meth}()\")\n        print(f\"No. methods: {i}\")\n\n    if args.property is True:\n        print()\n        print(\" Properties for this document: \".center(80, \"-\"))\n        for i, prop in enumerate(Props.get_properties(doc)):\n            print(f\"  {Props.show_property(prop)}\")\n        print(f\"No. properties: {i}\")\n\n    if args.doc_meth is True:\n        print()\n        print(f\" Method for entire document \".center(80, \"-\"))\n\n        for i, meth in enumerate(Info.get_methods_obj(doc)):\n            print(f\"  {meth}()\")\n        print(f\"No. methods: {i}\")\n\n    print()\n\n    prop_name = \"CharacterCount\"\n    print(f\"Value of {prop_name}: {Props.get_property(doc, prop_name)}\")\n\n    Lo.close_doc(doc)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Orientation\nDESCRIPTION: This code snippet demonstrates how to set the orientation of a chart's data series using the `Orientation` class from the `ooodev` library. It creates an `Orientation` object with specified clockwise direction and angle, then applies it to the chart using `Chart2.style_data_series()`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/options.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.chart2.direct.series.data_series.options import Orientation\n# ... other code\n\norient = Orientation(chart_doc=chart_doc.component, clockwise=True, angle=45)\nChart2.style_data_series(chart_doc=chart_doc.component, styles=[orient])\"\n```\n\n----------------------------------------\n\nTITLE: Running the Automation Script\nDESCRIPTION: Command to execute the LibreOffice FlatPak automation script created earlier.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython hello_world.py\n```\n\n----------------------------------------\n\nTITLE: Drawing Line with Position Parameters\nDESCRIPTION: Method for drawing a line by specifying start and end coordinates. Validates input to prevent zero-length lines and handles negative dimensions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef draw_line(cls,\n    slide: XDrawPage,\n    x1: int | UnitT,\n    y1: int | UnitT,\n    x2: int | UnitT,\n    y2: int | UnitT\n    ) -> XShape:\n    # make sure size is non-zero\n    if (x1 == x2) and (y1 == y2):\n        raise ValueError(\"Cannot create a line from a point\")\n\n    width = x2 - x1  # may be negative\n    height = y2 - y1  # may be negative\n    return cls.add_shape(\n        slide=slide,\n        shape_type=DrawingShapeKind.LINE_SHAPE,\n        x=x1,\n        y=y1,\n        width=width,\n        height=height,\n    )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Background Color in Python\nDESCRIPTION: Shows how to get the current background color of a chart using the ChartColor.from_obj method. This can be used to verify the applied style or for further processing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = ChartColor.from_obj(chart_doc.getPageBackground())\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graphic Object Names from XNameAccess in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the names of graphic objects associated with the XNameAccess interface and print the number of names retrieved. It sorts the names to allow orderly presentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnames = xname_access.getElementNames()\nprint(f\"Number of graphic names: {len(names)}\")\n\nnames.sort() # sort them, if you want\nLo.print_names(names) # useful for printing long lists\n```\n\n----------------------------------------\n\nTITLE: Running Python as a LibreOffice Macro\nDESCRIPTION: Demonstrates how to access the current Calc document and active spreadsheet when running Python code as a LibreOffice macro. It uses the Lo.ThisComponent to get the current document context.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.calc import Calc\n\ndef main():\n    # get access to current Calc Document\n    doc = Calc.get_ss_doc(Lo.ThisComponent)\n\n    # get access to current spreadsheet\n    sheet = Calc.get_active_sheet(doc=doc)\n```\n\n----------------------------------------\n\nTITLE: Printing a Spreadsheet Range Using User-Defined Properties in Python\nDESCRIPTION: This example shows how to retrieve printer name and sheet index from the document's user-defined properties, find the used range of the specified sheet, and print that range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/class/print_sheet.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom com.sun.star.beans import XPropertySet\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.calc import Calc\nfrom ooodev.utils.info import Info\n\n# ... other code\n\ndoc = Calc.open_doc(fnm=\"my_spreadsheet.ods\")\nuser_props = Info.get_user_defined_props(doc)\n\n# get properties as XPropertySet\nps = Lo.qi(XPropertySet, user_props, True)\nidx = int(ps.getPropertyValue(\"PrintSheet\")) -1 # -1 because index starts at 0\nprinter_name = ps.getPropertyValue(\"PrinterName\")\n\nsheet = Calc.get_sheet(doc=doc, idx=idx)\n\n# find the used range of the sheet\nused_range = Calc.find_used_range(sheet=sheet) # XCellRange\n\n# send the used range to the printer\nCalc.print_sheet(printer_name=printer_name, cell_range=used_range)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Gradient Style from Document in Python OOo Tools\nDESCRIPTION: This code snippet illustrates how to retrieve the current gradient style from a document in LibreOffice using the ooodev library's Gradient class. By specifying the style name and family, it fetches the gradient style applied to graphics elements in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/gradient.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf_style = Gradient.from_style(\n    doc=doc.component,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Setting Up Writer Document with Paragraph Borders using ooodev\nDESCRIPTION: A complete example showing how to set up a LibreOffice Writer document and apply paragraph borders with dash-dot line style, blue-violet color, shadow, and padding using the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.style import Para as StylePara\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.writer.direct.para.borders import (\n    Borders,\n    BorderLineKind,\n    Padding,\n    Side,\n    Shadow,\n)\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Write.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        cursor = Write.get_cursor(doc)\n        bdr = Borders(\n            all=Side(line=BorderLineKind.DASH_DOT, color=CommonColor.BLUE_VIOLET),\n            shadow=Shadow(),\n            padding=Padding(all=1.7),\n            merge=False,\n        )\n        Write.append_para(cursor=cursor, text=p_txt, styles=[bdr])\n        StylePara.default.apply(cursor)\n        Write.append_para(cursor=cursor, text=p_txt)\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Generating Geometric Series with Growth Mode\nDESCRIPTION: Uses GROWTH mode to create a geometric progression by multiplying seed values\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsheet.set_val(cell_name=\"G6\", value=10)\n\nseries = sheet.get_range(range_name=\"G2:G6\").get_cell_series()\nseries.fillSeries(\n    FillDirection.TO_TOP, FillMode.GROWTH, Calc.NO_DATE, 2, Calc.MAX_VALUE\n)\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.sheet.view_pane_partial Module\nDESCRIPTION: This snippet represents the auto-generated module documentation for `ooodev.adapter.sheet.view_pane_partial`. It uses the `automodule` directive to include the module's members, exclude undocumented members, and show inheritance details. The snippet is a part of the documentation build process for the `ooodev` library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.sheet.view_pane_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.sheet.view_pane_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Draw Documents Using LoContext in Python\nDESCRIPTION: Demonstrates how to create two LibreOffice Draw documents simultaneously using the LoContext feature. This example shows how to create the first document normally and the second one with a new LibreOffice instance context.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.draw import DrawDoc\nfrom ooodev.loader.lo import Lo\n\n# create first doc normally\ndoc_first = DrawDoc.create_doc()\ndoc.set_visible()\n\n# for a second doc create a new LoInst to open an new document with.\nlo_inst = Lo.create_lo_instance()\n# create a new DrawDoc and pass it the new instance context.\nsecond_doc = DrawDoc.create_doc(lo_inst=lo_inst)\nsecond_doc.set_visible()\n```\n\n----------------------------------------\n\nTITLE: Accessing and Printing Document Property Value in LibreOffice with Python\nDESCRIPTION: This code snippet demonstrates how to access a specific document property (CharacterCount in this example) using the Props.get_property method and print its value. The prop_name variable stores the name of the property to be retrieved.  This snippet assumes that doc, prop_name and Props are initialized and available in the current scope.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n        prop_name = \"CharacterCount\"\n        print(f\"Value of {prop_name}: {Props.get_property(doc, prop_name)}\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Impress Document\nDESCRIPTION: This code demonstrates how to create a new Impress document using the Lo.create_doc method. It takes the document type as IMPRESS and a component loader as input.  The XComponent is returned which represents the newly created Impress document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# in Draw class\n@staticmethod\ndef create_impress_doc(loader: XComponentLoader) -> XComponent:\n    return Lo.create_doc(doc_type=Lo.DocTypeStr.IMPRESS, loader=loader)\n\"\n```\n\n----------------------------------------\n\nTITLE: Setting Character Styles with Cursor and Manual Clearing in Writer\nDESCRIPTION: Demonstrates how to apply character styles to text in a Writer document, including font properties and borders. This example shows the pattern of selecting text, applying styles, and then clearing the cursor formatting before continuing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/cursor/cursor_char_style.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom ooodev.write import WriteDoc\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.writer.direct.char.font import FontScriptKind\nfrom ooodev.format.writer.direct.char.borders import BorderLineKind\n\n# ... other code\ndoc = WriteDoc.create_doc(visible=True)\ncursor = doc.get_cursor()\n\n# make an alias (shortcut) to make clearing easier\nclr = cursor.style_direct_char.clear\n\ncursor.append(\"Hello\")\n# go left and select the the last word appended\ncursor.go_left(5, True)\n\n# Style the Hello word to be Font size 30, bold, italic, underline and color blue.\ncursor.style_direct_char.style_font_general(\n    size=30.0,\n    b=True,\n    i=True,\n    u=True,\n    color=StandardColor.BLUE,\n)\n# put a border around Hello\ncursor.style_direct_char.style_borders_side(\n    line=BorderLineKind.DOUBLE_THIN,\n    color=StandardColor.RED,\n)\n\n# put the cursor back to the end so we can append more text.\ncursor.goto_end()\n# clear the cursor character styles.\nclr() # Alias of cursor.style_direct_char.clear() for brevity\n\n# append world without any character styling\ncursor.append(\" World\")\n# make the d in World subscript\n\ncursor.go_left(1, True) # select the d character\nstyle = cursor.style_direct_char.style_font_position(script_kind=FontScriptKind.SUBSCRIPT)\n# reset cursor\ncursor.goto_end()\nclr()\n\ncursor.append(\". Nice Day!\") # unformatted characters\n```\n\n----------------------------------------\n\nTITLE: Setting Plot Options for Column Chart in LibreOffice using Python\nDESCRIPTION: This snippet shows how to set plot options for a column chart, specifically configuring missing value handling to use zero values and hiding cell values. The Plot class from OOO Dev Tools is used together with the Chart2.style_data_series method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/options.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.options import Plot, MissingValueKind\n# ... other code\n\nplot_options = Plot(\n    chart_doc=chart_doc, missing_values=MissingValueKind.USE_ZERO, hidden_cell_values=False\n)\nChart2.style_data_series(chart_doc=chart_doc, styles=[plot_options])\n```\n\n----------------------------------------\n\nTITLE: Aligning Data Series to Y-Axis\nDESCRIPTION: This code demonstrates how to align a data series to either the primary or secondary y-axis in a chart using the `AlignSeries` class from the `ooodev` library. The `primary_y_axis` parameter determines which axis the data series aligns to.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/options.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.chart2.direct.series.data_series.options import AlignSeries\n# ... other code\n\nalign_options = AlignSeries(chart_doc.component, primary_y_axis=False)\nChart2.style_data_series(chart_doc=chart_doc.component, styles=[align_options])\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Calc Document for Header Border Modification in Python\nDESCRIPTION: This snippet demonstrates setting up a LibreOffice Calc document and initializing header styles using the ooodev Python library. It shows connecting to a LibreOffice instance, creating a document, and preparing styles. Dependencies include the `uno` library and `ooodev` package.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/bordes.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format import Styler\nfrom ooodev.format.calc.modify.page.header import Header, CalcStylePageKind\nfrom ooodev.format.calc.modify.page.header.borders import BorderLineKind, LineSize\nfrom ooodev.format.calc.modify.page.header.borders import Padding, Shadow, Sides\nfrom ooodev.format.calc.modify.page.header.borders import Sides, Side\nfrom ooodev.office.calc import Calc\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        header_style = Header(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=CalcStylePageKind.DEFAULT,\n        )\n        side = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\n        header_sides_style = Sides(all=side, style_name=CalcStylePageKind.DEFAULT)\n        Styler.apply(doc, header_style, header_sides_style)\n\n        style_obj = Sides.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting up Calc Direct Cell Font Class in Python\nDESCRIPTION: This snippet demonstrates the setup process for using the Calc Direct Cell Font Class. It imports necessary modules, creates a Calc document, sets up a sheet, and applies font styling to cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.format.calc.direct.cell.font import Font\nfrom ooodev.format import CommonColor, Styler\n\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(300)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_200_PERCENT)\n\n        cell_obj = Calc.get_cell_obj(\"A1\")\n        Calc.set_val(value=\"Hello\", sheet=sheet, cell_obj=cell_obj)\n        Calc.set_val(value=\"World\", sheet=sheet, cell_obj=cell_obj.right)\n\n        a1 = Calc.get_cell(sheet=sheet, cell_obj=cell_obj)\n        b12 = Calc.get_cell(sheet=sheet, cell_obj=cell_obj.right)\n\n        ft = Font(color=CommonColor.DARK_GREEN)\n        Styler.apply(a1, ft)\n        Styler.apply(b12, ft.bold.underline)\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Different Colors to Top and Side Borders using ooodev in Python\nDESCRIPTION: This snippet applies different colors and widths to the top/bottom and left/right borders of a cell range, using distinguishable styles for each direction.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        rng_obj = Calc.get_range_obj(\"B2:F6\")\n        cr = Calc.get_cell_range(sheet, rng_obj)\n        side_top_bottom = Side(color=CommonColor.CHARTREUSE, width=1.3)\n        side_left_right = Side(color=CommonColor.ROYAL_BLUE, width=1.3)\n        borders = Borders(\n            top=side_top_bottom,\n            bottom=side_top_bottom,\n            left=side_left_right,\n            right=side_left_right,\n        )\n        Styler.apply(cr, borders)\n```\n\n----------------------------------------\n\nTITLE: Applying Paragraph Area Pattern Style\nDESCRIPTION: This code snippet demonstrates how to apply a preset pattern to a paragraph style in a Writer document using the `ooodev` library. It initializes a Writer document, sets the zoom level, creates a `ParaStylePattern` object with a specified preset and style, applies the style to the document, and asserts the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_pattern.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.writer.modify.para.area import Pattern as ParaStylePattern\nfrom ooodev.format.writer.modify.para.area import StyleParaKind, PresetPatternKind\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_area_pattern_style = ParaStylePattern.from_preset(\n            preset=PresetPatternKind.SHINGLE, style_name=StyleParaKind.STANDARD\n        )\n        para_area_pattern_style.apply(doc)\n\n        style_obj = ParaStylePattern.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Cell Style in Calc\nDESCRIPTION: This snippet shows how to apply the default cell style to a cell by calling `style_by_name()` without any arguments. This effectively resets the cell's style to the default.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/cell.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\ncell.style_by_name()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Chart Properties in Python\nDESCRIPTION: Code snippet showing how to modify 3D chart properties by hiding axis labels and changing column shapes to cylinders. This enhancement can be applied to 3D column charts for visual customization.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# in _mult_col_chart()...\n# hide labels\nChart2.show_axis_label(chart_doc=chart_doc, axis_val=AxisKind.Z, idx=0, is_visible=False)\nChart2.set_chart_shape_3d(chart_doc=chart_doc, shape=DataPointGeometry3DEnum.CYLINDER)\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Properties in Writer\nDESCRIPTION: This Python code initializes and uses the TableProperties class from the ooodev library to set table properties in a LibreOffice Writer document. It demonstrates creating a document, inserting a table, setting table properties like name and alignment, and then retrieving and verifying those properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.table.properties import TableProperties, TableAlignKind\nfrom ooodev.write import WriteDoc\nfrom ooodev.units import UnitMM\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.intensity import Intensity\nfrom ooodev.loader import Lo\nfrom ooodev.utils.table_helper import TableHelper\n\n\n        def main() -> int:\n            with Lo.Loader(Lo.ConnectPipe()):\n                doc = WriteDoc.create_doc(visible=True)\n                Lo.delay(300)\n                doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n                cursor = doc.get_cursor()\n\n                tbl_data = TableHelper.make_2d_array(num_rows=5, num_cols=5)\n                # bdr_style = Borders(border_side=Side())\n                props_style = TableProperties(name=\"My_Table\", relative=False, align=TableAlignKind.AUTO)\n\n                table = cursor.add_table(\n                    table_data=tbl_data,\n                    first_row_header=False,\n                    tbl_bg_color=CommonColor.LIGHT_BLUE,\n                    tbl_fg_color=CommonColor.BLACK,\n                    styles=[bdr_style],\n                )\n\n                # getting the table properties\n                tbl_props_style = TableProperties.from_obj(table)\n                assert tbl_props_style.prop_name == \"My_Table\"\n\n                Lo.delay(1_000)\n                Lo.close_doc(doc)\n\n                Lo.close_doc(doc)\n\n            return 0\n\n\n        if __name__ == \"__main__\":\n            sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Secondary Y-Axis in Python\nDESCRIPTION: This snippet applies font effects to the secondary Y-Axis of a chart in LibreOffice, given it exists. It changes the font color to red and adds a blue single underline effect using the `style_font_effect` method. It's part of enhancing the visual representation of axes within the document, assuming the secondary Y-axis is present.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/font_effects.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ny2_axis = chart_doc.axis2_y\nif y2_axis is not None:\n    _ = y2_axis.style_font_effect(\n        color=StandardColor.RED,\n        underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n        shadowed=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Style in Calc\nDESCRIPTION: This snippet demonstrates how to retrieve the style name applied to a cell using the `style_by_name_get` method. It assumes that a style has already been applied to the cell.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/cell.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\nname = cell.style_by_name_get()\nassert name == str(StyleCellKind.ACCENT_1)\"\n```\n\n----------------------------------------\n\nTITLE: Casting Spreadsheet Document to XComponent - Python\nDESCRIPTION: This snippet performs the casting of a spreadsheet document to the XComponent interface, which is necessary since XSpreadsheetDocument does not inherit from XComponent. This allows the document to be manipulated as a component in the LibreOffice environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter19.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nxc = Lo.qi(XComponent, doc)\n```\n\n----------------------------------------\n\nTITLE: Using XAnimationNode for Advanced Animations - Python\nDESCRIPTION: Sets up an XAnimationNode for more control over animations in OpenOffice presentations. The necessary imports include XAnimationNode and a quering interface method. This provides access to advanced animation timings and paths. The code requires a slide object with animations attached.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom com.sun.star.animations import XAnimationNode\nfrom ooodev.loader.lo import Lo\n\nnode_supp = Lo.qi(XAnimationNodeSupplier, slide)\nslide_node = node_supp.getAnimationNode()  # XAnimationNode\n```\n\n----------------------------------------\n\nTITLE: Printing Detailed Information on Dictionaries in Python\nDESCRIPTION: This method within the Write class iterates over a list of dictionaries retrieved from Office's dictionary services, printing detailed information such as the name, active state, and locale of each dictionary. It shows a mapping from the dictionary type enumeration to string representations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in the Write class\n@classmethod\ndef print_dicts_info(cls, dict_list: XSearchableDictionaryList) -> None:\n    if dict_list is None:\n        print(\"Dictionary list is null\")\n        return\n    print(f\"No. of dictionaries: {dict_list.getCount()}\")\n    dicts = dict_list.getDictionaries()\n    for d in dicts:\n        print(\n            f\"  {d.getName()} ({d.getCount()}); ({'active' if d.isActive() else 'na'}); '{d.getLocale().Country}'; {cls.get_dict_type(d.getDictionaryType())}\"\n        )\n    print()\n\n@staticmethod\ndef get_dict_type(dt: Write.DictionaryType) -> str:\n    if dt == Write.DictionaryType.POSITIVE:\n        return \"positive\"\n    if dt == Write.DictionaryType.NEGATIVE:\n        return \"negative\"\n    if dt == Write.DictionaryType.MIXED:\n        return \"mixed\"\n    return \"??\"\n\n```\n\n----------------------------------------\n\nTITLE: Executing Menu Commands in LibreOffice/OpenOffice with Python\nDESCRIPTION: Demonstrates how to execute menu items using the MenuItem.execute() method. Works with dispatch calls and macro URLs. Includes verification of menu item type before execution.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui.menu.item import MenuItemKind\n# ...\nmenu = doc.menu[MenuLookupKind.TOOLS]\nitm = menu.items[\".uno:AutoComplete\"]\nif itm.item_kind >= MenuItemKind.ITEM:\n    MenuItem.execute() # run the menu command\n```\n\n----------------------------------------\n\nTITLE: Accessing Shapes by Index in Python\nDESCRIPTION: This snippet demonstrates how to obtain specific shapes from a slide using index-based access. It relies on the order of shapes and requires the `qi` function from the specific library to query interfaces. Title and subtitle shapes are accessed via their indices 0 and 1 respectively.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nx_shapes = curr_slide.qi(XShapes, True)\n\ntitle_shape = Lo.qi(XShape, x_shapes.getByIndex(0))\nsub_title_shape = Lo.qi(XShape, x_shapes.getByIndex(1))\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Macros\nDESCRIPTION: This command creates a symbolic link from the project macros directory to the LibreOffice scripts directory to make the macros accessible within the LibreOffice environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_linking_paths.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nln -s ~/Documents/Projects/Python/LibreOffice/demo_env/macros ~/.config/libreoffice/4/user/Scripts/python/my_macro\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Gradient\nDESCRIPTION: This snippet illustrates how to retrieve the fill gradient from a shape using the ShapeColor class. It verifies that the retrieved style matches the initially applied style, ensuring consistency in gradient application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/gradient.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.area import Color as ShapeColor\n# ... other code\n\n# get the gradient from the shape\nf_style = ShapeGradient.from_obj(rect)\n# assert the color is the same\nassert f_style.prop_inner == style.prop_inner\n```\n\n----------------------------------------\n\nTITLE: Documenting Basic Class with Autodoc\nDESCRIPTION: This snippet uses the `autoclass` directive from Sphinx's autodoc extension to generate documentation for the `ooodev.macro.script.Basic` class. It includes members, undocumented members, and inherited members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/macro/script/basic.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass::  ooodev.macro.script.Basic\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: LoDirectStart Class Example\nDESCRIPTION: This example demonstrates how to connect to LibreOffice using macros, highlighting that direct connections are not typically required for macros due to their inherent access to the LibreOffice API. The provided code snippet is designed to be included from an external resource file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/conn/connect/lo_direct_start.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\".. include:: ../../../resources/utils/lo_connect_direct_ex.rst\"\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for Package Type Info Module\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the package_type_info_partial module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.deployment.package_type_info_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.deployment.package_type_info_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Title Position in Python\nDESCRIPTION: The snippet opens a LibreOffice Calc document using 'ooodev', loads the first sheet and chart, and sets the chart title position to specific coordinates (7.1, 66.3 mm). It relies on modules like 'Lo', 'CalcDoc', and 'StandardColor' from the 'ooodev' library. Ensure that the document path is correct and 'ooodev' dependencies are installed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/position_size.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.PURPLE_DARK1,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.BLUE_DARK1,\n                StandardColor.PURPLE_LIGHT2,\n            ),\n        )\n\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_position(7.1, 66.3)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Resetting Paragraph Borders for Following Paragraphs\nDESCRIPTION: Example showing how to reset borders for the next paragraph by applying the default paragraph style to the cursor after adding a paragraph with borders.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/borders.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\ncursor = Write.get_cursor(doc)\nbdr = Borders(all=Side(line=BorderLineKind.DASH_DOT, color=CommonColor.BLUE_VIOLET), merge=False)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[bdr])\nStylePara.default.apply(cursor)\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Chart Number Formatting Setup in Python\nDESCRIPTION: This code snippet sets up a LibreOffice Calc document, opens an existing spreadsheet, zooms to 100%, accesses a chart within the spreadsheet, and applies styling such as border line color, area gradient, and number formatting to the Y-axis. It uses the python_ooo_dev_tools library for interacting with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooo.dyn.i18n.number_format_index import NumberFormatIndexEnum\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooodev.utils.data_type.offset import Offset\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \\\"tmp\\\" / \\\"bon_voyage.ods\\\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\\\"A1\\\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.GREEN_DARK2,\n            width=0.9,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=0,\n            offset=Offset(41, 50),\n            style=GradientStyle.RADIAL,\n            grad_color=ColorRange(\n                StandardColor.TEAL,\n                StandardColor.YELLOW_DARK1,\n            ),\n        )\n        _ = chart_doc.axis_y.style_numbers_numbers(\n            source_format=False,\n            num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\n\nif __name__ == \\\"__main__\\\":\n    SystemExit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangle Object with OOO Dynamic Namespaces\nDESCRIPTION: Demonstrates how to create a Rectangle object using ooouno's dynamic namespaces, which automatically resolve to the appropriate uno object at runtime\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooo.dyn.awt.rectangle import Rectangle\n>>> r = Rectangle(2, 10, 12, 18)\n>>> print(type(r))\n<class 'uno.com.sun.star.awt.Rectangle'>\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal and Vertical Lines to Cell Range in Calc\nDESCRIPTION: Sets different border styles for outer, horizontal, and vertical lines of a cell range. Uses blue for outer borders, green dash-dash-dot for horizontal lines, and red double lines for vertical borders.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nrng_obj = Calc.get_range_obj(\"B2:F6\")\ncr = Calc.get_cell_range(sheet, rng_obj)\nborders = Borders(\n    border_side=Side(color=CommonColor.BLUE),\n    horizontal=Side(line=BorderLineKind.DASH_DOT_DOT, color=CommonColor.GREEN),\n    vertical=Side(line=BorderLineKind.DOUBLE, color=CommonColor.RED),\n)\nStyler.apply(cr, borders)\n```\n\n----------------------------------------\n\nTITLE: Setting Font in Draw with FontOnly in Python\nDESCRIPTION: This code snippet demonstrates how to set the font properties of a rectangle in LibreOffice Draw using the FontOnly class from the ooodev library. It sets the font name, size, and language for a rectangle in a Draw document. The `FontLang` class is used to set the language of the font. The style is then applied to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/font/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\nfrom ooodev.format.draw.modify.font import FontOnly, FontLang\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n        font_style = FontOnly(\n            name=\"Arial\",\n            size=20,\n            lang=FontLang().french_switzerland,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(font_style)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart and applying font effects to Legend\nDESCRIPTION: This code snippet demonstrates how to open a Calc document, access a chart, retrieve the chart's legend, and apply font effects such as color and underline style to the legend's text. It uses classes from the `ooodev` library to interact with the chart and its elements.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.font_underline import FontUnderlineEnum\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \\\"tmp\\\" / \\\"piechart.ods\\\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\\\"A1\\\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BRICK,\n            width=1,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.GREEN_DARK4,\n                StandardColor.TEAL_LIGHT2,\n            ),\n        )\n        legend = chart_doc.first_diagram.get_legend()\n        if legend is None:\n            raise ValueError(\\\"Legend is None\\\")\n        _ = legend.style_font_effect(\n            color=StandardColor.PURPLE,\n            underline=FontLine(\n                line=FontUnderlineEnum.BOLDWAVE,\n                color=StandardColor.GREEN_DARK2,\n            ),\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \\\"__main__\\\":\n    SystemExit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Positioning Dispatch Shapes in Impress Slides\nDESCRIPTION: Creates and positions multiple shapes on an Impress slide including basic shapes, 3D shapes, callouts and flowcharts. Sets various properties like colors, gradients and hatching styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# first row\ny = 38\n_ = curr_slide.add_dispatch_shape(\n    shape_dispatch=ShapeDispatchKind.BASIC_SHAPES_DIAMOND,\n    x=20,\n    y=y,\n    width=50,\n    height=30,\n    fn=DrawDispatcher.create_dispatch_shape,\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Strings in Python and Java\nDESCRIPTION: The `insertString` function in Python and Java inserts a string into the specified text range, replacing the current selection if `bAbsorb` is true. While the Java and Python versions provide similar functionality, the implementations slightly differ by language syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef insertString(xRange: XTextRange, aString: str, bAbsorb: bool) -> None:\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid insertString(XTextRange xRange, String aString, boolean bAbsorb)\n```\n\n----------------------------------------\n\nTITLE: Documenting ServicePartialT Class using autoprotocol in Python\nDESCRIPTION: This snippet uses the Sphinx autoprotocol directive to automatically generate documentation for the ServicePartialT class from the ooodev.utils.partial.service_partial_t module. It captures the class structure, methods, and attributes directly from the source code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/service_partial_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoprotocol:: ooodev.utils.partial.service_partial_t.ServicePartialT\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Selection in LibreOffice Calc Using Python\nDESCRIPTION: This Python snippet demonstrates the setup of a selection listener in LibreOffice Calc using UNO API. It initializes the document and the sheet, attaches the selection change event listeners, and inserts sample data into the sheet. Dependencies include LibreOffice's UNO API and relevant Python libraries. The main method `__init__` sets up the document and sheet, and `_attach_listener` attaches event listeners. Expected input includes a data range for insertion and output data is logged to the console indicating selection changes. Key constraints include handling data types and cell address validity.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# in select_listener.py\nclass SelectionListener:\n    def __init__(self) -> None:\n        super().__init__()\n        self.closed = False\n        loader = Lo.load_office(Lo.ConnectSocket())\n        self._doc = CalcDoc(Calc.create_doc(loader))\n\n        self._doc.set_visible()\n        self._sheet = self._doc.get_sheet(0)\n\n        self._curr_addr = self._doc.get_selected_cell_addr()\n        self._curr_val = self._get_cell_float(self._curr_addr)  # may be None\n\n        self._attach_listener()\n\n        # insert some data\n        self._sheet.set_col(\n            values=(\"Smith\", 42, 58.9, -66.5, 43.4, 44.5, 45.3),\n            cell_name=\"A1\",\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring autoclass documentation for DataPointLabelPlacementKind in restructuredtext\nDESCRIPTION: Sphinx documentation configuration using autoclass directive to generate documentation for the DataPointLabelPlacementKind class including all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/data_point_label_placement_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.data_point_label_placement_kind.DataPointLabelPlacementKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Loading a Draw or Impress Document with Python\nDESCRIPTION: This code snippet demonstrates how to load a Draw or Impress document named 'foo' as an XComponent object using the Lo loader methods. It establishes a connection with LibreOffice before attempting to open the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter11.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\n\nloader = Lo.load_office(Lo.ConnectPipe())\ndoc = Lo.open_doc(fnm=\"foo\", loader=loader)\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal and Vertical Borders using table_border2 in Python\nDESCRIPTION: This snippet demonstrates setting horizontal and vertical borders by directly manipulating the `table_border2` property. It sets the color, width, and style of the left, right, top, and bottom lines to a blue color with a thick line, and the vertical and horizontal lines to a green color with a thin line.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n\n        table.table_border2.left_line.color = StandardColor.BLUE_DARK2\n        table.table_border2.left_line.line_width = UnitPT(float(LineSize.THICK))\n        table.table_border2.left_line.line_style = BorderLineKind.SOLID\n        table.table_border2.right_line = table.table_border2.left_line\n        table.table_border2.top_line = table.table_border2.left_line\n        table.table_border2.bottom_line = table.table_border2.left_line\n\n        table.table_border2.vertical_line.color = StandardColor.GREEN_DARK1\n        table.table_border2.vertical_line.line_width = UnitPT(float(LineSize.THIN))\n        table.table_border2.vertical_line.line_style = BorderLineKind.SOLID\n        table.table_border2.horizontal_line = table.table_border2.vertical_line\n```\n\n----------------------------------------\n\nTITLE: Global Event Broadcaster Example in Python\nDESCRIPTION: This code demonstrates how to add a listener to the global event broadcaster using the `Lo.global_event_broadcaster` property. It shows how to import necessary modules, cast event data, and filter for specific events such as 'OnUnfocus'. The listener function `_on_global_document_event` is defined to handle the document event.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/loader/lo.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\nimport contextlib\nfrom typing import TYPE_CHECKING, Any, cast\nfrom ooodev.loader import Lo\n\nif TYPE_CHECKING:\n    from com.sun.star.document import DocumentEvent\nelse:\n    DocumentEvent = Any\n\n#  Add a listener to the global event broadcaster\nLo.global_event_broadcaster.add_event_document_event_occurred(_on_global_document_event)\n\ndef _on_global_document_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # This is a listener for the global event broadcaster\n    with contextlib.suppress(Exception):\n        doc_event = cast(DocumentEvent, event.event_data)\n        name = doc_event.EventName\n        if name == \"OnUnfocus\":\n            # only interested in the OnUnfocus event\n            self._clear_cache()\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Presentation Shapes in Python\nDESCRIPTION: This function adds a presentation shape to a specified slide using the 'Lo' utility class to create the shape instance and control its properties. Dependencies include 'XDrawPage', 'PresentationKind', 'XShape', and 'ShapeError'. Parameters like 'slide', 'shape_type', 'x', 'y', 'width', and 'height' control the positioning and dimensions of the shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# in the Draw class\n@classmethod\ndef add_pres_shape(\n    cls, slide: XDrawPage, shape_type: PresentationKind, x: int, y: int, width: int, height: int\n) -> XShape:\n    try:\n        cls.warns_position(slide=slide, x=x, y=y)\n        shape = Lo.create_instance_msf(XShape, shape_type.to_namespace(), raise_err=True)\n        if shape is not None:\n            slide.add(shape)\n            cls.set_position(shape, x, y)\n            cls.set_size(shape, width, height)\n        return shape\n    except Exception as e:\n        raise ShapeError(\"Unable to add slide number\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Paragraph Style to Text Range\nDESCRIPTION: Demonstrates how to apply a paragraph style to a text range using the StylePara class. Sets the style at the document's start position.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.style.para import Para as StylePara\n# ...\n\nxtext_range = doc.component.getText().getStart()\npara_style = StylePara(\"adParagraph\")\npara_style.apply(xtext_range)\n```\n\n----------------------------------------\n\nTITLE: Configuring Table with Style Properties in Python\nDESCRIPTION: This snippet demonstrates creating and styling a table using style properties in the ooodev library. The setup requires TableProperties and styling enums, setting alignment and dimensions via styles applied to a table object. Inputs include table data and style settings, with an output of a table styled according to provided properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\\\"My_Table\\\",\n    relative=True,\n    align=TableAlignKind.RIGHT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    left=Intensity(40),\n)\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n)\n```\n\n----------------------------------------\n\nTITLE: Recursively Searching PopupMenu for Menu Items\nDESCRIPTION: Shows how to recursively search a specific popup menu (Tools) to find a nested command (Design Mode) within its submenus.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> tool_menu_id, _ = mb.find_item_menu_id(str(MenuLookupKind.TOOLS))\n>>> tool_popup = mb.get_popup_menu(tool_menu_id)\n>>> assert tool_popup is not None\n>>> design_menu_id, popup = tool_popup.find_item_menu_id(\n>>> \tcmd=\".uno:SwitchControlDesignMode\",\n>>> \tsearch_sub_menu=True,\n>>> )\n>>> if popup is not None:\n>>> \tprint(popup.get_command(design_menu_id), design_menu_id, sep=\": \")\n.uno:SwitchControlDesignMode: 563\n```\n\n----------------------------------------\n\nTITLE: Page Navigation in Draw/Impress Documents\nDESCRIPTION: Implements methods for navigating to specific pages in Draw/Impress documents using XDrawView interface. Includes error handling and controller management.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class (simplified)\n@classmethod\ndef goto_page(cls, doc: XComponent, page: XDrawPage) -> None:\n    try:\n        ctl = GUI.get_current_controller(doc)\n        cls.goto_page(ctl, page)\n    except DrawError:\n        raise\n    except Exception as e:\n        raise DrawError(\"Error while trying to go to page\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Different Background Colors to Multiple Paragraphs\nDESCRIPTION: Example demonstrating how to apply different background colors to multiple paragraphs. The first paragraph gets a yellow-green background, while the second paragraph gets a light blue background.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/color.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\nfc = ParaBgColor(CommonColor.YELLOW_GREEN)\nWrite.append_para(cursor=cursor, text=\"Fill Color starts Here\", styles=[fc])\nfc = ParaBgColor(CommonColor.LIGHT_BLUE)\nWrite.append_para(cursor=cursor, text=\"And today Ends Here\", styles=[fc])\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Transition Properties in Python\nDESCRIPTION: Sets transition properties for slides including fade effect, speed, change behavior and duration. Uses XPropertySet interface to configure Effect, Speed, Change and Duration properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter18.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef set_transition(\n    slide: XDrawPage,\n    fade_effect: FadeEffect,\n    speed: AnimationSpeed,\n    change: DrawingSlideShowKind,\n    duration: int,\n) -> None:\n    try:\n        ps = Lo.qi(XPropertySet, slide, True)\n        ps.setPropertyValue(\"Effect\", fade_effect)\n        ps.setPropertyValue(\"Speed\", speed)\n        ps.setPropertyValue(\"Change\", int(change))\n        # if change is SlideShowKind.AUTO_CHANGE\n        # then Duration is used\n        ps.setPropertyValue(\"Duration\", abs(duration))  # in seconds\n    except Exception as e:\n        raise DrawPageError(\"Could not set slide transition\") from e\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gradient Style from Document\nDESCRIPTION: Shows how to retrieve an existing gradient style from a Writer document. Gets the gradient style from the STANDARD page style and verifies the style name matches expectations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/transparency.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Gradient.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Font Styles in OooDev Python\nDESCRIPTION: Demonstrates how to create a base font style and then apply multiple properties (italic and bold) by chaining them. The base font is configured with color, size and font name, and then additional properties are applied before passing to the Write.append_para method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/format/format_coding_style.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.char.font import Font\nfrom ooodev.utils.color import StandardColor\n# ... other code\n\nbase_font = Font(color=StandardColor.GREEN_DARK3, size=12, name=\"Liberation Serif\")\nWrite.append_para(cursor=cursor, text=\"Hello World!\", styles=[base_font.italic.bold])\n```\n\n----------------------------------------\n\nTITLE: Applying Font Styles Using Multiple Methods\nDESCRIPTION: Shows different approaches to applying font styles including chaining properties and combining multiple Font instances.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n# font bold instance\nft_bold = Font(b=True)\n\n# append bolded text\nWrite.append(cursor=cursor, text=\"Have you \", styles=(ft_bold,))\n\n# Combine red and bold and two Font instances\nWrite.append(\n    cursor=cursor, text=\"RED\", styles=(ft_bold, Font(color=CommonColor.DARK_RED))\n)\n\n# Style text bold, italic,, underline\nWrite.append_para(cursor=cursor, text=\" this?\", styles=(Font(b=True, i=True, u=True),))\n```\n\nLANGUAGE: python\nCODE:\n```\nWrite.append_para(cursor=cursor, text=\" this?\", styles=(Font().bold.underline.italic,))\n```\n\nLANGUAGE: python\nCODE:\n```\nWrite.append_para(cursor=cursor, text=\" this?\", styles=(ft_bold.underline.italic,))\n```\n\n----------------------------------------\n\nTITLE: Printing Linguistic Services Information in Python\nDESCRIPTION: The method 'print_services_info' in the 'Write' class is used to list available and configured linguistic services for spell checking, thesauruses, hyphenators, and proofreaders, based on a specified locale. Dependencies include 'XLinguServiceManager2' for retrieving services and optional 'Locale' objects for localized configuration. The method prints configured services and available locales.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# in the Write class\n@classmethod\ndef print_services_info(cls, lingo_mgr: XLinguServiceManager2, loc: Locale | None = None) -> None:\n    if loc is None:\n        loc = Locale(\"en\", \"US\", \"\")\n    print(\"Available Services:\")\n    cls.print_avail_service_info(lingo_mgr, \"SpellChecker\", loc)\n    cls.print_avail_service_info(lingo_mgr, \"Thesaurus\", loc)\n    cls.print_avail_service_info(lingo_mgr, \"Hyphenator\", loc)\n    cls.print_avail_service_info(lingo_mgr, \"Proofreader\", loc)\n    print()\n\n    print(\"Configured Services:\")\n    cls.print_config_service_info(lingo_mgr, \"SpellChecker\", loc)\n    cls.print_config_service_info(lingo_mgr, \"Thesaurus\", loc)\n    cls.print_config_service_info(lingo_mgr, \"Hyphenator\", loc)\n    cls.print_config_service_info(lingo_mgr, \"Proofreader\", loc)\n    print()\n\n    cls.print_locales(\n        \"SpellChecker\", lingo_mgr.getAvailableLocales(\"com.sun.star.linguistic2.SpellChecker\")\n    )\n    cls.print_locales(\n        \"Thesaurus\", lingo_mgr.getAvailableLocales(\"com.sun.star.linguistic2.Thesaurus\")\n    )\n    cls.print_locales(\n        \"Hyphenator\", lingo_mgr.getAvailableLocales(\"com.sun.star.linguistic2.Hyphenator\")\n    )\n    cls.print_locales(\n        \"Proofreader\", lingo_mgr.getAvailableLocales(\"com.sun.star.linguistic2.Proofreader\")\n    )\n    print()\n```\n\n----------------------------------------\n\nTITLE: Closing a Document Without Saving - Python\nDESCRIPTION: This code snippet closes a document using the `XCloseable` interface without prompting to save changes. It utilizes a method from the LibreOffice API to handle the closing process directly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ncloseable =  Lo.qi(XCloseable.class, doc)\ncloseable.close(false)  # doc. closed without saving\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Background to Chart Data Point in Python\nDESCRIPTION: This snippet shows how to apply a background hatch to a specific data point in a chart using the style_area_hatch_from_preset() method. It uses the PresetHatchKind enum to select a hatch preset.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_hatch import PresetHatchKind\n\n# ... other code\nds = chart_doc.get_data_series()[0]\ndp = ds[-1]\ndp.style_area_hatch_from_preset(\n    preset=PresetHatchKind.BLUE_45_DEGREES_CROSSED,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Transparency in Writer\nDESCRIPTION: This code demonstrates how to set the transparency of a paragraph style in a Writer document. It defines a paragraph style kind, sets the background color, and then applies a transparency value to the specified paragraph style using `Transparency` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npara_kind = StyleParaKind.STANDARD\npara_color_style = StyleAreaColor(color=StandardColor.BLUE_LIGHT2, style_name=para_kind)\npara_transparency_style = Transparency(value=52, style_name=para_kind)\ndoc.apply_styles(para_color_style, para_transparency_style)\n```\n\n----------------------------------------\n\nTITLE: Setting Data Label Borders for Specific Data Points in Python\nDESCRIPTION: This snippet shows how to apply data label border styling to a specific data point in a chart series using the Chart2.style_data_point() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=2, styles=[data_lbl_border])\n```\n\n----------------------------------------\n\nTITLE: Setting Master Page Footer\nDESCRIPTION: Modifies the footer text of a master page by finding the FooterShape and setting its text\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef set_master_footer(cls, master: XDrawPage, text: str) -> None:\n    try:\n        footer_shape = cls.find_shape_by_type(\n            slide=master, shape_type=DrawingNameSpaceKind.SHAPE_TYPE_FOOTER\n        )\n        txt_field = Lo.qi(XText, footer_shape, True)\n        txt_field.setString(text)\n    except ShapeMissingError:\n        raise\n    except Exception as e:\n        raise DrawPageError(\"Unable to set master footer\") from e\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Position in Chart2 Direct Axis Positioning\nDESCRIPTION: Illustrates how to set the label position using the LabelPosition class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/positioning.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.axis.positioning import LabelPosition, ChartAxisLabelPosition\n# ... other code\n\nlabel_position_style = LabelPosition(ChartAxisLabelPosition.NEAR_AXIS_OTHER_SIDE)\nChart2.style_y_axis(chart_doc=chart_doc, styles=[label_position_style])\n```\n\n----------------------------------------\n\nTITLE: Setting Scale Reduce/Enlarge in Calc with Python\nDESCRIPTION: This code sets the scale factor for reducing or enlarging a Calc sheet using `ScaleReduceEnlarge`. It applies a scaling factor to the document, configuring the document display settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.sheet import ScaleReduceEnlarge, CalcStylePageKind\n\nstyle = ScaleReduceEnlarge(factor=200, style_name=CalcStylePageKind.DEFAULT)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Hatch\nDESCRIPTION: Shows how to retrieve the current fill hatch style of a shape using the from_obj method of the ShapeHatch class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/hatch.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.area import Hatch as ShapeHatch\n# ... other code\n\n# get the gradient from the shape\nf_style = ShapeHatch.from_obj(rect)\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: Adding RangeObj to Integer\nDESCRIPTION: Shows how adding RangeObj to a positive integer adds rows at the start of range. Demonstrates conversion from A10:C15 to A5:C15.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.range_obj import RangeObj\n\nrng1 = RangeObj(col_start=\"A\", col_end=\"C\", row_start=10, row_end=15, sheet_idx=0)\nstr(rng1)\n'A10:C15'\nrng1.row_count\n6\nrng2 = 5 + rng1\nstr(rng2)\n'A5:C15'\nrepr(rng2)\n\"RangeObj(col_start='A', col_end='C', row_start=5, row_end=15, sheet_idx=0)\"\nrng2.row_count \n11\n```\n\n----------------------------------------\n\nTITLE: Applying Border with Increased Width to Cell Sides in Calc\nDESCRIPTION: This code shows how to apply a border with increased width to specific sides of a cell using the Side class with a width parameter.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\nside_left_right = Side(color=CommonColor.GREEN, width=1.8)\ncell.style_borders(\n    left=side_left_right, right=side_left_right\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Command Line Arguments for Document Path - Python\nDESCRIPTION: Defines a function to add command line arguments for specifying the document path. This function is utilized in the main parser setup for reading user input.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef args_add(parser: argparse.ArgumentParser) -> None:\n    parser.add_argument(\n        \"-d\",\n        \"--doc\",\n        help=\"Path to document\",\n        action=\"store\",\n        dest=\"fnm_doc\",\n        required=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Subprocess Script for OooDev LibreOffice Connection\nDESCRIPTION: A secondary script that can connect to an existing LibreOffice instance started by a parent script. It retrieves connection information from environment variables and interacts with the open document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport sys\nimport os\nfrom ooodev.calc import CalcDoc\nfrom ooodev.utils.string.str_list import StrList\nfrom ooodev.loader import Lo\nfrom ooodev.conn import conn_factory\nfrom ooodev.loader.inst.options import Options\n\n\ndef main():\n    conn_str = os.environ.get(\"ODEV_CURRENT_CONNECTION\", \"\")\n    conn_opt = os.environ.get(\"ODEV_CURRENT_CONNECTION_OPTIONS\", None)\n\n    conn = conn_factory.get_from_json(conn_str)\n    if conn_opt:\n        opt = Options.deserialize(conn_opt)\n    else:\n        opt = Options()\n\n    loader = Lo.load_office(connector=conn, opt=opt)  # type: ignore\n    doc = CalcDoc.from_current_doc()\n    sheet = doc.get_active_sheet()\n    sheet[0, 0].value = \"Hello World!\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Apply Style to Range Using Calc.set_style_range\nDESCRIPTION: This snippet details using the Calc.set_style_range method for applying styles to a range of cells in LibreOffice Calc after setting values. Requirements include instantiated Calc objects representing the range and style along with prior array assignments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/static/cell.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncell_rng = Calc.get_range_obj(range_name=\"A1:B1\")\n\nCalc.set_array(values=[[101, 22]], sheet=sheet, range_obj=cell_rng)\nCalc.set_style_range(sheet=sheet, range_obj=cell_rng, styles=[style])\n```\n\n----------------------------------------\n\nTITLE: Examining Linguistic Services in LibreOffice with Python\nDESCRIPTION: This snippet demonstrates how to examine linguistic services in LibreOffice using the Python API. It creates an instance of the LinguServiceManager and then calls the Write.print_services_info method to report details about its services. The snippet requires the Lo and Write modules and the XLinguServiceManager2 interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"# in lingo example\n\n# get lingo manager\nlingo_mgr = Lo.create_instance_mcf(XLinguServiceManager2, \"com.sun.star.linguistic2.LinguServiceManager\")\nif lingo_mgr is None:\n    print(\"No linguistics manager found\")\n    return 0\n\nWrite.print_services_info(lingo_mgr)\"\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Gradient to Chart Title in Python\nDESCRIPTION: This code snippet illustrates how to apply a custom gradient to a chart title using the `style_area_gradient` method with specific parameters for angle and color range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.PURPLE_LIGHT2, StandardColor.BLUE_DARK1),\n        )\n```\n\n----------------------------------------\n\nTITLE: Applying Colored Border to all Sides of a Cell in Calc\nDESCRIPTION: This code shows how to apply a colored border to all sides of a cell using the style_borders_sides() method with a specified color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\ncell.style_borders_sides(color=CommonColor.RED)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties with Center Alignment and Left Position Directly\nDESCRIPTION: This Python code sets table alignment, above/below spacing, and left position using the `style_direct` method on a table object in LibreOffice Writer. It demonstrates configuring the table's placement relative to the page.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntable = cursor.add_table(\n            name=\"My_Table\",\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n\n        table.style_direct.style_table_props(\n            relative=False,\n            align=TableAlignKind.CENTER,\n            above=UnitMM(2.0),\n            below=UnitMM(1.8),\n            left=UnitMM(40.0),\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart Title Borders with OOO Dev Tools in Python\nDESCRIPTION: Complete example showing how to open a Calc document, access its chart, apply background gradient and borders to the chart, and set title borders. Uses various formatting classes from ooodev.format.chart2 and utility classes for document handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.title.borders import LineProperties as TitleLineProperties\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_flat_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.PURPLE_DARK1, width=0.7)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.BLUE_DARK1, StandardColor.PURPLE_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        title_border = TitleLineProperties(color=StandardColor.MAGENTA_DARK1, width=0.75)\n        Chart2.style_title(chart_doc=chart_doc, styles=[title_border])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying a preset pattern to a drawing style in LibreOffice\nDESCRIPTION: This code snippet demonstrates how to create a Pattern style modifier using a preset pattern (SHINGLE) and apply it to the default drawing style. This changes the area fill of any shape using that style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/pattern.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_modify = Pattern.from_preset(\n    preset=PresetPatternKind.SHINGLE,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\ndoc.apply_styles(style_modify)\n```\n\n----------------------------------------\n\nTITLE: Setting up and applying background color to a cell style in LibreOffice Calc using Python\nDESCRIPTION: This code demonstrates how to create a Calc document, set up a background color style, and apply it to the default cell style. It also shows how to retrieve the style information afterward.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/background.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.cell.background import Color as StyleBgColor, StyleCellKind\nfrom ooodev.utils.color import StandardColor\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        style = StyleBgColor(\n            color=StandardColor.BLUE_LIGHT2, style_name=StyleCellKind.DEFAULT\n        )\n        style.apply(doc)\n\n        style_obj = StyleBgColor.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\n        assert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Importing Necessary Modules for Chart Formatting in Python\nDESCRIPTION: This snippet imports a series of modules from the OOoDev library, which are necessary for formatting charts in Calc. It sets up various properties for chart styles and operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/positioning.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.axis.positioning import AxisLine, ChartAxisPosition\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange, Offset\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"bon_voyage.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"Object 1\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK2, width=0.9)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=0,\n            offset=Offset(41, 50),\n            style=GradientStyle.RADIAL,\n            grad_color=ColorRange(StandardColor.TEAL, StandardColor.YELLOW_DARK1),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        axis_line_style = AxisLine(cross=ChartAxisPosition.VALUE, value=2000)\n        Chart2.style_x_axis(chart_doc=chart_doc, styles=[axis_line_style])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Number Format to Single Cell in Calc\nDESCRIPTION: Demonstrates how to apply currency formatting to a single cell with negative number handling. Uses the Numbers class with NumberFormatIndexEnum to set currency format with 2 decimal places and red color for negative values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.numbers import Numbers\nfrom ooodev.format.calc.direct.cell.numbers import NumberFormatEnum, NumberFormatIndexEnum\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        cell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\n        num_style = Numbers(num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2_RED)\n        Calc.set_val(value=-123.0, cell=cell, styles=[num_style])\n\n        f_style = Numbers.from_obj(cell)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting up Draw Document and Applying Line Properties to Shape in Python\nDESCRIPTION: This code snippet demonstrates how to create a Draw document, add a rectangle shape, and apply custom line properties to it using the LineProperties class. It also shows how to retrieve and verify the applied properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/line_properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.line import LineProperties, BorderLineKind\nfrom ooodev.utils.color import StandardColor\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 36\n        height = 36\n        x = round(width / 2)\n        y = round(height / 2)\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        style = LineProperties(\n            style=BorderLineKind.CONTINUOUS,\n            color=StandardColor.RED_DARK3,\n            width=0.7,\n            transparency=22\n        )\n        style.apply(rect.component)\n\n        f_style = LineProperties.from_obj(rect.component)\n        assert f_style is not None\n        assert f_style.prop_color == StandardColor.RED_DARK3\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting up LibreOffice Draw document and applying shape pattern\nDESCRIPTION: This snippet demonstrates creating a Draw document, adding a rectangle shape, and applying a preset fill pattern to it. It uses the ShapePattern class from ooodev to set the pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/pattern.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format.draw.direct.area import Pattern as ShapePattern\nfrom ooodev.format.draw.direct.area import PresetPatternKind\nfrom ooodev.office.draw import Draw\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Draw.create_draw_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_75_PERCENT)\n\n        slide = Draw.get_slide(doc)\n\n        width = 36\n        height = 36\n        x = int(width / 2)\n        y = int(height / 2) + 20\n\n        rec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\n        style = ShapePattern.from_preset(preset=PresetPatternKind.SHINGLE)\n        style.apply(rec)\n\n        f_style = ShapePattern.from_obj(rec)\n        assert f_style\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Font Style to Range in Calc\nDESCRIPTION: Shows how to create a font style and apply it to a range of cells directly using the apply method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_only.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nfont_style = FontOnly(name=\"Lucida Calligraphy\", size=20, font_style=\"italic\")\nfont_style.apply(rng)\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Items to Calc Sheet Tab Context Menu using Python\nDESCRIPTION: This snippet shows how to intercept the context menu when right-clicking on a sheet tab in Calc and add a new submenu with multiple items. It uses the ooodev library to simplify the process of intercepting and modifying the context menu.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/intercept_menu.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_menu_intercept(\n    src: ContextMenuInterceptor,\n    event: EventArgsGeneric[ContextMenuInterceptorEventData],\n    view: CalcSheetView,\n) -> None:\n    try:\n        container = event.event_data.event.action_trigger_container\n        if container[0].CommandURL == \".uno:Insert\":\n            items = ActionTriggerContainer()\n            items.insertByIndex(0, ActionTriggerItem(\".uno:SelectTables\", \"Sheet...\"))\n\n            item = ActionTriggerItem(\"GoTo\", \"Go to\", sub_menu=items)\n            container.insert_by_index(7, item)\n            event.event_data.action = ContextMenuAction.EXECUTE_MODIFIED\n```\n\n----------------------------------------\n\nTITLE: Accessing Form by Index in Writer Document\nDESCRIPTION: Shows how to access a form using index notation after ensuring at least one form exists.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_forms.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc())\n>>> if len(doc.draw_page.forms) == 0:\n...   doc.draw_page.forms.add_form()\n>>> form = doc.draw_page.forms[0]\n<ooodev.write.WriteForm object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for transparency package documentation\nDESCRIPTION: Sphinx directive to automatically generate documentation for the ooodev.format.chart2.direct.general.transparency module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.general.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.general.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the `ooodev.format.writer.direct.obj.options` module. It includes the module's members, omits undocumented members, and displays inheritance information. This is used within a Sphinx documentation context to create API documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.obj.options.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.obj.options\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Counting Words in LibreOffice Document\nDESCRIPTION: Function to count words in a document by iterating through text using a word cursor. Uses word navigation methods and string length checking.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef count_words(doc: WriteDoc) -> int:\n    cursor = doc.get_cursor()\n    cursor.goto_start()  # go to start of text\n\n    word_count = 0\n    while 1:\n        cursor.goto_end_of_word(True)\n        curr_word = cursor.get_string()\n        if len(curr_word) > 0:\n            word_count += 1\n        if cursor.goto_next_word() is False:\n            break\n    return word_count\n```\n\n----------------------------------------\n\nTITLE: Setting up Calc document with font effects on a range\nDESCRIPTION: Complete example showing how to create a Calc document, apply font effects to a range of cells, and close the document. The example applies red text color, blue underline, and shadow effects to a range containing 'Hello' and 'World'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font_effects.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine, FontUnderlineEnum\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        rng = sheet.rng(\"A1:B1\")\n        sheet.set_array(values=[[\"Hello\", \"World\"]], range_obj=rng)\n\n        cell_rng = sheet.get_range(range_obj=rng)\n        cell_rng.style_font_effect(\n            color=CommonColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n            shadowed=True,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting ClickAction for Button in OpenOffice - Python\nDESCRIPTION: This snippet demonstrates how to set a button's ClickAction in an OpenOffice presentation to execute a system program. Dependencies include the ClickAction enum and the Props and FileIO modules. The Bookmark parameter requires an absolute path converted to a URL. Expected inputs are the button object and URL path. There is a constraint that the path must be absolute.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nProps.set(\n    button,\n    OnClick=ClickAction.PROGRAM,\n    Bookmark=FileIO.fnm_to_url(f'(System.getenv(\"SystemRoot\")}\\\\System32\\\\calc.exe')\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Settings in Python\nDESCRIPTION: Demonstrates how to set various chart settings such as spacing, overlap, and side-by-side display using the Settings class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/options.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.options import Settings\n# ... other code\n\nsetting_options = Settings(\n    chart_doc=chart_doc, spacing=150, overlap=22, side_by_side=True\n)\nChart2.style_data_series(chart_doc=chart_doc, styles=[setting_options])\n```\n\n----------------------------------------\n\nTITLE: Applying Default Border to a Single Cell in Calc\nDESCRIPTION: This code snippet shows how to apply a default border to a single cell in a Calc sheet using the style_borders_default() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\ncell.style_borders_default()\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart2 Legend Transparency Example\nDESCRIPTION: This snippet demonstrates the setup for a Chart2 legend transparency example, including imports, document opening, and initial chart styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.legend.area import Color as LegendAreaColor\nfrom ooodev.format.chart2.direct.legend.transparency import (\n    Transparency as LegendTransparency,\n    Gradient as LegendGradient,\n    IntensityRange,\n)\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BRICK, width=1)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.GREEN_DARK4, StandardColor.TEAL_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        legend_color_style = LegendAreaColor(color=StandardColor.GREEN_LIGHT2)\n        legend_bg_transparency_style = LegendTransparency(50)\n        Chart2.style_legend(\n            chart_doc=chart_doc, styles=[legend_bg_transparency_style, legend_color_style]\n        )\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Image Fill to Shape\nDESCRIPTION: Demonstrates how to apply a preset image fill to a shape using the ShapeImage class and PresetImageKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/img.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Img as ShapeImage\nfrom ooodev.format.draw.direct.area import PresetImageKind\n# ... other code\n\nrec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\nstyle = ShapeImage.from_preset(preset=PresetGradientKind.DEEP_OCEAN)\nstyle.apply(rec)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Grid Line Properties in Python\nDESCRIPTION: Specific example of configuring grid line properties for a chart's Y-axis. Shows how to set the line style, color, and width using GridLineProperties class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/grid/line_properties.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngrid_style = GridLineProperties(\n    style=BorderLineKind.CONTINUOUS, color=StandardColor.RED, width=0.5\n)\nChart2.style_grid(chart_doc=chart_doc, axis_val=AxisKind.Y, styles=[grid_style])\n```\n\n----------------------------------------\n\nTITLE: Apply font effects to the Legend\nDESCRIPTION: This code snippet demonstrates setting font color and underline style for a chart's legend. It utilizes the `style_font_effect` method of the `ChartLegend` class from the `ooodev` library, specifying color using `StandardColor.PURPLE` and underline with `FontUnderlineEnum.BOLDWAVE` in `FontLine`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from ooo.dyn.awt.font_underline import FontUnderlineEnum\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\n# ... other code\n\n_ = legend.style_font_effect(\n    color=StandardColor.PURPLE,\n    underline=FontLine(\n        line=FontUnderlineEnum.BOLDWAVE,\n        color=StandardColor.GREEN_DARK2,\n    ),\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Header Area Pattern in LibreOffice Writer\nDESCRIPTION: Applies a pattern to the header area of a page style. Uses the from_preset method of the Pattern class to set a pre-defined pattern (HORIZONTAL_BRICK) to the header background.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.header.area import Pattern as HeaderStylePattern, PresetPatternKind\n# ... other code\n\npattern_style = HeaderStylePattern.from_preset(\n    preset=PresetPatternKind.HORIZONTAL_BRICK, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, header_style, pattern_style)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Frame Type Size Props\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.common.props.frame_type_size_props` module.  The `:members:` option includes all module members, `:undoc-members:` includes undocumented members, and `:show-inheritance:` displays inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.props.frame_type_size_props.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.common.props.frame_type_size_props\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting PresentationKind Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the PresentationKind class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/presentation_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.presentation_kind.PresentationKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Loading Graphic from URL\nDESCRIPTION: This static method in the ImagesLo class loads a graphic from a provided URL. It retrieves the graphic property from a set of properties associated with the graphic link and returns the image object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# in ImagesLo class\n@staticmethod\ndef load_graphic_link(graphic_link: object) -> XGraphic:\n    xprops = Lo.qi(XPropertySet, graphic_link, True)\n\n    try:\n        graphic = xprops.getPropertyValue(\"Graphic\")\n        if graphic is None:\n            raise Exception(\"Grapich is None\")\n        return graphic\n    except Exception as e:\n        raise Exception(f\"Unable to retrieve graphic\") from e\n```\n\n----------------------------------------\n\nTITLE: Custom Slide Show Implementation\nDESCRIPTION: Implements a custom slide show that allows playing selected slides in a specified order. Includes document handling, play list creation and show control functionality.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter18.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# custom_show.py module\nfrom __future__ import annotations\n\nimport uno\nfrom ooodev.dialog.msgbox import (\n    MsgBox,\n    MessageBoxType,\n    MessageBoxButtonsEnum,\n    MessageBoxResultsEnum,\n)\nfrom ooodev.draw import Draw, ImpressDoc\nfrom ooodev.utils.dispatch.draw_view_dispatch import DrawViewDispatch\nfrom ooodev.utils.file_io import FileIO\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.props import Props\nfrom ooodev.utils.type_var import PathOrStr\n\n\nclass CustomShow:\n    def __init__(self, fnm: PathOrStr, *slide_idx: int) -> None:\n        FileIO.is_exist_file(fnm=fnm, raise_err=True)\n        self._fnm = FileIO.get_absolute_path(fnm)\n        for idx in slide_idx:\n            if idx < 0:\n                raise IndexError(\"Index cannot be negative\")\n        self._idxs = slide_idx\n\n    def main(self) -> None:\n        loader = Lo.load_office(Lo.ConnectPipe())\n\n        try:\n            doc = ImpressDoc(Lo.open_doc(fnm=self._fnm, loader=loader))\n            # slideshow start() crashes if the doc is not visible\n            doc.set_visible()\n\n            if len(self._idxs) > 0:\n                _ = doc.build_play_list(\"ShortPlay\", *self._idxs)\n                show = doc.get_show()\n                Props.set(show, CustomShow=\"ShortPlay\")\n                Props.show_obj_props(\"Slide show\", show)\n                Lo.delay(500)\n                Lo.dispatch_cmd(DrawViewDispatch.PRESENTATION)\n                # show.start() starts slideshow but not necessarily in 100% full screen\n                # show.start()\n                sc = doc.get_show_controller()\n                Draw.wait_ended(sc)\n\n                Lo.delay(2000)\n                msg_result = MsgBox.msgbox(\n```\n\n----------------------------------------\n\nTITLE: Enumerating Document Text in Python\nDESCRIPTION: This Python snippet illustrates how to iterate over paragraphs in a document using the `XEnumerationAccess` interface. It employs the `createEnumeration()` method to access text contents as paragraphs. The key functionalities include accessing and processing each paragraph text content.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# create enumerator over the document text\nenum_access = Lo.qi(XEnumerationAccess, doc.getText())\ntext_enum = enum_access.createEnumeration()\n\nwhile text_enum.hasMoreElements():\n    text_con = Lo.qi(XTextContent, text_enum.nextElement())\n    # use the Paragraph text content (text_con) in some way...\n```\n\n----------------------------------------\n\nTITLE: Applying paragraph alignment to a style (Python)\nDESCRIPTION: This snippet shows how to create an Alignment object with specific properties and apply it to a paragraph style in a Writer document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/alignment.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nshadow_style = Alignment(\n    align=ParagraphAdjust.BLOCK,\n    align_vert=ParagraphVertAlignEnum.TOP,\n    txt_direction=WritingMode(WritingMode2Enum.LR_TB),\n    expand_single_word=True,\n    align_last=LastLineKind.JUSTIFY,\n    style_name=StyleParaKind.STANDARD,\n)\nshadow_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Adding and Subtracting Column Objects in Python\nDESCRIPTION: Illustrates addition and subtraction operations between ColObj instances, integers, and strings (treated as column names). Attempting to create a negative ColObj results in an IndexError.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/col_obj.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.col_obj import ColObj\n>>> a_col = ColObj(\"A\")\n>>> a_col + 2\nColObj(value='C')\n\n>>> e_col = a_col + 4\n>>> a_col + e_col\nColObj(value='F')\n\n>>> e_col - a_col \nColObj(value='D')\n\n>>> e_col - 2\nColObj(value='C')\n\n>>> e_col - \"B\" # minus 2 col\nColObj(value='C')\n\n>>> e_col + 6  \nColObj(value='K')\n\n>>> e_col + \"F\" # add 6 col\nColObj(value='K')\n\n>>> \"F\" + e_col\nColObj(value='K')\n\n>>> 12 - e_col\nColObj(value='G')\n\n>>> \"C\" + e_col # add 3 col\nColObj(value='H')\n\n>>> a_col - e_col \nIndexError\n```\n\n----------------------------------------\n\nTITLE: Set Document Properties\nDESCRIPTION: Static method to set document properties like subject, title and author using XDocumentPropertiesSupplier interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef set_doc_props(doc: object, subject: str, title: str, author: str) -> None:\n    try:\n        dp_supplier = mLo.Lo.qi(XDocumentPropertiesSupplier, doc, True)\n        doc_props = dp_supplier.getDocumentProperties()\n        doc_props.Subject = subject\n        doc_props.Title = title\n        doc_props.Author = author\n    except Exception as e:\n        raise mEx.PropertiesError(\"Unable to set doc properties\") from e\n```\n\n----------------------------------------\n\nTITLE: Setting Page Area Pattern in Writer\nDESCRIPTION: This snippet shows how to set an Area pattern for a Page style in Writer using the Pattern class and a preset pattern from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.area import Pattern as PageStylePattern\nfrom ooodev.format.writer.modify.page.area import PresetPatternKind, WriterStylePageKind\n# ... other code\n\npattern_style = PageStylePattern.from_preset(\n    preset=PresetPatternKind.HORIZONTAL_BRICK, style_name=WriterStylePageKind.STANDARD\n)\npattern_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Displaying LibreOffice Calc Function Names\nDESCRIPTION: Alphabetical listing of LibreOffice Calc built-in functions including mathematical, statistical, financial, text, and other function categories. The list includes both legacy and modern function naming conventions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nACOSH                    | ACOT                     | ACOTH                    | ADDRESS\nAGGREGATE                | AMORDEGRC                | AMORLINC                 | AND\nARABIC                   | AREAS                    | ASC                      | ASIN\nASINH                   | ATAN                     | ATAN2                    | ATANH\nAVEDEV                   | AVERAGE                  | AVERAGEA                 | AVERAGEIF\n```\n\n----------------------------------------\n\nTITLE: Resetting and Persisting Shortcut Configuration in Python\nDESCRIPTION: Demonstrates how to reset a shortcut configuration, which causes the component to restore defaults while also persisting any current changes. This example shows how a non-persistent shortcut becomes persistent after reset.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# ...\ndoc = CalcDoc.from_current_doc()\nprint(doc.shortcuts.set(\"Shift+Ctrl+Alt+A\", \".custom:alone.here\", False))\ndoc.shortcuts.reset()\n```\n\n----------------------------------------\n\nTITLE: Applying Paragraph Borders with Shadow Effect\nDESCRIPTION: Example showing how to apply borders with a shadow effect to a paragraph. This adds visual depth to the paragraph borders using the Shadow class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/borders.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\ncursor = Write.get_cursor(doc)\nbdr = Borders(\n    all=Side(line=BorderLineKind.DASH_DOT, color=CommonColor.BLUE_VIOLET),\n    shadow=Shadow(),\n    merge=False,\n)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[bdr])\nStylePara.default.apply(cursor)\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Text with Formatting in LibreOffice Writer\nDESCRIPTION: Sets text in a table cell with optional header row formatting and color properties. Used for formatting table cells with specific colors and styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef set_cell_text(cell_name: str, data: str, table: XTextTable) -> None:\n    cell_text = mLo.Lo.qi(XText, table.getCellByName(cell_name), True)\n    if first_row_header is False or tbl_fg_color is not None:\n        text_cursor = cell_text.createTextCursor()\n        props = {}\n        if not first_row_header:\n            props[\"ParaStyleName\"] = \"Table Contents\"\n        if tbl_fg_color is not None:\n            props[\"CharColor\"] = tbl_fg_color\n        mProps.Props.set(text_cursor, **props)\n\n    cell_text.setString(str(data))\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties with Center Alignment and Left Position via Styles\nDESCRIPTION: This Python code demonstrates setting table properties (alignment, above/below spacing, left position) by creating a `TableProperties` object and applying it as a style during table creation in LibreOffice Writer using `ooodev`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprops_style = TableProperties(\n            name=\"My_Table\",\n            relative=False,\n            align=TableAlignKind.CENTER,\n            above=UnitMM(2.0),\n            below=UnitMM(1.8),\n            left=UnitMM(40.0),\n        )\n\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n            styles=[props_style],\n            )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hyperlink Properties from Writer Document\nDESCRIPTION: Shows how to retrieve hyperlink properties from existing text in a LibreOffice Writer document using cursor positioning and the Hyperlink class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/hyperlink.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n# get the hyperlink from the document\ncursor.gotoStart(False)\ncursor.goRight(21, True)\nooo_dev_hl = Hyperlink.from_obj(cursor)\ncursor.gotoEnd(False)\nprint(ooo_dev_hl.prop_url)\n```\n\n----------------------------------------\n\nTITLE: Finding Bookmarks in LibreOffice Writer Documents\nDESCRIPTION: Locates a bookmark by name in a Writer document and returns it as an XTextContent instance. Includes error handling for non-existent bookmarks.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef find_bookmark(text_doc: XTextDocument, bm_name: str) -> XTextContent | None:\n    supplier = Lo.qi(XBookmarksSupplier, text_doc, True)\n\n    named_bookmarks = supplier.getBookmarks()\n    obookmark = None\n\n    try:\n        obookmark = named_bookmarks.getByName(bm_name)\n    except Exception:\n        Lo.print(f\"Bookmark '{bm_name}' not found\")\n        return None\n    return Lo.qi(XTextContent, obookmark)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Area Gradient from LibreOffice Writer Style\nDESCRIPTION: Retrieves the existing header area gradient style from a document page style. Uses the from_style static method to create a Gradient style object from the existing style in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Gradient.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Positioning Chart Title with Python\nDESCRIPTION: This snippet retrieves the current chart title and sets its position using the 'style_position' method, specifying the coordinates 7.1 mm and 66.3 mm. It requires the 'chart_doc' variable to be properly initialized with a valid chart document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/position_size.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntitle = chart_doc.get_title()\nif title is None:\n    raise ValueError(\"Title not found\")\n\ntitle.style_position(7.1, 66.3)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gradient Properties from Paragraph\nDESCRIPTION: Shows how to retrieve and verify gradient properties from an existing paragraph, including cursor positioning and property extraction.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/gradient.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\ngradient_style = Gradient.from_preset(PresetGradientKind.MAHOGANY)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[gradient_style])\n\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\n\ntext_para = cast(\"TextRangeContentProperties\", para_cursor)\n\npara_gradient = Gradient.from_obj(text_para.TextParagraph)\npara_gradient.prop_name == str(PresetGradientKind.MAHOGANY)\n```\n\n----------------------------------------\n\nTITLE: Text Orientation Setup in Python\nDESCRIPTION: Setup code for text orientation examples, showing imports and basic document creation with orientation settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/alignment.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.format.inner.direct.calc.alignment.text_orientation import EdgeKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        cell = sheet[\"A1\"]\n        cell.value = \"Hello\"\n        cell.style_align_orientation(\n            vert_stack=False,\n            rotation=-10,\n            edge=EdgeKind.INSIDE,\n        )\n\n        f_style = cell.style_align_orientation_get()\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing XTopWindowListener Interface in Python\nDESCRIPTION: A direct implementation of XTopWindowListener by inheriting the interface. The class monitors a Writer document window's lifecycle events including opening, closing, minimizing, and activation. It demonstrates the traditional approach to implementing listeners in LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import TYPE_CHECKING\nimport unohelper\n\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\nfrom com.sun.star.awt import XExtendedToolkit\nfrom com.sun.star.awt import XTopWindowListener\nfrom com.sun.star.awt import XWindow\n\nif TYPE_CHECKING:\n    from com.sun.star.lang import EventObject\n\n\nclass DocWindow(unohelper.Base, XTopWindowListener):\n    def __init__(self) -> None:\n        super().__init__()\n        self.closed = False\n        loader = Lo.load_office(Lo.ConnectPipe())\n        self.doc = Write.create_doc(loader=loader)\n\n        self.tk = Lo.create_instance_mcf(XExtendedToolkit, \"com.sun.star.awt.Toolkit\")\n        if self.tk is not None:\n            self.tk.addTopWindowListener(self)\n\n        GUI.set_visible(True, self.doc)\n        # triggers 2 opened and 2 activated events\n\n    def windowOpened(self, event: EventObject) -> None:\n        \"\"\"is invoked when a window is activated.\"\"\"\n        print(\"WL: Opened\")\n        xwin = Lo.qi(XWindow, event.Source)\n        GUI.print_rect(xwin.getPosSize())\n\n    def windowActivated(self, event: EventObject) -> None:\n        \"\"\"is invoked when a window is activated.\"\"\"\n        print(\"WL: Activated\")\n        print(f\"  Title bar: {GUI.get_title_bar()}\")\n\n    def windowDeactivated(self, event: EventObject) -> None:\n        \"\"\"is invoked when a window is deactivated.\"\"\"\n        print(\"WL: Minimized\")\n\n    def windowMinimized(self, event: EventObject) -> None:\n        \"\"\"is invoked when a window is iconified.\"\"\"\n        print(\"WL:  De-activated\")\n\n    def windowNormalized(self, event: EventObject) -> None:\n        \"\"\"is invoked when a window is deiconified.\"\"\"\n        print(\"WL: Normalized\")\n\n    def windowClosing(self, event: EventObject) -> None:\n        print(\"WL: Closing\")\n\n    def windowClosed(self, event: EventObject) -> None:\n        \"\"\"is invoked when a window has been closed.\"\"\"\n        if not self.closed:\n            print(\"WL: Closed\")\n            self.closed = True\n\n    def disposing(self, event: EventObject) -> None:\n        print(\"WL: Disposing\")\n```\n\n----------------------------------------\n\nTITLE: Automodule directive in Sphinx\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.adapter.sheet.cell_range_access_partial` module. It includes the module's members, undocumented members, and inheritance hierarchy in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.sheet.cell_range_access_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.sheet.cell_range_access_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Position Control Setup\nDESCRIPTION: Sets up the environment for chart manipulation including opening a document, initializing chart formatting objects, and applying background styles. Uses the ooodev library to connect to LibreOffice and prepare a chart document for formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/position_size.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.title.position_size import Position as TitlePosition\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_flat_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.PURPLE_DARK1, width=0.7)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.BLUE_DARK1, StandardColor.PURPLE_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        title_pos = TitlePosition(7.1, 66.3)\n        Chart2.style_title(chart_doc=chart_doc, styles=[title_pos])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Determining Match Text Range\nDESCRIPTION: Here we find text ranges of matches using the Lo.qi method with XTextRange on an element accessed via XIndexAccess. This is essential for applying styles to matched text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmatch_tr = Lo.qi(XTextRange, matches.getByIndex(i))\n```\n\n----------------------------------------\n\nTITLE: Setting Very Loose Character Spacing\nDESCRIPTION: Example showing how to apply very loose character spacing using the FontPosition class with CharSpacingKind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_position.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\nfp_style = FontPosition(spacing=CharSpacingKind.VERY_LOOSE, pair=True)\ncursor = Write.get_cursor(doc)\nWrite.append(cursor, \"Hello\", styles=[fp_style])\n```\n\n----------------------------------------\n\nTITLE: Reporting Layers in Python\nDESCRIPTION: This Python code defines a method `_report_layers` which takes a document as input and iterates through the layers of the document. For each layer, it attempts to display the properties of the layer using `Props.show_obj_props`. It also retrieves a specific layer by name using `Draw.get_layer`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter12.rst#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# in slide_info.py\ndef _report_layers(self, doc: XComponent) -> None:\n    lm = Draw.get_layer_manager(doc)\n    for i in range(lm.getCount()):\n        try:\n            Props.show_obj_props(f\" Layer {i}\", lm.getByIndex(i))\n        except:\n            pass\n    layer = Draw.get_layer(doc=doc, layer_name=DrawingLayerKind.BACK_GROUND_OBJECTS)\n```\n\n----------------------------------------\n\nTITLE: Defining an Alternate Event Callback Function in Python\nDESCRIPTION: This snippet provides an alternative format for defining an event callback function that takes a source object, event object, and additional arguments. It demonstrates how to access the control source from the keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_tree.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n        # can get control from kwargs\n        ctl = cast(CtlTree, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Alternative Slide Copy Implementation with GUI Controller\nDESCRIPTION: Alternative implementation of slide copying using explicit GUI controller reference. Useful when standard implementation fails.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef _copy_to(self, doc: ImpressDoc) -> None:\n    ctl = GUI.get_current_controller(doc.component)\n    Lo.delay(1000)\n    Lo.dispatch_cmd(cmd=DrawViewDispatch.DIA_MODE)\n\n    Lo.delay(3000)\n\n    from_slide = doc.get_slide(idx=self._from_idx)\n    to_slide = doc.get_slide(idx=self._to_idx)\n\n    Draw.goto_page(ctl=ctl, page=from_slide.component)\n    Lo.dispatch_cmd(cmd=GlobalEditDispatch.COPY)\n    Lo.delay(500)\n    print(f\"Copied {self._from_idx}\")\n\n    Draw.goto_page(ctl=ctl, page=to_slide.component)\n    Lo.delay(500)\n    Lo.dispatch_cmd(GlobalEditDispatch.PASTE)\n    Lo.delay(500)\n    print(f\"Paste to after {self._to_idx}\")\n\n    Lo.dispatch_cmd(cmd=DrawDrawingDispatch.DRAWING_MODE)\n    Lo.delay(500)\n```\n\n----------------------------------------\n\nTITLE: Initializing CalcDoc and Applying Chart Styles in Python\nDESCRIPTION: This code snippet demonstrates how to open a Calc document, access a chart, and apply styles such as border line and area gradient. It also retrieves the chart title and applies font effects like color, underline, and shadow. Dependencies include `uno`, `ooodev`, and standard Python libraries like `pathlib`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooo.dyn.awt.font_underline import FontUnderlineEnum\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\n\n        def main() -> int:\n            with Lo.Loader(connector=Lo.ConnectPipe()):\n                fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n                doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n                Lo.delay(500)\n                doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n                sheet = doc.sheets[0]\n                sheet[\"A1\"].goto()\n                chart_table = sheet.charts[0]\n                chart_doc = chart_table.chart_doc\n                _ = chart_doc.style_border_line(\n                    color=StandardColor.PURPLE_DARK1,\n                    width=0.7,\n                )\n                _ = chart_doc.style_area_gradient(\n                    step_count=64,\n                    style=GradientStyle.SQUARE,\n                    angle=45,\n                    grad_color=ColorRange(\n                        StandardColor.BLUE_DARK1,\n                        StandardColor.PURPLE_LIGHT2,\n                    ),\n                )\n\n                title = chart_doc.get_title()\n                if title is None:\n                    raise ValueError(\"Title not found\")\n\n                title.style_font_effect(\n                    color=StandardColor.RED,\n                    underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n                    shadowed=True,\n                )\n                Lo.delay(1_000)\n                doc.close()\n            return 0\n\n\n        if __name__ == \"__main__\":\n            SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document with Text Columns Example\nDESCRIPTION: Creates a Draw document, adds a rectangle shape with text, and configures text columns with center alignment. Includes initialization of LibreOffice connection and document setup.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text_columns/text_columns.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.text import TextColumns\nfrom ooodev.format.draw.direct.text.text import TextAnchor, ShapeBasePointKind\nfrom ooodev.format.draw.direct.para.alignment import Alignment, ParagraphAdjust\nfrom ooodev.format import Styler\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        sb = []\n        for _ in range(12):\n            sb.append(\"Hello World!\")\n        rect.set_string(\"\\n\".join(sb))\n\n        anchor = TextAnchor(anchor_point=ShapeBasePointKind.CENTER, full_width=True)\n        align = Alignment(align=ParagraphAdjust.CENTER)\n        txt_cols = TextColumns(col_count=2, spacing=0.5)\n        Styler.apply(rect.component, anchor, align, txt_cols)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Generating Shapes via Dispatch Commands in Impress - Python\nDESCRIPTION: Defines a function to add a slide and place dispatch-generated shapes in an Impress document. The function relies on the external ImpressDoc API and various dispatch commands accessible from UI command spreadsheets. Performed within the OpenOffice environment, requiring the document object for context.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef _dispatch_shapes(self, doc: ImpressDoc) -> None:\n    curr_slide = doc.add_slide()\n    curr_slide.title_only_slide(\"Dispatched Shapes\")\n\n    doc.set_visible()\n    Lo.delay(1_000)\n\n    doc.goto_page(page=curr_slide.component)\n    Lo.print(\n        f\"Viewing Slide number: {Draw.get_slide_number(Draw.get_viewed_page(doc.component))}\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing Outline, LineNum, ListStyle in Python\nDESCRIPTION: This snippet imports necessary classes from the `ooodev` library and defines a `main` function that creates a Writer document, sets its visibility and zoom level, applies an outline style to a paragraph, retrieves the style, and then closes the document. It showcases the basic setup for using the `ooodev` library to interact with LibreOffice Writer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/outline_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.outline_list import Outline, LineNum, ListStyle\nfrom ooodev.format.writer.modify.para.outline_list import LevelKind, StyleParaKind, StyleListKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_outline_style = Outline(level=LevelKind.LEVEL_01, style_name=StyleParaKind.STANDARD)\n        para_outline_style.apply(doc)\n\n        style_obj = Outline.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Reading Presentation Points from File\nDESCRIPTION: Parse a text file to dynamically generate presentation slides with bullet points, supporting nested bullet levels and comment filtering\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef _read_points(self, doc: ImpressDoc) -> None:\n    curr_slide = doc.get_slide(idx=0)\n    curr_slide.title_slide(\n        title=\"Python-Generated Slides\",\n        sub_title=\"Using LibreOffice\",\n    )\n    try:\n        def process_bullet(\n            line: str, draw_text: DrawText[ImpressDoc] | None\n        ) -> None:\n            if draw_text is None:\n                print(f\"No slide body for {line}\")\n                return\n\n            pos = 0\n            s_lst = [*line]\n            ch = s_lst[pos]\n            while ch == \">\":\n                pos += 1\n                ch = s_lst[pos]\n            sub_str = \"\".join(s_lst[pos:]).strip()\n\n            draw_text.add_bullet(level=pos - 1, text=sub_str)\n\n        body: DrawText[ImpressDoc] | None = None\n        with open(self._points_fnm, \"r\") as file:\n            data = (row for row in file if row.strip())\n            data = (row for row in data if not row.lstrip().startswith(\"//\"))\n\n            for row in data:\n                ch = row[:1]\n                if ch == \">\":\n                    process_bullet(line=row, draw_text=body)\n                else:\n                    curr_slide = doc.add_slide()\n                    body = curr_slide.bullets_slide(title=row.strip())\n        print(f\"Read in point file: {self._points_fnm.name}\")\n    except Exception as e:\n        print(f\"Error reading points file: {self._points_fnm}\")\n        print(f\"  {e}\")\n```\n\n----------------------------------------\n\nTITLE: Master Page Configuration and Slide Management\nDESCRIPTION: Demonstrates advanced master page manipulation, including adding shapes, configuring footers, slide numbers, and creating multiple master pages\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef main(self) -> None:\n    loader = Lo.load_office(Lo.ConnectPipe())\n    try:\n        doc = ImpressDoc(Draw.create_impress_doc(loader))\n\n        # Report on default master page shapes\n        master_page = doc.get_master_page(idx=0)\n        print(\"Default Master Page\")\n        Draw.show_shapes_info(master_page.component)\n\n        # Configure master page footer and add shapes\n        master_page.set_master_footer(text=\"Master Use Slides\")\n        sz = master_page.get_size_mm()\n        _ = master_page.draw_rectangle(\n            x=5, y=7,\n            width=round(sz.Width / 6),\n            height=round(sz.Height / 6),\n        )\n        _ = master_page.draw_text(\n            msg=\"Default Master Page\",\n            x=10, y=15, width=100, height=10,\n            font_size=24,\n        )\n\n        # Configure first slide with slide number and custom footer\n        slide1 = doc.get_slide(idx=0)\n        slide1.title_slide(title=\"Slide 1\")\n        slide1.set_property(\n            IsPageNumberVisible=True,\n            IsFooterVisible=True,\n            FooterText=\"MU Slides\",\n        )\n\n        # Add additional slides with master page properties\n        for i in range(1, 4):\n            slide = doc.insert_slide(idx=i)\n            _ = slide.bullets_slide(title=f\"Slide {i}\")\n            slide.set_property(IsPageNumberVisible=True, IsFooterVisible=True)\n\n        # Create a second master page\n        master2 = doc.insert_master_page(idx=1)\n        _ = master2.add_slide_number()\n\n        print(\"Master Page 2\")\n        Draw.show_shapes_info(master2.component)\n```\n\n----------------------------------------\n\nTITLE: Setting Range Background Color\nDESCRIPTION: This snippet shows how to set the background color for a range of cells using the style_area_color method on a range object. It applies a predefined color from the StandardColor enum to the entire range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/background.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncell_rng.style_area_color(StandardColor.BLUE_LIGHT2)\n```\n\n----------------------------------------\n\nTITLE: Applying Diagonal Border to a Cell in Calc\nDESCRIPTION: This code shows how to apply a diagonal border (up or down) to a cell using the diagonal_up or diagonal_down parameters of the style_borders() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\ncell.style_borders(\n    diagonal_up=Side(color=CommonColor.RED)\n)\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module for Draw Fill Area Color\nDESCRIPTION: Automatically generates documentation for the ooodev.format.inner.direct.draw.fill.area.color module using Sphinx automodule directive\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.draw.fill.area.color.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.draw.fill.area.color\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Coloring Stock Bars in Python\nDESCRIPTION: This code colors the bars in a candle stick chart using Chart2's `color_stock_bars` method. It sets colors for \"WhiteDay\" and \"BlackDay\" using provided color values. Inputs include the chart type and colors; it outputs the modified chart with updated bar colors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# in Chart2 class\n@staticmethod\ndef color_stock_bars(ct: XChartType, w_day_color: Color, b_day_color: Color) -> None:\n    try:\n        if ct.getChartType() == \"com.sun.star.chart2.CandleStickChartType\":\n            white_day_ps = Lo.qi(XPropertySet, Props.get(ct, \"WhiteDay\"), True)\n            Props.set(white_day_ps, FillColor=int(w_day_color))\n\n            black_day_ps = Lo.qi(XPropertySet, Props.get(ct, \"BlackDay\"), True)\n            Props.set(black_day_ps, FillColor=int(b_day_color))\n        else:\n            raise NotSupportedError(\n                f'Only candel stick charts supported. \"{ct.getChartType()}\" not supported.'\n            )\n    except NotSupportedError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error coloring stock bars\") from e\n\n```\n\n----------------------------------------\n\nTITLE: Responding to Cell Selection Changes in Python\nDESCRIPTION: The `on_selection_changed` method responds to changes in cell selections in LibreOffice Calc using UNO API. It checks if a new cell is selected and compares its value with the previously selected one, logging the results. This requires an active connection to LibreOffice and a relevant document open with event hooks set-up. Inputs include current and previous cell adressess, and outputs are console logs detailing changes in cell values. This method must ensure robust error handling to prevent crashes due to interaction issues.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# in select_listener.py\ndef on_selection_changed(\n    self, source: Any, event_args: EventArgs, *args, **kwargs\n) -> None:\n    event = cast(\"EventObject\", event_args.event_data)\n    ctrl = Lo.qi(XController, event.Source)\n    if ctrl is None:\n        print(\"No ctrl for event source\")\n        return\n\n    addr = self._doc.get_selected_cell_addr()\n    if addr is None:\n        return\n    try:\n        # better to wrap in try block.\n        # otherwise errors crashes office\n        if not Calc.is_equal_addresses(addr, self._curr_addr):\n            flt = self._get_cell_float(self._curr_addr)\n            if flt is not None:\n                if self._curr_val is None:  # so previously stored value was null\n                    print(\n                        f\"{Calc.get_cell_str(self._curr_addr)} new value: {flt:.2f}\"\n                    )\n                else:\n                    if self._curr_val != flt:\n                        print(\n                            f\"{Calc.get_cell_str(self._curr_addr)} has changed from {self._curr_val:.2f} to {flt:.2f}\"\n                        )\n\n        # update current address and value\n        self._curr_addr = addr\n        self._curr_val = self._get_cell_float(addr)\n        if self._curr_val is not None:\n            print(f\"{Calc.get_cell_str(self._curr_addr)} value: {self._curr_val}\")\n\n    except Exception as e:\n        print(e)\n```\n\n----------------------------------------\n\nTITLE: Print Document Properties\nDESCRIPTION: Prints various document properties including keywords, modified by, printed by, and template information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(\"  Keywords: \")\nfor keyword in keys:\n    print(f\"  {keyword}\")\n\nprint(\"  Modified by: \" + dps.ModifiedBy)\nprint(\"  Printed by: \" + dps.PrintedBy)\nprint(\"  Template Name: \" + dps.TemplateName)\nprint(\"  Template URL: \" + dps.TemplateURL)\nprint(\"  Autoload URL: \" + dps.AutoloadURL)\nprint(\"  Default Target: \" + dps.DefaultTarget)\n```\n\n----------------------------------------\n\nTITLE: Adding Rows with Integers to RangeObj\nDESCRIPTION: Demonstrates adding positive integers to RangeObj to append rows at the end of range. Shows transformation from A1:C3 to A1:C8.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.range_obj import RangeObj\n\nrng1 = RangeObj(col_start=\"A\", col_end=\"C\", row_start=1, row_end=3, sheet_idx=0)\nstr(rng1)\n'A1:C3'\nrng1.row_count \n3\nrng2 = rng1 + 5\nstr(rng2)\n'A1:C8'\nrepr(rng2)\n\"RangeObj(col_start='A', col_end='C', row_start=1, row_end=8, sheet_idx=0)\"\nrng2.row_count  \n8\n```\n\n----------------------------------------\n\nTITLE: Applying Line Properties to Chart Title in Python\nDESCRIPTION: Code snippet demonstrating how to create a TitleLineProperties object and apply it to a chart title using the Chart2.style_title() method. This sets the border color to MAGENTA_DARK1 with a width of 0.75 points.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.borders import LineProperties as TitleLineProperties\n# ... other code\n\ntitle_border = TitleLineProperties(color=StandardColor.MAGENTA_DARK1, width=0.75)\nChart2.style_title(chart_doc=chart_doc, styles=[title_border])\n```\n\n----------------------------------------\n\nTITLE: Applying Border with Increased Size\nDESCRIPTION: This snippet demonstrates how to set the border width for left and right sides of a cell using the `Side` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_obj = Calc.get_cell_obj(\"B2\")\nCalc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\ncell = Calc.get_cell(sheet, cell_obj)\nside_left_right = Side(color=CommonColor.GREEN, width=1.8)\nborders = Borders(left=side_left_right, right=side_left_right)\nStyler.apply(cell, borders)\n```\n\n----------------------------------------\n\nTITLE: Rotating Text Labels in Chart Data Series\nDESCRIPTION: Rotates the text labels for an entire data series by setting the angle, direction mode, and enabling leader lines. Uses DirectionModeKind to specify left-to-right, top-to-bottom text flow.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.direct.chart2.title.alignment.direction import DirectionModeKind\n# ... other code\nds = chart_doc.get_data_series()[0]\nds.style_orientation(angle=60, mode=DirectionModeKind.LR_TB, leaders=True)\n```\n\n----------------------------------------\n\nTITLE: Sheet Protection Implementation\nDESCRIPTION: Implements sheet protection with password using XProtectable interface. Sets a password to protect sheet modifications.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npro = sheet.qi(XProtectable, True)\npro.protect(\"foobar\")\n```\n\n----------------------------------------\n\nTITLE: Highlighting Cell Range with Border and Headline\nDESCRIPTION: Adds a decorative border and headline to a specified cell range, applying custom formatting and colors\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nCalc.highlight_range(\n    sheet=sheet.component,\n    range_name=\"A2:C7\",\n    headline=\"Cells and Cell Ranges\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Draw Document and Adding Line Shadow in Python\nDESCRIPTION: This snippet demonstrates how to create a Draw document, add a line with a shadow, and verify the shadow properties. It uses the ooodev library to interact with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.line import Shadow, ShadowLocationKind\nfrom ooodev.utils.color import StandardColor\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 36\n        height = 36\n        x = round(width / 2)\n        y = round(height / 2)\n\n        line = slide.draw_line(x1=x, y1=y, x2=x + width, y2=y + height)\n        style = Shadow(\n            use_shadow=True,\n            location=ShadowLocationKind.TOP_RIGHT,\n            color=StandardColor.GRAY,\n            distance=2,\n            blur=1,\n            transparency=50,\n        )\n        style.apply(line.component)\n\n        f_style = Shadow.from_obj(line.component)\n        assert f_style is not None\n        assert f_style.prop_use_shadow is True\n        assert f_style.prop_use_shadow is True\n        assert f_style.prop_location == ShadowLocationKind.TOP_RIGHT\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Legend Position with OOO Development Tools\nDESCRIPTION: A concise code snippet demonstrating how to set the legend position using the style_position() method with specific parameters like LegendPosition and DirectionModeKind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/position.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.chart2.legend_position import LegendPosition\nfrom ooodev.format.inner.direct.chart2.title.alignment.direction import DirectionModeKind\n# ... other code\n\n_ = legend.style_position(\n    pos=LegendPosition.PAGE_END,\n    no_overlap=True,\n    mode=DirectionModeKind.LR_TB,\n)\n```\n\n----------------------------------------\n\nTITLE: Initiating Animation Effect for Shapes - Python\nDESCRIPTION: This code sets the animation effect and speed for an ellipse shape to slide into view on a slide. It requires the AnimationEffect and AnimationSpeed enums. Expected inputs are the ellipse object, with the effect and speed being constants. The snippet assumes the presence of the relevant properties on the shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nellipse.set_property(\n    Effect=AnimationEffect.MOVE_FROM_LEFT, Speed=AnimationSpeed.FAST\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Document and Setting Title Alignment\nDESCRIPTION: Full example demonstrating chart document initialization, styling, and title orientation modification using OOO Development Tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooodev.format.chart2.direct.title.alignment import DirectionModeKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.PURPLE_DARK1,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.BLUE_DARK1,\n                StandardColor.PURPLE_LIGHT2,\n            ),\n        )\n\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_orientation(angle=15, vertical=False)\n        title.style_write_mode(mode=DirectionModeKind.LR_TB)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Border Styles with Borders Class and apply() in Python\nDESCRIPTION: This snippet demonstrates how to apply specific border styles using the `Borders` class and the `apply()` method. It defines a red side style for the left and right borders and a default side for the top and bottom borders, then applies the style to the table's component.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n\n        default_side = Side()\n        red_side = Side(\n            line=BorderLineKind.SOLID, color=StandardColor.RED_DARK1, width=LineSize.MEDIUM\n        )\n        bdr_style = Borders(left=red_side, top=default_side, bottom=default_side, right=red_side)\n\n        bdr_style.apply(table.component)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lightproof as Grammar Checker in Python\nDESCRIPTION: This code snippet shows how to set Lightproof as the default grammar checker (proofreader) in LibreOffice. It uses the XLinguServiceManager2 interface to configure the linguistic services.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom com.sun.star.linguistic2 import XLinguServiceManager2\n\nwith Lo.Loader(Lo.ConnectSocket(headless=True)) as loader:\n    lingo_mgr = Lo.create_instance_mcf(\n        XLinguServiceManager2, \"com.sun.star.linguistic2.LinguServiceManager\"\n    )\n    Write.set_configured_services(\n        lingo_mgr, \"Proofreader\", \"org.libreoffice.comp.pyuno.Lightproof.en\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Calc.open_doc Method\nDESCRIPTION: Opens a document using the LibreOffice loader and ensures it's a spreadsheet document by converting it to XSpreadsheetDocument. It raises an exception if the document is null or not a spreadsheet.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n        # in Calc class (simplified)\n        @classmethod\n        def open_doc(cls, fnm: PathOrStr, loader: XComponentLoader) -> XSpreadsheetDocument:\n            doc = Lo.open_doc(fnm=fnm, loader=loader)\n            if doc is None:\n                raise Exception(\"Document is null\")\n            return cls.get_ss_doc(doc)\n```\n\n----------------------------------------\n\nTITLE: Creating LibreOffice Service Instances in Python\nDESCRIPTION: Shows the implementation of Lo.create_instance_mcf method, which creates service instances using the XMultiComponentFactory. It demonstrates how to create service objects within the remote component context and query for specific interfaces.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# in Lo class\n@classmethod\ndef create_instance_mcf(\n    cls,\n    atype: Type[T], service_name: str,\n    args: Tuple[Any, ...] | None = None,\n    raise_err: bool = False\n) -> T | None:\n\n    if cls._xcc is None or cls._mc_factory is None:\n        raise Exception(\"No office connection found\")\n    try:\n        if args is not None:\n            obj = cls._mc_factory.createInstanceWithArgumentsAndContext(\n                service_name, args, cls._xcc\n            )\n        else:\n            obj = cls._mc_factory.createInstanceWithContext(service_name, cls._xcc)\n        if raise_err is True and obj is None:\n            CreateInstanceMcfError(atype, service_name)\n        interface_obj = cls.qi(atype=atype, obj=obj)\n        if raise_err is True and interface_obj is None:\n            raise MissingInterfaceError(atype)\n        return interface_obj\n    except CreateInstanceMcfError:\n        raise\n    except MissingInterfaceError:\n        raise\n    except Exception as e:\n        raise Exception(f\"Couldn't create interface for '{service_name}'\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Text Properties to Calc cells\nDESCRIPTION: This snippet demonstrates how to apply text property settings to cells in LibreOffice Calc. It enables automatic text wrapping, hyphenation, and sets the text direction to follow page settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/alignment.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nstyle = Properties(\n    wrap_auto=True,\n    hyphen_active=True,\n    direction=TextDirectionKind.PAGE,\n    style_name=StyleCellKind.DEFAULT,\n)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Item to Calc Sheet Tab Context Menu using Python\nDESCRIPTION: This snippet demonstrates how to intercept the context menu when right-clicking on a sheet tab in Calc and add a new menu item. It uses the ooodev library to simplify the process of intercepting and modifying the context menu.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/intercept_menu.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any, TYPE_CHECKING\nimport uno\nfrom ooo.dyn.ui.context_menu_interceptor_action import ContextMenuInterceptorAction as ContextMenuAction\n\nfrom ooodev.adapter.ui.context_menu_interceptor import ContextMenuInterceptor\nfrom ooodev.adapter.ui.context_menu_interceptor_event_data import ContextMenuInterceptorEventData\nfrom ooodev.calc import CalcDoc\nfrom ooodev.events.args.event_args_generic import EventArgsGeneric\nfrom ooodev.gui.menu.context.action_trigger_container import ActionTriggerContainer\nfrom ooodev.gui.menu.context.action_trigger_item import ActionTriggerItem\nfrom ooodev.loader import Lo\n\n\nif TYPE_CHECKING:\n    from ooodev.calc.calc_sheet_view import CalcSheetView\n\n\ndef on_menu_intercept(\n    src: ContextMenuInterceptor,\n    event: EventArgsGeneric[ContextMenuInterceptorEventData],\n    view: CalcSheetView,\n) -> None:\n    try:\n        # selection = event.event_data.event.selection.get_selection()\n        # print(selection)\n        container = event.event_data.event.action_trigger_container\n        print(container[0].CommandURL)\n        if container[0].CommandURL == \".uno:Insert\":\n            container.insert_by_index(0, ActionTriggerItem(\".uno:SelectTables\", \"Sheet...\"))\n            event.event_data.action = ContextMenuAction.EXECUTE_MODIFIED\n    except Exception as e:\n        print(e)\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        sheet = doc.sheets[0]\n        sheet.set_active()\n        sheet[0, 0].value = \"Hello, World!\"\n\n        view = doc.get_view()\n        view.add_event_notify_context_menu_execute(on_menu_intercept)\n        # set a breakpoint here to see results.\n        assert view\n\n    finally:\n        doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Transparency in Python\nDESCRIPTION: This snippet illustrates how to retrieve the transparency style that has been set on a shape, by utilizing the `ShapeTransparency.from_obj()` method. This allows for verifying and ensuring the correct transparency was applied after creation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/transparency/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.transparency import Transparency as ShapeTransparency\n# ... other code\n\n# get the style from the shape\nf_style = ShapeTransparency.from_obj(rect)\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: Setting Up Calc Document for Page Background Modification in Python\nDESCRIPTION: This code sets up a LibreOffice Calc document and applies a basic page background color. It demonstrates importing necessary modules, creating a document, and setting a light green background color for the default page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/background.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.page.area import Color as PageStyleColor, CalcStylePageKind\nfrom ooodev.format.calc.modify.page.area import Img as PageStyleImg, PresetImageKind\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        page_color_style = PageStyleColor(\n            color=StandardColor.GREEN_LIGHT2, style_name=CalcStylePageKind.DEFAULT\n        )\n        page_color_style.apply(doc)\n\n        style_obj = PageStyleColor.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Documenting SpreadsheetViewComp Module with Sphinx AutoModule\nDESCRIPTION: Sphinx documentation directive for automatically generating API documentation for the spreadsheet view component adapter module\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.sheet.spreadsheet_view_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.sheet.spreadsheet_view_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example with Cast\nDESCRIPTION: This code shows another structure of an EventArgsCallbackT callback function, where the FormCtlCheckBox control is retrieved from the keyword arguments.  The `cast` function is used to ensure proper type hinting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_check_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlCheckBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for ooodev.format.chart2.direct.wall.transparency\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the ooodev.format.chart2.direct.wall.transparency module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.wall.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.wall.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Hatching Color in Draw\nDESCRIPTION: This code snippet shows how to apply a hatching style to a rectangle in LibreOffice Draw, using the `Draw` class from the `ooo-dev-tools` library.  It creates a rectangle and sets its fill style to `HATCH` and specifies the hatching pattern by name. This will fill the rectangle with the chosen hatching pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n        # in DrawGradient Class()\n        def _gradient_hatching(self, curr_slide: DrawPage[DrawDoc]) -> None:\n            rect1 = curr_slide.draw_rectangle(\n                x=self._x,\n                y=self._y,\n                width=self._width,\n                height=self._height,\n            )\n            rect1.set_hatch_color(name=self._hatch_gradient)\n```\n\n----------------------------------------\n\nTITLE: Adding listener to Global Event Broadcaster\nDESCRIPTION: Demonstrates how to add a listener to the global event broadcaster using `Lo.global_event_broadcaster.add_event_document_event_occurred`. It includes a callback function `on_global_document_event` to handle document events. The callback uses `contextlib.suppress` for exception handling and filters for the `OnUnfocus` event.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/loader/comp/the_global_event_broadcaster.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\nfrom typing import TYPE_CHECKING, Any, cast\nfrom ooodev.loader import Lo\n\nif TYPE_CHECKING:\n    from com.sun.star.document import DocumentEvent\nelse:\n    DocumentEvent = Any\n\n#  Add a listener to the global event broadcaster\nLo.global_event_broadcaster.add_event_document_event_occurred(on_global_document_event)\n\ndef on_global_document_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # This is a listener for the global event broadcaster\n    with contextlib.suppress(Exception):\n        doc_event = cast(DocumentEvent, event.event_data)\n        name = doc_event.EventName\n        if name == \"OnUnfocus\":\n            # only interested in the OnUnfocus event\n            self._clear_cache()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Corner and Caps Style from a Shape in LibreOffice Draw (Python)\nDESCRIPTION: This snippet demonstrates how to retrieve the corner and cap styles from a shape using the CornerCaps.from_obj() method. It then verifies that the retrieved styles match the expected values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/corner_caps.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.line import CornerCaps\n# ... other code\n\n# get the properties from the shape\nf_style = CornerCaps.from_obj(rect.component)\nassert f_style.prop_corner_style == LineJoint.MIDDLE\nassert f_style.prop_cap_style == LineCap.SQUARE\n```\n\n----------------------------------------\n\nTITLE: Applying Shape Transparency in Python\nDESCRIPTION: This snippet demonstrates how to create a rectangle shape, apply a color and transparency to it using the `ShapeTransparency` class from the OOoDev library. This showcases the functionality of modifying a shape's appearance by changing its transparency level.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/transparency/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format import Styler\nfrom ooodev.format.draw.direct.transparency import Transparency as ShapeTransparency\n# ... other code\n\nrect = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\ncolor_style = ShapeColor(StandardColor.RED)\nstyle = ShapeTransparency(60)\nStyler.apply(rect, color_style, style)\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example with kwargs\nDESCRIPTION: Demonstrates an alternative format for EventArgsCallbackT callbacks. In this case, the CtlNumericField instance is accessed via the `kwargs` dictionary using the key 'control_src'. This provides flexibility in how the control is handled within the callback.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_numeric_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlNumericField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Series Number Format in Python\nDESCRIPTION: Illustrates the `style_numbers_numbers` method to apply specific number formats to data labels in a data series using the `NumberFormatIndexEnum` enum. This ensures that numeric values are displayed using custom currency formats.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nds.style_text_attributes(show_number=True)\nds.style_numbers_numbers(\n    source_format=False,\n    num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing XMultiServiceFactory for Document\nDESCRIPTION: Shows how to initialize the XMultiServiceFactory service manager for a newly created document\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndoc = loader.loadComponentFromURL(\"private:factory/swriter\", \"_blank\", 0, props)\nLo._ms_factory =  Lo.qi(XMultiServiceFactory, doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gradient Style Properties\nDESCRIPTION: Shows how to retrieve gradient transparency settings from an existing style using the Gradient.from_style method. Demonstrates accessing style properties and verifying the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/transparency/gradient.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf_style = Gradient.from_style(\n    doc=doc.component,\n    style_name=style_name_kind,\n    style_family=style_family_kind,\n)\nassert f_style.prop_style_name == str(style_name_kind)\n```\n\n----------------------------------------\n\nTITLE: Using Context Manager to Import User Script in LibreOffice\nDESCRIPTION: This code snippet demonstrates how to use the `importer_user_script` context manager to import a module from the user library in LibreOffice. It ensures that resources are appropriately acquired and released, maintaining the integrity of the environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/uno_helper/importer/importer_user_script.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.uno_helper.importer import importer_user_script\n\ndef main():\n    _ = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = None\n    try:\n        doc = CalcDoc.create_doc()\n\n        with importer_user_script():\n            import my_module\n\n        print(\"Done\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    finally:\n        if doc:\n            doc.close()\n        Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Documentation Configuration for WriteDoc Class\nDESCRIPTION: Sphinx documentation directives that generate documentation for the WriteDoc class from the ooodev.write module. Includes configuration to show all members, undocumented members, inheritance, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_doc.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.WriteDoc\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Accessing CtlGroupBox from Event Callback in Python\nDESCRIPTION: This snippet shows an alternative approach to access the CtlGroupBox from a callback function. The control is retrieved from the keyword arguments of the function using casting. This provides flexibility to access the control when it is not directly passed as an argument.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_group_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlGroupBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive\nDESCRIPTION: This snippet uses the automodule directive in reStructuredText to generate documentation for the specified Python module. It includes options to display members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.frame.transient_documents_document_content_identifier_factory_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.frame.transient_documents_document_content_identifier_factory_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying FontEffects to Writer Document\nDESCRIPTION: This example demonstrates creating a Writer document and applying custom font effects (blue light color and double underline) to text. It also shows how to retrieve font effects from an existing style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.char.font import FontEffects, StyleCharKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        font_style = FontEffects(color=StandardColor.BLUE_LIGHT1, underline=FontLine(line=FontUnderlineEnum.DOUBLE))\n        font_style.apply(doc)\n\n        cursor = Write.get_cursor(doc)\n        Write.append_para(cursor=cursor, text=\"Hello World!\")\n\n        style_obj = FontEffects.from_style(doc=doc, style_name=StyleCharKind.SOURCE_TEXT)\n        assert style_obj.prop_style_name == str(StyleCharKind.SOURCE_TEXT)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Managing Chart Legends in Python\nDESCRIPTION: Static method in Chart2 class that controls the visibility of a chart's legend. When making a legend visible, it creates a new legend instance if needed and applies styling properties like line style, fill style, and transparency.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@staticmethod\ndef view_legend(chart_doc: XChartDocument, is_visible: bool) -> None:\n    try:\n        diagram = chart_doc.getFirstDiagram()\n        legend = diagram.getLegend()\n        if is_visible and legend is None:\n            leg = Lo.create_instance_mcf(XLegend, \"com.sun.star.chart2.Legend\", raise_err=True)\n            Props.set(\n                leg,\n                LineStyle=LineStyle.NONE,\n                FillStyle=FillStyle.SOLID,\n                FillTransparence=100\n            )\n            diagram.setLegend(leg)\n\n        Props.set(leg, Show=is_visible)\n    except Exception as e:\n        raise ChartError(\"Error while setting legend visibility\") from e\n```\n\n----------------------------------------\n\nTITLE: Calc Document Chart Axis Line Styling in Python\nDESCRIPTION: This code snippet demonstrates how to open a Calc document, access a chart, and style the Y-axis line using the `style_axis_line()` method. It sets the color and width of the axis line. The code also demonstrates setting style for chart area gradient and border line.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/line.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooodev.utils.data_type.offset import Offset\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \\\"tmp\\\" / \\\"bon_voyage.ods\\\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\\\"A1\\\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.GREEN_DARK2,\n            width=0.9,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=0,\n            offset=Offset(41, 50),\n            style=GradientStyle.RADIAL,\n            grad_color=ColorRange(\n                StandardColor.TEAL,\n                StandardColor.YELLOW_DARK1,\n            ),\n        )\n        _ = chart_doc.axis_y.style_axis_line(\n            color=StandardColor.TEAL, width=0.75\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\n\nif __name__ == \\\"__main__\\\":\n    SystemExit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Printing a Spreadsheet Range with Direct Parameters in Python\nDESCRIPTION: This code demonstrates how to print a specific range (C6:G33) from the first sheet of a spreadsheet document by directly specifying the printer name and range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/class/print_sheet.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\n\n# ... other code\n\n# open document\ndoc = Calc.open_doc(fnm=\"my_spreadsheet.ods\")\n\n# print range C6:G33 of the first sheet,\n# optionally idx value can be used to print from sheet matching idx number.\nCalc.print_sheet(printer_name=\"Brother MFC-L2750DW series\", range_name=\"C6:G33\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Calc Document and Applying Range Background Color\nDESCRIPTION: This snippet demonstrates creating a Calc document, setting up a range of cells with values, and applying a background color to the entire range. It uses the CalcDoc class and the style_area_color method on a range object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/background.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.utils.color import StandardColor\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        rng = sheet.rng(\"A1:B1\")\n        sheet.set_array(\n            values=[[\"Hello\", \"World\"]], range_obj=rng\n        )\n        cell_rng = sheet.get_range(range_obj=rng)\n        cell_rng.style_area_color(StandardColor.BLUE_LIGHT2)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting position of a shape in LibreOffice Draw using Python\nDESCRIPTION: This code snippet shows how to set the position of a rectangle shape in a LibreOffice Draw document using the Position class from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/position.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.position_size import Position\n# ... other code\n\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\npos = Position(pos_x=38, pos_y=18)\npos.apply(rect.component)\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Gradient to Data Series\nDESCRIPTION: This snippet applies a preset gradient to the background of the first data series in the chart using the DEEP_OCEAN preset from the PresetGradientKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\nds.style_area_gradient_from_preset(preset=PresetGradientKind.DEEP_OCEAN)\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Number Formatting Properties in Calc\nDESCRIPTION: A code snippet that demonstrates how to create a Numbers object to apply currency formatting to the default cell style. This uses NumberFormatIndexEnum to specify the formatting type.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/numbers.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle = Numbers(\n    num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2_RED,\n    style_name=StyleCellKind.DEFAULT,\n)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Properties for Rectangle Shape in Python-LibreOffice\nDESCRIPTION: Demonstrates how to set various text properties for a rectangle shape in LibreOffice Draw. Includes settings for text contour frame, fit to size options, word wrap, and automatic text resizing functionality.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text/other_text_properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n\n# Adjust to contour option\nrect.component.TextContourFrame = True  \n\n# Fit to Frame option\n# TextFitToSizeType.PROPORTIONAL (True)\n# TextFitToSizeType.AUTOFIT (True)\n# from ooo.dyn.drawing.text_fit_to_size_type import TextFitToSizeType\nrect.component.TextFitToSize = TextFitToSizeType.PROPORTIONAL\n\n# Word Wrap option\n# Word wrap text in shape.\n# TextWordWrap does not seem to be listed in the API\nrect.component.TextWordWrap = True\n\n# resize shape to fit text\nrect.component.TextAutoGrowHeight = True\nrect.component.TextAutoGrowWidth = True\n```\n\n----------------------------------------\n\nTITLE: Accessing Cells by Indices in CalcSheet Using Python\nDESCRIPTION: This Python snippet shows how to access a cell in the CalcSheet by a tuple containing zero-based column and row indices. The value of the cell at these indices is retrieved using the 'get_val' method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_sheet.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc.sheets[0][(0, 1)].get_val()\n1.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Number Format from a Range\nDESCRIPTION: This snippet shows how to get the current number format applied to a range of cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/numbers.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = cell_rng.style_numbers_numbers_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle with Bitmap File Color in LibreOffice Draw (Python)\nDESCRIPTION: This snippet creates a rectangle shape and applies a bitmap file color fill to it. It uses the Draw class methods to create the rectangle and set its bitmap file color properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# in DrawGradient Class()\n# in this case self._gradient_fnm is crazy_blue.jpg\ndef _gradient_bitmap_file(self, curr_slide: DrawPage[DrawDoc]) -> None:\n    rect1 = curr_slide.draw_rectangle(\n        x=self._x,\n        y=self._y,\n        width=self._width,\n        height=self._height,\n    )\n    rect1.set_bitmap_file_color(fnm=self._gradient_fnm)\n```\n\n----------------------------------------\n\nTITLE: Writing a Hello World Document in LibreOffice\nDESCRIPTION: This Python snippet shows how to create a simple Hello World document in LibreOffice using the installed 'ooo-dev-tools' package. It defines a function to manipulate the current document and outputs 'Hello World!' into it.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_portable_install_pip.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\\nfrom ooodev.write import WriteDoc\\n\\ndef say_hello():\\n    doc = WriteDoc.from_current_doc()\\n    cursor = doc.get_cursor()\\n    cursor.append_para(text=\"Hello World!\")\\n\\nsay_hello()\n```\n\n----------------------------------------\n\nTITLE: Applying font effects to a Calc cell\nDESCRIPTION: Snippet showing how to apply font effects to a cell. The example applies red text color, blue single underline, and shadow effects to a cell containing 'Hello'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell = sheet[\"A1\"]\ncell.value = \"Hello\"\ncell.style_font_effect(\n    color=CommonColor.RED,\n    underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n    shadowed=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Colored Border to a Cell\nDESCRIPTION: This snippet applies a red border to a specific cell, demonstrating the use of the `Side` class for color specification.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_obj = Calc.get_cell_obj(\"B2\")\nCalc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\ncell = Calc.get_cell(sheet, cell_obj)\nborders = Borders(border_side=Side(color=CommonColor.RED))\nStyler.apply(cell, borders)\n```\n\n----------------------------------------\n\nTITLE: Styling Chart Title Font\nDESCRIPTION: This snippet shows how to access the chart title and apply font styling using the `style_font_general()` method. It sets the font to bold, italic, underlined, a specific color, and adds a shadow effect. This code assumes that a chart document (`chart_doc`) and its title have already been retrieved.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/font.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\ntitle = chart_doc.get_title()\nif title is None:\n    raise ValueError(\"Title not found\")\n\ntitle.style_font_general(\n    b=True,\n    i=True,\n    u=True,\n    color=StandardColor.PURPLE_DARK2,\n    shadowed=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Saving Graphics to PNG Files\nDESCRIPTION: This code snippet demonstrates how to save graphics retrieved from a LibreOffice text document to PNG files, including capturing the pixel size of each image.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntext_doc = WriteDoc(Write.open_doc(fnm=self._fnm, loader=loader))\npics = text_doc.get_text_graphics()\nprint(f\"Num. of text graphics: {len(pics)}\")\n\n# save text graphics to files\nfor i, pic in enumerate(pics):\n    img_file = self._out_dir / f\"graphics{i}.png\"\n    ImagesLo.save_graphic(pic=pic, fnm=img_file)\n    sz = cast(Size, Props.get(pic, \"SizePixel\"))\n    print(f\"Image size in pixels: {sz.Width} X {sz.Height}\")\nprint()\n```\n\n----------------------------------------\n\nTITLE: Goal Seek: Simple Equation Solving in Python\nDESCRIPTION: Demonstrates goal seek functionality by solving a simple equation and finding x-value using cell references and formulas\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# in goal_seek.py\ncell1 = cell1.get_cell_right()  # D1\ncell2 = cell2.get_cell_down()  # D2\ncell1.set_val(0.8)\ncell2.set_val(\"=(D1^2 - 1)/(D1 - 1)\")\n\nx = cell1.goal_seek(\n    gs=gs, formula_cell_name=cell2.cell_obj, result=2\n)\nprint(f\"x == {x} when x+1 == 2\\n\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Image Scale from Dimensions - Python\nDESCRIPTION: This function calculates the best fit dimensions for an image, ensuring it fits within the specified maximum width and height without distortion. It depends on a method that retrieves the image size in 1/100 mm units. Expects the image's file path and two integers as input, returning a Size object or None if size cannot be determined.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n        @classmethod\n        def calc_scale(cls, fnm: PathOrStr, max_width: int, max_height: int) -> Size | None:\n            im_size = cls.get_size_100mm(fnm)  # in 1/100 mm units\n            if im_size is None:\n                return None\n\n            width_scale = (max_width * 100) / im_size.Width\n            height_scale = (max_height * 100) / im_size.Height\n\n            scale_factor = min(width_scale, height_scale)\n\n            w = round(im_size.Width * scale_factor / 100)\n            h = round(im_size.Height * scale_factor / 100)\n            return Size(w, h)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with Control Source in Python\nDESCRIPTION: Defines a callback function format used in event handling within dialogs, including the CtlImage control source. This format supports kwargs to accommodate additional control data and event information. Utilizes type casting to retrieve control from kwargs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_image.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlImage, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using ImporterSharedExtScript Context Manager in Python\nDESCRIPTION: This code snippet demonstrates how to use the `importer_shared_ext_script` context manager to import a module from a Calc document. It handles exceptions and ensures that the document and LibreOffice connection are properly closed after use.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/uno_helper/importer/importer_shared_ext_script.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.uno_helper.importer import importer_shared_ext_script\n\ndef main():\n    _ = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = None\n    try:\n        doc = CalcDoc.create_doc()\n\n        with importer_shared_ext_script(\"apso\"):\n            import tools\n\n        print(\"Done\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    finally:\n        if doc:\n            doc.close()\n        Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Setting Calc Cell Alignment Properties\nDESCRIPTION: This snippet demonstrates how to set text alignment properties for a Calc cell using the `style_align_properties` method. It sets properties such as `wrap_auto`, `hyphen_active`, and `direction`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/alignment.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n        cell = sheet[\"A1\"]\n        cell.value = \"Hello World! Sunny Day!\"\n        cell.style_align_properties(\n            wrap_auto=True,\n            hyphen_active=True,\n            direction=TextDirectionKind.PAGE,\n        )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Series in Python\nDESCRIPTION: Class method for retrieving data series from a chart document, with optional chart type filtering and error handling\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_data_series(\n    cls, chart_doc: XChartDocument, chart_type: ChartTypeNameBase | str = \"\"\n) -> Tuple[XDataSeries, ...]:\n    try:\n        if chart_type:\n            xchart_type = cls.find_chart_type(chart_doc, chart_type)\n        else:\n            xchart_type = cls.get_chart_type(chart_doc)\n        ds_con = Lo.qi(XDataSeriesContainer, xchart_type, True)\n        return ds_con.getDataSeries()\n    except Exception as e:\n        raise ChartError(\"Error getting chart data series\") from e\n```\n\n----------------------------------------\n\nTITLE: Setting List Style in Python\nDESCRIPTION: This snippet sets the list style of a paragraph in a LibreOffice Writer document using the `ListStyle` class from the `ooodev` library. It creates a `ListStyle` object with a specified list style and style name, and then applies it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/outline_list.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npara_liststyle_style = ListStyle(\n    list_style=StyleListKind.NUM_123, style_name=StyleParaKind.STANDARD\n)\npara_liststyle_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Displaying Document Property Values in Python\nDESCRIPTION: Code snippet from the print_doc_props method that shows how to access individual document properties like Author, Title, Subject, Description, and Generator from the XDocumentProperties interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Document Properties Info\")\nprint(\"  Author: \" + dps.Author)\nprint(\"  Title: \" + dps.Title)\nprint(\"  Subject: \" + dps.Subject)\nprint(\"  Description: \" + dps.Description)\nprint(\"  Generator: \" + dps.Generator)\n\nkeys = dps.Keywords\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart with Data Series Transparency in Python\nDESCRIPTION: Complete setup example for creating a chart with data series transparency. This code opens a Calc document, styles the chart background with a gradient and border, and applies 50% transparency to all data series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.series.data_series.transparency import Transparency as SeriesTransparency\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_LIGHT3, width=0.7)\n        chart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.TEAL_BLUE)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        data_series_transparency = SeriesTransparency(value=50)\n        Chart2.style_data_series(chart_doc=chart_doc, styles=[data_series_transparency])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Diagonal Border Down in Python\nDESCRIPTION: This snippet demonstrates how to apply a diagonal-down border style within a specified cell range using the `Side` class. The diagonal down border is set to red within the range `B2:F6`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\n\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\ncell_rng.style_borders(\n    border_side=Side(),\n    diagonal_down=Side(color=CommonColor.RED),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Shadow from Paragraph Style in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the border shadow configuration from an existing paragraph style in the document. It uses the from_style class method of the Shadow class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/bordes.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Shadow.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Adding a Chart Type in LibreOffice Python\nDESCRIPTION: This class method adds a specified chart type to the chart's coordinate system in LibreOffice using the Python API. It ensures the chart type is valid, creates a new chart type instance, and adds it to the coordinate system.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\n        def add_chart_type(\n            cls, chart_doc: XChartDocument, chart_type: ChartTypeNameBase | str\n        ) -> XChartType:\n            # ensure chart_type is of correct type\n            Info.is_type_enum_multi(\n                alt_type=\"str\", enum_type=ChartTypeNameBase, enum_val=chart_type, arg_name=\"chart_type\"\n            )\n            try:\n                ct = Lo.create_instance_mcf(\n                    XChartType, f\"com.sun.star.chart2.{chart_type}\", raise_err=True\n                )\n                coord_sys = cls.get_coord_system(chart_doc)\n                ct_con = Lo.qi(XChartTypeContainer, coord_sys, True)\n                ct_con.addChartType(ct)\n                return ct\n            except ChartError:\n                raise\n            except Exception as e:\n                raise ChartError(\"Error adding chart type\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effect to Matched Range\nDESCRIPTION: Applying the font effect to a matched text range in a document alters CharColor and CharPosture, styling the selected text specifically as italicized and colored.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfont_effect.apply(match_tr)\n```\n\n----------------------------------------\n\nTITLE: Applying Different Border Style to a Cell in Calc\nDESCRIPTION: This snippet demonstrates how to apply a different border style (dash-dot in this case) to a cell using the BorderLineKind enumeration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import BorderLineKind\n\n# ... other code\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\ncell.style_borders_sides(\n    line=BorderLineKind.DASH_DOT,\n    color=CommonColor.DARK_GREEN\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Text Alignment for Calc cells with python-ooo-dev-tools\nDESCRIPTION: This snippet shows the setup for applying text alignment to cells in LibreOffice Calc. It imports necessary modules and creates a document with centered and middle-aligned text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.cell.alignment import TextAlign, StyleCellKind\nfrom ooodev.format.calc.modify.cell.alignment import HoriAlignKind, VertAlignKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        style = TextAlign(\n            hori_align=HoriAlignKind.CENTER,\n            vert_align=VertAlignKind.MIDDLE,\n            style_name=StyleCellKind.DEFAULT,\n        )\n        style.apply(doc)\n\n        style_obj = TextAlign.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\n        assert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Transparency to a Page Footer\nDESCRIPTION: Demonstrates applying a gradient transparency to a page footer style background. The code configures a linear gradient with a 45-degree angle, 22% border, and an intensity range from 0 to 100. The footer background is set to dark green with the gradient transparency applied.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npage_footer_style_kind = WriterStylePageKind.STANDARD\ncolor_style = HeaderAreaColor(color=StandardColor.GREEN_DARK1, style_name=page_footer_style_kind)\nfooter_gradient_style = Gradient(\n    style=GradientStyle.LINEAR,\n    angle=45,\n    border=22,\n    grad_intensity=IntensityRange(0, 100),\n    style_name=page_footer_style_kind,\n)\nStyler.apply(doc, footer_style, color_style, footer_gradient_style)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback Function with Control Source\nDESCRIPTION: This code snippet provides an event callback function definition that accepts source control as a keyword argument. It demonstrates how to define event handling functions that can receive specific control sources within their context, enhancing access to the control handling the event.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_currency_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef on_some_event(\n        src: Any, event: EventArgs, control_src: CtlCurrencyField, *args, **kwargs\n    ) -> None:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Accessing LibreOffice User Profile Directory in Python\nDESCRIPTION: Static read-only property that returns the path to the LibreOffice user profile directory, such as 'C:\\Users\\user\\AppData\\Roaming\\LibreOffice\\4\\user'. This is used for accessing user-specific configuration and data.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/session.rst#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nSession.user_profile\n```\n\n----------------------------------------\n\nTITLE: Creating Pattern for Paragraph Background in Python\nDESCRIPTION: This code snippet shows how to create and apply a pattern style to a paragraph's background in a Writer document using Python. It utilizes `Pattern.from_preset` to generate a pattern style, and the pattern is applied through the `Write.append_para` function. The snippet is part of a broader application reliant on the `ooodev` library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/pattern.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\npattern_style = Pattern.from_preset(PresetPatternKind.HORIZONTAL_BRICK)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[pattern_style])\n```\n\n----------------------------------------\n\nTITLE: Setting Attribute Options for Chart Data Point in Python\nDESCRIPTION: This snippet shows how to apply attribute options to a specific data point in a chart series. It uses the same AttribOptions as the previous example but applies it to a single point.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=-1, styles=[attrib_opt])\n```\n\n----------------------------------------\n\nTITLE: Setting Table Borders and Padding using table_border2 in Python\nDESCRIPTION: This code snippet demonstrates how to set table borders and padding directly using the `table_border2` property in OpenOffice Writer with Python and the ooodev library. It sets the border color, width, and style for all sides of the table, as well as the vertical and horizontal lines. Additionally, it sets the distance (padding) between the cell content and the border.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.units import UnitMM\n\n# ... other code\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.table_border2.left_line.color = StandardColor.BLUE_DARK2\ntable.table_border2.left_line.line_width = UnitPT(float(LineSize.THICK))\ntable.table_border2.left_line.line_style = BorderLineKind.SOLID\ntable.table_border2.right_line = table.table_border2.left_line\ntable.table_border2.top_line = table.table_border2.left_line\ntable.table_border2.bottom_line = table.table_border2.left_line\n\ntable.table_border2.vertical_line.color = StandardColor.GREEN_DARK1\ntable.table_border2.vertical_line.line_width = UnitPT(float(LineSize.THIN))\ntable.table_border2.vertical_line.line_style = BorderLineKind.SOLID\ntable.table_border2.horizontal_line = table.table_border2.vertical_line\n\ntable.table_border2.distance = UnitMM(5)\n```\n\n----------------------------------------\n\nTITLE: Applying Background Image to Data Series\nDESCRIPTION: This code snippet sets a background image for a data series using a preset image selected from the PresetImageKind enum. The first data series is used for this styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndds = chart_doc.get_data_series()[0]\nds.style_area_image_from_preset(preset=PresetImageKind.POOL)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Manual) with Width using style_direct in Python\nDESCRIPTION: Creates a table with manual alignment and a specific width using the style_direct approach. This allows for precise positioning with a fixed width in millimeters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=False,\n    align=TableAlignKind.MANUAL,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    width=UnitMM(60.0),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up LibreOffice Calc Document with Number Formatting\nDESCRIPTION: Creates a new Calc document and applies custom number formatting to the default cell style. The example demonstrates importing necessary modules, creating a document, setting currency formatting, and verifying the style was applied correctly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.cell.numbers import Numbers\nfrom ooodev.format.calc.modify.cell.numbers import StyleCellKind, NumberFormatIndexEnum\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        style = Numbers(\n            num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2_RED,\n            style_name=StyleCellKind.DEFAULT,\n        )\n        style.apply(doc)\n\n        style_obj = Numbers.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\n        assert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Table Borders and Shadow using styles in Python\nDESCRIPTION: This code snippet demonstrates how to set table borders and shadows using predefined `Borders` styles in OpenOffice Writer with Python and the ooodev library. It defines `Side` objects for the borders and a `Shadow` object, creates a `Borders` object, and then applies it to the table using the `apply` method. This allows for reusable border and shadow styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n)\n\nblue_side = Side(line=BorderLineKind.SOLID, color=StandardColor.BLUE_DARK2, width=LineSize.THICK)\ngreen_side = Side(line=BorderLineKind.SOLID, color=StandardColor.GREEN_DARK1, width=LineSize.THIN)\nbdr_style = Borders(\n    border_side=blue_side,\n    vertical=green_side,\n    horizontal=green_side,\n    shadow=Shadow(color=StandardColor.BLUE_DARK2),\n)\n\nbdr_style.apply(table.component)\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback function for FormCtlFixedText in Python\nDESCRIPTION: This code snippet illustrates how to define a callback function for an event triggered by Fixed Text controls in a form. It demonstrates the inclusion of 'control_src' as a keyword argument, which refers to the instance of FormCtlFixedText that fired the event. The function can be utilized to handle specific actions during various events in the form control lifecycle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_fixed_text.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlFixedText, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Paragraph Iteration and Display\nDESCRIPTION: Function for iterating through document paragraphs, displaying each paragraph's text and moving view cursor\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef show_paragraphs(doc: WriteDoc) -> None:\n    tvc = doc.get_view_cursor()\n    cursor = doc.get_cursor()\n    cursor.goto_start(False)\n\n    while 1:\n        cursor.goto_end_of_paragraph(True)\n        curr_para = cursor.get_string()\n        if len(curr_para) > 0:\n            tvc.goto_range(cursor.component.getStart())\n            tvc.goto_range(cursor.component.getEnd(), True)\n\n            print(f\"P<{curr_para}>\")\n            Lo.delay(500)\n\n        if cursor.goto_next_paragraph() is False:\n            break\n```\n\n----------------------------------------\n\nTITLE: Sphinx documentation structure for ooodev Writer header package\nDESCRIPTION: ReStructuredText (RST) markup that defines the documentation structure for the ooodev.format.writer.direct.page.header package. It includes a table of contents tree for subpackages and an automodule directive to display module contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.page.header.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nooodev.format.writer.direct.page.header package\n===============================================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.writer.direct.page.header.area\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.writer.direct.page.header\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: This code snippet demonstrates the format of an EventArgsCallbackT callback function. It illustrates how to access the control source (`control_src`) as a keyword argument within the callback.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_fixed_line.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlFixedLine, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Calc Page Module Contents\nDESCRIPTION: This snippet shows how to use `automodule` to document the `ooodev.format.inner.modify.calc.page.page` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` directives control which parts of the module are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.page.page.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.page.page\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Styling Wall Border Line in Chart\nDESCRIPTION: Example of applying border line styling to a chart wall using color, width, and transparency parameters\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\nwall = chart_doc.first_diagram.wall\nwall.style_border_line(\n    StandardColor.PURPLE_DARK1, width=0.8, transparency=20\n)\n```\n\n----------------------------------------\n\nTITLE: Range Text Alignment in Python\nDESCRIPTION: Shows how to apply text alignment to a range of cells, including indentation settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/alignment.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncell = sheet[\"A1\"]\ncell.value = \"Hello\"\ncell = cell.get_cell_right()\ncell.value = \"World\"\ncell_rng = sheet.get_range(range_name=\"A1:B1\")\ncell_rng.style_align_text(\n    hori_align=HoriAlignKind.CENTER,\n    indent=3,\n    vert_align=VertAlignKind.MIDDLE,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing make_constraint Method for Solver in Python\nDESCRIPTION: Implementation of the make_constraint method in the Calc class with multiple overloads to support different parameter combinations. This method creates SolverConstraint objects that represent the mathematical constraints for the optimization problem.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class (simplified, overlaods)\n@classmethod\ndef make_constraint(\n    cls, num: numbers.Number, op: str, sheet: XSpreadsheet, cell_name: str\n) -> SolverConstraint:\n    return cls.make_constraint(\n        num=num, op=op, addr=cls.get_cell_address(sheet=sheet, cell_name=cell_name)\n    )\n\n@classmethod\ndef make_constraint(\n    cls, num: numbers.Number, op: str, addr: CellAddress\n) -> SolverConstraint:\n    return cls.make_constraint(num=num, op=cls.to_constraint_op(op), addr=addr)\n\n@classmethod\ndef make_constraint(\n    cls, num: numbers.Number, op: SolverConstraintOperator,\n    sheet: XSpreadsheet, cell_name: str\n) -> SolverConstraint:\n    return cls.make_constraint(\n        num=num, op=op, addr=cls.get_cell_address(sheet=sheet, cell_name=cell_name)\n    )\n\n@classmethod\ndef make_constraint(\n    cls, num: numbers.Number, op: SolverConstraintOperator, addr: CellAddress\n) -> SolverConstraint:\n    sc = SolverConstraint()\n    sc.Left = addr\n    sc.Operator = op\n    sc.Right = float(num)\n    return sc\n```\n\n----------------------------------------\n\nTITLE: Applying Text Attributes to a Specific Chart2 Data Point in Python\nDESCRIPTION: Demonstrates how to apply text attributes to a specific data point within a chart series using Chart2.style_data_point(). This allows for individual data point styling within a series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=2, styles=[text_attribs])\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback for Time Field Control in Python\nDESCRIPTION: This snippet demonstrates how to define an event callback function for handling events from time field controls. It shows two variations of the function's definition, showcasing the use of the control source in event handling. The callback functions must handle the source control and can accept various arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_time_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlTimeField, *args, **kwargs\n) -> None:\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlTimeField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Applying a Fill Pattern to a Shape\nDESCRIPTION: This snippet shows how to apply a predefined fill pattern to a rectangle shape in a Writer document. It involves using the ShapePattern class and the from_preset method to apply a preset pattern to the shape. The required modules focus on shape manipulation and drawing using the Python-OOoDev framework.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/pattern.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.area import Pattern as ShapePattern\nfrom ooodev.format.writer.direct.shape.area import PresetPatternKind\n# ... other code\nrect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\nstyle = ShapePattern.from_preset(preset=PresetPatternKind.SHINGLE)\nstyle.apply(rect)\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback for Database Combo Box\nDESCRIPTION: This code snippet demonstrates how to define an event callback function that handles events for the FormCtlDbComboBox control. The callback accepts various parameters, including a source control, event data, and additional arguments. The snippet also shows how to safely cast the source control from the passed keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_combo_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbComboBox, *args, **kwargs\n) -> None:\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbComboBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Paper Size in Calc Using SizeMM\nDESCRIPTION: This code snippet shows how to set a custom paper size in a Calc document using the `SizeMM` class from the `ooodev` library.  It defines a paper size with a width of 200mm and a height of 100mm and applies it to the default page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.page import PaperFormat, CalcStylePageKind\n        from ooodev.format.calc.modify.page.page import SizeMM\n        # ... other code\n\n        style = PaperFormat(\n            size=SizeMM(width=200.0, height=100.0),\n            style_name=CalcStylePageKind.DEFAULT,\n        )\n        style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback for Radio Buttons in Python\nDESCRIPTION: This code snippet shows how to define an event callback for a radio button control. It includes source and event parameters along with the control source.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_radio_button.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\\n        src: Any, event: EventArgs, control_src: CtlRadioButton, *args, **kwargs\\n    ) -> None:\\n        pass\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx autoclass directive for WidthHeightFraction\nDESCRIPTION: This RST directive instructs Sphinx to automatically generate documentation for the WidthHeightFraction class. The :members: option ensures that all public methods and attributes of the class are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/width_height_fraction.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.width_height_fraction.WidthHeightFraction\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Implementing TopWindowListener to Handle Window Events\nDESCRIPTION: This snippet showcases the TopWindowListener class, which extends AdapterBase and implements the XTopWindowListener interface. It includes constructors and overrides for event handling methods relevant to window state changes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TopWindowListener(AdapterBase, XTopWindowListener):\n    def __init__(self, trigger_args: GenericArgs | None = None, add_listener: bool = True) -> None:\n        super().__init__(trigger_args=trigger_args)\n        if add_listener:\n            self._tk = mLo.Lo.create_instance_mcf(\n                XExtendedToolkit, \"com.sun.star.awt.Toolkit\", raise_err=True\n            )\n            if self._tk is not None:\n                self._tk.addTopWindowListener(self)\n\n    def windowOpened(self, event: EventObject) -> None:\n        self._trigger_event(\"windowOpened\", event)\n\n    def windowActivated(self, event: EventObject) -> None:\n        self._trigger_event(\"windowActivated\", event)\n\n    def windowDeactivated(self, event: EventObject) -> None:\n        \"\"\"Is invoked when a window is deactivated.\"\"\"\n        self._trigger_event(\"windowDeactivated\", event)\n\n    def windowMinimized(self, event: EventObject) -> None:\n        self._trigger_event(\"windowMinimized\", event)\n\n    def windowNormalized(self, event: EventObject) -> None:\n        self._trigger_event(\"windowNormalized\", event)\n\n    def windowClosing(self, event: EventObject) -> None:\n        self._trigger_event(\"windowClosing\", event)\n\n    def windowClosed(self, event: EventObject) -> None:\n        self._trigger_event(\"windowClosed\", event)\n\n    def disposing(self, event: EventObject) -> None:\n        self._trigger_event(\"disposing\", event)\n```\n\n----------------------------------------\n\nTITLE: Setting Border Shadow for Paragraph Style in Python\nDESCRIPTION: This code snippet shows how to set border shadow for a paragraph style. It creates a Shadow object with specific color and width properties and applies it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/bordes.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nshadow_style = Shadow(color=StandardColor.BLUE_DARK2, width=1.5, style_name=StyleParaKind.STANDARD)\nshadow_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Multiplication and Division Operations with CellObj in Python\nDESCRIPTION: Shows multiplication and division operations for cell navigation including operations with integers, strings, RowObj, and ColObj. Demonstrates rounding behavior and error handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/cell_obj.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.cell_obj import CellObj \n\nf10 = CellObj(\"F\", 10, 0)\nb4 = CellObj(\"B\", 4, 0)\nb2 = CellObj(\"B\", 2, 0)\nf10 * 3 # multiply row by 3\nCellObj(col='F', row=30, sheet_idx=0)\n\nf10  / 2 # divide row by 2\nCellObj(col='F', row=5, sheet_idx=0)\n\nf10  * \"C\" # multiply col by 3\nCellObj(col='R', row=10, sheet_idx=0)\n\nf10  / \"B\" # divided col by 2\nCellObj(col='C', row=10, sheet_idx=0)\n\nf10  * (f10.row_obj * 10) # times 10 rows\nCellObj(col='F', row=100, sheet_idx=0)\n\nf10  * (f10.col_obj * 10) # times 10 cols\nCellObj(col='BH', row=10, sheet_idx=0)\n\nf10  / (f10.row_obj / 2) # get F5\nCellObj(col='F', row=5, sheet_idx=0)\n\nf10  / (f10.col_obj / 2) # get C10\nCellObj(col='C', row=10, sheet_idx=0)\n\nb4 * f10 # b(2) X f(6), 4 X 10\nCellObj(col='L', row=40, sheet_idx=0)\n\nf10 / b2 # f(6) / b(2), 10 / 2\nCellObj(col='C', row=5, sheet_idx=0)\n\nf10 / b4 # f(6) / b(4), 10 / 4, Rounding is used\nCellObj(col='C', row=2, sheet_idx=0)\n\nb2 / f10 \nIndexError\n```\n\n----------------------------------------\n\nTITLE: Initializing Paragraph Transparency in Python\nDESCRIPTION: Demonstrates setting up a paragraph with background color and transparency using OOO Development Tools. Shows how to create a document, set paragraph color and transparency, and append text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.para.area import Color\nfrom ooodev.format.writer.direct.para.transparency import Transparency\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\n```\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\ncolor_style = Color(StandardColor.LIME)\nt_style = Transparency(52)\n\nWrite.append_para(cursor=cursor, text=p_txt, styles=[color_style, t_style])\n```\n\n----------------------------------------\n\nTITLE: Setting Hatching Color Implementation in Draw\nDESCRIPTION: This code snippet demonstrates the internal implementation for setting the hatch color of a shape within the `Draw` class. It retrieves the `XPropertySet` for the shape, sets the `FillStyle` property to `FillStyle.HATCH`, and sets the `FillHatchName` property to the specified hatching name. This configures the shape to be filled with the given hatching pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n        # in Draw class (simplified)\n        @staticmethod\n        def set_hatch_color(shape: XShape, name: DrawingHatchingKind | str) -> None:\n\n            props = Lo.qi(XPropertySet, shape, True)\n            props.setPropertyValue(\"FillStyle\", FillStyle.HATCH)\n            props.setPropertyValue(\"FillHatchName\", str(name))\n```\n\n----------------------------------------\n\nTITLE: Adding Shape to Slide in LibreOffice Draw (Python)\nDESCRIPTION: This function adds a shape to a slide with specified properties such as shape type, position, and size. It creates the shape and adds it to the slide.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# in the draw class (simplified)\n@classmethod\ndef add_shape(\n    cls,\n    slide: XDrawPage,\n    shape_type: DrawingShapeKind | str,\n    x: int | UnitT,\n    y: int | UnitT,\n    width: int | UnitT,\n    height: int | UnitT,\n) -> XShape:\n\n    cls.warns_position(slide=slide, x=x, y=y)\n    shape = cls.make_shape(shape_type=shape_type, x=x, y=y, width=width, height=height)\n    slide.add(shape)\n    return shape\n```\n\n----------------------------------------\n\nTITLE: Setting Preset Chart Area Gradient in Python\nDESCRIPTION: This code snippet demonstrates how to apply a preset gradient to the background of a chart using the `style_area_gradient_from_preset` method of the `ChartDoc` class. The preset gradient is selected using the `PresetGradientKind` enum, in this case `PresetGradientKind.NEON_LIGHT`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\n# ... other code\n_ = chart_doc.style_border_line(color=StandardColor.GREEN_DARK3, width=0.7)\n_ = chart_doc.style_area_gradient_from_preset(preset=PresetGradientKind.NEON_LIGHT)\n```\n\n----------------------------------------\n\nTITLE: Applying Drop Caps to a Paragraph Style in LibreOffice Writer using Python\nDESCRIPTION: This code snippet shows how to create a DropCaps object with specific settings and apply it to the Standard paragraph style in a LibreOffice Writer document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/drop_caps.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npara_dc_style = DropCaps(\n    count=4, style=StyleCharKind.DROP_CAPS, spaces=5.0, style_name=StyleParaKind.STANDARD\n)\npara_dc_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Setting Flow Options in LibreOffice Writer using Python\nDESCRIPTION: This code snippet sets flow options for a paragraph in LibreOffice Writer, specifically the number of 'orphans' and 'widows', with the option to keep paragraphs together. It uses the `FlowOptions` class from the `ooodev.format.writer.direct.para.text_flow` module. The snippet demonstrates applying these styles to a paragraph via a text cursor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/text_flow.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# ... other code\ncursor = Write.get_cursor(doc)\nflow_opt = FlowOptions(orphans=3, widows=4, keep=True)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[flow_opt])\n```\n\n----------------------------------------\n\nTITLE: Apply Style to Existing Cell Using Calc.set_style_cell\nDESCRIPTION: The snippet explains using the Calc.set_style_cell method to apply styles to an existing cell object in LibreOffice Calc. After setting a value, styles are independently applied using the method, requiring prior instantiation of Calc and CellStyle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/static/cell.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncell_obj = Calc.get_cell_obj(\"A1\")\n\nCalc.set_val(value=\"Hello\", sheet=sheet, cell_obj=cell_obj)\nCalc.set_style_cell(sheet=sheet, cell_obj=cell_obj, styles=[style])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Shadow from Writer Document Style\nDESCRIPTION: This snippet shows how to retrieve the border shadow configuration from an existing style in a Writer document. It uses the from_style method to get the style object and verifies the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/bordes.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Shadow.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Setting Data Point Text Attributes in Python\nDESCRIPTION: This snippet uses the `style_text_attributes` method for individual data points of a chart's data series, allowing precise control over styling options such as category name and legend symbol.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\ndp = ds[2]\n\ndp.style_text_attributes(\n    show_category_name=True,\n    show_legend_symbol=True,\n    show_series_name=True,\n    auto_text_wrap=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Number Format to a Single Cell in Calc\nDESCRIPTION: This snippet demonstrates how to apply a currency number format to a single cell in a Calc spreadsheet using the style_numbers_numbers() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooo.dyn.i18n.number_format_index import NumberFormatIndexEnum\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        cell = sheet[\"A1\"]\n        cell.value = -123.0\n        cell.style_numbers_numbers(\n            num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2_RED,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Exporting Slide as Image\nDESCRIPTION: Main function that exports a slide as an image file. It connects to LibreOffice in headless mode, retrieves the specified slide, and saves it as an image using GraphicExportFilter with the specified format.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# Slide2Image.main() in slide_2_image.py\ndef main(self) -> None:\n    # connect headless. will not need to see slides\n    with Lo.Loader(Lo.ConnectPipe(headless=True)) as loader:\n        doc = Lo.open_doc(fnm=self._fnm, loader=loader)\n\n        if not Info.is_doc_type(obj=doc, doc_type=Lo.Service.IMPRESS):\n            Lo.print(\"-- Not a slides presentation\")\n            return\n\n        slide = Draw.get_slide(doc=doc, idx=self._idx)\n\n        names = ImagesLo.get_mime_types()\n        Lo.print(\"Known GraphicExportFilter mime types:\")\n        for name in names:\n            Lo.print(f\"  {name}\")\n\n        out_fnm = self._out_dir / f\"{self._fnm.stem}{self._idx}.{self._img_fmt}\"\n        Lo.print(f'Saving page {self._idx} to \"{out_fnm}\"')\n        mime = ImagesLo.change_to_mime(self._img_fmt)\n        Draw.save_page(page=slide, fnm=out_fnm, mime_type=mime)\n        Lo.close_doc(doc)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Column Formatting (Integer)\nDESCRIPTION: This code snippet adds a custom column formatter that formats the first column (index 0) as an integer, centered within a width of 9 characters. It excludes row indexes 0 and 9 from this formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfl.col_formats.append(FormatTableItem(format=(\".0f\", \"^9\"), idxs_inc=(0,), row_idxs_exc=(0, 9)))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Line Spacing Style from Document using Python\nDESCRIPTION: This snippet retrieves the line spacing style for a paragraph in a Writer document using the 'LineSpacing' class, validating that it corresponds to the expected standard.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/indent_spacing.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = LineSpacing.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with Calc Function - Python\nDESCRIPTION: This snippet illustrates calculating the average of a set of numbers using the Calc function 'AVERAGE', demonstrating how to pass multiple arguments to the function and output the average.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# in calc_functions.py\navg = float(doc.call_fun(\"AVERAGE\", 1, 2, 3, 4, 5))\nprint(f\"Average of the numbers is: {avg:.1f}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Border Padding in Writer Document\nDESCRIPTION: This snippet demonstrates how to set border padding for a page in a Writer document. It creates a Padding object with specific values for each side and applies it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/bordes.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npadding_style = Padding(\n    left=5, right=5, top=3, bottom=3, style_name=WriterStylePageKind.STANDARD\n)\npadding_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Source with Properties in Python\nDESCRIPTION: This code snippet demonstrates creating a data source (XDataSource) using the data provider.  It specifies properties such as the cell range, data row source (columns), whether the first cell is a label, and whether the chart has categories. The properties are used to format the data in the chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n        # part of Chart2.insert_chart()...\n        has_cats = cls.has_categories(diagram_name)\n\n        ps = Props.make_props(\n            CellRangeRepresentation=Calc.get_range_str(cells_range, sheet),\n            DataRowSource=ChartDataRowSource.COLUMNS,\n            FirstCellAsLabel=True,\n            HasCategories=has_cats,\n        )\n        ds = dp.createDataSource(ps) # XDataSource\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Background to Chart with Border in Python\nDESCRIPTION: Applies a green border and a green 30-degree hatch pattern to a chart. Uses the PresetHatchKind enum to select a predefined hatch pattern style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_hatch import PresetHatchKind\n# ... other code\n\n_ = chart_doc.style_border_line(color=StandardColor.GREEN_DARK3, width=0.7)\n_ = chart_doc.style_area_hatch_from_preset(PresetHatchKind.GREEN_30_DEGREES)\n```\n\n----------------------------------------\n\nTITLE: Setting the Style Protection in Calc using Python\nDESCRIPTION: This snippet illustrates how to define a CellProtection style with specific properties and apply it to a Calc document. It allows users to control whether formulas are hidden, if the cell is protected, and how the cell prints. Dependencies still include 'ooodev' and related modules.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/cell_protection.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle = CellProtection(\n    hide_all=False,\n    hide_formula=True,\n    protected=True,\n    hide_print=True,\n    style_name=StyleCellKind.DEFAULT,\n)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bar Event Callback with kwargs\nDESCRIPTION: Alternative implementation of event callback that retrieves the control source from kwargs dictionary. This pattern uses type casting to ensure proper type hinting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_progress_bar.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlProgressBar, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Wall Preset Gradient in Python\nDESCRIPTION: This snippet demonstrates how to apply a preset gradient to the background of a chart's wall using the `style_area_gradient_from_preset()` method and the `PresetGradientKind` enum. It accesses the chart's wall and sets the gradient to `DEEP_OCEAN`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\n# ... other code\nwall = chart_doc.first_diagram.wall\nwall.style_area_gradient_from_preset(\n    preset=PresetGradientKind.DEEP_OCEAN,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying paragraph area color to a style in Writer\nDESCRIPTION: This code snippet shows how to create a ParaStyleColor object with a specific color and style name, then apply it to the document. It modifies the Standard paragraph style to have a light green background color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_color.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npara_area_color_style = ParaStyleColor(\n    color=StandardColor.GREEN_LIGHT2, style_name=StyleParaKind.STANDARD\n)\npara_area_color_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Setting Text Font in Calc Cells with Python\nDESCRIPTION: This code snippet shows how to set text font properties for individual cells in a Calc sheet. It applies bold and dark green color to cell A1, and adds underline to cell B1.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\na1 = sheet[\"A1\"]\na1.value = \"Hello\"\na1.style_font_general(\n    b=True, color=CommonColor.DARK_GREEN\n)\n\nb1 = a1.get_cell_right()\nb1.value = \"World\"\nb1.style_font_general(\n    b=True, u=True, color=CommonColor.DARK_GREEN\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Gradient to Shape\nDESCRIPTION: Shows how to apply a preset gradient to a shape using the ShapeGradient class and PresetGradientKind enumeration. Demonstrates the core functionality of gradient application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/gradient.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Gradient as ShapeGradient\nfrom ooodev.format.draw.direct.area import PresetGradientKind\n# ... other code\n\nrec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\nstyle = ShapeGradient.from_preset(preset=PresetGradientKind.DEEP_OCEAN)\nstyle.apply(rec)\n```\n\n----------------------------------------\n\nTITLE: Applying Number Formatting to Y-Axis in Python\nDESCRIPTION: This code snippet shows how to create a Numbers object with currency formatting and apply it to the Y-axis of a chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/numbers.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.axis.numbers import Numbers, NumberFormatIndexEnum\n# .. other code\n\nnum_style = Numbers(\n    chart_doc, source_format=False, num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2\n)\nChart2.style_y_axis(chart_doc=chart_doc, styles=[num_style])\n```\n\n----------------------------------------\n\nTITLE: Applying Floor Hatch to Chart\nDESCRIPTION: Creates and applies a blue 45-degree hatch pattern to a chart floor using the WallHatch class. Demonstrates floor-specific hatch styling using preset patterns.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfloor_hatch = WallHatch.from_preset(chart_doc, PresetHatchKind.BLUE_45_DEGREES)\nChart2.style_floor(chart_doc=chart_doc, styles=[floor_hatch])\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document and Applying Hatch Style\nDESCRIPTION: Creates a Draw document, adds a rectangle shape, and applies a preset hatch style. Uses the ooodev library to handle LibreOffice automation and style modification.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.modify.area import Hatch, PresetHatchKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n        style_modify = Hatch.from_preset(\n            preset=PresetHatchKind.GREEN_30_DEGREES,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(style_modify)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Line Chart with Symbols in LibreOffice Calc\nDESCRIPTION: Creates a line chart with data points and symbols from humidity data. Sets up chart title and axis labels without displaying data point values to reduce clutter.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef _line_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> None:\n    # draw a line chart with data points, no legend;\n    # uses \"Humidity Levels in NY\" table\n    range_addr = Calc.get_address(sheet=sheet, range_name=\"A14:B21\")\n    chart_doc = Chart2.insert_chart(\n        sheet=sheet,\n        cells_range=range_addr,\n        cell_name=\"D13\",\n        width=16,\n        height=9,\n        diagram_name=ChartTypes.Line.TEMPLATE_SYMBOL.LINE_SYMBOL,\n    )\n    Calc.goto_cell(cell_name=\"A1\", doc=doc)\n\n    Chart2.set_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A13\")\n    )\n    Chart2.set_x_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A14\")\n    )\n    Chart2.set_y_axis_title(\n        chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"B14\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Paper Format from Preset in Calc\nDESCRIPTION: This code snippet demonstrates how to set the paper format of a Calc document using a predefined preset from the `PaperFormatKind` enum. Specifically, it sets the format to A3 and applies it to the document's default page style using the `PaperFormat` class from the `ooodev` library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.page import PaperFormat, PaperFormatKind, CalcStylePageKind\n        # ... other code\n\n        style = PaperFormat.from_preset(\n            preset=PaperFormatKind.A3, landscape=False, style_name=CalcStylePageKind.DEFAULT\n        )\n        style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Character Border Sides from a Writer Style\nDESCRIPTION: Code snippet showing how to retrieve the border sides configuration from an existing character style. The from_style static method is used to create a Sides object from a style name in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Sides.from_style(doc=doc, style_name=StyleCharKind.EXAMPLE)\nassert style_obj.prop_style_name == str(StyleCharKind.EXAMPLE)\n```\n\n----------------------------------------\n\nTITLE: Setting Text Orientation for Range in Python\nDESCRIPTION: Example of applying vertical text orientation to a range of cells. Stacks text vertically in the selected range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCalc.set_val(value=\"Hello\", sheet=sheet, cell_name=\"A1\")\nCalc.set_val(value=\"World\", sheet=sheet, cell_name=\"B1\")\nrng = Calc.get_cell_range(sheet=sheet, range_name=\"A1:B1\")\n\nstyle = TextOrientation(vert_stack=True)\nstyle.apply(rng)\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for documentation generation\nDESCRIPTION: This code snippet uses the automodule directive to automatically generate documentation for the `ooodev.adapter.awt.tree.tree_control_model_partial` module. It specifies options to include members, undocumented members, and show inheritance information. The generated documentation will provide details about the module's classes, functions, and attributes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.tree.tree_control_model_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n.. automodule:: ooodev.adapter.awt.tree.tree_control_model_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Properties from Writer Style using FontOnly\nDESCRIPTION: This snippet shows how to retrieve font properties from an existing character style in a Writer document. The FontOnly.from_style method is used to create a FontOnly object from the 'Source Text' style, allowing access to its properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = FontOnly.from_style(doc=doc, style_name=StyleCharKind.SOURCE_TEXT)\nassert style_obj.prop_style_name == str(StyleCharKind.SOURCE_TEXT)\n```\n\n----------------------------------------\n\nTITLE: Getting Axis Title - Python\nDESCRIPTION: This method retrieves the axis title for a specified axis, handling possible exceptions during the retrieval process. If the title cannot be retrieved, an appropriate error is raised.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@classmethod\ndef get_axis_title(cls, chart_doc: XChartDocument, axis_val: AxisKind, idx: int) -> XTitle:\n    try:\n        axis = cls.get_axis(chart_doc=chart_doc, axis_val=axis_val, idx=idx)\n        titled_axis = Lo.qi(XTitled, axis, True)\n        result = titled_axis.getTitleObject()\n        if result is None:\n            raise UnKnownError(\"None Value: getTitleObject() return a value of None\")\n        return result\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error getting axis title\") from e\n```\n\n----------------------------------------\n\nTITLE: Formatting Shape Text with Character Styles in LibreOffice Draw\nDESCRIPTION: Creates a Draw document with a rectangle shape and applies various text formatting styles including bold, italic, colors, highlighting, and spacing. Uses the shape text cursor to append formatted paragraphs. Demonstrates direct character formatting capabilities similar to Writer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/character/character.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.direct.position_size.position_size import Position\nfrom ooodev.format.writer.direct.char.font import Font, FontEffects\nfrom ooodev.format.writer.direct.para.indent_space import Indent, Spacing\nfrom ooodev.format.writer.direct.char.highlight import Highlight\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 80\n        x = 0\n        y = 0\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        pos = Position(0, 0)\n        pos.apply(rect.component)\n        cursor = rect.get_shape_text_cursor()\n        cursor.append_para(\n            \"Hello World!\",\n            [\n                Font(b=True, color=StandardColor.GREEN),\n                FontEffects(color=StandardColor.RED),\n                Highlight(color=StandardColor.YELLOW),\n                Indent(first=3.5),\n                Spacing(below=2.5),\n            ],\n        )\n        cursor.append_para(\n            \"Wonderful Day!\",\n            [\n                Font(b=False, i=True, color=StandardColor.BLUE_DARK2),\n                Highlight(color=StandardColor.GREEN_LIGHT1),\n                Spacing(below=2.5),\n            ],\n        )\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Generate Polygon Points Method\nDESCRIPTION: Static method that generates points for a regular polygon based on center coordinates, radius and number of sides.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef gen_polygon_points(\n    cls,\n    x: int | UnitT,\n    y: int | UnitT,\n    radius: int | UnitT,\n    sides: PolySides | int\n) -> Tuple[Point, ...]:\n\n    x = cls._get_mm100_obj_from_mm(x).value\n    y = cls._get_mm100_obj_from_mm(y).value\n    radius = cls._get_mm100_obj_from_mm(radius).value\n    sides = PolySides(int(sides))\n    pts: List[Point] = []\n    angle_step = math.pi / sides.value\n    for i in range(sides.value):\n        pt = Point(\n            round((x + radius * math.cos(i * 2 * angle_step))),\n            round((y + radius * math.sin(i * 2 * angle_step))),\n        )\n        pts.append(pt)\n    return tuple(pts)\n```\n\n----------------------------------------\n\nTITLE: Retrieving background color from a cell style in LibreOffice Calc using Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the background color style information from an existing document and style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/background.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = StyleBgColor.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\nassert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Table Borders via style_direct in Python\nDESCRIPTION: This snippet illustrates how to use the `style_direct` property with the `style_borders` method to set specific borders (left, right, top, bottom) of a table. It defines a red side for the left and right borders and a default side for the top and bottom borders.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n\n        default_side = Side()\n        red_side = Side(\n            line=BorderLineKind.SOLID, color=StandardColor.RED_DARK1, width=LineSize.MEDIUM\n        )\n        table.style_direct.style_borders(\n            left=red_side, right=red_side, top=default_side, bottom=default_side\n        )\n```\n\n----------------------------------------\n\nTITLE: Getting Range Background Color\nDESCRIPTION: This snippet demonstrates how to retrieve the background color of a range of cells using the style_area_color_get method. It returns a style object containing the color property for the entire range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/background.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nf_style = cell_rng.style_area_color_get()\nassert f_style.prop_color == StandardColor.BLUE_LIGHT2\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with Control Source\nDESCRIPTION: This snippet demonstrates how to define an event callback function that includes a reference to the source List Box control. It showcases the use of type hints for clarity on expected parameters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_list_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlListBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Orientation from a Calc style\nDESCRIPTION: This snippet demonstrates how to retrieve the current text orientation settings from a cell style in LibreOffice Calc. It uses the from_style method to get orientation properties from the DEFAULT style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/alignment.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nstyle_obj = TextOrientation.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\nassert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Setting Preset Chart Area Pattern in Python\nDESCRIPTION: This snippet illustrates setting a preset pattern as the chart area background using `style_area_pattern_from_preset`. A pattern is chosen using the `PresetPatternKind` enum; in this instance, `PresetPatternKind.ZIG_ZAG` is selected.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_pattern import PresetPatternKind\n# ... other code\n\n_ = chart_doc.style_border_line(color=StandardColor.BLUE_LIGHT2, width=0.7)\n_ = chart_doc.style_area_pattern_from_preset(PresetPatternKind.ZIG_ZAG)\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Transparency to Chart Floor in Python\nDESCRIPTION: Code snippet that demonstrates how to create a gradient transparency effect for a chart floor. It uses the WallGradientTransparency class to create a transparency that transitions from 0% to 100% at a 120-degree angle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/transparency.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfloor_grad_transparent = WallGradientTransparency(\n    chart_doc=chart_doc, angle=Angle(120), grad_intensity=IntensityRange(0, 100)\n)\nChart2.style_floor(chart_doc=chart_doc, styles=[floor_grad_transparent])\n```\n\n----------------------------------------\n\nTITLE: Adding Slide Number to Master Page\nDESCRIPTION: Adds a slide number shape to a master page with specific positioning and dimensions\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef add_slide_number(cls, slide: XDrawPage) -> XShape:\n    try:\n        sz = cls.get_slide_size(slide)\n        width = 60\n        height = 15\n        return cls.add_pres_shape(\n            slide=slide,\n            shape_type=PresentationKind.SLIDE_NUMBER_SHAPE,\n            x=sz.Width - width - 12,\n            y=sz.Height - height - 4,\n            width=width,\n            height=height,\n        )\n    except ShapeError:\n        raise\n    except Exception as e:\n        raise ShapeError(\"Unable to add slide number\") from e\n```\n\n----------------------------------------\n\nTITLE: Style Data Point Gradient Transparency\nDESCRIPTION: This Python code snippet demonstrates how to set gradient transparency for a specific data point in a chart's data series. It accesses the first data series of a chart document, gets the last data point, and sets its area transparency to a gradient with a specified angle and intensity range using the `style_area_transparency_gradient()` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/transparency.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.intensity_range import IntensityRange\n\n# ... other code\nds = chart_doc.get_data_series()[0]\ndp = ds[-1]\ndp.style_area_transparency_gradient(\n    angle=30,\n    grad_intensity=IntensityRange(0, 100),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Border Sides for Page Style in Calc\nDESCRIPTION: Demonstrates how to modify the border sides of a page in Calc. This code creates a double red line with medium width and applies it to all sides of the default page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/bordes.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nside = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\nsides_style = Sides(all=side, style_name=CalcStylePageKind.DEFAULT)\nsides_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Grid Line Properties in Python\nDESCRIPTION: Complete setup example showing how to initialize and configure chart grid line properties. Demonstrates opening a document, accessing a chart, setting background styles and grid line properties. Uses the ooodev library to interface with LibreOffice/OpenOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/grid/line_properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.general.area import Color as ChartColor\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.grid import BorderLineKind\nfrom ooodev.format.chart2.direct.grid import LineProperties as GridLineProperties\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2, AxisKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_DARK2, width=0.7)\n        chart_color = ChartColor(color=StandardColor.DEFAULT_BLUE)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_color, chart_bdr_line])\n\n        grid_style = GridLineProperties(\n            style=BorderLineKind.CONTINUOUS, color=StandardColor.RED, width=0.5\n        )\n        Chart2.style_grid(chart_doc=chart_doc, axis_val=AxisKind.Y, styles=[grid_style])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events and Protecting Rows - Python\nDESCRIPTION: This snippet illustrates the usage of the Events class to handle row deletion events in a spreadsheet. It shows how to protect specific rows from being deleted by using event handlers during the open_remove_save process. The protected_rows tuple maintains indices of rows that should not be removed, while the protect_row function cancels the deletion of those rows.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/events/lo_events/events.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.calc import Calc\nfrom ooodev.events.lo_events import Events\nfrom ooodev.events.args.calc.sheet_cancel_args import SheetCancelArgs\nfrom ooodev.events.calc_named_event import CalcNamedEvent\n\nprotected_rows = (1, 3, 10, 15, 18)\n\ndef protect_row(source:Any, args:SheetCancelArgs) -> None:\n    nonlocal protected_rows\n    if args.index in protected_rows:\n        args.cancel = True\n\ndef open_remove_save(fnm:str, *indexes:int) -> None:\n    if len(indexes) == 0:\n        return\n\n    local_events = Events()\n    events.on(CalcNamedEvent.SHEET_ROW_DELETING, protect_row)\n    idxs = list(indexes)\n    idxs.sort()\n    idxs.reverse() # must remove from hightest to lowest.\n\n    with Lo.Loader(Lo.ConnectSocket()) as loader:\n        doc = Calc.open_doc(fnm=fnm, loader=loader)\n        sheet = Calc.get_sheet(doc=doc, index=0)\n        for idx in idxs:\n            Calc.delete_row(sheet=sheet, idx=idx)\n\n        Lo.save(doc)\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Border Styles to Nested Cell Ranges in Calc\nDESCRIPTION: Demonstrates applying different border styles to nested cell ranges. First applies blue-violet borders with red diagonals to a larger range, then applies the same to a nested range, and finally adds horizontal and vertical styled borders to the nested range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nrng_obj = Calc.get_range_obj(\"B2:F6\")\ncr = Calc.get_cell_range(sheet, rng_obj)\nborders = Borders(\n    border_side=Side(color=CommonColor.BLUE_VIOLET, width=1.3),\n    diagonal_up=Side(color=CommonColor.RED),\n    diagonal_down=Side(color=CommonColor.RED),\n)\nStyler.apply(cr, borders)\n\nrng_obj = Calc.get_range_obj(\"C3:E5\")\ncr = Calc.get_cell_range(sheet, rng_obj)\n\nStyler.apply(cr, borders)\n\nborders = Borders(\n    border_side=Side(color=CommonColor.BLUE),\n    horizontal=Side(line=BorderLineKind.DASH_DOT_DOT, color=CommonColor.GREEN),\n    vertical=Side(line=BorderLineKind.DOUBLE, color=CommonColor.RED),\n)\nStyler.apply(cr, borders)\n```\n\n----------------------------------------\n\nTITLE: Applying Yellow Highlight to Example Character Style in Writer\nDESCRIPTION: Demonstrates how to apply a yellow highlight to the Example character style in a Writer document. The code creates a new document, applies the highlight, and then verifies the style was correctly applied by retrieving it from the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/highlight.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.char.highlight import Highlight, StyleCharKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        font_style = Highlight(color=StandardColor.YELLOW_LIGHT2, style_name=StyleCharKind.EXAMPLE)\n        font_style.apply(doc)\n\n        style_obj = Highlight.from_style(doc=doc, style_name=StyleCharKind.EXAMPLE)\n        assert style_obj.prop_style_name == str(StyleCharKind.EXAMPLE)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties with Styles in Writer\nDESCRIPTION: This Python code snippet shows how to set table properties using styles in a LibreOffice Writer document.  It creates a `TableProperties` object, sets the desired properties, and then applies this style to a table during creation using the `styles` parameter of the `add_table` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprops_style = TableProperties(\n            name=\"My_Table\", relative=False, align=TableAlignKind.AUTO\n        )\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n            styles=[props_style],\n            )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shape with Gradient Transparency - Python\nDESCRIPTION: This snippet sets up a shape in a document with gradient transparency using the OOoDev library. It initializes the document, creates a rectangle shape, applies a linear gradient style, and displays the shape on the drawing page.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/transparency/gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\\nimport uno\\nfrom ooodev.format import Styler\\nfrom ooodev.format.draw.direct.area import Color as ShapeColor\\nfrom ooodev.format.draw.direct.transparency import Gradient as ShapeGradient\\nfrom ooodev.format.draw.direct.transparency import GradientStyle, IntensityRange\\nfrom ooodev.office.draw import Draw\\nfrom ooodev.utils.color import StandardColor\\nfrom ooodev.gui import GUI\\nfrom ooodev.loader.lo import Lo\\n\\ndef main() -> int:\\n    with Lo.Loader(Lo.ConnectPipe()):\\n        doc = Write.create_doc()\\n        GUI.set_visible(doc=doc)\\n        Lo.delay(300)\\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\\n\\n        page = Write.get_draw_page(doc)\\n        rect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\\n        color_style = ShapeColor(StandardColor.RED)\\n        style = ShapeGradient(\\n            style=GradientStyle.LINEAR, angle=30, grad_intensity=IntensityRange(0, 100)\\n        )\\n        Styler.apply(rect, color_style, style)\\n        page.add(rect)\\n\\n        f_style = ShapeGradient.from_obj(rect)\\n        assert f_style\\n\\n        Lo.delay(1_000)\\n\\n        Lo.close_doc(doc)\\n\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Shadow Attributes Using Python\nDESCRIPTION: Shows how to retrieve shadow attributes from a shape in a document using Python. Utilizes the ShapeShadow.from_obj() method to obtain configuration details of a shape's shadow. Inputs require a reference to the shape object, with outputs providing the shadow's attributes. The snippet assumes the existence of a shape with an applied shadow.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/shadow.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.shadow import Shadow as ShapeShadow\n# ... other code\n\n# get the shadow from the shape\nf_style = ShapeShadow.from_obj(rect)\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example with Cast\nDESCRIPTION: This code snippet demonstrates an alternative way to define a callback function for events, where the control is retrieved from kwargs and cast to the appropriate type. This approach allows accessing the FormCtlNumericField instance when it is not directly passed as an argument.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_numeric_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlNumericField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Applying Floor Pattern to Chart\nDESCRIPTION: Creates and applies a 20% pattern preset to a chart floor using the WallPattern class. Requires a chart document instance and uses the PresetPatternKind enum for pattern selection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfloor_pattern = WallPattern.from_preset(chart_doc, PresetPatternKind.PERCENT_20)\nChart2.style_floor(chart_doc=chart_doc, styles=[floor_pattern])\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteCellStyle Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the WriteCellStyle class. It includes all members, undocumented members, inherited members, and shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/write_cell_style.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.style.WriteCellStyle\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Data Point Properties in a Chart Series\nDESCRIPTION: This method retrieves property sets for all data points in a specified data series. It iterates through each data point in the series, collecting their property references to allow for individual customization of each point's appearance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@classmethod\ndef get_data_points_props(cls, chart_doc: XChartDocument, idx: int) -> List[XPropertySet]:\n    data_series_arr = cls.get_data_series(chart_doc=chart_doc)\n    if idx < 0 or idx >= len(data_series_arr):\n        raise IndexError(f\"Index value of {idx} is out of of range\")\n\n    props_lst: List[XPropertySet] = []\n    i = 0\n    while True:\n        try:\n            props = data_series_arr[idx].getDataPointByIndex(i)\n            if props is not None:\n                props_lst.append(props)\n            i += 1\n        except Exception:\n            props = None\n\n        if props is None:\n            break\n    if len(props_lst) > 0:\n        Lo.print(f\"No Series at index {idx}\")\n    return props_lst\n```\n\n----------------------------------------\n\nTITLE: Subtracting ColObj from RangeObj in Python\nDESCRIPTION: Demonstrates how to subtract a ColObj instance from a RangeObj instance to reduce the column span of the range. The example creates a range F10:H15 and subtracts 2 columns, resulting in F10:F15 with just 1 column.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>> from ooodev.utils.data_type.col_obj import ColObj\n>>>\n>>> rng1 = RangeObj(col_start=\"F\", col_end=\"H\", row_start=10, row_end=15, sheet_idx=0) \n>>> str(rng1)\n'F10:H15'\n>>> rng1.col_count \n3\n>>> rng2 = rng1 - ColObj.from_int(2)\n>>> str(rng2)\n'F10:F15'\n>>> repr(rng2)\n\"RangeObj(col_start='F', col_end='F', row_start=10, row_end=15, sheet_idx=0)\"\n>>> rng2.col_count\n1\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart2 styling environment in Python\nDESCRIPTION: Basic setup for Chart2 styling examples. Opens a Calc document, gets a chart document from it, and applies basic styling to prepare for data series styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.series.data_series.area import Color as DataSeriesColor\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_LIGHT3, width=0.7)\n        chart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.TEAL_BLUE)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        data_series_color = DataSeriesColor(StandardColor.TEAL_DARK2)\n        Chart2.style_data_series(chart_doc=chart_doc, styles=[data_series_color])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Chart Title\nDESCRIPTION: This code snippet shows how to create and apply font effects specifically to a chart title. It configures a red text color, blue underline, and shadow effect.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.font import FontEffects as TitleFontEffects\nfrom ooodev.format.chart2.direct.title.font import FontUnderlineEnum, FontLine\n# ... other code\n\ntitle_font_effect = TitleFontEffects(\n    color=StandardColor.RED,\n    underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n    shadowed=True,\n)\nChart2.style_title(chart_doc=chart_doc, styles=[title_font_effect])\n```\n\n----------------------------------------\n\nTITLE: Retrieve Page by Index in Python\nDESCRIPTION: Shows how to retrieve a page from a draw document using an index. It uses the [] operator to access the desired page, exemplifying Python's indexing capabilities.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/generic_draw_pages.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc(loader))\n>>> doc.draw_pages[0]\n<ooodev.draw.GenericDrawPage object at 0x7f7f0c0b2b90>\n```\n\n----------------------------------------\n\nTITLE: Applying Paragraph Indent Style using Python\nDESCRIPTION: This code snippet shows how to create an instance of the 'Indent' class and apply an indent style to a Writer document. It involves specifying before, after, and first indent values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/indent_spacing.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npara_indent_style = Indent(before=22.0, after=20.0, first=8.0, style_name=StyleParaKind.STANDARD)\\npara_indent_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Border Padding From Style in Python\nDESCRIPTION: The snippet demonstrates retrieving padding information from a Calc document's style using ooodev. It involves calling `Padding.from_style`, highlighting the process to obtain padding-related attributes. The function requires `doc` and `style_name` as inputs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/bordes.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Padding.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Defining an Alternate Event Callback Function in Python\nDESCRIPTION: This snippet provides an alternative definition for an event callback function that does not explicitly include the control source as a parameter. Instead, the control source can be extracted from the kwargs dictionary, demonstrating flexibility in handling event parameters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_pattern_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n        # can get control from kwargs\n        ctl = cast(FormCtlPatternField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback Function for Button Control\nDESCRIPTION: This code snippet demonstrates how to define an event callback function for handling events associated with button controls. It includes the usage of a keyword argument 'control_src' to access the button instance. The snippet shows two potential formats for the callback function, highlighting flexibility in handling events.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_button.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlButton, *args, **kwargs\n) -> None:\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlButton, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for TriStateKind Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the TriStateKind class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/tri_state_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.tri_state_kind.TriStateKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Removing Local Shortcut by Command (Temporary) in Python\nDESCRIPTION: Removes a local document shortcut by its command URL without persisting the change. The shortcut will be removed from the current session but will return after restarting LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\n\n# ...\ndoc = CalcDoc.from_current_doc()\ndoc.shortcuts.remove_by_command(\".custom:alone.here\", False)\n```\n\n----------------------------------------\n\nTITLE: Adding Shape Shadow in Document with OOXML Dev Tools\nDESCRIPTION: This snippet demonstrates adding a shadow to a shape using the ShapeShadow class in Python. It requires importing the necessary classes from the OOXML development toolkit. The code applies shadow properties to a rectangle and adds it to a page. Outputs include a styled shape within the document. It assumes a pre-existing document context, focusing on styling operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/shadow.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.shadow import Shadow as ShapeShadow\nfrom ooodev.format.writer.direct.shape.shadow import ShadowLocationKind\n# ... other code\n\npage = Write.get_draw_page(doc)\nrect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\nstyle = ShapeShadow(\n    use_shadow=True,\n    location=ShadowLocationKind.BOTTOM_RIGHT,\n    blur=3,\n    color=StandardColor.GRAY_LIGHT2\n)\nstyle.apply(rect)\npage.add(rect)\n```\n\n----------------------------------------\n\nTITLE: Finding Chart Type in Python\nDESCRIPTION: This snippet demonstrates accessing a specific chart type using Chart2's `find_chart_type` method with the chart document and chart type as inputs. It returns the identified chart type instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# in Chart2View._happy_stock_chart() of chart_2_views.py\ncandle_ct = Chart2.find_chart_type(chart_doc=chart_doc, chart_type=ct)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Area Image in Writer\nDESCRIPTION: This snippet shows how to set an Area image for a Page style in Writer using the Img class and a preset image from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.area import Img as PageAreaImg, PresetImageKind, WriterStylePageKind\n# ... other code\n\nimg_style = PageAreaImg.from_preset(\n    preset=PresetImageKind.COLOR_STRIPES, style_name=WriterStylePageKind.STANDARD\n)\nimg_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Styling Chart Subtitle Font\nDESCRIPTION: This code demonstrates how to access the chart subtitle and apply font styling using the `style_font_general()` method. The snippet configures the subtitle font to be bold, italic, underlined, a specific color, and adds a shadow.  Assumes that the chart document (`chart_doc`) and its first diagram have already been retrieved.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/font.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\nsub_title = chart_doc.first_diagram.get_title()\nif sub_title is None:\n    raise ValueError(\"Title not found\")\n\nsub_title.style_font_general(\n    b=True,\n    i=True,\n    u=True,\n    color=StandardColor.PURPLE_DARK2,\n    shadowed=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up LibreOffice Draw document and shape manipulation in Python\nDESCRIPTION: This code snippet demonstrates how to create a Draw document, add a rectangle shape, set its position, and then retrieve the position. It uses the ooodev library to interact with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/position.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.position_size.position_size import Position\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 36\n        height = 36\n        x = round(width / 2)\n        y = round(height / 2)\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        pos = Position(pos_x=38, pos_y=18)\n        pos.apply(rect.component)\n\n        pos2 = Position.from_obj(rect.component)\n        assert pos2 is not None\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting List Style from Style in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the list style from a LibreOffice Writer document using the `ListStyle.from_style` method. The code then asserts that the retrieved style name matches the expected style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/outline_list.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = ListStyle.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties with Left Alignment and Width via Styles\nDESCRIPTION: This Python code illustrates setting table properties (alignment, above/below spacing, width) using styles during table creation in LibreOffice Writer through the `ooodev` library. The alignment is set to be from the left.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprops_style = TableProperties(\n            name=\"My_Table\",\n            relative=False,\n            align=TableAlignKind.FROM_LEFT,\n            above=UnitMM(2.0),\n            below=UnitMM(1.8),\n            width=UnitMM(60.0),\n        )\n\n        table = cursor.add_table(\n            cursor=cursor,\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n            styles=[props_style],\n            )\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Image to Legend in Python\nDESCRIPTION: Shows how to set a background image on a chart legend using the `ooodev` library. Uses `PresetImageKind` to select the image preset. The snippet ensures the legend’s transparency is zeroed out for optimal image display.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_image import PresetImageKind\n# ... other code\n\n_ = legend.style_area_transparency_transparency(0)\n_ = legend.style_area_image_from_preset(\n    preset=PresetImageKind.PARCHMENT_PAPER,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch to Chart Subtitle in Python\nDESCRIPTION: This snippet demonstrates how to apply a hatch style to a chart subtitle. It uses the same hatch style as the title and applies it to the subtitle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nChart2.style_subtitle(chart_doc=chart_doc, styles=[title_hatch])\n```\n\n----------------------------------------\n\nTITLE: Setting Superscript Text in Writer\nDESCRIPTION: Example showing how to apply superscript formatting to a character in text using the FontPosition class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_position.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\nfp_style = FontPosition().superscript\ncursor = Write.get_cursor(doc)\nWrite.append(cursor, \"hello\")\nWrite.style(pos=0, length=1, styles=[fp_style], cursor=cursor)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Commands using GlobalEditDispatch\nDESCRIPTION: This code shows how to dispatch copy and paste commands using the `GlobalEditDispatch` class from the `ooodev` library. It relies on the `Lo.dispatch_cmd` function to send commands to LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from ooodev.utils.dispatch.global_edit_dispatch import GlobalEditDispatch\n        from ooodev.loader.lo import Lo\n\n        Lo.dispatch_cmd(cmd=GlobalEditDispatch.COPY)\n        # other processing ...\n        Lo.dispatch_cmd(cmd=GlobalEditDispatch.PASTE)\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing LibreOffice Language with Info.language Property\nDESCRIPTION: A static read-only property that retrieves the current language of the LibreOffice instance. Returns the first two characters of the language code in lowercase format.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/info.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nInfo.language\n```\n\n----------------------------------------\n\nTITLE: Getting Style Properties - Python\nDESCRIPTION: The `get_style_props()` class method retrieves properties of the specified style (property set) belonging to a style family in the document. It requires the document, family style name, and property set name as parameters, returning the corresponding XPropertySet object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_style_props(\n    cls, doc: object, family_style_name: str, prop_set_nm: str\n) -> XPropertySet:\n    style_container = cls.get_style_container(doc, family_style_name)\n    name_props = Lo.qi(XPropertySet, style_container.getByName(prop_set_nm), True)\n    return name_props\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Gradient Background to Chart in Python\nDESCRIPTION: Demonstrates how to apply a preset gradient background to a chart using the ChartGradient class and PresetGradientKind enum. The example uses the NEON_LIGHT preset.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\n\n# ... other code\nchart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=0.7)\nchart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.NEON_LIGHT)\nChart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n```\n\n----------------------------------------\n\nTITLE: Formatting Secondary Y-Axis Numbers in Python\nDESCRIPTION: This snippet demonstrates how to format the numbers on the Secondary Y-axis of a chart in LibreOffice Calc using the python_ooo_dev_tools library. It checks if a secondary Y-axis exists, and if so, sets its number format to currency with two decimal places.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/numbers.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\ny2_axis = chart_doc.axis2_y\nif y2_axis is not None:\n    _ = y2_axis.style_numbers_numbers(\n        source_format=False,\n        num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2,\n    )\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Text for Chart Data Point Label in Python\nDESCRIPTION: This snippet shows how to apply text rotation to a specific data point label in a chart series. It uses the same Orientation settings as the previous example but applies it to a single point.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=2, styles=[rotation])\n```\n\n----------------------------------------\n\nTITLE: Setting Text Columns Properties\nDESCRIPTION: Demonstrates how to set text columns properties for a shape, including column count and spacing. Also shows how to apply text anchor and alignment settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text_columns/text_columns.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n# ... other code\nanchor = TextAnchor(anchor_point=ShapeBasePointKind.CENTER, full_width=True)\nalign = Alignment(align=ParagraphAdjust.CENTER)\ntxt_cols = TextColumns(col_count=2, spacing=0.5)\nStyler.apply(rect.component, anchor, align, txt_cols)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart2 Legend Gradient Transparency\nDESCRIPTION: This snippet demonstrates how to set a gradient transparency for a Chart2 legend using the LegendGradient class. It also requires a background color to be visible.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.area import Color as LegendAreaColor\nfrom ooodev.format.chart2.direct.legend.transparency import (\n    Gradient as LegendGradient,\n    IntensityRange,\n)\n# ... other code\n\nlegend_color_style = LegendAreaColor(color=StandardColor.GREEN_LIGHT2)\nlegend_transparency_gradient = LegendGradient(\n    chart_doc, angle=90, grad_intensity=IntensityRange(0, 100)\n)\nChart2.style_legend(\n    chart_doc=chart_doc, styles=[legend_transparency_gradient, legend_color_style]\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Menus in Python OOO Dev Tools\nDESCRIPTION: Demonstrates how to access nested menus using chained indexing, specifically for the 'Insert -> Shapes -> Basic Shapes' menu path.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> itm = (\n>>> \tdoc.menu[\".uno:InsertMenu\"]\n>>> \t.items[\".uno:ShapesMenu\"]\n>>> \t.sub_menu.items[\".uno:BasicShapes\"]\n>>> )\n>>> repl(itm)\n'<MenuItem(command=\".uno:BasicShapes\", kind=MenuItemKind.ITEM)>'\n```\n\n----------------------------------------\n\nTITLE: Applying Font Formatting to Y-Axis\nDESCRIPTION: Demonstrates how to apply specific font formatting to the Y-axis of a chart using the AxisFontOnly class. Sets font name, size, and style properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.axis.font import FontOnly as AxisFontOnly\n# ... other code\n\naxis_font = AxisFontOnly(name=\"Lucida Calligraphy\", size=14, font_style=\"italic\")\nChart2.style_y_axis(chart_doc=chart_doc, styles=[axis_font])\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Area Color in Python\nDESCRIPTION: This code snippet shows how to set the background color of a chart using the `style_area_color` method from the `ooodev` library.  It sets the chart area color to `StandardColor.GREEN_LIGHT2`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\n_ = chart_doc.style_area_color(StandardColor.GREEN_LIGHT2)\n_ = chart_doc.style_border_line(color=StandardColor.GREEN_DARK3, width=0.7)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Draw Pages in Calc with Python\nDESCRIPTION: Iterate through each draw page in a `SpreadsheetDrawPages` collection utilizing a `for` loop, displayed by `print`. Requires a `CalcDoc` instance with a loaded document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/spreadsheet_draw_pages.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> for draw_page in doc.draw_pages:\n...     print(draw_page.name)\n```\n\n----------------------------------------\n\nTITLE: Getting Gradient Style from Writer Document\nDESCRIPTION: This code demonstrates how to retrieve an existing gradient style from a Writer document. It calls the `Gradient.from_style` method to get the style object, then asserts that the retrieved style name matches the expected paragraph style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/transparency.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Gradient.from_style(doc=doc.component, style_name=para_kind)\nassert style_obj.prop_style_name == str(para_kind)\n```\n\n----------------------------------------\n\nTITLE: Setting up Range Protection Example in LibreOffice Calc with Python\nDESCRIPTION: Complete example demonstrating how to apply cell protection to a range of cells. The script creates a document, populates a range with values, and applies protection settings to all cells in the range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/cell_protection.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(100)\n\n        rng = sheet.rng(\"A1:B1\")\n        sheet.set_array(\n            values=[[\"Hello\", \"World\"]], range_obj=rng\n        )\n\n        cell_rng = sheet.get_range(range_obj=rng)\n        cell_rng.style_protection(\n            hide_all=False,\n            hide_formula=True,\n            protected=True,\n            hide_print=True,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Border Styling in Python\nDESCRIPTION: Complete example demonstrating chart document border and gradient styling, including opening a spreadsheet, accessing chart elements, and applying border properties\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.PURPLE_DARK1,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.BLUE_DARK1,\n                StandardColor.PURPLE_LIGHT2,\n            ),\n        )\n\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_border_line(\n            color=StandardColor.MAGENTA_DARK1,\n            width=0.75,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Text Alignment to Calc cells\nDESCRIPTION: This snippet demonstrates how to apply horizontal and vertical text alignment to cells in LibreOffice Calc using the TextAlign class. It centers text horizontally and positions it in the middle vertically.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/alignment.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nstyle = TextAlign(\n    hori_align=HoriAlignKind.CENTER,\n    vert_align=VertAlignKind.MIDDLE,\n    style_name=StyleCellKind.DEFAULT,\n)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Settings from Cell Style\nDESCRIPTION: Demonstrates how to retrieve border settings from an existing cell style using the from_style static method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Borders.from_style(doc, style_name=StyleCellKind.DEFAULT)\nassert style_obj is not None\n```\n\n----------------------------------------\n\nTITLE: Apply Pattern to Style\nDESCRIPTION: This code applies a preset pattern (SHINGLE) to the STANDARD paragraph style using the `ParaStylePattern` class.  It shows how to use the `from_preset` method to create a pattern style and then apply it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_pattern.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"para_area_pattern_style = ParaStylePattern.from_preset(\n    preset=PresetPatternKind.SHINGLE, style_name=StyleParaKind.STANDARD\n)\npara_area_img_style.apply(doc)\"\n```\n\n----------------------------------------\n\nTITLE: Applying Left Side Border using ooodev in Python\nDESCRIPTION: The snippet applies a green border specifically to the left side of a range of cells. It passes the `left` side to the `Borders` class constructor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        rng_obj = Calc.get_range_obj(\"B2:F6\")\n        cr = Calc.get_cell_range(sheet, rng_obj)\n        borders = Borders(left=Side(color=CommonColor.GREEN))\n        Styler.apply(cr, borders)\n```\n\n----------------------------------------\n\nTITLE: Initialize and Create Shape with Hatch Pattern\nDESCRIPTION: Sets up a LibreOffice Draw document, creates a rectangle shape, and applies a green 30-degree hatch pattern. Includes document initialization, shape creation, and basic GUI setup.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format.draw.direct.area import Hatch as ShapeHatch\nfrom ooodev.format.draw.direct.area import PresetHatchKind\nfrom ooodev.office.draw import Draw\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Draw.create_draw_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_75_PERCENT)\n\n        slide = Draw.get_slide(doc)\n\n        width = 36\n        height = 36\n        x = int(width / 2)\n        y = int(height / 2) + 20\n\n        rec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\n        style = ShapeHatch.from_preset(preset=PresetHatchKind.GREEN_30_DEGREES)\n        style.apply(rec)\n\n        f_style = ShapeHatch.from_obj(rec)\n        assert f_style\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Area Gradient from Writer Style\nDESCRIPTION: This snippet demonstrates how to retrieve the Area gradient from an existing Page style in Writer using the Gradient class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Gradient.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Header and Border Modifications in LibreOffice Writer using Python\nDESCRIPTION: Main setup function demonstrating how to create a Writer document, enable headers, and apply border styling. The example initializes a document, configures header properties, and applies border styles with custom color and line settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/bordes.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.header import Header, WriterStylePageKind\nfrom ooodev.format.writer.modify.page.header.borders import Padding, Shadow, Sides\nfrom ooodev.format.writer.modify.page.header.borders import BorderLineKind, LineSize, Side\nfrom ooodev.format import Styler\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        header_style = Header(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            spacing_dyn=True,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=WriterStylePageKind.STANDARD,\n        )\n\n        side = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\n        sides_style = Sides(all=side, style_name=WriterStylePageKind.STANDARD)\n        Styler.apply(doc, header_style, sides_style)\n\n        style_obj = Sides.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Interacting with LibreOffice Writer using Python\nDESCRIPTION: This Python code is executed within LibreOffice's Python environment. It imports necessary modules, establishes a connection to LibreOffice, creates a Writer document, writes 'Hello World!' into it, and then closes the document and office connection. Dependencies include ooo-dev-tools.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_lo_install_pip.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.loader import Lo\n>>> from ooodev.write import WriteDoc\n>>> \n>>> def say_hello():\n...     doc = WriteDoc.from_current_doc()\n...     cursor = doc.get_cursor()\n...     cursor.append_para(text=\"Hello World!\")\n...\n>>> _ = Lo.load_office(Lo.ConnectSocket())\n>>> doc = WriteDoc.create_doc(visible=True)\n>>> say_hello()\n>>> doc.close()\n>>> Lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Moving Pane Focus in ViewState using Python\nDESCRIPTION: This code snippet demonstrates how to move the focus of a pane within a view state in LibreOffice. The `move_pane_focus` method takes a direction as input, either an integer or a `ViewState.PaneEnum` member, and updates the internal `_pane_focus_num` attribute based on the specified direction. It handles `MOVE_UP`, `MOVE_DOWN`, `MOVE_LEFT`, and `MOVE_RIGHT` directions, and returns `True` if the move was successful, `False` otherwise.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n\"# in viewState class\ndef move_pane_focus(self, dir: int | ViewState.PaneEnum) -> bool:\n    try:\n        d = ViewState.PaneEnum(dir)\n    except Exception:\n        raise ValueError(\"Unknown move direction\")\n\n    if d == ViewState.PaneEnum.MOVE_UP:\n        if self._pane_focus_num == 3:\n            self._pane_focus_num = 1\n        elif self._pane_focus_num == 2:\n            self._pane_focus_num = 0\n        else:\n            Lo.print(\"cannot move up\")\n            return False\n    elif d == ViewState.PaneEnum.MOVE_DOWN:\n        if self._pane_focus_num == 1:\n            self._pane_focus_num = 3\n        elif self._pane_focus_num == 0:\n            self._pane_focus_num = 2\n        else:\n            Lo.print(\"cannot move down\")\n            return False\n    elif d == ViewState.PaneEnum.MOVE_LEFT:\n        if self._pane_focus_num == 1:\n            self._pane_focus_num = 0\n        elif self._pane_focus_num == 3:\n            self._pane_focus_num = 2\n        else:\n            Lo.print(\"cannot move left\")\n            return False\n    elif d == ViewState.PaneEnum.MOVE_RIGHT:\n        if self._pane_focus_num == 0:\n            self._pane_focus_num = 1\n        elif self._pane_focus_num == 2:\n            self._pane_focus_num = 3\n        else:\n            Lo.print(\"cannot move right\")\n            return False\n    return True\"\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Background to Chart Data Series in Python\nDESCRIPTION: This snippet demonstrates how to apply a background hatch to a chart data series using the style_area_hatch_from_preset() method. It uses the PresetHatchKind enum to select a hatch preset.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_hatch import PresetHatchKind\n\n# ... other code\n\nds = chart_doc.get_data_series()[0]\nds.style_area_hatch_from_preset(\n    preset=PresetHatchKind.BLUE_45_DEGREES_CROSSED,\n)\n```\n\n----------------------------------------\n\nTITLE: Get the font effects for the Legend\nDESCRIPTION: This code snippet shows how to retrieve the font effects applied to a chart legend. It calls the `style_font_effect_get` method of the `ChartLegend` class, which returns an object containing the current font effect settings. The code then asserts that the returned object is not None.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/font_effects.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n\nf_style = legend.style_font_effect_get()\nassert f_style is not None\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Bullet Point in Draw Class Python\nDESCRIPTION: This static method adds a bullet point to a text shape on a slide. It sets the bullet's numbering level and text. The method works by converting the XText reference into an XTextRange to manipulate text content directly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef add_bullet(bulls_txt: XText, level: int, text: str) -> None:\n    bulls_txt_end = Lo.qi(XTextRange, bulls_txt, True).getEnd()\n    Props.set(bulls_txt_end, NumberingLevel=level)\n    bulls_txt_end.setString(f\"{text}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Style Data Point Transparency\nDESCRIPTION: This Python code snippet demonstrates how to set the transparency of a specific data point in a chart's data series. It accesses the first data series of a chart document, then gets the last data point in that series and sets its area transparency to 50 using the `style_area_transparency_transparency()` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\ndp = ds[-1]\ndp.style_area_transparency_transparency(50)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Gradient to Data Series\nDESCRIPTION: This snippet demonstrates how to create and apply a custom gradient style to a data series. It specifies the gradient style and angle along with the colors in the gradient from a defined color range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.utils.data_type.color_range import ColorRange\n\n    ds = chart_doc.get_data_series()[0]\nds.style_area_gradient(\n    style=GradientStyle.LINEAR,\n    angle=215,\n    grad_color=ColorRange(StandardColor.TEAL_DARK3, StandardColor.BLUE_LIGHT2),\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Transparency to Page Header Style\nDESCRIPTION: Demonstrates how to apply transparency to a page header background color in LibreOffice Writer. Creates a red colored header with 85% transparency, showing the importance of applying styles in the correct order.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npage_header_style_kind = WriterStylePageKind.STANDARD\ncolor_style = HeaderAreaColor(color=StandardColor.RED, style_name=page_header_style_kind)\ntransparency_style = Transparency(value=85, style_name=page_header_style_kind)\nStyler.apply(doc, header_style, color_style, transparency_style)\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch to Chart Floor\nDESCRIPTION: Applies a 45-degree blue hatch pattern to a chart floor using PresetHatchKind from the format preset module. Requires the ooodev library and a chart document instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_hatch import PresetHatchKind\n\n# ... other code\nfloor = chart_doc.first_diagram.floor\nfloor.style_area_hatch_from_preset(preset=PresetHatchKind.BLUE_45_DEGREES)\n```\n\n----------------------------------------\n\nTITLE: Using Default Values in DotDict in Python\nDESCRIPTION: Shows how to set and use default values for missing attributes in DotDict.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/helper/dot_dict.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# With default value for missing attributes\nd = DotDict[str](\"default\", a=\"hello\")\nprint(d.missing)  # \"default\"\n\n# With None as default\nd = DotDict[str](None, a=\"hello\")\nprint(d.missing)  # None\n```\n\n----------------------------------------\n\nTITLE: Adding Table Chart and Accessing Chart Document in Python\nDESCRIPTION: This snippet demonstrates how to add a table chart to a spreadsheet and retrieve the corresponding chart document using the Chart2 class. It uses the 'add_table_chart' method to create a chart and 'get_chart_doc' to access the chart's document in the spreadsheet.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nChart2.add_table_chart(\n    sheet=sheet,\n    chart_name=chart_name,\n    cells_range=cells_range,\n    cell_name=cell_name,\n    width=width,\n    height=height\n)\nchartDoc = Chart2.get_chart_doc(sheet=sheet, chart_name=chartName) # XChartDocument\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example with kwargs\nDESCRIPTION: This code snippet demonstrates an alternative structure of an EventArgsCallbackT callback function. In this format `control_src` is accessed from the kwargs. It shows how to cast the value retrieved from kwargs to the correct `FormCtlDbPatternField` type.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_pattern_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbPatternField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteTableCell Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the WriteTableCell class. It includes all members, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/write_table_cell.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.table.write_table_cell.WriteTableCell\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Chart Subtitle in Python\nDESCRIPTION: This code snippet demonstrates how to apply font effects to the subtitle of a chart in LibreOffice Calc. It retrieves the chart's first diagram's title (subtitle) and then uses `style_font_effect()` to apply color, underline, and shadow effects. The code requires the `ooo` and `ooodev` libraries.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/font_effects.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.font_underline import FontUnderlineEnum\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\n\n        # ... other code\n        sub_title = chart_doc.first_diagram.get_title()\n        if sub_title is None:\n            raise ValueError(\"Title not found\")\n\n        sub_title.style_font_effect(\n            color=StandardColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n            shadowed=True,\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting up Calc Document and Applying Borders in Python\nDESCRIPTION: This snippet demonstrates how to set up a Calc document, create a range, and apply borders to it using the ooodev library. It includes imports, document creation, and a basic border application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.format.calc.direct.cell.borders import Side\nfrom ooodev.utils.color import CommonColor\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(130)\n\n        rng = sheet.rng(\"B2:F6\")\n        cell_rng = sheet.get_range(range_obj=rng)\n        cell_rng.style_borders(border_side=Side(color=CommonColor.BLUE))\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Environment with oooenv\nDESCRIPTION: Command to configure the virtual environment to use uno.py and unohelper.py.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\noooenv cmd-link -a\n```\n\n----------------------------------------\n\nTITLE: Adding Dispatch Shapes to Visible Pages\nDESCRIPTION: Creates and positions dispatch shapes on visible pages with error handling. Supports positioning, sizing and shape type specification.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class\n@classmethod\ndef add_dispatch_shape(\n    cls, slide: XDrawPage, shape_dispatch: ShapeDispatchKind | str,\n    x: int, y: int, width: int, height: int, fn: DispatchShape\n) -> XShape:\n    cls.warns_position(slide, x, y)\n    try:\n        shape = fn(slide, str(shape_dispatch))\n        if shape is None:\n            raise NoneError(f'Failed to add shape for dispatch command \"{shape_dispatch}\"')\n        cls.set_position(shape=shape, x=x, y=y)\n        cls.set_size(shape=shape, width=width, height=height)\n        return shape\n    except NoneError:\n        raise\n    except Exception as e:\n        raise ShapeError(\n            f'Error occured adding dispatch shape for dispatch command \"{shape_dispatch}\"'\n        ) from e\n```\n\n----------------------------------------\n\nTITLE: Applying Number Format to a Range in Calc\nDESCRIPTION: This snippet shows how to apply a scientific number format to a range of cells in a Calc spreadsheet.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/numbers.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        rng = sheet.rng(\"A1:B1\")\n        sheet.set_array(values=[[0.000000034, 0.000000013]], range_obj=rng)\n\n        cell_rng = sheet.get_range(range_obj=rng)\n        cell_rng.style_numbers_scientific()\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Alternative Nested Menu Access in Python OOO Dev Tools\nDESCRIPTION: Shows an alternative method to access nested menus using chained indexing with strings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbasic_shapes = doc.menu[\".uno:InsertMenu\"][\".uno:ShapesMenu\"][\".uno:BasicShapes\"]\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example\nDESCRIPTION: Illustrates the format for EventArgsCallbackT callbacks, showing how to access the control source (FormCtlTimeField) either directly as an argument or from keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_time_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlTimeField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for the_dictionary_partial Module in RST\nDESCRIPTION: This RST code snippet configures Sphinx to automatically generate documentation for the the_dictionary_partial module. It includes all members and undocumented members in the output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/the_dictionary_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.utils.partial.the_dictionary_partial\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart and Setting Styles in Python\nDESCRIPTION: This snippet demonstrates how to initialize a CalcDoc, open a chart document, and apply a border style and a gradient style to the chart area. It also retrieves and sets the title's area color before closing the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.PURPLE_DARK1,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.BLUE_DARK1,\n                StandardColor.PURPLE_LIGHT2,\n            ),\n        )\n\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_area_color(StandardColor.DEFAULT_BLUE)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Transparency to a Specific Data Point in Python\nDESCRIPTION: Example showing how to apply transparency to a specific data point in a chart series. This code applies the same transparency style to a specific point rather than the entire series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(\n    chart_doc=chart_doc, series_idx=0, idx=-1, styles=[data_series_transparency]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing ModifyListener for Document Changes\nDESCRIPTION: This snippet initializes the ModifyListener class to subscribe to document modification events by attaching the listener to the document's XModifyBroadcaster interface instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# in ModifyListener class\ndef __init__(self, trigger_args: GenericArgs | None = None, doc: XComponent | None = None) -> None:\n    super().__init__(trigger_args=trigger_args)\n    self._doc = CalcDoc(Calc.create_doc(loader))\n    # ... other code\n\n    mb = self._doc.qi(XModifyBroadcaster, True)\n    mb.addModifyListener(self)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hyphenation Settings from Style (Python)\nDESCRIPTION: Shows how to retrieve hyphenation settings from an existing paragraph style using the Hyphenation.from_style() method. This can be used to verify or inspect current style settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/text_flow.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Hyphenation.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Setting Paper Size with Inches in Calc\nDESCRIPTION: This code snippet shows how to set a custom paper size in a Calc document using inches as the unit of measurement. It utilizes the `UnitInch` class from the `ooodev.units` module to define the width and height of the paper in inches and applies these dimensions using the `PaperFormat` and `SizeMM` classes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.page import PaperFormat, CalcStylePageKind\n        from ooodev.format.calc.modify.page.page import SizeMM\n        from ooodev.units import UnitInch\n        # ... other code\n\n        style = PaperFormat(\n            size=SizeMM(width=UnitInch(8.5), height=UnitInch(14)),\n            style_name=CalcStylePageKind.DEFAULT,\n        )\n        style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Descriptor with Search Properties\nDESCRIPTION: Illustrates how to set up a search descriptor with specific search properties like searching whole words and configuring search string\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsrch = cell_rng.qi(XSearchable, True)\nsd = srch.createSearchDescriptor()\n\nsd.setSearchString(srch_str)\nsd.setPropertyValue(\"SearchWords\", True)\n# sd.setPropertyValue(\"SearchRegularExpression\", True)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart with Font Effects in LibreOffice Calc\nDESCRIPTION: This code demonstrates the complete setup process for applying font effects to a chart in LibreOffice Calc. It opens a document, accesses a chart, applies formatting to the chart background, and adds font effects to the title.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.title.font import FontEffects as TitleFontEffects\nfrom ooodev.format.chart2.direct.title.font import FontUnderlineEnum, FontLine\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_flat_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.PURPLE_DARK1, width=0.7)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.BLUE_DARK1, StandardColor.PURPLE_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        title_font_effect = TitleFontEffects(\n            color=StandardColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n            shadowed=True,\n        )\n        Chart2.style_title(chart_doc=chart_doc, styles=[title_font_effect])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Multi-script Tab Dialog Macro\nDESCRIPTION: Main entry point for a multi-script macro implementation showing tabs functionality in a Calc document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/embed_python.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\nfrom tab_dialog import Tabs\n\n\ndef show_tabs(*args) -> None:\n    doc = CalcDoc.from_current_doc()\n    tabs = Tabs(doc=doc)\n    tabs.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Writer Page Gradient Transparency\nDESCRIPTION: This code snippet applies a gradient transparency style to a Writer page style. It first sets the page area color to dark green and then applies a gradient transparency with specified style, angle, border, and intensity range. The order of application is important.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npage_style_kind = WriterStylePageKind.STANDARD\ncolor_style = PageAreaColor(color=StandardColor.GREEN_DARK1, style_name=page_style_kind)\npara_gradient_style = Gradient(\n    style=GradientStyle.LINEAR,\n    angle=45,\n    border=22,\n    grad_intensity=IntensityRange(0, 100),\n    style_name=page_style_kind,\n)\nStyler.apply(doc, color_style, para_gradient_style)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Applying a Writer Header Style\nDESCRIPTION: This code shows how to create a Header configuration object with specific properties and apply it to a document. The properties include enabling headers, sharing headers, and setting dimensions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/header.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nheader_style = Header(\n    on=True,\n    shared_first=True,\n    shared=True,\n    height=10.0,\n    spacing=3.0,\n    spacing_dyn=True,\n    margin_left=1.5,\n    margin_right=2.0,\n    style_name=WriterStylePageKind.STANDARD,\n)\nheader_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart and Setting Legend Position in Python\nDESCRIPTION: A complete example demonstrating chart creation, styling, and legend positioning using OOO development tools. The code opens a chart, applies gradient styling, and sets the legend position to the bottom of the page.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/position.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooo.dyn.chart2.legend_position import LegendPosition \nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.format.inner.direct.chart2.title.alignment.direction import DirectionModeKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BRICK,\n            width=1,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.GREEN_DARK4,\n                StandardColor.TEAL_LIGHT2,\n            ),\n        )\n        legend = chart_doc.first_diagram.get_legend()\n        if legend is None:\n            raise ValueError(\"Legend is None\")\n\n        _ = legend.style_position(\n            pos=LegendPosition.PAGE_END,\n            no_overlap=True,\n            mode=DirectionModeKind.LR_TB,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Number Format for Cell Range in Calc\nDESCRIPTION: Shows how to apply scientific number formatting to a range of cells containing small decimal values. Uses the Numbers class scientific property to format multiple cells at once.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/numbers.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.numbers import Numbers\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        Calc.set_val(value=0.000000034, sheet=sheet, cell_name=\"A1\")\n        Calc.set_val(value=0.000000013, sheet=sheet, cell_name=\"B1\")\n        rng = Calc.get_cell_range(sheet=sheet, range_name=\"A1:B1\")\n\n        num_style = Numbers().scientific\n        num_style.apply(rng)\n\n        f_style = Numbers.from_obj(rng)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Styling Text to the Left of Cursor with StyleT in Python\nDESCRIPTION: This snippet demonstrates an overload of the style_left function, taking an iterable of StyleT objects to apply styles to the text to the left of the current cursor position.  The implementation details are omitted (`...`).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef style_left(cls, cursor: XTextCursor, pos: int, styles: Iterable[StyleT]) -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Outline in Python\nDESCRIPTION: This snippet demonstrates how to set the outline style of a paragraph in a LibreOffice Writer document using the `Outline` class from the `ooodev` library.  It creates an `Outline` object with a specified level and style name and then applies it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/outline_list.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npara_outline_style = Outline(level=LevelKind.LEVEL_01, style_name=StyleParaKind.STANDARD)\npara_outline_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Draw Pages in Calc with Python\nDESCRIPTION: Using the `len()` function on the `SpreadsheetDrawPages` object to obtain the total count of draw pages in a Calc document. Requires an instance of `CalcDoc` with an active Calc document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/spreadsheet_draw_pages.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> len(doc.draw_pages)\n1\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version in LibreOffice FlatPak Console\nDESCRIPTION: This snippet demonstrates how to check the Python version used by LibreOffice FlatPak using the APSO extension's Python console.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAPSO python console [LibreOffice]\n3.10.11 (main, Nov 10 2011, 15:00:00) [GCC 12.2.0]\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n```\n\n----------------------------------------\n\nTITLE: Removing Local Shortcut by Key Combination (Temporary) in Python\nDESCRIPTION: Removes a local document shortcut by its key combination without persisting the change. The shortcut will be removed from the current session but will return after restarting LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# ...\ndoc = CalcDoc.from_current_doc()\ndoc.shortcuts.remove_by_shortcut(\"Shift+Ctrl+Alt+A\", False)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Wall Area Color in Python\nDESCRIPTION: This snippet demonstrates how to set the background color of a chart's wall to a default blue color using the `style_area_color()` method from the `ooodev` library. It accesses the first diagram's wall and applies the specified color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\nwall = chart_doc.first_diagram.wall\nwall.style_area_color(StandardColor.DEFAULT_BLUE)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Area Transparency in Python\nDESCRIPTION: This snippet shows how to set the area transparency for a chart using the OOoDev library. It calls the method to apply a specific transparency value and a color to the chart area.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n_ = chart_doc.style_area_color(color=StandardColor.GREEN_LIGHT2)\\n_ = chart_doc.style_area_transparency_transparency(50)\n```\n\n----------------------------------------\n\nTITLE: Checking System Python Version\nDESCRIPTION: Command to check the version of Python installed on the system to ensure it matches the version used by LibreOffice FlatPak.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ /usr/bin/python3 --version\nPython 3.10.6\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Gradient Background in Python\nDESCRIPTION: Demonstrates how to retrieve the current gradient background of a chart using the ChartGradient.from_obj method. This can be used to verify the applied gradient or for further processing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = ChartGradient.from_obj(chart_doc, chart_doc.getPageBackground())\nassert f_style.prop_name == chart_grad.prop_name\n```\n\n----------------------------------------\n\nTITLE: Copying Slides Between Documents\nDESCRIPTION: Method that copies a slide from a source document and pastes it into a destination document. It uses dispatch commands to perform the copy and paste operations, with delays to ensure proper execution.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# in AppendSlides of append_slides.py\ndef _copy_to(\n    self,\n    from_slide: XDrawPage,\n    from_ctrl: XController,\n    from_frame: XFrame,\n    to_slide: XDrawPage,\n    to_ctrl: XController,\n    to_frame: XFrame,\n) -> None:\n    # Copy fromSlide to the clipboard, and\n    # then paste it to after the toSlide. Unfortunately, the\n    # paste requires a \"Yes\" button to be pressed.\n\n    Draw.goto_page(from_ctrl, from_slide)  # select this slide\n    print(\"-- Copy -->\")\n    Lo.dispatch_cmd(cmd=GlobalEditDispatch.COPY, frame=from_frame)\n    Lo.delay(1000)\n\n    Draw.goto_page(to_ctrl, to_slide)\n    print(\"Paste\")\n\n    Lo.dispatch_cmd(cmd=GlobalEditDispatch.PASTE, frame=to_frame)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Border Shadow From Style in Python\nDESCRIPTION: The snippet outlines the method to retrieve shadow attributes from a Calc document's style using ooodev. By utilizing `Shadow.from_style`, it pulls shadow details from the document, requiring parameters like `doc` and `style_name`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/bordes.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Shadow.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Opening Sentence Checking Options in Python\nDESCRIPTION: A GUI interaction method that uses 'write.open_sent_check_options' to programmatically invoke the 'English Sentence Checking' dialog. This requires the application to be visible and handles the dialog appearance using dispatch commands. Dependencies are on GUI visibility and proper dispatch message setup.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nGUI.set_visible(True, doc) # Office must be visible...\nLo.delay(2000)\nWrite.open_sent_check_options() # for the dialog to appear\n```\n\n----------------------------------------\n\nTITLE: Applying Color to Chart Subtitle\nDESCRIPTION: Shows how to apply a background color to a chart subtitle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_subtitle(chart_doc=chart_doc, styles=[title_color])\n```\n\n----------------------------------------\n\nTITLE: Initializing CalcDoc and Styling Chart Border in Python\nDESCRIPTION: This code snippet initializes a Calc document, zooms to 100%, accesses the first chart, and styles the chart border with a purple color and a width of 0.7. It uses the `ooodev` library to load a document, access sheets and charts, and apply styles to the chart's border.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart3d.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.PURPLE_DARK1,\n            width=0.7,\n        )\n\n        wall = chart_doc.first_diagram.wall\n        wall.style_area_color(StandardColor.DEFAULT_BLUE)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Ellipse Example\nDESCRIPTION: Example of creating a partial ellipse with specific start and end angles using CircleKind property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_43\n\nLANGUAGE: python\nCODE:\n```\npie = slide.draw_ellipse(\n    x=30, y=slide_size.Width - 100, width=40, height=20\n)\npie.set_property(\n    FillColor=CommonColor.LIGHT_SKY_BLUE,\n    CircleStartAngle=9_000,  #   90 degrees ccw\n    CircleEndAngle=36_000,  #    360 degrees ccw\n    CircleKind=CircleKind.SECTION,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Context Menu with ContextCreator in LibreOffice Python\nDESCRIPTION: This example demonstrates adding an 'About' menu entry to a LibreOffice Calc context menu using the ContextCreator class. It intercepts the context menu, inserts the 'About' command after the 'DeleteCell' command, and sets the action to execute the modified menu. The ContextCreator provides additional capabilities like JSON import/export.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/about_example.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any\nimport contextlib\nimport uno\nfrom ooo.dyn.ui.context_menu_interceptor_action import ContextMenuInterceptorAction as ContextMenuAction\n\nfrom ooodev.adapter.ui.context_menu_interceptor import ContextMenuInterceptor\nfrom ooodev.adapter.ui.context_menu_interceptor_event_data import ContextMenuInterceptorEventData\nfrom ooodev.calc import CalcDoc\nfrom ooodev.events.args.event_args_generic import EventArgsGeneric\nfrom ooodev.gui.menu.context.context_creator import ContextCreator\nfrom ooodev.loader import Lo\n\ndef on_menu_intercept(\n    src: ContextMenuInterceptor, event: EventArgsGeneric[ContextMenuInterceptorEventData], view: Any\n) -> None:\n    try:\n        container = event.event_data.event.action_trigger_container\n        with contextlib.suppress(Exception):\n            # don't block other menus if there is an issue.\n            # check the first and last items in the container\n            if container[0].CommandURL == \".uno:Cut\" and container[-1].CommandURL == \".uno:FormatCellDialog\":\n                index = container.get_command_index(\".uno:DeleteCell\")\n\n                menu_container = get_context_menu()\n                container.insert_by_index(index + 1, menu_container[0])  # type: ignore\n\n                event.event_data.action = ContextMenuAction.EXECUTE_MODIFIED\n\n    except Exception as e:\n        print(e)\n\ndef get_context_menu():\n    # ContextCreator can load a menu from a JSON file or\n    # create a menu with submenus from a list of dictionaries.\n    creator = ContextCreator()\n    return creator.create([{\"text\": \"About\", \"command\": \".uno:About\"}])\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        sheet = doc.sheets[0]\n        sheet.set_active()\n        sheet[0, 0].value = \"Hello, World!\"\n\n        view = doc.get_view()\n        view.add_event_notify_context_menu_execute(on_menu_intercept)\n        assert view\n\n    finally:\n        doc.close()\n        Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Setting Page Order in Calc with Python\nDESCRIPTION: This snippet sets the page order style for a Calc sheet using the `Order` class from python-ooo-dev-tools. It applies a style with specific order settings to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle = Order(top_btm=False, first_pg=0, style_name=CalcStylePageKind.DEFAULT)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graphic Links from Document\nDESCRIPTION: This snippet is a static method within the Write class that retrieves graphic links from a LibreOffice document. It uses the XTextGraphicObjectsSupplier interface to access graphic objects and checks for any elements present.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# in Write class\n@staticmethod\ndef get_graphic_links(doc: XComponent) -> XNameAccess | None:\n    ims_supplier = Lo.qi(XTextGraphicObjectsSupplier, doc, True)\n\n    xname_access = ims_supplier.getGraphicObjects()\n    if xname_access is None:\n        Lo.print(\"Name access to graphics not possible\")\n        return None\n\n    if not xname_access.hasElements():\n        Lo.print(\"No graphics elements found\")\n        return None\n\n    return xname_access\n```\n\n----------------------------------------\n\nTITLE: Getting Currently Viewed Page in Draw/Impress\nDESCRIPTION: Retrieves reference to currently viewed page using XDrawView interface. Includes error handling and type casting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class\n@staticmethod\ndef get_viewed_page(doc: XComponent) -> XDrawPage:\n    try:\n        ctl = GUI.get_current_controller(doc)\n        xdraw_view = Lo.qi(XDrawView, ctl, True)\n        return xdraw_view.getCurrentPage()\n    except Exception as e:\n        raise DrawPageError(\"Error geting Viewed page\") from e\n```\n\n----------------------------------------\n\nTITLE: Getting Image Size in 1/100 mm Units - Python\nDESCRIPTION: This snippet retrieves the size of an image in 1/100 mm units using the ImagesLo.get_size_100mm method and raises an error if it's unable to fetch the size.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nim_size = ImagesLo.get_size_100mm(pth)  # in 1/100 mm units\nif im_size is None:\n    raise ValueError(f\"Unable to get image from {pth}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Font Color and Underline in LibreOffice Calc with Python\nDESCRIPTION: This code snippet demonstrates how to set the font color to light blue and add a double underline to the default cell style in LibreOffice Calc. It uses the FontEffects class from the ooodev library to modify the font properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.cell.font import FontEffects, FontLine\nfrom ooodev.format.calc.modify.cell.font import StyleCellKind, FontUnderlineEnum\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        font_style = FontEffects(color=StandardColor.BLUE_LIGHT1, underline=FontLine(line=FontUnderlineEnum.DOUBLE))\n        font_style.apply(doc)\n\n        style_obj = FontEffects.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\n        assert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Candle Stick Chart Type Component Module\nDESCRIPTION: This section documents the `ooodev.adapter.chart2.candle_stick_chart_type_comp` module. The directives `:members:`, `:undoc-members:`, and `:show-inheritance:` suggest this is Sphinx documentation, automatically generating documentation from the module's code. It details the module's public members, undocumented members, and the inheritance structure of classes within the module, providing a comprehensive overview for developers using the OpenOffice development tools.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.chart2.candle_stick_chart_type_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.chart2.candle_stick_chart_type_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Line Number Style in Python\nDESCRIPTION: This snippet sets the line number style of a paragraph in a LibreOffice Writer document using the `LineNum` class from the `ooodev` library. It creates a `LineNum` object with a specified starting number and style name, and then applies it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/outline_list.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npara_linenum_style = LineNum(num_start=3, style_name=StyleParaKind.STANDARD)\npara_linenum_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Getting Current User Name in Python for LibreOffice\nDESCRIPTION: Static read-only property that retrieves the current user name from environment variables or the password database. It works on Windows as long as the USERNAME environment variable is set.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/session.rst#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nSession.user_name\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Background Color\nDESCRIPTION: This snippet shows how to retrieve the background color of a cell using the style_area_color_get method. It returns a style object containing the color property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/background.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf_style = cell.style_area_color_get()\nassert f_style.prop_color == StandardColor.BLUE_LIGHT2\n```\n\n----------------------------------------\n\nTITLE: Applying Font Style to Chart Title Python\nDESCRIPTION: This snippet extracts the chart title and applies the specified font style. It demonstrates input validation by raising an error if the title is not found. The code relies on previously initialized chart documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_font(\n            name=\"Lucida Calligraphy\",\n            size=14,\n            font_style=\"italic\",\n        )\n```\n\n----------------------------------------\n\nTITLE: Apply Hatch Pattern to Shape\nDESCRIPTION: Demonstrates how to apply a preset hatch pattern to a shape using the ShapeHatch class and PresetHatchKind enumeration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/hatch.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Hatch as ShapeHatch\nfrom ooodev.format.draw.direct.area import PresetHatchKind\n# ... other code\n\nrec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\nstyle = ShapeHatch.from_preset(preset=PresetHatchKind.GREEN_30_DEGREES)\nstyle.apply(rec)\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Area Image in Writer\nDESCRIPTION: This snippet shows how to set an image for the footer area in a Writer document using the Img class and a preset image from the PresetImageKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.footer.area import Img as FooterAreaImg, PresetImageKind\n# ... other code\n\nimg_style = FooterAreaImg.from_preset(\n    preset=PresetImageKind.COLOR_STRIPES, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, footer_style, img_style)\n```\n\n----------------------------------------\n\nTITLE: Setting Transparency using CalcDoc (Python)\nDESCRIPTION: This Python snippet demonstrates how to open a Calc document and set the transparency of the chart's wall using the `style_area_transparency_transparency` method. It requires the `python_ooo_dev_tools` library and a pre-existing Calc document. Key parameters include the file name for the Calc document and the transparency value, set at 30%.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart3d.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.MAGENTA,\n            width=0.7,\n        )\n\n        _ = chart_doc.style_area_gradient_from_preset(\n            preset=PresetGradientKind.MAHOGANY,\n        )\n\n        wall = chart_doc.first_diagram.wall\n        wall.style_area_transparency_transparency(30)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Linux\nDESCRIPTION: Activates the Python virtual environment on Linux systems to isolate dependencies for development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsource ./.venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Handling Event Callback with Control Source in Python\nDESCRIPTION: This snippet demonstrates a callback function for handling events with a source control in Python. It includes the 'control_src' keyword, referencing a FormCtlCurrencyField instance. The function requires the 'src', 'event', 'control_src', among others, and returns nothing. Key dependencies include the 'EventArgs' type and the 'FormCtlCurrencyField' class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_currency_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlCurrencyField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Applying a preset hatch pattern to a paragraph style in LibreOffice Writer\nDESCRIPTION: Creates a paragraph area hatch style using a preset pattern and applies it to the Standard paragraph style in the document. This snippet uses the from_preset method of ParaStyleHatch to quickly create a configured hatch pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_hatch.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npara_area_hatch_style = ParaStyleHatch.from_preset(\n    preset=PresetHatchKind.GREEN_90_DEGREES_TRIPLE, style_name=StyleParaKind.STANDARD\n)\npara_area_hatch_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Formatting Chart Title Font in Python\nDESCRIPTION: Code snippet demonstrating how to apply font formatting to a chart title using the TitleFontOnly class, which sets properties like font name, size, and style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.font import FontOnly as TitleFontOnly\n\n# ... other code\ntitle_font = TitleFontOnly(name=\"Lucida Calligraphy\", size=14, font_style=\"italic\")\nChart2.style_title(chart_doc=chart_doc, styles=[title_font])\n```\n\n----------------------------------------\n\nTITLE: Creating Language Guessing Service\nDESCRIPTION: This static method in the Write class creates an instance of the XLanguageGuessing service, which is used to determine the primary language of a string passed to it.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef guess_locale(test_str: str) -> Locale | None:\n    guesser = Lo.create_instance_mcf(\n        XLanguageGuessing, \"com.sun.star.linguistic2.LanguageGuessing\"\n    )\n    if guesser is None:\n        Lo.print(\"No language guesser found\")\n        return None\n    return guesser.guessPrimaryLanguage(test_str, 0, len(test_str))\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Title Border Properties\nDESCRIPTION: Demonstrates applying border line properties to a chart title, specifying color and width using style_border_line() method\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntitle = chart_doc.get_title()\nif title is None:\n    raise ValueError(\"Title not found\")\n\ntitle.style_border_line(\n    color=StandardColor.MAGENTA_DARK1,\n    width=0.75,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Border Shadow\nDESCRIPTION: Shows how to apply shadow effects to footer borders. This example sets a dark blue shadow with a width of 1.5 units and applies it to the document style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/bordes.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nshadow_style = Shadow(\n    color=StandardColor.BLUE_DARK2,\n    width=1.5,\n    style_name=CalcStylePageKind.DEFAULT,\n)\nStyler.apply(doc, footer_style, shadow_style)\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback Function in Python\nDESCRIPTION: This snippet demonstrates how to define an event callback function that receives control source as a keyword argument. The function signature accepts various parameters including the event arguments and can utilize kwargs to access additional information such as the control source.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_pattern_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n        src: Any, event: EventArgs, control_src: FormCtlPatternField, *args, **kwargs\n    ) -> None:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Making a Shape in Python\nDESCRIPTION: This Python code snippet defines a static method `make_shape` within the `Draw` class. It creates a shape instance of the specified `shape_type`, sets its position (x, y) and size (width, height) in the drawing, converting millimeters to Office's internal 1/100 mm units. It uses `Lo.create_instance_msf` to instantiate the shape and sets its position and size using `setPosition` and `setSize` methods of the `XShape` interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"# in the Draw class (simplified)\\n@staticmethod\\ndef make_shape(\\n    shape_type: DrawingShapeKind | str,\\n    x: int | UnitT,\\n    y: int | UnitT,\\n    width: int | UnitT,\\n    height: int | UnitT,\\n) -> XShape:\\n\\n    # parameters are in mm units\\n    shape = Lo.create_instance_msf(XShape, f\\\"com.sun.star.drawing.{shape_type}\\\", raise_err=True)\\n    shape.setPosition(Point(x * 100, y * 100))\\n    shape.setSize(Size(width * 100, height * 100))\\n    return shape\"\n```\n\n----------------------------------------\n\nTITLE: Applying Y-Axis Font Effects in Chart using Python\nDESCRIPTION: This snippet modifies the Y-Axis font by applying a red color and a blue single underline effect using the `style_font_effect` method. It utilizes fonts from `ooodev` modules, specifically focusing on altering the Y-Axis properties. The process is part of a series of steps to visually enhance the LibreOffice chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.font_underline import FontUnderlineEnum\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\n# ... other code\n\n_ = chart_doc.axis_y.style_font_effect(\n    color=StandardColor.RED,\n    underline=FontLine(\n        line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE\n    ),\n    shadowed=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Applying a Paragraph Area Gradient Style in Writer\nDESCRIPTION: This code demonstrates how to create a Writer document, apply a preset paragraph area gradient style to the Standard paragraph style, and verify the style was applied correctly. It uses the ParaStyleGradient class with a Green Grass preset.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.area import Gradient as ParaStyleGradient, StyleParaKind\nfrom ooodev.format.writer.modify.para.area import PresetGradientKind\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_area_gradient_style = ParaStyleGradient.from_preset(\n            preset=PresetGradientKind.GREEN_GRASS, style_name=StyleParaKind.STANDARD\n        )\n        para_area_gradient_style.apply(doc)\n\n        style_obj = ParaStyleGradient.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Wall Preset Pattern in Python\nDESCRIPTION: This snippet demonstrates how to apply a preset pattern to the background of a chart's wall using the `style_area_pattern_from_preset()` method and the `PresetPatternKind` enum. It accesses the chart's wall and sets the pattern to `ZIG_ZAG`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_pattern import PresetPatternKind\n\n# ... other code\nwall = chart_doc.first_diagram.wall\nwall.style_area_pattern_from_preset(preset=PresetPatternKind.ZIG_ZAG)\n```\n\n----------------------------------------\n\nTITLE: Defining Callback with Control Source - Python\nDESCRIPTION: This snippet demonstrates how to define a callback function for handling events associated with a Group Box control in a form. The function accepts multiple arguments, including a keyword argument 'control_src' which refers to the FormCtlGroupBox instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_group_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlGroupBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Effects from Writer Document\nDESCRIPTION: Demonstrates how to retrieve font effects from an existing Writer document using a paragraph cursor. Extracts and verifies font color, underline style, and underline color properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\n\nfont_effects = FontEffects.from_obj(para_cursor)\n\nassert font_effects.prop_color == CommonColor.RED\nassert font_effects.prop_underline.line == FontUnderlineEnum.SINGLE\nassert font_effects.prop_underline.color == CommonColor.BLUE\npara_cursor.gotoEnd(False)\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Commands to create and navigate to a new project directory where the virtual environment will be set up.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ~/my-project\ncd ~/my-project\n```\n\n----------------------------------------\n\nTITLE: Adding Poetry to PATH on Windows\nDESCRIPTION: PowerShell command to add Poetry's executable path to system PATH on Windows\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/poetry_env.rst#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:Path += \";C:\\Users\\tutorial\\AppData\\Roaming\\Python\\Scripts\"; setx PATH \"$Env:Path\"\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Title Orientation and Write Mode\nDESCRIPTION: Method for adjusting chart title orientation and direction using style_orientation() and style_write_mode() methods from OOO Development Tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/alignment.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.alignment import DirectionModeKind\n# ... other code\ntitle = chart_doc.get_title()\nif title is None:\n    raise ValueError(\"Title not found\")\ntitle.style_orientation(angle=15, vertical=False)\ntitle.style_write_mode(mode=DirectionModeKind.LR_TB)\n```\n\n----------------------------------------\n\nTITLE: Applying a Preset Gradient to a Paragraph Style in Writer\nDESCRIPTION: This code snippet shows how to create and apply a preset gradient (GREEN_GRASS) to the Standard paragraph style in a Writer document using the ParaStyleGradient class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_gradient.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npara_area_gradient_style = ParaStyleGradient.from_preset(\n    preset=PresetGradientKind.GREEN_GRASS, style_name=StyleParaKind.STANDARD\n)\npara_area_gradient_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Forms\nDESCRIPTION: Demonstrates how to iterate over the forms in a Draw page using a `for` loop. The example assumes there is a `doc` object and at least one form on the first slide, with its name being \"MyForm\". Requires the `DrawDoc` class and the `Draw` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_forms.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> for form in doc.slides[0].draw_page.forms:\n...     print(form.name)\nMyForm\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Background Styling in Python\nDESCRIPTION: Sets up imports and basic structure for styling a chart background in LibreOffice Calc using ooodev. Opens a document, gets the chart, and prepares to apply styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.general.area import Color as ChartColor\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=0.7)\n        chart_color = ChartColor(color=StandardColor.GREEN_LIGHT2)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_color, chart_bdr_line])\n\n        f_style = ChartColor.from_obj(chart_doc.getPageBackground())\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Font Using FontOnly\nDESCRIPTION: Demonstrates how to modify paragraph font properties including font name, size, language, and style using the FontOnly class from the ooodev library. Creates a new Writer document and applies font modifications.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.font import FontOnly, FontLang\nfrom ooodev.format.writer.modify.para.font import StyleParaKind\nfrom ooodev.write import Write, WriteDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = WriteDoc(Write.create_doc())\n        doc.set_visible()\n        Lo.delay(300)\n        doc.zoom(ZoomKind.ENTIRE_PAGE)\n\n        para_font_style = FontOnly(\n            name=\"Arial\",\n            size=20,\n            lang=FontLang().french_switzerland,\n            style_name=StyleParaKind.STANDARD,\n        )\n        doc.apply_styles(font_style)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Running Chart2 Demo with Command Line Option (Cross Platform)\nDESCRIPTION: Command to run the Chart2 demo from the current example folder with a specified chart type. The '-k' option selects the chart type, in this case 'happy_stock'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart2/Chart_2_Views/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start -k happy_stock\n```\n\n----------------------------------------\n\nTITLE: Creating App Menu About Dialog using MACreator in Python\nDESCRIPTION: This code demonstrates how to create an 'About' menu entry in the Tools menu using the MACreator class. The menu entry executes the standard LibreOffice about dialog command. This approach allows for more complex menu data handling including JSON import/export.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/about_example.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import TYPE_CHECKING\nimport uno\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.utils.kind.menu_lookup_kind import MenuLookupKind\nfrom ooodev.gui.menu.ma.ma_creator import MACreator\n\nif TYPE_CHECKING:\n    pass\n\ndef get_menu_data() -> list:\n    new_menu = [{\"Label\": \"About\", \"CommandURL\": \".uno:About\"}]\n    return new_menu\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        sheet = doc.sheets[0]\n        sheet[0, 0].value = \"Hello, World!\"\n\n        tools_menu = doc.menu[MenuLookupKind.TOOLS]\n        creator = MACreator()\n        menu_data = creator.create(get_menu_data())\n\n        for menu in menu_data[::-1]:\n            # insert the menus before the AutoComplete menu.\n            # loop in reverse to keep the order.\n            # save is set to false so that the menu is not saved to the configuration.\n            tools_menu.insert(menu=menu, after=\".uno:AutoComplete\", save=False)\n\n        # set breakpoint here to see the menu.\n        assert True\n    finally:\n        doc.close()\n        Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Checking if Selected Range is a Single Cell\nDESCRIPTION: This method checks whether the selected range in the document corresponds to a single cell by comparing the start and end coordinates of the cell range. If they match, it confirms that only one cell is selected.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@staticmethod\ndef is_single_cell_range(cr_addr: CellRangeAddress) -> bool:\n    return cr_addr.StartColumn == cr_addr.EndColumn and cr_addr.StartRow == cr_addr.EndRow\n```\n\n----------------------------------------\n\nTITLE: Setting up LibreOffice Calc document with OooDev\nDESCRIPTION: Creates a Calc document and initializes the environment needed for modifying page borders. This example demonstrates the basic setup required for all the border modification examples that follow.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/bordes.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.page.borders import Padding, Shadow, Sides\nfrom ooodev.format.calc.modify.page.borders import BorderLineKind, LineSize\nfrom ooodev.format.calc.modify.page.borders import Sides, Side, CalcStylePageKind\nfrom ooodev.utils.color import StandardColor\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        side = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\n        sides_style = Sides(all=side, style_name=CalcStylePageKind.DEFAULT)\n        sides_style.apply(doc)\n\n        style_obj = Sides.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: non-english-content\nDESCRIPTION: non-english-content\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.char.highlight.rst#2025-04-16_snippet_0\n\nLANGUAGE: non-english-content\nCODE:\n```\nnon-english-content\n```\n\n----------------------------------------\n\nTITLE: Getting Range Style in Calc\nDESCRIPTION: This snippet retrieves the style applied to a cell range using the `style_by_name_get` method. It assumes that a style has already been applied to the range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/cell.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\nname = cell_rng.style_by_name_get()\nassert name == str(StyleCellKind.ACCENT_1)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Border Shadow in Writer Document\nDESCRIPTION: This snippet demonstrates how to set a border shadow for a page in a Writer document. It creates a Shadow object with specific color and width properties and applies it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/bordes.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nshadow_style = Shadow(\n    color=StandardColor.BLUE_DARK2, width=1.5, style_name=WriterStylePageKind.STANDARD\n)\nshadow_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Spreadsheet Zoom Implementation\nDESCRIPTION: Method for implementing zoom functionality with various zoom types and percentages.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef zoom(cls, doc: XSpreadsheetDocument, type: GUI.ZoomEnum) -> None:\n    ctrl = cls.get_controller(doc)\n    if ctrl is None:\n        return\n\n    def zoom_val(value: int) -> None:\n        Props.set(ctrl, ZoomType=GUI.ZoomEnum.BY_VALUE.value, ZoomValue=value)\n\n    if (\n        type == GUI.ZoomEnum.ENTIRE_PAGE\n        or type == GUI.ZoomEnum.OPTIMAL\n        or type == GUI.ZoomEnum.PAGE_WIDTH\n        or type == GUI.ZoomEnum.PAGE_WIDTH_EXACT\n    ):\n        Props.set(ctrl, ZoomType=type.value)\n    elif type == GUI.ZoomEnum.ZOOM_200_PERCENT:\n        zoom_val(200)\n    elif type == GUI.ZoomEnum.ZOOM_150_PERCENT:\n        zoom_val(150)\n    elif type == GUI.ZoomEnum.ZOOM_100_PERCENT:\n        zoom_val(100)\n    elif type == GUI.ZoomEnum.ZOOM_75_PERCENT:\n        zoom_val(75)\n    elif type == GUI.ZoomEnum.ZOOM_50_PERCENT:\n        zoom_val(50)\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern to Chart Legend in Python\nDESCRIPTION: Sets a background pattern for a chart legend using the LegendAreaPattern class. Requires setting transparency to make the pattern visible and uses PresetPatternKind enum for pattern selection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.area import Pattern as LegendAreaPattern\nfrom ooodev.format.chart2.direct.legend.area import PresetPatternKind\nfrom ooodev.format.chart2.direct.legend.transparency import Transparency as LegendTransparency\n# ... other code\n\nlegend_pattern_style = LegendAreaPattern.from_preset(\n    chart_doc=chart_doc, preset=PresetPatternKind.HORIZONTAL_BRICK\n)\nlegend_bg_transparency_style = LegendTransparency(0)\nChart2.style_legend(\n    chart_doc=chart_doc, styles=[legend_bg_transparency_style, legend_pattern_style]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Character Border Padding in Writer\nDESCRIPTION: Code snippet demonstrating how to set border padding values for a character style in Writer. It specifies left, right, top, and bottom padding values in millimeters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/borders.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npadding_style = Padding(left=5, right=5, top=3, bottom=3, style_name=StyleCharKind.EXAMPLE)\npadding_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Importing Menu Item Classes in Python OOO Dev Tools\nDESCRIPTION: Imports the necessary classes for working with different types of menu items, including MenuItem, MenuItemSep, MenuItemSub, and MenuItemKind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui.menu.item import MenuItem\nfrom ooodev.gui.menu.item import MenuItemSep\nfrom ooodev.gui.menu.item import MenuItemSub\nfrom ooodev.gui.menu.item import MenuItemKind\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Position in Chart2 Direct Axis Positioning\nDESCRIPTION: Shows how to set the axis position using the PositionAxis class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/positioning.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.axis.positioning import PositionAxis\n# ... other code\n\nposition_axis_style = PositionAxis(False)\nChart2.style_x_axis(chart_doc=chart_doc, styles=[position_axis_style])\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to a Range in Calc with Python\nDESCRIPTION: This code example shows how to apply font effects to a range of cells in a Calc spreadsheet using the ooodev library. It sets the font color to red, a single blue underline on cells 'A1:B1', and applies shadowing. Key dependencies include modules from ooodev.format, ooodev.office.calc, ooodev.gui, and ooodev.loader.lo. Inputs are cell values 'Hello' and 'World', with outputs displaying the formatted range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format import CommonColor\n        from ooodev.office.calc import Calc\n        from ooodev.gui import GUI\n        from ooodev.loader.lo import Lo\n        from ooodev.format.calc.direct.cell.font import FontEffects, FontLine, FontUnderlineEnum\n\n        def main() -> int:\n            with Lo.Loader(connector=Lo.ConnectSocket(), opt=Lo.Options(verbose=True)):\n                doc = Calc.create_doc()\n                sheet = Calc.get_sheet()\n                GUI.set_visible(True, doc)\n                Lo.delay(500)\n                Calc.zoom_value(doc, 400)\n\n                Calc.set_val(value=\"Hello\", sheet=sheet, cell_name=\"A1\")\n                Calc.set_val(value=\"World\", sheet=sheet, cell_name=\"B1\")\n                rng = Calc.get_cell_range(sheet=sheet, range_name=\"A1:B1\")\n\n                font_effects = FontEffects(\n                    color=CommonColor.RED,\n                    underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n                    shadowed=True,\n                )\n                font_effects.apply(rng)\n\n                f_effects = FontEffects.from_obj(rng)\n                assert f_effects.prop_color == CommonColor.RED\n\n                Lo.delay(1_000)\n                Lo.close_doc(doc)\n            return 0\n\n        if __name__ == \"__main__\":\n            SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document and Shape Size Manipulation\nDESCRIPTION: Creates a Draw document, adds a rectangle shape, and modifies its size using the Size class. Demonstrates complete workflow including document creation, shape manipulation, and cleanup.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/size.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.position_size.position_size import Size\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 36\n        height = 36\n        x = round(width / 2)\n        y = round(height / 2)\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        style = Size(width=50, height=50)\n        style.apply(rect.component)\n\n        f_style = Size.from_obj(rect.component)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scale Width/Height Style in Calc with Python\nDESCRIPTION: This code demonstrates retrieving and verifying the width/height scale style from a Calc document. It ensures the style name matches expected parameters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = ScalePagesWidthHeight.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Applying Frame Style to Text Frame\nDESCRIPTION: This snippet showcases the application of a pre-defined frame style to a text frame in a LibreOffice Writer document using the UNO API in Python. It inserts a text frame at a specific position and size, applies the 'Frame' style, and assigns a specific color to the frame. This operation relies on earlier imports and the established UNO environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/frame.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntxt = \"Hello\"\nWrite.append(cursor=cursor, text=txt)\n\nstyle = Frame(name=StyleFrameKind.FRAME)\n# create a frame and apply the frame style to the text frame\ntf = Write.add_text_frame(\n    cursor=cursor,\n    ypos=UnitMM(20),\n    text=\"World\",\n    width=UnitMM(40),\n    height=UnitMM(40),\n    styles=[style],\n)\n\n# create a frame area color and apply it to the frame style\nfrm_area_color = FrameAreaColor(color=StandardColor.BRICK_LIGHT2, style_name=StyleFrameKind.FRAME)\nfrm_area_color.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Using Adapter Pattern for Window Listeners in Python\nDESCRIPTION: An implementation using the adapter pattern from the ooodev library to monitor window events. This approach uses event registration methods rather than interface inheritance, allowing selective subscription to specific window events without implementing all interface methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# region Imports\nfrom __future__ import annotations\nfrom typing import TYPE_CHECKING, Any, cast\n\nfrom ooodev.events.args.event_args import EventArgs\nfrom ooodev.adapter.awt.top_window_events import TopWindowEvents\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\nfrom com.sun.star.awt import XWindow\n\n\nif TYPE_CHECKING:\n    # only need types in design time and not at run time.\n    from com.sun.star.lang import EventObject\n# endregion Imports\n\n# region DocWindow Class\n\nclass DocWindowAdapter:\n    def __init__(self) -> None:\n        super().__init__()\n        self.closed = False\n        loader = Lo.load_office(Lo.ConnectPipe())\n        self.doc = Write.create_doc(loader=loader)\n\n        # Event handlers are defined as methods on the class.\n        # However class methods are not callable by the event system.\n        # The solution is to assign the method to class fields and use them to add the event callbacks.\n        self._fn_on_disposing = self.on_disposing\n        self._fn_on_window_activated = self.on_window_activated\n        self._fn_on_window_closed = self.on_window_closed\n        self._fn_on_window_closing = self.on_window_closing\n        self._fn_on_window_deactivated = self.on_window_deactivated\n        self._fn_on_window_minimized = self.on_window_minimized\n        self._fn_on_window_normalized = self.on_window_normalized\n        self._fn_on_window_opened = self.on_window_opened\n\n        self._top_events = TopWindowEvents(add_window_listener=True)\n\n        self._top_events.add_event_top_window_events_disposing(self._fn_on_disposing)\n        self._top_events.add_event_window_opened(self._fn_on_window_opened)\n        self._top_events.add_event_window_activated(self._fn_on_window_activated)\n        self._top_events.add_event_window_closed(self._fn_on_window_closed)\n        self._top_events.add_event_window_closing(self._fn_on_window_closing)\n        self._top_events.add_event_window_deactivated(self._fn_on_window_deactivated)\n        self._top_events.add_event_window_minimized(self._fn_on_window_minimized)\n        self._top_events.add_event_window_normalized(self._fn_on_window_normalized)\n        self._top_events.add_event_window_opened(self._fn_on_window_opened)\n\n        GUI.set_visible(True, self.doc)\n        # triggers 2 opened and 2 activated events\n\n    def on_window_opened(self, source: Any, event_args: EventArgs, *args, **kwargs) -> None:\n        \"\"\"Is invoked when a window is activated.\"\"\"\n        event = cast(\"EventObject\", event_args.event_data)\n        print(\"WA: Opened\")\n        x_win = Lo.qi(XWindow, event.Source)\n        GUI.print_rect(x_win.getPosSize())\n\n    def on_window_activated(self, source: Any, event_args: EventArgs, *args, **kwargs) -> None:\n        \"\"\"Is invoked when a window is activated.\"\"\"\n        print(\"WA: Activated\")\n        print(f\"  Title bar: {GUI.get_title_bar()}\")\n\n    def on_window_deactivated(self, source: Any, event_args: EventArgs, *args, **kwargs) -> None:\n        \"\"\"Is invoked when a window is deactivated.\"\"\"\n        print(\"WA: Minimized\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving LibreOffice Shared Python Scripts Directory in Python\nDESCRIPTION: Static read-only property that returns the path to the LibreOffice shared Python scripts directory, such as 'C:\\Program Files\\LibreOffice\\share\\Scripts\\python'. This is used for accessing shared Python script resources.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/session.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSession.shared_py_scripts\n```\n\n----------------------------------------\n\nTITLE: Accessing a Draw Page by Index in Calc\nDESCRIPTION: Access a specific draw page by its index in a `SpreadsheetDrawPages` collection. Requires initializing `CalcDoc` with a loaded Calc document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/spreadsheet_draw_pages.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> doc.draw_pages[0]\n<ooodev.calc.SpreadsheetDrawPage object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Building Slide Show Playlist in Python\nDESCRIPTION: Creates a playlist by filling an index container with slide references and inserting it into a name container. Requires access to slide indices and LibreOffice UNO components like XSingleServiceFactory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter18.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in the Draw class\n@classmethod\ndef build_play_list(cls, doc: XComponent, custom_name: str, *slide_idxs: int) -> XNameContainer:\n    play_list = cls.get_play_list(doc)\n    try:\n        xfactory = Lo.qi(XSingleServiceFactory, play_list, True)\n        slides_con = Lo.qi(XIndexContainer, xfactory.createInstance(), True)\n\n        Lo.print(\"Building play list using:\")\n        j = 0\n        for i in slide_idxs:\n            try:\n                slide = cls._get_slide_doc(doc, i)\n            except IndexError as ex:\n                Lo.print(f\"  Error getting slide for playlist. Skipping index {i}\")\n                Lo.print(f\"    {ex}\")\n                continue\n            slides_con.insertByIndex(j, slide)\n            j += 1\n            Lo.print(f\"  Slide No. {i+1}, index: {i}\")\n\n        play_list.insertByName(custom_name, slides_con)\n        Lo.print(f'Play list stored under the name: \"{custom_name}\"')\n        return play_list\n    except Exception as e:\n        raise DrawError(\"Unable to build play list.\") from e\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Document and Setting Up Gradient\nDESCRIPTION: This snippet demonstrates how to import the necessary libraries, establish a document, and apply a deep ocean gradient preset to a rectangle shape on the drawing page. It illustrates the entire process, from document creation to applying style and closing the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.writer.direct.shape.area import Gradient as ShapeGradient\nfrom ooodev.format.writer.direct.shape.area import PresetGradientKind\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.office.draw import Draw\n\ndef main() -> int:\n    \"\"\"Main Entry Point\"\"\"\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        page = Write.get_draw_page(doc)\n        rect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\n        style = ShapeGradient.from_preset(preset=PresetGradientKind.DEEP_OCEAN)\n        style.apply(rect)\n        page.add(rect)\n\n        f_style = ShapeGradient.from_obj(rect)\n        assert f_style.prop_inner == style.prop_inner\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Font Style from Legend in Calc Chart with Python\nDESCRIPTION: This snippet illustrates how to retrieve the current font style of the legend in a Calc chart. It uses the `style_font_get()` method to obtain the font style object, which can then be inspected to determine the current font properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/font_only.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n\nf_style = legend.style_font_get()\nassert f_style is not None\"\n```\n\n----------------------------------------\n\nTITLE: Applying Legend Font Formatting in Python\nDESCRIPTION: Shows the specific code for applying font formatting to a chart legend. Sets bold text, purple color, and 12pt font size.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/font.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.font import Font as LegendFont\n# ... other code\n\nlegend_font_style = LegendFont(b=True, color=StandardColor.PURPLE, size=12)\nChart2.style_legend(chart_doc=chart_doc, styles=[legend_font_style])\n```\n\n----------------------------------------\n\nTITLE: Loading Document - Basic vs Python Comparison\nDESCRIPTION: Shows how to load a document in both Basic and Python, demonstrating the simplified syntax in Python using ooodev\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_9\n\nLANGUAGE: vbscript\nCODE:\n```\nDim oSM, oDesk, oDoc As Object\nSet oSM = CreateObject(\"com.sun.star.ServiceManager\")\nSet oDesk = oSM.createInstance(\"com.sun.star.frame.Desktop\")\nSet oDoc = oDesk.loadComponentFromURL(\n\"file:///C:/tmp/testdoc.odt\", \"_blank\", 0, noArgs())\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\n\nloader = Lo.load_office()\ndoc = Write.open_doc(fnm=\"file:///C:/tmp/testdoc.odt\", loader=loader)\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Area Color in Writer\nDESCRIPTION: This snippet shows how to set the color of the footer area in a Writer document using the FooterAreaColor class from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.footer.area import Color as FooterAreaColor\n# ... other code\n\nfooter_color_style = FooterAreaColor(\n    color=StandardColor.GOLD_LIGHT2, style_name=footer_style.prop_style_name\n)\nStyler.apply(doc, footer_style, footer_color_style)\n```\n\n----------------------------------------\n\nTITLE: Calc Chart Setup and Transparency Styling\nDESCRIPTION: This Python code snippet sets up a Calc document, accesses a chart, and styles the chart's data series transparency. It uses the `ooodev` library to open a Calc document, access a chart, and set the area transparency of the first data series in the chart to 50%.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BLUE_LIGHT3,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient_from_preset(\n            preset=PresetGradientKind.TEAL_BLUE,\n        )\n\n        ds = chart_doc.get_data_series()[0]\n        ds.style_area_transparency_transparency(50)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteTables Class with Sphinx\nDESCRIPTION: Sphinx directive for auto-documenting the WriteTables class from the ooodev.write.table.write_tables module. Includes configuration for showing all members, undocumented members, inheritance, inherited members and specific special methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/write_tables.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.table.write_tables.WriteTables\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __getitem__,  __next__\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Gradient to Chart Title\nDESCRIPTION: Demonstrates applying a preset gradient to a chart title using PresetGradientKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.area import Gradient as TitleGrad, PresetGradientKind\n\n# ... other code\ntitle_grad = TitleGrad.from_preset(chart_doc, PresetGradientKind.PASTEL_DREAM)\nChart2.style_title(chart_doc=chart_doc, styles=[title_grad])\n```\n\n----------------------------------------\n\nTITLE: Applying Diagonal Borders using ooodev in Python\nDESCRIPTION: This snippet applies diagonal borders (up and then down) to a range of cells using the `diagonal_up` or `diagonal_down` attributes in the `Borders` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        rng_obj = Calc.get_range_obj(\"B2:F6\")\n        cr = Calc.get_cell_range(sheet, rng_obj)\n        borders = Borders(border_side=Side(), diagonal_up=Side(color=CommonColor.RED))\n        Styler.apply(cr, borders)\n```\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        rng_obj = Calc.get_range_obj(\"B2:F6\")\n        cr = Calc.get_cell_range(sheet, rng_obj)\n        borders = Borders(border_side=Side(), diagonal_down=Side(color=CommonColor.RED))\n        Styler.apply(cr, borders)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Footer Background Color in Calc using Python\nDESCRIPTION: Demonstrates how to apply a background color to a document footer in LibreOffice Calc. This example creates a FooterColor style with a light green color and applies it to the document's default page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/background.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# .. other code\nfooter_color_style = FooterColor(\n    color=StandardColor.GREEN_LIGHT2, style_name=CalcStylePageKind.DEFAULT\n)\nStyler.apply(doc, footer_style, footer_color_style)\n```\n\n----------------------------------------\n\nTITLE: Applying Text Attributes to Chart2 Data Series in Python\nDESCRIPTION: Shows how to apply text attributes like category name, legend symbol, series name and text wrapping to a chart data series using the TextAttribs class. Uses Chart2.style_data_series() to format all data points in a series at once.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import TextAttribs\n# ... other code\n\ntext_attribs = TextAttribs(\n    show_category_name=True,\n    show_legend_symbol=True,\n    show_series_name=True,\n    auto_text_wrap=True,\n)\nChart2.style_data_series(chart_doc=chart_doc, styles=[text_attribs])\n```\n\n----------------------------------------\n\nTITLE: Obtaining Document Styles via XStyleFamiliesSupplier\nDESCRIPTION: Converts document instance to XStyleFamiliesSupplier to access document styles through LibreOffice interfaces\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nxsupplier = Lo.qi(XStyleFamiliesSupplier, doc)\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Image to Paragraph Style in Python\nDESCRIPTION: This snippet sets up a document, applies a preset image to a paragraph style, and verifies the applied style. It utilizes the OOoDev library to interact with the Writer document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_img.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.area import Gradient as ParaStyleGradient, StyleParaKind\\nfrom ooodev.format.writer.modify.para.area import PresetImageKind\\n\\ndef main() -> int:\\n    with Lo.Loader(Lo.ConnectPipe()):\\n        doc = Write.create_doc()\\n        GUI.set_visible(doc=doc)\\n        Lo.delay(300)\\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\\n\\n        para_area_img_style = ParaStyleImg.from_preset(\\n            preset=PresetImageKind.COFFEE_BEANS, style_name=StyleParaKind.STANDARD\\n        )\\n        para_area_img_style.apply(doc)\\n\\n        style_obj = ParaStyleImg.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\\n        Lo.delay(1_000)\\n\\n        Lo.close_doc(doc)\\n\\n    return 0\\n\\n\\nif __name__ == \"__main__\":\\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Paper Format from Style in Calc\nDESCRIPTION: This code snippet demonstrates how to retrieve the paper format settings from an existing Calc style using the `PaperFormat.from_style()` method from the `ooodev` library. It asserts that the retrieved style name matches the expected default page style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\n        style_obj = PaperFormat.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Transparency to Draw Shape\nDESCRIPTION: Example demonstrates creating a rectangle shape and applying gradient transparency along with color styling. Uses the ooodev library to create a Draw document, draw a rectangle, and apply gradient transparency with specific parameters including style, angle, border and intensity range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/transparency/gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\nfrom ooodev.format.draw.modify.transparency import Gradient\nfrom ooodev.format.draw.modify.transparency import GradientStyle, IntensityRange\nfrom ooodev.format.draw.modify.area.color import Color as AreaColor\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n        style_name_kind = FamilyGraphics.DEFAULT_DRAWING_STYLE\n        style_family_kind = DrawStyleFamilyKind.GRAPHICS\n        style_color = AreaColor(\n            color=StandardColor.BLUE_LIGHT2, style_name=style_name_kind, style_family=style_family_kind\n        )\n        style = Gradient(\n            style=GradientStyle.LINEAR,\n            angle=45,\n            border=22,\n            grad_intensity=IntensityRange(0, 100),\n            style_name=style_name_kind,\n            style_family=style_family_kind,\n        )\n        doc.apply_styles(style_color, style)\n\n        f_style = Gradient.from_style(\n            doc=doc.component,\n            style_name=style_name_kind,\n            style_family=style_family_kind,\n        )\n        assert f_style.prop_style_name == str(style_name_kind)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Properties in Python\nDESCRIPTION: This snippet illustrates how to retrieve properties from a table created with the ooodev library. Key dependencies include the TableProperties class. The snippet shows both direct and alternative methods for fetching table properties, asserting that the retrieved table name matches expectations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n# getting the table properties\ntbl_props_style = TableProperties.from_obj(table.component)\n# or tbl_props_style = table.style_direct.style_table_props_get()\nassert tbl_props_style.prop_name == \\\"My_Table\\\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Highlight Style Properties\nDESCRIPTION: Shows how to retrieve the highlighting properties from already formatted text by moving the cursor to the highlighted region and using the Highlight.from_obj method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/highlight.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncursor.gotoStart(False)\ncursor.goRight(pos, False)\ncursor.goRight(4, True)\nhl = Highlight.from_obj(cursor)\nassert hl.prop_color == CommonColor.YELLOW_GREEN\ncursor.gotoEnd(False)\n```\n\n----------------------------------------\n\nTITLE: Get Text Spacing from Shape\nDESCRIPTION: Shows how to retrieve the current text spacing values from a shape using the TextSpacing.from_obj() method. Returns a TextSpacing object containing the spacing properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text/spacing.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.text.text import Spacing as TextSpacing\n# ... other code\n\n# get the properties from the shape\nf_style = TextSpacing.from_obj(rect.component)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Setting up and applying paragraph area color style in Writer\nDESCRIPTION: This snippet demonstrates how to set up a document, create a paragraph area color style, and apply it to the Standard paragraph style. It also shows how to retrieve the style information from the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_color.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.area import Color as ParaStyleColor, StyleParaKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_area_color_style = ParaStyleColor(\n            color=StandardColor.GREEN_LIGHT2, style_name=StyleParaKind.STANDARD\n        )\n        para_area_color_style.apply(doc)\n\n        style_obj = ParaStyleColor.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Goal Seek: Annual Interest Formula Calculation\nDESCRIPTION: Uses goal seek to determine capital value based on annual interest formula with flexible cell references for variables\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# in goal_seek.py\ncell1 = sheet.get_cell(cell_name=\"B1\")\ncell2 = cell1.get_cell_down()  # B2\ncell3 = cell2.get_cell_down()  # B3\ncell4 = cell3.get_cell_down()  # B4\n\ncell1.set_val(100000)\n# n, no. of years\ncell2.set_val(1)\n# i, interest rate (7.5%)\ncell3.set_val(0.075)\n# formula\ncell4.set_val(\"=B1*B2*B3\")\nx = cell1.goal_seek(\n    gs=gs, formula_cell_name=cell4.cell_obj, result=15000\n)\nprint(\n    (\n        f\"x == {x} when x*\"\n        f\"{cell2.get_val()}*\"\n        f\"{cell3.get_val()}\"\n        \" == 15000\\n\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Running Draw Animation Example (Linux/Mac)\nDESCRIPTION: Command to run the animation example on Linux or Mac OS using a direct path to the start.py file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Animate_Bike/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Draw/Animate_bike/start.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Image Background in Python\nDESCRIPTION: Demonstrates how to retrieve the current image background of a chart using the ChartImg.from_obj method. This can be used to verify the applied image or for further processing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = ChartImg.from_obj(chart_doc, chart_doc.getPageBackground())\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Applying Color to Chart Title\nDESCRIPTION: Demonstrates how to apply a background color to a chart title using TitleBgColor class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.area import Color as TitleBgColor\n# ... other code\n\ntitle_color = TitleBgColor(color=StandardColor.DEFAULT_BLUE)\nChart2.style_title(chart_doc=chart_doc, styles=[title_color])\n```\n\n----------------------------------------\n\nTITLE: Displaying Shape Properties - Python\nDESCRIPTION: A utility call to display properties of a given shape. This is helpful for debugging or understanding the available attributes of shapes in the context of OpenOffice presentations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n        Props.show_obj_props(\"Shape\", shape)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Interval Marks on Y-Axis in Python\nDESCRIPTION: This snippet sets the major and minor interval marks for the y-axis of a chart, which can help in defining the granularity of the axis markings for better data representation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/positioning.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.chart.chart_axis_mark_position import ChartAxisMarkPosition\nfrom ooodev.format.inner.direct.chart2.axis.positioning.interval_marks import MarkKind\n# ... other code\n\nchart_doc.axis_y.style_axis_pos_interval_marks(\n    major=MarkKind.OUTSIDE,\n    minor=MarkKind.NONE,\n    pos=ChartAxisMarkPosition.AT_LABELS_AND_AXIS,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Floor Custom Gradient in Python\nDESCRIPTION: This snippet demonstrates how to apply a custom gradient to the background of a chart's floor using the `style_area_gradient()` method. It uses `GradientStyle.LINEAR`, sets the angle to 45 degrees, and defines a color range from dark blue to light blue.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\nfloor = chart_doc.first_diagram.floor\nfloor.style_area_gradient(\n    style=GradientStyle.LINEAR,\n    angle=45,\n    grad_color=ColorRange(StandardColor.BLUE_DARK3, StandardColor.BLUE_LIGHT2),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Event Dispatching - Python\nDESCRIPTION: Implements two functions for handling events during dispatching: one for when dispatching begins and another for after it has occurred. These functions print messages based on the event commands.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef on_dispatching(source: Any, event: DispatchCancelArgs) -> None:\n    if event.cmd == \"About\":\n        print(\"About dispatch canceled\")\n        event.cancel = True\n        return\n    print(f\"Dispatching: {event.cmd}\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_dispatched(source: Any, event: DispatchArgs) -> None:\n    print(f\"Dispatched: {event.cmd}\")\n```\n\n----------------------------------------\n\nTITLE: Simple Drop Caps Implementation\nDESCRIPTION: Demonstrates basic drop caps application to a paragraph with a single character count.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/drop_caps.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\ndc = DropCaps(count=1)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[dc])\n```\n\n----------------------------------------\n\nTITLE: Initializing Calc Document and Styling Chart\nDESCRIPTION: This code initializes a LibreOffice Calc document, opens a specified spreadsheet, and styles the chart's border and area gradient using the `ooodev` library. It also demonstrates how to set the orientation of the chart's data series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/options.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\nfrom ooodev.format.chart2.direct.series.data_series.options import Orientation\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \\\"tmp\\\" / \\\"piechart_3d.ods\\\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\\\"A1\\\"]goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BLUE_LIGHT3,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient_from_preset(\n            preset=PresetGradientKind.TEAL_BLUE,\n        )\n\n        orient = Orientation(chart_doc=chart_doc.component, clockwise=True, angle=45)\n        Chart2.style_data_series(chart_doc=chart_doc.component, styles=[orient])\n\n        # f_style = ds.style_label_border_line_get()\n        # assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \\\"__main__\\\":\n    SystemExit(main())\n\"\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: Demonstrates the structure of an EventArgsCallbackT callback function for the CtlFixedText class.  The callback includes the source of the event, the event arguments, and the CtlFixedText control source.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_fixed_text.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlFixedText, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding a Rectangle to a Spreadsheet Sheet in Python\nDESCRIPTION: This code snippet demonstrates how to add a rectangle shape to a spreadsheet sheet using the SpreadsheetDrawPage class. It creates a Calc document, retrieves the first sheet, and then draws a rectangle with specified coordinates and dimensions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/spreadsheet_draw_page.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> sheet = doc.sheets[0]\n>>> rect = sheet.draw_page.draw_rectangle(x=100, y=10, width=50, height=20)\n>>> rect\n<ooodev.draw.shapes.rectangle_shape.RectangleShape object at 0x000001B636EA3490>\n```\n\n----------------------------------------\n\nTITLE: Setting Layout Settings in Calc\nDESCRIPTION: This code snippet demonstrates how to set layout settings for a Calc document using the `LayoutSettings` class from the `ooodev` library. It sets the page layout to mirrored, numbering type to uppercase letters, and enables horizontal and vertical alignment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.page import LayoutSettings, PageStyleLayout\n        from ooodev.format.calc.modify.page.page import NumberingTypeEnum, CalcStylePageKind\n        # ... other code\n\n        style = LayoutSettings(\n            layout=PageStyleLayout.MIRRORED,\n            numbers=NumberingTypeEnum.CHARS_UPPER_LETTER,\n            align_hori=True,\n            align_vert=True,\n        )\n        style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Setting up Cell Protection Example in LibreOffice Calc with Python\nDESCRIPTION: Complete example demonstrating how to set up a Calc document, create a cell with content, and apply cell protection properties. The script connects to LibreOffice, creates a document, adds content to cell A1, applies protection settings, and verifies the settings were applied correctly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/cell_protection.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(100)\n\n        cell = sheet[\"A1\"]\n        cell.value = \"Hello\"\n        cell.style_protection(\n            hide_all=False,\n            hide_formula=True,\n            protected=True,\n            hide_print=True,\n        )\n\n        f_style = cell.style_protection_get()\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Removing Borders from Range using ooodev in Python\nDESCRIPTION: This snippet illustrates how to clear all borders from a range by applying the `empty` border style after initially setting it to default.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        rng_obj = Calc.get_range_obj(\"B2:F6\")\n        cr = Calc.get_cell_range(sheet, rng_obj)\n        Styler.apply(cr, Borders().default)\n        # ...\n        Styler.apply(cr, Borders().empty)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Character Border Padding from a Writer Style\nDESCRIPTION: Code snippet showing how to retrieve the border padding configuration from an existing character style. It uses the from_style static method to get a Padding object from a style name in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/borders.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Padding.from_style(doc=doc, style_name=StyleCharKind.EXAMPLE)\nassert style_obj.prop_style_name == str(StyleCharKind.EXAMPLE)\n```\n\n----------------------------------------\n\nTITLE: Running Python Script for Password-Protected Spreadsheet (Linux/Mac)\nDESCRIPTION: Command for Linux/Mac systems to run the Python script that opens a password-protected spreadsheet. The command specifies the relative path to both the script and the ODS file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Calc/Show_Sheet/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Calc.Show_Sheet/start.py --show --file \"tests/fixtures/calc/totals.ods\"\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for font_only Module in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the font_only module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.modify.font.font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.draw.modify.font.font_only\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Background to a Chart using ooodev\nDESCRIPTION: This code applies a green 30-degree hatch background to a chart using the ChartHatch class. It also adds a dark green border with a specified width to the chart background.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.general.area import Hatch as ChartHatch, PresetHatchKind\n# ... other code\n\nchart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=0.7)\nchart_hatch = ChartHatch.from_preset(chart_doc, PresetHatchKind.GREEN_30_DEGREES)\nChart2.style_background(chart_doc=chart_doc, styles=[chart_hatch, chart_bdr_line])\n```\n\n----------------------------------------\n\nTITLE: Setting Page Format in Python for LibreOffice Writer\nDESCRIPTION: This snippet shows an alternative method to set the page format to A4 using the PaperFormat class from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.page import PaperFormat, PaperFormatKind\n# ...\n\npage_size_style = PaperFormat.from_preset(preset=PaperFormatKind.A4)\npage_size_style.apply(doc.component)\n```\n\n----------------------------------------\n\nTITLE: Adding Button Control with Event Handler in Python WriteForm\nDESCRIPTION: Demonstrates how to create a Writer document, add a form, insert a button control, and attach an event handler. The example shows form creation, button placement with coordinates, and event handling implementation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_form.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\nfrom ooodev.write import Write, WriteDoc\nfrom ooodev.events.args.event_args import EventArgs\nfrom ooodev.form.controls import FormCtlButton\n\ndoc = WriteDoc(Write.create_doc())\ndoc.set_visible()\nfrm = doc.draw_page.forms.add_form(\"MainForm\")\nprint(frm.name)\nbtn = frm.insert_control_button(x=10, y=10, width=40, height=10, label=\"Button Test\")\nbtn.add_event_action_performed(on_btn_action_preformed)\n\ndef on_btn_action_preformed(\n    src: Any, event: EventArgs, control_src: FormCtlButton, *args, **kwargs\n) -> None:\n    print(\n        f\"Action Performed: '{control_src.model.Label}', Control Name: {control_src.name}\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Footer Background Color in Calc using Python\nDESCRIPTION: Shows how to retrieve the background color properties from an existing page style in LibreOffice Calc. The code creates a FooterColor object from an existing style and verifies the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/background.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# .. other code\nstyle_obj = FooterColor.from_style(\n    doc=doc, style_name=CalcStylePageKind.DEFAULT\n)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Applying Writer Page Header Formatting in Python\nDESCRIPTION: This code demonstrates creating a Writer document and applying header formatting. It initializes a document, sets up a header with specific properties including height, spacing, and margins, and applies the style to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/header.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.header import Header, WriterStylePageKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        header_style = Header(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            spacing_dyn=True,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=WriterStylePageKind.STANDARD,\n        )\n        header_style.apply(doc)\n\n        style_obj = Header.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Navigating Column Objects in Python\nDESCRIPTION: Shows how to use the 'next' and 'prev' properties of ColObj to navigate between columns. Attempting to go out of range results in an IndexError.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/col_obj.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.col_obj import ColObj\n>>> \n>>> c_col  = ColObj(\"C\")\n>>> c_col.next\nColObj(value='D')\n\n>>> c_col.next.next\nColObj(value='E')\n\n>>> c_col.prev     \nColObj(value='B')\n\n>>> a_col = c_col.prev.prev\n>>> a_col.prev\nIndexError\n```\n\n----------------------------------------\n\nTITLE: Accessing Linguistic Properties in LibreOffice with Python\nDESCRIPTION: This snippet demonstrates how to access linguistic properties in LibreOffice using the Python API. It retrieves an instance of XLinguProperties and displays its properties using the Props.show_props method. The snippet requires the Lo, Write, and Props modules, which are assumed to be defined elsewhere in the project.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"# code fragment from lingo example\nlingu_props = Write.get_lingu_properties()\nProps.show_props(\"Linguistic Manager\", lingu_props)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cell Style in Document\nDESCRIPTION: Static method that creates a new cell style in a Calc document using the CellStyles family. The style is created as an XStyle instance and inserted into the style families container.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter22.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef create_cell_style(doc: XSpreadsheetDocument, style_name: str) -> XStyle:\n    comp_doc = Lo.qi(XComponent, doc, raise_err=True)\n    style_families = Info.get_style_container(doc=comp_doc, family_style_name=\"CellStyles\")\n    style = Lo.create_instance_msf(XStyle, \"com.sun.star.style.CellStyle\", raise_err=True)\n\n    try:\n        style_families.insertByName(style_name, style)\n        return style\n    except Exception as e:\n        raise Exception(f\"Unable to create style: {style_name}\") from e\n```\n\n----------------------------------------\n\nTITLE: Modifying a Specific Data Point Label in a Chart\nDESCRIPTION: This code changes the appearance of a specific data point label in the chart. It accesses the properties of the first data point in the series and modifies its font settings to emphasize it differently from other labels.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# end of Chart2View._pie_3d_chart() in chart_2_views.py\n# ...\ntry:\n    props = Chart2.get_data_point_props(chart_doc=chart_doc, series_idx=0, idx=0)\n    Props.set(\n        props,\n        CharHeight=14.0,\n        CharColor=CommonColor.WHITE,\n        CharWeight=FontWeight.BOLD\n    )\nexcept mEx.NotFoundError:\n    Lo.print(\"No Properties found for chart.\")\nreturn chart_doc\n```\n\n----------------------------------------\n\nTITLE: Range Text Orientation in Python\nDESCRIPTION: Demonstrates how to apply text orientation to a range of cells with vertical stacking.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/alignment.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrng = sheet.rng(\"A1:B1\")\nsheet.set_array(values=[[\"Hello\", \"World\"]], range_obj=rng)\ncell_rng = sheet.get_range(range_obj=rng)\ncell_rng.style_align_orientation(vert_stack=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Background Color in Calc with Python\nDESCRIPTION: This snippet demonstrates how to apply a background color to a Calc page. It creates a PageStyleColor object with a light green color for the default page style and applies it to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/background.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# .. other code\npage_color_style = PageStyleColor(\n    color=StandardColor.GREEN_LIGHT2, style_name=CalcStylePageKind.DEFAULT\n)\npage_color_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Applying Cumulative Borders using ooodev in Python\nDESCRIPTION: This snippet demonstrates applying multiple border styles to a cell, retaining previous styles. It applies red and blue diagonal borders cumulatively.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        cell_obj = Calc.get_cell_obj(\"B2\")\n        Calc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\n        cell = Calc.get_cell(sheet, cell_obj)\n\n        border = Borders(diagonal_up=Side(color=CommonColor.RED))\n        Styler.apply(cell, border)\n\n        borders = Borders(diagonal_down=Side(color=CommonColor.BLUE))\n        Styler.apply(cell, borders)\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart2 Wall/Floor Borders in Python OOO Dev Tools\nDESCRIPTION: Complete example showing how to set up and apply border line properties to chart walls and floors. It opens a Calc document, gets a chart, and applies different styles to the chart background, wall, and floor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.wall.borders import LineProperties as WallLineProperties\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart3d.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_DARK1, width=1.0)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_bdr_line])\n\n        wall_bdr_line = WallLineProperties(\n            color=StandardColor.PURPLE_DARK2, width=1.2, transparency=30\n        )\n        Chart2.style_wall(chart_doc=chart_doc, styles=[wall_bdr_line])\n\n        floor_bdr_line = WallLineProperties(\n            color=StandardColor.PURPLE_DARK1, width=0.8, transparency=20\n        )\n        Chart2.style_floor(chart_doc=chart_doc, styles=[floor_bdr_line])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document with Shape Image Fill\nDESCRIPTION: Creates a LibreOffice Draw document, adds a rectangle shape, and applies a preset coffee beans image fill. Demonstrates document setup, shape creation, and image fill application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/img.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format.draw.direct.area import Img as ShapeImage\nfrom ooodev.format.draw.direct.area import PresetImageKind\nfrom ooodev.office.draw import Draw\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Draw.create_draw_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_75_PERCENT)\n\n        slide = Draw.get_slide(doc)\n\n        width = 36\n        height = 36\n        x = int(width / 2)\n        y = int(height / 2) + 20\n\n        rec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\n        style = ShapeImage.from_preset(preset=PresetImageKind.COFFEE_BEANS)\n        style.apply(rec)\n\n        f_style = ShapeImage.from_obj(rec)\n        assert f_style.prop_size\n        assert f_style.prop_size == style.prop_size\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gradient Properties from Shape\nDESCRIPTION: Demonstrates how to retrieve gradient properties from an existing shape using the ShapeGradient.from_obj() method and verify gradient settings through property comparison.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/gradient.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Gradient as ShapeGradient\n# ... other code\n\n# get the gradient from the shape\nf_style = ShapeGradient.from_obj(rec)\n# assert the color is the same\nassert f_style.prop_inner == style.prop_inner\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Text Animation in LibreOffice Draw\nDESCRIPTION: Creates a Draw document, adds a rectangle shape with text, and applies a scroll back-and-forth animation. Uses the ScrollBackForth class to configure animation properties like direction, speed, and count.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/animation/animation.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\n\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.text.animation import ScrollBackForth\nfrom ooodev.format.draw.direct.text.animation import TextAnimationDirection\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 50\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        cursor = rect.get_shape_text_cursor()\n        cursor.append_para(\"Hello World!\")\n\n        txt_scroll_back = ScrollBackForth(\n            start_inside=True,\n            visible_on_exit=True,\n            increment=0.6,\n            delay=350,\n            direction=TextAnimationDirection.UP,\n            count=6,\n        )\n        txt_scroll_back.apply(rect.component)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Simplified Document Access\nDESCRIPTION: Shows the most concise way to access the current document in both Basic and Python\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_11\n\nLANGUAGE: vbscript\nCODE:\n```\nSet oDoc = ThisComponent\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\ndoc = Lo.ThisComponent\n```\n\n----------------------------------------\n\nTITLE: Setting a Title for a Chart in Python with LibreOffice\nDESCRIPTION: The set_title() method assigns a string from a specified cell in the spreadsheet as the title of the chart. This process utilizes several interfaces crucial for chart text formatting and presentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# part of _col_chart() in Chart2View class\nChart2.set_title(chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name=\"A1\"))\n```\n\n----------------------------------------\n\nTITLE: Getting Text Properties from a Range in Python\nDESCRIPTION: This code retrieves the text properties from a specified range and ensures that the retrieved style is valid, using Properties to access the styling attributes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nf_style = Properties.from_obj(rng)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scale Reduce/Enlarge Style in Calc with Python\nDESCRIPTION: This example retrieves a scale reduce/enlarge style from a Calc document and checks that its style name matches the expected value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = ScaleReduceEnlarge.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Footer Background Image in Calc using Python\nDESCRIPTION: Demonstrates how to apply a background image to a document footer in LibreOffice Calc. This example uses a preset coffee beans image and applies it to the document's default page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/background.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# .. other code\nfooter_img_style = FooterImg.from_preset(\n    preset=PresetImageKind.COFFEE_BEANS, style_name=CalcStylePageKind.DEFAULT\n)\nStyler.apply(doc, footer_style, footer_img_style)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart2 Legend Transparency\nDESCRIPTION: This snippet shows how to set the transparency of a Chart2 legend using the LegendTransparency class. It requires a background color to be visible.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nooodev.format.chart2.direct.legend.transparency import Transparency as LegendTransparency\n\n# ... other code\nlegend_bg_transparency_style = LegendTransparency(50)\nChart2.style_legend(\n    chart_doc=chart_doc, styles=[legend_bg_transparency_style, legend_color_style]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Alignment Setup in Python\nDESCRIPTION: Basic setup code for text alignment examples showing imports and main structure. Sets up LibreOffice connection and creates a new Calc document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.alignment import TextAlign\nfrom ooodev.format.calc.direct.cell.alignment import HoriAlignKind, VertAlignKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        cell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\n        style = TextAlign(hori_align=HoriAlignKind.CENTER, vert_align=VertAlignKind.MIDDLE)\n        Calc.set_val(value=\"Hello\", cell=cell, styles=[style])\n\n        f_style = TextAlign.from_obj(cell)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Pages in Impress Document in Python\nDESCRIPTION: This snippet demonstrates using the built-in len() method to retrieve the number of pages in an Impress document. Dependency: Requires the ImpressDoc class from the ooodev library. Takes an open document as input and returns the count of slides.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/impress_pages.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> doc = ImpressDoc.open_doc(\"test.odp\")\n>>> len(doc.slides)\n1\n```\n\n----------------------------------------\n\nTITLE: Get Last Form in Draw Page\nDESCRIPTION: Demonstrates how to access the last form in a Draw page using the index `-1`. A new draw document is created, and a form is added to the first slide if there are no forms. Then the last form is accessed using its index. Requires the `DrawDoc` class and the `Draw` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_forms.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc(Draw.create_draw_doc())\n>>> draw_page = doc.slides[0]\n>>> if len(draw_page.forms) == 0:\n...   draw_page.forms.add_form()\n>>> form = draw_page.forms[-1]\n<ooodev.draw.DrawForm object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Page by XDrawPage Object\nDESCRIPTION: Shows how to delete a page by using its underlying `XDrawPage` component. This demonstrates accessing the underlying component and using it for deletion.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_pages.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc.open_doc(\"test.odg\")\n>>> slide = doc.slides[0]\n>>> del doc.slides[slide.component]\n```\n\n----------------------------------------\n\nTITLE: ModelPatternField Class Definition\nDESCRIPTION: This snippet represents the class definition of ModelPatternField.  It is part of the ooodev library and provides functionalities for pattern fields. The class details are automatically generated from the source code by Sphinx.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/model/model_pattern_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ooodev.dialog.dl_control.model.model_pattern_field.ModelPatternField\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Applying Font Formatting to Chart Subtitle\nDESCRIPTION: Demonstrates how to apply the same font effects to the chart subtitle using the style_subtitle method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/font.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_subtitle(chart_doc=chart_doc, styles=[title_font_effect])\n```\n\n----------------------------------------\n\nTITLE: Applying Padding using ooodev in Python\nDESCRIPTION: This snippet shows how to apply padding to a cell with the `Padding` class, which allows setting individual or uniform padding values. Here, left padding of 1.5 is applied to the cell with a blue border.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        cell_obj = Calc.get_cell_obj(\"B2\")\n        Calc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\n        cell = Calc.get_cell(sheet, cell_obj)\n        borders = Borders(border_side=Side(color=CommonColor.BLUE), padding=Padding(left=1.5))\n        Styler.apply(cell, borders)\n```\n\n----------------------------------------\n\nTITLE: Applying Paragraph Borders without Merging\nDESCRIPTION: Example showing how to apply borders to paragraphs without merging. When merge=False, the paragraphs have the same border properties but are not merged together.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\ncursor = Write.get_cursor(doc)\nbdr = Borders(all=Side(line=BorderLineKind.DASH_DOT, color=CommonColor.BLUE_VIOLET), merge=False)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[bdr])\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Using Shape Name to Find and Report Shape Properties (Python)\nDESCRIPTION: This snippet demonstrates how to use a shape's name to find it and report its position and size. It uses the Draw class methods to find the shape by name and report its properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# in show() in draw_picture.py\ns = curr_slide.find_shape_by_name(\"text1\")\nDraw.report_pos_size(s.component)\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Form in Writer Document\nDESCRIPTION: Shows how to access the last form in a document using negative indexing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_forms.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc())\n>>> if len(doc.draw_page.forms) == 0:\n...    doc.draw_page.forms.add_form()\n>>> form = doc.draw_page.forms[-1]\n<ooodev.write.WriteForm object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Image Background to Chart in Python\nDESCRIPTION: Shows how to apply a preset image background to a chart using the ChartImg class and PresetImageKind enum. The example uses the ICE_LIGHT preset image.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.general.area import Img as ChartImg, PresetImageKind\n# ... other code\n\nchart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=0.7)\nchart_img = ChartImg.from_preset(chart_doc, PresetImageKind.ICE_LIGHT)\nChart2.style_background(chart_doc=chart_doc, styles=[chart_img, chart_bdr_line])\n```\n\n----------------------------------------\n\nTITLE: Setting Draw Spacing Values in Python\nDESCRIPTION: Demonstrates how to create a Draw document, add a rectangle with text, and modify its spacing properties. Uses the Spacing class to set spacing above and below text to 5 and 5.5 units respectively.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/indent_space/spacing.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\nfrom ooodev.format.draw.modify.indent_space import Spacing\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n\n        style = Spacing(\n            above=5,\n            below=5.5,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(style)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Range Style in Calc\nDESCRIPTION: This snippet demonstrates how to apply a style to a cell range. It first defines a range, sets the values within that range, and then applies a specified style using the `style_by_name` method of the cell range object. It requires `sheet` object representing a Calc sheet and the `StyleCellKind` enum from `ooodev.format.calc.style`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/cell.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\nrng = sheet.rng(\"A1:B1\")\nsheet.set_array(values=[[101, 22]], range_obj=rng)\ncell_rng = sheet.get_range(range_obj=rng)\ncell_rng.style_by_name(StyleCellKind.ACCENT_1)\"\n```\n\n----------------------------------------\n\nTITLE: Getting Margins from Style in Calc\nDESCRIPTION: This code snippet demonstrates how to retrieve margin settings from an existing style in a Calc document. It utilizes the `Margins.from_style()` method from the `ooodev` library to get the margin properties of the default page style and then asserts that the style name is correct.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\n        style_obj = Margins.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Document - Basic vs Python\nDESCRIPTION: Demonstrates accessing the current document in both Basic and Python using different levels of abstraction\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_10\n\nLANGUAGE: vbscript\nCODE:\n```\nSet oSM = CreateObject(\"com.sun.star.ServiceManager\")\nSet oDesk = oSM.createInstance(\"com.sun.star.frame.Desktop\")\nSet oDoc = oDesk.CurrentComponent\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\n\n_ = Lo.load_office()\ndoc = Write.get_text_doc(Lo.ThisComponent)\n```\n\n----------------------------------------\n\nTITLE: Setting Border Shadow for Page Style in Calc\nDESCRIPTION: Demonstrates how to add a shadow effect to the borders of a page in Calc. This code applies a dark blue shadow with a width of 1.5 units to the default page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/bordes.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nshadow_style = Shadow(\n    color=StandardColor.BLUE_DARK2,\n    width=1.5,\n    style_name=CalcStylePageKind.DEFAULT,\n)\nshadow_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Adding and Subtracting RowObj Instances in Python\nDESCRIPTION: Demonstrates addition and subtraction operations between RowObj instances and integers. Includes example of using sum() function and handling negative results.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/row_obj.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.row_obj import RowObj\n>>> r2 = RowObj(2)\n>>> r5 = r2 + 3\n>>> r5\nRowObj(value=5)\n>>> r3 = r5 - 2\n>>> r3\nRowObj(value=3)\n>>> r8 = r5 + r3\n>>> r8\nRowObj(value=8)\n>>> r6 = sum([r2, r2, r2])\n>>> r6\nRowObj(value=6)\n>>> r2 - r5\nIndexError\n```\n\n----------------------------------------\n\nTITLE: Initializing and Demonstrating Text Flow Customization in LibreOffice Writer using Python\nDESCRIPTION: This snippet initializes the LibreOffice Writer environment, creates a document, and applies paragraph text flow customization using the `ooodev` library. Dependencies include `ooodev.office.write`, `ooodev.gui`, and `ooodev.loader.lo`. The `main` function demonstrates setting up a document, applying hyphenation, and manipulating paragraph text flow. The output is handled within the Writer application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/text_flow.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.writer.direct.para.text_flow import Breaks, BreakType, FlowOptions, Hyphenation\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Write.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        cursor = Write.get_cursor(doc)\n        tf = Hyphenation(auto=True)\n        Write.append_para(cursor=cursor, text=p_txt, styles=[tf])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Spacing Style from Document using Python\nDESCRIPTION: This code retrieves a spacing style from a Writer document, using the 'Spacing' class to confirm the style matches the predefined standard.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/indent_spacing.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Spacing.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Active Sheet Management\nDESCRIPTION: Method for changing the active sheet in a Calc document using XSpreadsheetView interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef set_active_sheet(cls, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> None:\n    ss_view = cls.get_view(doc)\n    if ss_view is None:\n        return\n    ss_view.setActiveSheet(sheet)\n```\n\n----------------------------------------\n\nTITLE: Running the Impress Slide Append Tool as a Module (Cross-Platform)\nDESCRIPTION: Command to run the tool as a Python module from the current example folder. This approach works across different operating systems.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Append_Slides/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Python Sample Config JSON\nDESCRIPTION: Configuration file for oooscript defining a simple Python macro embedding setup. Specifies source file, output name, and single script mode.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/embed_python.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"oooscript\",\n    \"name\": \"python_sample\",\n    \"app\": \"WRITER\",\n    \"version\": \"1.0.0\",\n    \"args\": {\n        \"src_file\": \"sample.py\",\n        \"output_name\": \"python_sample\",\n        \"single_script\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Drop Caps Settings from a Paragraph Style in LibreOffice Writer using Python\nDESCRIPTION: This snippet demonstrates how to retrieve the drop caps settings from an existing paragraph style in a LibreOffice Writer document using the DropCaps.from_style method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/drop_caps.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = DropCaps.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Accessing Master Pages via XMasterPagesSupplier\nDESCRIPTION: Retrieves master pages from a document using the XMasterPagesSupplier interface, accessing the default master page at index 0\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmp_supp = Lo.qi(XMasterPagesSupplier, doc, True)\npgs = mp_supp.getMasterPages()  # XDrawPages\nmaster_page = Lo.qi(XDrawPage, pgs.getByIndex(0))\n```\n\n----------------------------------------\n\nTITLE: Setting X-Axis Position in Chart Using Python\nDESCRIPTION: This snippet demonstrates how to set the positioning of the x-axis in a chart, allowing for additional customization options beyond the default settings provided in the UI.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/positioning.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchart_doc.axis_x.style_axis_pos_position_axis(on_mark=False)\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Gradient to Chart Subtitle in Python\nDESCRIPTION: This snippet demonstrates how to apply a preset gradient to a chart subtitle using the `style_area_gradient_from_preset` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\n# ... other code\n        sub_title = chart_doc.first_diagram.get_title()\n        if sub_title is None:\n            raise ValueError(\"Title not found\")\n\n        sub_title.style_area_gradient_from_preset(\n            preset=PresetGradientKind.PASTEL_DREAM,\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Character Border Shadow in Writer\nDESCRIPTION: Code snippet that demonstrates how to create and apply shadow settings to a character border style in Writer. It configures the shadow color and width properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/borders.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nshadow_style = Shadow(color=StandardColor.BLUE_DARK2, width=1.5, style_name=StyleCharKind.EXAMPLE)\nshadow_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Fetching Text from Individual Shapes in Python\nDESCRIPTION: The `get_shape_text` method retrieves text from a given shape by accessing its text interface and extracting the text using a cursor. It takes a shape object as a parameter and returns the extracted text as a string. It handles potential errors by raising a DrawError.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# in Draw Class (overload method, simplified)\n@classmethod\ndef get_shape_text(cls, shape: XShape) -> str:\n    try:\n        xtext = Lo.qi(XText, shape, True)\n        xtext_cursor = xtext.createTextCursor()\n        xtext_rng = Lo.qi(XTextRange, xtext_cursor, True)\n        text = xtext_rng.getString()\n        return text\n    except Exception as e:\n        raise DrawError(\"Error getting shape text from shape\") from e\n```\n\n----------------------------------------\n\nTITLE: Drawing Regression Curves in OpenOffice Charts\nDESCRIPTION: Method for creating and displaying regression curves on a chart. Handles curve creation, container management, and visualization properties including equation display and formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef draw_regression_curve(cls, chart_doc: XChartDocument, curve_kind: CurveKind) -> None:\n    try:\n        data_series_arr = cls.get_data_series(chart_doc=chart_doc)\n        rc_con = Lo.qi(XRegressionCurveContainer, data_series_arr[0], True)\n        curve = cls.create_curve(curve_kind)\n        rc_con.addRegressionCurve(curve)\n\n        ps = curve.getEquationProperties()\n        Props.set_property(ps, \"ShowCorrelationCoefficient\", True)\n        Props.set_property(ps, \"ShowEquation\", True)\n\n        key = cls.get_number_format_key(chart_doc=chart_doc, nf_str=\"0.00\")  # 2 dp\n        if key != -1:\n            Props.set_property(ps, \"NumberFormat\", key)\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error drawing regression curve\") from e\n```\n\n----------------------------------------\n\nTITLE: Adding Context Menu Items Directly with ActionTriggerItem in LibreOffice Python\nDESCRIPTION: This example shows how to add an 'About' menu entry to a LibreOffice Calc context menu using the ActionTriggerItem class directly. It intercepts the context menu, inserts the 'About' command after the 'DeleteCell' command, and sets the action to execute the modified menu without using the ContextCreator class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/about_example.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any\nimport contextlib\nimport uno\nfrom ooo.dyn.ui.context_menu_interceptor_action import ContextMenuInterceptorAction as ContextMenuAction\n\nfrom ooodev.adapter.ui.context_menu_interceptor import ContextMenuInterceptor\nfrom ooodev.adapter.ui.context_menu_interceptor_event_data import ContextMenuInterceptorEventData\nfrom ooodev.calc import CalcDoc\nfrom ooodev.events.args.event_args_generic import EventArgsGeneric\nfrom ooodev.gui.menu.context.action_trigger_item import ActionTriggerItem\nfrom ooodev.loader import Lo\n\ndef on_menu_intercept(\n    src: ContextMenuInterceptor, event: EventArgsGeneric[ContextMenuInterceptorEventData], view: Any\n) -> None:\n    try:\n        container = event.event_data.event.action_trigger_container\n        with contextlib.suppress(Exception):\n            # don't block other menus if there is an issue.\n            # check the first and last items in the container\n            if container[0].CommandURL == \".uno:Cut\" and container[-1].CommandURL == \".uno:FormatCellDialog\":\n                # for i, itm in enumerate(container):\n                #     if container.is_separator(itm):\n                #         continue\n                #     print(f\"{i}: {itm.CommandURL}\")\n                index = container.get_command_index(\".uno:DeleteCell\")\n\n                # sheet cell context menu\n                container.insert_by_index(index + 1, ActionTriggerItem(\".uno:About\", \"About\"))  # type: ignore\n\n                event.event_data.action = ContextMenuAction.EXECUTE_MODIFIED\n\n    except Exception as e:\n        print(e)\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        sheet = doc.sheets[0]\n        sheet.set_active()\n        sheet[0, 0].value = \"Hello, World!\"\n\n        view = doc.get_view()\n        view.add_event_notify_context_menu_execute(on_menu_intercept)\n        assert view\n\n    finally:\n        doc.close()\n        Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Drop Caps Style\nDESCRIPTION: Shows how to extract drop caps formatting from an existing paragraph using a paragraph cursor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/drop_caps.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\n\ndc = DropCaps.from_obj(para_cursor)\nassert dc.prop_inner.prop_count == 1\n```\n\n----------------------------------------\n\nTITLE: Setting Up OOoDev with Shape Transparency Functionality in Python\nDESCRIPTION: This snippet sets up the necessary imports and defines the main function to create a document, draw a rectangle, and apply transparency using the OOoDev library. The setup ensures that the document is created and visible, demonstrating the application of transparency in a shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/transparency/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format import Styler\nfrom ooodev.format.draw.direct.area import Color as ShapeColor\nfrom ooodev.format.writer.direct.shape.transparency import Transparency as ShapeTransparency\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.office.draw import Draw\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        page = Write.get_draw_page(doc)\n        rect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\n        color_style = ShapeColor(StandardColor.RED)\n        style = ShapeTransparency(60)\n        Styler.apply(rect, color_style, style)\n        page.add(rect)\n\n        f_style = ShapeTransparency.from_obj(rect)\n        assert f_style\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for GenericUnitSizePos Class\nDESCRIPTION: ReStructuredText documentation structure defining the GenericUnitSizePos class documentation with autoclass directive for member documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/generic_unit_size_pos.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _generic_unit_size_pos:\n\nClass GenericUnitSizePos\n========================\n\n.. autoclass:: ooodev.utils.data_type.generic_unit_size_pos.GenericUnitSizePos\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shadow Settings from Page Header Borders in Python\nDESCRIPTION: Shows how to get the current shadow settings from a page header style. The Shadow.from_style method loads the current shadow configuration into a Shadow object for inspection or modification.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/bordes.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Shadow.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Applying Shadow using ooodev in Python\nDESCRIPTION: This snippet demonstrates how to apply a default shadow to a cell using the `Shadow` class from the `ooodev.format.calc.direct.cell.borders`. It requires a cell object to apply borders with a blue color and default shadow.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        cell_obj = Calc.get_cell_obj(\"B2\")\n        Calc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\n        cell = Calc.get_cell(sheet, cell_obj)\n        borders = Borders(border_side=Side(color=CommonColor.BLUE), shadow=Shadow())\n        Styler.apply(cell, borders)\n```\n\n----------------------------------------\n\nTITLE: Setting Flow Options for Paragraph Style (Python)\nDESCRIPTION: Demonstrates how to set flow options such as orphans, widows, and keep together for the Standard paragraph style using the FlowOptions class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/text_flow.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npara_flow_style = FlowOptions(orphans=3, widows=4, keep=True, style_name=StyleParaKind.STANDARD)\npara_flow_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback Without Control Source Parameter in Python\nDESCRIPTION: This snippet presents an alternative definition of an event callback, which omits the control source parameter explicitly. Instead, it retrieves the control from the keyword arguments, demonstrating flexibility in callback design.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_text_edit.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n        # can get control from kwargs\n        ctl = cast(CtlTextEdit, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Undoing Shape Combination in LibreOffice Draw using Python-UNO\nDESCRIPTION: This code snippet demonstrates how to undo a shape combination operation in LibreOffice Draw. It uses the XShapeCombiner interface to split a previously combined shape back into its component shapes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# in Grouper.main() of grouper.py\n# ...\ncomp_shape = self._combine_rects(slide=curr_slide)\n# ...\ncombiner = curr_slide.qi(XShapeCombiner, True)\ncombiner.split(comp_shape.component)\nDraw.show_shapes_info(curr_slide.component)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Properties from a Calc style\nDESCRIPTION: This snippet shows how to retrieve the current text property settings from a cell style in LibreOffice Calc. It uses the from_style method to get text properties from the DEFAULT style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/alignment.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nstyle_obj = Properties.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\nassert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in reStructuredText\nDESCRIPTION: This snippet outlines the structure of the ooodev.format.writer.direct.para package using reStructuredText syntax. It lists subpackages and includes a directive for module contents documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.para.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nooodev.format.writer.direct.para package\n========================================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.writer.direct.para.alignment\n   ooodev.format.writer.direct.para.area\n   ooodev.format.writer.direct.para.borders\n   ooodev.format.writer.direct.para.drop_caps\n   ooodev.format.writer.direct.para.indent_space\n   ooodev.format.writer.direct.para.outline_list\n   ooodev.format.writer.direct.para.tabs\n   ooodev.format.writer.direct.para.text_flow\n   ooodev.format.writer.direct.para.transparency\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.writer.direct.para\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Protection from a Style in Calc using Python\nDESCRIPTION: This snippet shows how to retrieve a CellProtection object from a document style, allowing users to check the properties of the cell protection applied. This is useful for verifying the current state of cell protection in a document. It uses the same dependencies as other snippets.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/cell_protection.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = CellProtection.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\nassert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Autodoc Directive for PolySides Class\nDESCRIPTION: Sphinx autodoc directive that automatically documents the PolySides class from the ooodev.utils.data_type.poly_sides module. The directive includes all class members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/poly_sides.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.poly_sides.PolySides\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteTableColumns Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the WriteTableColumns class. It includes all members, undocumented members, inherited members, and the special __delitem__ method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/write_table_columns.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.write.table.write_table_columns.WriteTableColumns\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __delitem__\n```\n\n----------------------------------------\n\nTITLE: Getting Font Style of Y-Axis - Python\nDESCRIPTION: This snippet retrieves the current font style applied to the Y-Axis using the `style_font_get()` method. It asserts that the returned font style is not None, ensuring successful retrieval.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/font_only.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nf_style = chart_doc.axis_y.style_font_get()\\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Setting background color for a cell style in LibreOffice Calc using Python\nDESCRIPTION: This code snippet shows how to create a StyleBgColor object with a specific color and style name, then apply it to a document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/background.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle = StyleBgColor(\n    color=StandardColor.BLUE_LIGHT2, style_name=StyleCellKind.DEFAULT\n)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Using LoContext for Multi-Document Management in Python\nDESCRIPTION: Example demonstrating how to use LoContext to manage multiple Writer documents and access document information across different contexts. Shows creation of two documents and getting font information from each using context switching.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/context/lo_context.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.info import Info\nfrom ooodev.write import WriteDoc\nfrom ooodev.utils.context import LoContext\n\n# create first document\ndoc1  = WriteDoc.create_doc()\n\n# create a second document\nlo_inst = Lo.create_lo_instance()\ndoc2  = WriteDoc.create_doc(lo_inst=lo_inst)\n\n# get fonts of first document\n# the default context, which is for the first document is used.\nfonts =  Info.get_fonts()\n\n# get fonts of second document\nWith LoContext(lo_inst=doc2.lo_inst):\n    # The context is changed to the second document.\n    # As soon as the LoContext block is exited, the context is\n    # restored to the first document.\n    fonts =  Info.get_fonts()\n```\n\n----------------------------------------\n\nTITLE: Applying Transparency to Chart Floor (Python)\nDESCRIPTION: This snippet sets the transparency for the floor section of a chart using the `style_area_transparency_transparency` method. It modifies the chart floor object's transparency to 30% and requires the `python_ooo_dev_tools` library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\n# ... other code\nfloor = chart_doc.first_diagram.floor\nfloor.style_area_transparency_transparency(30)\n```\n\n----------------------------------------\n\nTITLE: Whole Word Drop Caps\nDESCRIPTION: Shows how to apply drop caps formatting to an entire word instead of just individual characters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/drop_caps.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\ndc = DropCaps(count=1, whole_word=True)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[dc])\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Wall Custom Gradient in Python\nDESCRIPTION: This snippet demonstrates how to apply a custom gradient to the background of a chart's wall using the `style_area_gradient()` method. It uses `GradientStyle.LINEAR`, sets the angle to 45 degrees, and defines a color range from dark blue to light blue.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\nwall = chart_doc.first_diagram.wall\nwall.style_area_gradient(\n    style=GradientStyle.LINEAR,\n    angle=45,\n    grad_color=ColorRange(StandardColor.BLUE_DARK3, StandardColor.BLUE_LIGHT2),\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Chart Subtitle\nDESCRIPTION: This code snippet demonstrates how to apply the same font effects to a chart subtitle using the style_subtitle method. The font effect configuration is reused from the title formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/font_effects.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_subtitle(chart_doc=chart_doc, styles=[title_font_effect])\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document and Applying Area Color\nDESCRIPTION: Creates a Draw document, adds a rectangle shape, and applies a lime color fill using the ooodev library. Demonstrates document creation, shape drawing, and style application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/color.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.modify.area.color import Color\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.modify.area import Color as FillColor\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\nfrom ooodev.utils.color import StandardColor\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n        style_modify = FillColor(\n            color=StandardColor.LIME_LIGHT2,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(style_modify)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Zoom Levels in ooodev Calc with Python\nDESCRIPTION: Demonstrates how to adjust the zoom level of a spreadsheet document to display the entire page using the ooodev Calc library. Requires the ooodev.calc module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# doc is an XSpreadsheetDocument\nfrom ooodev.calc import Calc, ZoomKind\n# ...\nCalc.Zoom(doc=doc, type=ZoomKind.ENTIRE_PAGE)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Indent Style from Document using Python\nDESCRIPTION: This snippet retrieves an indent style from a Writer document using the 'Indent' class, ensuring that the retrieved style matches the expected style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/indent_spacing.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Indent.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Aligning Data Series in Chart2 using Python\nDESCRIPTION: Shows how to align data series to either the primary or secondary y-axis using the AlignSeries class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/options.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.options import AlignSeries\n# ... other code\n\nalign_options = AlignSeries(chart_doc, primary_y_axis=False)\nChart2.style_data_series(chart_doc=chart_doc, styles=[align_options])\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example with kwargs\nDESCRIPTION: This code snippet illustrates an alternative EventArgsCallbackT callback function where the control source is accessed via keyword arguments. The snippet shows how to retrieve the FormCtlDbCheckBox control from the kwargs dictionary within the event handler, using a type cast for proper usage.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_check_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbCheckBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Row Formatting\nDESCRIPTION: This code snippet adds a custom row formatter to the FormatterTable object. It formats rows with index 0 or 9 to have a minimum width of 9 characters, padding on the left if shorter.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfl.row_formats.append(FormatTableItem(format=\">9\", idxs_inc=(0, 9)))\n```\n\n----------------------------------------\n\nTITLE: Setting Simple Plot Options for Charts in Python\nDESCRIPTION: Shows how to set simple plot options like hidden cell values for pie and donut charts using the PlotSimple class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/options.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.options import PlotSimple\n# ... other code\n\nplot_options = PlotSimple(chart_doc=chart_doc, hidden_cell_values=False)\nChart2.style_data_series(chart_doc=chart_doc, styles=[plot_options])\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Chart Series Data Labels\nDESCRIPTION: Code snippet showing how to create and apply font effects (color, underline, shadow) to all data labels in a chart series using style_data_series method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ndata_lbl_font = LblFontEffects(\n    color=CommonColor.RED,\n    underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n    shadowed=True,\n)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_lbl_font])\n```\n\n----------------------------------------\n\nTITLE: Applying Bullet List Styles with Python and ooodev\nDESCRIPTION: This Python code snippet demonstrates how to create a document, apply bullet list styles, and add paragraphs to the document using the ooodev library. It shows different bullet styles and their application on a cursor object within the Writer interface. The snippet requires the ooodev library and is designed to be executed within a Python environment with access to LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/bullet_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.writer.style import BulletList\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n        cursor = Write.get_cursor(doc)\n        sl = BulletList().list_01\n        sl.apply(cursor)\n        for i in range(1, 4):\n            Write.append_para(cursor=cursor, text=f\"Point {i}\")\n        BulletList.default.apply(cursor)\n        Write.append_para(cursor=cursor, text=\"Moving On...\")\n\n        sl = sl.list_02\n        sl.apply(cursor)\n        for i in range(1, 4):\n            Write.append_para(cursor=cursor, text=f\"Point {i}\")\n        BulletList.default.apply(cursor)\n        Write.append_para(cursor=cursor, text=\"Moving On...\")\n\n        sl = sl.list_03\n        sl.apply(cursor)\n        for i in range(1, 4):\n            Write.append_para(cursor=cursor, text=f\"Point {i}\")\n        BulletList.default.apply(cursor)\n        Write.append_para(cursor=cursor, text=\"Moving On...\")\n\n        sl = sl.num_123\n        sl.apply(cursor)\n        for i in range(1, 4):\n            Write.append_para(cursor=cursor, text=f\"Number Point {i}\")\n        BulletList.default.apply(cursor)\n        Write.append_para(cursor=cursor, text=\"Moving On...\")\n\n        sl = sl.num_IVX\n        sl.apply(cursor)\n        for i in range(1, 4):\n            Write.append_para(cursor=cursor, text=f\"Number Point {i}\")\n        BulletList.default.apply(cursor)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Footer Style Pattern from Style in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the footer style pattern from an existing style in a Writer document using the `FooterStylePattern.from_style` method. It asserts that the style name matches the expected value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\\n\\nstyle_obj = FooterStylePattern.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Charts in Python\nDESCRIPTION: This snippet presents the 'insert_chart' method implemented within the Chart2 class, which facilitates the creation of a new chart document. It links the chart template, diagram, and data source while handling necessary error checks.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@classmethod\ndef insert_chart(\n    cls,\n    sheet: XSpreadsheet,\n    cells_range: CellRangeAddress,\n    cell_name: str,\n    width: int,\n    height: int,\n    diagram_name: ChartTemplateBase | str,\n    color_bg: Color = mColor.CommonColor.PALE_BLUE,\n    color_wall: Color = mColor.CommonColor.LIGHT_BLUE,\n) -> XChartDocument:\n    try:\n        # type check that diagram_name is ChartTemplateBase | str\n        Info.is_type_enum_multi(\n            alt_type=\"str\", enum_type=ChartTemplateBase,\n            enum_val=diagram_name, arg_name=\"diagram_name\"\n        )\n        chart_name = Chart2._CHART_NAME + str(int(random() * 10_000))\n        cls.add_table_chart(\n            sheet=sheet,\n            chart_name=chart_name,\n            cells_range=cells_range,\n            cell_name=cell_name,\n            width=width,\n            height=height,\n        )\n        chart_doc = cls.get_chart_doc(sheet, chart_name)\n\n        # assign chart template to the chart's diagram\n        diagram = chart_doc.getFirstDiagram()\n        ct_template = cls.set_template(\n            chart_doc=chart_doc, diagram=diagram, diagram_name=diagram_name\n        )\n\n        has_cats = cls.has_categories(diagram_name)\n\n        dp = chart_doc.getDataProvider()\n\n        ps = Props.make_props(\n            CellRangeRepresentation=Calc.get_range_str(cells_range, sheet),\n            DataRowSource=ChartDataRowSource.COLUMNS,\n            FirstCellAsLabel=True,\n            HasCategories=has_cats,\n        )\n        ds = dp.createDataSource(ps)\n\n        # add data source to chart template\n        args = Props.make_props(HasCategories=has_cats)\n        ct_template.changeDiagramData(diagram, ds, args)\n\n        # apply style settings to chart doc\n        # background and wall colors\n        cls.set_background_colors(chart_doc, color_bg, color_wall)\n\n        if has_cats:\n            cls.set_data_point_labels(chart_doc, DataPointLabelTypeKind.NUMBER)\n\n        return chart_doc\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error inserting chart\") from e\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Left) with Right Margin using styles in Python\nDESCRIPTION: Creates a table with left alignment and a specific right margin using the styles approach. Defines a TableProperties object with right margin instead of width parameter.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\"My_Table\",\n    relative=False,\n    align=TableAlignKind.LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    right=UnitMM(60.0),\n)\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Gradient for Chart2 Legend Area in Python\nDESCRIPTION: Demonstrates how to create and apply a custom gradient to the legend area of a Chart2 using the LegendAreaGradient class from ooodev. Specifies gradient properties like step count, style, angle, and color range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.area import Gradient as LegendAreaGradient\nfrom ooodev.format.chart2.direct.legend.transparency import Transparency as LegendTransparency\n# ... other code\n\nlegend_area_gradient_style = LegendAreaGradient(\n    chart_doc=chart_doc,\n    step_count=64,\n    style=GradientStyle.SQUARE,\n    angle=45,\n    grad_color=ColorRange(StandardColor.BRICK_LIGHT1, StandardColor.TEAL_DARK1),\n)\nlegend_bg_transparency_style = LegendTransparency(0)\nChart2.style_legend(\n    chart_doc=chart_doc, styles=[legend_bg_transparency_style, legend_area_gradient_style]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Orientation Setup in Python\nDESCRIPTION: Basic setup code for text orientation examples showing imports and main structure for rotating text in cells.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.alignment import TextOrientation, EdgeKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        cell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\n        style = TextOrientation(vert_stack=False, rotation=-10, edge=EdgeKind.INSIDE)\n        Calc.set_val(value=\"Hello\", cell=cell, styles=[style])\n\n        f_style = TextOrientation.from_obj(cell)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flow Options from Style (Python)\nDESCRIPTION: Shows how to retrieve flow options from an existing paragraph style using the FlowOptions.from_style() method. This can be used to verify or inspect current style settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/text_flow.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = FlowOptions.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback for Text Field Control in Python\nDESCRIPTION: This snippet demonstrates how to define a callback function for handling events related to a FormCtlTextField. The function can receive various parameters, including a reference to the source control, allowing flexible event handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_text_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n        src: Any, event: EventArgs, control_src: FormCtlTextField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting up Writer Document with Header Styling\nDESCRIPTION: Sets up a LibreOffice Writer document with basic header styling including transparency. Includes imports for necessary modules, creates a document, applies header styles with color and transparency, and confirms the style was applied correctly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.header import Header, WriterStylePageKind\nfrom ooodev.format.writer.modify.page.header.transparency import (\n    Transparency,\n    Gradient,\n    IntensityRange,\n    GradientStyle,\n)\nfrom ooodev.format.writer.modify.page.header.area import Color as HeaderAreaColor\nfrom ooodev.format import Styler\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        header_style = Header(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            spacing_dyn=True,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=WriterStylePageKind.STANDARD,\n        )\n        page_header_style_kind = WriterStylePageKind.STANDARD\n        color_style = HeaderAreaColor(color=StandardColor.RED, style_name=page_header_style_kind)\n        transparency_style = Transparency(value=85, style_name=page_header_style_kind)\n        Styler.apply(doc, header_style, color_style, transparency_style)\n\n        style_obj = Transparency.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Document with Custom Font Style - Python\nDESCRIPTION: This snippet initializes a chart document, sets the zoom level, and applies custom styles to the chart's axes. It begins by creating a document and then styling the Y-Axis with a specific font name, size, and style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\\nfrom pathlib import Path\\nimport uno\\nfrom ooo.dyn.awt.gradient_style import GradientStyle\\nfrom ooodev.calc import CalcDoc, ZoomKind\\nfrom ooodev.utils.color import StandardColor\\nfrom ooodev.loader.lo import Lo\\nfrom ooodev.utils.data_type.color_range import ColorRange\\nfrom ooodev.utils.data_type.offset import Offset\\n\\ndef main() -> int:\\n    with Lo.Loader(connector=Lo.ConnectPipe()):\\n        fnm = Path.cwd() / \"tmp\" / \"bon_voyage.ods\"\\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\\n        Lo.delay(500)\\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\\n\\n        sheet = doc.sheets[0]\\n        sheet[\"A1\"].goto()\\n        chart_table = sheet.charts[0]\\n        chart_doc = chart_table.chart_doc\\n        _ = chart_doc.style_border_line(color=StandardColor.GREEN_DARK2, width=0.9)\\n        _ = chart_doc.style_area_gradient(\\n            step_count=0,\\n            offset=Offset(41, 50),\\n            style=GradientStyle.RADIAL,\\n            grad_color=ColorRange(StandardColor.TEAL, StandardColor.YELLOW_DARK1),\\n        )\\n        _ = chart_doc.axis_y.style_font(\\n            name=\"Lucida Calligraphy\", size=14, font_style=\"italic\"\\n        )\\n\\n        Lo.delay(1_000)\\n        doc.close()\\n    return 0\\n\\n\\nif __name__ == \"__main__\":\\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Adding Padding to Character Borders in Writer\nDESCRIPTION: This code demonstrates how to add padding to text with borders in LibreOffice Writer. It applies a 3mm padding on all sides of the text while maintaining the green border.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncursor = Write.get_cursor(doc)\n\nWrite.append(cursor, \"Hello \")\n\nside = Side(color=StandardColor.GREEN_LIGHT2)\nborder_style = Borders(all=side)\n# create a padding of 3 mm on all sides\npadding_style = Padding(all=3)\nWrite.append(cursor, \"World\", styles=[border_style, padding_style])\nWrite.end_paragraph(cursor)\n```\n\n----------------------------------------\n\nTITLE: Printing Array with FormatterTable\nDESCRIPTION: This code snippet demonstrates how to use the Calc.print_array function to print data using a FormatterTable object (fl), enabling custom formatting of the output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nCalc.print_array(data, fl)\n```\n\n----------------------------------------\n\nTITLE: Style Data Series Transparency\nDESCRIPTION: This Python code snippet demonstrates how to set the transparency of a chart's data series. It accesses the first data series of a chart document and sets its area transparency to 50 using the `style_area_transparency_transparency()` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\nds.style_area_transparency_transparency(50)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Background Image in Calc\nDESCRIPTION: Applies a preset background image (coffee beans) to the page header using HeaderImg and Styler\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/background.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nheader_img_style = HeaderImg.from_preset(\n    preset=PresetImageKind.COFFEE_BEANS, \n    style_name=CalcStylePageKind.DEFAULT\n)\nStyler.apply(doc, header_style, header_img_style)\n```\n\n----------------------------------------\n\nTITLE: Align Left Position with Right Margin using Direct Style in Python\nDESCRIPTION: The snippet sets a right alignment property for a left-aligned table using the 'style_direct' method, on a table defined via a cursor. Dependencies include 'CommonColor', 'TableAlignKind', 'UnitMM', and 'Intensity'. It emphasizes setting the right margin with an intensity value, aligning widely used contextual roles with specified margins.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=True,\n    align=TableAlignKind.LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    right=Intensity(40),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Text Alignment in Python\nDESCRIPTION: This code snippet shows how to set text alignment for a rectangle shape in a LibreOffice Draw document. It uses the Alignment class to center the text and applies multiple styles using the Styler class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/paragraph/alignment.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n# ... other code\nanchor = TextAnchor(anchor_point=ShapeBasePointKind.CENTER, full_width=True)\nalign = Alignment(align=ParagraphAdjust.CENTER)\ntxt_cols = TextColumns(col_count=2, spacing=0.5)\nStyler.apply(rect.component, anchor, align, txt_cols)\n```\n\n----------------------------------------\n\nTITLE: Creating TextEmbeddedObject for Formula Insertion in LibreOffice using Python\nDESCRIPTION: This snippet creates an instance of a TextEmbeddedObject service, which is used to embed the formula into the document. It utilizes the Lo.create_instance_msf method with the XTextContent interface to create the object, enabling the formula to be inserted as content.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nembed_content = Lo.create_instance_msf(\n        XTextContent, \"com.sun.star.text.TextEmbeddedObject\", raise_err=True\n    )\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.modify.write.page.area.pattern\nDESCRIPTION: This snippet demonstrates the use of the `automodule` directive in Sphinx documentation to automatically generate documentation for the `ooodev.format.inner.modify.write.page.area.pattern` module.  It includes options to show members, undocumented members, and inheritance information. This is a common practice in Python projects to automatically create API documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.page.area.pattern.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.page.area.pattern\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Pattern to Legend in Python\nDESCRIPTION: This snippet demonstrates how to apply a pattern to a chart legend in a LibreOffice document using `ooodev`. The `PresetPatternKind` enum is used for selecting preavailable patterns and relies on setting legend transparency to view it clearly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_pattern import PresetPatternKind\n# ... other code\n\n_ = legend.style_area_transparency_transparency(0)\n_ = legend.style_area_pattern_from_preset(\n    preset=PresetPatternKind.HORIZONTAL_BRICK,\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Area Pattern Style in Python\nDESCRIPTION: Gets the current area pattern style from a chart document and verifies it exists.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = chart_doc.style_area_pattern_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Copying Slides Using Dispatch in Python\nDESCRIPTION: This function handles copying of slides between indices in a slide deck using dispatch commands for 'Copy' and 'Paste'. It ensures indices fall within bounds and manages subsequent document visibility and user interaction.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n# in copy_slide.py\ndef main(self) -> None:\n    loader = Lo.load_office(Lo.ConnectPipe())\n\n    try:\n        doc = ImpressDoc(Lo.open_doc(fnm=self._fnm, loader=loader))\n        num_slides = doc.get_slides_count()\n        if self._from_idx >= num_slides or self._to_idx >= num_slides:\n            Lo.close_office()\n            raise IndexError(\"One or both indices are out of range\")\n\n        doc.set_visible()\n\n        self._copy_to(doc=doc)\n\n        # doc.delete_slide(idx=self._from_idx)\n        # a problem if the copying changes the indices\n\n        # Lo.save(doc.component) # overwrites original\n\n        Lo.delay(2000)\n        msg_result = MsgBox.msgbox(\n            \"Do you wish to close document?\",\n            \"All done\",\n            boxtype=MessageBoxType.QUERYBOX,\n            buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n        )\n        if msg_result == MessageBoxResultsEnum.YES:\n            doc.close_doc()\n            Lo.close_office()\n        else:\n            print(\"Keeping document open\")\n    except IndexError:\n        raise\n    except Exception:\n        Lo.close_office()\n        raise\n```\n\n----------------------------------------\n\nTITLE: Applying Font Formatting to Data Series Labels\nDESCRIPTION: Demonstrates how to apply font formatting to all data labels in a chart series using the FontOnly class and style_data_series method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata_lbl_font = LblFontOnly(name=\"Lucida Calligraphy\", size=14, font_style=\"italic\")\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_lbl_font])\n```\n\n----------------------------------------\n\nTITLE: Applying Image Preset to Chart Subtitle\nDESCRIPTION: Shows how to apply a preset image style to a chart subtitle using PresetImageKind enum. Requires the ooodev library and access to the chart's first diagram.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_image import PresetImageKind\n\n# ... other code\nsub_title = chart_doc.first_diagram.get_title()\nif sub_title is None:\n    raise ValueError(\"Title not found\")\n\nsub_title.style_area_image_from_preset(\n    preset=PresetImageKind.SPACE,\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Form Count in Writer Document\nDESCRIPTION: Demonstrates how to get the number of forms in a Writer document using len() method and how to add a new form.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_forms.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc())\n>>> len(doc.draw_page.forms)\n0\n>>>doc.draw_page.forms.add_form()\n>>> len(doc.draw_page.forms)\n1\n```\n\n----------------------------------------\n\nTITLE: Applying Fill Hatch to Shape\nDESCRIPTION: Demonstrates how to use the ShapeHatch class to apply a preset fill hatch to a shape. The preset is obtained from the PresetHatchKind class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/hatch.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.area import Hatch as ShapeHatch\n# ... other code\n\nstyle = ShapeHatch.from_preset(preset=PresetHatchKind.GREEN_30_DEGREES)\nstyle.apply(rect)\npage.add(rect)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Background Using Style Direct Method\nDESCRIPTION: Shows how to set table background color using the style_direct method of a table object in LibreOffice Writer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/background.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n)\ntable.style_direct.style_area_color(StandardColor.LIME_LIGHT3)\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.direct.chart2.title.area.img module documentation\nDESCRIPTION: This snippet represents the documentation structure for the `ooodev.format.inner.direct.chart2.title.area.img` module. It uses the `automodule` directive to automatically generate documentation from the module's code, including its members, undocumented members, and inheritance hierarchy.  The expected output is structured documentation suitable for inclusion in a larger documentation set.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.title.area.img.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.title.area.img\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Executing Font Effects on Chart Axes in Python\nDESCRIPTION: The code opens a LibreOffice Calc document, modifies chart axes by applying font effects such as color, underline, and shadow to the Y-axis, and then closes the document. Dependencies include Python modules `uno`, `ooodev`, and `pathlib`. The chart document is modified to update the appearance of the axes, specifically modifying the font attributes using the `style_font_effect` method. Input is a specified Calc document, and there is no direct output apart from the visual changes to the chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooo.dyn.awt.font_underline import FontUnderlineEnum\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooodev.utils.data_type.offset import Offset\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"bon_voyage.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.GREEN_DARK2, width=0.9\n        )\n        # _ = chart_doc.style_area_color(\n            color=StandardColor.GREEN_LIGHT2\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=0,\n            offset=Offset(41, 50),\n            style=GradientStyle.RADIAL,\n            grad_color=ColorRange(\n                StandardColor.TEAL, StandardColor.YELLOW_DARK1\n            ),\n        )\n        _ = chart_doc.axis_y.style_font_effect(\n            color=StandardColor.RED,\n            underline=FontLine(\n                line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE\n            ),\n            shadowed=True,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Legend Area Color in Chart2 using Python\nDESCRIPTION: Demonstrates how to set the background color of a Chart2 legend using the LegendAreaColor class from ooodev. Also sets the transparency to make the color visible.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.area import Color as LegendAreaColor\nfrom ooodev.format.chart2.direct.legend.transparency import Transparency as LegendTransparency\n# ... other code\n\nlegend_color_style = LegendAreaColor(color=StandardColor.GREEN_LIGHT2)\nlegend_bg_transparency_style = LegendTransparency(0)\nChart2.style_legend(\n    chart_doc=chart_doc, styles=[legend_bg_transparency_style, legend_color_style]\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Draw Page by Index in Python\nDESCRIPTION: Shows how to access a specific draw page using index notation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_draw_pages.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc())\n>>> doc.draw_pages[0]\n<ooodev.write.WriteDrawPage object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Running Basic Calc Style Application Example in Python\nDESCRIPTION: This snippet demonstrates setting up a Python script to apply cell styles in LibreOffice Calc using the ooodev library. It covers initializing a document, setting the document visible, applying styles to cells, and verifying applied styles. Required dependencies include uno, ooodev libraries such as format.calc.style, office.calc, and others. The example focuses on setting a style while setting a cell's value and validating style application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/static/cell.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.calc.style import Cell as CellStyle, StyleCellKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        sheet = Calc.get_active_sheet()\n\n        style = CellStyle(name=StyleCellKind.ACCENT_1)\n        cell_obj = Calc.get_cell_obj(\"A1\")\n\n        Calc.set_val(value=\"Hello\", sheet=sheet, cell_obj=cell_obj, styles=[style])\n        cell = Calc.get_cell(sheet=sheet, cell_obj=cell_obj)\n\n        style_obj = CellStyle.from_obj(cell)\n        assert style_obj.prop_name == str(StyleCellKind.ACCENT_1)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: ReStructuredText directive for auto-generating module documentation with members, undocumented members, and inheritance information\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.page.border.sides.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.page.border.sides\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration\nDESCRIPTION: Sphinx autodoc configuration for displaying module documentation with members, inheritance, and undocumented elements\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.style.character_style_comp.rst#2025-04-16_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n.. automodule:: ooodev.adapter.style.character_style_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Verifying Pip Installation in Cmd Shell\nDESCRIPTION: This command checks the installed version of pip in the virtual environment using Command Prompt, confirming successful installation and proper configuration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_10\n\nLANGUAGE: bat\nCODE:\n```\n(.venv) D:\\tmp\\manual>python -m pip --version\npip 23.1.2 from D:\\tmp\\manual\\.venv\\lib\\site-packages\\pip (python 3.8)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Subtitle Border Properties\nDESCRIPTION: Shows how to apply border line properties to a chart subtitle using first_diagram.get_title() method, with color and width configuration\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsub_title = chart_doc.first_diagram.get_title()\nif sub_title is None:\n    raise ValueError(\"Title not found\")\n\nsub_title.style_border_line(\n    color=StandardColor.MAGENTA_DARK1,\n    width=0.75,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Calc Style Cell Example\nDESCRIPTION: This code snippet demonstrates the setup and basic usage of the `ooodev` library for working with Calc documents. It initializes a Calc document, sets a cell value, applies a style, retrieves the style name, and then closes the document. It depends on the `uno`, `ooodev.calc`, `ooodev.loader`, and `ooodev.format.calc.style` modules.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/cell.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from __future__ import annotations\nimport uno\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.format.calc.style import StyleCellKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = CalcDoc.create_doc(visible=True)\n        sheet = doc.sheets[0]\n        Lo.delay(500)\n        doc.zoom_value(400)\n\n        cell = sheet[\"A1\"]\n        cell.value = \"Hello\"\n        cell.style_by_name(StyleCellKind.ACCENT_1)\n\n        name = cell.style_by_name_get()\n        assert name == str(StyleCellKind.ACCENT_1)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Grouping Shapes\nDESCRIPTION: Example showing creation of ellipse shapes and positioning them on a slide before grouping\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nslide_size = curr_slide.get_size_mm()\nwidth = 40\nheight = 20\nx = round(((slide_size.width * 3) / 4) - (width / 2))\ny1 = 20\nif self.overlap:\n    y2 = 30\nelse:\n    y2 = round((slide_size.height / 2) - (y1 + height))  # so separated\n\ns1 = curr_slide.draw_ellipse(x=x, y=y1, width=width, height=height)\ns2 = curr_slide.draw_ellipse(x=x, y=y2, width=width, height=height)\n\nDraw.show_shapes_info(curr_slide.component)\n\nprint()\nprint(\"Grouping (or binding) ellipses ...\")\nif self._combine_kind == CombineEllipseKind.GROUP:\n    self._group_ellipses(slide=curr_slide, s1=s1.component, s2=s2.component)\nelif self._combine_kind == CombineEllipseKind.BIND:\n    self._bind_ellipses(slide=curr_slide, s1=s1.component, s2=s2.component)\nelif self._combine_kind == CombineEllipseKind.COMBINE:\n    self._combine_ellipses(\n        slide=curr_slide, s1=s1.component, s2=s2.component\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting up LibreOffice Draw environment and applying transparency to shape\nDESCRIPTION: This snippet demonstrates how to set up the LibreOffice Draw environment, create a document, draw a rectangle, and apply transparency to it. It uses various classes from the ooodev library to handle document creation, shape drawing, and style application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/transparency/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format import Styler\nfrom ooodev.format.draw.direct.area import Color as ShapeColor\nfrom ooodev.format.draw.direct.transparency import Transparency as ShapeTransparency\nfrom ooodev.office.draw import Draw\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Draw.create_draw_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_75_PERCENT)\n\n        slide = Draw.get_slide(doc)\n\n        width = 36\n        height = 36\n        x = int(width / 2)\n        y = int(height / 2) + 20\n\n        rect = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\n        color_style = ShapeColor(StandardColor.RED)\n        style = ShapeTransparency(60)\n        Styler.apply(rect, color_style, style)\n        # style.apply(rect)\n\n        f_style = ShapeTransparency.from_obj(rect)\n        assert f_style\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Exporting Calc Range as Image in Python\nDESCRIPTION: Demonstrates how to export a range of cells from a Calc spreadsheet as a PNG image file. This example gets a range from the first sheet and exports it to a file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nsheet = doc.sheets[0]\nrng = sheet.get_range(range_name=\"A1:M4\")\nrng.export_as_image(\"./my_image.png\")\n```\n\n----------------------------------------\n\nTITLE: Adding Line Divider in Document - Python\nDESCRIPTION: This method creates a line shape serving as a visual divider between paragraphs. It utilizes the text width calculated previously to determine the appropriate width for the line.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# in Write class\n@classmethod\ndef add_line_divider(cls, cursor: XTextCursor, line_width: int) -> None:\n    try:\n        ls = Lo.create_instance_msf(XTextContent, \"com.sun.star.drawing.LineShape\")\n        if ls is None:\n            raise CreateInstanceMsfError(XTextContent, \"com.sun.star.drawing.LineShape\")\n\n        line_shape = Lo.qi(XShape, ls, True)\n        line_shape.setSize(Size(line_width, 0))\n\n        cls.end_paragraph(cursor)\n        cls._append_text_content(cursor, ls)\n        cls.end_paragraph(cursor)\n\n        # center the previous paragraph\n        cls.style_prev_paragraph(\n            cursor=cursor, prop_val=ParagraphAdjust.CENTER, prop_name=\"ParaAdjust\"\n        )\n\n        cls.end_paragraph(cursor)\n    except CreateInstanceMsfError:\n        raise\n    except MissingInterfaceError:\n        raise\n    except Exception as e:\n        raise Exception(\"Insertion of graphic line failed\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Paragraph Borders with Shadow and Padding\nDESCRIPTION: Example demonstrating how to apply borders with both shadow and padding. The padding class sets space between the text and the border, while Shadow adds a drop shadow effect.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/borders.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\ncursor = Write.get_cursor(doc)\nbdr = Borders(\n    all=Side(line=BorderLineKind.DASH_DOT, color=CommonColor.BLUE_VIOLET),\n    padding=Padding(all=7.7),\n    shadow=Shadow(),\n    merge=False,\n)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[bdr])\nStylePara.default.apply(cursor)\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Transparency in Python\nDESCRIPTION: This snippet demonstrates how to set the gradient transparency of a chart using OOoDev. It specifies the angle and gradient intensity range for the transparency effect.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.intensity_range import IntensityRange\\n_ = chart_doc.style_area_transparency_gradient(angle=30, grad_intensity=IntensityRange(0, 100))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Sides from Paragraph Style in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the border sides configuration from an existing paragraph style in the document. It uses the from_style class method of the Sides class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/bordes.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Sides.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Accessing XReplaceable Interface for Cell Range\nDESCRIPTION: Shows how to obtain the XReplaceable interface from a cell range using QueryInterface for performing replace operations\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrepl = cell_rng.qi(XReplaceable, True)\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Data Point with Pattern Background in Python\nDESCRIPTION: This code applies a previously defined pattern background to a specific data point (index 4) in the first data series (index 0) of a chart using the Chart2.style_data_point method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=4, styles=[data_series_pattern])\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Transparency to Chart Wall in Python\nDESCRIPTION: Code snippet that demonstrates how to create a transparency effect for a chart wall using the WallTransparency class. The code sets a 40% transparency value to make the wall partially transparent.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.wall.transparency import Transparency as WallTransparency\n\n# ... other code\nwall_transparency = WallTransparency(value=40)\nChart2.style_wall(chart_doc=chart_doc, styles=[wall_transparency])\n```\n\n----------------------------------------\n\nTITLE: Applying Color Style to Shape\nDESCRIPTION: Shows how to create and apply a fill color style to a shape using the FillColor class. Sets the color to lime light and applies it to the default drawing style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/color.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle_modify = FillColor(\n    color=StandardColor.LIME_LIGHT2,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\ndoc.apply_styles(style_modify)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Regression Curve Data in OpenOffice Charts\nDESCRIPTION: Method for evaluating regression curve data by configuring calculation parameters and processing x/y values. Uses XRegressionCurve interface to calculate curve properties and correlation coefficients.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef eval_curve(cls, chart_doc: XChartDocument, curve: XRegressionCurve) -> None:\n    curve_calc = curve.getCalculator()\n    degree = 1\n    ct = cls.get_curve_type(curve)\n    if ct != CurveKind.LINEAR:\n        degree = 2  # assumes POLYNOMIAL trend has degree == 2\n\n    curve_calc.setRegressionProperties(degree, False, 0.0, 2, 0)\n\n    data_source = cls.get_data_source(chart_doc)\n    # cls.print_labled_seqs(data_source)\n\n    xvals = cls.get_chart_data(data_source=data_source, idx=0)\n    yvals = cls.get_chart_data(data_source=data_source, idx=0)\n    curve_calc.recalculateRegression(xvals, yvals)\n\n    print(f\"  Curve equations: {curve_calc.getRepresentation()}\")\n    cc = curve_calc.getCorrelationCoefficient()\n    print(f\"  R^2 value: {(cc*cc):.3f}\")\n```\n\n----------------------------------------\n\nTITLE: Getting Text Properties from a Cell in Python\nDESCRIPTION: This code shows how to retrieve the text properties from a specific cell after they have been set, checking that the retrieved style is not None.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nf_style = Properties.from_obj(cell)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Grid Example Python Macro\nDESCRIPTION: Example showing grid functionality implementation in a Calc document. Demonstrates macro registration with g_exportedScripts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/embed_python.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef show_grid(*args) -> None:\n    doc = CalcDoc.from_current_doc()\n    grid_ex = GridEx(doc=doc)\n    grid_ex.show()\n\ng_exportedScripts = (show_grid,)\n```\n\n----------------------------------------\n\nTITLE: Grouping Ellipses with UNO in Python\nDESCRIPTION: This function groups two ellipse shapes into a single group shape using the UNO API. It adds the ellipses to an XShapes interface on the slide. The function requires an instance of a DrawPage and two XShape objects as inputs and modifies the slide to contain a single group shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# in Grouper class of grouper.py\ndef _group_ellipses(self, slide: DrawPage[DrawDoc], s1: XShape, s2: XShape) -> None:\n    shape_group = slide.add_shape(\n        shape_type=DrawingShapeKind.GROUP_SHAPE,\n        x=0,\n        y=0,\n        width=0,\n        height=0,\n    )\n    shapes = shape_group.qi(XShapes, True)\n    shapes.add(s1)\n    shapes.add(s2)\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment\nDESCRIPTION: This bash command activates the created virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Multiplying and Dividing RowObj Instances in Python\nDESCRIPTION: Shows multiplication and division operations between RowObj instances and integers. Includes handling of operations that would result in negative or fractional values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/row_obj.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.row_obj import RowObj\n>>> r2 = RowObj(2)\n>>> r20 = r2 * 10\n>>> r20\nRowObj(value=20)\n>>> r40 = r2 * r20\n>>> r40\nRowObj(value=40)\n>>> r20 = r40 / 2\n>>> r20\nRowObj(value=20)\n>>> r10 = r20 / r2\n>>> r10\nRowObj(value=10)\n>>> r2 / r10\nIndexError\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Properties from Existing Paragraphs\nDESCRIPTION: Example showing how to retrieve border properties from an existing paragraph. A paragraph cursor is used to select the first paragraph, and then the Borders.from_obj method extracts the current border properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/borders.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\ncursor = Write.get_cursor(doc)\nbdr = Borders(\n    all=Side(line=BorderLineKind.DASH_DOT, color=CommonColor.BLUE_VIOLET),\n    padding=Padding(all=7.7),\n    shadow=Shadow(),\n    merge=False,\n)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[bdr])\n\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\n\npara_bdr = Borders.from_obj(para_cursor)\nassert para_bdr.prop_inner_sides.prop_left.prop_line == BorderLineKind.DASH_DOT\nassert para_bdr.prop_inner_sides.prop_right.prop_color == CommonColor.BLUE_VIOLET\n\nStylePara.default.apply(cursor)\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Applying Shadow to a Cell in Calc\nDESCRIPTION: This code shows how to apply a shadow effect to a cell using the Shadow class in combination with border styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Shadow\n\n# ... other code\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\ncell.style_borders_sides(\n    color=CommonColor.BLUE,\n    shadow=Shadow(),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing MenuBar in LibreOffice Document\nDESCRIPTION: Shows how to access the menu bar for a LibreOffice Calc document by getting the frame component and using the layout manager.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\n# ...\n\ndoc = CalcDoc.from_current_doc()\n\n# to get the frame the document must be active\n# activation would not be necessary if the document is already active or running in a macro.\ndoc.activate()\nframe_component = doc.get_frame_comp()\nassert frame_component is not None\nmb = frame_component.layout_manager.get_menu_bar()\nassert mb is not None\n```\n\n----------------------------------------\n\nTITLE: Setting Text Shape Adaptation Properties\nDESCRIPTION: Demonstrates how to create and apply text adaptation settings to a shape using the Adapt class. Shows setting both height and width adaptation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/adapt.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.position_size import Adapt\n# ... other code\n\ntext = slide.draw_text(\n    msg=\"Hello World\", x=x, y=y, width=width, height=height\n)\nstyle = Adapt(fit_height=True, fit_width=True)\nstyle.apply(text.component)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Draw Page from Spreadsheet\nDESCRIPTION: Get the draw page supplier from a spreadsheet sheet, allowing access to page shapes\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter33.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npage_supp = Lo.qi(XDrawPageSupplier, sheet, True)\ndraw_page = page_supp.getDrawPage()\n```\n\n----------------------------------------\n\nTITLE: Appending Text with Styles in Python\nDESCRIPTION: This snippet demonstrates appending text to a document and applying different styles. It uses `append`, `append_line`, and `append_para` methods of a cursor object along with style objects like `Font`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndoc = WriteDoc(Write.create_doc(loader=loader))\ncursor = doc.get_cursor()\ncursor.append(\"Some examples of simple text \")\ncursor.append_line(text=\"styles.\", styles=[Font(b=True)])\ncursor.append_para(\n    text=\"This line is written in red italics.\",\n    styles=[Font(color=CommonColor.DARK_RED).bold.italic],\n)\ncursor.append_para(\"Back to old style\")\ncursor.append_line()\n```\n\n----------------------------------------\n\nTITLE: Setting Width and Height Properties of an Image in Python\nDESCRIPTION: This snippet shows how to set the width and height properties of an image within a LibreOffice document. The values are in `1/100` mm units.  The code sets the width to 45 mm and the height to 40 mm.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprops.setPropertyValue(\"Width\", 4_500) # 45 mm width\nprops.setPropertyValue(\"Height\", 4_000) # 40 mm height\n```\n\n----------------------------------------\n\nTITLE: Generating DrawingShapeKind Class Documentation with Sphinx\nDESCRIPTION: This reStructuredText snippet configures Sphinx to auto-generate documentation for the DrawingShapeKind class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/drawing_shape_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.drawing_shape_kind.DrawingShapeKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Specific Data Point Label\nDESCRIPTION: Code snippet demonstrating how to apply font effects to a single data point label (in this case, the 5th point in the first series) using style_data_point method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/font_effects.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(\n    chart_doc=chart_doc, series_idx=0, idx=4, styles=[data_lbl_font]\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving cell protection settings from a cell in Calc\nDESCRIPTION: This snippet demonstrates how to obtain the current cell protection settings from an existing cell. The from_obj method creates a CellProtection instance based on the protection properties of the specified cell.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/cell_protection.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = CellProtection.from_obj(cell)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch to Chart Legend in Python\nDESCRIPTION: Applies a hatch pattern to a chart legend using the LegendAreaHatch class. Requires setting transparency and uses PresetHatchKind enum for hatch style selection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.area import Hatch as LegendAreaHatch, PresetHatchKind\nfrom ooodev.format.chart2.direct.legend.transparency import Transparency as LegendTransparency\n# ... other code\n\nlegend_hatch_style = LegendAreaHatch.from_preset(\n    chart_doc=chart_doc, preset=PresetHatchKind.YELLOW_45_DEGREES_CROSSED\n)\nlegend_bg_transparency_style = LegendTransparency(0)\nChart2.style_legend(\n    chart_doc=chart_doc, styles=[legend_bg_transparency_style, legend_hatch_style]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up LibreOffice Draw Document with Shape Color\nDESCRIPTION: Creates a LibreOffice Draw document, adds a rectangle shape, and applies a light green fill color. The code demonstrates document creation, shape drawing, and color application using the OOO Dev Tools library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/color.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format.draw.direct.area import Color as ShapeColor\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.office.draw import Draw\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Draw.create_draw_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_75_PERCENT)\n\n        slide = Draw.get_slide(doc)\n\n        width = 36\n        height = 36\n        x = int(width / 2)\n        y = int(height / 2) + 20\n\n        rec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\n        style = ShapeColor(color=StandardColor.GREEN_LIGHT2)\n        style.apply(rec)\n\n        f_style = ShapeColor.from_obj(rec)\n        assert f_style.prop_color == style.prop_color\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example Alternative\nDESCRIPTION: Provides an alternative example of an event callback function where the `CtlGrid` instance is accessed from keyword arguments. The `cast` function is used to ensure the type of the control source.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_grid.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlGrid, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Changing Active Pane and Moving Selection - Python\nDESCRIPTION: This snippet demonstrates how to change the active pane in a spreadsheet document to the top pane, followed by moving the cell selection to the top cell (A1). The updated view states are then printed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# in garlic_secrets.py\n# ...\nstates = doc.get_view_states()\n\n# make top pane the active one in the first sheet\nstates[0].move_pane_focus(dir=ViewState.PaneEnum.MOVE_UP)\ndoc.set_view_states(states=states)\n# move selection to top cell\nsheet.goto_cell(cell_name=\"A1\")\n\n# show revised sheet states\nstates = doc.get_view_states()\nfor s in states:\n    s.report()\n```\n\n----------------------------------------\n\nTITLE: Accessing a Page from Impress Document by Index or Name\nDESCRIPTION: This snippet shows how to access a page in an Impress document either by its index or by name, using Python's indexing capabilities. Dependency: Requires the ImpressDoc class. Input is an open document and either an integer index or a string name, and it outputs the ImpressPage object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/impress_pages.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> doc = ImpressDoc.open_doc(\"test.odp\")\n>>> doc.slides[0]\n<ooodev.draw.ImpressPage object at 0x7f7f0c0b2b90>\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> doc = ImpressDoc.open_doc(\"test.odp\")\n>>> doc.slides[\"page1\"]\n<ooodev.draw.ImpressPage object at 0x7f7f0c0b2b90>\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> doc = ImpressDoc.open_doc(\"test.odp\")\n>>> doc.slides[-1]\n<ooodev.draw.ImpressPage object at 0x7f7f0c0b2b90>\n```\n\n----------------------------------------\n\nTITLE: Applying Fill Image to Rectangle in Python using ooodev\nDESCRIPTION: This snippet shows how to add a fill image to a rectangle shape by utilizing the ShapeImage class’s from_preset() method from the ooodev library. It expects a pre-existing document to operate on.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/img.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Img as ShapeImage\nfrom ooodev.format.draw.direct.area import PresetImageKind\n# ... other code\n\npage = Write.get_draw_page(doc)\nrect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\nstyle = ShapeImage.from_preset(preset=PresetImageKind.COFFEE_BEANS)\nstyle.apply(rect)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Padding from Paragraph Style in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the border padding configuration from an existing paragraph style in the document. It uses the from_style class method of the Padding class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/bordes.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Padding.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Footer Border Shadow from Document Style\nDESCRIPTION: Demonstrates how to retrieve the shadow configuration from an existing document style. This allows verification of the current shadow settings applied to the footer borders.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/bordes.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Shadow.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Applying Page Style to a Sheet in Python\nDESCRIPTION: Applies a specific page style to a LibreOffice Calc sheet using the `Page` class. This snippet demonstrates the simplicity of applying predefined styles to an active sheet.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/page.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# ... other code\\nstyle = Page(name=CalcStylePageKind.REPORT)\\nstyle.apply(sheet)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Area Pattern from Writer Style\nDESCRIPTION: This snippet demonstrates how to retrieve the Area pattern from an existing Page style in Writer using the Pattern class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = PageStylePattern .from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Formatting Shape Text Paragraphs in LibreOffice Draw with Python\nDESCRIPTION: Example demonstrates creating a Draw document, adding a rectangle shape, and applying various text formatting including font styles, colors, highlighting, indentation and spacing. The code uses the ooodev library to interface with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/paragraph/paragraph.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.direct.position_size.position_size import Position\nfrom ooodev.format.writer.direct.char.font import Font, FontEffects\nfrom ooodev.format.writer.direct.para.indent_space import Indent, Spacing\nfrom ooodev.format.writer.direct.char.highlight import Highlight\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 80\n        x = 0\n        y = 0\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        pos = Position(0, 0)\n        pos.apply(rect.component)\n        cursor = rect.get_shape_text_cursor()\n        cursor.append_para(\n            \"Hello World!\",\n            [\n                Font(b=True, color=StandardColor.GREEN),\n                FontEffects(color=StandardColor.RED),\n                Highlight(color=StandardColor.YELLOW),\n                Indent(first=3.5),\n                Spacing(below=2.5),\n            ],\n        )\n        cursor.append_para(\n            \"Wonderful Day!\",\n            [\n                Font(b=False, i=True, color=StandardColor.BLUE_DARK2),\n                Highlight(color=StandardColor.GREEN_LIGHT1),\n                Spacing(below=2.5),\n            ],\n        )\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Reporting Supported Services for OLE2Shape Model - Python\nDESCRIPTION: This code uses Info.show_services to list the supported services for an OLE2Shape's model. It is useful for determining how to store specific data types within OLE shapes. Requires a model object from an OLE shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nInfo.show_services(\"OLE2Shape Model\", model)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive Example\nDESCRIPTION: This snippet shows how to use the automodule directive in reStructuredText to automatically generate documentation for a Python module.  It includes options to display members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.page.footer.footer.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.page.footer.footer\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Customizing Connector Line Properties\nDESCRIPTION: Setting line width, color and arrow properties for a connector shape\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconn_shape.set_property(\n    LineWidth=50,\n    LineColor=CommonColor.DARK_ORANGE,\n    LineStartName=str(GraphicArrowStyleKind.ARROW_SHORT),\n    LineStartCenter=False,\n    LineEndName=GraphicArrowStyleKind.NONE,\n)\n```\n\n----------------------------------------\n\nTITLE: Subtracting RangeObj from ColObj in Python\nDESCRIPTION: Shows how to subtract a RangeObj instance from a ColObj instance. The example creates a range F10:H15 and subtracts it from column 2, resulting in H10:H15 with just the rightmost column remaining.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>> from ooodev.utils.data_type.col_obj import ColObj\n>>>\n>>> rng1 = RangeObj(col_start=\"F\", col_end=\"H\", row_start=10, row_end=15, sheet_idx=0) \n>>> str(rng1)\n'F10:H15'\n>>> rng1.col_count \n3\n>>> rng2 = ColObj.from_int(2) - rng1\n>>> str(rng2)\n'H10:H15'\n>>> repr(rng2)\n\"RangeObj(col_start='H', col_end='H', row_start=10, row_end=15, sheet_idx=0)\"\n>>> rng2.col_count\n1\n```\n\n----------------------------------------\n\nTITLE: Linking Master Pages in Python\nDESCRIPTION: This static method assigns a master page to a slide using the 'XMasterPageTarget' interface. Given a slide and a page, it sets the master page by invoking 'setMasterPage' from 'mp_target'. Requires 'XDrawPage', 'XMasterPageTarget', and proper exception handling for failed operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# in the Draw class\n@staticmethod\ndef set_master_page(slide: XDrawPage, page: XDrawPage) -> None:\n    try:\n        mp_target = Lo.qi(XMasterPageTarget, slide, True)\n        mp_target.setMasterPage(page)\n    except Exception as e:\n        raise DrawError(\"Unable to set master page\") from e\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Color with Color Constants in Draw\nDESCRIPTION: This code demonstrates how to set the gradient color of a shape using color constants defined in the `ooo-dev-tools` library. It imports the `Draw` class and `CommonColor` constants. The example then calls the `set_gradient_color` method with the shape and predefined color constants for the start and end colors, such as `CommonColor.RED` and `CommonColor.GREEN`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n        from ooodev.office.draw import Draw\n        from ooodev.utils.color import CommonColor\n\n        # other code ...\n        Draw.set_gradient_color(shape=shape, start_color=CommonColor.RED, end_color=CommonColor.GREEN)\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Preset to Chart Subtitle\nDESCRIPTION: Demonstrates applying a preset pattern to a chart subtitle using PresetPatternKind enum. Accesses the subtitle through the chart's first diagram.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_pattern import PresetPatternKind\n\n# ... other code\nsub_title = chart_doc.first_diagram.get_title()\nif sub_title is None:\n    raise ValueError(\"Title not found\")\n\nsub_title.style_area_pattern_from_preset(\n    preset=PresetPatternKind.HORIZONTAL_BRICK,\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Style from a Cell in Python\nDESCRIPTION: Retrieves the page style applied to a sheet by calling the `Page.from_obj()` method. The snippet confirms the style applied by comparing it against a known style kind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/page.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# ... other code\\n\\npage_style = Page.from_obj(sheet)\\nassert page_style.prop_name == str(CalcStylePageKind.REPORT)\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Spacing Style using Python\nDESCRIPTION: This snippet demonstrates how to create an instance of the 'Spacing' class to apply styling for paragraph spacing in a Writer document, defining above and below spacing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/indent_spacing.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npara_spacing_style = Spacing(above=8.0, below=10.0, style_name=StyleParaKind.STANDARD)\\npara_spacing_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Accessing Shape in LibreOffice DrawPage with Python\nDESCRIPTION: This code snippet demonstrates how to access the first shape within a LibreOffice DrawPage. It uses the `Lo.qi` method from the `ooodev.loader.lo` module to convert the DrawPage object to an XShapes interface, and then retrieves the first shape using `getByIndex(0)`. Finally the first shape is converted to XShape interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter11.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\n\nshapes = Lo.qi(XShapes, page)\nshape = Lo.qi(XShape, shapes.getByIndex(0))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Background Color from Page Style in Calc with Python\nDESCRIPTION: This code demonstrates how to retrieve the current background color settings from an existing page style. It uses the from_style static method to get the style object and then verifies the style name matches the expected value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/background.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# .. other code\nstyle_obj = PageStyleColor.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Adding Corner and Caps Style to a Shape in LibreOffice Draw (Python)\nDESCRIPTION: This code snippet shows how to create a rectangle shape and apply corner and cap styles to it using the CornerCaps class. It sets the corner style to MIDDLE and the cap style to SQUARE.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/corner_caps.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.line import CornerCaps, LineJoint, LineCap\n# ... other code\n\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\nstyle = CornerCaps(\n    corner_style=LineJoint.MIDDLE,\n    cap_style=LineCap.SQUARE,\n)\nstyle.apply(rect.component)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pattern from a Chart Background\nDESCRIPTION: This snippet shows how to retrieve the current pattern applied to a chart background. It uses the from_obj static method of the ChartPattern class to extract the pattern style from the chart document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = ChartPattern.from_obj(chart_doc, chart_doc.getPageBackground())\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteTablePropPartial Class with Sphinx\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the WriteTablePropPartial class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/partial/table_column_separators.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.table.partial.write_table_prop_partial.WriteTablePropPartial\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoDoc Class Documentation Directive\nDESCRIPTION: reStructuredText directive that automatically generates documentation from the GenericUnitSize class docstrings using Sphinx autodoc extension.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/generic_unit_size.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.generic_unit_size.GenericUnitSize\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Floor Preset Gradient in Python\nDESCRIPTION: This snippet demonstrates how to apply a preset gradient to the background of a chart's floor using the `style_area_gradient_from_preset()` method and the `PresetGradientKind` enum. It accesses the chart's floor and sets the gradient to `DEEP_OCEAN`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\n# ... other code\nfloor = chart_doc.first_diagram.floor\nfloor.style_area_gradient_from_preset(\n    preset=PresetGradientKind.DEEP_OCEAN,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Border Style to Legend - Python\nDESCRIPTION: This snippet demonstrates applying specific border line properties to a legend in a chart using the style_border_line() method. It ensures borders for titles and subtitles have defined colors, widths, and transparency settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.borders import LineProperties as LegendLineProperties\n# ... other code\n\n_ = legend.style_border_line(\n    color=StandardColor.BRICK,\n    width=0.8,\n    transparency=20,\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation for Shortcut Class\nDESCRIPTION: This snippet utilizes the ``autoclass`` directive from Sphinx's autodoc extension to generate documentation for the ``Shortcut`` class.  It specifically includes class members and undocumented members. It is part of reStructuredText intended to create API documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/common/shortcut.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"\n.. autoclass:: ooodev.gui.menu.common.shortcut.Shortcut\n    :members:\n    :undoc-members:\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer and Setting Paragraph Styles\nDESCRIPTION: This code snippet demonstrates how to initialize a Writer document, set paragraph styles for color and transparency, and apply these styles to the document. It uses the `ooodev` library to create, display, and modify the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.writer.modify.para.transparency import Transparency, Gradient\nfrom ooodev.format.writer.modify.para.transparency import GradientStyle, IntensityRange\nfrom ooodev.format.writer.modify.para import StyleParaKind\nfrom ooodev.format.writer.modify.para.area import Color as StyleAreaColor\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.write import Write, WriteDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = WriteDoc(Write.create_doc())\n        doc.set_visible()\n        Lo.delay(300)\n        doc.zoom(ZoomKind.ENTIRE_PAGE)\n\n        para_kind = StyleParaKind.STANDARD\n        para_color_style = StyleAreaColor(color=StandardColor.BLUE_LIGHT2, style_name=para_kind)\n        para_transparency_style = Transparency(value=52, style_name=para_kind)\n        doc.apply_styles(para_color_style, para_transparency_style)\n\n        style_obj = Transparency.from_style(doc=doc.component, style_name=para_kind)\n        assert style_obj.prop_style_name == str(para_kind)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Importing Chart2 Data Labels Font Module in Python\nDESCRIPTION: This snippet shows how to import the ooodev.format.chart2.direct.series.data_labels.font module. The module likely contains classes and functions for formatting fonts in chart data labels.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.series.data_labels.font.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.series.data_labels.font\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Combining Separate Ranges in Python\nDESCRIPTION: Shows how to combine two separate, non-adjacent ranges using the '/' operator. The example combines A2:B4 with C6:F8 to create an expanded range A2:F8 that encompasses both original ranges.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>>\n>>> rng1 = RangeObj(col_start=\"A\", col_end=\"B\", row_start=2, row_end=4, sheet_idx=0)\n>>> str(rng1)\n'A2:B4'\n>>> rng2 = RangeObj(col_start=\"C\", col_end=\"F\", row_start=6, row_end=8, sheet_idx=0)\n>>> str(rng2)\n'C6:F8'\n>>> rng3 = rng1 / rng2\n>>> str(rng3)\n'A2:F8'\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure in ReStructuredText\nDESCRIPTION: Sets up a toctree directive that organizes documentation into three categories: direct formatting, modification techniques, and style management. The toctree is configured to show only titles and include all glob-matched files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    direct/index\n    modify/index\n    style/index\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Documentation Generation\nDESCRIPTION: This code snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.modify.draw.fill_properties_style_base_multi` module.  The `:members:` option includes all module members in the documentation.  The `:undoc-members:` option includes undocumented members, and the `:show-inheritance:` option displays the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.draw.fill_properties_style_base_multi.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n\":: automodule:: ooodev.format.inner.modify.draw.fill_properties_style_base_multi\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\"\n```\n\n----------------------------------------\n\nTITLE: Using CalcDoc for Document Operations in ooodev with Python\nDESCRIPTION: Shows how to open and zoom into a document using the CalcDoc class. It involves opening the document with specified filename and loader, then setting the zoom type. Dependencies include the Calc, CalcDoc, and ZoomKind imports from ooodev.calc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import Calc,CalcDoc, ZoomKind\n# ...\ndoc = CalcDoc(Calc.open_doc(fnm=self._input_fnm, loader=loader))\ndoc.zoom(type=ZoomKind.ENTIRE_PAGE)\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive for automatically generating documentation for the drop_caps module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.drop_cap.drop_caps.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.drop_cap.drop_caps\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Style from Cursor in LibreOffice Writer with Python\nDESCRIPTION: This snippet shows how to retrieve the current page style from a page cursor in LibreOffice Writer using the ooodev library. It demonstrates using the Page.from_obj method to get the style and compares it with the previously applied style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/page.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nf_style = Page.from_obj(pg_cursor)\nassert f_style.prop_name == style.prop_name\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for WriteStyle Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the WriteStyle class. It includes all members, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/write_style.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.style.WriteStyle\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: ReStructuredText documentation directive for auto-generating module documentation with member inclusion, undocumented members, and inheritance display.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.alignment.properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.alignment.properties\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting up and applying a pattern to a rectangle in LibreOffice Draw with Python\nDESCRIPTION: This code creates a Draw document, adds a rectangle shape with text, and applies a shingle pattern to it. The pattern is applied by modifying the default drawing style using the Pattern class from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/pattern.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.modify.area import Pattern, PresetPatternKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n        style_modify = Pattern.from_preset(\n            preset=PresetPatternKind.SHINGLE,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(style_modify)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Background Image for Chart2 Legend Area in Python\nDESCRIPTION: Shows how to set a background image for the legend area of a Chart2 using the LegendAreaImg class and PresetImageKind enum from ooodev. Sets transparency to make the image visible.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.area import Img as LegendAreaImg, PresetImageKind\nfrom ooodev.format.chart2.direct.legend.transparency import Transparency as LegendTransparency\n# ... other code\n\nlegend_img_style = LegendAreaImg.from_preset(\n    chart_doc=chart_doc, preset=PresetImageKind.PARCHMENT_PAPER\n)\nlegend_bg_transparency_style = LegendTransparency(0)\nChart2.style_legend(\n    chart_doc=chart_doc, styles=[legend_bg_transparency_style, legend_img_style]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Left) with Right Margin using style_direct in Python\nDESCRIPTION: Creates a table with left alignment and a specific right margin using the style_direct approach. Instead of setting width, this example sets the right margin in millimeters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=False,\n    align=TableAlignKind.LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    right=UnitMM(60.0),\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Image to Chart Title in Python\nDESCRIPTION: This snippet shows how to apply an image style to a chart title using the Chart2.style_title() method. It assumes a 'title_img' object has been previously defined.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nChart2.style_title(chart_doc=chart_doc, styles=[title_img])\n```\n\n----------------------------------------\n\nTITLE: Styling Floor Border Line in Chart\nDESCRIPTION: Example of applying border line styling to a chart floor using color, width, and transparency parameters\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\nfloor = chart_doc.first_diagram.floor\nfloor.style_border_line(\n    StandardColor.PURPLE_DARK1, width=0.8, transparency=20\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Sentences in a Document - Python\nDESCRIPTION: This function checks the sentences in a LibreOffice document. It loads a spell checker and proofreader, navigates through paragraphs, and processes each sentence for grammar and spelling issues. The function uses methods from the 'Write' class to handle document analysis.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef check_sentences(doc: XTextDocument) -> None:\n    # load spell checker, proof reader\n    speller = Write.load_spell_checker()\n    proofreader = Write.load_proofreader()\n\n    para_cursor = Write.get_paragraph_cursor(doc)\n    para_cursor.gotoStart(False)  # go to start test; no selection\n\n    while 1:\n        para_cursor.gotoEndOfParagraph(True)  # select all of paragraph\n        curr_para_str = para_cursor.getString()\n\n        if len(curr_para_str) > 0:\n            print(f\"\\n>> {curr_para_str}\")\n\n            sentences = Write.split_paragraph_into_sentences(curr_para_str)\n            for sentence in sentences:\n                # print(f'S <{sentence}>')\n                Write.proof_sentence(sentence, proofreader)\n                Write.spell_sentence(sentence, speller)\n\n        if para_cursor.gotoNextParagraph(False) is False:\n            break\n```\n\n----------------------------------------\n\nTITLE: Applying Background Color to Data Series\nDESCRIPTION: This code snippet styles the area color of a specified data series in a chart. It selects the first data series from the chart's data series and applies a teal dark color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\nds.style_area_color(StandardColor.TEAL_DARK2)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Sides from Writer Document Style\nDESCRIPTION: This snippet shows how to retrieve the border sides configuration from an existing style in a Writer document. It uses the from_style method to get the style object and verifies the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/bordes.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Sides.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Initializing LibreOffice and Setting up Document (Python)\nDESCRIPTION: Sets up a LibreOffice Writer document, makes it visible, and applies initial hyphenation settings to the Standard paragraph style. It also demonstrates how to retrieve hyphenation settings from a style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/text_flow.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.para.text_flow import Breaks, FlowOptions, Hyphenation\nfrom ooodev.format.writer.modify.para.text_flow import StyleParaKind, BreakType\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_hy_style = Hyphenation(\n            auto=True, start_chars=3, end_chars=3, style_name=StyleParaKind.STANDARD\n        )\n        para_hy_style.apply(doc)\n\n        style_obj = Hyphenation.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing LibreOffice Calc Document with Border Modifications\nDESCRIPTION: Main setup function that creates a Calc document, sets visibility and zoom, applies border styling to default cell style, and verifies the style application. Uses socket connection to LibreOffice instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.calc.modify.cell.borders import Borders, Padding, Side, StyleCellKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(300)\n        Calc.zoom_value(doc, 130)\n\n        borders = Borders(\n            border_side=Side(color=CommonColor.BLUE),\n            padding=Padding(all=1.5),\n            style_name=StyleCellKind.DEFAULT,\n        )\n        borders.apply(doc)\n\n        style_obj = Borders.from_style(doc, style_name=StyleCellKind.DEFAULT)\n        assert style_obj is not None\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Adding Columns using ColObj in Python LibreOffice\nDESCRIPTION: Demonstrates adding columns to a range using ColObj. Creates a range F10:H15 and adds 2 columns to extend it to F10:J15.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> rng1 = RangeObj(col_start=\"F\", col_end=\"H\", row_start=10, row_end=15, sheet_idx=0) \n>>> str(rng1)\n'F10:H15'\n>>> rng1.col_count\n3\n>>> rng2 = rng1 + ColObj.from_int(2)\n>>> str(rng2)\n'F10:J15'\n>>> repr(rng2)\n\"RangeObj(col_start='F', col_end='J', row_start=10, row_end=15, sheet_idx=0)\"\n>>> rng2.col_count \n5\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Master Page\nDESCRIPTION: Creates a new master page at a specified index using XDrawPages.insertNewByIndex() method\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef insert_master_page(doc: XComponent, idx: int) -> XDrawPage:\n    try:\n        mp_supp = Lo.qi(XMasterPagesSupplier, doc, True)\n        pgs = mp_supp.getMasterPages()\n        result = pgs.insertNewByIndex(idx)\n        if result is None:\n            raise NoneError(\"None Value: insertNewByIndex() return None\")\n        return result\n    except Exception as e:\n        raise DrawPageError(\"Unable to insert master page\") from e\n```\n\n----------------------------------------\n\nTITLE: Installing a Python Package\nDESCRIPTION: This snippet demonstrates using pip to install the 'ooo-dev-tools' Python package necessary for LibreOffice development. It captures the installation output to ensure successful package installation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_portable_install_pip.rst#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n.\\python.exe -m pip install ooo-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient for Paragraph Style in Writer\nDESCRIPTION: This code configures and applies a gradient style to a paragraph in a Writer document.  It sets a paragraph style, defines a color for the area, and then applies a gradient with specified properties like style, angle, border, and intensity using the `Gradient` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npara_kind = StyleParaKind.STANDARD\npara_color_style = StyleAreaColor(color=StandardColor.BLUE_LIGHT2, style_name=para_kind)\npara_gradient_style = Gradient(\n    style=GradientStyle.LINEAR,\n    angle=45,\n    border=22,\n    grad_intensity=IntensityRange(0, 100),\n    style_name=para_kind,\n)\ndoc.apply_styles(para_color_style, para_gradient_style)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Text Anchor Properties\nDESCRIPTION: Shows how to retrieve the text anchor properties from an existing shape using the TextAnchor.from_obj() method. Includes verification of anchor point position and full width settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text/text_anchor.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.text.text import TextAnchor\n# ... other code\n\n# get the properties from the shape\nf_style = TextAnchor.from_obj(rect.component)\nassert f_style.prop_full_width is True\nassert f_style.prop_anchor_point == ShapeBasePointKind.TOP_CENTER\n```\n\n----------------------------------------\n\nTITLE: Applying Paragraph Highlight Style in Python\nDESCRIPTION: This code snippet demonstrates how to apply a highlight color to a paragraph style in a LibreOffice Writer document using the `Highlight` class from the `ooodev` library.  It sets the highlight color to `StandardColor.YELLOW_LIGHT3` for the `StyleParaKind.STANDARD` paragraph style. This requires the `ooodev` library to be installed and a connection to LibreOffice to be established.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/highlight.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.writer.modify.para.highlight import Highlight, StyleParaKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        para_hl_style = Highlight(color=StandardColor.YELLOW_LIGHT3, style_name=StyleParaKind.STANDARD)\n        para_hl_style.apply(doc)\n\n        style_obj = Highlight.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Getting List Number from Style in Python\nDESCRIPTION: This snippet retrieves the line number style from a LibreOffice Writer document using the `LineNum.from_style` method. It asserts that the retrieved style name matches the expected style name, verifying the successful retrieval of the style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/outline_list.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = LineNum.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Getting a Page by Name\nDESCRIPTION: Demonstrates how to retrieve a page from a Draw document by its name, again using the `[]` operator. This provides a convenient way to access pages if their names are known.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_pages.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc.open_doc(\"test.odg\")\n>>> doc.slides[\"page1\"]\n<ooodev.draw.DrawPage object at 0x7f7f0c0b2b90>\n```\n\n----------------------------------------\n\nTITLE: Linking Data Sink to Chart Data Series in Python\nDESCRIPTION: This example demonstrates linking a data sink containing error bar data to a chart's data series by setting the ErrorBarY property. It ensures error bar display on the chart, relying on a correctly initialized XPropertySet and previously set data sequences.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2.set_y_error_bars(); see section 5.4 below\n# ...\n# store error bar in data series\ndata_series_arr = cls.get_data_series(chart_doc=chart_doc)\ndata_series = data_series_arr[0]\nProps.set(data_series, ErrorBarY=error_bars_ps)\n# ...\n\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Data Point with Hatch Background in Python\nDESCRIPTION: This snippet demonstrates applying a hatch background to the last data point in the first series of a chart. It uses idx=-1 to target the last data point in the series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=-1, styles=[data_series_hatch])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Information from a Style in LibreOffice Calc with Python\nDESCRIPTION: This code snippet shows how to retrieve font information from an existing style in LibreOffice Calc. It uses the FontEffects.from_style method to get the font properties of the default cell style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = FontEffects.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\nassert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Accessing PathSubstitution in Python for LibreOffice\nDESCRIPTION: Static read-only property that returns a com.sun.star.util.PathSubstitution instance. This property is used to access path substitution functionality in LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/session.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nSession.path_sub\n```\n\n----------------------------------------\n\nTITLE: Setting Header Area Color in LibreOffice Writer\nDESCRIPTION: Creates and applies a header area color style to a Writer document. Uses the Color class from the header.area module to set the background color of the header to GOLD_LIGHT2.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.header.area import Color as HeaderAreaColor\n# ... other code\n\nheader_color_style = HeaderAreaColor(\n    color=StandardColor.GOLD_LIGHT2, style_name=header_style.prop_style_name\n)\nStyler.apply(doc, header_style, header_color_style)\n```\n\n----------------------------------------\n\nTITLE: Aligning Table Using Direct Style Method in Python\nDESCRIPTION: This code snippet demonstrates how to add a table using a cursor and directly apply style properties to it using the 'style_direct' method. Dependencies include a cursor object, a table data variable 'tbl_data' and supporting classes such as 'CommonColor', 'TableAlignKind', and 'UnitMM'. The code configures a table's position and alignment using non-relative (manual positioning).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=False,\n    align=TableAlignKind.MANUAL,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    left=UnitMM(66.0),\n    right=UnitMM(55.0),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Area Gradient in Writer\nDESCRIPTION: This snippet shows how to set a gradient for the footer area in a Writer document using the Gradient class and a preset gradient from the PresetGradientKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.footer.area import Gradient, PresetGradientKind\n# ... other code\n\ngradient_style = Gradient.from_preset(\n    preset=PresetGradientKind.DEEP_OCEAN, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, footer_style, gradient_style)\n```\n\n----------------------------------------\n\nTITLE: Setting Preset Gradients for Chart Wall/Floor\nDESCRIPTION: Demonstrates applying preset gradient styles to chart walls and floors using the Gradient class with preset values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.wall.area import Gradient as WallGradient, PresetGradientKind\n\n# ... other code\nwall_grad = WallGradient.from_preset(chart_doc, PresetGradientKind.DEEP_OCEAN)\nChart2.style_wall(chart_doc=chart_doc, styles=[wall_grad])\n```\n\nLANGUAGE: python\nCODE:\n```\nfloor_grad = WallGradient.from_preset(chart_doc, PresetGradientKind.MIDNIGHT)\nChart2.style_floor(chart_doc=chart_doc, styles=[floor_grad])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Padding Settings from Page Header Style in Python\nDESCRIPTION: Shows how to extract the current padding settings from an existing header style. The Padding.from_style method returns a Padding object containing the current border padding configuration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/bordes.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Padding.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Setting Font Effects in LibreOffice Draw with Python\nDESCRIPTION: This code demonstrates how to set font effects for a rectangle shape in LibreOffice Draw. It creates a document, adds a rectangle with text, and applies custom font effects including red text color, blue single underline, and shadow. The style is applied to the default drawing style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/font/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\nfrom ooodev.format.draw.modify.font import FontEffects, FontUnderlineEnum\nfrom ooodev.format.draw.modify.font import FontLine\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n        font_style = FontEffects(\n            color=CommonColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n            shadowed=True,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(font_style)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Area Hatch from Writer Style\nDESCRIPTION: This snippet demonstrates how to retrieve the Area hatch from an existing Page style in Writer using the Hatch class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = PageStyleHatch .from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Configuring Y-Axis Label Position in Python\nDESCRIPTION: This snippet configures the position of labels on the y-axis of a chart, enhancing the clarity and readability of the chart by positioning labels appropriately.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/positioning.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.chart.chart_axis_label_position import ChartAxisLabelPosition\n# ... other code\n\nchart_doc.axis_y.style_axis_pos_label_position(\n    ChartAxisLabelPosition.NEAR_AXIS_OTHER_SIDE\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Types in Python\nDESCRIPTION: Class methods to retrieve chart types from a chart document, with error handling and support for multiple chart types\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_chart_type(cls, chart_doc: XChartDocument) -> XChartType:\n    try:\n        chart_types = cls.get_chart_types(chart_doc)\n        return chart_types[0]\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error getting chart type\") from e\n\n@classmethod\ndef get_chart_types(cls, chart_doc: XChartDocument) -> Tuple[XChartType, ...]:\n    try:\n        coord_sys = cls.get_coord_system(chart_doc)\n        ct_con = Lo.qi(XChartTypeContainer, coord_sys, True)\n        result = ct_con.getChartTypes()\n        if result is None:\n            raise UnKnownError(\"None Value: getChartTypes() returned a value of None\")\n        return result\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error getting chart types\") from e\n```\n\n----------------------------------------\n\nTITLE: Documenting module contents with automodule in reStructuredText\nDESCRIPTION: This snippet uses the `automodule` directive in reStructuredText to automatically generate documentation for the `ooodev.format.inner.modify.write.page.footer.area` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which members are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.page.footer.area.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.page.footer.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Extracting All Text from Document\nDESCRIPTION: Static method for retrieving entire document text by navigating cursor from start to end and selecting text\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_all_text(cursor: XTextCursor) -> str:\n    cursor.gotoStart(False)\n    cursor.gotoEnd(True)\n    text = cursor.getString()\n    cursor.gotoEnd(False)  # to deselect everything\n    return text\n```\n\n----------------------------------------\n\nTITLE: Getting Table Borders using styles in Python\nDESCRIPTION: This code snippet illustrates how to retrieve the `Borders` style applied to a table in OpenOffice Writer using Python and the ooodev library. It uses the `Borders.from_obj` method to extract the border style from the table's component, allowing you to inspect or modify the applied styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n# getting the table properties\ntbl_bdr_style = Borders.from_obj(table.component)\nassert tbl_bdr_style is not None\n```\n\n----------------------------------------\n\nTITLE: Adding a button and event handler to a Calc form in Python\nDESCRIPTION: This code snippet demonstrates how to add a button control to a Calc form using the `insert_control_button` method, and how to attach an event handler to the button's action performed event. The event handler prints a message to the console when the button is clicked, displaying the button's label and name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_form.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from typing import Any\n>>> from ooodev.calc import Calc, CalcDoc\n>>> from ooodev.events.args.event_args import EventArgs\n>>> from ooodev.form.controls import FormCtlButton\n>>>\n>>> doc = CalcDoc(Calc.open_doc(\"form.ods\"))\n>>> doc.set_visible()\n>>> sheet = doc.sheets[0]\n>>> if len(sheet.draw_page.forms) == 0:\n...     sheet.draw_page.forms.add() # add a form with a default name of Form1\n>>> frm = sheet.draw_page.forms[0]\n>>> print(frm.name)\nForm1\n>>> btn = frm.insert_control_button(x=10, y=10, width=40, height=10, label=\"Button Test\")\n>>> btn.add_event_action_performed(on_btn_action_preformed)\n>>>\n>>> def on_btn_action_preformed(\n...     src: Any, event: EventArgs, control_src: FormCtlButton, *args, **kwargs\n... ) -> None:\n...     print(\n...         f\"Action Performed: '{control_src.model.Label}', Control Name: {control_src.name}\"\n...     )\n```\n\n----------------------------------------\n\nTITLE: Applying Font Style to Cell in Calc\nDESCRIPTION: Demonstrates how to create a font style and apply it to a cell when setting a value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfont_style = FontOnly(name=\"Lucida Calligraphy\", size=20, font_style=\"italic\")\nCalc.set_val(value=\"Hello\", cell=cell, styles=[font_style])\n```\n\n----------------------------------------\n\nTITLE: Adding Line Arrow Styles to Shape\nDESCRIPTION: Shows how to create and apply arrow styles to a line shape using the ArrowStyles class. Sets properties for both start and end arrows including style, centering, and width.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/arrow_styles.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.line import ArrowStyles, GraphicArrowStyleKind\n\n# ... other code\n\nline = slide.draw_line(x1=x, y1=y, x2=x + width, y2=y + height)\nstyle = ArrowStyles(\n    start_line_name=GraphicArrowStyleKind.ARROW_LARGE,\n    start_line_center=True,\n    start_line_width=2.5,\n    end_line_name=GraphicArrowStyleKind.SQUARE_45,\n    end_line_center=False,\n    end_line_width=1.9,\n)\nstyle.apply(line.component)\n```\n\n----------------------------------------\n\nTITLE: Setting Line Spacing Style using Python\nDESCRIPTION: This code example applies line spacing to a paragraph using the 'LineSpacing' class, allowing the specification of proportional line spacing values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/indent_spacing.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npara_ln_spacing_style = LineSpacing(\\n    mode=ModeKind.PROPORTIONAL, value=85, style_name=StyleParaKind.STANDARD\\n)\\npara_ln_spacing_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Style in Python OOo Tools\nDESCRIPTION: The snippet demonstrates setting up a drawing document and applying a preset gradient style (MAHOGANY) to a rectangle shape using the ooodev library. The necessary imports include drawing manipulation and style modification classes. The code creates a draw document, draws a rectangle, applies a gradient style from presets, and eventually closes the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.modify.area import Gradient, PresetGradientKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n        style_modify = Gradient.from_preset(\n            preset=PresetGradientKind.MAHOGANY,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(style_modify)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Accessing User Defined Properties in LibreOffice Calc with Python\nDESCRIPTION: Example demonstrates how to open a Calc document and access its user-defined properties using Info.get_user_defined_props(). The code shows how to retrieve specific property values like PrintSheet and PrinterName using XPropertySet interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/modules/info/get_user_defined_props.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom com.sun.star.beans import XPropertySet\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.calc import Calc\nfrom ooodev.utils.info import Info\n\n# ... other code\n\ndoc = Calc.open_doc(fnm=\"my_spreadsheet.ods\")\nuser_props = Info.get_user_defined_props(doc)\n# get properties as XPropertySet\nps = Lo.qi(XPropertySet, user_props, True)\nassert int(ps.getPropertyValue(\"PrintSheet\")) == 2\nassert ps.getPropertyValue(\"PrinterName\") == \"Brother MFC-L2750DW series\"\n```\n\n----------------------------------------\n\nTITLE: Importing WriteStyleFamilies Class in Python\nDESCRIPTION: This code snippet demonstrates how to import the WriteStyleFamilies class from the ooodev.write.style module. It's a reference for developers working with LibreOffice Writer style families in Python.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/write_style_families.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.write.style import WriteStyleFamilies\n```\n\n----------------------------------------\n\nTITLE: Adding transparency to a shape in LibreOffice Draw\nDESCRIPTION: This code snippet shows how to add transparency to a shape in LibreOffice Draw. It uses the ShapeTransparency class to create a transparency style and applies it to a rectangle shape along with a color style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/transparency/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format import Styler\nfrom ooodev.format.draw.direct.transparency import Transparency as ShapeTransparency\n# ... other code\n\nrect = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\ncolor_style = ShapeColor(StandardColor.RED)\nstyle = ShapeTransparency(60)\nStyler.apply(rect, color_style, style)\n```\n\n----------------------------------------\n\nTITLE: Retrieving LibreOffice Share Directory in Python\nDESCRIPTION: Static read-only property that returns the path to the LibreOffice program share directory, such as 'C:\\Program Files\\LibreOffice\\share'. This is useful for accessing shared resources.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/session.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSession.share\n```\n\n----------------------------------------\n\nTITLE: Creating and applying custom gradient to chart data series in Python\nDESCRIPTION: Demonstrates creating a custom linear gradient with specified angle and color range, then applying it to a chart data series. Uses GradientStyle and ColorRange classes to define the gradient.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.area import Gradient as DataSeriesGradient\nfrom ooodev.format.chart2.direct.series.data_series.area import GradientStyle, ColorRange\n# ... other code\n\ndata_series_grad = DataSeriesGradient(\n    chart_doc=chart_doc,\n    style=GradientStyle.LINEAR,\n    angle=215,\n    grad_color=ColorRange(StandardColor.TEAL_DARK3, StandardColor.BLUE_LIGHT2),\n)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_series_grad])\n```\n\n----------------------------------------\n\nTITLE: Handling Events with Control Source in Python\nDESCRIPTION: This snippet defines an event handler function for a dialog control using 'ooodev'. It showcases how a callback can include a control source as a keyword argument. The function can retrieve the control from 'kwargs' and casts it to 'CtlFile'. No specific dependencies are required, but it assumes integration with 'ooodev'. Inputs include 'src', 'event', and 'kwargs', where 'kwargs' must contain 'control_src'. There are no outputs as it's a void function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_file.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlFile, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for WindowTitle class\nDESCRIPTION: Sphinx directive that automatically generates documentation for the WindowTitle class from the ooodev.utils.data_type.window_title module. The directive includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/window_title.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.window_title.WindowTitle\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Module Contents: ooodev.adapter.beans\nDESCRIPTION: This snippet represents the module contents of `ooodev.adapter.beans`. It utilizes `automodule` to automatically generate documentation for the module, including its members, undocumented members, and inheritance information. The documentation is built using Sphinx directives.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.beans.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\n.. automodule:: ooodev.adapter.beans\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Transparency for Data Series in Python\nDESCRIPTION: Simple snippet showing how to create a transparency style and apply it to data series. This sets a uniform 50% transparency for all chart data series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.transparency import Transparency as SeriesTransparency\n# ... other code\n\ndata_series_transparency = SeriesTransparency(value=50)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_series_transparency])\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback for CtlDateField in Python\nDESCRIPTION: This snippet demonstrates the structure of a callback function that handles events triggered by the CtlDateField class. The callback can accept a control source as an optional parameter, which allows accessing the specific instance that triggered the event.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_date_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\\n    src: Any, event: EventArgs, control_src: CtlDateField, *args, **kwargs\\n) -> None:\\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Attribute Options for Chart Data Series in Python\nDESCRIPTION: This snippet demonstrates how to set attribute options for chart data labels using the AttribOptions class. It sets the placement of data labels to inside the chart elements.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import AttribOptions\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import PlacementKind\n# ... other code\n\nattrib_opt = AttribOptions(placement=PlacementKind.INSIDE)\nChart2.style_data_series(chart_doc=chart_doc, styles=[attrib_opt])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Document with Header Style in Python OOO Dev Tools\nDESCRIPTION: Sets up a Writer document with a page header style. Creates a new document, makes it visible, sets zoom level, and applies a header style with various properties like height, spacing, and margins.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.header import Header, WriterStylePageKind\nfrom ooodev.format.writer.modify.page.header.area import Color as PageAreaColor\nfrom ooodev.format import Styler\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        header_style = Header(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            spacing_dyn=True,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=WriterStylePageKind.STANDARD,\n        )\n        header_color_style = HeaderAreaColor(\n            color=StandardColor.GOLD_LIGHT2, style_name=header_style.prop_style_name\n        )\n        Styler.apply(doc, header_style, header_color_style)\n\n        style_obj = HeaderAreaColor.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Get a Form by Name\nDESCRIPTION: Illustrates how to retrieve a form from a Calc sheet by its name.  The example first checks if any forms exist and adds a form named \"MyForm\" if none are present. Then, it accesses the form using its name as the index.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_forms.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> sheet = doc.sheets[0]\n>>> if len(sheet.draw_page.forms) == 0:\n...    sheet.draw_page.forms.add_form(\"MyForm\")\n>>> form = sheet.draw_page.forms[\"MyForm\"]\n<ooodev.calc.CalcForm object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Removing Border from a Cell\nDESCRIPTION: This example shows how to remove the border from a cell by applying an empty `Borders` object after initially setting a default border.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_obj = Calc.get_cell_obj(\"B2\")\nCalc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\ncell = Calc.get_cell(sheet, cell_obj)\nStyler.apply(cell, Borders().default)\n# ...\n# remove border\nStyler.apply(cell, Borders().empty)\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal and Vertical Border Lines in Calc\nDESCRIPTION: Demonstrates setting outer border colors and styles for a cell range. The example shows how to set blue outer borders, green dash-dot-dot horizontal lines, and red double vertical lines.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Side\nfrom ooodev.format.calc.direct.cell.borders import BorderLineKind\n\n# ... other code\nell_rng = sheet.get_range(range_name=\"B2:F6\")\ncell_rng.style_borders(\n    border_side=Side(color=CommonColor.BLUE),\n    horizontal=Side(line=BorderLineKind.DASH_DOT_DOT, color=CommonColor.GREEN),\n    vertical=Side(line=BorderLineKind.DOUBLE, color=CommonColor.RED),\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Area Image in Python\nDESCRIPTION: This code retrieves the image style applied to the chart area. It calls `style_area_image_get` to get the style and asserts that a style is successfully retrieved.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = chart_doc.style_area_image_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Gradient to Chart2 Legend Area in Python\nDESCRIPTION: Shows how to apply a preset gradient to the legend area of a Chart2 using the LegendAreaGradient class and PresetGradientKind enum from ooodev. Sets transparency to make the gradient visible.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.area import Gradient as LegendAreaGradient\nfrom ooodev.format.chart2.direct.legend.area import Gradient as PresetGradientKind\nfrom ooodev.format.chart2.direct.legend.transparency import Transparency as LegendTransparency\n# ... other code\n\nlegend_area_gradient_style = LegendAreaGradient.from_preset(\n    chart_doc=chart_doc, preset=PresetGradientKind.NEON_LIGHT\n)\nlegend_bg_transparency_style = LegendTransparency(0)\nChart2.style_legend(\n    chart_doc=chart_doc, styles=[legend_bg_transparency_style, legend_area_gradient_style]\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Gradient to Chart Subtitle in Python\nDESCRIPTION: This snippet demonstrates how to apply a custom gradient to a chart subtitle using the `style_area_gradient` method, specifying gradient parameters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.color_range import ColorRange\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\n        sub_title = chart_doc.first_diagram.get_title()\n        if sub_title is None:\n            raise ValueError(\"Title not found\")\n\n        sub_title.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.PURPLE_LIGHT2, StandardColor.BLUE_DARK1),\n        )\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Document Extraction Script in Python\nDESCRIPTION: A Python script for opening and extracting text from a document using LibreOffice API. Supports command-line file input, headless mode, and document type verification.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n# coding: utf-8\nfrom __future__ import annotations\nimport argparse\nfrom typing import cast\n\nfrom ooodev.office.write import Write\nfrom ooodev.utils.info import Info\nfrom ooodev.loader.lo import Lo\nfrom ooodev.wrapper.break_context import BreakContext\n\n\ndef args_add(parser: argparse.ArgumentParser) -> None:\n    parser.add_argument(\n        \"-f\",\n        \"--file\",\n        help=\"File path of input file to convert\",\n        action=\"store\",\n        dest=\"file_path\",\n        required=True,\n    )\n\ndef main() -> int:\n    parser = argparse.ArgumentParser(description=\"main\")\n    args_add(parser=parser)\n    args = parser.parse_args()\n    \n    with BreakContext(Lo.Loader(connector=Lo.ConnectSocket(headless=True))) as loader:\n\n        fnm = cast(str, args.file_path)\n\n        try:\n            doc = Lo.open_doc(fnm=fnm, loader=loader)\n        except Exception:\n            print(f\"Could not open '{fnm}'\")\n            raise BreakContext.Break\n\n        if Info.is_doc_type(obj=doc, doc_type=Lo.Service.WRITER):\n            text_doc = Write.get_text_doc(doc=doc)\n            cursor = Write.get_cursor(text_doc)\n            text = Write.get_all_text(cursor)\n            print(\"Text Content\".center(50, \"-\"))\n            print(text)\n            print(\"-\" * 50)\n        else:\n            print(\"Extraction unsupported for this doc type\")   \n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Margins in Millimeters in Calc\nDESCRIPTION: This code snippet demonstrates how to set the margins of a Calc document in millimeters using the `Margins` class from the `ooodev` library. It sets the left and right margins to 10mm and the top and bottom margins to 18mm, applying these settings to the default page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.page import Margins, CalcStylePageKind\n        # ... other code\n\n        style = Margins(left=10, right=10, top=18, bottom=18, style_name=CalcStylePageKind.DEFAULT)\n        style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Border Properties in Python\nDESCRIPTION: Sets up a LibreOffice Calc document and applies border styling to a chart. Opens a spreadsheet, accesses a chart, and applies green border formatting with specific width.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=2.2)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_bdr_line])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Footer Area Gradient from Writer Style\nDESCRIPTION: This snippet demonstrates how to retrieve the footer area gradient from an existing Writer document style using the Gradient class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Gradient.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Breaks from Style (Python)\nDESCRIPTION: Shows how to retrieve break settings from an existing paragraph style using the Breaks.from_style() method. This can be used to verify or inspect current style settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/text_flow.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Breaks.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Creating a Macro to Display Hello Message\nDESCRIPTION: This code snippet defines a simple macro that displays a message box with 'Hello, world!'. It includes the necessary export declaration for LibreOffice to recognize it as a callable script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_linking_paths.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom ooodev.loader import Lo\n\ndef say_hello(*args):\n    doc = Lo.current_doc\n    doc.msgbox(\"Hello, world!\")\n\ng_exportedScripts = (say_hello,)\n```\n\n----------------------------------------\n\nTITLE: Delete Form by Index\nDESCRIPTION: Illustrates deleting a form from a Draw page by its index using the `del` keyword. The example assumes there is a `doc` object and at least two forms on the first slide. Requires the `DrawDoc` class and the `Draw` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_forms.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> del doc.slides[0].draw_page.forms[1]\n```\n\n----------------------------------------\n\nTITLE: Automodule directive in Sphinx\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.format.inner.modify.calc.alignment.text_align` module. It includes the module's members, undocumented members, and inheritance information.  The purpose is to create comprehensive API documentation from the source code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.alignment.text_align.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.alignment.text_align\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Manual Command Data Lookup Implementation\nDESCRIPTION: Functions for manually looking up command data and retrieving calc command text using ModuleNamesKind\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_cmd_data(cmd: str, mod_kind: str | ModuleNamesKind) -> CmdData | None:\n    # CmdInfo() is a singleton.\n    return CmdInfo().get_cmd_data(mode_name=mod_kind, cmd=cmd)\n\n\ndef get_calc_command_text(cmd: str, default: str) -> str:\n    cmd_data = get_cmd_data(cmd, ModuleNamesKind.SPREADSHEET_DOCUMENT)\n    if cmd_data is not None:\n        return cmd_data.label or cmd_data.name\n    else:\n        return default\n\ndef main():\n    # ...\n    creator = PopupCreator()\n    menus = get_popup_menu()\n    pm = creator.create(menus)\n    # other code\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context Menu Interceptor Class in LibreOffice Calc with Python\nDESCRIPTION: This class intercepts the context menu in a Calc document and adds a new 'Go to' menu item after the 'Insert' menu item. It demonstrates how to modify context menus, create nested menu structures, and save/load menu configurations to/from JSON files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/context_class_example.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import TYPE_CHECKING\nimport uno\nfrom ooo.dyn.awt.menu_item_style import MenuItemStyleEnum\nfrom ooo.dyn.ui.context_menu_interceptor_action import ContextMenuInterceptorAction\nfrom ooodev.adapter.ui.context_menu_interceptor import ContextMenuInterceptor\nfrom ooodev.adapter.ui.context_menu_interceptor_event_data import ContextMenuInterceptorEventData\nfrom ooodev.calc import CalcDoc\nfrom ooodev.events.args.event_args_generic import EventArgsGeneric\nfrom ooodev.gui.menu.context.action_trigger_item import ActionTriggerItem\nfrom ooodev.gui.menu.context.context_creator import ContextCreator\nfrom ooodev.loader import Lo\nfrom ooodev.utils.kind.module_names_kind import ModuleNamesKind\nfrom ooodev.io.log.named_logger import NamedLogger\nfrom ooodev.loader.inst.options import Options\nimport logging\n\nif TYPE_CHECKING:\n    from ooodev.calc.calc_sheet_view import CalcSheetView\n\n\nclass CalcMenuIntercept:\n    def __init__(self, doc: CalcDoc) -> None:\n        self._fn_on_menu_intercept = self.on_menu_intercept\n        self._match_cmd = \".uno:Insert\"\n        self._action_menu = None\n        self._file_path = Lo.tmp_dir / \"sheet_tab_menu_data.json\"\n        self._logger = NamedLogger(self.__class__.__name__)\n        view = doc.get_view()\n        view.add_event_notify_context_menu_execute(self._fn_on_menu_intercept)  # type: ignore\n\n    def on_menu_intercept(\n        self,\n        src: ContextMenuInterceptor,\n        event: EventArgsGeneric[ContextMenuInterceptorEventData],\n        view: CalcSheetView,\n    ) -> None:\n        try:\n            # selection = event.event_data.event.selection.get_selection()\n            # print(selection)\n            container = event.event_data.event.action_trigger_container\n            if container[0].CommandURL == self._match_cmd:\n                self._logger.debug(f\"Matched command: {self._match_cmd}\")\n                items = self._get_menu()\n\n                item = ActionTriggerItem(\"GoTo\", \"Go to\", sub_menu=items)\n                container.insert_by_index(7, item)  # type: ignore\n                event.event_data.action = ContextMenuInterceptorAction.EXECUTE_MODIFIED\n\n        except Exception as e:\n            print(e)\n\n    def _get_menu(self):\n        if self._action_menu is None:\n            creator = ContextCreator()\n            data = self._load_menu_data()\n            self._action_menu = creator.create(data)\n        else:\n            self._logger.debug(\"Returning existing menu\")\n        return self._action_menu\n\n    def _load_menu_data(self):\n        if self._file_path.exists():\n            self._logger.debug(\"Loading menu data from json file\")\n            return self._get_menu_data_from_json()\n        creator = ContextCreator()\n        data = self._get_menu_data()\n        self._logger.debug(\"Saving menu data to json file\")\n        creator.json_dump(file=self._file_path, menus=data)\n        return data\n\n    def _get_menu_data_from_json(self) -> list:\n        return ContextCreator().json_load(self._file_path)\n\n    def _get_menu_data(self) -> list:\n        self._logger.debug(\"Creating new menu data\")\n        new_menu = [\n            {\"command\": \".uno:Cut\", \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT},\n            {\"command\": \".uno:Copy\", \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT},\n            {\"command\": \".uno:Paste\", \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT},\n            {\n                \"text\": \"Paste Special\",\n                \"command\": \".uno:PasteSpecialMenu\",\n                \"submenu\": [\n                    {\n                        # \"text\": \"Paste Unformatted\",\n                        \"command\": \".uno:PasteUnformatted\",\n                        \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT,\n                    },\n                    {\"text\": \"-\"},\n                    {\"text\": \"My Paste Only Text\", \"command\": \".uno:PasteOnlyText\", \"module\": ModuleNamesKind.NONE},\n                    {\"text\": \"Paste Only Text\", \"command\": \".uno:PasteOnlyValue\"},\n                    {\"text\": \"Paste Only Formula\", \"command\": \".uno:PasteOnlyFormula\"},\n                    {\"text\": \"-\"},\n                    {\"text\": \"Paste Transposed\", \"command\": \".uno:PasteTransposed\"},\n                    {\"text\": \"-\"},\n                    {\n                        \"command\": \".uno:PasteSpecial\",\n                        \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT,\n                    },\n                ],\n            },\n            {\"text\": \"-\"},\n            {\"text\": \"Data Select\", \"command\": \".uno:DataSelect\"},\n            {\"text\": \"Current Validation\", \"command\": \".uno:CurrentValidation\"},\n            {\"text\": \"Define Current Name\", \"command\": \".uno:DefineCurrentName\"},\n            {\"text\": \"-\"},\n            {\"text\": \"Insert cells\", \"command\": \".uno:InsertCell\"},\n            {\"text\": \"Del cells\", \"command\": \".uno:DeleteCell\"},\n            {\"text\": \"Delete\", \"command\": \".uno:Delete\"},\n            {\"text\": \"Merge Cells\", \"command\": \".uno:MergeCells\"},\n            {\"text\": \"Split Cell\", \"command\": \".uno:SplitCell\"},\n            {\"text\": \"-\"},\n            {\"text\": \"Format Paintbrush\", \"command\": \".uno:FormatPaintbrush\"},\n            {\"text\": \"Reset Attributes\", \"command\": \".uno:ResetAttributes\"},\n            {\n                \"text\": \"Format Styles Menu\",\n                \"command\": \".uno:FormatStylesMenu\",\n                \"submenu\": [\n                    {\"text\": \"Edit Style\", \"command\": \".uno:EditStyle\"},\n                    {\"text\": \"-\"},\n                    {\n                        \"text\": \"Default Cell Styles\",\n                        \"command\": \".uno:DefaultCellStylesmenu\",\n                        \"style\": MenuItemStyleEnum.RADIOCHECK,\n                    },\n                    {\n                        \"text\": \"Accent1 Cell Styles\",\n                        \"command\": \".uno:Accent1CellStyles\",\n                        \"style\": MenuItemStyleEnum.RADIOCHECK,\n                    },\n                    {\n                        \"text\": \"Accent2 Cell Styles\",\n                        \"style\": MenuItemStyleEnum.RADIOCHECK,\n                    },\n                    {\n                        \"text\": \"Accent 3 Cell Styles\",\n                        \"command\": \".uno:Accent3CellStyles\",\n                        \"style\": MenuItemStyleEnum.RADIOCHECK,\n                    },\n                    {\"text\": \"-\"},\n                    {\n                        \"text\": \"Bad Cell Styles\",\n                        \"command\": \".uno:BadCellStyles\",\n                        \"style\": MenuItemStyleEnum.RADIOCHECK,\n                    },\n                    {\n                        \"text\": \"Error Cell Styles\",\n                        \"command\": \".uno:ErrorCellStyles\",\n                        \"style\": MenuItemStyleEnum.RADIOCHECK,\n                    },\n                    {\n                        \"text\": \"Good Cell Styles\",\n                        \"command\": \".uno:GoodCellStyles\",\n                        \"style\": MenuItemStyleEnum.RADIOCHECK,\n                    },\n                    {\n                        \"text\": \"Neutral Cell Styles\",\n                        \"command\": \".uno:NeutralCellStyles\",\n                        \"style\": MenuItemStyleEnum.RADIOCHECK,\n                    },\n                    {\n                        \"text\": \"Warning Cell Styles\",\n                        \"command\": \".uno:WarningCellStyles\",\n                        \"style\": MenuItemStyleEnum.RADIOCHECK,\n                    },\n                    {\n                        \"text\": \"-\",\n                    },\n                    {\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Color Using Python\nDESCRIPTION: This snippet illustrates how to retrieve and verify the color of a shape. Using the from_obj method, it extracts the current color settings from a given shape and asserts the color matches an expected value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/color.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.area import Color as ShapeColor\n# ... other code\n\n# get the color from the shape\nf_style = ShapeColor.from_obj(rect)\n# assert the color is the same\nassert f_style.prop_color == style.prop_color\n```\n\n----------------------------------------\n\nTITLE: Removing Local Shortcut by Command (Persistent) in Python\nDESCRIPTION: Removes a local document shortcut by its command URL and persists the change. The shortcut will be permanently removed and won't reappear after restarting LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# ...\ndoc = CalcDoc.from_current_doc()\ndoc.shortcuts.remove_by_command(\".custom:alone.here\", True)\n```\n\n----------------------------------------\n\nTITLE: Creating Embedded Formula in Document - Python\nDESCRIPTION: This method creates and inserts a mathematical formula as an embedded object in a LibreOffice document, handling its properties and positioning. It utilizes event triggering and provides context for managing the object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nembed_content = Lo.create_instance_msf(\n    XTextContent, \"com.sun.star.text.TextEmbeddedObject\", raise_err=True\n)\ntry:\n    # set class ID for type of object being inserted\n    props = Lo.qi(XPropertySet, embed_content, True)\n    props.setPropertyValue(\"CLSID\", Lo.CLSID.MATH)\n    props.setPropertyValue(\"AnchorType\", TextContentAnchorType.AS_CHARACTER)\n\n    # insert object in document\n    cls._append_text_content(cursor=cursor, text_content=embed_content)\n    cls.end_line(cursor)\n\n    # access object's model\n    embed_obj_supplier = Lo.qi(XEmbeddedObjectSupplier2, embed_content, True)\n```\n\n----------------------------------------\n\nTITLE: Relative Positioning Using Direct Style Method in Python\nDESCRIPTION: This example illustrates how to apply relative positioning to a table using the 'style_direct' method after the table is created via a cursor. Key resources used are 'CommonColor', 'TableAlignKind', 'UnitMM', and 'Intensity'. The code specifically sets a table's position based on the left alignment with a specified width.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=True,\n    align=TableAlignKind.FROM_LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    left=Intensity(20),\n    width=Intensity(40),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Popup Menu with Event Handlers\nDESCRIPTION: A comprehensive example showing how to create a custom popup menu, add items with different styles, and set up event handlers for menu interactions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui.menu.popup_menu import PopupMenu\nfrom typing import Any, cast, TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from com.sun.star.awt import MenuEvent\n\ndef on_my_cmd_menu_select(src: Any, event: EventArgs, menu: PopupMenu) -> None:\n    print(\"Menu Selected\")\n    me = cast(\"MenuEvent\", event.event_data)\n    print(\"MenuId\", me.MenuId)\n\n    pos = menu.get_item_pos(me.MenuId)\n    menu_type = menu.get_item_type(pos)\n    if menu_type == MenuItemType.SEPARATOR:\n        return\n    enabled = menu.is_item_enabled(me.MenuId)\n    if not enabled:\n        return\n    cmd = menu.get_command(me.MenuId)\n    if cmd == \"MyCommand1\":\n        print(\"Found Command\", cmd)\n        doc = Lo.current_doc\n        doc.msgbox(\"Found Command 1\", title=\"Info\", boxtype=1)\n    elif cmd == \"MyCommand2\":\n        print(\"Found Command\", cmd)\n\ndef on_menu_my_cmd_highlighted(src: Any, event: EventArgs, menu: PopupMenu) -> None:\n    print(\"Menu Highlighted\")\n    me = cast(\"MenuEvent\", event.event_data)\n    print(\"MenuId\", me.MenuId)\n    pos = menu.get_item_pos(me.MenuId)\n    menu_type = menu.get_item_type(pos)\n    if menu_type == MenuItemType.SEPARATOR:\n        return\n    cmd = menu.get_command(me.MenuId)\n    if cmd:\n        print(\"Command\", cmd)\n\ndef create_cmd_menu() -> PopupMenu:\n    pm = PopupMenu.from_lo()\n    pm.insert_item(0, \"~First Entry\", MenuItemStyleKind.NONE, 0)\n    pm.insert_item(1, \"~First Radio Entry\", MenuItemStyleKind.RADIOCHECK | MenuItemStyleKind.AUTOCHECK, 1)\n    pm.insert_item(2, \"~Second Radio Entry\", MenuItemStyleKind.RADIOCHECK | MenuItemStyleKind.AUTOCHECK, 2)\n    pm.insert_item(3, \"~Third RadioEntry\", MenuItemStyleKind.RADIOCHECK | MenuItemStyleKind.AUTOCHECK, 3)\n    pm.insert_separator(4)\n    pm.insert_item(4, \"F~ifth Entry\", MenuItemStyleKind.CHECKABLE | MenuItemStyleKind.AUTOCHECK, 5)\n    pm.insert_item(5, \"~Fourth Entry\", MenuItemStyleKind.CHECKABLE | MenuItemStyleKind.AUTOCHECK, 6)\n    pm.enable_item(1, False)\n    pm.insert_item(6, \"~Sixth Entry\", 0, 7)\n    pm.insert_item(7, \"~EightEntry\", MenuItemStyleKind.RADIOCHECK | MenuItemStyleKind.AUTOCHECK, 8)\n    for i in range(8):\n        pm.set_command(i, f\"MyCommand{i}\")\n    pm.check_item(2, True)\n    return pm\n\ndef add_cmd_menu() -> None:\n    menu_id, _ = mb.find_item_menu_id(str(MenuLookupKind.TOOLS))\n    if menu_id < 0:\n        raise Exception(\"Tools Menu not found!\")\n\n    tools_popup = mb.get_popup_menu(menu_id)\n    if not tools_popup:\n        raise Exception(f\"Did not find popup menu for menu id: {menu_id}\")\n\n    new_id = tools_popup.get_max_menu_id() + 1\n    pm = create_cmd_menu()\n```\n\n----------------------------------------\n\nTITLE: Applying Wall Hatch to Chart\nDESCRIPTION: Applies a crossed blue hatch pattern at 45 degrees to a chart wall. Uses the WallHatch class with PresetHatchKind enum to define the hatch style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.wall.area import Hatch as WallHatch, PresetHatchKind\n# ... other code\n\nwall_hatch = WallHatch.from_preset(chart_doc, PresetHatchKind.BLUE_45_DEGREES_CROSSED)\nChart2.style_wall(chart_doc=chart_doc, styles=[wall_hatch])\n```\n\n----------------------------------------\n\nTITLE: Menu Command Setting and Event Handling\nDESCRIPTION: Shows how to set menu commands and handle menu events. The code demonstrates setting a command for a menu item and adding it to the execution set.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npm.set_command(0, \".uno:ToggleFormula\")\nself._exec_menu_ids.add(0)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart Wall and Floor Transparency in Python\nDESCRIPTION: General setup code that demonstrates importing necessary modules and preparing a LibreOffice environment to apply transparency effects to chart walls and floors. The code opens a spreadsheet document with a chart and sets up the environment for formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.wall.transparency import Transparency as WallTransparency\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart3d.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.MAGENTA, width=0.7)\n        chart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.MAHOGANY)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        wall_transparency = WallTransparency(value=40)\n        Chart2.style_wall(chart_doc=chart_doc, styles=[wall_transparency])\n\n        floor_transparency = WallTransparency(value=30)\n        Chart2.style_floor(chart_doc=chart_doc, styles=[floor_transparency])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Shape Position and Rotation in Python UNO\nDESCRIPTION: These static methods in the Draw class provide utilities for accessing and updating the position and rotation of shapes in a slide. The methods convert units to millimeters for ease of use and rely on LibreOffice's property access for shape attributes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter14.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# in the Draw Class (simplified)\n@staticmethod\ndef get_position(shape: XShape) -> Point:\n    pt = shape.getPosition()\n    # convert to mm\n    return Point(round(pt.X / 100), round(pt.Y / 100))\n\n# one of several overloads\n@staticmethod\ndef set_position(shape: XShape, x: int, y: int) -> None:\n    shape.set_position(Point(x * 100, y * 100))\n\n@staticmethod\ndef get_rotation(shape: XShape) -> Angle:\n    r_angle = int(mProps.Props.get(shape, \"RotateAngle\"))\n    return Angle(round(r_angle / 100))\n\n@staticmethod\ndef set_rotation(shape: XShape, angle: Angle) -> None:\n    mProps.Props.set(shape, RotateAngle=angle.Value * 100)\n\n```\n\n----------------------------------------\n\nTITLE: FileCache with Custom Parameters in Python\nDESCRIPTION: Shows how to use FileCache with custom parameters and JSON data, storing cache in /tmp/ooo_uno_tmpl/json/data.pkl with a 300 second lifetime and custom key-value pairs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/file_cache.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom ooodev.utils.cache.singleton import FileCache\n\ncache = FileCache(tmp_dir=\"json\", lifetime=300, custom1=\"custom1\", custom2=\"custom2\")\ndata = get_json_data() # Get JSON data from somewhere as a list of dictionary\n\nfile_name = \"data.pkl\"\ncache[file_name] = data\nassert cache[file_name] == data\nif file_name in cache:\n    del cache[file_name]\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Right) with Left Margin using styles in Python\nDESCRIPTION: Creates a table with right alignment and a specific left margin using the styles approach. Defines a TableProperties object with right alignment and left margin parameter.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\"My_Table\",\n    relative=False,\n    align=TableAlignKind.RIGHT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    left=UnitMM(60.0),\n)\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n    )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Area Image from LibreOffice Writer Style\nDESCRIPTION: Retrieves the existing header area image style from a document page style. Uses the from_style static method to create an Img style object from the existing style in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = HeaderAreaImg.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Applying Solid Color Background to Chart in Python\nDESCRIPTION: Demonstrates how to set a solid color background for a chart using ChartColor and ChartLineProperties classes. The background is set to light green with a dark green border.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.general.area import Color as ChartColor\n# ... other code\n\nchart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=0.7)\nchart_color = ChartColor(color=StandardColor.GREEN_LIGHT2)\nChart2.style_background(chart_doc=chart_doc, styles=[chart_color, chart_bdr_line])\n```\n\n----------------------------------------\n\nTITLE: Adding CellObj to RangeObj in Python LibreOffice\nDESCRIPTION: Shows how to add a CellObj instance to a RangeObj to extend both rows and columns. Extends range F10:H15 to F10:J17.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>> from ooodev.utils.data_type.cell_obj import CellObj\n>>>\n>>> rng1 = RangeObj(col_start=\"F\", col_end=\"H\", row_start=10, row_end=15, sheet_idx=0) \n>>> str(rng1)\n'F10:H15'\n>>> rng1.row_count\n6\n>>> rng1.col_count\n3\n>>> rng2 = rng1 + CellObj.from_idx(1, 1)\n>>> str(rng2)\n'F10:J17'\n>>> repr(rng2)\n\"RangeObj(col_start='F', col_end='J', row_start=10, row_end=17, sheet_idx=0)\"\n>>> rng2.row_count \n8\n>>> rng2.col_count \n5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Line Shadow Properties in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the line shadow properties of a shape using the Shadow.from_obj() method. It then asserts various properties of the retrieved shadow to verify its settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/shadow.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.line import Shadow\n# ... other code\n\n# get the shadow from the shape\nf_style = Shadow.from_obj(line.component)\nassert f_style is not None\nassert f_style.prop_use_shadow is True\nassert f_style.prop_use_shadow is True\nassert f_style.prop_location == ShadowLocationKind.TOP_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Popup Menu Structure in JSON for LibreOffice Calc\nDESCRIPTION: A complete JSON structure that defines a dynamic popup menu for LibreOffice Calc, mimicking the right-click context menu for cells. The structure includes commands like Cut, Copy, Paste with various submenus, cell operations, and formatting options.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/sample_dynamic_json.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"ooodev.popup_menu\",\n    \"version\": \"0.41.0\",\n    \"dynamic\": true,\n    \"menus\": [\n        {\n            \"command\": \".uno:Cut\",\n            \"module\": 20\n        },\n        {\n            \"command\": \".uno:Copy\",\n            \"module\": 20\n        },\n        {\n            \"command\": \".uno:Paste\",\n            \"module\": 20\n        },\n        {\n            \"text\": \"Paste Special\",\n            \"command\": \".uno:PasteSpecialMenu\",\n            \"submenu\": [\n                {\n                    \"command\": \".uno:PasteUnformatted\",\n                    \"module\": 20\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"My Paste Only Text\",\n                    \"command\": \".uno:PasteOnlyText\",\n                    \"module\": 0\n                },\n                {\n                    \"text\": \"Paste Only Text\",\n                    \"command\": \".uno:PasteOnlyValue\"\n                },\n                {\n                    \"text\": \"Paste Only Formula\",\n                    \"command\": \".uno:PasteOnlyFormula\"\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Paste Transposed\",\n                    \"command\": \".uno:PasteTransposed\"\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"command\": \".uno:PasteSpecial\",\n                    \"module\": 20\n                }\n            ]\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Data Select\",\n            \"command\": \".uno:DataSelect\"\n        },\n        {\n            \"text\": \"Current Validation\",\n            \"command\": \".uno:CurrentValidation\"\n        },\n        {\n            \"text\": \"Define Current Name\",\n            \"command\": \".uno:DefineCurrentName\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Insert ~Cells...\",\n            \"command\": \".uno:InsertCell\"\n        },\n        {\n            \"text\": \"Delete C~ells...\",\n            \"command\": \".uno:DeleteCell\"\n        },\n        {\n            \"text\": \"Delete\",\n            \"command\": \".uno:Delete\"\n        },\n        {\n            \"text\": \"Merge Cells\",\n            \"command\": \".uno:MergeCells\"\n        },\n        {\n            \"text\": \"Split Cell\",\n            \"command\": \".uno:SplitCell\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Format Paintbrush\",\n            \"command\": \".uno:FormatPaintbrush\"\n        },\n        {\n            \"text\": \"Reset Attributes\",\n            \"command\": \".uno:ResetAttributes\"\n        },\n        {\n            \"text\": \"Format Styles Menu\",\n            \"command\": \".uno:FormatStylesMenu\",\n            \"submenu\": [\n                {\n                    \"text\": \"Edit Style\",\n                    \"command\": \".uno:EditStyle\"\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Default Cell Styles\",\n                    \"command\": \".uno:DefaultCellStylesmenu\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Accent1 Cell Styles\",\n                    \"command\": \".uno:Accent1CellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Accent2 Cell Styles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Accent 3 Cell Styles\",\n                    \"command\": \".uno:Accent3CellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Bad Cell Styles\",\n                    \"command\": \".uno:BadCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Error Cell Styles\",\n                    \"command\": \".uno:ErrorCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Good Cell Styles\",\n                    \"command\": \".uno:GoodCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Neutral Cell Styles\",\n                    \"command\": \".uno:NeutralCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Warning Cell Styles\",\n                    \"command\": \".uno:WarningCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Footnote Cell Styles\",\n                    \"command\": \".uno:FootnoteCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Note Cell Styles\",\n                    \"command\": \".uno:NoteCellStyles\",\n                    \"style\": 2\n                }\n            ]\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Insert Annotation\",\n            \"command\": \".uno:InsertAnnotation\"\n        },\n        {\n            \"text\": \"Edit Annotation\",\n            \"command\": \".uno:EditAnnotation\"\n        },\n        {\n            \"text\": \"Delete Note\",\n            \"command\": \".uno:DeleteNote\"\n        },\n        {\n            \"text\": \"Show Note\",\n            \"command\": \".uno:ShowNote\"\n        },\n        {\n            \"text\": \"Hide Note\",\n            \"command\": \".uno:HideNote\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Format Sparkline\",\n            \"command\": \".uno:FormatSparklineMenu\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"command\": \".uno:CurrentConditionalFormatDialog\",\n            \"module\": 20\n        },\n        {\n            \"text\": \"Current Conditional Format Manager Dialog ...\",\n            \"command\": \".uno:CurrentConditionalFormatManagerDialog\"\n        },\n        {\n            \"text\": \"Format Cell Dialog ...\",\n            \"command\": \".uno:FormatCellDialog\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OOO Development Tools Build JSON\nDESCRIPTION: This JSON snippet configures the OOO Development Tools build specifications for a document in LibreOffice, including module arguments and methods. The configuration sets parameters like source file, output name, and exclusions for modules such as Sphinx. The 'clean' option is recommended for reducing the output file size by omitting documentation strings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/embed_python.rst#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"oooscript\",\n    \"name\": \"tabs_list_box\",\n    \"app\": \"CALC\",\n    \"version\": \"1.0.0\",\n    \"args\": {\n        \"src_file\": \"script.py\",\n        \"output_name\": \"tabs_list_box\",\n        \"single_script\": false,\n        \"clean\": true,\n        \"exclude_modules\": [\n            \"sphinx\\\\.*\"\n        ]\n    },\n    \"methods\": [\n        \"show_tabs\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Background to a Chart using ooodev\nDESCRIPTION: This code demonstrates how to apply a zigzag pattern background to a chart using the ChartPattern class from ooodev. It creates a pattern with a blue light border and applies it to the chart background.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.general.area import Pattern as ChartPattern, PresetPatternKind\n# ... other code\n\nchart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_LIGHT2, width=0.7)\nchart_pattern = ChartPattern.from_preset(chart_doc, PresetPatternKind.ZIG_ZAG)\nChart2.style_background(chart_doc=chart_doc, styles=[chart_pattern, chart_bdr_line])\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu for Global Shortcuts in Python\nDESCRIPTION: Example of creating a menu structure that can be used for adding global shortcuts. This defines the menu hierarchy without directly assigning the shortcut.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnew_menu = {\n    \"Label\": \"My Menu\",\n    \"CommandURL\": menu_name,\n    \"Submenu\": [\n        {\n            \"Label\": \"all Alone\",\n            \"CommandURL\": \".custom:alone.here\",\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Reflection Module Documentation\nDESCRIPTION: Sets up a table of contents for the reflection module using Sphinx's toctree directive. It includes all files in the current directory and displays only their titles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/reflection/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Properties from Existing Style\nDESCRIPTION: This code demonstrates how to extract header properties from an existing document style. It creates a Header object from a named style and verifies that the style name matches the expected value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/header.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Header.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Printing Cell Text in Python\nDESCRIPTION: Method to retrieve and print the entire text content of a cell using XText interface\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef _print_cell_text(self, cell: XCell) -> None:\n    txt = Lo.qi(XText, cell, True)\n    print(f'Cell Text: \"{txt.getString()}\"')\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Document with Hatch Pattern\nDESCRIPTION: Sets up a Writer document with necessary imports and creates a paragraph with a hatch pattern background. Includes theme handling for text color contrast.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TYPE_CHECKING, cast\nfrom ooodev.format.writer.direct.char.font import Font\nfrom ooodev.format.writer.direct.para.area import Hatch, PresetHatchKind\nfrom ooodev.office.write import Write\nfrom ooodev.theme import ThemeTextDoc\nfrom ooodev.utils.color import StandardColor, RGB\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\nif TYPE_CHECKING:\n    from com.sun.star.text import TextRangeContentProperties  # service\n\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_100_PERCENT)\n        cursor = Write.get_cursor(doc)\n\n        theme_doc = ThemeTextDoc()\n        doc_color = RGB.from_int(theme_doc.doc_color)\n        if doc_color.is_dark():\n            font_color = StandardColor.WHITE\n        else:\n            font_color = StandardColor.BLACK\n\n        doc_font_style = Font(color=font_color)\n        doc_font_style.apply(cursor)\n\n        hatch_style = Hatch.from_preset(PresetHatchKind.YELLOW_45_DEGREES_CROSSED)\n        Write.append_para(cursor=cursor, text=p_txt, styles=[hatch_style])\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Up UNO Frame Style Application in Python\nDESCRIPTION: This code snippet demonstrates the setup process for applying frame styles in LibreOffice Writer using Python with the UNO API. The main function initializes the UNO loader, creates a document, makes it visible, and zooms the view to fit the entire page. It then establishes a text frame with defined styles and applies an area color to the style. The function requires the 'uno' package and 'ooodev' modules for handling document operations and styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/frame.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.writer.style import Frame, StyleFrameKind\nfrom ooodev.format.writer.modify.frame.area import Color as FrameAreaColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.units import UnitMM\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        cursor = Write.get_cursor(doc)\n\n        txt = \"Hello\"\n        Write.append(cursor=cursor, text=txt)\n\n        style = Frame(name=StyleFrameKind.FRAME)\n        tf = Write.add_text_frame(\n            cursor=cursor,\n            ypos=UnitMM(20),\n            text=\"World\",\n            width=UnitMM(40),\n            height=UnitMM(40),\n            styles=[style],\n        )\n\n        frm_area_color = FrameAreaColor(\n            color=StandardColor.BRICK_LIGHT2, style_name=StyleFrameKind.FRAME\n        )\n        frm_area_color.apply(doc)\n\n        f_style = Frame.from_obj(tf)\n        assert f_style.prop_name == style.prop_name\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Text Anchor Point\nDESCRIPTION: Demonstrates how to set the text anchor point of a shape using the TextAnchor class. Shows configuration of anchor point position and full width property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text/text_anchor.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.text.text import TextAnchor, ShapeBasePointKind\n# ... other code\n\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n# ... other code\ntxt_anchor = TextAnchor(\n    anchor_point=ShapeBasePointKind.TOP_CENTER, full_width=True\n)\ntxt_anchor.apply(rect.component)\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Pivot Table in Python\nDESCRIPTION: This code snippet creates a new pivot table by specifying the table's name, cell address, and descriptor. It employs 'XDataPilotTables.insertNewByName()' to insert the table on the specified sheet.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# in PivotTable1._create_pivot_table()\ndest_addr = Calc.get_cell_address(sheet=dp_sheet, cell_name=\"A1\")\ndp_tables.insertNewByName(\"PivotTableExample\", dest_addr, dp_desc)\n```\n\n----------------------------------------\n\nTITLE: Printing Word Meanings from Thesaurus in Python\nDESCRIPTION: This function queries the thesaurus for meanings of a given word and prints them along with their synonyms. It uses the XThesaurus interface to retrieve meanings and synonyms.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef print_meaning(word: str, thesaurus: XThesaurus, loc: Locale | None = None) -> int:\n    if loc is None:\n        loc = Locale(\"en\", \"US\", \"\")\n    meanings = thesaurus.queryMeanings(word, loc, tuple())\n    if meanings is None:\n        print(f\"'{word}' NOT found int thesaurus\")\n        print()\n        return 0\n    m_len = len(meanings)\n    print(f\"'{word}' found in thesaurus; number of meanings: {m_len}\")\n\n    for i, meaning in enumerate(meanings):\n        print(f\"{i+1}. Meaning: {meaning.getMeaning()}\")\n        synonyms = meaning.querySynonyms()\n        print(f\" No. of  synonyms: {len(synonyms)}\")\n        for synonym in synonyms:\n            print(f\"    {synonym}\")\n        print()\n    return m_len\n```\n\n----------------------------------------\n\nTITLE: Adding Rectangle Shape in Writer Document using WriteDrawPage\nDESCRIPTION: Example demonstrating how to create a Writer document and add a rectangle shape to it using the WriteDrawPage class. The rectangle is positioned at coordinates (100,10) with dimensions 50x20.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_draw_page.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndoc = doc = WriteDoc(Write.create_doc())\nrect = doc.draw_page.draw_rectangle(x=100, y=10, width=50, height=20)\nrect\n```\n\n----------------------------------------\n\nTITLE: Applying Cell Style in Calc\nDESCRIPTION: This snippet shows how to apply a specific cell style using the `style_by_name` method after setting the cell value. It requires the `StyleCellKind` enum from `ooodev.format.calc.style` and a valid `sheet` object representing a Calc sheet.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/cell.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.calc.style import StyleCellKind\n\n# ... other code\ncell = sheet[\"A1\"]\ncell.value = \"Hello\"\ncell.style_by_name(StyleCellKind.ACCENT_1)\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Draw Document with Image Area Formatting\nDESCRIPTION: Creates a Draw document, adds a rectangle shape, and applies a preset pool image style. Demonstrates basic setup and style application using the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/img.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.modify.area import Img as FillImg\nfrom ooodev.format.draw.modify.area import PresetImageKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n        style_modify = FillImg.from_preset(preset=PresetImageKind.POOL)\n        doc.apply_styles(style_modify)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Printing Proofreading Error Details\nDESCRIPTION: This static method prints the details of a proofreading error, including the error description and suggested corrections. It formats the output to make the identified issues clear.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef print_proof_error(string: str, err: SingleProofreadingError) -> None:\n    e_end = err.nErrorStart + err.nErrorLength\n    err_txt = string[err.nErrorStart : e_end]\n    print(f\"G* {err.aShortComment} in: '{err_txt}'\")\n    if len(err.aSuggestions) > 0:\n        print(f\"  Suggested change: '{err.aSuggestions[0]}'\")\n    print()\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.chart2.direct.title.alignment Module with Sphinx\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate comprehensive documentation for the ooodev.format.chart2.direct.title.alignment module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.title.alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.title.alignment\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Gradient to Chart Title\nDESCRIPTION: Shows how to create and apply a custom gradient to a chart title with specific color range and style settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.area import Gradient as TitleGradient\nfrom ooodev.format.chart2.direct.title.area import ColorRange\n\n# ... other code\ntitle_grad = TitleGradient(\n    chart_doc=chart_doc,\n    step_count=64,\n    style=GradientStyle.SQUARE,\n    angle=45,\n    grad_color=ColorRange(StandardColor.PURPLE_LIGHT2, StandardColor.BLUE_DARK1),\n)\nChart2.style_title(chart_doc=chart_doc, styles=[title_grad])\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the `ooodev.format.inner.modify.write.char.font.font_effects` module. It specifies that members, undocumented members, and inheritance information should be included in the documentation. The documentation is likely being generated using Sphinx.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.char.font.font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.char.font.font_effects\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Importing Font and Applying Styles in Python\nDESCRIPTION: This snippet imports the `Font` class from the `ooodev.format.writer.direct.char.font` module and applies it to the cursor's component to set a mono font for code styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.char.font import Font\n# ...\n\ncode_font = Font(name=Info.get_font_mono_name(), size=10)\ncode_font.apply(cursor.component)\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting Font Name and Size in Writer Character Style using FontOnly\nDESCRIPTION: This snippet demonstrates how to modify the font properties of a character style in LibreOffice Writer. It creates a document, sets the font name to 'Consolas' and size to 14 points for the 'Source Text' character style, and verifies the style was applied correctly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.char.font import FontOnly, StyleCharKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        font_style = FontOnly(name=\"Consolas\", size=14, style_name=StyleCharKind.SOURCE_TEXT)\n        font_style.apply(doc)\n\n        style_obj = FontOnly.from_style(doc=doc, style_name=StyleCharKind.SOURCE_TEXT)\n        assert style_obj.prop_style_name == str(StyleCharKind.SOURCE_TEXT)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Goal Seek Requests in Python\nDESCRIPTION: This snippet attempts a goal seek for an unreasonable result, demonstrating exception handling for divergence errors. The 'goal_seek' method is tested with an impossible condition, triggering error output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# in goal_seek.py\ntry:\n    x = cell1.goal_seek(gs=gs, formula_cell_name=cell2.cell_obj, result=-4.0)\n    # The formula is still y = sqrt(x)\n    # Find x when sqrt(x) == -4, which is impossible\n    print(f\"x == {x} when sqrt(x) == -4\\n\")\n    \nexcept GoalDivergenceError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Handler with Control Source - Python\nDESCRIPTION: This code snippet defines an event handler function that takes control source as an argument. It allows handling specific events for database formatted fields within forms. The event handler can either directly receive the control source or get it from the keyword arguments, providing flexibility for handling events.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_formatted_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbFormattedField, *args, **kwargs\n) -> None:\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbFormattedField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Documenting LibreOffice PRINTING Event in RST\nDESCRIPTION: RestructuredText documentation block defining a global named event for document printing with CSS class and event reference.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/global/printing_events.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. cssclass:: lo_event\n\n    :py:attr:`GblNamedEvent.PRINTING <.events.gbl_named_event.GblNamedEvent.PRINTING>` :eventref:`src-docs-event-cancel`\n```\n\n----------------------------------------\n\nTITLE: Calculate Spreadsheet Row Range with Python\nDESCRIPTION: This snippet implements the get_row_range method in the Calc class to return a specific row range using the XColumnRowRange interface. Similar to column range, it retrieves row by index position for manipulation. Dependencies include the XSpreadsheet interface for row access and error handling for missing interfaces.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n        @staticmethod\n        def get_row_range(sheet: XSpreadsheet, idx: int) -> XCellRange:\n            cr_range = Lo.qi(XColumnRowRange, sheet)\n            if cr_range is None:\n                raise MissingInterfaceError(XColumnRowRange)\n            rows = cr_range.getRows()\n            con = con = Lo.qi(XIndexAccess, rows)\n            if con is None:\n                raise MissingInterfaceError(XIndexAccess)\n            cell_range = Lo.qi(XCellRange, con.getByIndex(idx))\n            if cell_range is None:\n                raise MissingInterfaceError(XCellRange, f\"Could not access range for row position: {idx}\")\n            return cell_range\n```\n\n----------------------------------------\n\nTITLE: toctree Directive for Submodules\nDESCRIPTION: This snippet uses the `toctree` directive to create a table of contents for the submodules within the `ooodev.format.inner.direct.chart2.series.data_labels.borders` package. It specifies a maximum depth of 4 for the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.series.data_labels.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.chart2.series.data_labels.borders.line_properties\n```\n\n----------------------------------------\n\nTITLE: Checking Menu Item Types in Python OOO Dev Tools\nDESCRIPTION: Shows how to check the type of a menu item using the MenuItemKind enum and isinstance() checks for different menu item classes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmenu = doc.menu[MenuLookupKind.TOOLS]\nitm = menu.items['.uno:LanguageMenu']\nassert itm.item_kind == MenuItemKind.ITEM_SUBMENU # equals 3\nassert itm.item_kind >= MenuItemKind.ITEM # equals 2\nassert itm.item_kind != MenuItemKind.SEP # equals 1\nassert itm.item_kind > MenuItemKind.SEP\n\nassert isinstance(itm, MenuItem)\nassert isinstance(itm, MenuItemSub)\nassert not isinstance(itm, MenuItemSep)\n```\n\n----------------------------------------\n\nTITLE: Retrieving hatch settings from an existing paragraph style in LibreOffice Writer\nDESCRIPTION: Retrieves the area hatch settings from an existing paragraph style in the document. This allows verification of the applied settings or examination of existing styles. The from_style method creates a ParaStyleHatch object from the specified style in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_hatch.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = ParaStyleHatch.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Row in Range\nDESCRIPTION: Shows how to iterate over a specific row in a range using RangeObj.get_row() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nrng = RangeObj.from_range(\"A1:C4\")\nfor cell in rng.get_row(1):\n    print(cell)\n```\n\n----------------------------------------\n\nTITLE: Checking Menu Item Type Before Execution in Python OOO Dev Tools\nDESCRIPTION: Demonstrates how to check the menu item type using the item_kind property before executing a menu command.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui.menu.item import MenuItemKind\n# ...\n\nif itm.item_kind >= MenuItemKind.ITEM:\n    # `MenuItem, do work\n    MenuItem.execute() # run the menu command\n```\n\n----------------------------------------\n\nTITLE: Initializing Calc Document with Page Header Style\nDESCRIPTION: Sets up a Calc document with custom page header configuration including visibility, shared settings, height, and margins\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/background.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nheader_style = Header(\n    on=True,\n    shared_first=True,\n    shared=True,\n    height=10.0,\n    spacing=3.0,\n    margin_left=1.5,\n    margin_right=2.0,\n    style_name=CalcStylePageKind.DEFAULT,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Line Properties to a Shape in Python\nDESCRIPTION: This code snippet shows how to create a LineProperties object with specific style, color, width, and transparency, and apply it to a rectangle shape in a LibreOffice Draw document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/line_properties.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.line import LineProperties, BorderLineKind\nfrom ooodev.utils.color import StandardColor\n# ... other code\n\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\nstyle = LineProperties(\n    style=BorderLineKind.CONTINUOUS,\n    color=StandardColor.RED_DARK3,\n    width=0.7,\n    transparency=22\n)\nstyle.apply(rect.component)\n```\n\n----------------------------------------\n\nTITLE: Getting Style Container - Python\nDESCRIPTION: The `get_style_container()` class method takes a document and a style family name as input, retrieves the corresponding style family, and returns the associated XNameContainer object. It raises exceptions for any errors encountered during access.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_style_container(cls, doc: object, family_style_name: str) -> XNameContainer:\n    name_acc = cls.get_style_families(doc)\n    xcontianer = Lo.qi(XNameContainer, name_acc.getByName(family_style_name), True)\n    return xcontianer\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Border Padding\nDESCRIPTION: Shows how to set padding values for the footer borders. This example sets different padding values for each side (left, right, top, bottom) and applies them to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/bordes.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npadding_style = Padding(\n    left=5,\n    right=5,\n    top=3,\n    bottom=3,\n    style_name=CalcStylePageKind.DEFAULT,\n)\nStyler.apply(doc, footer_style, padding_style)\n```\n\n----------------------------------------\n\nTITLE: Applying Transparency Gradient to Page Header\nDESCRIPTION: Shows how to apply a transparency gradient to a page header background color. Creates a dark green header with a linear gradient at 45 degrees, with a border of 22% and intensity ranging from 0 to 100%.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npage_header_style_kind = WriterStylePageKind.STANDARD\ncolor_style = HeaderAreaColor(color=StandardColor.GREEN_DARK1, style_name=page_header_style_kind)\nheader_gradient_style = Gradient(\n    style=GradientStyle.LINEAR,\n    angle=45,\n    border=22,\n    grad_intensity=IntensityRange(0, 100),\n    style_name=page_header_style_kind,\n)\nStyler.apply(doc, header_style, color_style, header_gradient_style)\n```\n\n----------------------------------------\n\nTITLE: Removing all Tabs\nDESCRIPTION: This code snippet demonstrates how to remove all tabs from a Writer document. It utilizes the `Tabs.remove_all` method to clear all tab stops associated with the cursor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/tabs.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n        Tabs.remove_all(cursor)\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Series Label Border Line Style\nDESCRIPTION: This snippet retrieves the current style of the data series label border line to ensure it is correctly set. It asserts that a style has been returned using the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf_style = ds.style_label_border_line_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Displaying Shape Information on a Slide\nDESCRIPTION: This code defines methods to display information about shapes on a slide, including the shape type and z-order. It retrieves the shapes using get_shapes, and displays the shape type and z-order for each shape on a given slide.  It uses helper methods to retrieve the ZOrder property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"# in Draw class (simplified)\n@classmethod\ndef show_shapes_info(cls, slide: XDrawPage) -> None:\n    print(\"Draw Page shapes:\")\n    shapes = cls.get_shapes(slide)\n    for shape in shapes:\n        cls.show_shape_info(shape)\n\n@classmethod\ndef show_shape_info(cls, shape: XShape) -> None:\n    print(f\"  Shape service: {shape.getShapeType()}; z-order: {cls.get_zorder(shape)}\")\n\n@staticmethod\ndef get_zorder(shape: XShape) -> int:\n    return int(Props.get(shape, \"ZOrder\"))\n\"\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.direct.structs.point_struct automodule\nDESCRIPTION: This snippet represents the `automodule` directive used in Sphinx documentation to automatically generate documentation for the `ooodev.format.inner.direct.structs.point_struct` module.  It includes documentation for members, undocumented members, and inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.structs.point_struct.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.structs.point_struct\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Menu Entry with Data Hook\nDESCRIPTION: Example of a menu entry with a data hook for event callbacks\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{\"text\": \"Del cells\", \"command\": \".uno:DeleteCell\", \"data\": \"hook_me_up\"}\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example\nDESCRIPTION: Illustrates the structure of an EventArgsCallbackT function that includes the `control_src` keyword argument.  This example shows a callback with `control_src` explicitly defined in the signature. The callback signature includes `src`, `event`, `control_src` and potentially `*args`, `**kwargs`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_formatted_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlFormattedField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Appending Text Content After Image Insertion - Python\nDESCRIPTION: This code appends a graphic shape to the document's cursor, effectively inserting it into the document along with a following newline.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncls._append_text_content(cursor, gos)\ncls.end_line(cursor)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fill Image from Shape in Python using ooodev\nDESCRIPTION: This snippet retrieves the fill image properties from a rectangle shape using the ShapeImage class’s from_obj() method from the ooodev library. It is useful for confirming the applied style of the shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/img.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Img as ShapeImage\n# ... other code\n\n# get the image from the shape\nf_style = ShapeImage.from_obj(rect)\nassert f_style.prop_size\nassert f_style.prop_size == style.prop_size\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent Local Shortcut in Python\nDESCRIPTION: Creates a persistent local shortcut for a specific document type. This example demonstrates creating a Calc-specific shortcut using the document's shortcuts property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\n\n# ...\ndoc = CalcDoc.from_current_doc()\ndoc.shortcuts.set(\"Shift+Ctrl+Alt+A\", \".custom:alone.here\", True)\n```\n\n----------------------------------------\n\nTITLE: Adding Hyperlinks and Superscript\nDESCRIPTION: Shows how to combine hyperlinks with superscript text formatting and custom colors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.char.hyperlink import Hyperlink, TargetKind\n# ... other code\n\ncursor = Write.get_cursor(doc)\nft = Font(color=CommonColor.DARK_GREEN)\nhl = Hyperlink(\n    name=\"machine_learn\",\n    url=\"https://en.wikipedia.org//wiki/Machine_learning\",\n    target=TargetKind.BLANK\n)\nft_super = Font(name=\"Liberation Mono\", superscript=True)\nWrite.append(\n    cursor=cursor, text=\"What do you know about machine learning?\", styles=(ft,)\n)\nWrite.append(cursor=cursor, text=\"[\", styles=(ft_super,))\nWrite.append(cursor=cursor, text=\"1\", styles=(ft_super, hl))\nWrite.append_para(cursor=cursor, text=\"]\", styles=(ft_super,))\n```\n\n----------------------------------------\n\nTITLE: Freezing Rows in Spreadsheet with Python\nDESCRIPTION: This snippet defines methods to freeze rows and columns within a spreadsheet view using the Calc class. The method 'freeze_rows' calls a common freeze method which interacts with a document's controller and freezes the view at a specified number of rows. Dependencies include the XSpreadsheetDocument interface for accessing the spreadsheet document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n        @classmethod\n        def freeze_rows(cls, doc: XSpreadsheetDocument, num_rows: int) -> None:\n            cls.freeze(doc=doc, num_cols=0, num_rows=num_rows)\n\n        @classmethod\n        def freeze_cols(cls, doc: XSpreadsheetDocument, num_cols: int) -> None:\n            cls.freeze(doc=doc, num_cols=num_cols, num_rows=0)\n\n        @classmethod\n        def freeze(cls, doc: XSpreadsheetDocument, num_cols: int, num_rows: int) -> None:\n            ctrl = cls.get_controller(doc)\n            if ctrl is None:\n                return\n            if num_cols < 0 or num_rows < 0:\n                return\n            xfreeze = Lo.qi(XViewFreezable, ctrl)\n            xfreeze.freezeAtPosition(num_cols, num_rows)\n```\n\n----------------------------------------\n\nTITLE: Point Array Example for Square\nDESCRIPTION: Example of defining points array for a square shape using Office's 1/100 mm units.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.awt.point import Point\n\npts (\n    Point(4_000, 1_200),\n    Point(4_000, 2_000),\n    Point(5_000, 2_000),\n    Point(5_000, 1_200)\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Color to Chart Title in Python\nDESCRIPTION: This code snippet shows how to access a chart title and apply a specific background color to it using the `style_area_color` method from the OOoDev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        title.style_area_color(StandardColor.DEFAULT_BLUE)\n```\n\n----------------------------------------\n\nTITLE: Getting Legend Transparency in Python with OOoDev\nDESCRIPTION: This code snippet retrieves the current transparency setting of the legend through the style_area_transparency_transparency_get method. It ensures that the retrieved style is not None, which verifies that the transparency setting was applied correctly.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nf_style = legend.style_area_transparency_transparency_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Setting Interval Marks in Chart2 Direct Axis Positioning\nDESCRIPTION: Demonstrates how to configure interval marks using the IntervalMarks class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/positioning.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.axis.positioning import IntervalMarks\nfrom ooodev.format.chart2.direct.axis.positioning import MarkKind, ChartAxisMarkPosition\nfrom ooodev.format.chart2.direct.axis.positioning import LabelPosition, ChartAxisLabelPosition\n# ... other code\n\nlabel_position_style = LabelPosition(ChartAxisLabelPosition.NEAR_AXIS_OTHER_SIDE)\ninterval_marks_style = IntervalMarks(\n    major=MarkKind.OUTSIDE, minor=MarkKind.NONE, pos=ChartAxisMarkPosition.AT_LABELS_AND_AXIS\n)\nChart2.style_y_axis(chart_doc=chart_doc, styles=[label_position_style, interval_marks_style])\n```\n\n----------------------------------------\n\nTITLE: Importing Recommended Lo Class from ooodev.loader in Python\nDESCRIPTION: This code snippet demonstrates how to import the recommended Lo class from the ooodev.loader module, which replaces the deprecated Lo class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/lo.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader import Lo\n\n# other code\n```\n\n----------------------------------------\n\nTITLE: Setting Scale by Number of Pages in Calc with Python\nDESCRIPTION: Using the `ScaleNumOfPages` class, this snippet sets the number of pages for a Calc sheet's scale, controlling how much content fits within specified pages.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.sheet import ScaleNumOfPages, CalcStylePageKind\n\nstyle = ScaleNumOfPages(pages=3, style_name=CalcStylePageKind.DEFAULT)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Filling Linear Series with Specified Step and End Value\nDESCRIPTION: Demonstrates using fillSeries() with LINEAR mode to generate an arithmetic progression with custom step and maximum value\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsheet.set_val(cell_name=\"A2\", value=1)\nsheet.set_val(cell_name=\"A3\", value=4)\n\nseries = sheet.get_range(range_name=\"A2:E3\").get_cell_series()\nseries.fillSeries(FillDirection.TO_RIGHT, FillMode.LINEAR, Calc.NO_DATE, 2, 9)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Effects from a Paragraph Style in LibreOffice Writer using Python\nDESCRIPTION: This snippet shows how to retrieve font effect settings from an existing paragraph style using the FontEffects.from_style() method. It demonstrates getting the Standard paragraph style and asserting its name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = FontEffects.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Alignments\nDESCRIPTION: Demonstrates different paragraph alignment options including default, left, center, right, and justified alignments. Each snippet shows how to apply a specific alignment style to a paragraph.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/alignment.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nal_default = Alignment().default\nWrite.append_para(cursor=cursor, text=p_txt, styles=[al_default])\n```\n\nLANGUAGE: python\nCODE:\n```\nal = Alignment().align_left\nWrite.append_para(cursor=cursor, text=p_txt, styles=[al])\n```\n\nLANGUAGE: python\nCODE:\n```\nal = Alignment().align_center\nWrite.append_para(cursor=cursor, text=p_txt, styles=[al])\n```\n\nLANGUAGE: python\nCODE:\n```\nal = Alignment().align_right\nWrite.append_para(cursor=cursor, text=p_txt, styles=[al])\n```\n\nLANGUAGE: python\nCODE:\n```\nal = Alignment().justified\nWrite.append_para(cursor=cursor, text=p_txt, styles=[al])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Roman Numeral Function Information in Python\nDESCRIPTION: Demonstrates how to print function details for the ROMAN function using Calc utility methods. Shows method for obtaining function metadata including arguments and descriptions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nCalc.print_function_info(\"ROMAN\")\n```\n\nLANGUAGE: python\nCODE:\n```\nroman = doc.call_fun(\"ROMAN\", 999)\nroman4 = doc.call_fun(\"ROMAN\", 999, 4)\nprint(f\"999 in Roman numerals: {roman} or {roman4}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Color\nDESCRIPTION: Shows how to retrieve the current color of a shape using the ShapeColor.from_obj() method and verify it matches the previously set color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/color.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Color as ShapeColor\n# ... other code\n\n# get the color from the shape\nf_style = ShapeColor.from_obj(rec)\n# assert the color is the same\nassert f_style.prop_color == style.prop_color\n```\n\n----------------------------------------\n\nTITLE: Example Document Properties Usage\nDESCRIPTION: Example of calling the set_doc_props method to set document properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nInfo.set_doc_props(doc, \"Example\", \"Examples\", \"Amour Spirit\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Menus with Shortcuts in Python\nDESCRIPTION: A sample configuration for setting up a menu with keyboard shortcuts. This demonstrates defining shortcuts as both strings and dictionaries with options for persistence.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnew_menu = {\n    \"Label\": \"My Menu\",\n    \"CommandURL\": menu_name,\n    \"Submenu\": [\n        {\n            \"Label\": \"Execute macro...\",\n            \"CommandURL\": \"RunMacro\",\n            \"ShortCut\": \"Shift+Ctrl+Alt+E\",\n        },\n        {\n            \"Label\": \"My macro\",\n            \"CommandURL\": {\"library\": \"test\", \"name\": \"hello\"},\n            \"ShortCut\": {\"key\": \"Shift+Ctrl+Alt+F\", \"save\": False},\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Popup Menu from JSON File in Python\nDESCRIPTION: Creates a popup menu by loading the configuration from a JSON file. The code initializes a PopupCreator, loads menu definitions from a file, creates the menu, subscribes to selection events, and executes the popup at a specific position.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    # ...\n    creator = PopupCreator()\n    menus = PopupCreator.json_load(\"popup_menu.json\")\n    pm = creator.create(menus)\n\n    pm.subscribe_all_item_selected(on_menu_select)\n    rect = Rectangle(100, 100, 100, 100)\n    doc.activate()\n    pm.execute(doc.get_frame().ComponentWindow, rect, 0)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Properties of a Graphic Object using Python\nDESCRIPTION: This snippet shows how to change a property of a graphic object, in this case setting the transparency level using setPropertyValue.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprops.setPropertyValue(\"Transparency\", 50)\n```\n\n----------------------------------------\n\nTITLE: Document Type Verification Method in Python\nDESCRIPTION: Static method for checking document type using XServiceInfo interface, supporting type verification for different document services in LibreOffice/OpenOffice API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef is_doc_type(obj: object, doc_type: Lo.Service) -> bool:\n    try:\n        si = Lo.qi(XServiceInfo, obj)\n        if si is None:\n            return False\n        return si.supportsService(str(doc_type))\n    except Exception:\n        return False\n```\n\n----------------------------------------\n\nTITLE: Removing Text Highlighting\nDESCRIPTION: Demonstrates how to remove highlighting from text by applying an empty highlight style to the specified text position and length.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/highlight.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWrite.style(pos=pos, length=4, styles=[Highlight().empty])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shape with Image in Python using ooodev\nDESCRIPTION: This snippet demonstrates how to set up a draw document, create a rectangle, and apply a preset image fill using the ShapeImage class from the ooodev library. It involves several ooodev components like Draw and Lo for document handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/img.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format.draw.direct.area import Img as ShapeImage\nfrom ooodev.format.draw.direct.area import PresetImageKind\nfrom ooodev.office.draw import Draw\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Draw.create_draw_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_75_PERCENT)\n\n        slide = Draw.get_slide(doc)\n\n        width = 36\n        height = 36\n        x = int(width / 2)\n        y = int(height / 2) + 20\n\n        rec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\n        style = ShapeImage.from_preset(preset=PresetImageKind.COFFEE_BEANS)\n        style.apply(rec)\n\n        f_style = ShapeImage.from_obj(rec)\n        assert f_style.prop_size\n        assert f_style.prop_size == style.prop_size\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Area Pattern from Style\nDESCRIPTION: Demonstrates how to retrieve the area pattern from an existing document style using the Hatch.from_style method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/hatch.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf_style = Hatch.from_style(\n    doc=doc.component,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Adding RowObj to RangeObj\nDESCRIPTION: Demonstrates using RowObj instances to add rows to RangeObj. Shows transformation from F10:H15 to F10:H17.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.range_obj import RangeObj\nfrom ooodev.utils.data_type.row_obj import RowObj\n\nrng1 = RangeObj(col_start=\"F\", col_end=\"H\", row_start=10, row_end=15, sheet_idx=0) \nstr(rng1)\n'F10:H15'\nrng1.row_count \n6\nrng2 = rng1 + RowObj.from_int(2)\nstr(rng2)\n'F10:H17'\nrepr(rng2)\n\"RangeObj(col_start='F', col_end='H', row_start=10, row_end=17, sheet_idx=0)\"\nrng2.row_count\n8\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Area Color in Python\nDESCRIPTION: This code snippet retrieves the background color style of a chart area using the `style_area_color_get` method from the `ooodev` library. The assertion verifies that a style is successfully retrieved.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = chart_doc.style_area_color_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Getting the number of Forms using len()\nDESCRIPTION: Demonstrates how to retrieve the number of forms within a Calc document's draw page using the `len()` function. The example initializes a Calc document, accesses the draw page of the first sheet, and then uses `len()` to determine the number of forms present. An example shows how adding a form increases the count.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_forms.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> sheet = doc.sheets[0]\n>>> draw_page = sheet.draw_page\n>>> len(draw_page.forms)\n0\n>>> draw_page.forms.add_form()\n>>> len(draw_page.forms)\n1\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for page.transparency package\nDESCRIPTION: This directive generates documentation for the ooodev.format.writer.modify.page.transparency module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.page.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.page.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Saving Popup Menu Configuration to JSON File in Python\nDESCRIPTION: Writes a JSON string containing popup menu configuration to a file named 'popup_menu.json'. This allows for storing menu structures that can be loaded later.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"popup_menu.json\", \"w\") as f:\n    f.write(json_str)\n```\n\n----------------------------------------\n\nTITLE: Getting Hatch from Style - Writer Header\nDESCRIPTION: This snippet illustrates how to retrieve the Header Style Hatch from a Writer document style using the `HeaderStyleHatch.from_style` method. The `prop_style_name` attribute is then asserted to verify the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n\nstyle_obj = HeaderStyleHatch.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\"\n```\n\n----------------------------------------\n\nTITLE: Applying Image to Chart Title\nDESCRIPTION: Demonstrates how to apply a preset image to a chart title background using PresetImageKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.area import Img as TitleImg, PresetImageKind\n# ... other code\n\ntitle_img = TitleImg.from_preset(chart_doc, PresetImageKind.SPACE)\n```\n\n----------------------------------------\n\nTITLE: Running Draw Gradient Example (Windows)\nDESCRIPTION: Illustrates how to run the gradient example script on Windows using PowerShell. This command executes the script from a specific path and shows the help information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/gradient/README.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Draw\\gradient\\start.py -h\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for Outline List Module\nDESCRIPTION: Sphinx documentation directive that auto-generates API documentation for the outline_list module. Includes all members, undocumented members and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.outline_list.outline_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.outline_list.outline_list\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Print Options for Calc with Python\nDESCRIPTION: This code configures print options for a Calc sheet using the `Printing` class. It specifies parameters such as whether to print headers or grid lines and applies the configuration to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.sheet import Printing, CalcStylePageKind\n\nstyle = Printing(\n    header=False,\n    grid=False,\n    chart=False,\n    drawing=False,\n    style_name=CalcStylePageKind.DEFAULT,\n)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving View Data from Document - Python\nDESCRIPTION: This snippet retrieves the view data from a given spreadsheet document using the Calc controller. It prints the raw view data, which contains various details about the view state of the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nctrl = Calc.get_controller(doc) # XController\nprint(ctrl.getViewData())\n```\n\n----------------------------------------\n\nTITLE: Align Left Position with Width using Direct Style in Python\nDESCRIPTION: This code demonstrates setting the alignment and width for a table positioned to the left, utilizing the 'style_direct' method on a table created by the cursor. Dependencies include 'CommonColor', 'TableAlignKind', 'UnitMM', and 'Intensity'. It particularly focuses on configuring width alignment, rather than specific edge distances.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=True,\n    align=TableAlignKind.LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    width=Intensity(40),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an EventArgsCallbackT Callback (accessing control_src from kwargs)\nDESCRIPTION: This code snippet demonstrates an alternative way to define a callback function where the control source is accessed from kwargs. Within the callback, the 'control_src' value is retrieved from the kwargs dictionary and cast to the CtlDialog type, allowing access to the dialog window instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_dialog.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlDialog, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart2 Direct Axis Font Effects in Python\nDESCRIPTION: This snippet demonstrates the general setup for applying font effects to chart axes. It includes importing necessary modules, opening a document, and initializing chart properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.axis.font import FontEffects as AxisFontEffects\nfrom ooodev.format.chart2.direct.axis.font import FontUnderlineEnum, FontLine\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange, Offset\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"bon_voyage.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"Object 1\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK2, width=0.9)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=0,\n            offset=Offset(41, 50),\n            style=GradientStyle.RADIAL,\n            grad_color=ColorRange(StandardColor.TEAL, StandardColor.YELLOW_DARK1),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        axis_font_effects = AxisFontEffects(\n            color=StandardColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n            shadowed=True,\n        )\n        Chart2.style_y_axis(chart_doc=chart_doc, styles=[axis_font_effects])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Styling individual data point with color in Python\nDESCRIPTION: Demonstrates applying a solid color to a specific data point (index 2) in the first series (index 0) of a chart using the style_data_point method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=2, styles=[data_series_color])\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Table with Direct Properties in Python\nDESCRIPTION: This snippet demonstrates creating a table using direct property setting with the ooodev library. Dependencies include the TableProperties class and Intensity, CommonColor, TableAlignKind enums. It sets properties like table alignment, dimensions, and colors directly. Inputs are the table data and style properties, and the output is a styled table object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\\\"My_Table\\\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=True,\n    align=TableAlignKind.RIGHT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    left=Intensity(40),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart2 Title Formatting Setup\nDESCRIPTION: Sets up the basic chart formatting environment with necessary imports and document handling. Includes chart background styling and title color configuration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.title.area import Color as TitleBgColor\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_flat_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.PURPLE_DARK1, width=0.7)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.BLUE_DARK1, StandardColor.PURPLE_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        title_color = TitleBgColor(color=StandardColor.DEFAULT_BLUE)\n        Chart2.style_title(chart_doc=chart_doc, styles=[title_color])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Pattern from Style - Writer Header\nDESCRIPTION: This snippet demonstrates how to retrieve the Header Style Pattern from a Writer document style using the `HeaderStylePattern.from_style` method. The `prop_style_name` attribute is then asserted to verify the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n\nstyle_obj = HeaderStylePattern.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Writer Document with Footer Modification\nDESCRIPTION: A complete script that demonstrates how to set up a Writer document and modify its footer using the Footer class. It creates a document, sets footer properties like height, spacing, margins, and applies the style to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/footer.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.footer import Footer, WriterStylePageKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        footer_style = Footer(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            spacing_dyn=True,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=WriterStylePageKind.STANDARD,\n        )\n        footer_style.apply(doc)\n\n        style_obj = Footer.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Line Arrow Styles\nDESCRIPTION: Demonstrates how to retrieve existing arrow style properties from a shape using the ArrowStyles.from_obj() method. Includes verification of the retrieved properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/arrow_styles.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.line import ArrowStyles\n# ... other code\n\n# get the properties from the shape\nf_style = ArrowStyles.from_obj(line.component)\nassert f_style is not None\nassert f_style.prop_start_line_name == GraphicArrowStyleKind.ARROW_LARGE.value\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart2 Direct Axis Positioning in Python\nDESCRIPTION: Sets up the environment for chart axis positioning, including opening a document, setting up the chart, and applying background styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/positioning.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.axis.positioning import AxisLine, ChartAxisPosition\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange, Offset\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"bon_voyage.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"Object 1\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK2, width=0.9)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=0,\n            offset=Offset(41, 50),\n            style=GradientStyle.RADIAL,\n            grad_color=ColorRange(StandardColor.TEAL, StandardColor.YELLOW_DARK1),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        axis_line_style = AxisLine(cross=ChartAxisPosition.VALUE, value=2000)\n        Chart2.style_x_axis(chart_doc=chart_doc, styles=[axis_line_style])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Transparency Style from Writer Document\nDESCRIPTION: This code snippet shows how to retrieve the transparency style of a paragraph in a Writer document. It gets the style using `Transparency.from_style` method and then asserts that the style name matches the expected paragraph style kind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Transparency.from_style(doc=doc.component, style_name=para_kind)\nassert style_obj.prop_style_name == str(para_kind)\n```\n\n----------------------------------------\n\nTITLE: Setting Text Font in Calc Cells using Python\nDESCRIPTION: This snippet shows how to set text font properties for specific cells in a Calc sheet. It applies different font styles, including color, bold, and underline, to cells A1 and B1.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncell_obj = Calc.get_cell_obj(\"A1\")\nCalc.set_val(value=\"Hello\", sheet=sheet, cell_obj=cell_obj)\nCalc.set_val(value=\"World\", sheet=sheet, cell_obj=cell_obj.right)\n\na1 = Calc.get_cell(sheet=sheet, cell_obj=cell_obj)\nb12 = Calc.get_cell(sheet=sheet, cell_obj=cell_obj.right)\n\nft = Font(color=CommonColor.DARK_GREEN)\nStyler.apply(a1, ft)\nStyler.apply(b12, ft.bold.underline)\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern to Chart Subtitle in Python\nDESCRIPTION: This snippet demonstrates how to apply a pattern style to a chart subtitle. It uses the same Pattern class and applies a horizontal brick pattern to the subtitle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.area import Pattern as TitlePattern, PresetPatternKind\n\ntitle_pattern = TitlePattern.from_preset(chart_doc, PresetPatternKind.HORIZONTAL_BRICK)\nChart2.style_title(chart_doc=chart_doc, styles=[title_pattern])\n```\n\n----------------------------------------\n\nTITLE: Setting Border Padding for Page Footer\nDESCRIPTION: This snippet shows how to set border padding for a page footer. It creates a Padding object with specific values for each side and applies it to the footer style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/bordes.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npadding_style = Padding(\n    left=5, right=5, top=3, bottom=3, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, footer_style, padding_style)\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Path\nDESCRIPTION: ReStructuredText directive for auto-documenting a Python module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.indent_space.indent.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.indent_space.indent\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example with kwargs\nDESCRIPTION: Demonstrates an alternative format for EventArgsCallbackT callbacks where the control source is retrieved from the keyword arguments.  The type is cast to FormCtlTimeField for proper type hinting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_time_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlTimeField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Searching Impress-Specific Documentation with loguide\nDESCRIPTION: Example of using the loguide command line tool to find information about page formatting in the Impress application documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nloguide impress Page Formatting\n```\n\n----------------------------------------\n\nTITLE: Setting Border Padding for Writer Page Headers in Python\nDESCRIPTION: Shows how to configure the inner padding of header borders using the Padding class. This sets specific padding values in millimeters for each side of the header.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/bordes.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npadding_style = Padding(\n    left=5, right=5, top=3, bottom=3, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, header_style, padding_style)\n```\n\n----------------------------------------\n\nTITLE: Subtracting Rows with Integer in Python LibreOffice\nDESCRIPTION: Shows how to subtract rows from a range using integers. Demonstrates both positive and negative integer subtraction affecting the range bounds.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>> \n>>> rng1 = RangeObj(col_start=\"A\", col_end=\"C\", row_start=10, row_end=20, sheet_idx=0)\n>>> str(rng1)\n'A10:C20'\n>>> rng1.row_count\n11\n>>> rng2 = rng1 - 5\n>>> str(rng2)\n'A10:C15'\n>>> repr(rng2)\n\"RangeObj(col_start='A', col_end='C', row_start=10, row_end=15, sheet_idx=0)\"\n>>> rng2.row_count\n6\n```\n\n----------------------------------------\n\nTITLE: Printing Function Arguments in Calc\nDESCRIPTION: Class method for printing detailed information about function arguments, including name, description, and optional status. Uses PropertyValue to extract argument metadata.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef print_fun_arguments(cls, prop_vals: Sequence[PropertyValue]) -> None:\n    fargs = cast(\n        \"Sequence[FunctionArgument]\", mProps.Props.get_value(name=\"Arguments\", props=prop_vals)\n    )\n    if fargs is None:\n        print(\"No arguments found\")\n        return\n\n    print(f\"No. of arguments: {len(fargs)}\")\n    for i, fa in enumerate(fargs):\n        print(f\"{i+1}. Argument name: {fa.Name}\")\n        print(f\"  Description: '{fa.Description}'\")\n        print(f\"  Is optional?: {fa.IsOptional}\")\n        print()\n```\n\n----------------------------------------\n\nTITLE: Setting Up OLE Shape for Formula in Draw Class - Python\nDESCRIPTION: This draw_formula() method sets up an OLE2Shape for a mathematical formula on a slide. It handles unit conversions, shape creation, and property assignments. Requires slide data and formula string; returns an XShape with adjusted size and position.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class (simplified)\n@classmethod\ndef draw_formula(\n    cls,\n    slide: XDrawPage,\n    formula: str,\n    x: int | UnitT,\n    y: int | UnitT,\n    width: int | UnitT,\n    height: int | UnitT\n) -> XShape:\n\n    x = cls._get_unit_mm_int(x)\n    y = cls._get_unit_mm_int(y)\n    width = cls._get_unit_mm_int(width)\n    height = cls._get_unit_mm_int(height)\n\n    shape = cls.add_shape(\n        slide=slide, shape_type=DrawingShapeKind.OLE2_SHAPE, x=x, y=y, width=width, height=height\n    )\n    cls.set_shape_props(shape, CLSID=str(Lo.CLSID.MATH))  # a formula\n\n    model = mLo.Lo.qi(XModel, Props.get(shape, \"Model\"), True)\n    # Info.show_services(obj_name=\"OLE2Shape Model\", obj=model)\n    Props.set(model, Formula=formula)\n\n    # for some reason setting model Formula here cause the shape size to be blown out.\n    # resetting size and position corrects the issue.\n    cls.set_size(shape, Size(width, height))\n    cls.set_position(shape, Point(x, y))\n    return shape\n```\n\n----------------------------------------\n\nTITLE: Handling Event Callbacks in Python\nDESCRIPTION: This snippet demonstrates how to define a callback function for handling events where the control source is provided as a keyword argument. The callback function processes events associated with button controls in a dialog. It's expected to receive parameters like 'src' and 'event', and optionally 'args' and 'kwargs', with 'control_src' specifically providing the control reference needed for operations. Note that type casting is used to extract the control from 'kwargs'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_button.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlButton, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Up Document and Chart Style\nDESCRIPTION: This snippet establishes an OpenOffice Calc document, sets the zoom level, and applies styles to a chart. It styles the chart border and area gradient before closing the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BLUE_LIGHT3,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient_from_preset(\n            preset=PresetGradientKind.TEAL_BLUE,\n        )\n\n        ds = chart_doc.get_data_series()[0]\n        ds.style_area_color(StandardColor.TEAL_DARK2)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Importing ParaStyle and Resetting Formatting in Python\nDESCRIPTION: This snippet imports the `Para` class (aliased as `ParaStyle`) from the `ooodev.format.writer.style.para` module and applies the default paragraph style to reset the cursor's formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.style.para import Para as ParaStyle\n# ...\n\n# reset the cursor formatting\nParaStyle.default.apply(cursor.component)\n# ...\n```\n\n----------------------------------------\n\nTITLE: Monitoring Office Bridge and Document State with Python\nDESCRIPTION: This code snippet sets up a document monitor using the ooo_dev_tools framework. It initializes a document object within LibreOffice, sets up event listeners for bridge disposal, and uses a continuous loop to check the state of the bridge. The script supports user termination via command-line arguments and allows visible integration with the GUI. Dependencies include ooodev.adapter.lang.event_events, ooodev.events.args.event_args, ooodev.events.lo_events, ooodev.events.lo_named_event, ooodev.office.calc, ooodev.gui, and ooodev.loader.lo.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/events/events_in_class_ex.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nfrom __future__ import annotations\nimport time\nimport sys\nfrom typing import Any\n\nfrom ooodev.adapter.lang.event_events import EventEvents\nfrom ooodev.events.args.event_args import EventArgs\nfrom ooodev.events.lo_events import Events\nfrom ooodev.events.lo_named_event import LoNamedEvent\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\nclass DocMonitor:\n    def __init__(self) -> None:\n        self.closed = False\n        self.bridge_disposed = False\n        loader = Lo.load_office(Lo.ConnectPipe(), opt=Lo.Options(verbose=True))\n\n        self.doc = Calc.create_doc(loader=loader)\n\n        self._fn_on_disposed = self.on_disposed\n\n        self.events = Events(source=self)\n        self.events.on(LoNamedEvent.BRIDGE_DISPOSED, self._fn_on_disposed)\n\n        self._bridge_events = EventEvents()\n        self._bridge_events.add_event_disposing(self._fn_on_disposing)\n        Lo.bridge.addEventListener(self._bridge_events.events_listener_event)\n\n        GUI.set_visible(True, self.doc)\n\n    def on_disposed(self, source: Any, event_args: EventArgs) -> None:\n        # just another way of knowing when bridge is gone.\n        print(\"LO: Office bridge has gone!!\")\n        self.bridge_disposed = True\n\ndef main_loop() -> None:\n    dw = DocMonitor()\n\n    # check an see if user passed in a auto terminate option\n    if len(sys.argv) > 1:\n        if str(sys.argv[1]).casefold() in (\"t\", \"true\", \"y\", \"yes\"):\n            Lo.delay(5000)\n            Lo.close_office()\n\n    # while Writer is open, keep running the script unless specifically ended by user\n    while 1:\n        if dw.bridge_disposed is True:\n            print(\"\\nExiting due to office bridge is gone\\n\")\n            raise SystemExit(1)\n        time.sleep(0.1)\n\n\nif __name__ == \"__main__\":\n    print(\"Press 'ctl+c' to exit script early.\")\n    try:\n        main_loop()\n    except SystemExit as e:\n        SystemExit(e.code)\n    except KeyboardInterrupt:\n        # ctrl+c exist the script early\n        print(\"\\nExiting by user request.\\n\", file=sys.stderr)\n        SystemExit(0)\n\n```\n\n----------------------------------------\n\nTITLE: Applying Text Orientation to Calc cells\nDESCRIPTION: This snippet shows how to apply text orientation settings to cells in LibreOffice Calc. It rotates text by -10 degrees, aligns it to the inside edge, and disables vertical stacking.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/alignment.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nstyle = TextOrientation(\n    vert_stack=False,\n    rotation=-10,\n    edge=EdgeKind.INSIDE,\n    style_name=StyleCellKind.DEFAULT,\n)\nstyle.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving FontEffects from Existing Style\nDESCRIPTION: This code snippet shows how to retrieve font effects from an existing style in a Writer document. The from_style() method is used to get the font effects from the SOURCE_TEXT character style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = FontEffects.from_style(doc=doc, style_name=StyleCharKind.SOURCE_TEXT)\nassert style_obj.prop_style_name == str(StyleCharKind.SOURCE_TEXT)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Area Image from Writer Style\nDESCRIPTION: This snippet demonstrates how to retrieve the Area image from an existing Page style in Writer using the Img class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = PageAreaImg .from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Subtracting RangeObj from Integer in Python LibreOffice\nDESCRIPTION: Demonstrates subtracting a RangeObj from an integer value, affecting the start of the range. Converts range A10:C20 to A15:C20.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>> \n>>> rng1 = RangeObj(col_start=\"A\", col_end=\"C\", row_start=10, row_end=20, sheet_idx=0)\n>>> str(rng1)\n'A10:C20'\n>>> rng1.row_count\n11\n>>> rng2 = 5 - rng1\n>>> str(rng2)\n'A15:C20'\n>>> repr(rng2)\n\"RangeObj(col_start='A', col_end='C', row_start=15, row_end=20, sheet_idx=0)\"\n>>> rng2.row_count\n6\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Title Direction and Orientation in Python\nDESCRIPTION: Demonstrates how to set the direction and orientation of a chart title using the ooodev library. This snippet shows the creation of Orientation and Direction objects and applying them to the chart title.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/alignment.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.title.alignment import Direction, Orientation, DirectionModeKind\n# ... other code\n\ntitle_orient = Orientation(angle=15, vertical=False)\ntitle_dir = Direction(mode=DirectionModeKind.LR_TB)\nChart2.style_title(chart_doc=chart_doc, styles=[title_orient, title_dir])\n```\n\n----------------------------------------\n\nTITLE: Applying transparency gradient to a shape\nDESCRIPTION: This snippet shows how to create a rectangle shape and apply a transparency gradient to it. It uses the ShapeGradient class to define the gradient style, angle, and intensity range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/transparency/gradient.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format import Styler\nfrom ooodev.format.draw.direct.area import Color as ShapeColor\nfrom ooodev.format.draw.direct.transparency import Gradient as ShapeGradient\nfrom ooodev.format.draw.direct.transparency import GradientStyle, IntensityRange\n# ... other code\n\nrect = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\ncolor_style = ShapeColor(StandardColor.RED)\nstyle = ShapeGradient(\n    style=GradientStyle.LINEAR, angle=30, grad_intensity=IntensityRange(0, 100)\n)\nStyler.apply(rect, color_style, style)\n```\n\n----------------------------------------\n\nTITLE: Getting Paragraph Outline Style in Python\nDESCRIPTION: This snippet retrieves the outline style from a LibreOffice Writer document using the `Outline.from_style` method. It asserts that the retrieved style name matches the expected style name, ensuring that the style was correctly retrieved.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/outline_list.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Outline.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Get Form by Index\nDESCRIPTION: Illustrates accessing a form in a Draw page by its index using the `[]` operator. A new draw document is created, and a form is added to the first slide if there are no forms. Then the first form (index 0) is accessed.  Requires the `DrawDoc` class and the `Draw` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_forms.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc(Draw.create_draw_doc())\n>>> draw_page = doc.slides[0]\n>>> if len(draw_page.forms) == 0:\n...   draw_page.forms.add_form()\n>>> form = draw_page.forms[0]\n<ooodev.draw.DrawForm object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Accessing Drawing Shapes with XTextShapesSupplier in Python\nDESCRIPTION: This code snippet demonstrates an attempt to access drawing shapes using the deprecated `XTextShapesSupplier` interface in LibreOffice. It attempts to obtain the supplier using `Lo.qi()` and checks if it's `None`, indicating that the supplier is not created.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n\"# this supplier is not created; Lo.qi() returns None\nshps_supp = Lo.qi(XTextShapesSupplier, text_doc)\nif shps_supp is None:\n    print(\"Could not obtain text shapes supplier\")\nelse:\n    print(f\"No. of text shapes: {shps_supp.getShapes().getCount()}\")\n```\n\n----------------------------------------\n\nTITLE: Delete Page by XDrawPage Component in Python\nDESCRIPTION: Shows how to delete a page using the del method with an XDrawPage component, leveraging Python references for deletion. Requires an instance of WriteDoc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/generic_draw_pages.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc(loader))\n>>> pg = doc.draw_pages[0]\n>>> del doc.draw_pages[pg.component]\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Draw Page in Calc Document\nDESCRIPTION: Retrieve the last draw page in a `SpreadsheetDrawPages` collection using a negative index. Prerequisite includes `CalcDoc` with an opened Calc document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/spreadsheet_draw_pages.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> doc.draw_pages[-1]\n<ooodev.calc.SpreadsheetDrawPage object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Coordinate System in Python\nDESCRIPTION: Static method to get the first coordinate system from a chart document, handling multiple coordinate systems and potential errors\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_coord_system(chart_doc: XChartDocument) -> XCoordinateSystem:\n    try:\n        diagram = chart_doc.getFirstDiagram()\n        coord_sys_con = Lo.qi(XCoordinateSystemContainer, diagram, True)\n        coord_sys = coord_sys_con.getCoordinateSystems()\n        if coord_sys:\n            if len(coord_sys) > 1:\n                Lo.print(f\"No. of coord systems: {len(coord_sys)}; using first.\")\n        return coord_sys[0]  # will raise error if coord_sys is empty or none\n    except Exception as e:\n        raise ChartError(\"Error unable to get coord_system\") from e\n```\n\n----------------------------------------\n\nTITLE: Retrieving alignment information from a style (Python)\nDESCRIPTION: This snippet demonstrates how to retrieve alignment information from an existing paragraph style in a Writer document using the Alignment class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/alignment.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Alignment.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Writer Document with Page Footer Styles\nDESCRIPTION: General setup function for creating a Writer document and configuring footer styles. This function establishes a connection to LibreOffice, creates a document, sets visibility and zoom, and applies footer styling with transparency.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.footer import Footer, WriterStylePageKind\nfrom ooodev.format.writer.modify.page.footer.transparency import (\n    Transparency,\n    Gradient,\n    IntensityRange,\n    GradientStyle,\n)\nfrom ooodev.format.writer.modify.page.footer.area import Color as HeaderAreaColor\nfrom ooodev.format import Styler\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        footer_style = Footer(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            spacing_dyn=True,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=WriterStylePageKind.STANDARD,\n        )\n        page_footer_style_kind = WriterStylePageKind.STANDARD\n        color_style = HeaderAreaColor(color=StandardColor.RED, style_name=page_footer_style_kind)\n        transparency_style = Transparency(value=85, style_name=page_footer_style_kind)\n        Styler.apply(doc, footer_style, color_style, transparency_style)\n\n        style_obj = Transparency.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Area Image Style\nDESCRIPTION: Demonstrates how to retrieve the area image style from a document using the FillImg class. Verifies the style name matches the original modification.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/img.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf_style = FillImg.from_style(\n    doc=doc.component,\n    style_name=style_modify.prop_style_name,\n    style_family=style_modify.prop_style_family_name,\n)\nassert f_style.prop_style_name == style_modify.prop_style_name\n```\n\n----------------------------------------\n\nTITLE: Setting Table Borders using styles in Python\nDESCRIPTION: This snippet demonstrates how to set table borders by creating a `Borders` style object and passing it to the `add_table` function within the `styles` parameter. The `Borders` object is initialized with a default `Side` object, and then the table is created with this style applied.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        bdr_style = Borders(border_side=Side())\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n            styles=[bdr_style],\n        )\n```\n\n----------------------------------------\n\nTITLE: Getting Primary Chart Type\nDESCRIPTION: Retrieves the first chart type from a chart document. Used for single chart type scenarios.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_chart_type(cls, chart_doc: XChartDocument) -> XChartType:\n    try:\n        chart_types = cls.get_chart_types(chart_doc)\n        return chart_types[0]\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error getting chart type\") from e\n```\n\n----------------------------------------\n\nTITLE: Setting Simple Plot Options\nDESCRIPTION: This example demonstrates how to set simple plot options for a chart's data series, specifically controlling the visibility of hidden cell values using the `PlotSimple` class from the `ooodev` library. This is useful for customizing how the chart handles missing or hidden data points.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/options.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.chart2.direct.series.data_series.options import PlotSimple\n# ... other code\n\nplot_options = PlotSimple(chart_doc=chart_doc.component, hidden_cell_values=False)\nChart2.style_data_series(chart_doc=chart_doc.component, styles=[plot_options])\"\n```\n\n----------------------------------------\n\nTITLE: Setting First Visible Row in XViewPane Interface - Python\nDESCRIPTION: This snippet demonstrates how to set the first visible row in the XViewPane interface of the spreadsheet. It uses the method setFirstVisibleRow to display the desired row in the specified pane.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npanes[0].setFirstVisibleRow(0)\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Chart Transparency\nDESCRIPTION: Demonstrates how to set basic transparency value for a chart background using ChartTransparency class. This snippet shows setting 50% transparency along with color and border properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nchart_color = ChartColor(color=StandardColor.GREEN_LIGHT2)\nchart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=0.7)\nchart_transparency = ChartTransparency(value=50)\nChart2.style_background(\n    chart_doc=chart_doc, styles=[chart_color, chart_bdr_line, chart_transparency]\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Page by DrawPage Object\nDESCRIPTION: Illustrates how to delete a page using a `DrawPage` object. The `DrawPage` object is first retrieved, then used as the key for deletion.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_pages.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc.open_doc(\"test.odg\")\n>>> slide = doc.slides[0]\n>>> del doc.slides[slide]\n```\n\n----------------------------------------\n\nTITLE: Running Draw Gradient Example with Custom Gradient Angle\nDESCRIPTION: Shows how to create a custom gradient with a specified angle of 45 degrees.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/gradient/README.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython -m start -k gradient -a 45\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example 2\nDESCRIPTION: This example demonstrates another way to define an EventArgsCallbackT callback where the control source is retrieved from the keyword arguments using `kwargs['control_src']`. It emphasizes the need to cast the control source to the appropriate type, `CtlListBox` in this case, after retrieval.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_list_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlListBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Footer Area Image from Writer Style\nDESCRIPTION: This snippet demonstrates how to retrieve the footer area image from an existing Writer document style using the Img class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = FooterAreaImg.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for ooodev.format.inner.modify.write.char.font.font_only\nDESCRIPTION: This code snippet is a Sphinx automodule directive.  It instructs Sphinx to automatically generate documentation for the `ooodev.format.inner.modify.write.char.font.font_only` module, including its members. It also specifies that undocumented members should be included and inheritance information should be displayed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.char.font.font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.char.font.font_only\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Helper Utilities in reStructuredText\nDESCRIPTION: This snippet sets up a documentation section for helper utilities using reStructuredText directives. It creates a labeled section and a table of contents that will include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/helper/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _utils_helper:\n\nhelper\n======\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Applying Calc Header Style in Python\nDESCRIPTION: This code snippet shows how to apply a header style to a Calc document.  It defines a `Header` object with specific properties and applies it to the document using the `apply` method.  The example utilizes `CalcStylePageKind.DEFAULT` style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/header.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nheader_style = Header(\n    on=True,\n    shared_first=True,\n    shared=True,\n    height=10.0,\n    spacing=3.0,\n    margin_left=1.5,\n    margin_right=2.0,\n    style_name=CalcStylePageKind.DEFAULT,\n)\nheader_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Python Class Reference Import Path\nDESCRIPTION: Full import path for the IntervalMarks class used for chart axis positioning and formatting in OpenOffice/LibreOffice development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/positioning.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nooodev.format.chart2.direct.axis.positioning.IntervalMarks\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Chart2 Format Documentation\nDESCRIPTION: ReStructuredText directive setting up documentation structure for chart formatting, including a table of contents directive that will include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_chart2_format_direct_static_wall_floor:\n\nChart2 Format Direct Wall/Floor\n===============================\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Align Left Position with Width using Style Object in Python\nDESCRIPTION: Using a 'TableProperties' object, this code sets the width and alignment of a table on the left. It involves dependencies like 'TableProperties', 'CommonColor', 'TableAlignKind', 'UnitMM', and 'Intensity'. The style attributes are applied during table creation with a cursor, similar to direct style use but through encapsulated properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\"My_Table\",\n    relative=True,\n    align=TableAlignKind.LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    width=Intensity(40),\n)\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n)\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example with kwargs\nDESCRIPTION: This code snippet shows an alternative format for an EventArgsCallbackT callback, where the control source is retrieved from the `kwargs`.  It is important to cast the `control_src` to the correct type.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_fixed_line.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlFixedLine, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document and Setting Text Anchor\nDESCRIPTION: Creates a Draw document, adds a rectangle shape with text, and sets its text anchor properties. Demonstrates the complete workflow including document creation, shape manipulation, and text anchor configuration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text/text_anchor.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\n\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.text.text import Spacing as TextSpacing\nfrom ooodev.format.draw.direct.text.text import TextAnchor, ShapeBasePointKind\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 50\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        cursor = rect.get_shape_text_cursor()\n        cursor.append_para(\"Hello World!\")\n\n        txt_anchor = TextAnchor(\n            anchor_point=ShapeBasePointKind.TOP_CENTER, full_width=True\n        )\n        txt_anchor.apply(rect.component)\n\n        f_style = TextAnchor.from_obj(rect.component)\n        assert f_style.prop_full_width is True\n        assert f_style.prop_anchor_point == ShapeBasePointKind.TOP_CENTER\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Formatting with ooodev in Python\nDESCRIPTION: Sets up the environment for chart formatting, including opening a document, getting the chart document, and applying background styles. This snippet demonstrates the initial setup required for chart manipulation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.title.alignment import Direction, Orientation, DirectionModeKind\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_flat_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.PURPLE_DARK1, width=0.7)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.BLUE_DARK1, StandardColor.PURPLE_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        title_orient = Orientation(angle=15, vertical=False)\n        title_dir = Direction(mode=DirectionModeKind.LR_TB)\n        Chart2.style_title(chart_doc=chart_doc, styles=[title_orient, title_dir])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Create and Apply Styles in Calc (Python)\nDESCRIPTION: This snippet demonstrates how to create new cell styles and apply them to a Calc spreadsheet. It involves defining style properties and applying them to specific cells or ranges.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter22.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"# in build_table.py\nclass BuildTable:\n    HEADER_STYLE_NAME = \\\"My HeaderStyle\\\"\n    DATA_STYLE_NAME = \\\"My DataStyle\\\"\n\n    def main(self) -> None:\n        loader = Lo.load_office(Lo.ConnectSocket())\n\n        try:\n            doc = CalcDoc(Calc.create_doc(loader))\n            doc.set_visible()\n            sheet = doc.get_sheet(0)\n            self._convert_addresses(sheet)\n\n            self._build_array(sheet)\n\n            # ...\n\n            if self._add_style:\n                self._create_styles(doc)\n                self._apply_styles(sheet)\n        # ...\n\"\n```\n\n----------------------------------------\n\nTITLE: Getting Footer Hatch Style from Style in Python\nDESCRIPTION: This code snippet shows how to retrieve an existing footer hatch style from a Writer document using the `FooterStyleHatch.from_style` method. The retrieved style object's name is then asserted to match the expected style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\\n\\nstyle_obj = FooterStyleHatch.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\"\n```\n\n----------------------------------------\n\nTITLE: Writing and Formatting Document in OOo Writer with Python\nDESCRIPTION: The snippet demonstrates how to create a document in OOo Writer, apply indentation styles, and manage document visibility. Imports essential modules like 'ooodev.office.write' and 'ooodev.format.writer.direct.para.indent_space'. Parameters include 'cursor' for position in the document and 'p_txt' for the paragraph text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/indent_spacing.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.writer.direct.para.indent_space import Indent, Spacing, ModeKind, LineSpacing\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Write.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        cursor = Write.get_cursor(doc)\n        indent = Indent(before=22.0, after=20.0, first=8.0)\n        Write.append_para(cursor=cursor, text=p_txt, styles=[indent])\n        Write.append_para(cursor=cursor, text=p_txt)\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Alignment from a Calc style\nDESCRIPTION: This snippet shows how to retrieve the current text alignment settings from a cell style in LibreOffice Calc. It uses the from_style method to get alignment properties from the DEFAULT style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/alignment.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nstyle_obj = TextAlign.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\nassert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Linking UNO Python Files in Virtual Environment\nDESCRIPTION: Creates symbolic links to LibreOffice UNO Python files in the virtual environment to enable LibreOffice API communication.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n(.venv) $ oooenv cmd-link --add\n```\n\n----------------------------------------\n\nTITLE: Adding Shadow Effects to Page Header Borders in Python\nDESCRIPTION: Demonstrates how to add shadow effects to header borders using the Shadow class. This example applies a dark blue shadow with a width of 1.5mm to the page header borders.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/bordes.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nshadow_style = Shadow(\n    color=StandardColor.BLUE_DARK2, width=1.5, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, header_style, shadow_style)\n```\n\n----------------------------------------\n\nTITLE: FormControlFactory Class Definition\nDESCRIPTION: This code snippet represents the class definition and attributes of FormControlFactory in the ooodev library.  It includes directives for automatic class documentation generation using Sphinx, specifying to include all members, even undocumented ones, and to show inheritance details and inherited members. It relies on the `autoclass` directive to generate the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/from_control_factory.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\".. autoclass:: ooodev.form.controls.from_control_factory.FormControlFactory\\n    :members:\\n    :undoc-members:\\n    :show-inheritance:\\n    :inherited-members:\"\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example with kwargs\nDESCRIPTION: Demonstrates the structure of an EventArgsCallbackT callback function, including accessing `control_src` via keyword arguments. This method is useful when the function signature doesn't explicitly include `control_src`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_currency_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbCurrencyField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Checking System Python Version\nDESCRIPTION: This bash command checks the version of Python installed on the system, which should match the major and minor version used by LibreOffice FlatPak.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ /usr/bin/python3 --version\nPython 3.10.6\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Page Transparency\nDESCRIPTION: This code snippet sets up the necessary imports and defines a `main` function to demonstrate page transparency modification in a Writer document. It initializes a Writer document, sets its visibility, and applies a color and transparency style to the page. It also includes assertions to verify the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.transparency import (\n    Transparency,\n    Gradient,\n    IntensityRange,\n    GradientStyle,\n    WriterStylePageKind,\n)\nfrom ooodev.format.writer.modify.page.area import Color as PageAreaColor\nfrom ooodev.format import Styler\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        page_style_kind = WriterStylePageKind.STANDARD\n        color_style = PageAreaColor(color=StandardColor.RED, style_name=page_style_kind)\n        transparency_style = Transparency(value=85, style_name=page_style_kind)\n        Styler.apply(doc, color_style, transparency_style)\n\n        style_obj = Transparency.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Items with Custom Styles\nDESCRIPTION: This snippet shows how to create menu items with custom styles, specifically using radio check buttons for a group of menu items.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/create_a_menu_with_menu_app.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.kind.item_style_kind import ItemStyleKind\nfrom ooodev.utils.kind.menu_lookup_kind import MenuLookupKind\n\nmenu = doc.menu[MenuLookupKind.TOOLS]\n\nmenu_name = \".custom:my.custom_menu\"\nnew_menu = {\n    \"Label\": \"My Menu\",\n    \"CommandURL\": menu_name,\n    \"Submenu\": [\n        {\n            \"Label\": \"A\",\n            \"CommandURL\": \".uno:WarningCellStyles\",\n            \"Style\": ItemStyleKind.RADIO_CHECK,\n        },\n        {\n            \"Label\": \"B\",\n            \"CommandURL\": \".uno:FootnoteCellStyles\",\n            \"Style\": ItemStyleKind.RADIO_CHECK,\n        },\n        {\n            \"Label\": \"C\",\n            \"CommandURL\": \".uno:NoteCellStyles\",\n            \"Style\": ItemStyleKind.RADIO_CHECK,\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoDoc Directive for GenericPoint Class\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the GenericPoint class including all its members from the ooodev.utils.data_type.generic_point module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/generic_point.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.generic_point.GenericPoint\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Setting Up Document and Applying Shape Shadow in Python\nDESCRIPTION: This Python script sets up a document and applies a shadow to a shape using the ShapeShadow class. Required dependencies include the OOXML development library. The main function initializes a document, makes the GUI visible, zooms to fit the entire page, and applies a shadow style to a rectangle. Inputs include shape coordinates and style attributes. The output is a document with a styled shape. Ensure that the OOXML environment is correctly configured before running.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format.writer.direct.shape.shadow import Shadow as ShapeShadow\nfrom ooodev.format.writer.direct.shape.shadow import ShadowLocationKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.office.draw import Draw\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        page = Write.get_draw_page(doc)\n        rect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\n        style = ShapeShadow(\n            use_shadow=True,\n            location=ShadowLocationKind.BOTTOM_RIGHT,\n            blur=3,\n            color=StandardColor.GRAY_LIGHT2\n        )\n        style.apply(rect)\n        page.add(rect)\n\n        f_style = ShapeShadow.from_obj(rect)\n        assert f_style\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart2 Legend Border Formatting in Python\nDESCRIPTION: This snippet demonstrates the setup process for formatting chart legend borders using ooodev library. It includes importing necessary modules, opening a document, and preparing the chart for styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.legend.borders import LineProperties as LegendLineProperties\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BRICK, width=1)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.GREEN_DARK4, StandardColor.TEAL_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        legend_line_style = LegendLineProperties(\n            color=StandardColor.BRICK, width=0.8, transparency=20\n        )\n        Chart2.style_legend(chart_doc=chart_doc, styles=[legend_line_style])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents for Writer Format Documentation\nDESCRIPTION: Sets up a reStructuredText toctree directive to create a table of contents that includes all files in the current directory. The toctree is configured to show only titles, with a maximum depth of 1 level, and uses glob pattern matching.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Transparency for Chart Floor (Python)\nDESCRIPTION: This snippet applies a gradient transparency effect to a chart floor using `style_area_transparency_gradient`. It utilizes the `python_ooo_dev_tools` library and defines both the angle and the intensity range for the gradient effect.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/transparency.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.intensity_range import IntensityRange\n\n# ... other code\nfloor = chart_doc.first_diagram.floor\nfloor.style_area_transparency_gradient(\n    angle=30,\n    grad_intensity=IntensityRange(0, 100),\n)\n```\n\n----------------------------------------\n\nTITLE: Output of Command Search Across All Modules in Python\nDESCRIPTION: This snippet shows the comprehensive output when searching for the '.uno:Copy' command across all LibreOffice modules. It demonstrates how the command exists in different contexts with various properties across document types like text documents, spreadsheets, presentations, and database views.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/commands/getting_info_on_commands.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{'com.sun.star.chart2.ChartDocument': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='Ctrl+C', global_hotkey='Ctrl+C')],\n'com.sun.star.drawing.DrawingDocument': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='Ctrl+C', global_hotkey='Ctrl+C')],\n'com.sun.star.formula.FormulaProperties': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.frame.Bibliography': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.frame.StartModule': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='Ctrl+C', global_hotkey='Ctrl+C')],\n'com.sun.star.presentation.PresentationDocument': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='Ctrl+C', global_hotkey='Ctrl+C')],\n'com.sun.star.report.ReportDefinition': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.script.BasicIDE': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sdb.DataSourceBrowser': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sdb.FormDesign': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sdb.OfficeDatabaseDocument': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sdb.QueryDesign': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sdb.RelationDesign': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sdb.TableDataView': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sdb.TableDesign': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sdb.TextReportDesign': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sdb.ViewDesign': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.sheet.SpreadsheetDocument': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.text.GlobalDocument': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.text.TextDocument': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.text.WebDocument': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')],\n'com.sun.star.xforms.XMLFormDocument': [CmdData(command='.uno:Copy', label='Cop~y', name='Copy', popup=False, properties=1, popup_label='', tooltip_label='', target_url='', is_experimental=False, module_hotkey='', global_hotkey='Ctrl+C')]}\n```\n\n----------------------------------------\n\nTITLE: Applying Font Formatting to X-Axis\nDESCRIPTION: Shows how to apply font formatting to the X-axis of a chart using the same font style configuration as the Y-axis example.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/font_only.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_X_axis(chart_doc=chart_doc, styles=[axis_font])\n```\n\n----------------------------------------\n\nTITLE: Applying Dash-Dot Border Style in Python\nDESCRIPTION: This code snippet illustrates using the `BorderLineKind` enumeration to set a dash-dot line style for borders. The example applies a dark green dash-dot border to a range of cells, demonstrating styling flexibility via enums.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\ncell_rng.style_borders_sides(\n    line=BorderLineKind.DASH_DOT,\n    color=CommonColor.DARK_GREEN,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Font Style to X-Axis - Python\nDESCRIPTION: This snippet applies font styling for the X-Axis of the chart in a similar manner to the Y-Axis snippet, using the `style_font` method to customize the font settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/font_only.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n_ = chart_doc.axis_x.style_font(\\n    name=\"Lucida Calligraphy\", size=14, font_style=\"italic\"\\n)\n```\n\n----------------------------------------\n\nTITLE: Getting LibreOffice Python Path using APSO Console\nDESCRIPTION: Python code to be run in the APSO console to determine the system Python path used by LibreOffice Snap.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.executable\n```\n\n----------------------------------------\n\nTITLE: XML Entry for Global Shortcut in registrymodifications.xcu\nDESCRIPTION: The XML entry that gets added to the registrymodifications.xcu file when a global shortcut is saved. This shows how LibreOffice stores the shortcut configuration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<item oor:path=\"/org.openoffice.Office.Accelerators/PrimaryKeys/Global\">\n    <node oor:name=\"A_SHIFT_MOD1_MOD2\" oor:op=\"replace\">\n        <prop oor:name=\"Command\" oor:op=\"fuse\">\n            <value xml:lang=\"en-US\">alone.here</value>\n        </prop>\n    </node>\n</item>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Character Border Shadow from a Writer Style\nDESCRIPTION: Code snippet showing how to retrieve the shadow configuration from an existing character border style. It uses the from_style static method to get a Shadow object from a style name in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/borders.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Shadow.from_style(doc=doc, style_name=StyleCharKind.EXAMPLE)\nassert style_obj.prop_style_name == str(StyleCharKind.EXAMPLE)\n```\n\n----------------------------------------\n\nTITLE: Getting Playlist Container in Python\nDESCRIPTION: Defines a method for retrieving the custom presentations from a LibreOffice document using the XCustomPresentationSupplier interface. This is a crucial step in playlist creation and requires the LibreOffice runtime environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter18.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# in the Draw class\n@staticmethod\ndef get_play_list(doc: XComponent) -> XNameContainer:\n    try:\n        cp_supp = Lo.qi(XCustomPresentationSupplier, doc, True)\n        return cp_supp.getCustomPresentations()\n    except Exception as e:\n        raise DrawError(\"Error getting play list\") from e\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Transparency to a Page Footer\nDESCRIPTION: Demonstrates how to apply transparency to a page footer style background color. The code sets up a standard page style with a red background color and 85% transparency. The ordering of applying styles is important as transparency must be applied after the color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\npage_footer_style_kind = WriterStylePageKind.STANDARD\ncolor_style = HeaderAreaColor(color=StandardColor.RED, style_name=page_footer_style_kind)\ntransparency_style = Transparency(value=85, style_name=page_footer_style_kind)\nStyler.apply(doc, footer_style, color_style, transparency_style)\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Draw Page in Python\nDESCRIPTION: Demonstrates how to access the last draw page in a document using negative indexing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_draw_pages.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc())\n>>> doc.draw_pages[-1]\n<ooodev.write.WriteDrawPage object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Setting Linguistic Properties in Python\nDESCRIPTION: The snippet demonstrates modifying 'IsSpellCapitalization' using the 'XLinguProperties_' interface, aiming to influence 'XSpellChecker.spell()'. Despite successful property changes via code, the snippet points out that these modifications don't affect the spell checker's behavior, suggesting the settings dialog as the alternative approach.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlingu_props = Write.get_lingu_properties()\nProps.set_property(lingu_props, \"IsSpellCapitalization\", False)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Page by Name\nDESCRIPTION: Demonstrates deleting a page by its name using the `del` keyword and the `[]` operator with the page name.  This provides a convenient way to remove pages if their names are known.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_pages.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc.open_doc(\"test.odg\")\n>>> del doc.slides[\"page1\"]\n```\n\n----------------------------------------\n\nTITLE: Getting Graphics Style Container\nDESCRIPTION: Code to obtain the graphics style container from a document for styling connectors and shapes\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ng_styles = Info.get_style_container(\n    doc=doc.component, family_style_name=\"graphics\"\n)\nself._connect_rectangles(slide=curr_slide, g_styles=g_styles)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shadow Properties from Style\nDESCRIPTION: Shows how to retrieve shadow properties from an existing style using the Shadow.from_style() method. This allows accessing properties like color and style name from an existing document style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/shadow/shadow.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf_style = Shadow.from_style(\n    doc=doc.component,\n    style_name=style.prop_style_name,\n    style_family=style.prop_style_family_name\n)\nassert f_style.prop_style_name == str(FamilyGraphics.DEFAULT_DRAWING_STYLE)\nassert f_style.prop_inner.prop_color == StandardColor.YELLOW_LIGHT2\n```\n\n----------------------------------------\n\nTITLE: Getting Writer Page Transparency from Style\nDESCRIPTION: This code snippet retrieves the transparency from a Writer page style. It uses `Transparency.from_style` to get the style object and asserts that the retrieved style name matches the expected style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/transparency.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Transparency.from_style(doc=doc, style_name=page_style_kind)\nassert style_obj.prop_style_name == str(page_style_kind)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transparency Style from Document\nDESCRIPTION: Shows how to retrieve an existing transparency style from a Writer document. The example gets the transparency style from the STANDARD page style and asserts that the style name matches expectations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Transparency.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Effects from an Existing Style in LibreOffice Draw\nDESCRIPTION: This code snippet demonstrates how to retrieve the font effects from an existing style in a LibreOffice Draw document. It uses the FontEffects.from_style method to get the font effects from the default drawing style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/font/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = FontEffects.from_style(\n    doc=doc.component,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\nassert f_style.prop_style_name == str(FamilyGraphics.DEFAULT_DRAWING_STYLE)\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Templates - Python\nDESCRIPTION: This method retrieves available chart templates using the XChartDocument reference. It is primarily used to pass the chart document to obtain template names and print them.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# in main() of chart_2_views.py\n# ...\nchart_doc = self._col_chart(doc=doc, sheet=sheet)\n# ...\ntemplate_names = Chart2.get_chart_templates(chart_doc)\nLo.print_names(template_names, 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart Font Effects in Python\nDESCRIPTION: This snippet sets up a Python script for applying font effects to Chart2 data labels in LibreOffice Calc. It opens a Calc document, applies style attributes to a chart, and closes the document. Dependencies include python_ooo_dev_tools and uno. Key parameters are file path, font color, and style attributes. The main function initializes the setup and applies the styles before closing the document, producing visual changes in the chart's appearance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.font_underline import FontUnderlineEnum\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.inner.direct.write.char.font.font_effects import FontLine\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BLUE_LIGHT3,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient_from_preset(\n            preset=PresetGradientKind.TEAL_BLUE,\n        )\n\n        ds = chart_doc.get_data_series()[0]\n        ds.style_font_effect(\n            color=StandardColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n            shadowed=True,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: This code snippet demonstrates how to define a callback function for events related to Numeric Field controls. The callback includes 'control_src' as a keyword argument, which provides access to the FormCtlNumericField instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_numeric_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlNumericField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining an Alternative Event Callback for Text Field Control in Python\nDESCRIPTION: This snippet illustrates an alternative format for defining event callbacks for the Text Field control, allowing access to the control from keyword arguments without directly specifying it in the function's parameter list.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_text_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlTextField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Partial Module Documentation\nDESCRIPTION: This snippet sets up a table of contents for the 'partial' module using Sphinx's toctree directive. It is configured to show only titles and include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/partial/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Starting a LibreOffice Slide Show with Dispatch Command using Python\nDESCRIPTION: This code snippet shows how to start a slide show in LibreOffice using a dispatch command. It loads LibreOffice, opens a document named 'foo', waits for half a second, and then dispatches the `DrawViewDispatch.PRESENTATION` command to start the slide show.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter11.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.dispatch.draw_view_dispatch import DrawViewDispatch\n\nloader = Lo.load_office(Lo.ConnectPipe())\ndoc = Lo.open_doc(\"foo\", loader)\nLo.delay(500) #  wait half a sec\nLo.dispatch_cmd(DrawViewDispatch.PRESENTATION)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Definition\nDESCRIPTION: Defines a table of contents tree structure for Draw Format modification documentation with a max depth of 2 levels.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_draw_format_modify:\n\nModify\n======\n\n.. toctree::\n    :maxdepth: 2\n\n    area/index\n    font/index\n    indent_space/index\n    shadow/index\n    transparency/index\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.awt.size_struct_generic_comp module\nDESCRIPTION: This automodule directive generates documentation for the `ooodev.adapter.awt.size_struct_generic_comp` module.  It includes all members, even undocumented ones, and shows the inheritance hierarchy. This module is likely a part of a larger library or framework for developing Office-related applications with Python.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.size_struct_generic_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.size_struct_generic_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Documentation Block\nDESCRIPTION: ReStructuredText documentation directive for auto-generating class documentation using Sphinx autodoc extension. This block configures the documentation to show all members including undocumented ones.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/cell_values.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.cell_values.CellValues\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Border Sides\nDESCRIPTION: Demonstrates how to configure specific border sides for a page footer. This code creates a Side object with double red lines of medium width and applies it to all sides of the footer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/bordes.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nside = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\nfooter_sides_style = Sides(all=side, style_name=CalcStylePageKind.DEFAULT)\nStyler.apply(doc, footer_style, footer_sides_style)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic LRU Cache Operations in Python\nDESCRIPTION: Demonstrates creation and basic usage of an LRUCache instance with a maximum size of 10. Shows how to set values, retrieve values, and delete items from the cache. Also demonstrates cache membership testing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/lru_cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.cache import LRUCache\n\ncache = LRUCache(max_size=10)\n\ncache[\"key1\"] = \"value1\"\ncache[\"key2\"] = \"value2\"\ncache[\"key3\"] = \"value3\"\n\nprint(cache[\"key1\"]) # prints \"value1\"\nprint(cache[\"key2\"]) # prints \"value2\"\nprint(cache[\"key3\"]) # prints \"value3\"\n\ndel cache[\"key1\"]\nassert \"key1\" not in cache\n```\n\n----------------------------------------\n\nTITLE: Checking Calc Document Design Mode\nDESCRIPTION: Shows how to check and set form design mode in a Calc document using SpreadsheetViewComp.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.calc import CalcDoc\n>>> doc = CalcDoc.from_current_doc()\n>>> view = doc.get_view()\n>>> view.is_form_design_mode()\nFalse\n\n>>> view.set_form_design_mode(True)\n>>> view.is_form_design_mode()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Report Layer Properties in Draw/Impress\nDESCRIPTION: Displays detailed information about layer properties including visibility, lock status, and printability. The method accesses layer information through the LayerManager interface and outputs formatted property details.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter12.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nProps.show_obj_props(\"Background Object Props\", layer)\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Document and Setting Image Background\nDESCRIPTION: This code snippet demonstrates the initialization of a Writer document and setting a background image for a paragraph using the Img class from ooodev. It includes creating a document, making it visible, and applying a background image from preset options.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/img.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.para.area import Img, PresetImageKind\\nfrom ooodev.office.write import Write\\nfrom ooodev.gui import GUI\\nfrom ooodev.loader.lo import Lo\\n\\ndef main() -> int:\\n    p_txt = (\\n        |short_ptext|\\n    )\\n\\n    with Lo.Loader(Lo.ConnectPipe()):\\n        doc = Write.create_doc()\\n        GUI.set_visible(doc=doc)\\n        Lo.delay(300)\\n        GUI.zoom(GUI.ZoomEnum.ZOOM_100_PERCENT)\\n        cursor = Write.get_cursor(doc)\\n\\n        image_style = Img.from_preset(PresetImageKind.FENCE)\\n        Write.append_para(cursor=cursor, text=p_txt, styles=[image_style])\\n\\        para_cursor = Write.get_paragraph_cursor(cursor)\\n        para_cursor.gotoPreviousParagraph(False)\\n        para_cursor.gotoEndOfParagraph(True)\\n\\        text_para = cast(\"TextRangeContentProperties\", para_cursor)\\n\\        para_img = Img.from_obj(text_para.TextParagraph)\\n        assert para_img is not None\\n\\        para_cursor.gotoEnd(False)\\n        Lo.delay(1_000)\\n        Lo.close_doc(doc)\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting CommandURL for Menu Items\nDESCRIPTION: These snippets demonstrate different ways to set the CommandURL for menu items, including using a string or a dictionary for macro execution.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/create_a_menu_with_menu_app.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"CommandURL\": \".custom:just.a.command\",\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"Label\": \"Execute macro...\",\n    \"CommandURL\": \"RunMacro\",\n    \"ShortCut\": \"Shift+Ctrl+Alt+E\",\n},\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"Label\": \"Execute macro...\",\n    \"CommandURL\": \".custom:RunMacro\",\n    \"ShortCut\": \"Shift+Ctrl+Alt+E\",\n},\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"Label\": \"My macro\",\n    \"CommandURL\": {\"library\": \"test\", \"name\": \"hello\"},\n},\n```\n\n----------------------------------------\n\nTITLE: Creating New Writer Document Using URL\nDESCRIPTION: Demonstrates creating a new Writer document by using a specific private URL factory method with loadComponentFromURL\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndoc = loader.loadComponentFromURL(\"private:factory/swriter\", \"_blank\", 0, props)\n```\n\n----------------------------------------\n\nTITLE: Retrieving transparency gradient from a shape\nDESCRIPTION: This snippet demonstrates how to retrieve the transparency gradient style from an existing shape using the ShapeGradient.from_obj() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/transparency/gradient.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.transparency import Gradient as ShapeGradient\n# ... other code\n\n# get the style from the shape\nf_style = ShapeGradient.from_obj(rect)\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Menu in Python OOO Dev Tools\nDESCRIPTION: Shows how to create a custom menu structure with submenu items, including a macro execution item and a Python script item.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\nfrom ooodev.utils.kind.menu_lookup_kind import MenuLookupKind\n\n\ndoc = CalcDoc.create_doc(loader=loader, visible=True)\nmenu = doc.menu[MenuLookupKind.TOOLS] # or .menu[\".uno:ToolsMenu\"]\nitm = menu.items[\".uno:AutoComplete\"] # or .items[6]\n\nmenu_name = \".custom:my.custom_menu\"\nnew_menu = {\n    \"Label\": \"My Menu\",\n    \"CommandURL\": menu_name,\n    \"Submenu\": [\n        {\n            \"Label\": \"Execute macro...\",\n            \"CommandURL\": \"RunMacro\",\n            \"ShortCut\": \"Shift+Ctrl+Alt+E\",\n        },\n        {\n            \"Label\": \"Python Hello World\",\n            \"CommandURL\": {\n                \"library\": \"HelloWorld\",\n                \"name\": \"HelloWorldPython\",\n                \"language\": \"Python\",\n                \"location\": \"share\",\n            },\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Indentation in OOo Writer\nDESCRIPTION: This snippet shows how to apply indentation to a paragraph using the 'Indent' class. Dependencies include the 'ooodev.format.writer.direct.para.indent_space' module. It requires a cursor object and applies a specified indentation style to the paragraph.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/indent_spacing.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nindent = Indent(before=22.0, after=20.0, first=8.0)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[indent])\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Wall Preset Image in Python\nDESCRIPTION: This snippet demonstrates how to apply a preset image to the background of a chart's wall using the `style_area_image_from_preset()` method and the `PresetImageKind` enum. It accesses the chart's wall and sets the image to `ICE_LIGHT`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_image import PresetImageKind\n\n# ... other code\nwall = chart_doc.first_diagram.wall\nwall.style_area_image_from_preset(preset=PresetImageKind.ICE_LIGHT)\n```\n\n----------------------------------------\n\nTITLE: Creating Shadowed Text\nDESCRIPTION: Demonstrates how to create shadowed text with a specified font size.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\nft = Font(size=17.0, shadowed=True)\nWrite.append(cursor=cursor, text=\"Shadowed\", styles=(ft,))\n```\n\n----------------------------------------\n\nTITLE: Finding Menu Items by ID in LibreOffice Calc using Python\nDESCRIPTION: Code snippet that attempts to find menu items by their ID. The code can behave unpredictably when run in VS Code debug mode, causing menu items to be unavailable (greyed out) in the Calc GUI.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nassert mb is not None\n\ni, m = mb.find_item_menu_id(\"MyCommand\", True)\nj, val = m.find_item_menu_id(\"MyCommand1\", True)\n```\n\n----------------------------------------\n\nTITLE: Documenting GenericDrawPage class with autodoc\nDESCRIPTION: This snippet uses the `autoclass` directive in reStructuredText to automatically generate documentation for the `GenericDrawPage` class. It specifies options to include members, inherited members, show inheritance, and exclude undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/generic_draw_page.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.draw.GenericDrawPage\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Resetting Text to Normal Position\nDESCRIPTION: Example showing how to reset text formatting back to normal position using the FontPosition class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_position.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\nfp_style = FontPosition().subscript\ncursor = Write.get_cursor(doc)\nWrite.append(cursor, \"hello\")\nWrite.style(pos=4, length=1, styles=[fp_style], cursor=cursor)\n\n# set back to normal position by using the normal property\nWrite.style(pos=4, length=1, styles=[fp_style.normal], cursor=cursor)\n```\n\n----------------------------------------\n\nTITLE: Documenting VBA Script Events Module in Python\nDESCRIPTION: This code snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.script.vba.vba_script_events` module. The documentation includes module members, undocumented members, and inheritance details.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.script.vba.vba_script_events.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.script.vba.vba_script_events\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback with Control Source Access in Python\nDESCRIPTION: This Python snippet defines an event callback function that handles events associated with a form's spin button control. It demonstrates how to access the control source from the provided keyword arguments in the callback. The callback parameters include the event source and any additional arguments or keyword arguments, with optional access to the control source through type casting. Dependencies include Python's type hinting and the `cast` function for type casting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_spin_button.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlSpinButton, *args, **kwargs\n) -> None:\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlSpinButton, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Testing LibreOffice Snap Integration with Python\nDESCRIPTION: Python script to test the integration of the virtual environment with LibreOffice Snap. It creates a Calc document, writes 'Hello World!' in the first cell, and displays a message box.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom pathlib import Path\nfrom ooodev.calc import CalcDoc\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader import Lo\nfrom ooodev.utils import paths\nfrom ooodev.dialog.msgbox import (\n    MessageBoxType, MessageBoxButtonsEnum, MessageBoxResultsEnum\n)\n\n\ndef main() -> int:\n    py_pth = paths.get_virtual_env_site_packages_path()\n    # uncomment to include current working directory in PYTHONPATH\n    # py_pth += f\":{Path.cwd()}\"\n    _ = Lo.load_office(\n        Lo.ConnectSocket(soffice=\"/snap/bin/libreoffice\", env_vars={\"PYTHONPATH\": py_pth})\n    )\n    try:\n        doc = CalcDoc.create_doc(visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"]value = \"Hello World!\"\n\n        msg_result = doc.msgbox(\n            \"Do you wish to close document?\",\n            \"All done\",\n            boxtype=MessageBoxType.QUERYBOX,\n            buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n        )\n        if msg_result == MessageBoxResultsEnum.YES:\n            doc.close()\n            Lo.close_office()\n        else:\n            print(\"Keeping document open\")\n\n    except Exception:\n        Lo.close_office()\n        raise\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Paragraph Style in Python with OOoDEV\nDESCRIPTION: This code snippet illustrates how to apply a previously created paragraph style to a text range within a document. After creating a new style, it retrieves the XTextRange for the document, applies the style to that range, and appends a paragraph of text. This requires the OOoDEV modules responsible for document manipulation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/para.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nnew_style_name = \"CoolParagraph\"\nif not create_para_style(doc, new_style_name):\n    raise RuntimeError(f\"Could not create new paragraph style: {new_style_name}\")\n\n# get the XTextRange of the document\nxtext_range = doc.getText().getStart()\n# Load the paragraph style and apply it to the text range.\npara_style = StylePara(new_style_name)\npara_style.apply(xtext_range)\n# ... other code\n```\n\n----------------------------------------\n\nTITLE: Implementing File-Based Cache with Change Detection in Python\nDESCRIPTION: Example demonstrating usage of FileChangeAwareCache class to cache JSON data with automatic invalidation when the source file changes. The implementation includes functions for reading and writing JSON data, and accessing cached data with automatic cache population.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/file_change_aware_cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any\nimport json\nfrom pathlib import Path\nfrom ooodev.utils.cache.singleton import FileChangeAwareCache\n\ndef get_json_data(json_file: str | Path) -> Any:\n    with open(json_file, 'r', encoding=\"utf-8\") as json_file:\n        data = json.load(json_file)\n    return data\n\ndef save_json_data(json_file: str | Path, data: Any) -> None:\n    with open(json_file, 'w', encoding=\"utf-8\") as json_file:\n        json.dump(data, json_file)\n\ndef get_cache_data(cache: FileChangeAwareCache, json_file: str | Path) -> Any:\n    data = cache[json_file]\n    if data is None:\n        data = get_json_data(json_file)\n        cache[json_file] = data\n    return data\n\ncache = FileChangeAwareCache(tmp_dir=\"my_tmp\")\njson_file = Path(\"/user/me/Documents/User.json\")\n\ndata = get_cache_data(json_file)\n\ndata[\"new_key\"] = \"new_value\"\n# once the file is changed, the cache is invalidated\nsave_json_data(json_file, data)\n\ndata = get_cache_data(json_file)\nassert data[\"new_key\"] == \"new_value\"\n```\n\n----------------------------------------\n\nTITLE: Iterating over Pages\nDESCRIPTION: Demonstrates how to iterate over the pages in a Draw document using a `for` loop. Each page is accessed as a `DrawPage` object during iteration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_pages.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc.open_doc(\"test.odg\")\n>>> for slide in doc.slides:\n...     print(slide)\n<ooodev.draw.DrawPage object at 0x7f7f0c0b2b90>\n```\n\n----------------------------------------\n\nTITLE: Running Text Chart Example (Linux/Mac)\nDESCRIPTION: Command to execute the text chart example script on Linux or Mac systems using the direct path to the script file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart2/text_chart/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Chart2/text_chart/start.py\n```\n\n----------------------------------------\n\nTITLE: Setting Search Property Using Props.set_property in Python\nDESCRIPTION: This snippet shows an alternative method to enable regular expression searching using the Props.set_property utility. It is a more concise approach to setting properties on descriptors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nProps.set_property(srch_desc, \"SearchRegularExpression\", True)\n```\n\n----------------------------------------\n\nTITLE: Applying Padding to a Cell in Python\nDESCRIPTION: This code snippet demonstrates how to apply padding to a cell using the `Padding` class from the `ooodev.format.calc.direct.cell.borders` module. The `padding` method accepts parameters like `left`, `right`, `top`, and `bottom`, allowing for individual or all-around padding. The snippet requires the `CommonColor` class for setting colors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.direct.cell.borders import Padding\n\n# ... other code\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\ncell.style_borders_sides(\n    color=CommonColor.BLUE,\n    padding=Padding(left=1.5),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RangeObj to Negative Number\nDESCRIPTION: Shows how adding RangeObj to a negative number adds rows to the end of range. Demonstrates conversion from A10:C15 to A5:C15.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.range_obj import RangeObj\n\nrng1 = RangeObj(col_start=\"A\", col_end=\"C\", row_start=10, row_end=15, sheet_idx=0)\nstr(rng1)\n'A10:C15'\nrng1.row_count \n6\nrng2 = -5 - rng1\nstr(rng2)\n'A5:C15'\nrepr(rng2)\n\"RangeObj(col_start='A', col_end='C', row_start=5, row_end=15, sheet_idx=0)\"\nrng2.row_count\n11\n```\n\n----------------------------------------\n\nTITLE: Adding Chart to LibreOffice Calc\nDESCRIPTION: Method to insert a chart into a spreadsheet using specific cell range data. Demonstrates chart positioning and sizing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nif self._add_chart and Chart2:\n    rng_addr = sheet.get_address(range_name=\"B2:M4\")\n    chart_cell = \"B6\" if self._add_pic else \"D6\"\n    Chart2.insert_chart(\n        sheet=sheet.component,\n        cells_range=rng_addr,\n        cell_name=chart_cell,\n        width=21,\n        height=11,\n        diagram_name=\"Column\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Output - First Run\nDESCRIPTION: Shows the debug logging output when menu is first created and saved to JSON file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/context_class_example.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n26/04/2024 16:16:26 - DEBUG - CalcMenuIntercept: Matched command: .uno:Insert\n26/04/2024 16:16:26 - DEBUG - CalcMenuIntercept: Creating new menu data\n26/04/2024 16:16:26 - DEBUG - CalcMenuIntercept: Saving menu data to json file\n26/04/2024 16:16:30 - DEBUG - CalcMenuIntercept: Matched command: .uno:Insert\n26/04/2024 16:16:30 - DEBUG - CalcMenuIntercept: Returning existing menu\n```\n\n----------------------------------------\n\nTITLE: SlidesInfo Class and Main Method in Python\nDESCRIPTION: This code defines a `SlidesInfo` class with a `main` method that opens a Draw or Impress document, checks if it's a shape-based document, makes it visible, zooms to fit the page, reports the number of slides, and reports the layers and styles. It uses `Lo` (LibreOffice), `Draw`, `GUI`, and `MsgBox` modules for interacting with the document and displaying messages.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter12.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass SlidesInfo:\n    def __init__(self, fnm: PathOrStr) -> None:\n        FileIO.is_exist_file(fnm=fnm, raise_err=True)\n        self._fnm = FileIO.get_absolute_path(fnm)\n\n    def main(self) -> None:\n        loader = Lo.load_office(Lo.ConnectPipe())\n\n        try:\n            doc = Lo.open_doc(fnm=self._fnm, loader=loader)\n\n            if not Draw.is_shapes_based(doc):\n                Lo.print(\"-- not a drawing or slides presentation\")\n                Lo.close_doc(doc)\n                Lo.close_office()\n                return\n\n            GUI.set_visible(is_visible=True, odoc=doc)\n            Lo.delay(1_000)  # need delay or zoom nay not occur\n\n            GUI.zoom(view=GUI.ZoomEnum.ENTIRE_PAGE)\n\n            print()\n            print(f\"No. of slides: {Draw.get_slides_count(doc)}\")\n            print()\n\n            # Access the first page\n            slide = Draw.get_slide(doc=doc, idx=0)\n\n            slide_size = Draw.get_slide_size(slide)\n            print(f\"Size of slide (mm)({slide_size.Width}, {slide_size.Height})\")\n            print()\n\n            self._report_layers(doc)\n            self._report_styles(doc)\n\n            Lo.delay(1_000)\n            msg_result = MsgBox.msgbox(\n                \"Do you wish to close document?\",\n                \"All done\",\n                boxtype=MessageBoxType.QUERYBOX,\n                buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n            )\n            if msg_result == MessageBoxResultsEnum.YES:\n                Lo.close_doc(doc=doc, deliver_ownership=True)\n                Lo.close_office()\n            else:\n                print(\"Keeping document open\")\n        except Exception:\n            Lo.close_office()\n            raise\n```\n\n----------------------------------------\n\nTITLE: Running Chart Demo on Cross-Platform\nDESCRIPTION: Command to run the chart demo from the current example folder using the Python module syntax. The -k parameter specifies the chart type to create, with 'bar' used in this example.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart/Chart_views/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start -k bar\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Style Borders in Calc\nDESCRIPTION: Creates a Borders object with blue border color and padding, then applies it to the default cell style in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nborders = Borders(\n    border_side=Side(color=CommonColor.BLUE),\n    padding=Padding(all=1.5),\n    style_name=StyleCellKind.DEFAULT,\n)\nborders.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Subtracting RangeObj from CellObj in Python\nDESCRIPTION: Shows how to subtract a RangeObj instance from a CellObj instance. The example creates a range F10:H15 and subtracts it from cell (1,1), resulting in H12:H15.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>> from ooodev.utils.data_type.cell_obj import CellObj\n>>>\n>>> rng1 = RangeObj(col_start=\"F\", col_end=\"H\", row_start=10, row_end=15, sheet_idx=0) \n>>> str(rng1)\n'F10:H15'\n>>> rng1.row_count\n6\n>>> rng1.col_count \n3\n>>> rng2 = CellObj.from_idx(1, 1) - rng1\n>>> str(rng2)\n'H12:H15'\n>>> repr(rng2)\n\"RangeObj(col_start='H', col_end='H', row_start=12, row_end=15, sheet_idx=0)\"\n>>> rng2.row_count\n4\n>>> rng2.col_count\n1\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback Function Without Control Source\nDESCRIPTION: This code snippet illustrates an alternative format for defining an event callback function that does not explicitly take control_src as a parameter. Instead, it shows how to retrieve the control from keyword arguments, providing flexibility in event handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_currency_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n        # can get control from kwargs\n        ctl = cast(CtlCurrencyField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Footer Properties from Existing Style\nDESCRIPTION: Demonstrates how to get footer properties from an existing page style using the from_style class method. This enables reading current footer settings from a document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/footer.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Footer.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Axis Line Style in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the style of the Y-axis line of a chart in a Calc document using the `style_axis_line()` method. The returned style is then asserted to ensure that it is not None.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/line.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\nf_style = chart_doc.axis_y.style_axis_line()\nassert f_style is not None\"\n```\n\n----------------------------------------\n\nTITLE: Implementing TabPage Event Callback (Full Signature)\nDESCRIPTION: Example of implementing a tab page event callback with full signature including control_src parameter. The callback receives the source, event args, and the specific CtlTabPage control instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_tab_page.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlTabPage, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Matrix Transformation Call Example\nDESCRIPTION: Shows how to call the transformation matrix methods in an animation context.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter14.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# from anim_bicycle.py _animate_bike()\nDraw.print_matrix(shape.get_transformation())\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteSentenceCursor Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the WriteSentenceCursor class from the ooodev.write module. It includes all members, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_sentence_cursor.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.WriteSentenceCursor\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting View States in Document - Python\nDESCRIPTION: This method updates the view states of a spreadsheet document using an array of ViewState objects. The existing view data is preserved where necessary and is reconstructed before being restored to the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@classmethod\ndef set_view_states(\n    cls, doc: XSpreadsheetDocument, states: Sequence[mViewState.ViewState]\n) -> None:\n    ctrl = cls.get_controller(doc)\n    if ctrl is None:\n        return\n    view_data = str(ctrl.getViewData())\n    view_parts = view_data.split(\";\")\n    p_len = len(view_parts)\n    if p_len < 4:\n        Lo.print(\"No sheet view states found in view data\")\n        return None\n\n    vd_new = []\n    for i in range(3):\n        vd_new.append(view_parts[i])\n\n    for state in states:\n        vd_new.append(str(state))\n    s_data = \";\".join(vd_new)\n    Lo.print(s_data)\n    ctrl.restoreViewData(s_data)\n```\n\n----------------------------------------\n\nTITLE: Getting Calc Header Style from Style in Python\nDESCRIPTION: This code demonstrates how to retrieve a Header style from a Calc document. It uses the `from_style` method of the `Header` class to obtain the style object associated with `CalcStylePageKind.DEFAULT`. An assertion verifies that the retrieved style name matches the expected value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/header.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Header.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Removing a Tab by Position\nDESCRIPTION: This code snippet shows how to remove a tab from a Writer document by specifying its position. It uses the `Tabs.remove_by_pos` method to remove the tab at the given position.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/tabs.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n        Tabs.remove_by_pos(cursor, 12.0)\"\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern to Chart Floor\nDESCRIPTION: Sets a zig-zag pattern to a chart floor using PresetPatternKind from the format preset module. Requires the ooodev library and a chart document instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_pattern import PresetPatternKind\n\n# ... other code\nfloor = chart_doc.first_diagram.floor\nfloor.style_area_pattern_from_preset(preset=PresetPatternKind.ZIG_ZAG)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Borders using table_border2 in Python\nDESCRIPTION: This snippet demonstrates how to directly manipulate the `table_border2` property of a table object to set the border styles.  It sets the left line's color, width, and style, then copies these settings to the right line.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        table = cursor.add_table(\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n\n        table.table_border2.left_line.color = StandardColor.RED_DARK1\n        table.table_border2.left_line.line_width = UnitPT(float(LineSize.MEDIUM))\n        table.table_border2.left_line.line_style = BorderLineKind.SOLID\n        table.table_border2.right_line = table.table_border2.left_line\n```\n\n----------------------------------------\n\nTITLE: Applying Axis Line in Chart2 Direct Axis Positioning\nDESCRIPTION: Demonstrates how to position the axis line at a specific value using the AxisLine class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/positioning.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.axis.positioning import AxisLine, ChartAxisPosition\n# ... other code\n\naxis_line_style = AxisLine(cross=ChartAxisPosition.VALUE, value=2000)\nChart2.style_x_axis(chart_doc=chart_doc, styles=[axis_line_style])\n```\n\n----------------------------------------\n\nTITLE: Getting Current Border Style - Python\nDESCRIPTION: This snippet retrieves the current border line style settings from the legend using the style_border_line_get() method, asserting that a style is returned. It's essential for validating and confirming expected style configurations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = legend.style_border_line_get()\nassert f_style is not None\n\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties Directly in Writer\nDESCRIPTION: This Python code snippet demonstrates how to set table properties directly in a LibreOffice Writer document using the `style_direct` method of the table object. It creates a table and then sets its alignment to `TableAlignKind.AUTO` and makes it non-relative.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntable = cursor.add_table(\n            name=\"My_Table\",\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n            )\n\n        table.style_direct.style_table_props(\n            relative=False, align=TableAlignKind.AUTO\n        )\n```\n\n----------------------------------------\n\nTITLE: Formatting Y-Axis Numbers in Python\nDESCRIPTION: This snippet demonstrates how to format the numbers on the Y-axis of a chart in LibreOffice Calc using the python_ooo_dev_tools library. It sets the number format to currency with two decimal places using the NumberFormatIndexEnum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/numbers.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from ooo.dyn.i18n.number_format_index import NumberFormatIndexEnum\n# .. other code\n\n_ = chart_doc.axis_y.style_numbers_numbers(\n    source_format=False,\n    num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2,\n)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Menus and Menu Items in Python OOO Dev Tools\nDESCRIPTION: Demonstrates how to access menus and menu items using the CalcDoc and MenuLookupKind classes. Shows accessing tools menu and auto-complete menu item.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\nfrom ooodev.utils.kind.menu_lookup_kind import MenuLookupKind\n\ndoc = CalcDoc.create_doc(loader=loader, visible=True)\nmenu = doc.menu[MenuLookupKind.TOOLS] # or .menu[\".uno:ToolsMenu\"]\nitm = menu.items[\".uno:AutoComplete\"] # or .items[6]\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example in Python\nDESCRIPTION: Demonstrates two ways to define event callbacks for `FormCtlDbTimeField`. The first includes `control_src` as a keyword argument in the function signature. The second retrieves the control from the `kwargs` dictionary.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_time_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n        src: Any, event: EventArgs, control_src: FormCtlDbTimeField, *args, **kwargs\n    ) -> None:\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n        # can get control from kwargs\n        ctl = cast(FormCtlDbTimeField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass for OrientationKind documentation in RST\nDESCRIPTION: This RST code configures Sphinx's autoclass directive to generate documentation for the OrientationKind class, including all members and undocumented members from the ooodev.utils.kind.orientation_kind module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/orientation_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.orientation_kind.OrientationKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch to Chart Title in Python\nDESCRIPTION: This snippet shows how to apply a hatch style to a chart title. It uses the Hatch class from ooodev.format.chart2.direct.title.area and applies a yellow 45 degrees crossed hatch pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.area import Hatch as TitleHatch, PresetHatchKind\n\ntitle_hatch = TitleHatch.from_preset(chart_doc, PresetHatchKind.YELLOW_45_DEGREES_CROSSED)\nChart2.style_title(chart_doc=chart_doc, styles=[title_hatch])\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the update_information_provider_partial module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.deployment.update_information_provider_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.deployment.update_information_provider_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Show Demo with Module Syntax\nDESCRIPTION: Cross-platform command to run the slide show demo from the current example folder using Python's module syntax. This approach works on any operating system.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Basic_Show/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Setting Legend Entry Visibility in Chart Data Series\nDESCRIPTION: Shows how to control the visibility of legend entries for chart data series using the LegendEntry class from ooodev library\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/options.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.options import LegendEntry\n# ... other code\n\nlegend_options = LegendEntry(chart_doc.component, hide_legend=True)\nChart2.style_data_series(chart_doc=chart_doc.component, styles=[legend_options])\n```\n\n----------------------------------------\n\nTITLE: Setting Character Font Position Using FontPosition Class in Python\nDESCRIPTION: Creates a document and applies font position settings to a character style. The example sets subscript, raise/lower value, rotation angle, scale percentage, spacing, and pair kerning options.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/font_position.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.char.font import FontPosition, FontScriptKind, StyleCharKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        font_style = FontPosition(\n            script_kind=FontScriptKind.SUBSCRIPT,\n            raise_lower=10,\n            rotation=270,\n            scale=85,\n            spacing=3,\n            pair=True,\n            style_name=StyleCharKind.EXAMPLE,\n        )\n        font_style.apply(doc)\n\n        style_obj = FontPosition.from_style(doc=doc, style_name=StyleCharKind.EXAMPLE)\n        assert style_obj.prop_style_name == str(StyleCharKind.EXAMPLE)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Sphinx Auto-Documentation Directive for WriteText Class\nDESCRIPTION: ReStructuredText directive that configures automatic documentation generation for the WriteText class. The directive includes all members, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.WriteText\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Example Script Execution Output - Text\nDESCRIPTION: Shows an example of the output when the script is executed from the command line, including loading and dispatching messages.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nPS D:\\Users\\user\\Python\\python-ooouno-ex> python .\\ex\\auto\\general\\odev_dispatch\\start.py -d \"resources\\odt\\story.odt\"\nLoading Office...\nOpening D:\\Users\\user\\Python\\python-ooouno-ex\\resources\\odt\\story.odt\nDispatching: ReadOnlyDoc\nDispatched: ReadOnlyDoc\nDispatching: GetInvolved\nDispatched: GetInvolved\nAbout dispatch canceled\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Shapes\nDESCRIPTION: Examples of creating and coloring ellipse and rectangle shapes with solid fills.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# in _draw_Shapes()\ncircle1 = curr_slide.draw_ellipse(x=100, y=100, width=75, height=25)\ncircle1.component.FillColor = CommonColor.RED\n\n# rectangle with different fills; uses (x, y) width, height\nrect1 = curr_slide.draw_rectangle(x=70, y=100, width=75, height=25)\nrect1.component.FillColor = CommonColor.LIME\n```\n\n----------------------------------------\n\nTITLE: Displaying Document Lines with View Cursor\nDESCRIPTION: Function to iterate through and display document lines using view cursor and line cursor operations. Includes delay for visual feedback.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef show_lines(doc: WriteDoc) -> None:\n    tvc = doc.get_view_cursor()\n    tvc.goto_start()  # go to start of text\n\n    have_text = True\n    while have_text is True:\n        tvc.goto_start_of_line()\n        tvc.goto_end_of_line(True)\n        print(f\"L<{tvc.get_string()}>\")\n        Lo.delay(500)  # delay half a second\n        tvc.collapse_to_end()\n        have_text = tvc.go_right(1, True)\n```\n\n----------------------------------------\n\nTITLE: Slide Copy Implementation with Dispatch Commands\nDESCRIPTION: Copies slides between presentations using dispatch commands. Handles slide sorter mode transitions and includes necessary delays for Office operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef _copy_to(self, doc: ImpressDoc) -> None:\n    Lo.delay(1000)\n    Lo.dispatch_cmd(cmd=DrawViewDispatch.DIA_MODE)\n\n    Lo.delay(3000)\n\n    from_slide = doc.get_slide(idx=self._from_idx)\n    to_slide = doc.get_slide(idx=self._to_idx)\n    doc.goto_page(from_slide.component)\n    Lo.dispatch_cmd(cmd=GlobalEditDispatch.COPY)\n    Lo.delay(500)\n    print(f\"Copied {self._from_idx}\")\n\n    doc.goto_page(to_slide.component)\n    Lo.delay(500)\n    Lo.dispatch_cmd(GlobalEditDispatch.PASTE)\n    Lo.delay(500)\n    print(f\"Paste to after {self._to_idx}\")\n\n    Lo.dispatch_cmd(cmd=DrawDrawingDispatch.DRAWING_MODE)\n    Lo.delay(500)\n```\n\n----------------------------------------\n\nTITLE: Retrieving character style from cursor in LibreOffice Writer with Python\nDESCRIPTION: This snippet demonstrates how to retrieve the character style applied to a specific word in a document using the cursor. It selects a word, gets its style, and asserts the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/char.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# select the word \"jumped\"\ncursor.gotoStart(False)\ncursor.goRight(14, False)\ncursor.goRight(6, True)\nstyle = StyleChar.from_obj(cursor)\ncursor.gotoEnd(False)\nassert style.prop_name == \"Strong Emphasis\"\n```\n\n----------------------------------------\n\nTITLE: Basic LibreOffice Writer Font Position Setup\nDESCRIPTION: Basic setup code showing how to initialize LibreOffice, create a document and apply superscript formatting to text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_position.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.char.font import FontPosition\nfrom ooodev.format.writer.direct.char.font import CharSpacingKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\nwith Lo.Loader(Lo.ConnectPipe()):\n    doc = Write.create_doc()\n    GUI.set_visible(doc=doc)\n    Lo.delay(300)\n    GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n    cursor = Write.get_cursor(doc)\n\n    fp_style = FontPosition().superscript\n    cursor = Write.get_cursor(doc)\n    Write.append(cursor, \"hello\")\n    Write.style(pos=0, length=1, styles=[fp_style], cursor=cursor)\n\n    Lo.delay(1_000)\n    Lo.close_doc(doc)\n\nreturn 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashed Line Style\nDESCRIPTION: Static method to configure dashed line properties including dots, dashes, and distances. Uses LineDash and LineStyle enums.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class (simplified)\n\nfrom ooo.dyn.drawing.line_dash import LineDash as LineDash\nfrom ooo.dyn.drawing.line_style import LineStyle as LineStyle\n\n@staticmethod\ndef set_dashed_line(shape: XShape, is_dashed: bool) -> None:\n\n    props = Lo.qi(XPropertySet, shape, True)\n    if is_dashed:\n        ld = LineDash() #  create new struct\n        ld.Dots = 0\n        ld.DotLen = 100\n        ld.Dashes = 5\n        ld.DashLen = 200\n        ld.Distance = 200\n        props.setPropertyValue(\"LineStyle\", LineStyle.DASH)\n        props.setPropertyValue(\"LineDash\", ld)\n    else:\n        # switch to solid line\n        props.setPropertyValue(\"LineStyle\", LineStyle.SOLID)\n```\n\n----------------------------------------\n\nTITLE: Documenting DispatchContext Class in RST\nDESCRIPTION: ReStructuredText directive for documenting the DispatchContext class and its members using Sphinx autoclass directive.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/context/dispatch_context.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ooodev.utils.context.dispatch_context.DispatchContext:\n\nClass DispatchContext\n=====================\n\n.. autoclass:: ooodev.utils.context.DispatchContext\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Gradient Document - Python Setup\nDESCRIPTION: Sets up the basic environment for working with LibreOffice Writer documents and gradient styles. Includes necessary imports and main function setup with document creation and connection handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TYPE_CHECKING, cast\nfrom ooodev.format.writer.direct.para.area import Gradient, PresetGradientKind\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\nif TYPE_CHECKING:\n    from com.sun.star.text import TextRangeContentProperties  # service\n\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectSocket()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_100_PERCENT)\n        cursor = Write.get_cursor(doc)\n\n        gradient_style = Gradient.from_preset(PresetGradientKind.MAHOGANY)\n        Write.append_para(cursor=cursor, text=p_txt, styles=[gradient_style])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.chart2.direct.grid Package with Sphinx\nDESCRIPTION: This snippet uses Sphinx autodoc directives to generate documentation for the ooodev.format.chart2.direct.grid package. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.grid.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.grid\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: This example shows how to define a callback function for events related to the FormCtlDbDateField. The callback can either explicitly include `control_src` as a parameter or retrieve it from the keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_date_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbDateField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Documenting ModelImage Class with Sphinx\nDESCRIPTION: This snippet uses the Sphinx `autoclass` directive to generate documentation for the `ModelImage` class. It includes the class members, inherited members, and inheritance hierarchy. The `:undoc-members:` option includes undocumented members in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/model/model_image.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. autoclass:: ooodev.dialog.dl_control.model.model_image.ModelImage\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Pip on Linux\nDESCRIPTION: Bash command to install pip using curl and the Python executable if not already installed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_lo_install_pip.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://bootstrap.pypa.io/get-pip.py | /usr/bin/python3 -\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for ClosedBezierShapeComp\nDESCRIPTION: Sphinx directive configuration to automatically document the closed_bezier_shape_comp module. The configuration includes options to document all members (:members:), include undocumented members (:undoc-members:), and show inheritance relationships (:show-inheritance:).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.drawing.closed_bezier_shape_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.drawing.closed_bezier_shape_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Dictionary Operations with DotDict in Python\nDESCRIPTION: Demonstrates various dictionary operations supported by DotDict, including get, update, items, keys, values, and copying.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/helper/dot_dict.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nd = DotDict[str](a=\"hello\", b=\"world\")\n\n# Get value\nvalue = d.get(\"a\")  # \"hello\"\ndefault = d.get(\"missing\", \"default\")  # \"default\"\n\n# Update\nd.update({\"c\": \"!\"})\n\n# Items, keys, values\nitems = dict(d.items())\nkeys = list(d.keys())\nvalues = list(d.values())\n\n# Copy\nd_copy = d.copy()\nd_dict = d.copy_dict()  # returns standard dict\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteTextPortions Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the WriteTextPortions class. It includes all members, undocumented members, inheritance information, and special methods such as __next__.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text_portions.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.WriteTextPortions\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members:  __next__\n```\n\n----------------------------------------\n\nTITLE: Multi-Word Pattern Searching for LibreOffice Components\nDESCRIPTION: Example of using loapi comp to search for exception components containing a pattern of 'ill' followed by any characters and then 'arg', demonstrating more complex search capabilities.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nloapi comp --component-type exception --search \"ill arg\"\nChoose an option (default 1):\n[0],  Cancel\n[1],  IllegalArgumentIOException        - com.sun.star.frame.IllegalArgumentIOException           - exception\n[2],  IllegalArgumentException          - com.sun.star.lang.IllegalArgumentException              - exception\n```\n\n----------------------------------------\n\nTITLE: Applying Colored Borders to a Range in Python\nDESCRIPTION: This snippet shows how to apply colored borders to a range using the `style_borders_sides` method with the `CommonColor` class for color specification. The example applies red borders to all sides of the cell range `B2:F6`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\ncell_rng.style_borders_sides(color=CommonColor.RED)\n```\n\n----------------------------------------\n\nTITLE: Documenting Color Parameter in Python\nDESCRIPTION: Shows how to document a Color parameter in a Python function using full namespace to avoid ambiguity.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef highlight_range(cls, sheet: XSpreadsheet, headline: str, range_obj: mRngObj.RangeObj, color: Color) -> XCell:\n    \"\"\"\n    Draw a colored border around the range and write a headline in the\n    top-left cell of the range.\n\n    |lo_safe|\n\n    Args:\n        sheet (XSpreadsheet): Spreadsheet.\n        headline (str): Headline.\n        cell_range (XCellRange): Cell Range.\n        range_obj (RangeObj): Range Object\n        color (~ooodev.utils.color.Color): RGB color.\n\n    Returns:\n        XCell: First cell of range that headline ia applied on.\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Printing Document Properties using XDocumentPropertiesSupplier\nDESCRIPTION: Implementation of the print_doc_properties method in the Info class which extracts and displays document properties by converting the document to an XDocumentPropertiesSupplier interface and accessing its properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef print_doc_properties(cls, doc: object) -> None:\n    try:\n        doc_props_supp = mLo.Lo.qi(XDocumentPropertiesSupplier, doc, True)\n        dps = doc_props_supp.getDocumentProperties()\n        cls.print_doc_props(dps=dps)\n        ud_props = dps.getUserDefinedProperties()\n        mProps.Props.show_obj_props(\"UserDefined Info\", ud_props)\n    except Exception as e:\n        mLo.Lo.print(\"Unable to get doc properties\")\n        mLo.Lo.print(f\"    {e}\")\n    return\n\n```\n\n----------------------------------------\n\nTITLE: Running Impress Master Pages Example Using Python Module Command (Cross Platform)\nDESCRIPTION: Command to run the Impress master pages example from the current example folder using the Python module syntax. This approach works across all platforms.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Master_Use/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Running Draw Gradient Example with Named Gradient\nDESCRIPTION: Demonstrates how to run the script with a named gradient. This example uses the 'pastel_bouquet' gradient kind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/gradient/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython -m start -k name --gradient-kind pastel_bouquet\n```\n\n----------------------------------------\n\nTITLE: Simplified set_array Method Call for Block Data\nDESCRIPTION: Shows a simplified call to set_array that uses just the starting cell, letting the method calculate the required range based on the dimensions of the input array.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# in BuildTable._build_array() of build_table.py\nsheet.set_array(values=vals, name=\"A1\")\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example with kwargs\nDESCRIPTION: Illustrates another sample event callback function where the control source is accessed through keyword arguments. This demonstrates an alternative way to define an event handler for the events triggered by the CtlFormattedField class, where the control source is extracted from the kwargs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_formatted_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlFormattedField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Setting Line Spacing in LibreOffice Draw with Python\nDESCRIPTION: Demonstrates how to set line spacing for a text shape in LibreOffice Draw. Creates a rectangle shape, adds text, and applies custom line spacing using the LineSpacing class with proportional mode.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/indent_space/line_spacing.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.format.draw.modify import FamilyGraphics, DrawStyleFamilyKind\nfrom ooodev.format.draw.modify.indent_space import LineSpacing, ModeKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(700)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 100\n        height = 50\n        x = 10\n        y = 10\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        rect.set_string(\"Hello World!\")\n\n        style = LineSpacing(\n            mode=ModeKind.PROPORTIONAL,\n            value=87,\n            style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n            style_family=DrawStyleFamilyKind.GRAPHICS,\n        )\n        doc.apply_styles(style)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Running the Impress Slide Modification Script with Parameters\nDESCRIPTION: Demonstrates how to run the script with a specific presentation file as a parameter. The script will add two new slides to the specified presentation file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Modify_Slides/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Modify_Slides/start.py \"tests/fixtures/presentation/algsSmall.ppt\"\n```\n\n----------------------------------------\n\nTITLE: Getting Supported MIME Types for Image Export\nDESCRIPTION: Static method that retrieves all MIME types supported by the GraphicExportFilter service. It creates an instance of the service and calls getSupportedMimeTypeNames() to get the list of supported formats.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# in ImagesLo class\n@staticmethod\ndef get_mime_types() -> Tuple[str, ...]:\n    mi = Lo.create_instance_mcf(\n        XMimeTypeInfo, \"com.sun.star.drawing.GraphicExportFilter\", raise_err=True\n    )\n    return mi.getSupportedMimeTypeNames()\n```\n\n----------------------------------------\n\nTITLE: Callback Function Accessing Control via Keyword Arguments in Python\nDESCRIPTION: This code snippet illustrates another variation of an event callback function. It demonstrates how the control can be accessed from keyword arguments using type casting, which allows for operations on the specific check box control tied to the triggered event.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_check_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlCheckBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.writer.direct.para.tabs Module Contents\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the `ooodev.format.writer.direct.para.tabs` module. It includes module members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.para.tabs.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.para.tabs\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example with kwargs\nDESCRIPTION: Shows an alternative way to access the FormCtlDbRadioButton instance. Here, it's accessed via kwargs. This is useful in situations where you may have multiple callbacks with varying signatures but still need to access the control.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_radio_button.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbRadioButton, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Using ShapeColor to Modify Shape Colors in Python\nDESCRIPTION: This snippet demonstrates how to create a new LibreOffice Writer document, draw a rectangle, apply a fill style using the ShapeColor class, and verify the applied color. Dependencies include the OOoDev package and a running instance of LibreOffice. The input color is defined using StandardColor, and the rectangle's style is applied on a document page. Script concludes with document closure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/color.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.writer.direct.shape.area import Color as ShapeColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.office.draw import Draw\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    \"\"\"Main Entry Point\"\"\"\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        style = ShapeColor(color=StandardColor.GREEN_LIGHT2)\n\n        page = Write.get_draw_page(doc)\n        rect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\n        style.apply(rect)\n        page.add(rect)\n\n        f_style = ShapeColor.from_obj(rect)\n        assert f_style.prop_color == style.prop_color\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Header Border Padding in Python\nDESCRIPTION: This snippet demonstrates how to set padding for header borders in a Calc document using ooodev. It involves specifying padding values for each side and applying them using the `Styler` class. The main parameters are `left`, `right`, `top`, `bottom`, and `style_name`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/bordes.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npadding_style = Padding(\n    left=5,\n    right=5,\n    top=3,\n    bottom=3,\n    style_name=CalcStylePageKind.DEFAULT,\n)\nStyler.apply(doc, header_style, padding_style)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paragraph Area Gradient Information from a Style\nDESCRIPTION: This code demonstrates how to retrieve the area gradient settings from an existing paragraph style in a Writer document. It creates a ParaStyleGradient object from the Standard style and verifies the style name property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_gradient.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = ParaStyleGradient.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Area Gradient in Python\nDESCRIPTION: This code retrieves the gradient style applied to the chart area. It calls `style_area_gradient_get` to get the style and asserts that a style is successfully retrieved.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = chart_doc.style_area_gradient_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Defining ShortCut as Dictionary in Python\nDESCRIPTION: Example of defining a keyboard shortcut as a dictionary with 'key' and optional 'save' parameters. When 'save' is set to False, the shortcut works but isn't persisted between LibreOffice sessions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"ShortCut\": {\"key\": \"Shift+Ctrl+Alt+F\", \"save\": False}\n```\n\n----------------------------------------\n\nTITLE: Basic TimeCache Usage with TTL\nDESCRIPTION: Demonstrates creating a TimeCache instance with a 2-second TTL and 1-second cleanup interval. Shows basic cache operations and time-based expiration behavior.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/time_cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom ooodev.utils.cache.singleton import TimeCache\n\ncache = TimeCache(seconds=2, cleanup_interval=1)  # 60 seconds\ncache[\"key\"] = \"value\"\nassert \"key\" in cache # True\nassert cache[\"key\"] == \"value\"\n\ntime.sleep(1)\nassert \"key\" in cache # True\n\ntime.sleep(3)\nassert \"key\" not in cache # True\n```\n\n----------------------------------------\n\nTITLE: Setting Header Area Image in LibreOffice Writer\nDESCRIPTION: Applies an image to the header area of a page style. Uses the from_preset method of the Img class to set a pre-defined image pattern (COLOR_STRIPES) to the header background.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.header.area import Img as HeaderAreaImg, PresetImageKind\n# ... other code\n\nimg_style = HeaderAreaImg.from_preset(\n    preset=PresetImageKind.COLOR_STRIPES, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, header_style, img_style)\n```\n\n----------------------------------------\n\nTITLE: Tree Expansion Events Module\nDESCRIPTION: Manages expansion-related events for tree components in OpenOffice development tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.tree.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nooodev.adapter.awt.tree.tree_expansion_events\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Table of Contents for OOO_Dev_Tools inst Module\nDESCRIPTION: A Sphinx documentation directive that sets up a table of contents for the 'inst' module. It uses the 'titlesonly' option to display only the titles of sub-pages, and references a submodule called 'lo'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/inst/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n\n    lo/index\n```\n\n----------------------------------------\n\nTITLE: Setting Table Background Image from Preset\nDESCRIPTION: Demonstrates setting a table background image using style_direct method with a preset image from PresetImageKind in LibreOffice Writer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/background.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.table.background import PresetImageKind\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n)\ntable.style_direct.style_area_image_from_preset(PresetImageKind.PAPER_TEXTURE)\n```\n\n----------------------------------------\n\nTITLE: Getting Area Image from Paragraph Style in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the area image from a paragraph style in an OpenOffice Writer document using OOoDev's class methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/area_img.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\\n\\nstyle_obj = ParaStyleImg.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Document and Setting Paragraph Borders in Python\nDESCRIPTION: This snippet demonstrates how to create a Writer document, set up the environment, and apply custom border styles to a paragraph. It uses the ooodev library to interact with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/bordes.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.writer.modify.para.borders import Padding, Shadow, Sides\nfrom ooodev.format.writer.modify.para.borders import BorderLineKind, LineSize\nfrom ooodev.format.writer.modify.para.borders import StyleParaKind, Side\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        side = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\n        sides_style = Sides(all=side, style_name=StyleParaKind.STANDARD)\n        sides_style.apply(doc)\n\n        style_obj = Sides.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Using the loguide CLI for General LibreOffice Documentation Search\nDESCRIPTION: Example of using the loguide command line tool to search the LibreOffice Developer's Guide for general information about UNO object lifetimes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nloguide general Lifetime of UNO Objects\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Padding from Writer Document Style\nDESCRIPTION: This snippet shows how to retrieve the border padding configuration from an existing style in a Writer document. It uses the from_style method to get the style object and verifies the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/bordes.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Padding.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Position Settings from a Style in Python\nDESCRIPTION: Shows how to retrieve font position settings from an existing style in a Writer document. This snippet demonstrates using the from_style static method to obtain font position configuration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/char/font_position.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = FontPosition.from_style(doc=doc, style_name=StyleCharKind.EXAMPLE)\nassert style_obj.prop_style_name == str(StyleCharKind.EXAMPLE)\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment with Python 3.8\nDESCRIPTION: Commands to create a virtual environment without pip using pyenv Python installation\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_poetry_env.rst#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n&\"C:\\Users\\<username>\\.pyenv\\pyenv-win\\versions\\3.8.10\\python.exe\" -m venv --without-pip .venv\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Data Series\nDESCRIPTION: Retrieves data series from a chart document, optionally filtering by chart type. Handles both single and multiple chart type scenarios.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_data_series(\n    cls, chart_doc: XChartDocument, chart_type: ChartTypeNameBase | str = \"\"\n) -> Tuple[XDataSeries, ...]:\n    try:\n        if chart_type:\n            xchart_type = cls.find_chart_type(chart_doc, chart_type)\n        else:\n            xchart_type = cls.get_chart_type(chart_doc)\n        ds_con = Lo.qi(XDataSeriesContainer, xchart_type, True)\n        return ds_con.getDataSeries()\n    except Exception as e:\n        raise ChartError(\"Error getting chart data series\") from e\n```\n\n----------------------------------------\n\nTITLE: Deleting Forms in Writer Document\nDESCRIPTION: Demonstrates how to delete forms using both index and name-based deletion.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_forms.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> del doc.draw_page.forms[1]\n\n>>> del doc.draw_page.forms[\"MyForm\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving LibreOffice Version as String with Info.version Property\nDESCRIPTION: A static read-only property that gets the running LibreOffice version as a string. Returns version in format like \"7.3.4.2\".\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/info.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nInfo.version\n```\n\n----------------------------------------\n\nTITLE: Setting Page Area Color in Writer\nDESCRIPTION: This snippet shows how to set the Area color of a Page style in Writer using the PageAreaColor class from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.area import Color as PageAreaColor, WriterStylePageKind\n# ... other code\n\ncolor_style = PageAreaColor(color=StandardColor.BLUE_LIGHT3, style_name=WriterStylePageKind.STANDARD)\ncolor_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to the Legend\nDESCRIPTION: This code snippet illustrates how to apply font effects using the style_font_general method on a chart legend. It modifies the font properties including boldness and color of the legend text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/font.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n_ = legend.style_font_general(b=True, color=StandardColor.PURPLE, size=12)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transparency Settings from a Page Style\nDESCRIPTION: Shows how to retrieve transparency settings from an existing page style. The code uses the from_style static method to get the transparency configuration from the standard page style and verifies the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Transparency.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: RST Auto Documentation Directive for Cell Protection Module\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the cell_protection module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.cell_protection.cell_protection.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.cell_protection.cell_protection\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Document with Character Highlighting\nDESCRIPTION: Sets up a LibreOffice Writer document and demonstrates basic character highlighting functionality using the ooodev library. Creates a document, sets visibility and zoom, and applies yellow-green highlighting to specific text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/highlight.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom ooodev.format.writer.direct.char.highlight import Highlight\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.PAGE_WIDTH)\n        cursor = Write.get_cursor(doc)\n        hl = Highlight(CommonColor.YELLOW_GREEN)\n        Write.append(cursor=cursor, text=\"Highlighting starts \")\n        pos = Write.get_position(cursor)\n        Write.append(cursor=cursor, text=\"here\", styles=[hl])\n        Write.append_para(cursor=cursor, text=\".\")\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Comparing CellObj Instances in Python\nDESCRIPTION: Demonstrates comparison operations between CellObj instances and strings. Shows equality, inequality and relational comparisons based on sheet index, row and column.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/cell_obj.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.cell_obj import CellObj\n\nb2 = CellObj.from_cell(\"B2\")\nb2\nCellObj(col='B', row=2, sheet_idx=-1)\n\nb4 = CellObj(\"b\", 4)\nb4 == b2\nFalse\n\nb4 != b2 \nTrue\n\nb4 == \"b4\"\nTrue\n\nb4 == \"B4\" \nTrue\n\nb4 > b2\nTrue\n\nb2 < b4\nTrue\n\nc2 = CellObj.from_cell(\"C2\")\nc2 > b2\nTrue\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example with kwargs\nDESCRIPTION: Demonstrates an alternative structure of an EventArgsCallbackT callback function where the control source is accessed via kwargs. This allows for more flexibility in the callback signature.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_fixed_text.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlFixedText, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example (kwargs)\nDESCRIPTION: Shows an alternative event callback format where the FormCtlComboBox instance is accessed from the kwargs dictionary. This approach can be useful when a simpler callback signature is desired or when the control source is not immediately needed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_combo_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlComboBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Configure Virtual Environment with oooenv\nDESCRIPTION: This command uses the `oooenv` package to configure the virtual environment to work with LibreOffice. It links the `uno.py` and `unohelper.py` files, which are necessary for interacting with the LibreOffice API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\noooenv cmd-link -a\n```\n\n----------------------------------------\n\nTITLE: Defining CommandDict Class in Python\nDESCRIPTION: A class for managing command dictionaries with automatic member handling and documentation support\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/common/command_dict.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass CommandDict\n```\n\n----------------------------------------\n\nTITLE: Multiplying and Dividing Column Objects in Python\nDESCRIPTION: Demonstrates multiplication and division operations between ColObj instances, integers, and strings (treated as column names). Attempting to create a negative ColObj results in an IndexError.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/col_obj.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.col_obj import ColObj\n>>>\n>>> b_col = ColObj(\"B\")\n>>> f_col = b_col * 3 # 2 X 3\n>>> f_col\nColObj(value='F') # col 6\n\n>>> f_col / 3 # 6 / 2\nColObj(value='B') # col 2\n\n>>> f_col / b_col # 6 / 2\nColObj(value='C') # col 3\n\n>>> f_col * b_col # 6 X 2\nColObj(value='L') # col 12\n\n>>> f_col * \"C\" # 6 X 3\nColObj(value='R') # col 18\n\n>>> f_col / \"C\"  # 6 / 3\nColObj(value='B') # col 2\n\n>>> f_col / 7 # 6 / 7\nIndexError\n```\n\n----------------------------------------\n\nTITLE: Including Paragraph in Line Numbering with Python OOO Dev Tools\nDESCRIPTION: Creates a LineNum object with a value of 0 to include the paragraph in the line numbering sequence without restarting the numbering. The paragraph will be counted in the document's normal line numbering sequence.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/outline_list.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nln = LineNum(0)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[ln])\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Pattern to Paragraph\nDESCRIPTION: Demonstrates how to apply a preset hatch pattern to a paragraph's background using the Hatch class and PresetHatchKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/hatch.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n# ... other code\nhatch_style = Hatch.from_preset(PresetHatchKind.YELLOW_45_DEGREES_CROSSED)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[hatch_style])\n```\n\n----------------------------------------\n\nTITLE: Adding Fill Color to Shape\nDESCRIPTION: Demonstrates how to add a fill color to a shape using the ShapeColor class. The example shows setting a light green color using the StandardColor enumeration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/color.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Color as ShapeColor\n# ... other code\n\nrec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\nstyle = ShapeColor(color=StandardColor.GREEN_LIGHT2)\nstyle.apply(rec)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Number Format from a Cell\nDESCRIPTION: This snippet demonstrates how to get the current number format applied to a cell.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/numbers.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = cell.style_numbers_numbers_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Documenting Color Return Type in Python\nDESCRIPTION: Demonstrates how to document a Color return type in a Python function using full namespace.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_fill_color(self) -> mColor.Color:\n    \"\"\"\n    Gets the fill color of a shape.\n\n    Args:\n        shape (XShape): Shape\n\n    Raises:\n        ColorError: If error occurs.\n\n    Returns:\n        ~ooodev.utils.color.Color: Color\n    \"\"\"\n    return mDraw.Draw.get_fill_color(self.component)  # type: ignore\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback without Control Source in Python\nDESCRIPTION: This snippet illustrates an alternate structure of an event callback function that does not explicitly include the control source among the parameters. Instead, the control can be retrieved from the keyword arguments, offering flexibility in handling events.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_date_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\\n    src: Any, event: EventArgs, *args, **kwargs\\n) -> None:\\n    # can get control from kwargs\\n    ctl = cast(CtlDateField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Importing Service from ooodev.loader.inst.service in Python\nDESCRIPTION: This code snippet demonstrates how to import the Service class from the recommended alternative module. It is provided as an example of the new usage pattern to replace the deprecated Class Service.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/inst/lo/service.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.inst.service import Service\n\n# other code\n```\n\n----------------------------------------\n\nTITLE: Running Auto Slide Show with Default Parameters in Linux/Mac\nDESCRIPTION: Command for running the auto slide show script with default parameters on Linux or Mac systems using a direct path to the script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Auto_Show/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Impress/Auto_Show/start.py\n```\n\n----------------------------------------\n\nTITLE: Creating Text Cursor for Cell\nDESCRIPTION: Demonstrates how to create and manipulate text cursor for a cell including adding text and hyperlinks.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\ndoc = CalcDoc.create_doc(visible=True)\nsheet = doc.sheets[0]\ncell = sheet[\"A1\"]\ncursor = cell.create_text_cursor()\ncursor.append_para(\"Text in first line.\")\ncursor.append(\"And a \")\ncursor.add_hyperlink(\n    label=\"hyperlink\",\n    url_str=\"https://github.com/Amourspirit/python_ooo_dev_tools\",\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Transparency to a Specific Data Point in Python\nDESCRIPTION: Example showing how to apply gradient transparency to a specific data point in a chart series. This applies the gradient transparency to a single data point in the first series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/transparency.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(\n    chart_doc=chart_doc, series_idx=0, idx=-1, styles=[data_series_grad_transparency]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Document with Drop Caps\nDESCRIPTION: Sets up a Writer document and demonstrates basic drop caps implementation with socket connection and GUI manipulation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/drop_caps.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.office.write import Write\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.writer.direct.para.drop_caps import DropCaps, StyleCharKind\n\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\nwith Lo.Loader(Lo.ConnectSocket()):\n    doc = Write.create_doc()\n    GUI.set_visible(True, doc)\n    Lo.delay(500)\n    GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n    cursor = Write.get_cursor(doc)\n    dc = DropCaps(count=1)\n    Write.append_para(cursor=cursor, text=p_txt, styles=[dc])\n\n    Lo.delay(1_000)\n    Lo.close_doc(doc)\nreturn 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart Legend Transparency in Python with OOoDev\nDESCRIPTION: This code snippet demonstrates how to set up a Calc document, access a chart, and modify its legend's transparency using the style_area_transparency_transparency method. It handles the setup and execution of these modifications, including error handling for legends that may not exist.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BRICK,\n            width=1,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.GREEN_DARK4,\n                StandardColor.TEAL_LIGHT2,\n            ),\n        )\n        legend = chart_doc.first_diagram.get_legend()\n        if legend is None:\n            raise ValueError(\"Legend is None\")\n\n        _ = legend.style_area_color(StandardColor.GREEN_LIGHT2)\n        _ = legend.style_area_transparency_transparency(50)\n\n        f_style = legend.style_area_transparency_transparency_get()\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Running Draw Animation Example (Cross Platform)\nDESCRIPTION: Command to run the animation example from the current example folder using Python's module execution syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Animate_Bike/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Draw Page Count Example\nDESCRIPTION: Simple example showing how to get the count of draw pages in a document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nprint(f'No of draw pages: {Draw.get_slides_count(doc)}')\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback with Access to Control through kwargs in Python\nDESCRIPTION: This code snippet demonstrates another format for defining an event callback function, where the control can be accessed from the kwargs argument, allowing for flexibility in handling events.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_hyperlink_fixed.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n        # can get control from kwargs\n        ctl = cast(CtlHyperlinkFixed, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Documenting Chart2 Data Series Options Module in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate documentation for the ooodev.format.chart2.direct.series.data_series.options module. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.series.data_series.options.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.series.data_series.options\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart Formatting Environment in Python\nDESCRIPTION: Basic setup for a chart formatting example that includes necessary imports, opening a document, and applying chart background formatting before setting the title font.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.title.font import FontOnly as TitleFontOnly\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_flat_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.PURPLE_DARK1, width=0.7)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.BLUE_DARK1, StandardColor.PURPLE_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        title_font = TitleFontOnly(name=\"Lucida Calligraphy\", size=14, font_style=\"italic\")\n        Chart2.style_title(chart_doc=chart_doc, styles=[title_font])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Style from Existing Document\nDESCRIPTION: Shows how to retrieve an existing font style from a document using the from_style method of the FontOnly class. Demonstrates extracting font properties from a specific paragraph style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf_style = FontOnly.from_style(\n    doc=doc.component, style_name=StyleParaKind.STANDARD\n)\nassert f_style.prop_style_name == str(StyleParaKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Background Color Style\nDESCRIPTION: Retrieves the existing header background color style from a Calc document using the from_style method\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/background.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = HeaderColor.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Align Right Position Setting Width Directly in Python\nDESCRIPTION: This snippet configures the width of a table positioned at the right using the 'style_direct' approach post-addition through a cursor. Essential components include 'CommonColor', 'TableAlignKind', 'UnitMM', and 'Intensity', focusing on width adjustment while holding alignment to the right with specific measurements.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=True,\n    align=TableAlignKind.RIGHT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    width=Intensity(40),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Fill Pattern\nDESCRIPTION: This snippet illustrates how to retrieve the fill pattern applied to a shape using the from_obj method of the ShapePattern class. The method takes a shape object and returns the fill pattern applied to it, verifying that a pattern is indeed applied.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/pattern.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Pattern as ShapePattern\n# ... other code\n\n# get the pattern from the shape\nf_style = ShapePattern.from_obj(rec)\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: Applying Number Formatting to Secondary Y-Axis in Python\nDESCRIPTION: This code snippet demonstrates how to apply the same number formatting to the secondary Y-axis of a chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/numbers.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_y_axis2(chart_doc=chart_doc, styles=[num_style])\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Proofreader in Python\nDESCRIPTION: This snippet demonstrates how to load a proofreader service and use it to proof a sentence. It initializes a proofreader instance, performs proofing on a sample sentence, and prints the number of errors detected.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# load & use proof reader (Lightproof or LanguageTool\nproofreader = Write.load_proofreader()\nprint(\"Proofing...\")\nnum_errs = Write.proof_sentence(\"i dont have one one dogs.\", proofreader)\nprint(f\"No. of proofing errors: {num_errs}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Right) with Left Margin using style_direct in Python\nDESCRIPTION: Creates a table with right alignment and a specific left margin using the style_direct approach. Instead of setting width, this example sets the left margin in millimeters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    name=\"My_Table\",\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\ntable.style_direct.style_table_props(\n    relative=False,\n    align=TableAlignKind.RIGHT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    left=UnitMM(60.0),\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Page from Impress Document\nDESCRIPTION: This collection of snippets shows various methods of deleting a page from an Impress document: by index, by name, by ImpressPage object, or by XDrawPage object. Dependency: Requires the ImpressDoc class and a properly opened document. Deletes the specified page with no return value.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/impress_pages.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> doc = ImpressDoc.open_doc(\"test.odp\")\n>>> del doc.slides[0]\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> doc = ImpressDoc.open_doc(\"test.odp\")\n>>> del doc.slides[\"page1\"]\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> doc = ImpressDoc.open_doc(\"test.odp\")\n>>> slide = doc.slides[0]\n>>> del doc.slides[slide]\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> doc = ImpressDoc.open_doc(\"test.odp\")\n>>> slide = doc.slides[0]\n>>> del doc.slides[slide.component]\n```\n\n----------------------------------------\n\nTITLE: Linking Master Page to Slide\nDESCRIPTION: Sets a master page for a specific slide using the slide's index and the master page component\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndoc.get_slide(idx=2).set_master_page(master2.component)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Sphinx\nDESCRIPTION: This snippet uses the `automodule` directive within a Sphinx documentation context to automatically generate documentation for the `ooodev.adapter.beans.property_change_collection` module. The directives `:members:`, `:undoc-members:`, and `:show-inheritance:` control which parts of the module are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.beans.property_change_collection.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n\n.. automodule:: ooodev.adapter.beans.property_change_collection\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Hatch Style\nDESCRIPTION: Shows how to apply a preset hatch style to a document using the Hatch.from_preset method. Demonstrates using PresetHatchKind for style selection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/hatch.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle_modify = Hatch.from_preset(\n    preset=PresetHatchKind.GREEN_30_DEGREES,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\ndoc.apply_styles(style_modify)\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Transparency Gradient - Python\nDESCRIPTION: This snippet retrieves the transparency gradient style from an existing shape using the OOoDev library, demonstrating how to extract style information from a shape object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/transparency/gradient.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.shape.transparency import Gradient as ShapeGradient\\n# ... other code\\n\\n# get the style from the shape\\nf_style = ShapeGradient.from_obj(rect)\\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: Submodules Documentation with toctree\nDESCRIPTION: This snippet uses the `toctree` directive to create a table of contents for the submodules within the `ooodev.adapter.configuration` package. The `:maxdepth:` option controls the depth of the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.configuration.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.adapter.configuration.access_root_element_comp\n   ooodev.adapter.configuration.configuration_access_comp\n   ooodev.adapter.configuration.configuration_provider_comp\n   ooodev.adapter.configuration.configuration_update_access_comp\n   ooodev.adapter.configuration.default_provider_comp\n   ooodev.adapter.configuration.group_access_comp\n   ooodev.adapter.configuration.group_element_comp\n   ooodev.adapter.configuration.group_update_comp\n   ooodev.adapter.configuration.hierarchy_access_comp\n   ooodev.adapter.configuration.hierarchy_element_comp\n   ooodev.adapter.configuration.property_hierarchy_comp\n   ooodev.adapter.configuration.set_access_comp\n   ooodev.adapter.configuration.set_element_comp\n   ooodev.adapter.configuration.set_update_comp\n   ooodev.adapter.configuration.simple_set_access_comp\n   ooodev.adapter.configuration.simple_set_update_comp\n   ooodev.adapter.configuration.template_container_partial\n   ooodev.adapter.configuration.template_instance_partial\n   ooodev.adapter.configuration.the_default_provider_comp\n   ooodev.adapter.configuration.update_root_element_comp\n```\n\n----------------------------------------\n\nTITLE: Setting Data Series Label Border Line Properties\nDESCRIPTION: This code snippet shows how to set the border line style for the data labels of a chart in OpenOffice Calc. It specifies properties such as color and width using the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds.style_label_border_line(\n    color=StandardColor.MAGENTA_DARK1,\n    width=0.75,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring UNO Access with OOOENV\nDESCRIPTION: Command to configure the virtual environment to use LibreOffice's uno.py and unohelper.py modules, which are required for UNO API access.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\noooenv cmd-link -a\n```\n\n----------------------------------------\n\nTITLE: Getting Calc Footer from Style\nDESCRIPTION: This snippet shows how to retrieve the footer style from a Calc document using `Footer.from_style()`. It retrieves the style associated with `CalcStylePageKind.DEFAULT` and asserts that the style name is correctly set.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/footer.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Footer.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Testing ooo-dev-tools Package in LibreOffice Writer\nDESCRIPTION: This code snippet demonstrates how to use the installed ooo-dev-tools package to append text to a LibreOffice Writer document. It imports necessary modules, defines a function to append 'Hello World!', and executes the function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_install_pkg_zaz_pip.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.write import WriteDoc\n\ndef say_hello():\n    doc = WriteDoc.from_current_doc()\n    cursor = doc.get_cursor()\n    cursor.append_para(text=\"Hello World!\")\n\nsay_hello()\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Range in LibreOffice Calc\nDESCRIPTION: Demonstrates how to iterate over cells in a range sequence, printing each cell's reference.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfor cell in rng:\n    print(cell)\n```\n\n----------------------------------------\n\nTITLE: Defining BarKind Enum Class in Python\nDESCRIPTION: An enumeration class representing different kinds of menu bars or toolbars used in OpenOffice development tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/bar_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BarKind\n```\n\n----------------------------------------\n\nTITLE: LibreOffice FlatPak Automation Script in Python\nDESCRIPTION: Complete Python script that demonstrates how to automate LibreOffice FlatPak. It connects to the FlatPak version of LibreOffice, creates a Calc document, writes 'Hello World' to cell A1, and handles document closure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport os\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.dialog.msgbox import (\n    MsgBox, MessageBoxType, MessageBoxButtonsEnum, MessageBoxResultsEnum\n)\n\n\ndef main():\n    display_str = f\"--display {os.getenv('DISPLAY', ':0')}\"\n    _ = Lo.load_office(\n        Lo.ConnectSocket(\n            soffice=\"flatpak run org.libreoffice.LibreOffice/x86_64/stable\",\n            extended_args=[display_str],\n        )\n    )\n    try:\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_sheet(doc, 0)\n        Calc.set_val(value=\"Hello World!\", sheet=sheet, cell_name=\"A1\")\n\n        msg_result = MsgBox.msgbox(\n            \"Do you wish to close document?\",\n            \"All done\",\n            boxtype=MessageBoxType.QUERYBOX,\n            buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n        )\n        if msg_result == MessageBoxResultsEnum.YES:\n            Lo.close_doc(doc=doc, deliver_ownership=True)\n            Lo.close_office()\n        else:\n            print(\"Keeping document open\")\n\n    except Exception:\n        Lo.close_office()\n        raise\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Document with Style Border Line\nDESCRIPTION: Main function to open a Calc document, access chart, and apply border line styling to chart area and wall\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart3d.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.PURPLE_DARK1,\n            width=0.7,\n        )\n\n        wall = chart_doc.first_diagram.wall\n        wall.style_border_line(\n            StandardColor.PURPLE_DARK1, width=0.8, transparency=20\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring LibreOffice Calc Menu Items in JSON\nDESCRIPTION: JSON structure defining menu items for LibreOffice Calc's formatting and annotation features. Includes configuration for cell styles, annotations, sparklines, and conditional formatting with UNO command mappings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/sample_normal_json.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"text\": \"Default Cell Styles\",\n    \"command\": \".uno:DefaultCellStylesmenu\",\n    \"style\": 2,\n    \"checked\": false,\n    \"enabled\": true,\n    \"default\": false,\n    \"help_command\": \"\",\n    \"help_text\": \"\",\n    \"tip_help_text\": \"\",\n    \"shortcut\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText automodule directive\nDESCRIPTION: This reStructuredText directive `automodule` instructs Sphinx to automatically generate documentation for the `ooodev.format.inner.partial.draw` module.  It includes the module's members, even undocumented ones, and shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.draw.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.draw\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining SizeObj Protocol in Python\nDESCRIPTION: A protocol class for standardizing size object behaviors and methods in UNO development contexts, supporting size-related operations and type checking\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/proto/size_obj.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SizeObj\n```\n\n----------------------------------------\n\nTITLE: Installing Pip in Cmd Shell\nDESCRIPTION: This command downloads and installs pip in the active virtual environment using Command Prompt. It's necessary for managing Python packages in the virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_8\n\nLANGUAGE: bat\nCODE:\n```\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && type get-pip.py | python.exe -\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version in APSO Console\nDESCRIPTION: Python code snippet showing how to check the Python version in LibreOffice's APSO console. This helps identify which Python version to use for the virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAPSO python console [LibreOffice]\n3.10.11 (main, Nov 10 2011, 15:00:00) [GCC 12.2.0]\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for WriteTextRange Class in reStructuredText\nDESCRIPTION: This snippet uses the autoclass directive to generate documentation for the WriteTextRange class. It includes all members, undocumented members, shows inheritance, and displays inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text_range.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.WriteTextRange\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing oooenv Package\nDESCRIPTION: Command to install the oooenv package in the virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install oooenv\n```\n\n----------------------------------------\n\nTITLE: RST Directive for WriteTextTableCursor Documentation\nDESCRIPTION: Sphinx autodoc directive that generates documentation for the WriteTextTableCursor class, including all members, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/write_text_table_cursor.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.table.write_text_table_cursor.WriteTextTableCursor\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: OfficeDocumentT Class Documentation using autoprotocol\nDESCRIPTION: This snippet uses autoprotocol to generate documentation for the OfficeDocumentT class, which is located in the ooodev.proto.office_document_t module.  The autoprotocol directive instructs the documentation generator to extract and present the API and structure of the specified class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/proto/office_document_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n.. autoprotocol:: ooodev.proto.office_document_t.OfficeDocumentT\n```\n\n----------------------------------------\n\nTITLE: Bypassing Git Hooks for Specific Commits\nDESCRIPTION: Uses the --no-verify flag to skip running Git hooks for certain commits where validation isn't needed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -n -m \"rename somefile.txt to myfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Windows Execution of Slide to Image Conversion\nDESCRIPTION: This PowerShell command demonstrates how to run the slide to image conversion script on Windows systems, specifying the full path to the script and required arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slide_to_Image/README.md#2025-04-16_snippet_3\n\nLANGUAGE: ps1\nCODE:\n```\npython .\\tests\\samples\\Impress\\Slide_to_Image\\start.py --file \"tests/fixtures/presentation/algs.ppt\" --out_fmt \"jpeg\" --idx 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Area Color from LibreOffice Writer Style\nDESCRIPTION: Retrieves the existing header area color style from a document page style. Uses the from_style static method to create a style object from the existing style in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = HeaderAreaColor.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Initializing CalcSheetId for LibreOffice Calc Sheet Management\nDESCRIPTION: A class designed to handle sheet identification and operations in LibreOffice Calc spreadsheets. Provides methods for working with sheet references, likely offering functionality to retrieve, manipulate, or validate sheet identifiers.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_sheet_id.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CalcSheetId\n```\n\n----------------------------------------\n\nTITLE: Applying Default Borders to a Range in Python\nDESCRIPTION: This snippet demonstrates how to apply default borders to a range of cells using the `style_borders_default` method. It uses a cell range `B2:F6` and applies default borders with no additional styling required.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_rng = sheet.get_range(range_name=\"B2:F6\")\ncell_rng.style_borders_default()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Draw Indentation Settings in Python\nDESCRIPTION: Example of retrieving existing indentation settings from a Draw document style using the Indent.from_style method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/indent_space/indent.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf_style = Indent.from_style(\n    doc=doc.component,\n    style_name=style.prop_style_name,\n    style_family=style.prop_style_family_name\n)\nassert f_style is not None\nassert f_style.prop_style_name == str(FamilyGraphics.DEFAULT_DRAWING_STYLE)\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Copy Script on Linux/Mac\nDESCRIPTION: Command to execute the Impress slide copy utility on Linux or Mac systems using the direct path to the script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Copy_Slide/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Impress/Copy_Slide/start.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Styling Charts\nDESCRIPTION: Shows how to create and style a chart in Calc including setting titles and formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsheet = doc.sheets[0] # get the first sheet from the Calc doc\nrange_addr = sheet.rng(\"A2:B8\")\ntbl_chart = sheet.charts.insert_chart(\n    rng_obj=range_addr,\n    cell_name=\"C3\",\n    width=15,\n    height=11,\n    diagram_name=ChartTypes.Column.TEMPLATE_STACKED.COLUMN,\n)\nsheet[\"A1\"].goto()\n\nchart_doc = tbl_chart.chart_doc\n_ = chart_doc.set_title(sheet[\"A1\"].value)\n_ = chart_doc.axis_x.set_title(sheet[\"A2\"].value)\ny_axis_title = chart_doc.axis_y.set_title(sheet[\"B2\"].value)\ny_axis_title.style_orientation(angle=90)\nchart_doc.style_border_line(color=CommonColor.DARK_BLUE, width=0.8)\n```\n\n----------------------------------------\n\nTITLE: Style Data Series Font in Python\nDESCRIPTION: This snippet demonstrates styling the font of a data series in a chart using the ooodev library. It sets the font name, size, and style for the first data series in the chart. Assumes existing chart document context.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/font_only.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nds = chart_doc.get_data_series()[0]\nds.style_font(name=\"Lucida Calligraphy\", size=14, font_style=\"italic\")\n```\n\n----------------------------------------\n\nTITLE: Retrieve Last Page with Negative Indexing in Python\nDESCRIPTION: Illustrates the use of negative indexing to get the last page of a draw document, employing the [-1] index. Assumes an instance of WriteDoc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/generic_draw_pages.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc(loader))\n>>> doc.draw_pages[-1]\n<ooodev.draw.GenericDrawPage object at 0x7f7f0c0b2b90>\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Line Properties in Python\nDESCRIPTION: Demonstrates how to create and apply line properties to a chart border. Creates a green border with 2.2 width and applies it to the chart background.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nchart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=2.2)\nChart2.style_background(chart_doc=chart_doc, styles=[chart_bdr_line])\n```\n\n----------------------------------------\n\nTITLE: Finding First Match in Calc with Python\nDESCRIPTION: This snippet demonstrates how to find the first occurrence of a search string in a defined cell range using the `XSearchable.findFirst()` method. It retrieves the first match and shows available services.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter26.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsrch = Lo.qi(XSearchable, cell_rng, True)\n# ...\no_first = srch.findFirst(sd)\nInfo.show_services(\"Find First\", o_first)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback for Numeric Field Control in Python\nDESCRIPTION: This snippet shows how to define an event callback function that can be used with a numeric field control. It demonstrates two formats for the callback, where 'control_src' can be accessed either directly or through keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_numeric_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbNumericField, *args, **kwargs\n) -> None:\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbNumericField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Documenting StrList Class with Sphinx in Python\nDESCRIPTION: This snippet shows the Sphinx documentation directive for the StrList class. It includes all members, undocumented members, inheritance, and specific special methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/string/str_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.utils.string.str_list.StrList\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __contains__, __iter__. __str__, __len__, __getitem__, __add__, __iadd__, __eq__, __reversed__\n```\n\n----------------------------------------\n\nTITLE: Starting LibreOffice FlatPak with Virtual Environment\nDESCRIPTION: This bash command uses a Python script to start LibreOffice FlatPak with the virtual environment's path automatically added to the Python path.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython office.py writer\n```\n\n----------------------------------------\n\nTITLE: Setting Border Sides for Page Footer\nDESCRIPTION: This snippet shows how to set border sides for a page footer. It creates a Side object with specific properties and applies it to all sides of the footer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/bordes.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nside = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\nsides_style = Sides(all=side, style_name=WriterStylePageKind.STANDARD)\nStyler.apply(doc, footer_style, sides_style)\n```\n\n----------------------------------------\n\nTITLE: Getting Border Shadow from a Page Style in Calc\nDESCRIPTION: Shows how to retrieve the border shadow configuration from an existing page style. This allows you to examine the current shadow settings before modifying them.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/bordes.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Shadow.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Loading Spell Checker - Python\nDESCRIPTION: Static method within the 'Write' class to load a spell checker instance. It uses LibreOffice's API to create a spell checker from the linguistic service manager, ensuring compatibility by avoiding certain problematic methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef load_spell_checker() -> XSpellChecker:\n    # lingo_mgr = Lo.create_instance_mcf(\n    #     XLinguServiceManager, \"com.sun.star.linguistic2.LinguServiceManager\", raise_err=True\n    # )\n    # return lingo_mgr.getSpellChecker()\n    speller = Lo.create_instance_mcf(\n        XSpellChecker,\n        \"com.sun.star.linguistic2.SpellChecker\",\n        raise_err=True\n        )\n    return speller\n```\n\n----------------------------------------\n\nTITLE: Accessing Control Source from Keyword Arguments in Python\nDESCRIPTION: This snippet shows how to retrieve a control source from keyword arguments within an event callback function. It utilizes Python’s casting mechanism to access the 'FormCtlCurrencyField' object from the 'kwargs' using 'control_src' as the key. Dependencies include the 'EventArgs' type and the 'FormCtlCurrencyField' class from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_currency_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlCurrencyField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Accessing Control from Keyword Arguments\nDESCRIPTION: This Python function demonstrates how to utilize the control source from the keyword arguments in an event callback. It casts the `control_src` from kwargs to a FormCtlGrid object to manipulate the grid control.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_grid.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlGrid, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Loop with Bridge Disposing Check\nDESCRIPTION: This code snippet demonstrates the implementation of the `main_loop` function, which continuously checks for document closure or bridge disposal events. If the bridge is disposed, it raises a `SystemExit` exception to terminate the Python script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"# in start.py\n        def main_loop() -> None:\n            dw = DocMonitor()\n\n            if len(sys.argv) > 1:\n                if str(sys.argv[1]).casefold() in (\"t\", \"true\", \"y\", \"yes\"):\n                    Lo.delay(3000)\n                    Lo.close_office()\n                    return\n\n            while 1:\n                if dw.closed is True:  # wait for windowClosed event to be raised\n                    print(\"\\nExiting by document close.\\n\")\n                    break\n                if dw.bridge_disposed is True:\n                    print(\"\\nExiting due to office bridge is gone\\n\")\n                    raise SystemExit(1)\n                time.sleep(0.1)\"\"\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Name Container Component\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the name_container_comp module. Includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.container.name_container_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.container.name_container_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch to Chart Wall\nDESCRIPTION: Applies a 45-degree blue hatch pattern to a chart wall using PresetHatchKind from the format preset module. Requires the ooodev library and a chart document instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_hatch import PresetHatchKind\n\n# ... other code\nwall = chart_doc.first_diagram.wall\nwall.style_area_hatch_from_preset(preset=PresetHatchKind.BLUE_45_DEGREES)\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting ooodev.format.impress.modify.area Package in Python\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate documentation for the ooodev.format.impress.modify.area package. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.impress.modify.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.impress.modify.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Line Properties to Y-Axis in Python\nDESCRIPTION: This snippet shows how to apply line properties to the Y-axis of a chart using the AxisLineProperties class and the Chart2.style_y_axis method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/line.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.axis.line import LineProperties as AxisLineProperties\n# ... other code\n\naxis_line_props = AxisLineProperties(color=StandardColor.TEAL, width=0.75)\nChart2.style_y_axis(chart_doc=chart_doc, styles=[axis_line_props])\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment\nDESCRIPTION: Command to activate the newly created virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: This code demonstrates the structure of an EventArgsCallbackT callback function for handling events related to FormCtlCheckBox. The callback function receives the event source, event arguments, and the FormCtlCheckBox control as a keyword argument.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_check_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlCheckBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Documents and Adding Controls in Python UNO\nDESCRIPTION: This code snippet demonstrates how to create documents using the WriteDoc class and add controls to forms in a multi-document environment using the LoContext context manager. Required dependencies include the ooodev.form, ooodev.write, and ooodev.utils.context packages. The snippet initializes two document instances and shows how to add control elements to the second document's form.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/forms.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.form import Forms\nfrom ooodev.write import WriteDoc\nfrom ooodev.utils.context.lo_context import LoContext\n\n# create first document\ndoc1  = WriteDoc.create_doc()\n\n# create a second document\nlo_inst = Lo.create_lo_instance()\ndoc2  = WriteDoc.create_doc(lo_inst=lo_inst)\n\n# ...\n\nwith LoContext(lo_inst=lo_inst):\n    # in this block all methods will automatically use\n    # the lo_inst of the second document.\n    # As soon as the LoContext block is exited, the context is\n    # restored to the first document.\n    # ...\n    Forms.add_control(\n        doc=doc2.component,\n        name=name,\n        label=\"Options\",\n        comp_kind=FormComponentKind.GROUP_BOX,\n        x=col2_x,\n        y=y,\n        width=box_width,\n        height=25,\n        styles=[font_colored],\n    )\n    # ...\n    props = Forms.add_list(\n        doc=doc2.component,\n        name=\"Fruits\",\n        entries=fruits,\n        x=x,\n        y=y,\n        width=width,\n        height=height,\n    )\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Linking UNO Libraries Bash\nDESCRIPTION: Uses 'oooenv' to auto-configure the virtual environment to use 'uno.py' and 'unohelper.py', which are needed to interact with the LibreOffice API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_poetry_env.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\noooenv cmd-link -a\n```\n\n----------------------------------------\n\nTITLE: Managing Cell and Range Controls\nDESCRIPTION: Demonstrates how to add and manipulate form controls in cells and ranges using CalcCellControls and CalcCellRangeControls.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.calc import CalcDoc\ndoc = CalcDoc.create_doc(visible=True)\nsheet = doc.sheets[0]\n\ncell = sheet[\"A1\"]\nchk = cell.control.insert_control_check_box(\"My CheckBox\", tri_state=False)\nassert chk is not None\n\ncell = sheet[\"A1\"]\nchk = cell.control.current_control\nassert chk is not None\n\ncell = sheet[\"B3\"]\nbtn = cell.control.insert_control_button(\"My Button\")\nassert btn is not None\n\ncell = sheet[\"B3\"]\nbtn = cell.control.current_control\n\nrng = sheet.get_range(range_name=\"b10:c12\")\nlist_box = rng.control.insert_control_list_box(entries=[\"D\", \"E\", \"F\"], drop_down=False)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Text Animation Properties\nDESCRIPTION: Demonstrates how to retrieve text animation properties from an existing shape using the from_obj() method of the ScrollBackForth class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/animation/animation.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.text.animation import ScrollBackForth\n# ... other code\n\nf_style = ScrollBackForth.from_obj(rect.component)\nassert f_style.prop_delay == 350\n```\n\n----------------------------------------\n\nTITLE: Accessing Form by Name in Writer Document\nDESCRIPTION: Demonstrates how to access a form using its name after creating it with a specific name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_forms.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc())\n>>> if len(doc.draw_page.forms) == 0:\n...    doc.draw_page.forms.add_form(\"MyForm\")\n>>> form = doc.draw_page.forms[\"MyForm\"]\n<ooodev.write.WriteForm object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: DataSource Class Definition\nDESCRIPTION: This snippet uses the autoclass directive to generate documentation for the DataSource class. It includes all members, inherited members, undocumented members, and inheritance information. This allows for a comprehensive view of the class structure and functionality.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/chart2/data/data_source.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.. autoclass:: ooodev.calc.chart2.data.data_source.DataSource\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with Control Source - Python\nDESCRIPTION: This code snippet demonstrates how to define an event callback function that receives the control source as a keyword argument. It is intended for use with hidden form controls using the ooodev library's FormCtlSubmitButton.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_submit_button.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlSubmitButton, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Secondary Y-Axis in Chart2 using Python\nDESCRIPTION: This snippet demonstrates how to apply the same font effects to the secondary Y-axis of a chart using the style_y_axis2 method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/font_effects.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_y_axis2(chart_doc=chart_doc, styles=[axis_font_effects])\n```\n\n----------------------------------------\n\nTITLE: Getting and Printing Calc Spreadsheet Array Data in Python\nDESCRIPTION: Demonstrates retrieving data from a Calc spreadsheet using get_array() method with a specified range (A1:E10) and printing it using print_array(). The output shows student grades with columns for student number, project score, midterm score, final score and total percentage.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/odev/21/formatter_table_ex_un_fmt.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Without Formatting\n>>> data = Calc.get_array(sheet=sheet, range_name=\"A1:E10\")\n>>> Calc.print_array(data)\n\nRow x Column size: 10 x 5\nStud. No.  Proj/20  Mid/35  Fin/45  Total%\n22001.0  16.4583333333333  30.9166666666667  37.0125  0.843875\n22028.0  11.875  23.0416666666667  25.4625  0.603791666666667\n22048.0  13.9583333333333  19.25  25.9875  0.591958333333333\n23715.0  12.0833333333333  18.6666666666667  20.475  0.51225\n23723.0  17.2916666666667  27.7083333333333  36.225  0.81225\n24277.0  0.0  16.0416666666667  19.6875  0.357291666666667\n  11.9444444444444  22.6041666666667  27.475  0.620236111111111\n  0.597222222222222  0.645833333333334  0.610555555555556\n  Proj/20  Mid/35  Fin/45  Total%\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.modify.write.page.header.area.color module\nDESCRIPTION: This snippet represents the automodule directive used in Sphinx documentation to generate documentation for the specified Python module. The directive extracts information such as members, inherited classes, and undocumented members to create comprehensive documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.page.header.area.color.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.page.header.area.color\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: KeyValArgs Class Definition\nDESCRIPTION: This snippet documents the `KeyValArgs` class using the `autoclass` directive.  It includes class members, undocumented members, inherited members, and shows the class inheritance. This is part of Sphinx documentation generation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/events/args/key_val_args.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n.. autoclass:: ooodev.events.args.key_val_args.KeyValArgs\n    :members:\n    :undoc-members:\n    :inherited-members:\n    :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Getting LibreOffice Python Version in Cmd Shell\nDESCRIPTION: This command retrieves the version of Python used by the installed LibreOffice using the Command Prompt. It's necessary to ensure compatibility when setting up the virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\n\"C:\\Program Files\\LibreOffice\\program\\python.exe\" --version\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for WriteTextFrames Class\nDESCRIPTION: ReStructuredText directive for auto-documenting the WriteTextFrames class. Includes configuration for documenting all members, undocumented members, inheritance, inherited members and specific special methods (__getitem__, __next__, __len__).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text_frames.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.WriteTextFrames\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __getitem__, __next__,  __len__\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Module Documentation Directive\nDESCRIPTION: Sphinx automodule directive for generating documentation for the UNO control numeric field component module\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_numeric_field_comp.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.uno_control_numeric_field_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for DialogTitle Class\nDESCRIPTION: RST directive configuring Sphinx autodoc extension to document the DialogTitle class from ooodev.utils.data_type.dialog_title module. Includes settings to show all members, undocumented members, inherited members and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/dialog_title.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.dialog_title.DialogTitle\n    :members:\n    :undoc-members:\n    :inherited-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying List Formatting with Custom CSS\nDESCRIPTION: Demonstrates how to use the ul-list CSS class to format unordered lists within seealso blocks for consistent styling of reference links.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_27\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n\n    .. cssclass:: ul-list\n\n        - :ref:`class_msg_box`\n        - :ref:`class_dialog_input`\n        - :ref:`dialog_tk_input`\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx TOC Tree Formatting\nDESCRIPTION: Sphinx toctree directive configuration that controls documentation structure and formatting. Sets up a table of contents with title-only display, maximum depth of 4 levels, and glob pattern matching for included files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/format/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 4\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Complete Script Output Demonstrating the Gallery Item Issue\nDESCRIPTION: The full console output from the start.py script that reproduces the bug. It shows the Drawing reference count of 0 and compares the item properties before and after being returned from the function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/gallery_issue/README.md#2025-04-16_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nLoading Office...\n\nresult.Drawing ref count: 0\n\nGallery item information:\n  URL: \"private:gallery/svdraw/dd2000\"\n  Fnm: Unable to compute due to URL conversion error\n  Path: Unable to compute due do URL conversion error\n  Title: \"Note-Gold\"\n  Type: drawing\n\nitem.Drawing type reported on function result <class 'NoneType'>\n\nGallery item information:\n  URL: Value is None\n  Fnm: Unable to compute due to no URL is None\n  Path: Unable to compute due do no URL is None\n  Title: \"TITLE NOT FOUND\"\n  Type: empty\nClosing Office\nOffice terminated\nOffice bridge has gone!!\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gradient Transparency Settings from a Page Style\nDESCRIPTION: Shows how to retrieve gradient transparency settings from an existing page style. The code uses the from_style static method to get the gradient configuration from the standard page style and verifies the style name property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/transparency.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Gradient.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Applying Highlight to Style in Python\nDESCRIPTION: This code snippet demonstrates how to apply a highlight to an existing style. It initializes a `Highlight` object with a specified color and style name, then applies it to the Writer document.  This snippet is extracted from a larger context and assumes a document `doc` is already open and ready for modification.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/highlight.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n\npara_hl_style = Highlight(color=StandardColor.YELLOW_LIGHT3, style_name=StyleParaKind.STANDARD)\npara_hl_style.apply(doc)\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Result Class with Sphinx in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the Result class. It includes all members, undocumented members, and specific special methods (__iter__, __eq__, __bool__, __repr__).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/result.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.result.Result\n    :members:\n    :undoc-members:\n    :special-members: __iter__, __eq__, __bool__, __repr__\n```\n\n----------------------------------------\n\nTITLE: Applying Line Properties to Chart Subtitle in Python\nDESCRIPTION: Code snippet showing how to apply border formatting to a chart subtitle using the Chart2.style_subtitle() method with a previously created TitleLineProperties object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_subtitle(chart_doc=chart_doc, styles=[title_border])\n```\n\n----------------------------------------\n\nTITLE: Importing Cell Properties Component Module\nDESCRIPTION: Module import directive for cell properties component in OpenOffice development tools, indicating documentation generation for members and inheritance\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.table.cell_properties_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.table.cell_properties_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteParagraphs Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the WriteParagraphs class. It includes all members, undocumented members, inherited members, and the special __next__ method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_paragraphs.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.WriteParagraphs\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __next__\n```\n\n----------------------------------------\n\nTITLE: Setting Breaks for Paragraph Style (Python)\nDESCRIPTION: Demonstrates how to set break options such as page breaks before a paragraph for the Standard paragraph style using the Breaks class. It also specifies the page style to use after the break.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/text_flow.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npara_break_style = Breaks(\n    type=BreakType.PAGE_BEFORE, style=\"Right Page\", style_name=StyleParaKind.STANDARD\n)\npara_break_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Reporting Draw Shapes in a Document\nDESCRIPTION: This snippet retrieves and reports the shapes found within a specified draw page in a LibreOffice document, printing the count and positions of each shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# code fragment from extract_graphics.py\n# report on shapes in the doc\ndraw_page = text_doc.get_draw_page()\nshapes = Draw.get_shapes(draw_page.component)\nif shapes:\n    print()\n    print(f\"No. of draw shapes: {len(shapes)}\")\n\n    for shape in shapes:\n        Draw.report_pos_size(shape)\n    print()\n```\n\n----------------------------------------\n\nTITLE: Get Number of Pages with len() in Python\nDESCRIPTION: Demonstrates how to use the built-in len() function to obtain the number of pages in a draw document. Prerequisite is an instance of WriteDoc with a created document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/generic_draw_pages.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc(loader))\n>>> len(doc.draw_pages)\n1\n```\n\n----------------------------------------\n\nTITLE: Applying Color to Chart Subtitle in Python\nDESCRIPTION: This code snippet demonstrates how to access a chart subtitle and apply a specific background color to it using the `style_area_color` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        sub_title = chart_doc.first_diagram.get_title()\n        if sub_title is None:\n            raise ValueError(\"Title not found\")\n\n        sub_title.style_area_color(StandardColor.DEFAULT_BLUE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart2 Data Labels Example with OOO Dev Tools in Python\nDESCRIPTION: General setup for Chart2 data labels examples. Opens a Calc document, applies gradient and transparency styling to a chart, and demonstrates basic data label formatting with text attributes and number formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import PercentFormat\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import TextAttribs\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import NumberFormatIndexEnum\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.wall.transparency import Transparency as WallTransparency\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_LIGHT3, width=0.7)\n        chart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.NEON_LIGHT)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        wall_transparency = WallTransparency(value=60)\n        Chart2.style_wall(chart_doc=chart_doc, styles=[wall_transparency])\n\n        text_attribs = TextAttribs(show_number=True)\n        format_number = NumberFormat(\n            chart_doc=chart_doc,\n            source_format=False,\n            num_format_index=NumberFormatIndexEnum.CURRENCY_1000DEC2,\n        )\n        Chart2.style_data_series(chart_doc=chart_doc, styles=[text_attribs, format_number])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Templates from Chart Document in Python\nDESCRIPTION: Static method in Chart2 class that retrieves a list of available chart templates by querying an existing chart document. It uses the chart's type manager and returns template names as a sorted list of strings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@staticmethod\ndef get_chart_templates(chart_doc: XChartDocument) -> List[str]:\n    try:\n        ct_man = chart_doc.getChartTypeManager()\n        return Info.get_available_services(ct_man)\n    except Exception as e:\n        raise ChartError(\"Error getting chart templates\") from e\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for GlobalViewDispatch class\nDESCRIPTION: Sphinx directive that automatically generates class documentation from docstrings for the GlobalViewDispatch class in the ooodev.utils.dispatch.global_view_dispatch module. The directive includes all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/dispatch/global_view_dispatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.dispatch.global_view_dispatch.GlobalViewDispatch\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for Writer Page Footer Area Module\nDESCRIPTION: A reStructuredText directive for Sphinx that configures the auto-documentation of the ooodev.format.writer.modify.page.footer.area module. The directive includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.page.footer.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.page.footer.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing ooo-dev-tools Package\nDESCRIPTION: Command to install the ooo-dev-tools package in the virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install ooo-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Setting Margins with Inches in Calc\nDESCRIPTION: This code snippet demonstrates setting Calc page margins using inches. It utilizes the `UnitInch` class to define margins in inches before applying them to the default page style using the `Margins` class. The `ooodev` library is used for interacting with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.calc.modify.page.page import Margins, CalcStylePageKind\n        from ooodev.units import UnitInch\n        # ... other code\n\n        style = Margins(\n            left=UnitInch(1.0),\n            right=UnitInch(1.0),\n            top=UnitInch(1.2),\n            bottom=UnitInch(0.75),\n            style_name=CalcStylePageKind.DEFAULT,\n        )\n        style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Order Style in Calc with Python\nDESCRIPTION: This example retrieves a previously applied page order style from a Calc document. It verifies the style's name using an assertion.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Order.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Disabling Menu Cache in LibreOffice\nDESCRIPTION: Shows how to disable the cache for a specific menu by setting its capacity to zero.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ni, command_menu = mb.find_item_menu_id(\"MyCommand\", True)\nif command_menu:\n    # turn cache off for menu\n    command_menu.cache.capacity = 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Document Type and Properties in LibreOffice with Python\nDESCRIPTION: This snippet retrieves the document type of a given file and displays its properties using methods from the Info and Props modules. It uses a BreakContext for managing the LibreOffice loader. The snippet requires the Lo, Info, and Props modules, as well as the args.fnm_doc argument containing the file name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n        with BreakContext(Lo.Loader(Lo.ConnectSocket(headless=True))) as loader:\n            fnm = args.fnm_doc\n            doc_type = Info.get_doc_type(fnm=fnm)\n            print(f\"Doc type: {doc_type}\")\n            Props.show_doc_type_props(doc_type)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with Control Source in Python\nDESCRIPTION: This Python snippet showcases how to define an event callback function for a form using a control source as part of the keyword arguments. It demonstrates obtaining a control instance within the callback for handling events related to radio button controls.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_radio_button.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlRadioButton, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Get the Last Form by Index\nDESCRIPTION: Demonstrates how to access the last form in a Calc sheet using a negative index (-1). The example checks if any forms exist and adds one if necessary. After ensuring at least one form is available, it retrieves the last form using index -1.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_forms.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> sheet = doc.sheets[0]\n>>> if len(sheet.draw_page.forms) == 0:\n...    sheet.draw_page.forms.add_form()\n>>> form = sheet.draw_page.forms[-1]\n<ooodev.calc.CalcForm object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Setup and Applying Corner and Caps Style in LibreOffice Draw (Python)\nDESCRIPTION: This snippet demonstrates how to set up a LibreOffice Draw document, create a rectangle shape, and apply corner and cap styles to it. It also shows how to retrieve and verify the applied styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/corner_caps.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.line import CornerCaps, LineJoint, LineCap\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 36\n        height = 36\n        x = round(width / 2)\n        y = round(height / 2)\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        style = CornerCaps(\n            corner_style=LineJoint.MIDDLE,\n            cap_style=LineCap.SQUARE,\n        )\n        style.apply(rect.component)\n\n        f_style = CornerCaps.from_obj(rect.component)\n        assert f_style is not None\n        assert f_style.prop_corner_style == LineJoint.MIDDLE\n        assert f_style.prop_cap_style == LineCap.SQUARE\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Casting Control Source from Event Callback in Python\nDESCRIPTION: This code snippet illustrates capturing and casting a control source keyword argument in a Python event callback for processing form-related events. The snippet provides a method to retrieve and typecast the control source into a FormCtlRadioButton instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_radio_button.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlRadioButton, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Impress Text Extraction\nDESCRIPTION: Example output showing the extracted text from a sample presentation file. The output includes loading messages, the extracted slide content, and termination messages, demonstrating the complete execution flow.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Extract_Text/README.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLoading Office...\nOpening /home/user/Projects/ooouno-dev-tools/tests/fixtures/presentation/algs.odp\n-----------------Text Content-----------------\nAn algorithm is a finite set of unambiguous instructions for solving a problem.\nAn algorithm is correct if on all legitimate inputs, it outputs the right answer in a finite amount of time\n\nCan be expressed as\npseudocode\nflow charts\ntext in a natural language (e.g. English)\ncomputer code\nWhat is a Algorithm?\nThe theoretical  study of how to solve  computational problems\nsorting a list of numbers\nfinding a shortest route on a map\nscheduling when to work on homework\nanswering web search queries\nand so on...\n\nAlgorithm Design\n\nTheir impact is broad and far-reaching.\nInternet. Web search, packet routing, distributed file sharing, ...\nBiology. Human genome project, protein folding, ...\nComputers. Circuit layout, file system, compilers, ...\nComputer graphics. Movies, video games, virtual reality, ...\nSecurity. Cell phones, e-commerce, voting machines, ...\nMultimedia. MP3, JPG, DivX, HDTV, face recognition, ...\nSocial networks.  Recommendations, news feeds, advertisements, ...\nPhysics. N-body simulation, particle collision simulation, ...\nThe Importance of Algorithms\nTen algorithms having \"the greatest influence on the development and practice of science and engineering in the 20th century\".\nDongarra and Sullivan\nTop Ten Algorithms of the Century\nComputing in Science and Engineering\nJanuary/February 2000\n\nBarry Cipra\nThe Best of the 20th Century: Editors Name Top 10 Algorithms\nSIAM News\nVolume 33, Number 4, May 2000\n<http://www.siam.org/pdf/news/637.pdf>\nThe Top 10 Algorithms of the 20th Century\n1946: The Metropolis (Monte Carlo) Algorithm.\nUses random processes to find answers to problems that are too complicated to solve exactly.\n\n1947: Simplex Method for Linear Programming.\nA fast technique for maximizing or minimizing a linear function of several variables, applicable to planning and decision-making.\n\n1950: Krylov Subspace Iteration Method.\nA technique for rapidly solving the linear equations that are common in scientific computation.\nWhat are the Top 10?\n1951: The Decompositional Approach to Matrix Computations. A collection of techniques for numerical linear algebra.\n\n1957: The Fortran Optimizing Compiler.\n\n1959: QR Algorithm for Computing Eigenvalues.\nA crucial matrix operation made swift and practical. Application areas include computer vision, vibration analysis, data analysis.\n\n1962: Quicksort Algorithm.\nWe will look at this.\n1965: Fast Fourier Transform (FFT). It breaks down waveforms (like sound) into periodic components. Used in many different areas (e.g. digital signal processing , solving partial differential equations, fast multiplication of large integers.)\n\n1977: Integer Relation Detection. A fast method for finding simple equations that explain collections of data.\n\n1987: Fast Multipole Method. Deals with the complexity of n-body calculations. It is applied in problems ranging from celestial mechanics to protein folding.\nIntroduction to Algorithms\nThomas Cormen, Charles Leiserson, Ronald Rivest, Clifford Stein\nMcGraw Hill, 2003, 2nd edition\nmathematical, advanced, the standard text\nnow up to version 3 (MIT)\n\nlots of resources online;\nsee video section\n\nBooks\ncontinued\n\nAlgorithms\nRobert Sedgewick, Kevin Wayne\nAddison-Wesley, 2011, 4th ed.\nimplementation (Java) and theory\nintermediate level\n\nData Structures and Algorithms in Java\nRobert Lafore\nSams Publishing, 2002, 2nd ed.\nJava examples; old\nbasic level; not much analysis\n\nAlgorithms Unlocked\nThomas H. Cormen\nMIT Press, March 2013\n\nNine Algorithms that Changed the Future\nJohn MacCormick\nPrinceton University Press, 2011\n<http://users.dickinson.edu/~jmac/9algorithms/>\nsearch engine indexing, pagerank, public key cryptography, error-correcting codes, pattern recognition, data compression, databases, digital signatures, computablity\nFun Overviews\n\nAlgorithmic Puzzles\nAnany Levitin, Maria Levitin\nOxford University Press, , 2011\n\nAlgorithmics: The Spirit of Computing\nDavid Harel, Yishai Feldman\nAddison-Wesley; 3 ed., 2004\n(and Springer, 2012)\n<http://www.wisdom.weizmann.ac.il/~harel/algorithmics.html>\n\nThe New Turing Omnibus: Sixty-Six\nExcursions in Computer Science\nA. K. Dewdney\nHolt, 1993\n66 short article; e.g. detecting primes, noncomputable functions, self-replicating computers, fractals, genetic algorithms, Newton-Raphson Method, viruses\n\n----------------------------------------------\nClosing the document\nClosing Office\nOffice terminated\nOffice bridge has gone!!\n```\n\n----------------------------------------\n\nTITLE: Adding Negative Numbers to RangeObj\nDESCRIPTION: Demonstrates how adding negative numbers removes rows from the end of range. Shows transformation from A10:C15 to A10:C10.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.range_obj import RangeObj\n\nrng1 = RangeObj(col_start=\"A\", col_end=\"C\", row_start=10, row_end=15, sheet_idx=0)\nstr(rng1)\n'A10:C15'\nrng1.row_count \n6\nrng2 = rng1 + -5\nstr(rng2)\n'A10:C10'\nrepr(rng2)\n\"RangeObj(col_start='A', col_end='C', row_start=10, row_end=10, sheet_idx=0)\"\nrng2.row_count\n1\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive for auto-documenting a Python module related to outline list styles in LibreOffice/OpenOffice development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.outline_list.list_style.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.outline_list.list_style\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Complete Main Function for Paragraph Transparency\nDESCRIPTION: Full implementation of a Python function demonstrating document creation, setting paragraph color and transparency, and document manipulation using LibreOffice and OOO Development Tools.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> int:\n    p_txt = (\n        |short_ptext|\n    )\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_100_PERCENT)\n        cursor = Write.get_cursor(doc)\n\n        color_style = Color(StandardColor.LIME)\n        t_style = Transparency(52)\n\n        Write.append_para(cursor=cursor, text=p_txt, styles=[color_style, t_style])\n\n        para_cursor = Write.get_paragraph_cursor(cursor)\n        para_cursor.gotoPreviousParagraph(False)\n        para_cursor.gotoEndOfParagraph(True)\n\n        text_para = cast(\"TextRangeContentProperties\", para_cursor)\n\n        para_t = Transparency.from_obj(text_para.TextParagraph)\n        assert para_t is not None\n\n        para_cursor.gotoEnd(False)\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Running Python Script for Bezier Curve Visualization\nDESCRIPTION: This Python command executes a script to visualize a Bezier curve. The script reads data from a file containing SVG path data, processes it, and generates a visual representation in LibreOffice. The command must be run in an environment with LibreOffice and the necessary Python bindings installed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\npython -m start 2\n```\n\n----------------------------------------\n\nTITLE: Applying background image to chart data series in Python\nDESCRIPTION: Shows how to apply a preset background image to a data series using the SeriesImg class with the from_preset method. Uses PresetImageKind enum to select a specific image.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.area import Img as SeriesImg\nfrom ooodev.format.chart2.direct.series.data_series.area import PresetImageKind\n# ... other code\n\ndata_series_img = SeriesImg.from_preset(chart_doc, PresetImageKind.POOL)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_series_img])\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Draw Pages in Python\nDESCRIPTION: Demonstrates how to get the number of draw pages in a Writer document using the len() function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_draw_pages.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc())\n>>> len(doc.draw_pages)\n1\n```\n\n----------------------------------------\n\nTITLE: Install Additional Packages Bash\nDESCRIPTION: Installs additional packages needed for LibreOffice development, such as 'ooo-dev-tools', in the virtual environment using Poetry.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_poetry_env.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry add ooo-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Converting View Cursor to Line Cursor\nDESCRIPTION: Code showing how to convert a text view cursor to a line cursor using Lo.qi interface querying.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntvc = Write.get_view_cursor(doc)\nline_cursor = Lo.qi(XLineCursor, tvc, True)\n```\n\n----------------------------------------\n\nTITLE: Documenting InitKind Class\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the InitKind class. It includes the class's members and also includes undocumented members. This ensures comprehensive documentation coverage.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/builder/init_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.builder.init_kind.InitKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with Control Source from kwargs - Python\nDESCRIPTION: This example shows an alternative way to access the control source from the kwargs dictionary in an event callback function. It assumes the use of the ooodev library and involves casting the control source to FormCtlSubmitButton.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_submit_button.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlSubmitButton, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Applying Percent Formatting to Chart Data Point in Python\nDESCRIPTION: This snippet shows how to apply percent formatting to a specific data point in a chart series using the Chart2.style_data_point method. It applies the same formatting as the previous example but to a single point.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(\n    chart_doc=chart_doc, series_idx=0, idx=3, styles=[text_attribs, format_percent]\n)\n```\n\n----------------------------------------\n\nTITLE: Running Main Application with Calc Styles in Python\nDESCRIPTION: This script sets up a main function to open a LibreOffice Calc document, apply a specific page style using the `Page` class, and manage the document's visibility and properties. It initializes necessary classes, sets values in cells, applies styles, and closes the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/page.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport uno\\nfrom ooodev.format.calc.style import Page, CalcStylePageKind\\nfrom ooodev.office.calc import Calc\\nfrom ooodev.gui import GUI\\nfrom ooodev.loader.lo import Lo\\n\\n\\ndef main() -> int:\\n    with Lo.Loader(connector=Lo.ConnectPipe()):\\n        doc = Calc.create_doc()\\n        GUI.set_visible(True, doc)\\n        Lo.delay(500)\\n        Calc.zoom_value(doc, 400)\\n\\n        sheet = Calc.get_active_sheet()\\n\\n        cell_obj = Calc.get_cell_obj(\"A1\")\\n        Calc.set_val(value=\"Hello\", sheet=sheet, cell_obj=cell_obj)\\n\\n        style = Page(name=CalcStylePageKind.REPORT)\\n        style.apply(sheet)\\n\\n        page_style = Page.from_obj(sheet)\\n        assert page_style.prop_name == str(CalcStylePageKind.REPORT)\\n\\n        Lo.delay(1_000)\\n        Lo.close_doc(doc)\\n    return 0\\n\\n\\nif __name__ == \"__main__\":\\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Outline List Module Contents\nDESCRIPTION: This section uses `automodule` to automatically generate documentation for the `ooodev.format.inner.direct.write.para.outline_list` module. It includes all members, shows undocumented members, and displays inheritance information, providing a comprehensive overview of the module's contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.outline_list.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\n.. automodule:: ooodev.format.inner.direct.write.para.outline_list\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Class Documentation Directive\nDESCRIPTION: Sphinx documentation directive for the ViewFixedText class showing class path and documentation options including inheritance and member visibility.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/view/view_fixed_text.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.dialog.dl_control.view.view_fixed_text.ViewFixedText\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Getting Border Padding from a Page Style in Calc\nDESCRIPTION: Shows how to retrieve the border padding configuration from an existing page style. This allows you to view the current padding settings before making any changes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/bordes.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Padding.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: ImpressDoc Class Definition\nDESCRIPTION: This reStructuredText snippet uses the autoclass directive to automatically generate documentation for the ImpressDoc class. The options include showing members, undocumented members, inheritance, and inherited members, which are used by Sphinx to create the class documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/impress_doc.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.draw.ImpressDoc\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Directive\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the name_replace_comp module, including all members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.container.name_replace_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.container.name_replace_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ChartShape Class Definition\nDESCRIPTION: This code snippet represents the documentation directive for the ChartShape class. It leverages the autoclass directive to automatically generate documentation from the class definition. The members, undoc-members, show-inheritance, and inherited-members options control which aspects of the class are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/chart2/chart_shape.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\n.. autoclass:: ooodev.calc.chart2.chart_shape.ChartShape\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n\n```\n\n----------------------------------------\n\nTITLE: Module Documentation for ooodev.format.inner.direct.write.frame.options.names\nDESCRIPTION: This snippet documents the Python module `ooodev.format.inner.direct.write.frame.options.names`. It uses the `automodule` directive to automatically generate documentation from the module's docstrings and code. The documentation includes members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.frame.options.names.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.frame.options.names\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc Module Documentation\nDESCRIPTION: Sphinx directive for automatically generating documentation from the exporter_partial module. Includes configuration for documenting all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.document.exporter_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.document.exporter_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Class Documentation Directive for WriteTextPortion\nDESCRIPTION: Sphinx restructuredText directive for auto-documenting the WriteTextPortion class including all members, undocumented members, inheritance information and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text_portion.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.WriteTextPortion\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Pages using len()\nDESCRIPTION: Demonstrates how to get the number of pages in a Draw document using the built-in `len()` function. This leverages the collection-like behavior of the `DrawPages` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_pages.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc.open_doc(\"test.odg\")\n>>> len(doc.slides)\n1\n```\n\n----------------------------------------\n\nTITLE: Autodoc for CancelEventArgs Class\nDESCRIPTION: This snippet uses the autoclass directive to generate documentation for the CancelEventArgs class. It includes class members, inherited members, undocumented members, and shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/events/args/cancel_event_args.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ooodev.events.args.cancel_event_args.CancelEventArgs\n    :members:\n    :undoc-members:\n    :inherited-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Password Dialog Implementation\nDESCRIPTION: Implementation of password dialog with fallback to tkinter if Office dialog fails.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_password(title: str, input_msg: str) -> str:\n    try:\n        result = Input.get_input(title=title, msg=input_msg, is_password=True)\n        return result\n    except Exception:\n        pass\n\n    try:\n        from ..dialog.tk_input import Window\n        pass_inst = Window(title=title, input_msg=input_msg, is_password=True)\n        return pass_inst.get_input()\n    except ImportError:\n        pass\n    raise Exception(\"Unable to access a GUI to create a password dialog box\")\n```\n\n----------------------------------------\n\nTITLE: Importing Named Range Component Module\nDESCRIPTION: Documentation directive for automatically generating module documentation using Sphinx autodoc extension, exposing module members, undocumented members, and inheritance details\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.sheet.named_range_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.sheet.named_range_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for GraphicArrowStyleKind\nDESCRIPTION: A Sphinx directive that automatically generates documentation for the GraphicArrowStyleKind class, including all its members and undocumented members from the ooodev.utils.kind.graphic_arrow_style_kind module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/graphic_arrow_style_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.graphic_arrow_style_kind.GraphicArrowStyleKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart2 and Setting Legend Position in Python\nDESCRIPTION: This snippet demonstrates the setup for creating a Chart2 object, styling its background, and setting the legend position. It imports necessary modules, opens a document, applies styles, and positions the legend.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/position.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.legend.position_size import (\n    Position as ChartLegendPosition,\n    LegendPosition,\n    DirectionModeKind,\n)\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BRICK, width=1)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.GREEN_DARK4, StandardColor.TEAL_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        legend_pos = ChartLegendPosition(\n            pos=LegendPosition.PAGE_END, no_overlap=True, mode=DirectionModeKind.LR_TB\n        )\n        Chart2.style_legend(chart_doc=chart_doc, styles=[legend_pos])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Accessing LibreOffice Shared Scripts Directory in Python\nDESCRIPTION: Static read-only property that returns the path to the LibreOffice shared scripts directory, such as 'C:\\Program Files\\LibreOffice\\share\\Scripts'. This is used for accessing shared script resources.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/session.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nSession.shared_scripts\n```\n\n----------------------------------------\n\nTITLE: Using Subprocess with OooDev LibreOffice\nDESCRIPTION: Shows how to create a main script that launches a LibreOffice instance and then spawns a subprocess that can interact with the same document. Includes environment setup for subprocess communication.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport logging\nimport sys\nimport os\nfrom pathlib import Path\nimport subprocess\nimport uno\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.loader.inst.options import Options\n\n\ndef main():\n\n    loader = Lo.load_office(connector=Lo.ConnectPipe(), opt=Options(log_level=logging.DEBUG))\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        # Start the subprocess\n        script_path = Path(__file__).parent / \"myscript.py\"\n        env = os.environ.copy()\n        env[\"PYTHONPATH\"] = get_paths()\n        proc = subprocess.Popen(\n            [sys.executable, str(script_path)],\n            stdin=subprocess.PIPE,\n            env=env,\n        )\n\n    finally:\n        doc.close()\n        Lo.close_office()\n\n\ndef get_paths() -> str:\n    pypath = \"\"\n    p_sep = \";\" if os.name == \"nt\" else \":\"\n    for d in sys.path:\n        pypath = pypath + d + p_sep\n    return pypath\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Data Point Border Line Properties\nDESCRIPTION: This snippet focuses on setting the border line style for a specific data point in a chart. It allows for customized presentation of individual points within the series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/borders.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndp = ds[2]\ndp.style_label_border_line(\n    color=StandardColor.MAGENTA_DARK1,\n    width=0.75,\n)\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example\nDESCRIPTION: Illustrates a sample event callback function that includes 'control_src' as a keyword argument. This function demonstrates one way to define an event handler for events triggered by the CtlFormattedField class, specifically showing how to access the control that raised the event.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_formatted_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlFormattedField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining EventArg with autonamedtuple\nDESCRIPTION: This snippet shows how the EventArg class is defined using the autonamedtuple directive. It's a named tuple likely used to pass arguments along with events in the ooodev library.  The directive autonamedtuple automatically generates documentation for named tuples.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/events/lo_events/event_arg.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autonamedtuple:: ooodev.events.lo_events.EventArg\n```\n\n----------------------------------------\n\nTITLE: CalcCellPropPartial Class Definition\nDESCRIPTION: This snippet shows the class definition of CalcCellPropPartial within the ooodev.calc.partial.calc_cell_prop_partial module. It uses the autoclass directive to automatically generate documentation for the class, including its members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/partial/calc_cell_prop_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n.. autoclass:: ooodev.calc.partial.calc_cell_prop_partial.CalcCellPropPartial\n    :members:\n    :undoc-members:\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bar Event Callback with Control Source Parameter\nDESCRIPTION: Example of event callback implementation that explicitly includes the control_src parameter of type CtlProgressBar. The callback receives the source, event args, control source and additional arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_progress_bar.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlProgressBar, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Showing Style Properties - Python\nDESCRIPTION: The code fragment calls the `show_props()` method to neatly print the properties of a specified style from the 'ParagraphStyles' family. This uses the properties obtained through the `get_style_props()` method to display relevant information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter06.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprops = Info.get_style_props(doc.component, \"ParagraphStyles\", \"Standard\")\nProps.show_props('ParagraphStyles \"Standard\"', props)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart2 Axis Font Formatting with Setup\nDESCRIPTION: Sets up the environment for chart formatting including imports and basic document handling. Creates a chart document and applies background styling before formatting the axis font.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.axis.font import FontOnly as AxisFontOnly\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange, Offset\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(Path.cwd() / \"tmp\" / \"bon_voyage.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"Object 1\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK2, width=0.9)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=0,\n            offset=Offset(41, 50),\n            style=GradientStyle.RADIAL,\n            grad_color=ColorRange(StandardColor.TEAL, StandardColor.YELLOW_DARK1),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        axis_font = AxisFontOnly(name=\"Lucida Calligraphy\", size=14, font_style=\"italic\")\n        Chart2.style_y_axis(chart_doc=chart_doc, styles=[axis_font])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Running Hilbert Curve Generation - Basic Usage\nDESCRIPTION: Basic command to generate a Hilbert curve with a specified level parameter. Level 4 is recommended, level 6 takes considerable time, and level 7 causes calculation errors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Draw_Hilbert/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m draw_hilbert 4\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback for Hidden Controls in Python\nDESCRIPTION: This code defines a callback function that is triggered by an event involving a hidden control. It demonstrates how to declare and utilize the control_src keyword argument, encapsulated in the args and kwargs parameters for further customization and use. Dependencies include the FormCtlHidden class from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_hidden_control.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlHidden, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Scroll Bar Event Callback in Python\nDESCRIPTION: This code snippet demonstrates how to define a callback function for scroll bar events using the FormCtlScrollBar class. It includes an interface for handling events triggered by the scroll bar, supporting an optional control source through keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_scroll_bar.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlScrollBar, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Show Example on Linux/Mac\nDESCRIPTION: Command to run the Impress slide show example script on Linux or macOS systems. This specifies the full path to the script from the project root.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slide_Show/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Impress/Slide_Show/start.py\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for background color module\nDESCRIPTION: Sphinx documentation directive for automatically generating module documentation for the background color modification module in Calc formatting tools.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.background.color.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.background.color\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Deleting a Draw Page by Index in Calc\nDESCRIPTION: Delete a draw page from the `SpreadsheetDrawPages` collection using the `del` keyword filtered by index. Requires an active `CalcDoc` instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/spreadsheet_draw_pages.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\n>>> # other code\n>>> del doc.draw_pages[0]\n```\n\n----------------------------------------\n\nTITLE: Setting up Text Orientation for Calc cells\nDESCRIPTION: This snippet shows the setup for modifying text orientation in LibreOffice Calc cells. It imports necessary modules and creates a document with rotated text that aligns to the inside edge.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/alignment.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.cell.alignment import TextOrientation\nfrom ooodev.format.calc.modify.cell.alignment import EdgeKind, StyleCellKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        style = TextOrientation(\n            vert_stack=False,\n            rotation=-10,\n            edge=EdgeKind.INSIDE,\n            style_name=StyleCellKind.DEFAULT,\n        )\n        style.apply(doc)\n\n        style_obj = TextOrientation.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\n        assert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.writer.modify.frame.area Package in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the ooodev.format.writer.modify.frame.area package. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.frame.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.frame.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Testing Pip Installation\nDESCRIPTION: Bash command to verify pip installation and version using the LibreOffice Python executable.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_lo_install_pip.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/python3 -m pip --version\n```\n\n----------------------------------------\n\nTITLE: Adding Controls to Forms using Python\nDESCRIPTION: The provided Python code snippet demonstrates how to add a button control to a form within a Writer document using the DrawForm class. It also shows how to attach an event handler to the button for action performed events. Required dependencies include the modules: Any, Draw, DrawDoc, EventArgs, and FormCtlButton. Inputs include the button's position, size, and label, while the output is a button added to the form with an attached event handler.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_form.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> from typing import Any\n>>> from ooodev.draw import Draw, DrawDoc\n>>> from ooodev.events.args.event_args import EventArgs\n>>> from ooodev.form.controls import FormCtlButton\n>>>\n>>> doc =DrawDoc(Draw.create_draw_doc())\n>>> doc.set_visible()\n>>> draw_page = doc.slides[0]\n>>> frm = draw_page.forms.add_form(\"MainForm\")\n>>> print(frm.name)\nMainForm\n>>> btn = frm.insert_control_button(x=10, y=10, width=40, height=10, label=\"Button Test\")\n>>> btn.add_event_action_performed(on_btn_action_preformed)\n>>>\n>>> def on_btn_action_preformed(\n...     src: Any, event: EventArgs, control_src: FormCtlButton, *args, **kwargs\n... ) -> None:\n...     print(\n...         f\"Action Performed: '{control_src.model.Label}', Control Name: {control_src.name}\"\n...     )\n```\n\n----------------------------------------\n\nTITLE: Output Details of Matching Words\nDESCRIPTION: This text output snippet shows the details of the word matching process. It includes the number of matches, the pages they were found on, and their character positions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nNo. of matches: 17\n  - found: 'pleasure'\n    - on page 1\n    - starting at char position: 85\n  - found: 'pleasure'\n    - on page 1\n    - starting at char position: 319\n  - found: 'pleasure'\n    - on page 1\n    - starting at char position: 350\n  - found: 'pleasure'\n    - on page 1\n    - starting at char position: 408\n  :\nFound 17 results for \"pleasure\"\nSearching for all occurrences of 'pain'\nNo. of matches: 15\n  - found: 'pain'\n    - on page 1\n    - starting at char position: 107\n  - found: 'pain'\n    - on page 1\n    - starting at char position: 548\n  - found: 'pain'\n    - on page 1\n    - starting at char position: 578\n  - found: 'pain'\n    - on page 1\n    - starting at char position: 647\n    :\nFound 15 results for \"pain\"\n```\n\n----------------------------------------\n\nTITLE: Removing Global Shortcut by Key Combination (Persistent) in Python\nDESCRIPTION: Removes a global shortcut by its key combination and persists the change. The shortcut will be permanently removed and won't reappear after restarting LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui.menu import Shortcuts\n# ...\nsc = Shortcuts()\nsc.remove_by_shortcut(\"Shift+Ctrl+Alt+A\", True)\n```\n\n----------------------------------------\n\nTITLE: Installing ooo-dev-tools Package\nDESCRIPTION: This command installs the ooo-dev-tools package in the virtual environment, which is likely a tool for LibreOffice development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\npython -m pip install ooo-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Finding Container Properties by Name in Python\nDESCRIPTION: This method iterates through an indexed container, looking for an element with a specific name. If found, it returns the XPropertySet; if not, it logs a failure message.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# in Lo class\n@classmethod\ndef find_container_props(cls, con: XIndexAccess, nm: str) -> XPropertySet | None:\n    if con is None:\n        raise TypeError(\"Container is null\")\n    for i in range(con.getCount()):\n        try:\n            el = con.getByIndex(i)\n            named = cls.qi(XNamed, el)\n            if named and named.getName() == nm:\n                return cls.qi(XPropertySet, el)\n        except Exception:\n            cls.print(f\"Could not access element {i}\")\n    cls.print(f\"Could not find a '{nm}' property set in the container\")\n    return None\n```\n\n----------------------------------------\n\nTITLE: Setting Hyphenation for Paragraph Style (Python)\nDESCRIPTION: Demonstrates how to set hyphenation options for the Standard paragraph style using the Hyphenation class. It enables automatic hyphenation and sets the minimum number of characters before and after a hyphen.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/text_flow.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npara_hy_style = Hyphenation(\n    auto=True, start_chars=3, end_chars=3, style_name=StyleParaKind.STANDARD\n)\npara_hy_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Automodule directive in Sphinx\nDESCRIPTION: This snippet utilizes the Sphinx 'automodule' directive to generate documentation for a Python module.  The directive includes options to display members, even undocumented ones, and to show the inheritance hierarchy of classes within the module. This allows for a comprehensive overview of the module's structure and functionality.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.page.header.area.color.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.page.header.area.color\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Italics Styler Example in Shell\nDESCRIPTION: This shell command executes the Italics Styler program with options to show a document and style specific words. It uses Python to apply styles to found words in the specified ODT file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter09.rst#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython start.py --show --file \"cicero_dummy.odt\" --word pleasure green --word pain red\n```\n\n----------------------------------------\n\nTITLE: Applying Diagonal Border to a Cell\nDESCRIPTION: This snippet utilizes the `diagonal_up` argument to apply a diagonal border to a cell, using the `Borders` class and a specified color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_obj = Calc.get_cell_obj(\"B2\")\nCalc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\ncell = Calc.get_cell(sheet, cell_obj)\nborders = Borders(diagonal_up=Side(color=CommonColor.RED))\nStyler.apply(cell, borders)\n```\n\n----------------------------------------\n\nTITLE: Defining Open Bezier Shape in XML\nDESCRIPTION: This XML code snippet defines an Open Bezier Shape using SVG path data. The 'M' operation specifies the starting point, and the 'C' operation defines a series of cubic Bezier curves. These operations are necessary for describing complex curves in LibreOffice. Ensure that the SVG path data reflects the intended curve design.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<g class=\"com.sun.star.drawing.OpenBezierShape\">\n    <g id=\"id3\">\n        <path fill=\"none\" stroke=\"rgb(0,0,0)\" d=\"M 5586,13954 C\n        5713,13954 4443,2905 8253,7477 12063,12049 8634,19415 15619,10906\n        22604,2397 11682,1381 10285,6334 8888,11287 21207,21447 8253,17002 -\n        4701,12557 11174,15986 11174,15986\"/>\n    </g>\n</g>\n```\n\n----------------------------------------\n\nTITLE: RST AutoModule Configuration\nDESCRIPTION: Configuration directive for automatic module documentation generation with settings for member inclusion and inheritance display.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.indent_space.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.indent_space\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Read-only Document Implementation Method\nDESCRIPTION: Class method implementation for opening read-only documents using Props.make_props to set document properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef open_readonly_doc(cls, fnm: PathOrStr, loader: XComponentLoader) -> XComponent:\n    return cls.open_doc(fnm, loader, Props.make_props(Hidden=True, ReadOnly=True))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Sides from Style\nDESCRIPTION: This snippet demonstrates how to retrieve the border sides configuration from an existing style in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/bordes.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Sides.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: CoordinateGeneral Class Documentation\nDESCRIPTION: This code snippet represents the documentation configuration for the CoordinateGeneral class using the Sphinx autodoc extension. The directives instruct Sphinx to include class members, inherited members, and to skip undocumented members when generating documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/chart2/coordinate/coordinate_general.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.calc.chart2.coordinate.coordinate_general.CoordinateGeneral\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directives for Document Event Broadcaster Module\nDESCRIPTION: Sphinx documentation configuration using automodule directive to generate API documentation for the document_event_broadcaster_partial module. Includes settings for documenting members, undocumented members and inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.document.document_event_broadcaster_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.document.document_event_broadcaster_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollBar Event Callback with Control Source in kwargs\nDESCRIPTION: Alternative event callback function definition that accesses the control source from kwargs. This pattern demonstrates how to retrieve the source control when using a more generic callback signature.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_scroll_bar.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlScrollBar, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Autoclass Documentation for RuleT\nDESCRIPTION: This snippet represents the auto-generated class documentation for the `RuleT` class within the `ooodev.dialog.search.tree_search` module. It includes details about the class's members, attributes, and methods as determined by the `autoclass` directive in Sphinx.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/search/tree_search/rule_proto.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.dialog.search.tree_search.RuleT\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.units.unit_factory\nDESCRIPTION: This reStructuredText directive automatically generates documentation for the `ooodev.units.unit_factory` Python module. It includes the module's members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/units/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.units.unit_factory\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation for ooodev.utils.paths in Python\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate documentation for the ooodev.utils.paths module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/paths.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.utils.paths\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: ChartDataSeries Class Definition\nDESCRIPTION: This code snippet shows the declaration of the ChartDataSeries class using the autoclass directive. The directive automatically generates documentation for the class including members, inherited members, and special methods such as __getitem__.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/chart2/chart_data_series.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ooodev.calc.chart2.chart_data_series.ChartDataSeries\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __getitem__\n```\n\n----------------------------------------\n\nTITLE: Finding Virtual Environment site-packages\nDESCRIPTION: This Python code demonstrates how to find the site-packages directory of the virtual environment, which is needed for configuring PYTHONPATH.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPython 3.10.6 (main, May 29 2023, 11:10:38) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> from pprint import pprint\n>>> pprint(sys.path)\n['',\n'/usr/lib/python310.zip',\n'/usr/lib/python3.10',\n'/usr/lib/python3.10/lib-dynload',\n'/home/guide/my-project/.venv/lib/python3.10/site-packages']\n>>> exit()\n```\n\n----------------------------------------\n\nTITLE: Set Text Spacing for Shape\nDESCRIPTION: Demonstrates how to set custom text spacing values for a shape using the TextSpacing class. Configures left, right, top, and bottom spacing values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text/spacing.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.text.text import Spacing as TextSpacing\n# ... other code\n\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n# ... other code\ntxt_spacing = TextSpacing(left=2.5, right=0.75, top=2.0, bottom=1.7)\ntxt_spacing.apply(rect.component)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for TableColumnSeparators\nDESCRIPTION: ReStructuredText directive for auto-documenting the TableColumnSeparators class, including its members, undocumented members, inheritance chain, and specific special methods for iteration and access.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/table_column_separators.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.table.table_column_separators.TableColumnSeparators\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __getitem__,  __iter__, __len__\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.writer.direct.para.alignment Module in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.writer.direct.para.alignment module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.para.alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.para.alignment\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Parsing Chart2 Axis Number Formatting Module\nDESCRIPTION: Sphinx documentation block for automatically generating module reference documentation for chart axis number formatting utilities\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.axis.numbers.numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.axis.numbers.numbers\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Font Style to Chart Subtitle Python\nDESCRIPTION: This snippet obtains the subtitle of a chart and sets its font style similarly to the title. It includes error handling if the subtitle is not found. This operation is dependent on existing chart structures.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/font_only.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n        sub_title = chart_doc.first_diagram.get_title()\n        if sub_title is None:\n            raise ValueError(\"Title not found\")\n\n        sub_title.style_font(\n            name=\"Lucida Calligraphy\",\n            size=14,\n            font_style=\"italic\",\n        )\n```\n\n----------------------------------------\n\nTITLE: Getting Writer Paragraph Tabs from Style\nDESCRIPTION: This code snippet shows how to retrieve paragraph tab settings from a specific style in a Writer document using the `Tabs.from_style` method.  It retrieves the tab settings from the 'Standard' paragraph style and asserts that the style name is correctly retrieved. It depends on an existing Writer document being open.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/tabs.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n\nstyle_obj = Tabs.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback Function in Python\nDESCRIPTION: This code snippet demonstrates how to define an event callback function in Python that interacts with a check box control in a dialog. The function handles events and takes in multiple parameters, including the control source as a keyword argument.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_check_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlCheckBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Floor Preset Image in Python\nDESCRIPTION: This snippet demonstrates how to apply a preset image to the background of a chart's floor using the `style_area_image_from_preset()` method and the `PresetImageKind` enum. It accesses the chart's floor and sets the image to `ICE_LIGHT`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_image import PresetImageKind\n\n# ... other code\nfloor = chart_doc.first_diagram.floor\nfloor.style_area_image_from_preset(preset=PresetImageKind.ICE_LIGHT)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Individual Data Point Label Border Line Style\nDESCRIPTION: Similar to retrieving series styles, this snippet retrieves the label border line style for a specific data point and confirms its existence using an assertion.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/borders.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nf_style = dp.style_label_border_line_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Get Form by Name\nDESCRIPTION: Shows how to access a form in a Draw page by its name using the `[]` operator. A new draw document is created, and a form named \"MyForm\" is added to the first slide if there are no forms. Then the form is accessed by its name. Requires the `DrawDoc` class and the `Draw` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_forms.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc(Draw.create_draw_doc())\n>>> draw_page = doc.slides[0]\n>>> if len(draw_page.forms) == 0:\n...   draw_page.forms.add_form(\"MyForm\")\n>>> form = draw_page.forms[\"MyForm\"]\n<ooodev.draw.DrawForm object at 0x7f8b1c0b4a90>\n```\n\n----------------------------------------\n\nTITLE: Documenting GuiPartialT Class in Python\nDESCRIPTION: This code snippet uses the autoprotocol directive to generate documentation for the LoInstPropsPartialT class, which is likely an abstract or partial implementation for GUI-related properties and methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/lo_inst_props_partial_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoprotocol:: ooodev.utils.partial.lo_inst_props_partial_t.LoInstPropsPartialT\n```\n\n----------------------------------------\n\nTITLE: Defining a reStructuredText Documentation Section with Table of Contents\nDESCRIPTION: Sets up a documentation section titled 'Chart2 Format Direct Series Labels' with a table of contents that includes all files in the current directory. The toctree directive is configured to show only titles and to include all files matching the glob pattern '*'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_chart2_format_direct_static_series_labels:\n\nChart2 Format Direct Series Labels\n==================================\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Tree Expansion Listener Module\nDESCRIPTION: Implements listener interfaces for tree expansion events in OpenOffice development environment\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.tree.rst#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nooodev.adapter.awt.tree.tree_expansion_listener\n```\n\n----------------------------------------\n\nTITLE: Searching for LibreOffice Components with loapi\nDESCRIPTION: Example of using the loapi comp command to search for components containing 'writer' in their names, showing how results are displayed with their full namespace paths and component types.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nloapi comp --search writer\nChoose an option (default 1):\n[0],  Cancel\n[1],  UnsupportedOverwriteRequest       - com.sun.star.task.UnsupportedOverwriteRequest           - exception\n[2],  LayerWriter                       - com.sun.star.configuration.backend.xml.LayerWriter      - service\n[3],  ManifestWriter                    - com.sun.star.packages.manifest.ManifestWriter           - service\n[4],  Writer                            - com.sun.star.xml.sax.Writer                             - service\n[5],  XCompatWriterDocProperties        - com.sun.star.document.XCompatWriterDocProperties        - interface\n[6],  XManifestWriter                   - com.sun.star.packages.manifest.XManifestWriter          - interface\n[7],  XSVGWriter                        - com.sun.star.svg.XSVGWriter                             - interface\n[8],  XWriter                           - com.sun.star.xml.sax.XWriter                            - interface\n```\n\n----------------------------------------\n\nTITLE: List Style Reset with Number Sequence\nDESCRIPTION: Shows how to reset list numbering and start a new numbered list sequence using the ListStyle class. Demonstrates controlling list numbering start point.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/outline_list.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith Lo.Loader(Lo.ConnectSocket()):\n    doc = Write.create_doc()\n    GUI.set_visible(True, doc)\n    Lo.delay(500)\n    GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n    cursor = Write.get_cursor(doc)\n    # set num_start -2 to force number restart.\n    ol = ListStyle(list_style=StyleListKind.NUM_123, num_start=-2)\n    # apply numbered list directly to cursor\n    ol.apply(cursor)\n    for i in range(1, 6):\n        Write.append_para(cursor=cursor, text=f\"Num Point {i}\")\n\n    # include line number to reset list number\n    ol = ListStyle(list_style=StyleListKind.NUM_123, num_start=1)\n    ol.apply(cursor)\n    for i in range(1, 6):\n        Write.append_para(cursor=cursor, text=f\"Num Point {i}\")\n\n    # reset cursor for next paragraph\n    ol.default.apply(cursor)\n    Write.append_para(cursor=cursor, text=p_txt)\n    Lo.delay(1_000)\n    Lo.close_doc(doc)\nreturn 0\n```\n\n----------------------------------------\n\nTITLE: Basic FileCache Usage in Python\nDESCRIPTION: Demonstrates basic usage of FileCache to store and retrieve data in LibreOffice tmp directory with a 300 second lifetime. The cache is stored at /tmp/ooo_uno_tmpl/my_tmp/tmp_data.pkl.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/file_cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.cache.singleton import FileCache\n\ncache = FileCache(tmp_dir=\"my_tmp\", lifetime=300)\n\ndata = get_json_data() # Get JSON data from somewhere as a dictionary\nfile_name = \"tmp_data.pkl\"\ncache[file_name] = data\nassert cache[file_name] == data\nif file_name in cache:\n    del cache[file_name]\n```\n\n----------------------------------------\n\nTITLE: Running Animation Demo on Cross-Platform\nDESCRIPTION: Command to run the animation demo from the current example folder on any operating system using Python's module execution syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Animation_Demo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: Demonstrates the structure of an EventArgsCallbackT callback function.  The callback function receives the event source, event arguments, and the database radio button control source as arguments. The example provides two variations of the callback function, one explicitly including control_src and another accessing it via kwargs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_radio_button.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbRadioButton, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Border Sides in Writer Document\nDESCRIPTION: This snippet demonstrates how to set border sides for a page in a Writer document. It creates a Side object with specific properties and applies it to all sides of the page.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/bordes.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nside = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\nsides_style = Sides(all=side, style_name=WriterStylePageKind.STANDARD)\nsides_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Creating Pivot Table Main Function in Python\nDESCRIPTION: Initializes LibreOffice, opens a document, creates a new sheet for the pivot table, and manages document lifecycle\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef main(self) -> None:\n    loader = Lo.load_office(Lo.ConnectSocket())\n\n    try:\n        doc = CalcDoc(Calc.open_doc(fnm=self._fnm, loader=loader))\n\n        doc.set_visible()\n\n        sheet = doc.get_sheet()\n        dp_sheet = doc.insert_sheet(name=\"Pivot Table\", idx=1)\n\n        self._create_pivot_table(sheet=sheet, dp_sheet=dp_sheet)\n        dp_sheet.set_active()\n\n        if self._out_fnm:\n            doc.save_doc(fnm=self._out_fnm)\n\n        msg_result = MsgBox.msgbox(\n            \"Do you wish to close document?\",\n            \"All done\",\n            boxtype=MessageBoxType.QUERYBOX,\n            buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\n        )\n        if msg_result == MessageBoxResultsEnum.YES:\n            doc.close_doc()\n            Lo.close_office()\n        else:\n            print(\"Keeping document open\")\n\n    except Exception:\n        Lo.close_office()\n        raise\n```\n\n----------------------------------------\n\nTITLE: Defining Scroll Bar Event Callback without Control Source in Python\nDESCRIPTION: This code snippet illustrates an alternative definition for a callback function where the control source is retrieved from the keyword arguments instead of being passed explicitly. It allows for greater flexibility in handling scroll bar events.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_scroll_bar.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlScrollBar, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Generator Script (Cross-Platform Python)\nDESCRIPTION: Executes the slide generator script using Python's module syntax, which is compatible across different platforms. This command should be run from the current example folder.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Points_Builder/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Auto-generating LoInst class documentation\nDESCRIPTION: This snippet uses the `autoclass` directive to automatically generate documentation for the `ooodev.loader.inst.LoInst` class. It includes all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/loader/inst/lo_inst.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.loader.inst.LoInst\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: Demonstrates the structure of an EventArgsCallbackT callback function, including access to the control source. Callbacks can either explicitly include `control_src` in the function signature or access it via keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_currency_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbCurrencyField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Impress Custom Slide Show on Windows\nDESCRIPTION: Command to run the custom slide show script with default slide indices on Windows systems using PowerShell.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Custom_Show/README.md#2025-04-16_snippet_3\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Impress\\Custom_Show\\start.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart2 and Setting Data Label Borders in Python\nDESCRIPTION: This snippet shows the setup for opening a Calc document, accessing a chart, and applying data label border styling to the chart series. It uses the Chart2 and LineProperties classes to set border color and width.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.series.data_labels.borders import LineProperties as LblLineProperties\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_LIGHT3, width=0.7)\n        chart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.TEAL_BLUE)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        data_lbl_border = LblLineProperties(color=StandardColor.MAGENTA_DARK1, width=0.75)\n        Chart2.style_data_series(chart_doc=chart_doc, styles=[data_lbl_border])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Creating LibreOffice Writer Document with Write Class\nDESCRIPTION: Demonstrates loading LibreOffice in headless mode, creating a Writer document using Write class, and saving it as a Word file\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/odev/02/create_save_tab.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> None:\n    loader = Lo.load_office(Lo.ConnectSocket(headless=True))\n    doc = Write.create_doc(loader=loader)\n\n    # use the Office API to manipulate doc...\n\n    Write.save_doc(doc, \"foo.docx\") # save as a Word file\n    Lo.close_doc(doc)\n    lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Setting up reST table of contents for Writer Format Direct Using Cursor documentation\nDESCRIPTION: This RST code creates a documentation page structure with a title and table of contents for Writer Format Direct Using Cursor functionality. The toctree directive is configured to show only titles, limit depth to 1 level, and include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/cursor/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_writer_format_direct_cursor_char:\n\nWriter Format Direct Using Cursor\n=================================\n\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Marking New Features with Version Added Directive\nDESCRIPTION: Shows how to indicate when new classes, functions, or modules were added using the versionadded directive to document version history.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_32\n\nLANGUAGE: rst\nCODE:\n```\n.. versionadded:: 0.10.4\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for WriteTextCursor Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the WriteTextCursor class from the ooodev.write module. It includes all members, undocumented members, shows inheritance, and displays inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text_cursor.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.WriteTextCursor\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing ooo-dev-tools with pip\nDESCRIPTION: Installs the ooo-dev-tools package via pip. This is done using LibreOffice's Python in PowerShell, with pip handling dependencies automatically. A successful installation lists installed packages and versions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_lo_install_pip.rst#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n>.\\python.exe -m pip install ooo-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Callback Without Explicit Control Source in Python\nDESCRIPTION: Illustrates a callback function setup where control_src is extracted from keyword arguments (kwargs). The function casts the retrieved control to a CtlTabPageContainer for further manipulation. Assumes necessary type handling and casting capabilities are in place. Primarily processes keyword arguments to access relevant control data, yielding no direct output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_tap_page_container.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlTabPageContainer, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for ooodev.format.writer.direct.page.header.area package\nDESCRIPTION: This reStructuredText code uses Sphinx's automodule directive to generate documentation for the ooodev.format.writer.direct.page.header.area package, including all members, undocumented members, and showing inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.page.header.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.page.header.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Using OooDev Command Line Help Tool\nDESCRIPTION: Example of using the OooDev CLI Help tool (odh) to search for documentation on the Write.append method. The tool displays matching results and allows the user to select an option to view detailed documentation in a web browser.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nodh hlp -s Write.append\n\nChoose an option (default 1):\n[0],  Cancel (or press q followed by enter)\n[1],  ooodev.office.write.Write.append                                 - method     - py\n[2],  ooodev.office.write.Write.append_date_time                       - method     - py\n[3],  ooodev.office.write.Write.append_line                            - method     - py\n[4],  ooodev.office.write.Write.append_para                            - method     - py\n```\n\n----------------------------------------\n\nTITLE: Combining Two Adjacent RowObj Ranges in Python\nDESCRIPTION: Demonstrates how to combine two adjacent row ranges using the '/' operator. The example combines C3:F6 with C1:F2 to create an expanded range C1:F6.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>>\n>>> rng1 = RangeObj(col_start=\"C\", col_end=\"F\", row_start=3, row_end=6, sheet_idx=0)\n>>> str(rng1)\n'C3:F6'\n>>> rng2 = RangeObj(col_start=\"C\", col_end=\"F\", row_start=1, row_end=2, sheet_idx=0)\n>>> str(rng2)\n'C1:F2'\n>>> rng3 = rng1 / rng2\n>>> str(rng3)\n'C1:F6'\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Series Border in Chart using Python\nDESCRIPTION: This code snippet focuses on styling the border of a chart's data series using the `style_border_line()` method. It is part of a larger script for chart manipulation in Calc, where the `MAGENTA_DARK1` color and a specific width are applied. This snippet requires the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nds = chart_doc.get_data_series()[0]\nds.style_border_line(\n    color=StandardColor.MAGENTA_DARK1,\n    width=0.75,\n)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.proto.font.highlight_t\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the `ooodev.format.proto.font.highlight_t` module. The directive includes options to show members, include undocumented members, and display inheritance information. The `automodule` directive is part of the Sphinx documentation generator.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.font.highlight_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.proto.font.highlight_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.modify.write.para.font.font_position Module\nDESCRIPTION: This module is part of the `ooodev` library and provides functionalities related to font positioning within a writer paragraph format. It is likely used for customizing the font position of paragraphs in LibreOffice/OpenOffice documents programmatically.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.para.font.font_position.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n \"\"\"ooodev.format.inner.modify.write.para.font.font_position module\n================================================================\n\n.. automodule:: ooodev.format.inner.modify.write.para.font.font_position\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: ChartDiagram Class Definition (reStructuredText)\nDESCRIPTION: This snippet shows how to use Sphinx's `autoclass` directive to generate documentation for the ChartDiagram class. It specifies that all members, undocumented members, inheritance, and inherited members should be included in the documentation. The class is located in the ooodev.calc.chart2.chart_diagram module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/chart2/chart_diagram.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.calc.chart2.chart_diagram.ChartDiagram\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting GraphicStyleKind Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the GraphicStyleKind class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/graphic_style_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.graphic_style_kind.GraphicStyleKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for global_document_comp Module\nDESCRIPTION: RestructuredText directive for auto-generating module documentation. Includes configurations to show all members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.document.global_document_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.document.global_document_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting GuiPartialT Class with Sphinx in Python\nDESCRIPTION: This snippet uses Sphinx's autoprotocol directive to generate documentation for the GuiPartialT class. The class is located in the ooodev.utils.partial.gui_partial_t module, which is part of a Python library for OpenOffice/LibreOffice development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/gui_partial_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoprotocol:: ooodev.utils.partial.gui_partial_t.GuiPartialT\n```\n\n----------------------------------------\n\nTITLE: Module Documentation Generation (Python)\nDESCRIPTION: Generates documentation for a Python module using the `automodule` directive. This includes listing members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.draw.shape.position_size.protect.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.draw.shape.position_size.protect\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RangePng Class Definition\nDESCRIPTION: This snippet provides the class definition for RangePng within the ooodev.calc.export module. The class is automatically documented, showcasing members, undocumented members, inheritance, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/export/range_png.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n \"\"\"\n.. autoclass:: ooodev.calc.export.range_png.RangePng\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Module Documentation Generation\nDESCRIPTION: This snippet uses the `automodule` directive in reStructuredText to automatically generate documentation for the `ooodev.format.writer.modify.page.page_style_base` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which aspects of the module are included in the generated documentation.  This snippet does not contain any Python code; rather, it is a configuration block for generating documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.page.page_style_base.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.page.page_style_base\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Callback with Control Source Retrieved from kwargs in Python\nDESCRIPTION: Illustrates an alternative callback format where the control source is extracted from the kwargs. This approach allows flexibility in managing event parameters and accessing specific control attributes within the event handling process.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_image.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlImage, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Command to create a Python virtual environment using the specific Python version that matches LibreOffice FlatPak's Python version.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/python3.10 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for WriteDocPropPartial Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the WriteDocPropPartial class. It includes all members of the class, including those that are not explicitly documented.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/partial/write_doc_prop_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.partial.write_doc_prop_partial.WriteDocPropPartial\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SysInfo Class with Sphinx in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the SysInfo class. It includes all members and undocumented members of the class from the ooodev.utils.sys_info module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/sys_info.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.sys_info.SysInfo\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Module Reference for Paragraph Alignment Module\nDESCRIPTION: This Sphinx documentation directive automatically generates documentation for the ooodev.format.writer.modify.para.alignment module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.para.alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.para.alignment\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.writer.modify.frame.options Module in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate comprehensive documentation for the ooodev.format.writer.modify.frame.options module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.frame.options.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.frame.options\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Block for MemCache Class\nDESCRIPTION: ReStructuredText directive for documenting the MemCache class from ooodev.utils.cache module. Includes configuration for displaying members, undocumented members, and special dictionary-like methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/mem_cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.cache.MemCache\n    :members:\n    :undoc-members:\n    :special-members: __setitem__, __getitem__, __delitem__, __contains__, __len__,\n```\n\n----------------------------------------\n\nTITLE: Importing Forms Module\nDESCRIPTION: Example showing the recommended import statement for the new Forms class from ooodev.form module that replaces the deprecated version.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/forms.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.form import Forms\n\n# other code\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Show Demo on Linux/Mac\nDESCRIPTION: Command to run the slide show demo with default parameters on Linux or Mac systems. Uses forward slashes for the file path.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Basic_Show/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Basic_Show/start.py\n```\n\n----------------------------------------\n\nTITLE: Setup and General Function for Calc Footer Background Examples in Python\nDESCRIPTION: Sets up the environment and provides a general function for running examples that modify Calc page footer backgrounds. The function creates a document, applies footer styles, and verifies the style properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/background.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format import Styler\nfrom ooodev.format.calc.modify.page.footer import Footer, CalcStylePageKind\nfrom ooodev.format.calc.modify.page.footer.area import Color as FooterColor\nfrom ooodev.format.calc.modify.page.footer.area import Img as FooterImg, PresetImageKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        footer_style = Footer(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=CalcStylePageKind.DEFAULT,\n        )\n        footer_color_style = FooterColor(\n            color=StandardColor.GREEN_LIGHT2, style_name=CalcStylePageKind.DEFAULT\n        )\n        Styler.apply(doc, footer_style, footer_color_style)\n\n        style_obj = FooterColor.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: FormatNamedEvent Class Definition\nDESCRIPTION: This snippet represents the class documentation for `FormatNamedEvent` within the `ooodev.events.format_named_event` module.  It indicates that all members are to be included and undocumented members are also to be included in the documentation build process.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/events/format_named_event.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n.. autoclass:: ooodev.events.format_named_event.FormatNamedEvent\n    :members:\n    :undoc-members:\n\n```\n\n----------------------------------------\n\nTITLE: Text Table Cursor Component Module Definition\nDESCRIPTION: Module definition for text table cursor component adapter in OpenOffice development tools. Provides documentation generation directives for the module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.text_table_cursor_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: ReStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.text.text_table_cursor_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating documentation for ooodev.format.draw.modify.area.hatch module\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.draw.modify.area.hatch module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.modify.area.hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.draw.modify.area.hatch\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.sheet.cell_range_referrer_partial Module\nDESCRIPTION: This code snippet is an auto-generated module documentation using `automodule` directive. The documentation includes members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.sheet.cell_range_referrer_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.sheet.cell_range_referrer_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Auto Command Value Configuration for PopupCreator\nDESCRIPTION: Shows how to configure a command entry using the built-in capability of the PopupCreator class to automatically retrieve command information using ModuleNamesKind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# auto command entry.\n{\"command\": \".uno:Cut\", \"module\": ModuleNamesKind.SPREADSHEET_DOCUMENT},\n```\n\n----------------------------------------\n\nTITLE: Removing Hyperlink from Writer Document\nDESCRIPTION: Demonstrates how to remove a hyperlink from a LibreOffice Writer document by applying empty styles at a specific cursor position.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/hyperlink.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n# ... other code\n\npos = Write.get_position(cursor)\n\n# ... other code\n\nWrite.style_left(cursor=cursor, pos=pos, styles=(hl.empty,))\n```\n\n----------------------------------------\n\nTITLE: Getting a Page by Index\nDESCRIPTION: Shows how to access a specific page in a Draw document by its index using the `[]` operator. This is similar to accessing elements in a list.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_pages.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc.open_doc(\"test.odg\")\n>>> doc.slides[0]\n<ooodev.draw.DrawPage object at 0x7f7f0c0b2b90>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Reference for GenericSize Class\nDESCRIPTION: ReStructuredText directive that creates a cross-reference anchor and auto-generates class documentation for the GenericSize class using Sphinx autodoc extension.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/generic_size.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _generic_size:\n\nClass GenericSize\n=================\n\n.. autoclass:: ooodev.utils.data_type.generic_size.GenericSize\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Selection Class in Python for ooodev.utils.selection\nDESCRIPTION: This snippet defines the Selection class within the ooodev.utils.selection module. It includes a special text_range_compare property that returns an XTextRangeCompare instance for comparison operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/selection.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Selection:\n    @property\n    def text_range_compare(self) -> XTextRangeCompare:\n        \"\"\"Static read-only property\n\n        Gets text range for comparison operations\n\n        :return: Text Range Compare instance\n        :rtype: XTextRangeCompare\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Generator Script (Linux/Mac)\nDESCRIPTION: Executes the slide generator script on Linux or Mac systems. The command uses a relative path to the script file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Points_Builder/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Points_Builder/start.py\n```\n\n----------------------------------------\n\nTITLE: Lo.ext_to_format Method\nDESCRIPTION: Maps a file extension to a suitable output format string for LibreOffice. The method uses a series of conditional statements to determine the appropriate format based on the extension and document type.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n        # in Lo class\n        @classmethod\n        def ext_to_format(cls, ext: str, doc_type: Lo.DocType = DocType.UNKNOWN) -> str:\n            dtype = cls.DocType(doc_type)\n            s = ext.lower()\n            if s == \"doc\":\n                return \"MS Word 97\"\n            elif s == \"docx\":\n                return \"Office Open XML Text\"  # MS Word 2007 XML\n            elif s == \"rtf\":\n                if dtype == cls.DocType.CALC:\n                    return \"Rich Text Format (StarCalc)\"\n                else:\n                    return \"Rich Text Format\"\n            elif s == \"odt\":\n                return \"writer8\"\n            elif s == \"ott\":\n                return \"writer8_template\"\n            elif s == \"pdf\":\n                if dtype == cls.DocType.WRITER:\n                    return \"writer_pdf_Export\"\n                elif dtype == cls.DocType.IMPRESS:\n                    return \"impress_pdf_Export\"\n                elif dtype == cls.DocType.DRAW:\n                    return \"draw_pdf_Export\"\n                elif dtype == cls.DocType.CALC:\n                    return \"calc_pdf_Export\"\n                elif dtype == cls.DocType.MATH:\n                    return \"math_pdf_Export\"\n                else:\n                    return \"writer_pdf_Export\"  # assume we are saving a writer doc\n```\n\n----------------------------------------\n\nTITLE: Accessing Draw Shapes with Type Information in Python\nDESCRIPTION: Shows how to access Draw shapes with proper type information using the shape factory. This example demonstrates retrieving the first shape from a document slide and identifying its type as a Rectangle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# doc is a DrawDoc instance in this case\n# The first shape added to the first slide of the document is a rectangle\n>>> shape = doc.slides[0][0]\n>>> shape.get_shape_type()\n\"com.sun.star.drawing.RectangleShape\"\n>>> shape\n<ooodev.draw.shapes.rectangle_shape.RectangleShape object at 0x7f9f87133ac0>\n```\n\n----------------------------------------\n\nTITLE: Using BreakContext with Lo.Loader in Python\nDESCRIPTION: This snippet demonstrates how to use BreakContext to wrap the Lo.Loader context manager. It attempts to open a document and raises BreakContext.Break if there's an error, allowing for clean termination of the office connection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/wrapper/break_context.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith BreakContext(Lo.Loader(Lo.ConnectSocket(headless=True))) as loader:\n\n    fnm = cast(str, args.file_path)\n\n    try:\n        doc = Lo.open_doc(fnm=fnm, loader=loader)\n    except Exception:\n        print(f\"Could not open '{fnm}'\")\n        raise BreakContext.Break\n```\n\n----------------------------------------\n\nTITLE: Setting Configured Linguistic Services in Python\nDESCRIPTION: This method sets the configured linguistic services for a given service type and implementation name. It's used to switch between different grammar checkers like LanguageTool and Lightproof.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef set_configured_services(\n    lingo_mgr: XLinguServiceManager2, service: str, impl_name: str, loc: Locale | None = None\n) -> bool:\n    cargs = CancelEventArgs(Write.set_configured_services.__qualname__)\n    cargs.event_data = {\n        \"lingo_mgr\": lingo_mgr,\n        \"service\": service,\n```\n\n----------------------------------------\n\nTITLE: Indicating Changed Features with Version Changed Directive\nDESCRIPTION: Shows how to document changes to existing functionality using the versionchanged directive to track modifications across versions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_33\n\nLANGUAGE: rst\nCODE:\n```\n.. versionchanged:: 0.12.4\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for WriteTextContent Class using Sphinx\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the WriteTextContent class. It includes all members, undocumented members, shows inheritance, and includes inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text_content.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.WriteTextContent\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Data Series Attribute Options\nDESCRIPTION: Configures the placement of data labels for an entire data series. This code uses the PlacementKind enum to position data labels inside their respective chart elements.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.direct.chart2.series.data_labels.data_labels.attrib_options import PlacementKind\n# ... other code\n\nds = chart_doc.get_data_series()[0]\nds.style_attribute_options(placement=PlacementKind.INSIDE)\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example 1\nDESCRIPTION: This is an example of an EventArgsCallbackT callback function that explicitly includes `control_src` as a keyword argument and type hints the `src` and `event` parameters. It demonstrates how to access the source control within an event handler.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_list_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlListBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Comparing RowObj Instances in Python\nDESCRIPTION: Demonstrates comparison operations between RowObj instances and integers including greater than, less than, equals, greater than or equal to, and less than or equal to operators.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/row_obj.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.row_obj import RowObj\n>>> r1 = RowObj.from_int(1)\n>>> r2 = RowObj(2)\n>>> r2 > r1\nTrue\n>>> r1 < r2\nTrue\n>>> r2 <= r2\nTrue\n>>> r2 >= r2\nTrue\n>>> r2 >= 2\nTrue\n>>> 2 <= r2\nTrue\n>>> r2 == 2\nTrue\n>>> 2 == r2\nTrue\n>>> r1 > r2\nFalse\n```\n\n----------------------------------------\n\nTITLE: Setting Writer Page Transparency\nDESCRIPTION: This code snippet applies a transparency style to a Writer page style. It first sets the page area color to red and then applies a transparency of 85% to that color. The order of application is important as the transparency is applied to the color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npage_style_kind = WriterStylePageKind.STANDARD\ncolor_style = PageAreaColor(color=StandardColor.RED, style_name=page_style_kind)\ntransparency_style = Transparency(value=85, style_name=page_style_kind)\nStyler.apply(doc, color_style, transparency_style)\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.table.table_border_struct_comp` module. It includes documentation for members, undocumented members, and class inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.table.table_border_struct_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.table.table_border_struct_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Command Data Structure in Python\nDESCRIPTION: Shows the structure of command data for .uno:Copy command including properties like label, hotkeys, and other metadata\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCmdData(\n    command='.uno:Copy',\n    label='Cop~y',\n    name='Copy',\n    popup=False,\n    properties=1,\n    popup_label='',\n    tooltip_label='',\n    target_url='',\n    is_experimental=False,\n    module_hotkey='',\n    global_hotkey='Ctrl+C'\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Export Implementation\nDESCRIPTION: Example of exporting popup menu configuration to JSON format\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    # ...\n    creator = PopupCreator()\n    menus = get_popup_menu()\n    json_str = creator.json_dumps(menus, dynamic=True)\n    with open(\"popup_menu.json\", \"w\") as f:\n        f.write(json_str)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Borders and Padding using style_direct in Python\nDESCRIPTION: This code snippet illustrates how to set table borders and padding using the `style_direct` property in OpenOffice Writer with Python and the ooodev library. It defines `Side` objects for the borders and a `Padding` object, and then applies them to the table using the `style_direct.style_borders` method. This provides a more concise way to define and apply border styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\nblue_side = Side(line=BorderLineKind.SOLID, color=StandardColor.BLUE_DARK2, width=LineSize.THICK)\ngreen_side = Side(line=BorderLineKind.SOLID, color=StandardColor.GREEN_DARK1, width=LineSize.THIN)\npadding = Padding(all=5)\ntable.style_direct.style_borders(\n    border_side=blue_side,\n    vertical=green_side,\n    horizontal=green_side,\n    padding=padding,\n)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the `ooodev.format.inner.partial.chart2.series.data_labels.data_labels.chart2_data_label_percent_format_partial` module. It includes members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.series.data_labels.data_labels.chart2_data_label_percent_format_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.chart2.series.data_labels.data_labels.chart2_data_label_percent_format_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Module Reference\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the ooodev.format.inner.direct.write.para.area.color module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.area.color.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.area.color\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: XML Structure of Shapes Menu in LibreOffice\nDESCRIPTION: Displays the XML structure of the Shapes menu from the menubar.xml configuration file, showing how menu items are defined.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/working_with_menu_app.rst#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<menu menu:id=\".uno:ShapesMenu\">\n    <menupopup>\n        <menu menu:id=\".uno:ShapesLineMenu\">\n            <menupopup>\n                <menuitem menu:id=\".uno:Line\" />\n                <menuitem menu:id=\".uno:Freeline_Unfilled\" />\n                <menuitem menu:id=\".uno:Freeline\" />\n                <menuitem menu:id=\".uno:Bezier_Unfilled\" />\n                <menuitem menu:id=\".uno:BezierFill\" />\n                <menuitem menu:id=\".uno:Polygon_Unfilled\" />\n                <menuitem menu:id=\".uno:Polygon_Diagonal_Unfilled\" />\n                <menuitem menu:id=\".uno:Polygon_Diagonal\" />\n            </menupopup>\n        </menu>\n        <menuitem menu:id=\".uno:BasicShapes\" />\n        <menuitem menu:id=\".uno:ArrowShapes\" />\n        <menuitem menu:id=\".uno:SymbolShapes\" />\n        <menuitem menu:id=\".uno:StarShapes\" />\n        <menuitem menu:id=\".uno:CalloutShapes\" />\n        <menuitem menu:id=\".uno:FlowChartShapes\" />\n    </menupopup>\n</menu>\n```\n\n----------------------------------------\n\nTITLE: Documenting FormComponentKind Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the FormComponentKind class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/form_component_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.form_component_kind.FormComponentKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.adapter.drawing.master_pages_comp\nDESCRIPTION: This code snippet shows the `automodule` directive used in Sphinx documentation to automatically generate documentation for the `ooodev.adapter.drawing.master_pages_comp` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options specify which aspects of the module to include in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.drawing.master_pages_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.drawing.master_pages_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Module Documentation\nDESCRIPTION: Sphinx documentation configuration showing the module structure and contents for paragraph tab formatting functionality.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.tabs.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.write.para.tabs.tabs\n\n.. automodule:: ooodev.format.inner.direct.write.para.tabs\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module with automodule\nDESCRIPTION: This snippet utilizes the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.adapter.drawing.group_shape_comp` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options specify the inclusion of module members, undocumented members, and inheritance information respectively.  This helps to produce comprehensive documentation for the specified Python module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.drawing.group_shape_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.drawing.group_shape_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment in PowerShell\nDESCRIPTION: This command activates the virtual environment in PowerShell, allowing you to use the isolated Python environment for LibreOffice development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n.\\.venv\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Documenting LanguageKind Class in Python\nDESCRIPTION: This snippet uses Sphinx autodoc directives to generate documentation for the LanguageKind class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/language_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.language_kind.LanguageKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting TLRUCache Class with Sphinx RST\nDESCRIPTION: Sphinx documentation directive for the TLRUCache class, including special methods for dictionary operations and general member functions. The directive specifies documentation for key special methods like __setitem__, __getitem__, __delitem__, __contains__, and __len__.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/tlru_cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.cache.TLRUCache\n    :members:\n    :undoc-members:\n    :special-members: __setitem__, __getitem__, __delitem__, __contains__, __len__,\n```\n\n----------------------------------------\n\nTITLE: Install python3.10-venv (if needed)\nDESCRIPTION: This command installs the `python3.10-venv` package if the previous command to create a virtual environment fails due to its absence.  This package provides the `venv` module, which is used to create virtual environments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3.10-venv\n```\n\n----------------------------------------\n\nTITLE: Applying Line Properties to X-Axis in Python\nDESCRIPTION: This snippet demonstrates how to apply line properties to the X-axis of a chart using the AxisLineProperties class and the Chart2.style_x_axis method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/line.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nChart2.style_x_axis(chart_doc=chart_doc, styles=[axis_line_props])\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Block for WriteTextFrame Class\nDESCRIPTION: Sphinx documentation directive block that generates API documentation for the WriteTextFrame class from the ooodev.write module. It includes all members, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text_frame.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.WriteTextFrame\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for ModuleNamesKind\nDESCRIPTION: Sphinx documentation directive that automatically generates class documentation for ModuleNamesKind class, including all members, undocumented members, and special methods __str__ and __int__.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/module_names_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.module_names_kind.ModuleNamesKind\n    :members:\n    :undoc-members:\n    :special-members: __str__, __int__\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ooodev.format.writer.direct.table.borders Package\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.writer.direct.table.borders package. It includes all members, undocumented members, and shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.table.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.table.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive Example\nDESCRIPTION: This snippet shows how to use Sphinx's `automodule` directive to automatically generate documentation for a Python module. The directive includes options to display members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.page.footer.border.shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.page.footer.border.shadow\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ViewState Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the ViewState class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/view_state.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.view_state.ViewState\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Gallery Class in reStructuredText\nDESCRIPTION: Sphinx documentation directive for auto-generating documentation for the Gallery class in the ooodev.utils.gallery module, including all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/gallery.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.gallery.Gallery\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Show Demo on Windows\nDESCRIPTION: Command to run the slide show demo with default parameters on Windows systems. Uses backslashes for the file path as is typical in PowerShell or Command Prompt.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Basic_Show/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Impress\\Basic_Show\\start.py\n```\n\n----------------------------------------\n\nTITLE: Setting Header Background Color in Calc\nDESCRIPTION: Applies a light green background color to the page header using the HeaderColor class and Styler utility\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/background.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nheader_color_style = HeaderColor(\n    color=StandardColor.GREEN_LIGHT2, \n    style_name=CalcStylePageKind.DEFAULT\n)\nStyler.apply(doc, header_style, header_color_style)\n```\n\n----------------------------------------\n\nTITLE: Applying Shadow to Shape\nDESCRIPTION: Shows how to apply shadow effects to a shape using the ShapeShadow class. Includes setting shadow location, blur, and color properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/shadow.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.shadow import Shadow as ShapeShadow\nfrom ooodev.format.draw.direct.shadow import ShadowLocationKind\n# ... other code\n\nrect = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\nstyle = ShapeShadow(\n    use_shadow=True,\n    location=ShadowLocationKind.BOTTOM_RIGHT,\n    blur=3,\n    color=StandardColor.GRAY_LIGHT2\n)\nstyle.apply(rect)\n```\n\n----------------------------------------\n\nTITLE: Sphinx RestructuredText Documentation for Arrow Styles Module\nDESCRIPTION: A Sphinx documentation directive that generates API documentation for the arrow_styles module. The directive includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.direct.line.arrow_styles.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.draw.direct.line.arrow_styles\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Python Module\nDESCRIPTION: RestructuredText directive for auto-generating module documentation using Sphinx. Includes member functions, undocumented members, and inheritance information for the transferable_supplier_partial module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.datatransfer.transferable_supplier_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.datatransfer.transferable_supplier_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python OOO Adapter Module\nDESCRIPTION: ReStructuredText documentation block for the ooodev.adapter.awt.focus_listener module, using Sphinx autodoc directives to generate API documentation\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.focus_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.focus_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RectangleShape Class Documentation using autoclass\nDESCRIPTION: This reStructuredText snippet uses the `autoclass` directive from Sphinx to automatically generate documentation for the `RectangleShape` class. It specifies options such as showing members, including undocumented members, displaying inheritance information, and including inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/shapes/rectangle_shape.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.draw.shapes.RectangleShape\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Using ImporterFile Context Manager in Python\nDESCRIPTION: This code snippet demonstrates how to use the `importer_file` context manager to import a module from a specified path, ensuring that resources are acquired and released properly. It defines a main function to load an office document, use the context manager to import a module, and handle cleanup in case of exceptions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/uno_helper/importer/importer_file.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.uno_helper.importer import importer_file\n\ndef main():\n    _ = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = None\n    try:\n        fnm = Path.cwd() / \"mods\"\n        doc = CalcDoc.create_doc()\n\n        with importer_file(fnm):\n            import big_worker\n\n        big_worker.work()\n\n        print(\"Done\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    finally:\n        if doc:\n            doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Transparency to Chart Floor in Python\nDESCRIPTION: Code snippet that demonstrates how to create a transparency effect for a chart floor. The code sets a 30% transparency value to make the floor partially transparent.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfloor_transparency = WallTransparency(value=30)\nChart2.style_floor(chart_doc=chart_doc, styles=[floor_transparency])\n```\n\n----------------------------------------\n\nTITLE: Running the Impress Slide Append Tool on Windows\nDESCRIPTION: Command to run the tool with default parameters on Windows systems. Uses Windows path format with backslashes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Append_Slides/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Impress\\Append_Slides\\start.py\n```\n\n----------------------------------------\n\nTITLE: Running Impress Custom Slide Show with Module Syntax\nDESCRIPTION: Cross-platform command to run the custom slide show script using Python's module syntax from the current example folder.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Custom_Show/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Size Class in RST\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the Size class from the ooodev.utils.data_type.size module. The directive includes all class members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/size.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.size.Size\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Setting Up Writer Document and Applying Page Area Color\nDESCRIPTION: This snippet demonstrates how to create a Writer document, set up the environment, and apply a color to the Page Area style. It also shows how to retrieve the applied style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.area import Color as PageAreaColor, WriterStylePageKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        color_style = PageAreaColor(\n            color=StandardColor.BLUE_LIGHT3, style_name=WriterStylePageKind.STANDARD\n        )\n        color_style.apply(doc)\n\n        style_obj = PageAreaColor.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Visualizing Format Namespace Structure using Mermaid Mindmap\nDESCRIPTION: This mermaid mindmap diagram represents the hierarchical structure of the format namespace in Python OOO Dev Tools. It shows the various formatting options available for different document elements, organized under writer categories of 'direct' and 'modify'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/ooodev/format/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    root((format))\n        writer\n            [direct]\n                 char\n                    highlight\n                        id{{Highlight}}\n                    hyperlink\n                        id{{Hyperlink}}\n                    borders\n                        id{{Border}}\n                        id{{Padding}}\n                        id{{Sides}}\n                        id{{Shadow}}\n                    font\n                        id{{Font}}\n                        id{{FontOnly}}\n                        id{{FontPosition}}\n                        id{{FontEffects}}\n                para\n                    indent_space\n                        id{{Indent}}\n                        id{{LineSpacing}}\n                        id{{Spacing}}\n                    alignment\n                        id{{Alignment}}\n                    text_flow\n                        id{{Breaks}}\n                        id{{FlowOptions}}\n                        id{{Hyphenation}}\n                    outline_list\n                        id{{Outline}}\n                        id{{LineNum}}\n                        id{{ListStyle}}\n                    tabs\n                        id{{Tabs}}\n                    drop_caps\n                        id{{DropCaps}}\n                    borders\n                        id{{Borders}}\n                        id{{Padding}}\n                        id{{Shadow}}\n                    area\n                        id{{Color}}\n                        id{{Gradient}}\n                        id{{Hatch}}\n                        id{{Img}}\n                        id{{Pattern}}\n                    transparency\n                        id{{Transparency}}\n                frame\n                    type\n                        id{{Anchor}}\n                        id{{Position}}\n                        id{{Size}}\n                    options\n                        id{{Align}}\n                        id{{Names}}\n                        id{{Properties}}\n                        id{{Protect}}\n                    wrap\n                        id{{Options}}\n                        id{{Settings}}\n                        id{{Spacing}}\n                    hyperlink\n                        id{{LinkTo}}\n                        id{{ImageMapOptions}}\n                    borders\n                        id{{Padding}}\n                        id{{Sides}}\n                        id{{Shadow}}\n                    area\n                        id{{Color}}\n                        id{{Gradient}}\n                        id{{Hatch}}\n                        id{{Img}}\n                        id{{Pattern}}\n                    transparency\n                        id{{Gradient}}\n                        id{{Transparency}}\n                shape\n                    area\n                        id{{Color}}\n                        id{{Gradient}}\n                        id{{Hatch}}\n                        id{{Img}}\n                        id{{Pattern}}\n                    shadow\n                        id{{Shadow}}\n                    transparency\n                        id{{Gradient}}\n                        id{{Transparency}}\n                image\n                    area\n                        id{{Color}}\n                        id{{Gradient}}\n                        id{{Hatch}}\n                        id{{Img}}\n                        id{{Pattern}}\n                    borders\n                        id{{Padding}}\n                        id{{Sides}}\n                        id{{Shadow}}\n                    type\n                        id{{Anchor}}\n                        id{{Position}}\n                        id{{Size}}\n                    options\n                        id{{Align}}\n                        id{{Names}}\n                        id{{Properties}}\n                        id{{Protect}}\n                    image\n                        id{{Flip}}\n                        id{{Rotation}}\n                    crop\n                        id{{ImageCrop}}\n                    wrap\n                        id{{Options}}\n                        id{{Settings}}\n                        id{{Spacing}}\n                    hyperlink\n                        id{{LinkTo}}\n                        id{{ImageMapOptions}}\n                    transparency\n                        id{{Gradient}}\n                        id{{Transparency}}\n                obj\n                    type\n                        id{{Anchor}}\n                        id{{Position}}\n                        id{{Size}}\n                    options\n                        id{{Align}}\n                        id{{Names}}\n                        id{{Properties}}\n                        id{{Protect}}\n                    wrap\n                        id{{Options}}\n                        id{{Settings}}\n                        id{{Spacing}}\n                    hyperlink\n                        id{{LinkTo}}\n                        id{{ImageMapOptions}}\n                    borders\n                        id{{Padding}}\n                        id{{Sides}}\n                        id{{Shadow}}\n                    area\n                        id{{Color}}\n                        id{{Gradient}}\n                        id{{Hatch}}\n                        id{{Img}}\n                        id{{Pattern}}\n                    transparency\n                        id{{Gradient}}\n                        id{{Transparency}}\n                table\n                    properties\n                        id{{TableProperties}}\n                    borders\n                        id{{borders}}\n                    background\n                        id{{Img}}\n            [modify]\n                page\n                    page\n                        id{{LayoutSettings}}\n                        id{{Margins}}\n                        id{{PaperFormat}}\n                    area\n                        id{{Color}}\n                        id{{Gradient}}\n                        id{{Hatch}}\n                        id{{Img}}\n                        id{{Pattern}}\n                    transparency\n                        id{{Gradient}}\n                        id{{Transparency}}\n                    header\n                        id{{Header}}\n                        area\n                            id{{Color}}\n                            id{{Gradient}}\n                            id{{Hatch}}\n                            id{{Img}}\n                            id{{Pattern}}\n                        borders\n                            id{{Padding}}\n                            id{{Shadow}}\n                            id{{Sides}}\n                        transparency\n                            id{{Gradient}}\n                            id{{Transparency}}\n                    footer\n                        id{{Footer}}\n                        area\n                            id{{Color}}\n                            id{{Gradient}}\n                            id{{Img}}\n                            id{{Hatch}}\n                            id{{Pattern}}\n                        borders\n                            id{{Padding}}\n                            id{{Shadow}}\n                            id{{Sides}}\n                        transparency\n                            id{{Gradient}}\n                            id{{Transparency}}\n                    borders\n                        id{{Padding}}\n                        id{{Sides}}\n                        id{{Shadow}}\n                frame\n                    type\n                        id{{Anchor}}\n                        id{{Position}}\n                        id{{Size}}\n                    options\n                        id{{Align}}\n                        id{{Protect}}\n                        id{{Properties}}\n                    wrap\n                        id{{Options}}\n                        id{{Settings}}\n                        id{{Spacing}}\n                    area\n                        id{{Color}}\n                        id{{Gradient}}\n                        id{{Img}}\n                        id{{Pattern}}\n                        id{{Hatch}}\n                    transparency\n                        id{{Gradient}}\n                        id{{Transparency}}\n                    borders\n                        id{{Padding}}\n                        id{{Sides}}\n                        id{{Shadow}}\n                para\n                    indent_space\n                        id{{Indent}}\n                        id{{LineSpacing}}\n                        id{{Spacing}}\n                    alignment\n                        id{{Alignment}}\n                    text_flow\n                        id{{Breaks}}\n                        id{{FlowOptions}}\n                        id{{Hyphenation}}\n                    font\n                        id{{FontOnly}}\n                        id{{FontPosition}}\n                        id{{FontEffects}}\n                    tabs\n                        id{{Tabs}}\n                    drop_caps\n                        id{{DropCaps}}\n                    area\n                        id{{Color}}\n                        id{{Gradient}}\n                        id{{Img}}\n                        id{{Pattern}}\n                        id{{Hatch}}\n                    borders\n                        id{{Borders}}\n                        id{{Padding}}\n                        id{{Sides}}\n                        id{{Shadow}}\n                    outline_list\n                        id{{Outline}}\n                        id{{LineNum}}\n                        id{{ListStyle}}\n                    transparency\n                        id{{Gradient}}\n                        id{{Transparency}}\n                    highlight\n                        id{{Highlight}}\n                char\n                    font\n                        id{{FontOnly}}\n                        id{{FontPosition}}\n                        id{{FontEffects}}\n                    highlight\n```\n\n----------------------------------------\n\nTITLE: Apply Style While Setting Array Values to Range in Calc\nDESCRIPTION: Illustrates setting an array of values and applying styles to a specified range in LibreOffice Calc using Python. The Calc.get_range_obj and Calc.set_array methods are employed to specify the range and values. Necessary elements include range identification through Calc and style designation through CellStyle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/static/cell.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle = CellStyle(name=StyleCellKind.ACCENT_1)\ncell_rng = Calc.get_range_obj(range_name=\"A1:B1\")\nCalc.set_array(values=[[101, 22]], sheet=sheet, range_obj=cell_rng, styles=[style])\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for RowStyler Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the RowStyler class. It includes all members, undocumented members, shows inheritance, and displays inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/direct/table/row_styler.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ooodev.write.style.direct.table.row_styler.RowStyler\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Running Draw Elements and Animate Script (Linux/Mac)\nDESCRIPTION: Command to run the Python script on Linux or Mac systems, specifying the full path to the script file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Draw_Picture/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Draw/Draw_Picture/start.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Range Documentation in reStructuredText\nDESCRIPTION: Sets up a table of contents (toctree) for organizing documentation related to working with ranges. The toctree is configured to show only titles, have a maximum depth of 4 levels, and include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 4\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paragraph Transparency in Python\nDESCRIPTION: Shows how to extract the transparency settings from a paragraph using paragraph cursor and TextRangeContentProperties. Demonstrates accessing paragraph transparency after setting it.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\n\ntext_para = cast(\"TextRangeContentProperties\", para_cursor)\n\npara_t = Transparency.from_obj(text_para.TextParagraph)\nassert para_t is not None\n```\n\n----------------------------------------\n\nTITLE: Running the script with specific document path in bash/shell\nDESCRIPTION: Command to run the script with a specific presentation document path as a parameter. This allows testing with the provided sample file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slides_Info/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython ./tests/samples/Impress/Slides_Info/start.py \"tests/fixtures/presentation/algs.odp\"\n```\n\n----------------------------------------\n\nTITLE: Tk Input Box Example\nDESCRIPTION: This code snippet demonstrates how to create a password input dialog using the `Window` class from the `ooodev.dialog.tk_input` module.  It initializes a `Window` instance with a title, input message, and password flag.  The `get_input()` method is then called to display the dialog and retrieve the user's input.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/tk_input.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.dialog.tk_input import Window\n\npass_inst = Window(title=\"Password\", input_msg=\"Input Password:\", is_password=True)\npwd = pass_inst.get_input()\nprint(pwd)\n```\n\n----------------------------------------\n\nTITLE: Handling Events with CtlComboBox Source - Python\nDESCRIPTION: This snippet provides an alternative way to define the `on_some_event` function, which allows the retrieval of the `CtlComboBox` control from `kwargs`. It illustrates a method to dynamically access control-specific data within event handlers.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_combo_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlComboBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation for WriteParagraphCursor in reStructuredText\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate comprehensive documentation for the WriteParagraphCursor class from the ooodev.write module. It includes all members, undocumented members, shows inheritance, and lists inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_paragraph_cursor.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.WriteParagraphCursor\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Specifying Python for Virtual Environment Bash\nDESCRIPTION: Configures Poetry to use a specific Python interpreter located at '/usr/bin/python3' for the virtual environment. This step ensures compatibility with the LibreOffice API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_poetry_env.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry env use /usr/bin/python3\n```\n\n----------------------------------------\n\nTITLE: Callback Function for Image Button\nDESCRIPTION: This Python snippet defines a callback function for handling events associated with Image Button controls. It shows how to include the control itself as a keyword argument, allowing it to be used within the function. No specific dependencies are required, but it assumes the existence of `EventArgs` and `FormCtlImageButton` in the context.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_image_button.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlImageButton, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Series Data Labels Font Module\nDESCRIPTION: Module documentation for handling font-related settings for chart series data labels using Python and LibreOffice development tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.series.data_labels.font.font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.series.data_labels.font.font_only\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running the Impress Slide Append Tool with Custom Files (Shell)\nDESCRIPTION: Command to run the tool with specific source and target presentation files. The first parameter is the slide show to append to, and all successive files are appended to it.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Append_Slides/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Append_Slides/start.py \"tests/fixtures/presentation/algs.odp\" \"tests/fixtures/presentation/points.odp\"\n```\n\n----------------------------------------\n\nTITLE: Setting Calc Cell Range Alignment Properties\nDESCRIPTION: This snippet demonstrates how to set text alignment properties for a Calc cell range using the `style_align_properties` method on a range object. It sets the `shrink_to_fit` property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/alignment.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n        rng = sheet.rng(\"A1:B1\")\n        sheet.set_array(\n            values=[[\"Hello World! See the Shine\", \"Sunny Days are great!\"]],\n            range_obj=rng\n        )\n        cell_rng = sheet.get_range(range_obj=rng)\n        cell_rng.style_align_properties(shrink_to_fit=True)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple CSS Classes for Complex Formatting\nDESCRIPTION: Shows how to combine multiple CSS classes (rst-collapse and bg-transparent) with a collapse directive that contains a figure with specific formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_26\n\nLANGUAGE: rst\nCODE:\n```\n.. cssclass:: rst-collapse bg-transparent\n\n    .. collapse:: Demo\n        :open:\n\n        .. cssclass:: a_gif\n\n            .. _ch02fig_lo_qi_auto_demo:\n\n            .. figure:: https://somedomain.com/img.gif\n                :alt: Lo.qi autocomplete demo image\n                :figclass: align-center\n\n                : :py:meth:`.Lo.qi` autocomplete demo\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.ui Module Contents\nDESCRIPTION: This snippet represents the module contents of the `ooodev.adapter.ui` package. It uses `automodule` directive to include all members, undocumented members and inheritance information into the documentation. It serves to automatically generate API documentation for the module, listing its classes, functions, and variables.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.ui.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n.. automodule:: ooodev.adapter.ui\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Chart2 Series Gradient Transparency Module\nDESCRIPTION: Documentation directive for Python module exposing chart series gradient transparency configuration and inheritance details\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.series.data_series.transparent.gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.series.data_series.transparent.gradient\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Reference Link for XText Documentation\nDESCRIPTION: Creates a reStructuredText reference link definition for the XText interface documentation in the LibreOffice API. This allows referencing the XText documentation URL using the _XText: syntax throughout the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_14\n\nLANGUAGE: rst\nCODE:\n```\n.. _XText: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1text_1_1XText.html\n```\n\n----------------------------------------\n\nTITLE: Documenting IntensityRange Class with Sphinx\nDESCRIPTION: RestructuredText documentation directive for auto-generating class documentation using Sphinx. Targets the IntensityRange class and includes all its members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/intensity_range.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.intensity_range.IntensityRange\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Using Sphinx autoclass directive for ChartDiagramKind documentation\nDESCRIPTION: This snippet shows how to set up Sphinx documentation for the ChartDiagramKind class from the ooodev.utils.kind.chart_diagram_kind module. The directive includes all class members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/chart_diagram_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.chart_diagram_kind.ChartDiagramKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Sheets in Python\nDESCRIPTION: Retrieve the number of sheets in a Calc document using the len() function, which applies to the CalcSheets collection. The result is the count of sheets present.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_sheets.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = CalcDoc(Calc.create_doc(loader))\\n>>> len(doc.sheets)\\n1\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation for chart2\nDESCRIPTION: Generates documentation for the `ooodev.format.inner.partial.chart2` module. Includes module members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.chart2\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Using automodule directive in Sphinx for Chart2 Numbers package documentation\nDESCRIPTION: This snippet shows a Sphinx documentation directive that automatically generates API documentation for the ooodev.format.chart2.direct.general.numbers package, including all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.general.numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.general.numbers\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Column in Range\nDESCRIPTION: Demonstrates iteration over a specific column in a range using RangeObj.get_col() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nrng = RangeObj.from_range(\"A1:C4\")\nfor cell in rng.get_col(\"B\"):\n    print(cell)\n```\n\n----------------------------------------\n\nTITLE: Submodules: toctree directive\nDESCRIPTION: This code snippet is a Sphinx toctree directive. It's used to create a table of contents that includes links to the documentation pages for the specified submodules. `maxdepth` controls how many levels of headings are shown in the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.general_style.text.rst#2025-04-16_snippet_1\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.general_style.text.font\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents for OpenOffice Tables\nDESCRIPTION: Sets up a Sphinx documentation toctree directive to organize table-related documentation. The directive is configured to show only titles and include all matching files in the current directory and partial subdirectory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ns_write_table:\n\ntable\n=====\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n    partial/index\n```\n\n----------------------------------------\n\nTITLE: Verifying Poetry Installation\nDESCRIPTION: Command to verify Poetry installation by checking its version\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/poetry_env.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry --version\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for PointSizeKind Class in reStructuredText\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the PointSizeKind class from the ooodev.utils.kind.point_size_kind module, including all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/point_size_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.point_size_kind.PointSizeKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.table.table_column_comp Module Documentation\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the `ooodev.adapter.table.table_column_comp` module. The `:members:` option includes all module members in the documentation. `:undoc-members:` includes undocumented members, and `:show-inheritance:` displays the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.table.table_column_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.table.table_column_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule documentation for ooodev.format.proto.chart2.numbers.numbers_t\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.proto.chart2.numbers.numbers_t` module. It includes module members, undocumented members, and inheritance information in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.chart2.numbers.numbers_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.proto.chart2.numbers.numbers_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autoclass Documentation for PointPositive\nDESCRIPTION: This restructuredtext directive automatically generates documentation for the PointPositive class from the ooodev.utils.data_type.point_positive module. It includes documentation for all class members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/point_positive.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.point_positive.PointPositive\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for hatch module documentation\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation from the Python module ooodev.format.inner.direct.write.para.area.hatch, including all members, undocumented members and inheritance information\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.area.hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.area.hatch\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for DrawingSlideShowKind Class in RST\nDESCRIPTION: This RST (reStructuredText) snippet configures Sphinx to automatically generate documentation for the DrawingSlideShowKind class from the ooodev.utils.kind.drawing_slide_show_kind module. It includes all class members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/drawing_slide_show_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.drawing_slide_show_kind.DrawingSlideShowKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Running Slide Chart Script (Windows)\nDESCRIPTION: PowerShell command to run the slide chart generation script on Windows systems, specifying the full path to the start.py file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart2/slide_chart/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Chart2\\slide_chart\\start.py\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Bash commands to create and navigate to a new project directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/myproject\ncd ~/myproject\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Layout Settings Module\nDESCRIPTION: This code snippet is a directive used in Sphinx documentation to automatically generate documentation for the `ooodev.format.inner.direct.calc.page.page.layout_settings` module. It specifies that the documentation should include members, even undocumented ones, and show the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.calc.page.page.layout_settings.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.calc.page.page.layout_settings\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.adapter.awt.tab.tab_page_container_partial\nDESCRIPTION: This snippet uses the automodule directive to generate documentation for the specified module. It includes options to show members, include undocumented members, and display inheritance information, providing a comprehensive API reference.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.tab.tab_page_container_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.tab.tab_page_container_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line List Items in RST\nDESCRIPTION: Shows how to create multi-line list items in reStructuredText using the line block syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n1. | Database: for extracting information from Calc tables, where the data\n   | is organized into rows. The \"Database\" name is a little misleading,\n   | but the documentation makes the point that Calc database functions have\n   | nothing to do with Base databases. Chapter 13 of the Calc User\n   | Guide (\"Calc as a Simple Database\") explains the distinction in detail.\n2. Date and Time; :abbreviation:`i.e.` see the ``EASTERSUNDAY`` function below\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for ooodev.format.writer.direct.obj.type package\nDESCRIPTION: A Sphinx autodoc directive that automatically generates documentation for all members, undocumented members, and inheritance relationships in the ooodev.format.writer.direct.obj.type package.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.obj.type.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.obj.type\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Example Pyproject.TOML Configuration Toml\nDESCRIPTION: Template configuration for a Poetry project, specifying project metadata like name, version, and dependencies. It includes Python version compatibility and requirements for building the package.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_poetry_env.rst#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"My fantastic project\"\nauthors = [\"Secret Name <secret@name.nowhere>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Draw Spacing Values in Python\nDESCRIPTION: Shows how to retrieve spacing values from an existing Draw style using the Spacing.from_style() method. Includes validation of the style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/indent_space/spacing.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf_style = Spacing.from_style(\n    doc=doc.component,\n    style_name=style.prop_style_name,\n    style_family=style.prop_style_family_name\n)\nassert f_style is not None\nassert f_style.prop_style_name == str(FamilyGraphics.DEFAULT_DRAWING_STYLE)\n```\n\n----------------------------------------\n\nTITLE: Defining Context Menu Structure in JSON for LibreOffice Calc\nDESCRIPTION: This JSON snippet defines the structure of a context menu for LibreOffice Calc. It includes main menu items and submenus with various commands for cell operations, formatting, and annotations. The structure mimics the popup menu that appears when right-clicking on a cell in Calc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/sample_normal_json.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"ooodev.context_action_menu\",\n    \"version\": \"0.41.0\",\n    \"dynamic\": false,\n    \"menus\": [\n        {\n            \"text\": \"~Cut\",\n            \"command\": \".uno:Cut\"\n        },\n        {\n            \"text\": \"Cop~y\",\n            \"command\": \".uno:Copy\"\n        },\n        {\n            \"text\": \"~Paste\",\n            \"command\": \".uno:Paste\"\n        },\n        {\n            \"text\": \"Paste Special\",\n            \"command\": \".uno:PasteSpecialMenu\",\n            \"submenu\": [\n                {\n                    \"text\": \"Paste Unformatted Text\",\n                    \"command\": \".uno:PasteUnformatted\"\n                },\n                {\n                    \"text\": \"-\",\n                    \"separator_type\": 0\n                },\n                {\n                    \"text\": \"My Paste Only Text\",\n                    \"command\": \".uno:PasteOnlyText\"\n                },\n                {\n                    \"text\": \"Paste Only Text\",\n                    \"command\": \".uno:PasteOnlyValue\"\n                },\n                {\n                    \"text\": \"Paste Only Formula\",\n                    \"command\": \".uno:PasteOnlyFormula\"\n                },\n                {\n                    \"text\": \"-\",\n                    \"separator_type\": 0\n                },\n                {\n                    \"text\": \"Paste Transposed\",\n                    \"command\": \".uno:PasteTransposed\"\n                },\n                {\n                    \"text\": \"-\",\n                    \"separator_type\": 0\n                },\n                {\n                    \"text\": \"Paste ~Special...\",\n                    \"command\": \".uno:PasteSpecial\"\n                }\n            ]\n        },\n        {\n            \"text\": \"-\",\n            \"separator_type\": 0\n        },\n        {\n            \"text\": \"Data Select\",\n            \"command\": \".uno:DataSelect\"\n        },\n        {\n            \"text\": \"Current Validation\",\n            \"command\": \".uno:CurrentValidation\"\n        },\n        {\n            \"text\": \"Define Current Name\",\n            \"command\": \".uno:DefineCurrentName\"\n        },\n        {\n            \"text\": \"-\",\n            \"separator_type\": 0\n        },\n        {\n            \"text\": \"Insert cells\",\n            \"command\": \".uno:InsertCell\"\n        },\n        {\n            \"text\": \"Del cells\",\n            \"command\": \".uno:DeleteCell\"\n        },\n        {\n            \"text\": \"Delete\",\n            \"command\": \".uno:Delete\"\n        },\n        {\n            \"text\": \"Merge Cells\",\n            \"command\": \".uno:MergeCells\"\n        },\n        {\n            \"text\": \"Split Cell\",\n            \"command\": \".uno:SplitCell\"\n        },\n        {\n            \"text\": \"-\",\n            \"separator_type\": 0\n        },\n        {\n            \"text\": \"Format Paintbrush\",\n            \"command\": \".uno:FormatPaintbrush\"\n        },\n        {\n            \"text\": \"Reset Attributes\",\n            \"command\": \".uno:ResetAttributes\"\n        },\n        {\n            \"text\": \"Format Styles Menu\",\n            \"command\": \".uno:FormatStylesMenu\",\n            \"submenu\": [\n                {\n                    \"text\": \"Edit Style\",\n                    \"command\": \".uno:EditStyle\"\n                },\n                {\n                    \"text\": \"-\",\n                    \"separator_type\": 0\n                },\n                {\n                    \"text\": \"Default Cell Styles\",\n                    \"command\": \".uno:DefaultCellStylesmenu\"\n                },\n                {\n                    \"text\": \"Accent1 Cell Styles\",\n                    \"command\": \".uno:Accent1CellStyles\"\n                },\n                {\n                    \"text\": \"Accent2 Cell Styles\",\n                    \"command\": \".uno:\"\n                },\n                {\n                    \"text\": \"Accent 3 Cell Styles\",\n                    \"command\": \".uno:Accent3CellStyles\"\n                },\n                {\n                    \"text\": \"-\",\n                    \"separator_type\": 0\n                },\n                {\n                    \"text\": \"Bad Cell Styles\",\n                    \"command\": \".uno:BadCellStyles\"\n                },\n                {\n                    \"text\": \"Error Cell Styles\",\n                    \"command\": \".uno:ErrorCellStyles\"\n                },\n                {\n                    \"text\": \"Good Cell Styles\",\n                    \"command\": \".uno:GoodCellStyles\"\n                },\n                {\n                    \"text\": \"Neutral Cell Styles\",\n                    \"command\": \".uno:NeutralCellStyles\"\n                },\n                {\n                    \"text\": \"Warning Cell Styles\",\n                    \"command\": \".uno:WarningCellStyles\"\n                },\n                {\n                    \"text\": \"-\",\n                    \"separator_type\": 0\n                },\n                {\n                    \"text\": \"Footnote Cell Styles\",\n                    \"command\": \".uno:FootnoteCellStyles\"\n                },\n                {\n                    \"text\": \"Note Cell Styles\",\n                    \"command\": \".uno:NoteCellStyles\"\n                }\n            ]\n        },\n        {\n            \"text\": \"-\",\n            \"separator_type\": 0\n        },\n        {\n            \"text\": \"Insert Annotation\",\n            \"command\": \".uno:InsertAnnotation\"\n        },\n        {\n            \"text\": \"Edit Annotation\",\n            \"command\": \".uno:EditAnnotation\"\n        },\n        {\n            \"text\": \"Delete Note\",\n            \"command\": \".uno:DeleteNote\"\n        },\n        {\n            \"text\": \"Show Note\",\n            \"command\": \".uno:ShowNote\"\n        },\n        {\n            \"text\": \"Hide Note\",\n            \"command\": \".uno:HideNote\"\n        },\n        {\n            \"text\": \"-\",\n            \"separator_type\": 0\n        },\n        {\n            \"text\": \"Format Sparkline\",\n            \"command\": \".uno:FormatSparklineMenu\"\n        },\n        {\n            \"text\": \"-\",\n            \"separator_type\": 0\n        },\n        {\n            \"text\": \"Conditional Formatting...\",\n            \"command\": \".uno:CurrentConditionalFormatDialog\"\n        },\n        {\n            \"text\": \"Current Conditional Format Manager Dialog ...\",\n            \"command\": \".uno:CurrentConditionalFormatManagerDialog\"\n        },\n        {\n            \"text\": \"Format Cell Dialog ...\",\n            \"command\": \".uno:FormatCellDialog\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sphinx Auto Documentation Directive for Byte Class\nDESCRIPTION: Sphinx autoclass directive that automatically generates documentation for the Byte class from the ooodev.utils.data_type.byte module, including all its members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/byte.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.byte.Byte\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining StringKind Class in Python\nDESCRIPTION: A class for handling different string kinds and transformations in the OOO development tools library, providing utility methods for string manipulation\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/formatters/string_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass StringKind:\n    \\\"\\\"\\\"Utility class for working with string kinds\\\"\\\"\\\"\n```\n\n----------------------------------------\n\nTITLE: Gallery Item Information Outside Function Output\nDESCRIPTION: Console output showing the Gallery item properties after being returned from the find_gallery_item() function. The Drawing property has been wiped, resulting in missing URL and other properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/gallery_issue/README.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nGallery item information:\n  URL: Value is None\n  Fnm: Unable to compute due to no URL is None\n  Path: Unable to compute due do no URL is None\n  Title: \"TITLE NOT FOUND\"\n  Type: empty\n```\n\n----------------------------------------\n\nTITLE: Getting Calc Cell Range Alignment Properties\nDESCRIPTION: This snippet demonstrates how to retrieve the text alignment properties applied to a Calc cell range using the `style_align_properties_get` method on a range object. It asserts that the returned style object is not None.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/alignment.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n        f_style = cell_rng.style_align_properties_get()\n        assert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Navigating RowObj Instances with Previous and Next in Python\nDESCRIPTION: Shows how to traverse RowObj instances using prev and next properties to move between sequential row values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/row_obj.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.row_obj import RowObj\n>>> r6 = RowObj(6)\n>>> r6\nRowObj(value=6)\n>>> r5 = r6.prev\n>>> r5\nRowObj(value=5)\n>>> r5.prev\nRowObj(value=4)\n>>> r2 = r5.prev.prev.prev\n>>> r2\nRowObj(value=2)\n>>> r8 = r6.next.next\n>>> r8\nRowObj(value=8)\n```\n\n----------------------------------------\n\nTITLE: Setting protection of a shape in LibreOffice Draw using Python\nDESCRIPTION: This code snippet shows how to set the protection for a shape's position and size using the Protect class from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/protect.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.position_size import Protect\n# ... other code\n\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\nstyle = Protect(position=True, size=True)\nstyle.apply(rect.component)\n```\n\n----------------------------------------\n\nTITLE: Importing Replacement LoInst Class from ooodev.loader Module\nDESCRIPTION: Example of importing the recommended replacement for the deprecated LoInst class from the ooodev.loader.inst.lo_inst module. This import should be used instead of the deprecated class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/inst/lo/lo_inst.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.inst.lo_inst import LoInst\n\n# other code\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Unordered Lists in RST\nDESCRIPTION: Demonstrates how to create nested unordered lists in reStructuredText.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. cssclass:: ul-list\n\n    * outer item 1\n\n        * inner item 1\n        * inner item 2\n\n    * outer item 2\n    * outer item 3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pattern from Paragraph in Python\nDESCRIPTION: This snippet details how to retrieve a pattern from a paragraph in an OpenOffice Writer document using Python. It involves navigating to a paragraph using a cursor, casting the paragraph's properties, and obtaining the pattern using `Pattern.from_obj`. Dependencies include `Write` and `Pattern` from the `ooodev` package.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/pattern.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\n\ntext_para = cast(\"TextRangeContentProperties\", para_cursor)\n\npara_img = Pattern.from_obj(text_para.TextParagraph)\nassert para_img is not None\n\npara_cursor.gotoEnd(False)\n```\n\n----------------------------------------\n\nTITLE: Documenting Reflect Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the Reflect class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/reflection/reflect.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.reflection.reflect.Reflect\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DotDict in Python\nDESCRIPTION: Demonstrates basic usage of DotDict with different value types, including string, integer, and mixed types.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/helper/dot_dict.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# String values\nd1 = DotDict[str](a=\"hello\", b=\"world\")\nprint(d1.a)  # \"hello\"\nprint(d1[\"b\"])  # \"world\"\n\n# Integer values\nd2 = DotDict[int](a=1, b=2)\nprint(d2.a)  # 1\n\n# Mixed values with Union\nfrom typing import Union\nd3 = DotDict[Union[str, int]](a=\"hello\", b=2)\n\n# Mixed values with object\nd4 = DotDict[object](a=\"hello\", b=2)\n```\n\n----------------------------------------\n\nTITLE: Install LibreOffice Python Script Provider\nDESCRIPTION: This command installs the `libreoffice-script-provider-python` package, which is necessary for LibreOffice on Linux to connect to Python scripts. This package is required because LibreOffice on Linux does not embed Python, unlike the Windows version.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libreoffice-script-provider-python\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Logger in Python\nDESCRIPTION: Shows how to implement a named logger in a class to add contextual information to log output. The logger is initialized with the class name and implementation name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.io.log import NamedLogger\n\nclass MyClass:\n    def __init__(self):\n        # ...\n        self._logger = NamedLogger(name=f\"{self.__class__.__name__} - {self._implementation_name}\")\n\n    def _process_import(self, arg) -> None:\n        # ...\n        clz = self._get_class(arg)\n        self._add_base(clz, arg)\n        self._logger.debug(f\"Added: {arg.ooodev_name}\")\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Page Area Gradient in Writer\nDESCRIPTION: This snippet shows how to set the Area gradient of a Page style in Writer using the Gradient class and a preset gradient from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.area import Gradient, PresetGradientKind, WriterStylePageKind\n# ... other code\n\ngradient_style = Gradient.from_preset(\n    preset=PresetGradientKind.DEEP_OCEAN, style_name=WriterStylePageKind.STANDARD\n)\ngradient_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with Control Source - Python\nDESCRIPTION: This code snippet defines an event callback function for use with FormCtlNavigationToolBar controls. The function accepts several parameters, including a specific control source `control_src` as a keyword argument. The purpose is to handle events triggered within form controls effectively. No additional dependencies beyond type annotations are required.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_navigation_tool_bar.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlNavigationToolBar, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Chart2 Demo on Windows\nDESCRIPTION: Command to run the Chart2 demo on Windows systems by directly executing the start.py script with a specified chart type using PowerShell path syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart2/Chart_2_Views/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Chart2\\Chart_2_Views\\start.py -k happy_stock\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: This code snippet demonstrates the structure of an EventArgsCallbackT callback function. It shows how to access the control source using the 'control_src' keyword argument, which provides access to the FormCtlDbPatternField object. The first example shows `control_src` as a parameter, the second example shows it as a key in kwargs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_pattern_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbPatternField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Color Text with RST Roles\nDESCRIPTION: Shows how to add colored text inline using the :red: role for fixed colors that don't change with theme.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_28\n\nLANGUAGE: rst\nCODE:\n```\nThis is my :red:`red text`.\n```\n\n----------------------------------------\n\nTITLE: Defining package structure in RST for ooodev.format.draw.modify.indent_space\nDESCRIPTION: This RST code defines the structure of the ooodev.format.draw.modify.indent_space package, listing its submodules and providing a toctree for navigation. It also includes an automodule directive for documenting the package contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.modify.indent_space.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nooodev.format.draw.modify.indent\\_space package\n===============================================\n\nSubmodules\n----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.draw.modify.indent_space.indent\n   ooodev.format.draw.modify.indent_space.line_spacing\n   ooodev.format.draw.modify.indent_space.spacing\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.draw.modify.indent_space\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python module with automodule\nDESCRIPTION: This snippet shows how to use the `automodule` directive in Sphinx to automatically generate documentation for a Python module.  The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which parts of the module are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.draw.borders.line_properties_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.draw.borders.line_properties_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Removing Global Shortcut by Command (Persistent) in Python\nDESCRIPTION: Removes a global shortcut by its command URL and persists the change. The shortcut will be permanently removed and won't reappear after restarting LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui.menu import Shortcuts\n# ...\nsc = Shortcuts()\nsc.remove_by_command(\".custom:alone.here\", True)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for ooodev.format.chart2.direct.axis.font Package\nDESCRIPTION: Sphinx documentation configuration for the ooodev.format.chart2.direct.axis.font package that uses automodule directive to generate API documentation. It shows all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.axis.font.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.axis.font\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Getting LibreOffice Version as Tuple with Info.version_info Property\nDESCRIPTION: A static read-only property that retrieves the running LibreOffice version as a tuple of integers. Returns version components as a tuple like (7, 3, 4, 2).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/info.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nInfo.version_info\n```\n\n----------------------------------------\n\nTITLE: Documenting RuleTextRegex Class with Autoclass\nDESCRIPTION: This snippet uses the `autoclass` directive to automatically generate documentation for the `RuleTextRegex` class in the `ooodev.dialog.search.tree_search` module. It includes information about the class's members and undocumented members, making them available in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/search/tree_search/rule_text_regex.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.dialog.search.tree_search.RuleTextRegex\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback for Hyperlink Controls in Python\nDESCRIPTION: This code snippet shows how to define an event callback function for handling events on fixed hyperlink controls. The callback can take keyword arguments to retrieve the control source.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_hyperlink_fixed.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n        src: Any, event: EventArgs, control_src: CtlHyperlinkFixed, *args, **kwargs\n    ) -> None:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for documentation generation (Python)\nDESCRIPTION: This snippet uses the `automodule` directive from Sphinx to automatically generate documentation for the `ooodev.format.calc.modify.cell.background` module. It includes the module's members, even those that are undocumented, and displays class inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.modify.cell.background.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.calc.modify.cell.background\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation HTTP Server on Windows\nDESCRIPTION: Launches a local web server to view the generated documentation on Windows.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nPS C:\\python_ooo_dev_tools> python .\\cmds\\run_http.py\n```\n\n----------------------------------------\n\nTITLE: Sphinx Module Documentation Directive for the page Package\nDESCRIPTION: A reStructuredText directive that generates automated documentation for the ooodev.format.writer.modify.page.page module, showing all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.page.page.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.page.page\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.io.output_stream_comp Module\nDESCRIPTION: This code snippet represents the documentation for the `ooodev.adapter.io.output_stream_comp` module. The `:automodule:` directive instructs Sphinx to automatically generate documentation from the module's docstrings, including members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.io.output_stream_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.io.output_stream_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Environment\nDESCRIPTION: This configuration file (pyvenv.cfg) sets up the virtual environment to use the LibreOffice Python installation. The version_info should match the LibreOffice Python version.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nhome = C:\\Program Files\\LibreOffice\\program\nimplementation = CPython\nversion_info = 3.8.16.final.0\nvirtualenv = 20.17.1\ninclude-system-site-packages = false\nbase-prefix = C:\\Program Files\\LibreOffice\\program\\python-core-3.8.16\nbase-exec-prefix = C:\\Program Files\\LibreOffice\\program\\python-core-3.8.16\nbase-executable = C:\\Program Files\\LibreOffice\\program\\python.exe\nprompt = myproject_3.8.16\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Bar Data Sequences in Python\nDESCRIPTION: The snippet demonstrates how to utilize LibreOffice's UNO API to configure error bar data sequences for a chart. It creates labeled data sequences for positive and negative error ranges, sets the data in a data sink, and configures the data series with these error bars. Dependencies include interfaces like XDataSink and DataRoleKind, which are part of the LibreOffice API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndata_sink = Lo.qi(XDataSink, error_bars_ps, True)\n\n# use data provider to create labelled data sequences\n# for the +/- error ranges\ndp = chart_doc.getDataProvider()\n\npos_err_seq = cls.create_ld_seq(\n    dp=dp,\n    role=DataRoleKind.ERROR_BARS_Y_POSITIVE,\n    data_label=data_label,\n    data_range=data_range\n)\nneg_err_seq = cls.create_ld_seq(\n    dp=dp,\n    role=DataRoleKind.ERROR_BARS_Y_NEGATIVE,\n    data_label=data_label,\n    data_range=data_range\n)\n\nld_seq = (pos_err_seq, neg_err_seq)\n\n# store the error bar data sequences in the data sink\ndata_sink.setData(ld_seq)\n\n# store error bar in data series\ndata_series_arr = cls.get_data_series(chart_doc=chart_doc)\n# print(f'No. of data serice: {len(data_series_arr)}')\ndata_series = data_series_arr[0]\n# Props.show_obj_props(\"Data Series 0\", data_series)\nProps.set(data_series, ErrorBarY=error_bars_ps)\nexcept ChartError:\n    raise\nexcept Exception as e:\n    raise ChartError(\"Error Setting y error bars\") from e\n```\n\n----------------------------------------\n\nTITLE: FormatString Class Definition\nDESCRIPTION: This snippet represents the documentation of the `FormatString` class using Sphinx's `autoclass` directive. It includes options to display members, undocumented members, inherited members, and the class inheritance hierarchy. The class is part of the `ooodev.formatters.format_string` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/formatters/format_string.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.formatters.format_string.FormatString\n    :members:\n    :undoc-members:\n    :inherited-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the connector_properties_comp module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.drawing.connector_properties_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.drawing.connector_properties_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Module contents section\nDESCRIPTION: This section utilizes the `automodule` directive to automatically generate documentation for the `ooodev.format.proto.chart2.axis` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which parts of the module are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.chart2.axis.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.proto.chart2.axis\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure for Write Section\nDESCRIPTION: This RST code snippet sets up the table of contents for the 'write' section of the documentation. It includes all files in the current directory and specific subdirectories related to various aspects of writing operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ns_write:\n\nwrite\n=====\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n    export/index\n    filter/index\n    partial/index\n    search/index\n    style/index\n    table/index\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive in Sphinx\nDESCRIPTION: This snippet demonstrates the use of the `automodule` directive in Sphinx to automatically generate documentation for a Python module.  It includes options to display members, include undocumented members, and show inheritance. The goal is to create comprehensive documentation directly from the code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.factory_styler.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n\n.. automodule:: ooodev.format.inner.partial.factory_styler\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.common.props.cell_background_color_props` module. It specifies that members, undocumented members, and inheritance should be included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.props.cell_background_color_props.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.common.props.cell_background_color_props\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Adding Subscript Text with RST Substitutions\nDESCRIPTION: Shows how to create subscript text using RST substitutions and the :sub: role, useful for chemical formulas like H₂O.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_36\n\nLANGUAGE: rst\nCODE:\n```\nHe drank of the |H20| he could find.\n\n.. |H2O| replace:: H\\ :sub:`2`\\ O\n```\n\n----------------------------------------\n\nTITLE: Applying Font Formatting to Individual Data Point\nDESCRIPTION: Shows how to apply font formatting to a specific data point in a chart series using the style_data_point method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/font_only.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=0, styles=[data_lbl_font])\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.writer.direct.para.transparency Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.writer.direct.para.transparency module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.para.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.para.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.writer.direct.char Module Contents\nDESCRIPTION: This snippet represents the module contents documentation generated by `automodule` directive in Sphinx. It includes members, undocumented members, and inheritance details for the `ooodev.format.writer.direct.char` module. This directive is used to automatically generate documentation from the module's docstrings and code structure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.char.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.char\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: reStructuredText autodoc directive for rotation module\nDESCRIPTION: This code snippet is using Sphinx's autodoc extension to generate documentation for the rotation module in the ooodev package. The directive includes all members, undocumented members, and shows inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.direct.position_size.rotation.rotation.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.draw.direct.position_size.rotation.rotation\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Draw Animation Example (Windows)\nDESCRIPTION: Command to run the animation example on Windows using PowerShell and a direct path to the start.py file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Animate_Bike/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Draw\\Animate_bike\\start.py\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting lo_util Module in Python\nDESCRIPTION: This code snippet demonstrates how to use Sphinx autodoc to generate documentation for the lo_util module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/lo_util.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.utils.lo_util\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Getting LibreOffice Python Version in PowerShell\nDESCRIPTION: This command retrieves the version of Python used by the installed LibreOffice. It's necessary to ensure compatibility when setting up the virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n&\"C:\\Program Files\\LibreOffice\\program\\python.exe\" --version\n```\n\n----------------------------------------\n\nTITLE: Defining ShortCut as String in Python\nDESCRIPTION: Example of defining a keyboard shortcut as a string, which will be automatically saved in the registrymodifications.xcu file as a global or local entry.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"ShortCut\": \"Shift+Ctrl+Alt+E\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback function without control source in Python\nDESCRIPTION: This code snippet shows an alternative way to define an event callback function, where the control source can be accessed from the kwargs parameter instead of being explicitly passed. This provides flexibility in handling events while still allowing access to the control that triggered the event.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_fixed_text.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlFixedText, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Execution of Slide to Image Conversion\nDESCRIPTION: This command demonstrates how to run the slide to image conversion script from the current example folder, specifying the input file, output format, and slide index.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slide_to_Image/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m start --file \"tests/fixtures/presentation/algs.ppt\" --out_fmt \"jpeg\" --idx 0\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for AppDispatchProviderPartial documentation\nDESCRIPTION: This restructuredtext code defines a Sphinx documentation page for the AppDispatchProviderPartial module. It uses the automodule directive to automatically generate documentation showing members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.frame.app_dispatch_provider_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.frame.app_dispatch_provider_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Background Image to Data Point\nDESCRIPTION: This snippet applies a background image to the first data point within a data series using a preset image. The image is selected from the PresetImageKind enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\ndp = ds[0]\ndp.style_area_image_from_preset(preset=PresetImageKind.POOL)\n```\n\n----------------------------------------\n\nTITLE: Menu Bar Component Access\nDESCRIPTION: Shows how to access the menu bar component from a LibreOffice document. The code demonstrates the necessary steps to obtain the menu bar layout manager.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndoc.activate()\ncomp = doc.get_frame_comp()\nassert comp is not None\nlm = comp.layout_manager\nmb = lm.get_menu_bar()\n```\n\n----------------------------------------\n\nTITLE: Documenting Write Selected Word Event in Python\nDESCRIPTION: This snippet documents the event that is raised after selecting a word in a Write document. It references the EventArgs class and the select_next_word() method of the Write class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src_docs/event/write/write_events.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Event that is raised after selecting a word.\n\n# See also:\n# - EventArgs class\n# - Write.select_next_word() method\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for GenericSizePos\nDESCRIPTION: Sphinx documentation configuration directive that autogenerates documentation for the GenericSizePos class including all its members\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/generic_size_pos.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.generic_size_pos.GenericSizePos\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Adding Theme-Sensitive Inline Color Text\nDESCRIPTION: Demonstrates how to add colored text that adapts to the theme using the :t_lime: role for theme-sensitive colors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_29\n\nLANGUAGE: rst\nCODE:\n```\nThis is my :t_lime:`lime text`.\n```\n\n----------------------------------------\n\nTITLE: Retrieving LibreOffice User Scripts Directory in Python\nDESCRIPTION: Static read-only property that returns the path to the LibreOffice user scripts directory, such as 'C:\\Users\\user\\AppData\\Roaming\\LibreOffice\\4\\user\\Scripts'. This is used for accessing user-specific scripts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/session.rst#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nSession.user_scripts\n```\n\n----------------------------------------\n\nTITLE: Accessing Basic Scripts\nDESCRIPTION: Shows how to access and invoke LibreOffice Basic scripts using the Basic script manager.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nooodev.macro.script.basic import Basic\ndef r_trim(input: str, remove: str = \" \") -> str:\n    script = Basic.get_basic_script(macro=\"RTrimStr\", module=\"Strings\", library=\"Tools\", embedded=False)\n    res = script.invoke((input, remove), (), ())\n    return res[0]\nresult = r_trim(\"hello \")\nassert result == \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern to Chart Title in Python\nDESCRIPTION: This snippet shows how to apply a pattern style to a chart title. It uses the Pattern class from ooodev.format.chart2.direct.title.area and applies a horizontal brick pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.area import Pattern as TitlePattern, PresetPatternKind\n\ntitle_pattern = TitlePattern.from_preset(chart_doc, PresetPatternKind.HORIZONTAL_BRICK)\nChart2.style_title(chart_doc=chart_doc, styles=[title_pattern])\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents for 'lo' namespace\nDESCRIPTION: Sets up a table of contents (toctree) in reStructuredText format for the 'lo' namespace documentation. The configuration uses the 'titlesonly' option and includes all files in the directory via the glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/inst/lo/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for RangeValues class\nDESCRIPTION: A Sphinx documentation directive that automatically generates documentation for the RangeValues class from the ooodev.utils.data_type.range_values module. The directive includes all class members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/range_values.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.range_values.RangeValues\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Install oooenv package\nDESCRIPTION: This command installs the `oooenv` package using `pip`, the Python package installer. `oooenv` simplifies the process of configuring a virtual environment for use with the LibreOffice API by linking the necessary `uno.py` and `unohelper.py` files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv.rst#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\npython -m pip install oooenv\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Context Menu Structure in JSON for LibreOffice Calc\nDESCRIPTION: This JSON structure defines a dynamic context menu for LibreOffice Calc. It includes menu items for operations like cut, copy, paste, cell formatting, and annotations. The structure also contains nested submenus for more specific actions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/sample_dynamic_json.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"ooodev.context_action_menu\",\n    \"version\": \"0.41.0\",\n    \"dynamic\": true,\n    \"menus\": [\n        {\n            \"command\": \".uno:Cut\",\n            \"module\": 20\n        },\n        {\n            \"command\": \".uno:Copy\",\n            \"module\": 20\n        },\n        {\n            \"command\": \".uno:Paste\",\n            \"module\": 20\n        },\n        {\n            \"text\": \"Paste Special\",\n            \"command\": \".uno:PasteSpecialMenu\",\n            \"submenu\": [\n                {\n                    \"command\": \".uno:PasteUnformatted\",\n                    \"module\": 20\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"My Paste Only Text\",\n                    \"command\": \".uno:PasteOnlyText\",\n                    \"module\": 0\n                },\n                {\n                    \"text\": \"Paste Only Text\",\n                    \"command\": \".uno:PasteOnlyValue\"\n                },\n                {\n                    \"text\": \"Paste Only Formula\",\n                    \"command\": \".uno:PasteOnlyFormula\"\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Paste Transposed\",\n                    \"command\": \".uno:PasteTransposed\"\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"command\": \".uno:PasteSpecial\",\n                    \"module\": 20\n                }\n            ]\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Data Select\",\n            \"command\": \".uno:DataSelect\"\n        },\n        {\n            \"text\": \"Current Validation\",\n            \"command\": \".uno:CurrentValidation\"\n        },\n        {\n            \"text\": \"Define Current Name\",\n            \"command\": \".uno:DefineCurrentName\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Insert cells\",\n            \"command\": \".uno:InsertCell\"\n        },\n        {\n            \"text\": \"Del cells\",\n            \"command\": \".uno:DeleteCell\"\n        },\n        {\n            \"text\": \"Delete\",\n            \"command\": \".uno:Delete\"\n        },\n        {\n            \"text\": \"Merge Cells\",\n            \"command\": \".uno:MergeCells\"\n        },\n        {\n            \"text\": \"Split Cell\",\n            \"command\": \".uno:SplitCell\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Format Paintbrush\",\n            \"command\": \".uno:FormatPaintbrush\"\n        },\n        {\n            \"text\": \"Reset Attributes\",\n            \"command\": \".uno:ResetAttributes\"\n        },\n        {\n            \"text\": \"Format Styles Menu\",\n            \"command\": \".uno:FormatStylesMenu\",\n            \"submenu\": [\n                {\n                    \"text\": \"Edit Style\",\n                    \"command\": \".uno:EditStyle\"\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Default Cell Styles\",\n                    \"command\": \".uno:DefaultCellStylesmenu\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Accent1 Cell Styles\",\n                    \"command\": \".uno:Accent1CellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Accent2 Cell Styles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Accent 3 Cell Styles\",\n                    \"command\": \".uno:Accent3CellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Bad Cell Styles\",\n                    \"command\": \".uno:BadCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Error Cell Styles\",\n                    \"command\": \".uno:ErrorCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Good Cell Styles\",\n                    \"command\": \".uno:GoodCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Neutral Cell Styles\",\n                    \"command\": \".uno:NeutralCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Warning Cell Styles\",\n                    \"command\": \".uno:WarningCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"-\"\n                },\n                {\n                    \"text\": \"Footnote Cell Styles\",\n                    \"command\": \".uno:FootnoteCellStyles\",\n                    \"style\": 2\n                },\n                {\n                    \"text\": \"Note Cell Styles\",\n                    \"command\": \".uno:NoteCellStyles\",\n                    \"style\": 2\n                }\n            ]\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Insert Annotation\",\n            \"command\": \".uno:InsertAnnotation\"\n        },\n        {\n            \"text\": \"Edit Annotation\",\n            \"command\": \".uno:EditAnnotation\"\n        },\n        {\n            \"text\": \"Delete Note\",\n            \"command\": \".uno:DeleteNote\"\n        },\n        {\n            \"text\": \"Show Note\",\n            \"command\": \".uno:ShowNote\"\n        },\n        {\n            \"text\": \"Hide Note\",\n            \"command\": \".uno:HideNote\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"text\": \"Format Sparkline\",\n            \"command\": \".uno:FormatSparklineMenu\"\n        },\n        {\n            \"text\": \"-\"\n        },\n        {\n            \"command\": \".uno:CurrentConditionalFormatDialog\",\n            \"module\": 20\n        },\n        {\n            \"text\": \"Current Conditional Format Manager Dialog ...\",\n            \"command\": \".uno:CurrentConditionalFormatManagerDialog\"\n        },\n        {\n            \"text\": \"Format Cell Dialog ...\",\n            \"command\": \".uno:FormatCellDialog\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText TOC Tree\nDESCRIPTION: Sets up the table of contents tree (toctree) directive with titlesonly option and glob pattern to automatically include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/context/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Defining an EventArgsCallbackT Callback (with control_src)\nDESCRIPTION: This code snippet demonstrates how to define a callback function that includes 'control_src' as a keyword argument. 'control_src' provides a reference to the CtlDialog instance that triggered the event. This allows for accessing and manipulating the dialog window from within the callback function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_dialog.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlDialog, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Python Module from Current Directory in Shell\nDESCRIPTION: Command to run the Bezier curve builder from the current example folder without specifying a curve file. The default value of 2 will be used for the curve file selection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Bezier_Builder/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module with automodule\nDESCRIPTION: This snippet uses the `automodule` directive to document the `ooodev.adapter.drawing.line_properties_comp` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control the level of detail included in the documentation. The automodule directive is a Sphinx feature used to automatically generate documentation for a Python module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.drawing.line_properties_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.drawing.line_properties_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Font Position\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.proto.write.char.font.font_position_t` module. It includes documentation for members, undocumented members, and the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.write.char.font.font_position_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.proto.write.char.font.font_position_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive Example\nDESCRIPTION: This snippet demonstrates the use of the `automodule` directive in Sphinx documentation. It automatically generates documentation for the specified module, including its members and inheritance hierarchy, while excluding undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.page.sheet.scale_reduce_enlarge.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.page.sheet.scale_reduce_enlarge\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining a General Event Callback for Radio Buttons in Python\nDESCRIPTION: This snippet illustrates a more general event callback that accepts the control source as a keyword argument, allowing for flexibility in handling events.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_radio_button.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\\n        # can get control from kwargs\\n        ctl = cast(CtlRadioButton, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Deleting a Page by Index\nDESCRIPTION: Shows how to remove a page from a Draw document by its index using the `del` keyword and the `[]` operator. This modifies the `DrawPages` collection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_pages.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc.open_doc(\"test.odg\")\n>>> del doc.slides[0]\n```\n\n----------------------------------------\n\nTITLE: toctree directive for chart2.chart.transparent submodules\nDESCRIPTION: This snippet uses the `toctree` directive to generate a table of contents for the submodules within the `ooodev.format.inner.direct.chart2.chart.transparent` package. The `:maxdepth: 4` option specifies the maximum depth of the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.chart.transparent.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.chart2.chart.transparent.gradient\n   ooodev.format.inner.direct.chart2.chart.transparent.transparency\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Document Structure for Draw Format Direct Shape Area Shadow\nDESCRIPTION: This snippet sets up the document structure for the Draw Format Direct Shape Area Shadow feature documentation. It includes a document title, a table of contents directive, and configuration options for the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/transparency/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _help_draw_format_direct_shape_area_shadow:\n\nDraw Format Direct Shape Area Shadow\n====================================\n\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Retrieving Footer Border Padding from Document Style\nDESCRIPTION: Demonstrates how to retrieve the padding configuration from an existing document style. This allows verification of the current padding values applied to the footer borders.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/bordes.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Padding.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Module automodule directive for ooodev.format.writer.modify\nDESCRIPTION: Sphinx automodule directive that automatically generates documentation for the ooodev.format.writer.modify module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Module Documentation Generation\nDESCRIPTION: This snippet uses the `automodule` directive from Sphinx to generate documentation for the `ooodev.adapter.drawing.glue_point2_struct_comp` module.  The `:members:` option includes all module members in the documentation. `:undoc-members:` includes undocumented members, and `:show-inheritance:` displays the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.drawing.glue_point2_struct_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.drawing.glue_point2_struct_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment in Cmd Shell\nDESCRIPTION: These commands create a virtual environment without pip in the specified directory using the Command Prompt. The --without-pip flag is crucial for compatibility with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_3\n\nLANGUAGE: bat\nCODE:\n```\ncd D:\\tmp\\manual\\\npython -m venv --without-pip .venv\n```\n\n----------------------------------------\n\nTITLE: Documenting PropPartialT Class in Python\nDESCRIPTION: This snippet uses the autoprotocol directive to generate documentation for the PropPartialT class. The class is located in the ooodev.utils.partial.prop_partial_t module and is likely part of a Python-based OpenOffice/LibreOffice development toolkit.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/prop_partial_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoprotocol:: ooodev.utils.partial.prop_partial_t.PropPartialT\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.modify.write.char.border.shadow\nDESCRIPTION: This snippet demonstrates the usage of Sphinx's automodule directive to generate documentation for the specified Python module. It includes options to display members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.char.border.shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n\".. automodule:: ooodev.format.inner.modify.write.char.border.shadow\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\"\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in Sphinx Documentation for OOODEV Writer Footer Package\nDESCRIPTION: This restructured text (rst) snippet defines the documentation structure for the ooodev.format.writer.direct.page.footer package, including its subpackages and module contents. It uses Sphinx directives to generate API documentation from docstrings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.page.footer.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nooodev.format.writer.direct.page.footer package\n===============================================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.writer.direct.page.footer.area\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.writer.direct.page.footer\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Calc Footer Area Package\nDESCRIPTION: ReStructuredText documentation defining the package structure for Calc footer area modifications, including color and image submodules.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.page.footer.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.modify.calc.page.footer.area.color\n   ooodev.format.inner.modify.calc.page.footer.area.img\n\n.. automodule:: ooodev.format.inner.modify.calc.page.footer.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for Writer Footer Package\nDESCRIPTION: This RST code configures the Sphinx automodule directive to automatically generate documentation for the ooodev.format.writer.modify.page.footer module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.page.footer.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.page.footer\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for ooodev.format.chart2.direct.general.position_size\nDESCRIPTION: This snippet uses the `automodule` directive from Sphinx to automatically generate documentation for the `ooodev.format.chart2.direct.general.position_size` module. It includes module members, excludes undocumented members, and displays inheritance information. The directive is used within reStructuredText to create comprehensive documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.general.position_size.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.general.position_size\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc Configuration for ooodev.format.writer.modify.char.highlight Package\nDESCRIPTION: Sphinx documentation configuration that uses autodoc to generate API documentation for the ooodev.format.writer.modify.char.highlight package. This directive includes all members, undocumented members, and inheritance information in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.char.highlight.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.char.highlight\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Importing ooodev.format.writer.style.para.kind Module\nDESCRIPTION: This snippet shows how to import the main module of the package. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.style.para.kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.writer.style.para.kind\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for LibreOffice Writer Paragraph Area Package\nDESCRIPTION: Sphinx configuration for auto-generating documentation for the ooodev.format.writer.direct.para.area module. The configuration includes options to document all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.para.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: ReStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.para.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: Sphinx documentation structure showing the organization of the cell_protection package and its submodules\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.cell_protection.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.modify.calc.cell_protection.cell_protection\n\n.. automodule:: ooodev.format.inner.modify.calc.cell_protection\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Draw Elements and Animate Script (Cross-Platform)\nDESCRIPTION: Command to run the Python script from the current example folder, compatible with all platforms.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Draw_Picture/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive\nDESCRIPTION: This directive tells Sphinx to automatically generate documentation for the specified module.  It includes the module's members, even undocumented ones, and shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.image.image_type.size.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.image.image_type.size\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment in PowerShell\nDESCRIPTION: These commands create a virtual environment without pip in the specified directory. The --without-pip flag is crucial for compatibility with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ncd D:\\tmp\\manual\\\npython -m venv --without-pip .venv\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Forms in Draw Document\nDESCRIPTION: Demonstrates how to retrieve the number of forms in a draw document using the `len()` method on the `forms` property of a draw page.  First a document is created, then the number of forms is checked on the first slide, a form is added, then the number of forms is checked again. Requires the `DrawDoc` class and the `Draw` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_forms.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc(Draw.create_draw_doc())\n>>> draw_page = doc.slides[0]\n>>> len(draw_page.forms)\n0\n>>>draw_page.forms.add_form()\n>>> len(draw_page.forms)\n1\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module ooodev.format.draw.modify.area.color\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate documentation for the ooodev.format.draw.modify.area.color module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.modify.area.color.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.draw.modify.area.color\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Auto Module Documentation\nDESCRIPTION: This snippet represents the auto-generated module documentation for `ooodev.adapter.text.simple_text_partial`. It includes directives to display members, undocumented members, and the inheritance hierarchy. This is typically used by documentation generation tools like Sphinx to create API documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.simple_text_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.text.simple_text_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Function Changes with Version Information\nDESCRIPTION: Shows a complete example of documenting a function with docstring formatting and version change information to indicate parameter additions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_34\n\nLANGUAGE: rst\nCODE:\n```\nPrints a 2-Dimensional table to console\n\nArgs:\n    name (str): Name of table\n    table (Table): Table Data\n    format_opt (FormatterTable, optional): Format when printing to console\n\nReturns:\n    None:\n\nSee Also:\n    - :ref:`ch21_format_data_console`\n    - :py:data:`~.type_var.Table`\n\n.. versionchanged:: 0.12.4\n    Added ``format_opt`` parameter\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for font_position module\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.format.inner.direct.write.char.font.font_position` module. It includes options to show members, undocumented members, and inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.char.font.font_position.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.char.font.font_position\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Block-Level Fixed Color Formatting\nDESCRIPTION: Shows how to apply fixed color styling to entire blocks of text using CSS classes that don't change with theme.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_30\n\nLANGUAGE: rst\nCODE:\n```\n.. cssclass:: green\n\n    My green text goes here.\n    Multi line is all green.\n```\n\n----------------------------------------\n\nTITLE: Initializing LibreOffice Calc Document with Python\nDESCRIPTION: This snippet demonstrates how to initialize a LibreOffice Calc document, open it, and adjust some zoom and visibility settings using the 'ooodev' library. Dependencies include 'uno', a PATH module, and other 'ooodev' modules. The main function handles document loading, setting, and cleaning up. Parameters include file name 'fnm'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/grid/line_properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.format.inner.preset.preset_border_line import BorderLineKind\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BLUE_DARK2,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_color(color=StandardColor.DEFAULT_BLUE)\n        chart_doc.axis_y.style_gird_line(\n            style=BorderLineKind.CONTINUOUS,\n            color=StandardColor.RED,\n            width=0.5,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Running Chart Demo on Windows\nDESCRIPTION: Command to run the chart demo on Windows systems using PowerShell, specifying the path to the start.py script with Windows path separators. The -k parameter specifies the chart type to create (bar in this example).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart/Chart_views/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Chart\\Chart_views\\start.py -k bar\n```\n\n----------------------------------------\n\nTITLE: Sphinx toctree definition for ooodev.format.writer.modify package\nDESCRIPTION: Defines the toctree structure for the ooodev.format.writer.modify package documentation, listing its subpackages for character, frame, page, and paragraph modifications. The maxdepth is set to 4 levels of heading.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.writer.modify.char\n   ooodev.format.writer.modify.frame\n   ooodev.format.writer.modify.page\n   ooodev.format.writer.modify.para\n```\n\n----------------------------------------\n\nTITLE: TextCache with Custom Parameters\nDESCRIPTION: Shows how to use TextCache with additional custom parameters that create a unique instance, storing data in a different temporary directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/text_cache.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.cache.singleton import TextCache\n\ncache = TextCache(tmp_dir=\"txt_only\", lifetime=300, custom1=\"custom1\", custom2=\"custom2\")\n\nfile_name = \"text_data.txt\"\ncache[file_name] = \"Hello World!\"\nprint(cache[file_name]) # prints \"Hello World!\"\nif file_name in cache:\n    del cache[file_name]\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for style_para_kind Module in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate documentation for the style_para_kind module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.style.para.kind.style_para_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.style.para.kind.style_para_kind\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Table Background Using Back Color Property\nDESCRIPTION: Demonstrates setting table background color directly using the back_color property of a table object in LibreOffice Writer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/background.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n)\ntable.back_color = StandardColor.LIME_LIGHT3\n```\n\n----------------------------------------\n\nTITLE: Checking Virtual Environment Python\nDESCRIPTION: This Python code checks the location of the Python executable in the activated virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPython 3.10.6 (main, May 29 2023, 11:10:38) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> sys.executable\n'/home/guide/my-project/.venv/bin/python'\n>>> exit()\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Area Transparency in Python\nDESCRIPTION: This code retrieves the current transparency setting for the chart area. It asserts that the returned value is not None, indicating successful retrieval.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf_style = chart_doc.style_area_transparency_transparency_get()\\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Area Color from Writer Style\nDESCRIPTION: This snippet demonstrates how to retrieve the Area color from an existing Page style in Writer using the PageAreaColor class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = PageAreaColor.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet demonstrates the use of `automodule` to generate documentation for a Python module. It specifies options to include members, undocumented members, and show inheritance in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.modify.shadow.shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.draw.modify.shadow.shadow\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteWordCursor Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the WriteWordCursor class. It includes all members, undocumented members, shows inheritance, and lists inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_word_cursor.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.WriteWordCursor\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: This code snippet demonstrates how to define a callback function for an event using the EventArgsCallbackT protocol. The callback includes the control_src argument, which provides a reference to the CtlPatternField instance associated with the event. The callback can be defined with or without the CtlPatternField type hint.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_pattern_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlPatternField, *args, **kwargs\n) -> None:\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlPatternField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Running the Impress Slide Modification Script with Module Syntax\nDESCRIPTION: Shows how to run the script using Python's module syntax, which works across all platforms. This should be executed from the example folder.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Modify_Slides/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Section and Table of Contents\nDESCRIPTION: Sets up a documentation section with a reference label and toctree directive for organizing related content about Draw format transparency modifications.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/transparency/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_draw_format_modify_transparency:\n\nDraw Format Modify Style Transparency\n=====================================\n\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Configuration for Calc Header Color Module\nDESCRIPTION: ReStructuredText directive for automatically generating documentation from the calc.page.header.area.color module. The configuration shows all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.page.header.area.color.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.page.header.area.color\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module: ooodev.format.chart2.direct.legend.position_size\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.chart2.direct.legend.position_size module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.legend.position_size.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.legend.position_size\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the `ooodev.format.inner.partial.chart2.axis.positioning.chart2_axis_pos_position_axis_partial` module. It includes module members, undocumented members, and inheritance information in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.axis.positioning.chart2_axis_pos_position_axis_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.chart2.axis.positioning.chart2_axis_pos_position_axis_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with Control Source\nDESCRIPTION: This Python function serves as a template for event callbacks handling database list box controls. It incorporates a keyword argument 'control_src' which is crucial for identifying the source of the control. This pattern is useful for developers dealing with events triggered by form controls, particularly those that need to handle additional event arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_list_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbListBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Documenting DateFormatKind Class using Sphinx autoclass directive\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the DateFormatKind class from the ooodev.utils.kind.date_format_kind module, including all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/date_format_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.date_format_kind.DateFormatKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for Calc Events\nDESCRIPTION: RST directive that configures a table of contents tree (toctree) for documentation. It is set to only show titles and use glob pattern matching for including all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src_docs/event/calc/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for Writer Format Documentation\nDESCRIPTION: RST directive for configuring a table of contents that displays only titles, with a maximum depth of 1 level, and includes all glob-matched files in the directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents - RST\nDESCRIPTION: ReStructuredText directive that sets up a table of contents (toctree) with specific formatting parameters. It is configured to show only titles, with a maximum depth of 1 level, and includes all matching files in the directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Importing Character Style Component Module\nDESCRIPTION: Module import for character style component adapter in OpenOffice development tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.style.character_style_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.adapter.style.character_style_comp import CharacterStyleComp\n```\n\n----------------------------------------\n\nTITLE: Checking pip Version\nDESCRIPTION: This snippet verifies the installation of pip by checking its version using Python's module command. It confirms that pip is installed correctly and lists its location.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_portable_install_pip.rst#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n.\\python.exe -m pip --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Border Sides for Writer Page Headers in Python\nDESCRIPTION: Example of setting border sides for a page header in Writer. This snippet creates a Side object with a double red line of medium width and applies it to all sides of the header via the Sides class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/bordes.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nside = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\nsides_style = Sides(all=side, style_name=WriterStylePageKind.STANDARD)\nStyler.apply(doc, header_style, sides_style)\n```\n\n----------------------------------------\n\nTITLE: ChartAxisKind Class Definition\nDESCRIPTION: This snippet represents the auto-generated documentation for the ChartAxisKind class. It includes all members and undocumented members as specified by the directives.  It relies on the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/chart2/kind/chart_axis_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.calc.chart2.kind.chart_axis_kind.ChartAxisKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Text Alignment in Python\nDESCRIPTION: Example of applying text alignment to a single cell. Centers text horizontally and vertically within the cell.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\nstyle = TextAlign(hori_align=HoriAlignKind.CENTER, vert_align=VertAlignKind.MIDDLE)\nCalc.set_val(value=\"Hello\", cell=cell, styles=[style])\n```\n\n----------------------------------------\n\nTITLE: Module contents\nDESCRIPTION: This section documents the contents of the `ooodev.format.inner.direct.structs` module, including its members, undocumented members, and inheritance structure. It uses `automodule` directive to automatically generate documentation from the module's docstrings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.structs.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\n.. automodule:: ooodev.format.inner.direct.structs\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for Draw Format Style\nDESCRIPTION: ReStructuredText directive that creates a table of contents with specific settings for title-only display, maximum depth of 1, and globbing pattern matching\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/indent_space/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Importing Image Options Properties Module in Python\nDESCRIPTION: Demonstrates how to import the image options properties module from the ooodev.format.inner.common.props package\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.props.image_options_properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.format.inner.common.props.image_options_properties import ImageOptionsProperties\n```\n\n----------------------------------------\n\nTITLE: Alternative Event Callback Using Keyword Arguments\nDESCRIPTION: Here is an alternative Python event callback structure that retrieves the control source via keyword arguments. By casting the control source from kwargs, this approach provides a flexible way to manage events without directly relying on positional parameters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_list_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbListBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: RST Package Documentation Structure\nDESCRIPTION: Sphinx documentation structure for the ooodev.format.inner.direct.write.shape package, including toctree directive for subpackages and automodule directive for module contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.shape.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.write.shape.area\n\n.. automodule:: ooodev.format.inner.direct.write.shape\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Fast Property Set Module Documentation\nDESCRIPTION: Autodoc configuration for the ooodev.adapter.beans.fast_property_set_t module, exposing module members, undocumented members, and inheritance details\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.beans.fast_property_set_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.beans.fast_property_set_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Image Properties\nDESCRIPTION: Shows how to retrieve and verify image fill properties from an existing shape using the ShapeImage.from_obj() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/img.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Img as ShapeImage\n# ... other code\n\n# get the image from the shape\nf_style = ShapeImage.from_obj(rec)\nassert f_style.prop_size\nassert f_style.prop_size == style.prop_size\n```\n\n----------------------------------------\n\nTITLE: Documenting DataPointLabelTypeKind Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the DataPointLabelTypeKind class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/data_point_label_type_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.data_point_label_type_kind.DataPointLabelTypeKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Managing ImporterUserScript with Context Manager in Python\nDESCRIPTION: The provided Python code snippet demonstrates the use of the `importer_doc_script` context manager. This manager temporarily modifies the `sys.meta_path` to include `ImporterUserScript`. It ensures that necessary imports occur correctly when running scripts from a Calc document. Dependencies include `pathlib`, and the ooodev modules `CalcDoc`, `Lo`, and `importer`. Key parameters include the file path of the document (`fnm`). The input is a Calc file path, and the output involves executing the imported module `mod_hello`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/uno_helper/importer/importer_doc_script.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.uno_helper.importer import importer_doc_script\n\n\ndef main():\n    _ = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = None\n    try:\n        fnm = Path.cwd() / \"calc_runner.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n\n        with importer_doc_script():\n            import mod_hello\n\n        mod_hello.say_hello()\n\n        print(\"Done\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    finally:\n        if doc:\n            doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Wrapper Module Documentation\nDESCRIPTION: Sets up a table of contents for the wrapper module using Sphinx's toctree directive. It includes all files in the current directory and displays only their titles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/wrapper/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Documentation Guides in reStructuredText\nDESCRIPTION: Creates a table of contents directive that displays guide pages with specific formatting options. It uses the 'titlesonly' option to show only the titles without subtitles, includes all files via 'glob', and sets the maximum depth to 1 level while specifically including the virtual_env subsection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n    :maxdepth: 1\n\n    *\n    virtual_env/index\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for FormatTableItem Class in Python\nDESCRIPTION: This reStructuredText directive generates API documentation for the FormatTableItem class from the ooodev.formatters.format_table_item module. It includes all class members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/formatters/format_table_item.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.formatters.format_table_item.FormatTableItem\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for PointUnit class\nDESCRIPTION: This directive automatically generates documentation for the PointUnit class from the ooodev.utils.data_type.point_unit module. The :members: option ensures that all class members are included in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/point_unit.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.point_unit.PointUnit\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Running Auto Slide Show with Custom Presentation File in Shell\nDESCRIPTION: Command for running the auto slide show script with a specific presentation file path as a parameter. This allows customizing which presentation file will be used for the slide show.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Auto_Show/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Impress/Auto_Show/start.py \"tests/fixtures/presentation/algs.odp\"\n```\n\n----------------------------------------\n\nTITLE: OpenOffice Development Tools Module Documentation\nDESCRIPTION: ReStructuredText documentation directive for automatically generating module documentation with members, undocumented members, and inheritance details\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.props.image_options_properties.rst#2025-04-16_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n.. automodule:: ooodev.format.inner.common.props.image_options_properties\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Searching LibreOffice Namespaces with loapi\nDESCRIPTION: Example of using the loapi ns command to search for namespaces containing 'xml', showing how to navigate the namespace hierarchy of the LibreOffice API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nloapi ns --search xml\nChoose an option (default 1):\n[0],  Cancel\n[1],  com.sun.star.xml\n[2],  com.sun.star.xml.crypto.sax\n[3],  com.sun.star.xml.dom\n[4],  com.sun.star.xml.crypto\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation\nDESCRIPTION: This snippet is an instruction for Sphinx's automodule directive. It tells Sphinx to automatically generate documentation for the `ooodev.adapter.view.selection_change_listener` module, including its members, even undocumented ones, and to show its inheritance structure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.view.selection_change_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.view.selection_change_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: TimeCache Event Handling for Expired Items\nDESCRIPTION: Shows how to implement event handling for expired cache items using the cache_items_expired event with thread-safe operations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/time_cache.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport threading\nfrom ooodev.utils.cache import TimeCache\n\nLOCK = threading.Lock()\n\ndef on_items_expired(source, event):\n    with LOCK:\n        # event.event_data is a DotDict with an attribute keys\n        # that contains a list of keys that have expired.\n        keys = event.event_data.keys\n        for key in keys:\n            print(f\"Expired: {key}\")\n\ncache = TimeCache(60.0)  # 60 seconds\ncache.subscribe_event(\"cache_items_expired\", on_items_expired)\ncache[\"key\"] = \"value\"\nvalue = cache[\"key\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Header Border Sides in Python\nDESCRIPTION: This snippet demonstrates setting the header border sides in a Calc document using ooodev. It requires defining border line characteristics and applying the style to the document. Key parameters include `line`, `color`, and `width`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/bordes.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nside = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\nheader_sides_style = Sides(all=side, style_name=CalcStylePageKind.DEFAULT)\nStyler.apply(doc, header_style, header_sides_style)\n```\n\n----------------------------------------\n\nTITLE: Setting Image Width in RST\nDESCRIPTION: Shows how to set image width using the :width: argument in reStructuredText.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n.. cssclass:: diagram invert\n\n    .. _ch03fig_peek_services_interface:\n\n    .. figure:: https://images.com/myimg.png\n        :width: 550px\n        :alt: Alt Description\n        :figclass: align-center\n\n        :Description\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Documentation Structure with rST\nDESCRIPTION: Sets up a toctree directive in reStructuredText to organize component documentation. Uses titlesonly option to show only top-level entries and glob pattern to include all files in the directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/comp/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ncomp\n====\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Installing Pip in PowerShell\nDESCRIPTION: This command downloads and installs pip in the active virtual environment using PowerShell. It's necessary for managing Python packages in the virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-WebRequest -Uri https://bootstrap.pypa.io/get-pip.py -UseBasicParsing).Content | python.exe -\n```\n\n----------------------------------------\n\nTITLE: Report Style Families and Names in Draw/Impress\nDESCRIPTION: Gets and displays all style families and their associated style names in a Draw/Impress document. Uses Info utility methods to retrieve style information and prints hierarchical output of style families and their contained styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter12.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef _report_styles(self, doc: XComponent) -> None:\n    style_names = Info.get_style_family_names(doc)\n    print(\"Style Families in this document:\")\n    Lo.print_names(style_names)\n    # usually: \"Default\"  \"cell\"  \"graphics\"  \"table\"\n    # Default is the name of the default Master Page template inside Office\n\n    for name in style_names:\n        con_names = Info.get_style_names(doc=doc, family_style_name=name)\n        print(f'Styles in the \"{name}\" style family:')\n        Lo.print_names(con_names)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Python Documentation\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.writer.direct.image.wrap` module.  It includes module members, undocumented members, and inheritance information in the documentation output. This directive is part of the Sphinx documentation generator for Python.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.image.wrap.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n.. automodule:: ooodev.format.writer.direct.image.wrap\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.impress Package with Sphinx\nDESCRIPTION: This snippet shows the Sphinx documentation structure for the ooodev.format.impress package. It includes a toctree directive for subpackages and an automodule directive for the package contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.impress.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nooodev.format.impress package\n=============================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.impress.modify\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.impress\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Type Variable T in ooodev.utils.type_var Module\nDESCRIPTION: This snippet defines a type variable T in the ooodev.utils.type_var module. Type variables are used in generic programming to provide flexibility in type annotations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/type_var.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autotypevar:: ooodev.utils.type_var.T\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive\nDESCRIPTION: This snippet employs the `automodule` directive to automatically generate documentation for the `ooodev.format.proto.write.char` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which parts of the module are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.write.char.rst#2025-04-16_snippet_1\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.format.proto.write.char\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Linking LibreOffice User Python Packages\nDESCRIPTION: This configuration file (libre_office_user_pkg.pth) links the LibreOffice user Python packages to the virtual environment, allowing access to user-installed packages.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nC:\\Users\\guide\\AppData\\Roaming\\Python\\Python38\\site-packages\n```\n\n----------------------------------------\n\nTITLE: Referencing Chapters in RST\nDESCRIPTION: Demonstrates how to create and reference chapter labels in reStructuredText.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ch01:\n\n.. _ch03_examine_office:\n\n.. _ch03_examine_office_config_prop:\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry on Windows\nDESCRIPTION: PowerShell command to install Poetry on Windows systems using Invoke-WebRequest\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/poetry_env.rst#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n```\n\n----------------------------------------\n\nTITLE: Adding Image Classes in RST\nDESCRIPTION: Demonstrates how to add CSS classes to images in reStructuredText for different types of images.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n.. cssclass:: screen_shot invert\n\n    .. _ch03fig_detail_prop_lst:\n\n    .. figure:: https://images.com/myimg.png\n        :alt: Details Properties List for algs.odp\n        :figclass: align-center\n\n        :Details Properties List for ``algs.odp``.\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Kwargs in Python\nDESCRIPTION: This example demonstrates handling an event where the control can be obtained from 'kwargs'. It uses type casting from kwargs['control_src'] to 'CtlFile'. This is useful in scenarios where direct access to the control is not available, emphasizing flexibility in event management. The primary input is 'kwargs', and there's no direct output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_file.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlFile, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback Function in Python\nDESCRIPTION: This snippet illustrates how to define an event callback function for tree controls using custom event arguments. The function takes a source object, an event object, and optionally a control source argument, allowing custom handling of events.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_tree.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n        src: Any, event: EventArgs, control_src: CtlTree, *args, **kwargs\n    ) -> None:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Documentation Layout\nDESCRIPTION: Sets up a documentation section with a table of contents tree directive. The toctree is configured to show only titles, with a maximum depth of 1 level, and includes all files in the current directory via glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_draw_format_direct_shape_area_area:\\n\\nDraw Format Direct Shape Area Area\\n==================================\\n\\n.. toctree::\\n    :titlesonly:\\n    :maxdepth: 1\\n    :glob:\\n\\n    *\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure - Drop Cap Package\nDESCRIPTION: Sphinx documentation structure defining the drop_cap package and its submodules using reStructuredText format.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.drop_cap.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.write.para.drop_cap.drop_caps\n\n.. automodule:: ooodev.format.inner.direct.write.para.drop_cap\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Configuration\nDESCRIPTION: ReStructuredText configuration for table of contents that lists all child documents with title only, maximum depth of 1, and using glob pattern matching\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/shadow/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive for auto-generating module documentation. Includes configuration for showing members, undocumented members and inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.page.border.shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.page.border.shadow\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Handling Events for Date Field Controls in Python\nDESCRIPTION: This snippet shows how to create a callback function for handling events related to a Date Field control. It illustrates two types of event handlers, one where the control source is explicitly passed as a keyword argument and another that retrieves it from kwargs. The parameters 'src', 'event', and 'control_src' are used to handle events for the Date Field control effectively.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_date_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDateField, *args, **kwargs\n) -> None:\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDateField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Handling Control Source from Keyword Arguments - Python\nDESCRIPTION: This snippet demonstrates extracting a control source from keyword arguments in an event callback function. It utilizes the `cast` function to ensure the control source is of the FormCtlNavigationToolBar type. This pattern is useful when the control source is not part of the standard function parameters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_navigation_tool_bar.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlNavigationToolBar, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents for Calc Format Direct Cell\nDESCRIPTION: A reStructuredText toctree directive that includes all files in the current directory with a titlesonly option. This organizes documentation for the Calc Format Direct Cell functionality.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Defining Text Size Roles in reStructuredText\nDESCRIPTION: Creates custom text size roles for use in HTML presentations, allowing different text sizes like huge, big, small, and tiny.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/roles/s5defs.txt#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: huge\n.. role:: big\n.. role:: small\n.. role:: tiny\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.chart2.chart_document_comp automodule\nDESCRIPTION: Documents the `ooodev.adapter.chart2.chart_document_comp` module using the `automodule` directive. This includes listing all members, showing undocumented members, and displaying class inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.chart2.chart_document_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.chart2.chart_document_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for ooodev.adapter.tree.tree_data_model_listener\nDESCRIPTION: This code snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.tree.tree_data_model_listener` module.  It includes module members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.tree.tree_data_model_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.tree.tree_data_model_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Navigating to LibreOffice Program Directory\nDESCRIPTION: This snippet shows how to change the directory in PowerShell to the LibreOffice program directory where Python is located, which is necessary for installing pip.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_portable_install_pip.rst#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncd \"D:\\Portables\\PortableApps\\LibreOfficePortable\\App\\libreoffice\\program\"\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.writer.direct.shape.shadow Module\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.writer.direct.shape.shadow module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.shape.shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.shape.shadow\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure for ooodev.format.calc.modify Package\nDESCRIPTION: This reStructuredText code defines the documentation structure for the ooodev.format.calc.modify package using Sphinx. It includes a title, subpackages section with toctree directive to reference child packages, and an automodule directive to generate API documentation from the module's docstrings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.modify.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nooodev.format.calc.modify package\n=================================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.calc.modify.cell\n   ooodev.format.calc.modify.page\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.calc.modify\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating a hidden table of contents using toctree in RST\nDESCRIPTION: This snippet uses the `toctree` directive with the `:hidden:` and `:glob:` options in reStructuredText (RST) to create a hidden table of contents. The `:glob:` option specifies a pattern to match files for inclusion in the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/figures/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :hidden:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for ViewImage Class\nDESCRIPTION: Sphinx documentation directive for automatically generating documentation for the ViewImage class. Includes configuration for showing undocumented members, inheritance relationships, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/view/view_image.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.dialog.dl_control.view.view_image.ViewImage\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Handling Event Callback with Keyword Arguments - Python\nDESCRIPTION: This snippet shows how to handle events in scenarios where the control can be retrieved from the keyword arguments. The method casts the 'control_src' to a FormCtlGroupBox instance, allowing further manipulation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_group_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlGroupBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Submodule Tree\nDESCRIPTION: This snippet uses the `toctree` directive to create a table of contents for the submodules within the current package.  The `:maxdepth:` option limits the depth of the table of contents to 4 levels.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.partial.chart2.numbers.numbers_numbers_partial\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.container.container_partial automodule directive\nDESCRIPTION: This automodule directive instructs Sphinx to automatically generate documentation for the `ooodev.adapter.container.container_partial` module. It includes documentation for all members, even undocumented ones, and displays the inheritance hierarchy of classes within the module. This allows for comprehensive API documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.container.container_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: sphinx\nCODE:\n```\n.. automodule:: ooodev.adapter.container.container_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for CurveKind class documentation\nDESCRIPTION: A Sphinx autodoc directive that automatically generates documentation for the CurveKind class from the ooodev.utils.kind.curve_kind module, including all class members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/curve_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.curve_kind.CurveKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Color Module\nDESCRIPTION: ReStructuredText directive that configures automatic documentation generation for the ooodev.utils.color module. Includes settings to document all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/color.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.utils.color\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents with reStructuredText for Writer Footer Documentation\nDESCRIPTION: Sets up a reStructuredText toctree directive that will display all files in the current directory as a table of contents. The structure is configured to show only titles, with a maximum depth of 1, and includes all files using a glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for ooodev.adapter.util.path_settings_properties_partial\nDESCRIPTION: This snippet uses the automodule directive to generate documentation for the `ooodev.adapter.util.path_settings_properties_partial` module. It includes members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.util.path_settings_properties_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\n.. automodule:: ooodev.adapter.util.path_settings_properties_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: MacroScript Class Autodoc\nDESCRIPTION: This snippet demonstrates how to use Sphinx's ``autoclass`` directive to automatically generate documentation for the `MacroScript` class from the `ooodev` library.  The directive includes options to show all members, even undocumented and inherited ones. This directive assumes that the `ooodev` library is installed and accessible to Sphinx.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/macro/script/macro_script.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass::  ooodev.macro.script.MacroScript\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for a Calc Cell Style Module\nDESCRIPTION: This snippet sets up Sphinx autodoc directives to generate comprehensive API documentation for the cell module in the OOO Dev Tools package. It configures the documentation to display all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.style.cell.cell.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.calc.style.cell.cell\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Impress Text Extractor on Linux/Mac\nDESCRIPTION: Command for running the text extraction script specifically on Linux or Mac systems using the standard Unix-style path notation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Extract_Text/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Extract_Text/start.py\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.draw.style.kind Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.draw.style.kind module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.style.kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.draw.style.kind\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for ooodev.adapter.frame.desktop_partial module\nDESCRIPTION: This is a reStructuredText directive that configures Sphinx's autodoc extension to generate documentation for the desktop_partial module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.frame.desktop_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.frame.desktop_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python module with automodule\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.adapter.util.cell_protection_struct_comp` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which aspects of the module are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.util.cell_protection_struct_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.util.cell_protection_struct_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.direct.chart2.series.data_labels.borders.line_properties module documentation\nDESCRIPTION: This snippet uses `automodule` to generate documentation for the `ooodev.format.inner.direct.chart2.series.data_labels.borders.line_properties` module. The `:members:` directive includes all module members in the documentation. The `:undoc-members:` directive includes undocumented members, and the `:show-inheritance:` directive displays the inheritance hierarchy of classes within the module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.series.data_labels.borders.line_properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.series.data_labels.borders.line_properties\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Up Direct Shape Hatch\nDESCRIPTION: Imports necessary modules from the OOoDev library and sets up the main function to create a document and draw a rectangle with a specific hatch style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.writer.direct.shape.area import Hatch as ShapeHatch\nfrom ooodev.format.writer.direct.shape.area import PresetHatchKind\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.office.draw import Draw\n\ndef main() -> int:\n    \"\"\"Main Entry Point\"\"\"\n\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        page = Write.get_draw_page(doc)\n        rect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\n        style = ShapeHatch.from_preset(preset=PresetHatchKind.GREEN_30_DEGREES)\n        style.apply(rect)\n        page.add(rect)\n\n        f_style = ShapeHatch.from_obj(rect)\n        assert f_style\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Table Alignment (Right) with Width using styles in Python\nDESCRIPTION: Creates a table with right alignment and a specific width using the styles approach. Defines a TableProperties object with right alignment and width parameter.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\"My_Table\",\n    relative=False,\n    align=TableAlignKind.RIGHT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    width=UnitMM(60.0),\n)\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n    )\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for ooodev.format.chart2.direct.axis.label Package\nDESCRIPTION: A reStructuredText directive that automatically generates documentation for the ooodev.format.chart2.direct.axis.label package. The directive includes options to document all members, undocumented members, and show inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.axis.label.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.axis.label\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Managing MenuBar Cache in LibreOffice\nDESCRIPTION: Demonstrates how to manage the cache for menu bar objects, including how to clear the cache or disable it completely.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/working_with_menu_bar.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndoc.activate()\ncomp = doc.get_frame_comp()\nassert comp is not None\nlm = comp.layout_manager\nmb = lm.get_menu_bar()\nassert mb is not None\n\n# ...\n# clear the cache\nmb.cache.clear()\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.modify.write.page.footer.area.img module documentation\nDESCRIPTION: This snippet is part of auto-generated module documentation, specifically detailing the members, undocumented members, and inheritance of the `ooodev.format.inner.modify.write.page.footer.area.img` module.  It utilizes the `automodule` directive from Sphinx to generate documentation from the Python module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.page.footer.area.img.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.page.footer.area.img\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell Protection Settings in Python\nDESCRIPTION: Code snippet demonstrating how to retrieve the current cell protection settings from a cell. The example gets the protection style object and verifies it exists.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/cell_protection.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nf_style = cell.style_protection_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment Bash\nDESCRIPTION: Activates the virtual environment created by Poetry, enabling the use of the installed Python interpreter and packages within the shell session.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_poetry_env.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Adding TODO in RST\nDESCRIPTION: Demonstrates how to add TODO items in reStructuredText documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_13\n\nLANGUAGE: rst\nCODE:\n```\n.. todo::\n\n    | Chapter 5, Add link to chapters 7\n    | Chapter 5, Add link to chapters 8\n```\n\n----------------------------------------\n\nTITLE: Applying preset gradient to chart data series in Python\nDESCRIPTION: Shows how to apply a preset gradient to a data series using the DataSeriesGradient class with the from_preset method. Uses PresetGradientKind enum to select a specific gradient style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.area import Gradient as DataSeriesGradient\n\n# ... other code\ndata_series_grad = DataSeriesGradient.from_preset(chart_doc, PresetGradientKind.DEEP_OCEAN)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_series_grad])\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: This command creates a Python virtual environment in the current directory using the system's Python3 interpreter. The virtual environment isolates the project's dependencies from the system's global Python installation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/python3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation for GluePointsKind in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the GluePointsKind class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/glue_point_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.glue_points_kind.GluePointsKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Handling Window Closing Event\nDESCRIPTION: This snippet implements the on_window_closing method which is called when the user attempts to close the application window. It makes use of the Lo module to safely close the document and the Office application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter25.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# in modify_listener_adapter.py\ndef on_window_closing(self, source: Any, event_args: EventArgs, *args, **kwargs) -> None:\n    print(\"Closing\")\n    try:\n        Lo.close_doc(self._doc)\n        Lo.close_office()\n        self.closed = True\n    except Exception as e:\n        print(f\"  {e}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with Control Source\nDESCRIPTION: This Python code snippet demonstrates how to define a callback function for handling events in forms using the FormCtlGrid class. It includes the `control_src` as a keyword argument to access the control within the callback function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_grid.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlGrid, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.writer.modify.frame.wrap\nDESCRIPTION: This directive instructs Sphinx to automatically generate documentation for the specified module. It includes documenting members, even undocumented ones, and showing the inheritance hierarchy of classes within the module, providing a comprehensive view of the module's API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.frame.wrap.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.frame.wrap\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive in RST\nDESCRIPTION: This reStructuredText (RST) snippet uses the `automodule` directive to generate documentation for the `ooodev.format.calc.modify.cell.borders` module.  It includes module members, even undocumented ones, and displays inheritance information. This is processed by Sphinx to create API documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.modify.cell.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.calc.modify.cell.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive in Sphinx\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx documentation to automatically generate documentation for the `ooodev.format.chart2.direct.legend.transparency` module. It includes module members, undocumented members, and inheritance information. This allows for documentation to stay in sync with code changes without manual updates.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.legend.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.legend.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Module Documentation\nDESCRIPTION: This code block uses `automodule` to automatically generate documentation for the `ooodev.format.inner.modify.write.para.transparent.gradient` module. It specifies that members should be included, undocumented members should be shown, and inheritance should be displayed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.para.transparent.gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.para.transparent.gradient\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Callback Function with Control from kwargs\nDESCRIPTION: This Python snippet demonstrates a callback function for events related to Image Button controls, retrieving the control using keyword arguments. The function uses casting to interpret the control source from `kwargs`. It requires the presence of `EventArgs` and `FormCtlImageButton` classes in the environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_image_button.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlImageButton, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.direct.write.page.footer Module Contents\nDESCRIPTION: This snippet represents the module contents of the `ooodev.format.inner.direct.write.page.footer` module. It leverages `automodule` to automatically generate documentation including members, undocumented members, and inheritance information. This is typically used within Sphinx documentation to import and document Python modules.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.page.footer.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.page.footer\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing OOOENV Development Package PowerShell\nDESCRIPTION: Installs 'oooenv' as a development dependency in the virtual environment, enabling configurations necessary for LibreOffice API integration. The '--group=dev' option is used.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_poetry_env.rst#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\npoetry add --group=dev oooenv\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.calc.style Module in Python\nDESCRIPTION: This snippet uses Sphinx automodule directive to generate documentation for the ooodev.format.calc.style module. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.style.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.calc.style\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoClass Documentation for DataRoleKind Class\nDESCRIPTION: Sphinx directive that automatically documents the DataRoleKind class from the ooodev.utils.kind.chart2_data_role_kind module. The directive includes all class members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/chart2_data_role_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.chart2_data_role_kind.DataRoleKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for hf_props module\nDESCRIPTION: This snippet uses the Sphinx `automodule` directive to automatically generate documentation for the `ooodev.format.inner.common.props.hf_props` module. The `:members:` option includes all module members, `:undoc-members:` includes undocumented members, and `:show-inheritance:` displays the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.props.hf_props.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.format.inner.common.props.hf_props\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Checking LibreOffice Python Version on Windows\nDESCRIPTION: Determines the Python version used by the installed LibreOffice to ensure compatibility with the development environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPS C:\\\">\"C:\\Program Files\\LibreOffice\\program\\python.exe\" --version\nPython 3.8.10\n```\n\n----------------------------------------\n\nTITLE: Applying Page Style and Area Color in LibreOffice Writer with Python\nDESCRIPTION: This snippet demonstrates how to apply the 'First Page' style to a page cursor and set the area color to 'Green Dark 2' for the First Page style. It uses the ooodev library to interact with LibreOffice Writer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/page.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n# get the page cursor\npg_cursor = Write.get_page_cursor(doc)\nstyle = Page(name=WriterStylePageKind.FIRST_PAGE)\n# apply the style to the page cursor, changing the page style to \"First Page\"\nstyle.apply(pg_cursor)\n\n# create a page area color style to modify the ``First Page`` style with the color ``Green Dark 2``\ncolor_style = PageAreaColor(\n    color=StandardColor.GREEN_DARK2, style_name=WriterStylePageKind.FIRST_PAGE\n)\ncolor_style.apply(doc)\n\n# write the paragraph\ncursor = Write.get_cursor(doc)\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for OOO Indent Spacing Module\nDESCRIPTION: RST documentation directive that automatically generates API documentation for the indent_spacing module. Includes settings to show all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.indent_space.indent_spacing.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.indent_space.indent_spacing\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for MIME Type Info Module\nDESCRIPTION: Sphinx documentation directives for the mime_type_info_partial module, showing module reference and documentation options.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.document.mime_type_info_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.document.mime_type_info_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ReST Text Replacement Directive\nDESCRIPTION: Defines a multi-line text replacement using ReST syntax, containing a descriptive passage about Sherlock Holmes and Irene Adler\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/help/inc/inc_style_short_ptext.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |short_ptext| replace::\n    \"To Sherlock Holmes she is always THE woman. I have seldom heard\"\n    :literal:`\\         \"` him mention her under any other name. In his eyes she eclipses\"\n    :literal:`\\         \"` and predominates the whole of her sex. It was not that he felt\"\n    :literal:`\\         \"` any emotion akin to love for Irene Adler. All emotions, and that\"\n    :literal:`\\         \"` one particularly, were abhorrent to his cold, precise but\"\n    :literal:`\\         \"` admirably balanced mind. He was, I take it, the most perfect\"\n    :literal:`\\         \"` reasoning and observing machine that the world has seen, but as a\"\n    :literal:`\\         \"` lover he would have placed himself in a false position. He never\"\n    :literal:`\\         \"` spoke of the softer passions, save with a gibe and a sneer. They\"\n    :literal:`\\         \"` were admirable things for the observer--excellent for drawing the\"\n    :literal:`\\         \"` veil from men's motives and actions. But for the trained reasoner\"\n    :literal:`\\         \"` to admit such intrusions into his own delicate and finely\"\n    :literal:`\\         \"` adjusted temperament was to introduce a distracting factor which\"\n    :literal:`\\         \"` might throw a doubt upon all his mental results. Grit in a\"\n    :literal:`\\         \"` sensitive instrument, or a crack in one of his own high-power\"\n    :literal:`\\         \"` lenses, would not be more disturbing than a strong emotion in a\"\n    :literal:`\\         \"` nature such as his. And yet there was but one woman to him, and\"\n    :literal:`\\         \"` that woman was the late Irene Adler, of dubious and questionable memory.\"\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for ooodev.format.writer.direct.para.outline_list module\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the outline_list module. The directive includes all members, undocumented members, and shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.para.outline_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.para.outline_list\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the ooodev.format.writer.direct.shape package documentation using reStructuredText syntax. It includes subpackages and module contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.shape.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nooodev.format.writer.direct.shape package\n=========================================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.writer.direct.shape.area\n   ooodev.format.writer.direct.shape.shadow\n   ooodev.format.writer.direct.shape.transparency\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.writer.direct.shape\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining a Table of Contents in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents using the 'toctree' directive in reStructuredText. The ':titlesonly:' option includes only the titles of the linked documents, and ':glob:' enables the use of glob patterns to specify the files to be included.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/cell/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation for style_para_index_kind in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the style_para_index_kind module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.style.para.kind.style_para_index_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.style.para.kind.style_para_index_kind\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Tight Character Spacing\nDESCRIPTION: Example showing how to apply tight character spacing using the FontPosition class with CharSpacingKind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_position.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\nfp_style = FontPosition(spacing=CharSpacingKind.TIGHT, pair=False)\ncursor = Write.get_cursor(doc)\nWrite.append(cursor, \"Hello\", styles=[fp_style])\n```\n\n----------------------------------------\n\nTITLE: Autodoc for ViewCheckBox Class in Python\nDESCRIPTION: This code snippet utilizes the `autoclass` directive to automatically generate documentation for the `ViewCheckBox` class. It includes members, undocumented members, inheritance details, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/view/view_check_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n.. autoclass:: ooodev.dialog.dl_control.view.view_check_box.ViewCheckBox\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Forms in Writer Document\nDESCRIPTION: Shows how to iterate over all forms in a document and print their names.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_forms.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> for form in doc.draw_page.forms:\n...     print(form.name)\nMyForm\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Impress Get Info Script\nDESCRIPTION: Example output showing the information extracted from an Impress presentation, including slide count, dimensions, layer properties, and style information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slides_Info/README.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLoading Office...\nOpening /home/user/LibreOffice/ooouno-dev-tools/tests/fixtures/presentation/algs.odp\n\nNo. of slides: 12\n\nSize of slide (mm)(254, 190)\n\n Layer 0 Properties\n  Description: \n  IsLocked: False\n  IsPrintable: True\n  IsVisible: True\n  Name: layout\n  Title: \n\n Layer 1 Properties\n  Description: \n  IsLocked: False\n  IsPrintable: True\n  IsVisible: True\n  Name: background\n  Title: \n\n Layer 2 Properties\n  Description: \n  IsLocked: False\n  IsPrintable: True\n  IsVisible: True\n  Name: backgroundobjects\n  Title: \n\n Layer 3 Properties\n  Description: \n  IsLocked: False\n  IsPrintable: True\n  IsVisible: True\n  Name: controls\n  Title: \n\n Layer 4 Properties\n  Description: \n  IsLocked: False\n  IsPrintable: True\n  IsVisible: True\n  Name: measurelines\n  Title: \n\nBackground Object Props Properties\n  Description: \n  IsLocked: False\n  IsPrintable: True\n  IsVisible: True\n  Name: backgroundobjects\n  Title: \n\nStyle Families in this document:\nNo. of names: 4\n  'cell'  'Default'  'graphics'  'table'\n\n\n\nStyles in the \"Default\" style family:\nNo. of names: 14\n  'background'  'backgroundobjects'  'notes'  'outline1'\n  'outline2'  'outline3'  'outline4'  'outline5'\n  'outline6'  'outline7'  'outline8'  'outline9'\n  'subtitle'  'title'\n\n\nStyles in the \"cell\" style family:\nNo. of names: 34\n  'blue1'  'blue2'  'blue3'  'bw1'\n  'bw2'  'bw3'  'default'  'earth1'\n  'earth2'  'earth3'  'gray1'  'gray2'\n  'gray3'  'green1'  'green2'  'green3'\n  'lightblue1'  'lightblue2'  'lightblue3'  'orange1'\n  'orange2'  'orange3'  'seetang1'  'seetang2'\n  'seetang3'  'sun1'  'sun2'  'sun3'\n  'turquoise1'  'turquoise2'  'turquoise3'  'yellow1'\n  'yellow2'  'yellow3'\n\n\nStyles in the \"graphics\" style family:\nNo. of names: 40\n  'A4'  'A4'  'Arrow Dashed'  'Arrow Line'\n  'Filled'  'Filled Blue'  'Filled Green'  'Filled Red'\n  'Filled Yellow'  'Graphic'  'Heading A0'  'Heading A4'\n  'headline'  'headline1'  'headline2'  'Lines'\n  'measure'  'Object with no fill and no line'  'objectwitharrow'  'objectwithoutfill'\n  'objectwithshadow'  'Outlined'  'Outlined Blue'  'Outlined Green'\n  'Outlined Red'  'Outlined Yellow'  'Shapes'  'standard'\n  'Text'  'text'  'Text A0'  'Text A4'\n  'textbody'  'textbodyindent'  'textbodyjustfied'  'title'\n  'Title A0'  'Title A4'  'title1'  'title2'\n\n\nStyles in the \"table\" style family:\nNo. of names: 11\n  'blue'  'bw'  'default'  'earth'\n  'green'  'lightblue'  'orange'  'seetang'\n  'sun'  'turquoise'  'yellow'\n\n\nClosing the document\nClosing Office\nOffice terminated\nOffice bridge has gone!!\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx automodule directive for ooodev.format.writer.modify.para.highlight package\nDESCRIPTION: This is a Sphinx documentation directive that automatically generates API documentation for the specified module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.para.highlight.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.para.highlight\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ooodev.format.writer.modify.para.indent_space Package\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.writer.modify.para.indent_space package. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.para.indent_space.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.para.indent_space\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation: ooodev.format.calc.direct.cell.background\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx (or a similar documentation generator) to automatically generate documentation for the `ooodev.format.calc.direct.cell.background` module. It includes module members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.direct.cell.background.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.calc.direct.cell.background\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running the Impress Slide Modification Script on Windows\nDESCRIPTION: Command to run the script on Windows systems using PowerShell path syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Modify_Slides/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Impress\\Modify_Slides\\start.py\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.text.text_partial automodule\nDESCRIPTION: This code snippet represents the automodule directive in Sphinx/reStructuredText for generating documentation. It instructs the documentation generator to automatically document the `ooodev.adapter.text.text_partial` module, including its members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.text_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.text.text_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Module Documentation: cell_protection_struct\nDESCRIPTION: This snippet represents the auto-generated documentation for the `ooodev.format.inner.direct.structs.cell_protection_struct` module.  It includes module members, undocumented members, and shows inheritance. The `automodule` directive is a Sphinx extension used to automatically generate documentation from the module's docstrings and code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.structs.cell_protection_struct.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.structs.cell_protection_struct\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule documentation using automodule\nDESCRIPTION: This snippet uses the automodule directive to automatically generate documentation for the `ooodev.format.inner.common.props.area_hatch_props` module.  It includes members, shows inheritance, and includes undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.props.area_hatch_props.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.common.props.area_hatch_props\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Transparency in Python\nDESCRIPTION: This code snippet demonstrates the initialization of a chart document and the setting of its area color and transparency using the OOoDev library. It imports necessary modules and sets up a Calc document, applying specific styles to the chart's area.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\\nimport uno\\nfrom pathlib import Path\\nfrom ooodev.calc import CalcDoc, ZoomKind\\nfrom ooodev.utils.color import StandardColor\\nfrom ooodev.loader.lo import Lo\\n\\ndef main() -> int:\\n    with Lo.Loader(connector=Lo.ConnectPipe()):\\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\\n        Lo.delay(500)\\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\\n\\n        sheet = doc.sheets[0]\\n        sheet[\"A1\"].goto()\\n        chart_table = sheet.charts[0]\\n        chart_doc = chart_table.chart_doc\\n        _ = chart_doc.style_area_color(color=StandardColor.GREEN_LIGHT2)\\n        _ = chart_doc.style_area_transparency_transparency(50)\\n\\n        Lo.delay(1_000)\\n        doc.close()\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Style Data Series Gradient Transparency\nDESCRIPTION: This Python code snippet demonstrates how to set gradient transparency for a chart's data series. It accesses the first data series of a chart document and sets its area transparency to a gradient with a specified angle and intensity range using the `style_area_transparency_gradient()` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.data_type.intensity_range import IntensityRange\nfrom ooodev.utils.data_type.angle import Angle\n# ... other code\n\nds = chart_doc.get_data_series()[0]\nds.style_area_transparency_gradient(\n    angle=30,\n    grad_intensity=IntensityRange(0, 100),\n)\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.util.modify_listener Module\nDESCRIPTION: This section documents the `ooodev.adapter.util.modify_listener` module using the `automodule` directive. It displays module members, includes undocumented members, and showcases the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.util.modify_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.util.modify_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python module with Sphinx automodule directive\nDESCRIPTION: This snippet utilizes the `automodule` directive in reStructuredText (Sphinx) to automatically generate documentation for the `ooodev.adapter.uno.interface_partial` module. It includes module members, undocumented members, and inheritance details in the generated documentation. This is a standard practice for documenting Python code using Sphinx.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.uno.interface_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.uno.interface_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart2 Legend Font Styling in Python\nDESCRIPTION: This snippet demonstrates the setup for styling a chart legend font using the ooodev library. It includes imports, document opening, and chart retrieval.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.legend.font import FontOnly as LegendFontOnly\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BRICK, width=1)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.GREEN_DARK4, StandardColor.TEAL_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        legend_font_only_style = LegendFontOnly(name=\"Liberation Sans Narrow\", size=13)\n        Chart2.style_legend(chart_doc=chart_doc, styles=[legend_font_only_style])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Document and Setting Basic Styles - Python\nDESCRIPTION: This snippet initializes a chart document and applies zoom settings. It also sets border styles and gradient fills for the chart area and legends. The necessary imports include classes for document handling and styles from the OOoDev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/legend/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BRICK,\n            width=1,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.GREEN_DARK4,\n                StandardColor.TEAL_LIGHT2,\n            ),\n        )\n        legend = chart_doc.first_diagram.get_legend()\n        if legend is None:\n            raise ValueError(\"Legend is None\")\n        _ = legend.style_border_line(\n            color=StandardColor.BRICK,\n            width=0.8,\n            transparency=20,\n        )\n\n        f_style = legend.style_border_line_get()\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hatch Pattern from Paragraph\nDESCRIPTION: Shows how to retrieve and verify the hatch pattern properties from an existing paragraph using cursor manipulation and type casting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/hatch.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npara_cursor = Write.get_paragraph_cursor(cursor)\npara_cursor.gotoPreviousParagraph(False)\npara_cursor.gotoEndOfParagraph(True)\n\ntext_para = cast(\"TextRangeContentProperties\", para_cursor)\npara_hatch = Hatch.from_obj(text_para.TextParagraph)\nassert para_hatch.prop_name == str(PresetHatchKind.YELLOW_45_DEGREES_CROSSED)\n\npara_cursor.gotoEnd(False)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for deleted_enum_meta\nDESCRIPTION: This snippet uses the `automodule` directive in reStructuredText to generate documentation for the `ooodev.meta.deleted_enum_meta` module. It specifies that the documentation should include the module's members and undocumented members. This allows Sphinx to automatically extract and format the module's documentation from the source code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/meta/deleted_enum_meta.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.meta.deleted_enum_meta\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Module contents: automodule directive\nDESCRIPTION: This snippet represents an `automodule` directive in reStructuredText, used to automatically generate documentation for the `ooodev.format.inner.modify.write.para.text_flow` module. It specifies that the documentation should include members, even undocumented ones, and show the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.para.text_flow.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.para.text_flow\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in ReStructuredText for data_type module\nDESCRIPTION: This snippet creates a table of contents in ReStructuredText format for the data_type module documentation. It includes all files in the current directory and a subdirectory named 'rng'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n    rng/index\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Documentation Generation\nDESCRIPTION: This snippet uses the automodule directive in reStructuredText to generate documentation for the specified Python module. It includes members, undocumented members, and inheritance information in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.para.align.alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.para.align.alignment\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Activate Python Virtual Environment\nDESCRIPTION: This command activates the Python virtual environment. Once activated, subsequent `pip` commands will install packages into the virtual environment, not the system's global Python installation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: ModelGrid Class\nDESCRIPTION: This is a Sphinx directive that generates documentation for the ModelGrid class. It specifies that all members, including undocumented ones, should be included. It also shows the inheritance hierarchy and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/model/model_grid.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ooodev.dialog.dl_control.model.model_grid.ModelGrid\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment in Cmd Shell\nDESCRIPTION: This command activates the virtual environment in Command Prompt, allowing you to use the isolated Python environment for LibreOffice development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_6\n\nLANGUAGE: bat\nCODE:\n```\n.\\.venv\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Importing CLSID from ooodev.loader.inst.clsid in Python\nDESCRIPTION: This code snippet demonstrates how to import the CLSID class from the recommended module ooodev.loader.inst.clsid. It's provided as an example of the new usage pattern to replace the deprecated CLSID class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/inst/lo/clsid.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.inst.clsid import CLSID\n\n# other code\n```\n\n----------------------------------------\n\nTITLE: Getting shape position in LibreOffice Draw using Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the position of a shape in a LibreOffice Draw document using the Position.from_obj() method from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/position.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.position_size import Position\n# ... other code\n\n# get the position from the shape\npos2 = Position.from_obj(rect.component)\nassert pos2 is not None\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example\nDESCRIPTION: Demonstrates the format of an EventArgsCallbackT callback function when using CtlNumericField. The callback receives the source object, event arguments, and the CtlNumericField instance as 'control_src' in keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_numeric_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlNumericField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Transparency Basic Setup\nDESCRIPTION: Setup code that imports required modules and establishes connection to LibreOffice for chart manipulation. Includes basic initialization and document handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.general.area import Color as ChartColor\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.transparency import Transparency as ChartTransparency\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_color = ChartColor(color=StandardColor.GREEN_LIGHT2)\n        chart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=0.7)\n        chart_transparency = ChartTransparency(value=50)\n        Chart2.style_background(\n            chart_doc=chart_doc, styles=[chart_color, chart_bdr_line, chart_transparency]\n        )\n\n        f_style = ChartTransparency.from_obj(chart_doc.getPageBackground())\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.draw.style.lookup Module with Sphinx\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.draw.style.lookup module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.style.lookup.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.draw.style.lookup\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.chart2.direct.wall.area Module in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.chart2.direct.wall.area module. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.wall.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.wall.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Grid Example Config JSON\nDESCRIPTION: Configuration for grid example defining Calc application settings and single script mode for oooscript compilation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/embed_python.rst#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"oooscript\",\n    \"name\": \"grid_dialog\",\n    \"app\": \"CALC\",\n    \"version\": \"1.0.0\",\n    \"args\": {\n        \"src_file\": \"grid_ex.py\",\n        \"output_name\": \"grid_dialog\",\n        \"single_script\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.chart2.chart_type_comp automodule\nDESCRIPTION: This snippet documents the `ooodev.adapter.chart2.chart_type_comp` module using `automodule`. It includes the module's members, undocumented members and the inheritance tree. This is part of documentation generation within a Python project using Sphinx.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.chart2.chart_type_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.chart2.chart_type_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation\nDESCRIPTION: This snippet uses `automodule` directive to generate documentation for the `ooodev.format.inner.direct.calc.cell_protection.cell_protection` module. It includes options to show members, include undocumented members, and display inheritance information. This is a Sphinx directive used for documenting Python modules.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.calc.cell_protection.cell_protection.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.calc.cell_protection.cell_protection\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level with Environment Variables in OooDev\nDESCRIPTION: Demonstrates how to set logging levels using environment variables. Initially sets logging to WARNING level (disabling INFO logs), then changes to INFO level and resets the logger to enable INFO logs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport os\nos.environ[\"ODEV_LOG_LEVEL\"] = str(logging.WARNING)\n\nfrom ooodev.loader import Lo\nfrom ooodev.io.log import logging as logger\n\nlogger.info(\"Hello World\")  # will not log\n\nos.environ[\"ODEV_LOG_LEVEL\"] = str(logging.INFO) # or \"20\"\nlogger.reset_logger()\n\nlogger.info(\"Hello World\")  # will log\n```\n\n----------------------------------------\n\nTITLE: Installing ooo-dev-tools Package\nDESCRIPTION: This command installs the 'ooo-dev-tools' package from PyPI, which provides essential tools for developing LibreOffice API applications, including support for type hinting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_linking_paths.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install ooo-dev-tools\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.text.numbering_style_comp Module\nDESCRIPTION: This snippet represents the documentation for the `ooodev.adapter.text.numbering_style_comp` module in the `ooodev` library. It leverages the `automodule` directive in Sphinx to generate API documentation, including members, undocumented members, and inheritance details.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.numbering_style_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.text.numbering_style_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive in Sphinx\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the specified Python module. It includes options to display members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.position_size.draw.protect_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: sphinx\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.position_size.draw.protect_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating documentation for ooodev.format.inner.direct.draw.fill.area.gradient module\nDESCRIPTION: This snippet utilizes the `automodule` directive in reStructuredText to automatically generate documentation for the specified Python module. It includes the module's members, undocumented members, and inheritance hierarchy in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.draw.fill.area.gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.draw.fill.area.gradient\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment on Linux\nDESCRIPTION: Creates a Python virtual environment in the .venv directory on Linux systems for Python OOO Dev Tools development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ python -m venv ./.venv\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for data_form_comp module\nDESCRIPTION: This reStructuredText directive configures Sphinx to automatically generate documentation for the data_form_comp module, including all members, undocumented members, and showing inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.form.component.data_form_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.form.component.data_form_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Directive for ooodev.format.writer.modify.para.area\nDESCRIPTION: Sphinx directive that automatically generates documentation for the ooodev.format.writer.modify.para.area module. The directive includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.para.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.para.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback Function in Python\nDESCRIPTION: Defines a callback function for handling events with essential parameters: src, event, control_src, and variable-length arguments. This function structure supports capturing event triggers and interacting with tab page containers. It assumes the presence of the EventArgs class and appropriate casting capabilities. Inputs include source and event details, with no direct output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_tap_page_container.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlTabPageContainer, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Importing the Recommended Options Class in Python\nDESCRIPTION: Shows how to import the recommended Options class from ooodev.loader.inst.options module, which should be used instead of the deprecated Options class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/inst/lo/options.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.inst.options import Options\n\n# other code\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Style Cell Kind Module\nDESCRIPTION: A Sphinx autodoc directive that generates documentation for the style_cell_kind module in the ooodev.format.calc.style.cell.kind package. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.style.cell.kind.style_cell_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.calc.style.cell.kind.style_cell_kind\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: PopupProcessor Class Definition\nDESCRIPTION: This snippet documents the PopupProcessor class. It includes members, undocumented members, shows inheritance, and lists inherited members. It does not contain actual Python code, but rather represents the directives used by Sphinx to generate documentation for the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/popup/popup_processor.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ooodev.gui.menu.popup.PopupProcessor\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in reStructuredText\nDESCRIPTION: This snippet uses the toctree directive in reStructuredText to create a table of contents. It is set to display only titles and include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Code and Executing Macro in Calc Document\nDESCRIPTION: This snippet demonstrates how to add a Basic script to a Calc document, execute the macro, and optionally clean up the added library and module. It uses various classes from the ooodev library to interact with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport logging\nimport uno\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.loader.inst.options import Options\nfrom ooodev.utils.string.str_list import StrList\nfrom ooodev.adapter.container.name_container_comp import NameContainerComp\nfrom ooodev.macro.script.macro_script import MacroScript\n\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe(), opt=Options(log_level=logging.DEBUG))\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        inst = doc.basic_libraries\n        mod_name = \"MyModule\"\n        lib_name = \"MyLib\"\n        clean = True\n        added_lib = False\n\n        if not inst.has_by_name(lib_name):\n            added_lib = True\n            inst.create_library(lib_name)\n\n        inst.load_library(lib_name)\n\n        lib = NameContainerComp(inst.get_by_name(lib_name))  # type: ignore\n        if lib.has_by_name(mod_name):\n            lib.remove_by_name(mod_name)\n\n        code = StrList(sep=\"\\n\")\n        code.append(\"Option Explicit\")\n        code.append(\"Sub Main\")\n        with code.indented():\n            code.append('MsgBox \"Hello World\"')\n        code.append(\"End Sub\")\n        lib.insert_by_name(mod_name, code.to_string())\n\n        MacroScript.call(\n            name=\"Main\",\n            library=lib_name,\n            module=mod_name,\n            location=\"document\",\n        )\n        print(\"Macro Executed\")\n        if clean:\n            lib.remove_by_name(mod_name)\n            if added_lib:\n                inst.remove_library(lib_name)\n\n        print(\"Done\")\n    finally:\n        doc.close()\n        Lo.close_office()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Copy Script from Example Folder (Cross-Platform)\nDESCRIPTION: Command to run the Impress slide copy utility from the current example folder using Python's module execution syntax. This approach works across different operating systems.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Copy_Slide/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.draw.filter.export_jpg\nDESCRIPTION: This snippet uses Sphinx's `automodule` directive to automatically generate documentation for the `ooodev.draw.filter.export_jpg` module. The `:members:` option includes all module members in the documentation. The `:undoc-members:` option includes documentation for members that are not explicitly documented.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/filter/export_jpg.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.draw.filter.export_jpg\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python module with Sphinx automodule\nDESCRIPTION: This snippet uses the Sphinx `automodule` directive to generate documentation for the Python module `ooodev.format.inner.direct.draw.shape.text.text_columns`.  It includes documentation for members, even undocumented ones, and displays the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.draw.shape.text.text_columns.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.draw.shape.text.text_columns\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the ooodev.format.draw.style package using reStructuredText format. It includes subpackages and module contents sections.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.style.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nooodev.format.draw.style package\n================================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.draw.style.kind\n   ooodev.format.draw.style.lookup\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.draw.style\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Cross-platform execution from current example folder\nDESCRIPTION: Platform-independent command to run the script as a module from the current example directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slides_Info/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for WidthHeightPercent Class in ReStructuredText\nDESCRIPTION: A ReStructuredText directive that sets up automatic documentation generation for the WidthHeightPercent class from the ooodev.utils.data_type.width_height_percent module. The directive includes all class members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/width_height_precent.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.width_height_percent.WidthHeightPercent\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.direct.chart2.axis.positioning.label_position\nDESCRIPTION: This snippet demonstrates the usage of the `automodule` directive in Sphinx documentation to automatically generate documentation for the `ooodev.format.inner.direct.chart2.axis.positioning.label_position` module. It includes options to display members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.axis.positioning.label_position.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.axis.positioning.label_position\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Character Border Padding Module\nDESCRIPTION: ReStructuredText documentation directive for automatically generating module documentation with inheritance and member details\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.char.border.padding.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.char.border.padding\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass for DateUtil in restructuredtext\nDESCRIPTION: This is a restructuredtext directive that instructs Sphinx to automatically document the DateUtil class from the ooodev.utils.date_time_util module. The directive includes all class members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/date_time_util.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.date_time_util.DateUtil\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Size in LibreOffice Draw\nDESCRIPTION: Demonstrates how to set the size of a shape using the Size class. Creates a Size object with specific dimensions and applies it to a rectangle shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/size.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.position_size import Size\n# ... other code\n\nrect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\nstyle = Size(width=50, height=50)\nstyle.apply(rect.component)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PagePng Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the PagePng class. It includes all members, undocumented members, shows inheritance, and displays inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/export/page_png.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.write.export.page_png.PagePng\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Delete a Form by Index\nDESCRIPTION: Shows how to delete a form from a Calc sheet using its index with the `del` keyword. The example deletes the form at index 1.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_forms.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> sheet = doc.sheets[0]\n>>> del sheet.draw_page.forms[1]\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure in RST\nDESCRIPTION: ReStructuredText documentation layout showing the structure of the ooodev.format.inner.direct.write.para package, its subpackages and modules.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.write.para.align\n   ooodev.format.inner.direct.write.para.area\n   ooodev.format.inner.direct.write.para.border\n   ooodev.format.inner.direct.write.para.drop_cap\n   ooodev.format.inner.direct.write.para.indent_space\n   ooodev.format.inner.direct.write.para.outline_list\n   ooodev.format.inner.direct.write.para.tabs\n   ooodev.format.inner.direct.write.para.text_flow\n   ooodev.format.inner.direct.write.para.transparent\n```\n\n----------------------------------------\n\nTITLE: Removing Border from a Cell in Calc\nDESCRIPTION: This snippet demonstrates how to remove a border from a cell after applying it, using the style_borders_clear() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncell = sheet[\"B2\"]\ncell.value = \"Hello World\"\ncell.style_borders_default()\n# ...\n# remove border\ncell.style_borders_clear()\n```\n\n----------------------------------------\n\nTITLE: Installing python3.10-venv\nDESCRIPTION: Command to install python3.10-venv if it's not already installed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3.10-venv\n```\n\n----------------------------------------\n\nTITLE: Documenting Props Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the Props class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/props.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.props.Props\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment\nDESCRIPTION: These bash commands create a project directory and set up a virtual environment using the matching Python version.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ~/my-project\ncd ~/my-project\n\n/usr/bin/python3.10 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Applying solid color to chart data series in Python\nDESCRIPTION: Shows how to apply a solid background color to a data series in a Chart2 document using the DataSeriesColor class. Color is specified using the StandardColor enum.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.area import Color as DataSeriesColor\n# ... other code\n\ndata_series_color = DataSeriesColor(StandardColor.TEAL_DARK2)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_series_color])\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Python Version\nDESCRIPTION: Command to check if a specific Python version is installed on the system by specifying the major and minor version numbers.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ /usr/bin/python3.10 --version\nPython 3.10.6\n```\n\n----------------------------------------\n\nTITLE: Defining a Table of Contents Structure for GUI Topics in reStructuredText\nDESCRIPTION: Creates a structured table of contents for GUI documentation using reStructuredText directives. The toctree directive is configured to only show titles, with a maximum depth of 6 levels, and uses globbing to include all relevant files from the commands and menus subdirectories.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 6\n    :glob:\n\n    commands/index\n    menus/index\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shape Shadow Properties\nDESCRIPTION: Demonstrates how to retrieve shadow properties from an existing shape using the ShapeShadow.from_obj() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/shadow.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.shadow import Shadow as ShapeShadow\n# ... other code\n\n# get the shadow from the shape\nf_style = ShapeShadow.from_obj(rect)\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollBar Event Callback with Control Source Parameter\nDESCRIPTION: Example of event callback function definition that explicitly includes the control_src parameter of type CtlScrollBar. This pattern allows direct access to the source control in the callback.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_scroll_bar.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlScrollBar, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Apply Style to XCellRange in Calc\nDESCRIPTION: Demonstrates applying a style to an XCellRange in LibreOffice Calc. The code block sets values and retrieves the cell range for styling, ensuring compatibility with Python libraries like ooodev.calc.style and Calc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/static/cell.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncell_rng = Calc.get_range_obj(range_name=\"A1:B1\")\n\nCalc.set_array(values=[[101, 22]], sheet=sheet, range_obj=cell_rng)\nrng = Calc.get_cell_range(sheet=sheet, range_obj=cell_rng)\nstyle.apply(rng)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive\nDESCRIPTION: This snippet utilizes the `automodule` directive to automatically generate documentation for the `ooodev.adapter.script.persistent_library_container_partial` module. It configures the documentation to include module members, undocumented members, and inheritance details.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.script.persistent_library_container_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.script.persistent_library_container_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.direct.chart2.title.alignment Module contents\nDESCRIPTION: This snippet uses `automodule` directive to automatically generate documentation for the `ooodev.format.inner.direct.chart2.title.alignment` module. It includes members, excludes undocumented members, and shows inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.title.alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.title.alignment\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Tree Edit Listener Module\nDESCRIPTION: Provides listener interfaces for tree edit events in OpenOffice development environment\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.tree.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nooodev.adapter.awt.tree.tree_edit_listener\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation\nDESCRIPTION: This snippet represents the automodule directive used to generate documentation for the `ooodev.format.proto.write.fill.area.fill_img_t` module. It includes directives to show members, undocumented members, and inheritance details.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.write.fill.area.fill_img_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.proto.write.fill.area.fill_img_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Adding Hidden Controls to Calc Document\nDESCRIPTION: This snippet shows how to add hidden controls to a Calc document, set their properties, and save the document. It demonstrates the use of the ooodev library for interacting with LibreOffice documents and forms.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.beans.property_attribute import PropertyAttributeEnum\nfrom ooodev.calc import CalcDoc\n\ndoc = CalcDoc.from_current_doc()\n\nsheet = doc.sheets[0]\nif len(sheet.draw_page.forms) == 0:\n    frm = sheet.draw_page.forms.add_form(\"MyForm\")\nelse:\n    frm = sheet.draw_page.forms[0]\nctl = frm.insert_control_hidden(name=\"MyHidden\")\nctl.hidden_value = \"Hello World\"\nctl.add_property(\"Special\", PropertyAttributeEnum.CONSTRAINED, \"Special Data\")\nfnm = Path.cwd() / \"tmp\" / \"hidden.ods\"\ndoc.save_doc(fnm)\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Python Version\nDESCRIPTION: This bash command checks for a specific Python version (3.10 in this case) installed on the system.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ /usr/bin/python3.10 --version\nPython 3.10.6\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Name Access Component Module\nDESCRIPTION: RestructuredText directive for auto-generating module documentation. Includes settings to show all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.container.name_access_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.container.name_access_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Autodoc Module Definition for Transparent Gradient Fills\nDESCRIPTION: Sphinx autodoc configuration for exposing module members, inheritance, and documentation for transparent gradient fill functionality\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.draw.fill.transparent.gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.draw.fill.transparent.gradient\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting submodules with toctree in reStructuredText\nDESCRIPTION: This snippet uses the `toctree` directive in reStructuredText to generate a table of contents for the submodules of the `ooodev.format.inner.modify.write.page.footer.area` package. The `:maxdepth:` option specifies the maximum depth of the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.page.footer.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.modify.write.page.footer.area.color\n   ooodev.format.inner.modify.write.page.footer.area.gradient\n   ooodev.format.inner.modify.write.page.footer.area.hatch\n   ooodev.format.inner.modify.write.page.footer.area.img\n   ooodev.format.inner.modify.write.page.footer.area.pattern\n```\n\n----------------------------------------\n\nTITLE: Setting up LibreOffice Draw document and creating a protected shape\nDESCRIPTION: This snippet demonstrates how to create a LibreOffice Draw document, add a rectangle shape, and apply protection to its position and size. It also shows how to retrieve the protection settings from the shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/protect.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.position_size.position_size import Protect\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 36\n        height = 36\n        x = round(width / 2)\n        y = round(height / 2)\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        style = Protect(position=True, size=True)\n        style.apply(rect.component)\n\n        f_style = Protect.from_obj(rect.component)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Definition\nDESCRIPTION: RST directive defining a table of contents structure for Calc formatting documentation, using titlesonly and glob options to organize subpages.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    direct/index\n    direct_static/index\n    modify/index\n    style/index\n```\n\n----------------------------------------\n\nTITLE: Retrieving Line Spacing from Draw Style\nDESCRIPTION: Shows how to retrieve line spacing settings from an existing style in LibreOffice Draw using the LineSpacing.from_style static method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/indent_space/line_spacing.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf_style = LineSpacing.from_style(\n    doc=doc.component,\n    style_name=style.prop_style_name,\n    style_family=style.prop_style_family_name\n)\nassert f_style is not None\nassert f_style.prop_style_name == str(FamilyGraphics.DEFAULT_DRAWING_STYLE)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Module Documentation - Python Package\nDESCRIPTION: Sphinx automodule directive for documenting the paragraph border module including all members, undocumented members and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.border.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.border\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule directive in Sphinx\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.adapter.chart2.axis_comp` module. It includes the module's members, even undocumented ones, and displays the inheritance hierarchy. The directive simplifies the process of documenting Python modules.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.chart2.axis_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.. automodule:: ooodev.adapter.chart2.axis_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: No Text Callback Handler\nDESCRIPTION: Implementation of callback handling for cases when menu entry text is not found for a command\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef on_no_module_text(src, event: CancelEventArgs):\n    # print(f\"on_before_process: {event.event_data}\")\n    e_data = cast(dict, event.event_data)\n    menu_data = cast(dict, e_data[\"menu\"])\n    if \"data\" in menu_data:\n        # assign the data tag as the menu text.\n        menu_data[\"text\"] = str(menu_data[\"data\"])\n    else:\n        # skip adding this menu item.\n        event.cancel = True\n\ndef main():\n    loader = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        creator = PopupCreator()\n        creator.subscribe_module_no_text(on_no_module_text)\n\n        menus = get_popup_menu()\n        pm = creator.create(menus)\n        # ...\n    finally:\n        doc.close()\n        Lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Documenting Write Selecting Word Event in Python\nDESCRIPTION: This snippet documents the event that is raised before selecting a word in a Write document. It references the CancelEventArgs class and the select_next_word() method of the Write class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src_docs/event/write/write_events.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Event that is raised before selecting a word.\n\n# See also:\n# - CancelEventArgs class\n# - Write.select_next_word() method\n```\n\n----------------------------------------\n\nTITLE: XML Class Definition\nDESCRIPTION: This snippet represents the class documentation generated by Sphinx.  It utilizes the autoclass directive to automatically generate documentation for the XML class including its members and methods. The ':undoc-members:' flag includes documentation for undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/io/xml/xml.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.io.xml.XML\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Hook and Cancel Internal Print Events in ooodev - Python\nDESCRIPTION: This Python snippet demonstrates the use of the LoEvents singleton to hook into ooodev's internal printing events. It hooks the PRINTING event to execute on_lo_print, which cancels the event. Dependencies include the ooodev package and classes like Lo, GblNamedEvent, and CancelEventArgs. The main function initializes an argument parser to take a file path and sets up the event handling. It supports cancellation of print events and handles document operations in ooodev.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/events/lo_events/lo_events.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#!/usr/bin/env python\n# coding: utf-8\nfrom __future__ import annotations\nimport argparse\nfrom typing import Any, cast\n\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.utils.info import Info\nfrom ooodev.wrapper.break_context import BreakContext\nfrom ooodev.events.gbl_named_event import GblNamedEvent\nfrom ooodev.events.args.cancel_event_args import CancelEventArgs\nfrom ooodev.events.lo_events import LoEvents\n\n\ndef args_add(parser: argparse.ArgumentParser) -> None:\n    parser.add_argument(\n        \"-f\",\n        \"--file\",\n        help=\"File path of input file to convert\",\n        action=\"store\",\n        dest=\"file_path\",\n        required=True,\n    )\n\ndef on_lo_print(source: Any, e: CancelEventArgs) -> None:\n    e.cancel = True\n\ndef main() -> int:\n    parser = argparse.ArgumentParser(description=\"main\")\n    args_add(parser=parser)\n    args = parser.parse_args()\n\n    # hook ooodev internal printing event\n    LoEvents().on(GblNamedEvent.PRINTING, on_lo_print)\n\n    with BreakContext(Lo.Loader(Lo.ConnectSocket(headless=True))) as loader:\n\n        fnm = cast(str, args.file_path)\n\n        try:\n            doc = Lo.open_doc(fnm=fnm, loader=loader)\n        except Exception:\n            print(f\"Could not open '{fnm}'\")\n            raise BreakContext.Break\n\n        if Info.is_doc_type(obj=doc, doc_type=Lo.Service.WRITER):\n            text_doc = Write.get_text_doc(doc=doc)\n            cursor = Write.get_cursor(text_doc)\n            text = Write.get_all_text(cursor)\n            print(\"Text Content\".center(50, \"-\"))\n            print(text)\n            print(\"-\" * 50)\n        else:\n            print(\"Extraction unsupported for this doc type\")\n        Lo.close_doc(doc)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation for Chart2 Legend Position Partial\nDESCRIPTION: This snippet shows how to generate documentation for the `ooodev.format.inner.partial.chart2.legend.position.chart2_legend_pos_partial` module using `automodule`. It specifies that members, undocumented members, and inheritance should be included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.legend.position.chart2_legend_pos_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.chart2.legend.position.chart2_legend_pos_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Python Script on Linux/Mac\nDESCRIPTION: Command to run the Bezier curve builder on Linux or Mac systems using the direct file path to the start.py script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Bezier_Builder/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Draw/Bezier_Builder/start.py\n```\n\n----------------------------------------\n\nTITLE: Running Auto Slide Show with Default Parameters in Windows PowerShell\nDESCRIPTION: Command for running the auto slide show script with default parameters on Windows systems using PowerShell syntax with backslashes in the path.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Auto_Show/README.md#2025-04-16_snippet_3\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Impress\\Auto_Show\\start.py\n```\n\n----------------------------------------\n\nTITLE: Running Draw Gradient Example (Linux/Mac)\nDESCRIPTION: Shows how to execute the gradient example script on Linux or Mac systems. This command runs the script from a specific path and displays the help information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/gradient/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Draw/gradient/start.py -h\n```\n\n----------------------------------------\n\nTITLE: Documenting is_meth_event with autofunction\nDESCRIPTION: The `autofunction` directive is used to automatically generate documentation for the `is_meth_event` function.  This documentation will include the function's signature, docstring, and any other relevant information. The function resides within the `ooodev.events.lo_events` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/events/lo_events/is_meth_event.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction::  ooodev.events.lo_events.is_meth_event\n```\n\n----------------------------------------\n\nTITLE: Sphinx toctree Directive for ooodev.format.draw.direct.para.alignment Submodules\nDESCRIPTION: Sphinx toctree directive that references the alignment submodule documentation with maxdepth of 4.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.direct.para.alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.draw.direct.para.alignment.alignment\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation - ViewFixedLine Class Reference\nDESCRIPTION: Sphinx directive that auto-generates documentation for the ViewFixedLine class from the ooodev.dialog.dl_control.view.view_fixed_line module. Includes inherited members and shows class inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/view/view_fixed_line.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.dialog.dl_control.view.view_fixed_line.ViewFixedLine\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Class CustomPropBase Definition\nDESCRIPTION: This reStructuredText snippet uses Sphinx's ``autoclass`` directive to automatically generate documentation for the `CustomPropBase` class found in the `ooodev.calc.cell.custom_prop_base` module.  The `:members:` option includes all class members in the documentation, and `:undoc-members:` includes members that are not explicitly documented via docstrings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/cell/custom_prop_base.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.calc.cell.custom_prop_base.CustomPropBase\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Menu Class Autodoc\nDESCRIPTION: This snippet demonstrates how to use the `autoclass` directive in Sphinx to generate documentation for the `Menu` class. It includes options to show all members and include undocumented members, providing a comprehensive view of the class's API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/menu.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.gui.menu.Menu\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive\nDESCRIPTION: This snippet utilizes the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.modify.draw.char_style_base_multi` module. It includes members, excludes undocumented members, and shows inheritance information. The purpose is to create comprehensive documentation directly from the Python code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.draw.char_style_base_multi.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\".. automodule:: ooodev.format.inner.modify.draw.char_style_base_multi\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Draw Page by Index\nDESCRIPTION: This snippet retrieves a specific draw page by its index using the getByIndex method from the XDrawPages interface. In this example, the first draw page (index 0) is accessed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter11.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\n\npage = Lo.qi(XDrawPage, pages.getByIndex(0))\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document and Setting Shape Rotation\nDESCRIPTION: Creates a LibreOffice Draw document, adds a rectangle shape, and sets its rotation to 45 degrees. The example includes document setup, shape creation, and rotation application using the Rotation class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/rotation/rotation.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.position_size.rotation import Rotation\nfrom ooodev.units import Angle100\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 36\n        height = 36\n        x = round(width / 2)\n        y = round(height / 2)\n\n        rect = slide.draw_rectangle(x=x, y=y, width=width, height=height)\n        style = Rotation(rotation=45)\n        style.apply(rect.component)\n\n        f_style = Rotation.from_obj(rect.component)\n        assert f_style is not None\n        assert f_style.prop_rotation == Angle100(4500)\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Documenting GalleryKind Class with Sphinx in reStructuredText\nDESCRIPTION: This is a Sphinx documentation directive that automatically generates documentation for the GalleryKind class from the ooodev.utils.kind.gallery_kind module. It includes all class members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/gallery_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.gallery_kind.GalleryKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting GenericArgs Class\nDESCRIPTION: This snippet uses the `autoclass` directive in reStructuredText to automatically generate documentation for the `GenericArgs` class from the `ooodev.events.args.generic_args` module. The `:members:` option includes the class's members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/events/args/generic_args.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.events.args.generic_args.GenericArgs\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting MACreator Class with Sphinx AutoClass\nDESCRIPTION: Sphinx autodoc directive for documenting the MACreator class, exposing class members, inheritance, and undocumented members\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/ma/ma_creator.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.gui.menu.ma.MACreator\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Up LibreOffice Document with Shape Pattern\nDESCRIPTION: This snippet demonstrates how to set up a LibreOffice Writer document and draw a rectangle with a specific fill pattern using the ShapePattern class. It shows the initialization of the document, the creation of a shape, and the application of a pattern to it. The process involves connecting to a LibreOffice pipe, creating a document, drawing a rectangle, and applying a fill pattern from predefined presets.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/shape/area/area/pattern.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format.writer.direct.shape.area import Pattern as ShapePattern\nfrom ooodev.format.writer.direct.shape.area import PresetPatternKind\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.write import Write\nfrom ooodev.office.draw import Draw\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        page = Write.get_draw_page(doc)\n        rect = Draw.draw_rectangle(slide=page, x=10, y=10, width=100, height=100)\n        style = ShapePattern.from_preset(preset=PresetPatternKind.SHINGLE)\n        style.apply(rect)\n        page.add(rect)\n\n        f_style = ShapePattern.from_obj(rect)\n        assert f_style\n\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n\n    return 0\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Tree for Range Modules\nDESCRIPTION: Sphinx restructured text configuration that sets up a table of contents tree for range-related documentation. Uses titlesonly option to show only page titles and glob pattern matching to include all files in the directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/rng/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Export Module in reStructuredText\nDESCRIPTION: This snippet creates a table of contents (toctree) for the export module documentation. It includes all files in the current directory and displays only the titles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/export/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _ns_write_export:\n\nexport\n======\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Submodule Structure (toctree)\nDESCRIPTION: This snippet uses the `toctree` directive to display the structure of the submodules within the `ooodev.format.inner.direct.chart2.axis.numbers` package. It specifies a maximum depth of 4 for the table of contents and includes the `numbers` submodule.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.axis.numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.chart2.axis.numbers.numbers\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment with Python\nDESCRIPTION: This code snippet shows how to create and activate a virtual environment for a Python project. The virtual environment is crucial for managing dependencies specific to the project without affecting the global Python environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_linking_paths.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for GlobalEditDispatch class in Python\nDESCRIPTION: ReStructuredText (RST) directive that automatically generates documentation for the GlobalEditDispatch class in the ooodev.utils.dispatch.global_edit_dispatch module. The directive includes all class members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/dispatch/global_edit_dispatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.dispatch.global_edit_dispatch.GlobalEditDispatch\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation HTTP Server on Linux\nDESCRIPTION: Launches a local web server to view the generated documentation on Linux.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n(.venv) $ python cmds/run_http.py\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive Example\nDESCRIPTION: This snippet demonstrates the usage of the `automodule` directive in Sphinx documentation to automatically generate documentation for a Python module. The `:members:` option includes all module members, `:undoc-members:` includes undocumented members, and `:show-inheritance:` shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_check_box_model_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.uno_control_check_box_model_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Save Graphic Utility Method\nDESCRIPTION: Static method to save an XGraphic object to a file with specified format\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter33.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef save_graphic(pic: XGraphic, fnm: PathOrStr, im_format: str = \"\") -> None:\n    Lo.print(f\"Saving graphic in '{fnm}'\")\n    try:\n        if pic is None:\n            raise TypeError(\"Expected pic to be XGraphic instance but got None\")\n        if not im_format:\n            im_format = Info.get_ext(fnm)\n            if not im_format:\n                raise ValueError(\n                    \"Unable to get image format from fnm. Does fnm have an file extension such as myfile.png?\"\n                )\n            im_format = im_format.lower()\n\n        gprovider = Lo.create_instance_mcf(\n            XGraphicProvider, \"com.sun.star.graphic.GraphicProvider\", raise_err=True\n        )\n\n        png_props = Props.make_props(\n            URL=mFileIO.FileIO.fnm_to_url(fnm), MimeType=f\"image/{im_format}\"\n        )\n\n        gprovider.storeGraphic(pic, png_props)\n    except Exception as e:\n        raise ImageError(f'Error saving graphic for \"{fnm}') from e\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Document Events Module\nDESCRIPTION: ReStructuredText directive for auto-generating module documentation. Configures Sphinx to document all members, undocumented members, and inheritance relationships for the ooodev.adapter.document.document_event_events module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.document.document_event_events.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.document.document_event_events\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Hooks\nDESCRIPTION: Sets up Git hooks to run pre-commit and pre-push checks, ensuring documentation and tests are valid before code submission.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngit config --local core.hooksPath .githooks/\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Module Reference\nDESCRIPTION: Sphinx autodoc directive for generating documentation for the UNO Control Edit Model Partial Adapter module, exposing class members, inheritance, and undocumented elements\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_edit_model_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.uno_control_edit_model_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet utilizes the `automodule` directive to automatically generate documentation for the specified Python module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control the level of detail included in the generated documentation, including documented members, undocumented members, and the inheritance hierarchy of classes within the module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.legend.borders.line_properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.legend.borders.line_properties\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.modify.write.frame.wrap.spacing\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the specified module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which aspects of the module are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.frame.wrap.spacing.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.frame.wrap.spacing\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.common.props.frame_wrap_options_props\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.common.props.frame_wrap_options_props` module. It includes the module's members, undocumented members, and inheritance information in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.props.frame_wrap_options_props.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\".. automodule:: ooodev.format.inner.common.props.frame_wrap_options_props\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\"\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for OpenOffice Table Borders\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the borders.borders module. The directive includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.table.borders.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.table.borders.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for ooodev.format.proto.write.fill.transparent.gradient_t\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.format.proto.write.fill.transparent.gradient_t` module. It includes options to show members, undocumented members, and inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.write.fill.transparent.gradient_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.format.proto.write.fill.transparent.gradient_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Getting CellObj from RangeObj\nDESCRIPTION: Demonstrates how to extract a CellObj instance from a RangeObj using index notation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nrng = RangeObj.from_range(\"A1:C4\")\ncell = rng[\"B2\"] # gets a CellObj instance\nassert str(cell) == \"B2\"\nTrue\n```\n\n----------------------------------------\n\nTITLE: Running Impress Text Extractor Using Python Module Syntax\nDESCRIPTION: Cross-platform command to run the text extraction script as a Python module from the current example folder, which works consistently across operating systems.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Extract_Text/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Installing LibreOffice Script Provider for Python\nDESCRIPTION: Installs the libreoffice-script-provider-python package, which allows scripts to connect to LibreOffice on Linux systems.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libreoffice-script-provider-python\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteCellTextCursor Class with Sphinx RST\nDESCRIPTION: Sphinx RST documentation directive for the WriteCellTextCursor class, including member functions, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/write_cell_text_cursor.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.table.write_cell_text_cursor.WriteCellTextCursor\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet represents the usage of Sphinx's automodule directive to generate documentation for the `ooodev.format.chart2.direct.wall.borders` module.  It specifies that members, undocumented members, and inheritance information should be included in the documentation.  No actual Python code is present; rather, it's a directive for a documentation generator.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.wall.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.wall.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents with RST Toctree Directive\nDESCRIPTION: Sets up a table of contents (toctree) for the Draw Format Modify Style Area documentation. The toctree is configured to show only titles, with a maximum depth of 1 level, and to include all files in the current directory using a glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Asserting Standard Style Name in Python\nDESCRIPTION: This code snippet asserts that a property of the style object, 'prop_style_name', matches the expected standard defined in WriterStylePageKind. It is used for validating style properties in document formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText references for LibreOffice spreadsheet interfaces\nDESCRIPTION: Creates reStructuredText reference links to LibreOffice API documentation for XSpreadsheetDocument and XSpreadsheetView interfaces. These references can be used elsewhere in documentation to create clickable links.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_41\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _XSpreadsheetDocument: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sheet_1_1XSpreadsheetDocument.html\n.. _XSpreadsheetView: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sheet_1_1XSpreadsheetView.html\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Draw Formatting\nDESCRIPTION: ReStructuredText directive that creates a table of contents for Draw formatting documentation, including direct and modify index pages.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    direct/index\n    modify/index\n```\n\n----------------------------------------\n\nTITLE: Adding Animated GIF in RST\nDESCRIPTION: Demonstrates how to add an animated GIF image with the a_gif class in reStructuredText.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n.. cssclass:: a_gif\n\n    .. _ch02fig_lo_qi_auto_demo:\n\n    .. figure:: https://images.com/myimg.gif\n        :alt: Lo.qi autocomplete demo image\n        :figclass: align-center\n\n        :Lo.qi autocomplete demo\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for abstract_hf Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the abstract_hf module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.abstract.abstract_hf.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.common.abstract.abstract_hf\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule Directive for change_listener Module\nDESCRIPTION: This snippet configures Sphinx documentation generation for the ooodev.adapter.form.change_listener module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.form.change_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.form.change_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Execution\nDESCRIPTION: Generic command to run the Hilbert curve generator from the current example folder. Works on all operating systems.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Draw_Hilbert/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m start 4\n```\n\n----------------------------------------\n\nTITLE: Running Python Script on Windows\nDESCRIPTION: Command to run the Bezier curve builder on Windows systems using PowerShell and the Windows-style file path to the start.py script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Bezier_Builder/README.md#2025-04-16_snippet_3\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Draw\\Bezier_Builder\\start.py\n```\n\n----------------------------------------\n\nTITLE: Installing OOOENV Package\nDESCRIPTION: Command to install the oooenv package which helps configure the virtual environment to work with LibreOffice's UNO API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install oooenv\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive Example\nDESCRIPTION: This snippet demonstrates the usage of the `automodule` directive in Sphinx documentation to automatically generate documentation for a Python module. It specifies the module to document and options to include members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.point_struct_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.point_struct_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.writer.direct.frame.transparency` module.  It specifies that members, undocumented members, and class inheritance should be included in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.frame.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.frame.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ViewFile Class Definition\nDESCRIPTION: This documentation snippet describes the ViewFile class, its inheritance, and its documented members. The class resides in the `ooodev.dialog.dl_control.view.view_file` module. Undocumented members are excluded.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/view/view_file.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n \"\"\"\n.. autoclass:: ooodev.dialog.dl_control.view.view_file.ViewFile\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directives for WriteParagraph Class\nDESCRIPTION: Sphinx RST directives for automatically generating documentation for the WriteParagraph class from the ooodev.write module. Includes settings to show all members, undocumented members, inheritance details and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_paragraph.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.WriteParagraph\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx reStructuredText Documentation for Shadow Package\nDESCRIPTION: This is a Sphinx documentation file that defines the structure for documenting the shadow package within the ooodev.format.draw.direct namespace. It includes a table of contents for submodules and configures automodule to generate documentation from Python docstrings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.direct.shadow.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nooodev.format.draw.direct.shadow package\n========================================\n\nSubmodules\n----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.draw.direct.shadow.shadow\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.draw.direct.shadow\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Sphinx toctree directive for Draw documentation\nDESCRIPTION: A reStructuredText toctree directive that defines the navigation structure for the Draw Documents section. It's configured to display only titles, with a maximum depth of 2 levels, and includes all documentation files in the format directory using the glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 2\n    :glob:\n\n    format/index\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module with Sphinx automodule\nDESCRIPTION: This reStructuredText snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.util.refresh_events` Python module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which parts of the module are included in the documentation.  This is used to create a comprehensive API reference.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.util.refresh_events.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.util.refresh_events\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Adding a Separator to a Menu\nDESCRIPTION: This snippet shows how to add a separator to a menu by setting the Label value to '-'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/create_a_menu_with_menu_app.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"Label\": \"-\",\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to LibreOffice Program Directory\nDESCRIPTION: This PowerShell command changes the current directory to the LibreOffice 'program' directory, which is necessary for running subsequent installation commands. Dependency: LibreOffice must be installed in the specified path.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_lo_install_pip.rst#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncd \"C:\\Program Files\\LibreOffice\\program\"\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.adapter.text.text_portion_comp\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to generate documentation for the `ooodev.adapter.text.text_portion_comp` module. It includes all members, even undocumented ones, and shows inheritance relationships. This allows automatic generation of API documentation from the Python code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.text_portion_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.text.text_portion_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Area Hatch for Footer Style in Python\nDESCRIPTION: This code snippet demonstrates how to set the area hatch for the footer style in a Writer document using the `FooterStyleHatch` class and `PresetHatchKind`. It applies a preset hatch style to the footer area of a specified page style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.writer.modify.page.footer.area import Hatch as FooterStyleHatch, PresetHatchKind\\n# ... other code\\n\\nhatch_style = FooterStyleHatch.from_preset(\\n    preset=PresetHatchKind.RED_45_DEGREES_NEG_TRIPLE, style_name=WriterStylePageKind.STANDARD\\n)\\nStyler.apply(doc, footer_style, hatch_style)\"\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation Directive\nDESCRIPTION: Sphinx autodoc directive for generating documentation for the font formatting module in LibreOffice development tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.calc.char.font.font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.calc.char.font.font_only\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Chart Legend\nDESCRIPTION: Demonstrates how to create and apply font effects to a chart legend, including color settings and underline styles. Uses LegendFontEffects class to customize the legend appearance with purple text and bold wave underline in dark green.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.legend.font import (\n    FontEffects as LegendFontEffects,\n    FontLine,\n    FontUnderlineEnum,\n)\n# ... other code\n\nlegend_font_effects_style = LegendFontEffects(\n    color=StandardColor.PURPLE,\n    underline=FontLine(line=FontUnderlineEnum.BOLDWAVE, color=StandardColor.GREEN_DARK2),\n)\nChart2.style_legend(chart_doc=chart_doc, styles=[legend_font_effects_style])\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Virtual Environment Location\nDESCRIPTION: Shell command to configure Poetry to create virtual environments in the project directory\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/poetry_env.rst#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npoetry config virtualenvs.in-project true\n```\n\n----------------------------------------\n\nTITLE: Documenting Python MenuDebug Class\nDESCRIPTION: Documentation directive for the MenuDebug class using Sphinx autodoc extension, providing automatic documentation generation for class members and undocumented members\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/common/menu_debug.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.gui.menu.common.menu_debug.MenuDebug\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Applying Font Effects to Y-Axis in Chart2 using Python\nDESCRIPTION: This snippet shows how to create an AxisFontEffects object and apply it to the Y-axis of a chart. It sets the font color to red, adds a blue underline, and applies a shadow effect.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/font_effects.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.axis.font import FontEffects as AxisFontEffects\nfrom ooodev.format.chart2.direct.axis.font import FontUnderlineEnum, FontLine\n# ... other code\n\naxis_font_effects = AxisFontEffects(\n    color=StandardColor.RED,\n    underline=FontLine(line=FontUnderlineEnum.SINGLE, color=StandardColor.BLUE),\n    shadowed=True,\n)\nChart2.style_y_axis(chart_doc=chart_doc, styles=[axis_font_effects])\n```\n\n----------------------------------------\n\nTITLE: Linux/Mac Execution Path\nDESCRIPTION: Command for running the Hilbert curve generator on Linux or Mac systems using the full path to the script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Draw_Hilbert/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Draw/Draw_Hilbert/start.py 4\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module using automodule\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.adapter.configuration.set_update_comp` module. The `:members:` option includes all module members, `:undoc-members:` includes undocumented members, and `:show-inheritance:` displays class inheritance diagrams. This is a standard approach for generating API documentation from Python code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.configuration.set_update_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.configuration.set_update_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Nested Function Call Example - Python\nDESCRIPTION: This code snippet shows how to nest Calc function calls by converting degrees to radians and then applying the `SIN` function to the result. It emphasizes that outputs from one function can be used as inputs for another.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in calc_functions.py\nprint(\"SIN result for 30 degrees is:\", end=\"\")\nprint(f'{doc.call_fun(\"SIN\", doc.call_fun(\"RADIANS\", 30)):.3f}')\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for Python Module\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the enumeration_access_partial module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.container.enumeration_access_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.container.enumeration_access_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Table of Contents for Chart2 Figures in reStructuredText\nDESCRIPTION: Defines a hidden table of contents that links to figures-related documentation. This toctree won't be visible in the rendered documentation but still establishes the hierarchical relationship for cross-referencing and navigation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :hidden:\n\n    figures/index\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.adapter.script.library_container_export_partial\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.adapter.script.library_container_export_partial` module. It includes options to display members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.script.library_container_export_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.script.library_container_export_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Background to Data Series in Python\nDESCRIPTION: This snippet demonstrates how to apply a zig-zag pattern background to an entire data series in a chart. It imports the necessary classes, creates a pattern style object and applies it to the data series.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/area.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_series.area import Pattern as SeriesPattern\nfrom ooodev.format.chart2.direct.series.data_series.area import PresetPatternKind\n# ... other code\n\ndata_series_pattern = SeriesPattern.from_preset(chart_doc, PresetPatternKind.ZIG_ZAG)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_series_pattern])\n```\n\n----------------------------------------\n\nTITLE: Module Documentation with automodule\nDESCRIPTION: This snippet uses the `automodule` directive in reStructuredText (RST) to automatically generate documentation for the `ooodev.adapter.drawing.shadow_properties_partial` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options specify that all members, undocumented members, and inheritance hierarchy should be included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.drawing.shadow_properties_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.drawing.shadow_properties_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Documentation Directive for Calc Borders\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the borders module. Includes configuration for documenting all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.border.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.border.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Output - Subsequent Runs\nDESCRIPTION: Shows the debug logging output when menu is loaded from existing JSON file on subsequent runs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/context_class_example.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n26/04/2024 16:17:37 - DEBUG - CalcMenuIntercept: Matched command: .uno:Insert\n26/04/2024 16:17:37 - DEBUG - CalcMenuIntercept: Loading menu data from json file\n26/04/2024 16:17:40 - DEBUG - CalcMenuIntercept: Matched command: .uno:Insert\n26/04/2024 16:17:40 - DEBUG - CalcMenuIntercept: Returning existing menu\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Class Documentation\nDESCRIPTION: ReStructuredText directives for auto-documenting the CellObj Python class using Sphinx, including all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/cell_obj.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ooodev.utils.data_type.cell_obj.CellObj:\n\nClass CellObj\n=============\n\n.. autoclass:: ooodev.utils.data_type.cell_obj.CellObj\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Creating Service Instance - Basic vs Python\nDESCRIPTION: Demonstrates creating a service instance for file access operations in both Basic and Python\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_12\n\nLANGUAGE: vbscript\nCODE:\n```\nset sfAcc = CreateUnoService(\"com.sun.star.ucb.SimpleFileAccess\")\nsfAcc.CreateFolder(dirName)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom com.sun.star.ucb import XSimpleFileAccess\n\nsf_acc = Lo.create_instance_msf(XSimpleFileAccess, \"com.sun.star.ucb.SimpleFileAccess\")\nsf_acc.CreateFolder(dir_name)\n```\n\n----------------------------------------\n\nTITLE: Running the Impress Slide Append Tool on Linux/Mac\nDESCRIPTION: Command to run the tool with default parameters on Linux or Mac systems. Without arguments, it will append 'points.odp' to 'algs.odp'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Append_Slides/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Append_Slides/start.py\n```\n\n----------------------------------------\n\nTITLE: XML Entry for Local Shortcut in registrymodifications.xcu\nDESCRIPTION: The XML entry added to registrymodifications.xcu when a local shortcut is saved. This example shows the XML structure for a Calc-specific shortcut.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<item oor:path=\"/org.openoffice.Office.Accelerators/PrimaryKeys/Modules/org.openoffice.Office.Accelerators:Module['com.sun.star.sheet.SpreadsheetDocument']\">\n    <node oor:name=\"A_SHIFT_MOD1_MOD2\" oor:op=\"replace\">\n        <prop oor:name=\"Command\" oor:op=\"fuse\">\n            <value xml:lang=\"en-US\">alone.here</value>\n        </prop>\n    </node>\n</item>\n```\n\n----------------------------------------\n\nTITLE: Documenting WriteTextViewCursor Class with Sphinx\nDESCRIPTION: Sphinx documentation directive for the WriteTextViewCursor class that specifies documentation settings including member visibility, inheritance details, and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text_view_cursor.rst#2025-04-16_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. autoclass:: ooodev.write.WriteTextViewCursor\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for ooodev.format.writer.modify.para.font package\nDESCRIPTION: Sphinx reStructuredText directive that automatically generates documentation for the ooodev.format.writer.modify.para.font package, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.para.font.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.para.font\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Document in OpenOffice Calc with Python\nDESCRIPTION: This snippet demonstrates how to initialize a Calc document, open a specific file, make it visible, and set the zoom level. It utilizes the ooodev library's functionality for loading the document and managing charts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.BLUE_LIGHT3,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient_from_preset(\n            preset=PresetGradientKind.TEAL_BLUE,\n        )\n        ds = chart_doc.get_data_series()[0]\n        ds.style_label_border_line(\n            color=StandardColor.MAGENTA_DARK1,\n            width=0.75,\n        )\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Filter Module Documentation\nDESCRIPTION: Sets up a table of contents for the filter module documentation using Sphinx toctree directive. It is configured to display only titles and include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/filter/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents for General Modules in reStructuredText\nDESCRIPTION: This snippet configures a Sphinx toctree directive for the General Modules section of documentation. It sets up a table of contents with the 'titlesonly' option, a maximum depth of 2, and includes the 'info/index' documentation page.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/modules/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 2\n    \n    info/index\n```\n\n----------------------------------------\n\nTITLE: Referencing Figures and Tables in RST\nDESCRIPTION: Shows how to create and reference figure and table labels in reStructuredText.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _ch03fig_prop_dialog:\n\n.. _ch02tbl_some_doc_prop:\n```\n\n----------------------------------------\n\nTITLE: Installing LibreOffice Script Provider for Python\nDESCRIPTION: Command to install the necessary package that allows Python scripts to connect to LibreOffice using apt.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libreoffice-script-provider-python\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Directive for Python Module\nDESCRIPTION: Sphinx documentation directive that generates API documentation for a Python module handling footer area color formatting in Calc documents. The directive includes all members, undocumented members and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.page.footer.area.color.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.page.footer.area.color\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting UnoEnum Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the UnoEnum class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/uno_enum.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.uno_enum.UnoEnum\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Subtitle Orientation and Write Mode\nDESCRIPTION: Method for adjusting chart subtitle orientation and direction using style_orientation() and style_write_mode() methods from OOO Development Tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/alignment.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.title.alignment import DirectionModeKind\n# ... other code\nsub_title = chart_doc.first_diagram.get_title()\nif sub_title is None:\n    raise ValueError(\"Title not found\")\nsub_title.style_orientation(angle=15, vertical=False)\nsub_title.style_write_mode(mode=DirectionModeKind.LR_TB)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure using Sphinx toctree Directive\nDESCRIPTION: Uses Sphinx documentation's toctree directive to organize content into a structured table of contents. The directive is configured to show only titles, with a maximum depth of 6 levels, and includes all files in the specified directories using glob pattern matching.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 6\n    :glob:\n\n    gui/index\n    format/index\n    modules/index\n    ranges/index\n```\n\n----------------------------------------\n\nTITLE: Running Animation Demo on Linux/Mac\nDESCRIPTION: Shell command to execute the animation demo script on Linux or Mac OS systems, specifying the full path to the start.py file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Animation_Demo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Animation_Demo/start.py\n```\n\n----------------------------------------\n\nTITLE: Checking UNO Environment Status\nDESCRIPTION: Verifies if the virtual environment is correctly configured for LibreOffice UNO integration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n(.venv) PS C:\\python_ooo_dev_tools> oooenv env -u\nUNO Environment\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for ViewFormattedField Class\nDESCRIPTION: Sphinx documentation configuration that generates class documentation for ViewFormattedField. Includes undocumented members, inheritance information, and inherited members in the output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/view/view_formatted_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.dialog.dl_control.view.view_formatted_field.ViewFormattedField\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Show Example on Windows\nDESCRIPTION: Command to run the Impress slide show example script on Windows systems. This uses Windows-style path separators to specify the location of the script from the project root.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slide_Show/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Impress\\Slide_Show\\start.py\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.common.props.struct_table_border_distances_props\nDESCRIPTION: This snippet uses Sphinx's ``automodule`` directive to automatically generate documentation for the ``ooodev.format.inner.common.props.struct_table_border_distances_props`` module. It includes all members, even undocumented ones, and shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.props.struct_table_border_distances_props.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\".. automodule:: ooodev.format.inner.common.props.struct_table_border_distances_props\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\"\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for HorzVertKind class in reStructuredText\nDESCRIPTION: This reStructuredText directive configures autodoc to generate comprehensive documentation for the HorzVertKind class from the ooodev.utils.kind.horz_ver_kind module, including all member functions and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/horz_ver_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.horz_ver_kind.HorzVertKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure for Events in reStructuredText\nDESCRIPTION: This snippet defines the structure of the events documentation using reStructuredText. It creates a table of contents that includes all files in the current directory and subdirectories for calc, props, and write events.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src_docs/event/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nEvents\n======\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n    calc/index\n    props/index\n    write/index\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for Point class in reStructuredText\nDESCRIPTION: This directive configures the autodoc extension to generate documentation for the Point class from the ooodev.utils.data_type.point module. The :members: option tells autodoc to include documentation for all members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/point.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.point.Point\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python module with Sphinx automodule directive\nDESCRIPTION: This snippet uses Sphinx's `automodule` directive to document the Python module `ooodev.exceptions.ex`.  The `:members:` option includes documentation for all members of the module. The `:undoc-members:` option ensures that even undocumented members are included in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/exceptions/ex.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.exceptions.ex\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Data Point Attribute Options\nDESCRIPTION: Configures the placement of data labels for a specific data point. This code targets the last data point in the first data series and positions its label inside the chart element.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_labels/data_labels.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.direct.chart2.series.data_labels.data_labels.attrib_options import PlacementKind\n# ... other code\nds = chart_doc.get_data_series()[0]\ndp = ds[-1]  # get the last data point\ndp.style_attribute_options(placement=PlacementKind.INSIDE)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Columns Properties\nDESCRIPTION: Shows how to retrieve text columns properties from an existing shape using the TextColumns.from_obj() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/text_columns/text_columns.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# get the properties from the shape\nf_style = TextColumns.from_obj(rect.component)\nassert f_style.prop_col_count == 2\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Show Demo with Custom Presentation File in Shell\nDESCRIPTION: Command to run the slide show demo with a custom presentation file path as a parameter. This allows users to specify which presentation file to display instead of using the default.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Basic_Show/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Basic_Show/start.py \"tests/fixtures/presentation/algs.odp\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sphinx RST Documentation Structure\nDESCRIPTION: Configures a Sphinx documentation page using RST markup, including a reference label and toctree directive that automatically includes all files in the directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/grid/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_chart2_format_direct_static_grid:\n\nChart2 Format Direct Grid\n=========================\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Importing CellFlags from ooouno\nDESCRIPTION: Import CellFlags constant used for querying cell contents in LibreOffice Calc\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.sheet.cell_flags import CellFlags\n```\n\n----------------------------------------\n\nTITLE: Retrieving Print Options Style in Calc with Python\nDESCRIPTION: This example shows how to retrieve and verify the print options style applied in a Calc document. It checks if the style's name conforms to expected values.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Printing.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for RangeConverter class documentation\nDESCRIPTION: This RST directive configures Sphinx to automatically generate documentation for the RangeConverter class, including all members, undocumented members, inheritance information, and inherited members from the Python OOO Dev Tools library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/rng/range_converter.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.rng.range_converter.RangeConverter\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation\nDESCRIPTION: This snippet represents the automodule directive in Sphinx documentation. It instructs Sphinx to generate documentation for the specified module, including its members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.point_struct_generic_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\".. automodule:: ooodev.adapter.awt.point_struct_generic_comp\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Module Contents with Sphinx automodule Directive\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the data_series module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.series.data_series.rst#2025-04-16_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.series.data_series\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting DispatchPartialT Class in Python\nDESCRIPTION: This code snippet uses the autoprotocol directive to generate documentation for the DispatchPartialT class. The class is located in the ooodev.utils.partial.dispatch_partial_t module of the python_ooo_dev_tools project.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/dispatch_partial_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoprotocol:: ooodev.utils.partial.dispatch_partial_t.DispatchPartialT\n```\n\n----------------------------------------\n\nTITLE: Adding Poetry to PATH on macOS\nDESCRIPTION: Command to add Poetry's executable path to system PATH on macOS\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/poetry_env.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"/Users/tutorial/.local/bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.configuration.group_element_comp automodule\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.configuration.group_element_comp` module. It includes members, undocumented members and inheritance details.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.configuration.group_element_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.configuration.group_element_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Animation Demo on Windows\nDESCRIPTION: PowerShell command to run the animation demo script on Windows systems, using backslashes for the file path to the start.py file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Animation_Demo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Impress\\Animation_Demo\\start.py\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.units\nDESCRIPTION: This reStructuredText directive is used to automatically generate documentation for the `ooodev.units` Python module. It includes all members, even undocumented and inherited ones, in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/units/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.units\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Importing UNO Control Numeric Field Component Module\nDESCRIPTION: Module import statement for OpenOffice development tools numeric field control adapter\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_numeric_field_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.adapter.awt.uno_control_numeric_field_comp import *\n```\n\n----------------------------------------\n\nTITLE: Module Documentation: ooodev.adapter.awt.uno_control_file_control_model_partial\nDESCRIPTION: This snippet documents the `ooodev.adapter.awt.uno_control_file_control_model_partial` module using `automodule` directive from Sphinx. It specifies that the documentation should include members, undocumented members, and inheritance information of the module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_file_control_model_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.uno_control_file_control_model_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Reference from Cell Range in Python\nDESCRIPTION: Retrieves the first cell from a given cell range using a class method, with coordinates relative to the range itself\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfirst_cell = cls.get_cell(cell_range=headerRange, col=0, row=0)\n```\n\n----------------------------------------\n\nTITLE: Subpackages section\nDESCRIPTION: This section utilizes the `toctree` directive to automatically generate a table of contents for the subpackages within `ooodev.format.proto.chart2.axis`. The `:maxdepth: 4` option specifies that the table of contents should include headings up to four levels deep.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.chart2.axis.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.proto.chart2.axis.positioning\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.common.props.struct_data_point_label_props\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate documentation for the ooodev.format.inner.common.props.struct_data_point_label_props module. It includes members, undocumented members, and inheritance information in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.common.props.struct_data_point_label_props.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.common.props.struct_data_point_label_props\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Border Kind Module\nDESCRIPTION: RestructuredText directive for auto-generating documentation for the border_kind module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.kind.border_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.inner.kind.border_kind\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting GalleryObj Class in reStructuredText\nDESCRIPTION: Sphinx documentation directive for auto-generating documentation for the GalleryObj class in the ooodev.utils.gallery module, including all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/gallery.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.gallery.GalleryObj\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Python OOo Dev Tools Basics Documentation\nDESCRIPTION: This snippet configures a Sphinx toctree directive to generate a table of contents for the 'Basics' section of the documentation. It uses the 'titlesonly' option to show only top-level headings and the 'glob' option to automatically include all matching files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Importing GUI Class from ooodev.gui in Python\nDESCRIPTION: This code snippet demonstrates how to import the recommended GUI class from the ooodev.gui module. This is the preferred method to use instead of the deprecated GUI class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/gui.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui import GUI\n\n# other code\n```\n\n----------------------------------------\n\nTITLE: Running Python Script with Parameters in Shell\nDESCRIPTION: Command to run the Bezier curve builder with a specific curve file selection. The parameter (1) specifies which Bezier curve file to use, with options ranging from 0 to 3.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Bezier_Builder/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start 1\n```\n\n----------------------------------------\n\nTITLE: Running the script on Windows\nDESCRIPTION: PowerShell command to execute the script with default parameters on Windows systems.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slides_Info/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Impress\\Slides_Info\\start.py\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the action_listener module, including all members, undocumented members and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.action_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.action_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting QiPartial Class with Sphinx in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the QiPartial class. It includes all members of the class in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/qi_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.partial.qi_partial.QiPartial\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting ooodev.format.writer.modify.page.header.transparency Module\nDESCRIPTION: This snippet uses Sphinx's autodoc extension to automatically generate documentation for the ooodev.format.writer.modify.page.header.transparency module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.page.header.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.page.header.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment\nDESCRIPTION: Command to activate the Python virtual environment for the current terminal session.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for String Utilities in reStructuredText\nDESCRIPTION: Sets up a table of contents (toctree) for string-related utility documentation. The toctree is configured to display only titles and include all matching files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/string/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry on Linux\nDESCRIPTION: Uses Poetry to install project dependencies in the activated virtual environment on Linux.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n(.venv) $ poetry install\n```\n\n----------------------------------------\n\nTITLE: Creating Unordered Lists with Bullets in RST\nDESCRIPTION: Shows how to create an unordered list with bullets using the ul-list class in reStructuredText.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. cssclass:: ul-list\n\n    * simple shapes: line, ellipse, rectangle, text;\n    * shape fills: solid, gradients, hatching, bitmaps;\n    * an OLE shape (a math formulae);\n    * polygons, multiple lines, partial ellipses.\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Project-Level Settings\nDESCRIPTION: TOML configuration for setting virtual environment location in poetry.toml file\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/poetry_env.rst#2025-04-16_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[virtualenvs]\nin-project = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Info Module Documentation\nDESCRIPTION: Sets up a table of contents tree (toctree) for the Info Module documentation. It displays only titles, has a maximum depth of 2 levels, and includes all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/modules/info/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 2\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Defining Color Roles in reStructuredText\nDESCRIPTION: Establishes custom color roles for text styling in HTML presentations, including basic colors like black, white, red, green, and more.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/roles/s5defs.txt#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: black\n.. role:: gray\n.. role:: silver\n.. role:: white\n.. role:: maroon\n.. role:: red\n.. role:: magenta\n.. role:: fuchsia\n.. role:: pink\n.. role:: orange\n.. role:: yellow\n.. role:: lime\n.. role:: green\n.. role:: olive\n.. role:: teal\n.. role:: cyan\n.. role:: aqua\n.. role:: blue\n.. role:: navy\n.. role:: purple\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Hierarchical directory layout showing the organization of modules for controlling OpenOffice document formatting and properties. Includes sections for Calc, Chart2, Draw and Impress applications with direct modification and style controls.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/ooodev/format/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nProject: /Amourspirit/python_ooo_dev_tools\nContent:\n                        id{{Highlight}}\n                    borders\n                        id{{Padding}}\n                        id{{Sides}}\n                        id{{Shadow}}\n            [style]\n                id{{BulletList}}\n                id{{Char}}\n                id{{Frame}}\n                id{{page}}\n                id{{Para}}\n        calc\n            [direct]\n                cell\n                    alignment\n                        id{{TextAlign}}\n                        id{{TextOrientation}}\n                        id{{Properties}}\n                    borders\n                        id{{Borders}}\n                        id{{Padding}}\n                        id{{Shadow}}\n                    font\n                        id{{Font}}\n                        id{{FontOnly}}\n                        id{{FontEffects}}\n                    background\n                        id{{Color}}\n                    cell_protection\n                        id{{CellProtection}}\n                    numbers\n                        id{{Numbers}}\n            [modify]\n                cell\n                    alignment\n                        id{{TextAlign}}\n                        id{{TextOrientation}}\n                        id{{Properties}}\n                    background\n                        id{{Color}}\n                    borders\n                        id{{Borders}}\n                    font\n                        id{{FontOnly}}\n                        id{{FontEffects}}\n                    numbers\n                        id{{Numbers}}\n                page\n                    background\n                        id{{Color}}\n                        id{{Img}}\n                    borders\n                        id{{Padding}}\n                        id{{Sides}}\n                        id{{Shadow}}\n                    page\n                        id{{LayoutSettings}}\n                        id{{Margins}}\n                        id{{PaperFormat}}\n                    header\n                        id{{Header}}\n                        area\n                            id{{Color}}\n                            id{{Img}}\n                        borders\n                            id{{Padding}}\n                            id{{Shadow}}\n                            id{{Sides}}\n                    footer\n                        id{{Footer}}\n                        area\n                            id{{Color}}\n                            id{{Img}}\n                        borders\n                            id{{Padding}}\n                            id{{Shadow}}\n                            id{{Sides}}\n                    sheet\n                        id{{Order}}\n                        id{{Printing}}\n                        id{{ScaleReduceEnlarge}}\n                        id{{ScaleNumOfPages}}\n                        id{{ScalePagesWidthHeight}}\n```\n\n----------------------------------------\n\nTITLE: Printing System Path in Python\nDESCRIPTION: This snippet prints the system's Python path, which is useful for debugging and verifying that the correct Python environment is being used. It uses the `sys` module to access the path and the `pprint` function for formatted output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_lo_pip.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\n    >>> pprint(sys.path)\n    ['/app/libreoffice/program',\n    '/home/guide/my-project/.venv/lib/python3.10/site-packages',\n    '/home/guide/my-project',\n    '/usr/lib/python310.zip',\n    '/usr/lib/python3.10',\n    '/usr/lib/python3.10/lib-dynload',\n    '/app/lib/python3.10/site-packages',\n    '/usr/lib/python3.10/site-packages',\n    '/home/guide/.var/app/org.libreoffice.LibreOffice/config/libreoffice/4/user/uno_packages/cache/uno_packages/lu56bigt.tmp_/apso.oxt/python/pythonpath']\n    >>> \n    \n```\n\n----------------------------------------\n\nTITLE: Displaying Command-Link Help Options\nDESCRIPTION: Shows available options for the oooenv cmd-link command that manages UNO Python links.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n(.venv) $ oooenv cmd-link -h\n```\n\n----------------------------------------\n\nTITLE: Document Reference to ooodev.adapter.form.confirm_delete_broadcaster_partial Module\nDESCRIPTION: ReStructuredText documentation reference for the confirm_delete_broadcaster_partial module in the ooodev.adapter.form package. It uses Sphinx's automodule directive to generate documentation from docstrings, showing all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.form.confirm_delete_broadcaster_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.form.confirm_delete_broadcaster_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Copy Script on Windows (PowerShell)\nDESCRIPTION: Command to execute the Impress slide copy utility on Windows systems using PowerShell syntax with backslashes in the file path.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Copy_Slide/README.md#2025-04-16_snippet_3\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Impress\\Copy_Slide\\start.py\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.partial.chart2.series.data_labels.borders.data_label_border_partial` module. It specifies that members, undocumented members, and inheritance information should be included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.series.data_labels.borders.data_label_border_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.chart2.series.data_labels.borders.data_label_border_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Parsing AutoModule Directive for Fixed Text Partial\nDESCRIPTION: Sphinx documentation directive for automatically generating documentation for the fixed_text_partial module, including members, undocumented members, and inheritance details\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.fixed_text_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.fixed_text_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Using External References with Intersphinx in RST\nDESCRIPTION: Examples of how to reference external documentation using the external+ prefix combined with intersphinx mapping names.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_18\n\nLANGUAGE: rst\nCODE:\n```\n:external+odevguiwin:ref:`class_robot_keys`\n:external+odevguiwin:py:meth:`odevgui_win.draw_dispatcher.DrawDispatcher.create_dispatch_shape`\n```\n\n----------------------------------------\n\nTITLE: Setting up reStructuredText Documentation for Popup Menu\nDESCRIPTION: Defines a reStructuredText documentation structure for Popup Menu functionality. It includes a reference anchor, section title, and table of contents directive that will display all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_common_gui_menus_popup_menu:.\n\nPopup Menu\n==========\n\n.. toctree::\n    :titlesonly:\n    :maxdepth: 4\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Windows Execution Path\nDESCRIPTION: Command for running the Hilbert curve generator on Windows systems using the full path to the script with Windows-style path separators.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Draw_Hilbert/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Draw\\Draw_Hilbert\\start.py 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents Tree in reStructuredText\nDESCRIPTION: Sets up a table of contents (toctree) directive that includes all files in the current directory. The configuration uses titlesonly to show only titles, sets a maximum depth of 4 levels, and uses glob pattern matching to include all files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/menu_bar/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 4\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Initializing Calc Document with python-ooo-dev-tools\nDESCRIPTION: This code snippet demonstrates how to initialize a Calc document and set its visibility using the python-ooo-dev-tools library. The example imports necessary modules and sets up a document that is subsequently used for applying sheet styles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.page.sheet import Order, Printing\nfrom ooodev.format.calc.modify.page.sheet import CalcStylePageKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 100)\n\n        style = Order(top_btm=False, first_pg=0, style_name=CalcStylePageKind.DEFAULT)\n        style.apply(doc)\n\n        style_obj = Order.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\n        assert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: FormatterTable Initialization and Formatting\nDESCRIPTION: This code snippet initializes a FormatterTable object and sets the default formatting to float with two decimal places and a minimum width of 9 characters. It also specifies that the formatting should not be applied to rows with index 0 or 9.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfl = FormatterTable(format=(\".2f\", \">9\"), idxs=(0, 9))\n```\n\n----------------------------------------\n\nTITLE: Creating Calc Document and Writing Python Script\nDESCRIPTION: This snippet creates a Calc document, writes a Python script to it, and verifies the script content. It uses the ooodev library to interact with LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.string.str_list import StrList\n\ndef main():\n\n    loader = Lo.load_office(connector=Lo.ConnectPipe(), opt=Options(log_level=logging.DEBUG))\n    doc = CalcDoc.create_doc(loader=loader, visible=True)\n    try:\n        psa = doc.python_script\n        assert psa is not None\n        code = StrList(sep=\"\\n\")\n        code.append(\"from __future__ import annotations\")\n        code.append()\n        code.append(\"def say_hello() -> None:\")\n        with code.indented():\n            code.append('print(\"Hello World!\")')\n        code.append()\n        code_str = str(code)\n        assert psa.is_valid_python(code_str)\n        psa.write_file(\"MyFile\", code_str, allow_override=True)\n        psa_code = psa.read_file(\"MyFile\")\n        assert psa_code == code_str\n\n    finally:\n        doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for ItemStyleKind in Python\nDESCRIPTION: Sphinx documentation directive that automatically generates class documentation for the ItemStyleKind class from the ooodev.utils.kind.item_style_kind module. The directive includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/item_style_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.item_style_kind.ItemStyleKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Gradient to Chart Title in Python\nDESCRIPTION: This snippet showcases how to apply a preset gradient to a chart title using the `style_area_gradient_from_preset` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_gradient import PresetGradientKind\n\n# ... other code\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_area_gradient_from_preset(\n            preset=PresetGradientKind.PASTEL_DREAM,\n        )\n```\n\n----------------------------------------\n\nTITLE: Create Project Directory\nDESCRIPTION: These commands create a directory for the LibreOffice Python project and navigate into it. This provides a dedicated space for the project's files and virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/myproject\ncd ~/myproject\n```\n\n----------------------------------------\n\nTITLE: Autodoc for ViewSpinButton Class\nDESCRIPTION: This snippet demonstrates the use of Sphinx's autoclass directive to automatically generate documentation for the ViewSpinButton class. It specifies options to exclude undocumented members, show inheritance, and include inherited members in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/view/view_spin_button.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.dialog.dl_control.view.view_spin_button.ViewSpinButton\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Applying Axis Line Positioning to Chart in Python\nDESCRIPTION: This snippet configures the axis line for the x-axis of the chart, positioning it at a specific value, which is useful for customizing the appearance of charts in presentations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/axis/positioning.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.chart.chart_axis_position import ChartAxisPosition\n# ... other code\n\nchart_doc.axis_x.style_axis_pos_axis_line(\n    cross=ChartAxisPosition.VALUE, value=2000\n)\n```\n\n----------------------------------------\n\nTITLE: Splitting Calc Window into Two View Panes (Python)\nDESCRIPTION: This code splits a Calc window into two view panes at a specified cell position using the SplitWindow dispatch command.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncell_name = sheet.get_cell(col=0, row=empty_row_num - 2).get_cell_str()\nprint(f\"Splitting at: {cell_name}\")\nCalc.split_window(doc=doc, cell_name=cell_name)\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Partial Documentation in reStructuredText\nDESCRIPTION: This snippet creates a table of contents (toctree) in Sphinx documentation. It includes all files in the current directory, displaying only their titles, and using a globbing pattern to match all files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/partial/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Importing UNO Control Container Partial Module\nDESCRIPTION: Demonstrates how to import the UnoControlContainerPartial module from the ooodev.adapter.awt package for OpenOffice development\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_container_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.adapter.awt.uno_control_container_partial import UnoControlContainerPartial\n```\n\n----------------------------------------\n\nTITLE: Tree Control Model Partial Module\nDESCRIPTION: A partial implementation of tree control model adapters for OpenOffice development tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.tree.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nooodev.adapter.awt.tree.tree_control_model_partial\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment with Specific Python Version on Windows\nDESCRIPTION: Creates a virtual environment using Virtualenv with a specific Python version that matches LibreOffice's Python version.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nPS C:\\python_ooo_dev_tools> virtualenv -p \"C:\\Users\\user\\.pyenv\\pyenv-win\\versions\\3.8.10\\python.exe\" .venv\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for Chart2 Axis Positioning\nDESCRIPTION: Sphinx directive for auto-generating documentation from the ooodev.format.chart2.direct.axis.positioning Python module. The directive includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.axis.positioning.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.axis.positioning\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Auto-generating Module Documentation\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.partial.numbers.numbers_numbers_partial` module.  It includes the module's members, even those that are undocumented, and displays the inheritance hierarchy. This helps to provide a comprehensive overview of the module's structure and functionality.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.numbers.numbers_numbers_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.numbers.numbers_numbers_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuration Update Access Component Module Documentation\nDESCRIPTION: Provides documentation and autodoc generation for configuration update access component module in OpenOffice development tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.configuration.configuration_update_access_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.configuration.configuration_update_access_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Special CSS to Collapsible Sections\nDESCRIPTION: Demonstrates how to apply custom CSS formatting to collapsible sections using the rst-collapse CSS class for better spacing and appearance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_25\n\nLANGUAGE: rst\nCODE:\n```\n.. cssclass:: rst-collapse\n\n    .. collapse:: Some Title\n\n        Fancy stuff\n```\n\n----------------------------------------\n\nTITLE: Documenting MenuLookupKind Class in Python\nDESCRIPTION: This snippet uses the Sphinx autoclass directive to generate documentation for the MenuLookupKind class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/menu_lookup_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.menu_lookup_kind.MenuLookupKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Running Draw Gradient Example with Custom Colors\nDESCRIPTION: Illustrates how to create a custom gradient with specified start and end colors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/gradient/README.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npython -m start -k gradient -s dark-red -e lime-green\n```\n\n----------------------------------------\n\nTITLE: Install ooo-dev-tools\nDESCRIPTION: This command installs the `ooo-dev-tools` package using `pip`. `ooo-dev-tools` provides utilities and helpers for developing LibreOffice extensions and scripts with Python.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install ooo-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in reStructuredText\nDESCRIPTION: This snippet configures a table of contents (toctree) in reStructuredText. It sets options for title-only display, maximum depth of 4 levels, and includes all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/context/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 4\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Importing style_para_special_kind Module in Python\nDESCRIPTION: This snippet demonstrates how to import the style_para_special_kind module from the ooodev.format.writer.style.para.kind package. The module is likely used for handling special paragraph styles in LibreOffice Writer documents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.style.para.kind.style_para_special_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.format.writer.style.para.kind import style_para_special_kind\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows\nDESCRIPTION: Activates the Python virtual environment on Windows using PowerShell for isolated development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nPS C:\\python_ooo_dev_tools> .\\.venv\\Scripts\\activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart2 Legend Font Formatting in Python\nDESCRIPTION: Sets up the environment and demonstrates full chart formatting including legend font styling. Includes opening a document, setting up chart properties, and applying legend font formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/font.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.legend.font import Font as LegendFont\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(Path.cwd() / \"tmp\" / \"pie_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BRICK, width=1)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.GREEN_DARK4, StandardColor.TEAL_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        legend_font_style = LegendFont(b=True, color=StandardColor.PURPLE, size=12)\n        Chart2.style_legend(chart_doc=chart_doc, styles=[legend_font_style])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Sphinx Table of Contents Configuration\nDESCRIPTION: Configures a nested table of contents using Sphinx glob directive to dynamically include all documentation pages with only titles displayed\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/ma/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Running Draw Grouper Demo in Cross-Platform Environment\nDESCRIPTION: Command to run the Draw Grouper demo using Python module syntax from the current example folder. This approach works on any operating system.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Grouper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Presentation Display Mode Roles\nDESCRIPTION: Defines specialized roles for controlling text display in different presentation modes including slides, outline, print, and handout views.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/roles/s5defs.txt#2025-04-16_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: slide\n   :class: slide-display\n\n.. role:: outline\n\n.. role:: print\n\n.. role:: handout\n\n.. role:: incremental\n.. default-role:: incremental\n```\n\n----------------------------------------\n\nTITLE: Autodoc for Shortcuts Class\nDESCRIPTION: This snippet uses the autoclass directive to generate documentation for the Shortcuts class. It includes all members and undocumented members. This assumes that the class `ooodev.gui.menu.Shortcuts` is defined in a Python module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/shortcuts.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.gui.menu.Shortcuts\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Listing Available Solver Services in LibreOffice Calc with Python\nDESCRIPTION: Implementation of the Calc.list_solvers method that displays all available solver services in LibreOffice. This method helps developers identify which solver implementations are available in their specific LibreOffice installation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@staticmethod\ndef list_solvers() -> None:\n    print(\"Services offered by the solver:\")\n    nms = Info.get_service_names(service_name=\"com.sun.star.sheet.Solver\")\n    if nms is None:\n        print(\"  none\")\n        return\n\n    for service in nms:\n        print(f\"  {service}\")\n    print()\n```\n\n----------------------------------------\n\nTITLE: Testing ooo-dev-tools Package in LibreOffice Writer using APSO Console\nDESCRIPTION: This code snippet demonstrates how to use the installed ooo-dev-tools package to create a simple 'Hello World!' script in LibreOffice Writer using the APSO console. It imports the WriteDoc class, defines a function to append text to the document, and executes the function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_install_pkg_zaz_pip.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.write import WriteDoc\n\ndef say_hello():\n    doc = WriteDoc.from_current_doc()\n    cursor = doc.get_cursor()\n    cursor.append_para(text=\"Hello World!\")\n\nsay_hello()\n```\n\n----------------------------------------\n\nTITLE: Installing OOO-DEV-TOOLS Package\nDESCRIPTION: Command to install the ooo-dev-tools package which provides utilities for automating LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install ooo-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Table of Contents\nDESCRIPTION: RST directive for creating a table of contents that shows only titles and includes all files in the current directory\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Running Impress Text Extractor on Windows\nDESCRIPTION: Command for running the text extraction script specifically on Windows systems using PowerShell-style path notation with backslashes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Extract_Text/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Impress\\Extract_Text\\start.py\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.adapter.awt.tab_controller_model_partial\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the `ooodev.adapter.awt.tab_controller_model_partial` module. It specifies that the generated documentation should include the module's members, even undocumented ones, and display inheritance information. The `automodule` directive is a feature of Sphinx, a Python documentation generator.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.tab_controller_model_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.tab_controller_model_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Key Events\nDESCRIPTION: This snippet uses the automodule directive to generate documentation for the `ooodev.adapter.awt.key_events` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options specify that the documentation should include all members, undocumented members, and inheritance information, respectively.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.key_events.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.key_events\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Mixing Different List Types in Seealso Blocks\nDESCRIPTION: Demonstrates how to combine standard ul-list with src-link lists in a seealso block to create what appears as a single list in HTML output due to custom CSS styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_16\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n\n    .. cssclass:: ul-list\n\n        * :py:data:`~.type_var.TupleArray`\n\n    .. cssclass:: src-link\n\n        * :odev_src_calc_meth:`get_array`\n```\n\n----------------------------------------\n\nTITLE: DefaultBuilder Class Auto-Documentation\nDESCRIPTION: This snippet represents the auto-generated documentation for the DefaultBuilder class using the Sphinx autodoc extension. It includes the class members and undocumented members. The documentation is generated from the python code and docstrings of the DefaultBuilder class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/builder/default_builder.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.utils.builder.default_builder.DefaultBuilder\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents for LibreOffice Python Documentation\nDESCRIPTION: Sets up a reStructuredText toctree directive that organizes documentation into category-based sections. The configuration uses titlesonly, maxdepth of 2, and glob options to structure the documentation for different LibreOffice components.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 2\n    :glob:\n\n    calc/index\n    chart2/index\n    draw/index\n    writer/index\n    common/index\n```\n\n----------------------------------------\n\nTITLE: Getting the Last Page\nDESCRIPTION: Illustrates how to access the last page in a Draw document using the index `[-1]`. This is a standard Python idiom for accessing the last element of a sequence.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_pages.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = DrawDoc(Draw.create_draw_doc(loader))\n>>> doc.slides[-1]\n<ooodev.draw.DrawPage object at 0x7f7f0c0b2b90>\n```\n\n----------------------------------------\n\nTITLE: Retrieving area pattern settings from an existing style in LibreOffice\nDESCRIPTION: This code snippet shows how to retrieve the area pattern settings from an existing style in a LibreOffice Draw document. It uses the Pattern.from_style method to get the pattern properties from the default drawing style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/pattern.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nf_style = Pattern.from_style(\n    doc=doc.component,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Running Impress Master Pages Example on Windows\nDESCRIPTION: PowerShell command to run the Impress master pages example specifically on Windows systems by specifying the path to the start.py file using Windows path syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Master_Use/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Impress\\Master_Use\\start.py\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in RST for ooodev.format.draw\nDESCRIPTION: This RST code defines the structure of the ooodev.format.draw package documentation. It includes subpackages and module contents using Sphinx directives.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nooodev.format.draw package\n==========================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.draw.direct\n   ooodev.format.draw.modify\n   ooodev.format.draw.style\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.draw\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Font Formatting Setup\nDESCRIPTION: Sets up the basic environment for chart formatting including opening a document, setting up the chart area with gradient background and border, and applying title font effects.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/font.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.title.font import Font as TitleFont\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(Path.cwd() / \"tmp\" / \"pie_flat_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.PURPLE_DARK1, width=0.7)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.BLUE_DARK1, StandardColor.PURPLE_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        title_font_effect = TitleFont(b=True, i=True, u=True, color=StandardColor.PURPLE_DARK2, shadowed=True)\n        Chart2.style_title(chart_doc=chart_doc, styles=[title_font_effect])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for Dispatch Documentation\nDESCRIPTION: ReStructuredText directive that sets up a table of contents for dispatch documentation files. Uses titlesonly option and glob pattern to include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/dispatch/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart2 Data Label Font Formatting\nDESCRIPTION: Sets up the environment and basic chart formatting including background gradient and border styles. Demonstrates initialization of chart document and application of font formatting to data labels.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.series.data_labels.font import FontOnly as LblFontOnly\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_LIGHT3, width=0.7)\n        chart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.TEAL_BLUE)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        data_lbl_font = LblFontOnly(name=\"Lucida Calligraphy\", size=14, font_style=\"italic\")\n        Chart2.style_data_series(chart_doc=chart_doc, styles=[data_lbl_font])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Drawing Mathematical Formula in OLE Shape - Python\nDESCRIPTION: The function draw_formula() in Draw class renders a math formula as an OLE shape in a slide. It converts dimensions using _get_unit_mm_int() and sets up the shape and its model with CLSID and formula properties. Requires an XDrawPage and formula details for positioning.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# in show() in draw_picture.py\ns = curr_slide.draw_formula(\n    formula=\"func e^{i %pi} + 1 = 0\",\n    x=70,\n    y=20,\n    width=75,\n    height=40,\n)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive in reStructuredText\nDESCRIPTION: This snippet uses the automodule directive in reStructuredText to automatically generate documentation for the `ooodev.format.writer.direct.char.font` module. It includes the `:members:`, `:undoc-members:`, and `:show-inheritance:` options to specify which parts of the module should be included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.char.font.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.char.font\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Directive for AdjustmentListener\nDESCRIPTION: RST directive to automatically generate documentation for the adjustment_listener module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.adjustment_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.adjustment_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment\nDESCRIPTION: Command to create a new Python virtual environment using the system Python.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/python3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation for Page Footer Hatch Area\nDESCRIPTION: ReStructuredText directive for automatically generating documentation for the page footer hatch area module, including member details and inheritance information\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.page.footer.area.hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.page.footer.area.hatch\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.xml.dom.node_list_comp module documentation\nDESCRIPTION: This snippet is a directive for generating documentation using the `automodule` directive within the Sphinx documentation generator. It specifies that documentation should be created for the `ooodev.adapter.xml.dom.node_list_comp` module, including its members, even undocumented ones, and also to show inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.xml.dom.node_list_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.xml.dom.node_list_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python module using automodule directive\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.table.cell_partial` module.  It includes the module's members, even those that are undocumented, and displays the class inheritance hierarchy. The `automodule` directive is part of the Sphinx documentation generator.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.table.cell_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.table.cell_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for Prop class in ooodev.utils.comp.prop module\nDESCRIPTION: This RST code snippet configures Sphinx documentation for the Prop class, specifying to include all members, undocumented members, inheritance information, and inherited members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/comp/prop.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.comp.prop.Prop\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in reStructuredText for App Menu Documentation\nDESCRIPTION: Creates a table of contents directive in reStructuredText that includes all files in the current directory. It is configured to show only titles, with a maximum depth of 4 levels, and uses a glob pattern to include all files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/app_menu/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 4\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Documenting Python module using automodule\nDESCRIPTION: This code snippet demonstrates the use of `automodule` directive in reStructuredText to automatically generate documentation for a Python module.  The module's members, undocumented members, and inheritance are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.cell_style_base.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.cell_style_base\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: XML Table of Contents\nDESCRIPTION: This code snippet defines a table of contents (toctree) in reStructuredText for XML documentation. The toctree directive automatically generates a table of contents based on the structure of the linked documents, specified using globbing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/io/xml/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for ShapeDispatchKind\nDESCRIPTION: Sphinx directive that automatically generates documentation for the ShapeDispatchKind class from the ooodev.utils.dispatch.shape_dispatch_kind module. It includes all members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/dispatch/shape_dispatch_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.dispatch.shape_dispatch_kind.ShapeDispatchKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Running Slide Chart Script (Cross-Platform)\nDESCRIPTION: Command to run the slide chart generation script from the current example folder, compatible with all platforms.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart2/slide_chart/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Testing UNO Import in Python Environment\nDESCRIPTION: Verifies that the UNO module can be imported in Python, confirming correct LibreOffice integration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nPS C:\\python_ooo_dev_tools> .\\.venv\\scripts\\activate\n(.venv) PS C:\\python_ooo_dev_tools> python\nPython 3.8.10 (default, Mar 23 2022, 15:43:48) [MSC v.1928 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import uno\n>>>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Structure\nDESCRIPTION: Defines the documentation structure for Chart2 formatting using ReStructuredText directives. Includes a table of contents with direct and direct_static index files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _help_chart2_format:\n\nChart2 Formatting and Style\n===========================\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    direct/index\n    direct_static/index\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in RST\nDESCRIPTION: Shows how to add comments in reStructuredText documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_14\n\nLANGUAGE: rst\nCODE:\n```\n..\n    Figure 3\n\n.. cssclass:: diagram invert\n\n    .. _ch03fig_peek_services_interface:\n\n    .. figure:: https://somedomain.com/img.png\n        :alt: Methods to Investigate the Service and Interface\n        :figclass: align-center\n\n        :Methods to Investigate the Service and Interface\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry on Windows\nDESCRIPTION: Uses Poetry to install project dependencies in the activated virtual environment on Windows.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n(.venv) PS C:\\python_ooo_dev_tools> poetry install\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Show Example from Current Folder (Cross Platform)\nDESCRIPTION: Command to run the Impress slide show example script from the current example directory. This is a cross-platform command that works on Windows, Linux and macOS.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slide_Show/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Running Python Script for Password-Protected Spreadsheet (Cross-Platform)\nDESCRIPTION: Command for opening a password-protected spreadsheet using a Python script. This cross-platform command runs from the current directory and requires the specified ODS file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Calc/Show_Sheet/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m start --show --file \"../../../../resources/ods/totals.ods\"\n```\n\n----------------------------------------\n\nTITLE: Importing CustomPropertiesPartial Class in Python\nDESCRIPTION: This code snippet shows how to import the CustomPropertiesPartial class from the ooodev.utils.partial.custom_properties_partial module. It's typically used in Python scripts for LibreOffice/OpenOffice development.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/custom_properties_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.utils.partial.custom_properties_partial import CustomPropertiesPartial\n```\n\n----------------------------------------\n\nTITLE: Getting font effects from a Calc cell\nDESCRIPTION: Demonstrates how to retrieve the current font effects applied to a cell. The example checks if the text color of the cell is red using an assertion.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font_effects.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = cell.style_font_effect_get()\nassert f_effects.prop_color == CommonColor.RED\n```\n\n----------------------------------------\n\nTITLE: Documenting SpreadsheetDrawPageComp Module\nDESCRIPTION: Sphinx autodoc configuration for exposing module members, inherited methods, and undocumented elements\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.sheet.spreadsheet_draw_page_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.sheet.spreadsheet_draw_page_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Adding Line Highlighting to Code Tabs\nDESCRIPTION: Demonstrates how to emphasize specific lines in code blocks using the emphasize-lines option in code-tab directive.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_20\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n\n    .. code-tab:: python\n        :emphasize-lines: 2, 3, 4, 5\n\n        def _toggle_side_bar(self) -> None:\n            if not RobotKeys:\n                Lo.print(\"odevgui_win not found.\")\n                return\n            RobotKeys.send_current(SendKeyInfo(WriterKeyCodes.KB_SIDE_BAR))\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Font Mapping\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.adapter.awt.font_mapping_use_partial` module. It includes documentation for members, even undocumented ones, and displays inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.font_mapping_use_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.font_mapping_use_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents with Sphinx in reStructuredText\nDESCRIPTION: This code snippet defines a Sphinx toctree directive that creates a table of contents for documentation related to font style modification in LibreOffice Draw. It specifies display options including title-only format, maximum depth of 1, and includes all files in the current directory via glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/font/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Defining Writer Format Modification Documentation Structure with reStructuredText\nDESCRIPTION: Creates a documentation structure for Writer format modification options using reStructuredText toctree directive. The toctree organizes content into three main sections: character formatting (char/index), paragraph formatting (para/index), and page formatting (page/index) with a maximum depth of 2.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _help_writer_format_modify:\n\nModify\n======\n\n.. toctree::\n    :maxdepth: 2\n\n    char/index\n    para/index\n    page/index\n```\n\n----------------------------------------\n\nTITLE: Running the Impress Slide Modification Script on Linux/Mac\nDESCRIPTION: Command to run the script on Linux or Mac systems using Unix-style path syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Modify_Slides/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Modify_Slides/start.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging with Office Loader Options in OooDev\nDESCRIPTION: Shows how to configure logging when starting LibreOffice by setting log_level in the Options object. This enables DEBUG level logging for the application session.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom ooodev.io.log import logging as logger\n\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.loader.inst.options import Options\n\n\ndef main():\n\n    loader = Lo.load_office(connector=Lo.ConnectPipe(), opt=Options(log_level=logging.DEBUG))\n    doc = None\n    try:\n        doc = CalcDoc.create_doc(loader=loader, visible=True)\n        logger.debug(\"Hello World\")\n        # do other work\n    finally:\n        if doc:\n            doc.close()\n        Lo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Configuring Intersphinx Mapping in Python\nDESCRIPTION: Shows how to set up intersphinx_mapping in conf.py to enable cross-referencing to external documentation sources.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nintersphinx_mapping = {\"odevguiwin\": (odevgui_win_url, None)}\n```\n\n----------------------------------------\n\nTITLE: Setting Header Border Shadow in Python\nDESCRIPTION: This snippet describes setting shadow properties for header borders in a Calc document using ooodev. It requires defining shadow attributes such as `color` and `width` before applying them via `Styler.apply`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/bordes.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nshadow_style = Shadow(\n    color=StandardColor.BLUE_DARK2,\n    width=1.5,\n    style_name=CalcStylePageKind.DEFAULT,\n)\nStyler.apply(doc, header_style, shadow_style)\n```\n\n----------------------------------------\n\nTITLE: Drawing Shapes Using Polar and Cartesian Coordinates - Python\nDESCRIPTION: In _draw_shapes(), a transparent circle is drawn with specified position and radius using draw_circle(), and a polar line is drawn with x, y, angle, and distance parameters with draw_polar_line(). The shapes' properties such as FillColor and LineWidth are adjusted post-creation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# in _draw_shapes() in draw_picture.py\n# gray transparent circle; uses (x,y), radius\ncircle2 = curr_slide.draw_circle(x=40, y=150, radius=20)\ncircle2.component.FillColor = CommonColor.GRAY\ncircle2.set_transparency(level=Intensity(25))\n\n# thick line; uses (x,y), angle clockwise from x-axis, length\nline2 = curr_slide.draw_polar_line(x=60, y=200, degrees=45, distance=100)\nline2.component.LineWidth = 300\n```\n\n----------------------------------------\n\nTITLE: Direct FlatPak Connection Command\nDESCRIPTION: Example of directly connecting to LibreOffice FlatPak using subprocess.Popen. This demonstrates the underlying command used to establish a socket connection to FlatPak LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_flatpak_automate_lo.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# is it important to use shell=True\nimport os\nfrom subprocess import Popen\nPopen(f'flatpak run org.libreoffice.LibreOffice/x86_64/stable --invisible --norestore --nofirststartwizard --nologo --accept=\"socket,host=localhost,port=2002,tcpNoDelay=1;urp;\" --display {os.getenv(\"DISPLAY\")}', shell=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties with Center Alignment and Width Directly\nDESCRIPTION: This Python code demonstrates setting table properties like alignment (CENTER), above, below, and width directly using `style_direct` method in LibreOffice Writer through `ooodev`. It adds a table and then applies the desired formatting properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntable = cursor.add_table(\n            name=\"My_Table\",\n            table_data=tbl_data,\n            first_row_header=False,\n            tbl_bg_color=CommonColor.LIGHT_BLUE,\n            tbl_fg_color=CommonColor.BLACK,\n        )\n\n        table.style_direct.style_table_props(\n            relative=False,\n            align=TableAlignKind.CENTER,\n            above=UnitMM(2.0),\n            below=UnitMM(1.8),\n            width=UnitMM(60.0),\n        )\n```\n\n----------------------------------------\n\nTITLE: Finding LibreOffice Python Path using APSO Console\nDESCRIPTION: Python commands to determine the system Python executable path that LibreOffice is using through the APSO console.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_lo_install_pip.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.executable\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Sphinx Documentation\nDESCRIPTION: This snippet utilizes the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.format.inner.direct.chart2.series.data_series.area.pattern` module. The `:members:` option includes documented members, `:undoc-members:` includes undocumented members, and `:show-inheritance:` displays the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.series.data_series.area.pattern.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.series.data_series.area.pattern\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying LineProperties to Chart Wall in Python\nDESCRIPTION: Code snippet showing how to create and apply LineProperties to a chart wall. It sets a purple color with specific width and transparency level.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.wall.borders import LineProperties as WallLineProperties\n# ... other code\n\nwall_bdr_line = WallLineProperties(color=StandardColor.PURPLE_DARK2, width=1.2, transparency=30)\nChart2.style_wall(chart_doc=chart_doc, styles=[wall_bdr_line])\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Python Module\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.table.list_position_cell_binding_comp` module. It includes members, undocumented members, and inheritance information in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.table.list_position_cell_binding_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.table.list_position_cell_binding_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Directive for SizeMM Class Documentation\nDESCRIPTION: Uses Sphinx's autoclass directive to generate comprehensive documentation for the SizeMM class from the ooodev.utils.data_type.size_mm module. The directive includes all class members in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/size_mm.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.size_mm.SizeMM\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Bash\nDESCRIPTION: Creates a directory named 'myproject' in the user's home directory and navigates into it. This directory serves as the root for the new project.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_poetry_env.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/myproject\ncd ~/myproject\n```\n\n----------------------------------------\n\nTITLE: Module Contents\nDESCRIPTION: This snippet employs the `automodule` directive to automatically document the contents of the `ooodev.format.inner.partial.chart2.legend.position` module. It includes the module's members, undocumented members, and inheritance hierarchy in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.legend.position.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.chart2.legend.position\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive in reStructuredText\nDESCRIPTION: This snippet demonstrates the usage of the `automodule` directive in reStructuredText for automatically generating documentation from a Python module. It includes options to show members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.image.options.names.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.image.options.names\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx toctree Directive\nDESCRIPTION: This snippet utilizes the Sphinx toctree directive to create a table of contents. The ':titlesonly:' option ensures that only the titles of the documents are displayed in the table of contents. The ':glob:' option includes all files matching the pattern '*'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/partial/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Calc Cell Alignment Module Documentation\nDESCRIPTION: This snippet documents the `ooodev.format.calc.direct.cell.alignment` module.  It utilizes `automodule` from the `sphinx` documentation generator to automatically extract documentation from the module's docstrings, including members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.direct.cell.alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.calc.direct.cell.alignment\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Preset Chart Area Image in Python\nDESCRIPTION: This code snippet demonstrates applying a preset image to the chart area background using the `style_area_image_from_preset` method. The desired image is selected via the `PresetImageKind` enum; here, `PresetImageKind.ICE_LIGHT` is used.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/area.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_image import PresetImageKind\n# ... other code\n\n_ = chart_doc.style_border_line(color=StandardColor.BLUE_LIGHT2, width=0.7)\n_ = chart_doc.style_area_image_from_preset(PresetImageKind.ICE_LIGHT)\n```\n\n----------------------------------------\n\nTITLE: Running Text Chart Example (Windows)\nDESCRIPTION: Command to execute the text chart example script on Windows systems using PowerShell and the direct path to the script file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart2/text_chart/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Chart2\\text_chart\\start.py\n```\n\n----------------------------------------\n\nTITLE: Running Chart Demo on Linux/Mac\nDESCRIPTION: Command to run the chart demo on Linux or Mac systems by specifying the full path to the start.py script. The -k parameter specifies the chart type (bar in this example).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart/Chart_views/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Chart/Chart_views/start.py -k bar\n```\n\n----------------------------------------\n\nTITLE: Documenting DocIoPartial Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the DocIoPartial class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/doc_io_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.partial.doc_io_partial.DocIoPartial\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Subtracting CellObj from RangeObj in Python\nDESCRIPTION: Demonstrates how to subtract a CellObj instance from a RangeObj instance to reduce both row and column dimensions. The example creates a range F10:H15 and subtracts cell (1,1), resulting in F10:F13.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/ranges/range_obj.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> from ooodev.utils.data_type.range_obj import RangeObj\n>>> from ooodev.utils.data_type.cell_obj import CellObj\n>>>\n>>> rng1 = RangeObj(col_start=\"F\", col_end=\"H\", row_start=10, row_end=15, sheet_idx=0) \n>>> str(rng1)\n'F10:H15'\n>>> rng1.row_count\n6\n>>> rng1.col_count \n3\n>>> rng2 = rng1 - CellObj.from_idx(1, 1)\n>>> str(rng2)\n'F10:F13'\n>>> repr(rng2)\n\"RangeObj(col_start='F', col_end='F', row_start=10, row_end=13, sheet_idx=0)\"\n>>> rng2.row_count\n4\n>>> rng2.col_count\n1\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Template\nDESCRIPTION: ReStructuredText documentation template that defines the auto-documentation settings for the set_partial module\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.container.set_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.container.set_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Get Style Family and Style Names in Calc (Python)\nDESCRIPTION: This snippet demonstrates how to retrieve and print the style family names and style names associated with a Calc document. It utilizes the Info class to access style information and Lo class for document handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter22.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"# in styles_all_info.py\nfrom __future__ import annotations\n\nimport uno\nfrom com.sun.star.sheet import XSpreadsheetDocument\n\nfrom ooodev.office.calc import Calc\nfrom ooodev.utils.file_io import FileIO\nfrom ooodev.utils.info import Info\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.props import Props\nfrom ooodev.utils.type_var import PathOrStr\n\n\nclass StylesAllInfo:\n    def __init__(self, fnm: PathOrStr, rpt_cell_styles: bool) -> None:\n        _ = FileIO.is_exist_file(fnm, True)\n        self._fnm = FileIO.get_absolute_path(fnm)\n        self._rpt_cell_styles = rpt_cell_styles\n\n    def main(self) -> None:\n        with Lo.Loader(Lo.ConnectSocket(headless=True)) as loader:\n\n            doc = Calc.open_doc(fnm=self._fnm, loader=loader)\n            try:\n\n                # get all the style families for this document\n                style_families = Info.get_style_family_names(doc)\n                print(f\"Style Family Names ({len(style_families)})\")\n                for style_family in style_families:\n                    print(f\"  {style_family}\")\n                print()\n\n                # list all the style names for each style family\n                for i, style_family in enumerate(style_families):\n                    print(f'{i + 1}. \\\"{style_family}\\\" Family Styles:')\n                    style_names = Info.get_style_names(\n                        doc=doc, family_style_name=style_family\n                    )\n                    Lo.print_names(style_names)\n\n                if self._rpt_cell_styles:\n                    print()\n                    self._report_cell_styles(doc)\n\n            except Exception:\n                raise\n\n            finally:\n                Lo.close_doc(doc=doc, deliver_ownership=True)\n\n    def _report_cell_styles(self, doc: XSpreadsheetDocument) -> None:\n        Props.show_props(\n            \"CellStyles Default\", Info.get_style_props(\n                doc=doc, family_style_name=\"CellStyles\", prop_set_nm=\"Default\"\n            )\n        )\n\n        Props.show_props(\n            \"PageStyles Default\", Info.get_style_props(\n                doc=doc, family_style_name=\"PageStyles\", prop_set_nm=\"Default\"\n            )\n        )\n\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents with RST\nDESCRIPTION: Configures a table of contents directive using reStructuredText (RST) syntax with glob matching and title-only display\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/io/zip/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation\nDESCRIPTION: ReStructuredText documentation showing the package structure and module organization for LibreOffice Calc page area formatting tools.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.page.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nooodev.format.inner.modify.calc.page.area package\n=================================================\n\nSubmodules\n----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.modify.calc.page.area.color\n   ooodev.format.inner.modify.calc.page.area.img\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.inner.modify.calc.page.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Page Area Hatch in Writer\nDESCRIPTION: This snippet shows how to set an Area hatch for a Page style in Writer using the Hatch class and a preset hatch from the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.area import Hatch as PageStyleHatch\nfrom ooodev.format.writer.modify.page.area import PresetHatchKind, WriterStylePageKind\n# ... other code\n\nhatch_style = PageStyleHatch.from_preset(\n    preset=PresetHatchKind.RED_45_DEGREES_NEG_TRIPLE, style_name=WriterStylePageKind.STANDARD\n)\nhatch_style.apply(doc)\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Fills to Chart Areas\nDESCRIPTION: Shows how to apply preset pattern fills to chart walls using the Pattern class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/area.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.wall.area import Pattern as WallPattern, PresetPatternKind\n# ... other code\n\nwall_pattern = WallPattern.from_preset(chart_doc, PresetPatternKind.ZIG_ZAG)\nChart2.style_wall(chart_doc=chart_doc, styles=[wall_pattern])\n```\n\n----------------------------------------\n\nTITLE: Checking Cell in Range\nDESCRIPTION: Shows how to check if a cell exists within a range using the 'in' operator.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nrng = RangeObj.from_range(\"A1:C4\")\nassert \"B2\" in rng\nTrue\n```\n\n----------------------------------------\n\nTITLE: Building Documentation on Linux\nDESCRIPTION: Generates HTML documentation from source files using Sphinx in the Linux environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n(.venv) $ make html\n```\n\n----------------------------------------\n\nTITLE: Sphinx Module Documentation Directive\nDESCRIPTION: Sphinx documentation configuration for the table_properties module that specifies showing all members, undocumented members and inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.table.props.table_properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.table.props.table_properties\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Loading Proofreader Service\nDESCRIPTION: This method in the Write class creates an instance of the XProofreader service. It utilizes the LibreOffice API to initiate the proofreader service necessary for text proofing functionalities.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef load_proofreader() -> XProofreader:\n    proof = mLo.Lo.create_instance_mcf(\n        XProofreader, \"com.sun.star.linguistic2.Proofreader\", raise_err=True\n    )\n    return proof\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the ooodev.format.writer.direct.shape.transparency package using reStructuredText format. It includes submodules and module contents sections.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.shape.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nooodev.format.writer.direct.shape.transparency package\n======================================================\n\nSubmodules\n----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.writer.direct.shape.transparency.gradient\n   ooodev.format.writer.direct.shape.transparency.transparency\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.writer.direct.shape.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Background Color to a Single Paragraph\nDESCRIPTION: Example showing how to apply a background color to a single paragraph in a Writer document. The code gets the cursor position, creates a ParaBgColor instance with YELLOW_GREEN color, and applies it to a new paragraph.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/color.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\nfc = ParaBgColor(CommonColor.YELLOW_GREEN)\nWrite.append_para(cursor=cursor, text=\"Fill Color starts Here\", styles=[fc])\n```\n\n----------------------------------------\n\nTITLE: Building Documentation on Windows\nDESCRIPTION: Generates HTML documentation from source files using Sphinx in the Windows environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nPS C:\\python_ooo_dev_tools\\docs> make html\n```\n\n----------------------------------------\n\nTITLE: Auto-generating module documentation\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.format.writer.direct.frame.wrap` module. It includes documentation for members, even undocumented ones, and shows inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.frame.wrap.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.frame.wrap\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule documentation for export_png in Python\nDESCRIPTION: This snippet shows the automodule directive used to generate documentation for the `ooodev.calc.filter.export_png` module. The `:members:` option includes all module members in the documentation, and `:undoc-members:` includes undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/filter/export_png.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"\n.. automodule:: ooodev.calc.filter.export_png\n    :members:\n    :undoc-members:\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for gen_util Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the gen_util module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/gen_util.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.utils.gen_util\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Appending Paragraphs in Python with OpenOffice\nDESCRIPTION: This snippet demonstrates how to append a paragraph to a text document using the Write.append_para method. It appends the given text and then adds a paragraph break.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef append_para(cls, cursor: XTextCursor, text: str) -> None:\n    cls.append(cursor=cursor, text=text)\n    cls.append(cursor=cursor, ctl_char=Write.ControlCharacter.PARAGRAPH_BREAK)\n```\n\n----------------------------------------\n\nTITLE: Module Documentation for ooodev.format.inner.modify.write.para.area.img\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the specified module. It includes members, undocumented members and inheritance details. This is a sphinx directive used to auto generate documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.para.area.img.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.para.area.img\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Module Documentation using automodule\nDESCRIPTION: This code snippet uses the `automodule` directive within reStructuredText (reST) to automatically generate documentation for the `ooodev.adapter.awt.uno_control_container_model_partial` module. It specifies options to include members, undocumented members, and inheritance information in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_container_model_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.uno_control_container_model_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Subpackage Tree\nDESCRIPTION: This snippet uses the `toctree` directive to create a table of contents for the subpackages within `ooodev.format.proto.write.char`. The `:maxdepth:` option limits the depth of the table of contents to 4 levels.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.write.char.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.proto.write.char.font\n```\n\n----------------------------------------\n\nTITLE: Modifying X-Axis to Date and Increment in Python\nDESCRIPTION: This snippet modifies the x-axis type of a chart to 'DATE' and sets the major increment to 3 days. It requires the Chart2 library and involves setting the scale data to manage date-based axis operations. No specific input is required, but it outputs the updated chart document with the modified x-axis scale.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter32.rst#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# part of _happy_stock_chart() in chart_2_views.py\n# ...\n# change x-axis type from number to date\nx_axis = Chart2.get_x_axis(chart_doc)\nsd = x_axis.getScaleData()\nsd.AxisType = AxisType.DATE\n\n# set major increment to 3 days\nti = TimeInterval(Number=3, TimeUnit=TimeUnit.DAY)\ntc = TimeIncrement()\ntc.MajorTimeInterval = ti\nsd.TimeIncrement = tc\nx_axis.setScaleData(sd)\n# ...\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for Python Module\nDESCRIPTION: Sphinx autodoc directive for automatically generating documentation for the UNO control image control component adapter module\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_image_control_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.uno_control_image_control_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: ReStructuredText documentation defining the package structure and its submodules for OpenOffice Calc border formatting functionalities.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.border.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.modify.calc.border.borders\n   ooodev.format.inner.modify.calc.border.padding\n   ooodev.format.inner.modify.calc.border.shadow\n\n.. automodule:: ooodev.format.inner.modify.calc.border\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Using Master Page in Presentations with Python\nDESCRIPTION: This snippet sets properties on a slide to ensure visibility of the page number and footer. It depends on getting a slide from the document and setting attributes like 'IsPageNumberVisible' and 'IsFooterVisible'. The function is part of managing slide visibility aspects in a presentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter17.rst#2025-04-16_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n# in main of master_use.py\nslide1 = doc.get_slide(idx=0)\n\n# ... \n\nslide1.set_property(\n    IsPageNumberVisible=True,\n    IsFooterVisible=True,\n    FooterText=\"MU Slides\",\n)\n```\n\n----------------------------------------\n\nTITLE: Running Impress Custom Slide Show on Linux/Mac\nDESCRIPTION: Command to run the custom slide show script with default slide indices on Linux or Mac systems.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Custom_Show/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Impress/Custom_Show/start.py\n```\n\n----------------------------------------\n\nTITLE: Adding a Shape to a Slide in Python\nDESCRIPTION: This Python code snippet defines a class method `add_shape` within the `Draw` class. It adds a shape of the specified `shape_type` to the given `slide` (XDrawPage) at the specified position (x, y) with the given dimensions (width, height). It first checks the position for validity using `warns_position`, then creates the shape using `make_shape`, and finally adds it to the slide using `slide.add`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"# in the Draw class (simplified)\\n@classmethod\\ndef add_shape(\\n    cls,\\n    slide: XDrawPage,\\n    shape_type: DrawingShapeKind | str,\\n    x: int | UnitT,\\n    y: int | UnitT,\\n    width: int | UnitT,\\n    height: int | UnitT,\\n) -> XShape:\\n\\n    cls.warns_position(slide=slide, x=x, y=y)\\n    shape = cls.make_shape(shape_type=shape_type, x=x, y=y, width=width, height=height)\\n    slide.add(shape)\\n    return shape\"\n```\n\n----------------------------------------\n\nTITLE: Applying Percent Formatting to Chart Data Series in Python\nDESCRIPTION: This snippet demonstrates how to apply percent formatting to chart data series using the PercentFormat and TextAttribs classes from the ooodev library. It sets the number format to display values as percentages with two decimal places.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/data_labels.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import PercentFormat\nfrom ooodev.format.chart2.direct.series.data_labels.data_labels import NumberFormatIndexEnum\n# ... other code\n\ntext_attribs = TextAttribs(show_number_in_percent=True)\nformat_percent = PercentFormat(\n    chart_doc=chart_doc,\n    source_format=False,\n    num_format_index=NumberFormatIndexEnum.PERCENT_DEC2,\n)\nChart2.style_data_series(chart_doc=chart_doc, styles=[text_attribs, format_percent])\n```\n\n----------------------------------------\n\nTITLE: Defining Global Time Cache Class with Dictionary-like Operations\nDESCRIPTION: Creates a specialized cache class with time-based storage and retrieval mechanisms supporting multiple dictionary-like special methods\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/globals/gtc.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GTC\n```\n\n----------------------------------------\n\nTITLE: Adding Shadow to Character Borders in Writer\nDESCRIPTION: This code shows how to apply shadow effects to text with borders in LibreOffice Writer. It creates a dark green shadow with a width of 1.0 units to enhance the visual appearance of the bordered text.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncursor = Write.get_cursor(doc)\n\nside = Side(color=StandardColor.GREEN_LIGHT2)\nborder_style = Borders(all=side)\n\nWrite.append(cursor, \"Hello \")\n# create shadow\nshadow_style = Shadow(color=StandardColor.GREEN_DARK2, width=1.0)\nWrite.append(cursor, \"World\", styles=[border_style, shadow_style])\nWrite.end_paragraph(cursor)\n```\n\n----------------------------------------\n\nTITLE: Defining MenuBase Class in Python Documentation\nDESCRIPTION: Sphinx autodoc directive for documenting the MenuBase class, showing its members, inherited properties, and undocumented members. Used for generating comprehensive API documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/menu/common/menu_base.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.gui.menu.common.menu_base.MenuBase\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Gradients for Chart Areas\nDESCRIPTION: Shows how to create and apply custom gradients to chart walls and floors with specific colors and angles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/area.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.wall.area import Gradient as WallGradient, GradientStyle\nfrom ooodev.format.chart2.direct.wall.area import ColorRange\n\n# ... other code\nwall_grad = WallGradient(\n    chart_doc=chart_doc,\n    style=GradientStyle.LINEAR,\n    angle=45,\n    grad_color=ColorRange(StandardColor.BLUE_DARK3, StandardColor.BLUE_LIGHT2),\n)\nChart2.style_wall(chart_doc=chart_doc, styles=[wall_grad])\n```\n\nLANGUAGE: python\nCODE:\n```\nfloor_grad = WallGradient(\n    chart_doc=chart_doc,\n    style=GradientStyle.LINEAR,\n    angle=-10,\n    grad_color=ColorRange(StandardColor.BLUE_DARK4, StandardColor.BLUE),\n)\nChart2.style_floor(chart_doc=chart_doc, styles=[floor_grad])\n```\n\n----------------------------------------\n\nTITLE: Align Left Position with Right Margin using Style Object in Python\nDESCRIPTION: Illustrating the use of a 'TableProperties' style object to assign right margin and alignment to a left-aligned table, this code segment incorporates 'TableProperties', 'CommonColor', 'TableAlignKind', 'UnitMM', and 'Intensity'. Styles are provided in a list, governing table property configurations during insertion through a cursor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/properties.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nprops_style = TableProperties(\n    name=\"My_Table\",\n    relative=True,\n    align=TableAlignKind.LEFT,\n    above=UnitMM(2.0),\n    below=UnitMM(1.8),\n    right=Intensity(40),\n)\n\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n    styles=[props_style],\n    )\n```\n\n----------------------------------------\n\nTITLE: Custom Build System for Sublime Text\nDESCRIPTION: JSON configuration for a custom build system in Sublime Text that uses the virtual environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_manual_venv_snap.rst#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"selector\": \"source.python\",\n    \"working_dir\": \"$project_path\",\n    \"env\": {\"PYTHONPATH\":\".\", \"VIRTUAL_ENV\": \"./.venv\"},\n    \"path\":\"$project_path/.venv/bin:$PATH\",\n    \"cmd\": [\"$project_path.venv/bin/python\", \"-u\", \"$file\"],\n    \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure - Python Package\nDESCRIPTION: Sphinx documentation tree structure showing the paragraph border package and its submodules including borders, padding, shadow and sides configurations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.border.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.write.para.border.borders\n   ooodev.format.inner.direct.write.para.border.padding\n   ooodev.format.inner.direct.write.para.border.shadow\n   ooodev.format.inner.direct.write.para.border.sides\n```\n\n----------------------------------------\n\nTITLE: Importing DocType and DocTypeStr from New Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the DocType and DocTypeStr classes from the new recommended module 'ooodev.loader.inst.doc_type'. It serves as a replacement for the deprecated 'doc_type' module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/inst/lo/doc_type.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.inst.doc_type import DocType, DocTypeStr\n\n# other code\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Border Style - Python\nDESCRIPTION: This snippet retrieves the current border style of the chart using the `style_border_line_get()` method from the `chart_doc`. It includes an assertion to ensure the returned value is not None.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf_style = chart_doc.style_border_line_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Chart2 Format Documentation in reStructuredText\nDESCRIPTION: Creates a visible table of contents that links to format-related documentation with specific display options. The directive is configured to show only titles, limit depth to 3 levels, and include all matching files using the glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 3\n    :glob:\n\n    format/index\n```\n\n----------------------------------------\n\nTITLE: Creating toctree for 'kind' module documentation in reStructuredText\nDESCRIPTION: This snippet creates a table of contents (toctree) in reStructuredText format. It's set to display only titles and include all files in the current directory using a glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet demonstrates the use of the automodule directive to automatically generate documentation for a Python module. It specifies that the documentation should include members, undocumented members, and information about class inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.structs.shadow_struct.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.structs.shadow_struct\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python module with automodule\nDESCRIPTION: This snippet utilizes the `automodule` directive to automatically generate documentation for the `ooodev.adapter.chart2.data.data_receiver_partial` Python module. It includes the module's members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.chart2.data.data_receiver_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.chart2.data.data_receiver_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying cell protection to a cell in Calc with Python\nDESCRIPTION: This snippet shows how to create a CellProtection style object and apply it to a cell. It configures protection properties including hiding formulas, enabling protection, and hiding the cell during printing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/cell_protection.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle = CellProtection(hide_all=False, hide_formula=True, protected=True, hide_print=True)\nCalc.set_val(value=\"Hello\", cell=cell, styles=[style])\n```\n\n----------------------------------------\n\nTITLE: Adding Superscript Text with RST Substitutions\nDESCRIPTION: Demonstrates how to create superscript text using RST substitutions and the :sup: role, useful for mathematical notation like R².\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_35\n\nLANGUAGE: rst\nCODE:\n```\nTheir equations and |R2| values are printed as shown below:\n\n.. |R2| replace:: R\\ :sup:`2`\n```\n\n----------------------------------------\n\nTITLE: Executing Help Command for Slide to Image Conversion Script\nDESCRIPTION: This command displays the help information for the slide to image conversion script, showing available options and usage instructions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slide_to_Image/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start --help\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Shape Adaptation Properties\nDESCRIPTION: Shows how to retrieve existing adaptation properties from a text shape using the Adapt.from_obj() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/adapt.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.position_size import Adapt\n# ... other code\n\n# get the properties from the shape\nf_style = Adapt.from_obj(text.component)\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Commands Documentation\nDESCRIPTION: Sets up a Sphinx toctree directive to organize command documentation. The directive is configured to show only titles, limit depth to 4 levels, and include all matching files in the current directory using a glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/commands/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 4\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Initializing LibreOffice Calc Document with OOO Dev Tools\nDESCRIPTION: Loads LibreOffice using socket connection, creates a new Calc document, and ensures proper closure of document and office resources\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/resources/utils/lo_connect_socket_ex.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\nfrom ooodev.office.calc import Calc\n\nloader = Lo.load_office(connector=Lo.ConnectSocket())\ndoc = Calc.create_doc(loader)\n# do work ...\nLo.close_doc(doc=doc)\nLo.close_office()\n```\n\n----------------------------------------\n\nTITLE: Configuring toctree directive for Calc format documentation in reStructuredText\nDESCRIPTION: Sets up a table of contents tree (toctree) directive that includes all files (*) in the current directory, showing only their titles in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Loading Document with XComponentLoader in LibreOffice\nDESCRIPTION: Demonstrates loading a document using the XComponentLoader method with specific parameters like file URL, frame type, and properties\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndoc = loader.loadComponentFromURL(file_url, \"_blank\", 0, props)\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Gradient to Data Point\nDESCRIPTION: This code snippet applies a preset gradient to the last data point within the first data series. The DEEP_OCEAN preset is used for the styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nds = chart_doc.get_data_series()[0]\ndp = ds[-1]\ndp.style_area_gradient_from_preset(preset=PresetGradientKind.DEEP_OCEAN)\n```\n\n----------------------------------------\n\nTITLE: Adding File Logger in Python with OooDev\nDESCRIPTION: Shows how to add and remove a file logger using OooDev's logging system. The example creates a log file in the temporary directory, logs a message, and then removes the file logger.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.io.log import logging as logger\nfrom ooodev.loader import Lo\n\nlog_file = Lo.tmp_dir / \"my_log.log\"\nlogger.add_file_logger(log_file)\nlogger.info(\"Hello World\")\nlogger.remove_file_logger(log_file)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Python LibreOffice Documentation in reStructuredText\nDESCRIPTION: This snippet defines the table of contents structure for Python LibreOffice programming documentation using reStructuredText's toctree directive. It includes all files in the current directory and separate index files for five different parts of the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n    part1/index\n    part2/index\n    part3/index\n    part4/index\n    part5/index\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Python Module\nDESCRIPTION: Sphinx documentation directive that auto-generates API documentation for the document_event_listener module. The directive includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.document.document_event_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.document.document_event_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Using References in RST\nDESCRIPTION: Demonstrates how to use ref and numref for referencing chapters, sections, figures, and tables in reStructuredText.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`ch01`\n:ref:`ch03_examine_office`\n:numref:`ch03fig_detail_prop_lst`\n```\n\n----------------------------------------\n\nTITLE: Class NamedLogger Autodoc\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the NamedLogger class. It specifies that all members and undocumented members should be included in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/io/log/named_logger.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.io.log.named_logger.NamedLogger\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Subpackages in Sphinx Documentation for data_series Package\nDESCRIPTION: This snippet defines the subpackages of the data_series package using Sphinx's toctree directive. It lists four subpackages: area, borders, options, and transparency.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.series.data_series.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.chart2.direct.series.data_series.area\n   ooodev.format.chart2.direct.series.data_series.borders\n   ooodev.format.chart2.direct.series.data_series.options\n   ooodev.format.chart2.direct.series.data_series.transparency\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry on macOS and Linux\nDESCRIPTION: Command to install Poetry using curl and Python3 on macOS and Linux systems\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/poetry_env.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://install.python-poetry.org | python3 -\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Tree for Factory Module\nDESCRIPTION: RST configuration that sets up a documentation tree (toctree) for factory-related content. Uses titlesonly option to show only page titles and glob pattern to include all files in the directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/factory/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Setting Default Range Style in Calc\nDESCRIPTION: This snippet shows how to set the default style for a cell range.  Calling `style_by_name()` without any arguments will apply the default style to the specified cell range.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/style/cell.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\ncell_rng.style_by_name()\"\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Documentation Generation\nDESCRIPTION: This snippet represents the use of the `automodule` directive in Sphinx documentation to automatically generate documentation for the specified Python module. It includes flags to show members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.page.header.border.sides.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n\".. automodule:: ooodev.format.inner.modify.calc.page.header.border.sides\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\"\n```\n\n----------------------------------------\n\nTITLE: Sphinx Auto-Documentation Directive for Page Borders Module\nDESCRIPTION: A reStructuredText directive that automatically generates documentation for the ooodev.format.writer.modify.page.borders module. The directive includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.page.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.page.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Module contents: automodule directive\nDESCRIPTION: This code snippet is a Sphinx automodule directive. It's used to automatically generate documentation for the specified Python module, including members, undocumented members, and inheritance information. This allows for documentation to be created directly from the module's code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.general_style.text.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n\n.. automodule:: ooodev.format.inner.direct.general_style.text\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Setting Table Borders and Shadow using style_direct in Python\nDESCRIPTION: This code snippet demonstrates how to set table borders and shadows using the `style_direct` property in OpenOffice Writer with Python and the ooodev library. It defines `Side` objects for the borders and a `Shadow` object, and then applies them to the table using the `style_direct.style_borders` method. This enables setting both border styles and shadow effects simultaneously.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/table/borders.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ntable = cursor.add_table(\n    table_data=tbl_data,\n    first_row_header=False,\n    tbl_bg_color=CommonColor.LIGHT_BLUE,\n    tbl_fg_color=CommonColor.BLACK,\n)\n\nblue_side = Side(line=BorderLineKind.SOLID, color=StandardColor.BLUE_DARK2, width=LineSize.THICK)\ngreen_side = Side(line=BorderLineKind.SOLID, color=StandardColor.GREEN_DARK1, width=LineSize.THIN)\ntable.style_direct.style_borders(\n    border_side=blue_side,\n    vertical=green_side,\n    horizontal=green_side,\n    shadow=Shadow(color=StandardColor.BLUE_DARK2),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Legend Font Effects - Python Setup\nDESCRIPTION: Sets up the environment for chart manipulation including loading required dependencies, opening a document, and configuring initial chart display settings. Includes chart background styling with gradients and borders.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.legend.font import (\n    FontEffects as LegendFontEffects,\n    FontLine,\n    FontUnderlineEnum,\n)\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BRICK, width=1)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.GREEN_DARK4, StandardColor.TEAL_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        legend_font_effects_style = LegendFontEffects(\n            color=StandardColor.PURPLE,\n            underline=FontLine(line=FontUnderlineEnum.BOLDWAVE, color=StandardColor.GREEN_DARK2),\n        )\n        Chart2.style_legend(chart_doc=chart_doc, styles=[legend_font_effects_style])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Accessing Embedded Object's Model in LibreOffice with Python\nDESCRIPTION: This code retrieves the embedded object's model using the XEmbeddedObjectSupplier2 interface. The embed_content object is queried for the XEmbeddedObjectSupplier2 interface, and then the getEmbeddedObject() method is called to obtain the object model, which is used for setting the formula properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# access object's model\nembed_obj_supplier = Lo.qi(XEmbeddedObjectSupplier2, embed_content, True)\nembed_obj_model = embed_obj_supplier.getEmbeddedObject()\n```\n\n----------------------------------------\n\nTITLE: Linux/Mac Execution of Slide to Image Conversion\nDESCRIPTION: This command shows how to run the slide to image conversion script on Linux or Mac systems, specifying the full path to the script and required arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slide_to_Image/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Impress/Slide_to_Image/start.py --file \"tests/fixtures/presentation/algs.ppt\" --out_fmt \"jpeg\" --idx 0\n```\n\n----------------------------------------\n\nTITLE: Running the script on Linux/Mac\nDESCRIPTION: Command to execute the script with default parameters on Linux or Mac systems.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Slides_Info/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython ./tests/samples/Impress/Slides_Info/start.py\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive for auto-documenting the animated_images_control_comp module, including all members, undocumented members and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.animated_images_control_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.animated_images_control_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Direction and Orientation to Chart Subtitle in Python\nDESCRIPTION: Shows how to apply the same direction and orientation settings to a chart's subtitle. This snippet uses the Chart2.style_subtitle method to format the subtitle.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/alignment.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_subtitle(chart_doc=chart_doc, styles=[title_orient, title_dir])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Style from Cell in Calc\nDESCRIPTION: Shows how to get the font formatting from an existing cell and access its properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_only.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = FontOnly.from_obj(cell)\nassert f_style.prop_name == \"Lucida Calligraphy\"\n```\n\n----------------------------------------\n\nTITLE: Removing Global Shortcut by Key Combination (Temporary) in Python\nDESCRIPTION: Removes a global shortcut by its key combination without persisting the change. The shortcut will be removed from the current session but will return after restarting LibreOffice.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/working_with_shortcuts.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.gui.menu import Shortcuts\n# ...\nsc = Shortcuts()\nsc.remove_by_shortcut(\"Shift+Ctrl+Alt+A\", False)\n```\n\n----------------------------------------\n\nTITLE: Importing Component Property Adapter Module\nDESCRIPTION: Module import directive for accessing component property adapters in OpenOffice development tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.component_prop.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.component_prop\n```\n\n----------------------------------------\n\nTITLE: LayoutSettings Style Assertion\nDESCRIPTION: This snippet creates a `LayoutSettings` object using the `from_style` method, passing in a document (`doc`) and a style name (`CalcStylePageKind.DEFAULT`). It then asserts that the `prop_style_name` attribute of the created object matches the string representation of `CalcStylePageKind.DEFAULT`. This verifies that the style was correctly applied.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/page.rst#2025-04-16_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nstyle_obj = LayoutSettings.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Checking pip Version\nDESCRIPTION: This command verifies the installation of pip by checking its version. It is run in PowerShell using LibreOffice's Python executable. A successful execution means pip is correctly installed and accessible.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_lo_install_pip.rst#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n>.\\python.exe -m pip --version\n```\n\n----------------------------------------\n\nTITLE: Module Content (automodule)\nDESCRIPTION: This snippet utilizes the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.direct.chart2.axis.numbers` module.  It includes members, even those without explicit documentation (`undoc-members`), and displays the inheritance hierarchy for classes and methods (`show-inheritance`).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.axis.numbers.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.axis.numbers\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Control Characters in Python for OpenOffice\nDESCRIPTION: This snippet shows how the Write class inherits from Selection and defines the ControlCharacter enum. It uses the ooouno library to automatically create enums for LibreOffice Constants.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter05.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom ooo.dyn.text.control_character import ControlCharacterEnum\n\nclass Write(Selection):\n    ControlCharacter = ControlCharacterEnum\n```\n\n----------------------------------------\n\nTITLE: Getting font effects from a Calc range\nDESCRIPTION: Demonstrates how to retrieve the current font effects applied to a range of cells. The example checks if the text color of the range is red using an assertion.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct/cell/font_effects.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = cell_rng.style_font_effect_get()\nassert f_effects.prop_color == CommonColor.RED\n```\n\n----------------------------------------\n\nTITLE: Documenting GenericUnitPoint Class with Sphinx RST\nDESCRIPTION: RST directive for auto-generating documentation for the GenericUnitPoint class from the ooodev.utils.data_type.generic_unit_point module. Includes all class members in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/generic_unit_point.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.generic_unit_point.GenericUnitPoint\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Creating Draw Document and Setting Shape Gradient\nDESCRIPTION: Creates a new Draw document, draws a rectangle shape, and applies a preset gradient to it. Demonstrates document setup, shape creation, and gradient application using the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format.draw.direct.area import Gradient as ShapeGradient\nfrom ooodev.format.draw.direct.area import PresetGradientKind\nfrom ooodev.office.draw import Draw\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Draw.create_draw_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_75_PERCENT)\n\n        slide = Draw.get_slide(doc)\n\n        width = 36\n        height = 36\n        x = int(width / 2)\n        y = int(height / 2) + 20\n\n        rec = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\n        style = ShapeGradient.from_preset(preset=PresetGradientKind.DEEP_OCEAN)\n        style.apply(rec)\n\n        f_style = ShapeGradient.from_obj(rec)\n        assert f_style.prop_inner == style.prop_inner\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Resetting Paragraph Style to Default in Python with OOoDEV\nDESCRIPTION: This snippet demonstrates how to reset the paragraph style to the default style in a document using the OOoDEV library. It accesses the static property of the paragraph style class to apply the default style. The snippet assumes the use of the OOoDEV modules for formatting and writing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/para.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.style import Para as StylePara\n# ... other code\n\nStylePara.default.apply(cursor)\nWrite.append_para(cursor=cursor, text=\"Back to default style.\")\n\n# ... other code\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart2 formatting in Python\nDESCRIPTION: General setup code for Chart2 formatting examples. Opens a Calc document, gets the chart document, and applies some basic styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/options.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.series.data_series.options import Orientation\nfrom ooodev.utils.data_type.angle import Angle\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_LIGHT3, width=0.7)\n        chart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.TEAL_BLUE)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        orient = Orientation(chart_doc=chart_doc, clockwise=True, angle=Angle(45))\n        Chart2.style_data_series(chart_doc=chart_doc, styles=[orient])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Border Sides From Style in Python\nDESCRIPTION: This snippet shows how to retrieve the header border sides from a Calc document's style using ooodev. It demonstrates the use of `Sides.from_style` with parameters like `doc` and `style_name` to obtain border information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/header/bordes.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Sides.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Styling Multi-line List Items with CSS\nDESCRIPTION: CSS styling for multi-line list items to adjust margin.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.rst-content li>.line-block {\n    margin-bottom: 0px;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Message Box in Python\nDESCRIPTION: This Python code snippet displays a message box asking the user whether to close the document. It uses the `MsgBox.msgbox` function to create a query box with \"Yes\" and \"No\" buttons.  If the user selects \"Yes\", the document and LibreOffice are closed; otherwise, a message is printed to the console.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"msg_result = MsgBox.msgbox(\\n    \\\"Do you wish to close document?\\\",\\n    \\\"All done\\\",\\n    boxtype=MessageBoxType.QUERYBOX,\\n    buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,\\n)\\nif msg_result == MessageBoxResultsEnum.YES:\\n    doc.close_doc()\\n    Lo.close_office()\\nelse:\\n    print(\\\"Keeping document open\\\")\"\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example (kwargs)\nDESCRIPTION: This example demonstrates another way to define an event callback, where the `control_src` is accessed via the `kwargs` dictionary. This approach provides flexibility when the specific control type isn't immediately needed in the function signature.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_date_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbDateField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Getting View States from Document - Python\nDESCRIPTION: This method retrieves view states for each sheet in a spreadsheet document. It parses the view data and creates a list of ViewState objects for further manipulation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# in Calc class\n@classmethod\ndef get_view_states(cls, doc: XSpreadsheetDocument) -> List[mViewState.ViewState] | None:\n    ctrl = cls.get_controller(doc)\n\n    view_data = str(ctrl.getViewData())\n    view_parts = view_data.split(\";\")\n    p_len = len(view_parts)\n    if p_len < 4:\n        Lo.print(\"No sheet view states found in view data\")\n        return None\n    states = []\n    for i in range(3, p_len):\n        states.append(mViewState.ViewState(view_parts[i]))\n    return states\n```\n\n----------------------------------------\n\nTITLE: Importing User Extension Script in Python\nDESCRIPTION: This Python code snippet demonstrates how to use the `importer_user_ext_script` context manager to import a module from a Calc document. It requires the LibreOffice extensions and Python support setup. The key functionality includes loading a LibreOffice office instance and managing document opening and closing, along with the import of `tools` module from a user extension.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/uno_helper/importer/importer_user_ext_script.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.uno_helper.importer import importer_user_ext_script\n\n\ndef main():\n    _ = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = None\n    try:\n        doc = CalcDoc.create_doc()\n\n        with importer_user_ext_script(\"apso\"):\n            import tools\n\n        print(\"Done\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    finally:\n        if doc:\n            doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: ChartTitle Class Definition\nDESCRIPTION: This snippet documents the `ChartTitle` class within the `ooodev.calc.chart2.chart_title` module. It uses `autoclass` to automatically generate documentation for the class, including its members, inherited members, and inheritance details. The `:members:`, `:undoc-members:`, `:show-inheritance:`, and `:inherited-members:` directives control which aspects of the class are included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/chart2/chart_title.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ooodev.calc.chart2.chart_title.ChartTitle\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Importing Mouse Motion Listener Module in LibreOffice Python\nDESCRIPTION: Demonstrates how to import the mouse motion listener adapter module for UNO-based event handling in LibreOffice Python development\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.mouse_motion_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.adapter.awt.mouse_motion_listener import MouseMotionListener\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Document and Setting Up Page Border Modification\nDESCRIPTION: This snippet sets up the environment for modifying page borders in a Writer document. It imports necessary modules, creates a new document, and defines a main function to apply border modifications.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/bordes.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.borders import Padding, Shadow, Sides, WriterStylePageKind\nfrom ooodev.format.writer.modify.page.borders import BorderLineKind, LineSize, Side\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n  with Lo.Loader(Lo.ConnectPipe()):\n    doc = Write.create_doc()\n    GUI.set_visible(doc=doc)\n    Lo.delay(300)\n    GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n    side = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\n    sides_style = Sides(all=side, style_name=WriterStylePageKind.STANDARD)\n    sides_style.apply(doc)\n\n    style_obj = Sides.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n    assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n    Lo.delay(1_000)\n\n    Lo.close_doc(doc)\nreturn 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for Paragraph Area Pattern Module\nDESCRIPTION: Sphinx documentation directive that auto-documents the paragraph area pattern module, including all members, undocumented members and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.area.pattern.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.area.pattern\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Chart2 Format Direct Axis in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText directives. It sets up a toctree with specific options to display only titles and include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/axis/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Defining a Table of Contents for Writer Format Modify Page Header Documentation in reStructuredText\nDESCRIPTION: Sets up a reStructuredText toctree directive that includes all files in the current directory with title-only display and a maximum depth of 1 level. This directive is used to organize documentation about formatting and modifying page headers in LibreOffice Writer.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.direct.draw.shape.text Module Contents\nDESCRIPTION: This snippet represents the module contents for `ooodev.format.inner.direct.draw.shape.text`. It uses `automodule` to automatically generate documentation for the module, including its members, undocumented members, and inheritance hierarchy. This allows for comprehensive documentation of the module's functionality.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.draw.shape.text.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.draw.shape.text\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for the tab_page_partial module\nDESCRIPTION: A reStructuredText directive that configures the Sphinx autodoc extension to generate documentation for the tab_page_partial module, including all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.tab.tab_page_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.tab.tab_page_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for ooodev.adapter.awt.menu_bar_comp\nDESCRIPTION: This snippet uses the `automodule` directive to generate documentation for the `ooodev.adapter.awt.menu_bar_comp` module. It includes options to display members, show undocumented members, and visualize inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.menu_bar_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.menu_bar_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ModelGroupBox Class Definition\nDESCRIPTION: This code block defines the ModelGroupBox class within the ooodev library. The documentation includes information about the class's members, undocumented members, inheritance, and inherited members. It uses the autoclass directive to automatically generate documentation from the class's docstrings and code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/model/model_group_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ooodev.dialog.dl_control.model.model_group_box.ModelGroupBox\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Transparency Value\nDESCRIPTION: Shows how to retrieve the current transparency settings from a chart document using the from_obj method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf_style = ChartTransparency.from_obj(chart_doc.getPageBackground())\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback without Control Source Parameter\nDESCRIPTION: This snippet illustrates an alternative way to define an event callback function that does not explicitly expose the control source as a parameter, but instead retrieves it from the keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_list_box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlListBox, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Chart2 Format Direct Legend Documentation\nDESCRIPTION: This snippet sets up a table of contents for the Chart2 Format Direct Legend documentation. It uses the 'toctree' directive with 'titlesonly' and 'glob' options to include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents directive in reStructuredText. It is configured to show only titles, with a maximum depth of 1, and to include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.adapter.text.text_document_comp\nDESCRIPTION: This snippet uses the Sphinx automodule directive to automatically generate documentation for the specified Python module. The directive includes options to show all members, including those that are undocumented, and to display class inheritance diagrams. This is part of generating comprehensive documentation for the ooodev library.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.text_document_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.text.text_document_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Range Text Alignment in Python\nDESCRIPTION: Example of applying text alignment to a range of cells. Sets left alignment with indentation and top vertical alignment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCalc.set_val(value=\"Hello\", sheet=sheet, cell_name=\"A1\")\nCalc.set_val(value=\"World\", sheet=sheet, cell_name=\"B1\")\nrng = Calc.get_cell_range(sheet=sheet, range_name=\"A1:B1\")\n\nstyle = TextAlign(hori_align=HoriAlignKind.LEFT, indent=3, vert_align=VertAlignKind.TOP)\nstyle.apply(rng)\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for OOO Dev Form Update Events Module\nDESCRIPTION: This snippet uses Sphinx automodule directive to automatically generate documentation for the ooodev.adapter.form.update_events module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.form.update_events.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.form.update_events\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting WritePageStyle Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the WritePageStyle class. It includes all members, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/write_page_style.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.write.style.WritePageStyle\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Connector Style with Arrows\nDESCRIPTION: Example of applying arrow style to a connector shape using the GraphicStyleKind.ARROW_LINE style\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconn_shape.set_style(\n    graphic_styles=g_styles,\n    style_name=GraphicStyleKind.ARROW_LINE,\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Page by GenericDrawPage Object in Python\nDESCRIPTION: Illustrates removing a page using the del method with a GenericDrawPage object. Demonstrates Python's capability to manage objects by reference.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/generic_draw_pages.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc(loader))\n>>> pg = doc.draw_pages[0]\n>>> del doc.draw_pages[pg]\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Floor Area Color in Python\nDESCRIPTION: This snippet demonstrates how to set the background color of a chart's floor to a default blue color using the `style_area_color()` method from the `ooodev` library. It accesses the first diagram's floor and applies the specified color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/wall_floor/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.color import StandardColor\n\n# ... other code\nfloor = chart_doc.first_diagram.floor\nfloor.style_area_color(StandardColor.DEFAULT_BLUE)\n```\n\n----------------------------------------\n\nTITLE: Handling Event for Hidden Controls with Optional Control Access\nDESCRIPTION: This code snippet shows an implementation of an event handler where the hidden control, FormCtlHidden, is retrieved from the kwargs dictionary. It highlights the flexible retrieval of control data for handling specific behavior, while demonstrating casting with the cast function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_hidden_control.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlHidden, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Document and Setting Borders - Python\nDESCRIPTION: This snippet demonstrates how to open a Calc document and set up the chart document. It imports necessary modules and defines a main function. The function opens a specified document, sets its zoom level, and modifies the border line of the chart using the `style_border_line()` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/general/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom pathlib import Path\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"col_chart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(color=StandardColor.GREEN_DARK3, width=2.2)\n\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Directive for Transparency Package\nDESCRIPTION: A Sphinx documentation directive that automatically generates documentation for the ooodev.format.writer.modify.frame.transparency package. This directive includes all members, undocumented members, and shows inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.frame.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.frame.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Chart2 Format Direct Series in reStructuredText\nDESCRIPTION: This RST code snippet sets up a table of contents (toctree) for Chart2 Format Direct Series documentation. It uses the 'titlesonly' option to show only top-level headings and the 'glob' option to include all matching files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Source Code Links in RST Documentation\nDESCRIPTION: Shows how to create source code links in a seealso block using the odev_src_draw_meth role with src-link CSS class for proper formatting and icon display.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_15\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n\n    .. cssclass:: src-link\n\n        - :odev_src_draw_meth:`get_slide`\n        - :odev_src_draw_meth:`get_slides`\n        - :odev_src_draw_meth:`get_slides_count`\n```\n\n----------------------------------------\n\nTITLE: Documenting ShapeCombKind Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the ShapeCombKind class. It includes all members and undocumented members in the output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/shape_comb_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.shape_comb_kind.ShapeCombKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Module Documentation for ooodev.format.writer.modify.para.tabs\nDESCRIPTION: Sphinx restructuredtext directive for automatically generating documentation from the ooodev.format.writer.modify.para.tabs module. The directive includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.para.tabs.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.para.tabs\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure with RST\nDESCRIPTION: RST markup defining the documentation structure for the ooodev shape area package. Includes table of contents and module documentation directives.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.shape.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.write.shape.area.shadow\n\n.. automodule:: ooodev.format.inner.direct.write.shape.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting up Text Properties for Calc cells\nDESCRIPTION: This snippet shows the setup for modifying text properties in LibreOffice Calc cells. It imports necessary modules and creates a document with auto-wrapping, hyphenation, and page-based text direction.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/cell/alignment.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.modify.cell.alignment import Properties\nfrom ooodev.format.calc.modify.cell.alignment import TextDirectionKind, StyleCellKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        style = Properties(\n            wrap_auto=True,\n            hyphen_active=True,\n            direction=TextDirectionKind.PAGE,\n            style_name=StyleCellKind.DEFAULT,\n        )\n        style.apply(doc)\n\n        style_obj = Properties.from_style(doc=doc, style_name=StyleCellKind.DEFAULT)\n        assert style_obj.prop_style_name == str(StyleCellKind.DEFAULT)\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.text.numbering_rules_comp Module\nDESCRIPTION: This snippet represents the auto-generated module documentation for the ooodev.adapter.text.numbering_rules_comp module. It shows how to use automodule directive to generate documentation for a python module, including members, inherited classes, and other configurations such as hiding undocumented members and displaying inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.numbering_rules_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.text.numbering_rules_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Initializing Draw Document with Text Shape Adaptation\nDESCRIPTION: Creates a Draw document, adds a text shape, and applies text adaptation settings. Demonstrates complete setup including document creation, shape drawing, and adaptation application.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/position_size/adapt.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.draw import Draw, DrawDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.draw.direct.position_size.position_size import Adapt\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = DrawDoc(Draw.create_draw_doc())\n        doc.set_visible()\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_75_PERCENT)\n\n        slide = doc.get_slide()\n\n        width = 36\n        height = 36\n        x = round(width / 2)\n        y = round(height / 2)\n\n        text = slide.draw_text(msg=\"Hello World\", x=x, y=y, width=width, height=height)\n        style = Adapt(fit_height=True, fit_width=True)\n        style.apply(text.component)\n\n        f_style = Adapt.from_obj(text.component)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        doc.close_doc()\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Casting Control Source from Event Callback in Python\nDESCRIPTION: This Python snippet shows another variation of an event callback function where the control source can be obtained from the kwargs. The control source is explicitly cast to `FormCtlFile` for further use within the function. This pattern depends on type casting from the typing module or similar. Inputs are the same as other callbacks, with control source extracted from kwargs. There are no outputs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_file.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlFile, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Setting Character Rotation in Writer\nDESCRIPTION: Example showing how to apply character rotation using the FontPosition class with both rotation properties and constructor argument.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_position.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\nfp_style = FontPosition().rotation_270\n# alternative\n# fp_style = FontPosition(rotation=270)\ncursor = Write.get_cursor(doc)\nWrite.append(cursor, \"Hello\", styles=[fp_style])\nWrite.append(cursor, \"World\", styles=[fp_style.rotation_90])\n```\n\n----------------------------------------\n\nTITLE: Gallery Item Information Inside Function Output\nDESCRIPTION: Console output showing the Gallery item properties as expected when inspected inside the find_gallery_item() function. The Drawing property is properly populated at this point.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/gallery_issue/README.md#2025-04-16_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nGallery item information:\n  URL: \"private:gallery/svdraw/dd2000\"\n  Fnm: Unable to compute due to URL conversion error\n  Path: Unable to compute due do URL conversion error\n  Title: \"Note-Gold\"\n  Type: drawing\n```\n\n----------------------------------------\n\nTITLE: Documenting DocJsonFile Class in Python\nDESCRIPTION: Sphinx autodoc directive for documenting a Python class with all members and undocumented members exposed\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/io/json/doc_json_file.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.io.json.DocJsonFile\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle with Bitmap Color in LibreOffice Draw (Python)\nDESCRIPTION: This snippet creates a rectangle shape and applies a bitmap color fill to it. It uses the Draw class methods to create the rectangle and set its bitmap color properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# in DrawGradient Class()\ndef _gradient_bitmap(self, curr_slide: DrawPage[DrawDoc]) -> None:\n    rect1 = curr_slide.draw_rectangle(\n        x=self._x,\n        y=self._y,\n        width=self._width,\n        height=self._height,\n    )\n    rect1.set_bitmap_color(name=self._bitmap_gradient)\n```\n\n----------------------------------------\n\nTITLE: Accessing a Graphic Object by Name using Python\nDESCRIPTION: In this snippet, a specific graphic object is accessed by its name using the getByName method of the XNameAccess interface. This is crucial for manipulating specific objects within the graphic collection.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# get graphic object called \"foo\"\nobj_graphic = xname_access.getByName(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Script Entry Point - Python\nDESCRIPTION: This section provides the entry point for the script execution. It checks if the script is run directly and initiates the main function.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter04.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handlers for Rich Text Controls in Python\nDESCRIPTION: This snippet demonstrates two formats for defining event handlers that handle events triggered by Rich Text controls in a form. The handlers receive an event source, event arguments, and optionally a control source if provided in kwargs. Dependencies include 'Any' for generic typing and 'EventArgs' for event-specific data. Expected input includes the event source and arguments, while the output is a None return type indicating no result needs to be processed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_rich_text.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlRichText, *args, **kwargs\n) -> None:\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlRichText, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive Example\nDESCRIPTION: This directive is used to automatically generate documentation for the specified module. The `:members:` option includes all public members of the module. The `:undoc-members:` option includes undocumented members. The `:show-inheritance:` option displays the inheritance hierarchy of classes in the module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.font.font_position_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.font.font_position_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Module Documentation Directive\nDESCRIPTION: ReStructuredText documentation directive for auto-generating module documentation, including members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.document.embedded_object_supplier_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.document.embedded_object_supplier_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.adapter.awt.uno_control_progress_bar_comp\nDESCRIPTION: This snippet uses Sphinx's `automodule` directive to automatically generate documentation for the `ooodev.adapter.awt.uno_control_progress_bar_comp` module. The directive includes options to show members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_progress_bar_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.uno_control_progress_bar_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Calc Document in Python\nDESCRIPTION: This code snippet demonstrates how to set up a new LibreOffice Calc document, make it visible, and set zoom levels, followed by applying text properties to a specific cell.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/alignment.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.office.calc import Calc\nfrom ooodev.gui.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.format.calc.direct.cell.alignment import Properties, TextDirectionKind\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Calc.create_doc()\n        sheet = Calc.get_sheet()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom_value(doc, 400)\n\n        cell = Calc.get_cell(sheet=sheet, cell_name=\"A1\")\n        style = Properties(wrap_auto=True, hyphen_active=True, direction=TextDirectionKind.PAGE)\n        Calc.set_val(value=\"Hello World! Sunny Day!\", cell=cell, styles=[style])\n\n        f_style = Properties.from_obj(cell)\n        assert f_style is not None\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Chart Shape Retrieval Method in Chart2 Class\nDESCRIPTION: Static method to retrieve a chart shape from a spreadsheet, handling error cases and validations\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter33.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_chart_shape(sheet: XSpreadsheet) -> XShape:\n    shape = None\n    try:\n        page_supp = Lo.qi(XDrawPageSupplier, sheet, True)\n        draw_page = page_supp.getDrawPage()\n        num_shapes = draw_page.getCount()\n        chart_classid = Lo.CLSID.CHART.value\n        for i in range(num_shapes):\n            try:\n                shape = Lo.qi(XShape, draw_page.getByIndex(i), True)\n                classid = str(Props.get(shape, \"CLSID\")).lower()\n                if classid == chart_classid:\n                    break\n            except Exception:\n                shape = None\n    except Exception as e:\n        raise ShapeError(\"Error getting shape from sheet\") from e\n    if shape is None:\n        raise ShapeMissingError(\"Unalbe to find Chart Shape\")\n    return shape\n```\n\n----------------------------------------\n\nTITLE: Paragraph Properties Component Module Documentation\nDESCRIPTION: Autodoc configuration for paragraph properties module in OpenOffice development adapter, exposing class members, undocumented members, and inheritance details\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.style.paragraph_properties_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.style.paragraph_properties_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with Control Source - Python\nDESCRIPTION: This snippet defines an event callback function, `on_some_event`, which includes `control_src` as a keyword argument. The function is designed to handle events and demonstrates how to pass the CtlComboBox control as part of the event arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_combo_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlComboBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Documentation Directive for Text Flow Breaks\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the ooodev.format.inner.direct.write.para.text_flow.breaks module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.text_flow.breaks.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.text_flow.breaks\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Solver Property (NonNegative) in Python\nDESCRIPTION: This code snippet sets the `NonNegative` property of a solver to `True`. This restricts the search for intersection points to the top-right quadrant of the graph, meaning only non-negative values for the variables are considered.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter27.rst#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n\"# in linear_solve.py\n# restrict the search to the top-right quadrant of the graph\nProps.set(solver, NonNegative=True)\"\n```\n\n----------------------------------------\n\nTITLE: Handling Event and Extracting Control in Python\nDESCRIPTION: This code snippet provides an alternative way to handle events for FormCtlDbTextField in Python, where the control source is retrieved from keyword arguments. It demonstrates casting the control for assured type usage, useful for scenarios where callbacks manage multiple control types.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_text_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlDbTextField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure for DrawDrawingDispatch in reStructuredText\nDESCRIPTION: This snippet defines how the DrawDrawingDispatch class documentation should be generated using the Sphinx autodoc extension. It specifies that all members and undocumented members should be included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/dispatch/draw_drawing_dispatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.dispatch.draw_drawing_dispatch.DrawDrawingDispatch\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Bitmap Color for Shape in LibreOffice Draw (Python)\nDESCRIPTION: This function sets the bitmap color for a given shape. It uses the XPropertySet interface to set the FillStyle and FillBitmapName properties of the shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class (simplified)\n@staticmethod\ndef set_bitmap_color(shape: XShape, name: DrawingBitmapKind | str) -> None:\n\n    props = Lo.qi(XPropertySet, shape, True)\n    props.setPropertyValue(\"FillStyle\", FillStyle.BITMAP)\n    props.setPropertyValue(\"FillBitmapName\", str(name))\n```\n\n----------------------------------------\n\nTITLE: Generating Python module documentation using Sphinx\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the style_para_cond_kind module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.style.para.kind.style_para_cond_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.style.para.kind.style_para_cond_kind\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Module Documentation in RST\nDESCRIPTION: ReStructuredText directive for auto-documenting the Python module contents including members, undocumented members and inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback in Python for Text Edit Control\nDESCRIPTION: This code snippet demonstrates the structure of a callback function that receives a source, event, and control source as parameters. It defines how to process events from the text edit control, allowing for the handling of user actions.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_text_edit.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n        src: Any, event: EventArgs, control_src: CtlTextEdit, *args, **kwargs\n    ) -> None:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Delete Form by Name\nDESCRIPTION: Shows how to delete a form from a Draw page by its name using the `del` keyword. The example assumes there is a `doc` object and a form named \"MyForm\" on the first slide. Requires the `DrawDoc` class and the `Draw` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_forms.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> del doc.slides[0].draw_page.forms[\"MyForm\"]\n```\n\n----------------------------------------\n\nTITLE: Applying Preset Image Style\nDESCRIPTION: Shows how to apply a preset image style using PresetImageKind.POOL. The code demonstrates style application using the FillImg class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/area/img.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle_modify = FillImg.from_preset(preset=PresetImageKind.POOL)\ndoc.apply_styles(style_modify)\n```\n\n----------------------------------------\n\nTITLE: Delete a Form by Name\nDESCRIPTION: Illustrates how to delete a form from a Calc sheet using its name with the `del` keyword. The example deletes the form named \"MyForm\".\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/calc_forms.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> sheet = doc.sheets[0]\n>>> del sheet.draw_page.forms[\"MyForm\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Direct Style Namespace in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents for the 'direct' namespace documentation using reStructuredText directives. It includes all files in the current directory and specifically references the 'table' subdirectory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/direct/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _ns_write_style_direct:\n\ndirect\n======\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n    table/index\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation for Gradient Area\nDESCRIPTION: This code snippet represents the use of `automodule` directive within the Sphinx documentation to automatically generate documentation for the `ooodev.format.inner.modify.write.para.area.gradient` module.  It includes displaying all members of the module, even undocumented ones, and showing its inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.para.area.gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.para.area.gradient\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule directive documentation\nDESCRIPTION: This snippet demonstrates the use of the automodule directive in Sphinx to automatically generate documentation for a Python module. It specifies the module path, includes members, shows undocumented members, and displays inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.tabs.tabs.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.tabs.tabs\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Importing ooodev.format.draw.direct.para Module\nDESCRIPTION: This snippet demonstrates how to import the ooodev.format.draw.direct.para module. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.direct.para.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.draw.direct.para\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for WriteTextRanges Class\nDESCRIPTION: Sphinx directive configuration for documenting the WriteTextRanges class from ooodev.write module. Includes settings to show all members, inheritance, and specific special methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_text_ranges.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.write.WriteTextRanges\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __getitem__, __next__,  __len__\n```\n\n----------------------------------------\n\nTITLE: Changing Text Height in LibreOffice Shape with Python\nDESCRIPTION: This code snippet demonstrates how to change the text height within a shape in LibreOffice. It first converts the shape to an XText interface using `Lo.qi`. It then creates a text cursor, selects all the text within the shape, and sets the `CharHeight` property of the cursor to 18 points using `Props.set`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter11.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.props import Props\nfrom ooodev.loader.lo import Lo\n\nxtext = Lo.qi(XText, shape)\ncursor = xtext.createTextCursor()\ncursor.gotoStart(False)\ncursor.gotoEnd(True) #  select all text\nProps.set(cursor, CharHeight=18);\n```\n\n----------------------------------------\n\nTITLE: Command Data Output Format Sample in Python\nDESCRIPTION: This snippet shows the output format when retrieving command data for the '.uno:Copy' command. It displays the structured data including command name, label, shortcut keys, and other properties returned by the CmdInfo class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/commands/getting_info_on_commands.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCmdData(\n    command='.uno:Copy',\n    label='Cop~y',\n    name='Copy',\n    popup=False,\n    properties=1,\n    popup_label='',\n    tooltip_label='',\n    target_url='',\n    is_experimental=False,\n    module_hotkey='',\n    global_hotkey='Ctrl+C'\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Writer Paragraph Tabs\nDESCRIPTION: This code demonstrates how to set paragraph tabs using the `Tabs` class from the `ooodev` library. It creates a new Writer document, sets the visibility and zoom level, and then defines three tab stops with different positions, alignments, and fill characters. These tabs are then applied to the document using the `Styler.apply` method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/tabs.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.writer.modify.para.tabs import Tabs, TabAlign\nfrom ooodev.format.writer.modify.para.tabs import FillCharKind, StyleParaKind\nfrom ooodev.format import Styler\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_150_PERCENT)\n\n        tb1 = Tabs(position=12.0, align=TabAlign.DECIMAL)\n        tb2 = Tabs(position=6.5, align=TabAlign.CENTER, fill_char=\"*\")\n        tb3 = Tabs(position=11.3, align=TabAlign.LEFT, fill_char=FillCharKind.UNDER_SCORE)\n        Styler.apply(doc, tb1, tb2, tb3)\n\n        style_obj = Tabs.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\n        assert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\"\n```\n\n----------------------------------------\n\nTITLE: Main Function Implementation in Python\nDESCRIPTION: This snippet shows the main function of the 'garlic_secrets.py' file, which opens a spreadsheet, calculates totals for a specified column using general functions, and performs other operations such as increasing the garlic cost. Key dependencies include the Calc and Lo classes from the associated libraries. It requires 'produceSales.xlsx' as input and performs calculations and data manipulations displayed via print statements.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter23.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# garlic_secrets.py\n        def main(self) -> None:\n            loader = Lo.load_office(Lo.ConnectSocket())\n\n            doc = CalcDoc(Calc.open_doc(fnm=self._fnm, loader=loader))\n\n            doc.set_visible()\n\n            sheet = doc.get_sheet(0)\n            sheet.goto_cell(cell_name=\"A1\")\n\n            # freeze one row of view\n            # doc.freeze_rows(num_rows=1)\n\n            # find total for the \"Total\" column\n            total_range = sheet.get_col_range(idx=3)\n            total = doc.compute_function(\n                fn=GeneralFunction.SUM, cell_range=total_range.component\n            )\n            print(f\"Total before change: {total:.2f}\")\n            print()\n\n            self._increase_garlic_cost3(sheet)  # takes several seconds\n\n            # recalculate total\n            total = doc.compute_function(fn=GeneralFunction.SUM, cell_range=total_range)\n            print(f\"Total after change: {total:.2f}\")\n            print()\n\n            # add a label at the bottom of the data, and hide it\n\n            # split window into 2 view panes\n\n            # access panes; make top pane show first row\n\n            # display view properties\n\n            # show view data\n\n            # show sheet states\n\n            # make top pane the active one in the first sheet\n\n            # show revised sheet states\n\n            # add a new first row, and label that as at the bottom\n\n            # Save doc\n\n            # ...\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example\nDESCRIPTION: Illustrates the structure of event callback functions for FormCtlComboBox, including the control_src keyword argument. It presents two alternative callback formats: one explicitly taking control_src as an argument, and another accessing it from kwargs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_combo_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlComboBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Module Documentation Structure\nDESCRIPTION: RST formatted documentation structure defining the package hierarchy and documentation settings for the Calc background module\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.background.rst#2025-04-16_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.modify.calc.background.color\n\n.. automodule:: ooodev.format.inner.modify.calc.background\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Glue Points in Python\nDESCRIPTION: Static method to retrieve glue points from a shape using the XGluePointsSupplier interface. Returns a tuple of GluePoint2 objects representing connection points on the shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_glue_points(shape: XShape) -> Tuple[GluePoint2, ...]:\n    gp_supp = mLo.Lo.qi(XGluePointsSupplier, shape, True)\n    glue_pts = gp_supp.getGluePoints()\n\n    num_gps = glue_pts.getCount()  # should be 4 by default\n    if num_gps == 0:\n        return ()\n\n    gps: List[GluePoint2] = []\n    for i in range(num_gps):\n        try:\n            gps.append(glue_pts.getByIndex(i))\n        except Exception as e:\n            mLo.Lo.print(f\"Could not access glue point: {i}\")\n            mLo.Lo.print(f\"  {e}\")\n\n    return tuple(gps)\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: Illustrates the format of a callback function (`on_some_event`) for handling events related to CtlGrid controls. It demonstrates how to access the control source (`CtlGrid` instance) either directly as a parameter or through keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_grid.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlGrid, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Pages with for Loop in Python\nDESCRIPTION: Demonstrates iteration over pages in a draw document using a for loop, showcasing Python's iteration capabilities. Assumes an instance of WriteDoc.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/generic_draw_pages.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc(loader))\n>>> for pg in doc.slides:\n...     print(pg)\n<ooodev.draw.GenericDrawPage object at 0x7f7f0c0b2b90>\n```\n\n----------------------------------------\n\nTITLE: Documenting RuleDataInstance Class with Sphinx\nDESCRIPTION: This snippet uses the Sphinx autoclass directive to generate documentation for the RuleDataInstance class. The `:members:` option includes all public members, and `:undoc-members:` includes undocumented members.  This allows for comprehensive API documentation directly from the source code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/search/tree_search/rule_data_instance.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n\".. autoclass:: ooodev.dialog.search.tree_search.RuleDataInstance\n    :members:\n    :undoc-members:\"\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for ooodev.adapter.ucb.transient_documents_folder_content_comp\nDESCRIPTION: This code snippet uses the Sphinx automodule directive to generate documentation for the ooodev.adapter.ucb.transient_documents_folder_content_comp module. It includes module members, undocumented members, and the inheritance diagram.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.ucb.transient_documents_folder_content_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.ucb.transient_documents_folder_content_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Toctree Structure in reStructuredText\nDESCRIPTION: This reStructuredText code defines a table of contents structure for the 'Modify' section, linking to subsections for cell and page formatting modifications. The toctree directive is set with a maximum depth of 2 levels.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _help_calc_format_modify:\n\nModify\n======\n\n.. toctree::\n    :maxdepth: 2\n\n    cell/index\n    page/index\n```\n\n----------------------------------------\n\nTITLE: Listing Conversion Dictionaries in Python with Office API\nDESCRIPTION: This static method within the Write class retrieves a list of conversion dictionaries and iterates over them to print their names. It uses the XConversionDictionaryList interface to access the dictionaries and counts them before listing each one by name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# in the Write class\n@staticmethod\ndef print_con_dicts_info(cd_lst: XConversionDictionaryList) -> None:\n    if cd_lst is None:\n        print(\"Conversion Dictionary list is null\")\n        return\n\n    dc_con = cd_lst.getDictionaryContainer()\n    dc_names = dc_con.getElementNames()\n    print(f\"No. of conversion dictionaries: {len(dc_names)}\")\n    for name in dc_names:\n        print(f\"  {name}\")\n    print()\n\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Type String in Python using Calc\nDESCRIPTION: This method retrieves the type of content stored in the cell as a string. It supports identifying whether the content is empty, a value, text, or a formula, while gracefully handling any unknown types.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter21.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\n    def get_type_string(cls, cell: XCell) -> str:\n        t = cls.get_type_enum(cell=cell)\n        return str(t)\n\n    @staticmethod\n    def get_type_enum(cell: XCell) -> Calc.CellTypeEnum:\n        t = cell.getType()\n        if t == CellContentType.EMPTY:\n            return Calc.CellTypeEnum.EMPTY\n        if t == CellContentType.VALUE:\n            return Calc.CellTypeEnum.VALUE\n        if t == CellContentType.TEXT:\n            return Calc.CellTypeEnum.TEXT\n        if t == CellContentType.FORMULA:\n            return Calc.CellTypeEnum.FORMULA\n        Lo.print(\"Unknown cell type\")\n        return Calc.CellTypeEnum.UNKNOWN\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.writer.direct.para.text_flow Module\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate documentation for the ooodev.format.writer.direct.para.text_flow module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.para.text_flow.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.para.text_flow\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting TimeFormatKind Class using ReStructuredText\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the TimeFormatKind class. It includes all class members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/time_format_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.time_format_kind.TimeFormatKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Autodoc for ConnectBase class in Python\nDESCRIPTION: This snippet uses autodoc directives to generate documentation for the ConnectBase class. It includes members of the class and references chapter 2 for additional context.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/conn/connect/connector_base.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\n.. autoclass:: ooodev.conn.connect.ConnectBase\n    :members:\n\n```\n\n----------------------------------------\n\nTITLE: Getting Highlight Color from Style in Python\nDESCRIPTION: This code snippet retrieves the highlight color from a paragraph style in a Writer document. It uses the `Highlight.from_style` method to create a `Highlight` object representing the style, and then asserts that the style name matches the expected value. It relies on the `ooodev` library and assumes a document `doc` is already open.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/para/highlight.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# ... other code\n\nstyle_obj = Highlight.from_style(doc=doc, style_name=StyleParaKind.STANDARD)\nassert style_obj.prop_style_name == str(StyleParaKind.STANDARD)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback for FormCtlDbTextField in Python\nDESCRIPTION: This snippet defines an event callback function using Python, intended for handling events associated with FormCtlDbTextField controls in a form. The function expects a source object, an EventArgs instance, and optionally the FormCtlDbTextField control. It highlights making use of keyword arguments to access the specific control instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_text_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbTextField, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.chart2.regression_curve_partial Module\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.chart2.regression_curve_partial` module. It includes documentation for all members, even undocumented ones, and shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.chart2.regression_curve_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.chart2.regression_curve_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback with CtlGroupBox in Python\nDESCRIPTION: This Python code snippet demonstrates how to define an event callback function that handles events with the CtlGroupBox class. The function includes 'control_src' as a keyword argument, which represents the CtlGroupBox control source. The callback function is designed to process events, and the control can be obtained directly from the keyword arguments.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_group_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: CtlGroupBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Component Document Conversion Example\nDESCRIPTION: Example showing proper conversion of spreadsheet document to XComponent interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_39\n\nLANGUAGE: python\nCODE:\n```\ncomp_doc = Lo.qi(XComponent, doc, True)\nprint(f\"2. No. of draw pages: {Draw.get_slides_count(comp_doc)}\")\n```\n\n----------------------------------------\n\nTITLE: Using fmt_ Methods to Create New Style Instances in OooDev Python\nDESCRIPTION: Shows how to use the fmt_ prefixed methods to create a new style instance with a specific property set. In this example, fmt_spacing creates a new Font instance with the spacing property set to 2.1, which can be accessed via prop_spacing.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/format/format_coding_style.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.direct.char.font import Font\nfrom ooodev.utils.color import StandardColor\n# ... other code\n\nbase_font = Font(color=StandardColor.GREEN_DARK3, size=12, name=\"Liberation Serif\")\nspc_font = base_font.fmt_spacing(2.1)\nWrite.append_para(cursor=cursor, text=\"Hello World!\", styles=[spc_font])\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents\nDESCRIPTION: RST directive for configuring table of contents (toctree) with titlesonly option and glob pattern to include all files in directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src_docs/event/props/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Autoclass Documentation Generation for ConnectorBase (reStructuredText)\nDESCRIPTION: This snippet uses the `autoclass` directive in reStructuredText to automatically generate documentation for the `ConnectorBase` class. The `:members:` option ensures that all members of the class, including methods and attributes, are included in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/conn/connectors/connector_base.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.conn.connectors.ConnectorBase\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Setting Area Hatch - Writer Header\nDESCRIPTION: This snippet showcases how to set the area hatch style for the header in a Writer document using `HeaderStyleHatch`. It uses a preset hatch style and applies it to the document. The `Styler.apply` method applies the header style and hatch style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"from ooodev.format.writer.modify.page.header.area import Hatch as HeaderStyleHatch, PresetHatchKind\n# ... other code\n\nhatch_style = HeaderStyleHatch.from_preset(\n    preset=PresetHatchKind.RED_45_DEGREES_NEG_TRIPLE, style_name=WriterStylePageKind.STANDARD\n)\nStyler.apply(doc, header_style, hatch_style)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Background Colors for Chart in Python\nDESCRIPTION: This static method sets the background and wall colors of a chart. It retrieves the page background from the chart document and the wall from the chart diagram, then sets their fill properties to the specified colors.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter28.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n        # in Chart2 class\n        @staticmethod\n        def set_background_colors(\n            chart_doc: XChartDocument, bg_color: mColor.Color, wall_color: mColor.Color\n        ) -> None:\n            try:\n                if int(bg_color) > 0:\n                    bg_ps = chart_doc.getPageBackground()\n                    # Props.show_props(\"Background\", bg_ps)\n                    Props.set(\n                        bg_ps, FillBackground=True, FillStyle=FillStyle.SOLID, FillColor=int(bg_color)\n                    )\n\n                if int(wall_color) > 0:\n                    diagram = chart_doc.getFirstDiagram()\n                    wall_ps = diagram.getWall()\n                    # Props.show_props(\"Wall\", wall_ps)\n                    Props.set(\n                        wall_ps, FillBackground=True, FillStyle=FillStyle.SOLID, FillColor=int(wall_color)\n                    )\n            except Exception as e:\n                raise ChartError(\"Error setting background colors\") from e\n```\n\n----------------------------------------\n\nTITLE: Waiting for End of Slide Show in Impress\nDESCRIPTION: This code snippet defines a method that waits for the slide show to end by polling the current slide index. It will pause the script until the slide show indicates completion with a return value of -1.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter18.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in the Draw Class\n@staticmethod\ndef wait_ended(sc: XSlideShowController) -> None:\n    while True:\n        curr_index = sc.getCurrentSlideIndex()\n        if curr_index == -1:\n            break\n        Lo.delay(500)\n\n    Lo.print(\"End of presentation detected\")\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Classes from ooodev.dialog\nDESCRIPTION: Example of importing the recommended replacement classes from ooodev.dialog module, including Dialogs, BorderKind, and OrientationKind.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/dialogs.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.dialog import Dialogs, BorderKind, OrientationKind\n\n# other code\n```\n\n----------------------------------------\n\nTITLE: Setup for Chart2 Legend Area Formatting in Python\nDESCRIPTION: Imports necessary modules and sets up a basic structure for formatting Chart2 legend areas using ooodev library. Includes opening a document, setting up a chart, and applying styles to the chart background and legend.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/legend/area.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.legend.area import Color as LegendAreaColor\nfrom ooodev.format.chart2.direct.legend.transparency import Transparency as LegendTransparency\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient\nfrom ooodev.format.chart2.direct.general.area import GradientStyle, ColorRange\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.utils.kind.zoom_kind import ZoomKind\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"pie_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"pie_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BRICK, width=1)\n        chart_grad = ChartGradient(\n            chart_doc=chart_doc,\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(StandardColor.GREEN_DARK4, StandardColor.TEAL_LIGHT2),\n        )\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        legend_color_style = LegendAreaColor(color=StandardColor.GREEN_LIGHT2)\n        legend_bg_transparency_style = LegendTransparency(0)\n        Chart2.style_legend(\n            chart_doc=chart_doc, styles=[legend_bg_transparency_style, legend_color_style]\n        )\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment Variables for LibreOffice Integration\nDESCRIPTION: Default environment variables configuration for testing LibreOffice integration. Controls headless mode, dynamic operations, visibility, socket connections, and verbosity settings. These values can be set in a .test.env file in the project root.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nODEV_TEST_HEADLESS=1\nODEV_TEST_OPT_DYNAMIC=0\nODEV_TEST_OPT_VISIBLE=0\nODEV_TEST_CONN_SOCKET=0\nODEV_TEST_CONN_SOCKET_PORT=2002\nODEV_TEST_CONN_SOCKET_HOST=localhost\nODEV_TEST_CONN_SOCKET_KIND=default\nODEV_TEST_OPT_VERBOSE=1\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.modify.write.frame.frame_type Module\nDESCRIPTION: This snippet uses `automodule` to generate documentation for the `ooodev.format.inner.modify.write.frame.frame_type` module. It includes module members, shows undocumented members, and displays class inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.frame.frame_type.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.frame.frame_type\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Style Module Documentation in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents (toctree) for the 'style' module documentation. It uses the 'titlesonly' option to show only top-level headings and the 'glob' option to automatically include all matching files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n    direct/index\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive in Sphinx\nDESCRIPTION: This snippet shows the usage of the `automodule` directive in Sphinx documentation to automatically generate documentation for the `ooodev.adapter.xml.xpath.x_path_api_partial` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options specify which parts of the module should be included in the documentation.  This directive is crucial for auto-generating API documentation from Python code.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.xml.xpath.x_path_api_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.adapter.xml.xpath.x_path_api_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Point Properties in a Chart\nDESCRIPTION: This utility method retrieves the property set for a specific data point in a chart. It takes the chart document, series index, and point index as inputs and returns the corresponding XPropertySet that can be modified to affect the data point's appearance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter30.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@classmethod\ndef get_data_point_props(\n    cls, chart_doc: XChartDocument, series_idx: int, idx: int\n) -> XPropertySet:\n    props = cls.get_data_points_props(chart_doc=chart_doc, idx=series_idx)\n    if not props:\n        raise NotFoundError(\"No Datapoints found to get XPropertySet from\")\n\n    if idx < 0 or idx >= len(props):\n        raise IndexError(f\"Index value of {idx} is out of of range\")\n\n    return props[idx]\n```\n\n----------------------------------------\n\nTITLE: Running Draw Gradient Example with Named Gradient and Custom Properties\nDESCRIPTION: Demonstrates how to create a named gradient with custom properties including gradient kind, angle, start color, and end color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/gradient/README.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npython -m start -k name_props --gradient-kind sunshine -a 88 -s \"dark violet\" -e light_goldenrod_yellow\n```\n\n----------------------------------------\n\nTITLE: Initializing DotDict Class in Python\nDESCRIPTION: Constructor for the DotDict class. It takes an optional default value for missing attributes and initial key-value pairs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/helper/dot_dict.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDotDict[T](missing_attr_val: Any = NULL_OBJ, **kwargs: T)\n```\n\n----------------------------------------\n\nTITLE: Basic LRUCache Usage in Python\nDESCRIPTION: Demonstrates creation and basic operations of LRUCache with a fixed maximum size of 10. Shows adding items, accessing them, deleting items, and verifying singleton behavior when created with same parameters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/lru_cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.cache.singleton import LRUCache\n\ncache = LRUCache(max_size=10)\n\ncache[\"key1\"] = \"value1\"\ncache[\"key2\"] = \"value2\"\ncache[\"key3\"] = \"value3\"\n\nprint(cache[\"key1\"]) # prints \"value1\"\nprint(cache[\"key2\"]) # prints \"value2\"\nprint(cache[\"key3\"]) # prints \"value3\"\n\ndel cache[\"key1\"]\nassert \"key1\" not in cache\n\ncache2 = LRUCache(max_size=10)\nassert cache is cache2 # True\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive in Sphinx for ooodev.format.inner.partial.calc.font.font_effects_partial\nDESCRIPTION: This snippet demonstrates the use of the `automodule` directive in Sphinx to generate documentation for the `ooodev.format.inner.partial.calc.font.font_effects_partial` module.  The `:members:` option includes all module members in the documentation, `:undoc-members:` includes undocumented members, and `:show-inheritance:` shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.calc.font.font_effects_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\n.. automodule:: ooodev.format.inner.partial.calc.font.font_effects_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Printing Labeled Data Sequences\nDESCRIPTION: Diagnostic method for displaying labeled data sequences from a data source. Prints sequence labels, values, and source range representations.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef print_labeled_seqs(data_source: XDataSource) -> None:\n    data_seqs = data_source.getDataSequences()\n    print(f\"No. of sequeneces in data source: {len(data_seqs)}\")\n    for seq in data_seqs:\n        label_seq = seq.getLabel().getData()\n        print(f\"{label_seq[0]} :\")\n        vals_seq = seq.getValues().getData()\n        for val in vals_seq:\n            print(f\"  {val}\")\n        print()\n        sr_rep = seq.getValues().getSourceRangeRepresentation()\n        print(f\"  Source range: {sr_rep}\")\n    print()\n```\n\n----------------------------------------\n\nTITLE: Binding Ellipses with UNO in Python\nDESCRIPTION: This function binds two ellipses into a single shape using the XShapeBinder interface in UNO. It creates an instance of XShapes and adds the individual ellipses before binding them into one shape on the slide. The function requires a DrawPage instance and two XShapes and results in a bound shape with a connector.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter15.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# _bind_ellipses() class of grouper.py\ndef _bind_ellipses(self, slide: DrawPage[DrawDoc], s1: XShape, s2: XShape) -> None:\n    shapes = Lo.create_instance_mcf(\n        XShapes, \"com.sun.star.drawing.ShapeCollection\", raise_err=True\n    )\n    shapes.add(s1)\n    shapes.add(s2)\n    binder = slide.qi(XShapeBinder, True)\n    binder.bind(shapes)\n```\n\n----------------------------------------\n\nTITLE: Creating Labeled Data Sequence for Error Bars in Python\nDESCRIPTION: This static method creates a labeled data sequence from two data sequences - one for labels and one for data - for use in chart error bars. Required dependencies include XDataProvider, DataRoleKind, XLabeledDataSequence, and the ErrorBar service. The method handles data sequence creation, property setting for the data's role, and returns a labeled data sequence.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@staticmethod\ndef create_ld_seq(\n    dp: XDataProvider, role: DataRoleKind | str, data_label: str, data_range: str\n) -> XLabeledDataSequence:\n    try:\n        # create data sequence for the label\n        lbl_seq = dp.createDataSequenceByRangeRepresentation(data_label)\n\n        # reate data sequence for the data and role\n        data_seq = dp.createDataSequenceByRangeRepresentation(data_range)\n\n        ds_ps = Lo.qi(XPropertySet, data_seq, True)\n\n        # specify data role (type)\n        Props.set_property(ds_ps, \"Role\", str(role))\n        # Props.show_props(\"Data Sequence\", ds_ps)\n\n        # create new labeled data sequence using sequences\n        ld_seq = Lo.create_instance_mcf(\n            XLabeledDataSequence,\n            \"com.sun.star.chart2.data.LabeledDataSequence\",\n            raise_err=True\n        )\n        ld_seq.setLabel(lbl_seq)\n        ld_seq.setValues(data_seq)\n        return ld_seq\n    except Exception as e:\n        raise ChartError(\"Error creating LD sequence\") from e\n\n```\n\n----------------------------------------\n\nTITLE: reStructuredText directive for RowObj class documentation\nDESCRIPTION: Sphinx directive that generates automatic documentation for the RowObj class from the ooodev.utils.data_type.row_obj module. The directive includes all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/row_obj.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.row_obj.RowObj\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Basic TimeCache Usage with TTL in Python\nDESCRIPTION: Demonstrates creating a TimeCache instance with a 2-second TTL, storing and retrieving values, and checking expiration behavior.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/time_cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom ooodev.utils.cache import TimeCache\n\ncache = TimeCache(seconds=2)  # 60 seconds\ncache[\"key\"] = \"value\"\nassert \"key\" in cache # True\nassert cache[\"key\"] == \"value\"\n\ntime.sleep(1)\nassert \"key\" in cache # True\n\ntime.sleep(3)\nassert \"key\" not in cache # True\n```\n\n----------------------------------------\n\nTITLE: Connecting to LibreOffice via Socket in Python\nDESCRIPTION: This code snippet demonstrates how to use the ConnectSocket class from the ooodev library to connect to LibreOffice via a socket. It shows how to create a ConnectSocket instance and pass it to the Lo.load_office method to load LibreOffice with the specified connection configuration. The 'loader' variable then holds the LibreOffice instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/conn/connectors/connector_socket.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\n\nloader = Lo.load_office(Lo.ConnectSocket())\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Module\nDESCRIPTION: This Python code imports necessary modules and defines a simple 'main' function which, when called, displays a message box saying 'Hello, world!'. It demonstrates basic interaction with LibreOffice's API.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_linking_paths.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom ooodev.loader import Lo\n\ndef main():\n    doc = Lo.current_doc    \n    doc.msgbox('Hello, world!')\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Document Start in OOo Writer\nDESCRIPTION: Illustrates applying paragraph styles directly to the start of an OOo Writer document. It uses the 'LineSpacing' and 'Indent' classes to style the start of the document. Prerequisites include accessing the document's 'XTextRange'.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/indent_spacing.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n# get the XTextRange of the document\nxtext_range = doc.getText().getStart()\n# Created the spacing values apply them to the text range.\nln_spc = LineSpacing(mode=ModeKind.PROPORTIONAL, value=85)\nindent = Indent(before=8.0, after=8.0, first=8.0)\nStyler.apply(xtext_range, ln_spc, indent)\n\ncursor = Write.get_cursor(doc)\nWrite.append_para(cursor=cursor, text=p_txt)\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Example with kwargs\nDESCRIPTION: Illustrates an alternative structure of an EventArgsCallbackT function that utilizes `kwargs` to access the `control_src` argument. This demonstrates how to retrieve the FormCtlFormattedField control source from the keyword arguments within the callback function, casting it for type safety.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_formatted_field.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(FormCtlFormattedField, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Importing Module from Shared LibreOffice Script\nDESCRIPTION: Demonstrates using the importer_shared_script context manager to import a module from LibreOffice Shared Libraries. Shows how to load an office instance, create a document, and import a shared script module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/uno_helper/importer/importer_shared_script.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nfrom ooodev.calc import CalcDoc\nfrom ooodev.loader import Lo\nfrom ooodev.uno_helper.importer import importer_shared_script\n\n\ndef main():\n    _ = Lo.load_office(connector=Lo.ConnectPipe())\n    doc = None\n    try:\n        doc = CalcDoc.create_doc()\n\n        with importer_shared_script():\n            import Capitalise\n\n        print(\"Done\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    finally:\n        if doc:\n            doc.close()\n        Lo.close_office()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Running Manual Spell Check for Documentation\nDESCRIPTION: Performs a manual spell check on documentation files using Sphinx spelling extension.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n(.venv) $ sphinx-build -b spelling . _build\n```\n\n----------------------------------------\n\nTITLE: Documenting UNO Link Target Component Adapter\nDESCRIPTION: Sphinx autodoc configuration for exposing members of the link target component adapter module\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.document.link_target_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.document.link_target_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transparency from a Style in Python\nDESCRIPTION: This snippet shows how to retrieve transparency settings from an existing style in a LibreOffice Draw document. The from_style static method gets the transparency value from the default drawing style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/modify/transparency/transparency.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = Transparency.from_style(\n    doc=doc.component,\n    style_name=FamilyGraphics.DEFAULT_DRAWING_STYLE,\n    style_family=DrawStyleFamilyKind.GRAPHICS,\n)\nassert f_style.prop_inner.prop_value == Intensity(88)\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Properties of Shape in LibreOffice Draw (Python)\nDESCRIPTION: This snippet demonstrates how to retrieve and display the text properties of a text shape. It uses the Draw class methods to get the text properties and the Props class to show them.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# in _draw_shapes() in draw_picture.py\ntext1 = curr_slide.draw_text(\n    msg=\"Hello LibreOffice\",\n    x=120,\n    y=120,\n    width=60,\n    height=30,\n    font_size=24,\n)\ntext1.component.Name = \"text1\"\nProps.show_props(\n    \"TextShape's Text Properties\",\n    Draw.get_text_properties(text1.component)\n)\n```\n\n----------------------------------------\n\nTITLE: Running Draw Gradient Example (Cross-Platform)\nDESCRIPTION: Demonstrates how to run the gradient example script from the current example folder using Python. This command displays the help information for the script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/gradient/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start -h\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for AxisKind Class Using autoclass Directive\nDESCRIPTION: ReStructuredText markup that uses Sphinx's autoclass directive to generate documentation for the AxisKind class. The directive is configured to include all members and undocumented members in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/axis_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.axis_kind.AxisKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python module with automodule directive\nDESCRIPTION: The ``automodule`` directive is used within the Sphinx documentation generator to automatically document a Python module.  This example shows how to include members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.borders.line_properties_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.proto.borders.line_properties_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: ReStructuredText documentation configuration for the indent_space package showing module hierarchy and documentation settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.indent_space.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.write.para.indent_space.indent\n   ooodev.format.inner.direct.write.para.indent_space.indent_spacing\n   ooodev.format.inner.direct.write.para.indent_space.line_spacing\n   ooodev.format.inner.direct.write.para.indent_space.spacing\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Transparency\nDESCRIPTION: Demonstrates how to apply gradient transparency to a chart background with custom angle and intensity range settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/transparency.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.general.transparency import Gradient as ChartGradientTransparency\nfrom ooodev.format.chart2.direct.general.transparency import IntensityRange\nfrom ooodev.utils.data_type.angle import Angle\n\nchart_color = ChartColor(color=StandardColor.GREEN_LIGHT2)\nchart_bdr_line = ChartLineProperties(color=StandardColor.GREEN_DARK3, width=0.7)\nchart_grad_transparent = ChartGradientTransparency(\n    chart_doc=chart_doc, angle=Angle(30), grad_intensity=IntensityRange(0, 100)\n)\nChart2.style_background(\n    chart_doc=chart_doc,\n    styles=[chart_color, chart_bdr_line, chart_grad_transparent]\n)\n```\n\n----------------------------------------\n\nTITLE: Tree Edit Events Module\nDESCRIPTION: Handles edit-related events for tree components in OpenOffice development toolkit\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.tree.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nooodev.adapter.awt.tree.tree_edit_events\n```\n\n----------------------------------------\n\nTITLE: Drawing Ellipse Shape\nDESCRIPTION: Method for drawing an ellipse by specifying position, width and height parameters.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# in Draw class (simplified)\n@classmethod\ndef draw_ellipse(cls, slide: XDrawPage, x: int, y: int, width: int, height: int) -> XShape:\n    return cls.add_shape(\n        slide=slide, shape_type=DrawingShapeKind.ELLIPSE_SHAPE, x=x, y=y, width=width, height=height\n    )\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Class Documentation Definition\nDESCRIPTION: Sphinx restructuredtext directive that generates automated documentation for the WriteTableCellRange class, including all public and special methods, inheritance details, and member documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/write_table_cell_range.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.write.table.write_table_cell_range.WriteTableCellRange\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __getitem__,  __iter__\n```\n\n----------------------------------------\n\nTITLE: Displaying Object Properties in Python\nDESCRIPTION: Displays properties of a text range object in a shape by calling a method to list them. Useful for debugging or learning about the shape's attributes, this snippet shows how the `show_obj_props` method can be used for exploring object properties in a structured manner.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter16.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nProps.show_obj_props(\"TextRange in OutlinerShape\", tr)\n```\n\n----------------------------------------\n\nTITLE: Running Slide Chart Script (Linux/Mac)\nDESCRIPTION: Command to run the slide chart generation script on Linux or Mac systems, specifying the full path to the start.py file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart2/slide_chart/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Chart2/slide_chart/start.py\n```\n\n----------------------------------------\n\nTITLE: EventArgsCallbackT Callback Example\nDESCRIPTION: This code snippet demonstrates an example of an EventArgsCallbackT callback function that includes 'control_src' as a keyword argument, allowing access to the FormCtlDbCheckBox control within the event handler. It showcases one way to define an event handler function that accepts the control as a type-hinted parameter.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/database/form_ctl_db_check_box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlDbCheckBox, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.modify.write.fill.area Module Contents\nDESCRIPTION: This snippet utilizes `automodule` to generate documentation for the `ooodev.format.inner.modify.write.fill.area` module. It includes documentation for all members, even undocumented ones, and shows the inheritance hierarchy of classes within the module. This allows for comprehensive documentation of the module's functionality and structure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.fill.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.fill.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Package Documentation\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.writer.direct.image.borders` package. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options specify what aspects of the package to include in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.direct.image.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.writer.direct.image.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Guessing Language from String in Python\nDESCRIPTION: This snippet shows how to use the LanguageGuessing service to guess the locale of a given string. It initializes the service and prints the guessed language information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter10.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# from lingo example\n# guess the language\nloc = Write.guess_locale(\"The rain in Spain stays mainly on the plain.\")\nWrite.print_locale(loc)\n\nif loc is not None:\n    print(\"Guessed language: \" + loc.Language)\n\nloc = Write.guess_locale(\"A vaincre sans péril, on triomphe sans gloire.\")\n\nif loc is not None:\n    print(\"Guessed language: \" + loc.Language)\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Callback for File Control Events in Python\nDESCRIPTION: This Python snippet illustrates how to define an event callback function that receives a form's control source as a keyword argument. It is used to handle form events with optional access to the control source via kwargs. No specific dependencies are required other than the standard ooodev framework imports. Inputs include the event arguments and control source, and there are no defined outputs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/form/controls/form_ctl_file.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(\n    src: Any, event: EventArgs, control_src: FormCtlFile, *args, **kwargs\n) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Sphinx Directive for ColorRange Class Documentation\nDESCRIPTION: Sphinx documentation directive that auto-generates documentation for the ColorRange class from the ooodev.utils.data_type.color_range module. The :members: flag indicates that all class members should be included in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/color_range.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.color_range.ColorRange\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation\nDESCRIPTION: This snippet represents an `automodule` directive used within Sphinx documentation to automatically generate documentation for the specified Python module. It includes options to show members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.page.footer.area.img.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.page.footer.area.img\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Positioning Chart Subtitle with Python\nDESCRIPTION: This snippet sets the position of a chart's subtitle, ensuring the element is not None before calling 'style_position'. The coordinates used are 7.1 mm and 66.3 mm. The 'chart_doc' variable must be initialized, and a valid chart subtitle should exist.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/position_size.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nsub_title = chart_doc.first_diagram.get_title()\nif sub_title is None:\n    raise ValueError(\"Title not found\")\n\nsub_title.style_position(7.1, 66.3)\n```\n\n----------------------------------------\n\nTITLE: Submodule listing using toctree\nDESCRIPTION: This snippet uses the `toctree` directive to list the submodules within the `ooodev.format.proto.area.transparency` package. The `:maxdepth:` option controls the depth of the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.area.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.proto.area.transparency.gradient_t\n   ooodev.format.proto.area.transparency.transparency_t\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Text Alignment in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the text alignment of a shape using the Alignment.from_obj() method. It asserts that the alignment is set to center.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/paragraph/alignment.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# get the properties from the shape\nf_style = Alignment.from_obj(rect.component)\nassert f_style.prop_align == ParagraphAdjust.CENTER\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grid Line Style on Chart Y-Axis in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the current grid line style from a chart's y-axis using the 'style_gird_line_get()' method. The result is stored in 'f_style', which is checked for a 'None' value, indicating the absence of a style. This code requires 'chart_doc' object from an 'ooodev' initialized environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/grid/line_properties.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nf_style = chart_doc.axis_y.style_gird_line_get()\nassert f_style is not None\n```\n\n----------------------------------------\n\nTITLE: Class ExportBase Documentation\nDESCRIPTION: This snippet demonstrates the use of the 'autoclass' directive in Sphinx documentation to automatically generate documentation for the ExportBase class. The ':members:' option includes all documented members of the class, and ':undoc-members:' includes undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/calc/export/export_base.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.calc.export.export_base.ExportBase\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible Sections in RST\nDESCRIPTION: Shows how to create a basic collapsible section using the collapse directive, which allows hiding content that can be revealed by the user.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_22\n\nLANGUAGE: rst\nCODE:\n```\n.. collapse:: Some Text\n\n    Congrats, you have revealed hidden text\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in reStructuredText for Python OpenOffice Dev Tools\nDESCRIPTION: This snippet creates a table of contents using the toctree directive in reStructuredText. It is configured to display only titles and include all files in the current directory using a glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/direct/table/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Retrieving Frame Style from Object\nDESCRIPTION: This code snippet illustrates retrieving the applied frame style from a text frame object in a LibreOffice Writer document, using the UNO API. The snippet extracts the frame style from the frame object and verifies its properties, ensuring that the applied style matches the predefined style.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/style/frame.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nf_style = Frame.from_obj(tf)\nassert f_style.prop_name == style.prop_name\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Background to Chart Data Point in Python\nDESCRIPTION: This snippet shows how to apply a background pattern to a specific data point in a chart using the style_area_pattern_from_preset() method. It uses the PresetPatternKind enum to select a pattern preset.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/series/data_series/area.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_pattern import PresetPatternKind\n\n# ... other code\nds = chart_doc.get_data_series()[0]\ndp = ds[4]\ndp.style_area_pattern_from_preset(preset=PresetPatternKind.ZIG_ZAG)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for WriteTableRows Class\nDESCRIPTION: Sphinx documentation configuration directive that specifies how to document the WriteTableRows class. Includes settings for showing all members, undocumented members, inheritance chain, inherited members and specific special methods.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/table/write_table_rows.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.table.write_table_rows.WriteTableRows\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __next__, __getitem__,  __delitem__\n```\n\n----------------------------------------\n\nTITLE: Checking for Shape-Based Document in Python\nDESCRIPTION: This static method `is_shapes_based` checks if a given LibreOffice document is a Draw or Impress document. It utilizes the `Info.is_doc_type` method and checks if the document type is either `Lo.Service.DRAW` or `Lo.Service.IMPRESS`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter12.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@staticmethod\ndef is_shapes_based(doc: XComponent) -> bool:\n    return Info.is_doc_type(obj=doc, doc_type=mLo.Lo.Service.DRAW) or Info.is_doc_type(\n        obj=doc, doc_type=mLo.Lo.Service.IMPRESS\n    )\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for transparency module in Python\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate API documentation for the ooodev.format.chart2.direct.series.data_series.transparency module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.series.data_series.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.series.data_series.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring toctree for Chart Title/Subtitle Documentation in reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that organizes documentation related to chart title and subtitle formatting. It's configured to show only titles and include all files in the current directory using a glob pattern.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Multi-script Config JSON\nDESCRIPTION: Advanced configuration for multi-script setup including module exclusions and method specifications for oooscript compilation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/embed_python.rst#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"oooscript\",\n    \"name\": \"tabs_list_box\",\n    \"app\": \"CALC\",\n    \"version\": \"1.0.0\",\n    \"args\": {\n        \"src_file\": \"script.py\",\n        \"output_name\": \"tabs_list_box\",\n        \"single_script\": false,\n        \"clean\": false,\n        \"exclude_modules\": [\n            \"ooodev\\\\.*\",\n            \"com\\\\.*\",\n            \"ooo\\\\.*\"\n        ]\n    },\n    \"methods\": [\n        \"show_tabs\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for Writer Frame Style\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the ooodev.format.writer.style.frame.frame module, including all members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.style.frame.frame.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.writer.style.frame.frame\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: DrawDocView Class Definition\nDESCRIPTION: This is a Sphinx autodoc directive that automatically generates documentation for the `ooodev.draw.DrawDocView` class. It specifies to include all members, even undocumented ones, show inheritance, and include inherited members in the documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/draw_doc_view.rst#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n.. autoclass:: ooodev.draw.DrawDocView\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Table Header Row Background Color\nDESCRIPTION: Configures the background color of the table's header row using XTextTable and XTableRows interfaces. Sets the BackColor property for the first row with optional color customization.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter07.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nif header_bg_color is not None:\n    rows = table.getRows()\n    Props.set_property(prop_set=rows.getByIndex(0), name=\"BackColor\", value=header_bg_color)\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for ooodev.format.chart2.direct.axis.line package\nDESCRIPTION: This directive tells Sphinx to automatically document the ooodev.format.chart2.direct.axis.line module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.axis.line.rst#2025-04-16_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.axis.line\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Getting Shapes from XDrawPage in Draw Class - Python\nDESCRIPTION: The method _get_shapes_slide() retrieves a list of shapes from an XDrawPage object. It depends on methods mLo.Lo.qi() for casting and slide's getCount() and getByIndex() for shape access. Expects an XDrawPage and returns a list of XShape objects.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# in the draw class (simplified)\n@classmethod\ndef _get_shapes_slide(cls, slide: XDrawPage) -> List[XShape]:\n    if slide.getCount() == 0:\n        return []\n\n    shapes: List[XShape] = []\n    for i in range(slide.getCount()):\n        shapes.append(mLo.Lo.qi(XShape, slide.getByIndex(i), True))\n    return shapes\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.sdbc.result_set_update_partial module\nDESCRIPTION: This snippet represents the auto-generated documentation of the `ooodev.adapter.sdbc.result_set_update_partial` Python module using the `automodule` directive in Sphinx. It includes displaying the module's members, including undocumented members, and showing inheritance information. This is achieved via directives such as `:members:`, `:undoc-members:`, and `:show-inheritance:`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.sdbc.result_set_update_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.sdbc.result_set_update_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Get XTextDocument Methods\nDESCRIPTION: Example showing how to retrieve and print methods available for XTextDocument interface.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter03.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor i, meth in enumerate(Info.get_methods(\"com.sun.star.text.XTextDocument\")):\n    print(f\"  {meth}()\")\nprint(f\"No. methods: {i}\")\n```\n\n----------------------------------------\n\nTITLE: ViewNumericField Class Definition\nDESCRIPTION: This section documents the `ViewNumericField` class using `autoclass` directive in Sphinx. The `:undoc-members:` option includes undocumented members in the documentation. `:show-inheritance:` displays the inheritance hierarchy of the class. `:inherited-members:` lists the members inherited from parent classes.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/view/view_numeric_field.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n.. autoclass:: ooodev.dialog.dl_control.view.view_numeric_field.ViewNumericField\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n\n```\n\n----------------------------------------\n\nTITLE: Setting up LibreOffice Draw document and applying transparency gradient\nDESCRIPTION: This snippet demonstrates how to create a LibreOffice Draw document, add a rectangle shape, and apply a transparency gradient to it. It uses various classes from the ooodev library to handle document creation, shape drawing, and styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/transparency/gradient.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport uno\nfrom ooodev.format import Styler\nfrom ooodev.format.draw.direct.area import Color as ShapeColor\nfrom ooodev.format.draw.direct.transparency import Gradient as ShapeGradient\nfrom ooodev.format.draw.direct.transparency import GradientStyle, IntensityRange\nfrom ooodev.office.draw import Draw\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectSocket()):\n        doc = Draw.create_draw_doc()\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        GUI.zoom(GUI.ZoomEnum.ZOOM_75_PERCENT)\n\n        slide = Draw.get_slide(doc)\n\n        width = 36\n        height = 36\n        x = int(width / 2)\n        y = int(height / 2) + 20\n\n        rect = Draw.draw_rectangle(slide=slide, x=x, y=y, width=width, height=height)\n        color_style = ShapeColor(StandardColor.RED)\n        style = ShapeGradient(\n            style=GradientStyle.LINEAR, angle=30, grad_intensity=IntensityRange(0, 100)\n        )\n        Styler.apply(rect, color_style, style)\n        # style.apply(rect)\n\n        f_style = ShapeGradient.from_obj(rect)\n        assert f_style\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Adding Code Examples in Collapsible Sections\nDESCRIPTION: Shows how to incorporate code examples within a collapsible section using the code directive inside a collapse block.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_24\n\nLANGUAGE: rst\nCODE:\n```\n.. collapse:: Example\n\n    .. code::\n\n        special = get_my_code()\n```\n\n----------------------------------------\n\nTITLE: Implementing TabPage Event Callback (Using kwargs)\nDESCRIPTION: Alternative implementation of a tab page event callback that retrieves the control instance from kwargs. Shows how to cast the control_src to CtlTabPage type.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/dialog/dl_control/ctl_tab_page.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_some_event(src: Any, event: EventArgs, *args, **kwargs) -> None:\n    # can get control from kwargs\n    ctl = cast(CtlTabPage, kwargs['control_src'])\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Chart2 Format Direct Series in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Chart2 Format Direct Series documentation using reStructuredText. It includes sections for data series and data labels.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    data_series/index\n    data_labels/index\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directives for Draw Paragraph Alignment Module\nDESCRIPTION: ReStructuredText directives for Sphinx that generate API documentation for the ooodev.format.draw.direct.para.alignment.alignment module. The directives specify to include all members, undocumented members, and show inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.direct.para.alignment.alignment.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.draw.direct.para.alignment.alignment\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents for Shape Formatting\nDESCRIPTION: This snippet sets up a table of contents directive in reStructuredText. It specifies that only titles should be included in the table of contents, and links to a 'shape/index' document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n\n    shape/index\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Structure\nDESCRIPTION: Defines documentation structure using reStructuredText toctree directive, organizing content into animation, text, and text columns sections with specific depth and title display settings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/text/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n\n    animation/animation\n    text/index\n    text_columns/text_columns\n```\n\n----------------------------------------\n\nTITLE: Getting Writer Page Color from Style\nDESCRIPTION: This code snippet retrieves the page color from a Writer page style. It uses `PageAreaColor.from_style` to get the style object and asserts that the retrieved style name matches the expected style name.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = PageAreaColor.from_style(doc=doc, style_name=page_style_kind)\nassert style_obj.prop_style_name == str(page_style_kind)\n```\n\n----------------------------------------\n\nTITLE: Excluding Paragraph from Line Numbering in Python OOO Dev Tools\nDESCRIPTION: Creates a LineNum object with a value of -1 to exclude the paragraph from line numbering. The paragraph will not be counted in the document's line numbering sequence.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/outline_list.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nln = LineNum(-1)\nWrite.append_para(cursor=cursor, text=p_txt, styles=[ln])\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.writer.modify.page.area Package in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the ooodev.format.writer.modify.page.area package. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.page.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.writer.modify.page.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonStateKind Class Documentation with Sphinx\nDESCRIPTION: This snippet configures Sphinx to automatically generate documentation for the ButtonStateKind class from the ooodev.utils.kind.button_state_kind module, including all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/button_state_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.button_state_kind.ButtonStateKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module with automodule\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.format.inner.preset.preset_hatch` module. It includes module members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.preset.preset_hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.format.inner.preset.preset_hatch\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Size in Python UNO\nDESCRIPTION: The `get_size_100mm` method in the ImagesLo class is used to obtain the size of an image in `1/100 mm` units. This method involves loading the image file to retrieve its graphics properties, which may impact efficiency when used multiple times for the same image.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter14.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# in the ImagesLo class\n@classmethod\ndef get_size_100mm(cls, im_fnm: PathOrStr) -> Size:\n    graphic = cls.load_graphic_file(im_fnm)\n    return mProps.Props.get(graphic, \"Size100thMM\")\n\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for layout_manager_partial Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the layout_manager_partial module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.frame.layout_manager_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.frame.layout_manager_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure for menu documentation using reStructuredText. It creates a table of contents with specific sections for different types of menus, including application menus, context menus, menu bars, and popup menus.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _help_common_menus:\n\nMenus\n=====\n\n.. toctree::\n    :titlesonly:\n    :maxdepth: 4\n    :glob:\n\n    *\n    app_menu/index\n    context/index\n    menu_bar/index\n    popup/index\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Graphic_Crop_Struct_Comp\nDESCRIPTION: This snippet uses Sphinx's `automodule` directive to automatically generate documentation for the `ooodev.adapter.text.graphic_crop_struct_comp` module. The `:members:` option includes all module members in the documentation, `:undoc-members:` includes undocumented members, and `:show-inheritance:` displays the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.graphic_crop_struct_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.text.graphic_crop_struct_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Preset to Chart Subtitle\nDESCRIPTION: Demonstrates applying a preset hatch style to a chart subtitle using PresetHatchKind enum. Accesses the subtitle through the chart's first diagram.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/area.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.inner.preset.preset_hatch import PresetHatchKind\n\n# ... other code\nsub_title = chart_doc.first_diagram.get_title()\nif sub_title is None:\n    raise ValueError(\"Title not found\")\n\nsub_title.style_area_hatch_from_preset(\n    preset=PresetHatchKind.YELLOW_45_DEGREES_CROSSED,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor Style for Multiple Paragraphs\nDESCRIPTION: Demonstrates how to set alignment style at the cursor level to affect multiple paragraphs. This approach is more efficient when applying the same alignment to multiple paragraphs.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/para/alignment.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\nal = Alignment(align_last=LastLineKind.CENTER).justified\nal.apply(cursor)\nWrite.append_para(cursor=cursor, text=p_txt)\nWrite.append_para(cursor=cursor, text=p_txt)\n```\n\n----------------------------------------\n\nTITLE: Accessing LibreOffice User Python Scripts Directory in Python\nDESCRIPTION: Static read-only property that returns the path to the LibreOffice user Python scripts directory, such as 'C:\\Users\\user\\AppData\\Roaming\\LibreOffice\\4\\user\\Scripts\\python'. This is used for accessing user-specific Python scripts.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/session.rst#2025-04-16_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nSession.user_py_scripts\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Chart2 Format Direct General in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents for the Chart2 Format Direct General documentation. It uses the 'toctree' directive with 'titlesonly' and 'glob' options to include all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/general/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for Text Orientation Module\nDESCRIPTION: RestructuredText directive for auto-generating API documentation for the text_orientation module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.alignment.text_orientation.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.alignment.text_orientation\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Chart Data Point Border\nDESCRIPTION: Code that applies border formatting to a specific data point in a chart series. This targets the second point (index 1) in the first series (index 0).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_data_point(chart_doc=chart_doc, series_idx=0, idx=1, styles=[data_series_border])\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Copy Script with Parameters (Shell)\nDESCRIPTION: Command to execute the Impress slide copy utility with specific parameters, including the presentation file path, source slide index (0), and destination slide index (2).\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Copy_Slide/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Impress/Copy_Slide/start.py \"tests/fixtures/presentation/algs.odp\" 0 2\n```\n\n----------------------------------------\n\nTITLE: Setting Up Writer Document and Footer Style\nDESCRIPTION: This snippet demonstrates how to set up a LibreOffice Writer document, create a footer style, and apply border modifications. It includes necessary imports and a main function structure.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/bordes.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.writer.modify.page.footer import Footer, WriterStylePageKind\nfrom ooodev.format.writer.modify.page.footer.borders import Padding, Shadow, Sides\nfrom ooodev.format.writer.modify.page.footer.borders import BorderLineKind, LineSize, Side\nfrom ooodev.format import Styler\nfrom ooodev.office.write import Write\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\n\ndef main() -> int:\n   with Lo.Loader(Lo.ConnectPipe()):\n        doc = Write.create_doc()\n        GUI.set_visible(doc=doc)\n        Lo.delay(300)\n        GUI.zoom(GUI.ZoomEnum.ENTIRE_PAGE)\n\n        footer_style = Footer(\n            on=True,\n            shared_first=True,\n            shared=True,\n            height=10.0,\n            spacing=3.0,\n            spacing_dyn=True,\n            margin_left=1.5,\n            margin_right=2.0,\n            style_name=WriterStylePageKind.STANDARD,\n        )\n\n        side = Side(line=BorderLineKind.DOUBLE, color=StandardColor.RED, width=LineSize.MEDIUM)\n        sides_style = Sides(all=side, style_name=WriterStylePageKind.STANDARD)\n        Styler.apply(doc, footer_style, sides_style)\n\n        style_obj = Sides.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\n        assert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n        Lo.delay(1_000)\n\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Connecting to LibreOffice via pipe in Python\nDESCRIPTION: Demonstrates how to load LibreOffice using the ConnectPipe configuration.  This allows a connection to LibreOffice to be established using a pipe connection. The Lo.load_office method requires a connection configuration object as a parameter.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/conn/connectors/connector_pipe.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.loader.lo import Lo\n\nloader = Lo.load_office(Lo.ConnectPipe())\n```\n\n----------------------------------------\n\nTITLE: Running Draw Elements and Animate Script (Windows)\nDESCRIPTION: PowerShell command to run the Python script on Windows systems, specifying the full path to the script file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Draw_Picture/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Draw\\Draw_Picture\\start.py\n```\n\n----------------------------------------\n\nTITLE: Automodule directive for ooodev.format.proto.chart2.area.chart_fill_gradient_t\nDESCRIPTION: This snippet uses the automodule directive to generate documentation for the specified Python module. It includes options to show members, undocumented members, and inheritance details.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.chart2.area.chart_fill_gradient_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.proto.chart2.area.chart_fill_gradient_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Text Table Partial Module Autodoc Configuration\nDESCRIPTION: Sphinx autodoc configuration for the ooodev.adapter.text.text_table_partial module, indicating automatic documentation generation for module members, undocumented members, and inheritance details\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.text_table_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. automodule:: ooodev.adapter.text.text_table_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Documentation Generation\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.chart2.direct.legend.area` module. It includes all members, even undocumented ones, and displays the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.legend.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.legend.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents for Draw Format Direct Shape Line\nDESCRIPTION: Sets up a table of contents directive for Draw Format Direct Shape Line documentation. It specifies title-only display, a maximum depth of 1, and includes all files in the current directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/line/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Documenting CLSID Class with Sphinx\nDESCRIPTION: This snippet uses the Sphinx `autoclass` directive to automatically generate documentation for the `ooodev.loader.inst.clsid.CLSID` class. The `:members:` option includes documented members in the output, and `:undoc-members:` includes undocumented members. The expected output is a complete class documentation rendered by Sphinx.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/loader/inst/clsid.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.loader.inst.clsid.CLSID\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: TimeCache Singleton Pattern with Custom Keys\nDESCRIPTION: Shows how to create unique TimeCache instances using custom key-value pairs, demonstrating the singleton behavior where identical parameters return the same instance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/time_cache.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.cache.singleton import TimeCache\n\ncache = TimeCache(seconds=300, cleanup_interval=60, custom1=\"custom1\", custom2=\"custom2\")\n\ncache[\"key1\"] = \"value1\"\ncache[\"key2\"] = \"value2\"\ncache[\"key3\"] = \"value3\"\n\nprint(cache[\"key1\"]) # prints \"value1\"\nprint(cache[\"key2\"]) # prints \"value2\"\nprint(cache[\"key3\"]) # prints \"value3\"\n\ncache2 = TimeCache()\nassert cache not is cache2 # True\n\ncache3 = TimeCache(seconds=300, cleanup_interval=60, custom1=\"custom1\", custom2=\"custom2\")\nassert cache is cache3 # True\nprint(cache3[\"key1\"]) # prints \"value1\"\n```\n\n----------------------------------------\n\nTITLE: reStructuredText automodule Directive\nDESCRIPTION: This snippet demonstrates the `automodule` directive in reStructuredText to automatically generate documentation for a Python module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which members are included in the documentation and whether to show inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.packages.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.packages\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Rotation\nDESCRIPTION: Demonstrates how to set the rotation of a shape using the Rotation class. Creates a rectangle and applies a 45-degree rotation to it.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/rotation/rotation.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.position_size.rotation import Rotation\n# ... other code\n\nrect = slide.draw_rectangle(\n    x=x, y=y, width=width, height=height\n)\nstyle = Rotation(rotation=45)\nstyle.apply(rect.component)\n```\n\n----------------------------------------\n\nTITLE: Running Auto Slide Show with Default Parameters in Shell\nDESCRIPTION: Command for running the auto slide show script from the current example folder using the Python module syntax. This method works across different platforms.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Auto_Show/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Documentation Directive for Paragraph Spacing\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the paragraph spacing module. The directive includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.indent_space.spacing.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.para.indent_space.spacing\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying Border to Left Side of a Cell\nDESCRIPTION: This example shows how to apply a green border specifically to the left side of a cell using the `Borders` class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/borders.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\ncell_obj = Calc.get_cell_obj(\"B2\")\nCalc.set_val(value=\"Hello World\", sheet=sheet, cell_obj=cell_obj)\ncell = Calc.get_cell(sheet, cell_obj)\nStyler.apply(cell, Borders(left=Side(color=CommonColor.GREEN)))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Footer Area Color from Writer Style\nDESCRIPTION: This snippet demonstrates how to retrieve the footer area color from an existing Writer document style using the FooterAreaColor class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/area.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = FooterAreaColor.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.modify.write.char.border.sides automodule\nDESCRIPTION: This snippet represents the auto-generated documentation directive for the `ooodev.format.inner.modify.write.char.border.sides` module. It instructs Sphinx to generate documentation including members, even undocumented ones, and to show inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.char.border.sides.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\n.. automodule:: ooodev.format.inner.modify.write.char.border.sides\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Applying Wall and Floor Colors in Chart2\nDESCRIPTION: Shows how to apply different colors to chart wall and floor elements using the WallColor class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/area.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.chart2.direct.wall.area import Color as WallColor\n# ... other code\n\n# wall color\nwall_color = WallColor(color=StandardColor.DEFAULT_BLUE)\nChart2.style_wall(chart_doc=chart_doc, styles=[wall_color])\n```\n\nLANGUAGE: python\nCODE:\n```\n# floor color\nfloor_color = WallColor(color=StandardColor.BLUE_DARK1)\nChart2.style_floor(chart_doc=chart_doc, styles=[floor_color])\n```\n\n----------------------------------------\n\nTITLE: Documenting LoInstPropsPartial Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the LoInstPropsPartial class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/lo_inst_props_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.partial.lo_inst_props_partial.LoInstPropsPartial\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PresentationLayoutKind Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the PresentationLayoutKind class. It includes all members and undocumented members in the output.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/kind/presentation_layout_kind.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.kind.presentation_layout_kind.PresentationLayoutKind\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: JSON Table of Contents Definition\nDESCRIPTION: This snippet defines a table of contents (toctree) for the JSON documentation.  It specifies that only the titles of the included documents should be displayed, and that all files in the current directory should be included in the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/io/json/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.style_partial_t\nDESCRIPTION: This code snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.style_partial_t` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options control which parts of the module are included in the documentation.  The members option includes all documented members. The undoc-members option includes undocumented members. The show-inheritance option shows the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.style_partial_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\".. automodule:: ooodev.format.inner.style_partial_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for WriteParagraphStyle Class\nDESCRIPTION: RST directive for configuring Sphinx autodoc extension to document the WriteParagraphStyle class from ooodev.write.style module. The configuration shows all members, undocumented members, inheritance chain and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/style/write_paragraph_style.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.write.style.WriteParagraphStyle\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Padding from Style\nDESCRIPTION: This snippet demonstrates how to retrieve the border padding configuration from an existing style in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/bordes.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Padding.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.preset.preset_pattern\nDESCRIPTION: This snippet uses the ``automodule`` directive to generate documentation for the ``ooodev.format.inner.preset.preset_pattern`` module. It specifies that the documentation should include members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.preset.preset_pattern.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.preset.preset_pattern\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Verifying Pip Installation in PowerShell\nDESCRIPTION: This command checks the installed version of pip in the virtual environment using PowerShell, confirming successful installation and proper configuration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_manual_venv.rst#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n(myproject_3.8.16) PS D:\\tmp\\manual> python -m pip --version\npip 23.1.2 from D:\\tmp\\manual\\.venv\\lib\\site-packages\\pip (python 3.8)\n```\n\n----------------------------------------\n\nTITLE: Sphinx module documentation for ooodev.format.draw.direct.area package\nDESCRIPTION: Sphinx documentation configuration that generates API documentation for the ooodev.format.draw.direct.area module. It includes settings to document all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.direct.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.draw.direct.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks with Tabs in RST\nDESCRIPTION: Shows how to create tabbed code blocks using the sphinx-tabs extension, which allows for better organization of code examples.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_19\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n\n    .. code-tab:: python\n\n        def _toggle_side_bar(self) -> None:\n            if not RobotKeys:\n                Lo.print(\"odevgui_win not found.\")\n                return\n            RobotKeys.send_current(SendKeyInfo(WriterKeyCodes.KB_SIDE_BAR))\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Control Shape Component\nDESCRIPTION: ReStructuredText documentation directives for auto-generating module documentation with members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.drawing.control_shape_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.drawing.control_shape_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Subscript Text in Writer\nDESCRIPTION: Example showing how to apply subscript formatting to a character in text using the FontPosition class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/direct/char/font_position.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncursor = Write.get_cursor(doc)\n\nfp_style = FontPosition().subscript\ncursor = Write.get_cursor(doc)\nWrite.append(cursor, \"hello\")\nWrite.style(pos=4, length=1, styles=[fp_style], cursor=cursor)\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.modify.write.frame.area.hatch Module\nDESCRIPTION: This snippet documents the `ooodev.format.inner.modify.write.frame.area.hatch` module. It includes information on its members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.frame.area.hatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.frame.area.hatch\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Expanded Collapsible Sections\nDESCRIPTION: Demonstrates how to create a collapsible section that is open by default using the :open: option with the collapse directive.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_23\n\nLANGUAGE: rst\nCODE:\n```\n.. collapse:: Some Text\n    :open:\n\n    Congrats, you have revealed hidden text\n```\n\n----------------------------------------\n\nTITLE: Poetry Project Configuration\nDESCRIPTION: Example of poetry.toml configuration file for LibreOffice development\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_poetry_env.rst#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"My fantastic project\"\nauthors = [\"Secret Name <secret@name.nowhere>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Toggling between Poetry and LibreOffice Environments\nDESCRIPTION: Switches the environment configuration between the standard Poetry setup and LibreOffice-specific configuration.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n(.venv) PS C:\\python_ooo_dev_tools> oooenv env -t\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Subtitle Position\nDESCRIPTION: Shows how to apply position formatting to a chart subtitle using the same TitlePosition class and coordinates system.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/title/position_size.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\nChart2.style_subtitle(chart_doc=chart_doc, styles=[title_pos])\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for ooodev.format.calc Package\nDESCRIPTION: This is a reStructuredText documentation file that defines the structure for the ooodev.format.calc package. It includes toctree directives to link to subpackages and automodule directive to generate API documentation from docstrings.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nooodev.format.calc package\n==========================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.calc.direct\n   ooodev.format.calc.modify\n   ooodev.format.calc.style\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.calc\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Options in Python\nDESCRIPTION: Demonstrates how to set logging levels using Options class or directly through the logging module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom ooodev.loader.inst.options import Options\n\nloader = Lo.load_office(connector=Lo.ConnectPipe(), opt=Options(log_level=logging.DEBUG))\n# ...\n```\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom ooodev.io.log import logging as logger\n\nlogger.set_log_level(logging.DEBUG)\nassert logger.get_log_level() == logging.DEBUG\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.partial.chart2.numbers` module. It includes options to display members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.numbers.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.chart2.numbers\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting AutoAttribute Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the AutoAttribute class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/auto_attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.partial.auto_attribute.AutoAttribute\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Delete Page by Index in Python\nDESCRIPTION: Describes how to delete a page from a draw document using the del method with an index. Requires an existing WriteDoc object.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/generic_draw_pages.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc(loader))\n>>> del doc.draw_pages[0]\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in reStructuredText for Sphinx Documentation\nDESCRIPTION: This snippet defines the structure of the ooodev.format.draw.direct.transparency package documentation. It includes submodules and module contents using Sphinx directives.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.direct.transparency.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nooodev.format.draw.direct.transparency package\n==============================================\n\nSubmodules\n----------\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.draw.direct.transparency.gradient\n   ooodev.format.draw.direct.transparency.transparency\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.draw.direct.transparency\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing pip in LibreOffice Portable\nDESCRIPTION: This snippet runs a command in PowerShell to download and install pip from the official source. It highlights the method of getting pip installed using Python that comes with LibreOffice Portable.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_portable_install_pip.rst#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n(Invoke-WebRequest -Uri https://bootstrap.pypa.io/get-pip.py -UseBasicParsing).Content | .\\python.exe -\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Cell Method in Python\nDESCRIPTION: Class method to get a cell from a cell range by position, demonstrating coordinate-based cell retrieval\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter24.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_cell(cls, cell_range: XCellRange, col: int, row: int) -> XCell:\n    return cell_range.getCellByPosition(col, row)\n```\n\n----------------------------------------\n\nTITLE: Outline List Submodules\nDESCRIPTION: This section lists the submodules included in the `ooodev.format.inner.direct.write.para.outline_list` package, specifying a maximum depth of 4 for the table of contents. The listed submodules relate to managing line numbers, list styles, outline properties and outline lists.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.para.outline_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.write.para.outline_list.line_num\n   ooodev.format.inner.direct.write.para.outline_list.list_style\n   ooodev.format.inner.direct.write.para.outline_list.outline\n   ooodev.format.inner.direct.write.para.outline_list.outline_list\n\n```\n\n----------------------------------------\n\nTITLE: Menu Entry with Command Text Lookup\nDESCRIPTION: Example of a menu entry using the get_calc_command_text function for command text lookup\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/common/gui/menus/popup/popup_from_dict_or_json.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{\"text\": get_calc_command_text(\".uno:InsertCell\", \"Insert cells\"), \"command\": \".uno:InsertCell\"}\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Named Partial Container Module\nDESCRIPTION: ReStructuredText directive for auto-generating module documentation using Sphinx, including all members, undocumented members, and inheritance information for the named_partial container adapter module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.container.named_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.container.named_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Impress Custom Slide Show with Specific Slides on Linux/Mac\nDESCRIPTION: Command to run the custom slide show script with specific slide indices (5, 6, 7, 8) on Linux or Mac systems.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Custom_Show/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython tests/samples/Impress/Custom_Show/start.py 5 6 7 8\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Style from Range in Calc\nDESCRIPTION: Demonstrates how to get font formatting from a cell range and verify its properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/direct_static/cell/font_only.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nf_style = FontOnly.from_obj(rng)\nassert f_style.prop_name == \"Lucida Calligraphy\"\n```\n\n----------------------------------------\n\nTITLE: Applying Data Label Borders to Chart Series in Python\nDESCRIPTION: This code snippet demonstrates how to apply data label border styling to an entire chart series using the Chart2.style_data_series() method and LineProperties class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata_lbl_border = LblLineProperties(color=StandardColor.MAGENTA_DARK1, width=0.75)\nChart2.style_data_series(chart_doc=chart_doc, styles=[data_lbl_border])\n```\n\n----------------------------------------\n\nTITLE: Submodule Index\nDESCRIPTION: This snippet uses `toctree` directive to create an index of the submodules within the `ooodev.format.inner.partial.chart2.legend.position` package. It specifies a maximum depth of 4 for the table of contents and lists the submodule `ooodev.format.inner.partial.chart2.legend.position.chart2_legend_pos_partial`.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.legend.position.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.partial.chart2.legend.position.chart2_legend_pos_partial\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for LibreOffice on Windows\nDESCRIPTION: Configures the virtual environment to work with LibreOffice by setting necessary environment variables.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/dev_docs/dev_notes.rst#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n(.venv) PS C:\\python_ooo_dev_tools> oooenv env -t\n```\n\n----------------------------------------\n\nTITLE: Running Impress Master Pages Example on Linux/Mac\nDESCRIPTION: Command to run the Impress master pages example specifically on Linux or Mac systems by specifying the full path to the start.py file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Master_Use/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Impress/Master_Use/start.py\n```\n\n----------------------------------------\n\nTITLE: Using Form Control Context Managers\nDESCRIPTION: Example of using a form control as a context manager to toggle design mode automatically when setting properties.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwith ctl:\n    ctl.model.Width = 200\n```\n\n----------------------------------------\n\nTITLE: automodule Directive for Module Contents\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.direct.chart2.series.data_labels.borders` module. It includes the module's members, undocumented members, and inheritance information in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.series.data_labels.borders.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.series.data_labels.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: automodule directive for chart2.chart.transparent\nDESCRIPTION: This snippet utilizes the `automodule` directive to automatically generate documentation for the `ooodev.format.inner.direct.chart2.chart.transparent` module. The options `:members:`, `:undoc-members:`, and `:show-inheritance:` control which members are included and how inheritance is displayed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.chart.transparent.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.chart.transparent\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting QiPartialT Class in Python\nDESCRIPTION: This code snippet uses the autoprotocol directive to generate documentation for the QiPartialT class. It's part of the ooodev.utils.partial.qi_partial_t module in the python_ooo_dev_tools project.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/partial/qi_partial_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoprotocol:: ooodev.utils.partial.qi_partial_t.QiPartialT\n```\n\n----------------------------------------\n\nTITLE: Initializing Poetry Project PowerShell\nDESCRIPTION: Initializes a new Python project using Poetry, generating a 'pyproject.toml' configuration file with specified metadata such as project name, version, and author. Respond to prompts for package dependencies.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_poetry_env.rst#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npoetry init\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.modify.write.frame.options.align\nDESCRIPTION: This snippet uses Sphinx's `automodule` directive to automatically generate documentation for the specified Python module. It includes module members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.frame.options.align.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.frame.options.align\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Directive\nDESCRIPTION: Sphinx documentation directive for automatically generating module documentation, including all members, undocumented members and inheritance information\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.calc.cell_style_base_multi.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.calc.cell_style_base_multi\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Python Module\nDESCRIPTION: This snippet uses the `automodule` directive in reStructuredText to automatically generate documentation for the `ooodev.adapter.awt.uno_control_date_field_model_partial` Python module.  It includes module members, even undocumented ones, and displays the inheritance hierarchy.  This is used to create API documentation for the specified module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_date_field_model_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.uno_control_date_field_model_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Deleting a Draw Page in Python\nDESCRIPTION: Shows how to delete a draw page using the del keyword and index notation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/write_draw_pages.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = WriteDoc(Write.create_doc())\n>>> # other code\n>>> del doc.draw_pages[0]\n```\n\n----------------------------------------\n\nTITLE: Importing Font Styling Module in LibreOffice Development\nDESCRIPTION: Module import for accessing font-related styling capabilities in LibreOffice document development using Python OOO Dev Tools\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.general_style.text.font.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ooodev.format.inner.direct.general_style.text.font\n```\n\n----------------------------------------\n\nTITLE: Running Draw Grouper Demo on Linux/Mac\nDESCRIPTION: Command to run the Draw Grouper demo on Linux or Mac systems, specifying the direct path to the start.py script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Grouper/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Draw/Grouper/start.py\n```\n\n----------------------------------------\n\nTITLE: Running Text Chart Example (Cross Platform)\nDESCRIPTION: Command to execute the text chart example script from the current example folder using Python module syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart2/text_chart/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m start\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart Data Labels Font Effects in Python\nDESCRIPTION: Setup code for the chart formatting example that includes opening a spreadsheet, accessing a chart, and setting up visual properties like background gradient and borders.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_labels/font_effects.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.series.data_labels.font import FontEffects as LblFontEffects\nfrom ooodev.format.chart2.direct.series.data_labels.font import FontLine, FontUnderlineEnum\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import CommonColor\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(Path.cwd() / \"tmp\" / \"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_LIGHT3, width=0.7)\n        chart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.TEAL_BLUE)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        data_lbl_font = LblFontEffects(\n            color=CommonColor.RED,\n            underline=FontLine(line=FontUnderlineEnum.SINGLE, color=CommonColor.BLUE),\n            shadowed=True,\n        )\n        Chart2.style_data_series(chart_doc=chart_doc, styles=[data_lbl_font])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: toctree Directive for Submodules\nDESCRIPTION: This snippet uses the `toctree` directive to include documentation for the submodules within the `ooodev.format.inner.direct.calc.numbers` package. It specifies a maximum depth of 4 for the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.calc.numbers.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.direct.calc.numbers.numbers\n```\n\n----------------------------------------\n\nTITLE: Generating Calc Cell Numbers Module Documentation\nDESCRIPTION: This code snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.format.calc.modify.cell.numbers` module. The `:members:`, `:undoc-members:`, and `:show-inheritance:` options specify that the generated documentation should include all module members, undocumented members, and class inheritance information, respectively.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.calc.modify.cell.numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.calc.modify.cell.numbers\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ZIP Class for LibreOffice Development\nDESCRIPTION: Autodocumentation directive for a ZIP utility class with full member and undocumented member exposure\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/io/zip/zip.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.io.zip.ZIP\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Installing pip Using PowerShell\nDESCRIPTION: This command in PowerShell downloads and executes the get-pip.py script using LibreOffice's Python to install pip. Ensure internet connectivity and that PowerShell is run with appropriate permissions if needed. Output is the installation of pip, with a warning about PATH not including the Scripts directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_lo_install_pip.rst#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n(Invoke-WebRequest -Uri https://bootstrap.pypa.io/get-pip.py -UseBasicParsing).Content | .\\python.exe -\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive in Sphinx\nDESCRIPTION: This snippet demonstrates the use of the `automodule` directive in Sphinx for automatically generating documentation for a Python module. The directive includes options to display members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.write.image.options.properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.write.image.options.properties\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.io.output_stream_partial Module\nDESCRIPTION: This snippet represents the auto-generated documentation for the `ooodev.adapter.io.output_stream_partial` module. It includes module members, undocumented members, and inheritance information. The `automodule` directive tells Sphinx to automatically generate documentation for the specified module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.io.output_stream_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.io.output_stream_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for paint_events Module in Python\nDESCRIPTION: This Sphinx directive generates automatic documentation for the paint_events module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.paint_events.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.paint_events\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive\nDESCRIPTION: This directive instructs Sphinx to automatically generate documentation for the `ooodev.format.inner.modify.write.page.area` module. It includes all members, even undocumented ones, and shows inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.page.area.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n\n.. automodule:: ooodev.format.inner.modify.write.page.area\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Search Module Documentation in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents for the search module documentation. It uses the toctree directive to include all files in the current directory, displaying only their titles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/write/search/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.format.inner.direct.calc.numbers\nDESCRIPTION: This snippet uses the `automodule` directive from Sphinx to automatically generate documentation for the `ooodev.format.inner.direct.calc.numbers` module. It includes module members, excludes undocumented members, and displays inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.calc.numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.calc.numbers\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Applying LineProperties to Chart Floor in Python\nDESCRIPTION: Code snippet showing how to create and apply LineProperties to a chart floor. It sets a lighter purple color with a different width and transparency setting than the wall.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/wall_floor/borders.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfloor_bdr_line = WallLineProperties(color=StandardColor.PURPLE_DARK1, width=0.8, transparency=20)\nChart2.style_floor(chart_doc=chart_doc, styles=[floor_bdr_line])\n```\n\n----------------------------------------\n\nTITLE: Running the Hello Module from APSO Console\nDESCRIPTION: This code snippet shows how to import and execute the 'main' function from the 'hello' module within the APSO console. This is essential for testing the functionality of the created module in the LibreOffice environment.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/linux_linking_paths.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom my_mod import hello\nhello.main()\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Toctree Configuration\nDESCRIPTION: Configures the documentation table of contents tree to display only titles, with a maximum depth of 1 level, and including all matching files in the directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/paragraph/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.script Module Contents\nDESCRIPTION: This snippet represents the module contents documentation for the `ooodev.adapter.script` module using `automodule`. It includes members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.script.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.script\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Module contents with automodule\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.configuration` module. It includes module members, undocumented members, and inheritance information in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.configuration.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.configuration\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Text Content Insertion Adapter Module\nDESCRIPTION: Python module for partial implementation of text content insertion methods in LibreOffice, providing adapter functionality for relative text positioning\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.text.relative_text_content_insert_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.text.relative_text_content_insert_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Write Events Documentation\nDESCRIPTION: Sets up a table of contents for Write Events documentation using Sphinx's toctree directive. It includes all files in the current directory and displays only their titles.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src_docs/event/write/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: Checking LibreOffice Python Version in PowerShell\nDESCRIPTION: Command to check the Python version installed with LibreOffice\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/guide/virtual_env/windows_poetry_env.rst#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n&\"C:\\Program Files\\LibreOffice\\program\\python.exe\" --version\n```\n\n----------------------------------------\n\nTITLE: CmdData Class Definition\nDESCRIPTION: This snippet represents the auto-generated documentation for the `CmdData` class. It indicates that the documentation includes all members and even undocumented members of the class. The class itself is located in the `ooodev.gui.commands` module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/commands/cmd_data.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ooodev.gui.commands.CmdData\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Basic TextCache Usage Example\nDESCRIPTION: Demonstrates basic usage of TextCache class for storing and retrieving text data with a 300-second lifetime in a custom temporary directory.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/singleton/text_cache.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.utils.cache.singleton import TextCache\n\ncache = TextCache(tmp_dir=\"my_tmp\", lifetime=300)\n\nfile_name = \"temp_data.txt\"\ncache[file_name] = \"Hello World!\"\nprint(cache[file_name]) # prints \"Hello World!\"\nif file_name in cache:\n    del cache[file_name]\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Directive\nDESCRIPTION: ReStructuredText directive for auto-generating module documentation with configuration for member visibility and inheritance display.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.deployment.the_package_manager_factory_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.deployment.the_package_manager_factory_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: reStructuredText toctree Directive\nDESCRIPTION: This snippet demonstrates the `toctree` directive used in reStructuredText to create a table of contents for subpackages.  The `:maxdepth:` option specifies the depth of the table of contents, and the package `ooodev.adapter.packages.zip` is included as a subpackage.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.packages.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.adapter.packages.zip\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents using toctree in reStructuredText\nDESCRIPTION: This snippet uses the `toctree` directive in reStructuredText to create a table of contents. The `:titlesonly:` option ensures that only the titles of the linked documents are displayed, and `:glob:` enables the inclusion of all documents matching the specified pattern (in this case, all files in the current directory). The `*` indicates that all files should be included in the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/gui/commands/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    *\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.document.filter_partial module\nDESCRIPTION: This code snippet represents the automodule directive used in Sphinx documentation to automatically generate documentation for the ooodev.adapter.document.filter_partial module. The ':members:', ':undoc-members:', and ':show-inheritance:' options specify that all members, undocumented members, and inheritance information should be included in the generated documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.document.filter_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.adapter.document.filter_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating Toctree for Writer Footer Modification Subpackages in Sphinx\nDESCRIPTION: This RST code defines a table of contents tree (toctree) in Sphinx documentation that lists the subpackages related to Writer footer modification. The toctree has a maximum depth of 4 levels and includes area, borders, and transparency subpackages.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.writer.modify.page.footer.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.writer.modify.page.footer.area\n   ooodev.format.writer.modify.page.footer.borders\n   ooodev.format.writer.modify.page.footer.transparency\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Python Module\nDESCRIPTION: This snippet uses the `automodule` directive from Sphinx to automatically generate documentation for the `ooodev.adapter.ucb.command_info_change_listener` Python module. It includes the module's members, undocumented members, and inheritance information. The directive is used within a reStructuredText document to generate comprehensive documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.ucb.command_info_change_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.adapter.ucb.command_info_change_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive Example\nDESCRIPTION: This snippet demonstrates how to use the `automodule` directive in Sphinx documentation to automatically generate documentation for the `ooodev.format.inner.modify.write.para.align` module. It includes options to show members, document undocumented members, and display inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.para.align.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.para.align\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Offset Class with Sphinx autoclass directive\nDESCRIPTION: Sphinx documentation configuration for the Offset class that includes all members. The class is located in the ooodev.utils.data_type.offset module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/offset.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.offset.Offset\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation\nDESCRIPTION: This snippet represents an instruction for generating documentation using `automodule`. It specifies that the documentation should include members, even undocumented ones, and display inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.title.position_size.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.title.position_size\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for ooodev.adapter.container.index_replace_partial\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the `ooodev.adapter.container.index_replace_partial` module. It includes options to display members, show undocumented members, and indicate inheritance.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.container.index_replace_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\".. automodule:: ooodev.adapter.container.index_replace_partial\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\"\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Table of Contents Configuration\nDESCRIPTION: Configuration for Sphinx documentation table of contents, specifying titlesonly option and glob pattern for including all files.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/cache/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n    :glob:\n\n    file_cache/index\n    singleton/index\n    *\n```\n\n----------------------------------------\n\nTITLE: Setting 3D Chart Shape\nDESCRIPTION: Class method to set 3D geometry properties for chart data points. Iterates through data series and sets the Geometry3D property with error handling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef set_chart_shape_3d(cls, chart_doc: XChartDocument, shape: DataPointGeometry3DEnum) -> None:\n    try:\n        data_series_arr = cls.get_data_series(chart_doc=chart_doc)\n        for data_series in data_series_arr:\n            Props.set_property(data_series, \"Geometry3D\", int(shape))\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error setting chart shape 3d\") from e\n```\n\n----------------------------------------\n\nTITLE: Automodule directive in Sphinx documentation\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to automatically generate documentation for the `ooodev.format.proto.calc.borders.borders_t` module. It includes module members, undocumented members, and class inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.calc.borders.borders_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.proto.calc.borders.borders_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ooodev.format.chart2.direct.legend.borders Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the ooodev.format.chart2.direct.legend.borders module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.legend.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: ooodev.format.chart2.direct.legend.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ooodev.format.inner.direct.chart2.chart Module Documentation\nDESCRIPTION: This snippet uses `automodule` directive to automatically generate documentation for the `ooodev.format.inner.direct.chart2.chart` module. It includes the module's members, shows undocumented members, and displays inheritance information using reStructuredText syntax.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.chart.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.chart\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Document Structure\nDESCRIPTION: Defines a reStructuredText document structure with a cross-reference label and table of contents directive. The toc tree is configured to show only titles and has a maximum depth of 1, linking to position_size/index and rotation/rotation pages.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/position_size/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_draw_format_direct_shape_position_size:\n\nDraw Format Direct Shape Position and Size\n==========================================\n\n.. toctree::\n    :titlesonly:\n    :maxdepth: 1\n    \n\n    position_size/index\n    rotation/rotation\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Draw Format Shape Area\nDESCRIPTION: ReStructuredText markup defining the documentation structure for shape area formatting topics using toctree directive.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _help_draw_format_direct_shape_area:\\n\\nDraw Format Direct Shape Area\\n=============================\\n\\n.. toctree::\\n    :titlesonly:\\n    :maxdepth: 1\\n    \\n\\n    area/index\\n    shadow\\n    transparency/index\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Sides Settings from Page Header Style in Python\nDESCRIPTION: Demonstrates how to get the current border sides configuration from an existing page header style. The from_style static method loads the current settings into a Sides object for inspection or modification.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/header/bordes.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Sides.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Documenting TableHelper Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the TableHelper class. It includes all members and undocumented members of the class.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/table_helper.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: ooodev.utils.table_helper.TableHelper\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart with Font Settings Python\nDESCRIPTION: This code snippet initializes a chart document, sets its zoom level, and applies gradient styles before modifying the title font. Dependencies include the 'uno' module and 'ooodev' library components for document manipulation and styling.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct/title/font_only.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom pathlib import Path\nimport uno\nfrom ooo.dyn.awt.gradient_style import GradientStyle\nfrom ooodev.calc import CalcDoc, ZoomKind\nfrom ooodev.loader.lo import Lo\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.utils.data_type.color_range import ColorRange\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        fnm = Path.cwd() / \"tmp\" / \"piechart.ods\"\n        doc = CalcDoc.open_doc(fnm=fnm, visible=True)\n        Lo.delay(500)\n        doc.zoom(ZoomKind.ZOOM_100_PERCENT)\n\n        sheet = doc.sheets[0]\n        sheet[\"A1\"].goto()\n        chart_table = sheet.charts[0]\n        chart_doc = chart_table.chart_doc\n        _ = chart_doc.style_border_line(\n            color=StandardColor.PURPLE_DARK1,\n            width=0.7,\n        )\n        _ = chart_doc.style_area_gradient(\n            step_count=64,\n            style=GradientStyle.SQUARE,\n            angle=45,\n            grad_color=ColorRange(\n                StandardColor.BLUE_DARK1,\n                StandardColor.PURPLE_LIGHT2,\n            ),\n        )\n\n        title = chart_doc.get_title()\n        if title is None:\n            raise ValueError(\"Title not found\")\n\n        title.style_font(\n            name=\"Lucida Calligraphy\",\n            size=14,\n            font_style=\"italic\",\n        )\n        Lo.delay(1_000)\n        doc.close()\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Hierarchical Name Access Module\nDESCRIPTION: ReStructuredText directive for auto-generating module documentation that includes all members, undocumented members, and inheritance information for the hierarchical_name_access_partial module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.container.hierarchical_name_access_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.container.hierarchical_name_access_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ImageOffset Class with Sphinx Autodoc\nDESCRIPTION: Sphinx reStructuredText directive for automatically generating documentation for the ImageOffset class located in the ooodev.utils.data_type.image_offset module. Uses the autoclass directive to include all class members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/data_type/image_offset.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.data_type.image_offset.ImageOffset\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Adding Word List for Spelling in RST\nDESCRIPTION: Shows how to add a word list for spelling checks in reStructuredText.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_12\n\nLANGUAGE: rst\nCODE:\n```\n.. spelling:word-list::\n    conn\n```\n\n----------------------------------------\n\nTITLE: ooodev.adapter.chart2.data.data_sink_partial automodule directive\nDESCRIPTION: This snippet represents a Sphinx automodule directive used to generate documentation for the `ooodev.adapter.chart2.data.data_sink_partial` module. It specifies that the documentation should include the module's members, even if they are undocumented, and should show the inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.chart2.data.data_sink_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.adapter.chart2.data.data_sink_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Retrieve Hatch Pattern from Shape\nDESCRIPTION: Shows how to get the existing hatch pattern from a shape using the ShapeHatch.from_obj() method.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/area/hatch.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Hatch as ShapeHatch\n# ... other code\n\n# get the hatch from the shape\nf_style = ShapeHatch.from_obj(rec)\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: Retrieving Footer Border Sides from Document Style\nDESCRIPTION: Shows how to retrieve the border sides configuration from an existing document style. This is useful for reading the current state of footer borders before making modifications.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/footer/bordes.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Sides.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for update_listener Module\nDESCRIPTION: This RST (reStructuredText) snippet configures the Sphinx documentation generator to generate comprehensive documentation for the update_listener module including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.form.update_listener.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.adapter.form.update_listener\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Module Documentation\nDESCRIPTION: This snippet represents the structure of the module documentation generated by Sphinx. It utilizes the automodule directive to automatically document the members, including undocumented ones, and to showcase the inheritance structure of the classes within the ooodev.format.inner.modify.write.frame.area.color module.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.frame.area.color.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.modify.write.frame.area.color\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Retrieving transparency style from a shape in LibreOffice Draw\nDESCRIPTION: This snippet demonstrates how to retrieve the transparency style from an existing shape in LibreOffice Draw. It uses the ShapeTransparency.from_obj() method to get the style information from a rectangle shape.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/draw/format/direct/shape/area/transparency/transparency.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ooodev.format.draw.direct.area import Pattern as ShapeTransparency\n# ... other code\n\n# get the style from the shape\nf_style = ShapeTransparency.from_obj(rect)\nassert f_style\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for GlobalFormatDispatch Class\nDESCRIPTION: Sphinx directive that automatically generates documentation for the GlobalFormatDispatch class using the autoclass directive, including all members and undocumented members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/utils/dispatch/global_format_dispatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ooodev.utils.dispatch.global_format_dispatch.GlobalFormatDispatch\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart2 Data Series Borders in Calc Document\nDESCRIPTION: Complete setup code for formatting chart data series borders using LineProperties. This creates a Calc document, accesses a chart, applies background styling with gradient and borders, and then formats the data series border with a magenta color.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/chart2/format/direct_static/series/data_series/borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uno\nfrom ooodev.format.chart2.direct.series.data_series.borders import LineProperties as SeriesLineProperties\nfrom ooodev.format.chart2.direct.general.borders import LineProperties as ChartLineProperties\nfrom ooodev.format.chart2.direct.general.area import Gradient as ChartGradient, PresetGradientKind\nfrom ooodev.office.calc import Calc\nfrom ooodev.office.chart2 import Chart2\nfrom ooodev.utils.color import StandardColor\nfrom ooodev.gui import GUI\nfrom ooodev.loader.lo import Lo\n\ndef main() -> int:\n    with Lo.Loader(connector=Lo.ConnectPipe()):\n        doc = Calc.open_doc(\"col_chart.ods\")\n        GUI.set_visible(True, doc)\n        Lo.delay(500)\n        Calc.zoom(doc, GUI.ZoomEnum.ZOOM_100_PERCENT)\n\n        sheet = Calc.get_active_sheet()\n\n        Calc.goto_cell(cell_name=\"A1\", doc=doc)\n        chart_doc = Chart2.get_chart_doc(sheet=sheet, chart_name=\"col_chart\")\n\n        chart_bdr_line = ChartLineProperties(color=StandardColor.BLUE_LIGHT3, width=0.7)\n        chart_grad = ChartGradient.from_preset(chart_doc, PresetGradientKind.TEAL_BLUE)\n        Chart2.style_background(chart_doc=chart_doc, styles=[chart_grad, chart_bdr_line])\n\n        data_series_border = SeriesLineProperties(color=StandardColor.MAGENTA_DARK1, width=0.75)\n        Chart2.style_data_series(chart_doc=chart_doc, styles=[data_series_border])\n\n        Lo.delay(1_000)\n        Lo.close_doc(doc)\n    return 0\n\nif __name__ == \"__main__\":\n    SystemExit(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Border Shadow from Style\nDESCRIPTION: This snippet demonstrates how to retrieve the border shadow configuration from an existing style in the document.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/writer/format/modify/page/footer/bordes.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = Shadow.from_style(doc=doc, style_name=WriterStylePageKind.STANDARD)\nassert style_obj.prop_style_name == str(WriterStylePageKind.STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Installing OooDev via Pip\nDESCRIPTION: Command for installing the OooDev tools package using pip. Note that support for Python 3.7 was dropped in version 0.10.0.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install ooo-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule Directive for ooodev.format.draw.direct.para.alignment Package\nDESCRIPTION: Sphinx automodule directive that generates documentation for the ooodev.format.draw.direct.para.alignment package, including members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.draw.direct.para.alignment.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.draw.direct.para.alignment\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining RST References for LibreOffice API Interfaces\nDESCRIPTION: RST link definitions for LibreOffice API interface documentation. Links are formatted for ReStructuredText and point to official LibreOffice API documentation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter02.rst#2025-04-16_snippet_23\n\nLANGUAGE: rst\nCODE:\n```\n.. _XComponentLoader: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1frame_1_1XComponentLoader.html\n.. _XDesktop: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1frame_1_1XDesktop.html\n.. _XMultiComponentFactory: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1lang_1_1XMultiComponentFactory.html\n.. _XMultiServiceFactory: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1lang_1_1XMultiServiceFactory.html\n.. _XServiceInfo: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1lang_1_1XServiceInfo.html\n\n.. include:: ../../resources/odev/links.rst\n```\n\n----------------------------------------\n\nTITLE: Direct Character Styling Example\nDESCRIPTION: Shows how to apply direct character styling to text in a Writer document using WriteTextCursor.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/version/version_hist.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndoc = WriteDoc.create_doc(visible=True)\n\ncursor = doc.get_cursor()\ncursor.append(\"hello\")\ncursor.go_left(5, True)\n# font 30, bold, italic, underline, blue\ncursor.style_direct_char.style_font_general(\n    size=30.0,\n    b=True,\n    i=True,\n    u=True,\n    color=StandardColor.BLUE,\n)\ncursor.goto_end()\n# reset the style before adding more text\ncursor.style_direct_char.clear()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Scale Number of Pages Style in Calc with Python\nDESCRIPTION: This example retrieves a style object for the scale set by a number of pages in a Calc document, ensuring the proper style name is confirmed.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/sheet.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nstyle_obj = ScaleNumOfPages.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: PagePng Class Definition\nDESCRIPTION: This snippet represents the class definition of PagePng within the ooodev.draw.export.page_png module. The `autoclass` directive indicates that Sphinx is automatically generating documentation for this class, including its members and inherited members.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/draw/export/page_png.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ooodev.draw.export.page_png.PagePng\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Creating Data Sequences for Error Bars in Charts with Python\nDESCRIPTION: This code snippet showcases the creation of positive and negative error data sequences for chart error bars, utilizing the roles provided in DataRoleKind. It converts these sequences into data sinks and sets them with the prepared labeled data sequence objects.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2.set_y_error_bars(); see section 5.4 below\n# convert into data sink\ndata_sink = Lo.qi(XDataSink, error_bars_ps, True)\n\ndp = chart_doc.getDataProvider()\npos_err_seq = cls.create_ld_seq(\n    dp=dp,\n    role=DataRoleKind.ERROR_BARS_Y_POSITIVE,\n    data_label=data_label,\n    data_range=data_range\n)\nneg_err_seq = cls.create_ld_seq(\n    dp=dp,\n    role=DataRoleKind.ERROR_BARS_Y_NEGATIVE,\n    data_label=data_label,\n    data_range=data_range\n)\n\nld_seq = (pos_err_seq, neg_err_seq)\n# store the error bar data sequences in the data sink\ndata_sink.setData(ld_seq)\n\n# ...\n\n```\n\n----------------------------------------\n\nTITLE: Getting Border Sides from a Page Style in Calc\nDESCRIPTION: Shows how to retrieve the border sides configuration from an existing page style. This is useful for examining the current border settings before making modifications.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/help/calc/format/modify/page/bordes.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ... other code\n\nstyle_obj = Sides.from_style(doc=doc, style_name=CalcStylePageKind.DEFAULT)\nassert style_obj.prop_style_name == str(CalcStylePageKind.DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Creating None Tabs for Code Blocks\nDESCRIPTION: Shows how to add a None tab option to code tabs, which should be applied consistently across all code tabs on a page and requires the tab-none CSS class for proper formatting.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_21\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n\n    .. code-tab:: python\n\n        print(\"Hello World\")\n\n    .. only:: html\n\n        .. cssclass:: tab-none\n\n            .. group-tab:: None\n```\n\n----------------------------------------\n\nTITLE: Module Documentation with reStructuredText\nDESCRIPTION: Documentation block for Python module using Sphinx automodule directive, exposing module members, undocumented members, and inheritance details\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.direct.chart2.title.font.font.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: ooodev.format.inner.direct.chart2.title.font.font\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Filtering LibreOffice Component Searches by Type\nDESCRIPTION: Example of using the loapi comp command with the --component-type option to narrow search results to only services containing 'writer' in their names.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part1/chapter01.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nloapi comp --component-type service --search writer\nChoose an option (default 1):\n[0],  Cancel\n[1],  LayerWriter                       - com.sun.star.configuration.backend.xml.LayerWriter      - service\n[2],  ManifestWriter                    - com.sun.star.packages.manifest.ManifestWriter           - service\n[3],  Writer                            - com.sun.star.xml.sax.Writer                             - service\n```\n\n----------------------------------------\n\nTITLE: Running Draw Grouper Demo on Windows\nDESCRIPTION: Command to run the Draw Grouper demo on Windows systems, using PowerShell with Windows-style path separators to the start.py script.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Draw/Grouper/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\npython .\\tests\\samples\\Draw\\Grouper\\start.py\n```\n\n----------------------------------------\n\nTITLE: Applying Theme-Sensitive Block Color Formatting\nDESCRIPTION: Demonstrates how to apply theme-sensitive color styling to blocks of text using t-green CSS class that may adapt based on dark/light mode.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/style_guide.md#2025-04-16_snippet_31\n\nLANGUAGE: rst\nCODE:\n```\n.. cssclass:: t-green\n\n    My green text goes here.\n    May not be green in dark mode thought!\n```\n\n----------------------------------------\n\nTITLE: Calc.goto_cell Method\nDESCRIPTION: Navigates to a specified cell in the spreadsheet using the dispatch command \"GoToCell\". It requires the XFrame and a cell name, which is passed as a property array containing the ToPoint property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n        # overload method, simplified\n        @classmethod\n        def goto_cell(cls, cell_name: str, doc: XSpreadsheetDocument) -> None:\n            frame = cls.get_controller(doc).getFrame()\n            cls.goto_cell(cell_name=cell_name, frame=frame)\n    \n        # overload method, simplified\n        @classmethod\n        def goto_cell(cls, cell_name: str, frame: XFrame) -> None:\n            props = Props.make_props(ToPoint=kargs[1])\n            Lo.dispatch_cmd(cmd=\"GoToCell\", props=props, frame=frame)\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Generator Script (Windows PowerShell)\nDESCRIPTION: Executes the slide generator script on Windows systems using PowerShell. The command uses a relative path with backslashes to the script file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Points_Builder/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npython .\\tests\\samples\\Impress\\Points_Builder\\start.py\n```\n\n----------------------------------------\n\nTITLE: Module Documentation RST Directive\nDESCRIPTION: ReStructuredText autodoc directive for automatically generating documentation for the UNO time field control component module\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/adapter/ooodev.adapter.awt.uno_control_time_field_comp.rst#2025-04-16_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. automodule:: ooodev.adapter.awt.uno_control_time_field_comp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Data Source\nDESCRIPTION: Method to obtain the data source from a chart document. Returns XDataSource interface for the first data series in the chart.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter31.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_data_source(cls, chart_doc: XChartDocument, chart_type: ChartTypeNameBase | str = \"\") -> XDataSource:\n    try:\n        dsa = cls.get_data_series(chart_doc=chart_doc, chart_type=chart_type)\n        ds = Lo.qi(XDataSource, dsa[0], True)\n        return ds\n    except NotFoundError:\n        raise\n    except ChartError:\n        raise\n    except Exception as e:\n        raise ChartError(\"Error getting data source for chart\") from e\n```\n\n----------------------------------------\n\nTITLE: Running Impress Text Extractor with Specific File in Shell\nDESCRIPTION: Command to run the text extraction script with a specific slide show document path as a parameter. This allows extracting text from any valid presentation file.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Extract_Text/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Extract_Text/start.py \"tests/fixtures/presentation/algs.odp\"\n```\n\n----------------------------------------\n\nTITLE: Creating Graphic Object Shape - Python\nDESCRIPTION: This code creates an instance of a GraphicObjectShape using the LibreOffice API, allowing properties to be set later. It also handles exceptions during the creation process.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part2/chapter08.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngos = Lo.create_instance_msf(XTextContent, \"com.sun.star.drawing.GraphicObjectShape\", raise_err=True)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for ooodev.format.chart2.direct.title.borders Python Package\nDESCRIPTION: RST documentation structure for the ooodev.format.chart2.direct.title.borders package that uses Sphinx automodule directive to generate API documentation, including all members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.chart2.direct.title.borders.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nooodev.format.chart2.direct.title.borders package\n=================================================\n\nModule contents\n---------------\n\n.. automodule:: ooodev.format.chart2.direct.title.borders\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Impress Slide Generator Script with Custom Input (Shell)\nDESCRIPTION: Executes the Python script with a custom input file for generating slides. The script is located in the 'tests/samples/Impress/Points_Builder/' directory and takes the path to the input text file as an argument.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Impress/Points_Builder/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython ./tests/samples/Impress/Points_Builder/start.py \"tests/fixtures/data/pointsInfo.txt\"\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive Example\nDESCRIPTION: This snippet demonstrates the use of the `automodule` directive within Sphinx documentation to automatically generate documentation for a Python module. It specifies options to include module members, display undocumented members, and show the class inheritance hierarchy.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.proto.chart2.series.data_labels.data_labels.numbers_t.rst#2025-04-16_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. automodule:: ooodev.format.proto.chart2.series.data_labels.data_labels.numbers_t\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Generation\nDESCRIPTION: This snippet utilizes `automodule` to generate documentation for the `ooodev.format.inner.partial.chart2.area.chart_fill_pattern_partial` module. The documentation includes module members, undocumented members, and inheritance information.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.partial.chart2.area.chart_fill_pattern_partial.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: ooodev.format.inner.partial.chart2.area.chart_fill_pattern_partial\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: toctree Directive\nDESCRIPTION: This directive creates a table of contents (toctree) for the submodules within the `ooodev.format.inner.modify.write.page.area` package.  The `maxdepth` is set to 4, indicating the depth of the submodule hierarchy to be included in the table of contents.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/src/format/ooodev.format.inner.modify.write.page.area.rst#2025-04-16_snippet_1\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   ooodev.format.inner.modify.write.page.area.color\n   ooodev.format.inner.modify.write.page.area.gradient\n   ooodev.format.inner.modify.write.page.area.hatch\n   ooodev.format.inner.modify.write.page.area.img\n   ooodev.format.inner.modify.write.page.area.pattern\n```\n\n----------------------------------------\n\nTITLE: Get Slides Count Method Signature\nDESCRIPTION: Function prototype for the get_slides_count method showing parameter type requirements.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part4/chapter20.rst#2025-04-16_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndef get_slides_count(cls, doc: XComponent) -> int:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Draw Polygon Implementation Method\nDESCRIPTION: Core implementation of draw_polygon() method that creates polygon shapes by generating points and setting PolyPolygon property.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part3/chapter13.rst#2025-04-16_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef draw_polygon(\n    cls,\n    slide: XDrawPage,\n    x: int | UnitT,\n    y: int | UnitT,\n    sides: PolySides | int,\n    radius: int = POLY_RADIUS\n) -> XShape:\n\n    if radius is None:\n        radius = Draw.POLY_RADIUS\n    polygon = cls.add_shape(\n        slide=slide,\n        shape_type=DrawingShapeKind.POLY_POLYGON_SHAPE,\n        x=0,\n        y=0,\n        width=0,\n        height=0,\n    )\n    pts = cls.gen_polygon_points(x=x, y=y, radius=radius, sides=sides)\n    polys = (pts,)\n    prop_set = mLo.Lo.qi(XPropertySet, polygon, raise_err=True)\n    polyseq = uno.Any(\"[][]com.sun.star.awt.Point\", polys)\n    uno.invoke(prop_set, \"setPropertyValue\", (\"PolyPolygon\", polyseq))\n    return polygon\n```\n\n----------------------------------------\n\nTITLE: Running Chart2 Demo on Linux/Mac\nDESCRIPTION: Command to run the Chart2 demo on Linux or Mac systems by directly executing the start.py script with a specified chart type.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/tests/samples/Chart2/Chart_2_Views/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython ./tests/samples/Chart2/Chart_2_Views/start.py -k happy_stock\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Title Object of a Chart in Python with LibreOffice\nDESCRIPTION: The get_title() method retrieves the title object from the chart document, enabling further manipulation of its properties. It handles exceptions to ensure stability during the operation.\nSOURCE: https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/odev/part5/chapter29.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# in Chart2 class\n@staticmethod\n\ndef get_title(chart_doc: XChartDocument) -> XTitle:\n    try:\n        xtilted = Lo.qi(XTitled, chart_doc, True)\n        return xtilted.getTitleObject()\n    except Exception as e:\n        raise ChartError(\"Error getting title from chart\") from e\n```"
  }
]