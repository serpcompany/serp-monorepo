[
  {
    "owner": "go-kratos",
    "repo": "kratos",
    "content": "TITLE: Implementing Structured Logging in Kratos\nDESCRIPTION: Demonstrates how to set up and use structured logging in Kratos, including field configuration, helper functions, and log filtering. Shows various logging methods and levels with different formatting options.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/log/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger := log.NewStdLogger(os.Stdout)\n// fields & valuer\nlogger = log.With(logger,\n    \"service.name\", \"helloworld\",\n    \"service.version\", \"v1.0.0\",\n    \"ts\", log.DefaultTimestamp,\n    \"caller\", log.DefaultCaller,\n)\nlogger.Log(log.LevelInfo, \"key\", \"value\")\n\n// helper\nhelper := log.NewHelper(logger)\nhelper.Log(log.LevelInfo, \"key\", \"value\")\nhelper.Info(\"info message\")\nhelper.Infof(\"info %s\", \"message\")\nhelper.Infow(\"key\", \"value\")\n\n// filter\nlog := log.NewHelper(log.NewFilter(logger,\n\tlog.FilterLevel(log.LevelInfo),\n\tlog.FilterKey(\"foo\"),\n\tlog.FilterValue(\"bar\"),\n\tlog.FilterFunc(customFilter),\n))\nlog.Debug(\"debug log\")\nlog.Info(\"info log\")\nlog.Warn(\"warn log\")\nlog.Error(\"warn log\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Kratos Project\nDESCRIPTION: Creates a new Kratos project named 'helloworld', resolves dependencies, and runs the application. This snippet demonstrates the basic workflow to start a new Kratos application.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkratos new helloworld\ncd helloworld/ && go mod tidy\nkratos run\n```\n\n----------------------------------------\n\nTITLE: Creating a Kratos Service Project\nDESCRIPTION: Shell commands to create a new Kratos project, generate protobuf files, and run the service. This demonstrates the typical workflow for starting a new Kratos-based microservice.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/README_zh.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# 创建项目模板\nkratos new helloworld\n\ncd helloworld\n# 拉取项目依赖\ngo mod download\n\n# 生成 proto 模板\nkratos proto add api/helloworld/helloworld.proto\n# 生成 proto 源码\nkratos proto client api/helloworld/helloworld.proto\n# 生成 server 模板\nkratos proto server api/helloworld/helloworld.proto -t internal/service\n\n# 生成所有 proto 源码、wire 等等\ngo generate ./...\n\n# 运行程序\nkratos run\n```\n\n----------------------------------------\n\nTITLE: Basic Protobuf code generation command for Kratos\nDESCRIPTION: Command to generate Go code from protobuf definitions with the Kratos framework. It demonstrates how to use protoc with multiple plugins including go, go-grpc, go-http, go-errors, validate, and openapi.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --proto_path=. \\\n       --proto_path=./third_party \\\n       --go_out=paths=source_relative:. \\\n       --go-grpc_out=paths=source_relative:. \\\n       --go-http_out=paths=source_relative:. \\\n       --go-errors_out=paths=source_relative:. \\\n       --validate_out=paths=source_relative,lang=go:. \\\n       --openapi_out=fq_schema_naming=true,default_response=false:. \\\n       api/helloworld/v1/greeter.proto\n```\n\n----------------------------------------\n\nTITLE: Initializing a Kratos Application\nDESCRIPTION: Go code snippet demonstrating how to initialize a Kratos application with HTTP and gRPC servers. This shows the basic setup for a Kratos-based microservice.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/README_zh.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/go-kratos/kratos/v2\"\nimport \"github.com/go-kratos/kratos/v2/transport/grpc\"\nimport \"github.com/go-kratos/kratos/v2/transport/http\"\n\nhttpSrv := http.NewServer(http.Address(\":8000\"))\ngrpcSrv := grpc.NewServer(grpc.Address(\":9000\"))\n\napp := kratos.New(\n    kratos.Name(\"kratos\"),\n    kratos.Version(\"latest\"),\n    kratos.Server(httpSrv, grpcSrv),\n)\napp.Run()\n```\n\n----------------------------------------\n\nTITLE: Installing Kratos Dependencies\nDESCRIPTION: Installs the protobuf compiler, sets up a Go proxy, and installs the Kratos CLI tool. These steps prepare the environment for Kratos development.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\napt-get update && apt-get -y install protobuf-compiler\nexport GOPROXY=https://goproxy.io,direct\ngo install github.com/go-kratos/kratos/cmd/kratos/v2@latest && kratos upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing protoc and Protobuf plugins for Kratos\nDESCRIPTION: Command to install protoc compiler and necessary protobuf plugins for Kratos development. This includes the protocol buffer compiler itself along with plugins for Go, gRPC, HTTP, OpenAPI, validate, and Kratos-specific plugins.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\ngo install github.com/go-kratos/kratos/cmd/protoc-gen-go-http/v2@latest\ngo install github.com/go-kratos/kratos/cmd/protoc-gen-go-errors/v2@latest\ngo install github.com/google/gnostic/cmd/protoc-gen-openapi@latest\ngo install github.com/envoyproxy/protoc-gen-validate@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Kratos via Go Install\nDESCRIPTION: Commands to install Kratos using Go's package management system. This method fetches the latest version from the GitHub repository.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/README_zh.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo install github.com/go-kratos/kratos/cmd/kratos/v2@latest\nkratos upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing Kratos from Source\nDESCRIPTION: Steps to clone the Kratos repository and compile it from source. This method allows for installation of the latest development version.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/README_zh.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/go-kratos/kratos\ncd kratos\nmake install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kratos in Docker\nDESCRIPTION: Creates a Docker container with Golang to set up a Kratos playground environment. This command runs a temporary container with port 8000 exposed for development.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm -p 8000:8000 --workdir /workspace golang\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Config Source in Kratos\nDESCRIPTION: Example showing how to initialize and configure Apollo as a config source in a Kratos application. Demonstrates setting up Apollo with various options including AppID, cluster, endpoint, namespace, backup, and secret key.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/apollo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/go-kratos/kratos/contrib/config/apollo/v2\"\n\t\"github.com/go-kratos/kratos/v2/config\"\n)\n\nfunc main() {\n\tc := config.New(\n\t\tconfig.WithSource(\n\t\t\tapollo.NewSource(\n\t\t\t\tapollo.WithAppID(\"kratos\"),\n\t\t\t\tapollo.WithCluster(\"dev\"),\n\t\t\t\tapollo.WithEndpoint(\"http://localhost:8080\"),\n\t\t\t\tapollo.WithNamespace(\"application,event.yaml,demo.json\"),\n\t\t\t\tapollo.WithEnableBackup(),\n\t\t\t\tapollo.WithSecret(\"ad75b33c77ae4b9c9626d969c44f41ee\"),\n\t\t\t),\n\t\t),\n\t)\n\tvar bc bootstrap\n\tif err := c.Load(); err != nil {\n\t\tpanic(err)\n\t}\n\t\n\t// use value and watch operations，help yourself. \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nacos Service Discovery with Kratos Client\nDESCRIPTION: This code demonstrates how to set up a Kratos client with Nacos service discovery. It initializes a Nacos client with a custom configuration, creates a registry instance, and configures a gRPC client to discover services through Nacos.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/registry/nacos/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/nacos-group/nacos-sdk-go/clients\"\n\t\"github.com/nacos-group/nacos-sdk-go/common/constant\"\n\t\"github.com/nacos-group/nacos-sdk-go/vo\"\n\n\t\"github.com/go-kratos/kratos/contrib/registry/nacos/v2\"\n\t\"github.com/go-kratos/kratos/v2/transport/grpc\"\n)\n\nfunc main() {\n\n\tcc := constant.ClientConfig{\n\t\tNamespaceId: \"public\",\n\t\tTimeoutMs:   5000,\n\t}\n\n\tclient, err := clients.NewNamingClient(\n\t\tvo.NacosClientParam{\n\t\t\tClientConfig: &cc,\n\t\t},\n\t)\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tr := nacos.New(client)\n\n\t// client\n\tconn, err := grpc.DialInsecure(\n\t\tcontext.Background(),\n\t\tgrpc.WithEndpoint(\"discovery:///helloworld\"),\n\t\tgrpc.WithDiscovery(r),\n\t)\n\tdefer conn.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nacos Service Registration with Kratos Server\nDESCRIPTION: This code demonstrates how to set up a Kratos server with Nacos service registration. It initializes a Nacos client, creates a registry instance, and configures a Kratos application to register itself with Nacos.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/registry/nacos/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/nacos-group/nacos-sdk-go/clients\"\n\t\"github.com/nacos-group/nacos-sdk-go/common/constant\"\n\t\"github.com/nacos-group/nacos-sdk-go/vo\"\n\n\t\"github.com/go-kratos/kratos/contrib/registry/nacos/v2\"\n\t\"github.com/go-kratos/kratos/v2\"\n)\n\nfunc main() {\n\tsc := []constant.ServerConfig{\n\t\t*constant.NewServerConfig(\"127.0.0.1\", 8848),\n\t}\n\t\n\n\tclient, err := clients.NewNamingClient(\n\t\tvo.NacosClientParam{\n\t\t\tServerConfigs: sc,\n\t\t},\n\t)\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tr := nacos.New(client)\n\n\t// server\n\tapp := kratos.New(\n\t\tkratos.Name(\"helloworld\"),\n\t\tkratos.Registrar(r),\n\t)\n\tif err := app.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Servicecomb Registry Server in Go-Kratos\nDESCRIPTION: Sets up a Kratos server with Servicecomb registry integration. Creates a new Servicecomb client connected to a local endpoint and configures it as the service registry for the Kratos application.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/registry/servicecomb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/go-chassis/sc-client\"\n\t\"github.com/go-kratos/kratos/contrib/registry/servicecomb/v2\"\n\t\"github.com/go-kratos/kratos/v2\"\n)\n\nfunc main() {\n\tc, err := sc.NewClient(sc.Options{\n\t\tEndpoints: []string{\"127.0.0.1:30100\"},\n\t})\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tr := servicecomb.NewRegistry(c)\n\tapp := kratos.New(\n\t\tkratos.Name(\"helloServicecomb\"),\n\t\tkratos.Registrar(r),\n\t)\n\tif err := app.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Servicecomb Registry Client in Go-Kratos\nDESCRIPTION: Demonstrates how to create a gRPC client that uses Servicecomb for service discovery. Establishes a connection to a service using discovery protocol and configures the Servicecomb registry for service lookup.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/registry/servicecomb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/go-chassis/sc-client\"\n\t\"github.com/go-kratos/kratos/contrib/registry/servicecomb/v2\"\n\t\"github.com/go-kratos/kratos/v2/transport/grpc\"\n)\n\nfunc main() {\n\tc, err := sc.NewClient(sc.Options{\n\t\tEndpoints: []string{\"127.0.0.1:30100\"},\n\t})\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tr := servicecomb.NewRegistry(c)\n\tctx := context.Background()\n\tconn, err := grpc.DialInsecure(\n\t\tctx,\n\t\tgrpc.WithEndpoint(\"discovery:///helloServicecomb\"),\n\t\tgrpc.WithDiscovery(r),\n\t)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer conn.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Service with Discovery in Go\nDESCRIPTION: Example showing how to initialize a registry and register a service using the discovery implementation. Demonstrates configuration setup and integration with Kratos application framework.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/registry/discovery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/go-kratos/kratos/contrib/registry/discovery/v2\"\n)\n\nfunc main() {\n\t// initialize a registry\n\tr := discovery.New(&discovery.Config{\n\t\tNodes:  []string{\"0.0.0.0:7171\"},\n\t\tEnv:    \"dev\",\n\t\tRegion: \"sh1\",\n\t\tZone:   \"zone1\",\n\t\tHost:   \"hostname\",\n\t})\n\n\t// construct srv instance\n\t// ...\n\t\n\tapp := kratos.New(\n\t\tkratos.Name(\"helloworld\"),\n\t\tkratos.Server(\n\t\t\thttpSrv,\n\t\t\tgrpcSrv,\n\t\t),\n\t\tkratos.Metadata(map[string]string{\"color\": \"gray\"}),\n\t\t// use Registrar\n\t\tkratos.Registrar(r),\n\t)\n\t\n\tif err := app.Run(); err != nil {\n\t\tlog.NewHelper(logger).Fatal(err)\n\t}\t\n}\n```\n\n----------------------------------------\n\nTITLE: Discovering Services with Discovery in Go\nDESCRIPTION: Example demonstrating how to initialize a discovery client and discover services. Shows integration with gRPC client and connection setup using discovery-based service resolution.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/registry/discovery/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/go-kratos/kratos/contrib/registry/discovery/v2\"\n\t\"github.com/go-kratos/kratos/v2/transport/grpc\"\n)\n\nfunc main() {\n\t// initialize a discovery\n\tr := discovery.New(&discovery.Config{\n\t\tNodes:  []string{\"0.0.0.0:7171\"},\n\t\tEnv:    \"dev\",\n\t\tRegion: \"sh1\",\n\t\tZone:   \"zone1\",\n\t\tHost:   \"localhost\",\n\t}, nil)\n\n\tconn, err := grpc.DialInsecure(\n\t\tcontext.Background(),\n\t\tgrpc.WithEndpoint(\"discovery:///appid\"),\n\t\t// use discovery\n\t\tgrpc.WithDiscovery(r),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\t\n\t// request and log\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Etcd as a Configuration Source in Go-Kratos\nDESCRIPTION: This snippet demonstrates how to set up an Etcd client, create a configuration source, and use it to retrieve configuration values in a Go-Kratos application. It includes error handling and proper resource management.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/etcd/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"log\"\n\n\tclientv3 \"go.etcd.io/etcd/client/v3\"\n\t\"google.golang.org/grpc\"\n\n\tcfg \"github.com/go-kratos/kratos/contrib/config/etcd/v2\"\n\t\"github.com/go-kratos/kratos/v2/config\"\n)\n\n// create an etcd client\nclient, err := clientv3.New(clientv3.Config{\n    Endpoints:   []string{\"127.0.0.1:2379\"},\n    DialTimeout: time.Second,\n    DialOptions: []grpc.DialOption{grpc.WithBlock()},\n})\nif err != nil {\n    log.Fatal(err)\n}\n\n// configure the source, \"path\" is required\nsource, err := cfg.New(client, cfg.WithPath(\"/app-config\"), cfg.WithPrefix(true))\nif err != nil {\n    log.Fatalln(err)\n}\n\n// create a config instance with source\nc := config.New(config.WithSource(source))\ndefer c.Close()\n\n// load sources before get\nif err := c.Load(); err != nil {\n    log.Fatalln(err)\n}\n\n// acquire config value\nfoo, err := c.Value(\"/app-config\").String()\nif err != nil {\n    log.Fatalln(err)\n}\n\nlog.Println(foo)\n```\n\n----------------------------------------\n\nTITLE: Initializing Nacos Config Client in Go-Kratos\nDESCRIPTION: Creates a Nacos configuration client with server and client settings. This snippet shows how to setup the connection to Nacos server, configure namespace, timeouts, logging parameters, and initialize the client.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/nacos/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/nacos-group/nacos-sdk-go/clients\"\n\t\"github.com/nacos-group/nacos-sdk-go/common/constant\"\n\n\tkconfig \"github.com/go-kratos/kratos/v2/config\"\n)\n\n\nsc := []constant.ServerConfig{\n\t*constant.NewServerConfig(\"127.0.0.1\", 8848),\n}\n\ncc := &constant.ClientConfig{\n\tNamespaceId:         \"public\", //namespace id\n\tTimeoutMs:           5000,\n\tNotLoadCacheAtStart: true,\n\tLogDir:              \"/tmp/nacos/log\",\n\tCacheDir:            \"/tmp/nacos/cache\",\n\tRotateTime:          \"1h\",\n\tMaxAge:              3,\n\tLogLevel:            \"debug\",\n}\n\n// a more graceful way to create naming client\nclient, err := clients.NewConfigClient(\n\tvo.NacosClientParam{\n\t\tClientConfig:  cc,\n\t\tServerConfigs: sc,\n\t},\n)\nif err != nil {\n\tlog.Panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Consul as a Configuration Source in Kratos\nDESCRIPTION: This snippet shows how to create a Consul client and configure it as a source for Kratos configuration. It initializes a Consul client with a specific address (127.0.0.1:8500) and configures it to look for configuration files in a specific path (app/cart/configs/). Note that file suffixes need to be marked in Consul for Kratos to properly read the configuration.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/consul/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/hashicorp/consul/api\"\n\n    \"github.com/go-kratos/kratos/contrib/config/consul/v2\"\n)\n\nfunc main() {\n    consulClient, err := api.NewClient(&api.Config{\n        Address: \"127.0.0.1:8500\",\n    })\n    if err != nil {\n        panic(err)\n    }\n    cs, err := consul.New(consulClient, consul.WithPath(\"app/cart/configs/\"))\n    // consul中需要标注文件后缀，kratos读取配置需要适配文件后缀\n    // The file suffix needs to be marked, and kratos needs to adapt the file suffix to read the configuration.\n    if err != nil {\n        panic(err)\n    }\n    c := config.New(config.WithSource(cs))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Polaris Config in Go-Kratos\nDESCRIPTION: This snippet demonstrates how to set up Polaris Config in a Go application using the go-kratos/kratos framework. It creates a Polaris Config API instance and initializes a configuration source with specific namespace, file group, and file name settings.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/polaris/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"log\"\n\t\n\t\"github.com/polarismesh/polaris-go\"\n\t\n\t\"github.com/go-kratos/kratos/contrib/config/polaris/v2\"\n)\n\nfunc main() {\n    configApi, err := polaris.NewConfigAPI()\n    if err != nil {\n    \tlog.Fatalln(err)\n    }\n\n    source, err := New(&configApi, WithNamespace(\"default\"), WithFileGroup(\"default\"), WithFileName(\"default.yaml\"))\n    if err != nil {\n    \tlog.Fatalln(err)\n    }\n    source.Load()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenSergo Server with Kratos and gRPC\nDESCRIPTION: Demonstrates the setup of an OpenSergo server with Kratos framework integration. Includes initialization of gRPC server, service registration, and metadata reporting. Uses the recovery middleware for error handling.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/opensergo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\tosServer, err := opensergo.New(opensergo.WithEndpoint(\"localhost:9090\"))\n\tif err != nil {\n\t\tpanic(\"init opensergo error\")\n\t}\n\n\ts := &server{}\n\tgrpcSrv := grpc.NewServer(\n\t\tgrpc.Address(\":9000\"),\n\t\tgrpc.Middleware(\n\t\t\trecovery.Recovery(),\n\t\t),\n\t)\n\thelloworld.RegisterGreeterServer(grpcSrv, s)\n\n\tapp := kratos.New(\n\t\tkratos.Name(Name),\n\t\tkratos.Server(\n\t\t\tgrpcSrv,\n\t\t),\n\t)\n\n\tosServer.ReportMetadata(context.Background(), app)\n\n\tif err := app.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Server with Sentry Middleware\nDESCRIPTION: Sets up gRPC server middleware stack including Sentry error tracking with custom tags and trace ID integration.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/errortracker/sentry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar opts = []grpc.ServerOption{\n     grpc.Middleware(\n\t\trecovery.Recovery(),\n\t\ttracing.Server(),\n\t\tksentry.Server(ksentry.WithTags(map[string]interface{}{\n\t\t\t\"tag\": \"some-custom-constant-tag\",\n\t\t\t\"trace_id\": tracing.TraceID(), // If you want to use the TraceID valuer, you need to place it after the A middleware.\n\t\t})), // must after Recovery middleware, because of the exiting order will be reversed\n\t\tlogging.Server(logger),\n     ),\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server with Sentry Middleware\nDESCRIPTION: Sets up HTTP server middleware stack including Sentry error tracking with custom tags and trace ID integration.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/errortracker/sentry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar opts = []http.ServerOption{\n\thttp.Middleware(\n\t\trecovery.Recovery(),\n\t\ttracing.Server(),\n\t\tksentry.Server(ksentry.WithTags(map[string]interface{}{\n\t\t\t\"tag\": \"some-custom-constant-tag\",\n\t\t\t\"trace_id\": tracing.TraceID(), // If you want to use the TraceID valuer, you need to place it after the A middleware.\n\t\t})), // must after Recovery middleware, because of the exiting order will be reversed\n\t\t\n\t\tlogging.Server(logger), \n\t),\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Registry for Kratos\nDESCRIPTION: Command to install the Kubernetes registry implementation for Kratos framework using Go modules.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/registry/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/registry/kubernetes/v2\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Client in Go\nDESCRIPTION: Configures the Sentry client with basic options including DSN and stack trace attachment settings.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/errortracker/sentry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/getsentry/sentry-go\"\n\nsentry.Init(sentry.ClientOptions{\n\t\tDsn: \"<your dsn>\",\n\t\tAttachStacktrace: true, // recommended\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Output Paths for Generated Protobuf Files\nDESCRIPTION: Example showing how to customize output paths for generated protobuf files in Kratos. This enables directing different types of generated files to specific directories rather than the default locations.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/docs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --proto_path=. \\\n       --proto_path=./third_party \\\n       --go_out=paths=source_relative:./gen/api \\\n       --go-grpc_out=paths=source_relative:./gen/api \\\n       --go-errors_out=paths=source_relative:./gen/api \\\n       --go-http_out=paths=source_relative:./gen/api \\\n       --validate_out=paths=source_relative,lang=go:./gen/api \\\n       --openapi_out=paths=source_relative:./gen/api \\\n       api/helloworld/v1/greeter.proto\n```\n\n----------------------------------------\n\nTITLE: Using Protobuf Generation with Multiple File Patterns\nDESCRIPTION: Command demonstrating how to generate protobuf code for multiple file patterns at once. This approach processes all .proto files in the api directory and its subdirectories in a single command.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/docs/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --proto_path=. \\\n       --proto_path=./third_party \\\n       --go_out=paths=source_relative:. \\\n       --go-grpc_out=paths=source_relative:. \\\n       --go-http_out=paths=source_relative:. \\\n       --go-errors_out=paths=source_relative:. \\\n       --validate_out=paths=source_relative,lang=go:. \\\n       --openapi_out=fq_schema_naming=true,default_response=false:. \\\n       api/**/*.proto\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger UI Documentation from Protobuf\nDESCRIPTION: Command showing how to generate Swagger UI documentation from protobuf files using the openapiv2 plugin. This produces swagger.json files that can be used with Swagger UI for API documentation.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/docs/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --proto_path=. \\\n       --proto_path=./third_party \\\n       --openapiv2_out . \\\n       --openapiv2_opt logtostderr=true \\\n       --openapiv2_opt json_names_for_fields=false \\\n       api/helloworld/v1/greeter.proto\n```\n\n----------------------------------------\n\nTITLE: Setting up a Google API imports repository for Protobuf generation\nDESCRIPTION: Commands to set up a local repository of Google API imports for protobuf development. It clones the googleapis repository and copies necessary API definitions to a project's third_party directory.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/googleapis/googleapis.git\n\nmkdir -p third_party/googleapis/google/api\n\ncp -r googleapis/google/api/* third_party/googleapis/google/api\n```\n\n----------------------------------------\n\nTITLE: Installing MessagePack encoding for Kratos\nDESCRIPTION: Command to install the MessagePack encoding module for the Kratos framework using Go modules. This dependency enables MessagePack serialization and deserialization in Kratos applications.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/encoding/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/encoding/msgpack/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Go-Kratos with External Kubernetes Config\nDESCRIPTION: Go code example showing how to configure Go-Kratos to use an external Kubernetes configuration file. This is used when running outside of a Kubernetes cluster.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/kubernetes/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nconfig.NewSource(SourceOption{\n\tNamespace:     \"mesh\",\n\tLabelSelector: \"\",\n\tKubeConfig:    filepath.Join(homedir.HomeDir(), \".kube\", \"config\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ClusterRoleBinding with YAML\nDESCRIPTION: YAML definition for creating a ClusterRoleBinding that gives the default service account in the 'mesh' namespace the 'view' ClusterRole. This can be applied using kubectl.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/kubernetes/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: go-kratos:kube\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: view\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: mesh\n```\n\n----------------------------------------\n\nTITLE: Apollo Config JSON Structure Example\nDESCRIPTION: Example of JSON configuration structure in Apollo, showing HTTP server configuration including address and TLS settings.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/apollo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"http\": {\n    \"address\": \":8080\",\n    \"tls\": {\n      \"enable\": false,\n      \"cert_file\": \"\",\n      \"key_file\": \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Apollo Configuration Options Documentation\nDESCRIPTION: List of available configuration options for Apollo integration, including functions for setting AppID, cluster, backup configuration, endpoint, namespace, and secret key.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/apollo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// specify the app id\nfunc WithAppID(appID string) Option\n// specify the cluster of application\nfunc WithCluster(cluster string) Option\n\n// enable backup or not, and where to back up them.\nfunc WithBackupPath(backupPath string) Option\nfunc WithDisableBackup() Option\nfunc WithEnableBackup() Option\n\n// specify apollo endpoint, such as http://localhost:8080\nfunc WithEndpoint(endpoint string) Option\n\n// namespaces to load, comma to separate. \nfunc WithNamespace(name string) Option\n\n// secret is the apollo secret key to access application config.\nfunc WithSecret(secret string) Option\n```\n\n----------------------------------------\n\nTITLE: Apollo Config Map Structure in Kratos\nDESCRIPTION: Example showing how the Apollo configuration is represented in Kratos as a nested map structure, with namespace included in the key path.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/apollo/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconfig := map[string]interface{}{\n\t// application be part of the key path.\n\t\"application\": map[string]interface{}{\n        \"http\": map[string]interface{}{\n            \"address\": \":8080\",\n            \"tls\": map[string]interface{}{\n                \"enable\": false,\n                \"cert_file\": \"\",\n                \"key_file\": \"\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Polaris Registry for Kratos\nDESCRIPTION: Command to install the Polaris registry implementation for Kratos framework using Go modules.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/registry/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/registry/polaris/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Etcd Registry for Kratos\nDESCRIPTION: Command to install the Etcd registry implementation for Kratos framework using Go modules.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/registry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/registry/etcd/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Consul Registry for Kratos\nDESCRIPTION: Command to install the Consul registry implementation for Kratos framework using Go modules.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/registry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/registry/consul/v2\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ClusterRoleBinding via kubectl command\nDESCRIPTION: Command to create a ClusterRoleBinding that provides the 'view' role to the default service account in the 'mesh' namespace.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/config/kubernetes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create clusterrolebinding go-kratos:kube --clusterrole=view --serviceaccount=mesh:default\n```\n\n----------------------------------------\n\nTITLE: Installing Nacos Registry for Kratos\nDESCRIPTION: Command to install the Nacos registry implementation for Kratos framework using Go modules.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/registry/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/registry/nacos/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Zookeeper Registry for Kratos\nDESCRIPTION: Command to install the Zookeeper registry implementation for Kratos framework using Go modules.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/registry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/registry/zookeeper/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Configuration Provider for Kratos\nDESCRIPTION: Command to install the Kubernetes configuration provider for the Kratos framework. This package allows Kratos applications to use Kubernetes as a source of configuration.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/config/kubernetes/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Etcd Configuration Provider for Kratos\nDESCRIPTION: Command to install the Etcd configuration provider for the Kratos framework. This package allows Kratos applications to use Etcd as a distributed key-value store for configuration.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/config/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/config/etcd/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Nacos Configuration Provider for Kratos\nDESCRIPTION: Command to install the Nacos configuration provider for the Kratos framework. This package allows Kratos applications to integrate with Nacos for dynamic configuration management.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/config/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/config/nacos/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Logrus Logger Integration\nDESCRIPTION: Command to install the Logrus logger integration for Kratos.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/log/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/log/logrus/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Configuration Provider for Kratos\nDESCRIPTION: Command to install the Apollo configuration provider for the Kratos framework. This package enables Kratos applications to connect to Apollo as a configuration center.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/config/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/config/apollo/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Zap Logger Integration\nDESCRIPTION: Command to install the Zap logger integration for Kratos.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/log/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/log/zap/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent Logger Integration\nDESCRIPTION: Command to install the Fluent logger integration for Kratos.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/log/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/log/fluent/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Aliyun Logger Integration\nDESCRIPTION: Command to install the Aliyun logger integration for Kratos.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/log/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-kratos/kratos/contrib/log/aliyun/v2\n```\n\n----------------------------------------\n\nTITLE: Example of a Full Commit Message with Breaking Changes in Kratos\nDESCRIPTION: Provides a comprehensive example of a commit message with breaking changes, including detailed explanation, issue references, and explicit breaking change notifications for the log component.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nfix(log): [BREAKING-CHANGE] unable to meet the requirement of log Library\n\nExplain the reason, purpose, realization method, etc.\n\nClose #777\nDoc change on doc/#111\nBREAKING CHANGE:\n  Breaks log.info api, log.log should be used instead\n```\n\n----------------------------------------\n\nTITLE: Example of an Attention-Required Commit Message in Kratos\nDESCRIPTION: Shows a commit message format that highlights breaking changes in the transport/http component using the exclamation mark to indicate significant changes that require attention.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nrefactor!(transport/http): replacement underlying implementation\n```\n\n----------------------------------------\n\nTITLE: Example of a Simple Commit Message in Kratos\nDESCRIPTION: Demonstrates a simple commit message format for bug fixes in the Kratos project, showing the minimal required format with just the type and description.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfix: The log debug level should be -1  \n```\n\n----------------------------------------\n\nTITLE: Conventional Commits Format in Kratos Project\nDESCRIPTION: Defines the standard format for commit messages in the Kratos project following the Conventional Commits specification. The structure includes type, optional scope, description, body, and footer sections to provide clear context for each change.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\n----------------------------------------\n\nTITLE: Referencing Protovalidate GitHub Repository in Markdown\nDESCRIPTION: This snippet provides a Markdown link to the GitHub repository of the protovalidate library. It's likely used as a reference or documentation for integrating protovalidate into the Go-Kratos framework.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/third_party/buf/validate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* https://github.com/bufbuild/protovalidate\n```\n\n----------------------------------------\n\nTITLE: Documenting Internal Package Structure - Markdown\nDESCRIPTION: A simple markdown heading indicating the internal package directory, which by Go convention contains implementation details that should not be imported by external code.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/internal/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# internal\n```\n\n----------------------------------------\n\nTITLE: Discovery Configuration Structure in Go\nDESCRIPTION: Definition of the configuration structure used for setting up the discovery client. Includes fields for nodes, region, zone, environment, and host configuration.\nSOURCE: https://github.com/go-kratos/kratos/blob/main/contrib/registry/discovery/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tNodes  []string // discovery nodes address\n\tRegion string   // region of the service, sh\n\tZone   string   // zone of region, sh001\n\tEnv    string   // env of service, dev, prod and etc\n\tHost   string   // hostname of service\n}\n```"
  }
]