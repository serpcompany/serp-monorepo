[
  {
    "owner": "doist",
    "repo": "todoist-api-typescript",
    "content": "TITLE: OAuth2 Authorization Flow\nDESCRIPTION: This snippet demonstrates the OAuth2 authorization flow for the Todoist API using the TypeScript client. It includes generating the state parameter, constructing the authorization URL, exchanging the authorization code for an access token, and handling the OAuth callback. It requires the `@doist/todoist-api-typescript` package. Replace 'YOUR_CLIENT_ID' and 'YOUR_CLIENT_SECRET' with your actual credentials, and 'CODE_FROM_CALLBACK' with the code received from the callback.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/authorization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    getAuthStateParameter,\n    getAuthorizationUrl,\n    getAuthToken,\n} from '@doist/todoist-api-typescript'\n\n// 1. Generate state parameter and store it\nconst state = getAuthStateParameter()\n\n// 2. Get authorization URL\nconst url = getAuthorizationUrl('YOUR_CLIENT_ID', ['data:read', 'task:add'], state)\n\n// 3. Redirect user to the authorization URL\n// 4. Handle OAuth callback and get code\n\n// 5. Exchange code for token\nconst { accessToken } = await getAuthToken({\n    clientId: 'YOUR_CLIENT_ID',\n    clientSecret: 'YOUR_CLIENT_SECRET',\n    code: 'CODE_FROM_CALLBACK',\n})\n```\n\n----------------------------------------\n\nTITLE: Get Auth Token - TypeScript\nDESCRIPTION: Exchanges an authorization code for an access token using the provided client ID, client secret, and authorization code. Requires the `AuthTokenRequestArgs` type to provide the necessary parameters and returns a Promise that resolves to `AuthTokenResponse` on success.  Throws `TodoistRequestError` if the token exchange fails.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getAuthToken.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAuthToken(args: AuthTokenRequestArgs, baseUrl?: string): Promise<AuthTokenResponse>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Todoist API Client (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize the Todoist API client with an API token and fetch a user's tasks.  It showcases basic usage of the client and error handling.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TodoistApi } from '@doist/todoist-api-typescript'\n\nconst api = new TodoistApi('YOURTOKEN')\n\napi.getTasks()\n    .then((tasks) => console.log(tasks))\n    .catch((error) => console.log(error))\n```\n\n----------------------------------------\n\nTITLE: Generate Authorization URL for OAuth2 Flow\nDESCRIPTION: The `getAuthorizationUrl` function constructs the OAuth2 authorization URL. It requires a `clientId` representing the application's ID, an array of `permissions` specifying the scopes being requested, a `state` string for preventing CSRF attacks, and an optional `baseUrl` for the Todoist API. The function returns the complete URL.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getAuthorizationUrl.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getAuthorizationUrl(\n   clientId: string, \n   permissions: Permission[], \n   state: string, \n   baseUrl?: string): string\n```\n\n----------------------------------------\n\nTITLE: Add Task TypeScript\nDESCRIPTION: Adds a new task to Todoist. Requires an `AddTaskArgs` object that includes task details like content, due date, and priority. An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddTask(args: AddTaskArgs, requestId?: string): Promise<Task>\n```\n\n----------------------------------------\n\nTITLE: Using the Access Token with Todoist API\nDESCRIPTION: This snippet showcases how to use the access token obtained from the OAuth2 flow to interact with the Todoist API. It initializes the API client with the access token and then uses it to add a task. This requires the `@doist/todoist-api-typescript` package and a valid access token.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/authorization.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TodoistApi } from '@doist/todoist-api-typescript'\n\n// Initialize API with access token\nconst api = new TodoistApi(accessToken)\n\n// Use API methods\nconst task = await api.addTask({\n    content: 'Buy groceries',\n    dueString: 'tomorrow at 12:00',\n    priority: 4,\n})\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth2 State Parameter in TypeScript\nDESCRIPTION: This snippet demonstrates the `getAuthStateParameter` function, which generates a random UUID v4 string for use as an OAuth2 state parameter. This parameter is crucial for preventing CSRF attacks by verifying the authenticity of the authorization request.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getAuthStateParameter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAuthStateParameter(): string\n```\n\n----------------------------------------\n\nTITLE: Todoist API Initialization TypeScript\nDESCRIPTION: Demonstrates how to initialize the TodoistApi class with an API token. The constructor accepts an authToken and an optional baseUrl.  The baseUrl defaults to the standard Todoist API endpoint if not provided.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew TodoistApi(authToken: string, baseUrl?: string): TodoistApi\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getAuthToken - TypeScript\nDESCRIPTION: Demonstrates how to use the `getAuthToken` function to exchange an authorization code (`authCode`) for an access token. Requires providing the `clientId`, `clientSecret`, and `code` within the `AuthTokenRequestArgs`. The returned access token is then extracted from the resolved promise.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getAuthToken.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { accessToken } = await getAuthToken({\n  clientId: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  code: authCode\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Generated State Parameter in TypeScript\nDESCRIPTION: This example showcases how to use the `getAuthStateParameter` function to generate a state parameter and incorporate it into the OAuth2 authorization URL.  The generated state should be stored in the user's session and later validated upon receiving the authorization callback.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getAuthStateParameter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = getAuthStateParameter()\n// Store state in session\nconst authUrl = getAuthorizationUrl(clientId, ['data:read'], state)\n```\n\n----------------------------------------\n\nTITLE: Updating a Task in TypeScript\nDESCRIPTION: This method updates an existing task in Todoist by its ID with provided parameters. The parameters such as content, priority, or due date are passed through UpdateTaskArgs. An optional 'requestId' for idempotency is accepted. It returns a Promise that resolves to the updated Task object.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nupdateTask(\n   id: string, \n   args: UpdateTaskArgs, \nrequestId?: string): Promise<Task>\n```\n\n----------------------------------------\n\nTITLE: Add Comment to Task/Project TypeScript\nDESCRIPTION: Adds a comment to a specified task or project. It requires an `AddCommentArgs` object that contains the comment's content and the target task or project ID. An optional `requestId` can be provided for idempotency.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naddComment(args: AddCommentArgs, requestId?: string): Promise<Comment>\n```\n\n----------------------------------------\n\nTITLE: Example scratch.ts file for local development (TypeScript)\nDESCRIPTION: This example shows how to create a `scratch.ts` file for local development and testing. It initializes the API client, retrieves projects, and logs the results or any errors.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable no-console */\nimport { TodoistApi } from './TodoistApi'\n\nconst token = 'YOURTOKEN'\nconst api = new TodoistApi(token)\n\napi.getProjects()\n    .then((projects) => {\n        console.log(projects)\n    })\n    .catch((error) => console.error(error))\n```\n\n----------------------------------------\n\nTITLE: Quick Adding a Task in TypeScript\nDESCRIPTION: This method quickly adds a task using natural language processing for due dates. It takes QuickAddTaskArgs as input and returns a Promise that resolves to the created Task object.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nquickAddTask(args: QuickAddTaskArgs): Promise<Task>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Tasks in TypeScript\nDESCRIPTION: This method retrieves multiple active tasks based on provided filter arguments, such as project ID, label ID, or due date. It returns a Promise that resolves to an array of Task objects. The args parameter is of type GetTasksArgs, allowing filtering of the tasks.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ngetTasks(args: GetTasksArgs): Promise<GetTasksResponse>\n```\n\n----------------------------------------\n\nTITLE: Fetching a task using Todoist API TypeScript\nDESCRIPTION: This snippet initializes the Todoist API client with an API token and retrieves a specific task by its ID. It requires the @doist/todoist-api-typescript package to be installed. The API token is used for authentication and authorization to access the Todoist API.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/about.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TodoistApi } from '@doist/todoist-api-typescript'\n\nconst api = new TodoistApi('YOUR_API_TOKEN')\n\napi.getTask('6X4Vw2Hfmg73Q2XR')\n    .then((task) => console.log(task))\n    .catch((error) => console.log(error))\n```\n\n----------------------------------------\n\nTITLE: Updating a Project in TypeScript\nDESCRIPTION: This method updates an existing project in Todoist by its ID with provided parameters. The parameters such as name or color are passed through UpdateProjectArgs. An optional 'requestId' for idempotency is accepted. It returns a Promise that resolves to the updated Project object (either PersonalProject or WorkspaceProject).\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nupdateProject(\n   id: string, \n   args: UpdateProjectArgs, \n   requestId?: string): Promise<\n  | PersonalProject\n| WorkspaceProject>\n```\n\n----------------------------------------\n\nTITLE: Add Project TypeScript\nDESCRIPTION: Adds a new project to the Todoist account.  Requires an `AddProjectArgs` object containing project creation parameters like name and color.  An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddProject(args: AddProjectArgs, requestId?: string): Promise<\n  | PersonalProject\n| WorkspaceProject>\n```\n\n----------------------------------------\n\nTITLE: Close Task TypeScript\nDESCRIPTION: Closes (completes) a task given its ID. Requires the task's `id` as a string.  An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncloseTask(id: string, requestId?: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining AddTaskArgs Type in TypeScript\nDESCRIPTION: This code snippet defines the `AddTaskArgs` type in TypeScript, which represents the arguments required to create a new task using the Todoist API.  It includes properties like `content`, `deadlineDate`, and `projectId`, and uses utility types `RequireOneOrNone` and `RequireAllOrNone` to enforce conditional requirements for `dueDate/dueDatetime` and `duration/durationUnit` respectively.  AssigneeId, deadlineDate, deadlineLang, description, dueLang, dueString, labels, order, parentId, priority, projectId and sectionId are also present as optional parameters.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/AddTaskArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AddTaskArgs = {\n  assigneeId: string;\n  content: string;\n  deadlineDate: string;\n  deadlineLang: string;\n  description: string;\n  dueLang: string;\n  dueString: string;\n  labels: string[];\n  order: number;\n  parentId: string;\n  priority: number;\n  projectId: string;\n  sectionId: string;\n } & RequireOneOrNone<{ \n  dueDate: string;\n  dueDatetime: string;\n }> & RequireAllOrNone<{ \n  duration: Duration[\"amount\"];\n  durationUnit: Duration[\"unit\"];\n}>;\n```\n\n----------------------------------------\n\nTITLE: Delete Project TypeScript\nDESCRIPTION: Deletes a project given its ID. Requires the project's `id` as a string. An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteProject(id: string, requestId?: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Get Projects TypeScript\nDESCRIPTION: Retrieves all projects, with optional filters applied using the `GetProjectsArgs` object.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ngetProjects(args: GetProjectsArgs): Promise<GetProjectsResponse>\n```\n\n----------------------------------------\n\nTITLE: Delete Task TypeScript\nDESCRIPTION: Deletes a task given its ID. Requires the task's `id` as a string. An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteTask(id: string, requestId?: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Define AddLabelArgs Type in TypeScript\nDESCRIPTION: Defines the `AddLabelArgs` type in TypeScript for specifying the arguments when creating a new label in the Todoist API. It includes optional properties like `color` (string or number), `isFavorite` (boolean), and `order` (number or null), along with the mandatory `name` (string). This type ensures type safety when making API requests to create labels.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/AddLabelArgs.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AddLabelArgs = {\n  color: string | number;\n  isFavorite: boolean;\n  name: string;\n  order: number | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Task by ID in TypeScript\nDESCRIPTION: This method retrieves a single active task from Todoist by its unique identifier. It returns a Promise that resolves to the requested Task object. The id parameter is the string representing the task's ID.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ngetTask(id: string): Promise<Task>\n```\n\n----------------------------------------\n\nTITLE: Get Project TypeScript\nDESCRIPTION: Retrieves a project by its ID. Requires the project's `id` as a string to identify the project to retrieve.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngetProject(id: string): Promise<\n  | PersonalProject\n| WorkspaceProject>\n```\n\n----------------------------------------\n\nTITLE: Moving Tasks in TypeScript\nDESCRIPTION: This method moves existing tasks to a different parent, section, or project by their IDs. The parameter 'ids' is an array of task IDs to be moved. The 'args' parameter should contain only one of projectId, sectionId, or parentId. An optional 'requestId' for idempotency is accepted. A promise resolving to the updated Task array is returned.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nmoveTasks(\n   ids: string[], \n   args: MoveTaskArgs, \nrequestId?: string): Promise<Task[]>\n```\n\n----------------------------------------\n\nTITLE: Add Section TypeScript\nDESCRIPTION: Adds a new section to a project. Requires an `AddSectionArgs` object containing the section's name and project ID. An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddSection(args: AddSectionArgs, requestId?: string): Promise<Section>\n```\n\n----------------------------------------\n\nTITLE: Reopening a Task in TypeScript\nDESCRIPTION: This method reopens a previously closed task in Todoist by its ID. It returns a Promise that resolves to a boolean indicating success. The id parameter is the string representing the task's ID. An optional 'requestId' for idempotency is accepted.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nreopenTask(id: string, requestId?: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Get Comments TypeScript\nDESCRIPTION: Retrieves all comments associated with a task or a project. It accepts either `GetTaskCommentsArgs` or `GetProjectCommentsArgs` as input, specifying either a task ID or project ID respectively.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetComments(args: \n  | GetTaskCommentsArgs\n| GetProjectCommentsArgs): Promise<GetCommentsResponse>\n```\n\n----------------------------------------\n\nTITLE: Get Labels TypeScript\nDESCRIPTION: Retrieves all labels. It accepts optional filter parameters through the `GetLabelsArgs` object.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngetLabels(args: GetLabelsArgs): Promise<GetLabelsResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining GetLabelsArgs Type for Todoist API (TypeScript)\nDESCRIPTION: This code snippet defines the `GetLabelsArgs` type in TypeScript, used for specifying arguments when retrieving labels from the Todoist API. It includes optional parameters for pagination: `cursor` (a string or null representing the pagination cursor) and `limit` (a number specifying the maximum number of labels to retrieve). These parameters control the response from the Todoist API when fetching labels.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetLabelsArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetLabelsArgs = {\n  cursor: string | null;\n  limit: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Get Project Collaborators TypeScript\nDESCRIPTION: Retrieves a list of collaborators for a specific project, identified by its `projectId`. Optional filters can be applied using the `GetProjectCollaboratorsArgs` object.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ngetProjectCollaborators(projectId: string, args: GetProjectCollaboratorsArgs): Promise<GetProjectCollaboratorsResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Sections in TypeScript\nDESCRIPTION: This method retrieves multiple sections based on provided filter arguments, such as the project ID. It returns a Promise that resolves to an array of Section objects. The args parameter is of type GetSectionsArgs, allowing filtering of the sections.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ngetSections(args: GetSectionsArgs): Promise<GetSectionsResponse>\n```\n\n----------------------------------------\n\nTITLE: Updating a Section in TypeScript\nDESCRIPTION: This method updates an existing section in Todoist by its ID with provided parameters. The parameters such as name or project ID are passed through UpdateSectionArgs. An optional 'requestId' for idempotency is accepted. It returns a Promise that resolves to the updated Section object.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nupdateSection(\n   id: string, \n   args: UpdateSectionArgs, \nrequestId?: string): Promise<Section>\n```\n\n----------------------------------------\n\nTITLE: Defining revokeAuthToken Function (TypeScript)\nDESCRIPTION: This code snippet defines the `revokeAuthToken` function signature. It accepts an arguments object of type `RevokeAuthTokenRequestArgs` and an optional base URL string, returning a Promise that resolves to a boolean indicating success.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/revokeAuthToken.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction revokeAuthToken(args: RevokeAuthTokenRequestArgs, baseUrl?: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Revoking Access Token Example (TypeScript)\nDESCRIPTION: This example demonstrates how to use the `revokeAuthToken` function. It provides a client ID, client secret, and access token as arguments to invalidate the specified token. Awaits the revocation promise.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/revokeAuthToken.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait revokeAuthToken({\n  clientId: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  accessToken: token\n})\n```\n\n----------------------------------------\n\nTITLE: Define UpdateTaskArgs Type in TypeScript\nDESCRIPTION: Defines the `UpdateTaskArgs` type, which represents the arguments required to update a task using the Todoist API. It includes optional properties for assigneeId, content, deadlineDate, deadlineLang, description, dueLang, dueString, labels, and priority. It also uses utility types `RequireOneOrNone` and `RequireAllOrNone` to enforce conditional requirements on dueDate/dueDatetime and duration/durationUnit respectively.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/UpdateTaskArgs.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype UpdateTaskArgs = {\n  assigneeId: string | null;\n  content: string;\n  deadlineDate: string | null;\n  deadlineLang: string | null;\n  description: string;\n  dueLang: string | null;\n  dueString: string;\n  labels: string[];\n  priority: number;\n } & RequireOneOrNone<{  \n  dueDate: string;\n  dueDatetime: string;\n }> & RequireAllOrNone<{  \n  duration: Duration[\"amount\"];\n  durationUnit: Duration[\"unit\"];\n}>;\n```\n\n----------------------------------------\n\nTITLE: Define GetTaskCommentsArgs Type TypeScript\nDESCRIPTION: This code defines the `GetTaskCommentsArgs` type using TypeScript.  It includes properties for pagination (cursor and limit) and to identify the related task (`taskId`).  `projectId` is set to `never` indicating that project-level comments are not retrieved using this specific type. The `cursor` allows for paginated retrieval of comments.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetTaskCommentsArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetTaskCommentsArgs = {\n  cursor: string | null;\n  limit: number;\n  projectId: never;\n  taskId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Add Label TypeScript\nDESCRIPTION: Adds a new label to the Todoist account. Requires an `AddLabelArgs` object specifying the label's name. An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddLabel(args: AddLabelArgs, requestId?: string): Promise<Label>\n```\n\n----------------------------------------\n\nTITLE: Define AddProjectArgs Type in TypeScript\nDESCRIPTION: Defines the `AddProjectArgs` type, specifying the structure for the arguments required when creating a new project using the Todoist API. The type includes properties like `color` (string or number), `isFavorite` (boolean), `name` (string), `parentId` (string), and `viewStyle` (ProjectViewStyle). This definition is used to ensure proper data structure when calling the API to create a project.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/AddProjectArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AddProjectArgs = {\n  color: string | number;\n  isFavorite: boolean;\n  name: string;\n  parentId: string;\n  viewStyle: ProjectViewStyle;\n};\n```\n\n----------------------------------------\n\nTITLE: Define GetCommentsArgs Type\nDESCRIPTION: This code defines the `GetCommentsArgs` type in TypeScript. It specifies the structure for passing arguments when retrieving comments from the Todoist API, including optional cursor and limit for pagination, and a required taskId. The projectId is explicitly set to never.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetCommentsArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetCommentsArgs = {\n  cursor: string | null;\n  limit: number;\n  projectId: never;\n  taskId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Todoist API TypeScript package\nDESCRIPTION: This command installs the Todoist API TypeScript package from npm.  It's a prerequisite for using the API client in a TypeScript project.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @doist/todoist-api-typescript\n```\n\n----------------------------------------\n\nTITLE: Define UpdateProjectArgs Type - TypeScript\nDESCRIPTION: Defines the `UpdateProjectArgs` type, which represents the arguments that can be used when updating a project in the Todoist API. The arguments include `color` (string), `isFavorite` (boolean), `name` (string), and `viewStyle` (ProjectViewStyle). All properties are optional.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/UpdateProjectArgs.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype UpdateProjectArgs = {\n  color: string;\n  isFavorite: boolean;\n  name: string;\n  viewStyle: ProjectViewStyle;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Section by ID in TypeScript\nDESCRIPTION: This method retrieves a single section from Todoist by its unique identifier. It returns a Promise that resolves to the requested Section object. The id parameter is the string representing the section's ID.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ngetSection(id: string): Promise<Section>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getAuthorizationUrl Function\nDESCRIPTION: This example demonstrates how to use the `getAuthorizationUrl` function.  It calls the function with a client ID, an array of permissions ('data:read', 'task:add'), and a state string, and then redirects the user to the returned URL. This snippet highlights the usage of the function and specifies parameters required for a correct URL generation.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getAuthorizationUrl.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst url = getAuthorizationUrl(\n  'your-client-id',\n  ['data:read', 'task:add'],\n  state\n)\n// Redirect user to url\n```\n\n----------------------------------------\n\nTITLE: Get Label TypeScript\nDESCRIPTION: Retrieves a label by its ID. Requires the label's `id` as a string to identify the label to retrieve.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ngetLabel(id: string): Promise<Label>\n```\n\n----------------------------------------\n\nTITLE: AddCommentArgs Type Definition in Typescript\nDESCRIPTION: Defines the structure of the AddCommentArgs type, which is used for creating comments in the Todoist API. It requires either a `projectId` or `taskId` and includes optional `attachment` and required `content` properties. The `attachment` property allows attaching a file with `fileName`, `fileType`, `fileUrl`, and `resourceType` properties.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/AddCommentArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AddCommentArgs = {\n  attachment:   | {\n     fileName: string;\n     fileType: string;\n     fileUrl: string;\n     resourceType: string;\n    }\n     | null;\n  content: string;\n } & RequireExactlyOne<{ \n  projectId: string;\n  taskId: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Updating a Comment in TypeScript\nDESCRIPTION: This method updates an existing comment in Todoist by its ID. It takes the comment's ID and UpdateCommentArgs as input. It returns a Promise that resolves to the updated Comment object. An optional 'requestId' for idempotency is accepted.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nupdateComment(\n   id: string, \n   args: UpdateCommentArgs, \nrequestId?: string): Promise<Comment>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCommentArgs Type\nDESCRIPTION: This snippet defines the `UpdateCommentArgs` type in TypeScript. It specifies that updating a comment requires a `content` property, which is a string representing the new content of the comment. This type is used as input when calling the Todoist API's update comment endpoint.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/UpdateCommentArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UpdateCommentArgs = {\n  content: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PersonalProjectSchema with Zod\nDESCRIPTION: This snippet defines the `PersonalProjectSchema` using Zod. It leverages `ZodObject` and `ZodEffects` to specify the structure, data types, and transformations for personal project data within the Todoist API. The schema includes fields such as `canAssignTasks`, `childOrder`, `color`, `createdAt`, `defaultOrder`, `description`, `id`, `isArchived`, `isCollapsed`, `isDeleted`, `isFavorite`, `isFrozen`, `isShared`, `name`, `updatedAt`, and `viewStyle`, along with optional fields `inboxProject` and `parentId`.  It adds an effect to include a URL based on the id.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/variables/PersonalProjectSchema.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst PersonalProjectSchema: ZodEffects<ZodObject<extendShape<{ \n  canAssignTasks: ZodBoolean;\n  childOrder: ZodNumber;\n  color: ZodString;\n  createdAt: ZodNullable<ZodString>;\n  defaultOrder: ZodNumber;\n  description: ZodString;\n  id: ZodString;\n  isArchived: ZodBoolean;\n  isCollapsed: ZodBoolean;\n  isDeleted: ZodBoolean;\n  isFavorite: ZodBoolean;\n  isFrozen: ZodBoolean;\n  isShared: ZodBoolean;\n  name: ZodString;\n  updatedAt: ZodNullable<ZodString>;\n  viewStyle: ZodString;\n }, { \n  inboxProject: ZodBoolean;\n  parentId: ZodNullable<ZodString>;\n }>, \"strip\", { \n  canAssignTasks: boolean;\n  childOrder: number;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  id: string;\n  inboxProject: boolean;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isShared: boolean;\n  name: string;\n  parentId: null | string;\n  updatedAt: null | string;\n  viewStyle: string;\n }, { \n  canAssignTasks: boolean;\n  childOrder: number;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  id: string;\n  inboxProject: boolean;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isShared: boolean;\n  name: string;\n  parentId: null | string;\n  updatedAt: null | string;\n  viewStyle: string;\n }>, { \n  canAssignTasks: boolean;\n  childOrder: number;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  id: string;\n  inboxProject: boolean;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isShared: boolean;\n  name: string;\n  parentId: null | string;\n  updatedAt: null | string;\n  url: string;\n  viewStyle: string;\n }, { \n  canAssignTasks: boolean;\n  childOrder: number;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  id: string;\n  inboxProject: boolean;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isShared: boolean;\n  name: string;\n  parentId: null | string;\n  updatedAt: null | string;\n  viewStyle: string;\n }>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tasks by Filter in TypeScript\nDESCRIPTION: This method retrieves tasks from Todoist using a filter string to specify search criteria. The args parameter is of type GetTasksByFilterArgs. A Promise that resolves to a paginated response of tasks is returned.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ngetTasksByFilter(args: GetTasksByFilterArgs): Promise<GetTasksResponse>\n```\n\n----------------------------------------\n\nTITLE: Define MoveTaskArgs Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `MoveTaskArgs` type. It uses `RequireExactlyOne` to ensure that only one of the properties (`parentId`, `projectId`, or `sectionId`) is provided when moving a task. This enforces the Todoist API requirement of specifying a single destination for the task.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/MoveTaskArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MoveTaskArgs = RequireExactlyOne<{ \n  parentId: string; \n  projectId: string; \n  sectionId: string; \n}>;\n```\n\n----------------------------------------\n\nTITLE: Defining AuthTokenRequestArgs Type in TypeScript\nDESCRIPTION: This code snippet defines the `AuthTokenRequestArgs` type in TypeScript. This type is used to specify the arguments required when requesting an authentication token from Todoist's API, including the client ID, client secret, and authorization code.  It's used within the OAuth flow to obtain access tokens.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/AuthTokenRequestArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AuthTokenRequestArgs = {\n  clientId: string;\n  clientSecret: string;\n  code: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Define GetTasksArgs Type (TypeScript)\nDESCRIPTION: This code defines the `GetTasksArgs` type, which is used to specify the arguments for retrieving tasks from the Todoist API. The type includes optional properties for filtering and pagination, such as `cursor`, `ids`, `label`, `limit`, `parentId`, `projectId`, and `sectionId`.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetTasksArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetTasksArgs = {\n  cursor: string | null;\n  ids: string[];\n  label: string;\n  limit: number;\n  parentId: string;\n  projectId: string;\n  sectionId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Define GetProjectCollaboratorsResponse Type - TypeScript\nDESCRIPTION: Defines the `GetProjectCollaboratorsResponse` type, which represents the structure of the response returned by the Todoist API when retrieving project collaborators. It includes a `nextCursor` field for pagination and a `results` field containing an array of `User` objects. This type is used to represent the data returned from the `get_project_collaborators_api_v1_projects__project_id__collaborators_get` endpoint.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetProjectCollaboratorsResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetProjectCollaboratorsResponse = {\n  nextCursor: string | null;\n  results: User[];\n};\n```\n\n----------------------------------------\n\nTITLE: getColorByKey() Usage Example - TypeScript\nDESCRIPTION: Demonstrates how to use the `getColorByKey` function to retrieve a `Color` object using a specific color key ('berry_red'). It then logs the hex value of the retrieved color to the console.  The Color interface is expected to have a hexValue property.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getColorByKey.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst color = getColorByKey('berry_red');\nconsole.log(color.hexValue); // '#b8255f'\n```\n\n----------------------------------------\n\nTITLE: Define GetSectionsArgs Type in TypeScript\nDESCRIPTION: Defines the `GetSectionsArgs` type, which specifies the arguments used to retrieve sections from the Todoist API.  It includes `cursor` for pagination, `limit` to control the number of results, and `projectId` to specify the project.  The `cursor` and `limit` parameters are optional.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetSectionsArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetSectionsArgs = {\n  cursor: string | null;\n  limit: number;\n  projectId: string | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining QuickAddTaskArgs Type in TypeScript\nDESCRIPTION: Defines the `QuickAddTaskArgs` type in TypeScript, specifying the structure for quick add task arguments for the Todoist API. It includes optional boolean properties `autoReminder` and `meta`, and string properties `note`, `reminder`, and `text`. The `text` property is required, while the others are optional.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/QuickAddTaskArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype QuickAddTaskArgs = {\n  autoReminder: boolean;\n  meta: boolean;\n  note: string;\n  reminder: string;\n  text: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Define GetProjectCommentsArgs Type in TypeScript\nDESCRIPTION: Defines the `GetProjectCommentsArgs` type, which represents the arguments required for fetching comments related to a specific project from the Todoist API. It includes properties for pagination (`cursor` and `limit`) and identification of the project (`projectId`). The `taskId` property is set to `never` to ensure that this type is only used for project comments and not task comments. The cursor is used for pagination, limit specifies the max number of results, and projectId specifies which project's comments to retrieve.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetProjectCommentsArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetProjectCommentsArgs = {\n  cursor: string | null;\n  limit: number;\n  projectId: string;\n  taskId: never;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shared Labels in TypeScript\nDESCRIPTION: This method retrieves a list of shared labels from Todoist. It returns a Promise that resolves to an array of shared label objects. An optional argument can be passed to filter the returned labels.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ngetSharedLabels(args?: GetSharedLabelsArgs): Promise<GetSharedLabelsResponse>\n```\n\n----------------------------------------\n\nTITLE: Delete Section TypeScript\nDESCRIPTION: Deletes a section given its ID.  Requires the section's `id` as a string.  An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteSection(id: string, requestId?: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Define GetProjectsArgs Type in TypeScript\nDESCRIPTION: This code snippet defines the `GetProjectsArgs` type in TypeScript. It includes optional `cursor` (string or null) for pagination and `limit` (number) for controlling the number of projects returned. It is used as the argument type when calling the Todoist API's `get_projects` endpoint.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetProjectsArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetProjectsArgs = {\n  cursor: string | null;\n  limit: number;\n};\n```\n\n----------------------------------------\n\nTITLE: getColorByKey() Function Signature - TypeScript\nDESCRIPTION: Defines the function signature for `getColorByKey`, which takes a string representing the color key and returns a `Color` object. This allows for retrieving color information based on a predefined key.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getColorByKey.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getColorByKey(colorKey: string): Color\n```\n\n----------------------------------------\n\nTITLE: Define GetTasksByFilterArgs Type in TypeScript\nDESCRIPTION: Defines a TypeScript type `GetTasksByFilterArgs` which represents the arguments needed to retrieve tasks based on a filter. It includes optional `cursor` for pagination, optional `lang` for language specification, `limit` for controlling the number of results, and `query` for the filter string.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetTasksByFilterArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetTasksByFilterArgs = {\n  cursor: string | null;\n  lang: string;\n  limit: number;\n  query: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Delete Label TypeScript\nDESCRIPTION: Deletes a label given its ID. Requires the label's `id` as a string. An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteLabel(id: string, requestId?: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Define GetProjectCollaboratorsArgs Type TypeScript\nDESCRIPTION: Defines the `GetProjectCollaboratorsArgs` type with optional `cursor` and `limit` properties. The `cursor` is a string or null used for pagination. The `limit` is a number to specify the maximum number of collaborators to retrieve.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetProjectCollaboratorsArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetProjectCollaboratorsArgs = {\n  cursor: string | null;\n  limit: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Delete Comment TypeScript\nDESCRIPTION: Deletes a comment given its ID.  Requires the comment's `id` as a string. An optional `requestId` parameter allows for idempotent requests.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteComment(id: string, requestId?: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Define AddSectionArgs Type in TypeScript\nDESCRIPTION: Defines the `AddSectionArgs` type, specifying the structure for arguments when creating a new section in Todoist. It includes properties for the section's name (string), order (number or null), and projectId (string). This type is used to ensure type safety when interacting with the Todoist API's create section endpoint.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/AddSectionArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AddSectionArgs = {\n  name: string;\n  order: number | null;\n  projectId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Get Comment TypeScript\nDESCRIPTION: Retrieves a specific comment by its ID. Requires the comment's `id` as a string to identify the comment to retrieve.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ngetComment(id: string): Promise<Comment>\n```\n\n----------------------------------------\n\nTITLE: Define UpdateLabelArgs Type in TypeScript\nDESCRIPTION: Defines a TypeScript type `UpdateLabelArgs` for structuring the arguments needed to update a label in the Todoist API. The properties include `color` (string), `isFavorite` (boolean), `name` (string), and `order` (number or null). These arguments are used when making a POST request to update a specific label identified by its ID, according to the Todoist API documentation.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/UpdateLabelArgs.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype UpdateLabelArgs = {\n  color: string;\n  isFavorite: boolean;\n  name: string;\n  order: number | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateSectionArgs Type in TypeScript\nDESCRIPTION: This code defines the `UpdateSectionArgs` type, which is used as the argument when updating a section in the Todoist API. It contains a `name` property of type string, representing the new name of the section.  The API endpoint documentation URL is provided as a reference.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/UpdateSectionArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UpdateSectionArgs = {\n  name: string;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Define RemoveSharedLabelArgs Type\nDESCRIPTION: Defines the `RemoveSharedLabelArgs` type alias in TypeScript. This type specifies the arguments required to remove a shared label via the Todoist API, namely the `name` of the label to remove. The `name` property is of type string.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/RemoveSharedLabelArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RemoveSharedLabelArgs = {\n  name: string;\n};\n```\n\n----------------------------------------\n\nTITLE: getSanitizedContent Example: Bold/Italic Removal TypeScript\nDESCRIPTION: Demonstrates how `getSanitizedContent` removes bold and italic formatting from a string. It takes a string with markdown-style bold and italic markers as input and returns a string without those markers.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getSanitizedContent.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Removes bold/italic formatting\ngetSanitizedContent('Some **bold** and *italic*') // 'Some bold and italic'\n```\n\n----------------------------------------\n\nTITLE: Defining RenameSharedLabelArgs Type in Typescript\nDESCRIPTION: This code snippet defines the `RenameSharedLabelArgs` type, which specifies the structure for renaming a shared label. It includes the original `name` and the `newName` for the label. This type is used when calling the Todoist API's shared label renaming endpoint.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/RenameSharedLabelArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RenameSharedLabelArgs = {\n  name: string;\n  newName: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Define TaskWithSanitizedContent Type in TypeScript\nDESCRIPTION: Declares a TypeScript type named `TaskWithSanitizedContent`. This type is an intersection of the `Task` type and an object type that defines a `sanitizedContent` property of type `string`. This indicates that any object conforming to this type will have all the properties of a `Task` as well as a `sanitizedContent` string property.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/TaskWithSanitizedContent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TaskWithSanitizedContent = Task & {\n  sanitizedContent: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Define GetSharedLabelsArgs type in TypeScript\nDESCRIPTION: Defines the `GetSharedLabelsArgs` type for specifying parameters when retrieving shared labels. It includes optional `cursor` for pagination, `limit` to restrict the number of results, and `omitPersonal` to exclude personal labels. This type is used to structure the arguments passed to the shared labels endpoint.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetSharedLabelsArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetSharedLabelsArgs = {\n  cursor: string | null;\n  limit: number;\n  omitPersonal: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Base Project Schema with Zod in Typescript\nDESCRIPTION: Defines the `BaseProjectSchema` using Zod to validate the structure and types of a Todoist project. It uses `ZodObject` to define the schema with properties such as `canAssignTasks`, `childOrder`, `color`, `createdAt`, `defaultOrder`, `description`, `id`, `isArchived`, `isCollapsed`, `isDeleted`, `isFavorite`, `isFrozen`, `isShared`, `name`, `updatedAt`, and `viewStyle`, each with their corresponding Zod type validators. `ZodNullable` is used for fields that can be null.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/variables/BaseProjectSchema.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst BaseProjectSchema: ZodObject<{  \n  canAssignTasks: ZodBoolean;\n  childOrder: ZodNumber;\n  color: ZodString;\n  createdAt: ZodNullable<ZodString>;\n  defaultOrder: ZodNumber;\n  description: ZodString;\n  id: ZodString;\n  isArchived: ZodBoolean;\n  isCollapsed: ZodBoolean;\n  isDeleted: ZodBoolean;\n  isFavorite: ZodBoolean;\n  isFrozen: ZodBoolean;\n  isShared: ZodBoolean;\n  name: ZodString;\n  updatedAt: ZodNullable<ZodString>;\n  viewStyle: ZodString;\n }, \"strip\", {\n  canAssignTasks: boolean;\n  childOrder: number;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  id: string;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isShared: boolean;\n  name: string;\n  updatedAt: null | string;\n  viewStyle: string;\n }, {\n  canAssignTasks: boolean;\n  childOrder: number;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  id: string;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isShared: boolean;\n  name: string;\n  updatedAt: null | string;\n  viewStyle: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getSanitizedTasks TypeScript\nDESCRIPTION: Illustrates how to use the `getSanitizedTasks` function with a sample array of `Task` objects. The example shows how the `sanitizedContent` property is added to each task in the resulting array. This showcases the input and output of the function, clarifying its intended use.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getSanitizedTasks.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = [{ content: '**Bold** task', ... }]\ngetSanitizedTasks(tasks) // [{ content: '**Bold** task', sanitizedContent: 'Bold task', ... }]\n```\n\n----------------------------------------\n\nTITLE: Define GetProjectsResponse Type in Typescript\nDESCRIPTION: This code defines the `GetProjectsResponse` type in TypeScript. It specifies that the response contains a `nextCursor` (string or null) for pagination and a `results` array containing either `PersonalProject` or `WorkspaceProject` objects, defining the structure for the API response when fetching projects.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetProjectsResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetProjectsResponse = {\n  nextCursor: string | null;\n  results: (\n     | PersonalProject\n     | WorkspaceProject)[];\n};\n```\n\n----------------------------------------\n\nTITLE: getSanitizedContent Example: Markdown Link Removal TypeScript\nDESCRIPTION: Shows how `getSanitizedContent` removes markdown links from a string. It takes a string containing a markdown link and returns a string without the link.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getSanitizedContent.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Removes markdown links\ngetSanitizedContent('A [markdown](http://url.com) link') // 'A markdown link'\n```\n\n----------------------------------------\n\nTITLE: getSanitizedContent Example: App-Specific Link Removal TypeScript\nDESCRIPTION: Illustrates how `getSanitizedContent` removes app-specific links from a string. It takes a string containing a custom link format (e.g., from Gmail) and returns a string without the specific link.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getSanitizedContent.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Removes app-specific links\ngetSanitizedContent('A [[gmail=id, link from gmail]]') // 'A link from gmail'\n```\n\n----------------------------------------\n\nTITLE: getSanitizedContent Function Definition TypeScript\nDESCRIPTION: Defines the `getSanitizedContent` function, which takes a string as input and returns a sanitized string with Todoist's formatting syntax removed. This includes removing bold, italic, code blocks, and links.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getSanitizedContent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSanitizedContent(input: string): string\n```\n\n----------------------------------------\n\nTITLE: Removing a Shared Label in TypeScript\nDESCRIPTION: This method removes a shared label in Todoist. It takes RemoveSharedLabelArgs as input and returns a Promise that resolves to a boolean indicating success.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nremoveSharedLabel(args: RemoveSharedLabelArgs): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Sanitize Tasks Function Signature TypeScript\nDESCRIPTION: Defines the function signature for `getSanitizedTasks`. It takes an array of `Task` objects as input and returns an array of `TaskWithSanitizedContent` objects. This signature specifies the expected input and output types of the function, ensuring type safety and clarity in the code.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/functions/getSanitizedTasks.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSanitizedTasks(tasks: Task[]): TaskWithSanitizedContent[]\n```\n\n----------------------------------------\n\nTITLE: Renaming a Shared Label in TypeScript\nDESCRIPTION: This method renames an existing shared label in Todoist. It takes RenameSharedLabelArgs as input and returns a Promise that resolves to a boolean indicating success.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nrenameSharedLabel(args: RenameSharedLabelArgs): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Updating a Label in TypeScript\nDESCRIPTION: This method updates an existing label in Todoist by its ID. It takes the label's ID and UpdateLabelArgs as input. It returns a Promise that resolves to the updated Label object. An optional 'requestId' for idempotency is accepted.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistApi.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nupdateLabel(\n   id: string, \n   args: UpdateLabelArgs, \nrequestId?: string): Promise<Label>\n```\n\n----------------------------------------\n\nTITLE: Authentication Error Check - Typescript\nDESCRIPTION: This method, `isAuthenticationError`, checks if the error is an authentication error. It returns a boolean value indicating whether the error is related to authentication. The specific implementation details are not provided, but the method likely checks the HTTP status code or response data to determine if the error is due to authentication failure.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistRequestError.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisAuthenticationError(): boolean\n```\n\n----------------------------------------\n\nTITLE: Define ProjectViewStyle Type in TypeScript\nDESCRIPTION: Defines the `ProjectViewStyle` type as a string literal type in TypeScript. This type constrains the possible values to 'list', 'board', or 'calendar', representing the different view styles available for a project in Todoist. No external dependencies are required.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/ProjectViewStyle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ProjectViewStyle = \"list\" | \"board\" | \"calendar\";\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: Installs the project dependencies using Yarn package manager. This is a prerequisite for local development, building, and deployment.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Define GetSharedLabelsResponse Type in TypeScript\nDESCRIPTION: This code snippet defines the `GetSharedLabelsResponse` type in TypeScript. It specifies the structure of the response received when retrieving shared labels from the Todoist API. The `nextCursor` property is used for pagination, and the `results` property is an array of strings representing the IDs of the shared labels.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetSharedLabelsResponse.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype GetSharedLabelsResponse = {\n  nextCursor: string | null;\n  results: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Build Static Content\nDESCRIPTION: Builds the static website content into the `build` directory using Yarn. This command prepares the website for deployment.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Define AuthTokenResponse Type in TypeScript\nDESCRIPTION: Defines the `AuthTokenResponse` type in TypeScript. This type is used to represent the response from a successful OAuth2 token exchange. It includes two properties: `accessToken` which is the access token string and `tokenType` which represents the type of token, also a string.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/AuthTokenResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AuthTokenResponse = {\n  accessToken: string;\n  tokenType: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Deploy Website Using SSH\nDESCRIPTION: Deploys the website using SSH for secure remote access. This method is suitable when SSH access to the deployment server is available.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUSE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Defining GetCommentsResponse Type in TypeScript\nDESCRIPTION: Defines the `GetCommentsResponse` type, representing the structure of the response when retrieving comments from the Todoist API.  It contains a `nextCursor` string for pagination and a `results` array of `Comment` objects. It utilizes a custom Comment interface, which is expected to be defined in a separate module.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetCommentsResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetCommentsResponse = {\n  nextCursor: string | null;\n  results: Comment[];\n};\n```\n\n----------------------------------------\n\nTITLE: Capture Stack Trace Method - Typescript\nDESCRIPTION: This static method, `captureStackTrace`, is inherited from the `CustomError` class. It creates the `.stack` property on a target object. It takes the target object and an optional constructor function as parameters. This is useful for debugging and error tracking by providing a stack trace of the error.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistRequestError.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic captureStackTrace(targetObject: object, constructorOpt?: Function): void\n```\n\n----------------------------------------\n\nTITLE: Define GetLabelsResponse Type - Typescript\nDESCRIPTION: Defines the GetLabelsResponse type, which represents the structure of the response when fetching labels from the Todoist API. It includes a 'nextCursor' property for pagination and a 'results' property, which is an array of Label objects. This type is used to parse the JSON response from the API.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetLabelsResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetLabelsResponse = {\n  nextCursor: string | null;\n  results: Label[];\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version (Shell)\nDESCRIPTION: This command updates the version number in package.json and package-lock.json without creating a git tag.  This prepares the package for a new release.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm version <major|minor|patch> --no-git-tag-version\n```\n\n----------------------------------------\n\nTITLE: Defining GetSectionsResponse Type - TypeScript\nDESCRIPTION: Defines the `GetSectionsResponse` type, which represents the structure of the response received when retrieving sections from the Todoist API. It includes `nextCursor` for pagination and `results` which is an array of `Section` objects. The `Section` type is assumed to be defined elsewhere (likely in a separate file, as indicated by the `../interfaces/Section.md` reference).\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetSectionsResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetSectionsResponse = {\n  nextCursor: string | null;\n  results: Section[];\n};\n```\n\n----------------------------------------\n\nTITLE: Define GetTasksResponse Type\nDESCRIPTION: Defines a TypeScript type `GetTasksResponse` which represents the response structure for a get tasks API call. It contains a `nextCursor` property of type string or null, used for pagination, and a `results` property which is an array of `Task` objects.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/GetTasksResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetTasksResponse = {\n  nextCursor: string | null;\n  results: Task[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RevokeAuthTokenRequestArgs Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `RevokeAuthTokenRequestArgs` type, which specifies the structure for the arguments needed to revoke an OAuth access token from the Todoist API. It includes the `accessToken` (the token to revoke), `clientId`, and `clientSecret` which are necessary for authorization.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/RevokeAuthTokenRequestArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RevokeAuthTokenRequestArgs = {\n  accessToken: string;\n  clientId: string;\n  clientSecret: string;\n};\n```\n\n----------------------------------------\n\nTITLE: TodoistRequestError Constructor Definition - Typescript\nDESCRIPTION: Defines the constructor for the `TodoistRequestError` class, which extends the `CustomError` class. It takes a message (string), an optional HTTP status code (number), and optional response data (unknown) as parameters. These parameters are used to initialize the properties of the error object, providing detailed information about the error that occurred during a Todoist API request.  It overrides the constructor of the `CustomError` class.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/classes/TodoistRequestError.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew TodoistRequestError(\n   message: string, \n   httpStatusCode?: number, \n   responseData?: unknown): TodoistRequestError\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Project Schema with Zod in TypeScript\nDESCRIPTION: This code defines a Zod schema named `WorkspaceProjectSchema` for validating and typing workspace project data in the Todoist API. It uses `ZodObject` and `ZodEffects` from the Zod library to define the shape and transformations of the project data. The schema includes various properties like `id`, `name`, `description`, and boolean flags indicating the project's status and sharing configurations. It also adds a 'url' field to the output schema.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/variables/WorkspaceProjectSchema.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst WorkspaceProjectSchema: ZodEffects<ZodObject<extendShape<{ \n  canAssignTasks: ZodBoolean;\n  childOrder: ZodNumber;\n  color: ZodString;\n  createdAt: ZodNullable<ZodString>;\n  defaultOrder: ZodNumber;\n  description: ZodString;\n  id: ZodString;\n  isArchived: ZodBoolean;\n  isCollapsed: ZodBoolean;\n  isDeleted: ZodBoolean;\n  isFavorite: ZodBoolean;\n  isFrozen: ZodBoolean;\n  isShared: ZodBoolean;\n  name: ZodString;\n  updatedAt: ZodNullable<ZodString>;\n  viewStyle: ZodString;\n }, { \n  collaboratorRoleDefault: ZodString;\n  folderId: ZodNullable<ZodBoolean>;\n  isInviteOnly: ZodNullable<ZodBoolean>;\n  isLinkSharingEnabled: ZodBoolean;\n  role: ZodNullable<ZodString>;\n  status: ZodString;\n  workspaceId: ZodString;\n }>, \"strip\", { \n  canAssignTasks: boolean;\n  childOrder: number;\n  collaboratorRoleDefault: string;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  folderId: null | boolean;\n  id: string;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isInviteOnly: null | boolean;\n  isLinkSharingEnabled: boolean;\n  isShared: boolean;\n  name: string;\n  role: null | string;\n  status: string;\n  updatedAt: null | string;\n  viewStyle: string;\n  workspaceId: string;\n }, { \n  canAssignTasks: boolean;\n  childOrder: number;\n  collaboratorRoleDefault: string;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  folderId: null | boolean;\n  id: string;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isInviteOnly: null | boolean;\n  isLinkSharingEnabled: boolean;\n  isShared: boolean;\n  name: string;\n  role: null | string;\n  status: string;\n  updatedAt: null | string;\n  viewStyle: string;\n  workspaceId: string;\n }>, { \n  canAssignTasks: boolean;\n  childOrder: number;\n  collaboratorRoleDefault: string;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  folderId: null | boolean;\n  id: string;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isInviteOnly: null | boolean;\n  isLinkSharingEnabled: boolean;\n  isShared: boolean;\n  name: string;\n  role: null | string;\n  status: string;\n  updatedAt: null | string;\n  url: string;\n  viewStyle: string;\n  workspaceId: string;\n }, { \n  canAssignTasks: boolean;\n  childOrder: number;\n  collaboratorRoleDefault: string;\n  color: string;\n  createdAt: null | string;\n  defaultOrder: number;\n  description: string;\n  folderId: null | boolean;\n  id: string;\n  isArchived: boolean;\n  isCollapsed: boolean;\n  isDeleted: boolean;\n  isFavorite: boolean;\n  isFrozen: boolean;\n  isInviteOnly: null | boolean;\n  isLinkSharingEnabled: boolean;\n  isShared: boolean;\n  name: string;\n  role: null | string;\n  status: string;\n  updatedAt: null | string;\n  viewStyle: string;\n  workspaceId: string;\n }>;\n```\n\n----------------------------------------\n\nTITLE: Installing Todoist API TypeScript package\nDESCRIPTION: This command installs the @doist/todoist-api-typescript package from npm.  It's a prerequisite for using the Todoist API client in your TypeScript project.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/about.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @doist/todoist-api-typescript\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server\nDESCRIPTION: Starts a local development server using Yarn. This allows developers to preview changes in real-time without needing to rebuild the project.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Deploy Website without SSH\nDESCRIPTION: Deploys the website without using SSH, typically using GitHub Pages. This requires setting the `GIT_USER` environment variable to your GitHub username.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Defining Todoist API Permission Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type `Permission` representing the valid permission scopes that can be requested during OAuth2 authorization with the Todoist API. The type is a union of string literals, each representing a different permission such as adding tasks, reading data, read/write access, deleting data, and deleting projects.  These permissions control the level of access granted to an application interacting with the Todoist API.\nSOURCE: https://github.com/doist/todoist-api-typescript/blob/main/website/docs/api/type-aliases/Permission.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Permission =\n  | \"task:add\"\n  | \"data:read\"\n  | \"data:read_write\"\n  | \"data:delete\"\n  | \"project:delete\";\n```"
  }
]