[
  {
    "owner": "ax-llm",
    "repo": "ax",
    "content": "TITLE: Automated Chunking, Embedding, and Querying with AxDBManager (TypeScript)\nDESCRIPTION: Shows how to use AxDBManager to automate text chunking, embedding, insertion, and querying of unstructured text. AxDBManager abstracts away the underlying embedding and vector DB details. Requires instances of \"ai\", a vector DB object, and the AxDBManager class. Accepts raw text to insert or query; returns similar matches from the DB. Simplifies the RAG pipeline and reduces manual handling.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/05-rag.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager = new AxDBManager({ ai, db });\nawait manager.insert(text);\n\nconst matches = await manager.query(\n  'John von Neumann on human intelligence and singularity.'\n);\nconsole.log(matches);\n```\n\n----------------------------------------\n\nTITLE: Executing a Prompt Program with `forward` (TypeScript)\nDESCRIPTION: Demonstrates how to execute a previously defined prompt program (e.g., the `cot` instance) using its asynchronous `forward` method. An object containing the input fields specified in the signature (`question`) must be passed to initiate the LLM interaction.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// Pass in the input fields defined in the above signature\nconst res = await cot.forward({ question: 'Are we in a simulation?' });\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG with Document Conversion using Ax in Typescript\nDESCRIPTION: Shows how to implement Retrieval-Augmented Generation (RAG) using Ax. It utilizes `AxApacheTika` to convert a document (e.g., a PDF) into text by connecting to a running Tika server. Then, it uses `AxDBManager` to insert the extracted text (implicitly handling chunking and embedding) into a vector database and subsequently query it.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst tika = new AxApacheTika();\nconst text = await tika.convert('/path/to/document.pdf');\n\nconst manager = new AxDBManager({ ai, db });\nawait manager.insert(text);\n\nconst matches = await manager.query('Find some text');\nconsole.log(matches);\n```\n\n----------------------------------------\n\nTITLE: Configuring AI and Agent Providers - Vercel AI SDK - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the step-by-step integration of Ax with the Vercel AI SDK, including initialization of the AI provider, creation of a model, definition of a restaurant-search agent, management of agent state, and integration into a chat UI via streamUI. Dependencies include @ax-llm/ax-ai-sdk-provider, environment-specific API keys, and React elements for UI rendering. The main parameters are API keys, agent configurations, and message streams; expected outputs are dynamic UI components and stateful AI-powered chat interactions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/10-vercel-ai-sdk.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n    name: 'openai',\n    apiKey: process.env['OPENAI_APIKEY'] ?? \"\",\n});\n\n// Create a model using the provider\nconst model = new AxAIProvider(ai);\n\nexport const foodAgent = new AxAgent({\n  name: 'food-search',\n  description:\n    'Use this agent to find restaurants based on what the customer wants',\n  signature,\n  functions\n})\n\n// Get vercel ai sdk state\nconst aiState = getMutableAIState()\n\n// Create an agent for a specific task\nconst foodAgent = new AxAgentProvider(ai, {\n    agent: foodAgent,\n    updateState: (state) => {\n         aiState.done({ ...aiState.get(), state })\n    },\n    generate: async ({ restaurant, priceRange }) => {\n        return (\n            <BotCard>\n                <h1>{restaurant as string} {priceRange as string}</h1>\n            </BotCard>\n        )\n    }\n})\n\n// Use with streamUI a critical part of building chat UIs in the AI SDK\nconst result = await streamUI({\n    model,\n    initial: <SpinnerMessage />,\n    messages: [\n        // ...\n    ],\n    text: ({ content, done, delta }) => {\n        // ...\n    },\n    tools: {\n        // @ts-ignore\n        'find-food': foodAgent,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIService Interface - TypeScript\nDESCRIPTION: Defines the AxAIService interface, which specifies a strongly typed contract for AI operations including chat, embedding, and model management within the Ax project. Methods utilize generics (TModel, TEmbedModel) for model flexibility, use Readonly types to enforce immutability, and return either Promises or direct values, supporting both synchronous and asynchronous operation patterns. Key parameters include requests and options for chat/embedding, and this interface requires related types such as AxChatRequest, AxEmbedRequest, and AxAIServiceOptions to be available; outputs are usually typed responses or configuration data, and some methods may return undefined or streams depending on implementation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIService.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AxAIService<\n  TModel = unknown,\n  TEmbedModel = unknown\n> {\n  chat(\n    req: Readonly<AxChatRequest<TModel>>,\n    options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<TModel, TEmbedModel>>\n  ): Promise<AxChatResponse> | ReadableStream<AxChatResponse>;\n\n  embed(\n    req: Readonly<AxEmbedRequest<TEmbedModel>>,\n    options?: Readonly<AxAIServiceActionOptions<TModel, TEmbedModel>>\n  ): Promise<AxEmbedResponse>;\n\n  getId(): string;\n  getName(): string;\n  getFeatures(model?: TModel): AxAIFeatures;\n  getModelList(): undefined | AxAIModelList;\n  getDefaultModels(): Readonly<{ embedModel: string; model: string }>;\n  getMetrics(): AxAIServiceMetrics;\n  setOptions(options: Readonly<AxAIServiceOptions>): void;\n  getOptions(): Readonly<AxAIServiceOptions>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using AxMultiServiceRouter in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates setting up multiple AI services (OpenAI, Google Gemini, Ollama) using `AxAI` instances, each configured with specific models and keys. It then initializes an `AxMultiServiceRouter` with these services (including one defined as a plain object) and shows how to route a chat request to a specific model ('expert') using the router's `chat` method. It also illustrates integrating the router with `AxGen` for generative tasks. Requires the `@ax-llm/ax` library and API keys set in environment variables (e.g., `OPENAI_APIKEY`, `GOOGLE_APIKEY`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/07-routing.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AxAI, AxMultiServiceRouter, AxAIOpenAIModel } from '@ax-llm/ax'\n\n/// Setup OpenAI with model list\nconst openai = new AxAI({ \n  name: 'openai', \n  apiKey: process.env.OPENAI_APIKEY,\n  models: [\n    {\n      key: 'basic',\n      model: AxAIOpenAIModel.GPT4OMini,\n      description: 'Model for very simple tasks such as answering quick short questions',\n    },\n    {\n      key: 'medium',\n      model: AxAIOpenAIModel.GPT4O,\n      description: 'Model for semi-complex tasks such as summarizing text, writing code, and more',\n    }\n  ]\n})\n\n// Setup Gemini with model list\nconst gemini = new AxAI({ \n  name: 'google-gemini', \n  apiKey: process.env.GOOGLE_APIKEY,\n  models: [\n    {\n      key: 'deep-thinker',\n      model: 'gemini-2.0-flash-thinking',\n      description: 'Model that can think deeply about a task, best for tasks that require planning',\n    },\n    {\n      key: 'expert',\n      model: 'gemini-2.0-pro',\n      description: 'Model that is the best for very complex tasks such as writing large essays, complex coding, and more',\n    }\n  ]\n})\n\nconst ollama = new AxAI({ \n  name: 'ollama', \n  config: { model: \"nous-hermes2\" }\n})\n\nconst secretService = {\n    key: 'sensitive-secret',\n    service: ollama,\n    description: 'Model for sensitive secrets tasks'\n}\n\n// Create a router with all services\nconst router = new AxMultiServiceRouter([openai, gemini, secretService])\n\n// Route to OpenAI's expert model\nconst openaiResponse = await router.chat({\n  chatPrompt: [{ role: 'user', content: 'Hello!' }],\n  model: 'expert'\n})\n\n// Or use the router with AxGen\nconst gen = new AxGen(`question -> answer`)\nconst res = await gen.forward(router, { question: 'Hello!' })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bootstrap Few Shot Optimizer - Ax DSPy TypeScript\nDESCRIPTION: Shows how to instantiate a bootstrapped few-shot optimizer using AxBootstrapFewShot for automatic prompt tuning with provided examples. The optimizer requires a prompt signature and a set of aligned examples. Type parameters ensure correctness of input and output structures for optimal LLM adaptation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Setup a Bootstrap Few Shot optimizer to tune the above prompt\nconst optimize = new AxBootstrapFewShot<\n  { question: string },\n  { answer: string }\n>({\n  prompt,\n  examples\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AxMiPRO Optimization Levels in TypeScript\nDESCRIPTION: This snippet demonstrates how to control the intensity and thoroughness of the `AxMiPRO` optimization process using the `auto` parameter within the `compile` method's options. It shows examples for setting the level to 'light' (faster, less thorough), 'medium' (balanced), and 'heavy' (slower, more thorough).\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Light optimization (faster, less thorough)\nconst optimizedProgram = await optimizer.compile(metricFn, { auto: 'light' })\n\n// Medium optimization (balanced)\nconst optimizedProgram = await optimizer.compile(metricFn, { auto: 'medium' })\n\n// Heavy optimization (slower, more thorough)\nconst optimizedProgram = await optimizer.compile(metricFn, { auto: 'heavy' })\n```\n\n----------------------------------------\n\nTITLE: Configuring MiPRO v2 Optimization Levels in TypeScript\nDESCRIPTION: This snippet shows how to control the intensity and thoroughness of the MiPRO v2 optimization process using the `auto` parameter within the `compile` method options. It demonstrates setting the optimization level to 'light' (faster, less thorough), 'medium' (balanced), or 'heavy' (slower, more thorough) based on requirements.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/12-tuning-mipro.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Light optimization (faster, less thorough)\nconst optimizedProgram = await optimizer.compile(metricFn, { auto: 'light' })\n\n// Medium optimization (balanced)\nconst optimizedProgram = await optimizer.compile(metricFn, { auto: 'medium' })\n\n// Heavy optimization (slower, more thorough)\nconst optimizedProgram = await optimizer.compile(metricFn, { auto: 'heavy' })\n```\n\n----------------------------------------\n\nTITLE: Prompt Signature: Multi-modal Q&A with Image Input - Plaintext\nDESCRIPTION: Creates a multi-modal prompt signature where a biology question (string) and an animal image (image) input produce an answer (string). The prompt description clarifies the context for the LLM, and field types indicate expected data structures. Useful for scenarios needing both textual and image data.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/04-quick.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"answer biology questions about animals\"\nquestion:string, animalImage:image -> answer:string\n```\n\n----------------------------------------\n\nTITLE: Loading Tuning Data and Applying to Prompt - Ax DSPy TypeScript\nDESCRIPTION: Covers how to load saved prompt tuning data from a file and apply it to a prompt instance using setDemos. Reads JSON content and parses it before providing as examples for improved LLM output alignment. Requires Node.js fs.promises and that tuning data matches expected demo structure.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Use this tuning data in your workflow\nconst values = await fs.promises.readFile('./qna-tune-demos.json', 'utf8');\nconst demos = JSON.parse(values);\n\n// Your done now, use this prompt\nprompt.setDemos(demos);\n\n```\n\n----------------------------------------\n\nTITLE: Chaining AxAgents for Modular Research and Summarization - TypeScript\nDESCRIPTION: Demonstrates constructing multiple specialized Ax agents (researcher, summarizer) and orchestrating them within a parent agent for domain research. Showcases agent signatures with typed prompts, clear responsibilities, and agent composition. Inputs and outputs are structured as required by their signatures. Prerequisite: '@ax-llm/ax' and the AxAgent class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/04-quick.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/examples/agent.ts\n\nconst researcher = new AxAgent({\n  name: 'researcher',\n  description: 'Researcher agent',\n  signature: `physicsQuestion \"physics questions\" -> answer \"reply in bullet points\"`\n});\n\nconst summarizer = new AxAgent({\n  name: 'summarizer',\n  description: 'Summarizer agent',\n  signature: `text \"text so summarize\" -> shortSummary \"summarize in 5 to 10 words\"`\n});\n\nconst agent = new AxAgent({\n  name: 'agent',\n  description: 'A an agent to research complex topics',\n  signature: `question -> answer`,\n  agents: [researcher, summarizer]\n});\n\nagent.forward({ questions: 'How many atoms are there in the universe' });\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Database Operations with Ax in Typescript\nDESCRIPTION: Shows basic vector database interactions using Ax. It demonstrates embedding text using `ai.embed`, creating an in-memory vector database instance with `axDB`, inserting vectors using `db.upsert` with a specific ID and table, and finally querying for similar vectors using `db.query`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create embeddings from text using an LLM\nconst ret = await this.ai.embed({ texts: 'hello world' });\n\n// Create an in memory vector db\nconst db = new axDB('memory');\n\n// Insert into vector db\nawait this.db.upsert({\n  id: 'abc',\n  table: 'products',\n  values: ret.embeddings[0]\n});\n\n// Query for similar entries using embeddings\nconst matches = await this.db.query({\n  table: 'products',\n  values: embeddings[0]\n});\n```\n\n----------------------------------------\n\nTITLE: Prompt Signature: Summarize Text - Plaintext\nDESCRIPTION: Defines a prompt signature mapping a text input (textToSummarize) to a short summary output, with the task description specifying a summary in 5 to 10 words. Used in Ax to structure LLM interactions. The left side is the input, the right side is the desired, typed output, with a quoted description for the task.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/04-quick.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntextToSummarize -> shortSummary \"summarize in 5 to 10 words\"\n```\n\n----------------------------------------\n\nTITLE: Handling Audio Input with Ax Multi-modal DSPy in Typescript\nDESCRIPTION: Illustrates processing audio inputs within the Ax framework. It reads an audio file (WAV format) using Node.js `fs`, encodes it in base64, and defines an `AxGen` prompt signature with an `audio` type field (`commentAudio:audio`). The audio data, along with its format, is then passed to the `gen.forward` method for multi-modal processing by a compatible LLM.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst audio = fs\n  .readFileSync('./src/examples/assets/comment.wav')\n  .toString('base64');\n\nconst gen = new AxGen(`question, commentAudio:audio -> answer`);\n\nconst res = await gen.forward(ai, {\n  question: 'What family does this animal belong to?',\n  commentAudio: { format: 'wav', data: audio }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring and Validating Streaming Outputs with AxChainOfThought in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates setting up an AxChainOfThought prompt for number generation, adding a synchronous assertion to reject outputs containing the number 5, and running the program in streaming mode using both forward and streamingForward. Dependencies include the Ax framework, and the methods require an initialized AI provider. Input parameters include a startNumber value, and outputs are streamed number sequences. Error handling is done via assertions, which reject invalid values immediately during streaming.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/09-streaming.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// setup the prompt program\nconst gen = new AxChainOfThought(\n  ai,\n  `startNumber:number -> next10Numbers:number[]`\n);\n\n// add a assertion to ensure that the number 5 is not in an output field\ngen.addAssert(({ next10Numbers }: Readonly<{ next10Numbers: number[] }>) => {\n  return next10Numbers ? !next10Numbers.includes(5) : undefined;\n}, 'Numbers 5 is not allowed');\n\n// run the program with streaming enabled\nconst res = await gen.forward({ startNumber: 1 }, { stream: true });\n\n// or run the program with end-to-end streaming\nconst generator = await gen.streamingForward({ startNumber: 1 }, { stream: true });\nfor await (const res of generator) {}\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAI Settings with AxAI in TypeScript\nDESCRIPTION: Shows how to instantiate AxAI for OpenAI with custom model, embedding, and temperature parameters using the config property. Requires AxAI SDK and explicit import of AxAIOpenAIModel and AxAIOpenAIEmbedModel enums. Inputs are API key and custom config settings; output is a configured AxAI instance. Useful for advanced customization beyond defaults.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n name: 'openai',\n apiKey: process.env.OPENAI_APIKEY as string\n config: {\n    model: AxAIOpenAIModel.GPT4Turbo,\n    embedModel: AxAIOpenAIEmbedModel.TextEmbedding3Small\n    temperature: 0.1,\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring OpenAI Chat API Request Type - TypeScript\nDESCRIPTION: Defines the AxAIOpenAIChatRequest generic interface, which structures requests made to OpenAI chat models. The type covers mandatory and optional fields including model, messages (with support for system, user, assistant, and tool roles), generation parameters (temperature, top_p, penalties), and advanced options (streaming, tool calls, response format). It requires TypeScript as a dependency and expects its consumers to supply all relevant properties when making requests, enforcing correct request formatting. Input includes model type and a validated messages array, while the output is a strongly-typed request object suitable for API consumption. No runtime constraints are imposed, but misuse may result in erroneous API calls.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAIChatRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxAIOpenAIChatRequest<TModel> = {\n  frequency_penalty?: number;\n  logit_bias?: Map<string, number>;\n  max_completion_tokens: number;\n  messages: (\n    { content: string; role: \"system\"; }\n    | { content: string | (\n        { text: string; type: \"text\"; }\n        | { image_url: { details: any; url: any; }; type: \"image_url\"; }\n        | { input_audio: { data: any; format: any; }; type: \"input_audio\"; }\n      )[]; name: string; role: \"user\"; }\n    | { content: string; name: string; role: \"assistant\"; tool_calls: object[]; }\n    | { content: string; role: \"tool\"; tool_call_id: string; }\n  )[];\n  model: TModel;\n  n?: number;\n  organization?: string;\n  presence_penalty?: number;\n  reasoning_effort?: \"low\" | \"medium\" | \"high\";\n  response_format?: { type: string; };\n  stop?: readonly string[];\n  store?: boolean;\n  stream?: boolean;\n  temperature?: number;\n  tool_choice?: \"none\" | \"auto\" | \"required\" | { function: { name: string; }; type: \"function\"; };\n  tools?: object[];\n  top_p?: number;\n  user?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Tuning Prompts with AxBootstrapFewShot and HotPotQA - TypeScript\nDESCRIPTION: This snippet demonstrates how to download the HotPotQA dataset using AxHFDataLoader, create a ChainOfThought program, and tune it using the AxBootstrapFewShot optimizer. It shows how to define and use an evaluation metric, and how to compile the optimizer's result. Requires the 'AxHFDataLoader', 'AxAI', 'AxChainOfThought', and 'AxBootstrapFewShot' classes as well as a valid OpenAI API key set in the environment. The key parameters are the dataset to use, the few-shot examples, the chain-of-thought definition, and the evaluation metric function. Inputs include the dataset and model configuration, and output is a tuned result object that should be saved for future use. The snippet assumes TypeScript and async/await context. Limitations include the need for external dataset and API credentials.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/11-tuning-basic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Download the HotPotQA dataset from huggingface\nconst hf = new AxHFDataLoader({\n  dataset: 'hotpot_qa',\n  split: 'train'\n});\n\nconst examples = await hf.getData<{ question: string; answer: string }>({\n  count: 100,\n  fields: ['question', 'answer']\n});\n\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n});\n\n// Setup the program to tune\nconst program = new AxChainOfThought<{ question: string }, { answer: string }>(\n  ai,\n  `question -> answer \"in short 2 or 3 words\"`\n);\n\n// Setup a Bootstrap Few Shot optimizer to tune the above program\nconst optimize = new AxBootstrapFewShot<\n  { question: string },\n  { answer: string }\n>({\n  program,\n  examples\n});\n\n// Setup a evaluation metric em, f1 scores are a popular way measure retrieval performance.\nconst metricFn: AxMetricFn = ({ prediction, example }) =>\n  emScore(prediction.answer as string, example.answer as string);\n\n// Run the optimizer and remember to save the result to use later\nconst result = await optimize.compile(metricFn);\n```\n\n----------------------------------------\n\nTITLE: Defining Functions for LLM Function Calling (TypeScript)\nDESCRIPTION: Provides an example of defining a JavaScript function (`getCurrentWeather`) intended for use with LLM function calling. The definition includes metadata like `name`, `description`, parameter `properties` (using JSON schema), required parameters, and the actual asynchronous `func` implementation that will be executed if the LLM calls this function.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// define one or more functions and a function handler\nconst functions = [\n  {\n    name: 'getCurrentWeather',\n    description: 'get the current weather for a location',\n    parameters: {\n      type: 'object',\n      properties: {\n        location: {\n          type: 'string',\n          description: 'location to get weather for'\n        },\n        units: {\n          type: 'string',\n          enum: ['imperial', 'metric'],\n          default: 'imperial',\n          description: 'units to use'\n        }\n      },\n      required: ['location']\n    },\n    func: async (args: Readonly<{ location: string; units: string }>) => {\n      return `The weather in ${args.location} is 72 degrees`;\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Building an LLM-Powered Summarization Program with AxAI and ChainOfThought - TypeScript\nDESCRIPTION: Shows step-by-step how to construct a TypeScript program that uses AxAI and AxChainOfThought to summarize a piece of text. Dependencies include '@ax-llm/ax' and an OpenAI API key. Demonstrates prompt signature configuration, LLM invocation with the 'forward' method, and output handling for summarization tasks.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/04-quick.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// example.ts\nimport { AxAI, AxChainOfThought } from '@ax-llm/ax';\n\nconst textToSummarize = `\nThe technological singularity—or simply the singularity[1]—is a hypothetical \nfuture point in time at which technological growth becomes uncontrollable \nand irreversible, resulting in unforeseeable changes to human \ncivilization.[2][3] ...`;\n\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n});\n\nconst gen = new AxChainOfThought(`textToSummarize -> shortSummary \"summarize in 5 to 10 words\"`);\nconst res = await gen.forward(ai, { textToSummarize });\n\nconsole.log(res);\n```\n\n----------------------------------------\n\nTITLE: Executing RAG Forward Pass (forward) (TypeScript)\nDESCRIPTION: Executes the main RAG logic. It first uses the `queryFn` (provided during construction) with the input `question` to retrieve relevant context. Then, it calls the underlying generation model via the `ai` service, providing the context and question to generate an answer and reasoning. This method overrides the `forward` method from AxChainOfThought and returns a Promise resolving to an object containing the `answer` and `reason` strings.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nforward(ai: Readonly<AxAIService<unknown, unknown>>, __namedParameters: Readonly<{ question: string; }>, options?: Readonly<AxProgramForwardOptions>): Promise<{ answer: string; reason: string; }>\n```\n\n----------------------------------------\n\nTITLE: Defining and Extending AxChainOfThought Using TypeScript\nDESCRIPTION: Implements the AxChainOfThought generic class to extend the AxGen class for chain-of-thought LLM prompting and orchestration. Requires installation of the @ax-llm/ax library and imports of AxGen, AxSignature, AxGenOptions, AxAIService, and other types. Main methods cover assertion logic, streaming and batch field processing, AI forward and streaming workflows, signature and trace retrieval, token usage, and configuration with demos/examples, with flexible parameters, extensive type safety, and links to deeper API docs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxChainOfThought.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AxChainOfThought<IN extends AxGenIn = AxGenIn, OUT extends AxGenOut = AxGenOut> extends AxGen<IN, OUT & object> {\n  constructor(\n    signature: Readonly<string | AxSignature>,\n    options?: Readonly<AxGenOptions>\n  );\n\n  _forward1(\n    ai: Readonly<AxAIService<unknown, unknown>>,\n    values: IN,\n    options: Readonly<AxProgramForwardOptions>\n  ): AsyncGenerator<{ delta: Partial<OUT & object>; version: number }, void, unknown>;\n\n  addAssert(fn: (values: any) => undefined | boolean, message?: string): void;\n\n  addFieldProcessor(fieldName: string, fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess): void;\n\n  addStreamingAssert(fieldName: string, fn: (content: any, done?: boolean) => undefined | boolean, message?: string): void;\n\n  addStreamingFieldProcessor(fieldName: string, fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess): void;\n\n  forward(\n    ai: Readonly<AxAIService<unknown, unknown>>,\n    values: IN,\n    options?: Readonly<AxProgramForwardOptions>\n  ): Promise<OUT & object>;\n\n  getSignature(): AxSignature;\n\n  getTraces(): AxProgramTrace[];\n\n  getUsage(): AxTokenUsage & object[];\n\n  register(prog: Readonly<AxTunable & AxUsable>): void;\n\n  resetUsage(): void;\n\n  setDemos(demos: readonly AxProgramDemos[]): void;\n\n  setExamples(examples: Readonly<AxProgramExamples>): void;\n\n  setId(id: string): void;\n\n  setParentId(parentId: string): void;\n\n  streamingForward(\n    ai: Readonly<AxAIService<unknown, unknown>>,\n    values: IN,\n    options?: Readonly<AxProgramStreamingForwardOptions>\n  ): AsyncGenerator<{ delta: Partial<OUT & object>; version: number }, void, unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Document-to-Text Extraction and RAG Retrieval with AxDBManager (TypeScript)\nDESCRIPTION: Workflow for extracting text from documents using Apache Tika and then embedding, inserting, and querying it using AxDBManager. Requires the AxApacheTika, AxDBManager, and related dependencies, along with Tika running and accessible via HTTP. Input is a file path to a document and a query string; output is the result of the similarity-based document retrieval. Handles document conversion and integrates reranking/query rewriting via available default classes.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/05-rag.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tika = new AxApacheTika();\nconst text = await tika.convert('/path/to/document.pdf');\n\nconst manager = new AxDBManager({ ai, db });\nawait manager.insert(text);\n\nconst matches = await manager.query('Find some text');\nconsole.log(matches);\n```\n\n----------------------------------------\n\nTITLE: Performing Direct Chat Completion with AI Instance (TypeScript)\nDESCRIPTION: Shows how to interact directly with the underlying LLM using the `ai.chat()` method, bypassing structured prompt programs. It takes an array of message objects, each with a `role` (e.g., 'system', 'user') and `content`, to simulate a conversation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await ai.chat([\n  { role: \"system\", content: \"Help the customer with his questions\" },\n  { role: \"user\", content: \"I'm looking for a Macbook Pro M2 With 96GB RAM?\" }\n]);\n```\n\n----------------------------------------\n\nTITLE: Forwarding Inputs to Agent and AI Services in TypeScript\nDESCRIPTION: This method accepts the parent AI service, agent input values, and optional forwarding options, and returns a promise of the agent's output. It's a key method for invoking AI-based processing routed through the agent. Dependencies include correct instantiation of the AxAIService and proper input types. Main parameters include parentAi (the service), values (agent input), and options for forwarding logic. Returns a Promise that resolves to agent-specific output.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param {Readonly<AxAIService<unknown, unknown>>} parentAi\n * @param {IN} values\n * @param {Readonly<AxProgramForwardOptions>=} options\n * @returns {Promise<OUT>}\n */\nasync forward(parentAi: Readonly<AxAIService<unknown, unknown>>, values: IN, options?: Readonly<AxProgramForwardOptions>): Promise<OUT> {\n  // ...processing logic...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Summarizing Text using Ax Chain-of-Thought in Typescript\nDESCRIPTION: Demonstrates how to use the `AxAI` and `AxChainOfThought` classes from the Ax library to perform text summarization. It initializes an AI provider (OpenAI), defines a chain-of-thought prompt signature to classify text type and generate a short summary, and then executes the process using `gen.forward`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AxAI, AxChainOfThought } from '@ax-llm/ax';\n\nconst textToSummarize = `\nThe technological singularity—or simply the singularity[1]—is a hypothetical future point in time at which technological growth becomes uncontrollable and irreversible, resulting in unforeseeable changes to human civilization.[2][3] ...`;\n\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n});\n\nconst gen = new AxChainOfThought(\n  `textToSummarize -> textType:class \\\"note, email, reminder\\\", shortSummary \\\"summarize in 5 to 10 words\\\"`\n);\n\nconst res = await gen.forward(ai, { textToSummarize });\n\nconsole.log('>', res);\n```\n\n----------------------------------------\n\nTITLE: Embedding and Querying with Vector Databases using ax (TypeScript)\nDESCRIPTION: Demonstrates how to generate text embeddings with an LLM, initialize an in-memory vector database, insert embeddings, and perform similarity queries. Requires ax LLM and vector DB APIs, with dependencies such as AI model access and the \"axDB\" class (likely part of the ax SDK). The embedding input is a text string, output is an embedding array; database operations use embedding vectors for upsert and similarity search. Assumes asynchronous operations and a compatible vector database interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/05-rag.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Create embeddings from text using an LLM\nconst ret = await this.ai.embed({ texts: 'hello world' });\n\n// Create an in memory vector db\nconst db = new axDB('memory');\n\n// Insert into vector db\nawait this.db.upsert({\n  id: 'abc',\n  table: 'products',\n  values: ret.embeddings[0]\n});\n\n// Query for similar entries using embeddings\nconst matches = await this.db.query({\n  table: 'products',\n  values: embeddings[0]\n});\n```\n\n----------------------------------------\n\nTITLE: Associating Functions with an `AxGen` Prompt (TypeScript)\nDESCRIPTION: Demonstrates how to enable function calling for a prompt program by passing an array of function definitions (like the `functions` array defined previously) within the options object when initializing an `AxGen` instance. This makes the defined functions available for the LLM to call.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst cot = new AxGen(ai, `question:string -> answer:string`, { functions });\n```\n\n----------------------------------------\n\nTITLE: Executing Ax LLM Summarization Program - Console\nDESCRIPTION: Provides instructions and sample console output for running the TypeScript summarization example with Ax. Assumes TypeScript environment with tsx, node, or bun. Output shows structured summary object as produced by the Ax agent pipeline.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/04-quick.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ntsx example.ts\n\n{\n    shortSummary: \"The technological singularity refers to a\n    hypothetical future scenario where technological...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ChainOfThought Prompt Signature (TypeScript)\nDESCRIPTION: Illustrates creating a prompt program using the `ChainOfThought` class. It takes an initialized AI instance (`ai`), a signature string defining input (`question:string`) and output (`answer:string`) types, and optional configuration like memory (`mem`). This structures the interaction with the LLM for specific tasks.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Signature defines the inputs and outputs of your prompt program\nconst cot = new ChainOfThought(ai, `question:string -> answer:string`, { mem });\n```\n\n----------------------------------------\n\nTITLE: Defining a Stock Analyst Agent with Composed Functions and Agents - TypeScript\nDESCRIPTION: Defines a complex Stock Analyst agent in TypeScript using AxAgent, combining an agent signature, description, a set of domain-specific functions, and other agents for modular analysis. The agent structure supports extension for diverse financial tasks like ratio calculations or trend analysis. Requires the '@ax-llm/ax' package and pre-existing helper functions/agents.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/04-quick.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = new AxAgent({\n  name: 'Stock Analyst',\n  description:\n    'An AI agent specialized in analyzing stocks, market trends, and providing financial insights.',\n  signature: `\n    stockSymbol:string, \n    analysisType:string \"fundamental, technical or sentiment\" -> analysisReport`,\n  functions: [\n    getStockData,\n    calculateFinancialRatios,\n    analyzeTechnicalIndicators,\n    performSentimentAnalysis\n  ],\n  agents: [\n    financialDataCollector,\n    marketTrendAnalyzer,\n    newsAnalyzer,\n    sectorAnalyst,\n    competitorAnalyzer,\n    riskAssessor,\n    valuationExpert,\n    economicIndicatorAnalyzer,\n    insiderTradingMonitor,\n    esgAnalyst\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Tuned Prompts with AxChainOfThought in TypeScript\nDESCRIPTION: This code shows how to load and use a tuned prompt generated by an Ax optimizer for question-answering tasks. The script loads demonstrations from tuned-demos.json, sets them in the AxChainOfThought program, executes the program on a sample question, and outputs the result. Required dependencies include the @ax-llm/ax library and Node.js fs module. Assumes you have already tuned your demonstrations and are using a valid OpenAI API key. Input is a question string, output is the model's optimized answer.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/03-tuning.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs'\nimport { AxAI, AxChainOfThought } from '@ax-llm/ax'\n\n// Load the AI service\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n})\n\n// Create your program\nconst program = new AxChainOfThought<{ question: string }, { answer: string }>(\n  `question -> answer \"in short 2 or 3 words\"`\n)\n\n// Load the tuned demonstrations\nconst values = await fs.promises.readFile('./tuned-demos.json', 'utf8')\nconst demos = JSON.parse(values)\nprogram.setDemos(demos)\n\n// Use the optimized program\nconst result = await program.forward(ai, {\n  question: 'What castle did David Gregory inherit?'\n})\nconsole.log(result) // Optimized answer\n```\n\n----------------------------------------\n\nTITLE: Using Tuned Prompts with AxChainOfThought in TypeScript\nDESCRIPTION: This snippet shows how to use the optimized demonstrations (demos) generated by a tuning process (like `AxBootstrapFewShot`). It initializes an `AxAI` instance and the same `AxChainOfThought` program used during tuning. The `program.loadDemos('demos.json')` method is called to load the pre-compiled demonstrations from a file. Finally, the program is executed with a new input question using the loaded demos.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n});\n\n// Setup the program to use the tuned data\nconst program = new AxChainOfThought<{ question: string }, { answer: string }>(\n  ai,\n  `question -> answer \"in short 2 or 3 words\"`\n);\n\n// load tuning data\nprogram.loadDemos('demos.json');\n\nconst res = await program.forward({\n  question: 'What castle did David Gregory inherit?'\n});\n\nconsole.log(res);\n```\n\n----------------------------------------\n\nTITLE: Applying Field Processors in AxChainOfThought (TypeScript)\nDESCRIPTION: Shows how to attach a field processor to an AxChainOfThought instance, allowing for pre-processing of output fields (e.g., incrementing all elements in an array) before sending to the LLM. Involves defining a custom processor function and specifying streaming options. Inputs include a processor function and field name; output is the processed result of the prompt chain execution.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst gen = new AxChainOfThought(\n  ai,\n  `startNumber:number -> next10Numbers:number[]`\n);  \n\nconst streamValue = false\n\nconst processorFunction = (value) => {\n  return value.map((x) => x + 1);\n}\n\n// Add a field processor to the program     \nconst processor = new AxFieldProcessor(gen, 'next10Numbers', processorFunction, streamValue);\n\nconst res = await gen.forward({ startNumber: 1 });\n```\n\n----------------------------------------\n\nTITLE: Constructing AxHFDataLoader Instance in TypeScript\nDESCRIPTION: This constructor initializes a new instance of AxHFDataLoader with user-defined parameters, such as the dataset name, configuration, dataset split, and options for data slicing (length and offset). It expects an object with typed keys, enforcing correct configuration and usage. Dependencies include the Ax data model typings, and this is intended for clients needing custom data loading from HuggingFace datasets within the Ax framework. The constructor expects precise parameter structure and throws if arguments are malformed.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxHFDataLoader.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxHFDataLoader(__namedParameters: Readonly<{ config: string; dataset: string; options: Readonly<{ length: number; offset: number; }>; split: string; }>): AxHFDataLoader\n```\n\n----------------------------------------\n\nTITLE: Advanced MiPRO v2 Configuration for Sentiment Analysis in TypeScript\nDESCRIPTION: This snippet illustrates an advanced usage of MiPRO v2 for a sentiment analysis task. It defines a specific `AxChainOfThought` program for classification, configures the `AxMiPRO` optimizer with detailed options (like `numCandidates`, `numTrials`, `maxBootstrappedDemos`, `maxLabeledDemos`, `earlyStoppingTrials`, `programAwareProposer`, `dataAwareProposer`, and `verbose`), runs the optimization, and demonstrates how to save the resulting optimized program configuration to a JSON file using Node.js `fs` module.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/12-tuning-mipro.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Create sentiment analysis program\nconst classifyProgram = new AxChainOfThought<\n  { productReview: string },\n  { label: string }\n>(`productReview -> label:string \"positive\" or \"negative\"`)\n\n// Configure optimizer with advanced settings\nconst optimizer = new AxMiPRO({\n  ai,\n  program: classifyProgram,\n  examples: trainingData,\n  options: {\n    numCandidates: 3,\n    numTrials: 10,\n    maxBootstrappedDemos: 2,\n    maxLabeledDemos: 3,\n    earlyStoppingTrials: 3,\n    programAwareProposer: true,\n    dataAwareProposer: true,\n    verbose: true\n  }\n})\n\n// Run optimization and save the result\nconst optimizedProgram = await optimizer.compile(metricFn, {\n  valset: validationData\n})\n\n// Save configuration for future use\nconst programConfig = JSON.stringify(optimizedProgram, null, 2)\nawait fs.promises.writeFile('./optimized-config.json', programConfig)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AxMiPRO for Advanced Prompt Tuning in TypeScript\nDESCRIPTION: This snippet outlines the basic steps for using the `AxMiPRO` optimizer for advanced prompt tuning. It involves setting up an AI service (`AxAI`), creating the program to be optimized (`AxChainOfThought`), configuring the `AxMiPRO` optimizer with the AI, program, training examples, and options (like `numTrials`), defining an evaluation metric, running the optimization using `optimizer.compile` (optionally with a validation set), and finally using the returned `optimizedProgram`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AxAI, AxChainOfThought, AxMiPRO } from '@ax-llm/ax'\n\n// 1. Setup your AI service\nconst ai = new AxAI({\n  name: 'google-gemini',\n  apiKey: process.env.GOOGLE_APIKEY\n})\n\n// 2. Create your program\nconst program = new AxChainOfThought(`input -> output`)\n\n// 3. Configure the optimizer\nconst optimizer = new AxMiPRO({\n  ai,\n  program,\n  examples: trainingData, // Your training examples\n  options: {\n    numTrials: 20,  // Number of configurations to try\n    auto: 'medium'  // Optimization level\n  }\n})\n\n// 4. Define your evaluation metric\nconst metricFn = ({ prediction, example }) => {\n  return prediction.output === example.output\n}\n\n// 5. Run the optimization\nconst optimizedProgram = await optimizer.compile(metricFn, {\n  valset: validationData  // Optional validation set\n})\n\n// 6. Use the optimized program\nconst result = await optimizedProgram.forward(ai, { input: \"test input\" })\n```\n\n----------------------------------------\n\nTITLE: Launching Apache Tika Server using Docker\nDESCRIPTION: Provides the Docker command to run an Apache Tika server instance. This server is used by the Ax library (via `AxApacheTika`) to extract text content from various document formats (like PDF, DOCX) for RAG applications. It exposes the Tika server on port 9998.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 9998:9998 apache/tika\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Prompt Signature for QnA - TypeScript\nDESCRIPTION: Provides a barebones prompt signature for a simple question-answer format using AxGen. This snippet is foundational for building QnA-style models and is usually used in conjunction with prompt tuning data or automated evaluation routines. Requires the Ax framework and appropriate input data mapping.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Create your prompt\nconst prompt = new AxGen(`question -> answer`)\n\n```\n\n----------------------------------------\n\nTITLE: Prompt Signature: Numeric List Rating - Plaintext\nDESCRIPTION: Specifies a prompt signature instructing the LLM to rate answers (string array input) for a question, returning a numeric array as ratings. Parameters indicate input/output types, and the quoted descriptor guides the LLM toward structured evaluation outputs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/04-quick.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\"Rate the quality of each answer on a scale of 1 to 10 against the question\"\nquestion:string, answers:string[] -> rating:number[]\n```\n\n----------------------------------------\n\nTITLE: Automatic Multi-Service Routing with AxMultiServiceRouter (TypeScript)\nDESCRIPTION: Demonstrates configuring the AxMultiServiceRouter to route requests to appropriate AI services and models based on specified keys. Requires '@ax-llm/ax', multiple configured AxAI instances (with model lists), and optional custom service objects. Inputs include prompt and model key, and the output is routed to the selected best-fit service/model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AxAI, AxMultiServiceRouter, AxAIOpenAIModel } from '@ax-llm/ax'\n\n// Setup OpenAI with model list\nconst openai = new AxAI({ \n  name: 'openai', \n  apiKey: process.env.OPENAI_APIKEY,\n  models: [\n    {\n      key: 'basic',\n      model: AxAIOpenAIModel.GPT4OMini,\n      description: 'Model for very simple tasks such as answering quick short questions',\n    },\n    {\n      key: 'medium',\n      model: AxAIOpenAIModel.GPT4O,\n      description: 'Model for semi-complex tasks such as summarizing text, writing code, and more',\n    }\n  ]\n})\n\n// Setup Gemini with model list\nconst gemini = new AxAI({ \n  name: 'google-gemini', \n  apiKey: process.env.GOOGLE_APIKEY,\n  models: [\n    {\n      key: 'deep-thinker',\n      model: 'gemini-2.0-flash-thinking',\n      description: 'Model that can think deeply about a task, best for tasks that require planning',\n    },\n    {\n      key: 'expert',\n      model: 'gemini-2.0-pro',\n      description: 'Model that is the best for very complex tasks such as writing large essays, complex coding, and more',\n    }\n  ]\n})\n\nconst ollama = new AxAI({ \n  name: 'ollama', \n  config: { model: \"nous-hermes2\" }\n})\n\nconst secretService = {\n    key: 'sensitive-secret',\n    service: ollama,\n    description: 'Model for sensitive secrets tasks'\n}\n\n// Create a router with all services\nconst router = new AxMultiServiceRouter([openai, gemini, secretService])\n\n// Route to OpenAI's expert model\nconst openaiResponse = await router.chat({\n  chatPrompt: [{ role: 'user', content: 'Hello!' }],\n  model: 'expert'\n})\n\n// Or use the router with AxGen\nconst gen = new AxGen(`question -> answer`)\nconst res = await gen.forward(router, { question: 'Hello!' })\n```\n\n----------------------------------------\n\nTITLE: Converting Files Using AxApacheTika in TypeScript\nDESCRIPTION: This method, convert, accepts an array of file paths or Blob objects and converts them to text or HTML using Apache Tika, returning a Promise that resolves to an array of strings. The method supports an optional options object for specifying batchSize and format (either \"text\" or \"html\"). Expected input is a readonly array of strings or Blobs; output is a Promise resolving to a string array containing converted file contents. Dependencies include the AxApacheTika class with its convert method and potentially Apache Tika services. Limitations include the requirement for Apache Tika to handle the file types provided, and that conversion runs asynchronously.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxApacheTika.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconvert(files: Readonly<string[] | Blob[]>, options?: Readonly<{ batchSize: number; format: \"text\" | \"html\"; }>): Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Advanced AxMiPRO Example for Sentiment Analysis in TypeScript\nDESCRIPTION: This advanced example demonstrates using `AxMiPRO` for a sentiment analysis task. It defines a `AxChainOfThought` program for classification. The `AxMiPRO` optimizer is configured with specific options like `numCandidates`, `numTrials`, `maxBootstrappedDemos`, `maxLabeledDemos`, `earlyStoppingTrials`, and flags for program/data awareness and verbosity. The optimization is run, and the resulting optimized program configuration is serialized to JSON and saved to a file using `fs.promises.writeFile`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// Create sentiment analysis program\nconst classifyProgram = new AxChainOfThought<\n  { productReview: string },\n  { label: string }\n>(`productReview -> label:string \"positive\" or \"negative\"`)\n\n// Configure optimizer with advanced settings\nconst optimizer = new AxMiPRO({\n  ai,\n  program: classifyProgram,\n  examples: trainingData,\n  options: {\n    numCandidates: 3,\n    numTrials: 10,\n    maxBootstrappedDemos: 2,\n    maxLabeledDemos: 3,\n    earlyStoppingTrials: 3,\n    programAwareProposer: true,\n    dataAwareProposer: true,\n    verbose: true\n  }\n})\n\n// Run optimization and save the result\nconst optimizedProgram = await optimizer.compile(metricFn, {\n  valset: validationData\n})\n\n// Save configuration for future use\nconst programConfig = JSON.stringify(optimizedProgram, null, 2)\nawait fs.promises.writeFile('./optimized-config.json', programConfig)\n```\n\n----------------------------------------\n\nTITLE: Defining Prompt Signature Using AxGen - TypeScript\nDESCRIPTION: Instantiates a new prompt program (cot) using AxGen, defining the expected input and output variables through string signatures. Requires an ai model (such as the output of AxOpenAI) and optionally a memory object (mem). The snippet depends on prior setup of ai and mem. The main parameters are the signature string (e.g., 'question:string -> answer:string') and options. It produces a prompt program ready for execution. Inputs must match the question parameter, and outputs will map to answer.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/01-about.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Signature defines the inputs and outputs of your prompt program\nconst cot = new AxGen(ai, `question:string -> answer:string`, { mem });\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with Huggingface Defaults in TypeScript\nDESCRIPTION: Demonstrates a basic setup for Huggingface through AxAI, using the HF_APIKEY variable and no advanced options. Enables easy access to Huggingface-hosted models using the standardized AxAI interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'huggingface',\n  apiKey: process.env.HF_APIKEY as string\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AxOpenAI with a Configuration Object (TypeScript)\nDESCRIPTION: Illustrates initializing `AxOpenAI` with a specific configuration object (`conf`), obtained here using `AxOpenAIBestConfig()`. This method allows passing detailed settings beyond just the API key, enabling finer control over the LLM's behavior (e.g., model choice, temperature).\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKey = process.env.OPENAI_APIKEY;\nconst conf = AxOpenAIBestConfig();\nconst ai = new AxOpenAI({ apiKey, conf } as AxOpenAIArgs);\n```\n\n----------------------------------------\n\nTITLE: Adding Streaming Assertions with AxChainOfThought (TypeScript)\nDESCRIPTION: Demonstrates setting up an AxChainOfThought prompt chain and adding assertions to validate output fields during streaming, ensuring specific output constraints are enforced in real time. Requires the Ax LLM framework and an initialized 'ai' instance. Inputs include prompt schema and assertions (e.g., no '5' in output array, every line starts with a number and a dot), and the outputs are validated responses (with and without streaming).\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// setup the prompt program\nconst gen = new AxChainOfThought(\n  ai,\n  `startNumber:number -> next10Numbers:number[]`\n);\n\n// add a assertion to ensure that the number 5 is not in an output field\ngen.addAssert(({ next10Numbers }: Readonly<{ next10Numbers: number[] }>) => {\n  return next10Numbers ? !next10Numbers.includes(5) : undefined;\n}, 'Numbers 5 is not allowed');\n\n// run the program with streaming enabled\nconst res = await gen.forward({ startNumber: 1 }, { stream: true });\n\n// or run the program with end-to-end streaming\nconst generator = await gen.streamingForward({ startNumber: 1 }, { stream: true });\nfor await (const res of generator) {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// add a assertion to ensure all lines start with a number and a dot.\ngen.addStreamingAssert(\n  'answerInPoints',\n  (value: string) => {\n    const re = /^\\d+\\./;\n\n    // split the value by lines, trim each line,\n    // filter out empty lines and check if all lines match the regex\n    return value\n      .split('\\n')\n      .map((x) => x.trim())\n      .filter((x) => x.length > 0)\n      .every((x) => re.test(x));\n  },\n  'Lines must start with a number and a dot. Eg: 1. This is a line.'\n);\n\n// run the program with streaming enabled\nconst res = await gen.forward(\n  {\n    question: 'Provide a list of optimizations to speedup LLM inference.'\n  },\n  { stream: true, debug: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Examples for Prompt Guidance - Ax DSPy TypeScript\nDESCRIPTION: This snippet shows how to provide high-quality example inputs and outputs to the prompt using the setExample method. By setting these examples, it helps guide the LLM towards the desired output format and increases prompt performance. Each example object should contain key-value pairs matching the signature and uses realistic customer service scenarios.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprompt.setExample([\n    {\n        customerMessage: \"Hello, I'm Jane Smith. I'm having trouble with my UltraPhone X. The screen remains black even after restarting multiple times. I have tried charging it overnight and using a different charger.\",\n        customerName: \"Jane Smith\",\n        productName: \"UltraPhone X\",\n        troubleshootingAttempted: \"Charging it overnight and using a different charger.\",\n    },\n    {\n        customerMessage: \"Hi, my name is Michael Johnson. My EcoPrinter Pro isn't connecting to Wi-Fi. I've restarted the printer and my router, and also tried connecting via Ethernet cable.\",\n        customerName: \"Michael Johnson\",\n        productName: \"EcoPrinter Pro\",\n        troubleshootingAttempted: \"Restarted the printer and router, and tried connecting via Ethernet cable.\",\n    },\n    {\n        customerMessage: \"Greetings, I'm Sarah Lee. I'm experiencing issues with my SmartHome Hub. It keeps losing connection with my smart devices. I have reset the hub, checked my internet connection, and re-paired the devices.\",\n        customerName: \"Sarah Lee\",\n        productName: \"SmartHome Hub\",\n        troubleshootingAttempted: \"Reset the hub, checked the internet connection, and re-paired the devices.\",\n    }\n])\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Prompt Signature with AxGen - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a new prompt using AxGen in TypeScript, defining the extraction of customer query details from a customer's message. It sets up the expected input and output structure for the prompt, specifying input fields, mandatory and optional outputs, and their data types. AxGen requires the Ax framework to be installed and expects structured data for both input and output.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prompt = new AxGen(\n`\"Extract customer query details\" customerMessage:string -> customerName, customerIssue, ,productName:string, troubleshootingAttempted?:string`)\n\n```\n\n----------------------------------------\n\nTITLE: Optimizing Sentiment Analysis Prompts with AxMiPRO v2 in TypeScript\nDESCRIPTION: This advanced example showcases the use of the AxMiPRO v2 optimizer for tuning a sentiment analysis prompt with Bayesian optimization in TypeScript. It sets up training and validation data, configures the AxAI service using Google Gemini, initializes an AxChainOfThought program for sentiment labeling, and sets detailed MiPRO options for instruction and demo selection. The evaluation metric is implemented as exact label match. After optimization, the tuned configuration is saved as JSON. Inputs are labeled reviews; output is an optimized program suitable for inference.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/03-tuning.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'node:fs'\nimport {\n  AxAI,\n  AxChainOfThought,\n  AxMiPRO,\n  type AxMetricFn\n} from '@ax-llm/ax'\n\n// 1. Create your training data\nconst trainingData = [\n  { productReview: 'This product is amazing!', label: 'positive' },\n  { productReview: 'Completely disappointed by the quality.', label: 'negative' },\n  { productReview: 'Best purchase ever.', label: 'positive' },\n  { productReview: 'I really hate how this turned out.', label: 'negative' },\n  // Additional examples...\n]\n\nconst validationData = [\n  { productReview: 'Very happy with the results.', label: 'positive' },\n  { productReview: 'Terrible experience, not recommended.', label: 'negative' },\n  // Additional validation examples...\n]\n\n// 2. Setup AI service\nconst ai = new AxAI({\n  name: 'google-gemini',\n  apiKey: process.env.GOOGLE_APIKEY\n})\n\n// 3. Create sentiment analysis program\nconst classifyProgram = new AxChainOfThought<\n  { productReview: string },\n  { label: string }\n>(`productReview -> label:string \"positive\" or \"negative\"`)\n\n// 4. Configure MiPRO optimizer\nconst optimizer = new AxMiPRO({\n  ai,\n  program: classifyProgram,\n  examples: trainingData,\n  options: {\n    numCandidates: 3,       // Number of instruction candidates\n    numTrials: 10,          // Number of optimization trials\n    maxBootstrappedDemos: 2, // Maximum demos to bootstrap\n    maxLabeledDemos: 3,     // Maximum labeled examples\n    earlyStoppingTrials: 3, // Stop after 3 trials with no improvement\n    programAwareProposer: true,\n    dataAwareProposer: true,\n    verbose: true\n  }\n})\n\n// 5. Define evaluation metric\nconst metricFn: AxMetricFn = ({ prediction, example }) => {\n  return prediction.label === example.label\n}\n\n// 6. Run the optimization\nconst optimizedProgram = await optimizer.compile(metricFn, {\n  valset: validationData,\n  auto: 'medium'  // Balanced optimization level\n})\n\n// 7. Save the optimized configuration\nconst programConfig = JSON.stringify(optimizedProgram, null, 2)\nawait fs.promises.writeFile('./mipro-optimized-config.json', programConfig)\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with OpenAI Defaults in TypeScript\nDESCRIPTION: Demonstrates how to initialize the AxAI SDK for OpenAI using environment variables for authentication and default settings. The required dependency is the AxAI SDK, and the OPENAI_APIKEY must be set in the environment. Returns an initialized AxAI instance connected to OpenAI with standard model and embedding defaults.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing QA Prompts Using AxBootstrapFewShot in TypeScript\nDESCRIPTION: This code demonstrates the use of AxBootstrapFewShot to optimize a question-answering prompt via few-shot learning in TypeScript. Dependencies include the @ax-llm/ax library and Node.js fs module. The script loads examples from HuggingFace datasets, configures the Ax program and optimizer, defines an exact-match evaluation metric, runs the optimizer, and saves the best demonstrations to disk as JSON. Inputs include dataset credentials and OpenAI API keys; outputs are optimized demonstrations suitable for use with Ax programs. Data should be structured as { question: string; answer: string }.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/03-tuning.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AxAI,\n  AxChainOfThought,\n  AxBootstrapFewShot,\n  AxEvalUtil,\n  AxHFDataLoader,\n  type AxMetricFn\n} from '@ax-llm/ax'\n\n// 1. Load your dataset (using HuggingFace data loader)\nconst hf = new AxHFDataLoader({\n  dataset: 'hotpot_qa',\n  split: 'train'\n})\n\nconst examples = await hf.getData<{ question: string; answer: string }>({\n  count: 100,\n  fields: ['question', 'answer']\n})\n\n// 2. Create your AI service\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n})\n\n// 3. Setup the program you want to tune\nconst program = new AxChainOfThought<{ question: string }, { answer: string }>(\n  `question -> answer \"in short 2 or 3 words\"`\n)\n\n// 4. Configure the optimizer\nconst optimizer = new AxBootstrapFewShot<\n  { question: string },\n  { answer: string }\n>({\n  ai,\n  program,\n  examples\n})\n\n// 5. Define your evaluation metric\nconst metricFn: AxMetricFn = ({ prediction, example }) =>\n  AxEvalUtil.emScore(prediction.answer as string, example.answer as string)\n\n// 6. Run the optimizer and save the results\nconst result = await optimizer.compile(metricFn)\nconst values = JSON.stringify(result, null, 2)\nawait fs.promises.writeFile('./tuned-demos.json', values)\n```\n\n----------------------------------------\n\nTITLE: Constructing AxRAG Instance (TypeScript)\nDESCRIPTION: Creates a new instance of the AxRAG class. It requires a query function (`queryFn`) that asynchronously retrieves context (as an array of strings) based on a query string, and optional AxGenOptions (`options`). This constructor overrides the one from AxChainOfThought.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxRAG(queryFn: (query) => Promise<string[]>, options?: Readonly<AxGenOptions & object>): AxRAG\n```\n\n----------------------------------------\n\nTITLE: Simplified Vector DB Management with AxDBManager in Typescript\nDESCRIPTION: Demonstrates using the `AxDBManager` class for streamlined vector database operations. This manager handles chunking, embedding, and querying automatically. The example shows initializing the manager with AI and DB instances, inserting text directly, and performing a query.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager = new AxDBManager({ ai, db });\nawait manager.insert(text);\n\nconst matches = await manager.query(\n  'John von Neumann on human intelligence and singularity.'\n);\nconsole.log(matches);\n```\n\n----------------------------------------\n\nTITLE: Fetching and Mapping Data Rows for Prompt Inputs - Ax DataLoader TypeScript\nDESCRIPTION: Shows how to retrieve rows from a dataset and map fields to the prompt's expected inputs using AxHFDataLoader's getRows method. The mapping includes renaming dataset columns to match prompt input requirements, supporting type safety and proper alignment. 'count' controls the number of examples fetched, and the result is stored for prompt optimization.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Fetch some rows, map the data columns to your prompts inputs\nconst examples = await hf.getRows<{ question: string; answer: string }>({\n  count: 20,\n  fields: ['query', 'answer'],\n  renameMap: { query: 'question', answer: 'answer' }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Maximum Tokens in LLM Configuration (TypeScript)\nDESCRIPTION: Shows how to adjust the maximum number of tokens the LLM can generate in a response. It involves getting a configuration object (using `axOpenAIDefaultConfig()` or `OpenAIBestOptions()`) and then setting its `maxTokens` property to the desired limit (e.g., 2000).\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst conf = axOpenAIDefaultConfig(); // or OpenAIBestOptions()\nconf.maxTokens = 2000;\n```\n\n----------------------------------------\n\nTITLE: Installing the Ax Provider for Vercel AI SDK (Shell)\nDESCRIPTION: Provides the npm installation command for the @ax-llm/ax-ai-sdk-provider package, essential before integrating the Ax provider with Vercel's AI SDK. Requires npm to be available and internet access. No parameters or output; solely installs the package.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @ax-llm/ax-ai-sdk-provider\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple API Function for LLM Use - TypeScript\nDESCRIPTION: Implements a basic asynchronous function that performs an HTTP GET request to Google with the provided query string and returns the JSON result. Requires the 'axios' library for HTTP requests and expects one string argument. Returns a parsed JSON response from Google. Suitable as a backend LLM function handler. Note: Network access required and error handling is not included.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// The function\nconst googleSearchAPI = async (query: string) => {\n    const res = await axios.get(\"http://google.com/?q=\" + query)\n    return res.json()\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logs for AxAI Instance (TypeScript)\nDESCRIPTION: Shows how to enable debug logging on an initialized AI instance (e.g., `AxAI` or `AxOpenAI`). Calling `ai.setOptions({ debug: true })` activates verbose logging, which can be helpful for troubleshooting requests and responses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({ name: \"openai\", apiKey: process.env.OPENAI_APIKEY } as AxOpenAIArgs);\nai.setOptions({ debug: true });\n```\n\n----------------------------------------\n\nTITLE: Running Example Agent and Expected Output - Console\nDESCRIPTION: Demonstrates how to execute the TypeScript restaurant search example using npm and shows an example output, summarizing the resulting restaurant choice and its price range for a user's query. Run command expects a correctly set up script and environment. Useful for validating end-to-end use.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nnpm run tsx src/examples/food-search.ts\n\n{\n  restaurant: 'Sukiyabashi Jiro',\n  priceRange: '$$'\n}\n```\n\n----------------------------------------\n\nTITLE: Running Optimizer and Saving Results to Disk - Ax DSPy TypeScript\nDESCRIPTION: Shows how to run the optimizer's compile method asynchronously to perform prompt tuning and then save the results to a JSON file for later workflows. This step integrates fs.promises for file system access and expects optimization output to be available for serialization. Required dependencies are Node.js fs library.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Run the optimizer\nconst result = await optimize.compile(metricFn);\n\n// Save the results to use later\nawait fs.promises.writeFile('./qna-tune-demos.json', values);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with Azure OpenAI in TypeScript\nDESCRIPTION: Illustrates setting up AxAI for Azure OpenAI with additional required fields: resourceName and deploymentName. Environment variables must include AZURE_OPENAI_APIKEY. This configuration is essential for integrating with Azure's managed OpenAI service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'azure-openai',\n  apiKey: process.env.AZURE_OPENAI_APIKEY as string,\n  resourceName: 'test-resource',\n  deploymentName: 'test-deployment'\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Datasets with AxHFDataLoader - TypeScript\nDESCRIPTION: Demonstrates the use of AxHFDataLoader to fetch data from HuggingFace datasets or a custom dataset for prompt tuning. The loader is configured by specifying the dataset name, split, configuration, and options such as length. The loadData method fetches the data asynchronously for subsequent usage in examples or optimizations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Use the HuggingFace data loader or create one for your own data\nconst hf = new AxHFDataLoader({\n  dataset: 'yixuantt/MultiHopRAG',\n  split: 'train',\n  config: 'MultiHopRAG',\n  options: { length: 5 }\n});\n\nawait hf.loadData();\n\n```\n\n----------------------------------------\n\nTITLE: Handling Image Input with Ax Multi-modal DSPy in Typescript\nDESCRIPTION: Demonstrates processing image inputs using Ax's multi-modal DSPy capabilities. It reads an image file using Node.js `fs`, encodes it in base64, and defines an `AxChainOfThought` prompt signature that includes an `image` type field (`animalImage:image`). The image data, along with its MIME type, is passed to the `gen.forward` method.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = fs\n  .readFileSync('./src/examples/assets/kitten.jpeg')\n  .toString('base64');\n\nconst gen = new AxChainOfThought(`question, animalImage:image -> answer`);\n\nconst res = await gen.forward(ai, {\n  question: 'What family does this animal belong to?',\n  animalImage: { mimeType: 'image/jpeg', data: image }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving LLM Program Traces in AxGen (TypeScript)\nDESCRIPTION: Yields an array of AxProgramTrace objects, representing logs or execution traces associated with the program instance. Enables debugging or auditing of the program's generation runs. Inherited from AxProgramWithSignature, this method requires no arguments.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetTraces(): AxProgramTrace[]\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI chat() Method Signature in TypeScript\nDESCRIPTION: Defines the `chat` method for performing chat completions. It takes a chat request object (`AxChatRequest`) and optional configuration (`AxAIPromptConfig` & `AxAIServiceActionOptions`). It returns a Promise resolving to either a complete chat response (`AxChatResponse`) or a ReadableStream of response chunks (`AxChatResponse`), depending on whether streaming is enabled. This method implements the `chat` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchat(req: Readonly<AxChatRequest<TModel>>, options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<TModel, TEmbedModel>>): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Example OpenTelemetry Trace Span for AxAI Chat Request\nDESCRIPTION: This JSON object shows an example of an OpenTelemetry trace span generated from an AxAI chat completion request using Ollama. It includes standard trace information like `traceId`, `name`, `id`, `kind`, `timestamp`, and `duration`, along with specific generative AI attributes under the `gen_ai.*` namespace (e.g., system, model, token usage) and HTTP attributes.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"traceId\": \"ddc7405e9848c8c884e53b823e120845\",\n  \"name\": \"Chat Request\",\n  \"id\": \"d376daad21da7a3c\",\n  \"kind\": \"SERVER\",\n  \"timestamp\": 1716622997025000,\n  \"duration\": 14190456.542,\n  \"attributes\": {\n    \"gen_ai.system\": \"Ollama\",\n    \"gen_ai.request.model\": \"nous-hermes2\",\n    \"gen_ai.request.max_tokens\": 500,\n    \"gen_ai.request.temperature\": 0.1,\n    \"gen_ai.request.top_p\": 0.9,\n    \"gen_ai.request.frequency_penalty\": 0.5,\n    \"gen_ai.request.llm_is_streaming\": false,\n    \"http.request.method\": \"POST\",\n    \"url.full\": \"http://localhost:11434/v1/chat/completions\",\n    \"gen_ai.usage.completion_tokens\": 160,\n    \"gen_ai.usage.prompt_tokens\": 290\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAgent Class with Agentic Interfaces in TypeScript\nDESCRIPTION: This snippet outlines the TypeScript class definition for AxAgent. It uses two type parameters (IN and OUT) and implements the AxAgentic interface for agentic behaviors. The class includes extensive typing for properties and methods, allowing integration with AI services and composition through child agents. Required dependencies include the ax-llm framework and valid AxAIService, AxFunction, and related types. Inputs and outputs are generic, facilitating flexible agent definitions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * An AI agent that can process inputs using an AI service and coordinate with child agents.\n * Supports features like smart model routing and automatic input field passing to child agents.\n *\n * @template IN extends AxGenIn\n * @template OUT extends AxGenOut\n * @implements {AxAgentic}\n */\nclass AxAgent<IN extends AxGenIn, OUT extends AxGenOut = AxGenOut> implements AxAgentic {\n  // ...class body...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Supported Features Per Model - TypeScript\nDESCRIPTION: Implements the getFeatures method which allows querying capabilities such as function support and streaming availability for a (possibly specified) model. Accepts an optional model string and returns an object indicating features, with fields for functions and streaming as booleans. Useful for runtime capability negotiation and interface adaptation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetFeatures(model?: string): { functions: boolean; streaming: boolean }\n```\n\n----------------------------------------\n\nTITLE: Assigning Ax Functions to a Prompt - TypeScript\nDESCRIPTION: Demonstrates registering one or more Ax-compatible functions or function instances with an AxGen prompt for use in LLM workflows. The 'functions' option accepts plain function objects or instances that expose the required signature. Requires properly defined Ax functions as shown earlier.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst prompt = new AxGen('inputs -> output', { functions: [ googleSearch ] })\n```\n\n----------------------------------------\n\nTITLE: Defining an Ax Function via a Class with toFunction Method - TypeScript\nDESCRIPTION: Shows how to encapsulate Ax function definitions in a reusable class that exposes a 'toFunction' method, returning a full function object for Ax integration. The class manages internal state like API keys and methods, and provides proper schema description for function use. Useful for integrating stateful or complex logic in function calls. Dependencies include TypeScript, axios, and any API key requirements for the service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoogleSearch {\n    private apiKey: string;\n\n    constructor(apiKey: string) {\n        this.apiLey = apiKey;\n    }\n\n\n    async query(query: string) {\n        const res = await axios.get(\"http://google.com/?q=\" + query)\n        return res.json()\n    }\n\n    async toFunction() {\n        return {\n            name: 'googleSearch',\n            description: 'Use this function to search google for links related to the query',\n            parameters: {\n                type: 'object',\n                properties: {\n                    query: {\n                        description: `The query to search for`,\n                        type: 'string'\n                    },\n                }\n            },\n            func: (query: string) => this.query(query)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ax Agent for Restaurant Recommendation with Weather - TypeScript\nDESCRIPTION: Illustrates a full workflow where an Ax agent responds to a user query by orchestrating weather and restaurant search functions. Requires the Ax, AxAgent libraries and valid API keys, as well as prior function definitions. Inputs are keyed by 'customerQuery', and the output is expected to provide restaurant name and price range. Designed for use in a Node.js/TypeScript environment.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst customerQuery =\n  \"Give me an ideas for lunch today in San Francisco. I like sushi but I don't want to spend too much or other options are fine as well. Also if its a nice day I'd rather sit outside.\";\n\nconst ai = new Ax({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n});\n\nconst agent = new AxAgent({\n  name: 'Restaurant search agent'\n  description:\n    'Search for restaurants to dine at based on the weather and food preferences',\n  signature:\n    `customerQuery:string  -> restaurant:string, priceRange:string \"use $ signs to indicate price range\"`\n    functions,\n});\n\nconst res = await agent.forward(ai, { customerQuery });\nconsole.log(res);\n```\n\n----------------------------------------\n\nTITLE: Defining AxTestPrompt Class with Generics in TypeScript\nDESCRIPTION: This code snippet represents how the AxTestPrompt class is defined using TypeScript generics. It ensures type safety by allowing specification of input (IN) and output (OUT) types which extend the core AxGenIn and AxGenOut types. This abstraction is intended to support diverse use cases of prompt-based evaluation, where the user can pass their own interface-compliant objects.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxTestPrompt.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AxTestPrompt<IN extends AxGenIn = AxGenIn, OUT extends AxGenOut = AxGenOut> { ... }\n```\n\n----------------------------------------\n\nTITLE: Chatting with Cohere Model via AxAICohere in TypeScript\nDESCRIPTION: Provides a chat method unioned with Promise and ReadableStream support for asynchronous or streaming conversational exchanges with Cohere models. The method uses a strongly-typed request object, optional configuration, and adapts to either direct or streaming usage. This implementation relies on AxChatRequest, AxAIPromptConfig, AxAIServiceActionOptions, and AxChatResponse types, and requires type import and response marshaling as prerequisites.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchat(\n  req: Readonly<AxChatRequest<AxAICohereModel>>,\n  options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<AxAICohereModel, AxAICohereEmbedModel>>\n): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Embedding Data using Cohere via AxAICohere in TypeScript\nDESCRIPTION: Implements an embed method for extracting embeddings from data using Cohere's embedding models, returning a typed embedding response. The method expects a read-only embedding request and optional configuration, leveraging AxEmbedRequest, AxAIServiceActionOptions, and AxEmbedResponse types. Dependencies include the relevant Ax types and a correct embedding model identifier.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nembed(\n  req: Readonly<AxEmbedRequest<AxAICohereEmbedModel>>,\n  options?: Readonly<AxAIServiceActionOptions<AxAICohereModel, AxAICohereEmbedModel>>\n): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Model Context Protocol Server via AxMCPClient - TypeScript\nDESCRIPTION: Initializes an AxMCPClient using an AxMCPStdioTransport with a specified command and arguments to connect to a MCP-compatible server. The client is instantiated in debug mode and the connection is established using the init() method. Required dependencies include @ax-llm/ax and an MCP server package (such as @modelcontextprotocol/server-memory, used via npx). Key parameters are the transport configuration and an optional debug flag. The expected input is the transport configuration; after initialization, the client can enable agents to leverage external tools. It assumes access to Node.js environment and the relevant NPM packages.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/08-mcp.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AxMCPClient, AxMCPStdioTransport } from '@ax-llm/ax'\n\n// Initialize an MCP client with a transport\nconst transport = new AxMCPStdioTransport({\n  command: 'npx',\n  args: ['-y', '@modelcontextprotocol/server-memory'],\n})\n\n// Create the client with optional debug mode\nconst client = new AxMCPClient(transport, { debug: true })\n\n// Initialize the connection\nawait client.init()\n```\n\n----------------------------------------\n\nTITLE: Declaring an Ax Function Definition - TypeScript\nDESCRIPTION: Defines an Ax-compatible function object with name, description, and JSON schema for the required parameters. Associates the earlier implemented function to the 'func' property, conforming to Ax's expected structure. The parameters field informs the AI about input expectations. This definition is critical for Ax to invoke functions correctly.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// The function definition\nconst googleSearch AxFunction = {\n    name: 'googleSearch',\n    description: 'Use this function to search google for links related to the query',\n    func: googleSearchAPI,\n    parameters: {\n        type: 'object',\n         properties: {\n             query: {\n                description: `The query to search for`,\n                type: 'string'\n            },\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Program Demos with setDemos in TypeScript\nDESCRIPTION: Allows setting one or more AxProgramDemos objects, recording exemplars or reference runs for the agent. The parameter demos is a readonly array and the method implements AxAgentic's setDemos. Used to supply demonstrations to few-shot or instruction learning agents.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param {readonly AxProgramDemos[]} demos\n * @returns {void}\n */\nsetDemos(demos: readonly AxProgramDemos[]): void {\n  // ...store or update demos...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Ax LLM Framework via Yarn - Console\nDESCRIPTION: This snippet shows how to install the Ax package using the Yarn package manager. The command adds @ax-llm/ax as a project dependency, ensuring the module and its requirements are installed. Suitable for projects that manage dependencies via Yarn. The output includes Yarn's dependency resolution log in the terminal.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/01-about.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn add @ax-llm/ax\n```\n\n----------------------------------------\n\nTITLE: Using Image Input with AxChainOfThought in TypeScript\nDESCRIPTION: This snippet shows how to read an image file (`kitten.jpeg`), encode it as base64, and pass it as an `image` type field to an `AxChainOfThought` generator in a DSPy pipeline. It requires the `fs` module for file reading and an initialized AI model instance (`ai`). The `animalImage` input expects an object with `mimeType` (e.g., 'image/jpeg') and the base64 encoded `data`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/06-multi-modal.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = fs\n  .readFileSync('./src/examples/assets/kitten.jpeg')\n  .toString('base64');\n\nconst gen = new AxChainOfThought(`question, animalImage:image -> answer`);\n\nconst res = await gen.forward(ai, {\n  question: 'What family does this animal belong to?',\n  animalImage: { mimeType: 'image/jpeg', data: image }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIAnthropicChatRequest Type for Anthropic API - TypeScript\nDESCRIPTION: This snippet declares the AxAIAnthropicChatRequest TypeScript interface, outlining the structure for API requests to the Anthropic conversational endpoint. It includes all configurable parameters such as model selection, system and user messages, streaming toggles, and advanced tool usage support. Required and optional properties are annotated for TypeScript safety, allowing developers to compose requests with varying levels of specificity for different chat scenarios. Dependencies include other related type definitions such as AxAIAnthropicChatRequestCacheParam.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIAnthropicChatRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AxAIAnthropicChatRequest {\n  anthropic_version?: string;\n  max_tokens?: number;\n  messages: (\n    {\n      content: string | (\n        ... & ... | ... & ... | {\n          content: ... | ...;\n          is_error: boolean;\n          tool_use_id: string;\n          type: \"tool_result\";\n        }\n      )[];\n      role: \"user\";\n    }\n    | {\n      content: string | (\n        {\n          text: string;\n          type: \"text\";\n        }\n        | {\n          id: string;\n          input: object;\n          name: string;\n          type: \"tool_use\";\n        }\n      )[];\n      role: \"assistant\";\n    }\n  )[];\n  metadata?: { user_id: string };\n  model?: string;\n  stop_sequences?: string[];\n  stream?: boolean;\n  system?: string | object & AxAIAnthropicChatRequestCacheParam[];\n  temperature?: number;\n  tool_choice?: { type: \"auto\" | \"any\" } | { name: string; type: \"tool\" };\n  tools?: object & AxAIAnthropicChatRequestCacheParam[];\n  top_k?: number;\n  top_p?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Available Ax Functions with Parameter Schemas for LLM - TypeScript\nDESCRIPTION: Defines an array of AxFunction objects, exposing weather and restaurant search logic to the AI. Each function includes JSON schema for its expected parameters, names, and descriptions. This registration ensures LLMs can invoke these behaviors via the Ax agent. No external dependencies beyond the two functions already defined in prior snippets.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// List of functions available to the AI\nconst functions: AxFunction[] = [\n  {\n    name: 'getCurrentWeather',\n    description: 'get the current weather for a location',\n    func: weatherAPI,\n    parameters: {\n      type: 'object',\n      properties: {\n        location: {\n          description: 'location to get weather for',\n          type: 'string'\n        },\n        units: {\n          type: 'string',\n          enum: ['imperial', 'metric'],\n          description: 'units to use'\n        }\n      },\n      required: ['location']\n    }\n  },\n  {\n    name: 'findRestaurants',\n    description: 'find restaurants in a location',\n    func: opentableAPI,\n    parameters: {\n      type: 'object',\n      properties: {\n        location: {\n          description: 'location to find restaurants in',\n          type: 'string'\n        },\n        outdoor: {\n          type: 'boolean',\n          description: 'outdoor seating'\n        },\n        cuisine: { type: 'string', description: 'cuisine type' },\n        priceRange: {\n          type: 'string',\n          enum: ['$', '$$', '$$$', '$$$$'],\n          description: 'price range'\n        }\n      },\n      required: ['location', 'outdoor', 'cuisine', 'priceRange']\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI embed() Method Signature in TypeScript\nDESCRIPTION: Defines the `embed` method for generating embeddings from input data. It accepts an embedding request object (`AxEmbedRequest`) and optional configuration (`AxAIServiceActionOptions`). It returns a Promise resolving to an embedding response (`AxEmbedResponse`) containing the generated vectors. This method implements the `embed` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nembed(req: Readonly<AxEmbedRequest<TEmbedModel>>, options?: Readonly<AxAIServiceActionOptions<TModel, TEmbedModel>>): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Building and Using Multi-Agent Systems with AxAgent in Typescript\nDESCRIPTION: Illustrates the creation of an agent system using `AxAgent`. It defines individual agents ('researcher', 'summarizer') with specific prompt signatures and then combines them into a main agent that orchestrates tasks. The example shows how to forward a question to the main agent, which presumably utilizes the sub-agents to generate an answer. The comment indicates how to run this specific example file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n# npm run tsx ./src/examples/agent.ts\n\nconst researcher = new AxAgent({\n  name: 'researcher',\n  description: 'Researcher agent',\n  signature: `physicsQuestion \\\"physics questions\\\" -> answer \\\"reply in bullet points\\\"`\n});\n\nconst summarizer = new AxAgent({\n  name: 'summarizer',\n  description: 'Summarizer agent',\n  signature: `text \\\"text so summarize\\\" -> shortSummary \\\"summarize in 5 to 10 words\\\"`\n});\n\nconst agent = new AxAgent({\n  name: 'agent',\n  description: 'A an agent to research complex topics',\n  signature: `question -> answer`,\n  agents: [researcher, summarizer]\n});\n\nagent.forward(ai, { questions: \"How many atoms are there in the universe\" })\n```\n\n----------------------------------------\n\nTITLE: Batch Forwarding through AxGen with Promise Output (TypeScript)\nDESCRIPTION: Executes the configured AxGen program using a provided AI service and inputs, optionally using specific forward options. Returns a promise that resolves to the generated output of type OUT. This method wraps the generation process in an async interface and most closely mirrors the standard batch prediction flow.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nforward(ai: Readonly<AxAIService<unknown, unknown>>, values: IN, options?: Readonly<AxProgramForwardOptions>): Promise<OUT>\n```\n\n----------------------------------------\n\nTITLE: Performing Chat Completions with AxAIDeepSeek (TypeScript)\nDESCRIPTION: Sends a chat request to the DeepSeek AI service. Inherited from `AxAIOpenAIBase`, this method takes a chat request object (`AxChatRequest` specific to `AxAIDeepSeekModel`) and optional configuration (`AxAIPromptConfig`, `AxAIServiceActionOptions`). It returns a Promise resolving to either a single chat response (`AxChatResponse`) or a `ReadableStream` for streaming responses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchat(req: Readonly<AxChatRequest<AxAIDeepSeekModel>>, options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<AxAIDeepSeekModel, undefined>>): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Declaring addResult method for AxAIMemory - TypeScript\nDESCRIPTION: Specifies the 'addResult' method, used to append an AxChatResponseResult (read-only) to the session's memory. It ensures that only valid response objects—adhering to a specific alias/type—are accepted. The function supports optional session scoping and returns void, with dependencies on having the 'AxChatResponseResult' type definition available in the consuming project.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIMemory.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naddResult(result: Readonly<AxChatResponseResult>, sessionId?: string): void\n```\n\n----------------------------------------\n\nTITLE: Basic Prompt Tuning with AxBootstrapFewShot and HotPotQA in TypeScript\nDESCRIPTION: This snippet demonstrates a basic prompt tuning workflow. It uses `AxHFDataLoader` to fetch examples from the HotPotQA dataset, sets up an `AxAI` instance (using OpenAI) and an `AxChainOfThought` program to be tuned. An `AxBootstrapFewShot` optimizer is configured with the program and examples, and an evaluation metric function (`AxMetricFn`) using `emScore` is defined. Finally, the `optimize.compile` method is called to run the tuning process.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Download the HotPotQA dataset from huggingface\nconst hf = new AxHFDataLoader({\n  dataset: 'hotpot_qa',\n  split: 'train'\n});\n\nconst examples = await hf.getData<{ question: string; answer: string }>({\n  count: 100,\n  fields: ['question', 'answer']\n});\n\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n});\n\n// Setup the program to tune\nconst program = new AxChainOfThought<{ question: string }, { answer: string }>(\n  ai,\n  `question -> answer \"in short 2 or 3 words\"`\n);\n\n// Setup a Bootstrap Few Shot optimizer to tune the above program\nconst optimize = new AxBootstrapFewShot<\n  { question: string },\n  { answer: string }\n>({\n  program,\n  examples\n});\n\n// Setup a evaluation metric em, f1 scores are a popular way measure retrieval performance.\nconst metricFn: AxMetricFn = ({ prediction, example }) =>\n  emScore(prediction.answer as string, example.answer as string);\n\n// Run the optimizer and remember to save the result to use later\nconst result = await optimize.compile(metricFn);\n```\n\n----------------------------------------\n\nTITLE: Executing Streaming Forward Pass (streamingForward) (TypeScript)\nDESCRIPTION: Executes the forward pass in streaming mode, yielding results incrementally as an AsyncGenerator. Inherited from AxChainOfThought (likely via AxGenerate). Takes the AI service instance (`ai`), input `values` (context and question), and optional forward `options`. Useful for real-time applications where partial results are needed quickly.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nstreamingForward(ai: Readonly<AxAIService<unknown, unknown>>, values: { context: string[]; question: string; }, options?: Readonly<AxProgramForwardOptions>): AsyncGenerator<{ delta: Partial<object & object>; version: number; }, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: Acquiring List of Available Models - TypeScript\nDESCRIPTION: Presents the 'getModelList' method, which retrieves the full list of models supported by the AI provider if available; otherwise, returns undefined. No parameters are required. Method is inherited and enables dynamic model selection in applications integrating the AI service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Using Audio Input with AxGen in TypeScript\nDESCRIPTION: This snippet demonstrates reading an audio file (`comment.wav`), encoding it as base64, and passing it as an `audio` type field to an `AxGen` generator. It depends on the `fs` module for file access and an initialized AI instance (`ai`). The `commentAudio` input requires an object specifying the audio `format` (e.g., 'wav') and the base64 encoded `data`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/06-multi-modal.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst audio = fs\n  .readFileSync('./src/examples/assets/comment.wav')\n  .toString('base64');\n\nconst gen = new AxGen(`question, commentAudio:audio -> answer`);\n\nconst res = await gen.forward(ai, {\n  question: 'What family does this animal belong to?',\n  commentAudio: { format: 'wav', data: audio }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Weather Data Function for Agent Use - TypeScript\nDESCRIPTION: Defines a mocked weather API function returning weather data based on location, using random selection for illustration. Data is filtered by city name, and weather details are static for demonstration. No external dependencies, but meant for testing or agent prototyping only. Parameters expect an object with a string 'location'.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst choice = Math.round(Math.random());\n\nconst goodDay = {\n  temperature: '27C',\n  description: 'Clear Sky',\n  wind_speed: 5.1,\n  humidity: 56\n};\n\nconst badDay = {\n  temperature: '10C',\n  description: 'Cloudy',\n  wind_speed: 10.6,\n  humidity: 70\n};\n\n// dummy weather lookup function\nconst weatherAPI = ({ location }: Readonly<{ location: string }>) => {\n  const data = [\n    {\n      city: 'san francisco',\n      weather: choice === 1 ? goodDay : badDay\n    },\n    {\n      city: 'tokyo',\n      weather: choice === 1 ? goodDay : badDay\n    }\n  ];\n\n  return data\n    .filter((v) => v.city === location.toLowerCase())\n    .map((v) => v.weather);\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Current AxAIService Options - TypeScript\nDESCRIPTION: Implements getOptions to retrieve the current, immutable AxAIServiceOptions for this instance. Allows inspection of configuration such as API keys, endpoints, or operational flags. Returns options in read-only form to prevent mutation outside the class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Registering Dependent AxPrograms within an AxProgram Instance in TypeScript\nDESCRIPTION: The register() method allows attachment of other AxTunable and AxUsable objects to the current AxProgram, supporting modular program composition or dependency injection. It takes a read-only instance of these interfaces and mutates the state to include the new dependency. The method does not return a value and reinforces composability patterns in the Ax LLM stack.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nregister(prog: Readonly<AxTunable & AxUsable>): void\n```\n\n----------------------------------------\n\nTITLE: Initializing and Compiling with AxBootstrapFewShot Optimizer in TypeScript\nDESCRIPTION: This snippet demonstrates the definition and instantiation of the AxBootstrapFewShot optimizer, which is designed to facilitate few-shot learning workflows. The constructor accepts readonly optimizer arguments parameterized by input and output types, while the compile method asynchronously builds a set of program demonstrations by applying a metric function, with optional controls for demos, examples, and rounds. Dependencies include type definitions for AxGenIn, AxGenOut, AxOptimizerArgs, AxMetricFn, and AxProgramDemos. Inputs include the metric function and optional compile-time limits; output is a promise resolving to an array of program demonstrations. All type references follow the Ax LLM API documentation; correct use requires Typescript and the Ax framework.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBootstrapFewShot.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Type parameter definitions\n// IN extends AxGenIn (default: AxGenIn)\n// OUT extends AxGenOut (default: AxGenOut)\n\n// Constructor\nnew AxBootstrapFewShot<IN, OUT>(\n  __namedParameters: Readonly<AxOptimizerArgs<IN, OUT>>\n): AxBootstrapFewShot<IN, OUT>\n\n// Method\ncompile(\n  metricFn: AxMetricFn,\n  options?: Readonly<undefined | { maxDemos: number; maxExamples: number; maxRounds: number; }>\n): Promise<AxProgramDemos[]>\n```\n\n----------------------------------------\n\nTITLE: Querying Feature Support for a Model via AxBaseAI in TypeScript\nDESCRIPTION: Retrieves service features for a given Anthropic or Vertex model, leveraging inherited logic from AxBaseAI. Accepts an optional model parameter and returns feature metadata, assisting in dynamic adaptation to model capabilities. No external dependencies are required beyond internal type definitions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFeatures(model?: AxAIAnthropicModel | AxAIAnthropicVertexModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with Groq Defaults in TypeScript\nDESCRIPTION: Sets up AxAI for Groq's platform with default options. Requires setting the GROQ_APIKEY environment variable. Focuses on using Groq's low-latency open-source models for inference through the AxAI interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'groq',\n  apiKey: process.env.GROQ_APIKEY as string\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with AxDBManager - TypeScript\nDESCRIPTION: The insert method stores text data, synchronously or in batches, via the AxDBManager. It accepts a single string or array of strings and optional batch parameters for controlling chunk sizes. The function returns a promise that resolves when insertion is complete but does not return any value. The method expects the Ax framework and related type definitions as dependencies.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBManager.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninsert(text: Readonly<string | string[]>, options?: Readonly<{ batchSize: number; maxWordsPerChunk: number; minWordsPerChunk: number; }>): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Declaring add method for AxAIMemory - TypeScript\nDESCRIPTION: Defines the 'add' method signature for adding a complex memory result object to a session. The method accepts a highly typed 'result' array or object, which can represent text, images, audio, assistant messages, or function outputs, and an optional 'sessionId' for targeting a specific session. Returns void and requires all types (system/user/assistant/function) represented within 'result' to match standardized TypeScript interface definitions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIMemory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nadd(result: readonly ({ cache: boolean; content: string; role: \"system\"; }\n  | { content: string | ({ cache: boolean; text: string; type: \"text\"; }\n  | { cache: boolean; details: \"high\" | \"low\" | \"auto\"; image: string; mimeType: string; type: \"image\"; }\n  | { cache: boolean; data: string; format: \"wav\"; type: \"audio\"; })[]; name: string; role: \"user\"; }\n  | { cache: boolean; content: string; functionCalls: object[]; name: string; role: \"assistant\"; }\n  | { cache: boolean; functionId: string; isError: boolean; result: string; role: \"function\"; })[]\n  | Readonly<{ cache: boolean; content: string; role: \"system\"; }\n  | { content: string | ({ cache: boolean; text: string; type: \"text\"; }\n  | { cache: boolean; details: \"high\" | \"low\" | \"auto\"; image: string; mimeType: string; type: \"image\"; }\n  | { cache: boolean; data: string; format: \"wav\"; type: \"audio\"; })[]; name: string; role: \"user\"; }\n  | { cache: boolean; content: string; functionCalls: object[]; name: string; role: \"assistant\"; }\n  | { cache: boolean; functionId: string; isError: boolean; result: string; role: \"function\"; }>, sessionId?: string): void\n```\n\n----------------------------------------\n\nTITLE: Installing Ax AI SDK Provider - npm - Shell\nDESCRIPTION: This shell snippet installs the Ax AI SDK provider package required by the integration using npm. It is a prerequisite that must be executed before running any TypeScript code in the integration. The installation ensures access to required types and providers.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/10-vercel-ai-sdk.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @ax-llm/ax-ai-sdk-provider\n```\n\n----------------------------------------\n\nTITLE: Setting Demonstration Examples (setDemos) (TypeScript)\nDESCRIPTION: Sets few-shot demonstration examples (`demos`) for the program, which can be used by the underlying model for in-context learning to improve generation quality or steer behavior. Inherited from AxChainOfThought. Takes a readonly array of demo objects conforming to AxProgramDemos.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetDemos(demos: readonly AxProgramDemos[]): void\n```\n\n----------------------------------------\n\nTITLE: Declaring rewindToTag method for AxAIMemory - TypeScript\nDESCRIPTION: Specifies the 'rewindToTag' method for reverting a session's memory to the point marked by a specific tag name. The method takes the tag name and an optional sessionId and returns an array of memory entry objects up to the matching tag. Used to restore or fork conversations from checkpoints, and all returned values adhere to strict TypeScript union typings.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIMemory.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrewindToTag(name: string, sessionId?: string): ({ cache: boolean; content: string; role: \"system\"; }\n  | { content: string | ({ cache: boolean; text: string; type: \"text\"; }\n  | { cache: boolean; details: \"high\" | \"low\" | \"auto\"; image: string; mimeType: string; type: \"image\"; }\n  | { cache: boolean; data: string; format: \"wav\"; type: \"audio\"; })[]; name: string; role: \"user\"; }\n  | { cache: boolean; content: string; functionCalls: object[]; name: string; role: \"assistant\"; }\n  | { cache: boolean; functionId: string; isError: boolean; result: string; role: \"function\"; })[]\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with Google Gemini and Code Execution in TypeScript\nDESCRIPTION: Shows how to set up AxAI for Google Gemini, enabling code execution via the options property. Requires GOOGLE_GEMINI_APIKEY in the environment. The setup allows models to execute code server-side as part of their completion process.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'google-gemini',\n  apiKey: process.env.GOOGLE_GEMINI_APIKEY as string\n  options: { codeExecution: true }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Program Signature (getSignature) (TypeScript)\nDESCRIPTION: Retrieves the input/output signature definition (schema) of the program. Inherited from AxChainOfThought. The signature defines the expected input fields (like 'context' and 'question') and output fields (like 'answer'). Returns an AxSignature object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetSignature(): AxSignature\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional texts Property in TypeScript AxEmbedRequest\nDESCRIPTION: Documents the texts property, an optional, readonly array of strings in the AxEmbedRequest object. It holds the set of input texts to be embedded, ensuring immutability for downstream processing. This property is required when submitting source texts for embedding requests.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxEmbedRequest.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntexts?: readonly string[];\n```\n\n----------------------------------------\n\nTITLE: Using AxAI with Together Custom Models in TypeScript\nDESCRIPTION: Configures AxAI to work with Together's platform, specifying a custom open-source model via the config property. Requires the TOGETHER_APIKEY in the environment. Enables access to a wide variety of models suitable for different tasks.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'together',\n  apiKey: process.env.TOGETHER_APIKEY as string,\n  config: {\n    model: 'Qwen/Qwen1.5-0.5B-Chat'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Data with AxDBManager - TypeScript\nDESCRIPTION: The query method allows searching the Ax database for text or numerical queries, optionally filtered by a top percentage parameter. Inputs are flexible, allowing single values or arrays of strings/numbers. The function returns a promise resolving to a two-dimensional array of AxDBMatch objects. Dependencies include the Ax type definitions for data matches.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBManager.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nquery(query: Readonly<string | number | string[] | number[]>, __namedParameters: undefined | Readonly<{ topPercent: number; }>): Promise<AxDBMatch[][]>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Restaurant Search API Function for Agent Use - TypeScript\nDESCRIPTION: Creates a mock 'opentable' API function for restaurant querying based on several fields including location, cuisine, price and outdoor seating. The function filters restaurants by city and sorts them based on price range lengths. Intended for demonstration and testing, with all data hardcoded. Input is an object with all relevant properties in string/boolean format.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// dummy opentable api\nconst opentableAPI = ({\n  location\n}: Readonly<{\n  location: string;\n  outdoor: string;\n  cuisine: string;\n  priceRange: string;\n}>) => {\n  const data = [\n    {\n      name: \"Gordon Ramsay's\",\n      city: 'san francisco',\n      cuisine: 'indian',\n      rating: 4.8,\n      price_range: '$$$$$$',\n      outdoor_seating: true\n    },\n    {\n      name: 'Sukiyabashi Jiro',\n      city: 'san francisco',\n      cuisine: 'sushi',\n      rating: 4.7,\n      price_range: '$$',\n      outdoor_seating: true\n    },\n    {\n      name: 'Oyster Bar',\n      city: 'san francisco',\n      cuisine: 'seafood',\n      rating: 4.5,\n      price_range: '$$',\n      outdoor_seating: true\n    },\n    {\n      name: 'Quay',\n      city: 'tokyo',\n      cuisine: 'sushi',\n      rating: 4.6,\n      price_range: '$$$$',\n      outdoor_seating: true\n    },\n    {\n      name: 'White Rabbit',\n      city: 'tokyo',\n      cuisine: 'indian',\n      rating: 4.7,\n      price_range: '$$$',\n      outdoor_seating: true\n    }\n  ];\n\n  return data\n    .filter((v) => v.city === location?.toLowerCase())\n    .sort((a, b) => {\n      return a.price_range.length - b.price_range.length;\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing AxDBManager with Parameters - TypeScript\nDESCRIPTION: This instantiates an AxDBManager object using a single object argument that conforms to AxDBManagerArgs. Dependencies include TypeScript types and the Ax data framework. The constructor expects a named parameters object defining configuration and returns a new instance of the AxDBManager. It supports integration with the rest of the Ax data layer.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBManager.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew AxDBManager(__namedParameters: Readonly<AxDBManagerArgs>): AxDBManager\n```\n\n----------------------------------------\n\nTITLE: Direct Chat Interaction with AxOpenAI - TypeScript\nDESCRIPTION: Shows a direct method to interact with the OpenAI model using the AI chat method. Two chat messages are constructed: a system prompt and a user query. Assumes ai has been initialized as an AxOpenAI object. Requires an array of role/content objects as parameter. Returns a response object from the LLM, typically containing the assistant's reply. Limitation: The snippet expects a chat-compatible LLM and a well-formed messages array.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/01-about.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await ai.chat([\n  { role: \"system\", content: \"Help the customer with his questions\" }\n  { role: \"user\", content: \"I'm looking for a Macbook Pro M2 With 96GB RAM?\" }\n]);\n```\n\n----------------------------------------\n\nTITLE: Chatting with Groq Model in TypeScript\nDESCRIPTION: The chat method enables conversation workflows with the Groq LLM, accepting a typed AxChatRequest and optional configuration for prompts or service actions. It returns a Promise that resolves to an AxChatResponse or a ReadableStream thereof, and requires the relevant model types and configuration interfaces. Inputs are the chat request object and optional options; outputs are responses from the LLM.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nchat(req: Readonly<AxChatRequest<AxAIGroqModel>>, options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<AxAIGroqModel, undefined>>): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Executing Program Forward Pass Asynchronously in TypeScript\nDESCRIPTION: Defines the `forward` method for executing the program logic. It takes an AI service (`AxAIService`), input values (`IN`), and optional forward options (`AxProgramForwardOptions`). It returns a Promise resolving to the program's output (`OUT`). This method represents the standard, non-streaming execution path.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nforward(_ai, _values, _options?): Promise<OUT>\n```\n\n----------------------------------------\n\nTITLE: Using Tuned ChainOfThought Program with Generated Demos - TypeScript\nDESCRIPTION: This snippet illustrates how to use the ChainOfThought program after prompt tuning by loading generated demonstration data. It shows initializing the AxAI instance, preparing the ChainOfThought program, loading demos from a JSON file, and making predictions. Dependencies include AxAI, AxChainOfThought, and the generated 'demos.json' file. Key parameters are the AI configuration, the chain-of-thought definition, and user input questions. The input is a user query, and the output is the model's concise answer. This snippet assumes TypeScript with async context and previously saved demos.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/11-tuning-basic.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n});\n\n// Setup the program to use the tuned data\nconst program = new AxChainOfThought<{ question: string }, { answer: string }>(\n  ai,\n  `question -> answer \"in short 2 or 3 words\"`\n);\n\n// load tuning data\nprogram.loadDemos('demos.json');\n\nconst res = await program.forward({\n  question: 'What castle did David Gregory inherit?'\n});\n\nconsole.log(res);\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings for Input Data - TypeScript\nDESCRIPTION: Implements the embed method, which takes a read-only embedding request and optional service action options, returning a Promise for an embedding response. Dependencies include types for AxEmbedRequest and AxEmbedResponse, matching the interface for embedding operations. Used for extracting vector representations from input for downstream AI applications.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nembed(req: Readonly<AxEmbedRequest>, options?: Readonly<AxAIServiceActionOptions>): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Integrating AxAI and AxAgent with Vercel AI SDK (TypeScript)\nDESCRIPTION: Shows how to construct an AxAI instance and AxAIProvider, create and register an agent, and connect it to the Vercel AI SDK for chat UI interactions. Includes handling state updates and streaming UI components. Depends on '@ax-llm/ax', '@ax-llm/ax-ai-sdk-provider', Vercel AI SDK, and proper API keys. Inputs involve user queries, and outputs are interactive UI-driven agent responses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n    name: 'openai',\n    apiKey: process.env['OPENAI_APIKEY'] ?? \"\",\n});\n\n// Create a model using the provider\nconst model = new AxAIProvider(ai);\n\nexport const foodAgent = new AxAgent({\n  name: 'food-search',\n  description:\n    'Use this agent to find restaurants based on what the customer wants',\n  signature,\n  functions\n})\n\n// Get vercel ai sdk state\nconst aiState = getMutableAIState()\n\n// Create an agent for a specific task\nconst foodAgent = new AxAgentProvider(ai, {\n    agent: foodAgent,\n    updateState: (state) => {\n         aiState.done({ ...aiState.get(), state })\n    },\n    generate: async ({ restaurant, priceRange }) => {\n        return (\n            <BotCard>\n                <h1>{restaurant as string} {priceRange as string}</h1>\n            </BotCard>\n        )\n    }\n})\n\n// Use with streamUI a critical part of building chat UIs in the AI SDK\nconst result = await streamUI({\n    model,\n    initial: <SpinnerMessage />,\n    messages: [\n        // ...\n    ],\n    text: ({ content, done, delta }) => {\n        // ...\n    },\n    tools: {\n        // @ts-ignore\n        'find-food': foodAgent,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Chat Completion with AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase to perform chat completions. It takes a chat request object (AxChatRequest) and optional configuration/options, returning a promise that resolves to either a single chat response (AxChatResponse) or a readable stream of responses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchat(req: Readonly<AxChatRequest<AxAIOpenAIModel>>, options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<AxAIOpenAIModel, AxAIOpenAIEmbedModel>>): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Performing a chat request using AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase for initiating a chat conversation. Takes a chat request object and optional configuration, returning a promise that resolves to either a single chat response or a readable stream of chat responses. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchat(req: Readonly<AxChatRequest<AxAIOpenAIModel>>, options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<AxAIOpenAIModel, AxAIOpenAIEmbedModel>>): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Executing Forward Pass Using AxAIService in TypeScript\nDESCRIPTION: Implements the forward() method for AxProgram, which asynchronously processes the given input (IN) using a provided AxAIService instance and optional forwarding options, ultimately returning a Promise of the output type (OUT). This method facilitates interaction between user input and AI model inference steps and supports optional configuration through AxProgramForwardOptions. Inputs include service handles, structured request values, and optional advanced options.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nforward(_ai: Readonly<AxAIService<unknown, unknown>>, _values: IN, _options?: Readonly<AxProgramForwardOptions>): Promise<OUT>\n```\n\n----------------------------------------\n\nTITLE: Initiating Chat Requests with Models - TypeScript\nDESCRIPTION: Outlines the 'chat' method that initiates a chat operation using the specified model and options. It takes a strongly typed request object along with optional prompt configuration and action options, returning a promise resolved with either a chat response or a readable stream of responses. This method is inherited from AxBaseAI and depends on correct generic parameters and the existence of chat/model types. Inputs include a request and optional options, with output as a promise of response(s).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchat(\n  req: Readonly<AxChatRequest<AxAIRekaModel>>,\n  options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<AxAIRekaModel, undefined>>\n): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAI Embedding Model Enumeration in TypeScript\nDESCRIPTION: Defines string literal types representing supported OpenAI embedding models for use in type-safe API calls and configurations. No external dependencies are required, but usage expects TypeScript support. Each member (e.g., 'text-embedding-3-large', 'text-embedding-3-small', 'text-embedding-ada-002') uniquely identifies a compatible embedding model; values must exactly match model IDs required by OpenAI endpoints. This approach limits model selection to valid, known models and prevents runtime errors from invalid strings.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIOpenAIEmbedModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AxAIOpenAIEmbedModel =\n  | \"text-embedding-3-large\"\n  | \"text-embedding-3-small\"\n  | \"text-embedding-ada-002\";\n\n```\n\n----------------------------------------\n\nTITLE: Invoking Chat Functionality with Streaming/Non-Streaming Support - TypeScript\nDESCRIPTION: Implements the chat method for the AxAI class, handling conversational requests with an optional configuration object. Returns a Promise resolving to either an AxChatResponse or a ReadableStream thereof, allowing for both synchronous and streaming conversations. Inputs are an immutable AxChatRequest and optional prompt/service action options; outputs are processed chat responses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nchat(req: Readonly<AxChatRequest>, options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions>): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Default Models - TypeScript\nDESCRIPTION: Implements getDefaultModels for retrieving immutable default model selection for both chat and embedding tasks. Returns an object specifying both embedModel and model as strings. Requires no parameters and outputs service defaults used for inference when explicit model selection is omitted.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with AxAIDeepSeek (TypeScript)\nDESCRIPTION: Generates embeddings for the given input using the configured DeepSeek embedding model. Inherited from `AxAIOpenAIBase`, this method accepts an embedding request (`AxEmbedRequest`) and optional service action options. It returns a Promise resolving to the embedding response (`AxEmbedResponse`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nembed(req: Readonly<AxEmbedRequest<undefined>>, options?: Readonly<AxAIServiceActionOptions<AxAIDeepSeekModel, undefined>>): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Fetching Rows with Options via getRows Generic Method in TypeScript\nDESCRIPTION: This asynchronous generic method retrieves a specified number of data rows, allowing selection of particular fields and renaming of keys via a mapping object. It requires a strongly-typed options object specifying the count, list of fields, and a mapping from original to target field names. The method returns a promise that resolves to an array of objects of inferred type T. It enables efficient, customizable data extraction based on user needs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxHFDataLoader.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetRows<T>(__namedParameters: Readonly<{ count: number; fields: readonly string[]; renameMap: Record<string, string>; }>): Promise<T[]>\n```\n\n----------------------------------------\n\nTITLE: Declaring AxDBMatch Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how to define the AxDBMatch interface in TypeScript, specifying two required properties: score (number) and text (string). This interface standardizes match result objects, facilitating strong typing and predictable structure for code interacting with document scoring and text extraction logic. No external dependencies are required; the inputs are TypeScript interface members, and the output is a defined type used across the codebase.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBMatch.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AxDBMatch {\n  score: number;\n  text: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase for generating embeddings. It accepts an embedding request (AxEmbedRequest) and optional service action options, returning a promise that resolves to an embedding response (AxEmbedResponse).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nembed(req: Readonly<AxEmbedRequest<AxAIOpenAIEmbedModel>>, options?: Readonly<AxAIServiceActionOptions<AxAIOpenAIModel, AxAIOpenAIEmbedModel>>): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Constructing an AxGen Program in TypeScript\nDESCRIPTION: The constructor initializes a new AxGen program within the Ax LLM framework, optionally customizing it with a signature and additional configuration options. Dependencies include the AxGen class and interfaces for signatures and generation options. Inputs are a signature (string or AxSignature object) and an optional options object; the output is an instance of AxGen parametrized by IN and OUT types.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(signature: Readonly<string | AxSignature>, options?: Readonly<AxGenOptions>): AxGen<IN, OUT>\n```\n\n----------------------------------------\n\nTITLE: Defining HuggingFace Response Object TypeScript\nDESCRIPTION: This snippet defines an object type AxAIHuggingFaceResponse with a single property, generated_text, representing the text output from a HuggingFace LLM call. The type ensures that any response object conforms to the expected interface when processing results from the HuggingFace API. No external dependencies are required, but this type is intended to be used wherever HuggingFace response payloads are handled to enforce structure and enable type checking.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIHuggingFaceResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AxAIHuggingFaceResponse = {\n  generated_text: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Assigning Ax Function Classes to a Prompt - TypeScript\nDESCRIPTION: Illustrates how to provide an instance of a function class to the AxGen prompt's 'functions' property. This permits stateful or configurable behaviors, such as API-key handling, within function classes. The instance must conform to Ax's expected function interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/02-functions.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst prompt = new AxGen('inputs -> output', { functions: [ new GoogleSearch(apiKey) ] })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metrics with AxAICohere in TypeScript\nDESCRIPTION: Implements a getMetrics method that exposes AI service metrics conforming to the AxAIServiceMetrics interface. This is useful for diagnostics, monitoring, or performance analytics and depends on successful tracking within the parent AxBaseAI class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Embedding Requests with Groq in TypeScript\nDESCRIPTION: The embed method creates vector embeddings using the Groq LLM, accepting a Readonly AxEmbedRequest and optional service action options. It returns a Promise of AxEmbedResponse and depends on being called with properly structured embedding requests. The main input is the embedding request object; the output is an embedding response conforming to the expected type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nembed(req: Readonly<AxEmbedRequest<undefined>>, options?: Readonly<AxAIServiceActionOptions<AxAIGroqModel, undefined>>): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Getting State from AxRouter (TypeScript)\nDESCRIPTION: Defines the 'getState' method signature for the AxRouter class. It retrieves the current database state (AxDBState) associated with the router instance. It returns the state object or undefined if no state has been set.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRouter.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetState(): undefined | AxDBState\n```\n\n----------------------------------------\n\nTITLE: Exposing Service Options with AxAICohere in TypeScript\nDESCRIPTION: The getOptions method returns current AxAIServiceOptions as a read-only object, allowing consumers to inspect operational parameters like API URL, headers, etc. This requires successful base class configuration and the AxAIServiceOptions type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Add Synchronous Assertion Hook - AxGen - TypeScript\nDESCRIPTION: The addAssert method registers a validation or assertion function (with optional message) to be called on input values before the reranker runs. This ensures data integrity or preconditions; the function can return boolean or undefined. Usually used for input checking; expects a callback and optional message string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\naddAssert(\n  fn: (values) => undefined | boolean,\n  message?: string\n): void\n```\n\n----------------------------------------\n\nTITLE: Getting Available Model List for AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` that returns the list of available models (`AxAIModelList`) supported by the configured Ollama service, or `undefined` if the list is not available or hasn't been fetched.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Registering Sub-Program within AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method allows registering another program (`prog`) that conforms to `AxTunable` and `AxUsable` interfaces as a sub-component. This is used for building complex, modular programs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nregister(prog: Readonly<AxTunable & AxUsable>): void\n```\n\n----------------------------------------\n\nTITLE: Adding an Input Field with AxSignature in TypeScript\nDESCRIPTION: The addInputField method registers a new input field in the signature using an object of type AxField. This method requires that the field supplied is Readonly and conforms to the AxField interface. The parameter 'field' specifies the input field being added. No value is returned. Used for augmenting the signature's input field structure programmatically.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\naddInputField(field: Readonly<AxField>): void\n```\n\n----------------------------------------\n\nTITLE: Setting API URL Dynamically in AxAICohere in TypeScript\nDESCRIPTION: The setAPIURL method sets or overrides the base API URL used for requests, which can be used for targeting different Cohere endpoints or environments. The method receives a string and does not return a value, depending on consumers to provide valid URLs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxChatResponseResult Type Structure in TypeScript\nDESCRIPTION: Defines the structure of the `AxChatResponseResult` type as an object in TypeScript. This type represents the response from an AI chat interaction, including optional fields for the textual content, the reason the response generation concluded (e.g., 'stop', 'length', 'function_call'), any function calls requested by the model, a unique identifier for the response, and potentially a name (e.g., associated with a function call). It is defined in `src/ax/ai/types.ts` within the ax-llm/ax project.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxChatResponseResult.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxChatResponseResult**: `object`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/types.ts#L79\n\n## Type declaration\n\n<a id=\"content\"></a>\n\n### content?\n\n> `optional` **content**: `string`\n\n<a id=\"finishReason\"></a>\n\n### finishReason?\n\n> `optional` **finishReason**: `\"stop\"` | `\"length\"` | `\"function_call\"` | `\"content_filter\"` | `\"error\"`\n\n<a id=\"functionCalls\"></a>\n\n### functionCalls?\n\n> `optional` **functionCalls**: `object`[]\n\n<a id=\"id\"></a>\n\n### id?\n\n> `optional` **id**: `string`\n\n<a id=\"name\"></a>\n\n### name?\n\n> `optional` **name**: `string`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Name in AxAICohere in TypeScript\nDESCRIPTION: Provides a getName method returning the service or provider's human-readable name, useful for UI or logging. The name is set via configuration or inheritance and requires no arguments or special dependencies.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Chat Request Handling via AxBaseAI Chat Method in TypeScript\nDESCRIPTION: Handles chat completion or streaming chat using inherited generic logic from AxBaseAI, supporting both Anthropic and Vertex models via strong typing. Accepts a readonly request of type AxChatRequest and optional prompt/service configuration options, returning either a Promise with a single response or a readable stream of responses. Input and output types ensure correct model and response linkage.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchat(req: Readonly<AxChatRequest<AxAIAnthropicModel | AxAIAnthropicVertexModel>>, options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<AxAIAnthropicModel | AxAIAnthropicVertexModel, unknown>>): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Defining AxExample Type Alias with Record Utility in TypeScript\nDESCRIPTION: Defines the AxExample type as a Record mapping string keys to the AxFieldValue type. This allows developers to specify objects with arbitrary string keys where each key corresponds to a value conforming to the AxFieldValue type (as imported from elsewhere). There are no external dependencies except for TypeScript and the referenced AxFieldValue type. This type is intended for use in parameter definitions, optimization routines, or any context where generic string-keyed dictionaries of field values are needed, ensuring type safety but not imposing runtime constraints.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxExample.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AxExample = Record<string, AxFieldValue>;\n```\n\n----------------------------------------\n\nTITLE: Add Streaming Field Processor - AxGen - TypeScript\nDESCRIPTION: registers a streaming processor for a named field that processes the field's content as it becomes available. The function can be the same as standard or streaming field processor. This is primarily used for handling incremental outputs from LLMs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\naddStreamingFieldProcessor(\n  fieldName: string,\n  fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess\n): void\n```\n\n----------------------------------------\n\nTITLE: Getting the model list for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the list of available models, if provided during configuration, otherwise returns undefined. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional embedModel Property in TypeScript AxEmbedRequest\nDESCRIPTION: Documents the embedModel property, an optional field of type TEmbedModel, within the AxEmbedRequest object. This property identifies the embedding model to be used and is generic to support different model types. This should be provided when a specific model override is needed during an embedding request.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxEmbedRequest.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nembedModel?: TEmbedModel;\n```\n\n----------------------------------------\n\nTITLE: Associating Parent Agent ID with setParentId in TypeScript\nDESCRIPTION: Assigns a parent agent identifier, linking the agent within a nested agent structure. Takes a string parentId and returns nothing. Used for agent dependency management or traceability and implements setParentId as required by AxAgentic.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param {string} parentId\n * @returns {void}\n */\nsetParentId(parentId: string): void {\n  // ...record parent id relation...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Add Streaming Assertion Hook - AxGen - TypeScript\nDESCRIPTION: The addStreamingAssert method adds a validation for streamed field changes, accepting the field name, a validator function (operating on content and optional done flag), and an optional message. The validator function is triggered during streaming; this enables real-time checks for streamed data.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\naddStreamingAssert(\n  fieldName: string,\n  fn: (content, done?) => undefined | boolean,\n  message?: string\n): void\n```\n\n----------------------------------------\n\nTITLE: Initializing AxOpenAI with API Key (TypeScript)\nDESCRIPTION: Shows the basic initialization of the `AxOpenAI` class from the 'ax' library. It requires an API key, typically sourced from environment variables (`process.env.OPENAI_APIKEY`), passed within an `AxOpenAIArgs` object to establish a connection with the OpenAI service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// Pick a LLM\nconst ai = new AxOpenAI({ apiKey: process.env.OPENAI_APIKEY } as AxOpenAIArgs);\n```\n\n----------------------------------------\n\nTITLE: Setting Data with setData Method in TypeScript\nDESCRIPTION: This method overwrites the internal data buffer with an externally provided array of AxDataRow objects. It is typically used for manual data injection or for updating the loader's contents after loading or preprocessing. It takes one argument, an array of data rows, and returns void. The method requires that the rows input strictly adheres to the AxDataRow type specification.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxHFDataLoader.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetData(rows: AxDataRow[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxChatResponseFunctionCall Type in TypeScript\nDESCRIPTION: Declares the `AxChatResponseFunctionCall` object type in TypeScript. This type structure holds information about a function call requested by a language model within the Ax framework. It includes the function's name (`name`), its arguments as a JSON string (`args`), and a unique identifier for the call (`id`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxChatResponseFunctionCall.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxChatResponseFunctionCall**: `object`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/dsp/functions.ts#L67\n\n## Type declaration\n\n<a id=\"args\"></a>\n\n### args\n\n> **args**: `string`\n\n<a id=\"id\"></a>\n\n### id\n\n> **id**: `string`\n\n<a id=\"name\"></a>\n\n### name\n\n> **name**: `string`\n```\n\n----------------------------------------\n\nTITLE: Embedding Request Management via AxBaseAI Embed Method in TypeScript\nDESCRIPTION: Utilizes the embed method inherited from AxBaseAI to generate embeddings for a given request using Anthropic or Vertex models, accepting a typed readonly AxEmbedRequest and optional action options. Returns a Promise containing the structured embed response. The design promotes composability and strong typing of embedding operations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nembed(req: Readonly<AxEmbedRequest<unknown>>, options?: Readonly<AxAIServiceActionOptions<AxAIAnthropicModel | AxAIAnthropicVertexModel, unknown>>): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Constructing the AxAI Class - TypeScript\nDESCRIPTION: Defines the constructor for the AxAI class, accepting readonly options of the AxAIArgs type. This initializes the AxAI instance, setting up configuration necessary for later interactions. Required dependencies include types for AxAIArgs and an understanding of the AxAIService interface structure. The options parameter configures the service instance for subsequent calls.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew AxAI(options: Readonly<AxAIArgs>): AxAI\n```\n\n----------------------------------------\n\nTITLE: Specifying Example Sets with setExamples in TypeScript\nDESCRIPTION: The setExamples() function inputs a read-only AxProgramExamples data structure, updating the AxProgram's corpus of reference examples. Typically used to guide AI model behavior or to provide a test set, it supports reproducible evaluation and tuning workflows. The method returns void and requires examples to be passed in the defined AX type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetExamples(examples: Readonly<AxProgramExamples>): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options for AxAIDeepSeek Service (TypeScript)\nDESCRIPTION: Gets the current configuration options set for the AxAIDeepSeek service instance. Inherited from `AxAIOpenAIBase`, this method returns a readonly `AxAIServiceOptions` object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Configuring the API URL via AxBaseAI in TypeScript\nDESCRIPTION: Allows dynamic setting of the base API URL for Anthropic or Vertex interactions, by providing a URL string. Method is inherited from AxBaseAI and modifies internal state, but does not return a value. Ensures endpoints can be reconfigured as needed.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Overriding Chat Method for Mistral Service - TypeScript\nDESCRIPTION: Implements or inherits the chat method, allowing clients to send chat-based requests to the Mistral API using typed request and option parameters. Returns either a promise resolving to a chat response or a readable stream of responses, enabling both single-shot and streaming interactions. Relies on types such as AxChatRequest, AxAIMistralModel, AxAIPromptConfig, and AxChatResponse for type safety and correct payload structure.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nchat(\n  req: Readonly<AxChatRequest<AxAIMistralModel>>,\n  options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<AxAIMistralModel, MistralEmbed>>\n): Promise<AxChatResponse> | ReadableStream<AxChatResponse>;\n```\n\n----------------------------------------\n\nTITLE: Adding Field Processor to AxGen Instance in TypeScript\nDESCRIPTION: Enables registration of field-level processing functions to transform or validate named fields within program outputs. Inputs are the field name and a processing function (either synchronous or streaming). Works in tandem with AxFieldProcessorProcess interfaces; does not return a value but alters the behavior of output post-processing.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddFieldProcessor(fieldName: string, fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess): void\n```\n\n----------------------------------------\n\nTITLE: Asserting Program Invariants in AxGen (TypeScript)\nDESCRIPTION: Registers a custom assertion function for program input validation during generation. Requires a validation callback and an optional message. Invoking this method lets the framework verify preconditions on input values, facilitating robust runtime error checking. Returns void and requires at minimum a function argument.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naddAssert(fn: (values: any) => undefined | boolean, message?: string): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Model List in Mistral Service - TypeScript\nDESCRIPTION: Obtains the list of supported models available from the Mistral API, or undefined if not available, outputting a standardized model list structure. The result aids clients in enumerating options or building selection UIs. Uses the AxAIModelList type for structural guarantees.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Adding Streaming Assertion (addStreamingAssert) (TypeScript)\nDESCRIPTION: Adds an assertion function to validate streamed content for a specific field *during* generation. Inherited from AxChainOfThought. The function `fn` receives the content chunks and a `done` flag, returning `true` if valid. An optional custom error `message` can be provided.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddStreamingAssert(fieldName: string, fn: (content: string, done?: boolean) => undefined | boolean, message?: string): void\n```\n\n----------------------------------------\n\nTITLE: Get Token and Usage Statistics - AxGen - TypeScript\nDESCRIPTION: Invoking getUsage() returns statistics about token usage and an array of related objects, which can assist in cost accounting or diagnostics. Returns a combined output with AxTokenUsage and parallel objects; all types are from the Ax package.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetUsage(): AxTokenUsage & object[]\n```\n\n----------------------------------------\n\nTITLE: Defining AxFunctionHandler Type in TypeScript\nDESCRIPTION: Defines the AxFunctionHandler type as a function that accepts optional arguments and extra context, returning an unknown value. This type is used for implementing dynamic handlers in AI service pipelines, requiring the consumer to provide argument objects and a Readonly context object (including references to the AI service, debug mode, session tracking, and traceability) as needed. No specific input or output structure is enforced, allowing for diverse extensions, but the handler must accommodate AI service context for correct usage.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxFunctionHandler.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AxFunctionHandler = (args?: any, extra?: Readonly<{ ai: AxAIService; debug: boolean; sessionId: string; traceId: string; }>) => unknown;\n```\n\n----------------------------------------\n\nTITLE: Declaring reset method for AxAIMemory - TypeScript\nDESCRIPTION: Declares the 'reset' method to clear all history or memory data for a specific session. Takes an optional sessionId argument to scope the reset; with no parameters, it could affect the default/global session. Returns void, with no output, and ensures all session history is removed or reset depending on implementation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIMemory.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreset(sessionId?: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxIField Type using Omit and Intersection in TypeScript\nDESCRIPTION: Defines the `AxIField` type alias in TypeScript. It utilizes the `Omit` utility type to exclude the `title` property from the base `AxField` type, and then uses an intersection (`&`) with an anonymous object `{ title: string }` to reintroduce `title` as a mandatory string property. This pattern ensures `AxIField` has a specific structure derived from `AxField` but with a guaranteed `title` property.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxIField.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAxIField: Omit<AxField, \"title\"> & { title: string }\n```\n\n----------------------------------------\n\nTITLE: Executing Prompt Program with AxGen - TypeScript\nDESCRIPTION: Executes the previously defined prompt program by passing input data (a question). The cot.forward method sends an object with the 'question' field as input and awaits the generated answer from the LLM. Requires cot to be instantiated from AxGen and expects the input object to match the signature. The main parameter is a JavaScript object with a 'question' key. The output is a promise resolving to an object containing the answer. This operation assumes connectivity to the underlying model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/01-about.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Pass in the input fields defined in the above signature\nconst res = await cot.forward({ question: 'Are we in a simulation?' });\n```\n\n----------------------------------------\n\nTITLE: Defining the AxDBUpsertRequest Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for an `AxDBUpsertRequest` object. It includes mandatory fields `id` (string) and `table` (string), along with optional fields: `metadata` (a record of string key-value pairs), `namespace` (string), `text` (string), and `values` (a read-only array of numbers, likely vector embeddings). This type is used for specifying data to be inserted or updated in an AxDB database.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDBUpsertRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/db/types.ts#L3\n\nexport interface AxDBUpsertRequest {\n  /**\n   * The unique identifier for the record.\n   */\n  id: string;\n\n  /**\n   * Optional metadata associated with the record.\n   * A record of string key-value pairs.\n   */\n  metadata?: Record<string, string>;\n\n  /**\n   * Optional namespace for organizing records within a table.\n   */\n  namespace?: string;\n\n  /**\n   * The name of the table where the record should be upserted.\n   */\n  table: string;\n\n  /**\n   * Optional text content associated with the record.\n   */\n  text?: string;\n\n  /**\n   * Optional numerical vector (e.g., embedding) associated with the record.\n   * Represented as a read-only array of numbers.\n   */\n  values?: readonly number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring AxRerankerOut Object Type - TypeScript\nDESCRIPTION: Declares the AxRerankerOut object type with a single property, rankedItems, which is an array of strings representing the ranked output from a re-ranking algorithm. This type is used as output within the Ax LLM manager for processes that generate ordered sets of items (e.g., search results, recommendations). No external dependencies are required—applicable in contexts expecting standardized typed data for ranking outputs, with the constraint that only arrays of strings are supported.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxRerankerOut.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AxRerankerOut = {\n  rankedItems: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring AxRerankerIn Object Interface in TypeScript\nDESCRIPTION: This code snippet defines the AxRerankerIn object type with two properties: a string array named items and a string named query. Its purpose is to standardize incoming data for a re-ranking operation, ensuring that the input includes a list of items and a related query string. This type is commonly used to enforce type-safe payloads in TypeScript projects and relies on the native string and array types; it expects well-formed string arrays for items and a single query string, with no additional validation included.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxRerankerIn.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * AxRerankerIn: object\n *\n * @property items - Array of input strings to be re-ranked\n * @property query - Single query string for re-ranking context\n */\n{\n  items: string[];\n  query: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Demonstration Examples for AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method sets few-shot demonstration examples (`demos`) for the program. These demonstrations provide context or examples of desired input-output behavior to guide the AI model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetDemos(demos: readonly AxProgramDemos[]): void\n```\n\n----------------------------------------\n\nTITLE: Embedding Text with Google Gemini Service - TypeScript\nDESCRIPTION: This method generates text embeddings using the AI service, accepting a well-typed embedding request and optional execution options. Returns a Promise of an embedding response containing vector data. The model to be used must be one of the allowed Google Gemini embedding models, and relevant configuration objects can be supplied for advanced behaviors.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nembed(req: Readonly<AxEmbedRequest<AxAIGoogleGeminiEmbedModel>>, options?: Readonly<AxAIServiceActionOptions<AxAIGoogleGeminiModel, AxAIGoogleGeminiEmbedModel>>): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI with Ax Framework - TypeScript\nDESCRIPTION: Initializes an AxOpenAI LLM instance using an API key from environment variables. The snippet imports AxOpenAI and AxOpenAIArgs types and sets up the AI model required by downstream prompt programs. Assumes @ax-llm/ax is installed and process.env.OPENAI_APIKEY is defined in the environment. Key parameter is apiKey (string). Returns an ai object for use in later prompts or chat invocations. Limitation: Only works if valid OpenAI credentials are provided.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/01-about.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Pick a LLM\nconst ai = new AxOpenAI({ apiKey: process.env.OPENAI_APIKEY } as AxOpenAIArgs);\n```\n\n----------------------------------------\n\nTITLE: Forwarding Streaming Inputs and Outputs with streamingForward in TypeScript\nDESCRIPTION: Handles agent streaming use-cases by accepting a parent AI service, input values, and streaming-specific options. Returns an AxGenStreamingOut of type OUT, facilitating streaming or real-time AI outputs. Prerequisites are the correct instantiation of non-blocking AI services and the agent's streaming functionality. Implements a core agent streaming pattern for interactive or incremental output.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param {Readonly<AxAIService<unknown, unknown>>} parentAi\n * @param {IN} values\n * @param {Readonly<AxProgramStreamingForwardOptions>=} options\n * @returns {AxGenStreamingOut<OUT>}\n */\nstreamingForward(\n  parentAi: Readonly<AxAIService<unknown, unknown>>,\n  values: IN,\n  options?: Readonly<AxProgramStreamingForwardOptions>\n): AxGenStreamingOut<OUT> {\n  // ...streaming logic...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Cohere Model Enumerations in TypeScript\nDESCRIPTION: This enumeration defines four string-based Cohere model names (\"command\", \"command-light\", \"command-r\", and \"command-r-plus\") as constants in TypeScript. These values are used elsewhere in the Ax project to reference specific Cohere LLM variants for text generation. There are no required external dependencies outside of TypeScript itself, and the inputs to this construct are model names as strings; outputs are enumeration values for use in type-safe interfaces. The design enables standardized selection and referencing of Cohere models within the codebase.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAICohereModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AxAICohereModel {\n  Command = \"command\",\n  CommandLight = \"command-light\",\n  CommandR = \"command-r\",\n  CommandRPlus = \"command-r-plus\",\n}\n\n```\n\n----------------------------------------\n\nTITLE: Constructing AxDBMemory Instance (TypeScript)\nDESCRIPTION: Defines the constructor for the AxDBMemory class. It initializes a new instance, taking optional configuration parameters defined in AxDBMemoryArgs (excluding 'name'). This constructor overrides the one from its base class, AxDBBase.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxDBMemory(__namedParameters: Readonly<Omit<AxDBMemoryArgs, \"name\">>): AxDBMemory\n```\n\n----------------------------------------\n\nTITLE: Defining the AxDBQueryRequest Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for a database query request object used within the ax-llm/ax project. It includes properties for specifying the target table, optional filters like ID, columns, namespace, query text, embedding values, and a limit for the number of results. The `table` property is mandatory.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDBQueryRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Represents a database query request.\n * Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/db/types.ts#L17\n */\ninterface AxDBQueryRequest {\n  /**\n   * Optional: An array of column names to retrieve.\n   */\n  columns?: string[];\n\n  /**\n   * Optional: The specific ID of the record to retrieve.\n   */\n  id?: string;\n\n  /**\n   * Optional: The maximum number of results to return.\n   */\n  limit?: number;\n\n  /**\n   * Optional: The namespace within the table to query.\n   */\n  namespace?: string;\n\n  /**\n   * Required: The name of the table to query.\n   */\n  table: string;\n\n  /**\n   * Optional: Text for similarity search or filtering.\n   */\n  text?: string;\n\n  /**\n   * Optional: Embedding values for vector similarity search.\n   */\n  values?: readonly number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cohere Embedding Model Enumeration - TypeScript\nDESCRIPTION: This snippet declares an enumeration in TypeScript to represent different Cohere embedding models by their specific string names, corresponding to various levels of language support and size. The enumeration provides strong typing for Cohere model identifiers, streamlining API usage and reducing the risk of typos. Dependencies include TypeScript, and this code is designed to be imported or referenced in other parts of a project interacting with the Cohere API; no direct function invocation is present. Enumeration members include 'embed-english-light-v3.0', 'embed-english-v3.0', 'embed-multilingual-light-v3.0', and 'embed-multilingual-v3.0', expected to be used as string constants anywhere a model selection is required.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAICohereEmbedModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AxAICohereEmbedModel {\n  EmbedEnglishLightV30 = \"embed-english-light-v3.0\",\n  EmbedEnglishV30 = \"embed-english-v3.0\",\n  EmbedMultiLingualLightV30 = \"embed-multilingual-light-v3.0\",\n  EmbedMultiLingualV30 = \"embed-multilingual-v3.0\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Streaming Field Processor in AxGen Program (TypeScript)\nDESCRIPTION: Adds a processing function for a specific field, to be invoked as field data is streamed in. Depends on the AxFieldProcessorProcess or AxStreamingFieldProcessorProcess callback signature. Inputs are the field name and processor function; this augments real-time post-processing, especially for large or chunked outputs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddStreamingFieldProcessor(fieldName: string, fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess): void\n```\n\n----------------------------------------\n\nTITLE: Installing Ax LLM Framework via NPM - Console\nDESCRIPTION: This snippet demonstrates how to install the Ax framework using npm, the Node.js package manager. Users should ensure they have Node.js and npm installed. Fetches the latest package version (@ax-llm/ax) and sets up all necessary dependencies for the Ax library. No additional parameters required; default behavior adds Ax to your project's node_modules. Output is installation feedback shown on the console.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/01-about.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install @ax-llm/ax\n```\n\n----------------------------------------\n\nTITLE: Defining the query Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `query` method within the `AxDBService` interface, inherited from `AxDBQueryService`. This asynchronous method takes a readonly `AxDBQueryRequest` object (`req`) and returns a Promise resolving to an `AxDBQueryResponse`. It is used for retrieving data based on the specified query criteria.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBService.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nquery(`req`): `Promise`\\<[`AxDBQueryResponse`](/api/#03-apidocs/typealiasaxdbqueryresponse)\\>\n```\n\n----------------------------------------\n\nTITLE: Registering Streaming Assertion for Output Fields in TypeScript\nDESCRIPTION: Allows attaching a callback to assert incremental (streamed) field contents as outputs are produced. Accepts the field name, a validation function that receives the content and completion state, and an optional message. This function is key for validating long-running or streaming generation tasks, ensuring correctness throughout processing streams.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddStreamingAssert(fieldName: string, fn: (content: any, done?: boolean) => undefined | boolean, message?: string): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Upsert Operation - TypeScript\nDESCRIPTION: Implements the upsert method required by the AxDBService interface for inserting or updating a single record. Accepts a read-only upsert request object and an optional update flag. Returns a Promise resolving to the result of the upsert operation. The method is intended as a core entry point and relies on the concrete subclass to execute the actual backend logic, leveraging the _upsert property if available.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBBase.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nupsert(req: Readonly<AxDBUpsertRequest>, update?: boolean): Promise<AxDBUpsertResponse>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Headers in AxAICohere in TypeScript\nDESCRIPTION: Defines the setHeaders method allowing assignment of a header factory as an async function, enabling secure or dynamic header generation for requests. The callback should resolve an object mapping strings to strings, which could include authorization or custom metadata.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Adding Streaming Field Processor to AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method registers a processing function (`fn`) specifically for a streaming output field identified by `fieldName`. The function (`AxFieldProcessorProcess` or `AxStreamingFieldProcessorProcess`) is applied incrementally as data for the field arrives.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddStreamingFieldProcessor(fieldName: string, fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess): void\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI for Local Inference with Ollama in TypeScript\nDESCRIPTION: Describes how to run AxAI with Ollama, a local engine for open-source models. Includes URL override and configures default models for inference and embedding. No API key is needed for local setup. Useful for developers wishing to run models without cloud dependencies.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'ollama',\n  apiKey: \"not-set\",\n  url: 'http://localhost:11434/v1'\n  config: { model: 'nous-hermes2', embedModel: 'all-minilm' }\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Parent ID to AxGen Program Instance (TypeScript)\nDESCRIPTION: Specifies the parent program or module identifier, supporting composition or inheritance hierarchies. Accepts a string parentId and outputs void. Inherited from AxProgramWithSignature; helps maintain program lineage.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nsetParentId(parentId: string): void\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Service Load Balancing with AxBalancer (TypeScript)\nDESCRIPTION: Illustrates how to set up multiple AxAI services, configure a load balancer for high availability, and send chat or prompt requests that automatically use the best performing AI instance. Dependencies are the '@ax-llm/ax' library and valid API keys/config for services like OpenAI and Gemini. Key parameters include service instances, balancer creation, and prompt input.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AxAI, AxBalancer } from '@ax-llm/ax'\n\n// Setup multiple AI services\nconst openai = new AxAI({ \n  name: 'openai', \n  apiKey: process.env.OPENAI_APIKEY,\n})\n\nconst ollama = new AxAI({ \n  name: 'ollama', \n  config: { model: \"nous-hermes2\" }\n})\n\nconst gemini = new AxAI({ \n  name: 'google-gemini', \n  apiKey: process.env.GOOGLE_APIKEY \n})\n\n// Create a load balancer with all services\nconst balancer = new AxBalancer([openai, ollama, gemini])\n\n// Use like a regular AI service - automatically uses the best available service\nconst response = await balancer.chat({\n  chatPrompt: [{ role: 'user', content: 'Hello!' }],\n})\n\n// Or use the balance with AxGen\nconst gen = new AxGen(`question -> answer`)\nconst res = await gen.forward(balancer,{ question: 'Hello!' })\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` for creating vector embeddings from text. It accepts an `AxEmbedRequest` and optional service action options, returning a Promise that resolves to an `AxEmbedResponse` containing the embeddings.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nembed(req, options?): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with Anthropic Defaults in TypeScript\nDESCRIPTION: Demonstrates initializing AxAI for Anthropic using an environment variable for the API key and default model settings. The ANTHROPIC_APIKEY must be configured. Returns a ready-to-use AxAI instance for Anthropic's API.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'anthropic',\n  apiKey: process.env.ANTHROPIC_APIKEY as string\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Forward Pass for AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method executes the main program logic asynchronously. It takes an AI service (`ai`), input values (`values` of type `AxRewriteIn`), and optional program options (`options`), returning a Promise that resolves to the complete output (`AxRewriteOut`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nforward(ai: Readonly<AxAIService<unknown, unknown>>, values: AxRewriteIn, options?: Readonly<AxProgramForwardOptions>): Promise<AxRewriteOut>\n```\n\n----------------------------------------\n\nTITLE: Reporting Token and Object Usage with getUsage in TypeScript\nDESCRIPTION: Implements agentic usage reporting by returning an object that merges AxTokenUsage statistics with agent-related runtime objects. No parameters; the output is a combination of token usage and additional metadata arrays. Used for monitoring, cost tracking, or optimization analyses. Relies on correct implementation of the AxAgentic interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @returns {AxTokenUsage & object[]}\n */\ngetUsage(): AxTokenUsage & object[] {\n  // ...collect and return usage data...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting the History from AxMemory in TypeScript\nDESCRIPTION: Defines the `history` method for the AxMemory class. It returns the entire sequence of chat messages stored in the memory for the specified session or the default session. The returned value is an array of message objects.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxMemory.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhistory(sessionId?): ({ cache: boolean; content: string; role: \"system\"; } | { content: string | ({ cache: boolean; text: string; type: \"text\"; } | { cache: boolean; details: \"high\" | \"low\" | \"auto\"; image: string; mimeType: string; type: \"image\"; } | { cache: boolean; data: string; format: \"wav\"; type: \"audio\"; })[]; name: string; role: \"user\"; } | { cache: boolean; content: string; functionCalls: object[]; name: string; role: \"assistant\"; } | { cache: boolean; functionId: string; isError: boolean; result: string; role: \"function\"; })[]\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAICohereChatRequest Type in TypeScript\nDESCRIPTION: Defines the structure for a Cohere chat API request object within the Ax library. It includes required properties like `model` and `chat_history`, and optional parameters to control generation such as `temperature`, `max_tokens`, `tools`, `tool_results`, `message`, `preamble`, and various penalties and sampling controls. Depends on related types like `AxAICohereModel`, `AxAICohereChatResponseToolCalls`, and `AxAICohereChatRequestToolResults`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxAICohereChatRequest = {\n  chat_history: (\n    | { message: string; role: \"CHATBOT\"; tool_calls: AxAICohereChatResponseToolCalls }\n    | { message: string; role: \"SYSTEM\" }\n    | { message: string; role: \"USER\" }\n    | { message: string; role: \"TOOL\"; tool_results: AxAICohereChatRequestToolResults }\n  )[];\n  end_sequences?: readonly string[];\n  frequency_penalty?: number;\n  k?: number;\n  max_tokens?: number;\n  message?: string;\n  model: AxAICohereModel;\n  p?: number;\n  preamble?: string;\n  presence_penalty?: number;\n  stop_sequences?: string[];\n  temperature?: number;\n  tool_results?: AxAICohereChatRequestToolResults;\n  tools?: object[];\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Features with getFeatures in TypeScript\nDESCRIPTION: This method provides agent capability metadata such as supported routing, streaming, or other features and returns an AxAgentFeatures object. It implements the getFeatures method from AxAgentic, ensuring feature queries are standardized. Has no parameters and returns a structured agent features object for use in agent orchestration and configuration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @returns {AxAgentFeatures}\n */\ngetFeatures(): AxAgentFeatures {\n  // ...return features...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom API URL - TypeScript\nDESCRIPTION: Allows modification of the underlying API endpoint for the AI service, accepting a string URL. Changing the API URL can redirect requests to a different deployed instance or environment. Used for advanced deployment, customization, or testing scenarios.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the accountId Property in AxDBCloudflareArgs (TypeScript)\nDESCRIPTION: Defines the `accountId` property as a required string within the `AxDBCloudflareArgs` interface. This property holds the Cloudflare account identifier necessary for API interactions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBCloudflareArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naccountId: `string`\n```\n\n----------------------------------------\n\nTITLE: Inherited Upsert Method (upsert) from AxDBBase (TypeScript)\nDESCRIPTION: Public method for upserting a single data entry. It takes an upsert request object (`req`) and an optional `update` flag. It returns a Promise resolving to an AxDBUpsertResponse. This method is inherited from the AxDBBase class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nupsert(req: Readonly<AxDBUpsertRequest>, update?: boolean): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining the AxDBState Type Alias in TypeScript\nDESCRIPTION: This TypeScript type alias `AxDBState` defines the structure for storing the state of an in-memory database. It uses nested `Record` types, where the outer record maps table names (strings) to inner records. Each inner record maps item IDs (strings) to their corresponding `AxDBUpsertRequest` objects, representing the data to be upserted. This type is defined in the `memory.ts` file of the ax-llm/ax project.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDBState.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRecord<string, Record<string, AxDBUpsertRequest>>\n```\n\n----------------------------------------\n\nTITLE: Adding Assertion Function to AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method adds a validation function (`fn`) that checks the entire output (`values`) after generation. An optional custom error `message` can be provided. The function `fn` should return `true` if the assertion passes, `false` or `undefined` otherwise.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddAssert(fn: (values) => undefined | boolean, message?: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxDBUpsertResponse Type Alias in TypeScript\nDESCRIPTION: This TypeScript type alias `AxDBUpsertResponse` defines the structure for responses from database upsert operations. Based on the provided text (`> **AxDBUpsertResponse**: \\`object\\`` and `> **ids**: \\`string\\`[]`), it's inferred to be an object with an `ids` property, which is an array of strings holding the identifiers of inserted or updated records. The definition location is noted in comments.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDBUpsertResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/db/types.ts#L12\n */\ntype AxDBUpsertResponse = {\n  /**\n   * An array of strings representing the IDs of the upserted records.\n   */\n  ids: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Field Processor to AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method registers a processing function (`fn`) for a specific output field identified by `fieldName`. The function (`AxFieldProcessorProcess` or `AxStreamingFieldProcessorProcess`) will be applied to the value of that field during or after generation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddFieldProcessor(fieldName: string, fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess): void\n```\n\n----------------------------------------\n\nTITLE: Defining Field Type Declarations in Ax Prompt Signatures - Markdown\nDESCRIPTION: This Markdown snippet provides a table summarizing all the supported output field types available in Ax Prompt signatures, including their descriptions, usage patterns, and example outputs. It serves as a quick reference for users defining prompts and helps ensure the correct type and syntax are used for each field. The table does not require dependencies but assumes knowledge of table formatting in Markdown. Inputs are Ax field types; outputs are their descriptions and examples, with no code execution involved.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/02-signatures.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type                      | Description                       | Usage                      | Example Output                                     |\\n|---------------------------|-----------------------------------|----------------------------|----------------------------------------------------|\\n| `string`                  | A sequence of characters.         | `fullName:string`          | `\\\"example\\\"`                                        |\\n| `number`                  | A numerical value.                | `price:number`             | `42`                                               |\\n| `boolean`                 | A true or false value.            | `isEvent:boolean`          | `true`, `false`                                    |\\n| `date`                    | A date value.                     | `startDate:date`           | `\\\"2023-10-01\\\"`                                     |\\n| `datetime`                | A date and time value.            | `createdAt:datetime`       | `\\\"2023-10-01T12:00:00Z\\\"`                           |\\n| `class \\\"class1,class2\\\"`   | A classification of items.        | `category:class`           | `[\\\"class1\\\", \\\"class2\\\", \\\"class3\\\"]`                   |\\n| `string[]`                | An array of strings.              | `tags:string[]`            | `[\\\"example1\\\", \\\"example2\\\"]`                         |\\n| `number[]`                | An array of numbers.              | `scores:number[]`          | `[1, 2, 3]`                                        |\\n| `boolean[]`               | An array of boolean values.       | `permissions:boolean[]`    | `[true, false, true]`                              |\\n| `date[]`                  | An array of dates.                | `holidayDates:date[]`      | `[\\\"2023-10-01\\\", \\\"2023-10-02\\\"]`                     |\\n| `datetime[]`              | An array of date and time values. | `logTimestamps:datetime[]` | `[\\\"2023-10-01T12:00:00Z\\\", \\\"2023-10-02T12:00:00Z\\\"]` |\\n| `class[] \\\"class1,class2\\\"` | Multiple classes                  | `categories:class[]`       | `[\\\"class1\\\", \\\"class2\\\", \\\"class3\\\"]`                   |\n```\n\n----------------------------------------\n\nTITLE: Chat Completion with Google Gemini Service - TypeScript\nDESCRIPTION: This method allows users to perform chat interactions with the AI model, accepting a structured request object and optional configuration options controlling prompt and service-action behavior. Returns either a Promise of an AxChatResponse object or, in streaming mode, a ReadableStream of chat responses. All request and option types must conform to interfaces referencing Gemini ML models.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nchat(req: Readonly<AxChatRequest<AxAIGoogleGeminiModel>>, options?: Readonly<AxAIPromptConfig & AxAIServiceActionOptions<AxAIGoogleGeminiModel, AxAIGoogleGeminiEmbedModel>>): Promise<AxChatResponse> | ReadableStream<AxChatResponse>\n```\n\n----------------------------------------\n\nTITLE: Setting the API URL for AxAIDeepSeek (TypeScript)\nDESCRIPTION: Updates the base API URL used for making requests to the DeepSeek service. Inherited from `AxAIOpenAIBase`, this method allows overriding the default endpoint.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Constructing AxProgramWithSignature Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `AxProgramWithSignature` class. It takes a mandatory `signature` (string or `AxSignature` object) and optional `options` (`AxProgramWithSignatureOptions`) to initialize a new program instance. It returns the newly created `AxProgramWithSignature` instance typed with the provided `IN` (extends `AxGenIn`) and `OUT` (extends `AxGenOut`) generics.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxProgramWithSignature<IN, OUT>(signature, options?): AxProgramWithSignature<IN, OUT>\n```\n\n----------------------------------------\n\nTITLE: Adding Field Processor (addFieldProcessor) (TypeScript)\nDESCRIPTION: Adds a processor function for a specific output field, executed after the generation is complete. Inherited from AxChainOfThought. Useful for transforming or validating individual fields in the final output. Takes the target `fieldName` and the processing function `fn`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddFieldProcessor(fieldName: string, fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess): void\n```\n\n----------------------------------------\n\nTITLE: Defining DeepSeekCoder Enumeration Member in TypeScript\nDESCRIPTION: Defines the `DeepSeekCoder` member within the `AxAIDeepSeekModel` enumeration, assigning it the string literal value \"deepseek-coder\". This member is used to identify the DeepSeek coder model within the ax-llm framework. It's located in the `src/ax/ai/deepseek/types.ts` file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIDeepSeekModel.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDeepSeekCoder: \"deepseek-coder\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Program Token Usage in TypeScript\nDESCRIPTION: Defines the `getUsage` method, implementing `AxUsable.getUsage`. It returns an array containing token usage information (`AxTokenUsage`) combined with other potential usage metrics (represented by `& object[]`), allowing monitoring of resource consumption like AI service tokens.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetUsage(): AxTokenUsage & object[]\n```\n\n----------------------------------------\n\nTITLE: Defining Response Handler Argument Structure - TypeScript Interface\nDESCRIPTION: This TypeScript interface defines AxResponseHandlerArgs<T>, a generic type capturing all relevant context for handling AI responses within the Ax DSP module. Dependencies include types AxAIService, AxAIMemory, and AxFunction, as referenced elsewhere in the codebase. The interface includes required and optional fields such as ai (AI service instance), mem (memory store), res (the result of type T), usageInfo, model, and optional tracing and session identifiers. Inputs are properties relevant to an AI request; expected outputs are strongly-typed handler argument objects. Constraints include the need to import referenced types and functions from the Ax type library.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxResponseHandlerArgs.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AxResponseHandlerArgs<T> = {\n  ai: Readonly<AxAIService<unknown, unknown>>;\n  model?: string;\n  res: T;\n  mem: AxAIMemory;\n  usageInfo: {\n    ai: string;\n    model: string;\n  };\n  sessionId?: string;\n  traceId?: string;\n  functions?: readonly AxFunction[];\n  fastFail?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemini15Pro Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemini15Pro` assigned the string value `\"gemini-1.5-pro\"`. This identifier specifies the Gemini 1.5 Pro model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nGemini15Pro: \"gemini-1.5-pro\"\n```\n\n----------------------------------------\n\nTITLE: Optional Batch Upsert Method (TypeScript)\nDESCRIPTION: Defines an optional _batchUpsert method inherited from AxDBBase for batch upserting records. It takes an array of upsert requests, a boolean for update semantics, and optional operation options, returning a promise that resolves to an upsert response. This method depends on Cloudflare service integration and several AxDB types.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBCloudflare.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n_batchUpsert?(batchReq: readonly AxDBUpsertRequest[], update?: boolean, options?: Readonly<AxDBBaseOpOptions>): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Model Configurations - TypeScript\nDESCRIPTION: Provides the 'getDefaultModels' method, which returns a readonly object containing default model names for both embedding and standard operations. This helps consumers to understand or utilize service defaults without explicit selection. It returns an object with 'embedModel' and 'model' string properties. No inputs are expected and is inherited from AxBaseAI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string }>\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with OpenAI Provider - TypeScript\nDESCRIPTION: Demonstrates how to instantiate the AxAI class with the OpenAI provider in TypeScript. Requires the '@ax-llm/ax' package and a valid API key set as the OPENAI_APIKEY environment variable. Returns a ready-to-use AxAI instance preconfigured for OpenAI LLM operations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/04-quick.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'openai',\n  apiKey: process.env.OPENAI_APIKEY as string\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Program Identifier in TypeScript\nDESCRIPTION: Defines the `setParentId` method, implementing `AxTunable.setParentId`. It sets the identifier (`parentId`) of the parent program, establishing a hierarchical relationship between program instances, often used when programs call other programs. Returns `void`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetParentId(parentId): void\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI Constructor Signature in TypeScript\nDESCRIPTION: Defines the constructor for the generic AxBaseAI class. It takes an AI implementation (`aiImpl` implementing `AxAIServiceImpl`) and named parameters (`AxBaseAIArgs`) to initialize the base AI service instance. It requires specifying several generic type parameters related to models, requests, and responses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxBaseAI<TModel, TEmbedModel, TChatRequest, TEmbedRequest, TChatResponse, TChatResponseDelta, TEmbedResponse>(aiImpl: Readonly<AxAIServiceImpl<TModel, TEmbedModel, TChatRequest, TEmbedRequest, TChatResponse, TChatResponseDelta, TEmbedResponse>>, __namedParameters: Readonly<AxBaseAIArgs<TModel, TEmbedModel>>): AxBaseAI<TModel, TEmbedModel, TChatRequest, TEmbedRequest, TChatResponse, TChatResponseDelta, TEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Declaring Tokens Array for AxAIOpenAILogprob - TypeScript\nDESCRIPTION: Specifies the tokens property as an array of strings, listing each token produced or consumed in the OpenAI log probability process under the Ax framework. This field serves as the textual representation of generated tokens, paired positionally with log probability and offset arrays. Only string arrays are accepted. There are no special dependencies besides TypeScript.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAILogprob.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntokens: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining Codestral Model Identifier in TypeScript\nDESCRIPTION: This snippet defines the string identifier for the Codestral model. It assigns the value 'codestral-latest' to the `Codestral` member, likely within the `AxAIMistralModel` enumeration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIMistralModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nCodestral: \"codestral-latest\"\n```\n\n----------------------------------------\n\nTITLE: Executing run Method of AxTestPrompt in TypeScript\nDESCRIPTION: This method provides the public API for executing prompt evaluations. By accepting a metric function (AxMetricFn), users can supply custom logic for scoring or validating generation outputs. The method is asynchronous, returning a Promise<void>, and leverages typed callbacks for extensibility. No return value is expected, indicating that side effects (e.g., logging, assertion) are the primary use case.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxTestPrompt.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync run(metricFn: AxMetricFn): Promise<void> { ... }\n```\n\n----------------------------------------\n\nTITLE: Getting Model Features in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase to retrieve the features supported by a specific model or the default model if none is specified. It accepts an optional model identifier (AxAIOpenAIModel) and returns an AxAIFeatures object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFeatures(model?: AxAIOpenAIModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Constructing AxAIOllama Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `AxAIOllama` class. It initializes a new instance by accepting named parameters based on `AxAIOllamaArgs` (excluding `name`). This constructor overrides the one from the base class `AxAIOpenAIBase`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxAIOllama(__namedParameters): AxAIOllama\n```\n\n----------------------------------------\n\nTITLE: Constructing Default Result Reranker - AxGen - TypeScript\nDESCRIPTION: Instantiates the AxDefaultResultReranker class, optionally taking AxGenOptions for configuration. This class serves as a specialized reranker leveraging the AxGen framework foundation. Dependencies required are TypeScript, and the Ax framework's types/interfaces; the constructor expects an optional options object that customizes the reranker instance.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew AxDefaultResultReranker(options?: Readonly<AxGenOptions>): AxDefaultResultReranker\n```\n\n----------------------------------------\n\nTITLE: Constructing AxProgram Instances with Generics in TypeScript\nDESCRIPTION: This code defines the AxProgram constructor using TypeScript generics IN and OUT, enabling a flexible specification for input and output types conforming to AxGenIn and AxGenOut. It allows creating strongly-typed AxProgram instances for varying task requirements in LLM orchestration. There are no external dependencies beyond the expected AxProgram class and the associated types. The constructor returns a new AxProgram and is meant for internal or framework use.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxProgram<IN, OUT>(): AxProgram<IN, OUT>\n```\n\n----------------------------------------\n\nTITLE: Specifying the LLM Model in Configuration (TypeScript)\nDESCRIPTION: Demonstrates how to select a specific LLM model (e.g., GPT-4 Turbo) when configuring the AI instance. This is done by retrieving a configuration object and setting its `model` property to a value from the `OpenAIModel` enum (e.g., `OpenAIModel.GPT4Turbo`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst conf = axOpenAIDefaultConfig(); // or OpenAIBestOptions()\nconf.model = OpenAIModel.GPT4Turbo;\n```\n\n----------------------------------------\n\nTITLE: Executing Program Forward Pass with Streaming Output in TypeScript\nDESCRIPTION: Defines the `streamingForward` method for executing the program logic with streaming output. It takes an AI service (`AxAIService`), input values (`IN`), and optional streaming options (`AxProgramStreamingForwardOptions`). It returns an `AxGenStreamingOut<OUT>` object, which likely provides an asynchronous generator or similar mechanism to consume the output (`OUT`) incrementally as it's generated.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nstreamingForward(_ai, _values, _options?): AxGenStreamingOut<OUT>\n```\n\n----------------------------------------\n\nTITLE: Injecting MCP Client as Function Provider to AxAgent and AxGen - TypeScript\nDESCRIPTION: Demonstrates how to utilize a previously initialized AxMCPClient as a function provider for an AxAgent or AxGen in TypeScript. An AxAgent is instantiated with a custom name, description, signature, and receives the client in its functions array to provide persistent memory capabilities. Alternatively, AxGen is initialized with a function signature and the client. Both require successful prior initialization of the AxMCPClient. The functions option must accept an array of function providers. Inputs include agent configuration objects and a client instance; outputs are enhanced agent or generator objects capable of leveraging external MCP resources.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/08-mcp.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Use the client's functions in an agent\nconst memoryAgent = new AxAgent({\n  name: 'MemoryAssistant',\n  description: 'An assistant with persistent memory',\n  signature: 'input, userId -> response',\n  functions: [client], // Pass the client as a function provider\n})\n\n// Or use the client with AxGen\nconst memoryGen = new AxGen('input, userId -> response', {\n    functions: [client]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining AxChatRequest Type Structure in TypeScript\nDESCRIPTION: Defines the AxChatRequest generic type, which represents a structured chat request for AI interaction in the Ax LLM ecosystem. It specifies the shape and allowed values for properties such as chatPrompt, functionCall, functions, model, and modelConfig, enabling type-safe API interactions and extension for various model providers. Dependencies include AxFunctionJSONSchema and AxModelConfig type definitions. Inputs are objects conforming to this type; outputs are type-safe requests to be sent to AI endpoints. Limitations include reliance on correct typing and the necessity for up-to-date dependencies.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxChatRequest.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AxChatRequest<TModel = string> = {\n  chatPrompt: (\n    { cache: boolean; content: string; role: \"system\"; }\n    | {\n        content: string | (\n          { cache: boolean; text: string; type: \"text\"; }\n          | { cache: boolean; details: /* ... */; image: string; mimeType: string; type: \"image\"; }\n          | { cache: boolean; data: string; format: \"wav\"; type: \"audio\"; }\n        )[];\n        name: string;\n        role: \"user\";\n      }\n    | { cache: boolean; content: string; functionCalls: object[]; name: string; role: \"assistant\"; }\n    | { cache: boolean; functionId: string; isError: boolean; result: string; role: \"function\"; }\n  )[];\n  functionCall?: \"none\" | \"auto\" | \"required\" | { function: { name: string }; type: \"function\" };\n  functions?: Readonly<{ description: string; name: string; parameters: AxFunctionJSONSchema; }[]>;\n  model?: TModel;\n  modelConfig?: AxModelConfig;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MiPRO v2 Optimization in TypeScript\nDESCRIPTION: This snippet demonstrates the basic setup and usage of MiPRO v2 for prompt optimization. It involves importing necessary modules, setting up the AI service (AxAI), creating a program (AxChainOfThought), configuring the MiPRO optimizer (AxMiPRO) with training data and options like the number of trials and optimization level, defining an evaluation metric function, running the optimization process using `optimizer.compile()`, and finally using the resulting optimized program to make predictions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/12-tuning-mipro.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AxAI, AxChainOfThought, AxMiPRO } from '@ax-llm/ax'\n\n// 1. Setup your AI service\nconst ai = new AxAI({\n  name: 'google-gemini',\n  apiKey: process.env.GOOGLE_APIKEY\n})\n\n// 2. Create your program\nconst program = new AxChainOfThought(`input -> output`)\n\n// 3. Configure the optimizer\nconst optimizer = new AxMiPRO({\n  ai,\n  program,\n  examples: trainingData, // Your training examples\n  options: {\n    numTrials: 20,  // Number of configurations to try\n    auto: 'medium'  // Optimization level\n  }\n})\n\n// 4. Define your evaluation metric\nconst metricFn = ({ prediction, example }) => {\n  return prediction.output === example.output\n}\n\n// 5. Run the optimization\nconst optimizedProgram = await optimizer.compile(metricFn, {\n  valset: validationData  // Optional validation set\n})\n\n// 6. Use the optimized program\nconst result = await optimizedProgram.forward(ai, { input: \"test input\" })\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAI Embedding Request Type Interface - TypeScript\nDESCRIPTION: This snippet defines the AxAIOpenAIEmbedRequest generic TypeScript type for modeling the payload sent to the OpenAI Embeddings API. It uses a type parameter for the embedding model type, and contains properties for required input strings, the model identifier, optional user string for API tracking, and optional dimensionality override. The type ensures strict type checking for embedding requests, promoting clearer API integration and reducing bugs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAIEmbedRequest.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * AxAIOpenAIEmbedRequest<TEmbedModel> defines the structure for an OpenAI embedding API request.\n * @template TEmbedModel - The type representing the allowed model strings.\n */\nexport type AxAIOpenAIEmbedRequest<TEmbedModel> = {\n  /**\n   * The input text(s) to embed, as an array of read-only strings.\n   */\n  input: readonly string[];\n  /**\n   * The embedding model name to use for this request.\n   */\n  model: TEmbedModel;\n  /**\n   * Optionally, the user identifier for API tracking and quotas.\n   */\n  user?: string;\n  /**\n   * Optionally, override the returned embedding dimensionality.\n   */\n  dimensions?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Chat Requests with AxBalancer in TypeScript\nDESCRIPTION: Implements the `chat` method from the `AxAIService` interface. It accepts a chat request (`AxChatRequest`) and optional configuration (`AxAIPromptConfig`, `AxAIServiceActionOptions`), then forwards it to an underlying service selected by the balancing strategy. Returns a Promise resolving to either an `AxChatResponse` or a `ReadableStream<AxChatResponse>` for streaming.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchat(req, options?): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers for AxAIDeepSeek Requests (TypeScript)\nDESCRIPTION: Configures a function that provides custom headers for API requests made by the AxAIDeepSeek instance. Inherited from `AxAIOpenAIBase`, this method accepts an async function that returns a record of header key-value pairs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxFieldValue Union Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript union type `AxFieldValue`. It allows a variable of this type to hold various primitive types (string, number, boolean, null, undefined), arrays of strings or objects, specific object structures representing data with mime types or WAV audio format, or a general object. This type is defined within the ax-llm/ax project, specifically in the DSP program module.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxFieldValue.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxFieldValue**: `string` \\| `string`[] \\| `number` \\| `boolean` \\| `object` \\| `null` \\| `undefined` \\| \\{ `data`: `string`; `mimeType`: `string`; \\} \\| `object`[] \\| \\{ `data`: `string`; `format`: `\"wav\"`; \\} \\| `object`[]\n```\n\n----------------------------------------\n\nTITLE: Defining AxAICohereChatRequestToolResults Base Type in TypeScript\nDESCRIPTION: Defines the base type for `AxAICohereChatRequestToolResults` as an array of objects (`object[]`) in TypeScript. This indicates it's a collection where each element represents a tool result structure, defined in `src/ax/ai/cohere/types.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatRequestToolResults.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAICohereChatRequestToolResults**: `object`[]\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Service Name in AxAICohere in TypeScript\nDESCRIPTION: The setName method updates the registered service name, supporting environment-specific labeling, namespacing, or user customization flows. As a mutation method, it accepts a string and does not return anything, relying on correct argument validation elsewhere.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Constructing AxDBWeaviate Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `AxDBWeaviate` class. It accepts a single argument object containing properties defined in `AxDBWeaviateArgs` (excluding `name`) and returns a new instance of `AxDBWeaviate`. This constructor overrides the base class constructor `AxDBBase.constructor`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBWeaviate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxDBWeaviate(__namedParameters): AxDBWeaviate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Model List - TypeScript\nDESCRIPTION: This method returns either the list of currently available Gemini models (wrapped in the AxAIModelList type) or undefined if not supported. Enables dynamic UI/model discovery, filtering, or validation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Performing Chat Completion with AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` for handling chat requests. It takes an `AxChatRequest` object and optional configurations (`AxAIPromptConfig`, `AxAIServiceActionOptions`), returning a Promise that resolves to either a single `AxChatResponse` or a `ReadableStream` for streaming responses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchat(req, options?): Promise<AxChatResponse | ReadableStream<AxChatResponse>>\n```\n\n----------------------------------------\n\nTITLE: Getting Service Options in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the current configuration options (AxAIServiceOptions) for the AI service instance as a readonly object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemini15Flash Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemini15Flash` assigned the string value `\"gemini-1.5-flash\"`. This identifier specifies the Gemini 1.5 Flash model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nGemini15Flash: \"gemini-1.5-flash\"\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAIArgs Union Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `AxAIArgs` type alias. It is a union type that combines the specific argument types for various AI providers like OpenAI, Azure OpenAI, Together, Anthropic, Groq, Google Gemini, Cohere, HuggingFace, Mistral, DeepSeek, Ollama, and Reka. This allows functions or classes to accept configuration objects for any of these supported AI services through a single, unified type. It relies on the pre-defined individual argument types (e.g., `AxAIOpenAIArgs`, `AxAIAzureOpenAIArgs`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIArgs**: [`AxAIOpenAIArgs`](/api/#03-apidocs/interfaceaxaiopenaiargs) \\| [`AxAIAzureOpenAIArgs`](/api/#03-apidocs/typealiasaxaiazureopenaiargs) \\| [`AxAITogetherArgs`](/api/#03-apidocs/typealiasaxaitogetherargs) \\| [`AxAIAnthropicArgs`](/api/#03-apidocs/interfaceaxaianthropicargs) \\| [`AxAIGroqArgs`](/api/#03-apidocs/typealiasaxaigroqargs) \\| [`AxAIGoogleGeminiArgs`](/api/#03-apidocs/interfaceaxaigooglegeminiargs) \\| [`AxAICohereArgs`](/api/#03-apidocs/interfaceaxaicohereargs) \\| [`AxAIHuggingFaceArgs`](/api/#03-apidocs/interfaceaxaihuggingfaceargs) \\| [`AxAIMistralArgs`](/api/#03-apidocs/typealiasaxaimistralargs) \\| [`AxAIDeepSeekArgs`](/api/#03-apidocs/typealiasaxaideepseekargs) \\| [`AxAIOllamaArgs`](/api/#03-apidocs/typealiasaxaiollamaargs) \\| [`AxAIRekaArgs`](/api/#03-apidocs/interfaceaxairekaargs)\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/wrap.ts#L48\n```\n\n----------------------------------------\n\nTITLE: Retrieving the AxFunction Descriptor with getFunction in TypeScript\nDESCRIPTION: This method exposes the function interface of the agent, returning the relevant AxFunction object for integration or documentation. Implements the corresponding AxAgentic method. No parameters; it returns the agent's current AxFunction definition, useful for programmatic introspection or dynamic agent utilization.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @returns {AxFunction}\n */\ngetFunction(): AxFunction {\n  // ...return function description...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Identifier via AxBaseAI in TypeScript\nDESCRIPTION: Exposes a method returning the unique string identifier for the AI service, as defined and inherited from AxBaseAI. Used for referencing, routing, or logging within the Ax ecosystem. Does not require parameters or special configuration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Upsert Operation - TypeScript\nDESCRIPTION: Implements the batchUpsert method of the AxDBService interface, allowing the insertion or update of multiple records atomically or in bulk. Accepts an array of upsert requests and an optional update flag, returning a Promise with the aggregated upsert response. Designed to facilitate efficient large-scale data operations in adapters, leveraging _batchUpsert if implemented in subclasses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBBase.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbatchUpsert(req: readonly AxDBUpsertRequest[], update?: boolean): Promise<AxDBUpsertResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `functions` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `functions` property for `AxGenOptions`. This property likely specifies the set of available functions (of type `AxInputFunctionType`) that the AI model can potentially call during the generation process.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **functions**: [`AxInputFunctionType`](/api/#03-apidocs/typealiasaxinputfunctiontype)\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemini15Flash002 Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemini15Flash002` assigned the string value `\"gemini-1.5-flash-002\"`. This likely specifies a particular version or variant of the Gemini 1.5 Flash model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nGemini15Flash002: \"gemini-1.5-flash-002\"\n```\n\n----------------------------------------\n\nTITLE: Documenting TypeScript Fields for AI and Model Properties\nDESCRIPTION: These field declarations specify that both 'ai' and 'model' properties must be strings, further clarifying the structure of the AxProgramUsage type. Requires TypeScript type syntax understanding; fields are vital for ensuring that objects correctly record both the AI platform/system and the specific model involved in a transaction.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxProgramUsage.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n### ai\n\n> **ai**: `string`\n\n### model\n\n> **model**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIEmbedModels Union Type in TypeScript\nDESCRIPTION: This TypeScript type alias `AxAIEmbedModels` defines a union type encompassing various supported AI embedding models. It allows functions or variables to accept instances of OpenAI, Google Gemini, or Cohere embedding models defined elsewhere in the library.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIEmbedModels.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIEmbedModels**: [`AxAIOpenAIEmbedModel`](/api/#03-apidocs/enumerationaxaiopenaiembedmodel) | [`AxAIGoogleGeminiEmbedModel`](/api/#03-apidocs/enumerationaxaigooglegeminiembedmodel) | [`AxAICohereEmbedModel`](/api/#03-apidocs/enumerationaxaicohereembedmodel)\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Request with AxAIServiceImpl in TypeScript\nDESCRIPTION: Defines the `createChatReq` method signature within the `AxAIServiceImpl` interface. This method is responsible for transforming an internal chat request and prompt configuration into an `AxAPI` object and a provider-specific chat request (`TChatRequest`). It takes a readonly `AxInternalChatRequest` and a readonly `AxAIPromptConfig` as input and returns a tuple containing the `AxAPI` instance and the `TChatRequest`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIServiceImpl.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChatReq(req: Readonly<AxInternalChatRequest<TModel>>, config: Readonly<AxAIPromptConfig>): [AxAPI, TChatRequest]\n```\n\n----------------------------------------\n\nTITLE: Initializing Anthropic AI Integration with AxBaseAI in TypeScript\nDESCRIPTION: Defines a typed constructor for the AxAIAnthropic class, allowing instantiation with specific Anthropic or Vertex model parameters that omit the 'name' property. Requires dependencies from the Ax core types such as AxAIAnthropicArgs and integrates with the broader Ax AI ecosystem via AxBaseAI. Input is a readonly configuration object, returning a configured AxAIAnthropic instance.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(__namedParameters: Readonly<Omit<AxAIAnthropicArgs, \\\"name\\\">>): AxAIAnthropic\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemini20FlashThinking Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemini20FlashThinking` assigned the string value `\"gemini-2.0-flash-thinking-exp-01-21\"`. This identifier specifies an experimental version of the Gemini 2.0 Flash model with thinking capabilities.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nGemini20FlashThinking: \"gemini-2.0-flash-thinking-exp-01-21\"\n```\n\n----------------------------------------\n\nTITLE: Defining Function JSON Schemas in TypeScript\nDESCRIPTION: This type declaration establishes AxFunctionJSONSchema as an object that models the structure of function schemas in TypeScript. It includes optional fields such as 'items' for nested schemas, 'properties' as a record mapping property names to further schemas, 'required' for listing mandatory properties, and a mandatory 'type' string. This type is intended for use in strongly typed validation or generation of function-related JSON schemas, and assumes TypeScript is set up in the environment.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxFunctionJSONSchema.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// AxFunctionJSONSchema: object\n//\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/types.ts#L59\n\n// Type declaration\n\ntype AxFunctionJSONSchema = {\n  items?: AxFunctionJSONSchema;\n  properties?: Record<string, AxFunctionJSONSchema> & object;\n  required?: string[];\n  type: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the AxModelConfig Type in TypeScript\nDESCRIPTION: Declares the `AxModelConfig` as an object type in TypeScript. This type aggregates various optional configuration parameters used to customize the behavior of AI models within the Ax framework. These parameters include `endSequences`, `frequencyPenalty`, `maxTokens`, `n`, `presencePenalty`, `stopSequences`, `stream`, `temperature`, `topK`, and `topP`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxModelConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Represents the configuration options for an AI model in the Ax framework.\n */\ntype AxModelConfig = {\n  /** Optional sequences where the API will stop generating further tokens. */\n  endSequences?: string[];\n\n  /** Optional penalty applied to repeated tokens to decrease likelihood. */\n  frequencyPenalty?: number;\n\n  /** Optional maximum number of tokens to generate in the completion. */\n  maxTokens?: number;\n\n  /** Optional number of completions to generate for each prompt. */\n  n?: number;\n\n  /** Optional penalty applied to new tokens based on their presence so far. */\n  presencePenalty?: number;\n\n  /** Optional sequences that will cause the model to stop generating. (Deprecated/Alternative to endSequences) */\n  stopSequences?: string[];\n\n  /** Optional flag to enable streaming of partial results. */\n  stream?: boolean;\n\n  /** Optional sampling temperature, controlling randomness. Higher values mean more randomness. */\n  temperature?: number;\n\n  /** Optional parameter for top-k sampling, considering only the top k most likely tokens. */\n  topK?: number;\n\n  /** Optional parameter for nucleus sampling, considering tokens with cumulative probability mass >= topP. */\n  topP?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Streaming Forward for Incremental Output Generation in AxGen (TypeScript)\nDESCRIPTION: Processes input using a supplied AI service and yields output as an asynchronous generator, returning output deltas and versioned updates. Accepts AI service, input values, and forward options; outputs Partial<OUT> deltas for each streamed chunk. Useful for applications requiring low-latency, chunked, or progressive output handling.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstreamingForward(ai: Readonly<AxAIService<unknown, unknown>>, values: IN, options?: Readonly<AxProgramStreamingForwardOptions>): AsyncGenerator<{ delta: Partial<OUT>; version: number }, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional Reranker Property Type in AxDBLoaderOptions\nDESCRIPTION: Defines the type for the optional `reranker` property in `AxDBLoaderOptions`. It expects an instance of `AxProgram` specialized with `AxRerankerIn` as input and `AxRerankerOut` as output. This program is intended to reorder or refine search results based on relevance or other criteria.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBLoaderOptions.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nAxProgram<AxRerankerIn, AxRerankerOut>\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAIGoogleGeminiGenerationConfig Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `AxAIGoogleGeminiGenerationConfig` object type. It includes optional properties like `candidateCount`, `maxOutputTokens`, `stopSequences`, `temperature`, `topK`, and `topP` to control the generation process of the Google Gemini AI model within the Ax framework. These parameters allow customization of the output, such as the number of candidates generated, maximum token length, stopping criteria, randomness, and sampling strategies (top-K, top-P).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiGenerationConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIGoogleGeminiGenerationConfig**: `object`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/google-gemini/types.ts#L107\n\n## Type declaration\n\n<a id=\"candidateCount\"></a>\n\n### candidateCount?\n\n> `optional` **candidateCount**: `number`\n\n<a id=\"maxOutputTokens\"></a>\n\n### maxOutputTokens?\n\n> `optional` **maxOutputTokens**: `number`\n\n<a id=\"stopSequences\"></a>\n\n### stopSequences?\n\n> `optional` **stopSequences**: readonly `string`[]\n\n<a id=\"temperature\"></a>\n\n### temperature?\n\n> `optional` **temperature**: `number`\n\n<a id=\"topK\"></a>\n\n### topK?\n\n> `optional` **topK**: `number`\n\n<a id=\"topP\"></a>\n\n### topP?\n\n> `optional` **topP**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining BlockOnlyHigh Safety Threshold Value in TypeScript\nDESCRIPTION: Defines the `BlockOnlyHigh` member of the `AxAIGoogleGeminiSafetyThreshold` enumeration. This threshold blocks only content classified as high harm probability.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiSafetyThreshold.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nBlockOnlyHigh: \"BLOCK_ONLY_HIGH\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating AxApacheTika Class in TypeScript\nDESCRIPTION: This constructor initializes a new instance of the AxApacheTika class, designed to interact with Apache Tika for document conversion. It accepts an optional argument object of type AxApacheTikaArgs, allowing users to specify configuration parameters. The output is an initialized AxApacheTika instance, ready to perform file conversions. Required dependencies include the definition of AxApacheTika, as well as (optionally) the AxApacheTikaArgs interface. No files are processed at construction, and no asynchronous operations are performed.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxApacheTika.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew AxApacheTika(args?): AxApacheTika\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Pinecone with TypeScript\nDESCRIPTION: The query method enables searching records in Pinecone indexes. It accepts an immutable AxDBQueryRequest and optional options for the operation, returning a Promise that resolves to AxDBQueryResponse. Dependencies include AxDBBase for method inheritance and proper request/response type imports. Parameters determine the query filter and result shaping; unexpected formats or network errors may result in failure.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBPinecone.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync query(\n  req: Readonly<AxDBQueryRequest>,\n  options?: Readonly<AxDBBaseOpOptions>\n): Promise<AxDBQueryResponse>;\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Loading Data with loadData Method in TypeScript\nDESCRIPTION: This method asynchronously loads data rows, returning a promise that resolves to an array of AxDataRow objects once data loading is complete. It typically handles the main data acquisition logic from configured sources such as a HuggingFace dataset. No arguments are required, and consumers must await the returned promise to access the loaded data. Subsequent calls may reload data if the underlying source has changed.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxHFDataLoader.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nloadData(): Promise<AxDataRow[]>\n```\n\n----------------------------------------\n\nTITLE: Adding an Entry to AxMemory in TypeScript\nDESCRIPTION: Defines the `add` method for the AxMemory class. It adds a new chat message or a list of messages to the memory for a specific session or the default session if `sessionId` is omitted. The `value` parameter can be a single complex message object (system, user, assistant, function) or an array of such objects.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxMemory.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nadd(value, sessionId?): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxModelInfo Object Type in TypeScript\nDESCRIPTION: This TypeScript type defines the structure `AxModelInfo` used to store metadata for AI models. It includes a mandatory `name` property and optional properties for `aliases`, tokenization behavior (`characterIsToken`), cost per million tokens (`completionTokenCostPer1M`, `promptTokenCostPer1M`), and `currency`. This type is defined in the `ax-llm/ax` project.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxModelInfo.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/types.ts#L20\ntype AxModelInfo = {\n  /**\n   * Optional aliases for the model name.\n   */\n  aliases?: string[];\n\n  /**\n   * Optional flag indicating if a character is treated as a token.\n   */\n  characterIsToken?: boolean;\n\n  /**\n   * Optional cost per 1 million completion tokens.\n   */\n  completionTokenCostPer1M?: number;\n\n  /**\n   * Optional currency for cost calculation.\n   */\n  currency?: string;\n\n  /**\n   * The mandatory name of the model.\n   */\n  name: string;\n\n  /**\n   * Optional cost per 1 million prompt tokens.\n   */\n  promptTokenCostPer1M?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring AxRewriteOut Object Type - TypeScript\nDESCRIPTION: This code defines the AxRewriteOut object type with a required rewrittenQuery property of type string. It is intended to represent the output of query rewriting operations in the Ax project and ensures type safety when accessing rewritten query results. No external dependencies are required, and the expected input/output strictly adheres to the specified type definition. Limitations include the lack of additional fields; only rewrittenQuery is handled.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxRewriteOut.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AxRewriteOut = {\n  rewrittenQuery: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract _batchUpsert Property - TypeScript\nDESCRIPTION: Defines an optional property _batchUpsert that, if implemented, handles batch upsert operations for an array of upsert requests. Takes parameters for the batch request array, a boolean update flag, and optional operation options, returning a Promise with the upsert response. This allows adapter-specific optimizations for bulk data insertion or updating.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBBase.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n_batchUpsert?: (batchReq: readonly AxDBUpsertRequest[], update?: boolean, options?: Readonly<AxDBBaseOpOptions>) => Promise<AxDBUpsertResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIPromptConfig Type in TypeScript\nDESCRIPTION: This snippet declares the AxAIPromptConfig type as a TypeScript object with an optional boolean property, 'stream'. It is intended to specify configuration options for AI prompt handling, where 'stream' determines whether the response should be streamed. This relies on TypeScript's type system and is typically used in settings where prompt behavior must be programmatically controlled; if 'stream' is omitted or false, standard (non-streaming) responses are expected.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIPromptConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * AxAIPromptConfig contains configuration for AI prompt handling.\n *\n * @property stream - If true, the prompt response will be streamed rather than returned all at once.\n */\nexport type AxAIPromptConfig = {\n  stream?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Forwarding Text with AxRouter (TypeScript)\nDESCRIPTION: Defines the 'forward' method signature for the AxRouter class. This asynchronous method takes a required string 'text' and optional readonly 'options' (AxRouterForwardOptions). It returns a Promise that resolves to a string, representing the result of routing the input text through the configured AI service and routes.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRouter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nforward(text: string, options?: Readonly<AxRouterForwardOptions>): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'examples' Property Type in TypeScript\nDESCRIPTION: Defines the `examples` property within the `AxOptimizerArgs` type. It holds a read-only array of `AxExample` objects, providing example input/output pairs for the optimization process.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxOptimizerArgs.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexamples: Readonly<AxExample[]>\n```\n\n----------------------------------------\n\nTITLE: Declaring AxAICohereChatResponseToolCalls Type Alias in TypeScript\nDESCRIPTION: This type alias `AxAICohereChatResponseToolCalls` defines the structure as an array of generic objects. It's used to represent tool calls within a Cohere chat response in the Ax framework. The specific structure of the objects within the array includes 'name' and optional 'parameters'.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatResponseToolCalls.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAICohereChatResponseToolCalls**: `object`[]\n```\n\n----------------------------------------\n\nTITLE: Single-Step Reranker Pass (Internal) - AxGen - TypeScript\nDESCRIPTION: The _forward1 method provides a low-level, single-step reranker operation as an async generator, useful for debugging or custom streaming integrations. Accepts AxAIService for communication, input values, and required options. It yields objects with the current output delta and version; all involved types must be imported from the Ax package.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n_forward1(\n  ai: Readonly<AxAIService<unknown, unknown>>,\n  values: AxRerankerIn,\n  options: Readonly<AxProgramForwardOptions>\n): AsyncGenerator<{ delta: Partial<AxRerankerOut>; version: number }, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: Adding Streaming Assertion Function to AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method adds an assertion function (`fn`) specifically for validating the content of a streaming output field (`fieldName`) as it's being generated. The function receives the accumulated `content` and a `done` flag. An optional `message` can be provided for failures.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddStreamingAssert(fieldName: string, fn: (content: string, done?: boolean) => undefined | boolean, message?: string): void\n```\n\n----------------------------------------\n\nTITLE: Internal Batch Upsert Method (_batchUpsert) in AxDBMemory (TypeScript)\nDESCRIPTION: Defines the internal implementation for batch upserting data into the in-memory database. It accepts an array of upsert requests (`batchReq`), an optional boolean `update` flag, and optional operation options (`_options`). It returns a Promise resolving to an AxDBUpsertResponse. This method overrides the corresponding method in AxDBBase.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n_batchUpsert(batchReq: readonly AxDBUpsertRequest[], update?: boolean, _options?: Readonly<AxDBBaseOpOptions>): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Executing Internal Forward Pass for AxGen in TypeScript\nDESCRIPTION: An internal method inherited from `AxGen` likely handling the core logic for streaming generation. It accepts an AI service (`ai`), input values (`values` of type `AxRewriteIn`), and program options (`options`), returning an AsyncGenerator that yields partial outputs (`delta` of type `Partial<AxRewriteOut>`) along with a version number.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n_forward1(ai: Readonly<AxAIService<unknown, unknown>>, values: AxRewriteIn, options: Readonly<AxProgramForwardOptions>): AsyncGenerator<{ delta: Partial<AxRewriteOut>; version: number; }, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining the AxEmbedResponse Type in TypeScript\nDESCRIPTION: Describes the structure of the `AxEmbedResponse` type alias or interface in TypeScript. This object type represents the response from an embedding generation process. It includes a mandatory `embeddings` property (a read-only nested array of numbers), and optional properties for `modelUsage` (linking to `AxTokenUsage`), `remoteId` (string), and `sessionId` (string). The type is defined within the `ax-llm/ax` project.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxEmbedResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Type Definition for AxEmbedResponse (object)\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/types.ts#L104\n\ntype AxEmbedResponse = {\n  /**\n   * The generated embeddings.\n   */\n  readonly embeddings: readonly readonly number[][];\n\n  /**\n   * Optional: Token usage information.\n   * Type: AxTokenUsage (defined elsewhere)\n   */\n  readonly modelUsage?: AxTokenUsage;\n\n  /**\n   * Optional: Remote identifier string.\n   */\n  readonly remoteId?: string;\n\n  /**\n   * Optional: Session identifier string.\n   */\n  readonly sessionId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Trace Span Kind Enumeration - TypeScript\nDESCRIPTION: This TypeScript snippet declares an enumeration (or similar mapping) named AxSpanKindValues with string literal members: 'agent', 'workflow', 'task', 'tool', and 'unknown'. Each member represents a different category of trace span within the tracing framework. Dependencies include TypeScript, and it assumes usage within a broader application that leverages the Ax tracing module. Inputs are the enumeration keys (AGENT, TASK, TOOL, UNKNOWN, WORKFLOW), each mapped to a string value. Outputs are the values available for use elsewhere in the Ax library as clear, semantic annotations for tracing contexts. There are no complex constraints; all members are simple strings.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxSpanKindValues.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum AxSpanKindValues {\n  AGENT = \"agent\",\n  WORKFLOW = \"workflow\",\n  TASK = \"task\",\n  TOOL = \"tool\",\n  UNKNOWN = \"unknown\"\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing AxAIReka Instance with Configuration - TypeScript\nDESCRIPTION: Demonstrates the constructor for the AxAIReka class, which receives named parameters omitting the 'name' property from AxAIRekaArgs and returns an instance of AxAIReka. This constructor extends the AxBaseAI constructor and expects a strictly typed, readonly configuration object. The key parameter, __namedParameters, enforces immutability and omission of internal identifier fields. Outputs an initialized AxAIReka AI provider instance. Requires the Ax framework and TypeScript generics support.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(__namedParameters: Readonly<Omit<AxAIRekaArgs, \"name\">>): AxAIReka\n```\n\n----------------------------------------\n\nTITLE: Declaring Texts Property in AxAICohereEmbedResponse TypeScript Type\nDESCRIPTION: This property within the `AxAICohereEmbedResponse` type contains the original input texts that were sent to the Cohere API for embedding. It is declared as an array of strings (`string[]`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereEmbedResponse.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntexts: string[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Usage Data with getUsage in TypeScript\nDESCRIPTION: The getUsage() function combines AxTokenUsage statistics with arbitrary object metadata, providing insights into resource utilization for the AxProgram. Designed to comply with the AxUsable interface, it returns comprehensive usage metrics as an array of token usage and related contextual objects for downstream cost analysis or monitoring.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetUsage(): AxTokenUsage & object[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Execution Traces of AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method returns an array of `AxProgramTrace` objects. These traces contain information about the program's execution steps, including interactions with the AI service and intermediate results.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetTraces(): AxProgramTrace[]\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAIOpenAIConfig Type in TypeScript\nDESCRIPTION: This TypeScript type definition, `AxAIOpenAIConfig`, configures interactions with OpenAI models. It extends `AxModelConfig` but omits the `topK` property, adding OpenAI-specific fields like `model` (required), `embedModel` (optional), `bestOf`, `dimensions`, `echo`, `logitBias`, `logprobs`, `reasoningEffort`, `responseFormat`, `stop`, `store`, `suffix`, and `user`. It accepts two generic type parameters, `TModel` and `TEmbedModel`, to specify the types for the main model and the embedding model respectively.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAIConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIOpenAIConfig**<`TModel`, `TEmbedModel`>: `Omit`<[`AxModelConfig`](/api/#03-apidocs/typealiasaxmodelconfig), `\"topK\"`> & `object`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### bestOf?\n\n> `optional` **bestOf**: `number`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### dimensions?\n\n> `optional` **dimensions**: `number`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### echo?\n\n> `optional` **echo**: `boolean`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### embedModel?\n\n> `optional` **embedModel**: `TEmbedModel`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### logitBias?\n\n> `optional` **logitBias**: `Map`<`string`, `number`>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### logprobs?\n\n> `optional` **logprobs**: `number`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### model\n\n> **model**: `TModel`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### reasoningEffort?\n\n> `optional` **reasoningEffort**: `\"low\"` | `\"medium\"` | `\"high\"`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### responseFormat?\n\n> `optional` **responseFormat**: `\"json_object\"`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### stop?\n\n> `optional` **stop**: `string`[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### store?\n\n> `optional` **store**: `boolean`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### suffix?\n\n> `optional` **suffix**: `string` | `null`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### user?\n\n> `optional` **user**: `string`\n```\n\n----------------------------------------\n\nTITLE: Get Output Signature - AxGen - TypeScript\nDESCRIPTION: The getSignature method returns the AxSignature object describing the program's expected inputs and outputs, for runtime introspection or contract checking. No input parameters required. AxSignature type is defined in the Ax framework and required to be available.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetSignature(): AxSignature\n```\n\n----------------------------------------\n\nTITLE: Defining AxDBArgs Type Alias for Multi-Backend Support - TypeScript\nDESCRIPTION: This snippet defines the AxDBArgs type as a union of several argument interfaces: AxDBCloudflareArgs, AxDBPineconeArgs, AxDBWeaviateArgs, and AxDBMemoryArgs. These interfaces serve as configuration blueprints for different storage or vector backends supported by the Ax library. The type enables functions or classes to accept options for any supported backend, providing type safety and extensibility for developers implementing AxDB connections. No runtime dependencies are required; these are pure type definitions. Inputs and outputs are related to the specific backend configuration properties as outlined by each interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDBArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxDBArgs = AxDBCloudflareArgs | AxDBPineconeArgs | AxDBWeaviateArgs | AxDBMemoryArgs;\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI getDefaultModels() Method Signature in TypeScript\nDESCRIPTION: Defines the `getDefaultModels` method which retrieves the default model identifiers used by the AI service instance. It returns a read-only object containing the default chat model (`model`) and embedding model (`embedModel`) names as strings. This method implements the `getDefaultModels` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Getting the Last Entry from AxMemory in TypeScript\nDESCRIPTION: Defines the `getLast` method for the AxMemory class. It retrieves the most recent entry (including its associated tags) from the memory for the specified session or the default session. Returns `undefined` if the memory for the session is empty.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxMemory.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetLast(sessionId?): undefined | { chat: { cache: boolean; content: string; role: \"system\"; } | { content: string | ({ cache: boolean; text: string; type: \"text\"; } | { cache: boolean; details: \"high\" | \"low\" | \"auto\"; image: string; mimeType: string; type: \"image\"; } | { cache: boolean; data: string; format: \"wav\"; type: \"audio\"; })[]; name: string; role: \"user\"; } | { cache: boolean; content: string; functionCalls: object[]; name: string; role: \"assistant\"; } | { cache: boolean; functionId: string; isError: boolean; result: string; role: \"function\"; }; tags: string[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIGoogleGeminiContent Type in TypeScript\nDESCRIPTION: This TypeScript type alias, `AxAIGoogleGeminiContent`, defines the structure for content objects used in interactions with Google Gemini AI. It supports different roles ('user', 'model', 'function') and various content part types including text, inline data (base64 encoded), and file data URIs, with the structure varying based on the role. Defined in `src/ax/ai/google-gemini/types.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiContent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIGoogleGeminiContent**: \\{ `parts`: (\\{ `text`: `string`; \\} \\| \\{ `inlineData`: \\{ `data`: `string`; `mimeType`: `string`; \\}; \\} \\| \\{ `fileData`: \\{ `fileUri`: `string`; `mimeType`: `string`; \\}; \\})[]; `role`: `\"user\"`; \\} \\| \\{ `parts`: `object`[] \\| `object`[]; `role`: `\"model\"`; \\} \\| \\{ `parts`: `object`[]; `role`: `\"function\"`; \\}\n```\n\n----------------------------------------\n\nTITLE: Adding Streaming Field Processor (addStreamingFieldProcessor) (TypeScript)\nDESCRIPTION: Adds a processor function for a specific output field that operates on streamed content *during* generation. Inherited from AxChainOfThought. Allows for processing or transformation of field content as it arrives. Takes the target `fieldName` and the processing function `fn`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddStreamingFieldProcessor(fieldName: string, fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess): void\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIRekaConfig Type Using TypeScript Utility Types\nDESCRIPTION: This snippet defines the AxAIRekaConfig type in TypeScript by omitting the 'topK' field from the base AxModelConfig type and composing it with an object type. Key properties include a required 'model' parameter referencing the AxAIRekaModel enumeration, and optional 'stop' (an array of string stop sequences) and 'useSearchEngine' (boolean flag to enable search engine usage). Inputs are values matching the type structure, and there are no outputs as this defines type structure rather than executable code.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIRekaConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nOmit<AxModelConfig, \"topK\"> & {\n  model: AxAIRekaModel;\n  stop?: readonly string[];\n  useSearchEngine?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Batch Upsert Method (batchUpsert) from AxDBBase (TypeScript)\nDESCRIPTION: Public method for batch upserting data. It takes an array of upsert requests (`req`) and an optional `update` flag. It returns a Promise resolving to an AxDBUpsertResponse. This method is inherited from the AxDBBase class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbatchUpsert(req: readonly AxDBUpsertRequest[], update?: boolean): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Serializing AxSignature to JSON Schema in TypeScript\nDESCRIPTION: The toJSONSchema method serializes the signature into an AxFunctionJSONSchema, a format suitable for interoperability or validation. No parameters are necessary, and the return is a full schema representation. This is typically used for API definition, documentation, or code generation. Requires a correct AxFunctionJSONSchema type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoJSONSchema(): AxFunctionJSONSchema\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Identifier for AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method sets the identifier (`parentId`) of a parent program. This helps establish hierarchical relationships between program instances, often used in tracing complex execution flows.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nsetParentId(parentId: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `fastFail` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `fastFail` property for `AxGenOptions`. This boolean property likely controls whether the generation process should stop immediately upon the first failure (e.g., an assertion failure).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **fastFail**: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `description` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `description` property for `AxGenOptions`. This property is a string, likely used to provide a textual description or context for the generation task.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **description**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIAnthropicArgs Interface - TypeScript\nDESCRIPTION: This TypeScript code defines the AxAIAnthropicArgs interface, specifying parameters for configuring the Anthropic API integration within the Ax framework. It includes optional fields for apiKey, config, options, models, projectId, and region, as well as a required name property. Dependencies include AxAIAnthropicConfig, AxAIServiceOptions, AxAIInputModelList, and referenced enumerations, which must be accessible within the consuming project. All parameters are strongly typed to ensure type safety during implementation and integration. The expected input is a configuration object where each property is either a string or another type referenced by the Ax type system; the output is an object conforming to the interface for use in downstream API calls.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AxAIAnthropicArgs {\n  /**\n   * optional API key for Anthropic\n   */\n  apiKey?: string;\n\n  /**\n   * The provider name, fixed for this integration\n   */\n  name: \"anthropic\";\n\n  /**\n   * Optional project identifier\n   */\n  projectId?: string;\n\n  /**\n   * Optional region string e.g., \"us-central1\"\n   */\n  region?: string;\n\n  /**\n   * Optional configuration options for Anthropic API\n   */\n  config?: Readonly<Partial<AxAIAnthropicConfig>>;\n\n  /**\n   * Optional service-level options\n   */\n  options?: Readonly<AxAIServiceOptions>;\n\n  /**\n   * List of supported models\n   */\n  models?: AxAIInputModelList<AxAIAnthropicModel | AxAIAnthropicVertexModel>;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Apache Tika for Document Extraction (Shell)\nDESCRIPTION: Illustrates how to launch the Apache Tika document processing engine as a Docker container, exposing port 9998 for REST API access. This is a prerequisite for converting documents (e.g., PDF, DOCX) into plain text for further processing. Requires Docker installed and network access; expected input is the command line, and result is an accessible Tika service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/05-rag.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 9998:9998 apache/tika\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional embedModel Property in AxAICohereConfig (TypeScript)\nDESCRIPTION: Declares an optional property `embedModel` within the `AxAICohereConfig` type. This property specifies the Cohere embedding model to be used, referencing the `AxAICohereEmbedModel` enumeration. Being optional, it allows configurations that may not require a specific embedding model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereConfig.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n### embedModel?\n\n> `optional` **embedModel**: [`AxAICohereEmbedModel`](/api/#03-apidocs/enumerationaxaicohereembedmodel)\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAgent Instances via Constructor in TypeScript\nDESCRIPTION: This constructor snippet shows how to create a new AxAgent instance by providing structured parameters such as agent children, AI service, definition, descriptions, functions, and signatures, with optional agent options. Dependencies include the ax-llm type system for agent composition and AI services. Constructor parameters are strictly typed and encode agent identity, features, and composition. Outputs an initialized AxAgent object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param {Readonly<{ agents: AxAgentic[]; ai: Readonly<AxAIService<unknown, unknown>>; definition: string; description: string; functions: AxFunction[]; name: string; signature: string | AxSignature; }>} __namedParameters\n * @param {Readonly<AxAgentOptions>=} options\n * @returns {AxAgent<IN, OUT>}\n */\nconstructor(\n  __namedParameters: Readonly<{\n    agents: AxAgentic[];\n    ai: Readonly<AxAIService<unknown, unknown>>;\n    definition: string;\n    description: string;\n    functions: AxFunction[];\n    name: string;\n    signature: string | AxSignature;\n  }>,\n  options?: Readonly<AxAgentOptions>\n)\n\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Traces (getTraces) (TypeScript)\nDESCRIPTION: Retrieves the execution traces recorded during the program's run, capturing interactions with the AI service and intermediate steps. Inherited from AxChainOfThought. Returns an array of AxProgramTrace objects, useful for debugging and monitoring.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetTraces(): AxProgramTrace[]\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with Deepseek Defaults in TypeScript\nDESCRIPTION: Shows the initialization of AxAI for Deepseek, a provider known for high-quality models from China. Requires the DEEPSEEK_APIKEY environment variable. No advanced configuration is set, using all default settings.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'deepseek',\n  apiKey: process.env.DEEPSEEK_APIKEY as string\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Request Handling - TypeScript\nDESCRIPTION: Describes the 'embed' method, which processes embedding requests with optional service action options. Inputs are a Readonly embedding request and optional configuration; the method returns a promise with the embedding response. It is inherited from AxBaseAI and requires correct model and request typing, as well as the embedding types defined in the framework. Focused on returning consistent embeddings for input data via the AI provider.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nembed(\n  req: Readonly<AxEmbedRequest<undefined>>,\n  options?: Readonly<AxAIServiceActionOptions<AxAIRekaModel, undefined>>\n): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining Database Query Interface with TypeScript\nDESCRIPTION: The snippet defines the AxDBQueryService interface with a single method, query, which takes a readonly AxDBQueryRequest and returns a Promise resolving to an AxDBQueryResponse. This method establishes the contract for database queries, ensuring that requests and responses adhere to specified types for safety and consistency. Dependencies include the AxDBQueryRequest and AxDBQueryResponse type aliases, and it is designed for extension by other interfaces such as AxDBService for customizable database handling.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBQueryService.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AxDBQueryService {\n  query(req: Readonly<AxDBQueryRequest>): Promise<AxDBQueryResponse>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Embeddings Property in AxAICohereEmbedResponse TypeScript Type\nDESCRIPTION: This property within the `AxAICohereEmbedResponse` type holds the generated embedding vectors. It is declared as a two-dimensional array of numbers (`number[][]`), where each inner array represents the embedding vector for a corresponding input text.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereEmbedResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nembeddings: number[][]\n```\n\n----------------------------------------\n\nTITLE: Declaring AxFunction TypeScript Object Type\nDESCRIPTION: Declares the AxFunction type, outlining required fields (description, func, name) and an optional parameters property typed as AxFunctionJSONSchema. This type serves as a contract for objects representing function metadata and handlers in the ax-llm/ax codebase. Dependencies include AxFunctionHandler (which defines the function signature) and an optional JSON schema type for parameters. Input fields include strings for description and name, and typed function references; the type ensures consistency for describing and invoking LLM-related functions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxFunction.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nobject {\n  description: string;\n  func: AxFunctionHandler;\n  name: string;\n  parameters?: AxFunctionJSONSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Tracing for AxAI in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up basic OpenTelemetry tracing for an AxAI workflow. It initializes a `BasicTracerProvider`, adds a `ConsoleSpanExporter` via a `SimpleSpanProcessor`, sets the global tracer provider, retrieves a tracer instance, and configures an `AxAI` instance to use this tracer when creating and running an `AxChainOfThought` program.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { trace } from '@opentelemetry/api';\nimport {\n  BasicTracerProvider,\n  ConsoleSpanExporter,\n  SimpleSpanProcessor\n} from '@opentelemetry/sdk-trace-base';\n\nconst provider = new BasicTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\ntrace.setGlobalTracerProvider(provider);\n\nconst tracer = trace.getTracer('test');\n\nconst ai = new AxAI({\n  name: 'ollama',\n  config: { model: 'nous-hermes2' },\n  options: { tracer }\n});\n\nconst gen = new AxChainOfThought(\n  ai,\n  `text -> shortSummary \"summarize in 5 to 10 words\"`\n);\n\nconst res = await gen.forward({ text });\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI getModelList() Method Signature in TypeScript\nDESCRIPTION: Defines the `getModelList` method used to fetch the list of available models supported by the AI service. It returns an `AxAIModelList` object detailing the models, or `undefined` if the service doesn't provide this information. This method implements the `getModelList` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Models for Google Gemini Service - TypeScript\nDESCRIPTION: This method retrieves the default chat and embed model identifiers used by the service as a read-only object. It returns an object with \\\"embedModel\\\" and \\\"model\\\" keys, each string-valued, allowing consumers to query what defaults will be used if no overrides are specified in requests.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `maxSteps` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `maxSteps` property for `AxGenOptions`. This numeric property likely limits the maximum number of steps or iterations the generation process can take.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **maxSteps**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `functionCall` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `functionCall` property for `AxGenOptions`. This property configures how function calls should be handled during generation, allowing options like automatic selection (`\"auto\"`), no function calls (`\"none\"`), requiring a specific function, or requiring any function (`\"required\"`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **functionCall**: `\"auto\"` \\| \\{ `function`: \\{ `name`: `string`; \\}; `type`: `\"function\"`; \\} \\| `\"none\"` \\| `\"required\"`\n```\n\n----------------------------------------\n\nTITLE: Getting Model Configuration with AxAIServiceImpl in TypeScript\nDESCRIPTION: Defines the `getModelConfig` method signature within the `AxAIServiceImpl` interface. This method is responsible for returning the configuration details (`AxModelConfig`) associated with the specific AI model being used by the service implementation. It takes no parameters.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIServiceImpl.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelConfig(): AxModelConfig\n```\n\n----------------------------------------\n\nTITLE: Rewinding AxMemory to a Specific Tag in TypeScript\nDESCRIPTION: Defines the `rewindToTag` method for the AxMemory class. It removes all memory entries that were added after the entry associated with the specified tag `name` for the given session. It returns the resulting history up to the point just before the tagged entry.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxMemory.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrewindToTag(name, sessionId?): ({ cache: boolean; content: string; role: \"system\"; } | { content: string | ({ cache: boolean; text: string; type: \"text\"; } | { cache: boolean; details: \"high\" | \"low\" | \"auto\"; image: string; mimeType: string; type: \"image\"; } | { cache: boolean; data: string; format: \"wav\"; type: \"audio\"; })[]; name: string; role: \"user\"; } | { cache: boolean; content: string; functionCalls: object[]; name: string; role: \"assistant\"; } | { cache: boolean; functionId: string; isError: boolean; result: string; role: \"function\"; })[]\n```\n\n----------------------------------------\n\nTITLE: Converting AxDockerSession to AxFunction in TypeScript\nDESCRIPTION: Converts the AxDockerSession instance into an `AxFunction` type. This is likely used for integrating Docker operations managed by this session into a higher-level functional programming or workflow abstraction layer provided by the ax-llm framework. The method returns the `AxFunction` representation synchronously.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntoFunction(): AxFunction\n```\n\n----------------------------------------\n\nTITLE: Defining the traces Property for AxProgramDemos in TypeScript\nDESCRIPTION: Defines the `traces` property within the `AxProgramDemos` object. This property is an array of records, where each record maps string keys to `AxFieldValue` types. This structure likely represents program execution traces or examples. It depends on the `AxFieldValue` type definition, which is referenced externally.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxProgramDemos.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntraces: Record<string, AxFieldValue>[]\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `tracer` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `tracer` property for `AxGenOptions`. This property accepts a `Tracer` object, likely used for logging, monitoring, or debugging the execution flow of the generation process.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **tracer**: `Tracer`\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional models Property in AxBaseAIArgs (TypeScript)\nDESCRIPTION: This snippet defines the optional `models` property within AxBaseAIArgs. It accepts an `AxAIInputModelList` type, parameterized with `TModel`, likely for specifying a list of available or input models.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxBaseAIArgs.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmodels?: `AxAIInputModelList`\\<`TModel`\\>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configured Service Name - TypeScript\nDESCRIPTION: Implements getName for returning the configured string name of the AxAI service implementation. This distinguishes the provider or named instance, assisting in orchestration or debugging. Returns a string and requires no parameters.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Defining the 'program' Property Type in TypeScript\nDESCRIPTION: Defines the `program` property within the `AxOptimizerArgs` type. It holds a read-only instance of `AxProgram` parameterized with the generic types `IN` and `OUT`, representing the program to be optimized.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxOptimizerArgs.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nprogram: Readonly<AxProgram<IN, OUT>>\n```\n\n----------------------------------------\n\nTITLE: Setting Groq API Headers Dynamically in TypeScript\nDESCRIPTION: The setHeaders method configures a header provider function that asynchronously supplies request headers for each API call. The parameter is a function returning a Promise of a record; this enhances flexibility and security for auth scenarios. No output is returned.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Headers Provider - TypeScript\nDESCRIPTION: Shows the 'setHeaders' method, which enables defining a headers function returning a Promise that resolves to a key-value record for HTTP headers. It is necessary for runtime configuration of API authentication or custom headers. The method itself takes a function as input and has no output. Inherited from AxBaseAI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Defining Google Gemini Embed Model Enumeration in TypeScript\nDESCRIPTION: This TypeScript code snippet defines an enumeration representing the supported Google Gemini embedding model names, providing type-safe access to model versions (\\\"text-embedding-004\\\" and \\\"text-embedding-005\\\"). There are no explicit dependencies beyond TypeScript itself, and the enumeration allows referencing model names throughout the codebase without hardcoding strings. Inputs and outputs are limited to compile-time type safety for embedding model designations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiEmbedModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AxAIGoogleGeminiEmbedModel {\n  TextEmbedding004 = \"text-embedding-004\",\n  TextEmbedding005 = \"text-embedding-005\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the modelInfo Property in AxBaseAIArgs (TypeScript)\nDESCRIPTION: This snippet defines the `modelInfo` property for AxBaseAIArgs. It's a read-only array containing objects of type `AxModelInfo`, providing metadata about the available AI models.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxBaseAIArgs.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodelInfo: readonly [`AxModelInfo`](/api/#03-apidocs/typealiasaxmodelinfo)[]\n```\n\n----------------------------------------\n\nTITLE: Declaring Google Gemini Batch Embed Request Type in TypeScript\nDESCRIPTION: Defines the AxAIGoogleGeminiBatchEmbedRequest type as an object containing a 'requests' property, which is an array of objects. This type is intended for use when forming batch embedding requests to the Google Gemini API. The snippet presumes dependencies on the TypeScript type system and is typically used when creating or validating payloads to ensure correct request structuring for the API; inputs are arrays of embedding requests, with output being type safety and predictability in development.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiBatchEmbedRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAxAIGoogleGeminiBatchEmbedRequest: {\n  requests: object[];\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting AxMemory in TypeScript\nDESCRIPTION: Defines the `reset` method for the AxMemory class. It clears all entries from the memory for the specified session. If `sessionId` is omitted, it might reset the default or potentially all sessions depending on implementation details.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxMemory.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nreset(sessionId?): void\n```\n\n----------------------------------------\n\nTITLE: Defining the apiURL Property in AxBaseAIArgs (TypeScript)\nDESCRIPTION: This snippet defines the `apiURL` property for the AxBaseAIArgs type. It specifies the base URL endpoint for the AI service API as a string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxBaseAIArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiURL: `string`\n```\n\n----------------------------------------\n\nTITLE: Declaring getLast method for AxAIMemory - TypeScript\nDESCRIPTION: Declares the 'getLast' method to retrieve the most recent chat and its associated tags for a given session. Accepts an optional sessionId and returns either undefined or a complex object containing the latest chat entry (with full union-typed payloads) and an array of associated tags. Strong typing ensures chat payload integrity for all possible message roles.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIMemory.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetLast(sessionId?: string): undefined | { chat: { cache: boolean; content: string; role: \"system\"; }\n  | { content: string | ({ cache: boolean; text: string; type: \"text\"; }\n  | { cache: boolean; details: \"high\" | \"low\" | \"auto\"; image: string; mimeType: string; type: \"image\"; }\n  | { cache: boolean; data: string; format: \"wav\"; type: \"audio\"; })[]; name: string; role: \"user\"; }\n  | { cache: boolean; content: string; functionCalls: object[]; name: string; role: \"assistant\"; }\n  | { cache: boolean; functionId: string; isError: boolean; result: string; role: \"function\"; };\n  tags: string[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining the name Property in AxBaseAIArgs (TypeScript)\nDESCRIPTION: This snippet defines the `name` property for AxBaseAIArgs. It specifies the name of the AI service configuration as a string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxBaseAIArgs.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nname: `string`\n```\n\n----------------------------------------\n\nTITLE: Performing Single Upsert Operation with Weaviate in TypeScript\nDESCRIPTION: Protected method implementing the single upsert logic specifically for Weaviate. It takes a readonly `AxDBUpsertRequest` object (`req`), an optional boolean `update` flag, and optional `AxDBBaseOpOptions`. It returns a Promise resolving to an `AxDBUpsertResponse`. This method overrides `AxDBBase._upsert`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBWeaviate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n_upsert(req, update?, options?): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIGoogleGeminiTool Object Type - TypeScript\nDESCRIPTION: This snippet declares the TypeScript type AxAIGoogleGeminiTool, representing an object with optional properties for code execution, an array of function declarations, and Google search retrieval. Dependencies include custom types such as AxAIGoogleGeminiToolFunctionDeclaration and AxAIGoogleGeminiToolGoogleSearchRetrieval. Each property is optional, allowing flexibility for tool implementations. Inputs are expected to conform to these complex type definitions; outputs are typed objects used to configure tools in the Gemini integration. Limitations include reliance on correct import or definition of referenced types.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiTool.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * AxAIGoogleGeminiTool: object type declaration for Google Gemini AI tool integration.\n *\n * @property {object} [code_execution] - Optional property for code execution features.\n * @property {AxAIGoogleGeminiToolFunctionDeclaration[]} [function_declarations] - Optional array of function declarations.\n * @property {AxAIGoogleGeminiToolGoogleSearchRetrieval} [google_search_retrieval] - Optional google search retrieval feature.\n */\nexport interface AxAIGoogleGeminiTool {\n  code_execution?: object;\n  function_declarations?: AxAIGoogleGeminiToolFunctionDeclaration[];\n  google_search_retrieval?: AxAIGoogleGeminiToolGoogleSearchRetrieval;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining AxAICohereConfig Type Alias in TypeScript\nDESCRIPTION: Defines the `AxAICohereConfig` type as an intersection of `AxModelConfig` (likely a base configuration type) and a generic `object`. This type represents the specific configuration options required for using Cohere AI models within the Ax framework. It inherits base model configurations and adds Cohere-specific properties.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAICohereConfig**: [`AxModelConfig`](/api/#03-apidocs/typealiasaxmodelconfig) & `object`\n```\n\n----------------------------------------\n\nTITLE: Setting Input Fields Using AxSignature in TypeScript\nDESCRIPTION: setInputFields replaces the entire collection of input fields on the AxSignature object. The parameter 'fields' must be a readonly array of AxField-compliant objects. No return value is expected. This method is used for batch assignment/resetting of input definitions. It requires the AxField interface/type and expects immutability for the input array.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetInputFields(fields: readonly AxField[]): void\n```\n\n----------------------------------------\n\nTITLE: Executing Query Operation with Weaviate in TypeScript\nDESCRIPTION: Protected method implementing the query logic specifically for Weaviate. It accepts a readonly `AxDBQueryRequest` object (`req`) and optional `AxDBBaseOpOptions`. It returns a Promise resolving to an `AxDBQueryResponse`. This method overrides `AxDBBase._query`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBWeaviate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n_query(req, options?): Promise<AxDBQueryResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional 'options' Property Structure in TypeScript\nDESCRIPTION: Specifies the structure for the optional `options` property within `AxOptimizerArgs`. It includes numerical limits for maximum demonstrations (`maxDemos`), examples (`maxExamples`), and optimization rounds (`maxRounds`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxOptimizerArgs.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ maxDemos: number; maxExamples: number; maxRounds: number; }\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Request Headers Function - TypeScript\nDESCRIPTION: Enables dynamic specification of request headers by supplying a function that returns a Promise resolving to a dictionary of header key-value pairs. This supports authentication, impersonation, or per-request customization in secure or multi-tenant deployments.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIHuggingFaceConfig Type Alias Properties in TypeScript\nDESCRIPTION: Describes the properties of the `AxAIHuggingFaceConfig` type alias in TypeScript. This configuration object extends `AxModelConfig` and includes specific options for Hugging Face models like `model` (referencing `AxAIHuggingFaceModel`), `doSample`, `maxTime`, `returnFullText`, `useCache`, and `waitForModel` to control inference parameters. It inherits properties from `AxModelConfig`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIHuggingFaceConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Type alias combining AxModelConfig and Hugging Face specific options\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/huggingface/types.ts#L7\n\nexport type AxAIHuggingFaceConfig = AxModelConfig & {\n  /**\n   * Optional flag for sampling.\n   * @optional\n   */\n  doSample?: boolean;\n\n  /**\n   * Optional maximum time limit.\n   * @optional\n   */\n  maxTime?: number;\n\n  /**\n   * Specifies the Hugging Face model to use.\n   * References the AxAIHuggingFaceModel enumeration.\n   */\n  model: AxAIHuggingFaceModel;\n\n  /**\n   * Optional flag to return the full text.\n   * @optional\n   */\n  returnFullText?: boolean;\n\n  /**\n   * Optional flag to use caching.\n   * @optional\n   */\n  useCache?: boolean;\n\n  /**\n   * Optional flag to wait for the model to be ready.\n   * @optional\n   */\n  waitForModel?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional options Property in AxBaseAIArgs (TypeScript)\nDESCRIPTION: This snippet defines the optional `options` property within AxBaseAIArgs. It accepts a read-only object of type `AxAIServiceOptions`, likely containing various configuration settings for the AI service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxBaseAIArgs.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noptions?: `Readonly`\\<[`AxAIServiceOptions`](/api/#03-apidocs/typealiasaxaiserviceoptions)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `streamingAsserts` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `streamingAsserts` property for `AxGenOptions`. Similar to `asserts`, this property likely holds an array of `AxStreamingAssertion` objects specifically designed for validating streamed output incrementally.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **streamingAsserts**: [`AxStreamingAssertion`](/api/#03-apidocs/interfaceaxstreamingassertion)[]\n```\n\n----------------------------------------\n\nTITLE: Computing Hash of AxSignature in TypeScript\nDESCRIPTION: The hash method computes and returns a string hash representing the signature. With no parameters or special dependencies, it's used for fast comparison, caching, or identity verification scenarios. The method returns a string and will reliably produce the same output for equal signature states.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nhash(): string\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Docker Container using AxDockerSession in TypeScript\nDESCRIPTION: Connects the AxDockerSession instance to a specific Docker container identified by its ID. This method is asynchronous and returns a Promise that resolves when the connection is established, allowing subsequent methods like executeCommand or getContainerLogs to target this container.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconnectToContainer(containerId: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI setAPIURL() Method Signature in TypeScript\nDESCRIPTION: Defines the `setAPIURL` method used to configure the base URL for the AI service's API endpoint. It takes the API URL string as a parameter and returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Row Mapping to AxFieldValue in TypeScript\nDESCRIPTION: This snippet describes the row property as a TypeScript Record with string keys and values of type AxFieldValue. This enables representation of arbitrary data row schemas with each column value conforming to the AxFieldValue type. It relies on the prior definition of AxFieldValue, and is intended for type-safe manipulation and validation of row data structures. Inputs must use string keys and conforming value types; outputs are validated data row records.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDataRow.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrow: Record<string, AxFieldValue>;\n```\n\n----------------------------------------\n\nTITLE: Setting API URL for the AI Service - TypeScript\nDESCRIPTION: Outlines the 'setAPIURL' method, which allows assignment of an API endpoint URL to the AI provider. Input is a string URL, with no return value. This method is inherited from AxBaseAI and is required for targeting specific service endpoints in deployments.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxFieldTemplateFn Type Alias in TypeScript\nDESCRIPTION: This snippet defines the `AxFieldTemplateFn` type alias in TypeScript. It represents a function that accepts two arguments: `field` (of type `Readonly<AxField>`) and `value` (of type `Readonly<AxFieldValue>`). The function is expected to return an array of any type (`any[]`). This type is used within the ax-llm/ax project, specifically in prompt handling logic.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxFieldTemplateFn.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(`field`, `value`) => `any`[]\n```\n\n----------------------------------------\n\nTITLE: Pulling a Docker Image using AxDockerSession in TypeScript\nDESCRIPTION: Pulls a specified Docker image (e.g., 'ubuntu:latest') from the configured Docker registry. This asynchronous method requires the image name and tag. It returns a Promise that resolves once the image pull operation is complete.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\npullImage(imageName: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Optional region Property for AxAIGoogleGeminiArgs in TypeScript\nDESCRIPTION: Defines the optional `region` property of type `string` within the `AxAIGoogleGeminiArgs` interface. This specifies the Google Cloud region (e.g., 'us-central1') where the Gemini service endpoint is located, necessary for Vertex AI deployments.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiArgs.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nregion?: string\n```\n\n----------------------------------------\n\nTITLE: Defining Google Gemini API Configuration Structure - TypeScript\nDESCRIPTION: Defines the AxAIGoogleGeminiConfig type used for configuring the Google Gemini API integration. The type extends from AxModelConfig and an object, and includes properties such as 'model', 'embedModel' (optional), and 'safetySettings' (optional). Dependencies include the AxModelConfig type and enumerations for embedding models and safety settings, which may be imported from related modules. Key parameters: 'model' (the Gemini model to use), 'embedModel' (embedding model, optional), and 'safetySettings' (API safety settings, optional). This type is intended for providing strongly typed configuration objects to the higher-level Ax AI client components.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AxAIGoogleGeminiConfig = AxModelConfig & {\n  /**\n   * The base model on the Gemini platform to use.\n   */\n  model: AxAIGoogleGeminiModel;\n\n  /**\n   * Optional: Embedding model to use with Gemini.\n   */\n  embedModel?: AxAIGoogleGeminiEmbedModel;\n\n  /**\n   * Optional: Safety settings for Gemini queries.\n   */\n  safetySettings?: AxAIGoogleGeminiSafetySettings;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Retrieval Config Object - TypeScript\nDESCRIPTION: This snippet defines a TypeScript object type for configuring dynamic retrieval behavior in the AxAI Google Gemini tool. It specifies two properties: 'dynamic_threshold' (a number representing the threshold for retrieval dynamics), and 'mode' (a constant string set to 'MODE_DYNAMIC' to indicate the mode type). This is used as part of the Google Gemini integration's configuration typing and requires TypeScript. The object expects numerical input for the threshold and restricts 'mode' to a single allowed string value.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiToolGoogleSearchRetrieval.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  dynamic_threshold: number;\\n  mode: \\\"MODE_DYNAMIC\\\";\\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers using AxDockerSession in TypeScript\nDESCRIPTION: Lists Docker containers accessible via the configured API endpoint. By default (`all: false`), it lists only running containers. Set the 'all' parameter to true to include stopped containers as well. This asynchronous method returns a Promise resolving with an array of `AxDockerContainer` objects, each representing a container.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlistContainers(all: boolean = false): Promise<AxDockerContainer[]>\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAICohere Service Class in TypeScript\nDESCRIPTION: Defines the AxAICohere class, extending AxBaseAI with configurable model, embedding, and chat types for Cohere AI support. The constructor accepts named parameters omitting the \\\"name\\\" property, ensuring users must intentionally provide critical configuration values, and returns a typed instance. This pattern supports easy subclassing, strongly typed integrations, and reflects dependencies on AxBaseAI and various Ax model/request/response types.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AxAICohere extends AxBaseAI<AxAICohereModel, AxAICohereEmbedModel, AxAICohereChatRequest, AxAICohereEmbedRequest, AxAICohereChatResponse, AxAICohereChatResponseDelta, AxAICohereEmbedResponse> {\n  constructor(__namedParameters: Readonly<Omit<AxAICohereArgs, \"name\">>) {\n    super(__namedParameters);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Line-by-Line Streaming Assertions with Ax in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to add a streaming assertion in Ax that validates each streamed line of the field 'answerInPoints' to ensure it starts with a number and a dot (e.g., '1. ...'). It uses a regular expression and processes each non-empty trimmed line as part of the validation. The program is executed with streaming and debugging enabled, and is intended for validating LLM outputs in real time for structured enumerated lists. Requires Ax framework, a configured prompt program, and TypeScript runtime.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/09-streaming.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// add a assertion to ensure all lines start with a number and a dot.\ngen.addStreamingAssert(\n  'answerInPoints',\n  (value: string) => {\n    const re = /^\\d+\\./;\n\n    // split the value by lines, trim each line,\n    // filter out empty lines and check if all lines match the regex\n    return value\n      .split('\\n')\n      .map((x) => x.trim())\n      .filter((x) => x.length > 0)\n      .every((x) => re.test(x));\n  },\n  'Lines must start with a number and a dot. Eg: 1. This is a line.'\n);\n\n// run the program with streaming enabled\nconst res = await gen.forward(\n  {\n    question: 'Provide a list of optimizations to speedup LLM inference.'\n  },\n  { stream: true, debug: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Anthropic Chat Response Delta Event Union in TypeScript\nDESCRIPTION: This TypeScript code defines the AxAIAnthropicChatResponseDelta type, which is a union of several event interfaces representing different stages and types of server-sent events used in Anthropic chat response streaming. Each event type, such as content block start, delta update, stop, or error, corresponds to a specific interface (imported from elsewhere). Consumers of this type can write type-safe logic for handling all possible response events in the chat streaming lifecycle. The snippet requires access to the referenced event type definitions in the project and is limited to TypeScript projects leveraging Anthropic API event streaming.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIAnthropicChatResponseDelta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAxAIAnthropicChatResponseDelta: AxAIAnthropicMessageStartEvent | AxAIAnthropicContentBlockStartEvent | AxAIAnthropicContentBlockDeltaEvent | AxAIAnthropicContentBlockStopEvent | AxAIAnthropicMessageDeltaEvent | AxAIAnthropicMessageStopEvent | AxAIAnthropicPingEvent | AxAIAnthropicErrorEvent\n```\n\n----------------------------------------\n\nTITLE: Declaring history method for AxAIMemory - TypeScript\nDESCRIPTION: Specifies the 'history' method, which retrieves all memory entries (chat messages and events) for a specific session or global context. Accepts an optional session identifier and returns an array of union-typed result objects, covering all role and media types. Useful for reconstructing full conversation histories; expects strong adherence to defined TypeScript types for all entries.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIMemory.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nhistory(sessionId?: string): ({ cache: boolean; content: string; role: \"system\"; }\n  | { content: string | ({ cache: boolean; text: string; type: \"text\"; }\n  | { cache: boolean; details: \"high\" | \"low\" | \"auto\"; image: string; mimeType: string; type: \"image\"; }\n  | { cache: boolean; data: string; format: \"wav\"; type: \"audio\"; })[]; name: string; role: \"user\"; }\n  | { cache: boolean; content: string; functionCalls: object[]; name: string; role: \"assistant\"; }\n  | { cache: boolean; functionId: string; isError: boolean; result: string; role: \"function\"; })[]\n```\n\n----------------------------------------\n\nTITLE: Constructing AxAIDeepSeek Instance (TypeScript)\nDESCRIPTION: Creates a new instance of the AxAIDeepSeek class, used for interacting with the DeepSeek AI API. It accepts named parameters based on `AxAIDeepSeekArgs` (excluding `name`) and overrides the constructor from its base class `AxAIOpenAIBase`. The instance provides methods for AI operations like chat and embedding.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxAIDeepSeek(__namedParameters: Readonly<Omit<AxAIDeepSeekArgs, \"name\">>): AxAIDeepSeek\n```\n\n----------------------------------------\n\nTITLE: Defining the defaults Property in AxBaseAIArgs (TypeScript)\nDESCRIPTION: This snippet defines the `defaults` property within AxBaseAIArgs. It holds read-only default values for the embedding model (`TEmbedModel`) and the primary model (`TModel`), using generic type parameters.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxBaseAIArgs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefaults: `Readonly`\\<\\{ `embedModel`: `TEmbedModel`; `model`: `TModel`; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIAnthropicChatError Type Declaration in TypeScript\nDESCRIPTION: This snippet defines the AxAIAnthropicChatError type as an object containing a message string and a type property for error categorization. It explicitly restricts the error type to 'authentication_error', ensuring clear error handling semantics in code that interacts with the Anthropic chat API. The definition expects 'message' to provide the error context and 'type' to indicate the error classification. Inputs and outputs are not functions; this is a structural type used elsewhere for strict typing. Required dependency is TypeScript, and this type must be imported where used.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIAnthropicChatError.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  message: string;\n  type: \"authentication_error\";\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Containers via AxDockerSession in TypeScript\nDESCRIPTION: Stops one or more Docker containers matching the provided criteria, primarily the tag. Parameters allow specifying a timeout (in seconds) for the stop operation and whether to remove (`remove: true`) the containers after they are successfully stopped. This asynchronous method returns a Promise resolving with an array of objects, likely representing the results for each targeted container.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nstopContainers(__namedParameters: Readonly<{ remove: boolean; tag: string; timeout: number; }>): Promise<object[]>\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Google Search Retrieval Object Property in TypeScript\nDESCRIPTION: Defines the `googleSearchRetrieval` property as an optional object within the `AxAIGoogleGeminiOptionsTools` interface. This object holds configuration settings for the Google Search retrieval tool used with the Google Gemini API.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiOptionsTools.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngoogleSearchRetrieval?: object\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Google Search Property for Google Gemini Tools in TypeScript\nDESCRIPTION: This TypeScript property definition, `googleSearch`, is an optional boolean flag within the `AxAIGoogleGeminiOptionsTools` interface. Setting it enables the basic Google Search tool for the Google Gemini API call.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiOptionsTools.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngoogleSearch?: boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Description from AxSignature in TypeScript\nDESCRIPTION: getDescription returns the current description associated with the signature or undefined if none has been set. No dependencies or parameters are involved. The return type can be string or undefined, and is used for extracting the human-readable signature context.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDescription(): undefined | string\n```\n\n----------------------------------------\n\nTITLE: Defining the batchUpsert Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `batchUpsert` method within the `AxDBService` interface. This asynchronous method accepts an array of `AxDBUpsertRequest` objects (`batchReq`) and an optional boolean `update` flag. It returns a Promise resolving to an `AxDBUpsertResponse`, designed for performing multiple insert or update operations efficiently.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBService.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbatchUpsert(`batchReq`, `update`?): `Promise`\\<[`AxDBUpsertResponse`](/api/#03-apidocs/typealiasaxdbupsertresponse)\\>\n```\n\n----------------------------------------\n\nTITLE: Declaring AxDBPineconeOpOptions Interface Inheritance in TypeScript\nDESCRIPTION: This documentation snippet indicates that the `AxDBPineconeOpOptions` interface extends the `AxDBBaseOpOptions` interface. It implies that `AxDBPineconeOpOptions` inherits properties from `AxDBBaseOpOptions` and may add specific options for Pinecone operations, linking to the base interface definition within the API documentation. The definition itself is located in the `ax/db/pinecone.ts` file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDBPineconeOpOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxDBPineconeOpOptions**: [`AxDBBaseOpOptions`](/api/#03-apidocs/interfaceaxdbbaseopoptions)\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/db/pinecone.ts#L11\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemma2 Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemma2` assigned the string value `\"gemma-2-27b-it\"`. This identifier specifies the Gemma 2 model, specifically the 27 billion parameter instruction-tuned version.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nGemma2: \"gemma-2-27b-it\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Anthropic Claude Instant 1.2 Model Identifier - TypeScript\nDESCRIPTION: Defines the 'ClaudeInstant12' member as 'claude-instant-1.2'. It forms part of the enumeration representing supported Anthropic model variants, facilitating clear, type-checked model assignments in TypeScript.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIAnthropicModel.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nClaudeInstant12: \"claude-instant-1.2\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Anthropic Claude 3 Sonnet Model Identifier - TypeScript\nDESCRIPTION: Implements 'Claude3Sonnet' mapped to 'claude-3-sonnet-20240229' as an enum member. This provides a controlled mechanism, via TypeScript, for referencing the Claude 3 Sonnet model (February 2024 release) in integration scenarios.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIAnthropicModel.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nClaude3Sonnet: \"claude-3-sonnet-20240229\"\n```\n\n----------------------------------------\n\nTITLE: Defining Latency Metrics Structure in AxAIServiceMetrics (TypeScript)\nDESCRIPTION: Defines the structure for the `latency` property within the `AxAIServiceMetrics` type. This object tracks latency statistics for 'chat' and 'embed' AI operations. Each nested object includes numerical properties for `mean` latency, `p95` (95th percentile), `p99` (99th percentile), and an array of `samples` containing individual latency measurements.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIServiceMetrics.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlatency: object\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  `mean`: `number`;\n  `p95`: `number`;\n  `p99`: `number`;\n  `samples`: `number`[];\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  `mean`: `number`;\n  `p95`: `number`;\n  `p99`: `number`;\n  `samples`: `number`[];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Program Instance Identifier in TypeScript\nDESCRIPTION: Defines the `setId` method, implementing `AxTunable.setId`. It assigns a unique string identifier (`id`) to this specific program instance, useful for tracking, logging, and debugging complex program flows. Returns `void`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsetId(id): void\n```\n\n----------------------------------------\n\nTITLE: Resetting Program Token Usage Counters in TypeScript\nDESCRIPTION: Defines the `resetUsage` method, implementing `AxUsable.resetUsage`. It resets the accumulated usage statistics for the program and its registered sub-programs. Returns `void`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nresetUsage(): void\n```\n\n----------------------------------------\n\nTITLE: Querying Feature Support for Models in AxAICohere in TypeScript\nDESCRIPTION: The getFeatures method retrieves an AxAIFeatures object describing enabled features for a specific or default Cohere model. Its main prerequisites are supported AxAICohereModel values and the AxAIFeatures type, and it helps consumers adapt UI or logic based on available features.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFeatures(model?: AxAICohereModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional Chunker Function Type in AxDBLoaderOptions\nDESCRIPTION: Specifies the type signature for an optional `chunker` function within the `AxDBLoaderOptions`. This function takes a single string `text` as input and is expected to return an array of strings, representing the chunked text. It's used to customize how documents are split before processing.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBLoaderOptions.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(`text`: string) => `string`[]\n```\n\n----------------------------------------\n\nTITLE: Initializing AxEmbeddingAdapter (TypeScript)\nDESCRIPTION: Defines the constructor for the AxEmbeddingAdapter class. It takes a named parameters object containing an AI service (`AxAIService`), the function (`func`) to be adapted, and metadata (`info`) about the function (name, description, argument description).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxEmbeddingAdapter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxEmbeddingAdapter(__namedParameters: Readonly<{ ai: AxAIService; func: (args: any, extra?: any) => Promise<unknown>; info: Readonly<{ argumentDescription: string; description: string; name: string; }>; }>): AxEmbeddingAdapter\n```\n\n----------------------------------------\n\nTITLE: Defining the event_type Property for AxAICohereChatResponseDelta in TypeScript\nDESCRIPTION: This TypeScript code defines the `event_type` property within the `AxAICohereChatResponseDelta` type. This property specifies the type of event received in a Cohere chat stream, restricted to one of four possible string literals: \"stream-start\", \"text-generation\", \"tool-calls-generation\", or \"stream-end\". This helps differentiate the kind of data contained in the response delta.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatResponseDelta.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n### event_type\n\n> **event_type**: `\"stream-start\"` \\| `\"text-generation\"` \\| `\"tool-calls-generation\"` \\| `\"stream-end\"`\n```\n\n----------------------------------------\n\nTITLE: Setting Example Demonstrations with setDemos in TypeScript\nDESCRIPTION: The setDemos() method accepts an immutable list of AxProgramDemos types to provide training, validation, or example data for the AxProgram. It ensures downstream inference or training steps have access to the appropriate demonstration data. Sample parameters include various formats of example sets and the method does not return a value.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetDemos(demos: readonly AxProgramDemos[]): void\n```\n\n----------------------------------------\n\nTITLE: Declaring addTag method for AxAIMemory - TypeScript\nDESCRIPTION: Defines the 'addTag' method for marking a checkpoint within a session's memory using a tag name. This method takes a tag string to identify a state or marker, and an optional sessionId to target. Zero return value; requires only a generic string and optional session context, and is essential for later navigation (e.g., rewinding).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIMemory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddTag(name: string, sessionId?: string): void\n```\n\n----------------------------------------\n\nTITLE: Setting Example Data for AxGen Program (TypeScript)\nDESCRIPTION: Configures example data to instruct the program's operation, using AxProgramExamples as input. Used to guide, test, or illustrate generation patterns. Accepts a Readonly AxProgramExamples object and does not return a value.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nsetExamples(examples: Readonly<AxProgramExamples>): void\n```\n\n----------------------------------------\n\nTITLE: Instantiating AxTestPrompt with Constructor in TypeScript\nDESCRIPTION: This constructor snippet defines how to instantiate the AxTestPrompt class by providing a named parameter object conforming to Readonly<AxEvaluateArgs<IN, OUT>>. The dependency on strong typing ensures that all required configuration for prompt evaluation is present at construction time. The returned instance is fully parameterized for subsequent evaluation logic.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxTestPrompt.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(__namedParameters: Readonly<AxEvaluateArgs<IN, OUT>>): AxTestPrompt<IN, OUT> { ... }\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Identifiers with setParentId in TypeScript\nDESCRIPTION: The setParentId() method allows the attachment of hierarchical parent program IDs to an AxProgram, supporting program lineage, inheritance, or familial grouping. The parameter is a string representing the parent identifier. This operation is crucial for scenarios involving nested or composed program structures.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsetParentId(parentId: string): void\n```\n\n----------------------------------------\n\nTITLE: Batch Upserting Data (Inherited from Base) with TypeScript\nDESCRIPTION: The batchUpsert method, inherited from AxDBBase, provides multi-record upsert capability. Receives an array of AxDBUpsertRequest instances and an optional update parameter, returning a Promise of AxDBUpsertResponse for collective operation status. Requires proper structure of each request entry, and error management is as per the base method's logic.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBPinecone.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync batchUpsert(\n  req: readonly AxDBUpsertRequest[],\n  update?: boolean\n): Promise<AxDBUpsertResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining Google Gemini AI Safety Categories Enumeration in TypeScript\nDESCRIPTION: This snippet defines the AxAIGoogleGeminiSafetyCategory enum in TypeScript, representing labels for content moderation categories such as dangerous content, harassment, hate speech, and sexually explicit material. No external libraries are required, but usage assumes TypeScript support and relevant import paths. Enum members expose standardized string constants for use when categorizing AI-generated content during moderation and safety operations; all values are string literals. Inputs and outputs are TypeScript enum values suitable for validation, logging, or rule-based processing. No runtime logic is included—this is solely a type and value declaration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiSafetyCategory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AxAIGoogleGeminiSafetyCategory {\n  HarmCategoryHarassment = \"HARM_CATEGORY_HARASSMENT\",\n  HarmCategoryHateSpeech = \"HARM_CATEGORY_HATE_SPEECH\",\n  HarmCategorySexuallyExplicit = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n  HarmCategoryDangerousContent = \"HARM_CATEGORY_DANGEROUS_CONTENT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pinecone Database Arguments Interface - TypeScript\nDESCRIPTION: This TypeScript interface defines the configuration required to connect to a Pinecone vector database. It extends the common AxDBBaseArgs interface, adding properties such as apiKey, host, name (fixed as 'pinecone'), and optional tracer and fetch implementations. The fetch property is an override and allows custom request handling via a function conforming to the fetch standard signature, returning a Promise<Response>. Key parameters facilitate endpoint definition, authentication, and optional tracing. No external dependencies beyond TypeScript structural types and possibly a Tracer type are assumed.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBPineconeArgs.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AxDBPineconeArgs extends AxDBBaseArgs {\n  /**\n   * The name identifying this database type\n   */\n  name: \"pinecone\";\n\n  /**\n   * The API key for authenticating with Pinecone\n   */\n  apiKey: string;\n\n  /**\n   * The endpoint or host for your Pinecone instance\n   */\n  host: string;\n\n  /**\n   * Optional fetch function for HTTP requests (overrides base)\n   * @param input Input to fetch (string | URL | Request)\n   * @param init Optional fetch initialization options\n   * @returns Promise<Response>\n   */\n  fetch?: (input: string | URL | Request, init?: RequestInit) => Promise<Response>;\n\n  /**\n   * Optional tracer for monitoring/observability\n   */\n  tracer?: Tracer;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the upsert Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `upsert` method within the `AxDBService` interface. This asynchronous method accepts a readonly `AxDBUpsertRequest` object (`req`) and an optional boolean `update` flag. It returns a Promise resolving to an `AxDBUpsertResponse`, intended for inserting a new record or updating an existing one.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBService.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nupsert(`req`, `update`?): `Promise`\\<[`AxDBUpsertResponse`](/api/#03-apidocs/typealiasaxdbupsertresponse)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Optional 'config' Property for AxDBManagerArgs in TypeScript\nDESCRIPTION: Defines the optional 'config' property within the AxDBManagerArgs interface. If provided, this property should hold an object conforming to the `AxDBLoaderOptions` interface, specifying configuration options for a database loader.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBManagerArgs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconfig?: [`AxDBLoaderOptions`](/api/#03-apidocs/interfaceaxdbloaderoptions)\n```\n\n----------------------------------------\n\nTITLE: Declaring AxAgentic Interface for Agent Capabilities - TypeScript\nDESCRIPTION: This snippet defines the AxAgentic TypeScript interface to represent agents that can act as child agents in the ax-llm framework. It extends AxTunable and AxUsable, referencing methods for feature introspection (getFeatures), function definition (getFunction), as well as configuration and usage monitoring inherited from its parent interfaces. Key methods include getTraces, getUsage, resetUsage, setDemos, setExamples, setId, and setParentId. The interface relies on associated type aliases (AxFunction, AxAgentFeatures, AxProgramTrace, etc.), and all methods are designed for extensible, typed agent construction within the TypeScript ecosystem.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAgentic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AxAgentic extends AxTunable, AxUsable {\n  /**\n   * Returns agent features for introspection purposes.\n   */\n  getFeatures(): AxAgentFeatures;\n\n  /**\n   * Returns the function definition that this agent can be invoked with.\n   */\n  getFunction(): AxFunction;\n\n  // Inherited methods from AxTunable and AxUsable:\n  getTraces(): AxProgramTrace[];\n  getUsage(): AxTokenUsage & object[];\n  resetUsage(): void;\n  setDemos(demos: readonly AxProgramDemos[]): void;\n  setExamples(examples: Readonly<AxProgramExamples>): void;\n  setId(id: string): void;\n  setParentId(parentId: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAIGoogleGeminiToolFunctionDeclaration Type in TypeScript\nDESCRIPTION: This TypeScript type definition specifies the structure for declaring a tool function usable with Google Gemini AI within the ax-llm framework. It requires a `name` (string) and optionally accepts a `description` (string) and `parameters` (object) to define the function's signature and purpose for the AI model. The type is defined in the linked GitHub source file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiToolFunctionDeclaration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Represents the declaration of a tool function for Google Gemini AI.\n * Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/google-gemini/types.ts#L81\n */\ntype AxAIGoogleGeminiToolFunctionDeclaration = {\n  /**\n   * Optional description of the function's purpose.\n   */\n  description?: string;\n\n  /**\n   * The mandatory name of the function.\n   */\n  name: string;\n\n  /**\n   * Optional definition of the function's parameters (schema).\n   * The structure likely follows OpenAPI schema conventions.\n   */\n  parameters?: object; \n};\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAgentOptions Type Alias in TypeScript\nDESCRIPTION: This TypeScript code defines the `AxAgentOptions` type alias. It's constructed by omitting the `functions` property from the `AxGenOptions` interface and merging it with an object type that includes optional properties: `debug` (boolean), `disableSmartModelRouting` (boolean), and `excludeFieldsFromPassthrough` (an array of strings). These options control agent behavior, debugging, model routing, and automatic field passthrough between parent and child agents.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAgentOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAgentOptions**: `Omit`\\<[`AxGenOptions`](/api/#03-apidocs/interfaceaxgenoptions), `\"functions\"`\\> & `object`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### debug?\n\n> `optional` **debug**: `boolean`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### disableSmartModelRouting?\n\n> `optional` **disableSmartModelRouting**: `boolean`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### excludeFieldsFromPassthrough?\n\n> `optional` **excludeFieldsFromPassthrough**: `string`[]\n\nList of field names that should not be automatically passed from parent to child agents\n```\n\n----------------------------------------\n\nTITLE: Retrieving Program Execution Traces with getTraces in TypeScript\nDESCRIPTION: The getTraces() method returns an array of AxProgramTrace objects describing the internal execution history for an AxProgram instance. This is used to monitor or debug the behavior of the program by examining recorded steps. The method requires no parameters and returns detailed traces for auditing or analytic purposes without external dependencies.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetTraces(): AxProgramTrace[]\n```\n\n----------------------------------------\n\nTITLE: Upserting a Record in Cloudflare (TypeScript)\nDESCRIPTION: Defines the upsert method for inserting or updating a single record into the Cloudflare database. The method takes a typed upsert request and an optional update flag and returns a promise resolving to the upsert response. It is inherited from AxDBBase and intended for generic database upsert operations, specialized here for the Cloudflare provider.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBCloudflare.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nupsert(req: Readonly<AxDBUpsertRequest>, update?: boolean): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Declaring 'type' Property for AxAIAnthropicChatError in TypeScript\nDESCRIPTION: This snippet declares that the 'type' property for AxAIAnthropicChatError is fixed to the string value 'error'. This serves as a marker or tag to identify the nature of the object as an error instance in error handling and type checking within TypeScript projects. There are no function parameters or dynamic input/outputs. This snippet provides an additional discriminant field for exhaustive type checking and should be used in conjunction with the main type declaration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIAnthropicChatError.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype: \"error\"\n```\n\n----------------------------------------\n\nTITLE: Defining the 'usage' Property for AxAIAnthropicMessageDeltaEvent in TypeScript\nDESCRIPTION: Defines the `usage` property as an object within the `AxAIAnthropicMessageDeltaEvent` type. This object contains information about token usage for the delta event, specifically the number of `output_tokens` which is represented as a number.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicMessageDeltaEvent.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/anthropic/types.ts#L202\nusage: {\n  output_tokens: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring AxProgramUsage Type Alias with Model Usage Details in TypeScript\nDESCRIPTION: This type alias combines an AxChatResponse (with a 'modelUsage' string) and an object that defines 'ai' and 'model' as strings. Dependencies include the exported AxChatResponse type. Used to enforce a specific interface for objects representing chat responses decorated with additional model usage metadata; both 'ai' and 'model' fields are required string identifiers. Inputs and outputs expect objects adhering to this combined structure.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxProgramUsage.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **AxProgramUsage**: [`AxChatResponse`](/api/#03-apidocs/typealiasaxchatresponse)\\[\\\"modelUsage\\\"\\] & `object`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/dsp/program.ts#L96\n```\n\n----------------------------------------\n\nTITLE: Declaring the AxAIOllamaArgs Type Alias in TypeScript\nDESCRIPTION: Defines the `AxAIOllamaArgs` type alias in TypeScript. It's an intersection type, combining `AxAIOpenAIArgs` (specialized for `\"ollama\"`, `string`, `string`) with an anonymous object type containing optional `embedModel`, `model`, and `url` properties. This type represents the configuration arguments for initializing an Ollama AI client or making API calls within the ax-llm framework.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOllamaArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIOllamaArgs**: [`AxAIOpenAIArgs`](/api/#03-apidocs/interfaceaxaiopenaiargs)<`\"ollama\"`, `string`, `string`> & `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Interpreter Permissions Enumeration in TypeScript\nDESCRIPTION: This snippet defines the AxJSInterpreterPermission enumeration with string literal members representing permissions for accessing sensitive Node.js modules such as 'crypto', 'node:fs', 'net', 'os', and 'process'. No external dependencies are required beyond a TypeScript-capable environment, and each entry is provided as a string to facilitate granular runtime checks on interpreter permissions. Inputs include the specific permission queried; outputs are the corresponding string values representing those permissions. Enumeration is limited to a preset set of Node.js features and is intended for internal permission management.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxJSInterpreterPermission.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AxJSInterpreterPermission {\n  FS = \"node:fs\",\n  NET = \"net\",\n  OS = \"os\",\n  CRYPTO = \"crypto\",\n  PROCESS = \"process\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 'outputs' Property for AxAICohereChatRequestToolResults in TypeScript\nDESCRIPTION: Specifies the `outputs` property within each object of the `AxAICohereChatRequestToolResults` array. It's defined as an array of objects (`object[]`), intended to hold the actual results or data generated by the corresponding tool call identified by the `call` property.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatRequestToolResults.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **outputs**: `object`[]\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIAnthropicConfig Type Alias in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `AxAIAnthropicConfig` type alias. It's an intersection type, combining the base `AxModelConfig` with an object that mandates a `model` property. This `model` property must be of type `AxAIAnthropicModel` or `AxAIAnthropicVertexModel`, ensuring a valid Anthropic model identifier is provided in the configuration. It depends on the `AxModelConfig`, `AxAIAnthropicModel`, and `AxAIAnthropicVertexModel` types/enumerations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIAnthropicConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIAnthropicConfig**: [`AxModelConfig`](/api/#03-apidocs/typealiasaxmodelconfig) & `object`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/anthropic/types.ts#L23\n\n## Type declaration\n\n### model\n\n> **model**: [`AxAIAnthropicModel`](/api/#03-apidocs/enumerationaxaianthropicmodel) \\| [`AxAIAnthropicVertexModel`](/api/#03-apidocs/enumerationaxaianthropicvertexmodel)\n```\n\n----------------------------------------\n\nTITLE: Constructing AxMemory Instance in TypeScript\nDESCRIPTION: Defines the constructor for the AxMemory class. It initializes a new memory instance, optionally setting a limit on the number of entries and enabling debug mode. The `limit` parameter controls the maximum size of the memory buffer, and `debug` toggles logging.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxMemory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxMemory(limit, debug): AxMemory\n```\n\n----------------------------------------\n\nTITLE: Getting AI Features for AxAIOllama Model in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` used to retrieve the supported features (`AxAIFeatures`) for a specific model, or the default model if none is provided. Features might include context window size, function calling capabilities, etc.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFeatures(model?): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Resetting Token Usage Counters for AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method resets the internal token usage counters for the program instance. This is useful when reusing the program instance for multiple independent calls.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nresetUsage(): void\n```\n\n----------------------------------------\n\nTITLE: Defining the programId Property for AxProgramDemos in TypeScript\nDESCRIPTION: Specifies the `programId` property within the `AxProgramDemos` object. This property is expected to be a string identifier for the associated Ax program.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxProgramDemos.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprogramId: string\n```\n\n----------------------------------------\n\nTITLE: Declaring the title Property for AxIField in TypeScript\nDESCRIPTION: Specifies that the `AxIField` type must include a `title` property of type `string`. This is explicitly defined as part of the `AxIField` type structure.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxIField.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: string\n```\n\n----------------------------------------\n\nTITLE: Defining Optional projectId Property for AxAIGoogleGeminiArgs in TypeScript\nDESCRIPTION: Defines the optional `projectId` property of type `string` within the `AxAIGoogleGeminiArgs` interface. This specifies the Google Cloud project ID associated with the Gemini service usage, particularly relevant when using Vertex AI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiArgs.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nprojectId?: string\n```\n\n----------------------------------------\n\nTITLE: Defining the AQA Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `AQA` assigned the string value `\"aqa\"`. This likely represents an identifier for a specific Google AI model or feature within the ax-llm framework.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAQA: \"aqa\"\n```\n\n----------------------------------------\n\nTITLE: Getting AI Model Features for AxAIDeepSeek (TypeScript)\nDESCRIPTION: Retrieves the features supported by a specific DeepSeek model or the default model if none is specified. Inherited from `AxAIOpenAIBase`, this method accepts an optional `AxAIDeepSeekModel` and returns an `AxAIFeatures` object describing the model's capabilities.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFeatures(model?: AxAIDeepSeekModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers for AxAIOllama Service in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` allowing the configuration of custom HTTP headers for API requests made to the Ollama service. It accepts a function that asynchronously returns a record of header key-value pairs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Creating Streaming Chat Response with AxAIServiceImpl in TypeScript (Optional)\nDESCRIPTION: Defines the optional `createChatStreamResp` method signature within the `AxAIServiceImpl` interface. This method handles processing individual chunks (deltas) from a streaming chat response (`TChatResponseDelta`) and potentially updates an internal state object to construct the final `AxChatResponse`. It takes a readonly `TChatResponseDelta` and a state object as input.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIServiceImpl.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChatStreamResp?(resp: Readonly<TChatResponseDelta>, state: object): AxChatResponse\n```\n\n----------------------------------------\n\nTITLE: Declaring Anthropic Claude 3.5 Haiku Model Identifier - TypeScript\nDESCRIPTION: Defines the 'Claude35Haiku' enumeration member with the value 'claude-3-5-haiku-latest'. This member is part of the set of supported Anthropic model identifiers and is used for referencing the Claude 3.5 Haiku model in code. Intended for use with TypeScript and dependent API logic.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIAnthropicModel.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nClaude35Haiku: \"claude-3-5-haiku-latest\"\n```\n\n----------------------------------------\n\nTITLE: Getting the Name of AxAIDeepSeek Service (TypeScript)\nDESCRIPTION: Returns the configured name for the AxAIDeepSeek service instance. Inherited from `AxAIOpenAIBase`, this name provides a human-readable label for the service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Defining Error Metrics Structure in AxAIServiceMetrics (TypeScript)\nDESCRIPTION: Defines the structure for the `errors` property within the `AxAIServiceMetrics` type. This object tracks error statistics for different AI operations, specifically 'chat' and 'embed'. Each nested object contains numerical properties for `count` (total errors), `rate` (errors per unit), and `total` (total operations considered for rate).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIServiceMetrics.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nerrors: object\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  `count`: `number`;\n  `rate`: `number`;\n  `total`: `number`;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  `count`: `number`;\n  `rate`: `number`;\n  `total`: `number`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the 'type' Property for AxAIAnthropicContentBlockDeltaEvent in TypeScript\nDESCRIPTION: This snippet defines the `type` property for the `AxAIAnthropicContentBlockDeltaEvent` type. It is a constant string literal \"content_block_delta\", serving as a discriminator to identify the event type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicContentBlockDeltaEvent.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype: `\"content_block_delta\"`\n```\n\n----------------------------------------\n\nTITLE: Fetching Service Name in Mistral Service - TypeScript\nDESCRIPTION: Returns the service name string, which may be used for UI labelling or routing logic. Simple accessor method, generally returning a preconfigured value.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Converting Interpreter to AxFunction with toFunction() in TypeScript\nDESCRIPTION: This snippet outlines the toFunction method of the AxJSInterpreter class, which returns a value of type AxFunction as defined in the Ax framework. The method provides a way to convert the interpreter object into a function that can be further composed or invoked by other parts of the Ax ecosystem. It requires no arguments and outputs an AxFunction, facilitating integration with function pipelines. Dependencies include the AxFunction type alias.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxJSInterpreter.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoFunction(): AxFunction\n```\n\n----------------------------------------\n\nTITLE: Defining Optional endpointId Property for AxAIGoogleGeminiArgs in TypeScript\nDESCRIPTION: Defines the optional `endpointId` property of type `string` within the `AxAIGoogleGeminiArgs` interface. This is used to specify a particular Vertex AI endpoint ID when using Gemini through Vertex AI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiArgs.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nendpointId?: string\n```\n\n----------------------------------------\n\nTITLE: Defining Assertion Function Signature in AxAssertion Interface (TypeScript)\nDESCRIPTION: Defines the signature for the `fn` method within the `AxAssertion` interface, located in `ax/dsp/asserts.ts`. This function accepts a `values` object (a record mapping string keys to unknown values) and is expected to return `undefined` or `boolean` to indicate the assertion result.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAssertion.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfn(values: Record<string, unknown>): undefined | boolean\n```\n\n----------------------------------------\n\nTITLE: Defining the COMPLETION Member in AxLLMRequestTypeValues (TypeScript)\nDESCRIPTION: Defines the `COMPLETION` member of the `AxLLMRequestTypeValues` enumeration, assigning it the string literal `\"completion\"`. This represents a completion-based LLM request type within the Ax LLM tracing system. It is located in the `src/ax/trace/trace.ts` file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxLLMRequestTypeValues.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nCOMPLETION: \"completion\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Token Usage Counter in AxGen (TypeScript)\nDESCRIPTION: Clears the program token usage statistics for a fresh session or to restart accounting. This method has no required parameters and produces no output. Enables repeated benchmarking or cost control across different runs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nresetUsage(): void\n```\n\n----------------------------------------\n\nTITLE: Getting the Name of AxBalancer in TypeScript\nDESCRIPTION: Implements the `getName` method from `AxAIService`. Returns the configured name (string) for the `AxBalancer` instance.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Getting Default Models for AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` that returns the default chat and embedding models configured for the service. It returns a readonly object specifying the `model` and `embedModel` identifiers.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Declaring Anthropic Claude 2.1 Model Identifier - TypeScript\nDESCRIPTION: Defines the 'Claude21' enumeration member with the string value 'claude-2.1'. This member is part of an enum representing available Anthropic models, providing a standardized identifier for referencing the Claude 2.1 model. Requires TypeScript and is typically used in model selection or API request configuration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIAnthropicModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nClaude21: \"claude-2.1\"\n```\n\n----------------------------------------\n\nTITLE: Converting AxEmbeddingAdapter to AxFunction (TypeScript)\nDESCRIPTION: Defines the `toFunction` method of the `AxEmbeddingAdapter` class. This method transforms the embedding adapter instance into an object conforming to the `AxFunction` type alias, making it usable within the broader Ax function ecosystem.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxEmbeddingAdapter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoFunction(): AxFunction\n```\n\n----------------------------------------\n\nTITLE: Internal Query Method (_query) in AxDBMemory (TypeScript)\nDESCRIPTION: Defines the internal implementation for querying the in-memory database. It accepts a query request object (`req`) and optional operation options (`_options`). It returns a Promise resolving to an AxDBQueryResponse containing the query results. This method overrides the corresponding method in AxDBBase.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n_query(req: Readonly<AxDBQueryRequest>, _options?: Readonly<AxDBBaseOpOptions>): Promise<AxDBQueryResponse>\n```\n\n----------------------------------------\n\nTITLE: Declaring AI Service Action Options Type - TypeScript\nDESCRIPTION: Declares the AxAIServiceActionOptions generic object type in TypeScript, enabling configuration of AI service actions by allowing the specification of AI service instances, debugging state, rate limiting functionality, and optional identifiers. Dependencies include the AxAIService and AxRateLimiterFunction types, with support for model and embedding model parameters. Inputs are the type parameters TModel and TEmbedModel, and outputs are a structured options object for AI service actions. This type should be used wherever customizable AI service operation configuration is required in the Ax framework.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIServiceActionOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxAIServiceActionOptions<TModel = unknown, TEmbedModel = unknown> = {\n  ai?: Readonly<AxAIService<TModel, TEmbedModel>>;\n  debug?: boolean;\n  rateLimiter?: AxRateLimiterFunction;\n  sessionId?: string;\n  traceId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the AxGenerateResult Type Alias in TypeScript\nDESCRIPTION: This TypeScript definition outlines the `AxGenerateResult` type alias. It's a generic type (`<OUT>`) that combines the provided `OUT` type (which must extend `AxGenOut`) with a base `object` type. It also optionally includes a `functions` property, defined as an array of `AxChatResponseFunctionCall` objects. The source file location and generic type constraints are also indicated.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxGenerateResult.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxGenerateResult**\\<`OUT`\\>: `OUT` & `object`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/dsp/generate.ts#L74\n\n## Type declaration\n\n### functions?\n\n> `optional` **functions**: [`AxChatResponseFunctionCall`](/api/#03-apidocs/typealiasaxchatresponsefunctioncall)[]\n\n## Type Parameters\n\n| Type Parameter |\n| ------ |\n| `OUT` *extends* [`AxGenOut`](/api/#03-apidocs/typealiasaxgenout) |\n```\n\n----------------------------------------\n\nTITLE: Streaming Reranker Forward Pass - AxGen - TypeScript\nDESCRIPTION: The streamingForward method executes the reranking operation as an async generator, enabling partial results or token streaming. It takes the AI service, the input values, and optional streaming-forward options; yields objects containing partial reranker output (delta) and version information. All structures and interfaces involved are from the Ax framework; compatible with infrastructure supporting async iteration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstreamingForward(\n  ai: Readonly<AxAIService<unknown, unknown>>,\n  values: AxRerankerIn,\n  options?: Readonly<AxProgramStreamingForwardOptions>\n): AsyncGenerator<{ delta: Partial<AxRerankerOut>; version: number }, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with Cohere Defaults in TypeScript\nDESCRIPTION: Provides the setup for AxAI to connect to Cohere using the COHERE_APIKEY from the environment. All standard model selection and embedding features are enabled by default. No advanced configuration is shown.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'cohere',\n  apiKey: process.env.COHERE_APIKEY as string\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing AxDefaultQueryRewriter Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `AxDefaultQueryRewriter` class. It takes an optional `options` object of type `AxGenOptions` and returns a new instance of `AxDefaultQueryRewriter`. This constructor overrides the one from the base `AxGen` class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxDefaultQueryRewriter(options?: Readonly<AxGenOptions>): AxDefaultQueryRewriter\n```\n\n----------------------------------------\n\nTITLE: Setting Service Name for AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` used to set or update the name identifier for this AI service instance. Accepts the new name string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetName(name): void\n```\n\n----------------------------------------\n\nTITLE: Getting Service Name for AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` that returns the configured name (e.g., 'ollama') for this AI service instance.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Declaring AxProgramForwardOptions Type Object in TypeScript\nDESCRIPTION: This TypeScript snippet defines the AxProgramForwardOptions interface as an object with several optional properties, used for customizing the behavior of Ax LLM program execution. Dependencies include related types such as AxAIService, AxChatRequest, AxFunction, AxAIMemory, AxModelConfig, AxRateLimiterFunction, and Tracer, which are referenced for advanced configuration. Each key allows additional control over AI service, debugging, retries, session and streaming settings, and function injection. All properties are optional, enabling flexible customization without requiring all parameters.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxProgramForwardOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * AxProgramForwardOptions: object containing optional configuration for Ax program forwarding\n *\n * ai?: AxAIService              // AI service instance\n * debug?: boolean               // Enable debugging\n * fastFail?: boolean            // Stop on first failure\n * functionCall?: AxChatRequest[\"functionCall\"] // Function call config\n * functions?: AxFunction[]      // List of function hooks\n * maxRetries?: number           // Maximum retry attempts\n * maxSteps?: number             // Maximum execution steps\n * mem?: AxAIMemory              // AI memory instance\n * model?: string                // Model identifier\n * modelConfig?: AxModelConfig   // Model configuration parameters\n * rateLimiter?: AxRateLimiterFunction // Rate limiting function\n * sessionId?: string            // Session identifier\n * stopFunction?: string         // Stop function name\n * stream?: boolean              // Enable streaming output\n * traceId?: string              // Trace identifier\n * tracer?: Tracer               // Custom tracer instance\n */\nexport interface AxProgramForwardOptions {\n  ai?: AxAIService;\n  debug?: boolean;\n  fastFail?: boolean;\n  functionCall?: AxChatRequest[\"functionCall\"];\n  functions?: AxFunction[];\n  maxRetries?: number;\n  maxSteps?: number;\n  mem?: AxAIMemory;\n  model?: string;\n  modelConfig?: AxModelConfig;\n  rateLimiter?: AxRateLimiterFunction;\n  sessionId?: string;\n  stopFunction?: string;\n  stream?: boolean;\n  traceId?: string;\n  tracer?: Tracer;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating a Docker Container via AxDockerSession in TypeScript\nDESCRIPTION: Attempts to find an existing Docker container matching the specified criteria (image name, tag); if no matching container is found, it creates a new one using the provided parameters (including volumes and image pull option). This asynchronous method returns a Promise resolving with an object containing the container's ID and a boolean flag `isNew` indicating whether the container was newly created.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfindOrCreateContainer(__namedParameters: Readonly<{ doNotPullImage: boolean; imageName: string; tag: string; volumes: object[]; }>): Promise<{ Id: string; isNew: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'category' Property Type in TypeScript\nDESCRIPTION: This line defines the `category` property within an object conforming to the `AxAIGoogleGeminiSafetySettings` structure. Its type is specified as `AxAIGoogleGeminiSafetyCategory`, indicating it must hold a value from the corresponding enumeration, representing different types of harmful content (e.g., harassment, hate speech) to be filtered.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiSafetySettings.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **category**: [`AxAIGoogleGeminiSafetyCategory`](/api/#03-apidocs/enumerationaxaigooglegeminisafetycategory)\n```\n\n----------------------------------------\n\nTITLE: Setting Service Name - TypeScript\nDESCRIPTION: This method allows the logical name of the service instance to be set or changed at runtime, which can be useful for service registration, multi-tenancy, or UI display. Accepts a string and updates the internal state.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Constructing AxAIGoogleGemini Service - TypeScript\nDESCRIPTION: This snippet demonstrates the constructor interface for initializing the AxAIGoogleGemini service with read-only arguments, omitting the \\\"name\\\" property from the parameters expected by AxAIGoogleGeminiArgs. The constructor sets up the service and passes configuration parameters along to the base class. It requires that all argument types conform to the expected pattern and throws if instantiation fails due to incorrect structure.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew AxAIGoogleGemini(__namedParameters: Readonly<Omit<AxAIGoogleGeminiArgs, \"name\">>): AxAIGoogleGemini\n```\n\n----------------------------------------\n\nTITLE: Defining the AxDockerContainer Interface Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for `AxDockerContainer`, representing detailed information about a Docker container. It includes properties for identification (Id, Names, Image), state (State, Status), configuration (Command, HostConfig, NetworkSettings), resources (Ports, Mounts, Labels, Sizes), and timestamps (Created). This structure likely corresponds to data retrieved from the Docker API or daemon.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDockerContainer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L3\ninterface AxDockerContainer {\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L4\n  Id: string;\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L5\n  Names: string[];\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L6\n  Image: string;\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L7\n  ImageID: string;\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L8\n  Command: string;\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L9\n  Created: number;\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L10\n  State: {\n    Dead: boolean;\n    Error: string;\n    ExitCode: number;\n    FinishedAt: Date; // Or string representation\n    OOMKilled: boolean;\n    Paused: boolean;\n    Pid: number;\n    Restarting: boolean;\n    Running: boolean;\n    StartedAt: Date; // Or string representation\n    Status: string;\n  };\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L23\n  Status: string;\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L24\n  Ports: {\n    IP: string;\n    PrivatePort: number;\n    PublicPort: number;\n    Type: string;\n  }[];\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L30\n  Labels: {\n    [key: string]: string;\n  };\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L31\n  SizeRw: number;\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L32\n  SizeRootFs: number;\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L33\n  HostConfig: {\n    NetworkMode: string;\n  };\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L36\n  NetworkSettings: {\n    Networks: {}; // Type from source doc\n  };\n\n  // Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/funcs/docker.ts#L46\n  Mounts: {\n    Destination: string;\n    Mode: string;\n    Propagation: string;\n    RW: boolean;\n    Source: string;\n    Type: string;\n  }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AxDBBaseArgs Interface in TypeScript\nDESCRIPTION: This snippet defines the AxDBBaseArgs interface, which acts as a foundational contract for database adapter argument structures in the Ax LLM framework. It declares two optional properties: fetch, a function matching the standard fetch API (with parameters for input and optional init, returning a Promise of Response) and tracer, which is used for logging or debugging and is typed as Tracer. Dependencies include the existence of the Tracer type and, where custom fetch is needed, compatibility with the Fetch API signature. This interface is extended by more specific database argument interfaces, enforcing consistent property structure while allowing implementation-specific additions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBBaseArgs.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AxDBBaseArgs {\n  /**\n   * Optional custom fetch implementation for HTTP requests\n   * @param input - URL, string, or Request object\n   * @param init - Optional RequestInit for fetch\n   * @returns Promise resolving to a Response object\n   */\n  fetch?: (input: string | URL | Request, init?: RequestInit) => Promise<Response>;\n\n  /**\n   * Optional tracer for request tracing/logging\n   */\n  tracer?: Tracer;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resetting Token Usage (resetUsage) (TypeScript)\nDESCRIPTION: Resets the accumulated token usage statistics for the program back to zero. Inherited from AxChainOfThought.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nresetUsage(): void\n```\n\n----------------------------------------\n\nTITLE: Creating Embedding Request with AxAIServiceImpl in TypeScript (Optional)\nDESCRIPTION: Defines the optional `createEmbedReq` method signature within the `AxAIServiceImpl` interface. This method transforms an internal embedding request (`AxInternalEmbedRequest`) into an `AxAPI` object and a provider-specific embedding request (`TEmbedRequest`). It takes a readonly `AxInternalEmbedRequest` as input and returns a tuple containing the `AxAPI` instance and the `TEmbedRequest`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIServiceImpl.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreateEmbedReq?(req: Readonly<AxInternalEmbedRequest<TEmbedModel>>): [AxAPI, TEmbedRequest]\n```\n\n----------------------------------------\n\nTITLE: responses Property Definition (TypeScript)\nDESCRIPTION: Specifies the `responses` property within the `AxAIRekaChatResponse` type, which is an array of objects representing the individual responses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIRekaChatResponse.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nresponses: object[]\n```\n\n----------------------------------------\n\nTITLE: Resetting Usage Statistics with resetUsage in TypeScript\nDESCRIPTION: Implements the resetUsage() operation from the AxUsable interface, clearing internal counters or statistics related to resource consumption for the AxProgram instance. This is useful for applications requiring programmatic resetting of metrics (e.g., before new evaluation). It does not require parameters and has no return value.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nresetUsage(): void\n```\n\n----------------------------------------\n\nTITLE: Constructing an AxSignature in TypeScript\nDESCRIPTION: This constructor initializes a new AxSignature instance, optionally accepting a Readonly string or another AxSignature as its signature input. It requires no dependencies aside from the AxSignature type and associated types from the Ax library. The main parameter 'signature' defines the initial value or basis for the signature; if omitted, the signature is empty. Returns the created AxSignature object. Limitations: the signature argument, if provided, must conform to the expected type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew AxSignature(signature?: Readonly<string | AxSignature>): AxSignature\n```\n\n----------------------------------------\n\nTITLE: Setting the API URL for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase used to set or update the API endpoint URL for the service instance. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Setting Groq API URL at Runtime in TypeScript\nDESCRIPTION: The setAPIURL method allows updating the endpoint URL for the Groq API service dynamically. It takes a string URL and returns void; users must ensure the provided URL is valid. Commonly used when switching environments or endpoints.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Declaring AxJSInterpreter Class Constructor in TypeScript\nDESCRIPTION: This snippet documents the constructor for the AxJSInterpreter class, which allows instantiation with optional named parameters specifying an array of permissions. The expected input is either undefined or a readonly object containing a \\'permissions\\' property with an array of AxJSInterpreterPermission values. The constructor initializes a new AxJSInterpreter instance, enforcing security restrictions via permissions. Dependencies include the AxJSInterpreterPermission enumeration, and the output is a new AxJSInterpreter object. No explicit side effects or resource constraints are mentioned.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxJSInterpreter.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew AxJSInterpreter(__namedParameters: undefined | Readonly<{ permissions: readonly AxJSInterpreterPermission[]; }>): AxJSInterpreter\n```\n\n----------------------------------------\n\nTITLE: Constructing AxRouter Instance (TypeScript)\nDESCRIPTION: Defines the constructor signature for the AxRouter class. It requires an instance implementing the AxAIService interface to initialize the router. The constructor returns a new instance of AxRouter.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRouter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxRouter(ai: AxAIService): AxRouter\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI getOptions() Method Signature in TypeScript\nDESCRIPTION: Defines the `getOptions` method that retrieves the current configuration options for the AI service. It returns a read-only `AxAIServiceOptions` object containing settings like API keys, default parameters, etc. This method implements the `getOptions` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Options - TypeScript\nDESCRIPTION: Returns the current service configuration options as a read-only object, including any customization performed during initialization. Useful for debugging, auditing, or for clone/setups based on current configuration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Setting Program ID (setId) (TypeScript)\nDESCRIPTION: Assigns a unique identifier (`id`) to the program instance. This ID might be used for tracking or logging purposes. Inherited from AxChainOfThought. Takes the ID string as input.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nsetId(id: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAIServiceOptions Type Properties in TypeScript\nDESCRIPTION: Defines the properties of the `AxAIServiceOptions` object type in TypeScript. This type includes optional properties for enabling debugging (`debug`), providing a custom fetch implementation (`fetch`), setting a rate limiter function (`rateLimiter`), and configuring a tracer (`tracer`) for AI service interactions. Each property is detailed with its type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIServiceOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIServiceOptions**: `object`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/types.ts#L227\n\n## Type declaration\n\n<a id=\"debug\"></a>\n\n### debug?\n\n> `optional` **debug**: `boolean`\n\n<a id=\"fetch\"></a>\n\n### fetch?\n\n> `optional` **fetch**: *typeof* [`__type`](/api/#03-apidocs/interfaceaxapiconfig)\n\n<a id=\"rateLimiter\"></a>\n\n### rateLimiter?\n\n> `optional` **rateLimiter**: [`AxRateLimiterFunction`](/api/#03-apidocs/typealiasaxratelimiterfunction)\n\n<a id=\"tracer\"></a>\n\n### tracer?\n\n> `optional` **tracer**: `Tracer`\n```\n\n----------------------------------------\n\nTITLE: Declaring AxAIRekaUsage Object Type in TypeScript\nDESCRIPTION: Defines the AxAIRekaUsage object with numeric input_tokens and output_tokens for tracking token usage in AI pipelines. Requires TypeScript for static type enforcement. Both keys must be numbers, where input_tokens represents processed tokens and output_tokens the generated tokens. Used for performance metrics or logging in the Ax LLM ecosystem.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIRekaUsage.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxAIRekaUsage = {\n  input_tokens: number;\n  output_tokens: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating the Last Result in AxMemory (TypeScript)\nDESCRIPTION: Defines the `updateResult` method for the AxMemory class. It updates the content of the most recent result entry in the memory, typically used for streaming responses where the result is built incrementally. Takes a read-only `AxChatResponseResult` and an optional `sessionId`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxMemory.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nupdateResult(result, sessionId?): void\n```\n\n----------------------------------------\n\nTITLE: Generating embeddings using AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase for generating embeddings for a given input. Takes an embedding request object and optional service action options, returning a promise that resolves to the embedding response. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nembed(req: Readonly<AxEmbedRequest<AxAIOpenAIEmbedModel>>, options?: Readonly<AxAIServiceActionOptions<AxAIOpenAIModel, AxAIOpenAIEmbedModel>>): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Inherited Query Method (query) from AxDBBase (TypeScript)\nDESCRIPTION: Public method for querying the database. It takes a query request object (`req`). It returns a Promise resolving to an AxDBQueryResponse containing the results. This method is inherited from the AxDBBase class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nquery(req: Readonly<AxDBQueryRequest>): Promise<AxDBQueryResponse>\n```\n\n----------------------------------------\n\nTITLE: Executing Inherited Query in AxDBBase TypeScript\nDESCRIPTION: Public method inherited from `AxDBBase` for performing query operations. It accepts a readonly `AxDBQueryRequest` object (`req`) and returns a Promise resolving to an `AxDBQueryResponse`. This method typically delegates the core logic to the overridden `_query` implementation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBWeaviate.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nquery(req): Promise<AxDBQueryResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining Balancer Options Interface in TypeScript\nDESCRIPTION: This interface outlines the configuration options for a balancer, including an optional custom comparator function, debug flag, initial and maximum backoff durations, and maximum number of retries. Dependencies include TypeScript and the definition is located in src/ax/ai/balance.ts at line 29. The comparator receives two arguments and returns a number for sorting or balancing; other options are standard configuration values to control balancer behavior. All properties are optional and serve to make the balancer adaptable to different workload or debugging requirements.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxBalancerOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxBalancerOptions = {\n  comparator?: (a: any, b: any) => number;\n  debug?: boolean;\n  initialBackoffMs?: number;\n  maxBackoffMs?: number;\n  maxRetries?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Operation - TypeScript\nDESCRIPTION: Defines the query method required by the AxDBService interface, which handles querying data sets given a query request object. Expects parameters as a read-only AxDBQueryRequest and returns a Promise with the corresponding AxDBQueryResponse. This high-level interface delegates the actual execution to a backend adapter\\'s implementation, which may use the abstract _query property.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBBase.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nquery(req: Readonly<AxDBQueryRequest>): Promise<AxDBQueryResponse>;\n```\n\n----------------------------------------\n\nTITLE: Setting Example Runs with setExamples in TypeScript\nDESCRIPTION: Implements the setExamples method, assigning a readonly AxProgramExamples object as referential input/output examples for the agent. Used for prompt tuning or agent education; accepts a structured object and returns nothing. Implements AxAgentic's contract for providing sample data.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param {Readonly<AxProgramExamples>} examples\n * @returns {void}\n */\nsetExamples(examples: Readonly<AxProgramExamples>): void {\n  // ...apply examples...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining BlockNone Safety Threshold Value in TypeScript\nDESCRIPTION: Defines the `BlockNone` member of the `AxAIGoogleGeminiSafetyThreshold` enumeration. This setting disables content blocking based on harm probability.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiSafetyThreshold.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nBlockNone: \"BLOCK_NONE\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Name with getName() in AxRoute (TypeScript)\nDESCRIPTION: Explains the `getName` method of the `AxRoute` class. This method requires no parameters and returns the string name (`string`) assigned to the route instance during its construction. The method is defined in `src/ax/dsp/router.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRoute.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Getting service metrics for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the collected metrics for the AI service instance, such as usage statistics. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional options Property for AxAICohereArgs in TypeScript\nDESCRIPTION: This snippet defines the optional `options` property for the `AxAICohereArgs` interface. It accepts a read-only object conforming to the `AxAIServiceOptions` type alias, allowing for general service-level options to be passed. The property is optional.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAICohereArgs.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **options**: `Readonly`\\<[`AxAIServiceOptions`](/api/#03-apidocs/typealiasaxaiserviceoptions)\\>\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Program ID (setParentId) (TypeScript)\nDESCRIPTION: Assigns the identifier (`parentId`) of the parent program if this program instance is nested within another program. Used for establishing hierarchical relationships in program execution traces. Inherited from AxChainOfThought. Takes the parent ID string as input.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nsetParentId(parentId: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the 'name' Property in AxAICohereChatResponseToolCalls Object (TypeScript)\nDESCRIPTION: This defines the mandatory `name` property within each object of the `AxAICohereChatResponseToolCalls` array. The `name` property is expected to be a string, representing the identifier or name of the tool being invoked in the chat response.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatResponseToolCalls.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **name**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional tracer Property in AxDBBaseArgs (TypeScript)\nDESCRIPTION: Defines an optional `tracer` property of type `Tracer` within the base interface `AxDBBaseArgs`. This property is inherited by `AxDBCloudflareArgs` and allows for providing a tracer instance, likely used for monitoring or debugging database operations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBCloudflareArgs.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntracer?: `Tracer`\n```\n\n----------------------------------------\n\nTITLE: Declaring Google Gemini Chat Response Types in TypeScript\nDESCRIPTION: This snippet defines the AxAIGoogleGeminiChatResponse type, detailing the properties that encapsulate chat response candidates and usage metadata from Google Gemini AI. Dependencies include TypeScript, and the type object specifies that each response contains an array of candidate objects and a usageMetadata object tracking token usage (candidatesTokenCount, promptTokenCount, and totalTokenCount). Expected input/outputs involve enforcing structure on API responses; ensure all expected fields are present when used.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiChatResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxAIGoogleGeminiChatResponse = {\n  candidates: object[];\n  usageMetadata: {\n    candidatesTokenCount: number;\n    promptTokenCount: number;\n    totalTokenCount: number;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Service Metrics in Mistral Service - TypeScript\nDESCRIPTION: Provides a method to retrieve usage and runtime metrics from the Mistral API service wrapper, aiding in monitoring or diagnostics. Returns a strongly-typed AxAIServiceMetrics object and requires no input. Metrics contents depend on service implementation and inherited monitoring logic.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Getting model features for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the features supported by a specific model or the default model if none is specified. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFeatures(model?: AxAIOpenAIModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Streaming AI Program Execution with streamingForward in TypeScript\nDESCRIPTION: The streamingForward() function triggers a streaming forward inference using a provided AxAIService on the specified input, optionally with streaming configuration. Its return type, AxGenStreamingOut<OUT>, enables consumption of partial or chunked outputs, suitable for real-time or iterative AI model results. Supports advanced use cases like progress reporting or interactive applications.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nstreamingForward(_ai: Readonly<AxAIService<unknown, unknown>>, _values: IN, _options?: Readonly<AxProgramStreamingForwardOptions>): AxGenStreamingOut<OUT>\n```\n\n----------------------------------------\n\nTITLE: Defining 'ai' Property for AxDBManagerArgs in TypeScript\nDESCRIPTION: Defines the mandatory 'ai' property within the AxDBManagerArgs interface. This property is expected to hold an instance conforming to the `AxAIService` interface, providing AI-related functionalities.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBManagerArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nai: [`AxAIService`](/api/#03-apidocs/interfaceaxaiservice)\n```\n\n----------------------------------------\n\nTITLE: Defining 'id' property for AxAIOpenAIResponseDelta in TypeScript\nDESCRIPTION: Defines the `id` property for the `AxAIOpenAIResponseDelta` type. This property holds a string representing the unique identifier for the entire streaming response sequence.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIOpenAIResponseDelta.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Setting Routes for AxRouter (TypeScript)\nDESCRIPTION: Defines the 'setRoutes' method signature for the AxRouter class. This asynchronous method takes an array of readonly AxRoute objects to configure the routing logic. It returns a Promise that resolves to void upon successful setup of the routes.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRouter.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetRoutes(routes: readonly AxRoute[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Mistral 8x7B Model Identifier in TypeScript\nDESCRIPTION: This snippet defines the string identifier for the Mistral 8x7B model. It assigns the value 'open-mixtral-8x7b' to the `Mistral8x7B` member, likely within the `AxAIMistralModel` enumeration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIMistralModel.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMistral8x7B: \"open-mixtral-8x7b\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Output Fields with AxSignature in TypeScript\nDESCRIPTION: The getOutputFields method returns a readonly array of AxIField objects, capturing all defined output fields for the given signature. No parameters are needed; the return value gives the immutable list of output structures, assisting in documentation or automated processing.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetOutputFields(): readonly AxIField[]\n```\n\n----------------------------------------\n\nTITLE: Getting Service Metrics in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase used to retrieve performance and usage metrics for the AI service instance. Returns an AxAIServiceMetrics object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Defining Mistral 7B Model Identifier in TypeScript\nDESCRIPTION: This snippet defines the string identifier for the Mistral 7B model. It assigns the value 'open-mistral-7b' to the `Mistral7B` member, likely within the `AxAIMistralModel` enumeration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIMistralModel.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nMistral7B: \"open-mistral-7b\"\n```\n\n----------------------------------------\n\nTITLE: Executing Inherited Single Upsert in AxDBBase TypeScript\nDESCRIPTION: Public method inherited from `AxDBBase` for performing single upsert operations. It accepts a readonly `AxDBUpsertRequest` object (`req`) and an optional `update` flag. It returns a Promise resolving to an `AxDBUpsertResponse`. This method typically delegates the core logic to the overridden `_upsert` implementation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBWeaviate.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nupsert(req, update?): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Upserting Data (Inherited from Base) with TypeScript\nDESCRIPTION: The upsert method exposed in AxDBPinecone is inherited from AxDBBase. It accepts an immutable AxDBUpsertRequest and optional update flag, then returns a Promise resolving to AxDBUpsertResponse. Inputs must adhere to AxDBUpsertRequest typing, returning operation status and details. Used for inserting or updating a single entry in the database, with error handling delegated to the base implementation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBPinecone.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync upsert(\n  req: Readonly<AxDBUpsertRequest>,\n  update?: boolean\n): Promise<AxDBUpsertResponse>;\n```\n\n----------------------------------------\n\nTITLE: Getting Available Models for AxAIDeepSeek (TypeScript)\nDESCRIPTION: Retrieves the list of models available through this AxAIDeepSeek configuration. Inherited from `AxAIOpenAIBase`, this method returns an `AxAIModelList` or `undefined` if the list is not available or applicable.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Getting Model List in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the list of available models (AxAIModelList) supported by the service, if available. Returns undefined if the list is not provided or cannot be determined.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Defining AxField Properties - TypeScript\nDESCRIPTION: This snippet illustrates the property list of the AxField interface in TypeScript, specifying both required and optional fields such as name, title, description, type, isInternal, and isOptional. The interface is used to define properties for fields in signal-processing structures, requiring the 'name' as a mandatory string, while all others are optional with explicit typing. The optional 'type' property further details sub-properties like name, isArray, and classes, with a restricted set of allowed type names. Dependencies include TypeScript types and interface conventions; no external packages are required. Inputs are field property definitions, and outputs are strongly-typed field specifications. Limitations include set type names for the 'type' property; all properties should follow documented types and optionality.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxField.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AxField {\n  name: string;\n  title?: string;\n  description?: string;\n  type?: {\n    name: \"string\" | \"number\" | \"boolean\" | \"image\" | \"audio\" | \"json\" | \"datetime\" | \"date\" | \"code\" | \"class\";\n    isArray: boolean;\n    classes?: string[];\n  };\n  isOptional?: boolean;\n  isInternal?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Feature Metadata for a Model in Mistral Service - TypeScript\nDESCRIPTION: Implements a method for retrieving feature information for a specified Mistral model (if provided), enabling introspection of capabilities such as function calling, limits, and supported modalities. Returns a typed AxAIFeatures object with structured metadata for clients to review. May return default or model-specific features depending on the provided argument.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetFeatures(model?: AxAIMistralModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Batch Upserting Data into Pinecone with TypeScript\nDESCRIPTION: The _batchUpsert method allows multiple upsert operations as a single batch. It accepts an array of immutable AxDBUpsertRequest entries, an optional boolean update flag, and an optional options object, then returns a Promise resolving to an AxDBUpsertResponse. Dependencies include Pinecone SDK, the Ax framework, and proper data models. Inputs must follow the expected request structure; results include success/failure per item, and it will reject unsupported types or malformed requests.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBPinecone.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync _batchUpsert(\n  batchReq: readonly AxDBUpsertRequest[],\n  _update?: boolean,\n  options?: Readonly<AxDBBaseOpOptions>\n): Promise<AxDBUpsertResponse>;\n```\n\n----------------------------------------\n\nTITLE: Declaring AxAIGoogleGeminiChatRequest Object Type - TypeScript\nDESCRIPTION: This snippet defines the AxAIGoogleGeminiChatRequest object type in TypeScript, specifying the structure for chat request objects sent to Google Gemini via Ax. The type includes required properties like contents (an array of AxAIGoogleGeminiContent objects) and generationConfig, as well as several optional fields such as safetySettings, systemInstruction, toolConfig, and tools, all referencing other type aliases to ensure type safety. Inputs include chat message contents and configuration; outputs are expected as objects conforming to this type. Dependencies include the related type aliases (AxAIGoogleGeminiContent, AxAIGoogleGeminiGenerationConfig, etc.), and this type must be used in the context of Google Gemini chat API client implementations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiChatRequest.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AxAIGoogleGeminiChatRequest = {\n  contents: AxAIGoogleGeminiContent[];\n  generationConfig: AxAIGoogleGeminiGenerationConfig;\n  safetySettings?: AxAIGoogleGeminiSafetySettings;\n  systemInstruction?: AxAIGoogleGeminiContent;\n  toolConfig?: AxAIGoogleGeminiToolConfig;\n  tools?: AxAIGoogleGeminiTool[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIOpenAIModel Enum Members for OpenAI Model Identifiers in TypeScript\nDESCRIPTION: This snippet defines individual members of a TypeScript enum (AxAIOpenAIModel) used to specify OpenAI model identifiers as exact string values. Each member corresponds to a specific model, enabling clear and type-safe references within any Ax code that integrates with OpenAI APIs. There are no external dependencies, and each identifier is a string literal representing an available or supported OpenAI model; these are to be used as values when configuring model-related API requests or logic. Inputs are static enum names, and outputs are strings representing model IDs for use in interactions with the OpenAI platform.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIOpenAIModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGPT35TextDavinci002 = \\\"text-davinci-002\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGPT35Turbo = \\\"gpt-3.5-turbo\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGPT35TurboInstruct = \\\"gpt-3.5-turbo-instruct\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGPT3TextAda001 = \\\"text-ada-001\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGPT3TextBabbage002 = \\\"text-babbage-002\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGPT4 = \\\"gpt-4\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGPT4ChatGPT4O = \\\"chatgpt-4o-latest\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGPT4O = \\\"gpt-4o\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGPT4OMini = \\\"gpt-4o-mini\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGPT4Turbo = \\\"gpt-4-turbo\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nO1 = \\\"o1\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nO1Mini = \\\"o1-mini\\\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nO3Mini = \\\"o3-mini\\\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supported Groq Features in TypeScript\nDESCRIPTION: The getFeatures method returns feature metadata for a specific Groq model or for a default model if none is provided. Inputs are optional and specify the model; the output is a detailed features object. Relies on the AxAIGroqModel enum and AxAIFeatures interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetFeatures(model?: AxAIGroqModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Constructing AxBalancer Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `AxBalancer` class. It takes a readonly array of `AxAIService` instances and optional `AxBalancerOptions` to initialize a balancer that rotates through the provided services. Returns a new instance of `AxBalancer`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxBalancer(services, options?): AxBalancer\n```\n\n----------------------------------------\n\nTITLE: Setting the Agent Definition with setDefinition in TypeScript\nDESCRIPTION: Sets or updates the textual definition of the AxAgent instance. The argument is a string that replaces the agent's current definition, and the method does not return a value. Used when agents are dynamically updated or want to refresh prompt instructions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param {string} definition\n * @returns {void}\n */\nsetDefinition(definition: string): void {\n  // ...update agent definition...\n}\n\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI getFeatures() Method Signature in TypeScript\nDESCRIPTION: Defines the `getFeatures` method to query the capabilities supported by a specific model or the service in general. It optionally takes a model identifier (`TModel`) and returns an `AxAIFeatures` object describing supported functionalities like JSON mode, function calling, etc. This method implements the `getFeatures` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFeatures(model?: TModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Registering Sub-Program (register) (TypeScript)\nDESCRIPTION: Registers a tunable and usable sub-program within this program, potentially for optimization or modularity. Inherited from AxChainOfThought. Takes the sub-program (`prog`) instance conforming to AxTunable and AxUsable interfaces as input.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nregister(prog: Readonly<AxTunable & AxUsable>): void\n```\n\n----------------------------------------\n\nTITLE: Setting Input/Output Examples for AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method sets structured input/output examples (`examples` of type `AxProgramExamples`) for the program. These examples are typically used for fine-tuning or providing context to the underlying AI model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetExamples(examples: Readonly<AxProgramExamples>): void\n```\n\n----------------------------------------\n\nTITLE: Setting Description in AxSignature in TypeScript\nDESCRIPTION: The setDescription method updates the human-readable description associated with the signature by taking a string parameter 'desc'. It's a void method with no dependencies outside the signature instance itself. Primarily, it's used to provide context or documentation on the intended purpose of the signature. No return value; limitations relate to the description's format only being a string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetDescription(desc: string): void\n```\n\n----------------------------------------\n\nTITLE: Obtaining Service Options in Mistral Service - TypeScript\nDESCRIPTION: Provides a readonly accessor to the current service options configuration for the Mistral service. Outputs the typed AxAIServiceOptions structure for use in audits, diagnostics, or dynamic re-configuration flows.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract _query Property - TypeScript\nDESCRIPTION: Defines an optional property _query on AxDBBase for implementing custom query logic per backend. The property is a function accepting a query request object and optional operation options, returning a Promise with an AxDBQueryResponse. Subclasses implement this method to interact with the corresponding query API of a specific backend.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBBase.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n_query?: (req: Readonly<AxDBQueryRequest>, options?: Readonly<AxDBBaseOpOptions>) => Promise<AxDBQueryResponse>;\n```\n\n----------------------------------------\n\nTITLE: Setting the Name of AxAIDeepSeek Service (TypeScript)\nDESCRIPTION: Assigns a new name to the AxAIDeepSeek service instance for identification purposes. Inherited from `AxAIOpenAIBase`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Customizing HTTP Headers in Mistral Service - TypeScript\nDESCRIPTION: Enables dynamic setting of HTTP headers for all outbound requests to the Mistral API by providing a function that returns a promise resolving to a record of header key-value pairs. Used to inject authentication, tracking, or custom headers at runtime, without modifying request logic.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Querying Data (Inherited from Base) with TypeScript\nDESCRIPTION: The _query method (optional override from AxDBBase) accepts an immutable request and options, returning a Promise with AxDBQueryResponse containing query results. Typically implemented in the base class and can be customized for provider-specific logic. Inputs/outputs follow Ax type contracts, and constraint is on serializable filter/query match parameters.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBPinecone.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n_query?: (\n  req: Readonly<AxDBQueryRequest>,\n  options?: Readonly<AxDBBaseOpOptions>\n) => Promise<AxDBQueryResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining the 'delta' Property for AxAIAnthropicMessageDeltaEvent in TypeScript\nDESCRIPTION: Defines the `delta` property as an object within the `AxAIAnthropicMessageDeltaEvent` type. This object contains details about the message change, including potential `stop_reason` (null, 'end_turn', 'max_tokens', or 'stop_sequence') and `stop_sequence` (null or string).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicMessageDeltaEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/anthropic/types.ts#L198\ndelta: {\n  stop_reason: null | \"end_turn\" | \"max_tokens\" | \"stop_sequence\";\n  stop_sequence: null | string;\n  // Note: The source describes 'delta' as 'object', the detailed sub-properties are listed separately.\n};\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI setOptions() Method Signature in TypeScript\nDESCRIPTION: Defines the `setOptions` method to update the configuration options for the AI service. It accepts a read-only `AxAIServiceOptions` object containing the new settings. It returns void. This method implements the `setOptions` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Setting Unique Identifier for AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method assigns a unique string identifier (`id`) to the program instance. This ID can be useful for tracking and logging purposes.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nsetId(id: string): void\n```\n\n----------------------------------------\n\nTITLE: model Property Definition (TypeScript)\nDESCRIPTION: Specifies the `model` property within the `AxAIRekaChatResponse` type, indicating the model used for the response, represented as a string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIRekaChatResponse.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmodel: string\n```\n\n----------------------------------------\n\nTITLE: Getting Logs from a Docker Container via AxDockerSession in TypeScript\nDESCRIPTION: Retrieves the logs from the Docker container currently connected via `connectToContainer`. This asynchronous method returns a Promise that resolves with the container's accumulated logs (stdout and stderr) as a single string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetContainerLogs(): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `fetch` Property in AxApacheTikaArgs (TypeScript)\nDESCRIPTION: Defines the optional `fetch` property for the `AxApacheTikaArgs` interface. This property allows providing a custom fetch function implementation (conforming to the standard Fetch API) for making requests, likely to the Apache Tika server. It accepts the standard `input` (URL or Request object) and optional `init` (RequestInit options) parameters and returns a Promise resolving to a Response object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxApacheTikaArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetch?: (input: string | URL | Request, init?: RequestInit) => Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context with getContext() in AxRoute (TypeScript)\nDESCRIPTION: Details the `getContext` method of the `AxRoute` class. This method takes no parameters and returns the readonly array of strings (`readonly string[]`) representing the context associated with the route instance. It is defined in `src/ax/dsp/router.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRoute.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetContext(): readonly string[]\n```\n\n----------------------------------------\n\nTITLE: Starting a Docker Container via AxDockerSession in TypeScript\nDESCRIPTION: Starts the Docker container to which the session is currently connected via `connectToContainer`. This asynchronous method returns a Promise that resolves once the Docker API confirms the container has started.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstartContainer(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `promptTemplate` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `promptTemplate` property for `AxGenOptions`. This property accepts a reference to the `AxPromptTemplate` class, allowing specification of a custom template engine or class for constructing prompts.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **promptTemplate**: *typeof* [`AxPromptTemplate`](/api/#03-apidocs/classaxprompttemplate)\n```\n\n----------------------------------------\n\nTITLE: Setting State for AxRouter (TypeScript)\nDESCRIPTION: Defines the 'setState' method signature for the AxRouter class. It accepts an AxDBState object to set or update the internal database state of the router instance. This method returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRouter.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetState(state: AxDBState): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxChatResponse Type Alias in TypeScript\nDESCRIPTION: This TypeScript type alias defines the structure for `AxChatResponse`. It includes optional properties `embedModelUsage` and `modelUsage` (both of type `AxTokenUsage`), `remoteId` (string), and `sessionId` (string). It has one required property `results`, which is a read-only array of `AxChatResponseResult`. This type is used to represent the complete response from an AI chat interaction.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxChatResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/types.ts#L96\ntype AxChatResponse = {\n  /**\n   * Optional: Token usage details related to embedding models.\n   * Type: AxTokenUsage\n   */\n  embedModelUsage?: AxTokenUsage;\n\n  /**\n   * Optional: Token usage details related to the main chat model.\n   * Type: AxTokenUsage\n   */\n  modelUsage?: AxTokenUsage;\n\n  /**\n   * Optional: An identifier from the remote service.\n   * Type: string\n   */\n  remoteId?: string;\n\n  /**\n   * Required: An array containing the results of the chat interaction.\n   * Type: readonly AxChatResponseResult[]\n   */\n  results: readonly AxChatResponseResult[];\n\n  /**\n   * Optional: An identifier for the session.\n   * Type: string\n   */\n  sessionId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Tunable and Usable Program within AxGen (TypeScript)\nDESCRIPTION: Registers another program or module, supplying its tunable/usable options to the AxGen instance. Used to wire up program compositions or hierarchical modules. Input is a program object adhering to AxTunable and AxUsable interfaces; output is void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nregister(prog: Readonly<AxTunable & AxUsable>): void\n```\n\n----------------------------------------\n\nTITLE: Setting Demonstration Examples for Program Tuning in TypeScript\nDESCRIPTION: Defines the `setDemos` method, implementing `AxTunable.setDemos`. It accepts a readonly array of demonstration examples (`AxProgramDemos`) used potentially for few-shot learning or fine-tuning the program's behavior based on provided input/output pairs. Returns `void`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetDemos(demos): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Name - TypeScript\nDESCRIPTION: This utility retrieves the logical name of the AxAIGoogleGemini service instance as a string. Useful for debugging, logging, and differentiating between multiple service registrations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Defining BlockLowAndAbove Safety Threshold Value in TypeScript\nDESCRIPTION: Defines the `BlockLowAndAbove` member of the `AxAIGoogleGeminiSafetyThreshold` enumeration. This threshold blocks content classified as low harm probability and above.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiSafetyThreshold.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nBlockLowAndAbove: \"BLOCK_LOW_AND_ABOVE\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional 'format' Property for Tika Conversion in TypeScript\nDESCRIPTION: This TypeScript snippet defines an optional property named `format` within an interface (likely `AxApacheTikaConvertOptions`). The property accepts a string literal type, restricted to either 'text' or 'html', specifying the desired output format for an Apache Tika conversion operation. Its presence is optional.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxApacheTikaConvertOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **format**: `\"text\"` \\| `\"html\"`\n```\n\n----------------------------------------\n\nTITLE: Internal Forwarding Logic (_forward1) (TypeScript)\nDESCRIPTION: Internal method inherited from AxChainOfThought, likely handling the core generation logic as an AsyncGenerator. It takes an AI service instance, input values (context string array and question string), and forward options, yielding partial results incrementally. This method is typically not called directly by users.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n_forward1(ai: Readonly<AxAIService<unknown, unknown>>, values: { context: string[]; question: string; }, options: Readonly<AxProgramForwardOptions>): AsyncGenerator<{ delta: Partial<object & object>; version: number; }, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: Getting Default Models in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the default model and embedding model names configured for the service instance. Returns a readonly object containing 'model' and 'embedModel' string properties.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Defining Streaming Assertion Interface in TypeScript\nDESCRIPTION: This TypeScript snippet defines the AxStreamingAssertion interface, outlining its properties and methods for use in streaming assertion checks. It requires a string fieldName to specify the target field, an optional message for custom error reporting, and a method fn that receives content and an optional done flag, returning either undefined or a boolean result. The interface is typically used to create assertion rules for digital signal processing streams, ensuring streaming data meets certain validation criteria before processing continues.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxStreamingAssertion.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AxStreamingAssertion {\n  fieldName: string;\n  // Optional: Custom failure message\n  message?: string;\n  /**\n   * Assertion function for streaming content\n   * @param content - Streamed content string to check\n   * @param done - Optional flag, true if this is the last chunk\n   * @returns undefined or boolean depending on assertion\n   */\n  fn(content: string, done?: boolean): undefined | boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the In-Memory Database State (setDB) in AxDBMemory (TypeScript)\nDESCRIPTION: Defines a method to replace the current state of the in-memory database with a provided state. It accepts a state object (`state`) of type AxDBState and returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetDB(state: AxDBState): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Models with AxBalancer in TypeScript\nDESCRIPTION: Implements the `getDefaultModels` method from `AxAIService`. It returns a readonly object containing the default chat model (`model`) and embedding model (`embedModel`) names used by the balancer, typically determined from the configuration or the primary underlying service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configured Service Name via AxBaseAI in TypeScript\nDESCRIPTION: Returns the human-readable service name for this AI integration, facilitating display and user reference. The output is a string pulled from AxBaseAI's internal state. No parameters or special setup required.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Setting Service Name in Mistral Service - TypeScript\nDESCRIPTION: Configures or overrides the identifying name of the service. Accepts a string and returns void. Useful for multi-instance deployments or customized registry entries.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract _upsert Property - TypeScript\nDESCRIPTION: Defines an optional abstract property _upsert on AxDBBase, which must be implemented by subclasses if upsert functionality is needed. This property is a function that accepts an upsert request object (or array), an optional update flag, and optional operation options, and returns a Promise resolving to an AxDBUpsertResponse. It enforces type safety and structure for custom upsert logic at the adapter level.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBBase.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n_upsert?: (req: Readonly<AxDBUpsertRequest>, update?: boolean, options?: Readonly<AxDBBaseOpOptions>) => Promise<AxDBUpsertResponse>;\n```\n\n----------------------------------------\n\nTITLE: Overriding Embedding Method for Mistral Service - TypeScript\nDESCRIPTION: Implements or inherits the embed method to generate embeddings from the Mistral API. Accepts a typed request describing the model and input, plus optional action options, returning a promise that resolves to the embedding response. Integrates with types AxEmbedRequest, MistralEmbed, AxAIServiceActionOptions, and AxEmbedResponse, ensuring compatibility with standard embedding pipelines in TypeScript AI applications.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nembed(\n  req: Readonly<AxEmbedRequest<MistralEmbed>>,\n  options?: Readonly<AxAIServiceActionOptions<AxAIMistralModel, MistralEmbed>>\n): Promise<AxEmbedResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining AxMetricFn Type Alias in TypeScript\nDESCRIPTION: This snippet defines the AxMetricFn type alias in TypeScript for use as a metric evaluation function within the Ax framework. It describes a generic function type accepting an object containing an example and a prediction of type T, where T extends AxGenOut, and returns a boolean to indicate evaluation result. The type ensures type safety for metric implementations and requires dependencies on AxExample and AxGenOut types. Input is a readonly object with 'example' and 'prediction' fields, and output is a boolean metric decision.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxMetricFn.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxMetricFn**: \\<`T`\\>(`arg0`) => `boolean`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/dsp/optimize.ts#L15\n```\n\n----------------------------------------\n\nTITLE: Instantiating AxRoute Class in TypeScript\nDESCRIPTION: Describes the constructor for the `AxRoute` class. It takes a `name` (string) and a `context` (readonly array of strings) as parameters to create a new instance of `AxRoute`. This constructor is defined in the file `src/ax/dsp/router.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRoute.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxRoute(name, context): AxRoute\n```\n\n----------------------------------------\n\nTITLE: Getting AI Features for a Model via AxBalancer in TypeScript\nDESCRIPTION: Implements the `getFeatures` method from `AxAIService`. It retrieves the supported features (`AxAIFeatures`) for a specific AI model name (string) or the default model if none is provided. The features are determined by querying the capabilities of the underlying services managed by the balancer.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFeatures(model?): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Metrics - TypeScript\nDESCRIPTION: This method provides service-level analytics or operational metrics, such as usage counters, latencies, or failure rates. Returns an object conforming to the AxAIServiceMetrics interface for deeper operational insights or health monitoring.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Renaming the Groq Service Instance in TypeScript\nDESCRIPTION: The setName method updates the internal name of the Groq AI service instance, allowing runtime changes to identification. It takes a string and returns nothing, affecting getName output and related metadata.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the Top-Level 'type' Property in AxAIAnthropicErrorEvent (TypeScript)\nDESCRIPTION: Defines the top-level 'type' property for the AxAIAnthropicErrorEvent type. This property is a literal string 'error', used to identify the event specifically as an error type within the system.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicErrorEvent.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"error\"\n```\n\n----------------------------------------\n\nTITLE: Assigning AI Service Name - TypeScript\nDESCRIPTION: Details the 'setName' function, which accepts a string and assigns it as the service's name. No value is returned. Typically used during registration or dynamic configuration of provider instances. Method is inherited from AxBaseAI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI setName() Method Signature in TypeScript\nDESCRIPTION: Defines the `setName` method used to assign a custom name to the AI service instance. It takes the desired name as a string parameter and returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Constructing an AxAIOpenAI instance (TypeScript)\nDESCRIPTION: Defines the constructor for the AxAIOpenAI class. It initializes a new instance, taking configuration arguments excluding 'name' and 'modelInfo'. This constructor overrides the base class constructor.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxAIOpenAI(__namedParameters: Readonly<Omit<AxAIOpenAIArgs<\"openai\", AxAIOpenAIModel, AxAIOpenAIEmbedModel>, \"name\" | \"modelInfo\">>): AxAIOpenAI\n```\n\n----------------------------------------\n\nTITLE: Defining Weaviate Database Interface Arguments - TypeScript\nDESCRIPTION: This snippet defines the TypeScript AxDBWeaviateArgs interface for describing configuration arguments to connect to a Weaviate database within the Ax framework. It extends the AxDBBaseArgs interface, inheriting optional fields like tracer and fetch, while specifying required properties such as apiKey and host, as well as a fixed name property. The fetch method allows for custom HTTP requests, and tracer can be used for diagnostics. Dependencies include the TypeScript language and a compatible implementation of the AxDBBaseArgs and Tracer types. Inputs consist of the API key, host address, database name, and optional fetch and tracer instances. Outputs are type-safe objects conforming to this signature. The interface must be used where type-checking and structured configuration for Weaviate integration is needed.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBWeaviateArgs.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AxDBWeaviateArgs extends AxDBBaseArgs {\n  /** The API key for authenticating with the Weaviate database. */\n  apiKey: string;\n\n  /** The host address of the Weaviate instance. */\n  host: string;\n\n  /** The database name, fixed as 'weaviate'. */\n  name: \"weaviate\";\n\n  /** Optional fetch implementation for network requests. */\n  fetch?: (input: string | URL | Request, init?: RequestInit) => Promise<Response>;\n\n  /** Optional tracer for instrumentation, inherited from AxDBBaseArgs. */\n  tracer?: Tracer;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AxGenOut TypeAlias Using TypeScript Record\nDESCRIPTION: This TypeScript snippet defines the AxGenOut type alias as a Record with string keys and AxFieldValue values, supporting structured dynamic outputs. It depends on the AxFieldValue type, which must be defined and imported from the relevant module. Inputs are string keys, and each value must conform to the AxFieldValue type; output consists of a Record object enforcing this structure. There are no runtime effects—this is a compile-time type definition.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxGenOut.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxGenOut = Record<string, AxFieldValue>;\n```\n\n----------------------------------------\n\nTITLE: Executing Streaming Forward Pass for AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method executes the program logic similarly to `forward`, but provides results incrementally via an AsyncGenerator. It accepts an AI service (`ai`), input values (`values` of type `AxRewriteIn`), and optional streaming options (`options`), yielding partial outputs (`delta` of type `Partial<AxRewriteOut>`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nstreamingForward(ai: Readonly<AxAIService<unknown, unknown>>, values: AxRewriteIn, options?: Readonly<AxProgramStreamingForwardOptions>): AsyncGenerator<{ delta: Partial<AxRewriteOut>; version: number; }, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: Obtaining Supported Features for a Model - TypeScript\nDESCRIPTION: Specifies the 'getFeatures' method that provides a list of AI features (such as chat or embedding) supported by a specific or default AxAIReka model. Input is an optional model identifier, output is an AxAIFeatures interface. The method is useful for dynamic capability discovery and is inherited from AxBaseAI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFeatures(model?: AxAIRekaModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metrics for AxAIDeepSeek Service (TypeScript)\nDESCRIPTION: Fetches the performance and usage metrics associated with the AxAIDeepSeek service instance. Inherited from `AxAIOpenAIBase`, this method returns an `AxAIServiceMetrics` object containing relevant statistics.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Executing a Command in a Docker Container via AxDockerSession in TypeScript\nDESCRIPTION: Executes a given command string within the Docker container currently connected via `connectToContainer`. This asynchronous method returns a Promise that resolves with the standard output (stdout) generated by the executed command as a string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexecuteCommand(command: string): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Models via AxBalancer in TypeScript\nDESCRIPTION: Implements the `getModelList` method from `AxAIService`. Returns a list of available AI models (`AxAIModelList`) supported across the underlying services managed by the balancer, or `undefined` if the list is not available or cannot be determined.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional fetch Function Property in AxDBCloudflareArgs (TypeScript)\nDESCRIPTION: Defines an optional `fetch` property within the `AxDBCloudflareArgs` interface. This allows overriding the default fetch implementation, accepting standard fetch API arguments (`input` of type string, URL, or Request, and optional `init` of type RequestInit) and returning a Promise resolving to a Response object. This overrides the `fetch` property from the base interface `AxDBBaseArgs`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBCloudflareArgs.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfetch?: (`input`: string | URL | Request, `init`?: RequestInit) => `Promise`\\<`Response`\\>\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Changes - Markdown\nDESCRIPTION: This snippet demonstrates the structure of a changelog entry in markdown, including version headers, release dates, features, bug fixes, and links to commits. There are no programming language dependencies since the format is markdown. Inputs typically include version numbers, change descriptions, and commit URLs. The output is a rendered changelog in markdown. This format serves as documentation rather than executable code and may require manual edits or generation via release automation tools.\nSOURCE: https://github.com/ax-llm/ax/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [11.0.14](https://github.com/ax-llm/ax/compare/11.0.13...11.0.14) (2025-02-14)\n\n### Features\n\n* new earlyFail option ([0bac127](https://github.com/ax-llm/ax/commit/0bac127134a3905bbf893f69ef9ee333a9c6f48e))\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Response with AxAIServiceImpl in TypeScript\nDESCRIPTION: Defines the `createChatResp` method signature within the `AxAIServiceImpl` interface. This method processes a provider-specific chat response (`TChatResponse`) and converts it into a standardized `AxChatResponse`. It accepts a readonly `TChatResponse` as input.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIServiceImpl.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChatResp(resp: Readonly<TChatResponse>): AxChatResponse\n```\n\n----------------------------------------\n\nTITLE: Getting the Unique ID of AxBalancer in TypeScript\nDESCRIPTION: Implements the `getId` method from `AxAIService`. Returns a unique string identifier for this specific `AxBalancer` instance.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Defining the name Property Literal in AxDBCloudflareArgs (TypeScript)\nDESCRIPTION: Defines the `name` property within the `AxDBCloudflareArgs` interface as a required literal string type with the value \"cloudflare\". This property likely serves as a specific identifier for the Cloudflare database configuration type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBCloudflareArgs.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nname: `\"cloudflare\"`\n```\n\n----------------------------------------\n\nTITLE: Adding Assertion Function (addAssert) (TypeScript)\nDESCRIPTION: Adds an assertion function to validate the final generated output after the program completes. This method is inherited from AxChainOfThought. The provided function `fn` receives the final output values and should return `true` if validation passes, `false` or `undefined` otherwise. An optional custom error `message` can be provided.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddAssert(fn: (values) => undefined | boolean, message?: string): void\n```\n\n----------------------------------------\n\nTITLE: Extending OpenAI Base for Mistral Service - TypeScript\nDESCRIPTION: Defines the AxAIMistral class that extends AxAIOpenAIBase to provide support for Mistral-specific models and embedding workflows in the Ax AI system. The main constructor accepts strong-typed parameters for configuration, while exposing inherited and overridden methods to interact with the chat and embedding APIs, as well as service state and model metadata. Requires the base types and interfaces such as AxAIOpenAIBase, AxAIMistralModel, AxAIMistralEmbedModels, and related type definitions for requests and responses.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AxAIMistral extends AxAIOpenAIBase<AxAIMistralModel, AxAIMistralEmbedModels> {\n  constructor(__namedParameters: Readonly<Omit<AxAIMistralArgs, \"name\">>) {\n    super(__namedParameters);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the AxTokenUsage Type Properties in TypeScript\nDESCRIPTION: This section defines the properties of the `AxTokenUsage` object type in TypeScript. It includes `completionTokens`, `promptTokens`, and `totalTokens`, each explicitly declared as a `number`. This structure is intended to hold the token usage counts returned from an AI model interaction.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxTokenUsage.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxTokenUsage**: `object`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/types.ts#L29\n\n## Type declaration\n\n<a id=\"completionTokens\"></a>\n\n### completionTokens\n\n> **completionTokens**: `number`\n\n<a id=\"promptTokens\"></a>\n\n### promptTokens\n\n> **promptTokens**: `number`\n\n<a id=\"totalTokens\"></a>\n\n### totalTokens\n\n> **totalTokens**: `number`\n```\n\n----------------------------------------\n\nTITLE: Declaring Required model Property in AxAICohereConfig (TypeScript)\nDESCRIPTION: Declares a required property `model` within the `AxAICohereConfig` type. This property specifies the primary Cohere text generation model to be used, referencing the `AxAICohereModel` enumeration. This property is mandatory for configuring Cohere models within the Ax framework.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereConfig.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n### model\n\n> **model**: [`AxAICohereModel`](/api/#03-apidocs/enumerationaxaicoheremodel)\n```\n\n----------------------------------------\n\nTITLE: Constructing AxDBPinecone Instance with TypeScript\nDESCRIPTION: The constructor creates an AxDBPinecone instance using named parameters that omit the \\\"name\\\" property from AxDBPineconeArgs, enforcing immutability via Readonly and Omit TypeScript utilities. It is intended for initializing the service with required options while preventing mutation of configuration. Expects a parameter object with the necessary connection setup fields and will produce a ready-to-use AxDBPinecone object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBPinecone.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(__namedParameters: Readonly<Omit<AxDBPineconeArgs, \"name\">>);\n// Returns AxDBPinecone instance\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIOpenAIEmbedResponse Type in TypeScript\nDESCRIPTION: Defines the structure of the `AxAIOpenAIEmbedResponse` type as an object in TypeScript. This type represents the response from an OpenAI embedding API call, detailing the embedding data array, the model identifier string, and usage statistics which depend on the `AxAIOpenAIUsage` type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAIEmbedResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Represents the response structure for an OpenAI embedding request.\n * Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/openai/types.ts#L185\n */\ninterface AxAIOpenAIEmbedResponse {\n  /**\n   * An array of objects containing the embedding data.\n   */\n  data: object[];\n\n  /**\n   * The specific model used to generate the embeddings.\n   */\n  model: string;\n\n  /**\n   * Information about the token usage for the request.\n   * References the AxAIOpenAIUsage type for its structure.\n   * @see AxAIOpenAIUsage\n   */\n  usage: AxAIOpenAIUsage; // Assumes AxAIOpenAIUsage is defined elsewhere\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional 'parameters' Property in AxAICohereChatResponseToolCalls Object (TypeScript)\nDESCRIPTION: This defines the optional `parameters` property within each object of the `AxAICohereChatResponseToolCalls` array. The `parameters` property, if present, is an object containing the arguments or inputs passed to the called tool.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatResponseToolCalls.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **parameters**: `object`\n```\n\n----------------------------------------\n\nTITLE: Configuring MiPRO Optimization Levels in TypeScript\nDESCRIPTION: This snippet illustrates how to select optimization intensities (light, medium, heavy) with the AxMiPRO optimizer using the auto parameter. These levels control the balance between speed and thoroughness of optimization. This requires a properly configured AxMiPRO instance and metric function; expected output is an optimized program object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/03-tuning.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Light optimization (faster, less thorough)\nconst optimizedProgram = await optimizer.compile(metricFn, { auto: 'light' })\n\n// 2. Medium optimization (balanced)\nconst optimizedProgram = await optimizer.compile(metricFn, { auto: 'medium' })\n\n// 3. Heavy optimization (slower, more thorough)\nconst optimizedProgram = await optimizer.compile(metricFn, { auto: 'heavy' })\n```\n\n----------------------------------------\n\nTITLE: Running Reranker Forward Pass - AxGen - TypeScript\nDESCRIPTION: The forward method executes the reranking process synchronously by invoking the underlying LLM or scoring service via AxAIService. It takes an AI service, structured input, and optional execution options, returning a promise resolving to an AxRerankerOut object. Proper typing ensures that only Ax-compliant inputs and outputs are accepted, and all relevant types must be in scope from the Ax framework.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nforward(\n  ai: Readonly<AxAIService<unknown, unknown>>,\n  input: Readonly<AxRerankerIn>,\n  options?: Readonly<AxProgramForwardOptions>\n): Promise<AxRerankerOut>\n```\n\n----------------------------------------\n\nTITLE: Handling Embedding Requests with AxBalancer in TypeScript\nDESCRIPTION: Implements the `embed` method from the `AxAIService` interface. It takes an embedding request (`AxEmbedRequest`) and optional action options (`AxAIServiceActionOptions`), routes it to an appropriate underlying service based on the balancing logic, and returns a Promise resolving to an `AxEmbedResponse`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nembed(req, options?): Promise<AxEmbedResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining an Evaluation Metric Function with AxMetricFn - TypeScript\nDESCRIPTION: Defines an evaluation metric function (metricFn) compatible with AxMetricFn, using AxEvalUtil.emScore to calculate exact match scores between predictions and reference answers. Essential for evaluating LLM performance on QnA tasks during tuning. Requires the Ax framework and AxEvalUtil utilities.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Setup a evaluation metric em, f1 scores are a popular way measure retrieval performance.\nconst metricFn: AxMetricFn = ({ prediction, example }) => {\n  return AxEvalUtil.emScore(\n    prediction.answer as string,\n    example.answer as string\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional Rewriter Property Type in AxDBLoaderOptions\nDESCRIPTION: Specifies the type for the optional `rewriter` property within `AxDBLoaderOptions`. This property should hold an `AxProgram` configured to take `AxRewriteIn` as input and produce `AxRewriteOut`. This program is used to modify or enhance user queries before they are executed against the document database.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBLoaderOptions.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nAxProgram<AxRewriteIn, AxRewriteOut>\n```\n\n----------------------------------------\n\nTITLE: Getting Service ID in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the unique identifier string for the AI service instance.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIRekaArgs Interface for Reka AI Integration - TypeScript\nDESCRIPTION: Defines the AxAIRekaArgs TypeScript interface, describing all parameters required for configuring a Reka AI API integration. Requires associated types (like AxAIRekaConfig, AxModelInfo, AxAIRekaModel, and AxAIServiceOptions) to be defined or imported appropriately. Expects core properties such as the API key and name, with several optional configuration fields for advanced usage; inputs are type-checked at compile time, and outputs depend on their respective field types.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIRekaArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * AxAIRekaArgs interface defines configuration for the Reka AI integration.\n * Properties:\n *   - apiKey: string (required)\n *   - name: 'reka' (required)\n *   - apiURL?: string\n *   - config?: Readonly<Partial<AxAIRekaConfig>>\n *   - modelInfo?: readonly AxModelInfo[]\n *   - models?: AxAIInputModelList<AxAIRekaModel>\n *   - options?: Readonly<AxAIServiceOptions & object>\n */\nexport interface AxAIRekaArgs {\n  apiKey: string;\n  name: \"reka\";\n  apiURL?: string;\n  config?: Readonly<Partial<AxAIRekaConfig>>;\n  modelInfo?: readonly AxModelInfo[];\n  models?: AxAIInputModelList<AxAIRekaModel>;\n  options?: Readonly<AxAIServiceOptions & object>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Generic AxEmbedRequest Object Type in TypeScript\nDESCRIPTION: Defines the AxEmbedRequest generic object type, parameterized by TEmbedModel (defaulting to string). This type is used to specify the model for embedding and a list of texts to embed. Both embedModel and texts properties are optional, supporting flexible embedding request payloads. Requires TypeScript and is designed to be imported in type-aware Ax LLM projects.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxEmbedRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxEmbedRequest<TEmbedModel = string> = {\n  embedModel?: TEmbedModel;\n  texts?: readonly string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Output Fields Using AxSignature in TypeScript\nDESCRIPTION: The setOutputFields method allows batch setting all output fields of the signature using a readonly array of AxField objects. It does not return any value, but replaces any existing output field definitions. Useful for initializing or resetting the signature state in one call and requires the proper AxField interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOutputFields(fields: readonly AxField[]): void\n```\n\n----------------------------------------\n\nTITLE: Register Program/Component - AxGen - TypeScript\nDESCRIPTION: The register method attaches a tunable, usable Ax program definition to the reranker. The prog parameter must conform to AxTunable and AxUsable. This allows composition and organization of multiple processing units.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nregister(\n  prog: Readonly<AxTunable> & AxUsable\n): void\n```\n\n----------------------------------------\n\nTITLE: Define AxAIModels Union Type in TypeScript\nDESCRIPTION: This TypeScript code defines a union type alias named `AxAIModels`. It combines several specific model type definitions (AxAIOpenAIModel, AxAIAnthropicModel, etc.) into a single type. This allows for type-safe handling of various AI models supported by the library using one common alias, enabling functions or variables to accept any of the listed model types.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIModels.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AxAIModels =\n  | AxAIOpenAIModel\n  | AxAIAnthropicModel\n  | AxAIGroqModel\n  | AxAIGoogleGeminiModel\n  | AxAICohereModel\n  | AxAIHuggingFaceModel\n  | AxAIMistralModel\n  | AxAIDeepSeekModel;\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAI with Mistral Defaults in TypeScript\nDESCRIPTION: Demonstrates configuring AxAI for Mistral, using an environment variable for the API key and defaults for all other options. Highlights the ease of connecting to Mistral through AxAI without further customization.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/01-start/03-llms.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = new AxAI({\n  name: 'mistral',\n  apiKey: process.env.MISTRAL_APIKEY as string\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AxTunable Program Interface Methods | TypeScript\nDESCRIPTION: This TypeScript code defines five key interface methods for AxTunable in the context of the Ax project. The methods allow for retrieval of program execution traces, setting demonstration data, assigning example inputs and outputs, and specifying unique identifiers for the program and its parent. Dependencies include TypeScript and the Ax project type aliases: AxProgramTrace, AxProgramDemos, and AxProgramExamples. Inputs involve read-only arrays or single string identifiers, outputs are either arrays of traces or void. The implementation focuses on modular extensibility and consistent program data structuring, though actual method logic must be implemented by a concrete class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxTunable.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTraces(): AxProgramTrace[];\nsetDemos(demos: readonly AxProgramDemos[]): void;\nsetExamples(examples: Readonly<AxProgramExamples>): void;\nsetId(id: string): void;\nsetParentId(parentId: string): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Input Function Type Alias with TypeScript\nDESCRIPTION: This snippet declares the AxInputFunctionType type alias, enabling inputs as arrays of either AxFunction types or generic objects. The AxFunction type must be defined elsewhere in the codebase and is a core part of Ax's DSP routines. No external dependencies are required beyond the referenced AxFunction type, and the construct allows for type-safe flexibility when importing or handling multiple function-like entities.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxInputFunctionType.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxInputFunctionType = AxFunction[] | object[];\n```\n\n----------------------------------------\n\nTITLE: Defining the `index` Property for AxAIAnthropicContentBlockStopEvent in TypeScript\nDESCRIPTION: Defines the `index` property for the `AxAIAnthropicContentBlockStopEvent` type. This property holds a numeric value, typically indicating the index of the content block associated with the stop event within the Anthropic API response stream.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicContentBlockStopEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nindex: number\n```\n\n----------------------------------------\n\nTITLE: Defining Groq AI Model Enumeration in TypeScript\nDESCRIPTION: This TypeScript enum maps supported Groq AI model names to their unique string identifiers for use within the application. It allows developers to refer to models using descriptive names, reducing errors associated with hard-coding strings. No external dependencies are required, and each member represents a specific Groq model version; models include Llama3_8B, Llama33_70B, Mixtral_8x7B, and Gemma2_9B. Inputs are not accepted directly; instead, this enum is referenced elsewhere in the project, and all outputs are these string identifiers.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGroqModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AxAIGroqModel {\n  Llama3_8B = \"llama3-8b-8192\",\n  Llama33_70B = \"llama-3.3-70b-versatile\",\n  Mixtral_8x7B = \"mixtral-8x7b-32768\",\n  Gemma2_9B = \"gemma2-9b-it\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Agents to Model Context Protocol via AxMCPClient (TypeScript)\nDESCRIPTION: Shows how to initialize an AxMCPClient using AxMCPStdioTransport, connect to an MCP server, and use the client's functions in an agent or generator. Dependencies include '@ax-llm/ax', npx, and a compatible MCP server. Requires correct connection args and demonstrates attaching the client as a function provider for AxAgent and AxGen.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AxMCPClient, AxMCPStdioTransport } from '@ax-llm/ax'\n\n// Initialize an MCP client with a transport\nconst transport = new AxMCPStdioTransport({\n  command: 'npx',\n  args: ['-y', '@modelcontextprotocol/server-memory'],\n})\n\n// Create the client with optional debug mode\nconst client = new AxMCPClient(transport, { debug: true })\n\n// Initialize the connection\nawait client.init()\n\n// Use the client's functions in an agent\nconst memoryAgent = new AxAgent({\n  name: 'MemoryAssistant',\n  description: 'An assistant with persistent memory',\n  signature: 'input, userId -> response',\n  functions: [client], // Pass the client as a function provider\n})\n\n// Or use the client with AxGen\nconst memoryGen = new AxGen('input, userId -> response', {\n    functions: [client]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Service Options in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase to update the configuration options for the AI service instance. It takes a readonly object containing the new options (AxAIServiceOptions) and returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Upsert Operation with Weaviate in TypeScript\nDESCRIPTION: Protected method implementing the batch upsert logic specifically for Weaviate. It takes an array of `AxDBUpsertRequest` objects (`batchReq`), an optional boolean `update` flag, and optional `AxDBBaseOpOptions`. It returns a Promise resolving to an `AxDBUpsertResponse`. This method overrides `AxDBBase._batchUpsert`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBWeaviate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n_batchUpsert(batchReq, update?, options?): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Usage Analytics in AxGen (TypeScript)\nDESCRIPTION: Provides token usage statistics and related analytics for the current AxGen program session. Returns an array/object with AxTokenUsage data for introspecting cost, efficiency, or budgeting. No arguments required; method is inherited and shared across various AxProgram types.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetUsage(): AxTokenUsage & object[]\n```\n\n----------------------------------------\n\nTITLE: Defining Optional options Property for AxAIGoogleGeminiArgs in TypeScript\nDESCRIPTION: Defines the optional `options` property within the `AxAIGoogleGeminiArgs` interface. It accepts a read-only object merging `AxAIServiceOptions` and `AxAIGoogleGeminiOptionsTools` types, allowing for advanced service configurations, including specific tool usage settings for Google Gemini.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiArgs.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptions?: Readonly<AxAIServiceOptions & AxAIGoogleGeminiOptionsTools>\n```\n\n----------------------------------------\n\nTITLE: Accessing Available Model List - TypeScript\nDESCRIPTION: Implements getModelList, returning either an AxAIModelList (if available) or undefined. This enables discovery of all supported models by the service. Inputs are empty and output is either the available model metadata or undefined if not provided.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Defining AxRateLimiterFunction Type for Rate-Limited Requests - TypeScript\nDESCRIPTION: This code defines the AxRateLimiterFunction type alias in TypeScript, which accepts a request function returning a Promise of T or a ReadableStream of T and an info object containing embed and model usage details. It facilitates enforcing rate limits and tracking token usage for AI-related requests. The function is generic over T (default unknown), with strict input and output typing for consistent asynchronous handling.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxRateLimiterFunction.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxRateLimiterFunction<T = unknown> = (reqFunc: () => Promise<T | ReadableStream<T>>, info: Readonly<{ embedModelUsage: AxTokenUsage; modelUsage: AxTokenUsage; }>) => Promise<T | ReadableStream<T>>;\n```\n\n----------------------------------------\n\nTITLE: Querying Data in Cloudflare (TypeScript)\nDESCRIPTION: Provides an override of the query method, enabling querying operations against the Cloudflare-backed database. Accepts a typed query request and optional operation options, returning a promise with the query response. It leverages the AxDB types for schema enforcement and integrates specifically with Cloudflare's querying APIs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBCloudflare.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nquery(req: Readonly<AxDBQueryRequest>, options?: Readonly<AxDBBaseOpOptions>): Promise<AxDBQueryResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `mem` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `mem` property for `AxGenOptions`. This property takes an instance conforming to the `AxAIMemory` interface, allowing the generation process to utilize or update a persistent memory store.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **mem**: [`AxAIMemory`](/api/#03-apidocs/interfaceaxaimemory)\n```\n\n----------------------------------------\n\nTITLE: Declaring AxAIGoogleGeminiToolConfig Type - TypeScript\nDESCRIPTION: Declares a TypeScript object type for configuring function calling for the Google Gemini AI integration in the Ax framework. The type includes a property function_calling_config which requires an array of allowed function names and a mode (\"ANY\", \"NONE\", or \"AUTO\") to specify invocation behavior. No external code dependencies are necessary, but this type must be consumed in a TypeScript context, and values must match the constraints outlined. Expected usage involves passing strongly-typed configuration objects for AI tool customization.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiToolConfig.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AxAIGoogleGeminiToolConfig = {\n  function_calling_config: {\n    allowed_function_names: string[];\n    mode: \"ANY\" | \"NONE\" | \"AUTO\";\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Add Field Pre/Postprocessor - AxGen - TypeScript\nDESCRIPTION: The addFieldProcessor method allows registration of a processing function on a named field, either for mutation, formatting, or transformation. The processor function can be synchronous or streaming. Used for customizing input/output handling at the field level.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\naddFieldProcessor(\n  fieldName: string,\n  fn: AxFieldProcessorProcess | AxStreamingFieldProcessorProcess\n): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Groq Model Names in TypeScript\nDESCRIPTION: The getDefaultModels method returns an object containing the default model and embedModel names as readonly strings for use with the Groq service. It is parameterless and returns an object that helps manage default configuration. No external dependencies except for model type definitions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Adding an Output Field with AxSignature in TypeScript\nDESCRIPTION: This method allows for the addition of an output field, using a Readonly AxField argument that details the output parameters of the signature. It assumes that the correct AxField interface is imported. The 'field' parameter is mandatory and read-only. No return value. This is used to evolve the output aspect of signatures for functions or data shapes.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\naddOutputField(field: Readonly<AxField>): void\n```\n\n----------------------------------------\n\nTITLE: Defining the 'threshold' Property Type in TypeScript\nDESCRIPTION: This defines the `threshold` property for a safety setting object within the `AxAIGoogleGeminiSafetySettings` array. Its type is `AxAIGoogleGeminiSafetyThreshold`, an enumeration likely defining the blocking sensitivity levels (e.g., BLOCK_NONE, BLOCK_LOW_AND_ABOVE) for the corresponding safety category.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiSafetySettings.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **threshold**: [`AxAIGoogleGeminiSafetyThreshold`](/api/#03-apidocs/enumerationaxaigooglegeminisafetythreshold)\n```\n\n----------------------------------------\n\nTITLE: Exposing AxAIService Metrics - TypeScript\nDESCRIPTION: Implements getMetrics for accessing telemetry or health metrics about the AxAI service instance. Returns an object of type AxAIServiceMetrics which summarizes service usage, error counts, or other relevant runtime data. Useful for monitoring and instrumentation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Container using AxDockerSession in TypeScript\nDESCRIPTION: Creates a new Docker container based on the provided parameters, including the image name, tag, volume mappings, and an option to skip pulling the image if it's already present locally. This asynchronous method returns a Promise that resolves with an object containing the ID of the newly created container.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateContainer(__namedParameters: Readonly<{ doNotPullImage: boolean; imageName: string; tag: string; volumes: object[]; }>): Promise<{ Id: string; }>\n```\n\n----------------------------------------\n\nTITLE: Setting Generation Demos for AxGen Program (TypeScript)\nDESCRIPTION: Assigns demonstration data (example input/output pairs) to the current program. Requires input as an array of AxProgramDemos; returns void. Used for program synthesis, prompt tuning, or test scenario configuration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetDemos(demos: readonly AxProgramDemos[]): void\n```\n\n----------------------------------------\n\nTITLE: Set Example Collection - AxGen - TypeScript\nDESCRIPTION: setExamples allows assignment of a full set of canonical example inputs and/or outputs for this reranker. Accepts an AxProgramExamples object for advanced customization, learning, or documentation of the reranker behavior.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetExamples(\n  examples: Readonly<AxProgramExamples>\n): void\n```\n\n----------------------------------------\n\nTITLE: Setting Examples for Program Tuning in TypeScript\nDESCRIPTION: Defines the `setExamples` method, implementing `AxTunable.setExamples`. It accepts readonly program examples (`AxProgramExamples`), likely used for testing, validation, or tuning purposes within the framework, potentially for evaluating program performance against known cases. Returns `void`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetExamples(examples): void\n```\n\n----------------------------------------\n\nTITLE: Setting Program Examples (setExamples) (TypeScript)\nDESCRIPTION: Sets examples (`examples`) for the program, typically used for testing, evaluation, or fine-tuning purposes. Inherited from AxChainOfThought. Takes a readonly object conforming to AxProgramExamples.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetExamples(examples: Readonly<AxProgramExamples>): void\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI setHeaders() Method Signature in TypeScript\nDESCRIPTION: Defines the `setHeaders` method to set custom HTTP headers for API requests. It accepts an asynchronous function that returns a record of header key-value pairs (strings). This allows for dynamic header generation (e.g., for authentication tokens). It returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAI Chat Response Type with Typed Properties - TypeScript\nDESCRIPTION: This code declares the 'AxAIOpenAIChatResponse' TypeScript object type representing the structure of a response from the OpenAI Chat Completion API. The response includes an array of choice objects, a creation timestamp, string identifiers for the response and chosen model, a fixed object type, an optional error object detailing API errors, a system fingerprint field, and optionally usage metrics. This type is intended for use in applications that interface with OpenAI's chat API to ensure type safety and predictable response parsing. Usage relies on the OpenAI API and the corresponding 'AxAIOpenAIUsage' type for usage metrics.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAIChatResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * AxAIOpenAIChatResponse type declaration\n * Represents the structure of an OpenAI Chat Completion API response\n */\nexport interface AxAIOpenAIChatResponse {\n  /** Array of response choices */\n  choices: object[];\n  /** Creation timestamp */\n  created: number;\n  /** Optional error details */\n  error?: {\n    code: number;\n    message: string;\n    param: string;\n    type: string;\n  };\n  /** Unique identifier for the response */\n  id: string;\n  /** Model name used for the response */\n  model: string;\n  /** Constant object type for chat completion */\n  object: \"chat.completion\";\n  /** System fingerprint */\n  system_fingerprint: string;\n  /** Optional usage information */\n  usage?: AxAIOpenAIUsage;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Inherited Batch Upsert in AxDBBase TypeScript\nDESCRIPTION: Public method inherited from `AxDBBase` for performing batch upsert operations. It accepts an array of `AxDBUpsertRequest` objects (`req`) and an optional `update` flag. It returns a Promise resolving to an `AxDBUpsertResponse`. This method typically delegates the core logic to the overridden `_batchUpsert` implementation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBWeaviate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbatchUpsert(req, update?): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining the headers Function Property in AxBaseAIArgs (TypeScript)\nDESCRIPTION: This snippet defines the `headers` property as a function within AxBaseAIArgs. This function asynchronously returns a promise resolving to a Record (object) of string key-value pairs, typically used for setting HTTP headers for API requests.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxBaseAIArgs.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nheaders: () => `Promise`\\<`Record`\\<`string`, `string`\\>\\>\n```\n\n----------------------------------------\n\nTITLE: Upserting Data into Pinecone with TypeScript\nDESCRIPTION: The _upsert method supports inserting or updating a record in Pinecone. It takes an immutable AxDBUpsertRequest object, an optional update boolean, and optional operation options. Returns a Promise with the resulting AxDBUpsertResponse, indicating success or failure. The method relies on correct serialization of the request and requires dependencies such as Pinecone's Node package and correct Ax type definitions. If input structure mismatches or Pinecone is unreachable, errors may be thrown.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBPinecone.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync _upsert(\n  req: Readonly<AxDBUpsertRequest>,\n  update?: boolean,\n  options?: Readonly<AxDBBaseOpOptions>\n): Promise<AxDBUpsertResponse>;\n```\n\n----------------------------------------\n\nTITLE: Initializing AxAIAzureOpenAI Class (TypeScript)\nDESCRIPTION: Defines the constructor for the AxAIAzureOpenAI class. It takes named parameters based on AxAIAzureOpenAIArgs (excluding 'name' and 'modelInfo') to configure the Azure OpenAI service instance. This constructor overrides the base class constructor.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxAIAzureOpenAI(__namedParameters: Readonly<Omit<AxAIAzureOpenAIArgs, \"name\" | \"modelInfo\">>): AxAIAzureOpenAI\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional models Property for AxAICohereArgs in TypeScript\nDESCRIPTION: This snippet defines the optional `models` property for the `AxAICohereArgs` interface. It takes an `AxAIInputModelList` parameterized with `AxAICohereModel` enum types, specifying the list of Cohere models available or intended for use. The property is optional.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAICohereArgs.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **models**: `AxAIInputModelList`\\<[`AxAICohereModel`](/api/#03-apidocs/enumerationaxaicoheremodel)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional config Property for AxAICohereArgs in TypeScript\nDESCRIPTION: This snippet defines the optional `config` property for the `AxAICohereArgs` interface. It accepts a read-only partial object of type `AxAICohereConfig`, allowing for custom configuration settings for the Cohere AI service. The property is optional, indicated by the `?`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAICohereArgs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **config**: `Readonly`\\<`Partial`\\<[`AxAICohereConfig`](/api/#03-apidocs/typealiasaxaicohereconfig)>\\>\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Options for AxAIDeepSeek Service (TypeScript)\nDESCRIPTION: Updates the configuration options for the AxAIDeepSeek service instance. Inherited from `AxAIOpenAIBase`, this method accepts a readonly `AxAIServiceOptions` object to modify service behavior.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Defining AxEvaluateArgs Object Type with Generics (TypeScript)\nDESCRIPTION: This snippet defines the AxEvaluateArgs generic object type, which takes two type parameters: IN (extending AxGenIn) and OUT (extending AxGenOut). The object requires three properties: ai (implementing AxAIService), examples (a readonly array of AxExample), and program (a readonly AxProgram parameterized by IN and OUT types). Intended for use as structured arguments when evaluating AI models, the snippet requires relevant Ax types to be available in the scope and enforces readonly constraints for safety. It expects full type compatibility for IN and OUT parameters, ensuring robust typing when utilized.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxEvaluateArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * AxEvaluateArgs<IN, OUT>: object\n * \n * Type parameters:\n *   IN extends AxGenIn\n *   OUT extends AxGenOut\n *\n * Properties:\n *   ai: AxAIService\n *   examples: Readonly<AxExample[]>\n *   program: Readonly<AxProgram<IN, OUT>>\n */\n\n```\n\n----------------------------------------\n\nTITLE: Listing Available Groq Models in TypeScript\nDESCRIPTION: The getModelList method returns an array of available models for the Groq service, or undefined if not applicable. Its output is useful for dynamic model selection or introspection, and the data structure is determined by AxAIModelList.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Constructing AxAIGroq Service with TypeScript\nDESCRIPTION: The constructor initializes the AxAIGroq service by accepting a parameter object with Groq-specific configuration, omitting the \\\"name\\\" property. It requires the user to provide an object adhering to the Omit<AxAIGroqArgs, \\\"name\\\"> type, and returns an instance of AxAIGroq for Groq API communication. Dependencies include AxAIGroqModel enum, AxAIGroqArgs, and the AxAIOpenAIBase base class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(__namedParameters: Readonly<Omit<AxAIGroqArgs, \"name\">>): AxAIGroq\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Rows with getData Method in TypeScript\nDESCRIPTION: This synchronous method returns all currently loaded data rows as an array of AxDataRow type. It does not accept any arguments and is typically called after data has been loaded internally. The method relies on internal state set by either the constructor or previous setter calls. The output is an array of data row objects; if no data has been loaded, the returned array may be empty.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxHFDataLoader.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetData(): AxDataRow[]\n```\n\n----------------------------------------\n\nTITLE: Defining AxDataRow Object Type in TypeScript\nDESCRIPTION: This snippet defines the AxDataRow type as an object in TypeScript, enabling structured assignment of data rows with dynamic keys. It is used for representing a single row of data within the AX data processing logic. The object format allows keys of any string mapped to specialized AxFieldValue types, promoting flexibility and type safety for field values. There are no runtime dependencies, but it requires reference to the AxFieldValue alias or type definition. Inputs are expected as objects with string keys and properly typed values; output is a strongly-typed object conforming to this schema.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDataRow.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * AxDataRow: object\n * \n * Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/dsp/loader.ts#L3\n */\n\n// row: Record<string, AxFieldValue>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Service Options for Groq in TypeScript\nDESCRIPTION: The setOptions method allows updating the entire options configuration for the Groq service at runtime, by providing a readonly AxAIServiceOptions object. This method overrides the parent base class implementation and does not return a value. Proper typing of the options parameter is required for correct operation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Batch Upserting into Cloudflare (TypeScript)\nDESCRIPTION: Implements the batchUpsert method for efficiently batch upserting multiple records into the Cloudflare database. Accepts an array of upsert requests, an optional update flag, and optional operation options, returning a promise with upsert responses. This method overrides the base implementation and is optimized for integration with Cloudflare's batch interfaces.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBCloudflare.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbatchUpsert(batchReq: readonly AxDBUpsertRequest[], update?: boolean, options?: Readonly<AxDBBaseOpOptions>): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'ai' Property Type in TypeScript\nDESCRIPTION: Defines the `ai` property within the `AxOptimizerArgs` type. This property must hold an instance conforming to the `AxAIService` interface, representing the AI service to be used by the optimizer.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxOptimizerArgs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nai: AxAIService\n```\n\n----------------------------------------\n\nTITLE: Setting Service Options - TypeScript\nDESCRIPTION: Permits updating all configuration options of the AxAIGoogleGemini service instance at runtime by passing in a readonly configuration object. This enables feature toggling, reconfiguration, or environment switching post-construction.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemini20FlashLite Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemini20FlashLite` assigned the string value `\"gemini-2.0-flash-lite-preview-02-05\"`. This identifier specifies a preview version of the Gemini 2.0 Flash Lite model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nGemini20FlashLite: \"gemini-2.0-flash-lite-preview-02-05\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Anthropic Claude 3 Opus Model Identifier - TypeScript\nDESCRIPTION: Introduces the 'Claude3Opus' member paired with 'claude-3-opus-latest' for model selection. This pattern centralizes and safeguards the use of valid Anthropic model IDs within the TypeScript environment.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIAnthropicModel.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nClaude3Opus: \"claude-3-opus-latest\"\n```\n\n----------------------------------------\n\nTITLE: Declaring AxAICohereChatResponse Object Type in TypeScript\nDESCRIPTION: Defines the AxAICohereChatResponse object type, representing structured chat completions including status, token usage, and response metadata. Requires TypeScript and the referenced AxAICohereChatResponseToolCalls type. Key properties include finish_reason (with constrained string values), unique generation and response identifiers, a meta object tracking billed tokens, the main response text, and any associated tool call actions. Input is typically from the Cohere chat API, and output follows this shape for downstream processing and validation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AxAICohereChatResponse = {\n  finish_reason: \"COMPLETE\" | \"ERROR\" | \"ERROR_TOXIC\" | \"ERROR_LIMIT\" | \"USER_CANCEL\" | \"MAX_TOKENS\";\n  generation_id: string;\n  meta: {\n    billed_units: {\n      input_tokens: number;\n      output_tokens: number;\n    };\n  };\n  response_id: string;\n  text: string;\n  tool_calls: AxAICohereChatResponseToolCalls;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemini1Pro Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemini1Pro` assigned the string value `\"gemini-1.0-pro\"`. This identifier specifies the Gemini 1.0 Pro model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nGemini1Pro: \"gemini-1.0-pro\"\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAIRekaChatRequest Type Structure in TypeScript\nDESCRIPTION: Defines the TypeScript object type `AxAIRekaChatRequest` used for constructing chat completion requests to the Reka AI model via the Ax library. It includes properties for the model, messages, token limits, sampling parameters (temperature, top_p, top_k), penalties, stop sequences, streaming options, response format, usage tracking, and search engine usage.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIRekaChatRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIRekaChatRequest**: `object`\n\nDefined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/reka/types.ts#L20\n\n## Type declaration\n\n<a id=\"frequency_penalty\"></a>\n\n### frequency\\_penalty?\n\n> `optional` **frequency\\_penalty**: `number`\n\n<a id=\"max_tokens\"></a>\n\n### max\\_tokens\n\n> **max\\_tokens**: `number`\n\n<a id=\"messages\"></a>\n\n### messages\n\n> **messages**: (\\{ `content`: `string` \\| `object`[]; `role`: `\"user\"`; \\} \\| \\{ `content`: `string` \\| `object`[]; `role`: `\"assistant\"`; \\})[]\n\n<a id=\"model\"></a>\n\n### model\n\n> **model**: `string`\n\n<a id=\"presence_penalty\"></a>\n\n### presence\\_penalty?\n\n> `optional` **presence\\_penalty**: `number`\n\n### response\\_format?\n\n> \\{ `type`: `string`; \\}\n\n<a id=\"stop\"></a>\n\n### stop?\n\n> `optional` **stop**: readonly `string`[]\n\n<a id=\"stream\"></a>\n\n### stream?\n\n> `optional` **stream**: `boolean`\n\n<a id=\"temperature\"></a>\n\n### temperature?\n\n> `optional` **temperature**: `number`\n\n<a id=\"top_k\"></a>\n\n### top\\_k?\n\n> `optional` **top\\_k**: `number`\n\n<a id=\"top_p\"></a>\n\n### top\\_p?\n\n> `optional` **top\\_p**: `number`\n\n<a id=\"usage\"></a>\n\n### usage?\n\n> `optional` **usage**: [`AxAIRekaUsage`](/api/#03-apidocs/typealiasaxairekausage)\n\n<a id=\"use_search_engine\"></a>\n\n### use\\_search\\_engine?\n\n> `optional` **use\\_search\\_engine**: `boolean`\n```\n\n----------------------------------------\n\nTITLE: AxAIRekaChatResponse Type Definition (TypeScript)\nDESCRIPTION: Defines the structure for the `AxAIRekaChatResponse` object type in TypeScript. It includes properties for the response ID, the model used, an array of response objects, and optional usage statistics.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIRekaChatResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAxAIRekaChatResponse: object\n```\n\n----------------------------------------\n\nTITLE: Retrieving Program Signature in TypeScript\nDESCRIPTION: Defines the `getSignature` method which returns the `AxSignature` object associated with this program instance. This allows introspection of the program's defined input and output structure.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetSignature(): AxSignature\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemini20Flash Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemini20Flash` assigned the string value `\"gemini-2.0-flash\"`. This identifier specifies the Gemini 2.0 Flash model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nGemini20Flash: \"gemini-2.0-flash\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Signature of AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method returns the `AxSignature` object associated with the program. The signature defines the expected input and output fields and their types.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetSignature(): AxSignature\n```\n\n----------------------------------------\n\nTITLE: Getting Token Usage (getUsage) (TypeScript)\nDESCRIPTION: Retrieves the token usage statistics (e.g., prompt tokens, completion tokens, total cost) accumulated during the program's execution. Inherited from AxChainOfThought. Returns an array containing AxTokenUsage objects merged with potentially other usage details.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRAG.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetUsage(): (AxTokenUsage & object)[]\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional tracer Property Type in AxDBMemoryArgs (TypeScript)\nDESCRIPTION: Defines the type signature for the optional 'tracer' property within the AxDBMemoryArgs interface, inherited from AxDBBaseArgs. This property expects an object conforming to the 'Tracer' type, intended for use in logging, monitoring, or tracing database operations for observability purposes.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBMemoryArgs.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntracer?: Tracer\n```\n\n----------------------------------------\n\nTITLE: Adding a Chat Response Result to AxMemory in TypeScript\nDESCRIPTION: Defines the `addResult` method for the AxMemory class. It appends a read-only chat response result (`AxChatResponseResult`) to the memory for the specified session or the default session. This is typically used to store the final output from an AI model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxMemory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddResult(result, sessionId?): void\n```\n\n----------------------------------------\n\nTITLE: Setting or Updating Service Options - TypeScript\nDESCRIPTION: Implements setOptions which applies new read-only service options for the AxAI instance. Used to reconfigure the service at runtime, input must match AxAIServiceOptions schema. Does not return a value.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Setting Service Options for AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` used to update the configuration options for the AI service instance. Accepts a readonly object (`AxAIServiceOptions`) containing the new settings.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options): void\n```\n\n----------------------------------------\n\nTITLE: Applying Service Options in Mistral Service - TypeScript\nDESCRIPTION: Allows updating the service configuration by supplying a strongly-typed, readonly set of AxAIServiceOptions. Used to reconfigure runtime behavior of the service including quotas, model restrictions, or custom logic. Ensures type safety and immutability conventions.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Defining AxDBQueryResponse Type in TypeScript\nDESCRIPTION: This snippet defines the `AxDBQueryResponse` as an object type in TypeScript. It serves as the base structure for responses returned from database queries within the Ax framework, as defined in the referenced GitHub source file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDBQueryResponse.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nAxDBQueryResponse: object\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `rateLimiter` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `rateLimiter` property for `AxGenOptions`. This property accepts a function conforming to `AxRateLimiterFunction`, used to control the rate of requests made during the generation process, potentially to external APIs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **rateLimiter**: [`AxRateLimiterFunction`](/api/#03-apidocs/typealiasaxratelimiterfunction)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Program Execution Traces in TypeScript\nDESCRIPTION: Defines the `getTraces` method, implementing `AxTunable.getTraces`. It returns an array of `AxProgramTrace` objects, capturing the execution history or intermediate steps, likely for debugging or optimization purposes.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetTraces(): AxProgramTrace[]\n```\n\n----------------------------------------\n\nTITLE: Constructing AxDBCloudflare (TypeScript)\nDESCRIPTION: This snippet represents the constructor for the AxDBCloudflare class, which takes an object of Cloudflare DB-specific parameters (excluding the \\\"name\\\" property) and returns an instance. It requires dependencies and types from the AxDB framework, such as AxDBCloudflareArgs. The parameters are passed as a readonly object and the constructor overrides the one from the base class.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBCloudflare.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(__namedParameters: Readonly<Omit<AxDBCloudflareArgs, \"name\">>): AxDBCloudflare\n```\n\n----------------------------------------\n\nTITLE: Defining the apiKey Property for AxAICohereArgs in TypeScript\nDESCRIPTION: This snippet defines the mandatory `apiKey` property within the `AxAICohereArgs` interface. It specifies that the `apiKey` must be a string, used for authenticating requests to the Cohere AI service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAICohereArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiKey: `string`\n```\n\n----------------------------------------\n\nTITLE: Declaring the AxOptimizerArgs Generic Type Alias in TypeScript\nDESCRIPTION: Defines the `AxOptimizerArgs` type alias in TypeScript. It's a generic type taking `IN` (extending `AxGenIn`) and `OUT` (extending `AxGenOut`) as parameters, representing the structure for optimizer arguments. This alias indicates the object structure required.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxOptimizerArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAxOptimizerArgs<IN, OUT>: object\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Execution Traces with getTraces in TypeScript\nDESCRIPTION: This method returns an array of AxProgramTrace objects representing the execution history or traces of the agent's operation. Implements the AxAgentic interface for debug, monitoring, or audit purposes. No parameters. Outputs a list of traces as specified by the agent's run history.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @returns {AxProgramTrace[]}\n */\ngetTraces(): AxProgramTrace[] {\n  // ...provide traces...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Service Options - TypeScript\nDESCRIPTION: Gives the 'setOptions' method that allows users to override or configure the AI service's options by supplying a readonly options object. Receives a strongly typed configuration structure and updates instance internals accordingly. No return value is provided. Inherited from AxBaseAI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Defining the apiKey Property in AxDBCloudflareArgs (TypeScript)\nDESCRIPTION: Defines the `apiKey` property as a required string within the `AxDBCloudflareArgs` interface. This property stores the Cloudflare API key used for authentication.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBCloudflareArgs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napiKey: `string`\n```\n\n----------------------------------------\n\nTITLE: Invoking a Prompt with AxAI - TypeScript\nDESCRIPTION: Illustrates initializing the AxAI instance and executing the prompt by forwarding customer messages to derive structured outputs. The example uses OpenAI as the backend, requiring an API key to be provided via environment variables. The output destructures fields like customerName, productName, and troubleshootingAttempted from the prompt's output.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/02-guides/01-dsp.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n# Setup the ai\nconst ai = new AxAI(\"openai\", { apiKey: process.env.OPENAI_APIKEY })\n\n# Execute the prompt\nconst { customerName, productName, troubleshootingAttempted } = prompt.forward(ai, { customerMessage })\n\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Options for AxBalancer in TypeScript\nDESCRIPTION: Implements the `setOptions` method from `AxAIService`. Allows updating the balancer's configuration by providing a readonly `AxAIServiceOptions` object. This method does not return a value (`void`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options): void\n```\n\n----------------------------------------\n\nTITLE: Setting Options for AxRouter (TypeScript)\nDESCRIPTION: Defines the 'setOptions' method signature for the AxRouter class. It accepts a readonly options object, currently specifying a 'debug' boolean flag. This method allows configuring runtime behavior like debugging output and returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxRouter.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options: Readonly<{ debug: boolean; }>): void\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase for setting custom request headers. It accepts an asynchronous function that returns a record of header key-value pairs. Returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Setting service options for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase used to set or update the service options for the instance. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Features for Google Gemini Model - TypeScript\nDESCRIPTION: This method returns a feature descriptor object for a given (optional) Google Gemini model, allowing introspection of AI model capabilities. If no model is specified, the service may return features for the default or all enabled models. Used for programmatic discovery of supported operations and features.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetFeatures(model?: AxAIGoogleGeminiModel): AxAIFeatures\n```\n\n----------------------------------------\n\nTITLE: Updating Agent Descriptions with setDescription in TypeScript\nDESCRIPTION: Updates the agent's description and related AxFunction description fields. Requires a string parameter of at least 20 characters and throws an error if the input is too short. Used for operator documentation or prompt engineering. Does not return a value.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Updates the agent's description.\n * This updates both the stored description and the function's description.\n * @param {string} description - New description for the agent (must be at least 20 characters)\n * @returns {void}\n * @throws Error if description is too short\n */\nsetDescription(description: string): void {\n  if (description.length < 20) throw new Error('Description too short');\n  // ...update description fields...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `maxRetries` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `maxRetries` property for `AxGenOptions`. This numeric property specifies the maximum number of times the generation process should be retried in case of failures.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **maxRetries**: `number`\n```\n\n----------------------------------------\n\nTITLE: Registering Sub-Program within AxProgramWithSignature in TypeScript\nDESCRIPTION: Defines the `register` method. It takes another program (`prog`) that implements `AxTunable` and `AxUsable` and registers it, likely as a sub-component or dependency within the current program. This facilitates modular program construction and potentially aggregates traces or usage. Returns `void`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgramWithSignature.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nregister(prog): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Metrics from AxBalancer in TypeScript\nDESCRIPTION: Implements the `getMetrics` method from `AxAIService`. Returns an `AxAIServiceMetrics` object containing performance and usage metrics related to the balancer and potentially aggregated from the underlying services it manages.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Fetching AI Service Metrics - TypeScript\nDESCRIPTION: Represents the 'getMetrics' function, used to retrieve runtime or historical performance metrics specific to the AxAIReka provider in the form of the AxAIServiceMetrics interface. Expects no input. Inherited from AxBaseAI, it requires the metrics interface to be defined and returned.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Defining AxUsable Interface with Usage Methods - TypeScript\nDESCRIPTION: This code snippet defines the 'AxUsable' TypeScript interface used in Ax DSP program modules. It provides two core methods: 'getUsage', which returns an array combining 'AxTokenUsage' typealias and generic objects for tracking token usage details, and 'resetUsage', which resets usage statistics. The interface facilitates extensible usage tracking, as demonstrated by being extended in other related interfaces such as 'AxAgentic'. Dependencies include the 'AxTokenUsage' type and proper object typing. Inputs and outputs are strictly typed; 'getUsage' expects no parameters and returns structured usage data, while 'resetUsage' performs a reset with no output.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxUsable.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/dsp/program.ts#L91\n\ninterface AxUsable {\n  /**\n   * Returns detailed token usage data.\n   */\n  getUsage(): AxTokenUsage & object[];\n\n  /**\n   * Resets usage counters or logs.\n   */\n  resetUsage(): void;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Metrics via AxBaseAI in TypeScript\nDESCRIPTION: Returns a structured metrics object describing service performance or usage, utilizing inherited mechanisms from AxBaseAI. No parameters required. Output type is strongly defined, facilitating diagnostics or dashboard integration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Defining the supportFor Property in AxBaseAIArgs (TypeScript)\nDESCRIPTION: This snippet defines the `supportFor` property in AxBaseAIArgs. It can either be a direct `AxAIFeatures` object indicating supported features or a function that takes a model identifier and returns an `AxAIFeatures` object, allowing for model-specific feature declarations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxBaseAIArgs.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsupportFor: [`AxAIFeatures`](/api/#03-apidocs/interfaceaxaifeatures) | (`model`) => [`AxAIFeatures`](/api/#03-apidocs/interfaceaxaifeatures)\n```\n\n----------------------------------------\n\nTITLE: Declaring Anthropic Chat Request Cache Parameters in TypeScript\nDESCRIPTION: Defines the AxAIAnthropicChatRequestCacheParam type as an object, specifying an optional cache_control property with a type containing a single allowed value (\\\"ephemeral\\\"). This type is intended to control caching behavior for Anthropic chat API requests, ensuring only valid cache control options are set. The definition is TypeScript-specific and requires TypeScript's type system for enforcement; no runtime validation is included.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIAnthropicChatRequestCacheParam.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AxAIAnthropicChatRequestCacheParam = {\n  cache_control?: { type: \"ephemeral\" };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining content_block Property for Anthropic Event in TypeScript\nDESCRIPTION: Defines the `content_block` property within the `AxAIAnthropicContentBlockStartEvent` interface. This property represents the content block itself, which is a union type allowing either a text block (with `text` and `type: \"text\"`) or a tool use block (with `id`, `input`, `name`, and `type: \"tool_use\"`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicContentBlockStartEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontent_block: { `text`: `string`; `type`: `\"text\"`; } | { `id`: `string`; `input`: `object`; `name`: `string`; `type`: `\"tool_use\"`; }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Usage Information for AxGen Program in TypeScript\nDESCRIPTION: Inherited from `AxGen`, this method returns an array containing token usage information (`AxTokenUsage` and other potential objects) accumulated during the program's execution. This typically includes prompt tokens and completion tokens.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultQueryRewriter.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetUsage(): AxTokenUsage & object[]\n```\n\n----------------------------------------\n\nTITLE: Defining BlockMediumAndAbove Safety Threshold Value in TypeScript\nDESCRIPTION: Defines the `BlockMediumAndAbove` member of the `AxAIGoogleGeminiSafetyThreshold` enumeration. This threshold blocks content classified as medium harm probability and above.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiSafetyThreshold.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nBlockMediumAndAbove: \"BLOCK_MEDIUM_AND_ABOVE\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Options from AxBalancer in TypeScript\nDESCRIPTION: Implements the `getOptions` method from `AxAIService`. Returns a readonly view of the current configuration options (`AxAIServiceOptions`) applied to the `AxBalancer` instance.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Defining the AxDBMemoryOpOptions Interface in TypeScript\nDESCRIPTION: This type definition declares the `AxDBMemoryOpOptions` interface, specifying that it inherits properties and methods from the `AxDBBaseOpOptions` interface. It is defined within the `memory.ts` file of the Ax project's database module, likely used for configuring options specific to in-memory database operations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDBMemoryOpOptions.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nAxDBMemoryOpOptions: AxDBBaseOpOptions\n```\n\n----------------------------------------\n\nTITLE: Declaring updateResult method for AxAIMemory - TypeScript\nDESCRIPTION: Declares the 'updateResult' method for altering a previously recorded AxChatResponseResult in the session memory. The input is a read-only AxChatResponseResult, potentially merged with an object for updates, and an optional sessionId. Void returning; requires the presence and correct typing of 'AxChatResponseResult' type definition in the codebase.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIMemory.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nupdateResult(result: Readonly<AxChatResponseResult> & object, sessionId?: string): void\n```\n\n----------------------------------------\n\nTITLE: Set Demonstrative Examples - AxGen - TypeScript\nDESCRIPTION: setDemos configures a set of demonstration inputs or output pairs for the reranker (input: readonly AxProgramDemos[]). These demos are used for authorship, tuning, and end-user guidance, and must conform to the AxProgramDemos type from the Ax API.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetDemos(\n  demos: readonly AxProgramDemos[]\n): void\n```\n\n----------------------------------------\n\nTITLE: Overriding _upsert Method for Cloudflare (TypeScript)\nDESCRIPTION: Implements the _upsert method to upsert a single record into the Cloudflare database. It receives a typed upsert request, an optional update flag, and operation options, then returns a promise resolving to an upsert response. This overrides the generic AxDBBase._upsert and is tailored to Cloudflare's operational semantics.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBCloudflare.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n_upsert(req: Readonly<AxDBUpsertRequest>, _update?: boolean, options?: Readonly<AxDBBaseOpOptions>): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `asserts` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `asserts` property for `AxGenOptions`. This property likely holds an array of `AxAssertion` objects, used to specify validation rules or conditions that the generated output must satisfy.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **asserts**: [`AxAssertion`](/api/#03-apidocs/interfaceaxassertion)[]\n```\n\n----------------------------------------\n\nTITLE: Defining 'db' Property for AxDBManagerArgs in TypeScript\nDESCRIPTION: Defines the mandatory 'db' property within the AxDBManagerArgs interface. This property is required to hold an instance conforming to the `AxDBService` interface, providing database interaction capabilities.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBManagerArgs.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndb: [`AxDBService`](/api/#03-apidocs/interfaceaxdbservice)\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIAnthropicMessageStartEvent Type Structure - TypeScript\nDESCRIPTION: This TypeScript snippet defines the expected structure of the AxAIAnthropicMessageStartEvent object used in the Anthropic AI integration. It specifies a top-level 'type' property, and a 'message' object detailing AI message metadata such as content array, model ID, role specification (restricted to 'assistant'), stop reasons/sequences, and token usage. This structure is vital for type-checking message-start events passed across the codebase. The snippet assumes TypeScript 4.x+, no runtime dependencies, and all fields are expected to be populated according to the event context.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicMessageStartEvent.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface AxAIAnthropicMessageStartEvent {\n  type: \"message_start\";\n  message: {\n    content: [];\n    id: string;\n    model: string;\n    role: \"assistant\";\n    stop_reason: null | string;\n    stop_sequence: null | string;\n    type: \"message\";\n    usage: {\n      input_tokens: number;\n      output_tokens: number;\n    };\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Model List Retrieval for AxAICohere in TypeScript\nDESCRIPTION: The getModelList method returns available model options as an AxAIModelList or undefined, supporting dynamic model selection. Dependencies include AxAIModelList type definition and correct population of model registry within base class configuration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Defining Metric-Based Comparator for Services in AxBalancer (TypeScript)\nDESCRIPTION: Defines a static comparator function used to sort two `AxAIService` instances (`a` and `b`) based on their metrics, specifically prioritizing services with lower cost. It returns a number (-1, 0, or 1) indicating the relative order of the services based on cost.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nstatic metricComparator(a, b): number\n```\n\n----------------------------------------\n\nTITLE: Retrieving Groq Service Metrics in TypeScript\nDESCRIPTION: The getMetrics method returns a metrics object describing the current Groq AI service's usage statistics or status. It is typically used for monitoring or dashboard integration and does not require parameters. Output conforms to the AxAIServiceMetrics interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Getting Service Metrics for AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` that retrieves performance and usage metrics (`AxAIServiceMetrics`) associated with the AI service instance, such as token counts or request latency.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Defining the 'type' Property for AxAIAnthropicMessageStopEvent in TypeScript\nDESCRIPTION: This snippet defines the `type` property for the `AxAIAnthropicMessageStopEvent` interface or type alias. It assigns a literal string type `\"message_stop\"`, indicating that instances of this event type will always have their `type` property set to this specific value. This is used to discriminate this event type from others within the Anthropic AI event stream processing in the `ax` library.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicMessageStopEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: `\"message_stop\"`\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI getMetrics() Method Signature in TypeScript\nDESCRIPTION: Defines the `getMetrics` method which retrieves performance and usage metrics for the AI service. It returns an `AxAIServiceMetrics` object containing information like request counts, token usage, etc. This method implements the `getMetrics` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMetrics(): AxAIServiceMetrics\n```\n\n----------------------------------------\n\nTITLE: Internal Upsert Method (_upsert) in AxDBMemory (TypeScript)\nDESCRIPTION: Defines the internal implementation for upserting a single data entry into the in-memory database. It accepts an upsert request object (`req`), an optional boolean `_update` flag, and optional operation options (`_options`). It returns a Promise resolving to an AxDBUpsertResponse. This method overrides the corresponding method in AxDBBase.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n_upsert(req: Readonly<AxDBUpsertRequest>, _update?: boolean, _options?: Readonly<AxDBBaseOpOptions>): Promise<AxDBUpsertResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining 'choices' property for AxAIOpenAIResponseDelta in TypeScript\nDESCRIPTION: Defines the `choices` property for the `AxAIOpenAIResponseDelta` type. It's an array of objects, where each object represents a choice delta and contains the actual content (`delta`), a potential `finish_reason`, and its `index`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIOpenAIResponseDelta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchoices: object[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndelta: T\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfinish_reason: \"length\" | \"stop\" | \"content_filter\" | \"tool_calls\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nindex: number\n```\n\n----------------------------------------\n\nTITLE: Defining AxAI ReKa Model Enumeration - TypeScript\nDESCRIPTION: This snippet defines string literal type members for the AxAI ReKa model enumeration in TypeScript. Each member corresponds to a specific model (RekaCore, RekaEdge, RekaFlash) and is assigned a unique string identifier. These enumerations are used for type safety and standardized references to model names across the codebase. It assumes the file is part of a TypeScript project and should be imported where model name values are needed.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIRekaModel.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AxAIRekaModel =\n  | \\\"reka-core\\\"\n  | \\\"reka-flash\\\"\n  | \\\"reka-edge\\\";\n```\n\n----------------------------------------\n\nTITLE: Getting Program Signature from AxGen Instance (TypeScript)\nDESCRIPTION: Returns the signature (interface or description) of the current AxGen program, useful for introspection or programmatic chaining. Requires no arguments and relies on the AxSignature type. This function is inherited from AxProgramWithSignature and does not require AxGen-specific customization.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetSignature(): AxSignature\n```\n\n----------------------------------------\n\nTITLE: Adding a Tag to the Last Entry in AxMemory (TypeScript)\nDESCRIPTION: Defines the `addTag` method for the AxMemory class. It associates a string tag (`name`) with the most recent entry in the memory for the specified session or the default session. This allows marking specific points in the conversation history.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxMemory.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddTag(name, sessionId?): void\n```\n\n----------------------------------------\n\nTITLE: Declaring Token Log Probabilities Array for AxAIOpenAILogprob - TypeScript\nDESCRIPTION: Defines the token_logprobs property as an array of numbers, intended to store the log probability for each generated token as part of the OpenAI response modeling. This data is crucial for probabilistic analysis of token outputs in LLM workflows. The array should have the same length as tokens, and input/output both expect a number array. No additional dependencies beyond TypeScript are needed.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAILogprob.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoken_logprobs: number[];\n```\n\n----------------------------------------\n\nTITLE: Defining the name Property for AxAICohereArgs in TypeScript\nDESCRIPTION: This snippet defines the mandatory `name` property for the `AxAICohereArgs` interface. It is explicitly typed as the literal string \"cohere\", likely serving as an identifier for the Cohere AI service within the Ax framework.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAICohereArgs.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nname: `\"cohere\"`\n```\n\n----------------------------------------\n\nTITLE: Getting the In-Memory Database State (getDB) in AxDBMemory (TypeScript)\nDESCRIPTION: Defines a method to retrieve the current state of the in-memory database. It takes no parameters and returns the database state, represented by the AxDBState type alias.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetDB(): AxDBState\n```\n\n----------------------------------------\n\nTITLE: Defining optional 'usage' property for AxAIOpenAIResponseDelta in TypeScript\nDESCRIPTION: Defines the optional `usage` property for the `AxAIOpenAIResponseDelta` type. This property, if present (usually in the final delta), contains token usage statistics represented by the `AxAIOpenAIUsage` type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIOpenAIResponseDelta.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nusage?: AxAIOpenAIUsage\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model List via AxBaseAI in TypeScript\nDESCRIPTION: Provides access to the list of available AI models (if defined) via inheritance from AxBaseAI. Returns either undefined or a well-typed model list object. Useful for discovery or validation of supported Anthropic/Vertex models.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelList(): undefined | AxAIModelList\n```\n\n----------------------------------------\n\nTITLE: Get All Reranker Run Traces - AxGen - TypeScript\nDESCRIPTION: The getTraces method provides an array of AxProgramTrace objects, each representing a trace of a previous reranker run. No parameters are required. This aids in auditing, debugging or export of LLM execution traces.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTraces(): AxProgramTrace[]\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Mode for Google Search Retrieval in TypeScript\nDESCRIPTION: Defines the `mode` property as an optional string literal '\"MODE_DYNAMIC\"'. This property likely resides within the `googleSearchRetrieval` object and specifies the operational mode for the Google Search retrieval tool in the Gemini API.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiOptionsTools.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmode?: \"MODE_DYNAMIC\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional fetch Property Type in AxDBMemoryArgs (TypeScript)\nDESCRIPTION: Defines the type signature for the optional 'fetch' property within the AxDBMemoryArgs interface, inherited from AxDBBaseArgs. This property expects a function compatible with the standard Fetch API, taking an input (string, URL, or Request) and optional RequestInit, returning a Promise resolving to a Response. It's intended for network operations if needed by the database implementation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBMemoryArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetch?: (`input`: string | URL | Request, `init`?: RequestInit) => Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Assigning Program Identifiers with setId in TypeScript\nDESCRIPTION: This method assigns a unique string identifier to an AxProgram instance, aiding in tracking, management, or lookup of distinct program specifications. Required for frameworks needing explicit ID-based referencing, it takes a string parameter (the new ID) and returns nothing. Implementation fulfills the AxTunable contract for identification.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxProgram.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetId(id: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Code Execution Property for Google Gemini Tools in TypeScript\nDESCRIPTION: This TypeScript property definition, `codeExecution`, is an optional boolean flag within the `AxAIGoogleGeminiOptionsTools` interface. Setting it enables the code execution tool for the Google Gemini API call.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiOptionsTools.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecution?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Mistral Nemo Model Identifier in TypeScript\nDESCRIPTION: This snippet defines the string identifier for the Mistral Nemo model. It assigns the value 'mistral-nemo-latest' to the `MistralNemo` member, likely within the `AxAIMistralModel` enumeration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIMistralModel.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nMistralNemo: \"mistral-nemo-latest\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Agent Usage Metrics with resetUsage in TypeScript\nDESCRIPTION: Implements the resetUsage method which clears tracked usage statistics or runtime metrics on the agent. No parameters and does not return a value. Should be called before new experiments or after checkpoints to maintain clean state for future runs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @returns {void}\n */\nresetUsage(): void {\n  // ...reset stats...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining OpenMistralNemo Model Identifier in TypeScript\nDESCRIPTION: This snippet defines the string identifier for the OpenMistralNemo model. It assigns the value 'open-mistral-nemo-latest' to the `OpenMistralNemo` member, likely within the `AxAIMistralModel` enumeration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIMistralModel.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nOpenMistralNemo: \"open-mistral-nemo-latest\"\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Llama 2 70B Chat HF Enum Member in TypeScript\nDESCRIPTION: This documentation snippet shows the definition of the `MetaLlama270BChatHF` member within the `AxAIHuggingFaceModel` TypeScript enumeration. It assigns the Hugging Face model identifier string \\\"meta-llama/Llama-2-70b-chat-hf\\\" to this member, enabling type-safe referencing of this specific model within the application. The definition originates from `src/ax/ai/huggingface/types.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIHuggingFaceModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nMetaLlama270BChatHF: \"meta-llama/Llama-2-70b-chat-hf\"\n```\n\n----------------------------------------\n\nTITLE: Defining Mistral Small Model Identifier in TypeScript\nDESCRIPTION: This snippet defines the string identifier for the Mistral Small model. It assigns the value 'mistral-small-latest' to the `MistralSmall` member, likely within the `AxAIMistralModel` enumeration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIMistralModel.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nMistralSmall: \"mistral-small-latest\"\n```\n\n----------------------------------------\n\nTITLE: Defining AxInternalChatRequest Type Alias in TypeScript\nDESCRIPTION: This TypeScript code defines a type alias `AxInternalChatRequest`. It uses utility types `Omit`, `Required`, and `Pick` to create a new type based on `AxChatRequest`. Specifically, it removes the potentially optional 'model' property from `AxChatRequest` and then adds it back as a required property, ensuring that any `AxInternalChatRequest` object must have a 'model' property defined with the type specified by the generic parameter `TModel`. This type requires `AxChatRequest` and TypeScript's utility types as dependencies.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxInternalChatRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxInternalChatRequest**<`TModel`>: `Omit`<[`AxChatRequest`](/api/#03-apidocs/typealiasaxchatrequest), `\"model\"`> & `Required`<`Pick`<[`AxChatRequest`](/api/#03-apidocs/typealiasaxchatrequest)<`TModel`>, `\"model\"`>>\n```\n\n----------------------------------------\n\nTITLE: Constructing AxDBBase Core Class - TypeScript\nDESCRIPTION: Defines the constructor for the AxDBBase abstract class, which takes a named parameter object holding database base arguments and configuration. Requires all subclasses to pass initialization context via the standardized AxDBBaseArgs interface. Returns an instance of AxDBBase, meant to be extended, and constrains the dependency injection structure. There are no side-effects or asynchronous initialization in this constructor.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBBase.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(__namedParameters: Readonly<AxDBBaseArgs & object>);\n```\n\n----------------------------------------\n\nTITLE: Defining AxMetricFnArgs Type using Parameters in TypeScript\nDESCRIPTION: This TypeScript type alias `AxMetricFnArgs` is defined using the `Parameters<AxMetricFn>[0]` construct. It represents the type of the first argument accepted by the `AxMetricFn` function type, facilitating type safety when passing arguments to metric functions within the ax-llm/ax project. The definition originates from the `src/ax/dsp/optimize.ts` file and depends on the `AxMetricFn` type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxMetricFnArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAxMetricFnArgs: Parameters<AxMetricFn>[0]\n```\n\n----------------------------------------\n\nTITLE: Setting Unique Agent ID with setId in TypeScript\nDESCRIPTION: Permits assignment of a unique string identifier to the agent instance. Accepts a string, returns void, and is required for hierarchical or distributed agent architectures. Implements the AxAgentic setId contract and is commonly used for registry or debugging.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAgent.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param {string} id\n * @returns {void}\n */\nsetId(id: string): void {\n  // ...store agent id...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting request headers for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase used to set a function that asynchronously provides request headers for API calls. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Fields with AxSignature in TypeScript\nDESCRIPTION: getInputFields returns a readonly array of AxIField objects, reflecting all input field definitions currently present in the signature. Inputs are not required, and the direct output is the snapshot of the input fields' immutable state. Useful for enumeration or introspection of the function signature's input requirements.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetInputFields(): readonly AxIField[]\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAICohereChatResponseDelta TypeScript Type Alias\nDESCRIPTION: This TypeScript code defines the `AxAICohereChatResponseDelta` type alias. It extends the `AxAICohereChatResponse` type (presumably defined elsewhere) by intersecting it with a base `object` type, representing a delta or chunk received during a streaming Cohere chat API response. The definition is located in the specified GitHub file and line.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatResponseDelta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAICohereChatResponseDelta**: [`AxAICohereChatResponse`](/api/#03-apidocs/typealiasaxaicoherechatresponse) & `object`\n```\n\n----------------------------------------\n\nTITLE: Getting Service Options for AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` that returns the readonly configuration options (`AxAIServiceOptions`) currently set for the AI service instance, such as API keys or base URLs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Low-Level Forward Internal Generator in AxGen (TypeScript)\nDESCRIPTION: Implements the internal streaming/forwarding logic for AxGen using an asynchronous generator. Accepts the same parameters as streamingForward and returns versioned partial outputs. Meant to isolate the logic for streaming generation and may be used by higher-level streaming or batch interfaces.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n_forward1(ai: Readonly<AxAIService<unknown, unknown>>, values: IN, options: Readonly<AxProgramForwardOptions>): AsyncGenerator<{ delta: Partial<OUT>; version: number }, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining Input Order Comparator for Services in AxBalancer (TypeScript)\nDESCRIPTION: Defines a static comparator function intended for sorting `AxAIService` instances. This specific comparator ensures that the services maintain the order in which they were originally provided to the balancer. It returns a number used for comparison in sorting algorithms.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBalancer.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nstatic inputOrderComparator(): number\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `stream` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `stream` property for `AxGenOptions`. This boolean property controls whether the generated output should be streamed back incrementally as it's produced.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **stream**: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Reset Token Usage Tracker - AxGen - TypeScript\nDESCRIPTION: Calling resetUsage sets all tracked token usage metrics to zero, facilitating clean measurement of subsequent runs or isolating usage statistics. There are no input parameters; expected output is void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nresetUsage(): void\n```\n\n----------------------------------------\n\nTITLE: Getting the service ID for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the unique identifier string for this AI service instance. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unique Service ID - TypeScript\nDESCRIPTION: This utility method obtains a globally unique string identifier for the AxAIGoogleGemini service instance. Useful for tracing, audit, or registration scenarios where multiple services are managed or queried in parallel.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGoogleGemini.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Getting Default Model Identifiers with AxAICohere in TypeScript\nDESCRIPTION: Defines a getDefaultModels method returning read-only model and embedModel string identifiers for Cohere service presets. This utility method aids in ensuring consistent model selection throughout the integration and depends on proper population of internal configuration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Setting API URL for AxAIOllama Service in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` used to dynamically update the API endpoint URL for the Ollama service. Accepts the new URL string as input.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetAPIURL(apiURL): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Options in AxAICohere in TypeScript\nDESCRIPTION: The setOptions method assigns a new options object to update service configuration. It expects a read-only AxAIServiceOptions object and enables runtime/situational reconfiguration as long as downstream components are prepared to handle option changes.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Setting API URL for Mistral Service - TypeScript\nDESCRIPTION: Implements a configuration setter for the base API endpoint URL used by the Mistral service. Accepts a string parameter with the new API URL and returns void. Useful for redirecting or overriding network targets in different deployment scenarios.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Identifier in AxAICohere in TypeScript\nDESCRIPTION: The getId method returns a string identifier for the instantiated AI service integration, derived from AxBaseAI. This aids in registration, selection, and debugging, with no required parameters or dependencies beyond base class instantiation.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAICohere.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Assigning ID to AxGen Program Instance (TypeScript)\nDESCRIPTION: Sets or updates the unique identifier for this program. Input is a string id and the method returns void. Useful for tracking, serialization, or referencing within larger graph/program structures; inherited from AxProgramWithSignature.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxGen.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nsetId(id: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `stopFunction` Property for AxGenOptions (TypeScript)\nDESCRIPTION: Defines the optional `stopFunction` property for `AxGenOptions`. This string property likely specifies a condition or identifier that, when encountered, should cause the generation or a specific function execution to stop.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxGenOptions.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` **stopFunction**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining 'matches' Property for AxDBQueryResponse in TypeScript\nDESCRIPTION: This snippet defines the `matches` property within the `AxDBQueryResponse` type. It specifies that `matches` is an array (`[]`) where each element is an `object`, typically representing individual records or results returned by a database query.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxDBQueryResponse.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nmatches: object[]\n```\n\n----------------------------------------\n\nTITLE: Getting Unique Service Identifier in TypeScript\nDESCRIPTION: The getId method returns a unique string identifier for the Groq service instance, facilitating service registration or lookup. It does not take any input and outputs a string. Depends on internal class state only; no external parameters.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Getting Service ID for AxAIOllama in TypeScript\nDESCRIPTION: Inherited method from `AxAIOpenAIBase` that returns the unique identifier string assigned to this instance of the AI service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOllama.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Setting Service Name in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase to set or update the name of the AI service instance. Accepts the new name string as input and returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAIOpenAIUsage Type in TypeScript\nDESCRIPTION: This TypeScript type declaration defines the structure of the `AxAIOpenAIUsage` object. It is used to represent token usage metrics from OpenAI API responses within the Ax framework. The type includes properties for the number of tokens used in the completion, the prompt, and the total count.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAIUsage.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/openai/types.ts#L51\n\n/**\n * Type definition for OpenAI API usage statistics.\n */\ntype AxAIOpenAIUsage = {\n  /**\n   * Number of tokens used for the completion part of the response.\n   */\n  completion_tokens: number;\n\n  /**\n   * Number of tokens used for the input prompt.\n   */\n  prompt_tokens: number;\n\n  /**\n   * Total number of tokens used (completion_tokens + prompt_tokens).\n   */\n  total_tokens: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Options via AxBaseAI in TypeScript\nDESCRIPTION: Retrieves the current, readonly configuration options for the AI service as defined in AxBaseAI. This allows higher-level components to inspect operational parameters. Requires no parameters and is fully type-safe.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Setting Service Options via AxBaseAI in TypeScript\nDESCRIPTION: Accepts a readonly object of service options to configure runtime behavioral parameters, updating underlying state via inheritance from AxBaseAI. No output is returned. Promotes modularity and encapsulated configuration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(options: Readonly<AxAIServiceOptions>): void\n```\n\n----------------------------------------\n\nTITLE: Getting service options for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the read-only service options configured for this instance. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAIHuggingFaceRequest Object Type in TypeScript\nDESCRIPTION: This TypeScript type definition outlines the structure for an `AxAIHuggingFaceRequest`. It includes the required input text (`inputs`), the target Hugging Face model (`model` referencing `AxAIHuggingFaceModel`), optional request options (`options` for caching and model readiness), and various generation parameters (`parameters`) like sampling, token limits, temperature, and nucleus sampling controls.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIHuggingFaceRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type declaration for AxAIHuggingFaceRequest\n */\ntype AxAIHuggingFaceRequest = {\n  /**\n   * The primary input string for the Hugging Face model.\n   */\n  inputs: string;\n\n  /**\n   * Specifies the Hugging Face model to be used for the request.\n   * It references the AxAIHuggingFaceModel enumeration.\n   */\n  model: AxAIHuggingFaceModel; // Note: AxAIHuggingFaceModel definition is external\n\n  /**\n   * Optional request handling configuration.\n   */\n  options?: {\n    /** If true, attempts to use a cached response. */\n    use_cache: boolean;\n    /** If true, waits for the model if it's not immediately available. */\n    wait_for_model: boolean;\n  };\n\n  /**\n   * Parameters controlling the generation process of the Hugging Face model.\n   */\n  parameters: {\n    /** Whether to use sampling; if false, uses greedy decoding. */\n    do_sample: boolean;\n    /** The maximum number of new tokens to generate. */\n    max_new_tokens: number;\n    /** Maximum time in seconds allowed for the generation. */\n    max_time: number;\n    /** The number of different sequences to return. */\n    num_return_sequences: number;\n    /** Penalty applied to repeated tokens. 1.0 means no penalty. */\n    repetition_penalty: number;\n    /** If false, only the generated text is returned; if true, the full text including the prompt is returned. */\n    return_full_text: boolean;\n    /** Controls randomness in generation. Higher values mean more randomness. */\n    temperature: number;\n    /** Filters predictions to the top k most probable tokens. */\n    top_k: number;\n    /** Filters predictions using nucleus sampling based on cumulative probability p. */\n    top_p: number;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the AxAICohereEmbedRequest Type Structure in TypeScript\nDESCRIPTION: Specifies the structure for a Cohere embedding request object (`AxAICohereEmbedRequest`) in TypeScript. It requires a `model` (of type `AxAICohereEmbedModel`), a read-only array of input `texts`, and a `truncate` strategy string (e.g., 'NONE', 'START', 'END'). This type is defined within the Ax library (src/ax/ai/cohere/types.ts) for interacting with the Cohere API.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereEmbedRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Represents the request structure for Cohere embedding generation via Ax.\n */\ntype AxAICohereEmbedRequest = {\n  /**\n   * The specific Cohere embedding model to use.\n   * @see AxAICohereEmbedModel\n   */\n  model: AxAICohereEmbedModel;\n\n  /**\n   * An array of input strings to be embedded.\n   */\n  texts: readonly string[];\n\n  /**\n   * Specifies how to handle inputs longer than the maximum allowed length.\n   * Common values might include 'NONE', 'START', 'END'.\n   */\n  truncate: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIAnthropicChatResponse TypeScript Object Type\nDESCRIPTION: This snippet defines the AxAIAnthropicChatResponse object type using TypeScript. It specifies properties such as 'id', 'model', 'role', and an array of 'content' items (each possibly text or tool_use). Usage statistics are included as input and output tokens. The type formalizes the expected data structure for responses from Anthropic AI models, ensuring type-safety and consistent representation when handling AI output in TypeScript applications.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIAnthropicChatResponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AxAIAnthropicChatResponse {\n  id: string;\n  model: string;\n  role: \"assistant\";\n  content: ({\n    text: string;\n    type: \"text\";\n  } | {\n    id: string;\n    input: string;\n    name: string;\n    type: \"tool_use\";\n  })[];\n  stop_reason: \"end_turn\" | \"max_tokens\" | \"stop_sequence\" | \"tool_use\";\n  stop_sequence?: string;\n  type: \"message\";\n  usage: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Model Property in AxAICohereEmbedResponse TypeScript Type\nDESCRIPTION: This property within the `AxAICohereEmbedResponse` type indicates the specific Cohere embedding model used to generate the embeddings. It is declared with the type `AxAICohereEmbedModel`, which is likely an enumeration or a specific string literal type defined elsewhere in the project.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereEmbedResponse.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmodel: AxAICohereEmbedModel\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional embedModel Property in TypeScript\nDESCRIPTION: Declares the optional `embedModel` property within the `AxAIOllamaArgs` type. This string property likely specifies the name or identifier of the embedding model to be used with the Ollama service when using the ax-llm framework. Its optional nature implies a default might be used if not provided.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOllamaArgs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **embedModel**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional model Property in TypeScript\nDESCRIPTION: Declares the optional `model` property within the `AxAIOllamaArgs` type. This string property likely specifies the name or identifier of the primary large language model to be used with the Ollama service via the ax-llm framework. Being optional suggests a default model might be configured elsewhere or is not strictly required for all operations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOllamaArgs.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **model**: `string`\n```\n\n----------------------------------------\n\nTITLE: Declaring Top Log Probabilities Map for AxAIOpenAILogprob - TypeScript\nDESCRIPTION: Defines the top_logprobs property as a Map from strings to numbers, representing the top candidate token log probabilities at each generation step. This property enables access to full probability distributions over possible next tokens, facilitating advanced analysis or debugging. Requires the native JavaScript Map type in TypeScript, with string keys for tokens and number values for their log probabilities.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAILogprob.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntop_logprobs: Map<string, number>;\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers for Requests via AxBaseAI in TypeScript\nDESCRIPTION: Enables injection of an asynchronous headers provider function, setting or modifying HTTP request headers at runtime. Input is a function returning a Promise with a record of header key-value pairs. Facilitates authentication, analytics, or customization.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetHeaders(headers: () => Promise<Record<string, string>>): void\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIOpenAIChatResponseDelta Type Alias in TypeScript\nDESCRIPTION: This TypeScript type alias `AxAIOpenAIChatResponseDelta` defines the structure for a delta chunk in an OpenAI streaming chat completion response. It extends `AxAIOpenAIResponseDelta` and includes optional `content`, `role`, and `tool_calls` properties specific to chat messages.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAIChatResponseDelta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIOpenAIChatResponseDelta**: [`AxAIOpenAIResponseDelta`](/api/#03-apidocs/interfaceaxaiopenairesponsedelta)<\\{ `content`: `string`; `role`: `string`; `tool_calls`: `NonNullable`<...[...][`0`][`\"message\"`][`\"tool_calls\"`]>\\[`0`\\] & `object`[]; \\}>\n```\n\n----------------------------------------\n\nTITLE: Defining AxAIRekaChatResponseDelta Object Type in TypeScript\nDESCRIPTION: Defines the AxAIRekaChatResponseDelta object type, detailing its required fields (id, model, responses) and an optional usage property (of type AxAIRekaUsage). This type is used to represent incremental or partial chat responses in the AxAI Reka module, facilitating type-safe interactions in TypeScript projects. Required dependencies include importing or defining the AxAIRekaUsage type, and all fields except 'usage' must be provided when instantiating an object of this type.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIRekaChatResponseDelta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AxAIRekaChatResponseDelta = {\n  id: string;\n  model: string;\n  responses: object[];\n  usage?: AxAIRekaUsage;\n};\n```\n\n----------------------------------------\n\nTITLE: usage Property Definition (TypeScript)\nDESCRIPTION: Specifies the optional `usage` property within the `AxAIRekaChatResponse` type. If present, it holds an object of type `AxAIRekaUsage` containing usage statistics.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIRekaChatResponse.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nusage?: AxAIRekaUsage\n```\n\n----------------------------------------\n\nTITLE: Defining 'system_fingerprint' property for AxAIOpenAIResponseDelta in TypeScript\nDESCRIPTION: Defines the `system_fingerprint` property for the `AxAIOpenAIResponseDelta` type. This property holds a string representing a system fingerprint provided by OpenAI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIOpenAIResponseDelta.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsystem_fingerprint: string\n```\n\n----------------------------------------\n\nTITLE: Optional Query Method (TypeScript)\nDESCRIPTION: Defines an optional _query method for executing database queries, inherited from AxDBBase. The method accepts a query request and optional operation options, returning a promise with the query response. It uses AxDB's typed request and response interfaces and is designed for extensibility to Cloudflare's backend.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBCloudflare.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n_query?(req: Readonly<AxDBQueryRequest>, options?: Readonly<AxDBBaseOpOptions>): Promise<AxDBQueryResponse>\n```\n\n----------------------------------------\n\nTITLE: Initializing AxDockerSession in TypeScript\nDESCRIPTION: Constructor for the AxDockerSession class. Initializes a new session to interact with the Docker API, defaulting to 'http://localhost:2375' if no specific API URL is provided.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDockerSession.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AxDockerSession(apiUrl: string = 'http://localhost:2375'): AxDockerSession\n```\n\n----------------------------------------\n\nTITLE: Defining type Property for Anthropic Event in TypeScript\nDESCRIPTION: Defines the `type` property within the `AxAIAnthropicContentBlockStartEvent` interface. This property uses a literal string type, fixed to the value `\"content_block_start\"`, to uniquely identify this specific type of event.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicContentBlockStartEvent.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype: `\"content_block_start\"`\n```\n\n----------------------------------------\n\nTITLE: Clearing the In-Memory Database (clearDB) in AxDBMemory (TypeScript)\nDESCRIPTION: Defines a method to completely clear all data stored within the in-memory database instance. It takes no parameters and returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDBMemory.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclearDB(): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Models for AxAIDeepSeek (TypeScript)\nDESCRIPTION: Gets the default model identifiers used by the AxAIDeepSeek instance for chat and embedding tasks. Inherited from `AxAIOpenAIBase`, this method returns a readonly object containing the default `model` and `embedModel` strings.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Defining the AxInternalEmbedRequest Type Alias in TypeScript\nDESCRIPTION: This TypeScript type alias `AxInternalEmbedRequest` is defined using utility types `Omit` and `Required`. It takes a generic type parameter `TEmbedModel`. It omits the optional `embedModel` from the base `AxEmbedRequest` type and then merges it back as a required property using `Required<Pick<AxEmbedRequest<TEmbedModel>, \\\"embedModel\\\">>`. This ensures that any object conforming to `AxInternalEmbedRequest` must have the `embedModel` property defined with the type specified by `TEmbedModel`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxInternalEmbedRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxInternalEmbedRequest**<`TEmbedModel`>: `Omit`<[`AxEmbedRequest`](/api/#03-apidocs/typealiasaxembedrequest), `\"embedModel\"`> & `Required`<`Pick`<[`AxEmbedRequest`](/api/#03-apidocs/typealiasaxembedrequest)<`TEmbedModel`>, `\"embedModel\"`>>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional url Property in TypeScript\nDESCRIPTION: Declares the optional `url` property within the `AxAIOllamaArgs` type. This string property likely specifies the base URL for the Ollama API endpoint. If not provided, the ax-llm framework might use a default URL (e.g., localhost).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOllamaArgs.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **url**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining AxModelInfoWithProvider Type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias AxModelInfoWithProvider as an intersection of the AxModelInfo type and an object that contains a provider property of type string. The main dependency is the previously defined AxModelInfo type, which is assumed to be imported from elsewhere in the codebase. The resulting type allows objects to carry all properties from AxModelInfo, plus a provider string for specifying the associated service or source. Inputs are type definitions; output is a composite type used as a contract for model metadata throughout the application.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxModelInfoWithProvider.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxModelInfoWithProvider = AxModelInfo & {\n  provider: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Mistral Embedding Models Enumeration TypeScript\nDESCRIPTION: Defines an enumeration in TypeScript to represent available embedding models for the Mistral AI integration. This enumeration provides a string-literal member (\\\"mistral-embed\\\") that can be referenced to ensure consistency and type safety in model selection logic elsewhere in the application. No external dependencies are required, and this enum is typically imported by modules needing to refer to specific embedding models; the input and output are simply the literal string used in the enum member.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIMistralEmbedModels.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Enumeration of supported Mistral AI embedding models\nexport enum AxAIMistralEmbedModels {\n  MistralEmbed = \"mistral-embed\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Ollama AI Configuration in TypeScript\nDESCRIPTION: This snippet defines a type alias called AxAIOllamaAIConfig, which is based on the AxAIOpenAIConfig generic type, explicitly parameterized with two string types. It is intended to provide consistent configuration typing for integrating Ollama AI models using the structure of OpenAI configuration objects. There are no required external dependencies beyond the referenced type, and this alias enforces type safety for configuration objects by ensuring they align with both the Ollama implementation and the broader OpenAI-compatible structure. Inputs and outputs are strictly typed, but this type alias imposes no runtime constraints.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOllamaAIConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AxAIOllamaAIConfig = AxAIOpenAIConfig<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Getting default models for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the default model and embedding model identifiers used by the service instance. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Running Examples with tsx and API Key (Shell)\nDESCRIPTION: Demonstrates how to execute a TypeScript example file (`marketing.ts`) using `tsx`, passing the OpenAI API key as an environment variable. This method avoids hardcoding sensitive keys directly in the command line and leverages npm scripts.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nOPENAI_APIKEY=openai_key npm run tsx ./src/examples/marketing.ts\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Model Configuration via AxBaseAI in TypeScript\nDESCRIPTION: Provides a method to return the default model and embedding model configuration, inherited from AxBaseAI. No parameters are required and the output is a readonly object specifying the model keys for chat and embedding usage. This aids in standardizing service setup within the Ax AI platform.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Fetching Default Model Settings in Mistral Service - TypeScript\nDESCRIPTION: Provides a readonly method to retrieve the default model and embedding model configuration. Returns a strongly typed object specifying both model names as strings, facilitating configuration management for consumers of the Mistral service integration. No input parameters required, and output is guaranteed to match the expected structure.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDefaultModels(): Readonly<{ embedModel: string; model: string; }>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'delta' Property for AxAIAnthropicContentBlockDeltaEvent in TypeScript\nDESCRIPTION: This snippet defines the `delta` property within the `AxAIAnthropicContentBlockDeltaEvent` type. It can be one of two types: an object representing a text delta with 'text' and 'type' properties, or an object representing a partial JSON delta with 'partial_json' and 'type' properties. This property captures the actual change content within the delta event.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicContentBlockDeltaEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndelta: { `text`: `string`; `type`: `\"text_delta\"`; } | { `partial_json`: `string`; `type`: `\"input_json_delta\"`; }\n```\n\n----------------------------------------\n\nTITLE: Defining 'call' Property for AxAICohereChatRequestToolResults in TypeScript\nDESCRIPTION: Specifies the `call` property within each object of the `AxAICohereChatRequestToolResults` array. Its type is the first element type (`[0]`) of `AxAICohereChatResponseToolCalls`, linking the result back to a specific tool call made in the Cohere API response. This property connects the tool's output to the corresponding request.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereChatRequestToolResults.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **call**: [`AxAICohereChatResponseToolCalls`](/api/#03-apidocs/typealiasaxaicoherechatresponsetoolcalls)[`0`]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Groq Service Options in TypeScript\nDESCRIPTION: The getOptions method returns the currently configured service options in a readonly structure, used to check or audit configuration state. It is parameterless and outputs the AxAIServiceOptions object as configured in the service instance.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Retrieving AI Service Name - TypeScript\nDESCRIPTION: Describes 'getName', a simple method returning the name of the current AI service as a string. No arguments are taken. Used for display, logging, or internal routing logic. Inherited from AxBaseAI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Getting the service name for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that returns the configured name of the AI service instance. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Dynamic Threshold for Google Search Retrieval in TypeScript\nDESCRIPTION: Defines the `dynamicThreshold` property as an optional number. This property likely resides within the `googleSearchRetrieval` object and controls a threshold for the dynamic mode of Google Search retrieval in the Gemini API.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiOptionsTools.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndynamicThreshold?: number\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemini20Pro Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemini20Pro` assigned the string value `\"gemini-2.0-pro-exp-02-05\"`. This identifier specifies an experimental version of the Gemini 2.0 Pro model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nGemini20Pro: \"gemini-2.0-pro-exp-02-05\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving AI Service Identifier - TypeScript\nDESCRIPTION: Illustrates 'getId', a method that outputs a unique string identifier for the instantiated AI service. No inputs are needed. This can be useful for registration or service tracking in client applications. Method is inherited from AxBaseAI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Implementation Identifier - TypeScript\nDESCRIPTION: Implements getId to return a unique string identifier for this AxAI service implementation. Useful for distinguishing among multiple AI service providers or implementations within aggregated usage. Does not require inputs and outputs a string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAI.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Getting Service Name in TypeScript\nDESCRIPTION: The getName method returns the string name associated with the current Groq service, used for display or internal reference. It is parameterless and depends on previously set configuration or class defaults; returns a string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIGroq.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Fetching Service Options Configuration - TypeScript\nDESCRIPTION: Exhibits the 'getOptions' function, returning the readonly configuration options associated with the AI service instance. Accepts no input and outputs an AxAIServiceOptions-typed object, ensuring consumers can inspect the current config. Inherited from AxBaseAI.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIReka.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Readonly<AxAIServiceOptions>\n```\n\n----------------------------------------\n\nTITLE: Defining the name Property Literal Type in AxDBMemoryArgs (TypeScript)\nDESCRIPTION: Defines the required 'name' property for the AxDBMemoryArgs interface. It is explicitly typed as the string literal \"memory\", serving as a specific identifier for this in-memory database configuration type within the Ax framework.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxDBMemoryArgs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: \"memory\"\n```\n\n----------------------------------------\n\nTITLE: Setting API URL in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase to dynamically set the API endpoint URL for the service instance. Takes the new API URL string as input and returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetAPIURL(apiURL: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the AxProgramExamples Type Alias in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `AxProgramExamples` type. It is specified as a union type, meaning it can be either the `AxProgramDemos` type or the type of the `\"traces\"` property within `AxProgramDemos`. This definition is located in the specified GitHub file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxProgramExamples.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAxProgramExamples: [`AxProgramDemos`](/api/#03-apidocs/typealiasaxprogramdemos) \\| [`AxProgramDemos`](/api/#03-apidocs/typealiasaxprogramdemos)[`\"traces\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Optional config Property for AxAIGoogleGeminiArgs in TypeScript\nDESCRIPTION: Defines the optional `config` property within the `AxAIGoogleGeminiArgs` interface. It accepts a read-only, partial object conforming to the `AxAIGoogleGeminiConfig` type for detailed service configuration. This allows specifying advanced settings for the Google Gemini API interaction.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiArgs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconfig?: Readonly<Partial<AxAIGoogleGeminiConfig>>\n```\n\n----------------------------------------\n\nTITLE: Defining Optional models Property for AxAIGoogleGeminiArgs in TypeScript\nDESCRIPTION: Defines the optional `models` property within the `AxAIGoogleGeminiArgs` interface. It takes an `AxAIInputModelList` containing `AxAIGoogleGeminiModel` enumerations to specify the models available or to be used by the service instance.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiArgs.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodels?: AxAIInputModelList<AxAIGoogleGeminiModel>\n```\n\n----------------------------------------\n\nTITLE: Getting Service Name in AxAIAzureOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase that retrieves the configured name of the AI service instance as a string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAzureOpenAI.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Creating Embedding Response with AxAIServiceImpl in TypeScript (Optional)\nDESCRIPTION: Defines the optional `createEmbedResp` method signature within the `AxAIServiceImpl` interface. This method processes a provider-specific embedding response (`TEmbedResponse`) and converts it into a standardized `AxEmbedResponse`. It accepts a readonly `TEmbedResponse` as input.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIServiceImpl.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateEmbedResp?(resp: Readonly<TEmbedResponse>): AxEmbedResponse\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI getName() Method Signature in TypeScript\nDESCRIPTION: Defines the `getName` method which returns the assigned name (potentially user-defined) for the AI service instance as a string. This method implements the `getName` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetName(): string\n```\n\n----------------------------------------\n\nTITLE: Declaring AxAIGoogleGeminiSafetySettings Type in TypeScript\nDESCRIPTION: This TypeScript type definition declares `AxAIGoogleGeminiSafetySettings` as an array of objects. Each object within the array is intended to hold specific safety settings for interacting with the Google Gemini API, consisting of a category and a threshold property. This type is defined in the Ax framework's Google Gemini integration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIGoogleGeminiSafetySettings.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **AxAIGoogleGeminiSafetySettings**: `object`[]\n```\n\n----------------------------------------\n\nTITLE: AxBaseAI getId() Method Signature in TypeScript\nDESCRIPTION: Defines the `getId` method which returns the unique identifier string for the specific AI service implementation instance. This method implements the `getId` method from the `AxAIService` interface.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxBaseAI.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Installing the Ax Library using npm or yarn\nDESCRIPTION: Provides commands to install the Ax library package (`@ax-llm/ax`) using either npm or yarn package managers. This is the first step to start using the Ax framework in a Typescript project.\nSOURCE: https://github.com/ax-llm/ax/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ax-llm/ax\n# or\nyarn add @ax-llm/ax\n```\n\n----------------------------------------\n\nTITLE: Defining Index Signature for AxGenIn Object in TypeScript\nDESCRIPTION: This TypeScript index signature defines the structure for objects of type `AxGenIn`. It specifies that the object can have properties where the keys are symbols and the values must be of the type `AxFieldValue`. This definition is located in the `program.ts` file within the ax-llm/ax project.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxGenIn.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[`key`: `symbol`]: [`AxFieldValue`](/api/#03-apidocs/typealiasaxfieldvalue)\n```\n\n----------------------------------------\n\nTITLE: Assign Unique Instance ID - AxGen - TypeScript\nDESCRIPTION: setId assigns a string ID to this reranker instance, useful for stable references or programmatic retrieval. Input parameter is a string; output is void. This ID is primarily used by the Ax runtime to manage program components.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetId(\n  id: string\n): void\n```\n\n----------------------------------------\n\nTITLE: Defining Optional apiKey Property for AxAIGoogleGeminiArgs in TypeScript\nDESCRIPTION: Defines the optional `apiKey` property of type `string` within the `AxAIGoogleGeminiArgs` interface. This property holds the API key for authenticating with the Google Gemini service.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiArgs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiKey?: string\n```\n\n----------------------------------------\n\nTITLE: Defining the 'type' Property for AxAIAnthropicMessageDeltaEvent in TypeScript\nDESCRIPTION: Defines the `type` property for the `AxAIAnthropicMessageDeltaEvent` type. This property is a literal string type fixed to the value `\"message_delta\"`, identifying the specific type of event from the Anthropic API stream.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicMessageDeltaEvent.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: https://github.com/ax-llm/ax/blob/76f1e53f33743ee460569bb94d0bd3620db6e328/src/ax/ai/anthropic/types.ts#L197\ntype: \"message_delta\";\n```\n\n----------------------------------------\n\nTITLE: Defining 'model' property for AxAIOpenAIResponseDelta in TypeScript\nDESCRIPTION: Defines the `model` property for the `AxAIOpenAIResponseDelta` type. This property holds a string indicating the specific OpenAI model that generated the response chunk.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIOpenAIResponseDelta.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodel: string\n```\n\n----------------------------------------\n\nTITLE: Defining Mistral Large Model Identifier in TypeScript\nDESCRIPTION: This snippet defines the string identifier for the Mistral Large model. It assigns the value 'mistral-large-latest' to the `MistralLarge` member, likely within the `AxAIMistralModel` enumeration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIMistralModel.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nMistralLarge: \"mistral-large-latest\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenCodestralMamba Model Identifier in TypeScript\nDESCRIPTION: This snippet defines the string identifier for the OpenCodestralMamba model. It assigns the value 'open-codestral-mamba' to the `OpenCodestralMamba` member, likely within the `AxAIMistralModel` enumeration.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIMistralModel.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nOpenCodestralMamba: \"open-codestral-mamba\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Anthropic Claude 3 Haiku Model Identifier - TypeScript\nDESCRIPTION: Defines the 'Claude3Haiku' enum member as 'claude-3-haiku-20240307'. This identifier allows the codebase to target the Claude 3 Haiku (March 2024 release) model reliably. Useful in model routing and service integration layers, ensured by TypeScript's enum typing.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIAnthropicModel.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nClaude3Haiku: \"claude-3-haiku-20240307\"\n```\n\n----------------------------------------\n\nTITLE: Defining DeepSeekChat Enumeration Member in TypeScript\nDESCRIPTION: Defines the `DeepSeekChat` member within the `AxAIDeepSeekModel` enumeration, assigning it the string literal value \"deepseek-chat\". This member is used to identify the DeepSeek chat model within the ax-llm framework. It's located in the `src/ax/ai/deepseek/types.ts` file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIDeepSeekModel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDeepSeekChat: \"deepseek-chat\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Gemini15Flash8B Model Identifier in TypeScript\nDESCRIPTION: Defines the constant `Gemini15Flash8B` assigned the string value `\"gemini-1.5-flash-8b\"`. This identifier likely specifies the 8 billion parameter version of the Gemini 1.5 Flash model.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiModel.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nGemini15Flash8B: \"gemini-1.5-flash-8b\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Anthropic Claude 3.5 Sonnet Model Identifier - TypeScript\nDESCRIPTION: Adds the 'Claude35Sonnet' member to the Anthropic models enum, mapped to 'claude-3-5-sonnet-latest'. This mapping provides a clear, type-safe way to select the Claude 3.5 Sonnet model when interacting with Anthropic services through TypeScript code.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIAnthropicModel.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nClaude35Sonnet: \"claude-3-5-sonnet-latest\"\n```\n\n----------------------------------------\n\nTITLE: Getting the Unique ID of AxAIDeepSeek Instance (TypeScript)\nDESCRIPTION: Returns the unique identifier string for this specific AxAIDeepSeek service instance. Inherited from `AxAIOpenAIBase`, this ID helps differentiate between multiple AI service configurations.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIDeepSeek.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Setting the service name for AxAIOpenAI (TypeScript)\nDESCRIPTION: Inherited method from AxAIOpenAIBase used to set or update the name identifier for the service instance. Defined in `src/ax/ai/base.ts`.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIOpenAI.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional cutoff Property in AxRouterForwardOptions (TypeScript)\nDESCRIPTION: This snippet defines an optional property named `cutoff` within the `AxRouterForwardOptions` type or interface. The property is of type `number` and its usage is optional within the options object, likely serving as a threshold or limit.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxRouterForwardOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncutoff?: number\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `url` Property in AxApacheTikaArgs (TypeScript)\nDESCRIPTION: Defines the optional `url` property for the `AxApacheTikaArgs` interface. This property specifies the endpoint URL for the Apache Tika server. It can be provided as either a string or a URL object.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxApacheTikaArgs.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nurl?: string | URL\n```\n\n----------------------------------------\n\nTITLE: Defining the 'type' Property for AxAIAnthropicPingEvent in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the `type` property for the `AxAIAnthropicPingEvent` interface or type alias. It uses a literal type to restrict the value of this property strictly to the string \"ping\". This is likely used as a discriminator in a union type for handling different event types from the Anthropic API.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicPingEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"ping\"\n```\n\n----------------------------------------\n\nTITLE: Assign Parent Program ID - AxGen - TypeScript\nDESCRIPTION: setParentId sets the parentId property of the reranker component for hierarchical arrangement and referencing within composite Ax programs. Expects a string parentId and returns void.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxDefaultResultReranker.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetParentId(\n  parentId: string\n): void\n```\n\n----------------------------------------\n\nTITLE: Defining Required name Property for AxAIGoogleGeminiArgs in TypeScript\nDESCRIPTION: Defines the required `name` property within the `AxAIGoogleGeminiArgs` interface. It is a literal type fixed to the string value 'google-gemini', acting as a unique identifier for the Google Gemini AI service type within the Ax framework.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIGoogleGeminiArgs.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nname: \"google-gemini\"\n```\n\n----------------------------------------\n\nTITLE: Defining 'created' property for AxAIOpenAIResponseDelta in TypeScript\nDESCRIPTION: Defines the `created` property for the `AxAIOpenAIResponseDelta` type. This property holds a numeric timestamp indicating when the response chunk was created.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIOpenAIResponseDelta.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreated: number\n```\n\n----------------------------------------\n\nTITLE: Defining the CHAT Member in AxLLMRequestTypeValues (TypeScript)\nDESCRIPTION: Defines the `CHAT` member of the `AxLLMRequestTypeValues` enumeration, assigning it the string literal `\"chat\"`. This represents a chat-based LLM request type within the Ax LLM tracing system. It is located in the `src/ax/trace/trace.ts` file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxLLMRequestTypeValues.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nCHAT: \"chat\"\n```\n\n----------------------------------------\n\nTITLE: Defining the RERANK Member in AxLLMRequestTypeValues (TypeScript)\nDESCRIPTION: Defines the `RERANK` member of the `AxLLMRequestTypeValues` enumeration, assigning it the string literal `\"rerank\"`. This represents a reranking LLM request type within the Ax LLM tracing system. It is located in the `src/ax/trace/trace.ts` file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxLLMRequestTypeValues.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nRERANK: \"rerank\"\n```\n\n----------------------------------------\n\nTITLE: Exporting AxSignature as String in TypeScript\nDESCRIPTION: The toString method provides a string-based representation of the current AxSignature, useful for logging, debugging, or serialization. It requires no input and returns a string. It can be used in scenarios requiring a textual signature description or as part of other serialization strategies.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxSignature.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoString(): string\n```\n\n----------------------------------------\n\nTITLE: Defining the `type` Property for AxAIAnthropicContentBlockStopEvent in TypeScript\nDESCRIPTION: Defines the `type` property for the `AxAIAnthropicContentBlockStopEvent`. This property is a literal type, restricted to the exact string value `\"content_block_stop\"`, serving as a discriminator to identify this specific event type from the Anthropic API.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicContentBlockStopEvent.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"content_block_stop\"\n```\n\n----------------------------------------\n\nTITLE: id Property Definition (TypeScript)\nDESCRIPTION: Specifies the `id` property within the `AxAIRekaChatResponse` type, which is expected to be a string.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIRekaChatResponse.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Defining 'object' property for AxAIOpenAIResponseDelta in TypeScript\nDESCRIPTION: Defines the `object` property for the `AxAIOpenAIResponseDelta` type. This property holds a string indicating the type of the API object, typically related to chat completion chunks.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIOpenAIResponseDelta.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nobject: string\n```\n\n----------------------------------------\n\nTITLE: Declaring ID Property in AxAICohereEmbedResponse TypeScript Type\nDESCRIPTION: This property within the `AxAICohereEmbedResponse` type stores a unique identifier for the embedding response. It is declared as a string (`string`).\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAICohereEmbedResponse.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Obtaining Service ID in Mistral Service - TypeScript\nDESCRIPTION: Returns the unique string identifier for this service instance, used for referencing in registries or when composing multiple services. Typically either hard-coded or derived from configuration, and does not require any input parameters or return a promise.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIMistral.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetId(): string\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional `debug` Property in AxRateLimiterTokenUsageOptions (TypeScript)\nDESCRIPTION: This TypeScript code snippet defines an optional boolean property named `debug` within the `AxRateLimiterTokenUsageOptions` interface. This property allows enabling or disabling debugging features related to the rate limiter's token usage logic. If set to `true`, it likely activates verbose logging or other diagnostic outputs.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxRateLimiterTokenUsageOptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndebug?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining BlockDefault Safety Threshold Value in TypeScript\nDESCRIPTION: Defines the `BlockDefault` member of the `AxAIGoogleGeminiSafetyThreshold` enumeration. This represents the unspecified or default harm block threshold.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxAIGoogleGeminiSafetyThreshold.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nBlockDefault: \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"\n```\n\n----------------------------------------\n\nTITLE: Defining the 'error' Object Property in AxAIAnthropicErrorEvent (TypeScript)\nDESCRIPTION: Defines the 'error' property within the AxAIAnthropicErrorEvent type. It is an object containing specific error details from Anthropic, including a 'message' string and a 'type' string, noted here as potentially being 'overloaded_error'. This structure encapsulates the error information.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicErrorEvent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nerror: object\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Nested properties within the 'error' object\nmessage: string\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Nested properties within the 'error' object\ntype: \"overloaded_error\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Token Text Offset Array for AxAIOpenAILogprob - TypeScript\nDESCRIPTION: Declares the text_offset property as an array of numbers, representing the character positions of each token as part of the AxAIOpenAILogprob object. This property is required for correlating tokens to their relative locations within the input text. Expected input is a number array and output is used for offset mapping within OpenAI logprob structures. No external dependencies are required beyond a TypeScript environment.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/TypeAlias.AxAIOpenAILogprob.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext_offset: number[];\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Message Property in AxAssertion Interface (TypeScript)\nDESCRIPTION: Defines an optional `message` property of type string within the `AxAssertion` interface, as specified in `ax/dsp/asserts.ts`. This property likely holds a custom message related to the assertion.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAssertion.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmessage?: string\n```\n\n----------------------------------------\n\nTITLE: Setting Service Name via AxBaseAI in TypeScript\nDESCRIPTION: Allows explicit assignment of a service name string for internal or display purposes, updating the inherited value from AxBaseAI. Does not return a value. Primarily used for identification and UI labeling.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Class.AxAIAnthropic.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetName(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the 'index' Property for AxAIAnthropicContentBlockDeltaEvent in TypeScript\nDESCRIPTION: This snippet defines the `index` property for the `AxAIAnthropicContentBlockDeltaEvent` type. It specifies that `index` must be a number, likely indicating the position or sequence of the content block delta event.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicContentBlockDeltaEvent.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nindex: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining index Property for Anthropic Event in TypeScript\nDESCRIPTION: Defines the `index` property within the `AxAIAnthropicContentBlockStartEvent` interface. This property holds a numerical value representing the index or position of the content block within a sequence.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Interface.AxAIAnthropicContentBlockStartEvent.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nindex: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining the UNKNOWN Member in AxLLMRequestTypeValues (TypeScript)\nDESCRIPTION: Defines the `UNKNOWN` member of the `AxLLMRequestTypeValues` enumeration, assigning it the string literal `\"unknown\"`. This represents an unrecognized or unspecified LLM request type within the Ax LLM tracing system. It is located in the `src/ax/trace/trace.ts` file.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/03-apidocs/Enumeration.AxLLMRequestTypeValues.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nUNKNOWN: \"unknown\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ax Documentation Splash Page Metadata (YAML)\nDESCRIPTION: This YAML block defines the frontmatter for a documentation page, likely using a static site generator. It sets the page title, description, template ('splash'), and configures a hero section with a tagline, image, and action buttons linking to the quick start guide and the GitHub repository.\nSOURCE: https://github.com/ax-llm/ax/blob/main/src/docs/src/content/docs/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Meet, Ax\ndescription: A framework to build LLM Agents. Multi-modal, Streaming, DSPy, Agents and much more.\ntemplate: splash\nhero:\n  tagline: A framework to build LLM Agents. Multi-modal, Streaming, DSPy, Agents and much more.\n  image:\n    file: ../../assets/spacy.jpg\n  actions:\n    - text: Quick Start\n      link: ./start/quick/\n      icon: right-arrow\n      variant: primary\n    - text: Github Project\n      link: https://github.com/ax-llm/ax\n      icon: external\n---\n```"
  }
]