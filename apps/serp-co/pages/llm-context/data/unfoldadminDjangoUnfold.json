[
  {
    "owner": "unfoldadmin",
    "repo": "django-unfold",
    "content": "TITLE: Configuring INSTALLED_APPS for Django Unfold\nDESCRIPTION: This snippet shows how to add Unfold and its optional components to the INSTALLED_APPS setting in Django. It's crucial to place 'unfold' before 'django.contrib.admin' for proper functionality.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/installation/quickstart.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nINSTALLED_APPS = [\n    \"unfold\",  # before django.contrib.admin\n    \"unfold.contrib.filters\",  # optional, if special filters are needed\n    \"unfold.contrib.forms\",  # optional, if special form elements are needed\n    \"unfold.contrib.inlines\",  # optional, if special inlines are needed\n    \"unfold.contrib.import_export\",  # optional, if django-import-export package is used\n    \"unfold.contrib.guardian\",  # optional, if django-guardian package is used\n    \"unfold.contrib.simple_history\",  # optional, if django-simple-history package is used\n    \"django.contrib.admin\",  # required\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Unfold Admin Settings\nDESCRIPTION: Complete configuration example for the Django Unfold admin interface using the UNFOLD settings dictionary. Includes site branding, theme customization, navigation structure, and various callback functions for dynamic content.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/settings.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nfrom django.templatetags.static import static\nfrom django.urls import reverse_lazy\nfrom django.utils.translation import gettext_lazy as _\n\nUNFOLD = {\n    \"SITE_TITLE\": \"Custom suffix in <title> tag\",\n    \"SITE_HEADER\": \"Appears in sidebar at the top\",\n    \"SITE_SUBHEADER\": \"Appears under SITE_HEADER\",\n    \"SITE_DROPDOWN\": [\n        {\n            \"icon\": \"diamond\",\n            \"title\": _(\"My site\"),\n            \"link\": \"https://example.com\",\n        },\n        # ...\n    ],\n    \"SITE_URL\": \"/\",\n    # \"SITE_ICON\": lambda request: static(\"icon.svg\"),  # both modes, optimise for 32px height\n    \"SITE_ICON\": {\n        \"light\": lambda request: static(\"icon-light.svg\"),  # light mode\n        \"dark\": lambda request: static(\"icon-dark.svg\"),  # dark mode\n    },\n    # \"SITE_LOGO\": lambda request: static(\"logo.svg\"),  # both modes, optimise for 32px height\n    \"SITE_LOGO\": {\n        \"light\": lambda request: static(\"logo-light.svg\"),  # light mode\n        \"dark\": lambda request: static(\"logo-dark.svg\"),  # dark mode\n    },\n    \"SITE_SYMBOL\": \"speed\",  # symbol from icon set\n    \"SITE_FAVICONS\": [\n        {\n            \"rel\": \"icon\",\n            \"sizes\": \"32x32\",\n            \"type\": \"image/svg+xml\",\n            \"href\": lambda request: static(\"favicon.svg\"),\n        },\n    ],\n    \"SHOW_HISTORY\": True, # show/hide \"History\" button, default: True\n    \"SHOW_VIEW_ON_SITE\": True, # show/hide \"View on site\" button, default: True\n    \"SHOW_BACK_BUTTON\": False, # show/hide \"Back\" button on changeform in header, default: False\n    \"ENVIRONMENT\": \"sample_app.environment_callback\", # environment name in header\n    \"ENVIRONMENT_TITLE_PREFIX\": \"sample_app.environment_title_prefix_callback\", # environment name prefix in title tag\n    \"DASHBOARD_CALLBACK\": \"sample_app.dashboard_callback\",\n    \"THEME\": \"dark\", # Force theme: \"dark\" or \"light\". Will disable theme switcher\n    \"LOGIN\": {\n        \"image\": lambda request: static(\"sample/login-bg.jpg\"),\n        \"redirect_after\": lambda request: reverse_lazy(\"admin:APP_MODEL_changelist\"),\n    },\n    \"STYLES\": [\n        lambda request: static(\"css/style.css\"),\n    ],\n    \"SCRIPTS\": [\n        lambda request: static(\"js/script.js\"),\n    ],\n    \"BORDER_RADIUS\": \"6px\",\n    \"COLORS\": {\n        \"base\": {\n            \"50\": \"249 250 251\",\n            \"100\": \"243 244 246\",\n            \"200\": \"229 231 235\",\n            \"300\": \"209 213 219\",\n            \"400\": \"156 163 175\",\n            \"500\": \"107 114 128\",\n            \"600\": \"75 85 99\",\n            \"700\": \"55 65 81\",\n            \"800\": \"31 41 55\",\n            \"900\": \"17 24 39\",\n            \"950\": \"3 7 18\",\n        },\n        \"primary\": {\n            \"50\": \"250 245 255\",\n            \"100\": \"243 232 255\",\n            \"200\": \"233 213 255\",\n            \"300\": \"216 180 254\",\n            \"400\": \"192 132 252\",\n            \"500\": \"168 85 247\",\n            \"600\": \"147 51 234\",\n            \"700\": \"126 34 206\",\n            \"800\": \"107 33 168\",\n            \"900\": \"88 28 135\",\n            \"950\": \"59 7 100\",\n        },\n        \"font\": {\n            \"subtle-light\": \"var(--color-base-500)\",  # text-base-500\n            \"subtle-dark\": \"var(--color-base-400)\",  # text-base-400\n            \"default-light\": \"var(--color-base-600)\",  # text-base-600\n            \"default-dark\": \"var(--color-base-300)\",  # text-base-300\n            \"important-light\": \"var(--color-base-900)\",  # text-base-900\n            \"important-dark\": \"var(--color-base-100)\",  # text-base-100\n        },\n    },\n    \"EXTENSIONS\": {\n        \"modeltranslation\": {\n            \"flags\": {\n                \"en\": \"ðŸ‡¬ðŸ‡§\",\n                \"fr\": \"ðŸ‡«ðŸ‡·\",\n                \"nl\": \"ðŸ‡§ðŸ‡ª\",\n            },\n        },\n    },\n    \"SIDEBAR\": {\n        \"show_search\": False,  # Search in applications and models names\n        \"show_all_applications\": False,  # Dropdown with all applications and models\n        \"navigation\": [\n            {\n                \"title\": _(\"Navigation\"),\n                \"separator\": True,  # Top border\n                \"collapsible\": True,  # Collapsible group of links\n                \"items\": [\n                    {\n                        \"title\": _(\"Dashboard\"),\n                        \"icon\": \"dashboard\",  # Supported icon set: https://fonts.google.com/icons\n                        \"link\": reverse_lazy(\"admin:index\"),\n                        \"badge\": \"sample_app.badge_callback\",\n                        \"permission\": lambda request: request.user.is_superuser,\n                    },\n                    {\n                        \"title\": _(\"Users\"),\n                        \"icon\": \"people\",\n                        \"link\": reverse_lazy(\"admin:auth_user_changelist\"),\n                    },\n                ],\n            },\n        ],\n    },\n    \"TABS\": [\n        {\n            \"models\": [\n                \"app_label.model_name_in_lowercase\",\n            ],\n            \"items\": [\n                {\n                    \"title\": _(\"Your custom title\"),\n                    \"link\": reverse_lazy(\"admin:app_label_model_name_changelist\"),\n                    \"permission\": \"sample_app.permission_callback\",\n                },\n            ],\n        },\n    ],\n}\n\n\ndef dashboard_callback(request, context):\n    \"\"\"\n    Callback to prepare custom variables for index template which is used as dashboard\n    template. It can be overridden in application by creating custom admin/index.html.\n    \"\"\"\n    context.update(\n        {\n            \"sample\": \"example\",  # this will be injected into templates/admin/index.html\n        }\n    )\n    return context\n\n\ndef environment_callback(request):\n    \"\"\"\n    Callback has to return a list of two values represeting text value and the color\n    type of the label displayed in top right corner.\n    \"\"\"\n    return [\"Production\", \"danger\"] # info, danger, warning, success\n\n\ndef badge_callback(request):\n    return 3\n\ndef permission_callback(request):\n    return request.user.has_perm(\"sample_app.change_model\")\n\n```\n\n----------------------------------------\n\nTITLE: Installing Django Unfold using pip and poetry\nDESCRIPTION: This snippet provides installation commands for Django Unfold using both pip and poetry package managers. These commands should be executed in the shell.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/installation/quickstart.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install django-unfold\npoetry add django-unfold\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelAdmin with Django Unfold Options\nDESCRIPTION: A comprehensive example showing how to create a custom admin class inheriting from unfold.admin.ModelAdmin with various configuration options. Demonstrates settings for form display, warnings, field preprocessing, filter behavior, layout customization, actions, templates, and widget overrides.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/modeladmin.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django import models\nfrom django.contrib import admin\nfrom django.contrib.postgres.fields import ArrayField\nfrom django.db import models\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.forms.widgets import ArrayWidget, WysiwygWidget\n\n\n@admin.register(MyModel)\nclass CustomAdminClass(ModelAdmin):\n    # Display fields in changeform in compressed mode\n    compressed_fields = True  # Default: False\n\n    # Warn before leaving unsaved changes in changeform\n    warn_unsaved_form = True  # Default: False\n\n    # Preprocess content of readonly fields before render\n    readonly_preprocess_fields = {\n        \"model_field_name\": \"html.unescape\",\n        \"other_field_name\": lambda content: content.strip(),\n    }\n\n    # Display submit button in filters\n    list_filter_submit = False\n\n    # Display changelist in fullwidth\n    list_fullwidth = False\n\n    # Set to False, to enable filter as \"sidebar\"\n    list_filter_sheet = True\n\n    # Position horizontal scrollbar in changelist at the top\n    list_horizontal_scrollbar_top = False\n\n    # Dsable select all action in changelist\n    list_disable_select_all = False\n\n    # Custom actions\n    actions_list = []  # Displayed above the results list\n    actions_row = []  # Displayed in a table row in results list\n    actions_detail = []  # Displayed at the top of for in object detail\n    actions_submit_line = []  # Displayed near save in object detail\n\n    # Changeform templates (located inside the form)\n    change_form_before_template = \"some/template.html\"\n    change_form_after_template = \"some/template.html\"\n\n    # Located outside of the form\n    change_form_outer_before_template = \"some/template.html\"\n    change_form_outer_after_template = \"some/template.html\"\n\n    # Display cancel button in submit line in changeform\n    change_form_show_cancel_button = True # show/hide cancel button in changeform, default: False\n\n    formfield_overrides = {\n        models.TextField: {\n            \"widget\": WysiwygWidget,\n        },\n        ArrayField: {\n            \"widget\": ArrayWidget,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Complex Component Usage with Variables in Unfold\nDESCRIPTION: Shows a more complex example of Unfold components usage, including container, navigation, and card components. Demonstrates how to pass variables to components and use Django template tags like loops and translations within the component structure.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/introduction.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load i18n unfold %}\n\n{% block content %}\n    {% component \"unfold/components/container.html\" %}\n        <div class=\"flex flex-col gap-4\">\n            {% component \"unfold/components/navigation.html\" with items=navigation %}\n            {% endcomponent %}\n\n            {% component \"unfold/components/navigation.html\" with class=\"ml-auto\" items=filters %}\n            {% endcomponent %}\n        </div>\n\n        <div class=\"grid grid-cols-3\">\n            {% for card in cards %}\n                {% trans \"Last 7 days\" as label %}\n                {% component \"unfold/components/card.html\" with class=\"lg:w-1/3\" %}\n                    {% component \"unfold/components/text.html\" %}\n                        {{ card.title }}\n                    {% endcomponent %}\n\n                    {% component \"unfold/components/title.html\" %}\n                        {{ card.metric }}\n                    {% endcomponent %}\n                {% endcomponent %}\n            {% endfor %}\n        </div>\n    {% endcomponent %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Unfold ModelAdmin in Django admin classes\nDESCRIPTION: This snippet shows how to properly inherit from Unfold's ModelAdmin class in custom admin classes. This inheritance is required for Unfold's styling and functionality to work correctly.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/installation/quickstart.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom unfold.admin import ModelAdmin\n\n\n@admin.register(MyModel)\nclass CustomAdminClass(ModelAdmin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Autocomplete Filters in Django Unfold Admin\nDESCRIPTION: Example showing how to implement both single and multiple autocomplete filters in a Django admin model. Requires the model fields to be ForeignKey or ManyToManyField and the referenced admin model must have search_fields defined.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/autocomplete.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom django.contrib.auth.models import User\n\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.filters.admin import (\n    AutocompleteSelectFilter,\n    AutocompleteSelectMultipleFilter\n)\n\n@admin.register(User)\nclass YourModelAdmin(ModelAdmin):\n    list_filter = (\n        # Autocomplete filter\n        [\"other_model_field\", AutocompleteSelectFilter],\n\n        # Autocomplete multiple filter\n        [\"other_multiple_model_field\", AutocompleteSelectMultipleFilter],\n    )\n\nclass OtherModelAdmin(ModelAdmin):\n    search_fields = [\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring User and Group Admin Models for Django Unfold\nDESCRIPTION: Shows how to unregister default Django admin classes and re-register them with Unfold styling. Includes customization of UserAdmin with proper form implementations and GroupAdmin configuration to inherit from ModelAdmin.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/installation/auth.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nfrom django.contrib.auth.admin import GroupAdmin as BaseGroupAdmin\nfrom django.contrib.auth.models import User, Group\n\nfrom unfold.forms import AdminPasswordChangeForm, UserChangeForm, UserCreationForm\nfrom unfold.admin import ModelAdmin\n\n\nadmin.site.unregister(User)\nadmin.site.unregister(Group)\n\n\n@admin.register(User)\nclass UserAdmin(BaseUserAdmin, ModelAdmin):\n    # Forms loaded from `unfold.forms`\n    form = UserChangeForm\n    add_form = UserCreationForm\n    change_password_form = AdminPasswordChangeForm\n\n\n@admin.register(Group)\nclass GroupAdmin(BaseGroupAdmin, ModelAdmin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Filters in Django Unfold Admin\nDESCRIPTION: Example implementation of various dropdown filters in Django admin including custom filters, choices filters, and related model filters. The code shows filter configuration with a custom dropdown filter class and admin model registration with different filter types. Important limitations include no autocomplete functionality and mandatory use of Select2 for UI.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/dropdown.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom django.contrib.auth.models import User\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.filters.admin import (\n    ChoicesDropdownFilter,\n    MultipleChoicesDropdownFilter,\n    RelatedDropdownFilter,\n    MultipleRelatedDropdownFilter,\n    DropdownFilter,\n    MultipleDropdownFilter\n)\n\n\nclass CustomDropdownFilter(DropdownFilter):\n    title = _(\"Custom dropdown filter\")\n    parameter_name = \"query_param_in_uri\"\n\n    def lookups(self, request, model_admin):\n        return [\n            [\"option_1\", _(\"Option 1\")],\n            [\"option_2\", _(\"Option 2\")],\n        ]\n\n    def queryset(self, request, queryset):\n        if self.value() not in EMPTY_VALUES:\n            # Here write custom query\n            return queryset.filter(your_field=self.value())\n\n        return queryset\n\n\n@admin.register(User)\nclass MyAdmin(ModelAdmin):\n    list_filter_submit = True  # Submit button at the bottom of the filter\n    list_filter = [\n        CustomDropdownFilter,\n        (\"modelfield_with_choices\", ChoicesDropdownFilter),\n        (\"modelfield_with_choices_multiple\", MultipleChoicesDropdownFilter),\n        (\"modelfield_with_foreign_key\", RelatedDropdownFilter)\n        (\"modelfield_with_foreign_key_multiple\", MultipleRelatedDropdownFilter)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Form Action in Django Unfold Admin\nDESCRIPTION: This snippet shows how to create a custom form and integrate it as an action in the Django Unfold admin interface. It includes defining a form with Unfold widgets, registering it with a User model, and creating an action method to process the form data.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/actions/action-form-example.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django import forms\nfrom django.contrib.auth.models import User\nfrom django.http import HttpRequest\nfrom django.shortcuts import render\nfrom django.urls import reverse_lazy\nfrom django.utils.translation import gettext_lazy as _\n\nfrom unfold.admin import ModelAdmin\nfrom unfold.decorators import action\nfrom unfold.widgets import UnfoldAdminTextInputWidget, UnfoldAdminSplitDateTimeWidget\n\n\nclass SomeForm(forms.Form):\n    # It is important to set a widget coming from Unfold\n    date_start = forms.SplitDateTimeField(label=_(\"Start\"), widget=UnfoldAdminSplitDateTimeWidget)\n    date_end = forms.SplitDateTimeField(label=_(\"End\"), widget=UnfoldAdminSplitDateTimeWidget)\n    note = forms.CharField(label=_(\"Note\"), widget=UnfoldAdminTextInputWidget)\n\n    # Loads date widget required JS files\n    class Media:\n        js = [\n            \"admin/js/vendor/jquery/jquery.js\",\n            \"admin/js/jquery.init.js\",\n            \"admin/js/calendar.js\",\n            \"admin/js/admin/DateTimeShortcuts.js\",\n            \"admin/js/core.js\",\n        ]\n\n\n@register(User)\nclass UserAdmin(ModelAdmin):\n    actions_detail = [\"change_detail_action\"]\n\n    @action(description=_(\"Change detail action\"), url_path=\"change-detail-action\")\n    def change_detail_action(self, request: HttpRequest, object_id: int) -> str:\n        # Check if object already exists, otherwise returs 404\n        obj = get_object_or_404(User, pk=object_id)\n        form = SomeForm(request.POST or None)\n\n        if request.method == \"POST\" and form.is_valid():\n            # Process form data\n            # form.cleaned_data[\"note\"]\n            # form.cleaned_data[\"date_from\"]\n            # form.cleaned_data[\"date_to\"]\n\n            messages.success(request, _(\"Change detail action has been successful.\"))\n\n            return redirect(\n                reverse_lazy(\"admin:app_model_change\", args=[object_id])\n            )\n\n        return render(\n            request,\n            \"some/action.html\",\n            {\n                \"form\": form,\n                \"object\": obj,\n                \"title\": _(\"Change detail action for {}\").format(obj),\n                **self.admin_site.each_context(request),\n            },\n        )\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Action in Django-Unfold ModelAdmin\nDESCRIPTION: This snippet demonstrates how to register a custom action in a Django-Unfold ModelAdmin class using the @action decorator. The code shows how to add a custom action with an icon to the User model admin interface.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/actions/introduction.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.auth.models import User\nfrom django.contrib import admin\nfrom django.db.models import QuerySet\nfrom django.http import HttpRequest\nfrom unfold.admin import ModelAdmin\nfrom unfold.decorators import action\n\n@admin.register(User)\nclass UserAdmin(ModelAdmin):\n    actions_list = [\"custom_action\"]\n\n    @action(description=\"Custom action\", icon=\"person\")\n    def custom_action(self, request: HttpRequest, queryset: QuerySet):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Nonrelated Inlines in Django Unfold Admin\nDESCRIPTION: Example implementation of nonrelated inlines using NonrelatedTabularInline class. Shows how to configure inlines for models without foreign key relationships, including required method implementations for querying and saving data.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/inlines/nonrelated.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.inlines.admin import NonrelatedTabularInline\nfrom .models import OtherModel\n\nclass OtherNonrelatedInline(NonrelatedTabularInline):  # NonrelatedStackedInline is available as well\n    model = OtherModel\n    fields = [\"field1\", \"field2\"]  # Ignore property to display all fields\n\n    def get_form_queryset(self, obj):\n        \"\"\"\n        Gets all nonrelated objects needed for inlines. Method must be implemented.\n        \"\"\"\n        return self.model.objects.all()\n\n    def save_new_instance(self, parent, instance):\n        \"\"\"\n        Extra save method which can for example update inline instances based on current\n        main model object. Method must be implemented.\n        \"\"\"\n        pass\n\n\n@admin.register(User)\nclass UserAdmin(ModelAdmin):\n    inlines = [OtherNonrelatedInline]\n```\n\n----------------------------------------\n\nTITLE: Implementing Changelist Actions in Django Unfold ModelAdmin\nDESCRIPTION: This example demonstrates how to register custom changelist actions for the User model using Django Unfold. It shows how to define an action method, specify it in actions_list, add permissions, and implement a permission check method. The action redirects to the User changelist page.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/actions/changelist.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib.admin import register\nfrom django.contrib.auth.models import User\nfrom django.shortcuts import redirect\nfrom django.urls import reverse_lazy\nfrom django.utils.translation import gettext_lazy as _\nfrom django.http import HttpRequest\nfrom unfold.admin import ModelAdmin\nfrom unfold.decorators import action\n\n\n@register(User)\nclass UserAdmin(ModelAdmin):\n    actions_list = [\"changelist_action\"]\n\n    @action(description=_(\"Changelist action\"), url_path=\"changelist-action\", permissions=[\"changelist_action\"])\n    def changelist_action(self, request: HttpRequest):\n        return redirect(\n          reverse_lazy(\"admin:users_user_changelist\")\n        )\n\n    def has_changelist_action_permission(self, request: HttpRequest):\n        # Write your own bussiness logic. Code below will always display an action.\n        return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Variants for Django-Unfold Actions\nDESCRIPTION: This snippet demonstrates how to apply different color variants to Django-Unfold actions using the ActionVariant enum. Color variants help distinguish between different types of actions (primary, success, warning, danger, etc.).\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/actions/introduction.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.db.models import QuerySet\nfrom django.http import HttpRequest\n\nfrom unfold.decorators import action\n# Import ActionVariant enum from Unfold to set action variant\nfrom unfold.enums import ActionVariant\n\n# class ActionVariant(Enum):\n#     DEFAULT = \"default\"\n#     PRIMARY = \"primary\"\n#     SUCCESS = \"success\"\n#     INFO = \"info\"\n#     WARNING = \"warning\"\n#     DANGER = \"danger\"\n\n@action(description=\"Custom action\", variant=ActionVariant.PRIMARY)\ndef custom_action(self, request: HttpRequest, queryset: QuerySet):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Changeform Tabs in Django Unfold Settings\nDESCRIPTION: This code snippet demonstrates how to configure tab navigation for changeform views in Django Unfold admin. It shows the structure of the UNFOLD settings dictionary including how to specify target models with the 'detail' flag set to True, define custom tab items with titles and links, and implement permission-based access control through callback functions.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/changeform.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nfrom django.urls import reverse_lazy\nfrom django.utils.translation import gettext_lazy as _\n\nUNFOLD = {\n    \"TABS\": [\n        {\n            # Which changeform models are going to display tab navigation\n            \"models\": [\n                {\n                    \"name\": \"app_label.model_name_in_lowercase\",\n                    \"detail\": True, # Displays tab navigation on changeform page\n                },\n            ],\n            # List of tab items\n            \"items\": [\n                {\n                    \"title\": _(\"Your custom title\"),\n                    \"link\": reverse_lazy(\"admin:app_label_model_name_changelist\"),\n                    \"permission\": \"sample_app.permission_callback\",\n                },\n                {\n                    \"title\": _(\"Another custom title\"),\n                    \"link\": reverse_lazy(\"admin:app_label_another_model_name_changelist\"),\n                    \"permission\": \"sample_app.permission_callback\",\n                },\n            ],\n        },\n    ],\n}\n\n# Permission callback for tab item\ndef permission_callback(request):\n    return request.user.has_perm(\"sample_app.change_model\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Fields in Django Admin\nDESCRIPTION: Implementation of ModelAdmin class that configures conditional field visibility using Alpine.js expressions. The admin setup shows address fields only when different_address is true.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/conditional-fields.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom unfold.admin import ModelAdmin\n\nfrom .models import User\n\n\n@admin.register(User)\nclass UserAdmin(ModelAdmin):\n    conditional_fields = {\n        \"country\": \"different_address == true\"\n        \"city\": \"different_address == true\"\n        \"address\": \"different_address == true\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Optimizing Queries for Related Data in Django Unfold Admin\nDESCRIPTION: This snippet shows how to optimize queries for related data in Django Unfold admin using prefetch_related. It includes setting a custom queryset to reduce the number of database queries.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/sections/index.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom unfold.admin import ModelAdmin\n\nfrom .models import SomeModel\n\n\n@admin.register(SomeModel)\nclass SomeAdmin(ModelAdmin):\n    list_per_page = 20  # Quick solution\n    list_sections = [CustomTableSection]\n\n    # Custom queryset prefetching related records\n    def get_queryset(self, request):\n        return (\n            super()\n            .get_queryset(request)\n            .prefetch_related(\n                \"related_field_set\",\n                \"related_field__another_related_field\",\n                \"related_field__another_related_field__even_more_related_field\",\n            )\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Choice Field Filters in Django Unfold Admin\nDESCRIPTION: Example showing how to use ChoicesRadioFilter and ChoicesCheckboxFilter for model fields with choices in Django admin interface. These filters provide radio button or checkbox selection instead of traditional dropdowns.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/checkbox-radio.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unfold.contrib.filters.admin import ChoicesRadioFilter, ChoicesCheckboxFilter\n\nclass SampleModelAdmin(ModelAdmin):\n    list_filter = [\n        (\"status\", ChoicesCheckboxFilter),\n        (\"status\", ChoicesRadioFilter)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs with the @tabs Decorator in Django Unfold\nDESCRIPTION: Shows how to use the @tabs decorator to organize ModelAdmin fields into tabs. This approach allows defining tabs with specific fields and custom titles, providing a cleaner way to organize complex forms.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom unfold.admin import ModelAdmin\nfrom unfold.decorators import tabs\n\n\n@admin.register(Article)\nclass ArticleAdmin(ModelAdmin):\n    @tabs(\n        (\n            \"Content\",\n            (\"title\", \"introduction\", \"content\"),\n        ),\n        (\n            \"SEO\",\n            (\"seo_title\", \"seo_description\"),\n        ),\n        (\n            \"Settings\",\n            (\"is_published\", \"published_at\"),\n        ),\n    )\n    def get_fieldsets(self, request, obj=None):\n        # Your custom field logic if needed\n        return super().get_fieldsets(request, obj)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fieldset Tabs in Django Admin\nDESCRIPTION: This code snippet shows how to configure fieldsets in a Django ModelAdmin class to create tabbed navigation. It uses the 'tab' CSS class to mark fieldsets for tab grouping and demonstrates how to structure the fieldsets tuple with tab names and fields.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/fieldsets.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom django.utils.translation import gettext_lazy as _\nfrom unfold.admin import ModelAdmin\n\nfrom .models import MyModel\n\n\n@admin.register(MyModel)\nclass MyModelAdmin(ModelAdmin):\n    fieldsets = (\n        (\n            None,\n            {\n                \"fields\": [\n                    \"field_1\",\n                    \"field_2\",\n                ],\n            },\n        ),\n        (\n            _(\"Tab 1\"),\n            {\n                \"classes\": [\"tab\"],\n                \"fields\": [\n                    \"field_3\",\n                    \"field_4\",\n                ],\n            },\n        ),\n        (\n            _(\"Tab 2\"),\n            {\n                \"classes\": [\"tab\"],\n                \"fields\": [\n                    \"field_5\",\n                    \"field_6\",\n                ],\n            },\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Template Dropdowns in Django Unfold Admin\nDESCRIPTION: Example of using the @display decorator with dropdown=True to create dropdowns with custom HTML content in the admin changelist. This approach allows for rendering complex layouts inside the dropdown.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/decorators/display.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass UserAdmin(ModelAdmin):\n    list_display = [\n        \"display_dropdown\",\n    ]\n\n    @display(description=_(\"Status\"), dropdown=True)\n    def display_dropdown(self, obj):\n        return {\n            \"title\": \"Custom dropdown title\",\n            \"content\": \"template content\",\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Stacked and Tabular Inlines in Django Unfold\nDESCRIPTION: Demonstrates how to create custom inline classes using Unfold's StackedInline and TabularInline instead of Django's native inlines. The example shows implementation with User model and registration with ModelAdmin.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/inlines/introduction.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom django.contrib.auth.models import User\nfrom unfold.admin import StackedInline, TabularInline\n\n\nclass MyStackedInline(StackedInline):\n    model = User\n\n\nclass MyTabularInline(TabularInline):\n    model = User\n\n\n@admin.register(User)\nclass UserAdmin(ModelAdmin):\n    inlines = [MyStackedInline, MyTabularInline]\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs in Templates with Django Unfold Template Tags\nDESCRIPTION: Shows how to implement tabs directly in HTML templates using Django Unfold's template tags. This approach provides flexibility when building custom templates that need tabbed interfaces.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% load unfold %}\n\n{% tabs %}\n    {% tab \"First tab\" %}\n        First tab content\n    {% endtab %}\n    {% tab \"Second tab\" %}\n        Second tab content\n    {% endtab %}\n{% endtabs %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sections for Expandable Rows in Django Unfold Admin\nDESCRIPTION: This snippet demonstrates how to set up custom table and template sections for expandable rows in a Django Unfold ModelAdmin. It includes examples of TableSection and TemplateSection implementations.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/sections/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unfold.admin import ModelAdmin\nfrom unfold.sections import TableSection, TemplateSection\n\nfrom .models import SomeModel\n\n# Table for related records\nclass CustomTableSection(TableSection):\n    verbose_name = _(\"Table title\")  # Displays custom table title\n    height = 300  # Force the table height. Ideal for large amount of records\n    related_name = \"related_name_set\"  # Related model field name\n    fields = [\"pk\", \"title\", \"custom_field\"]  # Fields from related model\n\n    # Custom field\n    def custom_field(self, instance):\n        return instance.pk\n\n# Simple template with custom content\nclass CardSection(TemplateSection):\n    template_name = \"your_app/some_template.html\"\n\n\n@admin.register(SomeModel)\nclass SomeAdmin(ModelAdmin):\n    list_sections = [\n        CardSection,\n        CustomTableSection,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing All Values Checkbox Filter in Django Unfold Admin\nDESCRIPTION: Implementation of AllValuesCheckboxFilter that automatically displays all distinct values from a database column as checkboxes, allowing multiple selections.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/checkbox-radio.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom unfold.contrib.filters.admin import AllValuesCheckboxFilter\n\n\nclass SampleModelAdmin(ModelAdmin):\n    list_filter = [\n        (\"option\", AllValuesCheckboxFilter)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Changeform Actions in Django Unfold ModelAdmin\nDESCRIPTION: Example of creating a custom changeform action in Django Unfold admin interface. Shows how to register an action with custom attributes, permission checks, and URL routing. The example uses the User model to demonstrate blocking a user through a custom action.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/actions/changeform.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib.admin import register\nfrom django.contrib.auth.models import User\nfrom django.shortcuts import redirect\nfrom django.urls import reverse_lazy\nfrom django.utils.translation import gettext_lazy as _\nfrom django.http import HttpRequest\nfrom unfold.admin import ModelAdmin\nfrom unfold.decorators import action\n\n\n@register(User)\nclass UserAdmin(ModelAdmin):\n    actions_detail = [\"changeform_action\"]\n\n    @action(\n        description=_(\"Changeform action\"),\n        url_path=\"changeform-action\",\n        attrs={\"target\": \"_blank\"},\n        permissions=[\"changeform_action\"]\n    )\n    def changeform_action(self, request: HttpRequest, object_id: int):\n        user = User.objects.get(pk=object_id)\n        user.block()\n\n        return redirect(\n            reverse_lazy(\"admin:users_user_change\", args=(object_id,))\n        )\n\n\n    def has_changeform_action_permission(self, request: HttpRequest, object_id: Union[str, int]):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Admin View in Django Unfold\nDESCRIPTION: Shows how to create a custom admin view by extending UnfoldModelAdminViewMixin and registering it with a ModelAdmin class. The code demonstrates setting up required properties like title and permissions, and configuring custom URL paths.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/pages/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.urls import path\nfrom django.views.generic import TemplateView\n\nfrom unfold.admin import ModelAdmin\nfrom unfold.views import UnfoldModelAdminViewMixin\n\nfrom .models import MyModel\n\n\nclass MyClassBasedView(UnfoldModelAdminViewMixin, TemplateView):\n    title = \"Custom Title\"  # required: custom page header title\n    permission_required = () # required: tuple of permissions\n    template_name = \"some/template/path.html\"\n\n\n@admin.register(MyModel)\nclass CustomAdmin(ModelAdmin):\n    def get_urls(self):\n        # IMPORTANT: model_admin is required\n        custom_view = self.admin_site.admin_view(\n            MyClassBasedView.as_view(model_admin=self)\n        )\n\n        return super().get_urls() + [\n            path(\n                \"custom-url-path\", custom_view, name=\"custom_name\"\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Text Filters in Django Unfold Admin\nDESCRIPTION: This snippet demonstrates how to create a custom text filter and apply both FieldTextFilter and custom TextFilter to a Django admin model. It includes importing necessary modules, defining a custom filter class, and registering the admin model with the filters.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/text.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.contrib.auth.models import User\nfrom django.core.validators import EMPTY_VALUES\nfrom django.utils.translation import gettext_lazy as _\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.filters.admin import TextFilter, FieldTextFilter\n\nclass CustomTextFilter(TextFilter):\n    title = _(\"Custom filter\")\n    parameter_name = \"query_param_in_uri\"\n\n    def queryset(self, request, queryset):\n        if self.value() not in EMPTY_VALUES:\n            # Here write custom query\n            return queryset.filter(your_field=self.value())\n\n        return queryset\n\n\n@admin.register(User)\nclass MyAdmin(ModelAdmin):\n    list_filter_submit = True  # Submit button at the bottom of the filter\n    list_filter = [\n        (\"model_charfield\", FieldTextFilter),\n        CustomTextFilter\n    ]\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Component Class in Django Unfold\nDESCRIPTION: This code demonstrates how to create and register a custom component class in Django Unfold by extending BaseComponent and using the @register_component decorator. The component implements get_context_data() to process and prepare data before rendering.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/component_class.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom unfold.components import BaseComponent, register_component\n\n\n@register_component\nclass MyComponent(BaseComponent):\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context.update({\n            \"data\": DATA\n        })\n        return context\n```\n\n----------------------------------------\n\nTITLE: Basic Component Nesting in Unfold\nDESCRIPTION: Demonstrates how to nest components in Unfold using the component template tag. This example shows a card component with a title component nested inside it, all within a flex container.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/introduction.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% load unfold %}\n\n<div class=\"flex flex-col\">\n    {% component \"unfold/components/card.html\" %}\n        {% component \"unfold/components/title.html\" %}\n            Card Title\n        {% endcomponent %}\n    {% endcomponent %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric Filters in Django Unfold Admin\nDESCRIPTION: Example configuration showing different types of numeric filters in Django Unfold admin. Demonstrates setting up single numeric filters, range filters, slider filters, and custom filter implementations with specific attributes. Includes configuration for filter submission button and queryset annotation.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/numeric.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.contrib.auth.models import User\n\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.filters.admin import (\n    RangeNumericListFilter,\n    RangeNumericFilter,\n    SingleNumericFilter,\n    SliderNumericFilter,\n)\n\n\nclass CustomSliderNumericFilter(SliderNumericFilter):\n    MAX_DECIMALS = 2\n    STEP = 10\n\n\nclass CustomRangeNumericListFilter(RangeNumericListFilter):\n    parameter_name = \"items_count\"\n    title = \"items\"\n\n\n@admin.register(User)\nclass YourModelAdmin(ModelAdmin):\n    list_filter_submit = True  # Submit button at the bottom of the filter\n    list_filter = (\n        (\"field_A\", SingleNumericFilter),  # Numeric single field search, __gte lookup\n        (\"field_B\", RangeNumericFilter),  # Numeric range search, __gte and __lte lookup\n        (\"field_C\", SliderNumericFilter),  # Numeric range filter but with slider\n        (\"field_D\", CustomSliderNumericFilter),  # Numeric filter with custom attributes\n        CustomRangeNumericListFilter,  # Numeric range search not restricted to a model field\n    )\n\n    def get_queryset(self, request):\n        return super().get_queryset().annotate(items_count=Count(\"item\", distinct=True))\n```\n\n----------------------------------------\n\nTITLE: Configuring RangeDateFilter and RangeDateTimeFilter in Django Unfold ModelAdmin\nDESCRIPTION: This snippet shows how to set up date and datetime range filters in a Django Unfold ModelAdmin class. It demonstrates importing necessary modules, registering the User model, and configuring list filters with RangeDateFilter and RangeDateTimeFilter.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/datetime.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom django.contrib.auth.models import User\n\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.filters.admin import RangeDateFilter, RangeDateTimeFilter\n\n\n@admin.register(User)\nclass YourModelAdmin(ModelAdmin):\n    list_filter_submit = True  # Submit button at the bottom of the filter\n    list_filter = (\n        (\"field_E\", RangeDateFilter),  # Date filter\n        (\"field_F\", RangeDateTimeFilter),  # Datetime filter\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Admin FormView\nDESCRIPTION: Implementation of a custom admin view that combines Unfold's admin features with Django's FormView.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/crispy-forms.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# views.py\n\nfrom django.views.generic import FormView\n\nfrom unfold.views import UnfoldModelAdminViewMixin\n\nfrom .forms import CustomForm\n\nclass MyClassBasedView(UnfoldModelAdminViewMixin, FormView):\n    title = \"Custom Title\"\n    form_class = CustomForm\n    success_url = reverse_lazy(\"admin:index\")\n    permission_required = (\n        \"app_name.add_model_name\",\n        \"app_name.change_model_name\",\n    )\n    template_name = \"app_name/some_template.html\"\n```\n\n----------------------------------------\n\nTITLE: Defining Table Data Structure in Python\nDESCRIPTION: Example of a dashboard callback function that prepares data for the Table component with a specific structure containing headers and rows.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/table.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef dashboard_callback(request):\n    return {\n        \"table_data\": {\n            \"headers\": [\"col 1\", \"col 2\"],\n            \"rows\": [\n                [\"a\", \"b\"],\n                [\"c\", \"d\"],\n            ]\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Conditional Address Fields in Django\nDESCRIPTION: Implementation of a custom User model extending AbstractUser with additional address-related fields that can be conditionally displayed. The model includes boolean flag for different address and related address fields.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/conditional-fields.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom django.contrib.auth.models import AbstractUser\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass User(AbstractUser):\n    different_address = models.BooleanField(_(\"different address\"), default=False)\n    country = models.CharField(_(\"city\"), max_length=255, null=True, blank=True, default=None)\n    city = models.CharField(_(\"city\"), max_length=255, null=True, blank=True, default=None)\n    address = models.CharField(_(\"address\"), max_length=255, null=True, blank=True, default=None)\n\n    class Meta:\n        db_table = \"users\"\n        verbose_name = _(\"user\")\n        verbose_name_plural = _(\"users\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Tabs in Django Unfold Admin\nDESCRIPTION: This code snippet demonstrates how to group inline forms into tabs in Django Unfold admin by setting the 'tab' attribute to True in inline classes. This works for both TabularInline and StackedInline classes imported from unfold.admin. The feature is specifically designed for changeform pages.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/inline.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib.auth.models import User\nfrom unfold.admin import StackedInline, TabularInline\n\n\nclass MyTabularInline(TabularInline):\n    model = User\n    tab = True\n\nclass MyStackedInline(StackedInline):\n    model = User\n    tab = True\n```\n\n----------------------------------------\n\nTITLE: Using ExportActionModelAdmin with Unfold\nDESCRIPTION: Example of implementing ExportActionModelAdmin from unfold.contrib.import_export.admin which adds appropriate CSS classes to the action form. Note that this class is no longer needed in django-import-export version 4.x and above.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/integrations/django-import-export.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadmin.py\n\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.import_export.admin import ExportActionModelAdmin\n\nclass ExampleAdmin(ModelAdmin, ExportActionModelAdmin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Cohort Component Data Structure in Python\nDESCRIPTION: Illustrates the required data structure format for the cohort component, including headers with titles and subtitles, rows with header information, and column cells with values and optional subtitles.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/cohort.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDATA = {\n    \"headers\": [\n        # Col 1 header\n        {\n            \"title\": \"Title\",\n            \"subtitle\": \"something\",  # Optional\n        },\n    ],\n    \"rows\": [\n        # First row\n        {\n            # Row heading\n            \"header\": {\n                \"title\": \"Title\",\n                \"subtitle\": \"something\",  # Optional\n            },\n            \"cols\": [\n                # Col 1 cell value\n                {\n                    \"value\": \"1\",\n                    \"subtitle\": \"something\",  # Optional\n                }\n            ]\n        },\n        # Second row\n        {\n            # Row heading\n            \"header\": {\n                \"title\": \"Title\",\n                \"subtitle\": \"something\",  # Optional\n            },\n            \"cols\": [\n                # Col 1 cell value\n                {\n                    \"value\": \"1\",\n                }\n            ]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Actions in Django Unfold ModelAdmin\nDESCRIPTION: This code snippet demonstrates how to configure dropdown actions in a Django Unfold ModelAdmin class. It shows how to define regular actions and group multiple actions into a dropdown menu with an optional icon.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/actions/dropdown-actions.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib.auth.models import User\nfrom unfold.admin import ModelAdmin\n\n\n@register(User)\nclass UserAdmin(ModelAdmin):\n    actions_list = [\"action1\", \"action2\", {\n        \"title\": \"Dropdown action\",\n        \"icon\": \"person\",  # Optional, will display icon in the dropdown title\n        \"items\": [\n            \"action3\", \"action4\",\n        ]\n    }]\n```\n\n----------------------------------------\n\nTITLE: Implementing InfinitePaginator in Django Unfold ModelAdmin\nDESCRIPTION: Shows how to configure a ModelAdmin class to use InfinitePaginator for efficient pagination. The implementation disables full result count and uses the custom paginator to improve performance with large datasets.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/paginator.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unfold.admin import ModelAdmin\nfrom unfold.paginator import InfinitePaginator\n\n\nclass YourAdmin(ModelAdmin):\n    paginator = InfinitePaginator\n    show_full_result_count = False\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom UnfoldAdminSite in Python\nDESCRIPTION: Shows how to create a custom admin site by subclassing UnfoldAdminSite and instantiating it with a custom name.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/sites/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# sites.py\n\nfrom django.contrib import admin\nfrom unfold.sites import UnfoldAdminSite\n\nclass CustomAdminSite(UnfoldAdminSite):\n    pass\n\n\ncustom_admin_site = CustomAdminSite(name=\"custom_admin_site\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Import-Export with Unfold Admin\nDESCRIPTION: Example of how to properly configure a ModelAdmin class that integrates Unfold's styling with django-import-export functionality. It shows how to set the import_form_class and export_form_class to use Unfold's custom form implementations.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/integrations/django-import-export.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom unfold.admin import ModelAdmin\nfrom import_export.admin import ImportExportModelAdmin\nfrom unfold.contrib.import_export.forms import ExportForm, ImportForm, SelectableFieldsExportForm\n\nclass ExampleAdmin(ModelAdmin, ImportExportModelAdmin):\n    import_form_class = ImportForm\n    export_form_class = ExportForm\n    # export_form_class = SelectableFieldsExportForm\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Filter Layout in Django Admin\nDESCRIPTION: Shows how to create a custom filter class that extends ChoicesFieldListFilter to enable horizontal layout for filter choices. The example includes registering the filter with a User model in the admin interface.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/horizontal.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.admin.filters import ChoicesFieldListFilter\n\nfrom unfold.admin import ModelAdmin\n\n\nUser = get_user_model()\n\nclass HorizontalChoicesFieldListFilter(ChoicesFieldListFilter):\n    horizontal = True # Enable horizontal layout\n\n\n@admin.register(User)\nclass UserAdmin(ModelAdmin):\n    list_filter = (\n        [\"other_model_field\", HorizontalChoicesFieldListFilter],\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Django HTML Template\nDESCRIPTION: This snippet demonstrates how to use the Button component in a Django HTML template. It shows loading necessary tags, setting up URL and translation variables, and using the component with a link.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/button.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% load i18n unfold %}\n\n{% url \"admin:index\" as dashboard_link %}\n{% trans \"Button title\" as button_title %}\n\n{% component \"unfold/components/button.html\" with href=dashboard_link %}\n    {{ button_title }}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL paths for Django Unfold admin\nDESCRIPTION: This snippet demonstrates the minimal admin configuration for adding Unfold to URL paths in a Django project. It uses the default admin site URLs.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/installation/quickstart.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    # Other URL paths\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Lists in Django Unfold Admin List Display\nDESCRIPTION: Example of using the @display decorator with dropdown=True to create clickable dropdowns in the admin changelist. This example shows how to configure a dropdown with a list of selectable items with optional styling.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/decorators/display.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserAdmin(ModelAdmin):\n    list_display = [\n        \"display_dropdown\",\n    ]\n\n    @display(description=_(\"Status\"), dropdown=True)\n    def display_dropdown(self, obj):\n        return {\n            # Clickable title displayed in the column\n            \"title\": \"Custom dropdown title\",\n            # Striped design for the items\n            \"striped\": True,  # Optional\n            # Dropdown height. Will display scrollbar for longer content\n            \"height\": 200,  # Optional\n            # Dropdown width\n            \"width\": 240,  # Optional\n            \"items\": [\n                {\n                    \"title\": \"First title\",\n                    \"link\": \"#\"  # Optional\n                },\n                {\n                    \"title\": \"Second title\",\n                    \"link\": \"#\"  # Optional\n                },\n            ]\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter Class in Django Unfold\nDESCRIPTION: This snippet demonstrates how to create a custom filter class for Django Unfold admin. It includes the implementation of a SimpleListFilter subclass with methods to specify the filter title, parameter name, lookup options, and queryset filtering.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.db.models import Count\n\nclass ArticleCountFilter(admin.SimpleListFilter):\n    title = \"Number of articles\"\n    parameter_name = \"article_count\"\n\n    def lookups(self, request, model_admin):\n        return (\n            (\"0\", \"No articles\"),\n            (\"1-2\", \"1-2 articles\"),\n            (\"3+\", \"3 or more\"),\n        )\n\n    def queryset(self, request, queryset):\n        if self.value() == \"0\":\n            return queryset.annotate(article_count=Count(\"articles\")).filter(article_count=0)\n        if self.value() == \"1-2\":\n            return queryset.annotate(article_count=Count(\"articles\")).filter(article_count__in=[1, 2])\n        if self.value() == \"3+\":\n            return queryset.annotate(article_count=Count(\"articles\")).filter(article_count__gte=3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Changelist Tabs in Django Unfold Settings\nDESCRIPTION: This code snippet demonstrates how to set up custom tab navigation in Django Unfold's changelist views. It shows how to specify which models will display tab navigation, define custom tab items with titles and links, and implement permission-based access control through callback functions.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/changelist.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nfrom django.urls import reverse_lazy\nfrom django.utils.translation import gettext_lazy as _\n\nUNFOLD = {\n    \"TABS\": [\n        {\n            # Which models are going to display tab navigation\n            \"models\": [\n                \"app_label.model_name_in_lowercase\",\n            ],\n            # List of tab items\n            \"items\": [\n                {\n                    \"title\": _(\"Your custom title\"),\n                    \"link\": reverse_lazy(\"admin:app_label_model_name_changelist\"),\n                    \"permission\": \"sample_app.permission_callback\",\n                },\n                {\n                    \"title\": _(\"Another custom title\"),\n                    \"link\": reverse_lazy(\"admin:app_label_another_model_name_changelist\"),\n                    \"permission\": \"sample_app.permission_callback\",\n                },\n            ],\n        },\n    ],\n}\n\n# Permission callback for tab item\ndef permission_callback(request):\n    return request.user.has_perm(\"sample_app.change_model\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Tabs in Django Unfold Settings\nDESCRIPTION: Sets up Django Unfold to use a custom callback function for dynamic tab generation. The callback function is specified as an importable string path that will be called with the HttpRequest object as an argument.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/dynamic.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nUNFOLD = {\n    \"TABS\": \"your_project.admin.tabs_callback\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cohort Component with Component Class in HTML Template\nDESCRIPTION: Shows how to include the cohort component in a Django template using the component_class parameter, which references a Python class that will prepare the data for the cohort visualization.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/cohort.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% load unfold %}\n\n{% component \"unfold/components/chart/cohort.html\" with component_class=\"MyCohortComponent\" %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tab Navigation Callback Function\nDESCRIPTION: Demonstrates how to create a custom callback function that builds a tab navigation structure. This function uses the request object to dynamically generate tabs with custom titles, links, and active states for different admin views.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/dynamic.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.http import HttpRequest\n\n\ndef tabs_callback(request: HttpRequest) -> list[dict[str, Any]]:\n    return [\n        {\n            # Unique tab identifier to render tabs in custom templates\n            \"page\": \"custom_page\",\n\n            # Applies for the changeform view\n            \"models\": [\n                {\n                    \"name\": \"app_label.model_name_in_lowercase\",\n                    \"detail\": True\n                },\n            ],\n            \"items\": [\n                {\n                    \"title\": _(\"Your custom title\"),\n                    \"link\": reverse_lazy(\"admin:app_label_model_name_changelist\"),\n                    \"active\": True # Configure active tab\n                    # \"active\": lambda request: True\n                },\n                {\n                    \"title\": _(\"Inline tab\"),\n                    \"link\": reverse_lazy(\"admin:app_label_model_name_changelist\"),\n                    \"inline\": \"corresponding-fragment-url\"\n                },\n            ],\n        },\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind with Unfold Color Theme\nDESCRIPTION: This configuration file sets up Tailwind CSS to match Django Unfold's theme colors by mapping Tailwind classes to CSS variables defined by Unfold. It enables dark mode support and specifies content paths for scanning Tailwind classes.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/styles-scripts/customizing-tailwind.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nmodule.exports = {\n  // Support dark mode classes\n  darkMode: \"class\",\n  // Your project's files to scan for Tailwind classes\n  content: [\"./your_project/**/*.{html,py,js}\"],\n  theme: {\n    extend: {\n      // Colors that match with UNFOLD[\"COLORS\"] settings\n      colors: {\n        base: {\n          50: \"rgb(var(--color-base-50) / <alpha-value>)\",\n          100: \"rgb(var(--color-base-100) / <alpha-value>)\",\n          200: \"rgb(var(--color-base-200) / <alpha-value>)\",\n          300: \"rgb(var(--color-base-300) / <alpha-value>)\",\n          400: \"rgb(var(--color-base-400) / <alpha-value>)\",\n          500: \"rgb(var(--color-base-500) / <alpha-value>)\",\n          600: \"rgb(var(--color-base-600) / <alpha-value>)\",\n          700: \"rgb(var(--color-base-700) / <alpha-value>)\",\n          800: \"rgb(var(--color-base-800) / <alpha-value>)\",\n          900: \"rgb(var(--color-base-900) / <alpha-value>)\",\n          950: \"rgb(var(--color-base-950) / <alpha-value>)\",\n        },\n        primary: {\n          50: \"rgb(var(--color-primary-50) / <alpha-value>)\",\n          100: \"rgb(var(--color-primary-100) / <alpha-value>)\",\n          200: \"rgb(var(--color-primary-200) / <alpha-value>)\",\n          300: \"rgb(var(--color-primary-300) / <alpha-value>)\",\n          400: \"rgb(var(--color-primary-400) / <alpha-value>)\",\n          500: \"rgb(var(--color-primary-500) / <alpha-value>)\",\n          600: \"rgb(var(--color-primary-600) / <alpha-value>)\",\n          700: \"rgb(var(--color-primary-700) / <alpha-value>)\",\n          800: \"rgb(var(--color-primary-800) / <alpha-value>)\",\n          900: \"rgb(var(--color-primary-900) / <alpha-value>)\",\n          950: \"rgb(var(--color-primary-950) / <alpha-value>)\",\n        },\n        font: {\n          \"subtle-light\": \"rgb(var(--color-font-subtle-light) / <alpha-value>)\",\n          \"subtle-dark\": \"rgb(var(--color-font-subtle-dark) / <alpha-value>)\",\n          \"default-light\": \"rgb(var(--color-font-default-light) / <alpha-value>)\",\n          \"default-dark\": \"rgb(var(--color-font-default-dark) / <alpha-value>)\",\n          \"important-light\": \"rgb(var(--color-font-important-light) / <alpha-value>)\",\n          \"important-dark\": \"rgb(var(--color-font-important-dark) / <alpha-value>)\",\n        }\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating WysiwygWidget with Django Admin Model\nDESCRIPTION: This example demonstrates how to override TextField widgets with WysiwygWidget in a specific admin class. It uses formfield_overrides to replace all TextField instances with the WYSIWYG editor. Note that the widget currently doesn't support file uploads directly.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/widgets/wysiwyg.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.db import models\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.forms.widgets import WysiwygWidget\n\n\n@admin.register(MyModel)\nclass CustomAdminClass(ModelAdmin):\n    formfield_overrides = {\n        models.TextField: {\n            \"widget\": WysiwygWidget,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Callback Function for Custom Variables\nDESCRIPTION: Defines a callback function that adds custom variables to the dashboard template context. This allows passing dynamic data from the database to the dashboard template.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/dashboard/index.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# views.py\n\ndef dashboard_callback(request, context):\n    context.update({\n        \"custom_variable\": \"value\",\n    })\n\n    return context\n```\n\n----------------------------------------\n\nTITLE: Defining Tracker Component Data Structure\nDESCRIPTION: Shows the expected data structure for the tracker component, including color and tooltip configurations for each data point.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/tracker.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDATA = [\n    {\n        \"color\": \"bg-primary-400 dark:bg-primary-700\",\n        \"tooltip\": \"Custom value 1\",\n    },\n    {\n        \"color\": \"bg-primary-400 dark:bg-primary-700\",\n        \"tooltip\": \"Custom value 2\",\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing ArrayWidget in Django Admin\nDESCRIPTION: Complete example of implementing ArrayWidget in a Django admin class, including choice field configuration and form customization. Shows how to override ArrayField widgets and set up dropdown choices.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/widgets/array.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom django.contrib.postgres.fields import ArrayField\nfrom django.db.models import TextChoices\nfrom django.utils.translation import gettext_lazy as _\n\nfrom unfold.admin import ModelAdmin\nfrom unfold.contrib.forms.widgets import ArrayWidget\n\n\nclass SomeChoices(TextChoices):\n    OPTION_1 = \"OPTION_1\", _(\"Option 1\")\n    OPTION_2 = \"OPTION_2\", _(\"Option 2\")\n\n\n@admin.register(MyModel)\nclass CustomAdminClass(ModelAdmin):\n    formfield_overrides = {\n        ArrayField: {\n            \"widget\": ArrayWidget,\n        }\n    }\n\n    # If you need to provide choices for the widget, you can do it in the get_form method.\n    def get_form(self, request, obj=None, change=False, **kwargs):\n        form = super().get_form(request, obj, change, **kwargs)\n        form.base_fields[\"array_field\"].widget = ArrayWidget(choices=SomeChoices)\n        return form\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS and JavaScript in Django Unfold Settings\nDESCRIPTION: This snippet demonstrates how to add custom CSS and JavaScript files to the Django Unfold admin interface using the UNFOLD configuration in settings.py. It shows how to specify file paths for both development and production environments.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/styles-scripts/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nUNFOLD = {\n    \"STYLES\": [\n        \"https://cdn.example.com/css/custom.min.css\",  # Production\n        \"css/custom.css\",  # Development\n    ],\n    \"SCRIPTS\": [\n        \"https://cdn.example.com/js/custom.min.js\",  # Production\n        \"js/custom.js\",  # Development\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Dropdown Navigation in Django Unfold\nDESCRIPTION: This code snippet demonstrates how to set up the SITE_DROPDOWN option in the UNFOLD configuration dictionary. The dropdown consists of navigation items with icons, titles, and links that appear when clicking on the site header in the sidebar.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/site-dropdown.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nfrom django.urls import reverse_lazy\nfrom django.utils.translation import gettext_lazy as _\n\n\nUNFOLD = {\n    \"SITE_DROPDOWN\": [\n        {\n            \"icon\": \"diamond\",\n            \"title\": _(\"My site\"),\n            \"link\": \"https://example.com\",\n        },\n        {\n            \"icon\": \"diamond\",\n            \"title\": _(\"My site\"),\n            \"link\": reverse_lazy(\"admin:index\"),\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Styles and Scripts in Django Unfold Settings\nDESCRIPTION: This example shows how to configure the UNFOLD dictionary in settings.py to load custom CSS and JavaScript files using lambda functions. The lambda functions return paths to static files, ensuring they'll be properly included in your admin interface.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/styles-scripts/loading-files.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nfrom django.templatetags.static import static\n\nUNFOLD = {\n    \"STYLES\": [\n        lambda request: static(\"css/styles.css\"),\n    ],\n    \"SCRIPTS\": [\n        lambda request: static(\"js/scripts.js\"),\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Base HTML Template for Unfold Admin Dashboard\nDESCRIPTION: The base HTML template that extends Unfold's simple layout. This serves as the foundation for creating a custom admin dashboard with placeholders for branding, title, and custom content.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/dashboard/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% extends 'unfold/layouts/base_simple.html' %}\n\n{% load i18n %}\n\n{% block breadcrumbs %}{% endblock %}\n\n{% block title %}\n    {% if subtitle %}\n        {{ subtitle }} |\n    {% endif %}\n\n    {{ title }} | {{ site_title|default:_('Django site admin') }}\n{% endblock %}\n\n{% block branding %}\n    {% include \"unfold/helpers/site_branding.html\" %}\n{% endblock %}\n\n{% block content %}\n    Start creating your own Tailwind components here\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Radio Filter in Django Unfold Admin\nDESCRIPTION: Implementation of BooleanRadioFilter for boolean fields in Django admin. This filter displays Yes/No options as radio buttons with an additional 'All' option for clearing selection.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/checkbox-radio.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom unfold.contrib.filters.admin import BooleanRadioFilter\n\n\nclass SampleModelAdmin(ModelAdmin):\n    list_filter = [\n        (\"is_active\", BooleanRadioFilter)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using @display Decorator for Labels and Headers in Django Unfold\nDESCRIPTION: Example showing how to use the @display decorator to create status labels with different colors and two-line headings with optional images in Django Unfold admin interface.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/decorators/display.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.db.models import TextChoices\nfrom django.utils.translation import gettext_lazy as _\n\nfrom unfold.admin import ModelAdmin\nfrom unfold.decorators import display\n\n\nclass UserStatus(TextChoices):\n    ACTIVE = \"ACTIVE\", _(\"Active\")\n    PENDING = \"PENDING\", _(\"Pending\")\n    INACTIVE = \"INACTIVE\", _(\"Inactive\")\n    CANCELLED = \"CANCELLED\", _(\"Cancelled\")\n\n\nclass UserAdmin(ModelAdmin):\n    list_display = [\n        \"display_as_two_line_heading\",\n        \"show_status\",\n        \"show_status_with_custom_label\",\n    ]\n\n    @display(\n        description=_(\"Status\"),\n        ordering=\"status\",\n        label=True\n    )\n    def show_status_default_color(self, obj):\n        return obj.status\n\n    @display(\n        description=_(\"Status\"),\n        ordering=\"status\",\n        label={\n            UserStatus.ACTIVE: \"success\",  # green\n            UserStatus.PENDING: \"info\",  # blue\n            UserStatus.INACTIVE: \"warning\",  # orange\n            UserStatus.CANCELLED: \"danger\",  # red\n        },\n    )\n    def show_status_customized_color(self, obj):\n        return obj.status\n\n    @display(description=_(\"Status with label\"), ordering=\"status\", label=True)\n    def show_status_with_custom_label(self, obj):\n        return obj.status, obj.get_status_display()\n\n    @display(header=True)\n    def display_as_two_line_heading(self, obj):\n        \"\"\"\n        Third argument is short text which will appear as prefix in circle\n        \"\"\"\n        return [\n            \"First main heading\",\n            \"Smaller additional description\",  # Use None in case you don't need it\n            \"AB\",  # Short text which will appear in front of\n            # Image instead of initials. Initials are ignored if image is available\n            {\n                \"path\": \"some/path/picture.jpg\",\n                \"squared\": True, # Picture is displayed in square format, if empty circle\n                \"borderless\": True,  # Picture will be displayed without border\n                \"width\": 64, # Removes default width. Use together with height\n                \"height\": 48, # Removes default height. Use together with width\n            }\n        ]\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for WysiwygWidget in Django Settings\nDESCRIPTION: This snippet shows how to configure the required dependencies in your Django settings file. You need to include both 'unfold' and 'unfold.contrib.forms' in your INSTALLED_APPS list to use the WysiwygWidget.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/widgets/wysiwyg.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nINSTALLED_APPS = [\n    \"unfold\",\n    \"unfold.contrib.forms\",\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Radio Filter in Django Unfold Admin\nDESCRIPTION: Example of creating a custom radio filter by extending the RadioFilter base class. Shows how to define custom lookups and query logic for specialized filtering needs.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/checkbox-radio.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom unfold.contrib.filters.admin import RadioFilter\n\n\nclass CustomRadioFilter(RadioFilter):\n    title = _(\"Custom radio filter\")\n    parameter_name = \"query_param_in_uri\"\n\n    def lookups(self, request, model_admin):\n        return [\n            [\"option_1\", _(\"Option 1\")],\n            [\"option_2\", _(\"Option 2\")],\n        ]\n\n    def queryset(self, request, queryset):\n        if self.value() not in EMPTY_VALUES:\n            # Here write custom query\n            return queryset.filter(your_field=self.value())\n\n        return queryset\n```\n\n----------------------------------------\n\nTITLE: Configuring Sortable TabularInline in Django Unfold Admin\nDESCRIPTION: This code shows how to set up a sortable TabularInline class in Django Unfold admin. It demonstrates setting the ordering_field and hide_ordering_field properties to enable sorting functionality.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/inlines/sortable.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom unfold.admin import TabularInline\nfrom .models import User\n\n\n# This works for StackedInline as well\nclass MyInline(TabularInline):\n    model = User\n    ordering_field = \"weight\"\n    hide_ordering_field = True\n    list_display = [\"email\", \"weight\"]  # Weight is mandatory field\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for Crispy Forms\nDESCRIPTION: Required Django settings configuration to enable Crispy Forms and the Unfold template pack.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/crispy-forms.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    \"unfold\",\n    ...\n    \"crispy_forms\",\n    ...\n]\n```\n\nLANGUAGE: python\nCODE:\n```\nCRISPY_TEMPLATE_PACK = \"unfold_crispy\"\n\nCRISPY_ALLOWED_TEMPLATE_PACKS = [\"unfold_crispy\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cohort Component Class in Python\nDESCRIPTION: Shows how to create a component class that prepares data for the cohort component. The class inherits from BaseComponent and uses the register_component decorator to make it available in templates.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/cohort.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom unfold.components import BaseComponent, register_component\n\n@register_component\nclass MyCohortComponent(BaseComponent):\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context.update({\n            \"data\": DATA\n        })\n        return context\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Form with Crispy Forms Helper\nDESCRIPTION: Example of creating a custom form class with Crispy Forms FormHelper and Layout configuration.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/crispy-forms.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# forms.py\n\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Layout\n\nfrom django import forms\n\n\nclass CustomForm(forms.Form):\n    pass\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            \"field1\", \"field2\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Tracker Component with Component Class in Django Template\nDESCRIPTION: Shows how to implement the tracker component in a Django template using a component class for data preparation.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/tracker.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% load unfold %}\n\n{% component \"unfold/components/tracker.html\" with component_class=\"MyTrackerComponent\" %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Creating Admin Template with Crispy Forms\nDESCRIPTION: Template code showing how to render a Crispy Form in the Unfold admin interface with proper styling.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/crispy-forms.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% load crispy_forms_tags %}\n\n{% block extrahead %}\n    {{ block.super }}\n    <script src=\"{% url 'admin:jsi18n' %}\"></script>\n    {{ form.media }}\n{% endblock %}\n\n{% block content %}\n    {% crispy form \"unfold_crispy\" %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Attributes for Button Component in Python\nDESCRIPTION: This Python function demonstrates how to set up custom attributes for the Button component. It returns a dictionary with button title and custom attributes like 'disabled' and 'form'.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/button.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef dashboard_callback(request):\n    return {\n        \"button\": {\n            \"title\": \"Button title\",\n            \"attrs\":\n                \"disabled\": \"disabled\",\n                \"form\": \"form-id\",\n            },\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Directory Settings\nDESCRIPTION: Sets up the template directory in Django's settings.py to ensure custom templates can be found by the framework. This configuration is essential for the custom dashboard template to be recognized.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/dashboard/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / \"templates\"],  # Ensure this line is added\n        #....\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing TabbedTranslationAdmin with Unfold ModelAdmin in Python\nDESCRIPTION: This snippet demonstrates how to create an admin class that combines Unfold's ModelAdmin with django-modeltranslation's TabbedTranslationAdmin for tabbed navigation with custom styling.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/integrations/django-modeltranslation.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nfrom modeltranslation.admin import TabbedTranslationAdmin\nfrom unfold.admin import ModelAdmin\n\nfrom .models import MyModel\n\n\n@admin.register(MyModel)\nclass MyModelAdmin(ModelAdmin, TabbedTranslationAdmin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Unfold Dashboard Callback in Settings\nDESCRIPTION: Registers the dashboard callback function in the Django settings. This configuration tells Unfold which function to use for providing custom variables to the dashboard template.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/dashboard/index.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nUNFOLD = {\n    \"DASHBOARD_CALLBACK\": \"app.views.dashboard_callback\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tabs Directly in Fieldsets in Django Unfold\nDESCRIPTION: Demonstrates how to implement tabs directly within the fieldsets attribute of a ModelAdmin class. This method allows for more granular control over the tab structure and fields included in each tab.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom unfold.admin import ModelAdmin\n\n\n@admin.register(Article)\nclass ArticleAdmin(ModelAdmin):\n    # Tab name, fields, fieldsets for every tab\n    fieldsets = (\n        (\n            \"Content\",\n            {\n                \"fields\": (\n                    \"title\",\n                    \"introduction\",\n                    \"content\",\n                ),\n                \"classes\": (\"tab\",),\n            },\n        ),\n        (\n            \"SEO\",\n            {\n                \"fields\": (\n                    \"seo_title\",\n                    \"seo_description\",\n                ),\n                \"classes\": (\"tab\",),\n            },\n        ),\n        (\n            \"Settings\",\n            {\n                \"fields\": (\n                    \"is_published\",\n                    \"published_at\",\n                ),\n                \"classes\": (\"tab\",),\n            },\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Pretty JSON Encoder in Django\nDESCRIPTION: Defines a PrettyJSONEncoder class that extends JSON's JSONEncoder to format JSON with proper indentation and sorted keys. This encoder ensures JSON is formatted when saved to the database.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/fields/json.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# encoders.py\n\nimport json\n\n\nclass PrettyJSONEncoder(json.JSONEncoder):\n    def __init__(self, *args, indent, sort_keys, **kwargs):\n        super().__init__(*args, indent=4, sort_keys=True, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tracker Component Class in Python\nDESCRIPTION: Example of a component class that prepares data for the tracker component by extending BaseComponent and using the register_component decorator.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/tracker.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom unfold.components import BaseComponent, register_component\n\n\n@register_component\nclass MyTrackerComponent(BaseComponent):\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context.update({\n            \"data\": DATA\n        })\n        return context\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Formatted JSONField in Django\nDESCRIPTION: Creates a Django model with a JSONField that uses the PrettyJSONEncoder to ensure data is stored with proper formatting in the database.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/fields/json.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass CustomModel(models.Model):\n    data = models.JSONField(_(\"data\"), null=True, blank=True, encoder=PrettyJSONEncoder)\n```\n\n----------------------------------------\n\nTITLE: Implementing Related Field Checkbox Filter in Django Unfold Admin\nDESCRIPTION: Example of using RelatedCheckboxFilter for foreign key relationships. This filter displays related objects as selectable checkboxes for multiple simultaneous selections.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/checkbox-radio.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom unfold.contrib.filters.admin import RelatedCheckboxFilter\n\n\nclass SampleModelAdmin(ModelAdmin):\n    list_filter = [\n        (\"country\", RelatedCheckboxFilter)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Registering a Model with JSONField in Django Unfold Admin\nDESCRIPTION: Registers the CustomModel in the Django admin interface using Unfold's ModelAdmin. Sets the 'data' JSONField as a readonly field to enable formatting and syntax highlighting.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/fields/json.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom unfold.admin import ModelAdmin\n\n\n@admin.register(CustomModel)\nclass CustomAdminClass(ModelAdmin):\n    readonly_fields = [\"data\"]\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Styles in Django Unfold\nDESCRIPTION: This code snippet shows how to override default styles in Django Unfold by creating a custom CSS file and adding CSS rules. It demonstrates changing the primary color and adjusting the sidebar width.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/styles-scripts/index.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n    --primary-color: #ff0000;\n}\n\n.sidebar {\n    width: 400px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Unfold Filters in Settings\nDESCRIPTION: Setup instructions for adding Unfold filters to Django project settings. The filters application must be added to INSTALLED_APPS after the main unfold application to enable custom filtering functionality.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/introduction.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nINSTALLED_APPS = [\n    \"unfold\",\n    \"unfold.contrib.filters\",\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Tracker Component with Direct Data in Django Template\nDESCRIPTION: Demonstrates how to implement the tracker component by passing data directly in the template without using a component class.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/tracker.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load unfold %}\n\n{% component \"unfold/components/tracker.html\" with data=my_data_variable %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filter in Django Admin ModelAdmin\nDESCRIPTION: This code snippet shows how to register a custom filter in the Django admin ModelAdmin class. It demonstrates the use of the list_filter attribute to include the custom ArticleCountFilter.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/filters/index.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    list_filter = (ArticleCountFilter,)\n```\n\n----------------------------------------\n\nTITLE: Custom Admin Template with Django Unfold Components\nDESCRIPTION: Template example showing how to extend the Unfold base template and implement custom breadcrumbs and tab lists. Demonstrates the proper structure for creating a custom admin page interface with navigation elements.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/pages/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"unfold/layouts/base.html\" %}\n\n{% load admin_urls i18n unfold %}\n\n{% block breadcrumbs %}{% if not is_popup %}\n    <div class=\"px-4 lg:px-8\">\n        <div class=\"container mb-6 mx-auto -my-3 lg:mb-12\">\n            <ul class=\"flex flex-wrap\">\n                {% url 'admin:index' as link %}\n                {% trans 'Home' as name %}\n                {% include 'unfold/helpers/breadcrumb_item.html' with link=link name=name %}\n\n                {% url 'admin:formula_driver_changelist' as link %}\n                {% trans 'Drivers' as name %}\n                {% include 'unfold/helpers/breadcrumb_item.html' with link=link name=name %}\n\n                {% trans 'Custom page' as name %}\n                {% include 'unfold/helpers/breadcrumb_item.html' with name=name %}\n            </ul>\n        </div>\n    </div>\n{% endif %}{% endblock %}\n\n{% block content %}\n    {% tab_list \"drivers\" %}\n\n    {% trans \"Custom page\" %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Django Celery Beat Admin Classes with Unfold\nDESCRIPTION: Code to unregister default django-celery-beat admin classes and re-register them with Unfold's ModelAdmin. Includes custom widget implementations and form modifications for proper UI integration.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/integrations/django-celery-beat.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\nfrom django.contrib import admin\nfrom unfold.admin import ModelAdmin\n\nfrom django_celery_beat.models import (\n    ClockedSchedule,\n    CrontabSchedule,\n    IntervalSchedule,\n    PeriodicTask,\n    SolarSchedule,\n)\nfrom django_celery_beat.admin import ClockedScheduleAdmin as BaseClockedScheduleAdmin\nfrom django_celery_beat.admin import CrontabScheduleAdmin as BaseCrontabScheduleAdmin\nfrom django_celery_beat.admin import PeriodicTaskAdmin as BasePeriodicTaskAdmin\nfrom django_celery_beat.admin import PeriodicTaskForm, TaskSelectWidget\n\nadmin.site.unregister(PeriodicTask)\nadmin.site.unregister(IntervalSchedule)\nadmin.site.unregister(CrontabSchedule)\nadmin.site.unregister(SolarSchedule)\nadmin.site.unregister(ClockedSchedule)\n\n\nclass UnfoldTaskSelectWidget(UnfoldAdminSelectWidget, TaskSelectWidget):\n    pass\n\n\nclass UnfoldPeriodicTaskForm(PeriodicTaskForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields[\"task\"].widget = UnfoldAdminTextInputWidget()\n        self.fields[\"regtask\"].widget = UnfoldTaskSelectWidget()\n\n\n@admin.register(PeriodicTask)\nclass PeriodicTaskAdmin(BasePeriodicTaskAdmin, ModelAdmin):\n    form = UnfoldPeriodicTaskForm\n\n\n@admin.register(IntervalSchedule)\nclass IntervalScheduleAdmin(ModelAdmin):\n    pass\n\n\n@admin.register(CrontabSchedule)\nclass CrontabScheduleAdmin(BaseCrontabScheduleAdmin, ModelAdmin):\n    pass\n\n\n@admin.register(SolarSchedule)\nclass SolarScheduleAdmin(ModelAdmin):\n    pass\n\n@admin.register(ClockedSchedule)\nclass ClockedScheduleAdmin(BaseClockedScheduleAdmin, ModelAdmin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Attributes to Button Component in Django Template\nDESCRIPTION: This snippet shows how to apply custom attributes to a Button component in a Django template. It uses the 'unfold' tag and passes the 'attrs' parameter to the component.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/button.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% load unfold %}\n\n{% component \"unfold/components/button.html\" with attrs=button.attrs %}\n    {{ button.title }}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Adding Unfold Guardian Integration to INSTALLED_APPS\nDESCRIPTION: Add the unfold.contrib.guardian app to your INSTALLED_APPS setting at the beginning of the file to enable django-guardian integration with Unfold. This overrides all templates from django-guardian and adds an Object permissions link in the top right dropdown navigation.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/integrations/django-guardian.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nunfold.contrib.guardian\n```\n\n----------------------------------------\n\nTITLE: Customizing Inline Titles in Django Unfold\nDESCRIPTION: This snippet demonstrates how to override the default inline title by implementing the get_inline_title method on a model. By default, inlines use the __str__ implementation, but this method allows for custom titles specifically for inline displays.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/inlines/options.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom unfold.admin import TabularInline\n\n\nclass User(models.Model):\n    # fiels, meta ...\n\n    def get_inline_title(self):\n        return \"Custom title\"\n\n\nclass MyInline(TabularInline):\n    model = User\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Django Simple History\nDESCRIPTION: Configuration settings to add simple_history and unfold.contrib.simple_history to Django's INSTALLED_APPS. The order is important - unfold.contrib.simple_history must be placed after unfold but before simple_history to ensure proper template overriding.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/integrations/django-simple-history.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nINSTALLED_APPS = [\n    \"unfold\",\n    # ...\n    \"unfold.contrib.simple_history\",\n    # ...\n    \"simple_history\",\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Cohort Component with Direct Data in HTML Template\nDESCRIPTION: Demonstrates how to include the cohort component in a Django template by directly passing prepared data through a variable, bypassing the need for a component class.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/cohort.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load unfold %}\n\n{% component \"unfold/components/chart/cohort.html\" with data=my_data_variable %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Setting Up i18n URL Patterns\nDESCRIPTION: URL configuration for handling multiple languages in Django admin. Includes the i18n URLs for language switching and wraps admin URLs in i18n_patterns for localized paths.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/multi-language/index.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\n\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\n\nurlpatterns = (\n    [\n        path(\"i18n/\", include(\"django.conf.urls.i18n\")),\n    ]\n    + i18n_patterns(\n        path(\"admin/\", admin.site.urls),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabs in Custom Django Templates\nDESCRIPTION: Demonstrates how to render tabs in custom Django templates using the tab_list template tag provided by Django Unfold. The template extends the admin base template and loads the unfold template tags to access the tab rendering functionality.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/dynamic.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"admin/base_site.html\" %}\n\n{% load unfold %}\n\n{% block content %}\n    {% tab_list \"custom_page\" %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring URLs for Custom Admin Site in Python\nDESCRIPTION: Demonstrates how to add the custom admin site to the URL patterns in Django's urls.py file.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/sites/index.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\n\nfrom django.urls import path\nfrom .sites import custom_admin_site\n\n\nurlpatterns = [\n    # other URL patterns\n    path(\"admin/\", custom_admin_site.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Using Component Classes in Django Templates\nDESCRIPTION: This code shows how to use a registered component class in a Django template. The component_class parameter references the registered component class by name, which will be instantiated and used to prepare data for the template rendering.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/component_class.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load unfold %}\n\n{% component \"unfold/components/my_component.html\" with component_class=\"MyComponent\" %}{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Registering Models with Custom Admin Site in Python\nDESCRIPTION: Shows how to register a model with a custom admin site using the register decorator with the site parameter.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/sites/index.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom django.contrib.auth.models import User\nfrom unfold.admin import ModelAdmin\n\n\n@admin.register(User, site=custom_admin_site)\nclass UserAdmin(ModelAdmin):\n    model = User\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Field for Inline Sorting in Django\nDESCRIPTION: This snippet shows how to define the required model field for sortable inlines. The field must be a PositiveIntegerField with db_index=True to enable the sorting functionality.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/inlines/sortable.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass User(models.Model):\n    weight = models.PositiveIntegerField(_(\"weight\"), default=0, db_index=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Custom Admin Site in Python\nDESCRIPTION: Shows how to configure INSTALLED_APPS when using a custom admin site, specifying the use of Unfold's BasicAppConfig.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/sites/index.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nINSTALLED_APPS = [\n    \"unfold.apps.BasicAppConfig\", # App config not overriding `django.contrib.admin.site`\n    # some other apps\n    \"django.contrib.admin\",\n    \"your_app\",\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Icon Support to Django-Unfold Actions\nDESCRIPTION: This snippet shows how to add an icon to a custom action in Django-Unfold using the @action decorator. Icons enhance the visual appeal and usability of actions in the admin interface.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/actions/introduction.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.db.models import QuerySet\nfrom django.http import HttpRequest\n\nfrom unfold.decorators import action\n\n@action(description=\"Custom action\", icon=\"person\")\ndef custom_action(self, request: HttpRequest, queryset: QuerySet):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Related Tables in Django Unfold Admin\nDESCRIPTION: This snippet illustrates how to set up multiple related tables as expandable rows in Django Unfold admin. It shows how to specify multiple section classes in the list_sections attribute.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/sections/index.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom unfold.admin import ModelAdmin\n\nfrom .models import SomeModel\n\n\n@admin.register(SomeModel)\nclass SomeAdmin(ModelAdmin):\n    list_sections = [\n         CustomTableSection, OtherCustomTable\n    ]\n```\n\n----------------------------------------\n\nTITLE: Hiding Title Row in Django Unfold Inlines\nDESCRIPTION: This snippet shows how to hide the title row in TabularInline or StackedInline by setting the hide_title attribute to True. For StackedInline, this requires disabling delete permissions (can_delete) since the delete checkbox is contained within the title row.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/inlines/options.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib.auth.models import User\nfrom unfold.admin import TabularInline\n\n\nclass MyInline(TabularInline):\n    model = User\n    hide_title = True\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Component in HTML Template\nDESCRIPTION: Example of using the Table component in a Django template, demonstrating how to load Unfold components, nest the Table within a Card component, and pass parameters.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/components/table.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load unfold %}\n\n{% component \"unfold/components/card.html\" with title=\"Card title\" %}\n    {% component \"unfold/components/table.html\" with table=table_data card_included=1 striped=1 %}{% endcomponent %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings in Django\nDESCRIPTION: Basic Django settings configuration for enabling internationalization. Sets up the LocaleMiddleware, defines the default language code, enables i18n support, and configures available languages.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/multi-language/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nMIDDLEWARE = [\n    \"django.middleware.locale.LocaleMiddleware\",\n]\n\nLANGUAGE_CODE = \"en\"\n\nUSE_I18N = True\n\nLANGUAGES = (\n    (\"de\", _(\"German\")),\n    (\"en\", _(\"English\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Compilation Commands\nDESCRIPTION: These bash commands demonstrate how to compile the Tailwind CSS styles for production use or development with watch mode. The commands take the input CSS file, process it with Tailwind, and output the compiled file to the project's static directory.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/styles-scripts/customizing-tailwind.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# One-time build with minified output\nnpx tailwindcss -i styles.css -o your_project/static/css/styles.css --minify\n\n# Watch for changes and compile automatically with minified output\nnpx tailwindcss -i styles.css -o your_project/static/css/styles.css --minify --watch\n```\n\n----------------------------------------\n\nTITLE: Creating Base CSS File for Tailwind in Django\nDESCRIPTION: This CSS file serves as the main stylesheet that imports Tailwind's base, components, and utilities layers. It also demonstrates how to add custom CSS classes that utilize Tailwind's @apply directive to inherit Unfold's theme colors.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/styles-scripts/customizing-tailwind.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Your custom styles */\n.some-class {\n    @apply bg-primary-600;\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Tailwind Build Process with NPM Scripts\nDESCRIPTION: This JSON snippet shows how to add scripts to package.json that automate the Tailwind compilation process. It includes commands for both development (watch mode) and production builds, making it easier to integrate into your workflow.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/styles-scripts/customizing-tailwind.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"tailwind:watch\": \"npx tailwindcss -i styles.css -o your_project/static/css/styles.css --minify --watch\",\n    \"tailwind:build\": \"npx tailwindcss -i styles.css -o your_project/static/css/styles.css --minify\"\n  }\n  // rest of configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Language Selector in Unfold Admin\nDESCRIPTION: Configuration setting to enable the language selector in the Django Unfold admin interface. Displays language options in the top right corner of the admin panel.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/multi-language/index.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nUNFOLD = {\n    \"SHOW_LANGUAGES\": True,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TABS with a Unique Page Identifier\nDESCRIPTION: Shows how to set up the TABS configuration in settings with a unique page identifier that can be referenced in templates. This approach allows for more customized tab rendering in Django Unfold.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/tabs/dynamic.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nfrom django.http import HttpRequest\n\nUNFOLD = {\n    \"TABS\": [\n        {\n            \"page\": \"custom_page\", # Unique tab identifier\n            \"items\": [\n                {\n                    \"title\": _(\"Your custom title\"),\n                    \"link\": reverse_lazy(\"admin:app_label_model_name_changelist\"),\n                },\n            ],\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AdminConfig in Python\nDESCRIPTION: Demonstrates how to override the default admin site by creating a custom AdminConfig class with a specific default_site attribute.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/sites/index.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# apps.py\n\nfrom django.contrib.admin.apps import AdminConfig\n\n\nclass MyAdminConfig(AdminConfig):\n    default_site = \"myproject.sites.CustomAdminSite\"\n```\n\n----------------------------------------\n\nTITLE: Running Tailwind CSS Build Commands\nDESCRIPTION: These npm commands are used for building and watching Tailwind CSS styles. The watch command is useful during development as it automatically rebuilds styles when changes are detected.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/development/devcontainer.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run during development to watch for changes\nnpm run tailwind:watch\n\n# Run for a one-time build\nnpm run tailwind:build\n```\n\n----------------------------------------\n\nTITLE: Creating Simple History Admin Class with Django Unfold\nDESCRIPTION: Example of creating an admin class that combines SimpleHistoryAdmin with Unfold's ModelAdmin for User model. This setup enables history tracking functionality with Unfold's UI improvements.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/integrations/django-simple-history.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# admin.py\n\nfrom django.contrib import admin\nfrom django.contrib.auth import get_user_model\n\nfrom simple_history.admin import SimpleHistoryAdmin\nfrom unfold.admin import ModelAdmin\n\nUser = get_user_model()\n\n\n@admin.register(User)\nclass UserAdmin(SimpleHistoryAdmin, ModelAdmin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Compiling Tailwind CSS for Django Unfold\nDESCRIPTION: Commands for installing Node.js dependencies and compiling Tailwind CSS for the Unfold theme. Includes options for watching for changes during development or building once for production.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/development/poetry-dependency.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install\n\n# Manually run tailwindcss command\nnpx tailwindcss -i src/unfold/styles.css -o src/unfold/static/unfold/css/styles.css --watch --minify\n\n# run after each change in code\nnpm run tailwind:watch\n# run once\nnpm run tailwind:build\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js in Devcontainer for Tailwind CSS\nDESCRIPTION: This configuration adds Node.js support to the devcontainer by updating the devcontainer.json file. It's necessary for installing and running Tailwind CSS dependencies within the container.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/development/devcontainer.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// .devcontainer/devcontainer.json\n\n\"features\": {\n  \"ghcr.io/devcontainers/features/node:1\": {\n    \"version\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Django Crispy Forms\nDESCRIPTION: Commands for installing django-crispy-forms using different package managers (pip, uv, poetry).\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/configuration/crispy-forms.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-crispy-forms\n\nuv add django-crispy-forms\n\npoetry add django-crispy-forms\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for ArrayWidget\nDESCRIPTION: Required Django settings configuration to enable ArrayWidget functionality by adding necessary apps to INSTALLED_APPS.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/widgets/array.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nINSTALLED_APPS = [\n    \"unfold\",\n    \"unfold.contrib.forms\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Language Flags in Django Settings\nDESCRIPTION: This snippet shows how to configure custom language flags in the Django settings file. These flags appear as suffixes in field labels for language-specific fields in django-modeltranslation.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/integrations/django-modeltranslation.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nUNFOLD = {\n    \"EXTENSIONS\": {\n        \"modeltranslation\": {\n            \"flags\": {\n                \"en\": \"ðŸ‡¬ðŸ‡§\",\n                \"fr\": \"ðŸ‡«ðŸ‡·\",\n                \"nl\": \"ðŸ‡§ðŸ‡ª\",\n            },\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks for Django Unfold\nDESCRIPTION: Commands for installing and configuring pre-commit hooks to ensure code quality checks before committing changes to the Django Unfold repository.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/development/poetry-dependency.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit install\npre-commit install --hook-type commit-msg\npre-commit run --all-files # Check if everything is okay\n```\n\n----------------------------------------\n\nTITLE: Listing Release Notes for Django Unfold v0.6.7\nDESCRIPTION: This Markdown snippet lists the changes made in version 0.6.7 of Django Unfold. It includes improvements to filter handling, checkbox focus, and a fix for responsive filter button.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.6.7 (2023-06-25)\n\n- feat: improved filters open/close handling ([`9f607c5`](https://github.com/unfoldadmin/django-unfold/commit/9f607c571cd354a68c11ffa0e2fb5bdc23b53830))\n- feat: checkbox focus ([`d31c357`](https://github.com/unfoldadmin/django-unfold/commit/d31c357db8fc9a39f4ea2c66c2733c42f3c25d2c))\n- fix: responsive filter button ([`5ba45f8`](https://github.com/unfoldadmin/django-unfold/commit/5ba45f8875cf4d2a6cddddd46917c5d238b926dd))\n```\n\n----------------------------------------\n\nTITLE: Displaying Commit Hash in Markdown\nDESCRIPTION: This snippet shows how commit hashes are displayed as links in the changelog using Markdown syntax. It demonstrates the format used for linking to specific commits in the repository.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[`fedd594`](https://github.com/unfoldadmin/django-unfold/commit/fedd5947f227e5c5b9f496fc45aed4ad5eba73c1)\n```\n\n----------------------------------------\n\nTITLE: Installing Django-Unfold Package Using pip\nDESCRIPTION: Command to install the django-unfold package using pip, the Python package manager.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/installation/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-unfold\n```\n\n----------------------------------------\n\nTITLE: Custom Form Template for Django Unfold Admin Action\nDESCRIPTION: This HTML template displays a form for a custom admin action. It extends the admin base site, includes necessary JavaScript for form functionality, and uses Unfold components for styling. The form is structured with proper CSRF protection and Submit button.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/docs/actions/action-form-example.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"admin/base_site.html\" %}\n\n{% load i18n unfold %}\n\n{% block breadcrumbs %}{% endblock %}\n\n{% block extrahead %}\n    {{ block.super }}\n    <script src=\"{% url 'admin:jsi18n' %}\"></script>\n    {{ form.media }}\n{% endblock %}\n\n{% block content %}\n    <form action=\"\" method=\"post\" novalidate>\n        <div class=\"aligned border border-base-200 mb-8 rounded pt-3 px-3 shadow-sm dark:border-base-800\">\n            {% csrf_token %}\n\n            {% for field in form %}\n                {% include \"unfold/helpers/field.html\" with field=field %}\n            {% endfor %}\n        </div>\n\n        <div class=\"flex justify-end\">\n            {% component \"unfold/components/button.html\" with submit=1 %}\n                {% trans \"Submit form\" %}\n            {% endcomponent %}\n        </div>\n    </form>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Commit Hash in Markdown\nDESCRIPTION: This snippet shows how to format a commit hash as a clickable link in Markdown. It uses the backtick syntax for inline code and square brackets with parentheses for the link.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[`5978dec`](https://github.com/unfoldadmin/django-unfold/commit/5978dec6845fbd737f342c5564263e8181001bde)\n```\n\n----------------------------------------\n\nTITLE: Django-Unfold Version Release Notes\nDESCRIPTION: Markdown formatted changelog entries documenting version updates from 0.24.0 to 0.29.1, including features, bug fixes, and dependency updates.\nSOURCE: https://github.com/unfoldadmin/django-unfold/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.29.1 (2024-06-24)\n\n- fix: tabbed inline border (#512)\n- fix: sidebar color (#510)\n- fix: inline headers (#509)\n- fix: dark mode link colors (#508)\n\n## 0.29.0 (2024-06-23)\n\n- feat: basic button component (#504)\n- feat: unified details actions with tabs (#492)\n- fix: inline timezone warning (#506)\n- fix: compressed switch checkbox (#505)\n\n[...additional changelog entries...]\n```"
  }
]