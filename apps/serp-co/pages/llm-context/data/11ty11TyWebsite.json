[
  {
    "owner": "11ty",
    "repo": "11ty-website",
    "content": "TITLE: Adding TypeScript Type Definitions for Eleventy Configuration (JavaScript/TypeScript)\nDESCRIPTION: This code snippet annotates the eleventyConfig parameter with a TypeScript JSDoc type, enhancing IDE autocomplete and type safety. It uses the UserConfig type from the @11ty/eleventy package. No additional setup is needed beyond having TypeScript-compatible tooling; this pattern is purely for development convenience and does not affect runtime behavior.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @param {import(\"@11ty/eleventy\").UserConfig} eleventyConfig */\\nexport default function (eleventyConfig) {\\n\\t// …\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Eleventy Image Shortcode\nDESCRIPTION: Defines an asynchronous Eleventy universal shortcode named 'image' using '@11ty/eleventy-img'. This shortcode takes source (src), alt text, optional widths, and sizes attributes to generate responsive AVIF and JPEG images wrapped in HTML. It utilizes the 'returnType: \"html\"' and 'htmlOptions' (new in v6.0) for streamlined HTML generation including 'loading' and 'decoding' attributes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-shortcodes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addShortcode(\"image\", async function (src, alt, widths = [300, 600], sizes = \"\") {\n\t\treturn Image(src, {\n\t\t\twidths,\n\t\t\tformats: [\"avif\", \"jpeg\"],\n\t\t\treturnType: \"html\",    // new in v6.0\n\t\t\thtmlOptions: {         // new in v6.0\n\t\t\t\timgAttributes: {\n\t\t\t\t\talt,               // required, though \"\" works fine\n\t\t\t\t\tsizes,             // required with more than one width, optional if single width output\n\t\t\t\t\tloading: \"lazy\",   // optional\n\t\t\t\t\tdecoding: \"async\", // optional\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Markdown Processing with Marked - Eleventy JavaScript\nDESCRIPTION: This snippet demonstrates how to override the built-in markdown processing in Eleventy from the default 'markdown-it' to the 'marked' library. It defines a new extension for the 'md' file type and provides a 'compile' function that uses 'marked.parse' on the input content, allowing conditional fallback to the existing renderer via 'this.defaultRenderer'. Requires the 'marked' dependency (install via npm), and should be used within an Eleventy configuration file such as '.eleventy.js'. Inputs are markdown files; outputs are processed HTML. This approach opts out of Eleventy's default markdown pre-processing for affected files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { marked } from \\\"marked\\\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addExtension(\\\"md\\\", {\n\t\tcompile: function (inputContent, inputPath) {\n\t\t\tlet html = marked.parse(inputContent);\n\n\t\t\treturn function (data) {\n\t\t\t\t// Example: use `marked` only if useMarked is set in the Data Cascade\n\t\t\t\tif (data.useMarked) {\n\t\t\t\t\treturn html;\n\t\t\t\t}\n\n\t\t\t\t// You can also access the default `markdown-it` renderer here:\n\t\t\t\treturn this.defaultRenderer(data);\n\t\t\t};\n\t\t},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Plugin with Custom Options\nDESCRIPTION: Shows how to pass custom configuration options when adding a plugin to customize its behavior.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluginSyntaxHighlight from \"@11ty/eleventy-plugin-syntaxhighlight\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(pluginSyntaxHighlight, {\n\t\t// only install the markdown highlighter\n\t\ttemplateFormats: [\"md\"],\n\n\t\tinit: function ({ Prism }) {\n\t\t\t// Add your own custom language to Prism!\n\t\t},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Animated Images with Eleventy Image (JavaScript)\nDESCRIPTION: This snippet shows how to process and output animated GIF or WebP images using the Eleventy Image plugin. It demonstrates configuring both the target output formats and passing the 'animated' property in sharpOptions to enable animation support. Inputs include a source image path and an options object specifying formats and sharpOptions; outputs are processed images in the requested formats. Requires the '@11ty/eleventy-img' package and the Sharp image processor.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Image from \"@11ty/eleventy-img\";\n\nawait Image(\"./test/bio-2017.jpg\", {\n\tformats: [\"webp\", \"gif\"],\n\n\tsharpOptions: {\n\t\tanimated: true,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layout Content Unescaped in Common Template Languages\nDESCRIPTION: A table mapping template languages to their proper syntax for rendering unescaped layout content, including comparison with escaped output. No dependencies; this is reference documentation for template syntax. Each row indicates how to correctly output potentially unsafe HTML (intended for cases like rendering child template content inside a layout) for Nunjucks, EJS, Handlebars, Mustache, Liquid, HAML, and Pug. Input: the variable containing the HTML content; Output: the rendered HTML. Constraints: improper usage might lead to XSS; recommended for controlled content only.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/layouts.md#2025-04-23_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n| Template Language | Unescaped Content (for layout content) | Comparison with an Escaped Output | Docs |\\n| ----------------- | ------------------------------------------------------ | --------------------------------- | ------------------------------------------------------------------------------------ |\\n| Nunjucks | `{{ content | safe }}` | `{{ value }}` | [Docs](https://mozilla.github.io/nunjucks/templating.html#safe) |\\n| EJS | `<%- content %>` | `<%= value %>` | [Docs](https://www.npmjs.com/package/ejs#tags) |\\n| Handlebars | `{{{ content }}}` (triple stash) | `{{ value }}` (double stash) | [Docs](https://handlebarsjs.com/#html-escaping) |\\n| Mustache | `{{{ content }}}` (triple stash) | `{{ value }}` (double stash) | [Docs](https://github.com/janl/mustache.js#variables) |\\n| Liquid | is by default unescaped so you can use `{{ content }}` | `{{ value | escape }}` | [Docs](https://liquidjs.com/filters/escape.html) |\\n| HAML | `! #{ content }` | `= #{ content }` | [Docs](https://haml.info/docs/yardoc/file.REFERENCE.html#unescaping_html) |\\n| Pug | `!{content}` | `#{value}` | [Docs](https://pugjs.org/language/interpolation.html#string-interpolation-unescaped) |\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation to HTML in Nunjucks\nDESCRIPTION: These snippets show how to render the full navigation tree as HTML using the eleventyNavigationToHtml filter in Nunjucks, for both regular navigation and breadcrumbs.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_29\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ collections.all | eleventyNavigation | eleventyNavigationToHtml | safe }}\n```\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ collections.all | eleventyNavigationBreadcrumb(\"Bats\") | eleventyNavigationToHtml | safe }}\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for Eleventy WebC Plugin in JavaScript\nDESCRIPTION: Minimal Eleventy configuration (`eleventy.config.js` or similar) demonstrating how to import and add the WebC plugin using `eleventyConfig.addPlugin()`. This enables processing of `.webc` files. Requires the `@11ty/eleventy-plugin-webc` package to be installed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluginWebc from \"@11ty/eleventy-plugin-webc\";\n\nexport default function(eleventyConfig) {\n\televentyConfig.addPlugin(pluginWebc);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Shortcodes in Eleventy Configuration — JavaScript\nDESCRIPTION: Demonstrates how to add both synchronous and asynchronous shortcodes using Eleventy's Configuration API. The snippet shows usage of addShortcode for both sync and async callbacks, as well as addAsyncShortcode for explicit async registration. Dependencies include the eleventyConfig object provided by Eleventy. Parameters typically include the shortcode name (e.g., 'user') and a function handler accepting arguments for use in the template. Inputs are parameters passed in the template, outputs are rendered string (or Promise of string for async). Functions must return strings suitable for template injection.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/shortcodes.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n  // Shortcodes added in this way are available in:\n  // * Markdown\n  // * Liquid\n  // * Nunjucks\n  // * JavaScript\n  // * Handlebars (not async)\n\n  eleventyConfig.addShortcode(\"user\", function(firstName, lastName) { /* … */ });\n\n  // Async-friendly in {{ \"2.0.0-canary.24\" | coerceVersion }}\n  eleventyConfig.addShortcode(\"user\", async function(myName) { /* … */ });\n\n  // Direct async method available\n  eleventyConfig.addAsyncShortcode(\"user\", async function(myName) { /* … */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Eleventy Plugin with Custom Arguments\nDESCRIPTION: Advanced template for creating an Eleventy plugin that supports custom initialization arguments.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tinitArguments: {},\n\tconfigFunction: function (eleventyConfig, pluginOptions) {\n\t\t// Your plugin code goes here\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Template Attempting to Use 'this' in Eleventy - JavaScript\nDESCRIPTION: Demonstrates why arrow functions should not be used when needing 'this' to access JavaScript Template Functions. Using 'this' in an arrow function context will throw an error since arrow functions lack their own 'this' binding. No dependencies.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default (data) => {\n\t// Using `this` in an arrow function will throw an error!\n\treturn `<h1>${this.myFunction(data.a, data.b)}</h1>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Class with Render Method in Eleventy Template - JavaScript\nDESCRIPTION: Exports a class where a 'render' method (can be async) generates the template output using destructured data. No dependencies; suitable for grouping custom logic. Input: data object with 'name'; output: HTML based on that property.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Test {\n\t// or `async render({name}) {`\n\trender({ name }) {\n\t\treturn `<p>${name}</p>`;\n\t}\n}\n\nexport default Test;\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Build Script with npm in package.json - JavaScript\nDESCRIPTION: Defines an npm build script in package.json to invoke Eleventy's static site generation command using npx. This enables automated builds via `npm run build`, simplifying host configuration by centralizing the build command and making future adjustments easier. Dependency: @11ty/eleventy installed; input is the package.json scripts object. This establishes a standardized build entry point for deployment environments.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  \\\"scripts\\\": {\\n    \\\"build\\\": \\\"npx @11ty/eleventy\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Raw Template Literal String in Eleventy JavaScript Template - JavaScript\nDESCRIPTION: Exports a multiline template literal string as the template content. There are no dependencies; output can span multiple lines and include embedded expressions if needed (but none are shown here). It is suitable for static blocks of HTML.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default `<p>These can\nspan\nmultiple\nlines!</p>`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Sass-style Underscore Convention in Eleventy\nDESCRIPTION: This snippet shows how to implement the Sass underscore convention in Eleventy, which skips writing files with names starting with underscore to the output directory. It uses the compileOptions.permalink configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n\t// … some configuration truncated\n  compileOptions: {\n    permalink: function(contents, inputPath) {\n      let parsed = path.parse(inputPath);\n      if(parsed.name.startsWith(\"_\")) {\n        return false;\n      }\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Using an Asynchronous Plugin in Eleventy\nDESCRIPTION: Demonstrates how to use async plugins in Eleventy, available from version 3.0.0-alpha.1.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function (eleventyConfig) {\n\tawait eleventyConfig.addPlugin(async function(eleventyConfig) {\n\t\t// I am an asynchronous plugin!\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Eleventy Build Output as JSON (Node.js)\nDESCRIPTION: This Node.js script shows how to run an Eleventy build programmatically and retrieve the results as a JSON object instead of writing to the filesystem. It uses the `.toJSON()` method after initialization. The resulting JSON contains an array of objects, each representing a generated page with properties like `url`, `inputPath`, `outputPath`, and `content`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/programmatic.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// my-node-script.js\nconst Eleventy = require(\"@11ty/eleventy\");\n\n(async function() {\n\tlet elev = new Eleventy();\n\n\tawait elev.init();\n\tlet json = await elev.toJSON();\n\n\tconsole.log( JSON.stringify(json, null, 2) );\n\n\t/* An array of Result Objects, e.g. \n\t[\n\t\t{\n\t\t\tinputPath: './README.md',\n\t\t\toutputPath: './_site/README/index.html',\n\t\t\turl: '/README/',\n\t\t\tcontent: '<!doctype html>…'\n\t\t}\n\t]\n\t*/\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Eleventy Configuration File in JavaScript\nDESCRIPTION: Shows the basic structure of an Eleventy configuration file with an asynchronous function export. This is the foundation for configuring an Eleventy project.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function(eleventyConfig) {\n\t// Configure Eleventy\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Pagination Navigation with Nunjucks in 11ty\nDESCRIPTION: A complete Nunjucks template for implementing pagination navigation in 11ty. Includes handling of first, previous, current, next, and last page links with proper aria attributes for accessibility.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_13\n\nLANGUAGE: jinja2\nCODE:\n```\n{%- include \"snippets/pagination/nav/combined.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Plugin with addBundle in Eleventy JavaScript Config\nDESCRIPTION: Configures the Eleventy Bundle plugin by adding a CSS bundle via the addBundle method in the Eleventy JavaScript config file. This setup creates a universal shortcode for adding CSS code and enables bundle features for use in templates. Requires Eleventy core with the Bundle plugin included; no extra dependencies are needed for basic usage. The function expects an eleventyConfig object and outputs nothing, altering the Eleventy build pipeline when executed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\\n\\televentyConfig.addBundle(\\\"css\\\");\\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Universal Filters and Shortcodes in Eleventy Config - JavaScript\nDESCRIPTION: Registers universal filters and shortcodes (including paired shortcodes) using Eleventy's config API. These functions become available across template languages and as JavaScript Template Functions. Input: filter/shortcode names and implementations; output: adds to the template processing pipeline.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\n  // Universal filters (Adds to Liquid, Nunjucks, 11ty.js)\n  eleventyConfig.addFilter(\"myFilter\", function(myVariable) { /* … */ });\n\n  // Universal Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)\n  eleventyConfig.addShortcode(\"user\", function(firstName, lastName) { /* … */ });\n\n  // Universal Paired Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)\n  eleventyConfig.addPairedShortcode(\"pairedUser\", function(content, firstName, lastName) { /* … */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Eleventy Image HTML Transform Options in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates configuring the Eleventy Image HTML transform plugin with specific options in an Eleventy configuration file. It sets custom output formats (`avif`, `webp`, `jpeg`), specifies output widths (`auto`), and defines default attributes (`loading`, `decoding`) to be added to the generated `<img>` tags via `htmlOptions`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { eleventyImageTransformPlugin } from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(eleventyImageTransformPlugin, {\n\t\t// output image formats\n\t\tformats: [\"avif\", \"webp\", \"jpeg\"],\n\n\t\t// output image widths\n\t\twidths: [\"auto\"],\n\n\t\t// optional, attributes assigned on <img> nodes override these values\n\t\thtmlOptions: {\n\t\t\timgAttributes: {\n\t\t\t\tloading: \"lazy\",\n\t\t\t\tdecoding: \"async\",\n\t\t\t},\n\t\t\tpictureAttributes: {}\n\t\t},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Promise for Asynchronous Eleventy Template Output - JavaScript\nDESCRIPTION: Exports a Promise that resolves to a string after a delay. No external dependencies; demonstrates asynchronous computation for output generation. Input is ignored; output is resolved HTML after 1 second.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default new Promise((resolve, reject) => {\n\tsetTimeout(function () {\n\t\tresolve(\"<p>Zach</p>\");\n\t}, 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Google Fonts CSS with Custom User Agent (ESM)\nDESCRIPTION: Demonstrates fetching CSS text content from Google Fonts. It specifies `type: \"text\"` to get the raw CSS string. Additionally, it uses the `fetchOptions` property to pass custom request headers, specifically setting a browser-like `user-agent` string, which some services might require.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nlet url = \"https://fonts.googleapis.com/css?family=Roboto+Mono:400&display=swap\";\nlet fontCss = await Fetch(url, {\n\tduration: \"1d\",\n\ttype: \"text\",\n\tfetchOptions: {\n\t\theaders: {\n\t\t\t// lol\n\t\t\t\"user-agent\":\n\t\t\t\t\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\",\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Eleventy via Package Manager (Bash)\nDESCRIPTION: These Bash snippets show how to start Eleventy in the terminal using different package managers (npm, pnpm, yarn). The commands initiate a site build from the current directory and specify the output destination, optionally demonstrating explicit input/output option usage. Required: a Node.js environment, Eleventy installed locally or accessible via npx/yarn/pnpm. Parameters include --input for the source directory, --output for the build directory. Input: site source files; Output: generated site in _site.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Searches the current directory, outputs to ./_site\\nnpx @11ty/eleventy\\n\\n# `npx @11ty/eleventy` is the same as:\\nnpx @11ty/eleventy --input=. --output=_site\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Front Matter using YAML in Markdown\nDESCRIPTION: This snippet demonstrates the default method of adding front matter data using YAML syntax within a Markdown file for an Eleventy template. The data defined here (`title`) becomes available within the template.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-frontmatter.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My page title\n---\n\n<!doctype html>\n<html>\n…\n\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Custom Data Parser in Eleventy Configuration (JavaScript)\nDESCRIPTION: This snippet shows the basic usage of `eleventyConfig.addDataExtension` within an Eleventy configuration file (`.eleventy.js` or `eleventy.config.js`). It registers a parser function for files with `.yml` or `.yaml` extensions. The parser function receives the file contents and optionally the file path, and should return the parsed data object. Note that multiple extensions can be specified as a comma-separated string.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-custom.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Receives file contents, return parsed data\n\televentyConfig.addDataExtension(\"yml,yaml\", (contents, filePath) => {\n\t\treturn {};\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Eleventy AssetCache Directly in JavaScript\nDESCRIPTION: This code demonstrates a low-level method of accessing and managing the cache directly using the AssetCache API from @11ty/eleventy-fetch. After checking cache validity for a given key, it either returns previously cached data or performs a new data fetch and saves it. Dependencies include @11ty/eleventy-fetch and knowledge of unique cache key generation. It accepts a custom cache key and stores/retrieves JSON-serializable data.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AssetCache } from \"@11ty/eleventy-fetch\";\n\nexport default async function () {\n\t// Pass in your unique custom cache key\n\t// (normally this would be tied to your API URL)\n\tlet asset = new AssetCache(\"zachleat_twitter_followers\");\n\n\t// check if the cache is fresh within the last day\n\tif (asset.isCacheValid(\"1d\")) {\n\t\t// return cached data.\n\t\treturn asset.getCachedValue(); // a promise\n\t}\n\n\t// do some expensive operation here, this is simplified for brevity\n\tlet fakeTwitterApiContents = { followerCount: 1000 };\n\n\tawait asset.save(fakeTwitterApiContents, \"json\");\n\n\treturn fakeTwitterApiContents;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Compilation in Eleventy Configuration (JavaScript)\nDESCRIPTION: This JavaScript snippet extends Eleventy’s configuration by registering a custom extension for .scss files using the 'sass' npm package. It disables default layout processing, uses the sass API to compile SCSS content, and sets up dependency tracking for incremental builds. Required dependencies include 'sass' and Node’s built-in 'path' module. The expected input files are .scss files, and the output is .css in the build directory. Files beginning with an underscore are excluded from compilation to support partials; the code expects proper Eleventy config context and the Sass module to be installed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/sass.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport path from \"node:path\";\nimport * as sass from \"sass\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addExtension(\"scss\", {\n\t\toutputFileExtension: \"css\",\n\n\t\t// opt-out of Eleventy Layouts\n\t\tuseLayouts: false,\n\n\t\tcompile: async function (inputContent, inputPath) {\n\t\t\tlet parsed = path.parse(inputPath);\n\t\t\t// Don’t compile file names that start with an underscore\n\t\t\tif(parsed.name.startsWith(\"_\")) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet result = sass.compileString(inputContent, {\n\t\t\t\tloadPaths: [\n\t\t\t\t\tparsed.dir || \".\",\n\t\t\t\t\tthis.config.dir.includes,\n\t\t\t\t]\n\t\t\t});\n\n\t\t\t// Map dependencies for incremental builds\n\t\t\tthis.addDependencies(inputPath, result.loadedUrls);\n\n\t\t\treturn async (data) => {\n\t\t\t\treturn result.css;\n\t\t\t};\n\t\t},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Raw String Value in Eleventy JavaScript Template - JavaScript\nDESCRIPTION: Exports a string as the template's generated content. No dependencies are required; simply returns the literal string for Eleventy to output directly. Input and output are static, and no data binding or parameters are available, limiting use to static HTML.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default \"<p>Zach</p>\";\n```\n\n----------------------------------------\n\nTITLE: Advanced Nunjucks Macro for Multi-level Navigation\nDESCRIPTION: Demonstrates a recursive Nunjucks macro for rendering navigation with unlimited child levels. Provides complete control over HTML structure while handling nested navigation items.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n{% set navPages = collections.all | eleventyNavigation %}\n{% macro renderNavListItem(entry) -%}\n<li{% if entry.url == page.url %} class=\"my-active-class\"{% endif %}>\n  <a href=\"{{ entry.url }}\">{{ entry.title }}</a>\n{%- if entry.children.length -%}\n  <ul>\n    {%- for child in entry.children %}{{ renderNavListItem(child) }}{% endfor -%}\n  </ul>\n{%- endif -%}\n</li>\n{%- endmacro %}\n\n<ul>\n{%- for entry in navPages %}{{ renderNavListItem(entry) }}{%- endfor -%}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Shortcodes with Named Argument Object (Nunjucks, JavaScript)\nDESCRIPTION: This JavaScript snippet registers a Nunjucks shortcode named 'user' that accepts a single argument object, allowing named parameters such as 'name' and 'twitter'. It demonstrates flexible argument ordering and supports optional parameters, outputting user HTML with a conditional Twitter handle. Depends on Eleventy with Nunjucks enabled; inputs are a single object with user details; output is structured profile HTML. No asynchronous functionality; this pattern is Nunjucks-specific.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Nunjucks Shortcode\n\televentyConfig.addNunjucksShortcode(\"user\", function (user) {\n\t\treturn `<div class=\\\"user\\\">\\n<div class=\\\"user_name\\\">${user.name}</div>\\n${user.twitter ? `<div class=\\\"user_twitter\\\">@${user.twitter}</div>` : \"\"}\\n</div>`;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Synchronous and Asynchronous Filters - Eleventy Configuration - JavaScript\nDESCRIPTION: Shows how to register both synchronous and asynchronous filters globally using Eleventy's configuration API. Uses \\\"addFilter\\\" for synchronous (or async-friendly) filters and \\\"addAsyncFilter\\\" for explicitly asynchronous ones. Dependencies: The configuration object \\\"eleventyConfig\\\" is passed by Eleventy, and filter functions should be defined to accept the value to transform. Outputs a site-wide availability of the \\\"makeUppercase\\\" filter for supported template engines.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addFilter(\"makeUppercase\", function(value) { /* … */ });\n\n  eleventyConfig.addAsyncFilter(\"makeUppercase\", async function(value) { /* … */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy Image via npm\nDESCRIPTION: This command installs the Eleventy Image plugin package using npm. It's a prerequisite for using the image optimization features in an Eleventy project.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @11ty/eleventy-img\n```\n\n----------------------------------------\n\nTITLE: Customizing Directory and Template Data File Suffixes in Eleventy - JavaScript\nDESCRIPTION: Provides examples on configuring allowed file suffixes Eleventy will recognize as data files using setDataFileSuffixes. This helps prevent filename conflicts and enables or disables data file discovery for certain suffixes (e.g., ['.11tydata', '']). Setting it to an empty array disables the feature entirely. Input is an array of strings; output is the set of recognized data file suffixes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\t// e.g. file.json and file.11tydata.json\\n\\televentyConfig.setDataFileSuffixes([\\\".11tydata\\\", \\\"\\\"]);\\n\\n\\t// e.g. file.11tydata.json\\n\\televentyConfig.setDataFileSuffixes([\\\".11tydata\\\"]);\\n\\n\\t// No data files are used.\\n\\televentyConfig.setDataFileSuffixes([]);\\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Output with Eleventy Image (JavaScript)\nDESCRIPTION: This configuration object demonstrates how to make Eleventy Image return HTML using the 'returnType' property, and further customize the output using 'htmlOptions'. The settings allow specifying attributes for the generated <img> and <picture> elements and control which source is used for fallback. Inputs include the required alt text and optional HTML attributes; the output is a string of HTML markup. This is used for fine-tuned image HTML content in Eleventy projects.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n\t// …\n\treturnType: \"html\",\n\n\thtmlOptions: {\n\t\timgAttributes: {\n\t\t\talt : \"\", // required\n\t\t\tloading: \"lazy\",\n\t\t\tdecoding: \"async\",\n\t\t},\n\n\t\t// HTML attributes added to `<picture>` (omitted when <img> used)\n\t\tpictureAttributes: {},\n\n\t\t// Which source to use for `<img width height src>` attributes\n\t\tfallback: \"largest\", // or \"smallest\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Aliasing Existing Template Languages in Eleventy (JavaScript)\nDESCRIPTION: This configuration demonstrates how to make Eleventy process files with new extensions (like `.11ty.jsx`, `.11ty.ts`, `.11ty.tsx`) using an existing, underlying template engine (`11ty.js`). This is achieved by using `eleventyConfig.addExtension` with an options object where the `key` property specifies the target template language engine. Note that as of Eleventy 3.0, these new extensions must also be added to the template formats configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addExtension(\"11ty.jsx\", {\n\t\tkey: \"11ty.js\",\n\t});\n\n\t// Or, you can pass an array of extensions in {{ \"2.0.0-canary.19\" | coerceVersion }} or newer.\n\televentyConfig.addExtension([\"11ty.jsx\", \"11ty.ts\", \"11ty.tsx\"], {\n\t\tkey: \"11ty.js\",\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching and Caching GitHub Repo Data with Eleventy Fetch in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates using the `@11ty/eleventy-fetch` plugin within an asynchronous function (typical for Eleventy global data files). It fetches repository information from the GitHub API, specifically targeting the '11ty/eleventy' repo. The `duration` option caches the JSON response for 1 day (`1d`), and `type: \"json\"` ensures the response body is parsed as JSON. It returns an object containing the stargazer count.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/cache-api-requests.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nexport default async function () {\n\t// https://developer.github.com/v3/repos/#get\n\tlet json = await Fetch(\"https://api.github.com/repos/11ty/eleventy\", {\n\t\tduration: \"1d\", // 1 day\n\t\ttype: \"json\", // also supports \"text\" or \"buffer\"\n\t});\n\n\treturn {\n\t\tstargazers: json.stargazers_count,\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy Programmatically and Writing to Filesystem (Node.js)\nDESCRIPTION: This Node.js script demonstrates the basic usage of the Eleventy programmatic API. It imports the Eleventy class, instantiates it (implicitly using default input/output directories), initializes the build process, and writes the generated site files to the configured output directory using the `.write()` method.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/programmatic.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// my-node-script.js\nconst Eleventy = require(\"@11ty/eleventy\");\n\n(async function() {\n\tlet elev = new Eleventy();\n\n\tawait elev.init();\n\tawait elev.write();\n})();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom MDX Extension to Eleventy Configuration (JavaScript)\nDESCRIPTION: This snippet defines an Eleventy configuration extension for the \\'mdx\\' file format to enable support for MDX using ESM imports, @mdx-js/mdx evaluation, and server-side React rendering. It imports path utilities from Node.js, evaluation from @mdx-js/mdx, React rendering from react-dom/server, and runtime from react/jsx-runtime. The compile method evaluates the MDX content and returns a render function that outputs static HTML. Dependencies include @mdx-js/mdx and react-dom/server, and the configuration requires either a \\'type\\': \\'module\\' setting in package.json or using .mjs file extensions. Inputs include the MDX source string and input file path; output is a static HTML string. Limitations: Only compatible with ESM projects and supports front matter parsing.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/mdx.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {pathToFileURL} from \"node:url\";\nimport {evaluate} from \"@mdx-js/mdx\";\nimport {renderToStaticMarkup} from \"react-dom/server\";\nimport * as runtime from \"react/jsx-runtime\";\n\nexport default function(eleventyConfig) {\n\televentyConfig.addExtension(\"mdx\", {\n\t\tcompile: async (str, inputPath) => {\n\t\t\tconst { default: mdxContent } = await evaluate(str, {\n\t\t\t\t...runtime,\n\t\t\t\tbaseUrl: pathToFileURL(inputPath)\n\t\t\t});\n\n\t\t\treturn async function(data) {\n\t\t\t\tlet res = await mdxContent(data);\n\t\t\t\treturn renderToStaticMarkup(res);\n\t\t\t}\n\t\t}\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with Incremental Builds (Bash)\nDESCRIPTION: These commands enable Eleventy to rebuild only files that have changed since the previous build using --incremental. This can be combined with --watch or --serve for efficient development. The --ignore-initial flag skips the initial full build, only processing changed files. Dependencies: Eleventy (as of v2.0.0+) and Node.js. Inputs: changed files or templates; Outputs: partial, faster builds.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# *Repeat* builds only operate on files that have changed\\nnpx @11ty/eleventy --watch --incremental\\nnpx @11ty/eleventy --serve --incremental\\n\\n# Skip the initial full build with `--ignore-initial`\\nnpx @11ty/eleventy --serve --incremental --ignore-initial\n```\n\n----------------------------------------\n\nTITLE: Defining Async-Friendly Per-Engine Shortcodes in Eleventy — JavaScript\nDESCRIPTION: Demonstrates how to register asynchronous shortcodes for specific template engines, using async callbacks for advanced template rendering. The snippet includes async variants for Liquid and Nunjucks (including addNunjucksAsyncShortcode and addPairedNunjucksAsyncShortcode), as well as JavaScript functions that must be awaited in templates. Dependencies are the Eleventy configuration API and support for async/await in the functions. Inputs are user-defined parameters, outputs are resolved asynchronously to be injected in templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/shortcodes.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n  // Async-friendly\n  // Liquid is already async-friendly\n  eleventyConfig.addLiquidShortcode(\"user\", async function() {});\n  eleventyConfig.addPairedLiquidShortcode(\"user\", async function(content) {});\n\n  // Nunjucks Async\n  eleventyConfig.addNunjucksAsyncShortcode(\"user\", async function() {});\n  eleventyConfig.addPairedNunjucksAsyncShortcode(\"user\", async function(content) {});\n\n  // JavaScript Template function\n  // (make sure you `await` these when using in templates!)\n  eleventyConfig.addJavaScriptFunction(\"user\", async function() {});\n  eleventyConfig.addJavaScriptFunction(\"user\", async function(content) {}); // Faux-paired shortcode\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Eleventy Plugin Configuration with Options (JavaScript ES Module)\nDESCRIPTION: Illustrates how to pass an options object to `addPlugin` for advanced customization of the syntax highlighting plugin. Options include setting line separators, specifying template formats, customizing Prism via an init callback (e.g., adding custom languages), adding HTML attributes to `<pre>` and `<code>` tags (including dynamic attributes using callbacks), and controlling error behavior for invalid languages.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/syntaxhighlight.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport syntaxHighlight from \"@11ty/eleventy-plugin-syntaxhighlight\";\n\nexport default function(eleventyConfig) {\n  eleventyConfig.addPlugin(syntaxHighlight, {\n\n    // Line separator for line breaks\n    lineSeparator: \"\\n\",\n\n    // Change which Eleventy template formats use syntax highlighters\n    templateFormats: [\"*\"], // default\n\n    // Use only a subset of template types (11ty.js added in v4.0.0)\n    // templateFormats: [\"liquid\", \"njk\", \"md\", \"11ty.js\"],\n\n    // init callback lets you customize Prism\n    init: function({ Prism }) {\n      Prism.languages.myCustomLanguage = { /* … */ };\n    },\n\n    // Added in 3.1.1, add HTML attributes to the <pre> or <code> tags\n    preAttributes: {\n      tabindex: 0,\n\n      // Added in 4.1.0 you can use callback functions too\n      \"data-language\": function({ language, content, options }) {\n        return language;\n      }\n    },\n    codeAttributes: {},\n\n    // Added in 5.0.0, throw errors on invalid language names\n    errorOnInvalidLanguage: false,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Template Engine to Nunjucks in Markdown/YAML Front Matter\nDESCRIPTION: This snippet demonstrates using the `templateEngineOverride` key within a template's front matter. It forces Eleventy to process the file using the Nunjucks (`njk`) engine, regardless of the file's extension (e.g., `.liquid`). This overrides the default behavior inferred from the file extension.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/template-overrides.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntemplateEngineOverride: njk\n---\n```\n\n----------------------------------------\n\nTITLE: Fetching and Caching a Remote Image as a Buffer (ESM)\nDESCRIPTION: Shows how to fetch a remote image file using Eleventy Fetch. The `type` is set to `\"buffer\"`, which returns the image data as a Node.js Buffer object. This buffer can then be used with image processing libraries like `sharp`. The image is cached for 1 day.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nlet url = \"https://www.zachleat.com/img/avatar-2017-big.png\";\nlet imageBuffer = await Fetch(url, {\n\tduration: \"1d\",\n\ttype: \"buffer\",\n});\n// Use imageBuffer as an input to the `sharp` plugin, for example\n\n// (Example truncated)\n```\n\n----------------------------------------\n\nTITLE: Using getAll() Method in Eleventy Collections\nDESCRIPTION: Demonstrates how to use the getAll() method to retrieve all content items in their original order. This method returns an array of all items in the collection without any sorting applied.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Unsorted items (in whatever order they were added)\n\televentyConfig.addCollection(\"allMyContent\", function (collectionsApi) {\n\t\treturn collectionsApi.getAll();\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Feed Plugin with Virtual Template (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add the Eleventy RSS feed plugin using the virtual template approach. It imports the feed plugin, and configures it in Eleventy to output an Atom feed with collection settings and feed metadata. Required dependencies include '@11ty/eleventy-plugin-rss' (v2+), Eleventy v3+, and 'njk' as a template format. The key parameters such as 'type', 'outputPath', and 'collection' control the type and content of the generated feed. Limitations: for advanced customization, the manual template method or additional configuration may be required.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/rss.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { feedPlugin } from \"@11ty/eleventy-plugin-rss\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(feedPlugin, {\n\t\ttype: \"atom\", // or \"rss\", \"json\"\n\t\toutputPath: \"/feed.xml\",\n\t\tcollection: {\n\t\t\tname: \"posts\", // iterate over `collections.posts`\n\t\t\tlimit: 10,     // 0 means no limit\n\t\t},\n\t\tmetadata: {\n\t\t\tlanguage: \"en\",\n\t\t\ttitle: \"Blog Title\",\n\t\t\tsubtitle: \"This is a longer description about your blog.\",\n\t\t\tbase: \"https://example.com/\",\n\t\t\tauthor: {\n\t\t\t\tname: \"Your Name\",\n\t\t\t\temail: \"\", // Optional\n\t\t\t}\n\t\t}\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Pug Plugin via NPM (sh)\nDESCRIPTION: Installs the @11ty/eleventy-plugin-pug package from npm to enable Pug templating support in Eleventy. This dependency must be present before adding the plugin to your Eleventy configuration. Run this command in your project root to add the plugin to your node_modules.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/pug.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @11ty/eleventy-plugin-pug\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Truthiness in Liquid via Eleventy\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the Liquid templating engine within an Eleventy project to use JavaScript's truthiness conventions. By setting `jsTruthy: true` via `eleventyConfig.setLiquidOptions`, empty strings (\\\"\\\") and the number zero (`0`) will be treated as falsy values, aligning Liquid's behavior more closely with JavaScript. This configuration is applied within the Eleventy configuration function.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.setLiquidOptions({\n\t\tjsTruthy: true,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Collection with addCollection in Eleventy\nDESCRIPTION: Shows how to define a basic collection in Eleventy's configuration file using the addCollection method. This example demonstrates an asynchronous collection creation that returns all content items.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// async-friendly\n\televentyConfig.addCollection(\"myCollectionName\", async (collectionsApi) => {\n\t\t// get unsorted items\n\t\treturn collectionsApi.getAll();\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Configuration before Build - Eleventy JavaScript\nDESCRIPTION: This snippet provides a sample 'init' async function for a template language extension in Eleventy configuration. The 'init' function runs once before compilation to perform setup tasks and has access to current configuration settings via 'this.config'. Use this function to set extension-wide state or perform setup actions required before file compilation. Inputs and outputs are context-dependent.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t// some configuration truncated …\n  init: async function() {\n    // has access to current configuration settings in `this.config`\n  },\n```\n\n----------------------------------------\n\nTITLE: Changing Default Time Zone for Date Parsing in Eleventy (JavaScript)\nDESCRIPTION: Demonstrates using `eleventyConfig.addDateParsing` in an Eleventy configuration file (`.eleventy.js`) to set a default time zone for date processing. It uses Luxon to handle both JavaScript Date objects (from YAML) and ISO date strings, converting them to the specified `TIME_ZONE` while preserving local time for JS Dates or interpreting ISO strings within that zone. Includes basic validation. Requires the 'luxon' package.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/dates.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DateTime } from \"luxon\";\n\n// See https://moment.github.io/luxon/#/zones?id=specifying-a-zone\nconst TIME_ZONE = \"America/Chicago\";\n\nexport default function(eleventyConfig) {\n\televentyConfig.addDateParsing(function(dateValue) {\n\t\tlet localDate;\n\t\tif(dateValue instanceof Date) { // and YAML\n\t\t\tlocalDate = DateTime.fromJSDate(dateValue, { zone: \"utc\" }).setZone(TIME_ZONE, { keepLocalTime: true });\n\t\t} else if(typeof dateValue === \"string\") {\n\t\t\tlocalDate = DateTime.fromISO(dateValue, { zone: TIME_ZONE });\n\t\t}\n\t\tif (localDate?.isValid === false) {\n\t\t\tthrow new Error(`Invalid \\`date\\` value (${dateValue}) is invalid for ${this.page.inputPath}: ${localDate.invalidReason}`);\n\t\t}\n\t\treturn localDate;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Input Directory in Eleventy Configuration\nDESCRIPTION: Demonstrates how to set the input directory using the setInputDirectory() method in an Eleventy configuration file. This method defines the source directory for templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Order matters, put this at the top of your configuration file.\n  eleventyConfig.setInputDirectory(\"views\");\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Eleventy Image In-Memory Cache Reuse in JavaScript\nDESCRIPTION: This JavaScript code demonstrates the in-memory caching behavior of the Eleventy Image utility. Calling `Image()` multiple times with the exact same source path and options returns the identical pending promise, preventing redundant processing.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from \"@11ty/eleventy-img\";\n\nlet stats1 = Image(\"./test/bio-2017.jpg\");\nlet stats2 = Image(\"./test/bio-2017.jpg\");\n\nconsole.assert(stats1 === stats2, \"The same promise\");\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy in Dry-Run Mode (Bash)\nDESCRIPTION: This Bash command tells Eleventy to simulate a build without writing any files to disk, using the --dryrun flag. It's primarily used for debugging or testing configuration. Dependencies: Eleventy installed via Node.js package manager. Input: project files; Output: No files written, logs processing steps.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run Eleventy but don’t write any files\\nnpx @11ty/eleventy --dryrun\n```\n\n----------------------------------------\n\nTITLE: Generating Image HTML using Image.generateHTML in Shortcode\nDESCRIPTION: Defines an Eleventy 'image' shortcode that first generates image metadata using `Image()` and then separately constructs the HTML markup using the `Image.generateHTML()` utility function. This approach offers more control over the final HTML compared to `returnType: \"html\"`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-shortcodes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addShortcode(\"image\", async function (src, alt) {\n\t\tlet metadata = await Image(src, {\n\t\t\twidths: [600],\n\t\t\tformats: [\"jpeg\"],\n\t\t});\n\n\t\treturn Image.generateHTML(metadata, {\n\t\t\talt, // required\n\t\t});\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Data in Eleventy JavaScript Functions\nDESCRIPTION: Shows how to access Eleventy page data values like URL, input path, and file slug within JavaScript functions. This functionality is available in Eleventy version 0.11.0 and above when not using arrow functions.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addJavaScriptFunction(\"myFunction\", function () {\n\t\t// Available in 0.11.0 and above\n\t\tconsole.log(this.page);\n\n\t\t// For example:\n\t\tconsole.log(this.page.url);\n\t\tconsole.log(this.page.inputPath);\n\t\tconsole.log(this.page.fileSlug);\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Layout Template with Content Placeholder - Nunjucks\nDESCRIPTION: This Nunjucks file provides a minimal HTML layout structure using a placeholder variable for rendering the child template’s content. There are no external dependencies except for Nunjucks template support and the Eleventy build process. The key parameter is the 'content' variable, which will be replaced by the content of the child template. Output is a wrapped HTML document. The use of the 'safe' filter ensures that the HTML is not double-escaped.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/layouts.md#2025-04-23_snippet_1\n\nLANGUAGE: Nunjucks\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n  <body>\\n    {{ content | safe }}\\n  </body>\\n</html>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Formats in Eleventy - JavaScript\nDESCRIPTION: Demonstrates how to define which template formats Eleventy should transform via the configuration API. Uses the setTemplateFormats method to overwrite and addTemplateFormats to extend the default array of supported formats. Accepts both string and array syntax for supported extension names, ensuring flexible integration for various template engines. Inputs are format names (e.g., 'html', 'liquid', 'njk'); outputs are internal configuration changes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\t// Reset to this value\\n\\televentyConfig.setTemplateFormats(\\\"html,liquid,njk\\\");\\n\\n\\t// Additive to existing\\n\\televentyConfig.addTemplateFormats(\\\"pug,haml\\\");\\n\\n\\t// Or:\\n\\t// eleventyConfig.setTemplateFormats([ \\\"html\\\", \\\"liquid\\\", \\\"njk\\\" ]);\\n\\t// eleventyConfig.addTemplateFormats([ \\\"pug\\\", \\\"haml\\\" ]);\\n};\n```\n\n----------------------------------------\n\nTITLE: Skipping Sass Partial Files (_ prefix) in Eleventy Compilation (JavaScript)\nDESCRIPTION: This snippet illustrates how to prevent certain files from being processed and written to the output directory, implementing the Sass convention for partials (filenames starting with an underscore). It checks if the `inputPath` filename starts with '_' using `path.parse`. If it does, the `compile` function returns early (implicitly returning `undefined`), which signals Eleventy to skip rendering this template.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n    // some configuration truncated …\n    compile: async function (inputContent, inputPath) {\n      let parsed = path.parse(inputPath);\n      if(parsed.name.startsWith(\"_\")) {\n        return;\n      }\n\n      let result = sass.compileString(inputContent);\n\n      return async (data) => {\n        return result.css;\n      };\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy v2.0.0 via npm\nDESCRIPTION: Commands to install the latest version of Eleventy (v2.0.0) either as a local project dependency or globally. Local installation is recommended for project-specific usage, while global installation makes the Eleventy CLI available system-wide.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-02-08-eleventy-v2.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Local project\nnpm install @11ty/eleventy@latest\n\n# Global install\nnpm install @11ty/eleventy@latest -g\n```\n\n----------------------------------------\n\nTITLE: Defining Data Cascade Priority for Custom Formats in Eleventy (JavaScript)\nDESCRIPTION: This snippet demonstrates how the order of `addDataExtension` calls affects priority in Eleventy's data cascade. Custom formats registered later take precedence over earlier ones. In this example, if both `.toml` and `.yaml` files provide data for the same template with overlapping keys, the data from the `.yaml` file will be used because its extension was added last. Requires `js-yaml` and `@iarna/toml`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-custom.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport toml from \"@iarna/toml\";\nimport yaml from \"js-yaml\";\n\nexport default function (eleventyConfig) {\n\t// Lower priority\n\televentyConfig.addDataExtension(\"toml\", (contents) => toml.parse(contents));\n\n\t// Higher priority\n\televentyConfig.addDataExtension(\"yaml\", (contents) => yaml.load(contents));\n};\n```\n\n----------------------------------------\n\nTITLE: Selectively Excluding Content from Specific Collections\nDESCRIPTION: Example showing how to exclude content from specific collections by providing an array of tag names to eleventyExcludeFromCollections. Added in Eleventy 3.0.0-alpha.1.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\neleventyExcludeFromCollections: [\"post\"]\n---\n\nThis will be available in `collections.all` but not `collections.post`.\n```\n\n----------------------------------------\n\nTITLE: Configuring I18n Plugin in Eleventy - Nunjucks\nDESCRIPTION: This snippet shows how to add and configure Eleventy’s Internationalization plugin within the configuration file. It enables locale-aware filters and data properties for templates, making it possible to access current language information and generate localized links. This requires Eleventy version 2.0.0-canary.13 or newer; plugin options like defaultLanguage, errorMode, and directories can be customized.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/i18n.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% include \"snippets/plugins/i18n-install.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Using Asset Bucketing with Bundles in HTML Template\nDESCRIPTION: Illustrates asset bucketing by adding code to and retrieving code from a named bundle bucket. By passing a second argument to the css shortcode (e.g. 'defer'), the CSS is categorized into a bucket; getBundle and getBundleFileUrl can then target the same bucket for selective output. Requires Eleventy with the Bundle plugin. Parameters include the bundle name and the bucket identifier as strings.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- This goes into a `defer` bucket -->\\n{% css \\\"defer\\\" %}\\nem { font-style: italic; }\\n{% endcss %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Retrieve the `defer` bucket code -->\\n<style>{% getBundle \\\"css\\\", \\\"defer\\\" %}</style>\\n\\n<!-- Or: -->\\n<link rel=\\\"stylesheet\\\" href=\\\"{% getBundleFileUrl 'css', 'defer' %}\\\">\n```\n\n----------------------------------------\n\nTITLE: Registering Sass Dependencies for Incremental Builds in Eleventy (JavaScript)\nDESCRIPTION: This code shows how to register dependencies for custom template languages to enable Eleventy's compilation cache and incremental builds. Within the `compile` function for Sass, it calls `this.addDependencies`, passing the current template's `inputPath` and an array of dependent URLs obtained from the Sass compile result (`result.loadedUrls`).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n    // some configuration truncated …\n    compile: function (inputContent, inputPath) {\n      let result = sass.compileString(inputContent);\n\n      this.addDependencies(inputPath, result.loadedUrls);\n\n      return async (data) => {\n        return result.css;\n      };\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy Mustache Plugin via npm\nDESCRIPTION: Demonstrates the shell command required to install the official Eleventy Mustache plugin using npm. This package is necessary to enable Mustache templating in Eleventy v3+ projects, as it was moved out of the core.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/mustache.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @11ty/eleventy-plugin-mustache\n```\n\n----------------------------------------\n\nTITLE: Implementing Drafts Workflow with Preprocessor in Eleventy\nDESCRIPTION: This example uses the Preprocessor API to implement a Drafts workflow. It excludes files marked as drafts from full builds but includes them in serve or watch modes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config-preprocessors.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n  eleventyConfig.addPreprocessor(\"drafts\", \"*\", (data, content) => {\n\t\tif(data.draft && process.env.ELEVENTY_RUN_MODE === \"build\") {\n\t\t\treturn false;\n\t\t}\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Nunjucks Environment Options in Eleventy (JavaScript)\nDESCRIPTION: This snippet demonstrates how to override default Nunjucks environment options using the `setNunjucksEnvironmentOptions` method within the Eleventy configuration function. It shows setting `throwOnUndefined` to true and `autoescape` to false (with a warning against disabling autoescaping). This configuration applies globally to Nunjucks templates processed by Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.setNunjucksEnvironmentOptions({\n\t\tthrowOnUndefined: true,\n\t\tautoescape: false, // warning: don’t do this!\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Using outdent Library to Remove Indentation in Returned Shortcode Strings - JavaScript\nDESCRIPTION: This JavaScript snippet shows the use of the outdent npm package to strip indentation from template literals in Eleventy shortcodes. This avoids the problem of unwanted indented code blocks when included in markdown files. Dependency: \\'outdent\\' npm package.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ✅ This is also acceptable\neleventyConfig.addShortcode(\\\"alsoGoodShortcode\\\", function () {\n\treturn outdent`\n    This will not be a code block in a markdown file.\n`;\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Optimized Image HTML Markup with Eleventy Image API (HTML)\nDESCRIPTION: This snippet shows the HTML string returned when using the Eleventy Image API with the returnType option set to 'html'. The generated <picture> element contains <source> and <img> tags for multiple formats, supporting responsive images. The only required dependency is the Eleventy Image library, with valid 'returnType' option set; input parameters affect the output markup.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-js.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<picture><source type=\\\"image/webp\\\" srcset=\\\"/img/yL0QoCVMHj-300.webp 300w\\\"><img alt=\\\"\\\" src=\\\"/img/yL0QoCVMHj-300.jpeg\\\" width=\\\"300\\\" height=\\\"300\\\"></picture>\n```\n\n----------------------------------------\n\nTITLE: Advanced JavaScript Computed Examples\nDESCRIPTION: Shows various ways to use JavaScript for computed properties including template strings, functions, async functions, and promises.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-computed.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\televentyComputed: {\n\t\tmyTemplateString: \"This is assumed to be a template string!\",\n\t\tmyString: (data) => \"This is a string!\",\n\t\tmyFunction: (data) => `This is a string using ${data.someValue}.`,\n\t\tmyAsyncFunction: async (data) => await someAsyncThing(),\n\t\tmyPromise: (data) => {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tsetTimeout(() => resolve(\"100ms DELAYED HELLO\"), 100);\n\t\t\t});\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Bundle on a Page Using getBundle Shortcode in HTML\nDESCRIPTION: Demonstrates how to fetch the content of a CSS bundle and inject it into a page using the getBundle shortcode in an HTML template. CSS added after getBundle will also be included, reflecting the accumulated bundle state. No dependencies are needed besides enabling the Bundle plugin in Eleventy. The input is the bundle name ('css'), and the output is the CSS bundle inlined within a <style> tag.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Use this *anywhere*: a layout file, content template, etc -->\\n<style>{% getBundle \\\"css\\\" %}</style>\\n\\n<!--\\nYou can add more code to the bundle after calling\\ngetBundle and it *will* be included.\\n-->\\n{% css %}\\n* { color: orange; }\\n{% endcss %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Paginated Permalinks - YAML Front Matter with Nunjucks Logic\nDESCRIPTION: Utilizes inline Nunjucks template logic in the permalink configuration for custom output paths based on pagination state. Supports conditional page name prefixing and is helpful for advanced output URL structuring in Eleventy templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n---\npermalink: \\\"different/{% if pagination.pageNumber > 0 %}page-{{ pagination.pageNumber + 1 }}/{% endif %}index.html\\\"\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Data within Liquid Shortcodes in Eleventy (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to access Eleventy's `page` data object from within a Liquid shortcode function (requires Eleventy 0.11.0+). By using a standard `function` declaration (not an arrow function), the `this` context inside the shortcode refers to an object containing the `page` variable, allowing access to properties like `this.page.url`, `this.page.inputPath`, etc.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addLiquidShortcode(\"myShortcode\", function () {\n\t\t// Available in 0.11.0 and above\n\t\tconsole.log(this.page);\n\n\t\t// For example:\n\t\tconsole.log(this.page.url);\n\t\tconsole.log(this.page.inputPath);\n\t\tconsole.log(this.page.fileSlug);\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy Navigation Plugin via npm\nDESCRIPTION: This command installs the Eleventy Navigation plugin package from npm. This is the first step required to use the plugin in an Eleventy project. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @11ty/eleventy-navigation\n```\n\n----------------------------------------\n\nTITLE: Implementing RSS Feed Template in Eleventy\nDESCRIPTION: This template creates a standard RSS 2.0 XML feed for blog posts. It configures the permalink, metadata settings, and loops through the posts collection to generate items with title, link, description, publication date, and other required RSS elements.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/rss.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n---json\n{\n  \"permalink\": \"feed.xml\",\n  \"eleventyExcludeFromCollections\": true,\n  \"metadata\": {\n    \"title\": \"My Blog about Boats\",\n    \"description\": \"I am writing about my experiences as a naval navel-gazer.\",\n    \"language\": \"en\",\n    \"base\": \"https://example.com/\",\n    \"author\": {\n      \"name\": \"Boaty McBoatFace\"\n    }\n  }\n}\n---\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rss version=\"2.0\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xml:base=\"{{ metadata.base | addPathPrefixToFullUrl }}\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n  <channel>\n    <title>{{ metadata.title }}</title>\n    <link>{{ metadata.base | addPathPrefixToFullUrl }}</link>\n    <atom:link href=\"{{ permalink | htmlBaseUrl(metadata.base) }}\" rel=\"self\" type=\"application/rss+xml\" />\n    <description>{{ metadata.description }}</description>\n    <language>{{ metadata.language or page.lang }}</language>\n    {%- for post in collections.posts | reverse %}\n    {%- set absolutePostUrl = post.url | htmlBaseUrl(metadata.base) %}\n    <item>\n      <title>{{ post.data.title }}</title>\n      <link>{{ absolutePostUrl }}</link>\n      <description>{{ post.content | renderTransforms(post.data.page, metadata.base) }}</description>\n      <pubDate>{{ post.date | dateToRfc822 }}</pubDate>\n      <dc:creator>{{ metadata.author.name }}</dc:creator>\n      <guid>{{ absolutePostUrl }}</guid>\n    </item>\n    {%- endfor %}\n  </channel>\n</rss>\n```\n\n----------------------------------------\n\nTITLE: Creating a WebC Component with CSS and JavaScript\nDESCRIPTION: Example of a WebC component that includes bundlable CSS and JavaScript. This demonstrates both inline styles/scripts and file references.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<style>\n\t/* This is component CSS */\n</style>\n<script>\n\t/* This is component JS */\n</script>\n\n<!-- Local file references work too -->\n<link rel=\"stylesheet\" href=\"my-file.css\" />\n<script src=\"my-file.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Linter in Eleventy (JavaScript)\nDESCRIPTION: This snippet demonstrates how to register a custom linter in Eleventy by using the addLinter API. The linter function, which may be synchronous or asynchronous, has access to both content and the Eleventy template context (such as input and output paths, and Eleventy's page variable in version 2.0+). No external dependencies are needed. Inputs are the processed content; outputs are console logs or any custom analysis/reporting. Ensure that Eleventy version supports the used APIs and context.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\t// Sync or async\\n\\televentyConfig.addLinter(\"linter-name\", async function (content) {\\n\\t\\tconsole.log(this.inputPath);\\n\\t\\tconsole.log(this.outputPath);\\n\\n\\t\\t// Eleventy 2.0+ has full access to Eleventy’s `page` variable\\n\\t\\tconsole.log(this.page.inputPath);\\n\\t\\tconsole.log(this.page.outputPath);\\n\\t});\\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Nunjucks and Universal Shortcodes in Eleventy (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add shortcodes within the Eleventy configuration. It shows defining a Nunjucks-specific shortcode using `addNunjucksShortcode` and a universal shortcode (for Liquid, Nunjucks, 11ty.js) using `addShortcode`. The universal example provides a simple user profile HTML structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n  // Nunjucks Shortcode\n  eleventyConfig.addNunjucksShortcode(\"user\", function(name, twitterUsername) { /* … */ });\n\n  // Universal Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)\n  eleventyConfig.addShortcode(\"user\", function(name, twitterUsername) {\n    return `<div class=\"user\">\n<div class=\"user_name\">${name}</div>\n<div class=\"user_twitter\">@${twitterUsername}</div>\n</div>`;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Transform to Eleventy Configuration in JavaScript\nDESCRIPTION: This snippet defines a custom transform in Eleventy by adding a function (which can be synchronous or asynchronous) using eleventyConfig.addTransform. The function has access to the Eleventy-specific page variable via this.page, allowing introspection of the input and output file paths. The returned value should be the processed (or original) content, and is crucial for the transform's behavior. No third-party dependencies are required for this example, and the key parameters are the transform name and the content to process.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/transforms.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Can be sync or async\n\televentyConfig.addTransform(\"transform-name\", async function (content) {\n\t\tconsole.log(this.page.inputPath);\n\t\tconsole.log(this.page.outputPath);\n\n\t\treturn content; // no changes made.\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of Chained Layouts - Eleventy - HTML\nDESCRIPTION: Shows the final HTML produced after applying multiple layout wrappers in Eleventy. Displays proper document structure, metadata, and a main element wrapping the blog post header. Inputs are content and nested layout templates; output is a browser-ready HTML file. Designed for accessibility (uses <main>) and responsive design (viewport meta tag).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/layout-chaining.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Rad Blog</title>\\n  </head>\\n  <body>\\n    <main>\\n      <h1>My Rad Markdown Blog Post<h1>\\n    </main>\\n  </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Load Paths using inputPath in Eleventy (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `inputPath` argument within the `compile` function to configure Sass's `loadPaths`. This allows Sass `@use`, `@forward`, and `@import` directives to resolve paths relative to the current file's directory and the Eleventy includes directory (`this.config.dir.includes`). It uses the Node.js `path` module to parse the `inputPath`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\t\t// some configuration truncated …\n    compile: function (inputContent, inputPath) {\n      let parsed = path.parse(inputPath);\n\n      let result = sass.compileString(inputContent, {\n        loadPaths: [\n          parsed.dir || \".\",\n          this.config.dir.includes\n        ]\n      });\n\n      return (data) => {\n        return result.css;\n      };\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding a markdown-it Plugin to Eleventy Markdown Pipeline - JavaScript\nDESCRIPTION: Here, an external markdown-it plugin (e.g., markdown-it-emoji) is integrated into Eleventy's Markdown processing via the amendLibrary method. The required dependency must be installed via npm. The \\'use\\' method attaches the plugin to extend Markdown syntax support. Inputs are the Eleventy config and the plugin, output is extended markdown processing capabilities.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst markdownItEmoji = require(\\\"markdown-it-emoji\\\");\n\nmodule.exports = function (eleventyConfig) {\n\televentyConfig.amendLibrary(\\\"md\\\", (mdLib) => mdLib.use(markdownItEmoji));\n};\n```\n\n----------------------------------------\n\nTITLE: Async Data Fetching in Eleventy\nDESCRIPTION: Example demonstrating async data fetching using async functions and promises.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-js.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchUserData(username) {\n\t// do some async things\n\treturn username;\n}\n\nexport default async function () {\n\tlet user1 = await fetchUserData(\"user1\");\n\tlet user2 = await fetchUserData(\"user2\");\n\n\treturn [user1, user2];\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Class with Optional Data Method and Render in Eleventy Template - JavaScript\nDESCRIPTION: Exports a class providing a 'data' method to inject template-scoped data, similar to front matter, and a 'render' method for output. No dependencies. 'data' method can be regular, async, or getter; overrides other data sources. Output: fixed HTML using class-scoped data.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Test {\n\t// or `async data() {`\n\t// or `get data() {`\n\tdata() {\n\t\treturn {\n\t\t\tname: \"Ted\",\n\t\t\tlayout: \"teds-rad-layout\",\n\t\t\t// … other front matter keys\n\t\t};\n\t}\n\n\trender({ name }) {\n\t\t// will always be \"Ted\"\n\t\treturn `<p>${name}</p>`;\n\t}\n}\n\nexport default Test;\n```\n\n----------------------------------------\n\nTITLE: Mapping Localized Output Files to a Single Page URL in Eleventy JavaScript\nDESCRIPTION: Maps multiple localized content files (such as `about.en.html` and `about.es.html`) to a single page URL (`/about/`) by transforming the URL property in Eleventy. Implements logic in `addUrlTransform` to identify URLs with language-code file extensions using a regex match and slices the extension, appending a trailing slash. Appropriate when using internationalization and server-side redirects. Skips URL transformation by returning undefined if conditions do not match.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addUrlTransform(({ url }) => {\n\t\t// `url` is guaranteed to be a string here even if you’re using `permalink: false`\n\t\tif (url.match(/\\.[a-z]{2}\\.html$/i)) {\n\t\t\treturn url.slice(0, -1 * \".en.html\".length) + \"/\";\n\t\t}\n\n\t\t// Returning undefined skips the url transform.\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy with WebC and Image Plugins in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to configure an Eleventy project (`eleventyConfig`) to use both the `@11ty/eleventy-plugin-webc` and `@11ty/eleventy-img` plugins. It registers the `<eleventy-image>` component globally for WebC via `components: [\"npm:@11ty/eleventy-img/*.webc\"]` and sets global default options for the image plugin, such as output formats (`webp`, `jpeg`), the base URL path for images (`/img/`), and default HTML attributes (`loading: \"lazy\"`, `decoding: \"async\"`). Requires importing the necessary plugins (`eleventyWebcPlugin`, `eleventyImagePlugin`). The `outputDir` for images is resolved automatically.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-webc.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport eleventyWebcPlugin from \"@11ty/eleventy-plugin-webc\";\nimport { eleventyImagePlugin } from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\t// WebC\n\televentyConfig.addPlugin(eleventyWebcPlugin, {\n\t\tcomponents: [\n\t\t\t// …\n\t\t\t// Add as a global WebC component\n\t\t\t\"npm:@11ty/eleventy-img/*.webc\",\n\t\t],\n\t});\n\n\t// Image plugin\n\televentyConfig.addPlugin(eleventyImagePlugin, {\n\t\t// Set global default options\n\t\tformats: [\"webp\", \"jpeg\"],\n\t\turlPath: \"/img/\",\n\n\t\t// Notably `outputDir` is resolved automatically\n\t\t// to the project output directory\n\n\t\tdefaultAttributes: {\n\t\t\tloading: \"lazy\",\n\t\t\tdecoding: \"async\",\n\t\t},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Deep Merge in Eleventy\nDESCRIPTION: This snippet shows how to configure the Data Deep Merge feature in Eleventy. It demonstrates both opting out in version 1.0 and opting in for version 0.x.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-deep-merge.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// defaults to true in 1.0, use false to opt-out\n\televentyConfig.setDataDeepMerge(false);\n\n\t// requires opt-in for 0.x\n\televentyConfig.setDataDeepMerge(true);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Liquid and Universal Filters in Eleventy Configuration (JavaScript)\nDESCRIPTION: Provides an Eleventy configuration example (`.eleventy.js`) showing how to define custom Liquid-specific filters (sync and async) using `addLiquidFilter` and Universal filters (available in Liquid, Nunjucks, 11ty.js) using `addFilter`. Both synchronous and asynchronous filters are supported.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n  // Liquid Filter\n  eleventyConfig.addLiquidFilter(\"myLiquidFilter\", function(myVariable) { /* … */ });\n\n  // Async-friendly too\n  eleventyConfig.addLiquidFilter(\"myAsyncLiquidFilter\", async function(myVariable) { /* … */ });\n\n  // Universal filters (Adds to Liquid, Nunjucks, 11ty.js)\n  eleventyConfig.addFilter(\"myFilter\", function(myVariable) { /* … */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Date in Eleventy Front Matter (YAML)\nDESCRIPTION: Demonstrates how to assign a specific date to content using the `date` key in YAML front matter. This overrides the default date (file creation) and influences sorting in collections. The format follows YAML date standards.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/dates.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndate: 2016-01-01\n---\n```\n\n----------------------------------------\n\nTITLE: Registering a CSS Minifier Filter in Eleventy Configuration - JavaScript\nDESCRIPTION: This JavaScript snippet registers a 'cssmin' filter in the Eleventy configuration, using the 'clean-css' package to minify CSS code passed through the filter. The snippet requires the 'clean-css' NPM package as a dependency and should be included in the Eleventy config file. The filter accepts CSS code as a parameter and returns its minified version, enabling inline usage in templates for performance benefit. Expected input is a CSS string and the output is the minified CSS as a string.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/inline-css.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport CleanCSS from \\\"clean-css\\\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addFilter(\\\"cssmin\\\", function (code) {\n\t\treturn new CleanCSS({}).minify(code).styles;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Using renderFile Shortcode in Nunjucks/Liquid/JavaScript\nDESCRIPTION: Illustrates how to use the `renderFile` shortcode in Nunjucks, Liquid, and JavaScript templates to render the content of a specified template file (e.g., `_includes/markdown.md`). The path is relative to the project root. The template engine is inferred from the file extension.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/render.md#2025-04-23_snippet_4\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% renderFile \"_includes/markdown.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% renderFile \"_includes/markdown.md\" %}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* 11ty.js */\nmodule.exports = async function(data) {\n  return await this.renderFile(\"_includes/markdown.md\");\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Global WebC Components in Eleventy Config\nDESCRIPTION: Configuration code showing how to register global WebC components that can be used without importing. Components can be specified as a string, array, or npm prefix aliases.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluginWebc from \"@11ty/eleventy-plugin-webc\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(pluginWebc, {\n\t\t// Glob to find no-import global components\n\t\t// This path is relative to the project-root!\n\t\t// The default value is shown:\n\t\tcomponents: \"_components/**/*.webc\",\n\n\t\t// or an Array (Eleventy WebC v0.9.2+)\n\t\tcomponents: [\n\t\t\t\"_components/**/*.webc\",\n\t\t\t\"npm:@11ty/is-land/*.webc\",\n\t\t\t\"npm:@11ty/eleventy-plugin-syntaxhighlight/*.webc\",\n\t\t],\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Transforms via Eleventy Plugins in JavaScript\nDESCRIPTION: This snippet demonstrates adding transforms using the Eleventy plugin system by passing a function to eleventyConfig.addPlugin. Plugin transforms are inserted during a dedicated plugin configuration stage, and their execution order can interact with user-defined transforms in the config file. No external dependencies are required, and each transform is identified by a name and an empty callback in this sample.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/transforms.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\neleventyConfig.addPlugin(eleventyConfig => {\n\televentyConfig.addTransform(\"third\", () => {});\n});\neleventyConfig.addTransform(\"first\", () => {});\neleventyConfig.addTransform(\"second\", () => {});\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous Eleventy Image Shortcode (Deprecated)\nDESCRIPTION: Defines a synchronous Eleventy shortcode 'myImage' using the deprecated `Image.statsSync` method from '@11ty/eleventy-img'. This approach was used for environments not supporting asynchronous shortcodes. It initiates image generation asynchronously but retrieves metadata synchronously and generates HTML using `Image.generateHTML`. This method is deprecated as of Eleventy Image v4.0.0.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-shortcodes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addShortcode(\"myImage\", function imageShortcode(src, cls, alt, widths = [\"auto\"], sizes = \"100vh\") {\n\t\tlet options = {\n\t\t\twidths,\n\t\t\tformats: [\"jpeg\"],\n\t\t};\n\n\t\t// generate images: this is async but we don’t wait\n\t\tImage(src, options);\n\n\t\tlet imageAttributes = {\n\t\t\tclass: cls,\n\t\t\talt,\n\t\t\tsizes,\n\t\t\tloading: \"lazy\",\n\t\t\tdecoding: \"async\",\n\t\t};\n\t\t// get metadata even if the images are not fully generated yet\n\t\tlet metadata = Image.statsSync(src, options);\n\t\treturn Image.generateHTML(metadata, imageAttributes);\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Parent Page Layout Structure - Eleventy/Nunjucks - HTML\nDESCRIPTION: Outlines a basic HTML skeleton for a parent layout in Eleventy, using Nunjucks templating for content and title injection. Assumes Eleventy and Nunjucks are configured; template uses double curly braces for variable interpolation. Expects title and content parameters, and safely renders content inside the body using the 'safe' Nunjucks filter. No explicit limitations, but expects proper escaping and correct template usage.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/layout-chaining.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n\\t<head>\\n\\t\\t<meta charset=\\\"utf-8\\\" />\\n\\t\\t<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n\\t\\t<title>{{title}}</title>\\n\\t</head>\\n\\t<body>\\n\\t\\t{{ content | safe }}\\n\\t</body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining the `page` Variable Structure - JavaScript\nDESCRIPTION: This snippet demonstrates the complete structure of the `page` variable as provided by Eleventy, showing all its available properties, including information about the current page's URL, file path, date, file extension, template syntax, raw input, and language (when using the i18n plugin). Required dependencies: none, but the availability of certain fields depends on Eleventy version and plugins (notably i18n for `lang`). The input is implicit (the running template context), and the output context is the page-level data object available in templates and shortcodes. Limitations: Property availability depends on configuration and Eleventy version; e.g., `lang` requires the i18n plugin.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-eleventy-supplied.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst page = {\n\t// URL can be used in <a href> to link to other templates\n\t// NOTE: This value will be `false` if `permalink` is set to `false`.\n\turl: \"/current/page/myFile/\",\n\n\t// For permalinks: inputPath filename minus template file extension\n\tfileSlug: \"myFile\",\n\n\t// For permalinks: inputPath minus template file extension\n\tfilePathStem: \"/current/page/myFile\",\n\n\t// JS Date object for current page (used to sort collections)\n\tdate: new Date(),\n\n\t// The path to the original source file for the template\n\t// NOTE: this includes your input directory path!\n\tinputPath: \"./current/page/myFile.md\",\n\n\t// Depends on your output directory (the default is _site)\n\t// You should probably use `url` instead.\n\t// NOTE: This value will be `false` if `permalink` is set to `false`.\n\toutputPath: \"./_site/current/page/myFile/index.html\",\n\n\t// Useful with `page.filePathStem` when using custom file extensions.\n\toutputFileExtension: \"html\",\n\n\t// Comma separated list of template syntaxes processing this template\n\t// Added in 2.0+\n\ttemplateSyntax: \"liquid,md\",\n\n\t// The raw unparsed/unrendered plaintext content for the current template\n\t// Added in 3.0+\n\trawInput: \"<!doctype html>…\"\n\n\t// Available in 2.0 with the i18n plugin\n\t// The default is the value of `defaultLanguage` passed to the i18n plugin\n\tlang: \"\",\n};\n```\n\n----------------------------------------\n\nTITLE: Minifying HTML Output using html-minifier-terser in Eleventy (JavaScript)\nDESCRIPTION: This example demonstrates how to integrate the html-minifier-terser library as a dependency to automatically minify HTML files during Eleventy builds. The transform checks outputPath to ensure only HTML files are processed, applies minification options via htmlmin.minify, and returns the resulting string. If the output is not HTML, the content is returned unmodified. Required parameters include the transformation name (htmlmin), the content string, and access to page context (this.page). Dependency: html-minifier-terser.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/transforms.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport htmlmin from \"html-minifier-terser\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addTransform(\"htmlmin\", function (content) {\n\t\tif ((this.page.outputPath || \"\").endsWith(\".html\")) {\n\t\t\tlet minified = htmlmin.minify(content, {\n\t\t\t\tuseShortDoctype: true,\n\t\t\t\tremoveComments: true,\n\t\t\t\tcollapseWhitespace: true,\n\t\t\t});\n\n\t\t\treturn minified;\n\t\t}\n\n\t\t// If not an HTML output, return content as-is\n\t\treturn content;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Memoizing Filter Functions with External Memoization Library - Eleventy Configuration - JavaScript\nDESCRIPTION: Shows usage of the \\\"memoize\\\" package to cache filter computation results, optimizing repeated calls with identical input. Assumes \\\"memoize\\\" and any encode function are imported or available. The resulting filter (\\\"htmlEntities\\\") is globally registered for all supported template engines. Limitations: Ensure side-effect-free computation for correctness.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport memoize from \"memoize\";\n\nexport default function(eleventyConfig) {\n\televentyConfig.addFilter(\"htmlEntities\", memoize(str => {\n\t\treturn encode(str);\n\t}));\n};\n```\n\n----------------------------------------\n\nTITLE: Validating 'draft' Property Using Zod in Eleventy\nDESCRIPTION: This code snippet demonstrates how to use the Zod library to validate the 'draft' property in Eleventy's Data Cascade. It ensures that 'draft' is either a boolean or undefined, throwing an error if the validation fails.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-validate.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { z } from \"zod\";\nimport { fromZodError } from 'zod-validation-error';\n\nexport default {\n\televentyDataSchema: function(data) {\n\t\tlet result = z.object({\n\t\t\tdraft: z.boolean().or(z.undefined()),\n\t\t}).safeParse(data);\n\n\t\tif(result.error) {\n\t\t\tthrow fromZodError(result.error);\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Aliasing Paginated Items with Chunk Size - Eleventy Nunjucks Template\nDESCRIPTION: Shows how to alias paginated items when pagination chunk size is greater than one. The alias maps to an array representing the data chunk for each page. Useful for producing multi-item output files in paginated Nunjucks templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_17\n\nLANGUAGE: jinja2\nCODE:\n```\n{% include \\\"snippets/pagination/alias-size.njk\\\" %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Eleventy Image In-Memory Cache with Different Options in JavaScript\nDESCRIPTION: This JavaScript code shows that the Eleventy Image in-memory cache distinguishes between calls with different options. Calling `Image()` with the same source path but different options (like `widths`) results in a new, distinct promise, triggering separate processing if needed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from \"@11ty/eleventy-img\";\n\nlet stats1 = Image(\"./test/bio-2017.jpg\");\nlet stats2 = Image(\"./test/bio-2017.jpg\", { widths: [300] });\n\nconsole.assert(stats1 !== stats2, \"A different promise\");\n```\n\n----------------------------------------\n\nTITLE: Using Nunjucks `highlight` Shortcode for Diffs\nDESCRIPTION: Shows how to use the Nunjucks `highlight` paired shortcode with a `diff-` prefixed language (e.g., `diff-js`) to highlight changes in code. Lines prefixed with `+` are marked as additions, and lines prefixed with `-` are marked as deletions.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/syntaxhighlight.md#2025-04-23_snippet_6\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% highlight \"diff-js\" %}\n+function myFunction() {\n   // …\n-  return true;\n }\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Incremental Rebuild Matching for Template Dependencies\nDESCRIPTION: This code demonstrates the default implementation of the isIncrementalMatch function, which determines if a modified file is relevant to a template file during watch/serve rebuilds in Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n\t// some configuration truncated …\n  // Called once for each template (matching this custom template's file extension) in your project.\n  isIncrementalMatch: function(modifiedFile) {\n    // is modifiedFile relevant to this.inputPath?\n    if (this.isFileRelevantToInputPath) {\n      // True if they are the same file\n      // Or if they are related by any `addDependencies` relationships\n      return true;\n    }\n\n    // If `modifiedFile` is not a full template (maybe an include or layout)\n    // and we have no record of any dependencies for this file, we re-render everything\n    if (!this.doesFileHaveDependencies && !this.isFullTemplate) {\n      return true;\n    }\n\n    // Skip it\n    return false;\n  },\n```\n\n----------------------------------------\n\nTITLE: Registering the Eleventy Vite Plugin with Advanced Options\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the Eleventy Vite plugin with custom options. It imports the plugin and registers it using `eleventyConfig.addPlugin`, passing a second argument object to customize settings like the temporary folder name (`tempFolderName`), Eleventy Dev Server options (`serverOptions`), and various Vite-specific configurations (`viteOptions`) for server, build, and module resolution (including aliasing `node_modules`). Requires the `path` module for `path.resolve`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/server-vite.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport EleventyVitePlugin from \"@11ty/eleventy-plugin-vite\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(EleventyVitePlugin, {\n    tempFolderName: \".11ty-vite\", // Default name of the temp folder\n\n    // Options passed to the Eleventy Dev Server\n    // e.g. domdiff, enabled, etc.\n\n    // Added in Vite plugin v2.0.0\n    serverOptions: {},\n\n    // Defaults are shown:\n    viteOptions: {\n      clearScreen: false,\n      appType: \"mpa\", // New in v2.0.0\n\n      server: {\n        mode: \"development\",\n        middlewareMode: true,\n      },\n\n      build: {\n        mode: \"production\",\n      },\n\n      // New in v2.0.0\n      resolve: {\n        alias: {\n          // Allow references to `node_modules` folder directly\n          \"/node_modules\": path.resolve(\".\", \"node_modules\"),\n        },\n      },\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Critical CSS Inlining and Deferred Loading in HTML Template\nDESCRIPTION: Combines inlined critical CSS and deferred stylesheet loading by leveraging bundle buckets. Critical styles are output using getBundle in a <style> tag inside <head>, while non-critical (defer) styles are referenced with getBundleFileUrl and loaded asynchronously. Requires prior configuration of a css bundle and use of the 'defer' bucket. The approach suits performance optimization scenarios for static sites.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- … -->\\n<head>\\n\\t<!-- Inlined critical styles -->\\n\\t<style>{% getBundle \\\"css\\\" %}</style>\\n\\n\\t<!-- Non-critical styles -->\\n\\t<link rel=\\\"stylesheet\\\" href=\\\"{% getBundleFileUrl 'css', 'defer' %}\\\" fetchpriority=\\\"low\\\">\\n</head>\\n<body>\\n\\t<!-- This goes into a `default` bucket -->\\n\\t{% css %}/* Inline in the head, great with @font-face! */{% endcss %}\\n\\t<!-- This goes into a `defer` bucket (the bucket can be any string value) -->\\n\\t{% css \\\"defer\\\" %}/* Load me later */{% endcss %}\\n</body>\\n<!-- … -->\n```\n\n----------------------------------------\n\nTITLE: Defining Ignore Patterns with .eleventyignore (Plaintext)\nDESCRIPTION: This code snippet demonstrates how to declare files and directories for Eleventy to ignore using a .eleventyignore file. Each line is a pattern; files or folders matching these patterns will be excluded from Eleventy's build and processing steps. The glob syntax supports pattern-matching subfolders and filetypes, allowing fine-grained control over what is ignored. No software dependencies are required—just save this as .eleventyignore in your project or input directory. Paths are relative to the location of the ignore file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/ignores.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nREADME.md\\n_drafts/\\nsecretNunjucksTemplates/anotherFolder/**/*.njk\\n\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Data Parser with Options in Eleventy Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates using `eleventyConfig.addDataExtension` with an options object, available since Eleventy 2.0. It allows specifying a `parser` function, controlling file reading behavior with `read` (default `true`), and setting file `encoding` (default `utf8`). Setting `read: false` passes the file path instead of contents to the parser.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-custom.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// or with options (new in 2.0)\n\televentyConfig.addDataExtension(\"fileExtension\", {\n\t\tparser: (contents, filePath) => ({}),\n\n\t\t// defaults are shown:\n\t\tread: true,\n\t\tencoding: \"utf8\",\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Nesting and Composing <is-land> with Multiple Loading Conditions (HTML)\nDESCRIPTION: Demonstrates how to use multiple hydration conditions (on:visible, on:idle, on:media) and nest <is-land> elements to inherit and compound loading triggers. Useful for advanced, responsive hydration strategies. Dependencies: <is-land> loaded. Inputs: nested HTML structure with on:visible/on:idle/on:media attributes. Outputs: nested islands, each hydrating when their specific and inherited conditions are met.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<is-land on:visible on:idle>\\n\\t<!-- your HTML here -->\\n\\n\\t<is-land on:media=\\\"(min-width: 64em)\\\">\\n\\t\\t<!-- Islands can be nested -->\\n\\t\\t<!-- Islands inherit all of their parents’ loading conditions -->\\n\\t</is-land>\\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Slashes Using Eleventy JavaScript Config\nDESCRIPTION: Modifies Eleventy's URL output by removing trailing slashes from generated page URLs except for the root. Depends on the Eleventy configuration object and must be combined with a `\"trailingSlash\": false` entry in the project's `vercel.json` when deploying to Vercel. Expects `page.url` to be a string and applies the transformation inside the `addUrlTransform` method. Returns the adjusted URL to Eleventy. Will skip pages with `/` only as URL.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\n\televentyConfig.addUrlTransform((page) => {\n\t\t// remove trailing slash from `page.url`\n\t\tif (page.url !== \"/\" && page.url.endsWith(\"/\")) {\n\t\t\treturn page.url.slice(0, -1);\n\t\t}\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Using Existing Filters in Shortcodes - Eleventy Configuration - JavaScript\nDESCRIPTION: Demonstrates retrieving and invoking a previously registered filter (\\\"url\\\") inside a shortcode using \\\"getFilter\\\". Useful for aliasing or reusing filters programmatically in custom logic or shortcodes. Requires that the \\\"url\\\" filter is already available; dependencies include Eleventy's configuration API and a compatible project setup.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addShortcode(\"myCustomImage\", function (url, alt) {\n\t\treturn `<img src=\"${eleventyConfig.getFilter(\"url\")(url)}\" alt=\"${alt}\">`;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Eleventy Plugin\nDESCRIPTION: Template for creating an Eleventy plugin that exports a configuration function.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig, pluginOptions) {\n\t// Your plugin code goes here\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Data File Processing with Eleventy API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to set up Eleventy to process image files (PNG, JPEG) as data files, extracting image stats with @11ty/eleventy-img in the data cascade. It adds a custom data extension for images and defines a shortcode ('dataCascadeImage') for generating responsive image HTML from the processed stats. Dependencies include Node.js built-in 'path', '@11ty/eleventy-img', and a compatible Eleventy project. Input images must follow data cascade conventions, and custom options for image processing (widths, formats, output directories) are globally defined in the config. The parser returns an object with image stats, which are then usable in any template language.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-datafiles.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport path from \"node:path\";\nimport Image from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addDataExtension(\"png,jpeg\", {\n\t\tread: false, // Don’t read the input file, argument is now a file path\n\t\tparser: async (imagePath) => {\n\t\t\tlet stats = await Image(imagePath, {\n\t\t\t\twidths: [\"auto\"],\n\t\t\t\tformats: [\"avif\", \"webp\", \"jpeg\"],\n\t\t\t\toutputDir: path.join(eleventyConfig.dir.output, \"img\", \"built\"),\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\timage: {\n\t\t\t\t\tstats,\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t});\n\n\t// This works sync or async: images were processed ahead of time in the data cascade\n\televentyConfig.addShortcode(\"dataCascadeImage\", (stats, alt, sizes) => {\n\t\tlet imageAttributes = {\n\t\t\talt,\n\t\t\tsizes,\n\t\t\tloading: \"lazy\",\n\t\t\tdecoding: \"async\",\n\t\t};\n\t\treturn Image.generateHTML(stats, imageAttributes);\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Paginated Permalink (1-based Index) - YAML Front Matter with Nunjucks\nDESCRIPTION: Shows how to modify the starting page number for pagination permalink paths to use one-based indexing in Eleventy with Nunjucks. Adjusts output file naming by incrementing the pagination page number variable. Useful for user-friendly numbering conventions.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n---\npermalink: \\\"different/page-{{ pagination.pageNumber + 1 }}/index.html\\\"\n---\n```\n\n----------------------------------------\n\nTITLE: Storing Custom Data in Eleventy Fetch Cache using JavaScript\nDESCRIPTION: This snippet shows how to define a global data file for Eleventy that stores arbitrary data in the fetch cache via a custom function source. It uses the Fetch API from @11ty/eleventy-fetch, requiring a unique requestId for cache keying. Inputs are custom logic provided in the source function, and outputs are the returned data, stored and retrieved using the cache. Ensure @11ty/eleventy-fetch is installed as a dependency.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nexport default function() {\n\treturn Fetch(async function() {\n\t\t// do some expensive operation here, this is simplified for brevity\n\t\tlet fakeTwitterApiContents = { followerCount: 1000 };\n\n\t\treturn fakeTwitterApiContents;\n\t}, {\n\t\t// must supply a unique id for the callback\n\t\trequestId: \"zachleat_twitter_followers\"\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Async Global Data in Eleventy Config\nDESCRIPTION: Shows how to add global data using promises and async functions for asynchronous operations.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-global-custom.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (eleventyConfig) {\n\t// or a promise:\n\televentyConfig.addGlobalData(\"myFunctionPromise\", () => {\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(resolve, 100, \"foo\");\n\t\t});\n\t});\n\n\t// or async:\n\televentyConfig.addGlobalData(\"myAsyncFunction\", async () => {\n\t\treturn Promise.resolve(\"hi\");\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying with Path Prefix in Eleventy via CLI - bash\nDESCRIPTION: Demonstrates how to deploy a site to a subdirectory using the --pathprefix CLI argument. The command modifies absolute HTML URLs so they include the specified prefix, which is critical for deploying static sites to subdirectories (like GitHub Pages). Input is the desired path prefix (e.g., 'eleventy-base-blog'). Requires setup for output folder and possible plugin usage for base URL issues.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @11ty/eleventy --pathprefix=eleventy-base-blog\n```\n\n----------------------------------------\n\nTITLE: Generating Pagination Navigation in Eleventy with CommonJS JavaScript Template\nDESCRIPTION: This CommonJS-style JavaScript template for Eleventy returns an accessible pagination navigation, iterating over pagination.pages and pagination.hrefs to produce links to each paginated page. Uses 'aria-current' for the active page and expects a data argument containing pagination and page.url. Outputs a navigation HTML snippet. Requires Eleventy with JavaScript templates and CommonJS module support.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function(data) {\n  const { pagination, page } = data;\n  return `\n<nav aria-labelledby=\\\"my-pagination\\\">\n  <h2 id=\\\"my-pagination\\\">This is my Pagination</h2>\n  <ol>\n    ${pagination.pages.map((items, idx) => `\n      <li>\n        <a href=\\\"${pagination.hrefs[idx]}\\\"${page.url === pagination.hrefs[idx] ? ' aria-current=\\\"page\\\"' : ''}>\n          Page ${idx+1}\n        </a>\n      </li>\n    `).join('')}\n  </ol>\n</nav>\n`;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Browsersync Configuration in Eleventy (JavaScript)\nDESCRIPTION: This snippet shows how to override Eleventy\\'s default Browsersync configuration by passing a custom options object to eleventyConfig.setBrowserSyncConfig within the Eleventy configuration file (e.g., .eleventy.js). The notify parameter enables on-page notification overlays from Browsersync. Requires Eleventy 0.7.0 or higher and a project using Eleventy 1.x or 0.x. Input is handled via the eleventyConfig argument passed to the exported function, and output is applied as part of Eleventy\\'s serve/watch process.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/server-browsersync.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\\n\\televentyConfig.setBrowserSyncConfig({\\n\\t\\tnotify: true,\\n\\t});\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy WebC Plugin with Full Options in JavaScript\nDESCRIPTION: Example Eleventy configuration showing the available options for the WebC plugin, including `components` glob for global components, `useTransform` to process HTML output, `transformData` for additional global data in transforms, and `bundlePluginOptions` for passing options to the underlying bundle plugin. Demonstrates how to pass an options object to `eleventyConfig.addPlugin()`. Default values are shown.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluginWebc from \"@11ty/eleventy-plugin-webc\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(pluginWebc, {\n\t\t// Glob to find no-import global components\n\t\t// (The default changed from `false` in Eleventy WebC v0.7.0)\n\t\tcomponents: \"_components/**/*.webc\",\n\n\t\t// Adds an Eleventy WebC transform to process all HTML output\n\t\tuseTransform: false,\n\n\t\t// Additional global data used in the Eleventy WebC transform\n\t\ttransformData: {},\n\n\t\t// Options passed to @11ty/eleventy-plugin-bundle\n\t\tbundlePluginOptions: {},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Preprocessor for Content Modification in Eleventy\nDESCRIPTION: This snippet demonstrates how to add a preprocessor in Eleventy to modify content before processing. It checks for draft status and can ignore files or add comments to templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config-preprocessors.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n  eleventyConfig.addPreprocessor(\"drafts\", \"njk,md,liquid\", (data, content) => {\n\t\tif(data.draft) {\n\t\t\t// Ignore this file.\n\t\t\treturn false;\n\t\t}\n\n\t\t// You can also modify the raw input of the template here too, be careful!\n\t\treturn `${content}<!-- Template file: {% raw %}{{ page.inputPath }}{% endraw %} -->`;\n\n\t\t// If you return nothing or `undefined`, no changes will be made to this template.\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Bundled CSS and JS in Eleventy WebC Components\nDESCRIPTION: Demonstrates how to add CSS and JS to a WebC bundle in Eleventy by embedding <style> and <script> elements in a WebC page or component. Styles and scripts without the webc:keep attribute will be bundled. Optionally, getBundle can be used to fetch the final bundled content. This depends on Eleventy WebC v0.9.0+ (with bundler mode) and the Bundle plugin. Inputs are HTML tags in WebC; outputs are inlined/bundled assets as processed by Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<style>/* This is bundled. */</style>\\n<style webc:keep>/* Do not bundle me—leave as is */</style>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script>/* This is bundled. */</script>\\n<script webc:keep>/* Do not bundle me—leave as is */</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Value with Custom Filter - Nunjucks Template - HTML\nDESCRIPTION: Renders a heading element using the \\\"makeUppercase\\\" filter on the variable \\\"name\\\". This snippet demonstrates integrating a filter call inside Nunjucks syntax and illustrates how filters can be chained or composed. This requires a Nunjucks-compatible environment where the \\\"makeUppercase\\\" filter has been registered with Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>{{ name | makeUppercase }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Emulating Passthrough Copy During Development\nDESCRIPTION: Configures the Eleventy Dev Server to emulate passthrough file copy, which improves build performance by referencing files directly without copying them to the output folder during development.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/copy.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// the default is \"copy\"\n\televentyConfig.setServerPassthroughCopyBehavior(\"passthrough\");\n};\n```\n\n----------------------------------------\n\nTITLE: Hydrating Svelte Components in <is-land> with Server-Integrated Build (HTML)\nDESCRIPTION: Demonstrates using server-side integrations to generate client JavaScript for Svelte, then bootstrapping with <is-land> using autoinit and import. Relies on Eleventy/Svelte integration for compilation. Inputs: server-generated component.clientJsUrl; Output: hydrated interactive Svelte component once conditions are satisfied.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{% assign component = \\\"./lib/svelte/my-component.svelte\\\" | svelte %}\\n<is-land\\n\\ton:visible\\n\\tautoinit=\\\"svelte\\\"\\n\\timport=\\\"{{ component.clientJsUrl }}\\\"\\n></is-land>\n```\n\n----------------------------------------\n\nTITLE: Integrating WebC with is-land for Component Hydration\nDESCRIPTION: This snippet demonstrates how to use WebC's asset bucketing with Eleventy's is-land component for web component hydration. CSS and JavaScript within the is-land will only load when the specified condition (on:visible) is met.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<is-land on:visible webc:import=\"npm:@11ty/is-land\">\n\t<template data-island>\n\t\t<!-- CSS -->\n\t\t<style webc:keep>\n\t\t\t/* This CSS applies on:visible */\n\t\t</style>\n\t\t<link rel=\"stylesheet\" href=\"arbitrary.css\" webc:keep />\n\n\t\t<!-- JS -->\n\t\t<script type=\"module\" webc:keep>\n\t\t\tconsole.log(\"This JavaScript runs on:visible\");\n\t\t</script>\n\t\t<script type=\"module\" src=\"arbitrary.js\" webc:keep></script>\n\t</template>\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Integrating Sass Compilation into Eleventy (JavaScript)\nDESCRIPTION: This configuration snippet shows how to integrate Sass compilation into an Eleventy project. It registers the `.scss` extension using `addTemplateFormats` and `addExtension`. The `compile` function uses the `sass` npm package's `compileString` method to process the input SCSS content synchronously. It specifies `.css` as the output file extension and returns a render function that provides the compiled CSS.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Don’t forget to `npm install sass`!\nimport * as sass from \"sass\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addTemplateFormats(\"scss\");\n\n\t// Creates the extension for use\n\televentyConfig.addExtension(\"scss\", {\n\t\toutputFileExtension: \"css\", // optional, default: \"html\"\n\n\t\t// `compile` is called once per .scss file in the input directory\n\t\tcompile: async function (inputContent) {\n\t\t\tlet result = sass.compileString(inputContent);\n\n\t\t\t// This is the render function, `data` is the full data cascade\n\t\t\treturn async (data) => {\n\t\t\t\treturn result.css;\n\t\t\t};\n\t\t},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Autoinitializing Framework Components with <is-land> (HTML)\nDESCRIPTION: Illustrates the use of autoinit and import attributes in <is-land> to auto-load and initialize third-party frameworks such as Petite Vue. Shows both CDN and import map usage. Prerequisites: correct URLs or import map configuration. Input: autoinit, import, and framework-specific markup; Output: framework-bootstrapped client component loaded on-demand.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<is-land\\n\\ton:visible\\n\\tautoinit=\\\"petite-vue\\\"\\n\\timport=\\\"https://unpkg.com/petite-vue@0.4.1/dist/petite-vue.es.js\\\"\\n\\tv-scope=\\\"{ name: 'post-JS' }\\\"\\n>\\n\\tHello from <span v-html=\\\"name\\\">pre-JS</span>\\n</is-land>\n```\n\nLANGUAGE: html\nCODE:\n```\n<is-land on:visible import=\\\"petite-vue\\\" v-scope=\\\"{ name: 'post-JS' }\\\">\\n\\tHello from <span v-html=\\\"name\\\">pre-JS</span>\\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Image Cache Options in 11ty\nDESCRIPTION: Configuration options for caching remote images in 11ty using eleventy-fetch. Includes settings for cache duration, directory location, and URL query parameter handling.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t// …\n\tcacheOptions: {\n\t\t// if a remote image URL, this is the amount of time before it fetches a fresh copy\n\t\tduration: \"1d\",\n\n\t\t// project-relative path to the cache directory\n\t\tdirectory: \".cache\",\n\n\t\tremoveUrlQueryParams: false,\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Nunjucks Environment Instance in Eleventy (JavaScript)\nDESCRIPTION: This advanced configuration shows how to provide a completely custom Nunjucks Environment instance to Eleventy using `setLibrary`. It imports the Nunjucks library, creates a new Environment with a FileSystemLoader pointing to the `_includes` directory, and registers it for the `njk` template engine. Note that this method overrides any options set via `setNunjucksEnvironmentOptions`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Nunjucks from \"nunjucks\";\n\nexport default function (eleventyConfig) {\n\tlet nunjucksEnvironment = new Nunjucks.Environment(\n\t\tnew Nunjucks.FileSystemLoader(\"_includes\")\n\t);\n\n\televentyConfig.setLibrary(\"njk\", nunjucksEnvironment);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding TOML Data Support in Eleventy Configuration (JavaScript)\nDESCRIPTION: This example demonstrates adding support for TOML data files (`.toml`) in Eleventy. It utilizes the `@iarna/toml` library to parse the file contents inside the `addDataExtension` function. The `@iarna/toml` package needs to be installed (`npm install @iarna/toml`).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-custom.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport toml from \"@iarna/toml\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addDataExtension(\"toml\", (contents) => toml.parse(contents));\n};\n```\n\n----------------------------------------\n\nTITLE: Inlining and Minifying CSS with a JavaScript Template for Eleventy - JavaScript\nDESCRIPTION: This JavaScript snippet defines an Eleventy JavaScript template that asynchronously reads a CSS file, minifies it using clean-css, and returns a string of HTML containing the minified CSS inside a style tag. Dependencies include 'fs/promises', 'path', and 'clean-css' NPM packages. The 'sample.css' file must exist in the expected path. The function takes no explicit parameters, and outputs an HTML string with inline minified CSS. Designed for use within an Eleventy .11ty.js template.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/inline-css.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fs from \\\"node:fs/promises\\\";\nimport path from \\\"node:path\\\";\nimport CleanCSS from \\\"clean-css\\\";\n\nexport default async function (data) {\n\treturn `<style>\n\t  ${await fs\n\t\t\t.readFile(path.resolve(__dirname, \\\"./sample.css\\\"))\n\t\t\t.then((data) => new CleanCSS().minify(data).styles)}\n\t</style>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Paginated Permalink Configuration - YAML Front Matter using Liquid or Nunjucks\nDESCRIPTION: Demonstrates how to create parameterized output paths in Eleventy by templating the 'permalink' value in front matter, using the pagination page number. Supports both Liquid and Nunjucks syntax. Allows per-page customized URLs and is key for SEO and logical navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n---\npermalink: \\\"different/page-{{ pagination.pageNumber }}/index.html\\\"\n---\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting Collections with getAll().sort() in Eleventy\nDESCRIPTION: Demonstrates custom sorting of collection items using Array.sort() with the getAll() method. Shows examples of sorting by date (ascending and descending) and by file path.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Sort with `Array.sort`\n\televentyConfig.addCollection(\"myCustomSort\", function (collectionsApi) {\n\t\treturn collectionsApi.getAll().sort(function (a, b) {\n\t\t\t//return a.date - b.date; // sort by date - ascending\n\t\t\treturn b.date - a.date; // sort by date - descending\n\t\t\t//return a.inputPath.localeCompare(b.inputPath); // sort by path - ascending\n\t\t\t//return b.inputPath.localeCompare(a.inputPath); // sort by path - descending\n\t\t});\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: WebC Component Setup with JavaScript\nDESCRIPTION: Demonstrates using webc:setup script to provide data and markup to components with local scoping.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script webc:setup>\n\tconst myHtml = \"<my-webc-component></my-webc-component>\";\n\n\tfunction alwaysBlue() {\n\t\treturn \"blue\";\n\t}\n</script>\n\n<div @html=\"myHtml\"></div>\n<div @raw=\"myHtml\"></div>\n<!-- @raw does not reprocess as WebC -->\n<div @html=\"alwaysBlue()\"></div>\n```\n\n----------------------------------------\n\nTITLE: Exporting Function with Data Parameter in Eleventy Template - JavaScript\nDESCRIPTION: Exports a function that takes the data object as an argument and uses it to generate dynamic HTML output. No dependencies beyond Eleventy's data cascade. Expected input: data object with 'name' property; output: personalized HTML using that property.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (data) {\n\treturn `<p>${data.name}</p>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Eleventy Fetch DEBUG Mode in JavaScript\nDESCRIPTION: This snippet enables verbose debug logging for Eleventy's fetch operations by setting the DEBUG environment variable before running Eleventy's CLI. No additional dependencies are required, but the command must be executed in an environment where npx and @11ty/eleventy are available. Input is the environment variable; output is enhanced debug output in the terminal.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nDEBUG=Eleventy:Fetch npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Setting Data Directory in Eleventy Configuration\nDESCRIPTION: Shows how to configure a custom global data directory using the setDataDirectory() method. This directory contains data files that are available to all templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Order matters, put this at the top of your configuration file.\n  eleventyConfig.setDataDirectory(\"lore\");\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX and TSX Support with TSX Loader in Eleventy (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to configure Eleventy to recognize and compile `.11ty.jsx`, `.11ty.ts`, and `.11ty.tsx` files using the `tsx` loader. It imports the `tsx/esm` module and uses `renderToStaticMarkup` from `react-dom/server` to convert React components to HTML. The configuration function registers the file extensions and sets up a compile pipeline that renders content. Dependencies: `tsx`, `react-dom/server`, ESM project structure (i.e., `\"type\": \"module\"` in package.json or `.mjs` config). The `compile` function is asynchronous and expects template data as input, outputting static markup.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/jsx.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport \"tsx/esm\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\nexport default function (eleventyConfig) {\n\t// We can add support for TypeScript too, at the same time:\n\televentyConfig.addExtension([\"11ty.jsx\", \"11ty.ts\", \"11ty.tsx\"], {\n\t\tkey: \"11ty.js\",\n\t\tcompile: function () {\n\t\t\treturn async function (data) {\n\t\t\t\tlet content = await this.defaultRenderer(data);\n\t\t\t\treturn renderToStaticMarkup(content);\n\t\t\t};\n\t\t},\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: getData as Async Function Returning Additional Data - Eleventy JavaScript\nDESCRIPTION: This configuration demonstrates providing a 'getData' async function for a template language extension in Eleventy. The function takes 'inputPath' and returns an object, which is then merged into the Data Cascade. This is useful for injecting additional computed or fetched data for custom templates beyond front matter or defaults.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t// some configuration truncated …\n  getData: async function(inputPath) {\n    // DIY, this object will be merged into data cascade\n    return {};\n  },\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Engine Shortcodes in Eleventy Configuration — JavaScript\nDESCRIPTION: Shows how to register template engine-specific shortcodes for Liquid, Nunjucks, and JavaScript engines using their dedicated methods in Eleventy's configuration API. This allows distinct implementations for each templating language. The code demonstrates both basic and paired variants, with function signatures tailored to the engine's requirements. The primary dependency is Eleventy’s configuration object; no external libraries are necessary. The function arguments vary per engine but generally consist of content and parameters specific to the shortcode instance.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/shortcodes.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n  // Liquid\n  eleventyConfig.addLiquidShortcode(\"user\", function(firstName, lastName) {});\n  eleventyConfig.addPairedLiquidShortcode(\"user\", function(content, firstName, lastName) {});\n\n  // Nunjucks\n  eleventyConfig.addNunjucksShortcode(\"user\", function(firstName, lastName) {});\n  eleventyConfig.addPairedNunjucksShortcode(\"user\", function(content, firstName, lastName) {});\n\n  // JavaScript Template Function (New in 0.7.0)\n  eleventyConfig.addJavaScriptFunction(\"user\", function(firstName, lastName) {});\n  eleventyConfig.addJavaScriptFunction(\"user\", function(content, firstName, lastName) {}); // Faux-paired shortcode\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting Configuration for Specific Watch Targets\nDESCRIPTION: Demonstrates how to reset Eleventy's configuration when specific watched files change using the resetConfig option. This feature allows for re-running configuration code when certain files are modified.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/watch-serve.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// You probably don't need this\n\televentyConfig.addWatchTarget(\"./_config/**\", {\n\t\tresetConfig: true\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout with CSS and JS Bundling in WebC\nDESCRIPTION: Example of a WebC layout that demonstrates both inline bundle inclusion and file-based bundle inclusion using getBundle and getBundleFileUrl helpers.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>WebC Example</title>\n\n\t\t<!-- inline bundles -->\n\t\t<style @raw=\"getBundle('css')\" webc:keep></style>\n\t\t<script @raw=\"getBundle('js')\" webc:keep></script>\n\n\t\t<!-- or write your bundle to a file -->\n\t\t<link rel=\"stylesheet\" :href=\"getBundleFileUrl('css')\" webc:keep />\n\t\t<script :src=\"getBundleFileUrl('js')\" webc:keep></script>\n\t</head>\n\t<body @raw=\"content\"></body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Passing Data to renderContent Filter (YAML Front Matter Example)\nDESCRIPTION: Provides an example within YAML front matter demonstrating how to pass an additional data object (`myData`) to the `renderContent` filter when processing a template string (`myContent`). The data becomes available within the rendered content. The template engine ('njk') is specified as the first argument to the filter.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/render.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmyContent: \"{{ 'Second' }}\"\n---\n{{ myContent | renderContent(\"njk\", myData) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Alias with addLayoutAlias - Eleventy JavaScript Config\nDESCRIPTION: This JavaScript snippet demonstrates the use of Eleventy’s configuration API to map a layout alias to a specific layout file. Requires Node.js environment and Eleventy. The 'addLayoutAlias' method is called with a string key and the path to the Nunjucks layout file. Content using 'layout: post' will use 'layouts/post.njk' as the layout. No output; the configuration is executed at build time.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/layouts.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\\n\\televentyConfig.addLayoutAlias(\\\"post\\\", \\\"layouts/post.njk\\\");\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Bundled HTML to Page Head via getBundle and html Shortcodes\nDESCRIPTION: Demonstrates dynamically injecting bundled HTML content into the <head> via the getBundle and html shortcodes in Eleventy templates. Contributors anywhere on the page can add to the 'head' bundle bucket, ensuring modular head modifications. Input is provided via {% html \"head\" %} blocks and output is produced by {% getBundle \"html\", \"head\" %}.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- … -->\\n<head>\\n\\t{% getBundle \\\"html\\\", \\\"head\\\" %}\\n</head>\\n<body>\\n\\t<!-- Add things to `<head>` from anywhere on the page -->\\n\\t{% html \\\"head\\\" %}\\n\\t<link href=\\\"https://v1.opengraph.11ty.dev\\\" rel=\\\"preconnect\\\" crossorigin>\\n\\t{% endhtml %}\\n</body>\\n<!-- … -->\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Liquid Tag in Eleventy (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to add a custom Liquid tag named `uppercase` within an Eleventy configuration file. It uses `eleventyConfig.addLiquidTag`, defining `parse` to capture the tag's argument and `render` to resolve the argument's value (handling both variables and string literals), convert it to uppercase, and return the result. The tag can be used like `{% uppercase myVar %}` or `{% uppercase \"alice\" %}`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/custom-tags.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n  // Usage: {% uppercase myVar %} where myVar has a value of \"alice\"\n  // Usage: {% uppercase \"alice\" %}\n  eleventyConfig.addLiquidTag(\"uppercase\", function (liquidEngine) {\n    return {\n      parse: function (tagToken, remainingTokens) {\n        this.str = tagToken.args; // myVar or \"alice\"\n      },\n      render: async function (scope, hash) {\n        // Resolve variables\n        var str = await this.liquid.evalValue(this.str, scope); // \"alice\"\n\n        // Do the uppercasing\n        return str.toUpperCase(); // \"ALICE\"\n      },\n    };\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Image Formats with eleventy-image using Bound Array in HTML\nDESCRIPTION: This HTML snippet demonstrates overriding default image formats using WebC's attribute binding syntax (`:formats`). An array `['avif', 'png']` is passed to the `formats` attribute of the `<eleventy-image>` component (via `webc:is`), specifying that AVIF and PNG formats should be generated for this image, overriding any global defaults.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-webc.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<img webc:is=\"eleventy-image\" :formats=\"['avif', 'png']\" src=\"cat.jpg\" alt=\"photo of my tabby cat\">\n```\n\n----------------------------------------\n\nTITLE: Paging an Array with Eleventy Pagination - Liquid Template\nDESCRIPTION: Demonstrates how to enable pagination in a Liquid template for Eleventy by specifying the 'pagination' key in front matter and iterating over a dataset. This example uses an array and splits the dataset into pages of a defined size, producing separate output files for each chunk. Required dependencies include Eleventy, and the template expects an array named 'testdata' in the front matter or data files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include \\\"snippets/pagination/paged-array.njk\\\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Local Eleventy Plugin (ES Module)\nDESCRIPTION: This snippet demonstrates the basic structure of a local Eleventy plugin file (`config/local-plugin.js`) using ES Module syntax. The default export is a function that receives the `eleventyConfig` object, allowing you to move configuration logic (like filters, shortcodes, collections) from the main config file into this plugin.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/local-plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Move any code from `eleventy.config.js` here.\n\t// Use eleventyConfig as you would in your top-level config file\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Paired Shortcodes in Eleventy (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates how to define paired shortcodes in an Eleventy configuration. It uses `eleventyConfig.addPairedLiquidShortcode` for a Liquid-specific paired shortcode and `eleventyConfig.addPairedShortcode` for a universal one. The example `user2` shortcode takes enclosed content (`bioContent`), `name`, and `twitterUsername` arguments to generate HTML.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n  // Liquid Shortcode\n  // These can be async functions too\n  eleventyConfig.addPairedLiquidShortcode(\"user2\", function(bioContent, name, twitterUsername) { /* … */ });\n\n  // Universal Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)\n  eleventyConfig.addPairedShortcode(\"user2\", function(bioContent, name, twitterUsername) {\n    return `<div class=\"user\">\n<div class=\"user_name\">${name}</div>\n<div class=\"user_twitter\">@${twitterUsername}</div>\n<div class=\"user_bio\">${bioContent}</div>\n</div>`;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Output Paths with eleventy-image WebC Component in HTML\nDESCRIPTION: This HTML snippet illustrates how to override the default `urlPath` and `outputDir` settings (defined in the Eleventy configuration) for a specific image processed by the `<eleventy-image>` component (via `webc:is`). The `url-path` attribute sets the public URL prefix to `/some-dir/`, and the `output-dir` attribute specifies the filesystem output directory as `_site/some-dir/` for this particular image.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-webc.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<img webc:is=\"eleventy-image\" url-path=\"/some-dir/\" output-dir=\"_site/some-dir/\" src=\"cat.jpg\" alt=\"photo of my tabby cat\">\n```\n\n----------------------------------------\n\nTITLE: Advanced HAML Plugin Configuration with Options (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to configure the Eleventy HAML plugin with options. It imports both the `hamljs` library and the plugin, then uses the `eleventyConfig.addPlugin()` method with a second argument (an options object) to override the default HAML library instance via the `eleventyLibraryOverride` key. This allows for using a specific version or a customized instance of `hamljs`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/haml.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport haml from \"hamljs\";\nimport hamlPlugin from \"@11ty/eleventy-plugin-haml\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(hamlPlugin, {\n\t\t// Override the `haml` library instance\n\t\televentyLibraryOverride: haml,\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Literal Global Data in Eleventy Config\nDESCRIPTION: Demonstrates how to add static string values as global data using the addGlobalData method in Eleventy configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-global-custom.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (eleventyConfig) {\n\t// Values can be static:\n\televentyConfig.addGlobalData(\"myString\", \"myValue\");\n};\n```\n\n----------------------------------------\n\nTITLE: Paging an Object by Values - Eleventy YAML Front Matter\nDESCRIPTION: Explains how to adjust Eleventy's pagination to use object values rather than keys by setting 'resolve: values' in the YAML front matter. This configuration paginates object values using Object.values, outputting value arrays per page. Expects object data in the template's front matter.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n---\npagination:\n  data: testdata\n  size: 1\n  resolve: values\ntestdata:\n  itemkey1: itemvalue1\n  itemkey2: itemvalue2\n  itemkey3: itemvalue3\n---\n```\n\n----------------------------------------\n\nTITLE: Amending the Markdown Library Instance with Additional Features - JavaScript\nDESCRIPTION: This snippet demonstrates how to modify the active markdown-it instance in Eleventy using the amendLibrary method. It shows enabling the \\\"code\\\" rule, which allows indented code blocks. The Eleventy configuration object and markdown-it library must be available. This is useful for enabling or customizing parsing features globally for Markdown files in your site.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function (eleventyConfig) {\n\televentyConfig.amendLibrary(\\\"md\\\", (mdLib) => mdLib.enable(\\\"code\\\"));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Asynchronous Nunjucks Shortcodes (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to register asynchronous shortcodes named 'user' (unpaired) and 'user2' (paired) for use in Nunjucks templates. It utilizes Eleventy's addNunjucksAsyncShortcode and addPairedNunjucksAsyncShortcode APIs, allowing returned values from async functions, e.g., from an awaited fetch operation. Requires Eleventy 0.10.0+ and async-compatible setup; inputs follow the same as synchronous shortcodes but may involve asynchronous data sources. Outputs string content after asynchronous processing. Cannot be used in Nunjucks macros and is incompatible with synchronous usage.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addNunjucksAsyncShortcode(\n\t\t\"user\",\n\t\tasync function (name, twitterUsername) {\n\t\t\treturn await fetchAThing();\n\t\t}\n\t);\n\n\televentyConfig.addPairedNunjucksAsyncShortcode(\n\t\t\"user2\",\n\t\tasync function (content, name, twitterUsername) {\n\t\t\treturn await fetchAThing();\n\t\t}\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with getAll().filter() in Eleventy\nDESCRIPTION: Shows how to filter collection items using Array.filter() with the getAll() method. This example filters items to include only those with a specific data key.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Filter using `Array.filter`\n\televentyConfig.addCollection(\"keyMustExistInData\", function (collectionsApi) {\n\t\treturn collectionsApi.getAll().filter(function (item) {\n\t\t\t// Side-step tags and do your own filtering\n\t\t\treturn \"myCustomDataKey\" in item.data;\n\t\t});\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Bundling HTML Head Content in Eleventy Using the Bundle Plugin\nDESCRIPTION: Provides an example of bundling HTML fragments, such as <head> additions via shortcodes, for use in templating scenarios reminiscent of React's Helmet. The bundle is configured for HTML, and elements are added and output dynamically using template shortcodes. Dependencies are Eleventy and the Bundle plugin. This method facilitates modular head content management in static sites.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\\n\\televentyConfig.addBundle(\\\"html\\\");\\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Processing Transforms to Bundle Output in Eleventy\nDESCRIPTION: This snippet enhances bundle output by using the transforms option to post-process CSS via PostCSS with the postcss-nested plugin. It provides an asynchronous transform function processing the bundle content before output. Prerequisites include installing postcss and postcss-nested as Node dependencies. Inputs are the source bundle content and the Eleventy context object containing type and page information; output is the processed CSS.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport postcss from \\\"postcss\\\";\\nimport postcssNested from \\\"postcss-nested\\\";\\n\\nexport default function(eleventyConfig) {\\n\\televentyConfig.addBundle(\\\"css\\\", {\\n\\t\\ttransforms: [\\n\\t\\t\\tasync function(content) {\\n\\t\\t\\t\\t// type contains the bundle name.\\n\\t\\t\\t\\tlet { type, page } = this;\\n\\t\\t\\t\\tlet result = await postcss([postcssNested]).process(content, { from: page.inputPath, to: null });\\n\\t\\t\\t\\treturn result.css;\\n\\t\\t\\t}\\n\\t\\t]\\n\\t});\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Ignores in Eleventy\nDESCRIPTION: Shows how to use the watchIgnores API to add or remove files from Eleventy's watch list. This configuration prevents Eleventy from rebuilding when README.md changes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/watch-serve.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Do not rebuild when README.md changes (You can use a glob here too)\n\televentyConfig.watchIgnores.add(\"README.md\");\n\n\t// Or delete entries too\n\televentyConfig.watchIgnores.delete(\"README.md\");\n};\n```\n\n----------------------------------------\n\nTITLE: Using locale_url Filter for Localized Links - Nunjucks\nDESCRIPTION: Demonstrates the usage of the locale_url universal filter in a template, which converts a given URL to the current page's locale-aware variant. This filter automatically swaps lang codes in the URL according to the active page language, with robust fallback behavior. It works within any Nunjucks, Liquid, or 11ty.js context when the plugin is enabled.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/i18n.md#2025-04-23_snippet_2\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% include \"snippets/plugins/i18nlocaleurl.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Using Universal Filter and Shortcodes in Eleventy JavaScript Template - JavaScript\nDESCRIPTION: Shows consumption of universal filter, shortcode, and paired shortcode as JavaScript Template Functions via 'this'. Requires prior registration in the Eleventy config. Input: data with 'myVar', 'firstName', 'lastName'; output: HTML block.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (data) {\n\treturn `\n<h1>${this.myFilter(data.myVar)}</h1>\n<p>${this.user(data.firstName, data.lastName)}</p>\n<p>${this.pairedUser(\n\t\t`Here is some more content`,\n\t\tdata.firstName,\n\t\tdata.lastName\n\t)}</p>\n`;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Includes Directory in Eleventy Configuration\nDESCRIPTION: Shows how to define a custom includes directory using the setIncludesDirectory() method in Eleventy. The includes directory stores layouts, partials, and other reusable template components.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Order matters, put this at the top of your configuration file.\n\t// This is relative to your input directory!\n  eleventyConfig.setIncludesDirectory(\"my_includes\");\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Asynchronous Universal Filters - Eleventy Configuration - JavaScript\nDESCRIPTION: Illustrates adding universal asynchronous filters for use in Liquid, Nunjucks, and JavaScript templates in Eleventy. Both \\\"addFilter\\\" and \\\"addAsyncFilter\\\" are shown accepting asynchronous functions, making them suitable for IO-bound transformations. Dependencies: Eleventy's configuration API; filter functions must be asynchronous and handle any required async operations.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Async universal filters add to:\n\t// * Liquid\n\t// * Nunjucks\n\t// * JavaScript\n\n\televentyConfig.addFilter(\"myFilter\", async function (value) {\n\t\t// do some Async work\n\t\treturn value;\n\t});\n\n\televentyConfig.addAsyncFilter(\"myFilter\", async function (value) {\n\t\t// do some Async work\n\t\treturn value;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Controlling the Order of Multiple Eleventy Transforms in JavaScript\nDESCRIPTION: This snippet shows how multiple transforms can be added to Eleventy in a specific order by calling eleventyConfig.addTransform multiple times. The transforms are executed sequentially in their order of insertion, which may affect the final output if each transform modifies the content. No additional dependencies are needed; each transform is registered with a unique name and an empty function body in this example.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/transforms.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\neleventyConfig.addTransform(\"first\", () => {});\neleventyConfig.addTransform(\"second\", () => {});\neleventyConfig.addTransform(\"third\", () => {});\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Bundles for Icon Libraries in Eleventy Projects\nDESCRIPTION: Shows how to create and use an SVG bundle for icon definitions in an Eleventy project. Configures the plugin to add an svg bundle, outputs bundled SVG symbols within a hidden <svg> with <defs>, and adds icons using the svg shortcode. Usage of <use xlink:href> allows icons to be reused throughout the page without duplicating SVG content. Dependencies: Eleventy Bundle plugin and knowledge of SVG sprite techniques.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\\n\\televentyConfig.addBundle(\\\"svg\\\");\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Nunjucks Tag in Eleventy (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to add a custom Nunjucks tag named `uppercase` in an Eleventy configuration file using `eleventyConfig.addNunjucksTag`. It defines a Nunjucks extension with `parse` and `run` methods. The `parse` method handles token parsing and argument processing using the Nunjucks parser API. The `run` method receives the resolved argument, converts it to uppercase, wraps it in `SafeString` for safe HTML rendering, and returns it via a callback. The tag usage is `{% uppercase myVar %}` or `{% uppercase \"alice\" %}`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/custom-tags.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n  // Usage: {% uppercase myVar %} where myVar has a value of \"alice\"\n  // Usage: {% uppercase \"alice\" %}\n  eleventyConfig.addNunjucksTag(\"uppercase\", function (nunjucksEngine) {\n    return new (function () {\n      this.tags = [\"uppercase\"];\n\n      this.parse = function (parser, nodes, lexer) {\n        var tok = parser.nextToken();\n\n        var args = parser.parseSignature(null, true);\n        parser.advanceAfterBlockEnd(tok.value);\n\n        return new nodes.CallExtensionAsync(this, \"run\", args);\n      };\n\n      this.run = function (context, myStringArg, callback) {\n        let ret = new nunjucksEngine.runtime.SafeString(\n          myStringArg.toUpperCase()\n        );\n        callback(null, ret);\n      };\n    })();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Aliasing Paginated Items - Eleventy Nunjucks Template\nDESCRIPTION: Explains how to alias paginated items from 'pagination.items[0]' or similar to a more descriptive template variable using the alias setting. This improves readability within the template, particularly with single-item pages. Used in Nunjucks and compatible with Eleventy pagination alias feature.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_16\n\nLANGUAGE: jinja2\nCODE:\n```\n{% include \\\"snippets/pagination/alias.njk\\\" %}\n```\n\n----------------------------------------\n\nTITLE: Running the Eleventy Website Locally with npm and Eleventy CLI\nDESCRIPTION: This code snippet shows the commands needed to set up and run the 11ty.dev website locally. It includes installing dependencies, fetching new data, and starting the Eleventy development server with live-reload functionality.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run get-new-data\nnpx @11ty/eleventy --serve\n```\n\n----------------------------------------\n\nTITLE: Memoizing Shortcode Functions using memoize Package — JavaScript\nDESCRIPTION: Illustrates optimization of a shortcode by caching computed outputs with the memoize npm package, thus speeding up repeated calls with identical input. The function memoizes the transformation (e.g., encoding) of a string input to avoid redundant computation. This requires installing the 'memoize' package as a dependency. Key parameters include the function to be memoized, which should be pure to ensure reliable caching. Inputs are the same as the underlying function; outputs are the cached transformation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/shortcodes.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport memoize from \"memoize\";\n\nexport default function(eleventyConfig) {\n\televentyConfig.addShortcode(\"htmlEntities\", memoize(str => {\n\t\treturn encode(str);\n\t}));\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Feed Template in Eleventy\nDESCRIPTION: This template creates a JSON Feed (version 1.1) for blog posts. It sets up the necessary configuration including permalink and metadata, then generates a structured JSON object containing feed information and an array of post items with their URLs, titles, content, and publication dates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/rss.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n---json\n{\n  \"permalink\": \"feed.json\",\n  \"eleventyExcludeFromCollections\": true,\n  \"metadata\": {\n    \"title\": \"My Blog about Boats\",\n    \"description\": \"I am writing about my experiences as a naval navel-gazer.\",\n    \"language\": \"en\",\n    \"base\": \"https://example.com/\",\n    \"author\": {\n      \"name\": \"Boaty McBoatFace\"\n    }\n  }\n}\n---\n{\n  \"version\": \"https://jsonfeed.org/version/1.1\",\n  \"title\": \"{{ metadata.title }}\",\n  \"language\": \"{{ metadata.language or page.lang }}\",\n  \"home_page_url\": \"{{ metadata.base | addPathPrefixToFullUrl }}\",\n  \"feed_url\": \"{{ permalink | htmlBaseUrl(metadata.base) }}\",\n  \"description\": \"{{ metadata.description }}\",\n  \"authors\": [\n    {\n      \"name\": \"{{ metadata.author.name }}\"\n    }\n  ],\n  \"items\": [\n    {%- for post in collections.posts | reverse %}\n    {%- set absolutePostUrl %}{{ post.url | htmlBaseUrl(metadata.base) }}{% endset %}\n    {\n      \"id\": \"{{ absolutePostUrl }}\",\n      \"url\": \"{{ absolutePostUrl }}\",\n      \"title\": \"{{ post.data.title }}\",\n      \"content_html\": {% if post.content %}{{ post.content | renderTransforms(post.data.page, metadata.base) | dump | safe }}{% else %}\"\"{% endif %},\n      \"date_published\": \"{{ post.date | dateToRfc3339 }}\"\n    }\n    {% if not loop.last %},{% endif %}\n    {%- endfor %}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with a Custom Configuration File (Bash)\nDESCRIPTION: This command demonstrates specifying a non-default configuration file for Eleventy with the --config flag. If the provided file does not exist, Eleventy will throw an error (v3.0.0-alpha.18+). Required: valid config JS file in the project root. Input: path to config file; Output: site build using custom configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Override the default eleventy project config filename (.eleventy.js)\\nnpx @11ty/eleventy --config=myeleventyconfig.js\n```\n\n----------------------------------------\n\nTITLE: Defining a Paired Shortcode for Handlebars in Eleventy\nDESCRIPTION: This JavaScript snippet defines a synchronous Eleventy paired shortcode named 'user'. It accepts content nested within the shortcode tags (`bioContent`) along with 'name' and 'twitterUsername' arguments. It returns an HTML string incorporating all these pieces of information. This code should be placed within the Eleventy configuration function.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/handlebars.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n  eleventyConfig.addPairedShortcode(\"user\", function(bioContent, name, twitterUsername) {\n    return `<div class=\"user\">\n<div class=\"user_name\">${name}</div>\n<div class=\"user_twitter\">@${twitterUsername}</div>\n<div class=\"user_bio\">${bioContent}</div>\n</div>`;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using addBundle with Advanced Options in Eleventy JavaScript Config\nDESCRIPTION: Demonstrates the use of addBundle with a detailed options object to customize output file extension, shortcode name, directory, transformations, hoisting, and export key. This enhances bundle customization, allowing for advanced bundling strategies within Eleventy projects. Dependencies include Eleventy core with Bundle plugin; for transforms, additional libraries may be required. Key parameters include outputFileExtension, shortcodeName, toFileDirectory, transforms, hoist, and bundleExportKey.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\\n\\televentyConfig.addBundle(\\\"css\\\", {\\n\\t\\t// File extension used for bundle file output, defaults to bundle name\\n\\t\\toutputFileExtension: \\\"css\\\",\\n\\n\\t\\t// Name of shortcode for use in templates, defaults to bundle name\\n\\t\\tshortcodeName: \\\"css\\\",\\n\\t\\t// shortcodeName: false, // disable this feature.\\n\\n\\t\\t// Optional subfolder (relative to output directory) files will write to\\n\\t\\ttoFileDirectory: \\\"\\\",\\n\\n\\t\\t// Modify bundle content\\n\\t\\ttransforms: [],\\n\\n\\t\\t// If two identical code blocks exist in non-default buckets, they’ll be hoisted to the first bucket in common.\\n\\t\\thoist: true,\\n\\n\\t\\t// In 11ty.js templates, having a named export of `bundle` will populate your bundles.\\n\\t\\tbundleExportKey: \\\"bundle\\\",\\n\\t\\t// bundleExportKey: false, // disable this feature.\\n\\t});\\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Local Eleventy Plugin (ES Module)\nDESCRIPTION: This snippet shows how to import and register a local plugin within the main Eleventy configuration file (`eleventy.config.js`) using ES Module syntax. It imports the previously defined local plugin and uses the `eleventyConfig.addPlugin()` method to integrate its functionality.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/local-plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport localPlugin from \"./config/local-plugin.js\";\n\nexport default function(eleventyConfig) {\n\televentyConfig.addPlugin(localPlugin);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding First and Last Pagination Links in Eleventy with Nunjucks\nDESCRIPTION: This Nunjucks template snippet adds 'First' and 'Last' navigation links, ensuring they're only shown if the current page URL differs from the relevant first/last hrefs. This prevents redundant links and improves user clarity. Designed for paginated navigation bars where users can quickly jump to the beginning or end.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_10\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if page.url != pagination.href.first %}<a href=\"{{ pagination.href.first }}\">First</a>{% endif %}\n{% if page.url != pagination.href.last %}<a href=\"{{ pagination.href.last }}\">Last</a>{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Stargazer Count Using GitHub API in Node.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the use of Node.js and the node-fetch package to retrieve a GitHub repository's stargazer count at build time for an Eleventy site. It imports node-fetch, makes an asynchronous request to the GitHub API endpoint, parses the response as JSON, and returns only the stargazers count as an object. This file is intended to be placed in the Eleventy global data directory (_data/github.js). Prerequisite: install node-fetch (npm install node-fetch). The function should be exported as default for Eleventy to consume. Expected input: none. Output: an object with a single stargazers property. Note that this call will fetch data at each build unless a caching mechanism is employed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/eliminate-js.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from \\\"node-fetch\\\";\n\nexport default async function () {\n\tconsole.log(\\\"Fetching new github stargazers count…\\\");\n\n\t// GitHub API: https://developer.github.com/v3/repos/#get\n\tlet res = await fetch(\\\"https://api.github.com/repos/11ty/eleventy\\\");\n\tlet json = await res.json();\n\n\t// prune the data to return only what we want\n\treturn {\n\t\tstargazers: json.stargazers_count,\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Template Functions in Eleventy Config - JavaScript\nDESCRIPTION: Exports a configuration function for Eleventy's config API to define a custom JavaScript Template Function. Dependency: eleventyConfig instance. Parameters: function name and implementation. Output: registers the function for use in templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\n  eleventyConfig.addJavaScriptFunction(\"myFunction\", function(a, b) { /* … */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Liquid Options (dynamicPartials, strictFilters) in Eleventy\nDESCRIPTION: This JavaScript code shows how to override default Liquid templating engine options in an Eleventy configuration. It uses the `eleventyConfig.setLiquidOptions` method to set `dynamicPartials` to `false` and `strictFilters` to `false`. Note that `strictFilters` was previously named `strict_filters` before Eleventy 1.0. This allows fine-tuning Liquid's behavior, such as disabling dynamic partial loading and relaxing filter strictness.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.setLiquidOptions({\n\t\tdynamicPartials: false,\n\t\tstrictFilters: false, // renamed from `strict_filters` in Eleventy 1.0\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Template Function in Eleventy Template - JavaScript\nDESCRIPTION: Exports a template function that consumes a previously registered JavaScript Template Function via 'this'. Input: data object with 'a', 'b'; output: HTML resulting from custom function call. Relies on function registered in Eleventy config.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (data) {\n\treturn `<h1>${this.myFunction(data.a, data.b)}</h1>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding CSS to Bundles in Liquid Markdown Template\nDESCRIPTION: Shows how to add CSS rules to a bundle directly from a markdown template using the universal css shortcode in Liquid. Each {% css %} block specifies separate CSS to be included in the bundle and removed from the rendered output. No dependencies beyond Eleventy and the Bundle plugin are required. The CSS snippets supplied in these blocks will be included via the bundle pipeline for rendering inline or in files as desired. Expected input is CSS code; output is modified HTML with CSS extracted.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n# My Blog Post\\n\\nThis is some content, I am writing markup.\\n\\n{% css %}\\nem { font-style: italic; }\\n{% endcss %}\\n\\n## More Markdown\\n\\n{% css %}\\nstrong { font-weight: bold; }\\n{% endcss %}\n```\n\n----------------------------------------\n\nTITLE: Writing Bundles to Content-Hashed Files in HTML\nDESCRIPTION: Shows how to write the bundle content to a file in the output directory and reference it from HTML via getBundleFileUrl. This approach is best suited for assets like CSS, optimizing browser caching across pages on repeat visits. The only requirement is the Bundle plugin enabled in Eleventy. Input is the bundle name ('css'); output is a cache-busted file URL inserted into a <link> tag.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\\\"stylesheet\\\" href=\\\"{% getBundleFileUrl \\\"css\\\" %}\\\">\n```\n\n----------------------------------------\n\nTITLE: Ignoring Initial Builds in Eleventy\nDESCRIPTION: Demonstrates how to use the --ignore-initial flag to prevent Eleventy from running an initial build when starting in watch or serve mode. This feature was added in version 2.0.0-canary.25 and can be combined with incremental builds.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Don't build when Eleventy starts, only build on file changes\nnpx @11ty/eleventy --watch --ignore-initial\nnpx @11ty/eleventy --serve --ignore-initial\n\n# Works great with Incremental\nnpx @11ty/eleventy --serve --incremental --ignore-initial\n```\n\n----------------------------------------\n\nTITLE: Using Original File Slug in Custom Filenames (JavaScript)\nDESCRIPTION: This example demonstrates customizing output image filenames to include the original file's slug (basename) and width. It imports Node.js 'path' and uses '@11ty/eleventy-img', configuring Eleventy Image to generate one image at 300px width with a filename like 'bio-2017-300w.jpeg'. Inputs are the same as in the main filenameFormat, with logic extracting basename and extension. Outputs are images with slugs in their filenames, aiding file organization.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport path from \"node:path\";\nimport Image from \"@11ty/eleventy-img\";\n\nawait Image(\"./test/bio-2017.jpg\", {\n\twidths: [300],\n\tformats: [\"auto\"],\n\tfilenameFormat: function (id, src, width, format, options) {\n\t\tconst extension = path.extname(src);\n\t\tconst name = path.basename(src, extension);\n\n\t\treturn `${name}-${width}w.${format}`;\n\t},\n});\n\n// Writes: \"test/img/bio-2017-300w.jpeg\"\n```\n\n----------------------------------------\n\nTITLE: Setting Layouts Directory in Eleventy Configuration\nDESCRIPTION: Demonstrates how to set a custom layouts directory using the setLayoutsDirectory() method. This allows layout files to exist separately from the includes directory.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Order matters, put this at the top of your configuration file.\n\t// This is relative to your input directory!\n  eleventyConfig.setLayoutsDirectory(\"_layouts\");\n};\n```\n\n----------------------------------------\n\nTITLE: Executing a Plugin Immediately in Eleventy\nDESCRIPTION: Advanced technique to execute a plugin immediately rather than in the second stage of configuration, using the immediate option.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig, pluginOptions) {\n\tconsole.log( \"first\" );\n\n\televentyConfig.addPlugin(eleventyConfig => {\n\t\tconsole.log(\"fourth\");\n\t});\n\n\televentyConfig.addPlugin(eleventyConfig => {\n\t\tconsole.log(\"second\");\n\t}, {\n\t\timmediate: true\n\t});\n\n\tconsole.log(\"third\");\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Filenames for Generated Images (JavaScript)\nDESCRIPTION: This snippet shows how to define a custom filename format for generated images in Eleventy Image. It uses a callback function assigned to the 'filenameFormat' property, which constructs filenames using the provided id, source file path, width, format, and options. The generated filename follows the pattern `${id}-${width}.${format}`. Inputs are all properties passed by Eleventy Image for each file; outputs are file names as strings.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n\t// …\n\tfilenameFormat: function (id, src, width, format, options) {\n\t\t// Define custom filenames for generated images\n\t\t// id: hash of the original image\n\t\t// src: original image path\n\t\t// width: current width in px\n\t\t// format: current file format\n\t\t// options: set of options passed to the Image call\n\n\t\treturn `${id}-${width}.${format}`;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Paired Shortcodes in Eleventy Configuration — JavaScript\nDESCRIPTION: Shows how to define paired shortcodes where a content block is wrapped by custom markup, permitting nested content. The snippet includes sync and async usage patterns with addPairedShortcode and addPairedAsyncShortcode. Primary dependencies include eleventyConfig and knowledge of paired shortcode structure, where the first parameter is the wrapped content, followed by additional arguments. These functions return a string (or async string) to replace the paired block in the template.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/shortcodes.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n  // Shortcodes added in this way are available in:\n  // * Markdown\n  // * Liquid\n  // * Nunjucks\n  // * JavaScript\n  // * Handlebars (sync only)\n\n  eleventyConfig.addPairedShortcode(\"user\", function(content, firstName, lastName) { /* … */ });\n\n  // Async support for `addPairedShortcode` is new in Eleventy {{ \"2.0.0-canary.24\" | coerceVersion }}\n  eleventyConfig.addPairedShortcode(\"user\", async function(content, myName) { /* … */ });\n\n  // Async method available\n  eleventyConfig.addPairedAsyncShortcode(\"user\", async function(content, myName) { /* … */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Adding an Asynchronous Nunjucks Filter (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates registering an asynchronous Nunjucks filter (`myAsyncFilter`) using `addNunjucksAsyncFilter`. The filter function receives the value and a callback function. The callback must be invoked with `(error, result)` when the asynchronous operation (simulated by `setTimeout`) completes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addNunjucksAsyncFilter(\n\t\t\"myAsyncFilter\",\n\t\tfunction (value, callback) {\n\t\t\tsetTimeout(function () {\n\t\t\t\tcallback(null, \"My Result\");\n\t\t\t}, 100);\n\t\t}\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Fetch Errors Gracefully with Fallback Data (ESM)\nDESCRIPTION: Illustrates how to handle potential network errors when using Eleventy Fetch. A `try...catch` block wraps the `Fetch` call. If the request fails (and there's no existing cache), the `catch` block executes, returning predefined fallback data instead of letting the error halt the process. This is useful in Eleventy global data files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nexport default async function () {\n\ttry {\n\t\tlet url = \"https://api.github.com/repos/11ty/eleventy\";\n\n\t\t/* This returns a promise */\n\t\treturn Fetch(url, {\n\t\t\tduration: \"1d\",\n\t\t\ttype: \"json\",\n\t\t});\n\t} catch (e) {\n\t\treturn {\n\t\t\t// my failure fallback data\n\t\t};\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Async Function with Awaited Dependency in Eleventy Template - JavaScript\nDESCRIPTION: Exports an async function that imports and awaits another asynchronous operation before generating output. Depends on an external module (./lib/asyncThing) which should export an async function. Input: any, output: HTML string including the resolved value.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst getAnAsyncThing = require(\"./lib/asyncThing\");\n\nexport default async function (data) {\n\treturn `<p>${await getAnAsyncThing()}</p>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Top-Level JavaScript Variables and Functions in Front Matter (Nunjucks)\nDESCRIPTION: Demonstrates using modern JavaScript directly in front matter (available since Eleventy 3.0.0-alpha.18). Top-level variables (`title`) and functions (`currentDate`) are defined and then used within the Nunjucks template body. This requires the `node-retrieve-globals` library. Note the warning about incompatibility with Liquid templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-frontmatter.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n---js\nconst title = \"My page title\";\n\nfunction currentDate() {\n\treturn (new Date()).toLocaleString();\n}\n---\n\n<h1>{{ title }}</h1>\n<p>Published on {{ currentDate() }}</p>\n\n```\n\n----------------------------------------\n\nTITLE: getData Using Property Names and getInstanceFromInputPath - Eleventy JavaScript\nDESCRIPTION: This advanced configuration uses 'getData' as an array of property names (e.g., ['data', 'otherPropName']) and defines a corresponding 'getInstanceFromInputPath' function to obtain the JavaScript object instance for Eleventy's Data Cascade. This approach allows selecting specific fields from the compiled module/object to inject into the global data context. It can be extended to support multiple properties and custom object resolving strategies.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t// some configuration truncated …\n  // get the `data` property from the instance.\n  getData: [\"data\"],\n  // * `getData: true` is aliased to [\"data\"]\n  // * You can use more than one property name! [\"data\", \"otherPropName\"]\n\n  getInstanceFromInputPath: function(inputPath) {\n    // Return the JavaScript object from which the `data` property will be retrieved.\n    let instance = doSomethingMyselfToFetchAJavaScriptObject(inputPath);\n    return instance;\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy with tsx for TypeScript/JSX Templates (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to configure Eleventy to process `.11ty.jsx`, `.11ty.ts`, and `.11ty.tsx` files using the `tsx` library. It imports `tsx/esm` to enable TypeScript processing and uses `react-dom/server`'s `renderToStaticMarkup` within a custom compile function defined via `eleventyConfig.addExtension`. This configuration requires the project to be set up for ES Modules (ESM), either via `\"type\": \"module\"` in `package.json` or by using an `.mjs` configuration file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/typescript.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport \"tsx/esm\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\nexport default function (eleventyConfig) {\n\t// We can add support for JSX too, at the same time:\n\televentyConfig.addExtension([\"11ty.jsx\", \"11ty.ts\", \"11ty.tsx\"], {\n\t\tkey: \"11ty.js\",\n\t\tcompile: function () {\n\t\t\treturn async function (data) {\n\t\t\t\tlet content = await this.defaultRenderer(data);\n\t\t\t\treturn renderToStaticMarkup(content);\n\t\t\t};\n\t\t},\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Data Filter Selectors in Eleventy JSON Output (JavaScript)\nDESCRIPTION: This snippet shows how to add and remove data filter selectors in Eleventy's configuration using the dataFilterSelectors property. Specifically, it adds the 'page' selector to include the page variable in JSON output and then demonstrates deleting it. No external dependencies beyond Eleventy are required. Key functionality centers on controlling what data is serializable in Eleventy's special output formats (such as --to=json or --to=ndjson), and requires Eleventy 1.0.0 or later.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\televentyConfig.dataFilterSelectors.add(\"page\");\\n\\televentyConfig.dataFilterSelectors.delete(\"page\");\\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Image Markup Manually in Shortcode\nDESCRIPTION: Demonstrates creating a custom Eleventy 'image' shortcode that manually generates the `<img>` tag markup. It fetches image metadata using `Image()` and then uses string interpolation to build the HTML, including escaping the 'alt' attribute using the 'entities' package. This provides maximum control over the output markup and includes error handling for missing alt text.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-shortcodes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { escapeAttribute } from \"entities\";\nimport Image from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addShortcode(\"image\", async function (src, alt) {\n\t\tif (alt === undefined) {\n\t\t\t// You bet we throw an error on missing alt (alt=\"\" works okay)\n\t\t\tthrow new Error(`Missing \\`alt\\` on myImage from: ${src}`);\n\t\t}\n\n\t\tlet metadata = await Image(src, {\n\t\t\twidths: [600],\n\t\t\tformats: [\"jpeg\"],\n\t\t});\n\n\t\tlet data = metadata.jpeg[metadata.jpeg.length - 1];\n\t\treturn `<img src=\"${data.url}\" width=\"${data.width}\" height=\"${data.height}\" alt=\"${escapeAttribute(alt)}\" loading=\"lazy\" decoding=\"async\">`;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation Plugin in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to import and register the Eleventy Navigation plugin within an Eleventy configuration file (typically `eleventy.config.js`). It uses the `eleventyConfig.addPlugin` method. This step is necessary after installation to make the plugin's features available.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport eleventyNavigationPlugin from \"@11ty/eleventy-navigation\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(eleventyNavigationPlugin);\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Collection Item (Liquid)\nDESCRIPTION: Accesses the current page object within a collection using the getCollectionItem filter in Liquid. Can take the page object as an optional argument; from version 2.0.0-beta.1, the argument is optional. Inputs: a collection and optionally a page object. Outputs the current item within the collection, useful for retrieving contextual meta-information.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/collection-items.md#2025-04-23_snippet_6\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% assign currentPost = collections.posts | getCollectionItem: page %}{% endraw %}\n\n<!-- in {{ \"2.0.0-beta.1\" | coerceVersion }} the page argument is optional -->\n{% raw %}{% assign currentPost = collections.posts | getCollectionItem %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Eleventy\nDESCRIPTION: Shows how to use the DEBUG environment variable with cross-env to enable detailed debug logging in Eleventy. This provides deeper insight into Eleventy's internal processes during builds.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx cross-env DEBUG=Eleventy:\\* npx @11ty/eleventy --dryrun\n```\n\n----------------------------------------\n\nTITLE: Customizing Data File Base Name in Eleventy - JavaScript\nDESCRIPTION: Shows how to override the base filename for directory-specific data files using setDataFileBaseName. By default, Eleventy uses the current folder name, but this snippet changes it to a fixed value (e.g., 'index'), affecting search logic for directory data such as index.json or index.11tydata.json. Input is a string (e.g., 'index'); output is changed internal lookup for data files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\t// Looks for index.json and index.11tydata.json instead of using folder names\\n\\televentyConfig.setDataFileBaseName(\\\"index\\\");\\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom JSON Extension (.geojson) Support in Eleventy (JavaScript)\nDESCRIPTION: This snippet illustrates how to add support for a custom file extension (`.geojson`) that contains standard JSON data. It uses the built-in `JSON.parse` method within the `addDataExtension` parser function to handle files with the `.geojson` extension.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-custom.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addDataExtension(\"geojson\", (contents) =>\n\t\tJSON.parse(contents)\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Nunjucks and Universal Filters in Eleventy (JavaScript)\nDESCRIPTION: This snippet illustrates how to add various types of filters within the Eleventy configuration. It shows adding a Nunjucks-specific filter using `addNunjucksFilter`, an asynchronous Nunjucks filter using `addNunjucksAsyncFilter`, and a universal filter (applicable to Liquid, Nunjucks, and 11ty.js) using `addFilter`. Filters modify template variable output.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n  // Nunjucks Filter\n  eleventyConfig.addNunjucksFilter(\"myNjkFilter\", function(value) { /* … */ });\n\n  // Nunjucks Asynchronous Filter (read on below)\n  eleventyConfig.addNunjucksAsyncFilter(\"myAsyncNjkFilter\", function(value, callback) { /* … */ });\n\n  // Universal filters (Adds to Liquid, Nunjucks, and 11ty.js)\n  eleventyConfig.addFilter(\"myFilter\", function(value) { /* … */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing an Inclusive Language Linter in Eleventy (JavaScript)\nDESCRIPTION: This snippet provides a custom linter for Eleventy that identifies and warns about non-inclusive words in markdown files. The linter is registered under the name 'inclusive-language' and scans content for specified trigger words, outputting warnings in the console indicating the offending file and word. Dependencies are limited to the Node.js standard library; key parameters include content, inputPath, and outputPath, with behavior limited to files ending in '.md'. Results are shown via console warnings; no code modifications occur.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\televentyConfig.addLinter(\\n\\t\\t\"inclusive-language\",\\n\\t\\tfunction (content, inputPath, outputPath) {\\n\\t\\t\\tlet words =\\n\\t\\t\\t\\t\"simply,obviously,basically,of course,clearly,just,everyone knows,however,easy\".split(\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t// Eleventy 1.0+: use this.inputPath and this.outputPath instead\\n\\t\\t\\tif (inputPath.endsWith(\".md\")) {\\n\\t\\t\\t\\tfor (let word of words) {\\n\\t\\t\\t\\t\\tlet regexp = new RegExp(\"\\\\b(\" + word + \")\\\\b\", \"gi\");\\n\\t\\t\\t\\t\\tif (content.match(regexp)) {\\n\\t\\t\\t\\t\\t\\tconsole.warn(\\n\\t\\t\\t\\t\\t\\t\\t`Inclusive Language Linter (${inputPath}) Found: ${word}`\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t);\\n};\n```\n\n----------------------------------------\n\nTITLE: Using Same Input and Output Directories in Eleventy\nDESCRIPTION: Demonstrates how to configure Eleventy to use the same directory for both input and output, particularly useful for converting Markdown files to HTML while maintaining the directory structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Parse and write Markdown to HTML, respecting directory structure.\nnpx @11ty/eleventy --input=. --output=. --formats=md\n```\n\n----------------------------------------\n\nTITLE: Creating Pagination Navigation with JavaScript in 11ty\nDESCRIPTION: A JavaScript-based 11ty template implementation for pagination navigation. Shows how to handle pagination using JavaScript template functions to generate the same accessible navigation structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{%- include \"snippets/pagination/nav/combined.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Automating Eleventy Deployment to GitHub Pages with Persisted Cache using GitHub Actions - YAML\nDESCRIPTION: Provides a complete GitHub Actions workflow (.github/workflows/deploy-to-ghpages.yml) for deploying an Eleventy project to GitHub Pages. The workflow triggers on push to the main branch or pull requests, configures Node.js, installs dependencies, persists both npm and Eleventy caches for optimized build times, runs a custom build script, and deploys the output with the peaceiris/actions-gh-pages action. Key parameters include the branch reference, publishing directory, and use of GitHub's token for authentication. This is suitable for continuous deployment setups requiring cache persistency and automated publish steps.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/deployment.md#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nname: Deploy to GitHub Pages\\n\\non:\\n  push:\\n    branches:\\n      - main\\n  pull_request:\\n\\njobs:\\n  deploy:\\n    runs-on: ubuntu-22.04\\n    permissions:\\n      contents: write\\n    concurrency:\\n      group: ${{ github.workflow }}-${{ github.ref }}\\n    steps:\\n      - uses: actions/checkout@v3\\n\\n      - name: Setup Node\\n        uses: actions/setup-node@v3\\n        with:\\n          node-version: \\\"18\\\"\\n\\n      - name: Persist npm cache\\n        uses: actions/cache@v3\\n        with:\\n          path: ~/.npm\\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}\\n\\n      - name: Persist Eleventy .cache\\n        uses: actions/cache@v3\\n        with:\\n          path: ./.cache\\n          key: ${{ runner.os }}-eleventy-fetch-cache\\n\\n      - run: npm install\\n      - run: npm run build-ghpages\\n\\n      - name: Deploy\\n        uses: peaceiris/actions-gh-pages@v3\\n        if: github.ref == 'refs/heads/main'\\n        with:\\n          github_token: ${{ secrets.GITHUB_TOKEN }}\\n          publish_dir: ./_site\n```\n\n----------------------------------------\n\nTITLE: Linking to Previous and Next Blog Posts (Nunjucks/Jinja2)\nDESCRIPTION: Creates navigation links for previous and next blog posts using Nunjucks/Jinja2 if previousPost and nextPost are set. Relies on variables from collection filters, each being an object with url and data.title. Renders anchor tags only if the related object exists, allowing conditional navigation between posts.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/collection-items.md#2025-04-23_snippet_3\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if previousPost %}Previous Blog Post: <a href=\"{{ previousPost.url }}\">{{ previousPost.data.title }}</a>{% endif %}\n{% if nextPost %}Next Blog Post: <a href=\"{{ nextPost.url }}\">{{ nextPost.data.title }}</a>{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Integrating Alpine.js with <is-land> for Client-Only Interactivity (HTML)\nDESCRIPTION: Shows how to use <is-land> to dynamically import Alpine.js and enable client-only declarative JS UI in hydrated content. Alpine's own initialization mechanisms eliminate the need for autoinit. Inputs: external Alpine.js, Alpine-specific attributes and markup. Outputs: interactive increment/decrement counter using Alpine.js features.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<is-land on:visible import=\\\"https://unpkg.com/alpinejs\\\">\\n\\t<div x-data=\\\"{ count: 0 }\\\">\\n\\t\\tHello from Alpine.js!\\n\\n\\t\\t<button @click=\\\"count++\\\">⬆️</button> <button @click=\\\"count--\\\">⬇️</button>\\n\\t\\t<span x-text=\\\"count\\\"></span>\\n\\t</div>\\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Disabling Template Processing via Front Matter in Markdown/YAML\nDESCRIPTION: This snippet demonstrates how to prevent Eleventy from performing any template transformations on a file. By setting `templateEngineOverride` to a falsy value like `false` in the front matter, the file's content will be copied directly to the output without being processed by any template engine.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/template-overrides.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntemplateEngineOverride: false\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Testing in an Eleventy Plugin\nDESCRIPTION: Shows how to check for the existence of required Eleventy features within a plugin.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig, pluginOptions) {\n\tif(!(\"addTemplate\" in eleventyConfig)) {\n\t\tconsole.log( `[my-test-plugin] WARN Eleventy plugin compatibility: Virtual Templates are required for this plugin, please use Eleventy v3.0 or newer.` );\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Per-Engine Filters - Eleventy Configuration - JavaScript\nDESCRIPTION: Defines how to register filters for individual template engines (Liquid, Nunjucks, and JavaScript) using respective Eleventy configuration methods. Demonstrates both synchronous and asynchronous registrations. When using Nunjucks async filters, callbacks are necessary and the Nunjucks documentation should be referenced for proper usage.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Liquid Filter (async-friendly)\n  eleventyConfig.addLiquidFilter(\"myFilter\", async function(value) { /* … */ });\n\n  // Nunjucks Filter\n  eleventyConfig.addNunjucksFilter(\"myFilter\", function(value) { /* … */ });\n\n  // Nunjucks Async Filter\n  // Read the Nunjucks docs before using this (link below)\n  eleventyConfig.addNunjucksAsyncFilter(\"myFilter\", function() { /* … */ });\n\n  // JavaScript Template Function (async-friendly)\n  eleventyConfig.addJavaScriptFunction(\"myFilter\", async function(value) { /* … */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Permalinks via Directory Data File in Eleventy JavaScript\nDESCRIPTION: Generates permalinks for files in a directory using their title, ensuring URL-friendly slugs by leveraging the built-in `slugify` method. Requires the content file's title to be present in the data cascade and is placed inside a directory data file (e.g., `recipes.11tydata.js`). The function returns a string for the permalink based on the title. This snippet only works for content templates that provide a title.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n\tpermalink: function ({ title }) {\n\t\treturn `/recipes/${this.slugify(title)}`;\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Using Template Syntax and Filters in Permalink (Liquid/Nunjucks)\nDESCRIPTION: Example of using template syntax (Liquid or Nunjucks) within the `permalink` value in YAML front matter. It utilizes a data variable (`title`) and the `slugify` filter to generate a URL-safe output path dynamically.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% raw %}\n```markdown\n---\ntitle: This is a New Path\npermalink: \"subdir/{{ title | slugify }}/index.html\"\n---\n```\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Basic Eleventy Plugin Configuration (JavaScript ES Module)\nDESCRIPTION: Demonstrates the basic integration of the syntax highlighting plugin into an Eleventy configuration file (`eleventy.config.js`) using ES Module syntax. This involves importing the plugin and adding it using `eleventyConfig.addPlugin`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/syntaxhighlight.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport syntaxHighlight from \"@11ty/eleventy-plugin-syntaxhighlight\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(syntaxHighlight);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Asynchronous JavaScript Template Function in Eleventy Config - JavaScript\nDESCRIPTION: Registers an async JavaScript Template Function with Eleventy's config API. Added under a custom function name, whose implementation may use async/await. Input: function name and implementation; provides support for awaiting results in templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\n  eleventyConfig.addJavaScriptFunction(\"myAsyncFunction\", async function(a, b) { /* … */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Permalink Compilation Options in Eleventy\nDESCRIPTION: This code demonstrates how to customize the permalink compilation behavior using the compileOptions.permalink configuration. It shows the function signature that returns a render function for custom permalink generation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n  // some configuration truncated …\n  compileOptions: {\n    permalink: function(contents, inputPath) {\n      return (data) => {\n        // Return a string to override: you'll want to use `data.page`\n        // Or `return;` (return undefined) to fallback to default behavior\n      }\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Incorrect Shortcode Indentation Creating Unintended Code Blocks - JavaScript\nDESCRIPTION: This JavaScript snippet shows an Eleventy shortcode whose returned template literal contains indented content, which will be parsed as an indented code block by markdown. The problem arises if the returned string is used in a markdown file; leading spaces create unwanted <pre><code> blocks. Developers should avoid extra indentation in template literals for markdown content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 🛑 Bad, don’t do this\neleventyConfig.addShortcode(\\\"badShortcode\\\", function () {\n\treturn `\n    This is a code block in a markdown file!\n`;\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Class with Permalink as Function in Eleventy Template - JavaScript\nDESCRIPTION: Exports a class that sets the 'permalink' property in its 'data' method to a function, enabling dynamic permalink generation based on input data. No external dependencies; output path varies per data properties provided in context.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Test {\n\tdata() {\n\t\treturn {\n\t\t\tkey: \"hello\",\n\t\t\t// Writes to \"/my-permalink/hello/index.html\"\n\t\t\tpermalink: (data) => `/my-permalink/${data.key}/`,\n\t\t};\n\t}\n\n\trender(data) {\n\t\t/* … */\n\t}\n}\n\nexport default Test;\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Eleventy Image HTML Transform in JavaScript Config\nDESCRIPTION: This JavaScript code snippet shows how to enable the Eleventy Image HTML transform plugin with default settings within an Eleventy configuration file (`.eleventy.js` or `eleventy.config.js`). It imports the plugin and adds it using `eleventyConfig.addPlugin`. This automatically processes `<img>` and `<picture>` tags in HTML output.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { eleventyImageTransformPlugin } from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(eleventyImageTransformPlugin);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Handlebars Plugin in Eleventy (ESM)\nDESCRIPTION: This JavaScript code snippet shows the basic ES Module configuration for adding the Handlebars plugin to an Eleventy project. It imports the plugin and uses `eleventyConfig.addPlugin()` within the configuration function.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/handlebars.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport handlebarsPlugin from \"@11ty/eleventy-plugin-handlebars\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(handlebarsPlugin);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Plugin in Eleventy Configuration\nDESCRIPTION: Demonstrates how to add a basic plugin function directly within an Eleventy configuration file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(function(eleventyConfig) {\n\t\t// I am a plugin!\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Shortcodes in Eleventy (JavaScript)\nDESCRIPTION: This JavaScript configuration snippet demonstrates defining asynchronous shortcodes (both standard and paired) for Liquid in Eleventy. It uses `async function` syntax, allowing the use of `await` within the shortcode logic, leveraging Liquid's native promise support. The example assumes an external async operation like `fetchAThing()`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addLiquidShortcode(\n\t\t\"user\",\n\t\tasync function (name, twitterUsername) {\n\t\t\treturn await fetchAThing();\n\t\t}\n\t);\n\n\televentyConfig.addPairedShortcode(\n\t\t\"user2\",\n\t\tasync function (content, name, twitterUsername) {\n\t\t\treturn await fetchAThing();\n\t\t}\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Paging an Array with Eleventy Pagination - Nunjucks Template\nDESCRIPTION: Shows Eleventy pagination in a Nunjucks template, paginating over an array and creating multiple pages as output. The 'pagination' key configures the chunk size and data source, while template logic determines what to display per page. Depends on Eleventy and expects 'testdata' as an input data array.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{% include \\\"snippets/pagination/paged-array.njk\\\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Handlebars Plugin with Options in Eleventy (ESM)\nDESCRIPTION: This JavaScript code snippet demonstrates how to add the Handlebars plugin to Eleventy with custom options. Specifically, it shows how to override the default Handlebars library instance using the `eleventyLibraryOverride` option, providing a custom `handlebars` instance.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/handlebars.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport handlebars from \"handlebars\";\nimport handlebarsPlugin from \"@11ty/eleventy-plugin-handlebars\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(handlebarsPlugin, {\n\t\t// Override the `ejs` library instance\n\t\televentyLibraryOverride: handlebars,\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Alternate: Using @mdx-js/node-loader with Eleventy (JavaScript)\nDESCRIPTION: This snippet shows an alternative Eleventy configuration using the @mdx-js/node-loader, which relies on Node.js\\'s loader system to process MDX files. It registers the loader module using Node\\'s module.register API and sets up an \\'mdx\\' extension that compiles templates by delegating rendering to the loader and React\\'s renderToStaticMarkup. This approach omits support for front matter in .mdx files. Dependencies: @mdx-js/node-loader, react-dom/server, Node.js 16+. Inputs: template data; outputs: rendered static HTML. Not compatible with front matter parsing in MDX files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/mdx.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {register} from 'node:module';\nimport {renderToStaticMarkup} from 'react-dom/server'\n\nregister('@mdx-js/node-loader', import.meta.url);\n\nexport default function(eleventyConfig) {\n\televentyConfig.addExtension(\"mdx\", {\n\t\tkey: \"11ty.js\",\n\t\tcompile: () => {\n\t\t\treturn async function(data) {\n\t\t\t\tlet content = await this.defaultRenderer(data);\n\t\t\t\treturn renderToStaticMarkup(content);\n\t\t\t};\n\t\t}\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Serving Eleventy with Live Reload or Watch Mode (Bash)\nDESCRIPTION: This group of Bash commands demonstrates how to run Eleventy in watch mode or with a live-reload development server. --serve runs a web server and automatically rebuilds/reloads on changes; --port sets a custom server port. --watch rebuilds without starting the server. These commands require Eleventy v0.10.0+ and Node.js. Inputs: project to build and serve; Outputs: live-reloading preview at specified port or watch mode.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Add a web server to apply changes and\\n# refresh automatically. We’ll also --watch for you.\\nnpx @11ty/eleventy --serve\\n\\n# Change the web server’s port—use localhost:8081\\nnpx @11ty/eleventy --serve --port=8081\\n\\n# Watch and re-run when files change, without the web server.\\nnpx @11ty/eleventy --watch\n```\n\n----------------------------------------\n\nTITLE: Outputting Eleventy Build as JSON or NDJSON (Bash)\nDESCRIPTION: These Bash snippets run Eleventy and produce output in JSON or newline-delimited JSON (NDJSON) formats, without writing files to disk. The --to flag accepts 'json', 'ndjson', or 'fs' (file system, default). Dependencies: Eleventy installed. Useful for programmatic inspection or tooling. Inputs: site sources; Outputs: JSON or NDJSON printed to stdout.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Output a JSON structure (does not write to the file system)\\nnpx @11ty/eleventy --to=json\\n\\n# Output a Newline Deliminated JSON structure (does not write to the file system)\\nnpx @11ty/eleventy --to=ndjson\\n\\n# Default behavior (Output to file system)\\nnpx @11ty/eleventy --to=fs\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Bundle and Reusing Icons via HTML\nDESCRIPTION: Illustrates bundling SVG icon definitions and reusing them in HTML. Definitions are collected in a bundle and injected into a hidden <svg><defs> element at the top of the page. Icons can then be referenced multiple times using <use xlink:href>. Requires the svg bundle to be configured and asset blocks populated using the svg shortcode.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/bundle.md#2025-04-23_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\\\"0\\\" height=\\\"0\\\" aria-hidden=\\\"true\\\" style=\\\"position: absolute;\\\">\\n\\t<defs>{% getBundle \\\"svg\\\" %}</defs>\\n</svg>\\n\\n<!-- Add icons to the set from anywhere on the page -->\\n{% svg %}\\n<g id=\\\"icon-close\\\"><path d=\\\"…\\\" /></g>\\n{% endsvg %}\\n\\nAnd now you can use `icon-close` in as many SVG instances as you’d like (without repeating the heftier SVG content).\\n\\n<svg><use xlink:href=\\\"#icon-close\\\"></use></svg>\\n<svg><use xlink:href=\\\"#icon-close\\\"></use></svg>\\n<svg><use xlink:href=\\\"#icon-close\\\"></use></svg>\\n<svg><use xlink:href=\\\"#icon-close\\\"></use></svg>\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Default \"node_modules\" Ignore in Eleventy Config (JavaScript)\nDESCRIPTION: Shows how to remove the default node_modules ignore filter using the EleventyConfig API. This is necessary if you want Eleventy to process files inside node_modules, which is ignored by default in both v1 and v2, albeit with different patterns. The snippet provides delete() usage for both Eleventy 1.0 ('node_modules/**') and 2.0 ('**/node_modules/**'). Dependency: Eleventy configuration API. Inputs: string pattern to ignore/delete. Result: allows processing of node_modules files when removed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/ignores.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\t// in Eleventy 2.0\\n\\televentyConfig.ignores.delete(\\\"**/node_modules/**\\\");\\n\\n\\t// in Eleventy 1.0\\n\\televentyConfig.ignores.delete(\\\"node_modules/**\\\");\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Pagination Values in Eleventy\nDESCRIPTION: Shows how to filter specific values from a data set during pagination using the 'filter' property. This feature was added in Eleventy version 0.4.0.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n---\npagination:\n  data: testdata\n  size: 1\n  filter:\n    - item3\ntestdata:\n  item1: itemvalue1\n  item2: itemvalue2\n  item3: itemvalue3\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Paired and Universal Shortcodes with EleventyConfig (JavaScript)\nDESCRIPTION: This JavaScript snippet registers a paired Nunjucks shortcode and a universal paired shortcode named 'user' using Eleventy's configuration API. The universal version supports Liquid, Nunjucks, and 11ty.js templates, dynamically generating user profile HTML including name, Twitter handle, and bio content. Requires Eleventy’s JavaScript configuration and familiarity with template engines; inputs are user content and parameters (bio, name, twitterUsername); outputs structured user HTML. No external dependencies beyond Eleventy are required. Notable limitation: synchronous usage only.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\n  // Nunjucks Shortcode\n  eleventyConfig.addPairedNunjucksShortcode(\"user\", function(bioContent, name, twitterUsername) { /* … */ });\n\n  // Universal Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)\n  eleventyConfig.addPairedShortcode(\"user\", function(bioContent, name, twitterUsername) {\n    return `<div class=\\\"user\\\">\\n<div class=\\\"user_name\\\">${name}</div>\\n<div class=\\\"user_twitter\\\">@${twitterUsername}</div>\\n<div class=\\\"user_bio\\\">${bioContent}</div>\\n</div>`;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Virtual Template in Eleventy (JavaScript)\nDESCRIPTION: This snippet illustrates how to define a virtual template using JavaScript (`.11ty.js` syntax) directly in the Eleventy configuration file. The `eleventyConfig.addTemplate` method is used, providing a virtual path ending in `.11ty.js` and a JavaScript function as the content. This function accepts the template's data object as an argument and should return the rendered content (e.g., an HTML string). This feature supports various JavaScript shapes compatible with standard `11ty.js` templates and requires Eleventy v3.0.0-alpha.15 or later.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/virtual-templates.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Create content templates Files\n\televentyConfig.addTemplate(\"virtual.11ty.js\", function(data) {\n\t\treturn `<h1>Hello</h1>`;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Capturing, Minifying, and Inlining CSS with Nunjucks in Eleventy\nDESCRIPTION: This HTML snippet showcases capturing CSS content from multiple included files into a Nunjucks variable (`css`). It then uses a custom `cssmin` filter to minify the captured CSS and outputs the result safely within inline `<style>` tags. This requires Eleventy, Nunjucks, and a configured `cssmin` filter.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/concatenate.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- capture the CSS content as a Nunjucks variable -->\n{% set css %}\n{% include \"components/header.css\" %}\n{% include \"components/footer.css\" %}\n{% endset %}\n<!-- feed it through our cssmin filter to minify -->\n<style>\n\t{{ css | cssmin | safe }}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Including a File with Liquid\nDESCRIPTION: Demonstrates the basic Liquid `include` tag syntax in Eleventy. This looks for the specified file (`user.liquid`) within the `_includes` directory. Front matter in the included file is not processed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_3\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% include user %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Class Template Using JavaScript as Preprocessor for Markdown - JavaScript\nDESCRIPTION: Exports a class with 'data' returning a 'templateEngineOverride' string to run the rendered output through both JavaScript and Markdown. Requires Eleventy v0.7.0+ and that Markdown is available; results in Markdown being rendered after JavaScript interpolation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Test {\n\tdata() {\n\t\treturn {\n\t\t\tmyName: \"Zach\",\n\t\t\ttemplateEngineOverride: \"11ty.js,md\",\n\t\t};\n\t}\n\n\trender(data) {\n\t\treturn `# This is ${data.myName}`;\n\t}\n}\n\nexport default Test;\n```\n\n----------------------------------------\n\nTITLE: Adding Render Plugin with Options in Eleventy Configuration (JavaScript)\nDESCRIPTION: Demonstrates how to add the Eleventy Render Plugin to the configuration file (`eleventy.config.js`) while passing an optional configuration object. This allows for customization of the plugin's behavior, although specific options are not detailed here.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/render.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { EleventyRenderPlugin } = require(\"@11ty/eleventy\");\n\nmodule.exports = function(eleventyConfig) {\n  eleventyConfig.addPlugin(EleventyRenderPlugin, {\n    // Optional plugin options\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Environment Variables in package.json\nDESCRIPTION: Configuration in package.json to set environment variables using cross-env for cross-platform compatibility.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/environment-vars.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"scripts\": {\n    \"build:prod\": \"cross-env MY_ENVIRONMENT=production npx @11ty/eleventy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Attributes in WebC\nDESCRIPTION: Examples of using dynamic attributes and properties with JavaScript values in WebC components.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<avatar-image\n\tsrc=\"my-image.jpeg\"\n\talt=\"Zach is documenting this project\"\n\t:@dynamic-prop=\"'hello'\"\n></avatar-image>\n```\n\nLANGUAGE: html\nCODE:\n```\n<img :src=\"src\" :alt=\"alt\" class=\"avatar-image\" />\n```\n\n----------------------------------------\n\nTITLE: Logging Image Metadata Object with Eleventy Image JavaScript API (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript object returned by the Eleventy Image API after processing an image. The object contains arrays for each target format (e.g., webp, jpeg), with information like format, dimensions, filename, output path, URL, MIME type, srcset, and file size. Inputs to the API include the source image path/URL, formats, and sizes; outputs are detailed metadata for generated optimized images.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-js.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n\\twebp: [\\n\\t\\t{\\n\\t\\t\\tformat: 'webp',\\n\\t\\t\\twidth: 300,\\n\\t\\t\\theight: 300,\\n\\t\\t\\tfilename: '6dfd7ac6-300.webp',\\n\\t\\t\\toutputPath: 'img/6dfd7ac6-300.webp',\\n\\t\\t\\turl: '/img/6dfd7ac6-300.webp',\\n\\t\\t\\tsourceType: 'image/webp',\\n\\t\\t\\tsrcset: '/img/6dfd7ac6-300.webp 300w',\\n\\t\\t\\tsize: 10184\\n\\t\\t}\\n\\t],\\n\\tjpeg: [\\n\\t\\t{\\n\\t\\t\\tformat: 'jpeg',\\n\\t\\t\\twidth: 300,\\n\\t\\t\\theight: 300,\\n\\t\\t\\tfilename: '6dfd7ac6-300.jpeg',\\n\\t\\t\\toutputPath: 'img/6dfd7ac6-300.jpeg',\\n\\t\\t\\turl: '/img/6dfd7ac6-300.jpeg',\\n\\t\\t\\tsourceType: 'image/jpeg',\\n\\t\\t\\tsrcset: '/img/6dfd7ac6-300.jpeg 300w',\\n\\t\\t\\tsize: 15616\\n\\t\\t}\\n\\t]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown and Layout Virtual Templates in Eleventy (JavaScript)\nDESCRIPTION: This snippet demonstrates using `eleventyConfig.addTemplate` within an Eleventy configuration file (`.eleventy.js`) to create a virtual Markdown template (`virtual.md`) and a corresponding virtual HTML layout (`_includes/virtual.html`). The Markdown template's content is defined as a string, and it references the layout using the `data` parameter. The layout template uses Liquid syntax (`{% raw %}{{ content }}{% endraw %}`) to inject the content from the Markdown template. This requires Eleventy v3.0.0-alpha.15 or later.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/virtual-templates.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Create content templates Files\n\televentyConfig.addTemplate(\"virtual.md\", `# Hello`, {\n        \tlayout: \"virtual.html\"\n\t});\n\n\t// Works great with Layouts too\n\televentyConfig.addTemplate(\"_includes/virtual.html\", `<!-- Layout -->{% raw %}{{ content }}{% endraw %}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Image Widths Using Bound Array with eleventy-image in HTML\nDESCRIPTION: This HTML snippet demonstrates specifying image widths for the `<eleventy-image>` component using WebC's attribute binding syntax (`:width`). An array `[100, 200]` is passed to the component, instructing it to generate image versions at 100 and 200 pixels wide. This is an alternative syntax to the comma-separated string method when using `webc:is`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-webc.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img webc:is=\"eleventy-image\" :width=\"[100, 200]\" src=\"cat.jpg\" alt=\"photo of my tabby cat\">\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Global Data in Eleventy Config\nDESCRIPTION: Shows how to add global data using complex nested paths compatible with lodash-set in Eleventy configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-global-custom.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (eleventyConfig) {\n\televentyConfig.addGlobalData(\"myNestedObject.myString\", \"myValue\");\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Eleventy Filter for JavaScript Minification using Terser\nDESCRIPTION: This JavaScript snippet defines an asynchronous Eleventy filter named `jsmin`. It uses the `minify` function from the `terser` library to compress the input JavaScript code. The filter handles potential errors during minification by logging the error and returning the original code, ensuring graceful failure. This filter is intended to be added to the Eleventy configuration file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/inline-js.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { minify } from \"terser\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addFilter(\"jsmin\", async function (code, callback) {\n\t\ttry {\n\t\t\tconst minified = await minify(code);\n\t\t\tcallback(null, minified.code);\n\t\t} catch (err) {\n\t\t\tconsole.error(\"Terser error: \", err);\n\t\t\t// Fail gracefully.\n\t\t\tcallback(null, code);\n\t\t}\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Pagination Navigation in Eleventy with Liquid\nDESCRIPTION: This snippet constructs an accessible navigation structure linking to each paginated page using Eleventy with Liquid templates. It iterates through the available pagination pages via 'pagination.pages', rendering each link and applying 'aria-current' where needed. The structure is intended for clear page navigation and is dependent on Eleventy pagination features. Outputs a complete <nav> element with an ordered list of page links. Designed for use in a pagination template file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n<nav aria-labelledby=\"my-pagination\">\n  <h2 id=\"my-pagination\">This is my Pagination</h2>\n  <ol>\n    {% for pageIndex in (0..pagination.pages.size | minus: 1) %}\n      <li>\n        <a href=\"{{ pagination.hrefs[pageIndex] }}\"{% if page.url == pagination.hrefs[pageIndex] %} aria-current=\"page\"{% endif %}>\n          Page {{ pageIndex | plus: 1 }}\n        </a>\n      </li>\n    {% endfor %}\n  </ol>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Using the 'before' Callback in Eleventy Pagination\nDESCRIPTION: Shows how to use the 'before' callback to modify pagination data before pagination occurs. This powerful feature was added in Eleventy version 0.10.0.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n---js\n{\n  pagination: {\n    data: \"testdata\",\n    size: 2,\n    before: function(paginationData, fullData) {\n      // `fullData` is new in v1.0.1 and contains the full Data Cascade thus far\n\n      return paginationData.map(entry => `${entry} with a suffix`);\n    }\n  },\n  testdata: [\n    \"item1\",\n    \"item2\",\n    \"item3\",\n    \"item4\"\n  ]\n}\n---\n<!-- the rest of the template -->\n```\n\n----------------------------------------\n\nTITLE: Adding Pug Plugin to Eleventy Config (JavaScript)\nDESCRIPTION: Imports the Pug plugin and registers it with Eleventy's configuration using the addPlugin method. This snippet is placed in the Eleventy config file (e.g., .eleventy.js or eleventy.config.mjs). No extra plugin options are provided in this basic example. Required dependency: '@11ty/eleventy-plugin-pug'. Input: eleventyConfig object. Output: Eleventy instance with Pug plugin enabled.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/pug.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport pugPlugin from \"@11ty/eleventy-plugin-pug\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(pugPlugin);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Atom Feed Template in Eleventy\nDESCRIPTION: This template creates a valid Atom XML feed for blog posts. It includes configuration for permalink, metadata (title, description, language, base URL, author), and iterates through a collection of posts to generate feed entries with titles, links, update dates, and content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/rss.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n---json\n{\n  \"permalink\": \"feed.xml\",\n  \"eleventyExcludeFromCollections\": true,\n  \"metadata\": {\n    \"title\": \"My Blog about Boats\",\n    \"description\": \"I am writing about my experiences as a naval navel-gazer.\",\n    \"language\": \"en\",\n    \"base\": \"https://example.com/\",\n    \"author\": {\n      \"name\": \"Boaty McBoatFace\"\n    }\n  }\n}\n---\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\" xml:lang=\"{{ metadata.language or page.lang }}\">\n  <title>{{ metadata.title }}</title>\n  <subtitle>{{ metadata.description }}</subtitle>\n  <link href=\"{{ permalink | htmlBaseUrl(metadata.base) }}\" rel=\"self\" />\n  <link href=\"{{ metadata.base | addPathPrefixToFullUrl }}\" />\n  <updated>{{ collections.posts | getNewestCollectionItemDate | dateToRfc3339 }}</updated>\n  <id>{{ metadata.base | addPathPrefixToFullUrl }}</id>\n  <author>\n    <name>{{ metadata.author.name }}</name>\n  </author>\n  {%- for post in collections.posts | reverse %}\n  {%- set absolutePostUrl %}{{ post.url | htmlBaseUrl(metadata.base) }}{% endset %}\n  <entry>\n    <title>{{ post.data.title }}</title>\n    <link href=\"{{ absolutePostUrl }}\" />\n    <updated>{{ post.date | dateToRfc3339 }}</updated>\n    <id>{{ absolutePostUrl }}</id>\n    <content type=\"html\">{{ post.content | renderTransforms(post.data.page, metadata.base) }}</content>\n  </entry>\n  {%- endfor %}\n</feed>\n```\n\n----------------------------------------\n\nTITLE: Paging an Array with Eleventy Pagination - JavaScript Template (CommonJS)\nDESCRIPTION: Demonstrates the use of pagination in a CommonJS Eleventy template format, splitting array data into pages as output. Included via the .cjs extension, this approach is similar to ES modules but may be suitable for older node environments. Requires Eleventy and an input array named 'testdata'.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{% include \\\"snippets/pagination/paged-array.cjs\\\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Pages Build Script for Eleventy with Path Prefix - JSON\nDESCRIPTION: Adds a custom script `build-ghpages` in the package.json scripts section to include the --pathprefix argument, necessary when the site is deployed to a sub-path (e.g., a GitHub repository called 'your-repo-name'). This script enables running Eleventy builds suitable for serving from GitHub Pages branch deployments supporting preserved cache and custom paths. Requires @11ty/eleventy as a dependency and assumes the static site will be published from './_site'.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/deployment.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\\\"scripts\\\": {\\n  \\\"build-ghpages\\\": \\\"npx @11ty/eleventy --pathprefix=/your-repo-name/\\\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Post-JS Template Swapping in <is-land> (HTML)\nDESCRIPTION: Details how to use <template data-island> inside <is-land> to provide post-hydration content to be swapped when the island loads. Leveraging templates allows DOM replacement behaviors for advanced client-side interactivity. Dependencies: <is-land> support for templates. Input: HTML with <template data-island>; Output: hydrated component replaces template content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<is-land on:visible on:idle>\\n\\t<template data-island>\\n\\t\\t<vanilla-web-component> This component is post-JS. </vanilla-web-component>\\n\\t</template>\\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Adding All Pagination Pages to Collections with addAllPagesToCollections\nDESCRIPTION: Demonstrates how to use the 'addAllPagesToCollections' option to include all pagination pages in a collection rather than just the first page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntags:\n  - myCollection\npagination:\n  data: testdata\n  size: 2\n  addAllPagesToCollections: true\ntestdata:\n  - item1\n  - item2\n  - item3\n  - item4\n---\n```\n\n----------------------------------------\n\nTITLE: Adding a Nunjucks Filter with Multiple Arguments (JavaScript)\nDESCRIPTION: This configuration snippet shows how to define a Nunjucks-specific filter named `concatThreeStrings` that accepts multiple arguments. The filter function receives the initial value (piped in the template) as the first argument, followed by any additional arguments passed in the template.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Nunjucks Filter\n\televentyConfig.addNunjucksFilter(\n\t\t\"concatThreeStrings\",\n\t\tfunction (arg1, arg2, arg3) {\n\t\t\treturn arg1 + arg2 + arg3;\n\t\t}\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Data with Eleventy Fetch and Error Handling in JavaScript\nDESCRIPTION: This JavaScript snippet enhances the basic fetch example by incorporating error handling using a `try...catch` block. It attempts to fetch and cache GitHub repository data using `@11ty/eleventy-fetch`. If the initial fetch fails (and no expired cache entry is available), the `catch` block executes, logs a message to the console, and returns a default object `{ stargazers: 0 }` to prevent build failures. This approach ensures the site can still build even if the API is temporarily unavailable. Note: The code uses `EleventyFetch` within the try block, but the import statement uses `Fetch`, suggesting `Fetch` is the intended variable.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/cache-api-requests.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nexport default async function () {\n\ttry {\n\t\t// https://developer.github.com/v3/repos/#get\n\t\tlet json = await EleventyFetch(\n\t\t\t\"https://api.github.com/repos/11ty/eleventy\",\n\t\t\t{\n\t\t\t\tduration: \"1d\", // 1 day\n\t\t\t\ttype: \"json\", // also supports \"text\" or \"buffer\"\n\t\t\t}\n\t\t);\n\n\t\treturn {\n\t\t\tstargazers: json.stargazers_count,\n\t\t};\n\t} catch (e) {\n\t\tconsole.log(\"Failed getting GitHub stargazers count, returning 0\");\n\t\treturn {\n\t\t\tstargazers: 0,\n\t\t};\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Corrected Shortcode Without Indentation for Markdown Output - JavaScript\nDESCRIPTION: This example demonstrates a properly formatted Eleventy shortcode whose returned template literal has no leading spaces, preventing unwanted code block parsing. The result when used in a markdown file is inlined text, not a code block.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ✅ This will return expected output\neleventyConfig.addShortcode(\\\"goodShortcode\\\", function () {\n\treturn `\nThis will not be a code block in a markdown file.\n`;\n});\n```\n\n----------------------------------------\n\nTITLE: WebC Props Implementation\nDESCRIPTION: Shows how to use props (private attributes) in WebC components that don't appear in output HTML.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<my-component @prop=\"Hello\"></my-component>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p @text=\"prop\"></p>\n<!-- outputs <p>Hello</p> -->\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with Specified TypeScript Formats (Shell)\nDESCRIPTION: This shell command demonstrates how to run Eleventy while explicitly instructing it to process only `.11ty.ts` and `.11ty.tsx` files using the `--formats` flag. This is useful after configuring Eleventy to handle these extensions, ensuring only the specified formats are built.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/typescript.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @11ty/eleventy --formats=11ty.ts,11ty.tsx\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Date Parsing Logic in Eleventy Configuration (JavaScript)\nDESCRIPTION: Provides an example of using `eleventyConfig.addDateParsing` in an Eleventy configuration file (`.eleventy.js`) to handle custom date formats. This specific example uses the Luxon library to parse a date string including an IANA time zone (e.g., '2019-08-31 23:59:56 America/New_York'). Requires the 'luxon' package.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/dates.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DateTime } from \"luxon\";\n\nexport default function(eleventyConfig) {\n\televentyConfig.addDateParsing(function(dateValue) {\n\t\treturn DateTime.fromFormat(dateValue, \"yyyy-MM-dd hh:mm:ss z\");\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Possum Pages with Eleventy Pagination (Markdown/Liquid/Nunjucks)\nDESCRIPTION: This template uses Eleventy's front matter pagination feature to iterate over the 'possums' data (sourced from '_data/possums.json'). It configures pagination to create one page per data item ('size: 1') and aliases each item as 'possum'. A unique 'permalink' is generated for each page using the slugified possum name. The template body displays the 'name' and 'age' for the current 'possum'. The template language can be Liquid or Nunjucks.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pages-from-data.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\npagination:\n  data: possums\n  size: 1\n  alias: possum\npermalink: \"possums/{{ possum.name | slugify }}/\"\n---\n\n{{ possum.name }} is {{ possum.age }} years old\n```\n\n----------------------------------------\n\nTITLE: Applying Default Layout via Directory Data File (JSON)\nDESCRIPTION: This JSON configuration, placed in a file named `posts.json` within the `posts` directory, sets the `layout` data key for all templates located in `posts/` and its subdirectories. It assigns `layouts/post.njk` as the default layout, demonstrating how directory-level data files can configure shared properties for multiple templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-template-dir.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"layout\": \"layouts/post.njk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Asynchronous Nunjucks Filter with Multiple Arguments (JavaScript)\nDESCRIPTION: This JavaScript example shows how to define an asynchronous Nunjucks filter (`myAsyncFilter`) that accepts multiple arguments. The filter function receives `value1` (piped in), `value2` (passed as an argument), and the final `callback` function. The callback handles the asynchronous result.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addNunjucksAsyncFilter(\n\t\t\"myAsyncFilter\",\n\t\tfunction (value1, value2, callback) {\n\t\t\tsetTimeout(function () {\n\t\t\t\tcallback(null, \"My Result\");\n\t\t\t}, 100);\n\t\t}\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding Eleventy Sparkline Image in HTML\nDESCRIPTION: Demonstrates how to embed a sparkline generated by the Eleventy Sparkline service into an HTML document using an `<img>` tag. The example specifies dimensions (120x30), data values, a custom color (#123456, URI encoded as %23123456), and includes relevant attributes like `width`, `height`, `alt`, `loading`, and `decoding`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/sparklines.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img\n\tsrc=\"https://v1.sparkline.11ty.dev/120x30/41,25,9,12,10,6,12,14,19,17,23,30,36,21,40/%23123456/\"\n\twidth=\"120\"\n\theight=\"30\"\n\talt=\"Sparkline representing frequency of posts written from 2007 to 2021\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Resolution Enforcement - Eleventy JavaScript Config\nDESCRIPTION: Illustrates how to call the 'setLayoutResolution' method in Eleventy’s config file to disable searching for extensionless layout names. Requires Node.js and Eleventy. Takes a boolean parameter; setting it to 'false' enforces explicit extensions for layouts, improving performance and reducing ambiguity when multiple files share a base name. There is no output; this configures Eleventy's behavior globally during builds.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/layouts.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\\n\\televentyConfig.setLayoutResolution(false);\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Shortcode for On-Request Optimization\nDESCRIPTION: Configures the Eleventy 'image' shortcode to leverage on-request image transformation during development server runs (`eleventy --serve`). It conditionally enables the `transformOnRequest` option based on the `ELEVENTY_RUN_MODE` environment variable and requires registering the `eleventyImageOnRequestDuringServePlugin` middleware.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-shortcodes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from \"@11ty/eleventy-img\";\nimport { eleventyImageOnRequestDuringServePlugin } from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addShortcode(\"image\", async function (src, alt) {\n\t\tlet html = await Image(src, {\n\t\t\ttransformOnRequest: process.env.ELEVENTY_RUN_MODE === \"serve\",\n\t\t\treturnType: \"html\",\n\t\t\thtmlOptions: {\n\t\t\t\timgAttributes: {\n\t\t\t\t\talt, // required\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\n\t\treturn html;\n\t});\n\n\t// Add the dev server middleware manually\n\televentyConfig.addPlugin(eleventyImageOnRequestDuringServePlugin);\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Image Widths with eleventy-image and webc:is in HTML\nDESCRIPTION: This HTML snippet illustrates how to specify explicit output widths for the image generated by the `<eleventy-image>` component when used with `webc:is`. The desired widths (100 and 200 pixels) are provided as a comma-separated string in the `width` attribute. The component will generate image versions at these specified widths.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-webc.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img webc:is=\"eleventy-image\" width=\"100, 200\" src=\"cat.jpg\" alt=\"photo of my tabby cat\">\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections by Multiple Tags in Eleventy\nDESCRIPTION: Shows how to create a collection filtered by multiple tags using getFilteredByTags(). This example creates a collection containing only items that have all three specified tags.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Get only content that matches a tag\n\televentyConfig.addCollection(\n\t\t\"myTravelPostsWithPhotos\",\n\t\tfunction (collectionsApi) {\n\t\t\treturn collectionsApi.getFilteredByTags(\"post\", \"travel\", \"photo\");\n\t\t}\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Paged Object Keys Output - JavaScript Array\nDESCRIPTION: Defines the resulting structure when paging object keys in Eleventy, where each inner array holds one key as a page's chunk. The output is an array of single-value arrays, aligning with the specified pagination size. No dependencies; determines accessible key per page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n[\n\\t[\\\"itemkey1\\\"], // pagination.items[0] holds the object key\n\\t[\\\"itemkey2\\\"],\n\\t[\\\"itemkey3\\\"],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Liquid Library Instance in Eleventy\nDESCRIPTION: This JavaScript snippet illustrates how to provide a custom instance of the Liquid library (`liquidjs`) to Eleventy for advanced configuration. It imports `Liquid`, defines custom options (like `extname`, `dynamicPartials`, `strictFilters`, `root`), creates a new `Liquid` instance with these options, and then registers it using `eleventyConfig.setLibrary(\\\"liquid\\\", ...)`. Using this method completely overrides any settings applied via `setLiquidOptions`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Liquid } from \"liquidjs\";\n\nexport default function (eleventyConfig) {\n\tlet options = {\n\t\textname: \".liquid\",\n\t\tdynamicPartials: false,\n\t\tstrictFilters: false, // renamed from `strict_filters` in Eleventy 1.0\n\t\troot: [\"_includes\"],\n\t};\n\n\televentyConfig.setLibrary(\"liquid\", new Liquid(options));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring the Default Front Matter Format in Eleventy (JavaScript)\nDESCRIPTION: This snippet (referenced via include) shows how to change the default front matter parsing engine project-wide within the Eleventy configuration file (`.eleventy.js`). By default, Eleventy uses YAML, but this allows setting it to another format like JSON or JavaScript.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-frontmatter.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// .eleventy.js\nmodule.exports = function(eleventyConfig) {\n  // Included for completeness:\n  // Set front matter defaults\n  eleventyConfig.setFrontMatterParsingOptions({\n    // can be \"yaml\" or \"json\" or function\n    // engine: \"yaml\",\n    // Optional, default is true\n    // excerpt: false,\n    // Optional, default is \"---\"\n    // delimiters: \"~~~\",\n  });\n};\n\n```\n\n----------------------------------------\n\nTITLE: Capturing and Inlining Minified CSS in Nunjucks Templates - HTML\nDESCRIPTION: This HTML/Nunjucks snippet shows how to capture the contents of a CSS file as a variable and pass it through the 'cssmin' filter registered in Eleventy. Dependencies include the Nunjucks template engine, the earlier 'cssmin' filter configuration, and a sample CSS file in the expected path. The 'css' variable contains the raw CSS, which is then minified and safely inserted as inline CSS in a style tag. Limitations may apply based on Content Security Policy directives.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/inline-css.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- capture the CSS content as a Nunjucks variable -->\n{% set css %} {% include \\\"sample.css\\\" %} {% endset %}\n<!-- feed it through our cssmin filter to minify -->\n<style>\n\t{{ css | cssmin | safe }}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding Basic EJS Plugin to Eleventy Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic setup for enabling EJS templating in Eleventy v3+. It imports the `@11ty/eleventy-plugin-ejs` plugin and adds it to the Eleventy configuration using `eleventyConfig.addPlugin()`. This is the standard method for integrating the EJS language support after it was moved out of Eleventy core in v3.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/ejs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ejsPlugin from \"@11ty/eleventy-plugin-ejs\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(ejsPlugin);\n}\n```\n\n----------------------------------------\n\nTITLE: Class Permalink Function Using Eleventy Universal Filter - JavaScript\nDESCRIPTION: Shows usage of an Eleventy universal filter (template function) within a class's dynamic permalink function. Depends on universal filter registration in Eleventy config. Input: data with 'title'; output: permalink slug based on filtered title.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Test {\n\tdata() {\n\t\treturn {\n\t\t\ttitle: \"This is my blog post title\",\n\t\t\t// Writes to \"/this-is-my-blog-post-title/index.html\"\n\t\t\tpermalink: function (data) {\n\t\t\t\treturn `/${this.slug(data.title)}/`;\n\t\t\t},\n\t\t};\n\t}\n\n\trender(data) {\n\t\t/* … */\n\t}\n}\n\nexport default Test;\n```\n\n----------------------------------------\n\nTITLE: Generating Empty Results Page with Pagination in Eleventy\nDESCRIPTION: Shows how to generate a pagination page even when the data set is empty using the 'generatePageOnEmptyData' option. This feature was added in Eleventy version 2.0.0-canary.10.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Available Products\npagination:\n  data: collections.available\n  size: 6\n  generatePageOnEmptyData: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation using YAML Front Matter\nDESCRIPTION: This YAML front matter block configures the page's navigation properties within an Eleventy site, likely using the `eleventyNavigation` plugin. It sets the parent page to 'Advanced', defines a unique key 'Release History', and marks the page as 'pinned'.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/versions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Advanced\n  key: Release History\n  pinned: true\n---\n```\n\n----------------------------------------\n\nTITLE: Installing the Eleventy WebC Plugin via npm\nDESCRIPTION: Command to install the `@11ty/eleventy-plugin-webc` package using npm. This package is required to add WebC support to an Eleventy project. Requires Node.js and npm to be installed, and Eleventy version 2.0.0-canary.16 or newer.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @11ty/eleventy-plugin-webc\n```\n\n----------------------------------------\n\nTITLE: Injecting Scoped Data with augmentFunctionContext - Eleventy JavaScript\nDESCRIPTION: This snippet shows how to wrap a render function using 'eleventyConfig.augmentFunctionContext' to provide scoped data ('page' and 'eleventy') to custom template renderers in Eleventy. The function binds the appropriate context to the render function, optionally supporting overwrite and lazy evaluation. Inputs are a compile function and a data object; output is a render result. Meant for advanced use cases where custom extensions need deeper integration with Eleventy's runtime context.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n\tcompile: function(compileFn) {\n\t\treturn function(data) {\n\t\t\t// Binds this.page and this.eleventy to your render context (and any future additions added later)\n\t\t\tlet renderFn = eleventyConfig.augmentFunctionContext(compileFn, {\n\t\t\t\tsource: data,\n\n\t\t\t\t// Overwrite existing values?\n\t\t\t\t// overwrite: true,\n\n\t\t\t\t// Lazily fetch the key using `getter`\n\t\t\t\t// lazy: false,\n\t\t\t\t// getter: (key, context) => context?.[key];\n\t\t\t});\n\n\t\t\treturn renderFn(data);\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Event Arguments Example\nDESCRIPTION: Demonstrates the structure of event arguments available in both eleventy.before and eleventy.after events.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/events.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\televentyConfig.on(\"eleventy.before\", async ({ directories, runMode, outputMode }) => {\n\t\t// Read more below\n\t});\n\n\televentyConfig.on(\n\t\t\"eleventy.after\",\n\t\tasync ({ dir, results, runMode, outputMode }) => {\n\t\t\t// Read more below\n\t\t}\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy Handlebars Plugin via npm\nDESCRIPTION: This command installs the official Eleventy plugin required to use Handlebars (.hbs) templates in Eleventy version 3 and later. It uses npm (Node Package Manager) to add the dependency to the project.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/handlebars.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @11ty/eleventy-plugin-handlebars\n```\n\n----------------------------------------\n\nTITLE: Disabling Indented Code Blocks in Eleventy with Custom markdown-it Instance - JavaScript\nDESCRIPTION: This example demonstrates how to disable indented code blocks in markdown processing by calling disable('code') on the markdown-it instance before registering it with Eleventy. Require markdown-it and provide any additional options. Inputs are the Eleventy config, options object, and markdown-it module.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst markdownIt = require(\\\"markdown-it\\\");\n\nmodule.exports = function (eleventyConfig) {\n\tlet options = {\n\t\t// … truncated for brevity\n\t};\n\n\televentyConfig.setLibrary(\\\"md\\\", markdownIt(options).disable(\\\"code\\\"));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Eleventy Inclusive Language Plugin to Eleventy Config - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to register the Inclusive Language plugin with Eleventy inside the configuration file (eleventy.config.js). It imports the plugin and uses eleventyConfig.addPlugin to enable it during the build process. The required dependency is @11ty/eleventy-plugin-inclusive-language, which must be installed. The only required parameter is the plugin itself; no customization options are passed in this basic setup. Expected input: Eleventy config object. Output: Inclusive language linter is enabled during builds.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inclusive-language.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport inclusiveLangPlugin from \"@11ty/eleventy-plugin-inclusive-language\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(inclusiveLangPlugin);\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Eleventy Filter Context - Eleventy Configuration - JavaScript\nDESCRIPTION: Registers a synchronous filter that leverages special Eleventy-provided context properties such as \\\"this.page\\\" and \\\"this.eleventy\\\". Notably, this requires use of traditional function expressions (not arrow functions) to preserve the context. Available context properties depend on Eleventy version and template engine.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Make sure you’re not using an arrow function here: () => {}\n\televentyConfig.addFilter(\"myFilter\", function () {\n\t\t// this.page\n\t\t// this.eleventy\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Paging a Collection - Eleventy Nunjucks Template\nDESCRIPTION: Demonstrates creating a paginated list from an Eleventy collection, such as posts with a specific tag. The example shows iterating and outputting navigation links for the paged collection, using Nunjucks. Requires collections to be defined with tags and is useful for dynamic archives or tag pages.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_18\n\nLANGUAGE: jinja2\nCODE:\n```\n{% include \\\"snippets/pagination/collection.njk\\\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Top-Level Navigation Item in YAML\nDESCRIPTION: This YAML front matter defines a basic, top-level navigation entry. The `eleventyNavigation` object contains a unique `key` ('Mammals') which identifies this page in the navigation structure. This snippet would typically be placed in a content file (e.g., `mammals.md`).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Mammals\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Data in Templates (JavaScript)\nDESCRIPTION: Demonstrates how the data from the 'userList.json' file is structured and accessible in Eleventy templates. The data is available under the 'userList' key in the global data object.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-global.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tuserList: [\"user1\", \"user2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Directory Output Plugin to Eleventy Config (JavaScript)\nDESCRIPTION: This snippet shows how to import and add the Directory Output plugin to Eleventy’s configuration using ES module syntax. The plugin is imported and registered with the addPlugin method after enabling quiet mode. Requires the @11ty/eleventy-plugin-directory-output package to be installed and used within the Eleventy config file (usually eleventy.config.js). The function exports the configuration via ES module default export. Only one export should exist per configuration file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/directory-output.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport dirOutputPlugin from \"@11ty/eleventy-plugin-directory-output\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.setQuietMode(true);\n\televentyConfig.addPlugin(dirOutputPlugin);\n};\n```\n\n----------------------------------------\n\nTITLE: Paired Shortcode Returning Markdown or HTML for Markdown File Transformation - JavaScript\nDESCRIPTION: This snippet illustrates an Eleventy paired shortcode returning either raw markdown content or HTML-wrapped markdown. When returning plain markdown, Eleventy will further parse and transform it, while wrapping content in HTML div prevents markdown transformation. Key parameter: the 'content' passed to the paired shortcode.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\neleventyConfig.addPairedShortcode(\\\"myShortcode\\\", function (content) {\n\t// Method A: ✅ This works fine\n\treturn content;\n\n\t// Method B: ⚠️ Careful when wrapping with HTML\n\treturn `<div>${content}</div>`;\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Image Formats with eleventy-image using String in HTML\nDESCRIPTION: This HTML snippet shows how to override the default image formats (previously set in the Eleventy configuration) for a specific image instance. The `formats` attribute is used with a comma-separated string (`\"avif, png\"`) to instruct the `<eleventy-image>` component (via `webc:is`) to generate images in AVIF and PNG formats instead of the configured defaults.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-webc.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img webc:is=\"eleventy-image\" formats=\"avif, png\" src=\"cat.jpg\" alt=\"photo of my tabby cat\">\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory in Eleventy Configuration\nDESCRIPTION: Demonstrates how to define a custom output directory using the setOutputDirectory() method. This directory is where Eleventy will write the processed template files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Order matters, put this at the top of your configuration file.\n  eleventyConfig.setOutputDirectory(\"dist\");\n};\n```\n\n----------------------------------------\n\nTITLE: Chaining Layouts with Front Matter - Eleventy - Markdown\nDESCRIPTION: Demonstrates how to specify a layout in the front matter of a Markdown content file to enable layout chaining in Eleventy. Requires Eleventy installed, and the referenced layout file (e.g., mainlayout.njk) to exist. Inputs include Markdown content and front matter; output is the content wrapped in the specified layout. Constraints: front matter keys depend on Eleventy's convention, and layouts may differ in template language.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/layout-chaining.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\\nlayout: mainlayout.njk\\ntitle: My Rad Blog\\n---\\n\\n# My Rad Markdown Blog Post\n```\n\n----------------------------------------\n\nTITLE: Custom URL Formatting for Hosted Image Services in 11ty\nDESCRIPTION: Configuration for overriding image URLs when using a hosted image service. The urlFormat function receives metadata including hash, source, width, and format to generate custom URLs.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t// …\n\turlFormat: function ({\n\t\thash, // not included for `statsOnly` images\n\t\tsrc,\n\t\twidth,\n\t\tformat,\n\t}) {\n\t\treturn `https://example.com/${encodeURIComponent(src)}/${width}/${format}/`;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Including a File and Passing Multiple Data Variables in Liquid\nDESCRIPTION: Demonstrates passing multiple named data variables (`user1`, `user2`) to an included Liquid file (`_includes/user.liquid`). The included file can access these variables by their names. Front matter in the include is not processed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_8\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% include 'user', user1: 'Ava', user2: 'Bill' %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Shortcode in Liquid Template (HTML/Liquid)\nDESCRIPTION: This HTML/Liquid snippet shows how to use the previously defined `user` shortcode within a Liquid template. It demonstrates passing arguments (`name` and `twitterUsername`) to the shortcode. Note that the comma between arguments is optional in Liquid.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n{% user \"Zach Leatherman\", \"zachleat\" %}\n\n<!-- The comma between arguments is optional in Liquid templates -->\n{% user \"Zach Leatherman\" \"zachleat\" %}\n```\n\n----------------------------------------\n\nTITLE: Overriding Locale in locale_url Filter - Nunjucks\nDESCRIPTION: Shows how to override the root locale explicitly by providing a second argument to the locale_url filter. This is useful for generating links to a different language variant regardless of the current page’s language context. It requires the i18n plugin to be active and is designed for advanced multi-locale use cases.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/i18n.md#2025-04-23_snippet_3\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% include \"snippets/plugins/i18nlocaleurl-arg.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Negotiation Redirects - Netlify TOML - TOML\nDESCRIPTION: This snippet provides a TOML-formatted configuration (netlify.toml) for enabling content negotiation in Netlify deployments. It offers equivalent logic to the _redirects variant, handling canonicalization and conditional rewriting based on the user's preferred language. Dependencies include a Netlify deployment and appropriate directory structure. The conditions property is used for language detection; routes are rewritten for Spanish and English as examples.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/i18n.md#2025-04-23_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[[redirects]]\\n  from = \"/es/*\"\\n  to = \"/:splat\"\\n  status = 301\\n  force = true\\n\\n[[redirects]]\\n  from = \"/en/*\"\\n  to = \"/:splat\"\\n  status = 301\\n  force = true\\n\\n# Show the language-specific content file\\n[[redirects]]\\n  from = \"/*\"\\n  to = \"/es/:splat\"\\n  status = 200\\n  conditions = {Language = [\"es\"]}\\n\\n[[redirects]]\\n  from = \"/*\"\\n  to = \"/en/:splat\"\\n  status = 200\\n\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Shortcodes in Liquid (HTML/Liquid)\nDESCRIPTION: This HTML/Liquid snippet shows that the template syntax for calling asynchronous shortcodes (`user` and `user2` in this case) is identical to calling synchronous ones. The asynchronous nature is handled internally by Eleventy and Liquid.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n{% user \"Zach Leatherman\" \"zachleat\" %} {% user2 \"Zach Leatherman\" \"zachleat\" %}\nZach likes to take long walks on Nebraska beaches. {% enduser2 %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mustache Plugin with Library Override in Eleventy (JavaScript)\nDESCRIPTION: Illustrates how to configure the Eleventy Mustache plugin with options, specifically overriding the default Mustache library instance using `eleventyLibraryOverride`. This allows advanced users to supply their own version or a modified instance of the `mustache` library.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/mustache.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport mustache from \"mustache\";\nimport mustachePlugin from \"@11ty/eleventy-plugin-mustache\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(mustachePlugin, {\n\t\t// Override the `mustache` library instance\n\t\televentyLibraryOverride: mustache,\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Petite Vue Components with <is-land> (HTML)\nDESCRIPTION: Shows a canonical example of loading and hydrating a Petite Vue component using <is-land> with autoinit, import, and v-scope attributes. Requires the Petite Vue library (imported via URL) and an ES module-compatible environment. Input: v-scope for data binding; Output: hydrated interactive Petite Vue content when conditions are met.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<is-land\\n\\ton:visible\\n\\tautoinit=\\\"petite-vue\\\"\\n\\timport=\\\"https://unpkg.com/petite-vue@0.4.1/dist/petite-vue.es.js\\\"\\n\\tv-scope=\\\"{ name: 'post-JS' }\\\"\\n>\\n\\tHello from <span v-html=\\\"name\\\">pre-JS</span>\\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Namespacing an Eleventy Plugin\nDESCRIPTION: Advanced technique to namespace a plugin's components by adding a prefix to all filters, tags, helpers, shortcodes, collections, and transforms.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluginRss from \"@11ty/eleventy-plugin-rss\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.namespace(\"myPrefix_\", () => {\n\t\t// the rssLastUpdatedDate filter is now myPrefix_rssLastUpdatedDate\n\t\televentyConfig.addPlugin(pluginRss);\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Custom Template Language in Eleventy (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic usage of `eleventyConfig.addExtension` to define a custom template language handler. It registers the `.clowd` extension and provides a `compile` function that replaces all occurrences of 'cloud' with 'butt' in the input content. The `compile` function returns an asynchronous render function that outputs the modified content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Add as a valid extension to process\n\t// Alternatively, add this to the list of formats you pass to the `--formats` CLI argument\n\televentyConfig.addTemplateFormats(\"clowd\");\n\n\t// \"clowd\" here means that the extension will apply to any .clowd file\n\televentyConfig.addExtension(\"clowd\", {\n\t\tcompile: async (inputContent) => {\n\t\t\t// Replace any instances of cloud with butt\n\t\t\tlet output = inputContent.replace(/cloud/gi, \"butt\");\n\n\t\t\treturn async () => {\n\t\t\t\treturn output;\n\t\t\t};\n\t\t},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Using Glob Patterns for Passthrough File Copy\nDESCRIPTION: Demonstrates how to use glob patterns to find and copy files. This method is slower than non-glob methods as it searches the entire directory structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/copy.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Find and copy any `jpg` files, maintaining directory structure.\n\televentyConfig.addPassthroughCopy(\"**/*.jpg\");\n};\n```\n\n----------------------------------------\n\nTITLE: Using JSON Syntax for Front Matter in HTML\nDESCRIPTION: This snippet illustrates how to use JSON syntax for defining front matter data within an HTML template file. The `---json` indicator tells Eleventy to parse the following block as JSON.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-frontmatter.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n---json\n{\n  \"title\": \"My page title\"\n}\n---\n\n<!DOCTYPE html>\n<html>\n\t…\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Breadcrumbs with Eleventy Navigation in Liquid\nDESCRIPTION: This snippet shows how to generate breadcrumb navigation by retrieving parents of a specific navigation key using the eleventyNavigationBreadcrumb filter in Liquid syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_21\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign navPages = collections.all | eleventyNavigationBreadcrumb: \"Bats\" %}\n{{ navPages | json }}\n```\n\n----------------------------------------\n\nTITLE: Implementing eleventy.beforeWatch Event Handler\nDESCRIPTION: Shows how to implement the beforeWatch event that runs before watch/serve re-runs, with access to changed files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/events.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\televentyConfig.on(\"eleventy.beforeWatch\", async (changedFiles) => {\n\t\t// Run me before --watch or --serve re-runs\n\t\t// changedFiles is an array of files that changed\n\t\t// to trigger the watch/serve build\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Ignoring URL Query Parameters for Caching (ESM)\nDESCRIPTION: Demonstrates using the `removeUrlQueryParams: true` option (introduced in Fetch 2.0.3). When set, any query parameters in the request URL are ignored when generating the cache key, ensuring URLs differing only by query parameters use the same cache entry.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nawait Fetch(\n\t\"https://www.zachleat.com/img/avatar-2017-big.png?Get=rid&of=these\",\n\t{\n\t\tremoveUrlQueryParams: true,\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata with Eleventy Front Matter (YAML)\nDESCRIPTION: This YAML front matter block defines metadata for an Eleventy page. It uses the `eleventyNavigation` key to specify the page's parent, unique key, display title, and order within the site navigation. It also sets a `communityLinksKey` for potential use in displaying related community links. This data is processed by Eleventy during the build.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Eleventy Projects\n  key: Using Data\n  title: Using Data in Templates\n  order: 2\ncommunityLinksKey: data\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Locale-Aware Alternate Links with locale_links Filter - Nunjucks\nDESCRIPTION: Provides an example of using the locale_links filter to obtain alternative URLs for a piece of content in other supported languages. This filter returns an array of objects with localized URL, language code, and label for constructing navigation or alternate meta tags. Best used in shared layouts or partials where offering language switchers is required.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/i18n.md#2025-04-23_snippet_4\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% include \"snippets/plugins/i18nexample.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Negotiation Redirects - Netlify _redirects - Markdown\nDESCRIPTION: This snippet demonstrates how to configure Netlify's _redirects file for content negotiation-based internationalization, where language codes are omitted from URLs and served based on the user's language preferences. It includes rules to canonicalize URLs, prevent direct access with explicit language codes, and rewrite requests according to the language. Expected input is an HTTP request to a localized page; output is a redirect or direct delivery of the language-specific page. No external dependencies are needed, but deployment on Netlify is required.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/i18n.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Redirect any URLs with the language code in them already\\n/es/*   /:splat     301!\\n/en/*   /:splat     301!\\n\\n# Show the language-specific content file\\n/*      /es/:splat  200   Language=es\\n/*      /en/:splat  200\\n\n```\n\n----------------------------------------\n\nTITLE: Async-Friendly Compile Function for Custom Template Languages - Eleventy JavaScript\nDESCRIPTION: This code defines a template language extension's 'compile' method as an async function, intended for Eleventy's configuration. The 'compile' method accepts 'inputContent' and 'inputPath', and returns an async render function that, as written, just returns the raw input content. Inputs are file content and path; output is the content as-is. This implementation is a starting point and should be customized to perform any desired compilation or transformation. Used within the context of defining custom extensions in Eleventy config.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t// some configuration truncated …\n\tcompile: async (inputContent, inputPath) => {\n\t\treturn async () => {\n\t\t\treturn inputContent;\n\t\t};\n\t},\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Template Functions in 'before' Callback\nDESCRIPTION: Demonstrates how to use JavaScript Template Functions in the 'before' callback. This allows access to universal filters and shortcodes within the callback function.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\n// …\nbefore: function() {\n  let slug = this.slugify(\"My title.\");\n  // use Universal filters or shortcodes too…\n},\n// …\n```\n\n----------------------------------------\n\nTITLE: Advanced I18n Plugin Options in Eleventy - Nunjucks\nDESCRIPTION: This snippet expands on plugin setup with a comprehensive list of advanced configuration options for Eleventy’s i18n plugin. It allows users to specify custom directory structures, error handling modes, and provide additional customization for locale detection and management. This is intended for users looking to fine-tune multilingual content handling beyond default settings.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/i18n.md#2025-04-23_snippet_1\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% include \"snippets/plugins/i18n-install-options.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining Universal and Liquid-Specific Shortcodes in Eleventy (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to define shortcodes within an Eleventy configuration file. It shows adding a Liquid-specific shortcode using `eleventyConfig.addLiquidShortcode` and a universal shortcode (compatible with Liquid, Nunjucks, 11ty.js) using `eleventyConfig.addShortcode`. Both examples define a `user` shortcode that accepts `name` and `twitterUsername` arguments and returns an HTML string.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n  // Liquid Shortcode\n  // These can be async functions too\n  eleventyConfig.addLiquidShortcode(\"user\", function(name, twitterUsername) { /* … */ });\n\n  // Universal Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)\n  eleventyConfig.addShortcode(\"user\", function(name, twitterUsername) {\n    return `<div class=\"user\">\n<div class=\"user_name\">${name}</div>\n<div class=\"user_twitter\">@${twitterUsername}</div>\n</div>`;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chokidar Options for Advanced Watch Behavior\nDESCRIPTION: Demonstrates how to configure advanced options for the Chokidar file watching library used by Eleventy. This example enables polling and sets the polling interval, which can be necessary in environments like Windows Subsystem for Linux.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/watch-serve.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\televentyConfig.setChokidarConfig({\n\t\tusePolling: true,\n\t\tinterval: 500,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation as Markdown using Nunjucks Filters\nDESCRIPTION: This Nunjucks template code snippet renders the navigation menu as Markdown. It uses the `eleventyNavigation` filter followed by `eleventyNavigationToMarkdown`. The `safe` filter ensures the Markdown is outputted correctly without being escaped.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_13\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ collections.all | eleventyNavigation | eleventyNavigationToMarkdown | safe }}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables in Eleventy\nDESCRIPTION: Example demonstrating how to expose environment variables to templates using a global data file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-js.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function () {\n\treturn {\n\t\tenvironment: process.env.MY_ENVIRONMENT || \"development\",\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Request Timeout using AbortSignal (ESM)\nDESCRIPTION: Shows how to implement a request timeout using the `fetchOptions` property and the standard `AbortSignal.timeout()` method. This example sets a 5000ms (5 seconds) timeout; if the request takes longer, it will be aborted.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nawait Fetch(\"https://…\", {\n\tfetchOptions: {\n\t\tsignal: AbortSignal.timeout(5000)\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Integration in Eleventy\nDESCRIPTION: Example showing how to integrate GraphQL queries in Eleventy data files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-js.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql, buildSchema } from \"graphql\";\n\n// this could also be `async function`\nexport default function () {\n\t// if you want to `await` for other things here, use `async function`\n\tvar schema = buildSchema(`type Query {\n    hello: String\n  }`);\n\n\tvar root = {\n\t\thello: () => \"Hello world async!\",\n\t};\n\n\treturn graphql(schema, \"{ hello }\", root);\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Syntax with renderFile Shortcode in Nunjucks/Liquid/JavaScript\nDESCRIPTION: Demonstrates overriding the default template syntax (inferred by file extension) when using the `renderFile` shortcode. A third argument specifies the desired template engine override (e.g., 'njk'). This allows a file like `blogpost.md` to be processed using Nunjucks.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/render.md#2025-04-23_snippet_6\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% renderFile \"blogpost.md\", {}, \"njk\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% renderFile \"blogpost.md\", {}, \"njk\" %}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* 11ty.js */\nmodule.exports = async function(data) {\n  return await this.renderFile(\"blogpost.md\", {}, \"njk\");\n};\n```\n\n----------------------------------------\n\nTITLE: Locale-Aware Collection Navigation with getNextCollectionItem - Nunjucks\nDESCRIPTION: Demonstrates using the getNextCollectionItem filter in combination with locale_url to render a next-post link that automatically prefers a localized version if available. This approach streamlines navigation within language-specific content lists, relying on the i18n plugin to seamlessly fall back to the default language if no translation exists. It requires collection items to be correctly tagged and organized in language-specific directories.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/i18n.md#2025-04-23_snippet_6\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% raw %}\\n\\n```njk\\n{%- set nextPost = collections.post | getNextCollectionItem %}\\n{%- if nextPost %}<a href=\\\"{{ nextPost.url | locale_url }}\\\">Next post</a>{% endif %}\\n```\\n\\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Custom JavaScript and CSS Execution in <is-land> (HTML/JS)\nDESCRIPTION: Demonstrates embedding custom CSS and JavaScript in <template data-island>, allowing style and logic to execute when island hydration occurs. Includes inline style, external stylesheet, inline script logging, and external script import. Dependencies: <is-land> must process templates; Inputs: CSS, JS, and HTML in template; Outputs: styled, hydrated component with executed logic.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<is-land on:visible>\\n\\t<template data-island>\\n\\t\\t<!-- CSS -->\\n\\t\\t<style>\\n\\t\\t\\t/* My custom CSS */\\n\\t\\t</style>\\n\\t\\t<link rel=\\\"stylesheet\\\" href=\\\"my-css-file.css\\\" />\\n\\n\\t\\t<!-- JS -->\\n\\t\\t<script type=\\\"module\\\">\\n\\t\\t\\tconsole.log(\\\"Hydrating!\\\");\\n\\t\\t</script>\\n\\t\\t<script type=\\\"module\\\" src=\\\"my-js-file.js\\\"></script>\\n\\t</template>\\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Adding YAML Data Support in Eleventy Configuration (JavaScript)\nDESCRIPTION: This example shows how to add support for YAML data files (`.yaml`) in Eleventy. It uses the `js-yaml` library to parse the file contents within the `addDataExtension` callback. The `js-yaml` package must be installed (`npm install js-yaml`).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-custom.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport yaml from \"js-yaml\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addDataExtension(\"yaml\", (contents) => yaml.load(contents));\n};\n```\n\n----------------------------------------\n\nTITLE: Getting the Index of a Collection Item (Liquid)\nDESCRIPTION: Obtains the 0-based numeric index of the current or a specified page within a collection using the getCollectionItemIndex filter in Liquid. Inputs: a collection and optionally a page object. Outputs the index for use in contexts such as pagination or highlighting active items. Available from Eleventy 2.0.0-canary.19. Passing the page object is optional.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/collection-items.md#2025-04-23_snippet_4\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign index = collections.posts | getCollectionItemIndex %}\n\nOr pass it in:\n{% assign index = collections.posts | getCollectionItemIndex: page %}\n```\n\n----------------------------------------\n\nTITLE: Installing the Eleventy Vite Plugin via npm\nDESCRIPTION: This command installs the official Eleventy Vite plugin (`@11ty/eleventy-plugin-vite`) as a project dependency using npm. This is the first step required to use Vite with Eleventy via this plugin.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/server-vite.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @11ty/eleventy-plugin-vite\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation as HTML using Liquid Filters\nDESCRIPTION: This Liquid template code snippet demonstrates the 'easy mode' for rendering the navigation menu. It pipes the entire collection (`collections.all`) through the `eleventyNavigation` filter to get the structured data, and then through `eleventyNavigationToHtml` to generate the final HTML output.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_9\n\nLANGUAGE: liquid\nCODE:\n```\n{{ collections.all | eleventyNavigation | eleventyNavigationToHtml }}\n```\n\n----------------------------------------\n\nTITLE: Implementing eleventy.beforeConfig Event Handler\nDESCRIPTION: Shows how to implement the beforeConfig event that runs before configuration initialization, useful for async configuration needs.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/events.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (eleventyConfig) {\n\televentyConfig.on(\"eleventy.beforeConfig\", async function (eleventyConfig) {\n\t\tconst { HtmlBasePlugin } = await import(\"@11ty/eleventy\");\n\t\televentyConfig.addPlugin(HtmlBasePlugin);\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring EJS Plugin Options in Eleventy (JavaScript)\nDESCRIPTION: This snippet shows how to customize the EJS plugin in Eleventy by passing an options object as the second argument to `eleventyConfig.addPlugin()`. It demonstrates setting `async` behavior (default is false), changing the template delimiter from `<% %>` to `<? ?>` using the `delimiter` option, and overriding the default EJS library instance with a potentially custom one using `eleventyLibraryOverride`. This requires importing the `ejs` library itself alongside the plugin.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/ejs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ejs from \"ejs\";\nimport ejsPlugin from \"@11ty/eleventy-plugin-ejs\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(ejsPlugin, {\n\t\tasync: false, // default\n\n\t\t// use <? ?> instead of <% %>\n\t\tdelimiter: \"?\",\n\n\t\t// Override the `ejs` library instance\n\t\televentyLibraryOverride: ejs,\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Object Notation in Front Matter (Nunjucks)\nDESCRIPTION: Shows the legacy (but still supported) method for using JavaScript front matter, where the code must evaluate to a single JavaScript object. Properties (`title`) and methods (`currentDate`) of this object become available in the Nunjucks template. Note the warning about incompatibility with Liquid templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-frontmatter.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n---js\n{\n  title: \"My page title\",\n  currentDate: function() {\n    // You can have a JavaScript function here!\n    return (new Date()).toLocaleString();\n  }\n}\n---\n\n<h1>{{ title }}</h1>\n<p>Published on {{ currentDate() }}</p>\n\n```\n\n----------------------------------------\n\nTITLE: Adding First and Last Pagination Links in Eleventy with JavaScript Template\nDESCRIPTION: This 11ty JavaScript template generates 'First' and 'Last' links only when the current page URL is not already at those boundaries. Provided with pagination.href.first and pagination.href.last, this snippet is suitable for use in paginated Eleventy templates to aid navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function({ pagination, page }) {\n  let output = '';\n  if (page.url !== pagination.href.first) {\n    output += `<a href=\\\"${pagination.href.first}\\\">First</a>`;\n  }\n  if (page.url !== pagination.href.last) {\n    output += `<a href=\\\"${pagination.href.last}\\\">Last</a>`;\n  }\n  return output;\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Previous and Next Collection Items in Eleventy (Liquid)\nDESCRIPTION: Retrieves the previous and next items from a collection in Eleventy using the getPreviousCollectionItem and getNextCollectionItem filters in Liquid. Requires that Eleventy collections are defined and optionally takes the page object as an argument; beginning with version 2.0.0-beta.1, the page argument is optional. Inputs: a collection and optionally a page object. Outputs: references to the previous and next items, or undefined if at boundaries. Limitations: If at the start/end of the collection, one may be undefined.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/collection-items.md#2025-04-23_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% assign previousPost = collections.posts | getPreviousCollectionItem: page %}\n{% assign nextPost = collections.posts | getNextCollectionItem: page %}{% endraw %}\n\n<!-- in {{ \"2.0.0-beta.1\" | coerceVersion }} the page argument is optional -->\n{% raw %}{% assign previousPost = collections.posts | getPreviousCollectionItem %}\n{% assign nextPost = collections.posts | getNextCollectionItem %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Implementing eleventy.before Event Handler\nDESCRIPTION: Shows how to implement the eleventy.before event that runs before each build starts. Includes async support and access to build metadata.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/events.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\televentyConfig.on(\"eleventy.before\", async ({ directories, runMode, outputMode }) => {\n\t\t// Run me before the build starts\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Value with Custom Filter - CommonJS JavaScript Template - JavaScript\nDESCRIPTION: Exports a function in CommonJS format for Eleventy's \\\".11ty.cjs\\\" template files. Renders a heading by applying the \\\"makeUppercase\\\" filter to the \\\"name\\\" property, assuming \\\"this.makeUppercase\\\" is accessible in context. Requires that the filter is registered and available in the Eleventy execution context when rendering.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function({name}) {\n  return `<h1>${this.makeUppercase(name)}</h1>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Incremental Builds in Eleventy\nDESCRIPTION: Shows how to use the --incremental flag to build only a specific file in Eleventy. This feature was added in version 3.0.0-alpha.14 and helps improve build performance by only processing files that have changed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Added in 3.0.0-alpha.14\nnpx @11ty/eleventy --incremental=myfile.md\n```\n\n----------------------------------------\n\nTITLE: Rendering <link rel=\"alternate\"> Tags with locale_links - Nunjucks\nDESCRIPTION: Shows how to loop through the results of locale_links to render <link rel=\\\"alternate\\\"> elements for SEO and proper search engine indexing. Each href must be a fully qualified URL including protocol and domain, and the correct hreflang must be included. Designed for use in Eleventy layout files for large scale, multi-language sites.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/i18n.md#2025-04-23_snippet_5\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% include \"snippets/plugins/i18nalternate.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Distinct URLs for All Locales - Netlify _redirects - Markdown\nDESCRIPTION: This _redirects file lists rules for a Netlify deployment in which each locale is assigned a distinct URL, always including a language code. Requests lacking a language code are redirected to the user's preferred locale or the default (English). No external dependencies other than Netlify hosting; input URLs must not include language codes for the redirect to apply. Includes explanatory comments for proper rule ordering and Netlify's shadowing behavior.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/i18n.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n# Important: Per shadowing rules, URLs for the language-specific\\n# content files are served without redirects.\\n\\n# Redirect for end-user’s browser preference override\\n/*  /es/:splat  302   Language=es\\n\\n# Default\\n/*  /en/:splat  302\\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Reserved Data Freezing in Eleventy Config - JavaScript\nDESCRIPTION: This configuration snippet shows how to temporarily disable the freezing of reserved Eleventy-supplied data, such as `pkg`, `eleventy`, `page`, `content`, and `collections`. Meant to be used within `.eleventy.js` config files, it invokes `setFreezeReservedData(false)` on the Eleventy configuration object. Dependencies: Eleventy v3.0+ for data freezing support. Inputs: the Eleventy config API. No outputs are returned directly; effect is on Eleventy's internal configuration. Limitation: Not recommended for general use; disables default safety mechanisms.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-eleventy-supplied.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\n\televentyConfig.setFreezeReservedData(false);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin in the Same Configuration File\nDESCRIPTION: Shows how to define a plugin function elsewhere in the same configuration file and then add it to Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myPlugin(eleventyConfig) {\n\t// I am a plugin!\n}\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(myPlugin);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Synchronous Shortcode for Handlebars in Eleventy\nDESCRIPTION: This JavaScript snippet defines a synchronous Eleventy shortcode named 'user'. When used in a Handlebars template, it accepts 'name' and 'twitterUsername' arguments and returns an HTML string representing a user profile div. This code should be placed within the Eleventy configuration function.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/handlebars.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n  eleventyConfig.addShortcode(\"user\", function(name, twitterUsername) {\n    return `<div class=\"user\">\n<div class=\"user_name\">${name}</div>\n<div class=\"user_twitter\">@${twitterUsername}</div>\n</div>`;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Importing a Plugin from a Local File\nDESCRIPTION: Demonstrates importing a plugin from a separate local file and adding it to Eleventy configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport myPlugin from \"./_config/plugin.js\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(myPlugin);\n};\n```\n\n----------------------------------------\n\nTITLE: Redirecting Language-Specific URLs via Rules Syntax - Plaintext\nDESCRIPTION: This snippet provides URL redirect rules for handling language-specific paths in a website project. It uses a rules-based syntax (suitable for static hosting platforms like Netlify or similar) to redirect or rewrite internationalized URLs based on detected language codes and browser preferences. Redirects are set up to normalize URLs, avoid redundant language codes, and override end-user language preferences where needed. Each line specifies the source pattern, destination, HTTP status code, and optionally conditions (e.g., for specific languages).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/i18n.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n# Redirect any URLs with the language code in them already\\n/en/*   /:splat     301!\\n\\n# Important: Per shadowing rules, URLs for the\\n# _non-default_ language-specific content files\\n# are served without redirects.\\n\\n# Redirect for end-user’s browser preference override\\n/*      /es/:splat  302   Language=es\\n/*      /en/:splat  200\n```\n\n----------------------------------------\n\nTITLE: Enabling WebC Post-processing Transform in Eleventy Configuration\nDESCRIPTION: Eleventy configuration snippet showing how to enable the WebC transform by setting the `useTransform` option to `true` when adding the plugin. This allows WebC to process the final HTML output of templates (skipping `.webc` input files), which is useful for integrating WebC into existing projects quickly. Note the potential performance implications and lack of bundler mode support with this method.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluginWebc from \"@11ty/eleventy-plugin-webc\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(pluginWebc, {\n\t\tuseTransform: true,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML with Id Attributes (HTML)\nDESCRIPTION: Shows the resulting HTML after Eleventy’s Id Attribute plugin processes a heading, illustrating automated id assignment based on heading text. The output can be linked directly for navigation. No configuration is needed for this behavior beyond enabling the plugin in Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/id-attribute.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1 id=\\\"welcome-to-eleventy\\\">Welcome to Eleventy</h1>\n```\n\n----------------------------------------\n\nTITLE: Passing Data to renderTemplate Shortcode in Nunjucks/Liquid/JavaScript\nDESCRIPTION: Shows how to pass an additional data object to the `renderTemplate` shortcode in Nunjucks, Liquid, and JavaScript templates. This data becomes available within the rendered template string, alongside the default `eleventy` and `page` variables. The example passes `{ myValue: \"myValue\" }`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/render.md#2025-04-23_snippet_3\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% renderTemplate \"liquid\", { myValue: \"myValue\" } %}\n{{ myValue }}\n{% endrenderTemplate %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% renderTemplate \"liquid\", myValue: \"myValue\" %}\n{{ myValue }}\n{% endrenderTemplate %}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* 11ty.js */\nmodule.exports = async function(data) {\n  return await this.renderTemplate(\"{{ myValue }}\", \"liquid\", {\n    myValue: \"myValue\"\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output from a Shortcode\nDESCRIPTION: This HTML snippet shows the expected output generated by the `user` universal shortcode example when invoked with the specified arguments in the Nunjucks template.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"user\">\n\t<div class=\"user_name\">Zach Leatherman</div>\n\t<div class=\"user_twitter\">@zachleat</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including HTML Base Plugin Installation Code in Nunjucks\nDESCRIPTION: This Nunjucks tag includes a snippet demonstrating how to require and register the `EleventyHtmlBasePlugin` in the Eleventy configuration file (`eleventy.config.js`) using `addPlugin`. This enables the plugin's automatic HTML transformation capabilities.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/html-base.md#2025-04-23_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"snippets/plugins/base-install.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Overriding getData Keys for Single Instance Using eleventyDataKey - Eleventy JavaScript\nDESCRIPTION: This advanced snippet shows how a returned instance from getInstanceFromInputPath can provide an 'eleventyDataKey' property (an array, set, etc.) to override the global getData property selection for just that module. Only properties named in 'eleventyDataKey' will be merged into the data context for this instance. Used to provide per-instance customization of Eleventy's Data Cascade; defaults and ignored properties are accordingly documented.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t// some configuration truncated …\n  // if getData is `false`, `eleventyDataKey` will not be used.\n  getData: true,\n\n  getInstanceFromInputPath: function(inputPath) {\n    return {\n      // Overrides `getData` for this instance\n      eleventyDataKey: [\"myOverrideData\"],\n\n      // Will not be used\n      data: {\n        notAvailableOnGlobalData: 456\n      },\n\n      // Will be used.\n      myOverrideData: {\n        availableOnGlobalData: 123\n      }\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Applying a Standard Filter in Liquid\nDESCRIPTION: Example of applying a built-in or custom filter (`upper`) to a variable (`name`) using the pipe (`|`) syntax in Liquid.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_9\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{{ name \\| upper }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Adding a Constant Value as a Nunjucks Global (JavaScript)\nDESCRIPTION: This configuration snippet registers a global variable named 'fortythree' with the value 43 for use in Nunjucks templates via Eleventy. The global can be accessed directly in template expressions (e.g., {{ fortythree }}). Requires Eleventy v1.0.0+ and is only accessible in Nunjucks-environment templates. The value is a constant and does not involve computation or context. Note: Globals are not async-aware and cannot be awaited.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addNunjucksGlobal(\"fortythree\", 43);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Tree with Eleventy Filters in Nunjucks Template\nDESCRIPTION: This Nunjucks template snippet renders a navigation table of contents for the current section (\\\"Services\\\") using Eleventy's built-in filters: \\\"nav\\\", \\\"eleventyNavigationToHtml\\\", and \\\"safe\\\". It expects navigation data attached to the page, and generates HTML dynamically based on that navigation tree. The primary purpose is to output an HTML list of child pages or links, optionally including excerpts if available. Dependencies include Eleventy's navigation plugin and Nunjucks as the template engine; parameters include the current section name and a configuration object. The output is a rendered HTML navigation menu, and the snippet is intended for use only within an Eleventy-powered build.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{{ \\\"Services\\\" | nav | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}\n```\n\n----------------------------------------\n\nTITLE: Using renderTemplate Paired Shortcode in Nunjucks/Liquid/JavaScript\nDESCRIPTION: Provides examples of using the `renderTemplate` paired shortcode in Nunjucks, Liquid, and JavaScript (11ty.js) templates. It renders the enclosed template string using the specified template engine (e.g., 'md', 'liquid', 'njk'). The first argument defines the template engine(s) to use.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/render.md#2025-04-23_snippet_2\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% renderTemplate \"md\" %}\n# Sample\n\nThis is markdown.\n{% endrenderTemplate %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% renderTemplate \"liquid\" %}\n{% assign myVariable = \"Liquid!\" %}\n\nThis is {{ myVariable }}\n{% endrenderTemplate %}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* 11ty.js */\nmodule.exports = async function(data) {\n  return await this.renderTemplate(\"Hello {{ name }}\", \"liquid\", {\n    name: \"Ted\"\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Eleventy Navigation Item in YAML Front Matter\nDESCRIPTION: This YAML front matter block configures an entry for the Eleventy navigation system. It sets the parent item to 'Community', assigns a unique key '11ty Bundle', specifies the external URL 'https://11tybundle.dev/', sets the display order to 2, and provides a short description (excerpt). The `permalink: false` indicates that this file itself should not generate an output page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/sidebar-11tybundle.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Community\n  key: 11ty Bundle\n  url: https://11tybundle.dev/\n  order: 2\n  excerpt: All of the 11ty resources, curated by Bob Monsour!\npermalink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Fetching and Caching JSON API Data with Eleventy Fetch (ESM)\nDESCRIPTION: Demonstrates fetching JSON data from a GitHub API endpoint using Eleventy Fetch in an ES Module context (e.g., `_data/githubRepos.js`). The response is cached for 1 day (`duration: \"1d\"`), and automatically parsed as JSON (`type: \"json\"`). The function returns the fetched JSON data.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nexport default async function () {\n\tlet url = \"https://api.github.com/repos/11ty/eleventy\";\n\n\tlet json = await Fetch(url, {\n\t\tduration: \"1d\", // save for 1 day\n\t\ttype: \"json\", // we’ll parse JSON for you\n\t});\n\n\treturn json;\n};\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Import Instead of File Read - Eleventy JavaScript\nDESCRIPTION: This configuration demonstrates how to use the 'useJavaScriptImport' option in Eleventy, allowing dynamic JavaScript imports instead of static file reads. The 'getInstanceFromInputPath' async function uses ES module 'import' to load a module and returns its default export for later compilation by Eleventy. The 'compile' property is left as an identity pass-through. Useful for cases where template sources should be loaded at runtime as ES modules rather than as plain file content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n\tuseJavaScriptImport: true,\n\tgetInstanceFromInputPath: async function(inputPath) {\n\t\tlet mod = await import(inputPath);\n\t\treturn mod.default;\n\t},\n\tcompile: (compileFn) => compileFn,\n```\n\n----------------------------------------\n\nTITLE: Generating Eleventy Output with Custom Formats (Bash)\nDESCRIPTION: These commands show how to restrict or adjust which template formats Eleventy processes during builds, or display help information. The --formats flag limits processed file types (e.g., md,html,ejs), while an empty value disables format processing. The --help flag lists all available Eleventy CLI options. No external dependencies except for Eleventy installation are required. Inputs: flags as needed; Outputs: site build or help text.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Use only a subset of template types\\nnpx @11ty/eleventy --formats=md,html,ejs\\n\\n# Don’t process any formats\\nnpx @11ty/eleventy --formats=\\n\\n# Find out the most up-to-date list of commands (there are more)\\nnpx @11ty/eleventy --help\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation as Markdown using Liquid Filters\nDESCRIPTION: This Liquid template code snippet renders the navigation menu as a Markdown list. It pipes the collection through the `eleventyNavigation` filter and then the `eleventyNavigationToMarkdown` filter. This is useful for including navigation in Markdown files processed by Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_12\n\nLANGUAGE: liquid\nCODE:\n```\n{{ collections.all | eleventyNavigation | eleventyNavigationToMarkdown }}\n```\n\n----------------------------------------\n\nTITLE: Using an NPM Package Plugin in Eleventy\nDESCRIPTION: Shows how to import and use a plugin from an NPM package in Eleventy configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluginRss from \"@11ty/eleventy-plugin-rss\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(pluginRss);\n};\n```\n\n----------------------------------------\n\nTITLE: Distinct URLs for All Locales - Netlify TOML - TOML\nDESCRIPTION: This TOML snippet configures distinct URL redirects for multilingual content in a netlify.toml file, ensuring that each locale is mapped to its own explicitly coded path. The rules prevent redirects for paths that are already language-specific, in line with Netlify's shadowing rules. Requires deployment on Netlify; only applies to generic URLs, using language detection to redirect to Spanish for supported browsers, otherwise defaulting to English.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/i18n.md#2025-04-23_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n# Important: Per shadowing rules (force = false) URLs for the\\n# language-specific content files are served without redirects.\\n\\n# Redirect for end-user’s browser preference override\\n[[redirects]]\\n  from = \"/*\"\\n  to = \"/es/:splat\"\\n  status = 302\\n  conditions = {Language = [\"es\"]}\\n\\n# Default\\n[[redirects]]\\n  from = \"/*\"\\n  to = \"/en/:splat\"\\n  status = 302\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Eleventy-Scoped Data in Shortcodes — JavaScript\nDESCRIPTION: Demonstrates how to access scoped Eleventy-provided data (such as this.page and this.eleventy) inside a shortcode callback by using a function expression instead of an arrow function. The snippet highlights that Eleventy binds the context to the shortcode function, making Eleventy-specific variables accessible for more dynamic or context-aware outputs. No external dependencies are required; the context is provided by Eleventy during shortcode execution.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/shortcodes.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n  // Make sure you’re not using an arrow function here: () => {}\n  eleventyConfig.addShortcode(\"myShortcode\", function () {\n    // this.page\n    // this.eleventy\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Custom HTML Navigation Implementation in Liquid\nDESCRIPTION: Shows how to manually render navigation items without using built-in filters, providing full control over the markup structure. Includes basic single-tier navigation example.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_36\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign navPages = collections.all | eleventyNavigation %}\n<ul>\n{%- for entry in navPages %}\n  <li{% if entry.url == page.url %} class=\"my-active-class\"{% endif %}>\n    <a href=\"{{ entry.url }}\">{{ entry.title }}</a>\n  </li>\n{%- endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Structure of Eleventy's Pagination Object - JavaScript\nDESCRIPTION: Outlines the main properties populated by Eleventy when the pagination feature is enabled, such as items, pageNumber, hrefs, page, and their navigation subfields. This reference is key for understanding what data is available in paginated templates, including navigation URLs and chunked data. No dependencies; intended as context for other pagination code.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  items: [], // Array of current page\\u2019s chunk of data\n  pageNumber: 0, // current page number, 0 indexed\n\n  // Cool URLs\n  hrefs: [], // Array of all page hrefs (in order)\n  href: {\n    next: \\\"\\u2026\\\", // put inside <a href=\\\"{{ pagination.href.next }}\\\">Next Page</a>\n    previous: \\\"\\u2026\\\", // put inside <a href=\\\"{{ pagination.href.previous }}\\\">Previous Page</a>\n    first: \\\"\\u2026\\\",\n    last: \\\"\\u2026\\\",\n  },\n\n  pages: [], // Array of all chunks of paginated data (in order)\n  page: {\n    next: {}, // Next page\\u2019s chunk of data\n    previous: {}, // Previous page\\u2019s chunk of data\n    first: {},\n    last: {},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Islands Architecture partial hydration with is-land web component - HTML\nDESCRIPTION: This snippet illustrates the use of the `is-land` custom element to defer the loading of specific resources and web components for optimal performance, leveraging partial hydration. The `on:visible` and `on:media` attributes control when content inside the island is initialized (e.g., after becoming visible). The snippet wraps a template for deferred CSS/JS loading and a server-rendered `build-comparison` or `install-comparison` component via Eleventy\\'s `renderTemplate` feature. Dependencies include the `is-land` web component and corresponding supporting JavaScript. Inputs are event triggers/prerequisites, and outputs are hydrated, performance-optimized UI elements.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<is-land on:visible on:media=\"(prefers-reduced-motion: no-preference)\">\n\t<template data-island=\"once\"><link rel=\"stylesheet\" href=\"/css/throbber.css\"><script src=\"/js/throbber.js\"></script></template>\n\t{% renderTemplate \"webc\" %}<build-comparison @show-all></build-comparison>{% endrenderTemplate %}\n</is-land>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<is-land on:visible on:media=\"(prefers-reduced-motion: no-preference)\">\n\t<template data-island=\"once\"><link rel=\"stylesheet\" href=\"/css/throbber.css\"><script src=\"/js/throbber.js\"></script></template>\n\t{% renderTemplate \"webc\" %}<install-comparison></install-comparison>{% endrenderTemplate %}\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Home Page Content Negotiation, Distinct URLs Elsewhere - Netlify _redirects - Markdown\nDESCRIPTION: In this _redirects snippet, the home page uses content negotiation based on the user's language, while all other pages mandate explicit language codes. Redirection logic prioritizes the user's preferred language for the root path, and applies language-specific redirects for subpages. Suitable for Netlify static hosting with multiple locales; includes use of Netlify condition syntax for browser language detection.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/i18n.md#2025-04-23_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n/   /es/        200   Language=es\\n/   /en/        200\\n/*  /es/:splat  302   Language=es\\n/*  /en/:splat  302\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in macOS/Linux\nDESCRIPTION: Command to set environment variables when running Eleventy on macOS or Linux systems.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/environment-vars.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMY_ENVIRONMENT=production npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Logging in Filter Chains with log Filter in Nunjucks\nDESCRIPTION: Demonstrates chaining the `log` filter with other filters (such as `upper`) in a Nunjucks template. The snippet logs 'My Title' before converting it to uppercase, helping with debugging of filter pipelines. Shows equivalent step-wise code using a variable assignment for clarity.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/log.md#2025-04-23_snippet_5\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ \"My Title\" | log | upper }}\n\nThis is the same as:\n{% set temp = \"My Title\" %}\n{{ temp | log }}\n{{ temp | upper }}\n```\n\n----------------------------------------\n\nTITLE: Deprecated and Extended Pagination Properties - JavaScript\nDESCRIPTION: Documents additional, mostly deprecated or backward-compatible properties present on Eleventy's pagination object, such as links and pageLinks, as well as legacy navigation fields. Intended for reference when maintaining legacy Eleventy templates. No dependencies.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n  data: \\\"\\u2026\\\", // the original string key to the dataset\n  size: 1, // page chunk sizes\n\n  // Cool URLs\n  // Use pagination.href.next, pagination.href.previous, et al instead.\n  nextPageHref: \\\"\\u2026\\\", // put inside <a href=\\\"{{ pagination.nextPageHref }}\\\">Next Page</a>\n  previousPageHref: \\\"\\u2026\\\", // put inside <a href=\\\"{{ pagination.previousPageHref }}\\\">Previous Page</a>\n  firstPageHref: \\\"\\u2026\\\",\n  lastPageHref: \\\"\\u2026\\\",\n\n  // Uncool URLs\n  // These include index.html file names, use `hrefs` instead\n  links: [], // Array of all page links (in order)\n\n  // Deprecated things:\n  // nextPageLink\n  // previousPageLink\n  // firstPageLink\n  // lastPageLink\n  // pageLinks (alias to `links`)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Watch Targets in Eleventy Configuration\nDESCRIPTION: Shows how to add custom file or directory paths that Eleventy should watch for changes using the addWatchTarget method. This example adds a SCSS directory to be watched, causing Eleventy to rebuild when any SCSS files change.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/watch-serve.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\televentyConfig.addWatchTarget(\"./src/scss/\");\n};\n```\n\n----------------------------------------\n\nTITLE: Adding the Render Plugin in Eleventy Configuration (JavaScript)\nDESCRIPTION: Shows the basic setup required to add the Eleventy Render Plugin to a project's configuration file (`eleventy.config.js`). This plugin is bundled with Eleventy core but needs to be explicitly added using `eleventyConfig.addPlugin()`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/render.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { EleventyRenderPlugin } = require(\"@11ty/eleventy\");\n\nmodule.exports = function(eleventyConfig) {\n  eleventyConfig.addPlugin(EleventyRenderPlugin);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Ignores Programmatically with EleventyConfig (JavaScript)\nDESCRIPTION: Illustrates programmatically adding or removing ignore patterns using the EleventyConfig API in your Eleventy configuration file (e.g., .eleventy.js, eleventy.config.js, or an ES module). The code uses the ignores Set on eleventyConfig, with .add() to include new ignore patterns and .delete() to remove existing ones. Dependencies: Eleventy (v1.0+). Useful when ignore rules must change based on dynamic or project structure conditions. Parameters: patterns as strings. Outputs: modifies Eleventy's list of ignored files/folders at runtime.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/ignores.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\televentyConfig.ignores.add(\\\"README.md\\\");\\n\\televentyConfig.ignores.delete(\\\"README.md\\\");\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Bypassing Output Directory in Eleventy Markdown Front Matter\nDESCRIPTION: Illustrates how to change the output path for a specific content file in Eleventy, writing the file to a location outside the default output directory by using front matter options. Sets `permalink` to a custom path (such as `_includes/index.html`) and enables `permalinkBypassOutputDir: true` to bypass the output directory (`_site`). Especially useful for creating files intended for internal reuse rather than public output. Must be used with care to avoid overwriting important includes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n---\npermalink: \"_includes/index.html\"\npermalinkBypassOutputDir: true\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Liquid Filters for RFC Date Formatting using Eleventy RSS Plugin (JavaScript)\nDESCRIPTION: This snippet shows how to register the 'dateToRfc3339' and 'dateToRfc822' utilities from the Eleventy RSS plugin as Liquid filters for use in Eleventy templates. It imports '@11ty/eleventy-plugin-rss', and calls 'addLiquidFilter' on the Eleventy config object. Requirements: use with Eleventy projects needing RFC 3339 or RFC 822 date formatting in Liquid templates (e.g. for Atom or RSS feed compliance).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/rss.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport pluginRss from \"@11ty/eleventy-plugin-rss\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addLiquidFilter(\"dateToRfc3339\", pluginRss.dateToRfc3339);\n\n\t// New in RSS 1.2.0\n\televentyConfig.addLiquidFilter(\"dateToRfc822\", pluginRss.dateToRfc822);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Value with Custom Filter - Liquid Template - HTML\nDESCRIPTION: Uses the Liquid template engine to render the \\\"name\\\" variable after processing it with the \\\"makeUppercase\\\" filter. To function, the filter must be registered in Eleventy for use in Liquid files. The output will be a heading with the uppercased input name.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>{{ name | makeUppercase }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Generating Pagination Navigation in Eleventy with Nunjucks\nDESCRIPTION: This snippet creates a structured navigation element listing links to all paginated pages, using Nunjucks templating with Eleventy 'pagination' data provided. Relies on 'pagination.pages' and 'pagination.hrefs' to render links and distinguish the current page via 'aria-current'. The code is structured to be accessible and is intended for rendering page-level navigation. Inputs include current page index, array of hrefs, and labels. Outputs accessible HTML markup for navigation. Requires Eleventy with Nunjucks support and a properly configured pagination block.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% set paginationSize = pagination.pages.length %}\n<nav aria-labelledby=\"my-pagination\">\n  <h2 id=\"my-pagination\">This is my Pagination</h2>\n  <ol>\n    {% for pageIndex in pagination.pages | range %}\n      <li>\n        <a href=\"{{ pagination.hrefs[pageIndex] }}\"{% if page.url == pagination.hrefs[pageIndex] %} aria-current=\"page\"{% endif %}>\n          Page {{ pageIndex + 1 }}\n        </a>\n      </li>\n    {% endfor %}\n  </ol>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Customizing Directory Output Plugin Options in Eleventy Config (JavaScript)\nDESCRIPTION: This snippet extends the base plugin configuration by specifying options to customize output columns (file size and benchmarks) and set a file size warning threshold. Both columns can be enabled or disabled via boolean flags, and the size threshold is set in bytes. Requires Eleventy v1.0.1 or newer for the benchmark column. The configuration should be placed in your eleventy.config.js file and follows ES module default export.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/directory-output.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport dirOutputPlugin from \"@11ty/eleventy-plugin-directory-output\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.setQuietMode(true);\n\televentyConfig.addPlugin(dirOutputPlugin, {\n\t\t// Customize columns\n\t\tcolumns: {\n\t\t\tfilesize: true, // Use `false` to disable\n\t\t\tbenchmark: true, // Use `false` to disable\n\t\t},\n\n\t\t// Will show in yellow if greater than this number of bytes\n\t\twarningFileSize: 400 * 1000,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Passthrough File Copy in Eleventy\nDESCRIPTION: Demonstrates how to configure Eleventy to copy files and directories to the output folder. Examples include copying an entire directory, a subdirectory, and using glob patterns.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/copy.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Output directory: _site\n\n\t// Copy `img/` to `_site/img`\n\televentyConfig.addPassthroughCopy(\"img\");\n\n\t// Copy `css/fonts/` to `_site/css/fonts`\n\t// Keeps the same directory structure.\n\televentyConfig.addPassthroughCopy(\"css/fonts\");\n\n\t// Copy any .jpg file to `_site`, via Glob pattern\n\t// Keeps the same directory structure.\n\televentyConfig.addPassthroughCopy(\"**/*.jpg\");\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Image EXIF Data into Eleventy Data Cascade (JavaScript)\nDESCRIPTION: This advanced example shows how to read EXIF metadata from image files (`.png`, `.jpeg`) and make it available in the Eleventy data cascade. It uses the `exifr` library and the options object syntax for `addDataExtension`, setting `read: false` to pass the file path to the asynchronous parser. The `exifr` package must be installed (`npm install exifr`). The parsed EXIF data is returned within an `exif` key.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-custom.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport exifr from \"exifr\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addDataExtension(\"png,jpeg\", {\n\t\tparser: async (file) => {\n\t\t\tlet exif = await exifr.parse(file);\n\n\t\t\treturn {\n\t\t\t\texif,\n\t\t\t};\n\t\t},\n\n\t\t// Using `read: false` changes the parser argument to\n\t\t// a file path instead of file contents.\n\t\tread: false,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Template Syntax in WebC\nDESCRIPTION: Shows how to use Eleventy template syntax inside WebC components using webc:type=\"11ty\".\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_9\n\nLANGUAGE: liquid\nCODE:\n```\n---\nfrontmatterdata: \"Hello from Front Matter\"\n---\n<template webc:type=\"11ty\" 11ty:type=\"liquid,md\">\n{% assign t = \"Liquid in WebC\" %}\n## {{ t }}\n\n_{{ frontmatterdata }}_\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Missing Extension Error Globally in Eleventy Config (JavaScript)\nDESCRIPTION: Shows how to disable the error for missing file extensions across the entire project within the Eleventy configuration file (`.eleventy.js`). This uses the `configureErrorReporting` method.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Disable this error for the project.\n\televentyConfig.configureErrorReporting({ allowMissingExtensions: true })\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Navigation Data Structure using Liquid Filter\nDESCRIPTION: This Liquid code snippet demonstrates the advanced usage of fetching the raw navigation data structure. It applies the `eleventyNavigation` filter to a collection (`collections.all`), assigns the resulting array to a variable `navPages`, and then outputs it as JSON using the `json` filter for inspection.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_15\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign navPages = collections.all | eleventyNavigation %}\n{{ navPages | json }}\n```\n\n----------------------------------------\n\nTITLE: Linking via InputPath with Eleventy Plugin in Liquid Templates\nDESCRIPTION: Illustrates usage of the plugin in a Liquid template by placing a source file path in the \\\"href\\\" of an anchor tag. The plugin automatically rewrites this to the correct output URL during the Eleventy build. Prerequisites are an Eleventy 3.x setup and the plugin enabled via addPlugin. The key parameter is \\\"href\\\". Outputs a valid anchor tag in the final site content; input path must be a valid template. This approach is simple and does not require additional Liquid-specific syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inputpath-to-url.md#2025-04-23_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n<a href=\\\"my-template.md\\\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pug Plugin with Custom Options (JavaScript)\nDESCRIPTION: Imports the Pug plugin and adds it to Eleventy's configuration while specifying compile or render options (e.g., enabling debug). This snippet demonstrates how to pass a configuration object as the second argument to addPlugin, extending Pug's behavior. Required dependency: '@11ty/eleventy-plugin-pug'. Input: eleventyConfig object; plugin options object. Output: Eleventy instance with Pug plugin registered and custom options applied.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/pug.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pugPlugin from \"@11ty/eleventy-plugin-pug\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(pugPlugin, {\n\t\tdebug: true\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Using inputPathToUrl Filter in Liquid\nDESCRIPTION: Demonstrates applying the `inputPathToUrl` filter to a template's input path string (`\"index.md\"`) within a Liquid template to generate the corresponding output URL for an anchor tag's `href` attribute. Requires Eleventy context where the filter is available.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/inputpath-to-url.md#2025-04-23_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n<a href=\"{{ \\\"index.md\\\" | inputPathToUrl }}\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Raw Content Component Example\nDESCRIPTION: Shows how to use webc:raw to opt-out of WebC template processing for child content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<template webc:raw>\n\tLeave me out of this.\n\t<style>\n\t\tp {\n\t\t\tcolor: rebeccapurple;\n\t\t}\n\t</style>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Tags on Multiple Lines\nDESCRIPTION: Example of assigning multiple tags to content using YAML list syntax. This content will appear in both collections.cat and collections.dog.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntags:\n  - cat\n  - dog\n---\n```\n\n----------------------------------------\n\nTITLE: Using the jsmin Filter in Nunjucks for Inline Minified JavaScript\nDESCRIPTION: This Nunjucks/HTML snippet demonstrates how to use the previously defined `jsmin` filter. It first captures the content of `sample.js` into a Nunjucks variable named `js` using the `include` tag. Then, it pipes this variable through the `jsmin` filter to minify the code and finally uses the `safe` filter to output the minified JavaScript directly within `<script>` tags without HTML escaping.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/inline-js.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- capture the JS content as a Nunjucks variable -->\n{% set js %} {% include \"sample.js\" %} {% endset %}\n<!-- feed it through our jsmin filter to minify -->\n<script>\n{{ js | jsmin | safe }}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Paging Data from a File - Eleventy Nunjucks Template\nDESCRIPTION: Illustrates how paginated data can be sourced from a global or local data file using a Nunjucks template in Eleventy. The code expects front matter to point the 'pagination' data key to external data available via 'globalDataSet.json' or similar. This approach is useful for dynamic content loaded from external sources.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_11\n\nLANGUAGE: jinja2\nCODE:\n```\n{% include \\\"snippets/pagination/paging-datafile.njk\\\" %}\n```\n\n----------------------------------------\n\nTITLE: Setting Watch Throttle Wait Time in Eleventy\nDESCRIPTION: Shows how to set a delay before Eleventy re-runs after file changes during watch or serve modes. This can be useful in edge cases when working with other task runners like Gulp or Grunt.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/watch-serve.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// default is 0\n\televentyConfig.setWatchThrottleWaitTime(100); // in milliseconds\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Object Values with 'resolve: values' in Eleventy Pagination\nDESCRIPTION: Demonstrates how to filter values when using 'resolve: values' for paginated objects. This allows filtering by value rather than by key.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n---\npagination:\n  data: testdata\n  size: 1\n  resolve: values\n  filter:\n    - itemvalue3\ntestdata:\n  item1: itemvalue1\n  item2: itemvalue2\n  item3: itemvalue3\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Image Component Example\nDESCRIPTION: Shows how to use webc:type=\"js\" to create an image component with required alt text validation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<img\n\tsrc=\"my-image.jpeg\"\n\talt=\"An excited Zach is trying to finish this documentation\"\n/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script webc:type=\"js\" webc:root>\n\tif (!alt) {\n\t\tthrow new Error(\"oh no you didn't\");\n\t}\n\t`<img src=\"${src}\" alt=\"${alt}\">`;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using getAllSorted() Method in Eleventy Collections\nDESCRIPTION: Shows how to use getAllSorted() to retrieve all items sorted by the default algorithm (ascending by date with filename as tiebreaker). Returns a sorted array of all collection items.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Use the default sorting algorithm (ascending by date, filename tiebreaker)\n\televentyConfig.addCollection(\"allMySortedContent\", function (collectionsApi) {\n\t\treturn collectionsApi.getAllSorted();\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Filename Format (ESM)\nDESCRIPTION: Shows how to provide a custom function to the `filenameFormat` option. This function receives the `cacheKey` and `hash` and returns a custom string (without extension) to be used as the filename for the cached asset within the cache directory.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nawait Fetch(\"https://…\", {\n\tfilenameFormat: function(cacheKey, hash) {\n\t\t// do not include the file extension\n\t\treturn `custom-name-${cacheKey}-${hash}`\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Concatenating CSS Files using Nunjucks Includes in Eleventy\nDESCRIPTION: This snippet demonstrates a simple method to concatenate multiple CSS files into a single output file (`theme.css`) using Eleventy and the Nunjucks templating engine. The Markdown file uses front matter to define the output permalink. The `{% include %}` tags are used to sequentially embed the contents of `header.css` and `footer.css`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/concatenate.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\npermalink: theme.css\n---\n\n{% include \"components/header.css\" %}\n{% include \"components/footer.css\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebC Layout in Eleventy\nDESCRIPTION: Example of a WebC layout file used to structure HTML pages. The @raw attribute is used to inject content from child templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>WebC Example</title>\n\t</head>\n\t<body @raw=\"content\"></body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Previous and Next Pagination Links in Eleventy with JavaScript Template\nDESCRIPTION: This JavaScript (11ty JS template) code generates 'Previous' and 'Next' links based on available pagination.href.previous and pagination.href.next properties. Only outputs the relevant links when not on the first or last paginated page. Requires that pagination data include 'href.previous' and 'href.next', present in Eleventy 0.10.0 and later.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function({ pagination }) {\n  let output = '';\n  if (pagination.href.previous) {\n    output += `<a href=\\\"${pagination.href.previous}\\\">Previous</a>`;\n  }\n  if (pagination.href.next) {\n    output += `<a href=\\\"${pagination.href.next}\\\">Next</a>`;\n  }\n  return output;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Pagination Navigation in Eleventy with JavaScript Template\nDESCRIPTION: This JavaScript/11ty template exports a function generating an accessible navigation structure as HTML. It loops over pagination.pages and pagination.hrefs, producing an ordered list of page links with 'aria-current' on the current page. Requires an Eleventy environment supporting JavaScript template files and a correctly structured pagination object. Inputs include data (with pagination, hrefs, page.url); output is a navigation HTML string.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function({ pagination, page }) {\n  return `\n<nav aria-labelledby=\\\"my-pagination\\\">\n  <h2 id=\\\"my-pagination\\\">This is my Pagination</h2>\n  <ol>\n    ${pagination.pages.map((items, idx) => `\n      <li>\n        <a href=\\\"${pagination.hrefs[idx]}\\\"${page.url === pagination.hrefs[idx] ? ' aria-current=\\\"page\\\"' : ''}>\n          Page ${idx+1}\n        </a>\n      </li>\n    `).join('')}\n  </ol>\n</nav>\n`;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom markdown-it Instance in Eleventy Configuration - JavaScript\nDESCRIPTION: This snippet shows how to provide your own markdown-it instance with custom options to Eleventy using the Configuration API. Dependencies include the markdown-it package and Eleventy. The options control Markdown rendering (e.g., enabling HTML, line breaks, and linkification). Inputs involve Eleventy config and an options object, output is the custom Markdown library being registered for \\'md\\' processing.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport markdownIt from \\\"markdown-it\\\";\n\nexport default function (eleventyConfig) {\n\tlet options = {\n\t\thtml: true,\n\t\tbreaks: true,\n\t\tlinkify: true,\n\t};\n\n\televentyConfig.setLibrary(\\\"md\\\", markdownIt(options));\n};\n```\n\n----------------------------------------\n\nTITLE: Linking to Previous and Next Blog Posts (Liquid)\nDESCRIPTION: Renders navigation links to previous and next blog posts using values obtained from getPreviousCollectionItem and getNextCollectionItem in Liquid. Assumes previousPost and nextPost are defined. Inputs: previousPost and nextPost objects with url and data.title properties. Outputs anchor links to navigate between blog posts if the corresponding object exists. Limitations: If previousPost or nextPost are undefined, the link is omitted.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/collection-items.md#2025-04-23_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% if previousPost %}Previous Blog Post: <a href=\"{{ previousPost.url }}\">{{ previousPost.data.title }}</a>{% endif %}\n{% if nextPost %}Next Blog Post: <a href=\"{{ nextPost.url }}\">{{ nextPost.data.title }}</a>{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Including Current Page in Breadcrumbs with Liquid\nDESCRIPTION: This snippet demonstrates how to include the current page in breadcrumb navigation results by setting the includeSelf option in Liquid syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_24\n\nLANGUAGE: liquid\nCODE:\n```\n---\nnavOptions:\n  includeSelf: true\n---\n{% assign navPages = collections.all | eleventyNavigationBreadcrumb: \"Mammals\", navOptions %}\n{{ navPages | json }}\n```\n\n----------------------------------------\n\nTITLE: Using inputPathToUrl Filter in Nunjucks (Jinja2)\nDESCRIPTION: Demonstrates applying the `inputPathToUrl` filter to a template's input path string (`\"index.md\"`) within a Nunjucks (Jinja2) template to generate the corresponding output URL for an anchor tag's `href` attribute. Requires Eleventy context where the filter is available.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/inputpath-to-url.md#2025-04-23_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n<a href=\"{{ \\\"index.md\\\" | inputPathToUrl }}\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Global Data File Example for Pagination - JSON\nDESCRIPTION: Provides an example of a global data JSON file containing an array for use as a pagination dataset in Eleventy. Intended to be placed in the project's global data directory, this enables separation of paginated data from template files. Used by referencing 'myData' via the pagination 'data' key.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\\t\\\"myData\\\": [\\\"item1\\\", \\\"item2\\\", \\\"item3\\\", \\\"item4\\\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Tags or Shortcodes in Liquid\nDESCRIPTION: Shows the syntax for using a custom tag or shortcode (`uppercase`) with a variable (`name`) in Liquid. Both custom tags and shortcodes share this syntax for invocation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_11\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% uppercase name %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Debug Configuration - Package.json\nDESCRIPTION: NPM script configuration in package.json for cross-platform debug mode using cross-env package.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"debug\": \"cross-env DEBUG=Eleventy* npx @11ty/eleventy\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Asset Buckets in a Layout\nDESCRIPTION: This layout file demonstrates how to output bundled assets from different buckets using the getBundle helper function. The webc:keep attribute prevents re-bundling of the already bundled assets.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>WebC Example</title>\n\t\t<!-- Default bucket -->\n\t\t<style @raw=\"getBundle('css')\" webc:keep></style>\n\t\t<script @raw=\"getBundle('js')\" webc:keep></script>\n\t</head>\n\t<body>\n\t\t<template @raw=\"content\" webc:nokeep></template>\n\n\t\t<!-- `defer` bucket -->\n\t\t<style @raw=\"getBundle('css', 'defer')\" webc:keep></style>\n\t\t<script @raw=\"getBundle('js', 'defer')\" webc:keep></script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Permalinks with the slug Filter in Eleventy YAML\nDESCRIPTION: Demonstrates defining a permalink property in Eleventy's front matter that uses the slug universal filter to create a URL-friendly version of a page title. This requires Eleventy (v1.0.0+ for alternate use of slugify) with the slugify npm package available. The title field is processed into a slug and used in the output path for the generated page. Input: a title string; Output: a URL with the slugified title. This approach is superseded by the 'slugify' filter for improved handling but remains available for backward compatibility.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/slug.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\ntitle: \\\"My Title\\\"\\npermalink: \\\"/{{ title | slug }}/\\\"\\n---\\nOutputs to `/my-title/`.\n```\n\n----------------------------------------\n\nTITLE: Handling Bucket Conflicts and Hoisting\nDESCRIPTION: This example shows how WebC handles conflicts when a component is used in multiple buckets. WebC will hoist component code to the nearest shared bucket, in this case placing my-component's assets only in the default bucket.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<!-- has an implied webc:bucket=\"default\" -->\n<my-component></my-component>\n\n<div webc:bucket=\"defer\">\n\t<my-component></my-component>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX and TSX Support with esbuild-register in Eleventy (JavaScript CommonJS)\nDESCRIPTION: This JavaScript CommonJS snippet demonstrates how to set up Eleventy to process `.11ty.jsx`, `.11ty.ts`, and `.11ty.tsx` files using the `esbuild-register` loader for environments where ESM is unavailable, such as Eleventy 2.0. It requires and registers `esbuild-register/dist/node` and adds the specified template formats using Eleventy's `addExtension` API. Dependencies: `esbuild-register`, Node CommonJS environment, and appropriate version of Eleventy. The configuration function exposes the setup via `module.exports` and registers no compile step, relying on default handling.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/jsx.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { register } = require(\"esbuild-register/dist/node\");\n\nregister();\n\nmodule.exports = function(eleventyConfig) {\n\t// We can add support for TypeScript too, at the same time:\n\televentyConfig.addExtension([\"11ty.jsx\", \"11ty.ts\", \"11ty.tsx\"], {\n\t\tkey: \"11ty.js\",\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Front Matter Example in Markdown\nDESCRIPTION: Shows the basic front matter structure for a blog post that will be used with computed data.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-computed.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My Page Title\nparent: My Parent Key\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Buckets in a WebC Component\nDESCRIPTION: This example shows how to use webc:bucket to direct CSS and JavaScript to different named buckets within a component. Assets without a bucket specification go to the default bucket, while others can be directed to named buckets like 'defer'.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<style>\n\t/* This CSS is put into the default bucket */\n</style>\n<script>\n\t/* This JS is put into the default bucket */\n</script>\n<style webc:bucket=\"defer\">\n\t/* This CSS is put into the `defer` bucket */\n</style>\n<script webc:bucket=\"defer\">\n\t/* This JS is put into the `defer` bucket */\n</script>\n```\n\n----------------------------------------\n\nTITLE: Debug Command for macOS/Linux - Shell\nDESCRIPTION: Command to enable debug mode in Eleventy for macOS and Linux systems using the DEBUG environment variable.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nDEBUG=Eleventy* npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Fetching Navigation Data Structure using Nunjucks Filter\nDESCRIPTION: This Nunjucks code snippet fetches the raw navigation data structure using the `eleventyNavigation` filter. The result is assigned to `navPages`, and the `dump` filter (commonly available in Nunjucks environments like Eleventy) is used to display the structure, often similar to JSON. The `safe` filter prevents escaping.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_16\n\nLANGUAGE: jinja2\nCODE:\n```\n{% set navPages = collections.all | eleventyNavigation %}\n{{ navPages | dump | safe }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Passthrough Copy Options in Eleventy\nDESCRIPTION: Demonstrates advanced configuration options for passthrough file copy, including support for symlinks, debugging, and other features provided by the recursive-copy package.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/copy.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addPassthroughCopy(\"img\", {\n\t\texpand: true, // expand symbolic links\n\t});\n\n\televentyConfig.addPassthroughCopy({ img: \"subfolder/img\" }, {\n\t\tdebug: true, // log debug information\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Blog Post Tag in Markdown Front Matter\nDESCRIPTION: Example of adding a single 'post' tag to a Markdown file to include it in the post collection. This enables grouping content items together for display in templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntags: post\ntitle: Hot Take—Social Media is Considered Harmful\n---\n```\n\n----------------------------------------\n\nTITLE: Preact Component HTM Source Implementation (JavaScript)\nDESCRIPTION: Source code for a Preact component using HTM. Defines an App functional component and an export default that renders App into the given DOM element. Prerequisites: Preact and HTM importable from CDN. Input: DOM element; Output: 'Hello from Preact!' message rendered in strong tag.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { html, render } from \\\"https://unpkg.com/htm/preact/index.mjs?module\\\";\\n\\nfunction App(props) {\\n\\treturn html`<p><strong>Hello ${props.name}!</strong></p>`;\\n}\\n\\nexport default function (el) {\\n\\trender(html`<${App} name=\\\"from Preact\\\" />`, el);\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Images with Processed Stats Using Shortcode (Liquid)\nDESCRIPTION: This Liquid code snippet illustrates the usage of the previously defined 'dataCascadeImage' shortcode within a template (e.g., 'my-blog-post.md'). It passes the processed image stats and an alt text to the shortcode, letting Eleventy generate responsive image HTML based on the pre-computed stats. 'image.stats' refers to the object produced by the JavaScript data extension and made available through Eleventy’s Data Cascade; 'My alt text' supplies descriptive alternative text for accessibility. There are no additional dependencies beyond those established in configuration, and this usage is applicable wherever the data cascade exposes processed image information.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-datafiles.md#2025-04-23_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% dataCascadeImage image.stats, \"My alt text\" %}\n```\n\n----------------------------------------\n\nTITLE: Parsing Excerpts from Content in Eleventy\nDESCRIPTION: Example of using custom front matter options to parse excerpts from content in Eleventy. This shows how to define an excerpt separator and extract content before it.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-frontmatter-customize.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My page title\n---\n\nThis is the start of my content and this will be shown as the excerpt.\n\n<!-- excerpt -->\n\nThis is a continuation of my content…\n```\n\n----------------------------------------\n\nTITLE: Getting the Index of a Collection Item (Nunjucks/Jinja2)\nDESCRIPTION: Retrieves the 0-based numeric index of a collection item in Nunjucks/Jinja2 using the getCollectionItemIndex filter. You can reference the current context or pass a specific page object. Outputs an integer index for pagination logic or visual indicators. Requires Eleventy 2.0.0-canary.19 or higher.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/collection-items.md#2025-04-23_snippet_5\n\nLANGUAGE: jinja2\nCODE:\n```\n{% set index = collections.posts | getCollectionItemIndex %}\n\nOr pass it in:\n{% set index = collections.posts | getCollectionItemIndex(page) %}\n```\n\n----------------------------------------\n\nTITLE: Transforming HTML Headings with Id Attributes (HTML)\nDESCRIPTION: Demonstrates how the plugin transforms a simple HTML heading by automatically adding a unique id attribute to facilitate deep linking. Inputs are standard heading elements. This requires no external dependencies and is integrated into Eleventy’s processing pipeline, generating accessible section links.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/id-attribute.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1>Welcome to Eleventy</h1>\n```\n\n----------------------------------------\n\nTITLE: Using Cascading Asset Buckets in WebC\nDESCRIPTION: This example demonstrates cascading asset buckets where a webc:bucket attribute applied to a parent element cascades to all child elements. Components within a div with webc:bucket='defer' will all have their assets directed to the defer bucket.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<!-- has an implied webc:bucket=\"default\" -->\n<my-component></my-component>\n\n<div webc:bucket=\"defer\">\n\t<!-- each of these have webc:bucket=\"defer\" -->\n\t<!-- (including any nested components inside, too) -->\n\t<footnote-references></footnote-references>\n\n\t<my-footer></my-footer>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating Links with InputPath in Eleventy JS Template (ES Module)\nDESCRIPTION: Presents a JS template in ES module format for Eleventy that outputs an anchor tag referencing a source file ('my-template.md'). When the InputPath to URL plugin is active, Eleventy transforms this path in the final output. No dependencies beyond Eleventy 3.x and plugin opt-in are necessary. The function receives \\\"data\\\", produces a string of HTML, and expects the input path to match an Eleventy template file. Output links are automatically updated if the permalink changes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inputpath-to-url.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport default function (data) {\\n\\treturn `<a href=\\\"my-template.md\\\">Home</a>`;\\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Previous and Next Pagination Links in Eleventy with CommonJS JavaScript Template\nDESCRIPTION: This CommonJS JavaScript template for Eleventy renders 'Previous' and 'Next' links by checking and using 'pagination.href.previous' and 'pagination.href.next'. Links appear only if not on the first or last page, and the snippet expects the correct pagination object from Eleventy. Intended for use in JS-based Eleventy templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function({ pagination }) {\n  let output = '';\n  if (pagination.href.previous) {\n    output += `<a href=\\\"${pagination.href.previous}\\\">Previous</a>`;\n  }\n  if (pagination.href.next) {\n    output += `<a href=\\\"${pagination.href.next}\\\">Next</a>`;\n  }\n  return output;\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Buffer Value for Eleventy Template Output - JavaScript\nDESCRIPTION: Uses Node.js Buffer to export raw content, which may be required when integrating with libraries that output buffers. Requires Node.js environment with Buffer support; produces binary-safe output for the template.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default Buffer.from(\"<p>Z\\u00e1ch</p>\");\n```\n\n----------------------------------------\n\nTITLE: Nesting WebC Root Components\nDESCRIPTION: Demonstrates how to nest webc:root inside other content using template elements.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div>\n\t<div>\n\t\t<template webc:root=\"override\" class=\"another-class\">\n\t\t\tSome component content\n\t\t</template>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Template String Example in Markdown Front Matter\nDESCRIPTION: Demonstrates using template syntax strings in YAML front matter for computed properties.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-computed.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My Page Title\nparent: My Parent Key\neleventyComputed:\n  eleventyNavigation:\n    key: \"{{ title }}\"\n    parent: \"{{ parent }}\"\n---\n```\n\n----------------------------------------\n\nTITLE: Linking via InputPath with Eleventy Plugin in Nunjucks (Jinja2/NJK)\nDESCRIPTION: Shows usage of the InputPath to URL plugin in Nunjucks/Jinja2 templates. Including a raw source file path (\\\"my-template.md\\\") in an anchor's \\\"href\\\" triggers the plugin during build to convert it to the final output URL. Requires Eleventy 3.x configured with the plugin. The key parameter is the \\\"href\\\" attribute. Output is a fully formed anchor with remapped URL; relies on the input path being a valid Eleventy template source.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inputpath-to-url.md#2025-04-23_snippet_3\n\nLANGUAGE: jinja2\nCODE:\n```\n<a href=\\\"my-template.md\\\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Creating Links with InputPath using Eleventy Plugin in Markdown\nDESCRIPTION: Shows how to use the InputPath to URL plugin within Markdown content. By referencing a source file (\\\"my-template.md\\\") in a Markdown link, the plugin automatically updates the link to the corresponding output URL. This requires the plugin to be enabled in Eleventy, and works wherever Markdown is processed. The primary parameter is the Markdown link target; it must match a valid template source. The resulting output will have the link updated to the file's output URL. This method is constrained to projects configured with Eleventy and the plugin enabled.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inputpath-to-url.md#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n[Home](my-template.md)\n```\n\n----------------------------------------\n\nTITLE: Backward Compatibility Using jsDataFileSuffix Return Property - JavaScript\nDESCRIPTION: Illustrates backward compatibility configuration for projects using Eleventy before v2.0.0-canary.19. Returns an object with jsDataFileSuffix set to a custom value for recognizing JavaScript data files. Input is a string (e.g., '.11tydata'); output is a configuration object used internally by Eleventy for data file detection.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\treturn {\\n\\t\\tjsDataFileSuffix: \\\".11tydata\\\",\\n\\t};\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy with ESM\nDESCRIPTION: Demonstrates an Eleventy configuration file written in ESM format, using import statements and export default instead of require and module.exports.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/cjs-esm.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Any combination of these\nimport { I18nPlugin, RenderPlugin, HtmlBasePlugin } from \"@11ty/eleventy\";\n\nexport default function (eleventyConfig) {\n\t// …\n};\n```\n\n----------------------------------------\n\nTITLE: Reversing Data Sets in Eleventy Pagination\nDESCRIPTION: Demonstrates how to reverse a data set before pagination using the 'reverse: true' option. This feature was added in Eleventy version 0.7.0.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n---\npagination:\n  data: testdata\n  size: 2\n  reverse: true\ntestdata:\n  - item1\n  - item2\n  - item3\n  - item4\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter in Eleventy Layout File\nDESCRIPTION: Example of front matter in a Nunjucks layout file, defining title, author, and tags.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-cascade.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: This is a Very Good Blog Post\nauthor: Zach\ntags:\n  - JavaScript\n---\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Array reverse() on Collections\nDESCRIPTION: Example of a shortcode implementation showing incorrect usage of array.reverse() which mutates the collection array and can cause side effects in other templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addShortcode(\"myShortcode\", function (aCollection){\n\t  // WARNING\n\t  aCollection.reverse();\n\t})\n};\n```\n\n----------------------------------------\n\nTITLE: Debug Performance Measurement Command for macOS/Linux\nDESCRIPTION: Command to show all performance measurements in Eleventy for Unix-based systems using the DEBUG environment variable\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/debug-performance.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=Eleventy:Benchmark* npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Example Output Structure from eleventyNavigation Filter\nDESCRIPTION: This JSON object illustrates the data structure returned by the `eleventyNavigation` filter. It shows an array of top-level navigation items, each potentially containing a `children` array for nested items. Properties include `key`, `url`, `title`, and `parentKey` (for children).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"key\": \"Mammals\",\n\t\t\"url\": \"/mammals/\",\n\t\t\"title\": \"Mammals\",\n\t\t\"children\": [\n\t\t\t{\n\t\t\t\t\"key\": \"Humans\",\n\t\t\t\t\"parentKey\": \"Mammals\",\n\t\t\t\t\"url\": \"/humans/\",\n\t\t\t\t\"title\": \"Humans\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"Bats\",\n\t\t\t\t\"parentKey\": \"Mammals\",\n\t\t\t\t\"url\": \"/bats/\",\n\t\t\t\t\"title\": \"Bats\"\n\t\t\t}\n\t\t]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Permalinks with slugify Filter in Eleventy Front Matter (YAML)\nDESCRIPTION: This YAML front matter snippet demonstrates using the `slugify` universal filter within an Eleventy template. It takes the value of the `title` variable ('My Title') and applies the `slugify` filter to generate a URL-friendly string ('my-title'), which is then used to construct the `permalink` value `/my-title/`. This requires Eleventy's templating engine and the underlying `@sindresorhus/slugify` package.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/slugify.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"My Title\"\npermalink: \"/{{ title | slugify }}/\"\n---\nOutputs to `/my-title/`.\n```\n\n----------------------------------------\n\nTITLE: Using the Nunjucks `highlight` Paired Shortcode\nDESCRIPTION: Demonstrates how to use the `highlight` paired shortcode within Nunjucks templates to apply syntax highlighting. The code block to be highlighted is placed between the opening and closing tags, and the language (e.g., `js`) is specified as an argument to the opening tag.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/syntaxhighlight.md#2025-04-23_snippet_4\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% highlight \"js\" %}\nfunction myFunction() {\n\treturn true;\n}\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Sample JavaScript File for Inclusion\nDESCRIPTION: This is a simple example JavaScript file (`sample.js`) intended to be placed in the `_includes` directory of an Eleventy project. It contains a basic comment and a `console.log` statement, serving as content to be minified by the `jsmin` filter.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/inline-js.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Hi\nconsole.log(\"Hi\");\n```\n\n----------------------------------------\n\nTITLE: Changing Output Directory for Passthrough File Copy\nDESCRIPTION: Shows how to change the output directory for passthrough file copy by using an object structure. This allows for more flexible file organization.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/copy.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Input directory: src\n\t// Output directory: _site\n\n\t// Copy `img/` to `_site/subfolder/img`\n\televentyConfig.addPassthroughCopy({ img: \"subfolder/img\" });\n\n\t// Copy `src/img/` to `_site/subfolder/img`\n\televentyConfig.addPassthroughCopy({ \"src/img\": \"subfolder/img\" });\n\n\t// Copy `random-folder/img/` to `_site/subfolder/img`\n\televentyConfig.addPassthroughCopy({ \"random-folder/img\": \"subfolder/img\" });\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Eleventy Build Output as NDJSON (Node.js)\nDESCRIPTION: This Node.js script demonstrates retrieving Eleventy build results programmatically as NDJSON (Newline Delimited JSON). It uses the `.toNDJSON()` method. This format streams each result object as a separate JSON string on a new line, which can be useful for processing large sites.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/programmatic.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// my-node-script.js\nconst Eleventy = require(\"@11ty/eleventy\");\n\n(async function() {\n\tlet elev = new Eleventy();\n\n\tawait elev.init();\n\tlet stream = await elev.toNDJSON();\n\tstream.pipe(process.stdout);\n\n\t/* \n\t{\"inputPath\":\"./README.md\",\"outputPath\":\"./_site/README/index.html\",\"url\":\"/README/\",\"content\":\"<!doctype html>…\"}\n\t*/\n})();\n```\n\n----------------------------------------\n\nTITLE: Applying a Filter in Nunjucks Template (HTML)\nDESCRIPTION: This HTML snippet demonstrates the syntax for applying a registered filter (`myFilter`) to a variable (`myVariable`) within a Nunjucks template. The pipe symbol (`|`) is used to apply the filter.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ myVariable | myFilter }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Using the url Filter in Liquid/Nunjucks Templates (HTML)\nDESCRIPTION: Demonstrates applying the `url` filter within HTML anchor tags using Liquid or Nunjucks templating syntax. The filter takes an absolute path (either as a string literal or a variable) and prepends the configured `pathPrefix` if the path starts with '/'. This ensures links work correctly when the site is deployed to a subdirectory.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/url.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ '/myDir/' | url }}\">Liquid or Nunjucks Link (from string)</a>\n<a href=\"{{ post.url | url }}\">Liquid or Nunjucks Link (from variable)</a>\n```\n\n----------------------------------------\n\nTITLE: Overriding Tags from Data Cascade\nDESCRIPTION: Example showing how to override tags defined higher in the data cascade by using the override: prefix. This allows complete redefinition of tags rather than merging.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n---\noverride:tags: []\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Wait Conditions in Eleventy Screenshot API URL\nDESCRIPTION: Illustrates the URL format for specifying custom wait conditions using the `_wait` parameter appended to the URI-encoded URL path segment in the Eleventy Screenshot API. Options control Puppeteer's `waitUntil` property: `_wait:0` (DOMContentLoaded), `_wait:1` (Load event - default), `_wait:2` (Load + network idle for 500ms), `_wait:3` (Load + <2 network connections for 500ms).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/screenshots.md#2025-04-23_snippet_2\n\nLANGUAGE: url\nCODE:\n```\n/:url/_wait:0/\n/:url/_wait:1/\n/:url/_wait:2/\n/:url/_wait:3/\n```\n\n----------------------------------------\n\nTITLE: Using 'Last Modified' Date in Eleventy Front Matter (YAML)\nDESCRIPTION: Shows how to use the special string value `\"Last Modified\"` for the `date` key in YAML front matter. Eleventy automatically resolves this to the file's last modified timestamp.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/dates.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndate: Last Modified\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Permalinks with filePathStem in Front Matter - Markdown\nDESCRIPTION: This snippet shows how to use Eleventy's `page.filePathStem` within your template's YAML front matter to set a custom permalink for a page. The approach creates an output URL ending with `.html` based on the input file's stem, aiding in projects that require explicit file extension permalinks. It has no external dependencies but assumes access to Eleventy data variables and is specific to the structure of Eleventy projects. Limitations: The syntax depends on templating language support; this example uses Liquid-style interpolation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-eleventy-supplied.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\npermalink: \"{{ page.filePathStem }}.html\"\n---\n```\n\n----------------------------------------\n\nTITLE: Including External Content with Liquid Tag (Liquid)\nDESCRIPTION: This Liquid `include` tag instructs the Eleventy templating engine to fetch the content of the specified file (`datasources.md`) and insert it into the current document at this position during the site build process. This requires the `datasources.md` file to exist and be accessible by Eleventy's include mechanism.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include \"datasources.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Embedding an Eleventy Screenshot using HTML img Tag\nDESCRIPTION: Demonstrates how to embed a screenshot generated by the Eleventy Screenshot API within an HTML document using the `<img>` tag. The `src` attribute points to the API endpoint with a specific URL (URI encoded), size ('small'), aspect ratio ('9:16'), and zoom level ('bigger'). Includes standard image attributes like `width`, `height`, `loading`, `decoding`, and `alt`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/screenshots.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img\n\tsrc=\"https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/small/9:16/bigger/\"\n\tclass=\"screenshot screenshot-first-example\"\n\twidth=\"375\"\n\theight=\"667\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\talt=\"Screenshot of 11ty.dev\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding an OpenGraph Image from a11yproject.com using HTML\nDESCRIPTION: HTML code snippet showing how to embed the OpenGraph image for 'https://www.a11yproject.com/' fetched via the Eleventy OpenGraph Image service. This example specifically requests the 'small' size image and uses attributes like 'alt', 'loading', 'decoding', 'width', and 'height'.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/opengraph.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img\n\tsrc=\"https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.a11yproject.com%2F/small/\"\n\talt=\"OpenGraph image for a11yproject.com\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\twidth=\"375\"\n\theight=\"197\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Debug Performance Measurement Command for Windows\nDESCRIPTION: Command to show all performance measurements in Eleventy for Windows systems using the set command\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/debug-performance.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset DEBUG=Eleventy:Benchmark* & npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Using a Paired Shortcode in Liquid Template (HTML/Liquid)\nDESCRIPTION: This HTML/Liquid snippet demonstrates the usage of the paired shortcode `user2` in a template. It shows how to pass arguments (`name`, `twitterUsername`) and enclose content between the opening (`{% user2 %}`) and closing (`{% enduser2 %}`) tags.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n{% user2 \"Zach Leatherman\" \"zachleat\" %} Zach likes to take long walks on\nNebraska beaches. {% enduser2 %}\n```\n\n----------------------------------------\n\nTITLE: Using inputPathToUrl Function in JavaScript (ESM)\nDESCRIPTION: Shows how to use the `inputPathToUrl` helper function within an Eleventy JavaScript template function (ES Module format). The function is accessed via `this.inputPathToUrl` and takes the input path string (`\"index.md\"`) as an argument to produce the output URL for an anchor tag.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/inputpath-to-url.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default function (data) {\n\treturn `<a href=\"${this.inputPathToUrl(\"index.md\")}\">Home</a>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Sorted Collections with getAllSorted().filter() in Eleventy\nDESCRIPTION: Shows how to filter sorted collections using getAllSorted().filter(). This example creates a collection that only includes content that was originally written in Markdown.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Filter using `Array.filter`\n\televentyConfig.addCollection(\"onlyMarkdown\", function (collectionsApi) {\n\t\treturn collectionsApi.getAllSorted().filter(function (item) {\n\t\t\t// Only return content that was originally a markdown file\n\t\t\tlet extension = item.inputPath.split(\".\").pop();\n\t\t\treturn extension === \"md\";\n\t\t});\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Using TOML for Front Matter in Eleventy\nDESCRIPTION: Example of using TOML for front matter parsing in an Eleventy markdown file. This demonstrates how to use a non-default front matter format.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-frontmatter-customize.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---toml\ntitle = \"My page title using TOML\"\n---\n\n<!doctype html>\n<html>\n…\n```\n\n----------------------------------------\n\nTITLE: Exporting Arrow Function Template in Eleventy - JavaScript\nDESCRIPTION: Exports an arrow function that generates HTML using destructured input data. No dependencies required, but note arrow functions do not have their own 'this' binding, so JavaScript Template Functions dependent on 'this' will fail.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default ({ name }) => `<p>${name}</p>`;\n```\n\n----------------------------------------\n\nTITLE: Including a File and Passing a Single Data Variable in Liquid\nDESCRIPTION: Shows how to pass a single data variable ('Ava') to an included Liquid file (`_includes/user.liquid`) using the `with` keyword. The included file can access this data. Front matter in the include is not processed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_7\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% include 'user' with 'Ava' %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Basic <is-land> Usage for Islands Architecture (HTML)\nDESCRIPTION: Shows a minimal example of using the <is-land> component to designate content that should be hydrated as a client-side island. No dependencies beyond <is-land>. Accepts inner HTML content and creates an unconditionally hydrated island. Output is standard DOM content within <is-land> after hydration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<is-land>This is an island.</is-land>\n```\n\n----------------------------------------\n\nTITLE: Paginated Data Structure Example - YAML Object Literal\nDESCRIPTION: This YAML snippet provides object-literal data for Eleventy pagination where keys map to values. The pagination mechanism chunks the object keys for navigation and lookup. Intended for use with templates paginating over object entries instead of arrays. Useful for showing advanced paginated navigation scenarios.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntestdata:\n  key1: item1\n  key2: item2\n  key3: item3\n  key4: item4\n  key5: item5\n  key6: item6\n```\n\n----------------------------------------\n\nTITLE: Globally Disabling Dynamic Permalink Templating in Eleventy JavaScript Config\nDESCRIPTION: Sets a global Eleventy configuration to turn off dynamic permalink templating for all templates by calling `setDynamicPermalinks(false)` on the configuration object. Useful for optimizing build speed and ensuring static permalink assignment project-wide. To use, add this function to your Eleventy config file. No parameters required; effect is global and immediate.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Enabled by default\n\televentyConfig.setDynamicPermalinks(false);\n};\n```\n\n----------------------------------------\n\nTITLE: Example Data Structure in JSON\nDESCRIPTION: Shows the resulting data structure after Eleventy processes the computed data.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-computed.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"My Page Title\",\n\t\"parent\": \"My Parent Key\",\n\t\"eleventyNavigation\": {\n\t\t\"key\": \"My Page Title\",\n\t\t\"parent\": \"My Parent Key\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Paired Shortcode in Handlebars Template\nDESCRIPTION: This HTML (Handlebars) snippet demonstrates how to use the previously defined paired 'user' shortcode. The content between `{{# user ... }}` and `{{/ user }}` is passed as the `bioContent` argument to the shortcode function. Unlike simple shortcodes returning HTML, triple-stashes are not required here for the block helper syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/handlebars.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{{# user \"Zach Leatherman\" \"zachleat\" }}Zach likes to take long walks on Nebraska beaches.{{/ user }}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Permalink Path in YAML Front Matter\nDESCRIPTION: Demonstrates setting the `permalink` key in YAML front matter to remap a template's output location. This example specifies a nested directory structure, ending with a trailing slash, which implies an `index.html` file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\npermalink: \"this-is-a-new-path/subdirectory/testing/\"\n---\n```\n```\n\n----------------------------------------\n\nTITLE: IndieWeb Avatar API Endpoint Format\nDESCRIPTION: Defines the URL structure for accessing the IndieWeb Avatar API service. The `:url` parameter must be a URI-encoded representation of the target website URL for which the avatar is requested.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/indieweb-avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://v1.indieweb-avatar.11ty.dev/:url/\n```\n\n----------------------------------------\n\nTITLE: Generating Eleventy Release History List using Liquid\nDESCRIPTION: This Liquid template snippet iterates through a collection named `versions`. For each `version` object, it generates a markdown list item displaying the version tag, its npm channel (if specified), a link to the documentation (using `docs_url` or falling back to a GitHub README link), and a link to the GitHub release notes (unless `ignore_release_notes` is true). This requires a `versions` collection available in the template's data cascade.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/versions.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{%- for version in versions %}\n- `{{ version.tag }}`{% if version.channel %} on the `@{{ version.channel }}` channel{% endif %}—[Docs]({% if version.docs_url %}{{ version.docs_url }}{% else %}https://github.com/11ty/eleventy/blob/{{ version.tag }}/README.md{% endif %}){% if version.ignore_release_notes !== true %} and [Release Notes](https://github.com/11ty/eleventy/releases/tag/{{ version.tag }}){% endif %}\n{%- endfor -%}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dates with Local Time Zone in Templates (Liquid/Nunjucks)\nDESCRIPTION: Illustrates how directly outputting the `page.date` object in Liquid or Nunjucks templates typically results in the date being displayed according to the server's or system's local time zone. This can cause the date to appear off by one day compared to the intended UTC date.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/dates.md#2025-04-23_snippet_5\n\nLANGUAGE: liquid\nCODE:\n```\nUsing {% raw %}{{ page.date }}{% endraw %} will display a date using a local time zone like:\n\nSun Dec 31 2017 18:00:00 GMT-0600 (Central Standard Time)\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Branch in Eleventy Navigation with Liquid\nDESCRIPTION: This snippet demonstrates how to retrieve only the children of a specific navigation key using the eleventyNavigation filter in Liquid syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_18\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign navPages = collections.all | eleventyNavigation: \"Mammals\" %}\n{{ navPages | json }}\n```\n\n----------------------------------------\n\nTITLE: Adding Open Collective Contribution Link in Eleventy/Nunjucks\nDESCRIPTION: Renders a static HTML block containing a link to the Eleventy Open Collective page. It includes a default avatar image (`/img/default-avatar.png`), encouraging text, and uses the `emoji` shortcode to display gift emojis, serving as a call-to-action for potential contributors. Requires the `emoji` shortcode.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/supporters.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div><a href=\"https://opencollective.com/11ty\"><img src=\"/img/default-avatar.png\" alt=\"Default Avatar Image\" loading=\"lazy\" class=\"avatar\"><strong>and you?</strong> {% emoji \"🎁\" %}{% emoji \"🎁\" %}{% emoji \"🎁\" %}</a></div>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Child Nodes for Id Generation (HTML)\nDESCRIPTION: Explains how to use the eleventy:id-ignore attribute to exclude a child element’s text from the id generation process in heading elements. This example illustrates using a span with this attribute to keep extraneous text out of the computed id, resulting in a cleaner, more predictable id value. Requires Eleventy v3.0.0-beta.2 or higher.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/id-attribute.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>Welcome to Eleventy<span eleventy:id-ignore> ignore this</span></h1>\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Checking in an Eleventy Plugin\nDESCRIPTION: Shows how to verify that the user has a compatible version of Eleventy when using your plugin.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig, pluginOptions) {\n\ttry {\n\t\t// Emit a warning message if the application is not using Eleventy 3.0 or newer (including prereleases).\n\t\televentyConfig.versionCheck(\">=3.0\");\n\t} catch(e) {\n\t\tconsole.log( `[my-test-plugin] WARN Eleventy plugin compatibility: ${e.message}` );\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation to HTML in Liquid\nDESCRIPTION: These snippets show how to render the full navigation tree as HTML using the eleventyNavigationToHtml filter in Liquid, for both regular navigation and breadcrumbs.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_28\n\nLANGUAGE: liquid\nCODE:\n```\n{{ collections.all | eleventyNavigation | eleventyNavigationToHtml }}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{{ collections.all | eleventyNavigationBreadcrumb: \"Bats\" | eleventyNavigationToHtml }}\n```\n\n----------------------------------------\n\nTITLE: Allowing Missing File Extensions in YAML Front Matter\nDESCRIPTION: Demonstrates how to opt-out of Eleventy's error for files without extensions by setting `eleventyAllowMissingExtension: true` in the template's front matter. This is useful for specific files like `_redirects`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n---\neleventyAllowMissingExtension: true\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation Metadata in Frontmatter\nDESCRIPTION: Sets up the page's frontmatter with a news title and Eleventy navigation configuration, specifying 'Blog' as the parent for this post in the site navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-11-29-static-feedback.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: \"Static Feedback #11: All about Eleventy\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Breadcrumbs with Eleventy Navigation in Nunjucks\nDESCRIPTION: This snippet shows how to generate breadcrumb navigation by retrieving parents of a specific navigation key using the eleventyNavigationBreadcrumb filter in Nunjucks syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_22\n\nLANGUAGE: jinja2\nCODE:\n```\n{% set navPages = collections.all | eleventyNavigationBreadcrumb(\"Bats\") %}\n{{ navPages | dump | safe }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Browsersync Live Reload Snippet in Eleventy (JavaScript)\nDESCRIPTION: This code demonstrates how to opt out of injecting the Browsersync JavaScript snippet responsible for live reloading by setting the snippet parameter to false in setBrowserSyncConfig. This effectively disables Browsersync\\'s client-side reloading feature. Requires browser-sync@2.27.1 or later and Eleventy 1.x/0.x setup. Use this in .eleventy.js for scenarios requiring a custom live reload approach or no reload. Inputs are configuration parameters; output is an Eleventy run without Browsersync injection.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/server-browsersync.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function(eleventyConfig) {\\n\\televentyConfig.setBrowserSyncConfig({\\n\\t\\tsnippet: false,\\n\\t});\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Possum Data in JSON for Eleventy (JavaScript)\nDESCRIPTION: This JSON snippet defines an array of possum objects, each with a 'name' and 'age'. This data is intended to be used by Eleventy, typically stored in the '_data' directory (e.g., '_data/possums.json'), to be accessed globally within Eleventy templates as the 'possums' data variable.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pages-from-data.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n[\n\t{\n\t\tname: \"Fluffy\",\n\t\tage: 2,\n\t},\n\t{\n\t\tname: \"Snugglepants\",\n\t\tage: 5,\n\t},\n\t{\n\t\tname: \"Lord Featherbottom\",\n\t\tage: 4,\n\t},\n\t{\n\t\tname: \"Pennywise\",\n\t\tage: 9,\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Branch in Eleventy Navigation with Nunjucks\nDESCRIPTION: This snippet demonstrates how to retrieve only the children of a specific navigation key using the eleventyNavigation filter in Nunjucks syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_19\n\nLANGUAGE: jinja2\nCODE:\n```\n{% set navPages = collections.all | eleventyNavigation(\"Mammals\") %}\n{{ navPages | dump | safe }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Shortcode with HTML Transform Integration\nDESCRIPTION: Modifies the Eleventy 'image' shortcode configuration to prevent double processing when used alongside the Eleventy Image HTML transform. It adds the `eleventy:ignore` attribute to the generated `<img>` tag within the `htmlOptions`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-shortcodes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from \"@11ty/eleventy-img\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addShortcode(\"image\", async function (src, alt) {\n\t\tlet html = await Image(src, {\n\t\t\treturnType: \"html\",\n\t\t\thtmlOptions: {\n\t\t\t\timgAttributes: {\n\t\t\t\t\talt, // required\n\t\t\t\t\t\"eleventy:ignore\": \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn html;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Computed Global Data in Eleventy Config\nDESCRIPTION: Demonstrates using addGlobalData with computed data to return dynamic values.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-global-custom.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (eleventyConfig) {\n\televentyConfig.addGlobalData(\"eleventyComputed.myString\", () => {\n\t\treturn (data) => \"This is a string!\";\n\t});\n\n\t// myString's value will be \"This is a string!\"\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced JavaScript Front Matter Examples\nDESCRIPTION: Provides advanced examples of using JavaScript in Eleventy front matter (since 3.0.0-alpha.18). It showcases asynchronous operations (`await`), destructuring assignments, dynamic imports (`await import`), and accessing Node.js globals like `console.log`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-frontmatter.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n---js\n// async-friendly\nconst myAsyncString = await Promise.resolve(\"HELLO FROM THE OTHER SIDE\");\n\n// export via destructuring assignment\nconst { myKey } = { myKey: \"myValue\" };\nconst [ first, second ] = [ \"first\", \"second\" ];\n\n// export via dynamic import\nconst { noop } = await import(\"@zachleat/noop\");\n\n// access Node.js globals like console.log\nconsole.log({ noop });\n---\n<!-- The template content goes here -->\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample CSS File for Inlining - CSS\nDESCRIPTION: This CSS snippet provides a simple stylesheet that sets the font family for the body element to 'fantasy'. It is intended to be saved as a file (e.g., sample.css) in the _includes directory for later inlining and minification using the Eleventy workflow. No dependencies required beyond standard CSS parsing.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/inline-css.md#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n\tfont-family: fantasy;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding an OpenGraph Image from 11ty.dev using HTML\nDESCRIPTION: HTML code snippet demonstrating how to display the OpenGraph image retrieved for 'https://www.11ty.dev/' using the Eleventy OpenGraph Image service. It requests the 'small' size version of the image and includes standard attributes like 'alt', 'loading', 'decoding', 'width', and 'height' for accessibility, performance, and layout.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/opengraph.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img\n\tsrc=\"https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2F/small/\"\n\talt=\"OpenGraph image for 11ty.dev\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\twidth=\"375\"\n\theight=\"197\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with MDX Format (Shell)\nDESCRIPTION: This shell command demonstrates how to invoke Eleventy with explicit support for MDX files by specifying the format via the \\'--formats\\' argument. It assumes that Eleventy and @mdx-js/mdx are installed in the project dependencies. The command processes all files with the .mdx extension. Required: the Eleventy CLI must be available (either installed globally or via npx).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/mdx.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @11ty/eleventy --formats=mdx\n```\n\n----------------------------------------\n\nTITLE: Chaining Nunjucks and Markdown Processing via Front Matter in Markdown/YAML\nDESCRIPTION: This example shows how to chain template engines using `templateEngineOverride`. The value `njk,md` specifies that the file should first be processed by the Nunjucks (`njk`) engine, and the result of that processing should then be processed by the Markdown (`md`) engine. This chaining is a special case only allowed with Markdown as the second engine.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/template-overrides.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntemplateEngineOverride: njk,md\n---\n```\n\n----------------------------------------\n\nTITLE: Overriding Navigation URL for External Links in YAML\nDESCRIPTION: This YAML front matter demonstrates how to create a navigation entry that links to an external URL using the `url` property. `permalink: false` is used to prevent Eleventy from generating an actual page for this entry in the site output.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Zach’s site\n  url: https://www.zachleat.com/\npermalink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Callout Box with Liquid Template in Eleventy\nDESCRIPTION: Uses Eleventy's callout shortcode to create an info box that alerts users about the new survey, with Markdown content inside the callout.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-11-community-survey.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% callout \"info\", \"md\", \"New Survey Alert\" %}This is last year's survey. You can help Eleventy out again by completing [Survey Awesome (2024)](/blog/survey-awesome/)!{% endcallout %}\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Eleventy Content (Markdown Front Matter)\nDESCRIPTION: Example Markdown front matter for a content file (e.g., a blog post). It defines the post's title and assigns it to the 'tech' tag. Eleventy uses the `tags` array to automatically build collections.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/tag-pages.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\ntitle: My First Post\ntags:\n  - tech\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Navigation Rendering in Liquid\nDESCRIPTION: Shows how to configure markdown rendering options for navigation using the eleventyNavigationToMarkdown filter in Liquid syntax. Allows controlling excerpt display in navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_33\n\nLANGUAGE: liquid\nCODE:\n```\n---\nnavToMdOptions:\n  # Show excerpts (if they exist in data, read more above)\n  showExcerpt: false\n---\n{{ collections.all | eleventyNavigation | eleventyNavigationToMarkdown: navToMdOptions | json }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dates with UTC Time Zone in Nunjucks Templates\nDESCRIPTION: Demonstrates using the `toUTCString()` JavaScript method on the `page.date` object within a Nunjucks template (`{% raw %}{{ page.date.toUTCString() }}{% endraw %}`). This correctly formats the date string using the UTC time zone, preventing 'off by one day' errors caused by local time zone conversions.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/dates.md#2025-04-23_snippet_6\n\nLANGUAGE: nunjucks\nCODE:\n```\nBut {% raw %}{{ page.date.toUTCString() }}{% endraw %} will correctly\ndisplay a date with a UTC time zone like:\n\nMon, 01 Jan 2018 00:00:00 GMT\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML block defines front matter variables for an Eleventy page. `newstitle` sets a specific title for news feeds or similar contexts, while `eleventyNavigation` configures the page's placement in the site navigation structure, assigning 'Blog' as its parent item.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-04-six-million.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: Six Million npm Downloads!\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Logging to Console with log Filter in CommonJS JavaScript Template\nDESCRIPTION: Demonstrates the use of the `log` filter in a CommonJS-style JavaScript template file for Eleventy. The functionality matches the ES module example, logging 'My Title' and returning the result. Requires 11ty with JavaScript template support.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/log.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (data) {\n\t// Caveat: you have access to `console.log` here, so probably use that.\n\treturn this.log(\"My Title\");\n};\n```\n\n----------------------------------------\n\nTITLE: MDX Example: JSX Function in Content (JSX)\nDESCRIPTION: This MDX example shows how to define and use a React function component \\'Thing\\' directly inside an MDX file and render its output within Markdown. It exports a component called Thing that returns a fragment containing 'World!', then uses it inside an H1 Markdown heading. The content, when processed, produces an <h1>Hello, World!</h1> HTML element. Requires the MDX runtime and a compatible React render pipeline.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/mdx.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Thing() {\n  return <>World!</>\n}\n\n# Hello, <Thing />\n```\n\n----------------------------------------\n\nTITLE: Defining Sparkline API URL Structure in Plain Text\nDESCRIPTION: Defines the URL structure for the Eleventy Sparkline API service. It shows required parameters like dimensions (width x height) and comma-separated values, along with an optional color parameter (URI encoded SVG friendly color).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/sparklines.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://v1.sparkline.11ty.dev/:dimensions/:values/\nhttps://v1.sparkline.11ty.dev/:dimensions/:values/:color/\n```\n\n----------------------------------------\n\nTITLE: Combining Advanced Options in Eleventy Screenshot API URL\nDESCRIPTION: Provides an example of combining multiple advanced options (`_wait` and `_timeout`) within a single Eleventy Screenshot API URL request by appending them together to the URI-encoded URL path segment (e.g., `_wait:0_timeout:2`). The order of options within the combined string affects URL caching uniqueness but not the functionality.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/screenshots.md#2025-04-23_snippet_4\n\nLANGUAGE: url\nCODE:\n```\n/:url/_wait:0_timeout:2/\n```\n\n----------------------------------------\n\nTITLE: Overriding Data Merge Behavior in Markdown Front Matter\nDESCRIPTION: This snippet shows how to use the override: prefix in Markdown front matter to opt-out of the data merge behavior for specific values.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-deep-merge.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n---\noverride:tags: []\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Another Nested Navigation Item in YAML\nDESCRIPTION: Similar to the previous example, this YAML front matter defines another navigation entry ('Bats') nested under the 'Mammals' parent item. This demonstrates adding multiple children to the same parent.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Bats\n  parent: Mammals\n---\n```\n\n----------------------------------------\n\nTITLE: Comparing renderTemplate and renderContent Filter in Nunjucks (via YAML)\nDESCRIPTION: Uses YAML front matter to define a variable `myContent` containing a Nunjucks template string. It then shows this variable used within a Nunjucks template, comparing the output of `renderTemplate` (which outputs the raw string) and the `renderContent` filter (which processes the Nunjucks syntax).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/render.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmyContent: \"{{ 'Second' }}\"\n---\n{% renderTemplate %}{{ myContent }}{% endrenderTemplate %} from renderTemplate\n{{ myContent | renderContent(\"njk\") }} from renderContent\n```\n\nLANGUAGE: text\nCODE:\n```\n{{ 'Second' }} from renderTemplate\nSecond from renderContent\n```\n\n----------------------------------------\n\nTITLE: Passing Data to renderFile Shortcode in Nunjucks/Liquid/JavaScript\nDESCRIPTION: Explains how to pass an additional data object (e.g., `{ myValue: \"myValue\" }`) to the `renderFile` shortcode in Nunjucks, Liquid, and JavaScript templates. This data is accessible within the rendered file content, supplementing the default `eleventy` and `page` variables.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/render.md#2025-04-23_snippet_5\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% renderFile \"_includes/liquid.liquid\", { myValue: \"myValue\" } %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% renderFile \"_includes/liquid.liquid\", myValue: \"myValue\" %}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* 11ty.js */\nmodule.exports = async function(data) {\n  return await this.renderFile(\"_includes/liquid.liquid\", {\n    myValue: \"myValue\"\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Eleventy Blog Post Frontmatter in YAML\nDESCRIPTION: YAML frontmatter that defines the title and navigation structure for an Eleventy blog post about the community survey.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-11-community-survey.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"The Eleventy Community Survey (2023)\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Responsive Image Inclusion with 11ty Image Shortcode\nDESCRIPTION: Image shortcode that displays a celebratory photo with responsive image sizing, alternative text, width options, and responsive sizing hint.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-02-23-eight-million.md#2025-04-23_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% image \"./src/blog/eight-million.jpg\", \"Zach pointing to the new balloons in his office that say 8 Million\", [350, 700], \"\", \"100vw\" %}\n```\n\n----------------------------------------\n\nTITLE: Conditional CSS Minification Template\nDESCRIPTION: Template example showing conditional CSS minification based on environment variables.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-js.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<style>\n{% if myProject.environment == \"production\" %}\n\t{{ css | cssmin | safe }}\n{% else %}\n\t{{ css | safe }}\n{% endif %}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Filtering Tags in Eleventy Pagination (Nunjucks/Markdown)\nDESCRIPTION: This template demonstrates how to exclude specific tags when generating tag pages using Eleventy pagination. The `filter` property within the `pagination` configuration lists tags (e.g., 'tech') that should be skipped, preventing Eleventy from generating pages for them.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/tag-pages.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\npagination:\n  data: collections\n  size: 1\n  alias: tag\n  filter:\n    - tech\npermalink: /tags/{{ tag }}/\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Importing WordPress Content via URL using @11ty/import (Shell)\nDESCRIPTION: This shell command executes the `@11ty/import` tool using `npx` to import content directly from a live WordPress site specified by its URL. The tool fetches posts and associated media via the WordPress REST API, converts them into static files suitable for an Eleventy project, downloads assets, updates links, and caches downloads. The example output shows a summary report of the import process.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/migrate/wordpress.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n> npx @11ty/import wordpress https://example.com/\nWrote 141 documents and 810 assets (933 cleaned, unused) from WordPress (7 errors) in 2.14 seconds (v1.0.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Edit on GitHub Link in Eleventy Layout (HTML/Liquid)\nDESCRIPTION: This snippet demonstrates how to add a dynamic 'Edit this page on GitHub' link within an Eleventy layout file's footer. It constructs the link's `href` attribute using a base GitHub repository URL combined with the Eleventy-provided `page.inputPath` variable, which dynamically points to the source file for the current page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/edit-on-github-links.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n    …\n    <footer>\n      © 2019 Eleventy\n      <a href=\"https://github.com/11ty/11ty-website/blob/main/{{ page.inputPath }}\">Edit this page on GitHub</a>\n    </footer>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Blog Post\nDESCRIPTION: YAML configuration block defining the blog post title and navigation structure using eleventy-navigation plugin.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-01-24-bbv8.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"The `v8` release of Eleventy's Base Blog starter project using Eleventy 2.0\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Previous and Next Pagination Links in Eleventy with Nunjucks\nDESCRIPTION: This Nunjucks snippet shows how to add 'Previous' and 'Next' navigation links within paginated pages by checking for the existence of 'pagination.href.previous' and 'pagination.href.next'. Only renders links when not on the first/last page. Designed for use within pagination templates to facilitate moving between adjacent pages.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_7\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if pagination.href.previous %}<a href=\"{{ pagination.href.previous }}\">Previous</a>{% endif %}\n{% if pagination.href.next %}<a href=\"{{ pagination.href.next }}\">Next</a>{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Embedding Generator Logos in HTML\nDESCRIPTION: Provides HTML examples demonstrating how to use the 11ty Generator Image service to display logos of site generators for different websites (11ty.dev, gatsbyjs.com, astro.build). It uses standard `<img>` tags where the `src` attribute points to the service's image endpoint, including the URI-encoded URL of the target site. Attributes like `alt`, `loading`, `decoding`, `width`, and `height` are included for accessibility and performance.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/generator.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img\n\tsrc=\"https://v1.generator.11ty.dev/image/https%3A%2F%2Fwww.11ty.dev%2F/\"\n\talt=\"Site Generator logo for 11ty.dev/\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\twidth=\"40\"\n\theight=\"40\"\n/>\n<img\n\tsrc=\"https://v1.generator.11ty.dev/image/https%3A%2F%2Fwww.gatsbyjs.com%2F/\"\n\talt=\"Site Generator logo for gatsbyjs.com/\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\twidth=\"40\"\n\theight=\"40\"\n/>\n<img\n\tsrc=\"https://v1.generator.11ty.dev/image/https%3A%2F%2Fastro.build%2F/\"\n\talt=\"Site Generator logo for astro.build/\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\twidth=\"40\"\n\theight=\"40\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the override: Prefix in JSON Data File\nDESCRIPTION: This snippet demonstrates how to use the override: prefix in a JSON data file to set default tags for a collection of posts.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-deep-merge.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"tags\": [\"posts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Table of Contents with Nunjucks\nDESCRIPTION: Inserts a table of contents component using the Eleventy tableofcontents shortcode.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/community.md#2025-04-23_snippet_4\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% tableofcontents %}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Updated npm Download Count in Nunjucks\nDESCRIPTION: This Nunjucks snippet checks if `npm` and `npm.downloads` variables exist. If they do, it displays a message showing the current download count formatted by the `humanReadableNum` filter and the current date formatted by the `newsDate` filter using the `config.now` variable. This is used to dynamically update the download count mentioned in the blog post.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-10-23-seven-million.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{%- if npm and npm.downloads %} _That download count is now {{ npm.downloads | humanReadableNum }} (as of {{ config.now | newsDate }})._ {%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Navigation Item in YAML\nDESCRIPTION: This YAML front matter defines a navigation entry ('Humans') that is nested under another entry ('Mammals'). The `parent` property specifies the `key` of the parent item. This creates a hierarchical relationship in the navigation structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Humans\n  parent: Mammals\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Alternate Navigation Link Text in YAML\nDESCRIPTION: This YAML front matter shows how to use the `title` property within `eleventyNavigation` to provide different display text ('All of the Mammals') for a navigation link than its unique identifier (`key`, 'Mammals').\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Mammals\n  title: All of the Mammals\n---\n```\n\n----------------------------------------\n\nTITLE: Identifying the Terminal Application Name on macOS\nDESCRIPTION: Specifies the standard name of the Terminal application included with macOS. This application is used for running command-line tools like Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`Terminal`\n```\n\n----------------------------------------\n\nTITLE: Paging an Array with Eleventy Pagination - JavaScript Template (ES Module)\nDESCRIPTION: Provides a JavaScript-based Eleventy template (.11ty.js) for paginating a dataset. Uses front matter data to define the input array and size, generating pages accordingly. Works with Eleventy 11ty.js templates and requires a 'testdata' array in the data environment.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{% include \\\"snippets/pagination/paged-array.js\\\" %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default File Reading - Eleventy JavaScript\nDESCRIPTION: This configuration snippet sets the 'read' option to false within a custom template language extension for Eleventy. When 'read' is false, Eleventy does not load file contents from the file system, which is useful for integrations with external bundlers or systems that handle their own file IO. Use alongside other custom compile or cache strategies for advanced integration scenarios.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t// some configuration truncated …\n  read: false,\n```\n\n----------------------------------------\n\nTITLE: Embedding IndieWeb Avatars in HTML\nDESCRIPTION: Demonstrates how to use the IndieWeb Avatar API within HTML `<img>` tags to display avatars for different websites. The `src` attribute points to the API endpoint with the URI-encoded target URL. Attributes like `alt`, `loading`, `decoding`, `width`, and `height` are used for accessibility and performance.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/indieweb-avatar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img\n\tsrc=\"https://v1.indieweb-avatar.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2F/\"\n\talt=\"IndieWeb Avatar for 11ty.dev/\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\twidth=\"50\"\n\theight=\"50\"\n/>\n<img\n\tsrc=\"https://v1.indieweb-avatar.11ty.dev/https%3A%2F%2Fwww.a11yproject.com%2F/\"\n\talt=\"IndieWeb Avatar for a11yproject.com/\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\twidth=\"50\"\n\theight=\"50\"\n/>\n<img\n\tsrc=\"https://v1.indieweb-avatar.11ty.dev/https%3A%2F%2Fwww.netlify.com%2F/\"\n\talt=\"IndieWeb Avatar for netlify.com/\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\twidth=\"50\"\n\theight=\"50\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic URL Formats for Eleventy Screenshot API\nDESCRIPTION: Defines the basic URL structure for the Eleventy Screenshot API (v1.screenshot.11ty.dev). Requires a URI-encoded ':url' and accepts optional parameters for ':size' (small, medium, large, opengraph), ':aspectratio' (1:1, 9:16), and ':zoom' (bigger, smaller) to control the generated screenshot. Note that the 'large' size does not support a '9:16' aspect ratio, and 'opengraph' ignores aspect ratio.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/screenshots.md#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://v1.screenshot.11ty.dev/:url/\nhttps://v1.screenshot.11ty.dev/:url/:size/\nhttps://v1.screenshot.11ty.dev/:url/:size/:aspectratio/\nhttps://v1.screenshot.11ty.dev/:url/:size/:aspectratio/:zoom/\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Liquid in Eleventy\nDESCRIPTION: Uses a custom Liquid tag to embed a YouTube video in an Eleventy page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-10-08-state-of-eleventy-2021.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% youtubeEmbed \"kcRtANKWCLQ\" %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Migration Guides List - 11ty Nunjucks - Markdown\nDESCRIPTION: This snippet uses a for-loop in Nunjucks to iterate through the 'collections.migrations' object, listing each migration guide as a link inside an unordered list. If an 'iconUrl' is present in the post data, it calls the 'indieavatar' shortcode to display an avatar before the title. The surrounding Markdown and HTML enable custom formatting in an Eleventy-based site. No explicit dependencies beyond Eleventy and the Nunjucks templating language; input collections should be previously defined in the Eleventy configuration. Outputs an HTML list of links to migration guides, each optionally displaying an icon avatar.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/migrate.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{%- for post in collections.migrations %}\n\t<li><a href=\"{{ post.url }}\">{% if post.data.iconUrl %}{% indieavatar post.data.iconUrl %}{% endif %}{{ post.data.title }}</a></li>\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using a Multi-Argument Filter in Nunjucks (HTML)\nDESCRIPTION: This HTML snippet shows how to use a Nunjucks filter (`concatThreeThings`) that accepts multiple arguments. The first argument is the value being piped (`\"first\"`), and subsequent arguments (`\"second\"`, `\"third\"`) are passed in parentheses.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ \"first\" | concatThreeThings(\"second\", \"third\") }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Including a File with Quoted Path in Liquid\nDESCRIPTION: Illustrates using a quoted path with the Liquid `include` tag. This looks for `_includes/user.liquid`. Starting in Eleventy 1.0, using non-quoted include paths requires setting `dynamicPartials: false` in Liquid options. Front matter is not processed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_5\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% include 'user' %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Generating Tag Pages with Eleventy Pagination (Nunjucks/Markdown)\nDESCRIPTION: This Eleventy template uses Nunjucks and pagination configured in Markdown front matter. It iterates over the global `collections` object, creating a separate page for each tag (`alias: tag`). Each generated page lists all posts belonging to that specific tag's collection (`collections[tag]`).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/tag-pages.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\npagination:\n  data: collections\n  size: 1\n  alias: tag\npermalink: /tags/{{ tag }}/\n---\n\n<h1>Tagged “{{ tag }}”</h1>\n\n<ol>\n{% set taglist = collections[ tag ] %}\n{% for post in taglist | reverse %}\n  <li><a href=\"{{ post.url }}\">{{ post.data.title }}</a></li>\n{% endfor %}\n</ol>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing ESM Plugins with Default Export in CommonJS\nDESCRIPTION: Shows how to import an ESM plugin that uses default export when working with a CommonJS configuration file, using the special 'default' property from dynamic import.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/cjs-esm.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (eleventyConfig) {\n\tconst { default: myPlugin } = await import(\"my-eleventy-plugin\");\n\t// …\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Only Markdown Processing via Front Matter in Markdown/YAML\nDESCRIPTION: This front matter configuration uses `templateEngineOverride` set to `md`. It instructs Eleventy to only apply Markdown processing to the file content, skipping any pre-processing templating engine that might be globally configured via `markdownTemplateEngine`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/template-overrides.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntemplateEngineOverride: md\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation and Permalink in YAML Front Matter\nDESCRIPTION: This YAML front matter block configures page metadata for Eleventy. The `eleventyNavigation` object sets the page's parent to \"Eleventy Projects\", assigns the key \"Template Features\", and sets its display order to 4 within its navigation level. Setting `permalink` to `false` prevents Eleventy from creating a separate HTML file for this content, often used for partials or configuration files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/sidebar-template-features.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Eleventy Projects\n  key: Template Features\n  order: 4\npermalink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Paginated Data Structure Example - YAML Array\nDESCRIPTION: This YAML block defines a simple array of items used as input for Eleventy's pagination. The data is split into page groups based on the configured size. Serves as a data source for paginating templates and for demonstrating chunked pagination in Eleventy. Outputs an array of items segmented by the pagination size.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntestdata:\n  - item1\n  - item2\n  - item3\n  - item4\n  - item5\n  - item6\n```\n\n----------------------------------------\n\nTITLE: Embedding Another Image using Eleventy Image Shortcode in Nunjucks\nDESCRIPTION: Similar to the previous snippet, this Nunjucks code uses the Eleventy `image` shortcode to embed a different image (`sevenmil.jpg`). It provides the image path, alternative text, responsive widths, an empty class attribute, and the `sizes` attribute to the shortcode.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-10-23-seven-million.md#2025-04-23_snippet_2\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% image \"./src/blog/sevenmil.jpg\", \"Zach pointing to the new balloons in his office that say 7 Million\", [350, 700], \"\", \"100vw\" %}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Terminal Application Bundle Name on macOS\nDESCRIPTION: Mentions the alternative name `Terminal.app` which might be displayed for the macOS Terminal application if file extensions are configured to be visible in the operating system.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`Terminal.app`\n```\n\n----------------------------------------\n\nTITLE: Rendering Starter Projects with Filtering and Includes - Nunjucks/HTML\nDESCRIPTION: This snippet loops through the 'starters' collection, filters for official projects, retrieves associated Speedlify data, and includes a 'site-card' partial. Dependencies include the existence of appropriate context data (e.g., 'starters', 'speedlifyStarters') and the 'site-card.njk' template. Key parameters involve filtering for 'official' starters and properly mapping demo or URL data for display; outputs are grid cards rendered per matching starter.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/starter.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n<div class=\"sites-vert sites-vert--lg\">\n  <div class=\"lo-grid\" style=\"--fl-gap-v: 5em;\">\n{%- for site in starters | sortObjectByOrder %}\n{%- if site.official %}\n{%- set siteData = speedlifyStarters.data[site.demo] or speedlifyStarters.data[site.url] %}\n  {% include \"site-card.njk\" %}\n{%- endif %}{%- endfor %}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Config Data Access in Eleventy\nDESCRIPTION: Example showing how to access configuration data and environment information in data files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-js.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (configData) {\n\tif (configData.eleventy.env.source === \"cli\") {\n\t\treturn \"I am on the command line\";\n\t}\n\n\treturn \"I am running programmatically via a script\";\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Preferred Terminal Application Name on Windows\nDESCRIPTION: Refers to the `Terminal` application on Windows, often synonymous with Windows PowerShell. This is noted as the preferred terminal environment for running tools like Eleventy compared to the older Command Prompt.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n`Terminal`\n```\n\n----------------------------------------\n\nTITLE: Inserting Eleventy Screenshot HTML in Markdown\nDESCRIPTION: This code snippet demonstrates how to insert a screenshot HTML using an Eleventy shortcode. It creates a link with a maximum width and uses the getScreenshotHtml function to generate the screenshot.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-03-20-newstack.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://thenewstack.io/the-need-for-speed-why-eleventy-leaves-bundlers-behind/\" style=\"display: block; max-width: 16em\">{% getScreenshotHtml \"The Need for Speed: Why Eleventy Leaves Bundlers Behind\", \"https://thenewstack.io/the-need-for-speed-why-eleventy-leaves-bundlers-behind/\" %}</a>\n```\n\n----------------------------------------\n\nTITLE: Ordering Navigation Items (Humans) in YAML\nDESCRIPTION: This YAML front matter assigns an `order` value (1) to the 'Humans' navigation entry. This controls its sorting position relative to other items under the same parent ('Mammals'). Lower numbers appear first.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Humans\n  parent: Mammals\n  order: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter in Eleventy Markdown Template\nDESCRIPTION: Example of front matter in a Markdown template file, defining title, tags, and layout.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-cascade.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: This is a Good Blog Post\ntags:\n  - CSS\n  - HTML\nlayout: my-layout.njk\n---\n```\n\n----------------------------------------\n\nTITLE: Looping and Rendering Testimonials - Eleventy Nunjucks - Nunjucks\nDESCRIPTION: This code snippet uses the Nunjucks templating language as implemented in Eleventy to iterate through a shuffled array of testimonials. For each testimonial, it creates a uniquely identified <div> using a slugified name and renders a testimonial component. Dependencies include the Eleventy data cascade (specifically, the 'testimonials' collection filterable via shuffle) and the 'testimonial' shortcode. The loop expects a pre-defined 'testimonials' array in site data, and outputs corresponding HTML for each. Input must conform to the required keys used within each testimonial object.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/testimonials.md#2025-04-23_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% for testimonial in testimonials | shuffle %}\n\n<div id=\"{{ testimonial.name | slugify }}\">\n\t{%- testimonial testimonial -%}\n</div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Disabling File Output with Permalink in YAML\nDESCRIPTION: Illustrates how to prevent a template file from being written to the output directory by setting the `permalink` value to `false` in the YAML front matter. The template is still processed and available in collections.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\npermalink: false\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Metadata JSON for Eleventy\nDESCRIPTION: Template for creating a JSON file to submit a new Eleventy plugin to the community plugins list. The file should include the npm package name, author's Twitter handle, and plugin description.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/_data/plugins/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"npm\": \"the npm package name of your plugin\",\n\t\"author\": \"Your Twitter username\",\n\t\"description\": \"A description of the plugin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation as HTML using WebC\nDESCRIPTION: This WebC code snippet renders the navigation menu as HTML inside a `<nav>` tag. It uses the `@html` directive to directly insert the HTML generated by calling the `eleventyNavigationToHtml` function, which itself takes the output of `eleventyNavigation($data.collections.all)`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<nav\n\t@html=\"eleventyNavigationToHtml(eleventyNavigation($data.collections.all))\"\n></nav>\n```\n\n----------------------------------------\n\nTITLE: Allowing Missing Pages in Breadcrumbs with Liquid\nDESCRIPTION: This snippet shows how to handle missing pages in breadcrumb navigation by setting the allowMissing option, preventing errors when pages don't exist in Liquid syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_26\n\nLANGUAGE: liquid\nCODE:\n```\n---\nnavOptions:\n  allowMissing: true\n---\n{% assign navPages = collections.all | eleventyNavigationBreadcrumb: \"Does not exist\", navOptions %}\n{{ navPages | json }}\n```\n\n----------------------------------------\n\nTITLE: Including a File with Quoted Relative Path in Liquid\nDESCRIPTION: Demonstrates including a Liquid file using a quoted relative path. This example looks for `./dir/user.liquid` relative to the current template's directory. As with other includes, front matter is not processed. Requires `dynamicPartials: false` for non-quoted paths in Eleventy >= 1.0. A warning indicates potential precedence issues if `_includes/dir/user.liquid` also exists.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_6\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% include './dir/user' %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Embedding an OpenGraph Image from netlify.com using HTML\nDESCRIPTION: HTML code snippet demonstrating the use of the Eleventy OpenGraph Image service to display the OpenGraph image for 'https://www.netlify.com/'. It requests the 'small' size and includes 'alt', 'loading', 'decoding', 'width', and 'height' attributes for the image element.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/opengraph.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img\n\tsrc=\"https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.netlify.com%2F/small/\"\n\talt=\"OpenGraph image for netlify.com\"\n\tloading=\"lazy\"\n\tdecoding=\"async\"\n\twidth=\"375\"\n\theight=\"197\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Including transformWithHtmlBase Filter Example in Nunjucks\nDESCRIPTION: This Nunjucks tag includes a snippet showing how to use the `transformWithHtmlBase` filter in async-friendly template languages to apply HTML base URL transformations to an entire block of HTML content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/html-base.md#2025-04-23_snippet_4\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"snippets/plugins/base-transform.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining User List in JSON Global Data File (JavaScript)\nDESCRIPTION: Example of a JSON data file located at '_data/userList.json' that defines an array of user names. This data will be available to templates under the 'userList' key.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-global.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\"user1\", \"user2\"]\n```\n\n----------------------------------------\n\nTITLE: Home Page Content Negotiation, Distinct URLs Elsewhere - Netlify TOML - TOML\nDESCRIPTION: This TOML code configures the netlify.toml file for a hybrid approach: negotiating language only on the home page and enforcing explicit locale codes elsewhere. Two top-level redirects serve the Spanish or English home page based on the browser's language, while all other routes redirect to their locale-specific subfolders. Assumes 'en' is the default language and Netlify deployment. No extra dependencies.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/i18n.md#2025-04-23_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n# Content negotiation for home page\\n[[redirects]]\\n  from = \"/\"\\n  to = \"/es/\"\\n  status = 200\\n  conditions = {Language = [\"es\"]}\\n\\n# Content negotiation for home page\\n[[redirects]]\\n  from = \"/\"\\n  to = \"/en/\"\\n  status = 200\\n\\n# Redirect for end-user’s browser preference override\\n[[redirects]]\\n  from = \"/*\"\\n  to = \"/es/:splat\"\\n  status = 302\\n  conditions = {Language = [\"es\"]}\\n\\n# Default\\n[[redirects]]\\n  from = \"/*\"\\n  to = \"/en/:splat\"\\n  status = 302\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Global Data in Templates (JavaScript)\nDESCRIPTION: Shows how data from a file located in a subfolder of the global data directory is structured and accessible in templates. The folder name becomes part of the object structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-global.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tusers: {\n\t\tuserList: [\"user1\", \"user2\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Nova Code Editor with Bundled Terminal (macOS)\nDESCRIPTION: Mentions the `Nova` code editor, specific to macOS, which includes an integrated terminal feature, allowing users to run command-line tools directly within the editor.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n`Nova`\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation as HTML using Nunjucks Filters\nDESCRIPTION: This Nunjucks template code snippet renders the navigation menu as HTML. It uses the `eleventyNavigation` filter followed by the `eleventyNavigationToHtml` filter. The `safe` filter is applied to prevent auto-escaping of the generated HTML.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_10\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ collections.all | eleventyNavigation | eleventyNavigationToHtml | safe }}\n```\n\n----------------------------------------\n\nTITLE: Including Star on GitHub Template with Nunjucks\nDESCRIPTION: Includes a template for GitHub star button using Nunjucks include statement.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/community.md#2025-04-23_snippet_5\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"star-on-github.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Frontmatter in YAML\nDESCRIPTION: YAML frontmatter configuration for a blog post announcing the 11ty Conference, including the news title and navigation parent settings.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-02-16-register-for-11ty-conf.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"Register now for the 11ty Conference!\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Adding First and Last Pagination Links in Eleventy with CommonJS JavaScript Template\nDESCRIPTION: This CommonJS JavaScript Eleventy template checks whether the current page is first or last, adding links to 'First' and 'Last' if needed. The snippet outputs navigation anchor tags selectively based on page URL and pagination.href properties. Use in Eleventy JS/CJS templates for full navigation controls.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function({ pagination, page }) {\n  let output = '';\n  if (page.url !== pagination.href.first) {\n    output += `<a href=\\\"${pagination.href.first}\\\">First</a>`;\n  }\n  if (page.url !== pagination.href.last) {\n    output += `<a href=\\\"${pagination.href.last}\\\">Last</a>`;\n  }\n  return output;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Callback Function with Optional Return Object in Eleventy Configuration\nDESCRIPTION: An example of using an asynchronous callback function in an Eleventy configuration file that returns a configuration object. This approach is not preferred due to order-of-operations issues but is supported.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config-shapes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function(eleventyConfig) {\n\treturn {\n    dir: {\n      input: \"views\",\n      output: \"dist\"\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Function as a Nunjucks Global (JavaScript)\nDESCRIPTION: This snippet registers a function returning 42 as a global variable 'fortytwo' in Nunjucks via Eleventy, providing computed value access in templates through {{ fortytwo() }}. Requires Eleventy with Nunjucks template support. The global function takes no arguments and consistently returns 42. As with other Nunjucks globals, asynchronous operations are not supported within the global function.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addNunjucksGlobal(\"fortytwo\", function () {\n\t\treturn 42;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Example Front Matter in Markdown Template\nDESCRIPTION: This snippet shows an example of front matter in a Markdown template file, demonstrating how data is structured before applying the Deep Data Merge.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-deep-merge.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: This is a Good Blog Post\ntags:\n  - CSS\n  - HTML\nlayout: my-layout.njk\neleventyNavigation:\n  key: my-key\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring IFTTT Webhook Body for Netlify Build Trigger (JSON)\nDESCRIPTION: This JSON snippet represents the empty body content required for the POST request when configuring an IFTTT Webhook action to trigger a Netlify build hook. It should be entered into the 'Body' field within the IFTTT 'Make a web request' service configuration, alongside setting the method to POST and Content Type to 'application/x-www-form-urlencoded'.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/netlify-ifttt.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Dependency Declaration Example\nDESCRIPTION: Shows how to properly declare dependencies between computed properties using explicit data access.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-computed.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\televentyComputed: {\n\t\tmyValue: () => \"Hi\",\n\t\tmyOtherValue: () => \"Bye\",\n\t\tusesAllTheThings: (data) => {\n\t\t\t// We detect this as a declared dependency\n\t\t\tdata.myValue;\n\t\t\t// You can use as many as you want.\n\t\t\tdata.myOtherValue;\n\t\t\t// You could use any valid JS syntax to access them.\n\t\t\t[data.myValue, data.myOtherValue];\n\n\t\t\treturn `How are you?`;\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation and CMS List in YAML\nDESCRIPTION: YAML configuration for Eleventy navigation and a list of CMS providers with their details, including name, URL, screenshot size, and tags.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/cms.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Services\n  key: Using a CMS\n  order: 2\ncmses:\n  - name: CloudCannon\n    url: https://cloudcannon.com/eleventy-cms/?utm_campaign=11ty-partner&utm_source=official-sponsor\n    tags: [Git-based]\n  - name: WordPress REST API\n    url: https://developer.wordpress.org/rest-api/\n    screenshotSize: medium\n    tags: [API]\n  - name: Strapi\n    url: https://strapi.io/\n    screenshotSize: medium\n    tags: [API]\n  # ... (additional CMS entries)\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation as Markdown using WebC\nDESCRIPTION: This WebC code snippet renders the navigation menu as Markdown inside a `<nav>` tag using the `@html` directive. It calls `eleventyNavigationToMarkdown` with the result of `eleventyNavigation($data.collections.all)`. This output format is less common for WebC.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<nav\n\t@html=\"eleventyNavigationToMarkdown(eleventyNavigation($data.collections.all))\"\n></nav>\n```\n\n----------------------------------------\n\nTITLE: Markdown Indented Code Block Output Example - HTML\nDESCRIPTION: This snippet displays the HTML output generated by an indented code block in Markdown. The input is the previously provided indented block, and the output is a <pre><code> block with preserved spacing.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<pre><code>a simple\n  indented code block\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with Custom Template Formats (Shell)\nDESCRIPTION: This shell command instructs Eleventy to process files with `.11ty.jsx` and `.11ty.tsx` extensions by specifying the formats flag. It is necessary after configuration so that Eleventy recognizes and builds the desired template files. No code dependencies are required, but this should be executed in a project with Eleventy and the necessary loaders/configuration set up.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/jsx.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx @11ty/eleventy --formats=11ty.jsx,11ty.tsx\n```\n\n----------------------------------------\n\nTITLE: Embedding OpenGraph Image Card in Markdown\nDESCRIPTION: Code for embedding an OpenGraph image card in Markdown that displays a preview of the 11ty Conference 2024 Merch Bundle page. It uses the 11ty OpenGraph service to generate a preview image.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-03-21-merch.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://merch.11ty.dev/products/11ty-merch-bundle-2024-limited-edition\" class=\"elv-externalexempt opengraph-card\">\n  <img src=\"https://v1.opengraph.11ty.dev/{{ \"https://merch.11ty.dev/products/11ty-merch-bundle-2024-limited-edition\" | urlencode }}/medium/\" alt=\"11ty Conference 2024 Merch Bundle (Limited Edition)\" loading=\"lazy\" decoding=\"async\" width=\"650\" height=\"341\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Using the Edge Shortcode in Eleventy Templates (Liquid/Nunjucks)\nDESCRIPTION: Demonstrates how to use the 'edge' shortcode in Eleventy templates to specify which content should be generated on the Edge server. Content outside the shortcode is generated during the build, while content inside is generated dynamically on the Edge.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-04-19-eleventy-edge.md#2025-04-23_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\nThe content outside of the `edge` shortcode is generated with the Build.\n\n{% edge %}\nThe content inside of the `edge` shortcode is generated on the Edge.\n\n* Use a query param value here.\n* Use a cookie value here.\n* All without clientside JS.\n{% endedge %}\n```\n\n----------------------------------------\n\nTITLE: Using Lit Custom Elements with <is-land> (HTML)\nDESCRIPTION: Loads a custom Lit web component inside <is-land>, triggering import of the component's module by path. Requires Lit library and a properly defined custom element. Input: Lit element name and props; Output: Lit-element rendered after hydration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<is-land on:visible import=\\\"./lib/lit/lit-component.js\\\">\\n  <lit-component name=\\\"Post-JS\\\">Pre-JS Content</lit-web-component>\\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with Same Input/Output Directory (Shell)\nDESCRIPTION: This shell command demonstrates running the Eleventy build process twice using the current directory (\".\") for both input and output, specifically processing Markdown and HTML files (`--formats=md,html`). The first execution successfully generates output (`Writing ./README/index.html from ./README.md`). The second execution illustrates a common pitfall where Eleventy attempts to reprocess the previously generated HTML output, potentially leading to duplicate permalink errors because two source files (`./README.md` and the output `./README/index.html`) attempt to write to the same destination. This scenario highlights why using separate input and output directories is generally recommended when processing HTML files with Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/html.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ eleventy --input=. --output=. --formats=md,html\nWriting ./README/index.html from ./README.md\n\n$ eleventy --input=. --output=. --formats=md,html\n```\n\n----------------------------------------\n\nTITLE: Registering the Eleventy Vite Plugin in Eleventy Config (Basic)\nDESCRIPTION: This JavaScript snippet shows the basic configuration required to add the Eleventy Vite plugin to an Eleventy project. It imports the plugin and registers it using `eleventyConfig.addPlugin` within the Eleventy configuration file (typically `.eleventy.js` or `eleventy.config.js`). This enables the default Vite integration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/server-vite.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport EleventyVitePlugin from \"@11ty/eleventy-plugin-vite\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(EleventyVitePlugin);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendered JavaScript Code with Diff Highlighting\nDESCRIPTION: Displays the rendered output of a JavaScript code block highlighted using the `diff-js` syntax. It visually represents added (`+`) and removed (`-`) lines, typically styled using corresponding CSS.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/syntaxhighlight.md#2025-04-23_snippet_7\n\nLANGUAGE: diff-js\nCODE:\n```\n+function myFunction() {\n   // …\n-  return true;\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy with esbuild-register for TypeScript/JSX (JavaScript/CommonJS)\nDESCRIPTION: This JavaScript code snippet provides an alternative configuration for Eleventy using `esbuild-register` to handle `.11ty.jsx`, `.11ty.ts`, and `.11ty.tsx` files. It uses `require` to import and register `esbuild-register` at the beginning of the CommonJS configuration file (`eleventy.config.js`). The `addExtension` method registers the file extensions, associating them with the `11ty.js` key, allowing esbuild to process them. This approach is suitable for CommonJS projects or older Eleventy versions (e.g., 2.0).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/typescript.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { register } = require(\"esbuild-register/dist/node\");\n\nregister();\n\nmodule.exports = function(eleventyConfig) {\n\t// We can add support for JSX too, at the same time:\n\televentyConfig.addExtension([\"11ty.jsx\", \"11ty.ts\", \"11ty.tsx\"], {\n\t\tkey: \"11ty.js\",\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter in Markdown for Eleventy Blog Post\nDESCRIPTION: This snippet defines the frontmatter for an Eleventy blog post, including the news title, navigation parent, blog highlight status, and external URL.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-10-02-eleventy-v3.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: \"Eleventy v3.0.0 is now available!\"\neleventyNavigation:\n  parent: Blog\nblogHighlight: true\nexternal_url: https://github.com/11ty/eleventy/releases/tag/v3.0.0\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation Key\nDESCRIPTION: This YAML front matter block sets the navigation key for this page within an Eleventy project. The `eleventyNavigation.key` property assigns the value 'Credits' to this page, which can be used by Eleventy's navigation plugin to build site navigation structures.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/credits.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Credits\n---\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Configuration Object in Eleventy\nDESCRIPTION: An example of directly exporting a configuration object as the default export in an Eleventy configuration file. This approach is supported but callback functions are preferred as they provide access to the full Configuration API.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config-shapes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tdir: {\n\t\tinput: \"views\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Eleventy Collections in Nunjucks - Nunjucks\nDESCRIPTION: Uses a Nunjucks for-loop to iterate over the 'quicktips' collection provided by Eleventy's data, dynamically rendering each tip as a linked list item. Depends on Eleventy (11ty) configuration to provide a 'quicktips' collection in the template context. This loop expects an array-like 'collections.quicktips' where each item is an object containing 'url' and 'data.title' properties; output is a list of anchor tags, making it suitable for sidebar navigation or summaries. The loop is sensitive to available collection data and must be run in an Eleventy build environment.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips.md#2025-04-23_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n{%- for tip in collections.quicktips %}\n- <a href=\"{{ tip.url }}\">{{ tip.data.title }}</a>\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Matter for Eleventy Blog Post\nDESCRIPTION: YAML front matter for an Eleventy blog post, setting the news title and configuring the navigation parent.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-25-cloudcannon.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"Eleventy and CloudCannon!\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Example Front Matter in Layout File\nDESCRIPTION: This snippet shows an example of front matter in a layout file, which will be merged with the template data when Deep Data Merge is enabled.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-deep-merge.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: This is a Very Good Blog Post\nauthor: Zach\ntags:\n  - JavaScript\neleventyNavigation:\n  parent: test\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Eleventy Blog Post\nDESCRIPTION: YAML front matter block defining metadata for the Eleventy blog post about Jamstack Survey results. It sets the news title and configures the Eleventy navigation parent as 'Blog'.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-11-29-jamstack-survey-2022.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"Jamstack Community Survey 2022 Results\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Directory Output Plugin using npm (bash)\nDESCRIPTION: This snippet demonstrates how to install the @11ty/eleventy-plugin-directory-output package into your project using the npm package manager. Requires Node.js and npm to be installed on the system. After execution, the plugin will be available in your project's node_modules and can be imported in your Eleventy config.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/directory-output.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @11ty/eleventy-plugin-directory-output\n```\n\n----------------------------------------\n\nTITLE: Non-Quoted Include Path Behavior with `dynamicPartials: false` in Liquid\nDESCRIPTION: Shows how non-quoted include paths work when `dynamicPartials: false` is set in Liquid options. This looks for `_includes/user.liquid`. This configuration is required for non-quoted paths in Eleventy 1.0+.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_13\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% include user %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Quiet Mode in Eleventy to Reduce Console Output - JavaScript\nDESCRIPTION: Provides a configuration API snippet to activate quiet mode in Eleventy. By calling setQuietMode(true), console output is minimized, which is especially useful for larger projects or deployments where verbose logs are unnecessary. No dependencies beyond Eleventy itself; options are true (quiet) or false (default). No direct input/output except for changed logging verbosity.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\televentyConfig.setQuietMode(true);\\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Slashes Globally in Eleventy Config (JavaScript)\nDESCRIPTION: Provides an Eleventy configuration snippet (JavaScript) to globally change the permalink structure to use `resource.html` style output and `/resource` style URLs, removing the default trailing slash and `.html` extension from `page.url`. This involves using `addGlobalData` for the permalink structure and `addUrlTransform` to modify the final URL.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Set global permalinks to resource.html style\n\televentyConfig.addGlobalData(\"permalink\", () => {\n\t\treturn (data) =>\n\t\t\t`${data.page.filePathStem}.${data.page.outputFileExtension}`;\n\t});\n\n\t// Remove .html from `page.url`\n\televentyConfig.addUrlTransform((page) => {\n\t\tif (page.url.endsWith(\".html\")) {\n\t\t\treturn page.url.slice(0, -1 * \".html\".length);\n\t\t}\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Reversing Sorted Collections with getAllSorted().reverse() in Eleventy\nDESCRIPTION: Demonstrates how to reverse the default sorting order using getAllSorted().reverse(). This creates a collection with items in descending order by date and filename.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Use the default sorting algorithm in reverse (descending dir, date, filename)\n\t// Note that using a template engine's `reverse` filter might be easier here\n\televentyConfig.addCollection(\"myPostsReverse\", function (collectionsApi) {\n\t\treturn collectionsApi.getAllSorted().reverse();\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Using inputPathToUrl Function in JavaScript (CommonJS)\nDESCRIPTION: Shows how to use the `inputPathToUrl` helper function within an Eleventy JavaScript template function (CommonJS format). The function is accessed via `this.inputPathToUrl` and takes the input path string (`\"index.md\"`) as an argument to produce the output URL for an anchor tag.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/inputpath-to-url.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (data) {\n\treturn `<a href=\"${this.inputPathToUrl(\"index.md\")}\">Home</a>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Including HTML Base Plugin Configuration Options in Nunjucks\nDESCRIPTION: This Nunjucks tag includes a snippet showing how to pass an options object to the `addPlugin` method when registering `EleventyHtmlBasePlugin` in `eleventy.config.js`. This allows customization of plugin behavior, such as processed extensions, baseHref override, and options for `posthtml-urls`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/html-base.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"snippets/plugins/base-install-options.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Applying a Universal Filter in Liquid\nDESCRIPTION: Demonstrates the syntax for applying an Eleventy Universal Filter (`filterName`) to a variable (`name`) within a Liquid template. Universal filters work across multiple template languages.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_10\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% name \\| filterName %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Identifying 'Shell' as a Linux Terminal Name\nDESCRIPTION: Specifies 'Shell' as one of the common generic names used for a terminal or command-line interface application on Linux systems.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n`Shell`\n```\n\n----------------------------------------\n\nTITLE: Using eleventy-image WebC Component as Custom Element in HTML\nDESCRIPTION: This HTML snippet shows an alternative method for using the `<eleventy-image>` WebC component, employing it directly as a custom HTML element (`<eleventy-image>`). Similar to the `webc:is` approach, it requires `src` and `alt` attributes. This usage provides a more declarative syntax and assumes proper Eleventy configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-webc.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<eleventy-image src=\"cat.jpg\" alt=\"photo of my tabby cat\"></eleventy-image>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata in Eleventy\nDESCRIPTION: This snippet sets up the page metadata for an Eleventy blog post, including the news title and navigation structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-02-14-eleventy-oss.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: Full Time Open Source Development for Eleventy, sponsored by Netlify\neleventyNavigation:\n  parent: Blog\n  key: Eleventy Open Source\n---\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Navigation Branch Results\nDESCRIPTION: This shows the JSON structure returned when querying children of a specific navigation key, displaying the hierarchical relationship between parent and child navigation items.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"key\": \"Humans\",\n\t\t\"parentKey\": \"Mammals\",\n\t\t\"url\": \"/humans/\",\n\t\t\"title\": \"Humans\"\n\t},\n\t{\n\t\t\"key\": \"Bats\",\n\t\t\"parentKey\": \"Mammals\",\n\t\t\"url\": \"/bats/\",\n\t\t\"title\": \"Bats\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Declaring WebC Components in Front Matter\nDESCRIPTION: Example showing how to declare specific WebC components for use in a template using the webc.components property in front matter or data cascade.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n---\nlayout: \"my-layout.webc\"\nwebc:\n  components: \"./webc/*.webc\"\n---\n\n<my-webc-component>WebC *is* HTML.</my-webc-component>\n```\n\n----------------------------------------\n\nTITLE: Looping and Rendering Community Plugin List - Nunjucks Template\nDESCRIPTION: This Nunjucks snippet iterates through the 'plugins' data object, shuffling its order, and renders a markdown list item for each plugin. It conditionally formats deprecated plugins with strikethrough, includes optional URLs or descriptions, and appends author attribution using a custom 'authorLink' filter. Requires access to the 'plugins' data collection and 'shuffle', 'authorLink' Nunjucks filters.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/community.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{%- for name, plugin in plugins | shuffle %}\\n{%- set url = plugin.url or \"https://www.npmjs.com/package/\" + plugin.npm %}\\n- [{% if plugin.deprecated %}~~{% endif %}{{ plugin.npm }}{% if plugin.deprecated %}~~{% endif %}]({{ url }}){% if plugin.description %} {% if plugin.deprecated %}~~{% endif %}{{ plugin.description }}{% if plugin.deprecated %}~~{% endif %}{% endif %} {{ plugin.deprecated }} {% authorLink authors, plugin.author %}\\n{%- endfor %}\\n- [Add your own](https://github.com/11ty/11ty-website/tree/main/src/_data/plugins#readme)!\n```\n\n----------------------------------------\n\nTITLE: Customizing Eleventy Inclusive Language Plugin Options - JavaScript\nDESCRIPTION: This snippet illustrates a customized setup of the Inclusive Language plugin within an Eleventy configuration file. It imports the plugin and passes an options object as the second argument to addPlugin, allowing developers to specify which template formats to scan and which words to flag. Dependencies include @11ty/eleventy-plugin-inclusive-language. Key parameters: templateFormats (list of file extensions) and words (array or comma-delimited string of flagged words). This enables fine-grained linter control; the expected input is the Eleventy config object and plugin options, producing advanced linter behavior for specified files and terms.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inclusive-language.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport inclusiveLangPlugin from \"@11ty/eleventy-plugin-inclusive-language\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(inclusiveLangPlugin, {\n\t\ttemplateFormats: [\"md\"], // default, add more file extensions here\n\n\t\t// accepts an array or a comma-delimited string\n\t\twords:\n\t\t\t\"simply,obviously,basically,of course,clearly,just,everyone knows,however,easy\",\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Locating the Terminal Application Path on macOS\nDESCRIPTION: Provides the typical file system path where the macOS `Terminal` application is located. Users can navigate to this path to launch the application.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`/Applications/Utilities/Terminal`\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Tag to Content\nDESCRIPTION: Example of assigning a single tag to content. This will make the content available in collections.cat.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntags: cat\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring 11ty Front Matter for Blog Navigation\nDESCRIPTION: YAML front matter configuration for an 11ty blog post, setting the news title and navigation hierarchy with a parent-child relationship.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-02-18-youtube-channel.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: New Eleventy YouTube Channel\neleventyNavigation:\n  parent: Blog\n  key: Eleventy YouTube Channel\n---\n```\n\n----------------------------------------\n\nTITLE: Hyperlinking with InputPath using Eleventy Plugin in HTML\nDESCRIPTION: Demonstrates the use of the InputPath to URL plugin in a raw HTML template. By setting an anchor tag's \\\"href\\\" attribute to the relative path of an input file (\\\"my-template.md\\\"), the plugin will automatically remap this to the correct output URL in the generated site. No additional dependencies are required beyond enabling the plugin in Eleventy 3.x. The key parameter is the \\\"href\\\" attribute accepting the source file path. The expected output is a working anchor tag with the remapped URL; the input must correspond to a valid Eleventy template file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inputpath-to-url.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\\\"my-template.md\\\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Including addPathPrefixToFullUrl Filter Example in Nunjucks\nDESCRIPTION: This Nunjucks tag includes a snippet demonstrating the `addPathPrefixToFullUrl` filter, used to unconditionally add the configured path prefix to any given URL, including full external URLs.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/html-base.md#2025-04-23_snippet_5\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"snippets/plugins/base-add.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Function Global Data in Eleventy Config\nDESCRIPTION: Shows how to add a function as global data by nesting it within another function.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-global-custom.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (eleventyConfig) {\n\televentyConfig.addGlobalData(\"myFunction\", () => {\n\t\treturn () => new Date();\n\t});\n\n\t// myFunction's value will be a function that returns a Date instance\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy 1.0 Beta via npm\nDESCRIPTION: Commands for installing the Eleventy 1.0 Beta release either as a local project dependency or as a global installation using npm.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-10-06-eleventy-v1-beta.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Local project\n\nnpm install @11ty/eleventy@beta\n\n# Global install\n\nnpm install @11ty/eleventy@beta -g\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with SCSS Format Support (Shell)\nDESCRIPTION: This shell command demonstrates how to invoke the Eleventy static site generator to process files with the .scss extension, provided that the Eleventy configuration has already been set up to recognize and handle .scss files. It requires that the project has Eleventy and the related configuration in place. The command processes SCSS files as part of the build, outputting CSS as configured in the JavaScript extension.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/sass.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx @11ty/eleventy --formats=scss\n```\n\n----------------------------------------\n\nTITLE: Using eleventy-image WebC Component with webc:is in HTML\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the `<eleventy-image>` WebC component by applying it to a standard `<img>` tag using the `webc:is=\"eleventy-image\"` attribute. It requires the `src` attribute for the image source path and the `alt` attribute for alternative text. This assumes the Eleventy Image plugin and the WebC component have been correctly configured in the Eleventy setup.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image-webc.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img webc:is=\"eleventy-image\" src=\"cat.jpg\" alt=\"photo of my tabby cat\">\n```\n\n----------------------------------------\n\nTITLE: Defining the Eleventy OpenGraph Image Service URL Structure\nDESCRIPTION: Specifies the URL format for requesting OpenGraph images via the Eleventy service. It includes placeholders for the target URL (which must be URI encoded), an optional size parameter (`small`, `medium`, or `auto`), and an optional output image format supported by Eleventy Image.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/opengraph.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://v1.opengraph.11ty.dev/:url/\nhttps://v1.opengraph.11ty.dev/:url/:size/\nhttps://v1.opengraph.11ty.dev/:url/:size/:format/\n```\n\n----------------------------------------\n\nTITLE: Excluding Content from Collections\nDESCRIPTION: Example showing how to exclude a content file from all collections, including collections.all. This is useful for files like RSS feeds, sitemaps, or other utility pages.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\neleventyExcludeFromCollections: true\ntags: post\n---\n\nThis will not be available in `collections.all` or `collections.post`.\n```\n\n----------------------------------------\n\nTITLE: Identifying Visual Studio Code Editor with Bundled Terminal (Multi-Platform)\nDESCRIPTION: Mentions the `Visual Studio Code` editor, available on macOS, Windows, and Linux. It provides an integrated terminal, bundling Windows PowerShell on Windows systems.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n`Visual Studio Code`\n```\n\n----------------------------------------\n\nTITLE: Installing Upgrade Helper Plugin via npm - Bash\nDESCRIPTION: These Bash commands install the @11ty/eleventy-upgrade-help plugin at the appropriate major version matching the project's target Eleventy version. Inputs are command line invocations in the project folder. Outputs are plugin entries in the package.json and the plugin code being added to node_modules. npm must be available and project should have Eleventy installed or newly upgraded.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/upgrade-help.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrading from Eleventy v0 to v1\\nnpm install @11ty/eleventy-upgrade-help@1\\n\\n# Or, upgrading from Eleventy v1 to v2\\nnpm install @11ty/eleventy-upgrade-help@2\\n\\n# Or, upgrading from Eleventy v2 to v3\\nnpm install @11ty/eleventy-upgrade-help@3\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Frontmatter in Eleventy\nDESCRIPTION: YAML frontmatter that configures the blog post metadata including the news title and navigation hierarchy in the Eleventy static site generator.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2020-08-10-discord.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: Join our Discord Server!\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Words in a Single Tag\nDESCRIPTION: Example showing how to create a tag with multiple words. This requires using bracket notation to access the collection in templates.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntags: cat and dog\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying a Layout in Front Matter with Nunjucks Syntax - Markdown\nDESCRIPTION: Shows how to set the 'layout' key in the front matter of a content file to specify a Nunjucks (.njk) template as a layout. No dependencies beyond Eleventy’s support for front matter and the referenced layout template. The key parameter is the name of the layout file, and the expected result is that the rendered HTML for this content will be wrapped in the named layout.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/layouts.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\nlayout: mylayout.njk\\n---\\n\\n# My content\\nMore content.\\n\n```\n\n----------------------------------------\n\nTITLE: HTML Table for Cumulative Eleventy Metrics (2023-2024)\nDESCRIPTION: An HTML table displaying cumulative growth metrics for Eleventy between 2023 and 2024, including npm downloads, GitHub data, social media followers, and other platform statistics with percentage changes highlighted.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2025-01-08-review-2024.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Cumulative Metric</th>\n\t\t\t<th class=\"numeric\">2023</th>\n\t\t\t<th class=\"numeric\">2024</th>\n\t\t\t<th class=\"numeric\">Change</th>\n\t\t</tr>\n\t</thead>\n\t\t<tr>\n\t\t\t<td>npm Downloads</td>\n\t\t\t<td class=\"numeric\">7,585,613</td>\n\t\t\t<td class=\"numeric\">10,711,017</td>\n\t\t\t<td class=\"numeric numeric-up\">41.20%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><a href=\"https://github.com/11ty/eleventy/network/dependents\">GitHub dependents</a></td>\n\t\t\t<td class=\"numeric numeric-note\">69,632</td>\n\t\t\t<td class=\"numeric\">79,563</td>\n\t\t\t<td class=\"numeric numeric-up\">12.49%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><a href=\"https://github.com/11ty/eleventy/stargazers\">GitHub Stars</a></td>\n\t\t\t<td class=\"numeric\">15,569</td>\n\t\t\t<td class=\"numeric\">17,460</td>\n\t\t\t<td class=\"numeric numeric-up\">12.14%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><a href=\"https://github.com/11ty/11ty-community/\"><code>11ty-community</code></a> Sites</td>\n\t\t\t<td class=\"numeric\"><a href=\"https://github.com/11ty/11ty-community/tree/6a1f48cafc2c3159720cd3328161cc8cdff362e2/built-with-eleventy\">1,018</a></td>\n\t\t\t<td class=\"numeric\"><a href=\"https://github.com/11ty/11ty-community/tree/87be4cc3b48df684f37aa418d5430544be0ccced/built-with-eleventy\">1,175</a></td>\n\t\t\t<td class=\"numeric numeric-up\">15.42%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><a href=\"https://fosstodon.org/@eleventy\">Mastodon Friends</a></td>\n\t\t\t<td class=\"numeric numeric-note\">3,565</td>\n\t\t\t<td class=\"numeric\">4,217</td>\n\t\t\t<td class=\"numeric numeric-up\">18.28%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><a href=\"https://bsky.app/profile/11ty.dev\">Bluesky Friends</a></td>\n\t\t\t<td class=\"numeric numeric-note\">99</td>\n\t\t\t<td class=\"numeric\">2,344</td>\n\t\t\t<td class=\"numeric numeric-up\">2267.67%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><a href=\"https://www.youtube.com/c/EleventyVideo\">YouTube Subscribers</a></td>\n\t\t\t<td class=\"numeric\">1,880</td>\n\t\t\t<td class=\"numeric\">2,498</td>\n\t\t\t<td class=\"numeric numeric-up\">32.87%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><a href=\"/blog/discord/\">Discord Members</a></td>\n\t\t\t<td class=\"numeric numeric-note\">3,093</td>\n\t\t\t<td class=\"numeric\">3,253</td>\n\t\t\t<td class=\"numeric numeric-up\">5.17%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><a href=\"https://www.linkedin.com/company/11ty/\">LinkedIn Super Professional Network</a></td>\n\t\t\t<td class=\"numeric numeric-note\">265</td>\n\t\t\t<td class=\"numeric\">737</td>\n\t\t\t<td class=\"numeric numeric-up\">178.11%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><a href=\"https://buttondown.com/11ty\">Newsletter Subscribers</a></td>\n\t\t\t<td class=\"numeric numeric-note\">268</td>\n\t\t\t<td class=\"numeric\">1607</td>\n\t\t\t<td class=\"numeric numeric-up\">499.62%</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using a Simple Shortcode in Handlebars Template\nDESCRIPTION: This HTML (Handlebars) snippet demonstrates how to use the previously defined 'user' shortcode within a Handlebars template. It passes 'Zach Leatherman' and 'zachleat' as arguments. The triple-stash `{{{ ... }}}` is crucial to prevent Handlebars from HTML-escaping the output generated by the shortcode.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/handlebars.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{{{ user \"Zach Leatherman\" \"zachleat\" }}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation and News Title in Markdown Frontmatter\nDESCRIPTION: This code snippet sets up the frontmatter for an Eleventy blog post. It defines the news title and configures the navigation hierarchy using eleventyNavigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2020-02-05-stickers.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: How do I get an Eleventy Sticker?\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with a TypeScript Configuration File via tsx (Shell)\nDESCRIPTION: This shell command shows how to execute Eleventy using `tsx` to first process a TypeScript configuration file (`eleventy.config.ts`). The `--config` flag specifies the TypeScript configuration file, and the `--formats` flag restricts processing to `.11ty.tsx` files in this example.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/typescript.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx ./node_modules/.bin/eleventy --config=eleventy.config.ts --formats=11ty.tsx\n```\n\n----------------------------------------\n\nTITLE: Including htmlBaseUrl Filter Override Example in Nunjucks\nDESCRIPTION: This Nunjucks tag includes a snippet demonstrating how to override the default base URL by passing a second argument to the `htmlBaseUrl` filter, useful for specific URL transformations.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/html-base.md#2025-04-23_snippet_3\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"snippets/plugins/htmlbaseurl-override.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebC Component with Front Matter in Eleventy\nDESCRIPTION: Example of a WebC file that includes front matter to specify a layout. Front matter in Eleventy is optional but follows standard conventions.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: \"my-layout.webc\"\n---\nWebC *is* HTML.\n```\n\n----------------------------------------\n\nTITLE: Customizing the Default Hash Length in Filenames (JavaScript)\nDESCRIPTION: This configuration object sets the 'hashLength' property to control how many characters are used in the default filename hash for generated images. Making the hash too short increases the risk of name collisions. Inputs are processed image configuration objects; outputs are images named with hashes truncated to the specified length. This is useful for managing output filename length and uniqueness.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n\t// …\n\thashLength: 8, // careful, don’t make it _too_ short!\n}\n```\n\n----------------------------------------\n\nTITLE: Styling <is-land> Ready State with Attribute Selectors (HTML/CSS)\nDESCRIPTION: Shows how to conditionally style the <is-land> component after hydration by targeting the [ready] attribute using CSS. This mechanism provides a visual signal of hydration state. Dependencies: <is-land> applies the ready attribute after loading. Input: CSS selector; Output: modified styles on hydrated <is-land> components.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n\\tis-land[ready] {\\n\\t\\tbackground-color: lightgreen;\\n\\t}\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Key Generation for Template Compilation\nDESCRIPTION: This code shows the default implementation of getCacheKey with examples of how to override it. It demonstrates different caching strategies based on contents, inputPath, or custom conditions for Eleventy template compilation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n\t// some configuration truncated …\n  read: false,\n  compileOptions: {\n    cache: true,\n    getCacheKey: function(contents, inputPath) {\n      // return contents; // this is the default in 1.0\n\n      // return inputPath + contents; // this is the new default in 2.0.0-canary.16\n\n      return inputPath; // override to cache by inputPath (this means the compile function will not get called when the file contents change)\n\n      // Conditionally opt-out of cache with `return false`\n      // if(someArbitraryCondition) {\n      //   return false;\n      // }\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Styling Eleventy Template Language List with Indicators (CSS)\nDESCRIPTION: This CSS snippet targets list items within an element with the class `elv-page-toc`. It adds a red asterisk after links pointing to specific template language documentation pages (MDX, JSX, TS, Handlebars, Mustache, EJS, HAML, Pug, WebC) to visually indicate that these template types require plugin installation. It also styles a dedicated element (`.elv-page-toc-asterisk`) presumably used as a legend.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n.elv-page-toc-asterisk:before,\n.elv-page-toc li:has(> a[href=\"/docs/languages/mdx/\"]):after,\n.elv-page-toc li:has(> a[href=\"/docs/languages/jsx/\"]):after,\n.elv-page-toc li:has(> a[href=\"/docs/languages/typescript/\"]):after,\n.elv-page-toc li:has(> a[href=\"/docs/languages/handlebars/\"]):after,\n.elv-page-toc li:has(> a[href=\"/docs/languages/mustache/\"]):after,\n.elv-page-toc li:has(> a[href=\"/docs/languages/ejs/\"]):after,\n.elv-page-toc li:has(> a[href=\"/docs/languages/haml/\"]):after,\n.elv-page-toc li:has(> a[href=\"/docs/languages/pug/\"]):after,\n.elv-page-toc li:has(> a[href=\"/docs/languages/webc/\"]):after {\n\tcontent: \"*\";\n\tcolor: #f00;\n\tmargin-inline: .15em;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Hydrating Preact Components in <is-land> with HTM (HTML)\nDESCRIPTION: Demonstrates use of <is-land> with autoinit and a path to a Preact component module using HTM (hyperscript tagged markup) for JSX-like syntax without a build step. Inputs: import points to a .js file exporting a function which mounts Preact markup into the island. Output: rendered Preact UI.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<is-land\\n\\ton:visible\\n\\tautoinit=\\\"preact\\\"\\n\\timport=\\\"/lib/preact/preact-component.js\\\"\\n></is-land>\n```\n\n----------------------------------------\n\nTITLE: Paged Object Values Output - JavaScript Array\nDESCRIPTION: Shows the result when Eleventy's object pagination is configured for values, producing an array where each inner array contains one value per page. Intended for reference when customizing object pagination behavior. No dependencies.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n[\n\\t[\\\"itemvalue1\\\"], // pagination.items[0] holds the object value\n\\t[\\\"itemvalue2\\\"],\n\\t[\\\"itemvalue3\\\"],\n];\n```\n\n----------------------------------------\n\nTITLE: HTML Table for Year-over-Year Eleventy Metrics (2023-2024)\nDESCRIPTION: An HTML table showing year-over-year comparison metrics for Eleventy between 2023 and 2024, focusing on npm downloads and GitHub activity with percentage changes highlighted.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2025-01-08-review-2024.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Year over Year Metric</th>\n\t\t\t<th class=\"numeric\">2023</th>\n\t\t\t<th class=\"numeric\">2024</th>\n\t\t\t<th class=\"numeric\">Change</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>npm Downloads</td>\n\t\t\t<td class=\"numeric\">2,915,939</td>\n\t\t\t<td class=\"numeric\">3,125,404</td>\n\t\t\t<td class=\"numeric numeric-up\">7.18%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>GitHub Issues Closed</td>\n\t\t\t<td class=\"numeric\">519</td>\n\t\t\t<td class=\"numeric\">695</td>\n\t\t\t<td class=\"numeric numeric-up\">33.91%</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>GitHub Pull Requests Closed</td>\n\t\t\t<td class=\"numeric\">197</td>\n\t\t\t<td class=\"numeric\">326</td>\n\t\t\t<td class=\"numeric numeric-up\">65.48%</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos with Custom Nunjucks Shortcode - Nunjucks\nDESCRIPTION: This snippet demonstrates how to embed YouTube videos using a custom Nunjucks shortcode (`youtubeEmbed`), allowing dynamic insertion of video players into the generated HTML. The shortcode takes a YouTube video ID and an optional title or start time. It requires configuration of the `youtubeEmbed` filter or shortcode in the Eleventy project. Inputs include the video ID as a string and optionally, a display title or time parameter. Outputs a rendered YouTube embed. The approach is reusable across Eleventy templates where dynamic video content is needed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{%- youtubeEmbed \"b4frtsT4Cgo\", \"Full Control over HTML\" -%}\n{%- youtubeEmbed \"dIa2Y4zesnw\", \"Add your site to the Leaderboards (Weekly №6)\" -%}\n```\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{%- youtubeEmbed \"KETQ4zS9Yp4\", \"28% build time performance improvement for Google’s web.dev (Weekly №1)\", \"30\" -%}\n{%- youtubeEmbed \"kUC87Zr0dKg\", \"Eleventy Build went from 54s to 17s—Pagination Memory/Performance Wins 🏆 (Weekly №10)\", \"344\" -%}\n{%- youtubeEmbed \"sfPNgt3joWI\", \"Markdown Benchmarks (Weekly №16)\", \"1566\" -%}\n```\n\n----------------------------------------\n\nTITLE: Including htmlBaseUrl Filter Example in Nunjucks\nDESCRIPTION: This Nunjucks tag includes a snippet illustrating the use of the `htmlBaseUrl` filter within a template. The included code likely shows how to apply the filter to a relative URL string to prepend the configured path prefix.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/html-base.md#2025-04-23_snippet_2\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"snippets/plugins/htmlbaseurl.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Transforming Global Data with eleventyComputed.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to define computed global data properties in an 11ty project using JavaScript. By mapping keys in the exported object (myCopyrights and myLinks) to functions that extract the 'entry' arrays from nested 'feed' objects within copyrights.json and links.json, templates can access filtered data directly. Requires that the global data directory includes links.json and copyrights.json files structured with 'feed' and 'entry' properties. The code returns arrays of entries, making it easier to bind only relevant data in templates. Assumes an ES module environment and 11ty >= v1.0.0.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/create-multiple-computed-data-elements.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n\tmyCopyrights: (data) => {\n\t\treturn data.copyrights.feed.entry;\n\t},\n\tmyLinks: (data) => {\n\t\treturn data.links.feed.entry;\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows Powershell\nDESCRIPTION: Command to set environment variables when running Eleventy in Windows Powershell.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/environment-vars.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$env:MY_ENVIRONMENT=\"production\"; npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Rendering Conference Registration Link with OpenGraph Card\nDESCRIPTION: HTML markup for displaying a conference registration link with an OpenGraph preview card image, including responsive image attributes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-02-16-register-for-11ty-conf.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://conf.11ty.dev/#register\" class=\"elv-externalexempt opengraph-card\">\n  <img src=\"https://v1.opengraph.11ty.dev/https%3A%2F%2Fconf.11ty.dev%2F/medium/\" alt=\"The 11ty International Symposium on Making Web Sites Real Good\" loading=\"lazy\" decoding=\"async\" width=\"650\" height=\"341\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Using a Multi-Argument Filter in Liquid Template (HTML)\nDESCRIPTION: Illustrates how to use a Liquid filter (`concatThreeThings`) that accepts multiple arguments within an HTML template. The first argument is the value preceding the pipe, and subsequent arguments are passed after a colon, separated by commas.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ \"first\" | concatThreeThings: \"second\", \"third\" }}</h1>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Blog Highlights in Eleventy Blog Page\nDESCRIPTION: CSS styles that define a larger font size and adjusted line height for highlighted blog posts on the Eleventy blog page. This style is applied to elements with the 'blog-lrg' class.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/blog.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.blog-lrg {\n\tfont-size: 1.25em;\n\tline-height: 1.1;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with esbuild-register Configuration (Shell)\nDESCRIPTION: This shell command executes Eleventy after configuring it with `esbuild-register`. Similar to the `tsx` example, it uses the `--formats` flag to explicitly tell Eleventy to process `.11ty.ts` and `.11ty.tsx` files, relying on the `esbuild-register` setup in the configuration file to handle the compilation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/typescript.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx @11ty/eleventy --formats=11ty.ts,11ty.tsx\n```\n\n----------------------------------------\n\nTITLE: Handling Input Directories with Passthrough File Copy\nDESCRIPTION: Shows how input directories are handled when using passthrough file copy. When a path is inside the input directory, the input directory is stripped from the output path.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/copy.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Input directory: src\n\t// Output directory: _site\n\n\t// The following copies to `_site/img`\n\televentyConfig.addPassthroughCopy(\"src/img\");\n};\n```\n\n----------------------------------------\n\nTITLE: Including Current Page in Breadcrumbs with Nunjucks\nDESCRIPTION: This snippet demonstrates how to include the current page in breadcrumb navigation results by setting the includeSelf option in Nunjucks syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_25\n\nLANGUAGE: jinja2\nCODE:\n```\n{% set navPages = collections.all | eleventyNavigationBreadcrumb(\"Bats\", { includeSelf: true }) %}\n{{ navPages | dump | safe }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post Template with Eleventy and Nunjucks (Nunjucks)\nDESCRIPTION: This Nunjucks template snippet sets up the structure for a blog post page in Eleventy by pulling in metadata like title, layout, and computed social descriptions. It conditionally renders post author info, publish date, and navigation links to adjacent posts using Eleventy collections. Dependencies include Eleventy, Nunjucks, and associated filters/plugins (such as newsDate and emoji). Expected input consists of context variables like newstitle, postAuthor, postAuthors, content, collections, and page. The output is HTML rendering of the blog post page with correct dynamic elements. The snippet assumes presence of Eleventy filter functions and available collections, and requires correct variable assignment for authors and post metadata.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/_includes/layouts/blog.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n---\\ntitle: Eleventy Blog\\nlayout: layouts/docs.njk\\neleventyComputed:\\n  social:\\n    description: \\\"An Eleventy blog post published on {{ page.date | newsDate('LLLL yyyy') }}.\\\"\\n---\\n\\n# {{ newstitle }}\\n\\n<div class=\\\"fl fl-inline fl-separator-h fl-nowrap mb-4\\\" style=\\\"--fl-gap-h: 1.5em; --fl-gap-v: .5em\\\">\\n  <div>\\n    <em>{{ page.date | newsDate }}</em>\\n  </div>\\n{%- if postAuthor and postAuthors[postAuthor] %}\\n\\t<div>\\n    <a href=\\\"{{ postAuthors[postAuthor] }}\\\" class=\\\"elv-externalexempt\\\">{% indieavatar postAuthors[postAuthor] %}{{ postAuthor }}</a>\\n  </div>\\n{%- endif %}\\n  <div>\\n    {% emoji \\\"📢\\\" %} <a href=\\\"/blog/feed.xml\\\">Subscribe to the Eleventy News Feed</a>\\n  </div>\\n</div>\\n\\n{{ content | safe }}\\n\\n{% if not hideRelatedBlogPosts %}\\n---\\n\\n### Read more blog posts:\\n\\n{% set previousPost = collections.blog | getPreviousCollectionItem(page) %}\\n{% set nextPost = collections.blog | getNextCollectionItem(page) %}\\n\\n{% if nextPost %}- Next: <a href=\\\"{{ nextPost.url }}\\\">{{ nextPost.data.newstitle }}</a>{% endif %}\\n{% if previousPost %}- Previous: <a href=\\\"{{ previousPost.url }}\\\">{{ previousPost.data.newstitle }}</a>{% endif %}\\n\\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Showing Excerpts in Navigation with Liquid\nDESCRIPTION: This snippet shows how to display navigation items with their excerpts by passing the showExcerpt option to the eleventyNavigationToHtml filter in Liquid syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_31\n\nLANGUAGE: liquid\nCODE:\n```\n---\nnavToHtmlOptions:\n  showExcerpt: true\n---\n{{ collections.all | eleventyNavigation: \"Humans\", navToHtmlOptions | json }}\n```\n\n----------------------------------------\n\nTITLE: Example of an Indented Code Block in Markdown Syntax - Markdown\nDESCRIPTION: This snippet illustrates the Markdown syntax for an indented code block: content indented by four or more spaces forms a <pre><code> HTML block. No dependencies are required; this is standard markdown. Input (markdown) is converted to output (HTML code block) during rendering.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n    a simple\n      indented code block\n```\n\n----------------------------------------\n\nTITLE: Including Page-Specific CSS in Eleventy/Nunjucks\nDESCRIPTION: Uses the Eleventy `css` shortcode paired with the Nunjucks `include` tag to inline the content of a CSS file (`components/page-supporters.css`) directly into the generated HTML page. This is often used for critical or page-specific styling.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/supporters.md#2025-04-23_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n{%- css %}{% include \"components/page-supporters.css\" %}{% endcss %}\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy HAML Plugin via npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install the official Eleventy plugin required for HAML templating support. This is necessary for Eleventy v3 and later, as HAML support was removed from the core.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/haml.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @11ty/eleventy-plugin-haml\n```\n\n----------------------------------------\n\nTITLE: Liquid Template Include Syntax\nDESCRIPTION: Example of the new Liquid template include syntax, which now looks relative to the file first, and the includes directory second.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-01-09-eleventy-one-point-oh.md#2025-04-23_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% include \"./include.liquid\" %}\n```\n\n----------------------------------------\n\nTITLE: Adding Excerpts to Navigation Items with YAML\nDESCRIPTION: This snippet demonstrates how to add descriptive excerpts to navigation items in the YAML front matter, which can be displayed when rendering navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Mammals\n  excerpt: Vertebrate animals of the class Mammalia.\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy Inclusive Language Plugin using npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the Eleventy Inclusive Language plugin as a dependency using npm. Running this command will add @11ty/eleventy-plugin-inclusive-language to your project's node_modules and package.json. There are no special parameters, but it is required before the plugin can be added in your Eleventy configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inclusive-language.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @11ty/eleventy-plugin-inclusive-language\n```\n\n----------------------------------------\n\nTITLE: Creating a Canonical Twitter URL in Eleventy using Liquid\nDESCRIPTION: Applies a custom filter to generate a canonical Twitter URL for a given link.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-03-03-five-million.md#2025-04-23_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{{ \"https://twitter.com/eleven_ty/status/1338210611797389312\" | canonicalTwitterUrl }}\n```\n\n----------------------------------------\n\nTITLE: Including a File with Relative Path in Liquid\nDESCRIPTION: Shows how to include a Liquid file using a relative path (`./` for the current directory, `../` for the parent). This example looks for `included.liquid` in the same directory as the template performing the include. Front matter is not processed. A warning notes that if a file with the same name exists in `_includes`, it will take precedence.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_4\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% include ./included %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Visually Styling Current Pagination Link with CSS\nDESCRIPTION: This CSS targets elements with the 'aria-current' attribute (typically the current pagination link) and applies a light background color. Intended to visually distinguish the active page link from the rest. Can be extended to include additional styles but should avoid font-size-changing properties for layout stability.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n[aria-current] {\n\tbackground-color: #eee;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in Filter Chains with log Filter in Liquid\nDESCRIPTION: Shows how the `log` filter can be added within Liquid filter chains, allowing intermediate logging before further transformation. Here, 'My Title' is first logged and then converted to uppercase. Provides alternative step-wise breakdown using 'assign'. Available since Eleventy 2.0.0-canary.13.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/log.md#2025-04-23_snippet_4\n\nLANGUAGE: liquid\nCODE:\n```\n{{ \"My Title\" | log | upcase }}\n\nThis is the same as:\n{% assign temp = \"My Title\" %}\n{{ temp | log }}\n{{ temp | upcase }}\n```\n\n----------------------------------------\n\nTITLE: Output Example: Transformed Link Using InputPath Plugin in HTML\nDESCRIPTION: Shows the expected output after Eleventy's InputPath to URL plugin has processed a template referencing 'my-template.md'. The anchor tag's href now points to the remapped output URL ('/my-template/'). No code dependencies; shown for comparison with input snippets. This demonstrates successful path transformation, which is the core goal of the plugin. Intended for reference to confirm the effect of plugin operation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inputpath-to-url.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\\\"/my-template/\\\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Data in Eleventy Front Matter\nDESCRIPTION: Front matter configuration for the author page including pagination setup, permalink structure, and navigation settings. This code defines how author data is fetched and how the page is integrated into the site navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/authors/author-pages.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet pagination = {\n\tdata: \"authors\",\n\tsize: 1,\n\talias: \"author\",\n\tresolve: \"values\",\n\tgeneratePageOnEmptyData: true,\n};\nlet permalink = \"/authors/{{ author.name | slugify }}/\";\nlet excludeFromSearch = true;\nlet layout = \"layouts/docs.njk\";\n\nlet eleventyNavigation = {\n\tparent: \"Authors\",\n};\nlet excludeFromSidebar = true;\n```\n\n----------------------------------------\n\nTITLE: Fetching Previous and Next Collection Items in Eleventy (Nunjucks/Jinja2)\nDESCRIPTION: Retrieves the previous and next items from a collection in Eleventy using the getPreviousCollectionItem and getNextCollectionItem filters in Nunjucks/Jinja2. Requires Eleventy collections and optionally the page argument; from version 2.0.0-beta.1, the page argument is optional. The filters provide contextual navigation within collection pages. Outputs references to the neighboring items in the collection or undefined on boundaries.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/collection-items.md#2025-04-23_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{% raw %}{% set previousPost = collections.posts | getPreviousCollectionItem(page) %}\n{% set nextPost = collections.posts | getNextCollectionItem(page) %}{% endraw %}\n\n<!-- in {{ \"2.0.0-beta.1\" | coerceVersion }} the page argument is optional -->\n{% raw %}{% set previousPost = collections.posts | getPreviousCollectionItem %}\n{% set nextPost = collections.posts | getNextCollectionItem %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache for 404 Page with htaccess (Apache)\nDESCRIPTION: This .htaccess snippet configures Apache web servers to use a custom static 404.html page for all not found errors. It uses the ErrorDocument directive to route 404 responses to the specified file at the site root. No external dependencies are required, but server support for htaccess overrides is needed. This configuration ensures all broken links display the custom 404 page, enhancing user navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/not-found.md#2025-04-23_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nErrorDocument 404 /404.html\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Using Custom Nunjucks Tag\nDESCRIPTION: This Nunjucks snippet demonstrates how to embed a YouTube video using a custom 'youtubeEmbed' tag. The tag is called with the video ID and a descriptive title as parameters, and it is wrapped inside a 'youtube-related' div for styling or semantic grouping. This approach requires a pre-configured 'youtubeEmbed' shortcode or tag in the Nunjucks environment, and it expects valid YouTube video IDs as input. The output renders the associated embedded video within the HTML content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/leaderboards-add.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n<div class=\\\"youtube-related\\\">\\n  {%- youtubeEmbed \\\"dIa2Y4zesnw\\\", \\\"Get your #BuiltWithEleventy site on 11ty.dev and the Leaderboards (Weekly №6)\\\" -%}\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing the Eleventy Fetch Package using npm\nDESCRIPTION: This command uses npm (Node Package Manager) to download and install the `@11ty/eleventy-fetch` plugin into the project's `node_modules` directory and adds it to the `package.json` dependencies. This plugin is necessary for implementing cached data fetching in Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/cache-api-requests.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @11ty/eleventy-fetch\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Eleventy\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video in an Eleventy page using a custom shortcode.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-02-14-eleventy-oss.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% youtubeEmbed \"pPkWxn0TF9w\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Page Metadata in Markdown\nDESCRIPTION: Sets up the layout, permalink, and collection exclusion for the 404 page using Eleventy's front matter.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/404.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: layouts/docs.njk\npermalink: 404.html\neleventyExcludeFromCollections: true\n---\n```\n\n----------------------------------------\n\nTITLE: Showing Excerpts in Navigation with Nunjucks\nDESCRIPTION: This snippet shows how to display navigation items with their excerpts by passing the showExcerpt option to the eleventyNavigationToHtml filter in Nunjucks syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_32\n\nLANGUAGE: jinja2\nCODE:\n```\n---\nnavToHtmlOptions:\n  showExcerpt: true\n---\n{{ collections.all | eleventyNavigation(\"Humans\") | eleventyNavigationToHtml(navToHtmlOptions) | safe }}\n```\n\n----------------------------------------\n\nTITLE: Disabling .gitignore Usage with setUseGitIgnore in Eleventy Config (JavaScript)\nDESCRIPTION: This sample shows how to disable Eleventy's default behavior of also ignoring paths listed in .gitignore, ensuring only .eleventyignore is considered. Call the setUseGitIgnore(false) method on eleventyConfig in your configuration file. Dependency: Eleventy v0.3.5+ for API availability. No parameters aside from the false literal. The output is that .gitignore is ignored as an ignore source; only .eleventyignore governs ignored files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/ignores.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\\n\\televentyConfig.setUseGitIgnore(false);\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Collective Supporters in Eleventy/Nunjucks\nDESCRIPTION: Iterates over an array of supporters available in the `opencollective.supporters` variable. For each supporter (excluding 'zach-leatherman'), it generates HTML displaying their avatar (`opencollectiveavatar` shortcode), name, a link to their website or profile, a visual indicator of their total donation amount (`supporterAmount` shortcode), and marks monthly supporters with an emoji (`emoji` shortcode). Requires `opencollective.supporters` data, and the mentioned shortcodes/filters to be defined in the Eleventy configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/supporters.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% for supporter in opencollective.supporters %}\n{%- set nameToSlug = supporter.name | slug | lower -%}\n{%- if nameToSlug != \"zach-leatherman\" %}\n  <div>\n    <a href=\"{{ supporter.website or supporter.profile }}\" class=\"elv-externalexempt supporters-link\" rel=\"sponsored\">{% opencollectiveavatar supporter %}{{ supporter.name }}</a>\n    <span class=\"fl fl-inline fl-nowrap\">\n        <span class=\"supporters-hearts\">{% supporterAmount supporter.totalAmountDonated %}</span>\n        {%- if supporter.isMonthly %}\n        <span class=\"supporters-tier\">{% emoji \"📅\" %} Monthly</span>\n        {%- endif %}\n    </span>\n  </div>\n{%- endif %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Leaderboards in YAML\nDESCRIPTION: YAML frontmatter configuration that sets up the Leaderboards page in the Eleventy website navigation structure. It defines the page as a child of the Community section, with a specific URL pointing to the Speedlify tool and an order value of 3. The permalink is set to false, indicating this is a configuration file rather than a content page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/speedlify/link-leaderboards.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Community\n  key: Leaderboards\n  url: \"/speedlify/\"\n  order: 3\npermalink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Default Quoted Include Path Behavior in Liquid (Eleventy 1.0+)\nDESCRIPTION: Illustrates the default behavior for includes in Eleventy 1.0 and later (`dynamicPartials: true`), where include paths must be quoted. This looks for `_includes/user.liquid`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_12\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% include 'user' %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Navigation Rendering in Nunjucks\nDESCRIPTION: Shows how to configure markdown rendering options for navigation using the eleventyNavigationToMarkdown filter in Nunjucks syntax. Allows controlling excerpt display in navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_34\n\nLANGUAGE: jinja2\nCODE:\n```\n---js\n{\n  navToMdOptions: {\n    // Show excerpts (if they exist in data, read more above)\n    showExcerpt: false\n  }\n}\n---\n{{ collections.all | eleventyNavigation | eleventyNavigationToMarkdown(navToMdOptions) | safe }}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Export in Eleventy JS Data Files\nDESCRIPTION: Simple example showing how to export static data from a JavaScript data file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-js.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default [\"user1\", \"user2\"];\n```\n\n----------------------------------------\n\nTITLE: Function-based Data Export in Eleventy\nDESCRIPTION: Example showing how to export data using a function that returns values.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-js.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function () {\n\treturn [\"user1\", \"user2\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 11ty Navigation and Permalink Settings (YAML)\nDESCRIPTION: This YAML Front Matter block configures properties for a page within an 11ty site. It utilizes the `eleventyNavigation` plugin to define the page's title ('11ty Conference'), its place within the site structure (under 'Community' with order 5), and provides an external URL (`https://conf.11ty.dev/`). The `permalink: false` setting instructs 11ty not to generate a standalone output file for this content item, which is useful for entries that only serve as navigation links or data sources.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/sidebar-conference.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: 11ty Conference\n  parent: Community\n  order: 5\n  url: https://conf.11ty.dev/\npermalink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Using Date Filter in Permalink (Liquid)\nDESCRIPTION: Demonstrates using the Liquid `date` filter within the `permalink` value in YAML front matter to create a date-based URL structure. It uses the `page.date` variable provided by Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{% raw %}\n```markdown\n---\ndate: \"2016-01-01T06:00-06:00\"\npermalink: \"/{{ page.date | date: '%Y/%m/%d' }}/index.html\"\n---\n```\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Permalink Path with index.html in YAML\nDESCRIPTION: Shows an alternative way to set the `permalink` in YAML front matter by explicitly including `index.html`. This achieves the same result as using a trailing slash, writing the output to the specified path and filename.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\npermalink: \"this-is-a-new-path/subdirectory/testing/index.html\"\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding External Link with OpenGraph Card in HTML\nDESCRIPTION: This HTML snippet creates a link to the external release notes with an OpenGraph card image. It uses Eleventy's templating syntax to dynamically generate the URL and image source.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-10-02-eleventy-v3.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ external_url }}\" class=\"elv-externalexempt opengraph-card\">\n  <img src=\"https://v1.screenshot.11ty.dev/{{ external_url | urlencode }}/opengraph/\" alt=\"Eleventy v3.0.0: ESM like a Phoenix (the mythical bird, not Arizona)\" loading=\"lazy\" decoding=\"async\" width=\"650\" height=\"341\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Installing the Eleventy Syntax Highlighting Plugin via npm\nDESCRIPTION: Shows the command to install the `@11ty/eleventy-plugin-syntaxhighlight` package using npm. This package is required to add syntax highlighting capabilities to an Eleventy project.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/syntaxhighlight.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @11ty/eleventy-plugin-syntaxhighlight\n```\n\n----------------------------------------\n\nTITLE: Rendering Testimonials with Nunjucks in Eleventy\nDESCRIPTION: Uses Nunjucks templating to display featured testimonials from a shuffled list of testimonials data.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/404.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n<div class=\"testimonials\">\n\t<div class=\"testimonials-layout fl\">\n{%- for testimonial in testimonials | shuffle %}\n{%- if testimonial.featured %}\n\t\t<div>{% testimonial testimonial %}</div>\n{%- endif %}\n{%- endfor %}\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Eleventy Plugins with CommonJS (Legacy Method)\nDESCRIPTION: Shows the CommonJS approach for importing Eleventy bundled plugins in a configuration file, which no longer works directly in Eleventy v3.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/cjs-esm.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any combination of these\nconst { I18nPlugin, RenderPlugin, HtmlBasePlugin } = require(\"@11ty/eleventy\");\n\nmodule.exports = function (eleventyConfig) {\n\t// …\n};\n```\n\n----------------------------------------\n\nTITLE: Installing an Eleventy Plugin via NPM\nDESCRIPTION: Command line instructions for installing an Eleventy plugin using NPM.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @11ty/eleventy-plugin-rss --save\n```\n\n----------------------------------------\n\nTITLE: Rendering Eleventy Sub-Navigation with Excerpts using Nunjucks/Liquid\nDESCRIPTION: This Nunjucks/Liquid snippet dynamically generates HTML for the sub-navigation corresponding to the 'Retired Plugins' key. It uses the `nav` filter to fetch the navigation data, `eleventyNavigationToHtml` to convert it to HTML (with the option `showExcerpt: true` to include page excerpts), and the `safe` filter to prevent HTML escaping.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/retired.md#2025-04-23_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{{ \"Retired Plugins\" | nav | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Navigation Rendering in Liquid\nDESCRIPTION: Demonstrates HTML rendering options for navigation using eleventyNavigationToHtml filter in Liquid. Includes options for customizing HTML elements, classes, and active state indicators.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_35\n\nLANGUAGE: liquid\nCODE:\n```\n---js\n{\n  navigationOptions: {\n    listElement: \"ul\",            // Change the top level tag\n    listItemElement: \"li\",        // Change the item tag\n\n    listClass: \"\",                // Add a class to the top level\n    listItemClass: \"\",            // Add a class to every item\n    listItemHasChildrenClass: \"\", // Add a class if the item has children\n    activeListItemClass: \"\",      // Add a class to the current page's item\n\n    anchorClass: \"\",              // Add a class to the anchor\n    activeAnchorClass: \"\",        // Add a class to the current page's anchor\n\n    // If matched, `activeListItemClass` and `activeAnchorClass` will be added\n    activeKey: \"\",\n    // It's likely you want to pass in `eleventyNavigation.key` here, e.g.:\n    // activeKey: eleventyNavigation.key\n\n    // Show excerpts (if they exist in data, read more above)\n    showExcerpt: false\n  }\n}\n---\n{{ collections.all | eleventyNavigation | eleventyNavigationToHtml: navigationOptions | json }}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Filter in Liquid Template (HTML)\nDESCRIPTION: Demonstrates how to apply a custom-defined filter (`myFilter`) to a variable (`myVariable`) within an HTML template using Liquid syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ myVariable | myFilter }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Using a Shortcode in a Nunjucks Template (Nunjucks)\nDESCRIPTION: This Nunjucks snippet shows the syntax for using a registered shortcode named `user`. Arguments (`\"Zach Leatherman\"`, `\"zachleat\"`) are passed directly within the shortcode tag.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/nunjucks.md#2025-04-23_snippet_9\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% user \"Zach Leatherman\", \"zachleat\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Liquid Filter with Multiple Arguments in Eleventy (JavaScript)\nDESCRIPTION: Shows how to define a custom Liquid filter (`concatThreeStrings`) in the Eleventy configuration (`.eleventy.js`) that accepts multiple arguments (`arg1`, `arg2`, `arg3`).\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Liquid Filter\n\televentyConfig.addLiquidFilter(\n\t\t\"concatThreeStrings\",\n\t\tfunction (arg1, arg2, arg3) {\n\t\t\treturn arg1 + arg2 + arg3;\n\t\t}\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Logging to Console with log Filter in JavaScript Template\nDESCRIPTION: Illustrates usage of the `log` filter inside an 11ty JavaScript template. The example function returns the result of this.log('My Title'), which logs to the console. Note that in JavaScript templates in 11ty, direct usage of console.log is possible, so this.filter primarily standardizes template filter usage.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/log.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (data) {\n\t// Caveat: you have access to `console.log` here, so probably use that.\n\treturn this.log(\"My Title\");\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Cache Directory (ESM)\nDESCRIPTION: Illustrates how to change the default cache storage location using the `directory` option. This example sets the cache directory to `.cache`. It's recommended to add this custom directory to the project's `.gitignore` file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\n\nawait Fetch(\"https://…\", {\n\tdirectory: \".cache\",\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Product Hunt Badge in HTML\nDESCRIPTION: This code snippet embeds a Product Hunt badge for Eleventy v2.0.0. It uses an anchor tag with specific Product Hunt URL parameters and an embedded SVG image. The badge is styled with inline width and height attributes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-02-10-product-hunt.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.producthunt.com/posts/eleventy-v2-0-0?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-eleventy&#0045;v2&#0045;0&#0045;0\" class=\"elv-externalexempt\"><img src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=378874&theme=dark\" alt=\"Eleventy&#0032;v2&#0046;0&#0046;0 - A&#0032;simpler&#0032;static&#0032;site&#0032;generator&#0046; | Product Hunt\" style=\"width: 250px; height: 54px;\" width=\"250\" height=\"54\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Eleventy via npm - Bash\nDESCRIPTION: These Bash commands demonstrate how to upgrade the @11ty/eleventy dependency to a specific major version using npm. There are separate commands for migrating from v0 to v1, v1 to v2, and v2 to v3. The expected input is run from the project's root directory. Outputs are dependency updates in package.json and the node_modules folder. Requires npm to be installed and assumes project uses @11ty/eleventy prior to running.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/upgrade-help.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrading from Eleventy v0 to v1\\nnpm install @11ty/eleventy@1\\n\\n# Or, upgrading from Eleventy v1 to v2\\nnpm install @11ty/eleventy@2\\n\\n# Or, upgrading from Eleventy v2 to v3\\nnpm install @11ty/eleventy@3\n```\n\n----------------------------------------\n\nTITLE: Including Supporters Template with Nunjucks\nDESCRIPTION: Inserts a supporters list template using Nunjucks include statement.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/community.md#2025-04-23_snippet_7\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"supporters.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Monthly One-time Donations in Nunjucks\nDESCRIPTION: Loops through and displays one-time donation amounts for each of the last 12 months.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/admin.md#2025-04-23_snippet_5\n\nLANGUAGE: nunjucks\nCODE:\n```\n{%- for month in opencollective.onetimeDonations.months %}\n1. {% if month %}`{{ month | displayPrice }}`{% endif %}\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: CSS Banner Generation Component\nDESCRIPTION: Demonstrates using JavaScript render functions to generate CSS with a license banner.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<style webc:is=\"add-banner-to-css\" @license=\"MIT licensed\">\n\tp {\n\t\tcolor: rebeccapurple;\n\t}\n</style>\n```\n\nLANGUAGE: html\nCODE:\n```\n<template webc:is=\"style\" webc:root=\"override\">\n\t<script webc:type=\"js\">\n\t\t`/* ${license} */`;\n\t</script>\n\t<slot></slot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Value with Custom Filter - JavaScript Template - JavaScript\nDESCRIPTION: Defines an Eleventy JavaScript template exporting a function that takes a data object with a \\\"name\\\" property and returns a heading HTML string with the capitalized name using the \\\"makeUppercase\\\" filter. This function assumes that \\\"this.makeUppercase\\\" is available in the template context, registered via Eleventy. Used in \\\".11ty.js\\\" template files.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function({name}) {\n  return `<h1>${this.makeUppercase(name)}</h1>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Eleventy with Quiet Mode Output (Bash)\nDESCRIPTION: These snippets show how to build an Eleventy site while suppressing most log output, using the --quiet flag. Dependencies: Eleventy installed via package manager. Useful for scripting or automation, where minimal console noise is desired. Input: source content; Output: generated site, with reduced log detail.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/usage.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Shhhhh—Don’t log so much to the console\\nnpx @11ty/eleventy --quiet\n```\n\n----------------------------------------\n\nTITLE: Logging to Console with log Filter in Liquid\nDESCRIPTION: Demonstrates the use of the `log` universal filter in a Liquid template to output a debug message to the console. Requires Eleventy version 0.11.0 or later. The filter takes any input (here, the string 'My Title'), logs it via console.log, and passes it through unchanged.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/log.md#2025-04-23_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{{ \"My Title\" | log }}\n```\n\n----------------------------------------\n\nTITLE: Quoting Permalinks with Template Syntax in YAML\nDESCRIPTION: Highlights a common YAML pitfall: permalink values using template syntax (especially starting with `{`) must be enclosed in quotes to prevent YAML from interpreting them as objects. This example shows the correct syntax using `page.filePathStem`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{% raw %}\n```yaml\npermalink: \"{{ page.filePathStem }}.html\"\n```\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Generating Eleventy Navigation HTML with Filters (Liquid/Nunjucks)\nDESCRIPTION: This Liquid/Nunjucks snippet dynamically generates an HTML navigation list within an Eleventy project. It retrieves the current page's navigation key from front matter (`eleventyNavigation.key`), processes it through a custom `navFiltered` filter, then uses the `eleventyNavigationToHtml` filter (configured to show excerpts) to generate the HTML markup, and finally applies the `safe` filter to prevent HTML escaping. This is typically used to render a table of contents or sub-navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{{ eleventyNavigation.key | navFiltered | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}\n```\n\n----------------------------------------\n\nTITLE: Adding Eleventy RSS Plugin (Manual Template Configuration, JavaScript)\nDESCRIPTION: This code shows how to add the Eleventy RSS plugin to an Eleventy project by importing and registering it in the config function. It uses the default settings by calling 'addPlugin' with just the imported plugin. '@11ty/eleventy-plugin-rss' must be installed. No template or rendering options are customized here; this is suitable for basic integration with manual template authoring required separately.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/rss.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport pluginRss from \"@11ty/eleventy-plugin-rss\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(pluginRss);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Included in JSON Output (Eleventy Config)\nDESCRIPTION: This Eleventy configuration snippet (.eleventy.js) demonstrates how to use the `eleventyConfig.dataFilterSelectors` API. It adds lodash-style selectors ('tags', 'page.url') to specify which data cascade entries should be included in the individual page objects when using the `.toJSON()` programmatic API method.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/programmatic.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .eleventy.js\nmodule.exports = function(eleventyConfig) {\n\t// Add `tags` and `page.url` to the results\n\televentyConfig.dataFilterSelectors.add(\"tags\");\n\televentyConfig.dataFilterSelectors.add(\"page.url\");\n};\n```\n\n----------------------------------------\n\nTITLE: Executing a Node.js Script (Shell)\nDESCRIPTION: This shell command executes a Node.js script named `my-node-script.js` using the Node runtime. This is typically run in a terminal after navigating to the directory containing the script.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/programmatic.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode my-node-script.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation and Permalink (YAML)\nDESCRIPTION: This YAML Front Matter block configures settings for an Eleventy page. The `eleventyNavigation` object defines the `key` (\"Eleventy Documentation\") and `url` (\"/docs/\") used by the Eleventy Navigation plugin to generate site navigation. The `permalink: false` setting prevents Eleventy from creating a separate output file for this specific source file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/sidebar-docs.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Eleventy Documentation\n  url: /docs/\npermalink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Horizontal Bar Chart for Template Syntaxes (JavaScript)\nDESCRIPTION: This code snippet initializes a horizontal bar chart using D3.js to visualize the template syntaxes used by Eleventy users. It imports the necessary modules and creates a new HorizontalBar instance with specific configuration options.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-17-community-survey-results.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"https://d3js.org/d3.v7.min.js\";\nimport { HorizontalBar } from \"/static/artificial-chart.js\";\nnew HorizontalBar(\"result-syntax\", \"result-syntax-table\", {\n\tshowLegend: false,\n\tshowInlineBarValues: \"outside\",\n\tvalueType: [\"float\"],\n\tmargin: {\n\t\tleft: 170\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Eleventy to v1.0.0 via npm\nDESCRIPTION: Command to upgrade an existing Eleventy installation to v1.0.0 using npm update.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-01-09-eleventy-one-point-oh.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm update @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Blog Post\nDESCRIPTION: YAML configuration block defining the news title and navigation structure for an Eleventy blog post about MIT's Digital Humanities site launch.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2020-08-11-mit.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: MIT's new Digital Humanities site launches using Eleventy!\neleventyNavigation:\n  parent: Blog\n  key: MIT Digital Humanities\n---\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Source Example (Svelte/HTML/JS)\nDESCRIPTION: Provides a full Svelte component including script, style, and interactive markup for a counter UI with reactive state and a prop. Allows overrides via props and defines handleClick logic. Requires Svelte compiler. Input: export let name, stateful count variable; Output: interactive HTML rendered by Svelte runtime.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script>\\n\\t// using export to allow overrides via props\\n\\texport let name = \\\"world\\\";\\n\\n\\tlet count = 0;\\n\\n\\tfunction handleClick() {\\n\\t\\tcount += 1;\\n\\t}\\n</script>\\n\\n<style>\\n\\th1 {\\n\\t\\tcolor: red;\\n\\t}\\n</style>\\n\\n<h1>Hello {name}</h1>\\n\\n<button on:click=\\\"{handleClick}\\\">\\n\\tClicked {count} {count === 1 ? 'time' : 'times'}\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating 404 Error Page Template in Eleventy (HTML)\nDESCRIPTION: This HTML snippet defines a 404 error page template for use with Eleventy, a static site generator. It leverages front matter metadata to set the title and permalink, rendering as 404.html in the output. The template is self-contained, requires no additional dependencies, and displays a user-friendly message with a suggested navigation link. Inputs are handled via Eleventy’s template data, and the output is a fully static HTML error page. Place this file at the site root to support standard 404 page behavior on compatible hosts.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/not-found.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n---\\ntitle: Oops! Not Found\\npermalink: 404.html\\n---\\n\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n\\t<head>\\n\\t\\t<meta charset=\\\"utf-8\\\" />\\n\\t\\t<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n\\t\\t<title>{{ title }}</title>\\n\\t</head>\\n\\t<body>\\n\\t\\t<h1>{{ title }}</h1>\\n\\t\\t<p>\\n\\t\\t\\tThis is where you should tell the user how to find their content. Maybe on\\n\\t\\t\\tthe <a href=\\\"/\\\">home page?</a>\\n\\t\\t</p>\\n\\t</body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Logging to Console with log Filter in Nunjucks\nDESCRIPTION: Shows how to use the `log` filter in a Nunjucks (Jinja2-compatible) template within Eleventy. Like the Liquid example, the input ('My Title') is output to the console, supporting debugging. This requires Eleventy v0.11.0+ and works identically to its usage in Liquid.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/log.md#2025-04-23_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ \"My Title\" | log }}\n```\n\n----------------------------------------\n\nTITLE: Sample Directory Output from Eleventy (bash)\nDESCRIPTION: This snippet presents a sample console output from running Eleventy with the Directory Output plugin configured. The output displays grouped and sorted directories, file name mappings, file sizes, and build benchmarks. It helps users understand the appearance and format of plugin-enhanced output. This is output text, not script code, and assumes the plugin and config are correctly set up.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/directory-output.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> eleventy-base-blog@6.0.0 build\n> eleventy\n\n↘ _site/                               --                           --       --\n  → about/index.html                   about/index.md            1.8kB    2.7ms\n  ↘ feed/                              --                           --       --\n    • .htaccess                        feed/htaccess.njk         0.1kB    0.2ms\n    • feed.json                        feed/json.njk           106.8kB   17.3ms\n    • feed.xml                         feed/feed.njk           109.8kB    9.8ms\n  → page-list/index.html               page-list.njk             3.2kB    1.1ms\n  ↘ posts/                             --                           --       --\n    → firstpost/index.html             posts/firstpost.md        3.5kB    1.0ms\n    → fourthpost/index.html            posts/fourthpost.md     101.0kB   27.2ms\n    → secondpost/index.html            posts/secondpost.md       3.2kB    5.6ms\n    → thirdpost/index.html             posts/thirdpost.md        4.5kB    7.5ms\n    • index.html                       archive.njk               3.0kB   13.7ms\n  ↘ tags/                              --                           --       --\n    → another-tag/index.html           tags.njk                  2.1kB    0.9ms\n    → number-2/index.html              tags.njk                  2.1kB    0.4ms\n    → posts-with-two-tags/index.html   tags.njk                  2.3kB    0.2ms\n    → second-tag/index.html            tags.njk                  2.5kB    0.5ms\n    • index.html                       tags-list.njk             2.0kB    0.4ms\n  • 404.html                           404.md                    1.9kB    0.4ms\n  • index.html                         index.njk                 2.8kB    1.7ms\n  • sitemap.xml                        sitemap.xml.njk           1.4kB    1.3ms\n[11ty] Copied 3 files / Wrote 18 files in 0.16 seconds (8.9ms each, v1.0.1)\n```\n\n----------------------------------------\n\nTITLE: Defining Another Tag in Eleventy Content (Markdown Front Matter)\nDESCRIPTION: Another example of Markdown front matter for a content file. This defines the post's title and assigns it to the 'personal' tag, contributing to the 'personal' collection in Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/tag-pages.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\ntitle: My Second Post\ntags:\n  - personal\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring PostHTML Rendering Options for Eleventy RSS Plugin (JavaScript)\nDESCRIPTION: This example demonstrates advanced configuration of the Eleventy RSS plugin, specifically setting PostHTML rendering options. By passing 'posthtmlRenderOptions', it customizes how single tags (like <img/>) are rendered (e.g. reverting to default closing tag behavior). Requires '@11ty/eleventy-plugin-rss' v1.1.0+ and knowledge of PostHTML options. Use when you need control over feed HTML output.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/rss.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport pluginRss from \"@11ty/eleventy-plugin-rss\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(pluginRss, {\n\t\tposthtmlRenderOptions: {\n\t\t\tclosingSingleTag: \"default\", // opt-out of <img/>-style XHTML single tags\n\t\t},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Advanced Projects\nDESCRIPTION: This YAML front matter snippet configures the navigation metadata for the 'Advanced' section in the Eleventy documentation. It sets the parent, key, and order for the navigation hierarchy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/advanced.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Eleventy Projects\n  key: Advanced\n  order: 11\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation Metadata using YAML\nDESCRIPTION: This YAML front matter block configures the Eleventy Navigation plugin for the current page. It sets the unique `key` (\"Eleventy Projects\"), the display `title` (\"Guide\"), the `parent` page in the hierarchy (\"Eleventy Documentation\"), and its display `order` (3). This metadata is used by Eleventy to build the site's navigation structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/projects.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Eleventy Projects\n  title: Guide\n  parent: Eleventy Documentation\n  order: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Eleventy Navigation in Frontmatter (YAML)\nDESCRIPTION: This YAML frontmatter defines the navigation structure for the current page in an Eleventy project. It specifies the parent page, the current page's key, and its order in the navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Eleventy Projects\n  key: Configure Templates with Data\n  order: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Colors in Terminal Output\nDESCRIPTION: Commands to disable colorized text in terminal output across different platforms.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/environment-vars.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nNODE_DISABLE_COLORS=1 npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Node.js CPU Profiling Command for Eleventy\nDESCRIPTION: Command to run CPU profiling on Eleventy builds using Node's built-in profiler, generating a .cpuprofile file for analysis\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/debug-performance.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode --cpu-prof ./node_modules/.bin/eleventy --quiet\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for JSNation 2020 Blog Post\nDESCRIPTION: This YAML snippet defines the front matter for a blog post about Eleventy's nomination for the JSNation 2020 Open Source Awards. It sets the news title and configures the Eleventy navigation structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2020-06-15-jsnation-osawards-2020.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: JSNation Open Source Awards 2020\neleventyNavigation:\n  parent: Blog\n  key: JSNation 2020\n---\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for the blog post, setting the news title and navigation structure using eleventyNavigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2019-12-19-logo-homage.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: An Homage to the James Williamson Possum Balloon\neleventyNavigation:\n  parent: Blog\n  key: Logo homage\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Related YouTube Video - 11ty Nunjucks - Markdown\nDESCRIPTION: This snippet uses the 'youtubeEmbed' shortcode in a Nunjucks template block to embed a YouTube video within a <div> tag styled with 'youtube-related'. The shortcode requires a YouTube video ID and a descriptive title. Assumes the 'youtubeEmbed' shortcode is registered in the Eleventy project's configuration. Input is the video ID (\"WuH5QYCdh6w\") and the caption; output is the HTML markup for displaying the video embed inside the containing div.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/migrate.md#2025-04-23_snippet_1\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{%- youtubeEmbed \"WuH5QYCdh6w\", \"Start Your Escape from WordPress Using 11ty (in 3 minutes!)\" -%}\n```\n\n----------------------------------------\n\nTITLE: Adding Upgrade Helper Plugin to Eleventy Configuration - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import the @11ty/eleventy-upgrade-help plugin and add it to the Eleventy config using ES module syntax in the configuration file (such as eleventy.config.js or .eleventy.js). Other plugins should be added before UpgradeHelper, which should be the last plugin in the chain to ensure proper operation. Inputs are the eleventyConfig object and the imported UpgradeHelper dependency; output is a configured Eleventy instance that uses the helper plugin. Requires Node.js, Eleventy v1+ (depending on version), and the installed plugin.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/upgrade-help.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UpgradeHelper from \"@11ty/eleventy-upgrade-help\";\\n\\nexport default function (eleventyConfig) {\\n\\t// If you have other `addPlugin` calls, it’s important that UpgradeHelper is added last.\\n\\televentyConfig.addPlugin(UpgradeHelper);\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Cache Plugin in netlify.toml - TOML\nDESCRIPTION: This TOML snippet configures the netlify-plugin-cache in the netlify.toml file to persist the .cache directory between Netlify builds. It assumes the netlify-plugin-cache dependency has been installed via npm. The configuration registers the plugin and specifies the directory to be cached by Netlify; no direct code input or output is handled, but it impacts build performance and caching. Ensure netlify-plugin-cache is listed in your project's devDependencies and that the paths array includes all folders to be cached as needed.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/deployment.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[plugins]]\\npackage = \\\"netlify-plugin-cache\\\"\\n\\n  [plugins.inputs]\\n  paths = [ \\\".cache\\\" ]\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy Globally with npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the Eleventy static site generator globally on your system using the npm package manager with the -g (global) flag. No project-level dependencies are required; you just need Node.js and npm installed. The command downloads and installs the global eleventy CLI, making it accessible from any directory. Use global installation only if you do not need per-project version management.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/global-installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Setting Global Concurrency for Eleventy Fetch in JavaScript\nDESCRIPTION: This snippet sets the global concurrency value for @11ty/eleventy-fetch, controlling the maximum number of concurrent requests processed. The default is 10, but this example sets it to 4. Input is the desired concurrency integer; output is an updated concurrency setting for future fetch operations. Requires @11ty/eleventy-fetch as a dependency.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Fetch from \"@11ty/eleventy-fetch\";\nFetch.concurrency = 4; // default is 10\n```\n\n----------------------------------------\n\nTITLE: Displaying Image with Nunjucks Template Tags\nDESCRIPTION: Uses the Eleventy image shortcode to display the new mascot image with alternative text. The image is wrapped in a styled div with specific CSS properties for presentation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-10-18-new-mascot-from-geri-coady.md#2025-04-23_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n<div style=\"display: inline-block; border-radius: 1em; background-color: hsl(229deg 40% 38%); border: .75em solid hsl(229deg 40% 28%); box-shadow: -10px 10px 80px rgb(0 0 0 / 10%);\">\n  {% image \"./src/img/possum-geri.png\", \"3 possums suspended from a red balloon\" %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Eleventy Navigation HTML using Liquid Filters\nDESCRIPTION: This Liquid snippet dynamically generates HTML for a navigation section. It retrieves the navigation data associated with the key \"Eleventy Projects\" using the `nav` filter, formats it into HTML using the `eleventyNavigationToHtml` filter (with `showExcerpt` enabled), and ensures the resulting HTML is rendered correctly using the `safe` filter. This requires the Eleventy Navigation plugin and likely a custom `nav` filter.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/projects.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{{ \"Eleventy Projects\" | nav | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Paginated Permalink using Page Item - YAML Front Matter using Liquid or Nunjucks\nDESCRIPTION: Configures permalink output paths based on paginated data values, using universal 'slug' transformation for SEO-friendly URLs. This example demonstrates how to embed the value of the current page's data in the output path, applicable in both Liquid and Nunjucks.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n---\npagination:\n  data: testdata\n  size: 1\ntestdata:\n  - My Item\npermalink: \\\"different/{{ pagination.items[0] | slugify }}/index.html\\\"\n---\n```\n\n----------------------------------------\n\nTITLE: Resulting Data Structure With Deep Data Merge\nDESCRIPTION: This JSON snippet shows the resulting data structure when Deep Data Merge is enabled, demonstrating how data from both the template and layout are combined.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-deep-merge.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"This is a Good Blog Post\",\n\t\"author\": \"Zach\",\n\t\"tags\": [\"CSS\", \"HTML\", \"JavaScript\"],\n\t\"eleventyNavigation\": {\n\t\t\"key\": \"my-key\",\n\t\t\"parent\": \"test\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe in Markdown/HTML\nDESCRIPTION: This code snippet embeds a YouTube video using an iframe element with proper attributes for security and accessibility. The iframe is configured with dimensions, a source URL with privacy-enhanced mode (youtube-nocookie), and appropriate attributes for playback options.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-11-28-state-of-eleventy-2022.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/EZfNr-YblBE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Installing cross-env Package\nDESCRIPTION: Command to install the cross-env package for cross-platform environment variable support.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/environment-vars.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install cross-env\n```\n\n----------------------------------------\n\nTITLE: Server-Side Comments Example\nDESCRIPTION: Demonstrates WebC's server-side comment syntax that gets stripped from output.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!--- WebC will remove this --->\n<!-- This will *not* be removed and is rendered to the output -->\n<!------- WebC will remove this, too ------->\n```\n\n----------------------------------------\n\nTITLE: Twitter URL Canonicalization Using Filter\nDESCRIPTION: Link to a Twitter post announcing a previous milestone, using a custom canonicalTwitterUrl filter to ensure the URL is properly formatted.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-02-23-eight-million.md#2025-04-23_snippet_3\n\nLANGUAGE: liquid\nCODE:\n```\n{{ \"https://twitter.com/eleven_ty/status/1338210611797389312\" | canonicalTwitterUrl }}\n```\n\n----------------------------------------\n\nTITLE: Setting Eleventy Image Concurrency Limit (JavaScript)\nDESCRIPTION: This code sets the concurrency limit for the '@11ty/eleventy-img' plugin, controlling how many images are processed in parallel. The default is determined by operating system parallelism, but here it is set to 4 explicitly. This is useful when optimizing build system performance or working with resource-constrained environments. Requires importing the Eleventy Image module.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Image from \"@11ty/eleventy-img\";\nImage.concurrency = 4; // default is between 8 and 16 based on os.availableParallelism()\n```\n\n----------------------------------------\n\nTITLE: Requiring Eleventy Plugins with CommonJS - Node.js JavaScript\nDESCRIPTION: This Node.js CommonJS code snippet demonstrates how to require Eleventy's core plugins (I18nPlugin, RenderPlugin, HtmlBasePlugin) from the @11ty/eleventy package in a traditional synchronous manner. This pattern should be used in Eleventy configuration files (.eleventy.js, eleventy.config.js, or eleventy.config.cjs) for Eleventy versions prior to v3.0 or in certain CJS scenarios. Dependencies include @11ty/eleventy installed in the project. Key parameters are the plugin imports and the eleventyConfig configuration argument. Outputs a valid Eleventy configuration function. Not compatible with ESM-only Eleventy packages or ESM project setups.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-12-17-canary-eleventy-v3.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Any combination of these\nconst { I18nPlugin, RenderPlugin, HtmlBasePlugin } = require(\"@11ty/eleventy\");\n\nmodule.exports = function (eleventyConfig) {\n\t// …\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Eleventy Version Globally - Bash\nDESCRIPTION: This snippet shows how to verify the currently installed global version of Eleventy by running the version command from the terminal. It assumes Eleventy has already been installed globally. The expected output displays the installed version number. This command works in any directory where the global eleventy CLI is available.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/global-installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neleventy --version\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows cmd.exe\nDESCRIPTION: Command to set environment variables when running Eleventy in Windows command prompt.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/environment-vars.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset MY_ENVIRONMENT=production & npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: EJS Include Syntax Update\nDESCRIPTION: Updated EJS include syntax for Eleventy v1.0.0, replacing the old style with the new format including dashes for proper rendering.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-01-09-eleventy-one-point-oh.md#2025-04-23_snippet_3\n\nLANGUAGE: ejs\nCODE:\n```\n<%- include('/included') -%>\n```\n\n----------------------------------------\n\nTITLE: Displaying Template Dependency Processing Order in Eleventy\nDESCRIPTION: A reversed ordered list showing the sequence in which Eleventy processes templates based on their dependencies, particularly focusing on how collections and pagination affect the processing order. The list is arranged in reverse chronological order with item 1 being processed first.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/advanced-order.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ol reversed>\n  <li>Templates that use Pagination and target <code>collections.all</code></li>\n  <li>Templates that use Pagination and target <code>collections</code></li>\n  <li>Templates that use Pagination and target a <a href=\"/docs/collections/#advanced-custom-filtering-and-sorting\">Configuration API-added collection</a></li>\n  <li>Templates that use Pagination and target any other Collection (those <a href=\"/docs/collections/#add-to-a-collection-using-tags\">supplied via <code>tags</code></a>)</li>\n  <li>Templates that have <code>tags</code> specified</li>\n  <li>Templates that have no dependencies or who are excluded via <a href=\"/docs/collections/#how-to-exclude-content-from-collections\"><code>eleventyExcludeFromCollections</code></a></li>\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Embedding an Image using Eleventy Image Shortcode in Nunjucks\nDESCRIPTION: This Nunjucks snippet utilizes a custom Eleventy `image` shortcode to embed an image (`sevenmilgraph.png`). It passes the image source path, alternative text, responsive image widths (`[350, 700]`), an empty string likely for CSS classes, and the `sizes` attribute (`\"100vw\"`) to the shortcode for processing and rendering.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-10-23-seven-million.md#2025-04-23_snippet_1\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% image \"./src/blog/sevenmilgraph.png\", \"A line chart showing Eleventy’s downloads per year\", [350, 700], \"\", \"100vw\" %}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing Eleventy Plugins in CommonJS - Node.js JavaScript (ESM Compatibility)\nDESCRIPTION: This Node.js code snippet shows how to asynchronously import Eleventy's core plugins (I18nPlugin, RenderPlugin, HtmlBasePlugin) using await import() inside an async module.exports function. This pattern is required for Eleventy v3.0 when the @11ty/eleventy package is published as ESM-only, since require() cannot load ESM modules. Dependencies include Node.js 18+, an async-capable Eleventy configuration file (using async module.exports), and @11ty/eleventy installed. The eleventyConfig parameter is passed to the configuration function. Returns an updated Eleventy configuration with proper ESM imports for plugins.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-12-17-canary-eleventy-v3.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Eleventy 3.0 supports async configuration callbacks:\nmodule.exports = async function (eleventyConfig) {\n\t// Any combination of these\n\tconst { I18nPlugin, RenderPlugin, HtmlBasePlugin } = await import(\n\t\t\"@11ty/eleventy\"\n\t);\n\n\t// …\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenGraph Card Link in HTML\nDESCRIPTION: Generates an HTML link with an OpenGraph image card for the 11ty conference website. The image is loaded lazily and includes accessibility attributes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-01-30-conference.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://conf.11ty.dev\" class=\"elv-externalexempt opengraph-card\">\n  <img src=\"https://v1.opengraph.11ty.dev/https%3A%2F%2Fconf.11ty.dev%2F/medium/\" alt=\"The 11ty International Symposium on Making Web Sites Real Good\" loading=\"lazy\" decoding=\"async\" width=\"650\" height=\"341\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Using Globs with Custom Output Directories\nDESCRIPTION: Demonstrates how to use glob patterns with custom output directories, which doesn't maintain the original directory structure. This approach is slower than non-glob methods.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/copy.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Output directory: _site\n\n\t// Find and copy any `jpg` files in any folder to _site/img\n\t// Does not keep the same directory structure.\n\televentyConfig.addPassthroughCopy({ \"**/*.jpg\": \"img\" });\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Output for 11ty Pagination Navigation\nDESCRIPTION: The rendered HTML output for the pagination navigation component. Shows the structure with proper ARIA attributes and semantic HTML for accessibility support.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<nav aria-labelledby=\"my-pagination\">\n\t<h2 id=\"my-pagination\">This is my Pagination</h2>\n\t<ol>\n\t\t<li>First</li>\n\t\t<li>Previous</li>\n\t\t<li><a href=\"/test-array/\" aria-current=\"page\">Page 1</a></li>\n\t\t<li><a href=\"/test-array/1/\">Page 2</a></li>\n\t\t<li><a href=\"/test-array/2/\">Page 3</a></li>\n\t\t<li><a href=\"/test-array/1/\">Next</a></li>\n\t\t<li><a href=\"/test-array/2/\">Last</a></li>\n\t</ol>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Rendering Advanced Eleventy Navigation with Nunjucks\nDESCRIPTION: This Nunjucks template snippet generates an HTML navigation list for advanced Eleventy projects. It uses the 'nav' filter and 'eleventyNavigationToHtml' function to create a hierarchical list with excerpts.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/advanced.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n{{ \"Advanced\" | nav | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}\n```\n\n----------------------------------------\n\nTITLE: Template Consuming Async JavaScript Template Function in Eleventy - JavaScript\nDESCRIPTION: Exports an async template function using 'await' to call a registered asynchronous JavaScript Template Function from Eleventy config. Input: data; output: dynamically generated HTML. Requires that the function has previously been registered.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default async function (data) {\n\treturn `<h1>${await this.myAsyncFunction(data.a, data.b)}</h1>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image with Nunjucks Template Syntax\nDESCRIPTION: Nunjucks template code that renders an image of the mascot with alt text. It uses Eleventy's image shortcode to process and display the SVG image with responsive sizing options.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-11-03-mascot-david.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% image \"./src/img/mascots/david.svg\", \"A possum in glasses suspended from a red balloon\", [800] %}\n```\n\n----------------------------------------\n\nTITLE: Example Basic WebC File Structure\nDESCRIPTION: A basic example of a `.webc` file containing standard HTML markup. This demonstrates that WebC files are fundamentally HTML and can include doctype, head, and body elements. When processed by Eleventy with the WebC plugin, this file will be rendered as HTML, potentially bundling associated CSS/JS if components are used.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/webc.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>WebC Example</title>\n\t</head>\n\t<body>\n\t\tWebC *is* HTML.\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Language-Based Redirects with Netlify TOML - TOML\nDESCRIPTION: This TOML snippet sets up language-aware URL redirects using Netlify's [[redirects]] structure. It captures three cases: removing the '/en/' language prefix, conditionally redirecting all URLs to their Spanish versions when the user's browser preference is Spanish, and setting a default redirect to English content. Dependencies include Netlify hosting with TOML-based configuration. Each redirect can include status codes, force flags, and browser language-based conditions, providing granular control over i18n routing.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/i18n.md#2025-04-23_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n# Redirect any URLs with the language code in them already\\n[[redirects]]\\n  from = \"/en/*\"\\n  to = \"/:splat\"\\n  status = 301\\n  force = true\\n\\n# Important: Per shadowing rules, URLs for the\\n# _non-default_ language-specific content files\\n# are served without redirects.\\n\\n# Redirect for end-user’s browser preference override\\n[[redirects]]\\n  from = \"/*\"\\n  to = \"/es/:splat\"\\n  status = 302\\n  conditions = {Language = [\"es\"]}\\n\\n# Default\\n[[redirects]]\\n  from = \"/*\"\\n  to = \"/en/:splat\"\\n  status = 200\n```\n\n----------------------------------------\n\nTITLE: Rendering Screenshot with Liquid Template in Eleventy\nDESCRIPTION: Uses the getScreenshotHtml shortcode to render a screenshot of the survey form with a link to the survey itself.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-11-community-survey.md#2025-04-23_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n<a href=\"https://forms.gle/zFA4Jno1cfT8nt9J8\" style=\"display: block; max-width: 16em\">{% getScreenshotHtml \"Eleventy Community Survey\", \"https://forms.gle/zFA4Jno1cfT8nt9J8\" %}</a>\n```\n\n----------------------------------------\n\nTITLE: Embedding Image in Markdown for Survey Results Visualization\nDESCRIPTION: This Markdown snippet embeds an image of a bubble chart showing the results of the Jamstack survey. The image includes alt text describing the chart's contents, which compares various web frameworks based on usage and satisfaction scores.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2020-05-27-jamstack-survey.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"/blog/jamstack-2020-results.png\" alt=\"A bubble chart showing web frameworks. On the horizontal axis, total respondents reporting usage, they are ordered as: React (63%), then jQuery, express, Gatsby, Vue, Next, Nuxt, AngularJS, Angular 2+, Huge, Svelte 11ty (11%). On the vertical axis, satisfaction score, they are ordered: 11ty, Nuxt, Svelte, Next, Vue, Gatsby, React, Express, Hugo, Angular 2+, jQuery, AngularJS.\" class=\"sites-screenshot\" style=\"max-width: 600px\">\n```\n\n----------------------------------------\n\nTITLE: Calculating Yearly Donation Estimate in Nunjucks\nDESCRIPTION: Computes and displays the estimated yearly donations based on monthly recurring amounts.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/admin.md#2025-04-23_snippet_6\n\nLANGUAGE: nunjucks\nCODE:\n```\n{{ (opencollectiveMonthly.recurringAmount * 12) | displayPrice }}\n```\n\n----------------------------------------\n\nTITLE: Setting Event Emitter Mode\nDESCRIPTION: Shows how to configure the event emitter mode to run events sequentially instead of in parallel.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/events.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig){\n\televentyConfig.setEventEmitterMode(\"sequential\");\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter with Liquid Template in 11ty Blog Post\nDESCRIPTION: Front matter configuration for an 11ty blog post with external URL reference and navigation settings, followed by a Liquid template callout and markdown content for the sustainability campaign.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-05-22-sustainability-fundraising.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: \"Help 11ty become sustainable in 2024\"\neleventyNavigation:\n  parent: Blog\nexternal_url: https://www.zachleat.com/web/independent-sustainable-11ty/\n---\n{% callout %}<strong>Updated September 11, 2024</strong>: As <a href=\"/blog/eleventy-font-awesome/\">11ty is now joining Font Awesome</a>, we're winding down our sustainability fundraising campaign. I sincerely appreciate everyone that donated!{% endcallout %}\n\nRead [this post about 11ty's goal of being fully independent and sustainable in 2024]({{ external_url }}):\n\n<a href=\"{{ external_url }}\" class=\"elv-externalexempt opengraph-card\" style=\"max-width: 25em\">\n  <img src=\"https://v1.screenshot.11ty.dev/{{ external_url | urlencode }}/opengraph/\" alt=\"So you want to speak at the 11ty International Symposium on Making Web Sites Real Good\" loading=\"lazy\" decoding=\"async\" width=\"650\" height=\"341\">\n</a>\n\n11ty is now operating independently, with full time development and maintenance funded by our Open Collective supporters. We need your help to keep going! We have a goal of $6000 USD recurring monthly budget.\n\nIndividual contributions are great (every bit helps) but we _need_ more businesses to help. We're also open to corporate partners: Developer Tools, Web Hosting (Jamstack, Static Sites, et al), Image Optimization (we're about to ship a best-in-class Image Optimization plugin that would pair quite nicely with a hosted service), Content Management Systems, and Web Performance and Monitoring.\n\n* **Head directly to [our Open Collective](https://opencollective.com/11ty) to start your recurring donation.** We also accept [GitHub Sponsors](https://github.com/sponsors/11ty).\n* If you have questions or want to set up a chat to discuss an opportunity, [contact me directly](mailto:zach@11ty.dev)\n* Read more on [_zachleat.com: I Need Your Help to Make 11ty Fully Independent And Sustainable in 2024_](https://www.zachleat.com/web/independent-sustainable-11ty/)\n```\n\n----------------------------------------\n\nTITLE: Passthrough by File Extension in Eleventy\nDESCRIPTION: Shows how to add additional file extensions to Eleventy's template formats, causing them to be copied to the output folder. This is typically slower than using addPassthroughCopy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/copy.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.setTemplateFormats([\n\t\t\"md\",\n\t\t\"css\", // css is not yet a recognized template extension in Eleventy\n\t]);\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Eleventy Shortcode - Nunjucks\nDESCRIPTION: Embeds a YouTube video in the page using Eleventy's custom 'youtubeEmbed' shortcode. This requires the Eleventy static site generator and assumes the shortcode is properly registered in the project's configuration. The shortcode takes a single parameter, the YouTube video ID, to render an embedded YouTube player. The surrounding context is a blog post, and this snippet injects a celebratory video relevant to the post's topic.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-04-22-three-million.md#2025-04-23_snippet_0\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{% youtubeEmbed \"qP3GDtn-0BQ\" %}\n```\n\n----------------------------------------\n\nTITLE: Initializing Horizontal Bar Chart for Paid Hosting Types (JavaScript)\nDESCRIPTION: This code snippet initializes a horizontal bar chart using D3.js to visualize the types of paid hosting used by Eleventy users. It imports the necessary modules and creates a new HorizontalBar instance with specific configuration options.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-17-community-survey-results.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"https://d3js.org/d3.v7.min.js\";\nimport { HorizontalBar } from \"/static/artificial-chart.js\";\nnew HorizontalBar(\"result-paid\", \"result-paid-table\", {\n\tshowLegend: false,\n\tshowInlineBarValues: \"outside\",\n\tvalueType: [\"float\"],\n\tmargin: {\n\t\tleft: 170\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the `eleventy` Variable Structure - JavaScript\nDESCRIPTION: This snippet defines the structure of the `eleventy` variable that Eleventy makes available in templates, detailing properties such as engine version, generator string, environment details, and normalized directories information. Dependencies: None for reading, but property availability depends on the Eleventy version. Inputs: n/a; Outputs: n/a; use is mostly for introspection in templates or for meta tag generation. Limitations: Directory structure and keys may change with versions; check project documentation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-eleventy-supplied.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst eleventy = {\n\n\t// Eleventy version\n\tversion: \"1.0.1\",\n\n\t// For use with `<meta name=\"generator\">`\n\tgenerator: \"Eleventy v1.0.1\",\n\n\t// Read more about their `process.env` counterparts below\n\tenv: {\n\t\t// Absolute path to the directory in which\n\t\t// you’ve run the Eleventy command.\n\t\troot: \"/Users/zachleat/myProject/\",\n\n\t\t// Absolute path to the current config file\n\t\tconfig: \"/Users/zachleat/myProject/.eleventy.js\",\n\n\t\t// The method, either `cli` or `script`\n\t\tsource: \"cli\",\n\n\t\t// One of `serve`, `watch`, or `build`\n\t\trunMode: \"build\", // New in {{ \"2.0.0-beta.2\" | coerceVersion }}\n\t},\n\n\t// Project root-relative normalized paths, new in {{ \"3.0.0-alpha.6\" | coerceVersion }}\n\tdirectories: {\n\t\t\"input\": \"./\",\n\t\t\"includes\": \"./_includes/\",\n\t\t\"data\": \"./_data/\",\n\t\t\"output\": \"./_site/\"\n\t},\n\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Pagination Navigation with CommonJS in 11ty\nDESCRIPTION: A CommonJS module implementation for pagination navigation in 11ty. Demonstrates how to create the navigation structure using the CommonJS module format.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination/nav.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{%- include \"snippets/pagination/nav/combined.cjs\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Matter in Markdown with YAML\nDESCRIPTION: YAML front matter that configures the page's metadata, including the news title and Eleventy navigation properties that establish the blog post's parent-child relationship in the site navigation.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-11-03-mascot-david.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: A new Eleventy mascot from David Neal!\neleventyNavigation:\n  parent: Blog\n  key: Newer mascot\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Frontmatter for Certification Success Page\nDESCRIPTION: YAML frontmatter that configures the page properties for an Eleventy certification success page, including navigation, permalink settings, and collection exclusion flags.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2025-01-13-certification-result.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: Eleventy Super Professional Linkedin Certification\neleventyNavigation:\n  parent: Blog\npermalink: /blog/certification/success/\neleventyExcludeFromCollections: true\nhideRelatedBlogPosts: true\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Timeouts in Eleventy Screenshot API URL\nDESCRIPTION: Shows the URL format for setting a custom timeout (in seconds) for the screenshot request using the `_timeout` parameter, appended to the URI-encoded URL path segment. The value must be between 3 (minimum) and 9 (maximum) seconds. If the request times out, the service attempts to return the partially rendered screenshot or a default logo.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/screenshots.md#2025-04-23_snippet_3\n\nLANGUAGE: url\nCODE:\n```\n/:url/_timeout:3/\n/:url/_timeout:9/\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata using YAML\nDESCRIPTION: This YAML front matter block defines metadata for the blog post. It sets the display title (`newstitle`) to \"Two Million npm Downloads!\" and configures its position in the site navigation using `eleventyNavigation`, specifying that it belongs under the 'Blog' parent item.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-09-03-2million.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: Two Million npm Downloads!\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Blog Post Front Matter in Markdown\nDESCRIPTION: This snippet shows the front matter configuration for an Eleventy blog post. It sets the news title and configures the navigation parent for the post.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-03-20-newstack.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: \"The Need for Speed: Why Eleventy Leaves Bundlers Behind\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript Dependency Watching in Eleventy\nDESCRIPTION: Demonstrates how to disable the default behavior of watching JavaScript dependencies in templates, data files, or configuration. By default, Eleventy spiders JavaScript dependencies and watches them too.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/watch-serve.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\t// Enabled by default\n\televentyConfig.setWatchJavaScriptDependencies(false);\n};\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output from a Custom Shortcode\nDESCRIPTION: This HTML snippet displays the expected output generated by the `user` shortcode when called with the example arguments \"Zach Leatherman\" and \"zachleat\".\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"user\">\n\t<div class=\"user_name\">Zach Leatherman</div>\n\t<div class=\"user_twitter\">@zachleat</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sample CSS for Styling Diff Highlights\nDESCRIPTION: Provides example CSS rules for styling the diff highlighting output generated by the plugin using Prism's `diff-highlight` feature. It includes styles for inserted and deleted lines (`token.inserted`, `token.deleted`), makes line prefixes (`+`, `-`) unselectable, and suggests optional full-width background colors.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/syntaxhighlight.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.token.deleted {\n\tbackground-color: hsl(350deg 100% 88% / 47%);\n}\n.token.inserted {\n\tbackground-color: hsl(120deg 73% 75% / 35%);\n}\n\n/* Make the + and - characters unselectable for copy/paste */\n.token.prefix.unchanged,\n.token.prefix.inserted,\n.token.prefix.deleted {\n\t-webkit-user-select: none;\n\tuser-select: none;\n}\n\n/* Optional: full-width background color */\n.token.inserted:not(.prefix),\n.token.deleted:not(.prefix) {\n\tdisplay: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Horizontal Bar Chart for Official Plugins (JavaScript)\nDESCRIPTION: This code snippet initializes a horizontal bar chart using D3.js to visualize the official plugins used by Eleventy users. It imports the necessary modules and creates a new HorizontalBar instance with specific configuration options.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-17-community-survey-results.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"https://d3js.org/d3.v7.min.js\";\nimport { HorizontalBar } from \"/static/artificial-chart.js\";\nnew HorizontalBar(\"result-plugins\", \"result-plugins-table\", {\n\tshowLegend: false,\n\tshowInlineBarValues: \"outside\",\n\tvalueType: [\"float\"],\n\tmargin: {\n\t\tleft: 170\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Project Table with Eleventy Nunjucks Templating - nunjucks\nDESCRIPTION: This snippet uses Nunjucks templating within Eleventy to generate an HTML table by looping through the 'builtwith' collection after shuffling its order, filtering out disabled items, and ensuring only sites with a 'source_url' are displayed. It conditionally displays links using site metadata and injects avatars for each project. Dependencies include Eleventy configuration to provide the 'builtwith' collection and the 'shuffle', 'displayUrl', and 'communityavatar' filters/macros. Inputs are the 'builtwith' collection and its properties; outputs are rendered HTML table rows for each valid site. Constraints: only enabled sites with a 'source_url' are included; macros and filters must be defined elsewhere in the Eleventy project.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/samples.md#2025-04-23_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% for key, site in builtwith | shuffle -%}\n{% if site.disabled != true and site.source_url -%}\n    <tr>\n      <td>{% if site.url %}<a href=\"{{ site.url }}\">{% endif %}{% communityavatar site.opened_by %}{{ site.url | displayUrl }}{% if site.url %}</a>{% endif %}</td>\n      <td>{% if site.source_url %}<a href=\"{{ site.source_url }}\" class=\"minilink\">Source Code</a>{% endif %}</td>\n    </tr>\n{% endif -%}\n{% endfor -%}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue.js Apps with <is-land> and Script Module (HTML/JS)\nDESCRIPTION: Integrates Vue.js into an <is-land> container using an inline module script (type=module/island) that bootstraps a Vue instance after hydration triggers. Requires Vue.js via CDN and an importable environment. Inputs: <div id=\\\"vue-app\\\"> with template content, script importing createApp; Outputs: Vue-powered, hydrated markup replacing pre-JS content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<is-land on:visible>\\n\\t<div id=\\\"vue-app\\\">Hello from <span v-html=\\\"name\\\">pre-JS</span></div>\\n\\n\\t<script type=\\\"module/island\\\">\\n\\t\\timport { createApp } from \\\"https://unpkg.com/vue@3.2.36/dist/vue.esm-browser.prod.js\\\";\\n\\n\\t\\tcreateApp({\\n\\t\\t\\tdata: () => ({ name: \\\"post-JS\\\" })\\n\\t\\t}).mount(\\\"#vue-app\\\")\\n\\t</script>\\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Including a Partial Template with Nunjucks\nDESCRIPTION: Nunjucks include statement that imports a partial template named 'mascots.njk', which likely displays a collection or gallery of all mascots in the Eleventy Mascot Series.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-11-03-mascot-david.md#2025-04-23_snippet_2\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"mascots.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for Sites Display\nDESCRIPTION: Imports CSS styling for the author's sites section using Nunjucks include syntax to pull in styles from a component file.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/authors/author-pages.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n<style>{% include \"components/page-sites.css\" %}</style>\n```\n\n----------------------------------------\n\nTITLE: Exporting Class with Permalink String in Eleventy Template - JavaScript\nDESCRIPTION: Exports a class whose 'data' method sets a static permalink for the generated output. No dependencies; useful to control write location. Input: ignored, output: whatever 'render' returns is saved at specified permalink path.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Test {\n\tdata() {\n\t\treturn {\n\t\t\t// Writes to \"/my-permalink/index.html\"\n\t\t\tpermalink: \"/my-permalink/\",\n\t\t};\n\t}\n\n\trender(data) {\n\t\t/* … */\n\t}\n}\n\nexport default Test;\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output of Paired Shortcode\nDESCRIPTION: This HTML snippet shows the expected output generated by using the paired 'user' shortcode as demonstrated in the previous Handlebars usage example. It includes the user's name, Twitter handle, and the bio content provided between the shortcode tags.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/handlebars.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"user\">\n\t<div class=\"user_name\">Zach Leatherman</div>\n\t<div class=\"user_twitter\">@zachleat</div>\n\t<div class=\"user_bio\">Zach likes to take long walks on Nebraska beaches.</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for 11ty Blog Post\nDESCRIPTION: YAML configuration block defining the blog post metadata including title, navigation parent, and external URL reference for the speaker submission form.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-02-23-conference-cfp.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"We want you to speak at the 11ty Conference!\"\neleventyNavigation:\n  parent: Blog\nexternal_url: https://docs.google.com/forms/d/e/1FAIpQLScdwhO1zfEBvl8mVAJQLWbK0EylD4yPCBpe3Lanz8SvFPI9Xg/viewform\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing eleventy.contentMap Event Handler\nDESCRIPTION: Shows how to implement the contentMap event that provides mapping between input paths and output URLs.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/events.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\televentyConfig.on(\"eleventy.contentMap\", async ({ inputPathToUrl, urlToInputPath }) => {\n\t\t// inputPathToUrl is an object mapping input file paths to output URLs\n\t\t// urlToInputPath is an object mapping output URLs to input file paths\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Footer Structure in Eleventy Layout\nDESCRIPTION: This snippet shows a basic HTML structure for a footer section within an Eleventy layout file. It serves as a starting point before adding the dynamic 'Edit on GitHub' link.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/edit-on-github-links.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n    …\n    <footer>\n      © 2019 Eleventy\n    </footer>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Eleventy Navigation and Permalink (YAML)\nDESCRIPTION: This YAML front matter block configures metadata for an Eleventy page. The `eleventyNavigation` object defines settings for the Eleventy Navigation plugin, assigning the page the key \"Ecosystem\", setting its display order to 2, and preventing automatic URL generation (`url: false`). The `permalink: false` setting instructs Eleventy not to create a separate output file for this content, indicating it might be a data file or a page used for collection purposes rather than direct viewing.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/sidebar-ecosystem.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Ecosystem\n  order: 2\n  url: false\npermalink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Filtering and Categorizing Featured and Community Starters - Nunjucks/HTML\nDESCRIPTION: This code snippet displays two groups of starter projects: featured starters (not disabled, marked as featured) and community contributions (not disabled, not official, not featured). It leverages Nunjucks control flow to filter items and conditionally includes the site card template. Dependencies are 'starters', 'speedlifyStarters', and the include macro; inputs are project data objects and their flags, and output is a visually categorized display with randomly ordered community starters.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/starter.md#2025-04-23_snippet_1\n\nLANGUAGE: Nunjucks\nCODE:\n```\n<div class=\"sites-vert sites-vert--lg\">\n  <div class=\"lo-grid\" style=\"--fl-gap-v: 5em;\">\n{%- for site in starters | sortObjectByOrder %}\n{%- if site.disabled != true and site.featured %}\n{%- set siteData = speedlifyStarters.data[site.demo] or speedlifyStarters.data[site.url] %}\n  {% include \"site-card.njk\" %}\n{%- endif %}{%- endfor %}\n{%- for name, site in starters | shuffle %}\n{%- if site.disabled != true and not site.official and not site.featured %}\n{%- set siteData = speedlifyStarters.data[site.demo] or speedlifyStarters.data[site.url] %}\n  {% include \"site-card.njk\" %}\n{%- endif %}{%- endfor %}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Lit Custom Element Source Code (JavaScript)\nDESCRIPTION: Provides the implementation for a Lit custom element: defines a 'lit-component' element with a 'name' property. Utilizes LitElement's static properties and render to display a dynamic greeting. Dependencies: lit-core.min.js via CDN. Inputs: property values; Outputs: paragraph greeting rendered by Lit upon hydration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport {\\n\\thtml,\\n\\tcss,\\n\\tLitElement,\\n} from \\\"https://cdn.jsdelivr.net/gh/lit/dist@2/core/lit-core.min.js\\\";\\n\\ncustomElements.define(\\n\\t\\\"lit-component\\\",\\n\\tclass extends LitElement {\\n\\t\\tstatic properties = {\\n\\t\\t\\tname: { type: String },\\n\\t\\t};\\n\\n\\t\\trender() {\\n\\t\\t\\treturn html`<p>Hello, ${this.name || \\\"Stranger\\\"}!</p>`;\\n\\t\\t}\\n\\t}\\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy Canary Release via npm - Shell\nDESCRIPTION: This shell command installs the latest Eleventy v3.0 alpha release from the canary channel using npm. The –save-exact flag ensures that the exact version specified is recorded in package.json, preventing accidental upgrades to newer releases that might break compatibility. Requires npm and Node.js ≥18. Outputs updated project dependencies in package.json with explicit version pinning.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-12-17-canary-eleventy-v3.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @11ty/eleventy@canary --save-exact\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Eleventy Blog Post\nDESCRIPTION: Defines the metadata and navigation structure for an Eleventy blog post using YAML frontmatter syntax. Sets the news title and navigation parent.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2020-10-15-state-of-eleventy-2020.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"The State of Eleventy (2020) in Two Minutes\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing eleventy.after Event Handler\nDESCRIPTION: Shows how to implement the eleventy.after event that runs after each build completes. Includes async support and access to build results.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/events.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(eleventyConfig) {\n\televentyConfig.on(\n\t\t\"eleventy.after\",\n\t\tasync ({ directories, results, runMode, outputMode }) => {\n\t\t\t// Run me after the build ends\n\t\t}\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Jamstack Survey Blog Post\nDESCRIPTION: This YAML snippet sets up the front matter for a blog post about the Jamstack Community Survey 2021 results. It defines the news title and sets up the Eleventy navigation structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-10-05-jamstack-survey-2021.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"Jamstack Community Survey 2021 Results\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy v2.0 Beta via npm\nDESCRIPTION: Shell commands to install the beta version of Eleventy v2.0 either locally in a project or globally on your system. The beta release is available on the @beta npm tag.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-01-18-eleventy-v2-beta.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Local project\nnpm install @11ty/eleventy@beta\n\n# Global install\nnpm install @11ty/eleventy@beta -g\n```\n\n----------------------------------------\n\nTITLE: Using a Plugin with Custom Init Arguments\nDESCRIPTION: Demonstrates how to use a plugin that accepts custom initialization arguments.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/create-plugin.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(require(\"./fancy-plugin.js\"), {\n\t\tinit: function (initArguments) {\n\t\t\t// `this` is the eleventyConfig object\n\t\t\t// initArguments will be the `myInitArguments` object from above\n\t\t},\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Including Mascots List with Nunjucks Include\nDESCRIPTION: Includes a separate template file named 'mascots.njk' that likely contains a list or gallery of all mascots in the Eleventy Mascot Series.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-10-18-new-mascot-from-geri-coady.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"mascots.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Using Pre-JS Fallback Content in <is-land> (HTML)\nDESCRIPTION: Illustrates how to provide fallback, static content for web components inside <is-land> for users without JavaScript, enabling progressive enhancement. Inputs: static HTML inside a custom component wrapped by <is-land>. Outputs: visible non-hydrated content before JS loads.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<is-land on:visible on:idle>\\n\\t<vanilla-web-component>\\n\\t\\tPut your pre-JS fallback content in your web component.\\n\\t</vanilla-web-component>\\n</is-land>\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation and Permalink in YAML\nDESCRIPTION: This YAML Front Matter block configures navigation metadata for an Eleventy page using the `eleventy-navigation` plugin. It nests the page under the \"Introduction\" parent, assigns it the unique key \"Learn\", and sets its display `order` to 1 within its siblings. The `permalink: false` setting explicitly tells Eleventy not to generate an output HTML file for this source file, making it useful for organizing content structure or holding data without creating a corresponding webpage.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/sidebar-learn.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Introduction\n  key: Learn\n  order: 1\npermalink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output from a Paired Shortcode\nDESCRIPTION: This HTML snippet shows the resulting output from the `user2` paired shortcode example. It includes the arguments and the content enclosed within the shortcode tags, formatted into the defined HTML structure.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"user\">\n\t<div class=\"user_name\">Zach Leatherman</div>\n\t<div class=\"user_twitter\">@zachleat</div>\n\t<div class=\"user_bio\">Zach likes to take long walks on Nebraska beaches.</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Nunjucks Template for Dynamically Rendering Blog Posts in Eleventy\nDESCRIPTION: A Nunjucks template loop that iterates through blog posts in the 'blog' collection and renders them as list items. It includes date formatting and conditional styling for highlighted posts.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/blog.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% for news in collections.blog | reverse %}\n- <small><code>{{ news.date | newsDate(\"LLL yyyy\") }}</code></small> [{% if news.data.blogHighlight %}<strong class=\"blog-lrg\">{% endif %}{{ news.data.newstitle }}{% if news.data.blogHighlight %}</strong>{% endif %}]({{ news.url }})\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Download Count Display Using Liquid Template\nDESCRIPTION: Conditional Liquid template that shows the current download count if npm data is available, formatting the number to be human-readable and including the current date.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-02-23-eight-million.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{%- if npm and npm.downloads %} _That download count is now {{ npm.downloads | humanReadableNum }} (as of {{ config.now | newsDate }})._\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Supporter Data for the Eleventy Website\nDESCRIPTION: This command refreshes the list of supporters for the Eleventy project. It likely fetches updated information about project sponsors and contributors to display on the website.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run get-new-supporters\n```\n\n----------------------------------------\n\nTITLE: Resulting Data Structure Without Deep Data Merge\nDESCRIPTION: This JSON snippet shows the resulting data structure when Deep Data Merge is not enabled, demonstrating how data from the layout overrides the template data.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-deep-merge.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"This is a Good Blog Post\",\n\t\"author\": \"Zach\",\n\t\"tags\": [\"CSS\", \"HTML\"],\n\t\"eleventyNavigation\": {\n\t\t\"key\": \"my-key\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output of Simple Shortcode\nDESCRIPTION: This HTML snippet shows the expected output generated by using the 'user' shortcode as demonstrated in the previous Handlebars usage example. It displays the user's name and Twitter handle within nested divs.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/handlebars.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"user\">\n\t<div class=\"user_name\">Zach Leatherman</div>\n\t<div class=\"user_twitter\">@zachleat</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generator Data as JSON via URL\nDESCRIPTION: Defines the URL format for accessing the 11ty Generator Image service to retrieve JSON data about the static site generator used by a specified website URL. The target website's URL must be URI encoded and appended to the endpoint path.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/generator.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://v1.generator.11ty.dev/json/:url/\n```\n\n----------------------------------------\n\nTITLE: Outputting GitHub Stargazers Count in Template with Liquid/Nunjucks (HTML)\nDESCRIPTION: This HTML template snippet illustrates how to access and display the stargazers count, obtained from the Eleventy data file, directly within a template using Liquid or Nunjucks syntax. By referencing the github.stargazers variable, the template renders the latest fetched value at build time. No additional dependencies are required beyond Eleventy itself. Input: github global data object. Output: the number of GitHub stars followed by descriptive text. Context: Should be placed within a template processed by Eleventy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/eliminate-js.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{{ github.stargazers }} GitHub Stars\n```\n\n----------------------------------------\n\nTITLE: Specifying Input and Output Directories Programmatically (Node.js)\nDESCRIPTION: This Node.js script shows how to instantiate the Eleventy class while specifying custom input and output directories. The first argument to the `Eleventy` constructor is the input directory path, and the second is the output directory path.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/programmatic.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// my-node-script.js\nconst Eleventy = require(\"@11ty/eleventy\");\n\n(async function() {\n\t// Input directory: src\n\t// Output directory: dist\n\tlet elev = new Eleventy(\"src\", \"dist\");\n\n\tawait elev.init();\n\tawait elev.write();\n})();\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Stargazers Count Rendering (Text)\nDESCRIPTION: This snippet shows a literal example of what the rendered HTML output would look like in the browser when the template variable for stargazer count is populated. It represents the output after Eleventy has replaced the template variable with live data. No code or dependencies are required; this is for demonstration and verification purposes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/quicktips/eliminate-js.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1515 GitHub Stars\n```\n\n----------------------------------------\n\nTITLE: Liquid Template YouTube Video Embed\nDESCRIPTION: Uses Eleventy's custom YouTube embed shortcode to insert a video player into the page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2020-10-15-state-of-eleventy-2020.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% youtubeEmbed \"ix5mPa6D7ZA\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Eleventy Blog Post\nDESCRIPTION: This YAML front matter sets up the configuration for an Eleventy blog post. It defines the news title and sets up the navigation structure, placing this post under the 'Blog' parent in the site's navigation hierarchy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2020-05-27-jamstack-survey.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"State of the Jamstack Survey 2020 Results\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding GitHub Release Link with Screenshot in 11ty Post\nDESCRIPTION: HTML code that creates a card-style link to the GitHub release notes for Eleventy v3.0.0-beta.1, featuring a dynamically generated screenshot using the 11ty screenshot service.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-07-31-three-point-oh-beta-one.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ external_url }}\" class=\"elv-externalexempt opengraph-card\">\n  <img src=\"https://v1.screenshot.11ty.dev/{{ external_url | urlencode }}/opengraph/\" alt=\"Eleventy v3.0.0-beta.1: ESM like a Phoenix (the mythical bird, not Arizona)\" loading=\"lazy\" decoding=\"async\" width=\"650\" height=\"341\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Yearly Estimate with One-time Donations in Nunjucks\nDESCRIPTION: Computes and displays the total yearly estimate including amortized one-time payments.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/admin.md#2025-04-23_snippet_7\n\nLANGUAGE: nunjucks\nCODE:\n```\n{{ (opencollectiveMonthly.recurringAmount * 12 + opencollective.onetimeDonations.total) | displayPrice }}\n```\n\n----------------------------------------\n\nTITLE: Exporting Function with Destructured Data in Eleventy Template - JavaScript\nDESCRIPTION: Exports a function using parameter destructuring to directly access properties from the data object. Suitable for cleaner syntax in dynamic templates. Input: object with 'name'; output: HTML string.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/javascript.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function ({ name }) {\n\treturn `<p>${name}</p>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Resulting Data Object After Eleventy Data Cascade\nDESCRIPTION: JSON representation of the final data object after the Data Cascade merges data from the template and layout.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-cascade.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"This is a Good Blog Post\",\n\t\"author\": \"Zach\",\n\t\"tags\": [\"CSS\", \"HTML\", \"JavaScript\"],\n\t\"layout\": \"my-layout.njk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generator Logo Image via URL\nDESCRIPTION: Defines the URL format for accessing the 11ty Generator Image service to retrieve the logo image of the static site generator used by a specified website URL. The target website's URL must be URI encoded and appended to the endpoint path.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/services/generator.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://v1.generator.11ty.dev/image/:url/\n```\n\n----------------------------------------\n\nTITLE: Identifying the Legacy Command Prompt Name on Windows\nDESCRIPTION: Specifies the name of the older command-line interface on Windows, `Command Prompt`. It's mentioned as a less preferred alternative to the modern Windows Terminal or PowerShell.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n`Command Prompt`\n```\n\n----------------------------------------\n\nTITLE: Importing Eleventy Plugins with CommonJS in v3 (Dynamic Import)\nDESCRIPTION: Demonstrates the recommended approach for importing Eleventy bundled plugins in a CommonJS configuration file for Eleventy v3, using dynamic imports with async/await.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/cjs-esm.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (eleventyConfig) {\n\tconst { I18nPlugin, RenderPlugin, HtmlBasePlugin } = await import(\"@11ty/eleventy\");\n\t// …\n};\n```\n\n----------------------------------------\n\nTITLE: Installing <is-land> with npm and Including in HTML (HTML)\nDESCRIPTION: Demonstrates how to install the @11ty/is-land package via npm and include it in a web page using either a separate script or inline ES module import. Ensures <is-land> is defined before other custom elements for correct operation. No dependencies required beyond npm and an ES module-supporting environment. Inputs: installation command or script tag; Outputs: availability of the <is-land> custom element.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/is-land.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @11ty/is-land\n```\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"module\\\" src=\\\"/is-land.js\\\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"module\\\">\\n\\timport \\\"/is-land.js\\\";\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation in Markdown\nDESCRIPTION: Sets up the front matter for an Eleventy blog post, including the news title and navigation parent.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-01-30-conference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: \"We're running an 11ty Conference!\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Business Information in JSON for Eleventy Network\nDESCRIPTION: This JSON snippet demonstrates how to add basic business information to a site's configuration file. It includes the required 'business_url' property for joining the Eleventy Super Professional Business Network.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-02-26-espbn.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"url\": \"https://www.zachleat.com/\",\n\t\"name\": \"Zach Leatherman\",\n\t\"twitter\": \"zachleat\",\n\t\"business_url\": \"https://www.zachleat.com/hire-me/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Business Information in JSON for Eleventy Network\nDESCRIPTION: This JSON snippet shows how to add extended business information to a site's configuration file. It includes both the required 'business_url' and the optional 'business_name' properties for a more detailed listing in the Eleventy Super Professional Business Network.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-02-26-espbn.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"url\": \"https://www.zachleat.com/\",\n\t\"name\": \"Zach Leatherman\",\n\t\"twitter\": \"zachleat\",\n\t\"business_url\": \"https://www.zachleat.com/hire-me/\",\n\t\"business_name\": \"zachleat Web Design Company\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Eleventy Blog Post\nDESCRIPTION: YAML front matter configuration for an Eleventy blog post that defines a news title, navigation parent, and external URL. This metadata is used by the Eleventy static site generator to properly build and link the page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-11-19-survey-awesome.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: Help Eleventy by filling out Survey Awesome!\neleventyNavigation:\n  parent: Blog\nexternal_url: https://survey.awesome.me/?from=11ty\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Recurring Monthly Donations in Nunjucks\nDESCRIPTION: Shows the total amount of recurring monthly donations from Open Collective.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/admin.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n{{ opencollectiveMonthly.recurringAmount | displayPrice }}\n```\n\n----------------------------------------\n\nTITLE: Adding Function-Based Global Data in Eleventy Config\nDESCRIPTION: Demonstrates adding global data using functions that evaluate before being added to the data cascade.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-global-custom.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (eleventyConfig) {\n\televentyConfig.addGlobalData(\"myDate\", () => new Date());\n\n\t// myDate's value will be a Date instance\n};\n```\n\n----------------------------------------\n\nTITLE: Debug Command for Windows PowerShell - Shell\nDESCRIPTION: Command to enable debug mode in Eleventy for Windows PowerShell environment.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$env:DEBUG=\"Eleventy*\"; npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Initializing Counter Variable in Nunjucks\nDESCRIPTION: Sets up a counter variable that will be used to track step numbers throughout the document.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/community.md#2025-04-23_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% set count = 0 %}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Command Prompt Executable Name on Windows\nDESCRIPTION: Provides the executable filename (`cmd.exe`) for the legacy `Command Prompt` application on Windows. This can be used to launch it directly.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n`cmd.exe`\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for Eleventy Certification\nDESCRIPTION: This HTML snippet creates a simple form for users to participate in the fictional Eleventy certification program. It includes a checkbox for confirmation and a submit button with custom styling.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2025-01-13-certification.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/blog/certification/success/\" class=\"fl fl-nowrap fl-center\">\n\t<label class=\"elv-type4\">\n\t\t<input type=\"checkbox\" required> I heard Eleventy was good\n\t</label>\n\t<button class=\"btn-primary btn-primary-sm benchnine rainbow-active rainbow-active-noanim elv-externalexempt\">Certify Me</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Matter in Markdown for Eleventy\nDESCRIPTION: Sets up the front matter for an Eleventy blog post, including the news title and navigation parent.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-03-03-five-million.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: Five Million npm Downloads!\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Blog Post Frontmatter in Markdown\nDESCRIPTION: This snippet defines the frontmatter for an Eleventy blog post, setting the news title and configuring the navigation parent. It demonstrates how to structure metadata for an Eleventy blog entry.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-02-10-product-hunt.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: We're on Product Hunt Today!\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Blog Post Frontmatter\nDESCRIPTION: Sets up the frontmatter for an Eleventy blog post, including the title and navigation parent.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-10-08-state-of-eleventy-2021.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"The State of Eleventy (2021) in Two Minutes\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding an Image in HTML\nDESCRIPTION: This HTML `<img>` tag embeds an image file named `twomillion.png` located in the `/blog/` directory. The `alt` attribute provides descriptive text for accessibility, explaining that the image shows npm download statistics. A CSS class `sites-screenshot` is applied for styling, and an inline style sets the maximum width to 700 pixels.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-09-03-2million.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/blog/twomillion.png\" alt=\"Chart showing the npm download statistics from January 1, 2018 to August 31, 2021\" class=\"sites-screenshot\" style=\"max-width: 700px\">\n```\n\n----------------------------------------\n\nTITLE: Displaying One-time Donations Summary in Nunjucks\nDESCRIPTION: Shows a summary of one-time donations over the last 12 months, including count and total amount.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/admin.md#2025-04-23_snippet_4\n\nLANGUAGE: nunjucks\nCODE:\n```\n* `{{ opencollective.onetimeDonations.count }}` donations in the last 12 months\n* Totalling `{{ opencollective.onetimeDonations.total | displayPrice }}`\n* Approximately `{{ (opencollective.onetimeDonations.total/12) | displayPrice }}` per month\n```\n\n----------------------------------------\n\nTITLE: Debug Command for Windows CMD - Shell\nDESCRIPTION: Command to enable debug mode in Eleventy for Windows Command Prompt.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nset DEBUG=Eleventy* & npx @11ty/eleventy\n```\n\n----------------------------------------\n\nTITLE: Transformed HTML After Ignoring Child Nodes (HTML)\nDESCRIPTION: Shows the final HTML output after ignoring elements marked with eleventy:id-ignore during id attribute computation. The resulting id remains unaffected by the ignored child node, which helps avoid unnecessary id complexity. This feature streamlines deep linking when headings contain non-essential markup.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/id-attribute.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1 id=\\\"welcome-to-eleventy\\\">Welcome to Eleventy</h1>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Eleventy using Liquid\nDESCRIPTION: Uses a custom Eleventy shortcode to embed a YouTube video in the page content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-03-03-five-million.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% youtubeEmbed \"tjfmI1epOag\" %}\n```\n\n----------------------------------------\n\nTITLE: Setting Eleventy Navigation Configuration in Markdown Frontmatter\nDESCRIPTION: YAML frontmatter configuration for Eleventy navigation that sets this page as a pinned Community child page with the key 'How can I contribute?' and order priority 0.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/community.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  parent: Community\n  key: How can I contribute?\n  pinned: true\n  order: 0\nignoreSupporters: true\nignoreGitHubButtons: true\n---\n```\n\n----------------------------------------\n\nTITLE: Identifying 'Konsole' as a Linux Terminal Name\nDESCRIPTION: Specifies 'Konsole' as the name of the terminal application typically found in Linux distributions using the KDE Plasma desktop environment.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n`Konsole`\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Monthly Donations in Nunjucks\nDESCRIPTION: Loops through monthly donations, displaying the amount, count, and names of contributors for each donation level.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/admin.md#2025-04-23_snippet_2\n\nLANGUAGE: nunjucks\nCODE:\n```\n{%- for donation,count in opencollectiveMonthly.buckets %}\n\n- `{{ donation | displayPrice }}` _(×{{ count }}) {{ opencollectiveMonthly.names[donation] | join(\", \") }}_\n  {%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for 8 Million Downloads Blog Post\nDESCRIPTION: YAML frontmatter that defines the blog post title and navigation structure, placing this post under the Blog parent in the navigation hierarchy.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-02-23-eight-million.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: Eight Million npm Downloads!\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Overriding Content Dates for Collection Sorting\nDESCRIPTION: Example showing how to override the default date for a content file, which affects how it is sorted in collections.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndate: 2016-01-01\n---\n```\n\n----------------------------------------\n\nTITLE: Identifying 'Gnome Terminal' as a Linux Terminal Name\nDESCRIPTION: Specifies 'Gnome Terminal' as the name of the terminal application typically found in Linux distributions using the GNOME desktop environment.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n`Gnome Terminal`\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Eleventy Blog Post\nDESCRIPTION: Front matter configuration for an Eleventy blog post about stability, setting up the navigation parent and news title.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-04-05-stability.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"The Stability of Eleventy\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation and Metadata in Markdown\nDESCRIPTION: This snippet sets up the front matter for an Eleventy blog post, including the news title and navigation configuration.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-10-08-11ties.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnewstitle: \"The 11ties: 11 min ⚡️ talks about Eleventy on 11/11\"\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive OpenGraph Card with HTML and Picture Element\nDESCRIPTION: This HTML snippet generates a responsive OpenGraph card for the event, using the picture element to provide different image sources based on screen size and format support.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2021-10-08-11ties.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.meetup.com/JAMstack-Toronto/events/281278073/\" class=\"elv-externalexempt opengraph-card\">\n  <picture>\n    <source type=\"image/webp\" srcset=\"https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/small/webp/ 375w, https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/medium/webp/ 650w\" sizes=\"100vw\">\n    <source type=\"image/jpeg\" srcset=\"https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/small/jpeg/ 375w, https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/medium/jpeg/ 650w\" sizes=\"100vw\">\n    <img alt=\"OpenGraph image for https://www.meetup.com/JAMstack-Toronto/events/281278073/\" loading=\"lazy\" decoding=\"async\" src=\"https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/small/jpeg/\" width=\"650\" height=\"341\">\n  </picture>\n  <span>The 11ties: 11 Minute Talks about 11ty on 11/11</span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Displaying Emoji with Nunjucks\nDESCRIPTION: Uses an emoji shortcode to render a waving hand emoji in the text.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/community.md#2025-04-23_snippet_8\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% emoji \"👋\" %}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections by Tag in Eleventy\nDESCRIPTION: Demonstrates how to create a collection filtered by a specific tag using getFilteredByTag(). This example creates a collection containing only items with the 'post' tag.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Get only content that matches a tag\n\televentyConfig.addCollection(\"myPosts\", function (collectionsApi) {\n\t\treturn collectionsApi.getFilteredByTag(\"post\");\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Eleventy using Custom Shortcode\nDESCRIPTION: Uses a custom Eleventy shortcode to embed a YouTube video with the specified video ID.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-25-cloudcannon.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% youtubeEmbed \"nypsmn70ipI\" %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Screenshot Link in HTML\nDESCRIPTION: This HTML snippet creates a link to the State of JavaScript survey website, using an Eleventy shortcode to generate a screenshot of the site.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-11-23-state-of-js.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://stateofjs.com/\" style=\"display: block; max-width: 16em\">{% getScreenshotHtml \"State of JavaScript\", \"https://stateofjs.com/\" %}</a>\n```\n\n----------------------------------------\n\nTITLE: Identifying 'XTerm' as a Linux Terminal Name\nDESCRIPTION: Specifies 'XTerm' as a standard, widely available terminal emulator for the X Window System on Linux and other Unix-like systems.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n`XTerm`\n```\n\n----------------------------------------\n\nTITLE: Displaying Monthly Contributor Count in Nunjucks\nDESCRIPTION: Renders the current number of monthly contributors from Open Collective data.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/admin.md#2025-04-23_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n{{ opencollectiveMonthly.contributorCount }}\n```\n\n----------------------------------------\n\nTITLE: Embedding a Responsive Image with Eleventy Image Shortcode using Liquid\nDESCRIPTION: This Liquid snippet utilizes Eleventy's built-in `image` shortcode (often powered by the `eleventy-img` plugin) to insert a responsive image. It takes the image source path, alt text, an array of widths for generating different sizes, optional CSS classes (empty in this case), and the `sizes` attribute to guide browser loading.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-04-six-million.md#2025-04-23_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% image \"./src/blog/six-million.jpg\", \"Zach pointing to the new balloons in his office that say 6 Million\", [350, 700], \"\", \"100vw\" %}\n```\n\n----------------------------------------\n\nTITLE: Identifying 'Terminal' as a Linux Terminal Name\nDESCRIPTION: Specifies 'Terminal' as one of the common names used for a terminal application across various Linux distributions.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n`Terminal`\n```\n\n----------------------------------------\n\nTITLE: Displaying an External Link with Screenshot in 11ty\nDESCRIPTION: A Liquid template snippet that creates an external link to the Eleventy Wikipedia page with a screenshot preview. It uses the 11ty screenshot service to generate an OpenGraph image of the Wikipedia page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-10-17-wikipedia.md#2025-04-23_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n<a href=\"{{ external_url }}\" class=\"elv-externalexempt opengraph-card\">\n  <img src=\"https://v1.screenshot.11ty.dev/{{ external_url | urlencode }}/opengraph/\" alt=\"A screenshot of the Wikipedia page for Eleventy\" loading=\"lazy\" decoding=\"async\" width=\"650\" height=\"341\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Using Liquid Filter for Twitter URL Canonicalization\nDESCRIPTION: This code uses a custom Liquid filter to canonicalize a Twitter URL, likely for consistent formatting or tracking purposes.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-02-14-eleventy-oss.md#2025-04-23_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{{ \"https://twitter.com/eleven_ty/status/1493284209925967872\" | canonicalTwitterUrl }}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS for Site Speed Scores\nDESCRIPTION: Defines CSS styling for the speed score component displayed on author sites. Controls the appearance of performance metrics including rank, rank changes, and overall layout.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/authors/author-pages.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n{% css %}\n.site-score speedlify-score {\nflex-wrap: nowrap;\n}\n.site-score speedlify-score {\nmargin-top: .5em;\n}\n.site-score .speedlify-rank {\nfont-weight: 700;\n}\n.site-score .speedlify-rank:before {\nfont-weight: 400;\n}\n.site-score .speedlify-rank-change.down {\ndisplay: none;\n}\n{% endcss %}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections by Glob Patterns in Eleventy\nDESCRIPTION: Demonstrates the getFilteredByGlob() method to filter collections by file path patterns. Examples show filtering by file extension and directory, including using multiple glob patterns in an array.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections-api.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\televentyConfig.addCollection(\"onlyMarkdown\", function (collectionApi) {\n\t\treturn collectionApi.getFilteredByGlob(\"**/*.md\");\n\t});\n\n\televentyConfig.addCollection(\"posts\", function (collectionApi) {\n\t\treturn collectionApi.getFilteredByGlob(\"_posts/*.md\");\n\t});\n\n\televentyConfig.addCollection(\"posts\", function (collectionApi) {\n\t\t// Also accepts an array of globs!\n\t\treturn collectionApi.getFilteredByGlob([\"posts/*.md\", \"notes/*.md\"]);\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Blog Post\nDESCRIPTION: This YAML front matter sets up the navigation configuration for the blog post in Eleventy, specifying the parent navigation item as 'Blog'.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-11-23-state-of-js.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: Represent Eleventy in the State of JavaScript Survey 2022\neleventyNavigation:\n  parent: Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Installing @11ty/eleventy-fetch via npm\nDESCRIPTION: Installs the `@11ty/eleventy-fetch` package using the Node Package Manager (npm). This command should be run in the terminal within the project directory.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/fetch.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @11ty/eleventy-fetch\n```\n\n----------------------------------------\n\nTITLE: Displaying Median and Mean Monthly Donations in Nunjucks\nDESCRIPTION: Shows the median and mean monthly donation amounts from Open Collective data.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/admin.md#2025-04-23_snippet_3\n\nLANGUAGE: nunjucks\nCODE:\n```\n_Median monthly donation:_ `{{ opencollectiveMonthly.stats.median | displayPrice }}`\n_Mean monthly donation:_ `{{ opencollectiveMonthly.stats.mean | displayPrice }}`\n```\n\n----------------------------------------\n\nTITLE: Disabling Dynamic Permalink Templating via Front Matter in Eleventy Markdown\nDESCRIPTION: Demonstrates how to disable template rendering in permalinks for a specific content file using YAML front matter in Eleventy. Sets the `permalink` to a static string and disables dynamic evaluation by adding `dynamicPermalink: false`. This is particularly useful for template engines, like Pug, where default templating might lead to unwanted results. No code dependencies, just needs to be present in the front matter block.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n---\npermalink: \"/this-will-be-a-string-without-templating/\"\ndynamicPermalink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Creating YouTube Video Embed with Nunjucks Template Tag\nDESCRIPTION: Uses a custom Eleventy shortcode called 'youtubeEmbed' to embed a YouTube video with the ID 'mZUTXX13X-I' into the page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-11-29-static-feedback.md#2025-04-23_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% youtubeEmbed \"mZUTXX13X-I\" %}\n```\n\n----------------------------------------\n\nTITLE: Paging an Object by Keys - Eleventy Pagination with Nunjucks\nDESCRIPTION: Shows paging of object keys in Eleventy, where each paginated item is the key of the source object. Can be used in Nunjucks templates, and keys are accessible as 'pagination.items[0]'. Expects an object as dataset and is useful when iterating over map-like data structures.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_6\n\nLANGUAGE: jinja2\nCODE:\n```\n{% include \\\"snippets/pagination/paging-object.njk\\\" %}\n```\n\n----------------------------------------\n\nTITLE: Styling Result Charts (CSS)\nDESCRIPTION: This CSS snippet styles the result charts, setting a fixed height and defining the fill color for the first bar in each chart. It's used to ensure consistent appearance across all visualizations on the page.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-17-community-survey-results.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.result-chart {\n\theight: 450px;\n}\n.result-chart .artfc-color-0 {\n\tfill: #00bbd5;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered JavaScript Code Example after Highlighting\nDESCRIPTION: Shows the JavaScript code block as it would appear in the final rendered HTML after being processed by the syntax highlighting plugin. This demonstrates the output of the Nunjucks example above.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/syntaxhighlight.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myFunction() {\n\treturn true;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Liquid Shortcode Parameter Parsing in Eleventy (JavaScript)\nDESCRIPTION: This JavaScript configuration snippet shows how to change the parameter parsing behavior for Liquid shortcodes in Eleventy using the `setLiquidParameterParsing` method. It contrasts the default 'legacy' mode with the 'builtin' mode, which uses Liquid's native parsing.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/liquid.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (eleventyConfig) {\n\t// Current default:\n\t// eleventyConfig.setLiquidParameterParsing(\"legacy\");\n\n\t// Liquid-native\n\televentyConfig.setLiquidParameterParsing(\"builtin\");\n};\n```\n\n----------------------------------------\n\nTITLE: Computed Data Configuration in JavaScript (ESM)\nDESCRIPTION: Demonstrates how to set up eleventyComputed in a data directory file to generate navigation properties.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-computed.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\televentyComputed: {\n\t\televentyNavigation: {\n\t\t\tkey: (data) => data.title,\n\t\t\tparent: (data) => data.parent,\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Tags on a Single Line\nDESCRIPTION: Example of assigning multiple tags to content using array syntax. This content will appear in multiple collections.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntags: [\"cat\", \"dog\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Basic HAML Plugin Configuration in Eleventy (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates the basic configuration needed to enable the HAML plugin within an Eleventy project's configuration file (`eleventy.config.js` or similar). It imports the plugin and adds it using `eleventyConfig.addPlugin()`.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/haml.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport hamlPlugin from \"@11ty/eleventy-plugin-haml\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(hamlPlugin);\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Missing Pages in Breadcrumbs with Nunjucks\nDESCRIPTION: This snippet shows how to handle missing pages in breadcrumb navigation by setting the allowMissing option, preventing errors when pages don't exist in Nunjucks syntax.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_27\n\nLANGUAGE: jinja2\nCODE:\n```\n{% set navPages = collections.all | eleventyNavigationBreadcrumb(\"Does not exist\", { allowMissing: true }) %}\n{{ navPages | dump | safe }}\n```\n\n----------------------------------------\n\nTITLE: Ordering Navigation Items (Bats) in YAML\nDESCRIPTION: This YAML front matter assigns an `order` value (2) to the 'Bats' navigation entry. When combined with the previous example, this ensures 'Humans' (order 1) appears before 'Bats' (order 2) under the 'Mammals' parent.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\neleventyNavigation:\n  key: Bats\n  parent: Mammals\n  order: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Canonical Twitter URL using Filter in Nunjucks\nDESCRIPTION: This Nunjucks snippet takes a raw Twitter status URL string and pipes it through the `canonicalTwitterUrl` filter. This filter likely processes the URL to ensure it's in a canonical format or performs other transformations before rendering it in the final HTML output.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-10-23-seven-million.md#2025-04-23_snippet_3\n\nLANGUAGE: Nunjucks\nCODE:\n```\n{{ \"https://twitter.com/eleven_ty/status/1338210611797389312\" | canonicalTwitterUrl }}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Breadcrumb Results\nDESCRIPTION: This displays the JSON structure returned when using the breadcrumb navigation filter, showing the parent of the 'Bats' entry.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/navigation.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"key\": \"Mammals\",\n\t\t\"url\": \"/mammals/\",\n\t\t\"title\": \"Mammals\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Numbered Step with HTML and Nunjucks\nDESCRIPTION: Creates a numbered flag element with proper screen reader support by using the counter variable.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/community.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"numberflag\"><span class=\"sr-only\">Step</span> {{ count }}</span>\n```\n\n----------------------------------------\n\nTITLE: Collection Item Data Structure\nDESCRIPTION: Example showing the data structure of a collection item in Eleventy, including page data, template content, and raw input content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/collections.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  page: {\n    inputPath: './test1.md',\n    url: '/test1/',\n    date: new Date(),\n    // … and everything else in Eleventy's `page`\n  },\n  data: { title: 'Test Title', tags: ['tag1', 'tag2'], date: 'Last Modified', /* … */ },\n  content: '<h1>Test Title</h1>\\n\\n<p>This is text content…',\n  // Pre-release only: {{ \"3.0.0-alpha.1\" | coerceVersion }}\n  rawInput: '<h1>{{ title }}</h1>\\n\\n<p>This is text content…',\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Quiet Mode via CLI in Eleventy - bash\nDESCRIPTION: Illustrates how to use the command line flag --quiet to enable quiet mode in Eleventy builds. This reduces console noise during build, useful for CI/CD pipelines or developer preferences. No code API usage required—this is a direct command line execution.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/config.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx @11ty/eleventy --quiet\n```\n\n----------------------------------------\n\nTITLE: Liquid/Nunjucks Syntax for Invoking a Paired Shortcode - Liquid, Nunjucks\nDESCRIPTION: This snippet shows the Liquid or Nunjucks syntax for invoking a paired shortcode in Eleventy. Content between the shortcode tags will be passed to the paired shortcode's callback function. Inputs: paired shortcode name and inner content.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/markdown.md#2025-04-23_snippet_10\n\nLANGUAGE: Liquid, Nunjucks\nCODE:\n```\n{% myShortcode %}My really *important* content.{% endmyShortcode %}\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Collection Item (Nunjucks/Jinja2)\nDESCRIPTION: Obtains the current collection item within Nunjucks/Jinja2 templates using the getCollectionItem filter. Accepts the page object as an optional parameter, depending on Eleventy version. Returns the item corresponding to the current context within the collection, facilitating access to metadata or detailed page-specific information.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/filters/collection-items.md#2025-04-23_snippet_7\n\nLANGUAGE: jinja2\nCODE:\n```\n{% raw %}{% set currentPost = collections.posts | getCollectionItem(page) %}{% endraw %}\n\n<!-- in {{ \"2.0.0-beta.1\" | coerceVersion }} the page argument is optional -->\n{% raw %}{% set currentPost = collections.posts | getCollectionItem %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Generating Links with InputPath in Eleventy JS Template (CommonJS)\nDESCRIPTION: Demonstrates a CommonJS module format for JavaScript templates in Eleventy. The exported function returns an anchor tag with the href set to 'my-template.md'. When run through Eleventy with the InputPath to URL plugin enabled, the system will rewrite the URL as needed. Requires Eleventy 3.x and plugin opt-in. The main input is a 'data' object (unused here); the output is safe HTML. The code is limited to NodeJS/CommonJS environments within Eleventy projects.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/inputpath-to-url.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (data) {\\n  return `<a href=\\\"my-template.md\\\">Home</a>`;\\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Blockquote in Markdown for Survey Result Highlight\nDESCRIPTION: This Markdown snippet creates a blockquote to highlight a key finding from the survey results. It emphasizes Eleventy's high satisfaction score among survey respondents.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2020-05-27-jamstack-survey.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> Relative newcomer 11ty had an amazing satisfaction score\n```\n\n----------------------------------------\n\nTITLE: Identifying WebStorm IDE with Bundled Terminal (Multi-Platform)\nDESCRIPTION: Mentions the `WebStorm` IDE, available on macOS, Windows, and Linux. It includes an integrated terminal feature for running commands directly within the IDE.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/terminal-window.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n`WebStorm`\n```\n\n----------------------------------------\n\nTITLE: Setting getData to False for Extension - Eleventy JavaScript\nDESCRIPTION: This configuration snippet sets the 'getData' option to false for a template language extension in Eleventy. When 'getData' is false, no additional JavaScript object data is included in the Data Cascade. This is the default behavior and is useful when extra data extraction from compiled objects is not required.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/custom.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t// some configuration truncated …\n\t// `false` is the default\n\tgetData: false, // no additional data is used\n```\n\n----------------------------------------\n\nTITLE: Inserting Eleventy Generator Metadata in HTML Head - Nunjucks\nDESCRIPTION: This snippet demonstrates how to output the `eleventy.generator` variable using Nunjucks (or Liquid) syntax inside your HTML meta tags. It's useful for injecting build metadata into the output pages, often for generative/crawler or compliance purposes. Dependencies: Eleventy template context with the `eleventy` variable available. Inputs: none, outputs: HTML meta tag as a string. Limitation: Requires Eleventy context; not parsed outside supported templating engines.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/data-eleventy-supplied.md#2025-04-23_snippet_2\n\nLANGUAGE: Nunjucks\nCODE:\n```\n<meta name=\"generator\" content=\"{{ eleventy.generator }}\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Featured Sites Built with Eleventy in Nunjucks\nDESCRIPTION: Iterates through and displays featured sites built with Eleventy, including their avatars and URLs.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/admin.md#2025-04-23_snippet_8\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% for key, site in builtwith -%}{% if site.url and site.featured -%}\n{% generatoravatar site.url %} [`{{ site.url }}`]({{site.url}})\n{% endif %}{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for 11ty Blog Post\nDESCRIPTION: YAML front matter configuration for an 11ty blog post announcing the joining of Font Awesome. It sets the news title, navigation parent, blog highlight status, external URL, and custom OG image.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2024-09-12-eleventy-font-awesome.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnewstitle: \"11ty is joining Font Awesome\"\neleventyNavigation:\n  parent: Blog\nblogHighlight: true\nexternal_url: https://blog.fontawesome.com/\nogimageOverride: /blog/fa-2.png\n---\n```\n\n----------------------------------------\n\nTITLE: Example Date potentially causing Time Zone Issues (YAML)\nDESCRIPTION: Shows a simple date definition in YAML front matter (`YYYY-MM-DD`). This format assumes midnight UTC, which can lead to 'off by one day' errors when displayed in a local time zone.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/dates.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndate: 2018-01-01\n---\n```\n\n----------------------------------------\n\nTITLE: Passing Full Options Object to Eleventy Constructor (Node.js)\nDESCRIPTION: This Node.js script illustrates how to provide a comprehensive options object as the third argument to the `Eleventy` constructor. This allows for detailed configuration, such as setting quiet mode, specifying the configuration file path, and potentially other build parameters.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/programmatic.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// my-node-script.js\nconst Eleventy = require(\"@11ty/eleventy\");\n\n(async function() {\n\tlet elev = new Eleventy(\"src\", \"dist\", {\n\t\t// default values\n\t\tquietMode: false,\n\t\t// Important: If you use a path prefix, you **must** pass it here.\n\t\t// pathPrefix: \"/\", \n\t\t\n\t\t// specify the location of your config file (optional)\n\t\tconfigPath: \".eleventy.js\"\n\t});\n\n\tawait elev.init();\n\tawait elev.write();\n})();\n```\n\n----------------------------------------\n\nTITLE: Including Supporter Benefits Template with Nunjucks\nDESCRIPTION: Includes a template that shows benefits for Eleventy supporters.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/community.md#2025-04-23_snippet_6\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% include \"supporter-benefits.njk\" %}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Counter in Nunjucks\nDESCRIPTION: Increments the counter variable by one to represent the next step in the guide.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/community.md#2025-04-23_snippet_2\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% set count = count + 1 %}\n```\n\n----------------------------------------\n\nTITLE: Including a PrismJS Theme CSS via CDN (HTML)\nDESCRIPTION: Provides an example of linking a PrismJS theme CSS file (e.g., `prism-okaidia.css`) from a CDN within the `<head>` of an HTML document. Including a theme CSS is necessary to visually style the highlighted code output.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/syntaxhighlight.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n\t<head>\n\t\t<!-- Some html boilerplate omitted -->\n\t\t<link\n\t\t\thref=\"https://unpkg.com/prismjs@1.20.0/themes/prism-okaidia.css\"\n\t\t\trel=\"stylesheet\"\n\t\t/>\n\t</head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Mustache Plugin Configuration in Eleventy (JavaScript)\nDESCRIPTION: Shows the basic JavaScript configuration needed in an Eleventy config file (`eleventy.config.js` or similar) to enable the Mustache plugin. It imports the plugin and adds it using `eleventyConfig.addPlugin`, making Mustache templates usable within the project.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/languages/mustache.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport mustachePlugin from \"@11ty/eleventy-plugin-mustache\";\n\nexport default function (eleventyConfig) {\n\televentyConfig.addPlugin(mustachePlugin);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Transform Callback for Full Sharp API Access (JavaScript)\nDESCRIPTION: This configuration object demonstrates the use of Eleventy Image's 'transform' callback to apply arbitrary Sharp API operations before processing. Here, 'sharp.keepExif()' is called to preserve EXIF metadata in the output images. The input to the callback is a Sharp image instance; the output is the result of running Sharp modifications before Eleventy handles sizing, cropping, etc. This approach unlocks all supported Sharp API features for advanced use cases.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/plugins/image.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n\t// …\n\ttransform: (sharp) => {\n\t\tsharp.keepExif();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding All Pagination Pages to Collections in Eleventy\nDESCRIPTION: Shows how to add all pagination pages to a collection using 'addAllPagesToCollections: true'. By default, only the first page is added to collections.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/pagination.md#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntags:\n  - myCollection\npagination:\n  data: testdata\n  size: 2\ntestdata:\n  - item1\n  - item2\n  - item3\n  - item4\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Custom File Format (JSON) using Permalink in EJS\nDESCRIPTION: Shows how to change the output file extension using the `permalink` key to generate a file with a custom format, such as JSON. This EJS template example sets the permalink to `index.json` and uses EJS syntax to stringify all collections.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/docs/permalinks.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\npermalink: \"index.json\"\n---\n\n<%- JSON.stringify(collections.all) -%>\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Horizontal Bar Chart for Hosting Services (JavaScript)\nDESCRIPTION: This code snippet initializes a horizontal bar chart using D3.js to visualize the hosting services used by Eleventy users. It imports the necessary modules and creates a new HorizontalBar instance with specific configuration options.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2023-07-17-community-survey-results.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"https://d3js.org/d3.v7.min.js\";\nimport { HorizontalBar } from \"/static/artificial-chart.js\";\nnew HorizontalBar(\"result-host\", \"result-host-table\", {\n\tshowLegend: false,\n\tshowInlineBarValues: \"outside\",\n\tvalueType: [\"float\"],\n\tmargin: {\n\t\tleft: 170\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy v1.0.0 via npm\nDESCRIPTION: Command to install Eleventy v1.0.0 to a local project using npm.\nSOURCE: https://github.com/11ty/11ty-website/blob/main/src/blog/2022-01-09-eleventy-one-point-oh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @11ty/eleventy\n```"
  }
]