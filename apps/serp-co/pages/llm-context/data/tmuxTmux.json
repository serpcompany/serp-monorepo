[
  {
    "owner": "tmux",
    "repo": "tmux",
    "content": "TITLE: Minimum Requirements for VT100 Emulation\nDESCRIPTION: Essential control sequences for basic VT100 terminal emulation, including cursor movement, screen clearing, and keyboard handling. Includes the minimum requirements for passive display, data entry, and full-screen editing functionality.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n1) To act as a passive display, implement the 4 cursor commands, the 2 erase\n   commands, direct cursor addressing, and at least inverse characters.\n   The software should be capable of handling strings with 16 numeric parameters\n   with values in the range of 0 to 255.\n\n  [A      Move cursor up one row, stop if a top of screen\n  [B      Move cursor down one row, stop if at bottom of screen\n  [C      Move cursor forward one column, stop if at right edge of screen\n  [D      Move cursor backward one column, stop if at left edge of screen\n  [H      Home to row 1 column 1 (also [1;1H)\n  [J      Clear from current position to bottom of screen\n  [K      Clear from current position to end of line\n  [24;80H Position to line 24 column 80 (any line 1 to 24, any column 1 to 132)\n  [0m     Clear attributes to normal characters\n  [7m     Add the inverse video attribute to succeeding characters\n  [0;7m   Set character attributes to inverse video only\n\n2) To enter data in VT100 mode, implement the 4 cursor keys and the 4 PF keys.\n   It must be possible to enter ESC, TAB, BS, DEL, and LF from the keyboard.\n\n  [A       Sent by the up-cursor key (alternately ESC O A)\n  [B       Sent by the down-cursor key (alternately ESC O B)\n  [C       Sent by the right-cursor key (alternately ESC O C)\n  [D       Sent by the left-cursor key (alternately ESC O D)\n  OP       PF1 key sends ESC O P\n  OQ       PF2 key sends ESC O Q\n  OR       PF3 key sends ESC O R\n  OS       PF3 key sends ESC O S\n  [c       Request for the terminal to identify itself\n  [?1;0c   VT100 with memory for 24 by 80, inverse video character attribute\n  [?1;2c   VT100 capable of 132 column mode, with bold+blink+underline+inverse\n\n3) When doing full-screen editing on a VT100, implement directed erase, the\n   numeric keypad in applications mode, and the limited scrolling region.\n   The latter is needed to do insert/delete line functions without rewriting\n   the screen.\n\n  [0J     Erase from current position to bottom of screen inclusive\n  [1J     Erase from top of screen to current position inclusive\n  [2J     Erase entire screen (without moving the cursor)\n  [0K     Erase from current position to end of line inclusive\n  [1K     Erase from beginning of line to current position inclusive\n  [2K     Erase entire line (without moving cursor)\n  [12;24r   Set scrolling region to lines 12 thru 24.  If a linefeed or an\n            INDex is received while on line 24, the former line 12 is deleted\n            and rows 13-24 move up.  If a RI (reverse Index) is received while\n            on line 12, a blank line is inserted there as rows 12-13 move down.\n            All VT100 compatible terminals (except GIGI) have this feature.\n  ESC =   Set numeric keypad to applications mode\n  ESC >   Set numeric keypad to numbers mode\n  OA      Up-cursor key    sends ESC O A after ESC = ESC [ ? 1 h\n  OB      Down-cursor key  sends ESC O B    \"      \"         \"\n  OC      Right-cursor key sends ESC O B    \"      \"         \"\n  OB      Left-cursor key  sends ESC O B    \"      \"         \"\n  OM      ENTER key        sends ESC O M after ESC =\n  Ol      COMMA on keypad  sends ESC O l    \"      \"   (that's lowercase L)\n  Om      MINUS on keypad  sends ESC O m    \"      \"\n  Op      ZERO on keypad   sends ESC O p    \"      \"\n  Oq      ONE on keypad    sends ESC O q    \"      \"\n  Or      TWO on keypad    sends ESC O r    \"      \"\n```\n\n----------------------------------------\n\nTITLE: VT100 Character Attribute Control Sequences\nDESCRIPTION: Control sequences for character attributes including font selection, text formatting, and color settings. These codes control aspects like bold, dim, underline, blink, and text/background colors.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n[11m - [19m = Selete alternate font (LA100 has 11 thru 14)\n[20m = FRAKTUR (whatever that means)\n[22m = Cancel bold or dim attribute only (VT220)\n[24m = Cancel underline attribute only (VT220)\n[25m = Cancel fast or slow blink attribute only (VT220)\n[27m = Cancel negative image attribute only (VT220)\n[30m = Write with black,   [40m = Set background to black (GIGI)\n[31m = Write with red,     [41m = Set background to red\n[32m = Write with green,   [42m = Set background to green\n[33m = Write with yellow,  [43m = Set background to yellow\n[34m = Write with blue,    [44m = Set background to blue\n[35m = Write with magenta, [45m = Set background to magenta\n[36m = Write with cyan,    [46m = Set background to cyan\n[37m = Write with white,   [47m = Set background to white\n[38m, [39m, [48m, [49m are reserved\n```\n\n----------------------------------------\n\nTITLE: Set Graphics Rendition (SGR) Escape Sequence Examples\nDESCRIPTION: The SGR command sets text attributes like bold, underline, and color. The examples show various text formatting options.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n[0m = Clear all special attributes\n[1m = Bold or increased intensity\n[2m = Dim or secondary color on GIGI  (superscript on XXXXXX)\n[3m = Italic                          (subscript on XXXXXX)\n[4m = Underscore, [0;4m = Clear, then set underline only\n[5m = Slow blink\n[6m = Fast blink                      (overscore on XXXXXX)\n[7m = Negative image, [0;1;7m = Bold + Inverse\n[8m = Concealed (do not display character echoed locally)\n[9m = Reserved for future standardization\n[10m = Select primary font (LA100)\n```\n\n----------------------------------------\n\nTITLE: VT102 Terminal Identification and Control Codes\nDESCRIPTION: ANSI escape sequences for VT102 terminal identification and various control operations. These codes enable operations like character insertion/deletion, line manipulation, insert/replace mode, and printer control.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\n[c     Request for the terminal to identify itself\n[?6c   VT102 (printer port, 132 column mode, and ins/del standard)\n[1@    Insert a blank character position (shift line to the right)\n[1P    Delete a character position (shift line to the left)\n[1L    Insert blank line at current row (shift screen down)\n[1M    Delete the current line (shift screen up)\n[4h    Set insert mode, new characters shove existing ones to the right\n[4l    Reset insert mode, new characters replace existing ones\n[0i    Print screen (all 24 lines) to the printer\n[4i    All received data goes to the printer (nothing to the screen)\n[5i    All received data goes to the screen (nothing to the printer)\n```\n\n----------------------------------------\n\nTITLE: DEC Private Control Sequences\nDESCRIPTION: DEC-specific private control sequences for terminal configuration and operation. These codes include functions for terminal reset, LED control, margin setting, and tab stop configuration.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nDECSTR - Soft Terminal Reset\n[!p = Soft Terminal Reset\nDECLL - Load LEDs\n[0q = Turn off all, [?1;4q turns on L1 and L4, etc\n[154;155;157q = VT100 goes bonkers\n[2;23!q = Partial screen dump from GIGI to graphics printer\n[0\"q = DECSCA Select Character Attributes off\n[1\"q = DECSCA - designate set as non-erasable\n[2\"q = DECSCA - designate set as erasable\nDECSTBM - Set top and bottom margins (scroll region on VT100)\n[4;20r = Set top margin at line 4 and bottom at line 20\nDECSTRM - Set left and right margins on LA100,LA120\n[5;130s = Set left margin at column 5 and right at column 130\nDECSLPP - Set physical lines per page\n[66t = Paper has 66 lines (11 inches at 6 per inch)\nDECSHTS - Set many horizontal tab stops at once on LA100\n[9;17;25;33;41;49;57;65;73;81u = Set standard tab stops\nDECSVTS - Set many vertical tab stops at once on LA100\n[1;16;31;45v = Set vert tabs every 15 lines\nDECSHORP - Set horizontal pitch on LAxxx printers\n[1w = 10 characters per inch, [2w = 12 characters per inch\n[0w=10, [3w=13.2, [4w=16.5, [5w=5, [6w=6, [7w=6.6, [8w=8.25\nDECREQTPARM - Request terminal parameters\n[3;5;2;64;64;1;0x = Report, 7 bit Even, 1200 baud, 1200 baud\nDECTST - Invoke confidence test\n[2;1y = Power-up test on VT100 series (and VT100 part of VT125)\n[3;1y = Power-up test on GIGI (VK100)\n[4;1y = Power-up test on graphics portion of VT125\nDECVERP - Set vertical pitch on LA100\n[1z = 6 lines per inch, [2z = 8 lines per inch\n[0z=6, [3z=12, [4z=3, [5z=3, [6z=4\nPrivate\nDECTTC - Transmit Termination Character\n[0| = No extra characters, [1| = terminate with FF\nDECPRO - Define protected field on VT132\n[0} = No protection, [1;4;5;7} = Any attribute is protected\n[254} = Characters with no attributes are protected\nDECKEYS - Sent by special function keys\n[1~=FIND, [2~=INSERT, [3~=REMOVE, [4~=SELECT, [5~=PREV, [6~=NEXT\n[17~=F6...[34~=F20 ([23~=ESC,[24~=BS,[25~=LF,[28~=HELP,[29~=DO)\nDELETE is always ignored\n```\n\n----------------------------------------\n\nTITLE: Set Mode (SM) Escape Sequence Examples\nDESCRIPTION: The SM command sets various terminal modes. The examples show ANSI and DEC-specific modes that control terminal behavior.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n[0h = Error, this command is ignored\n[1h = GATM - Guarded Area Transmit Mode, send all (VT132)\n[2h = KAM - Keyboard Action Mode, disable keyboard input\n[3h = CRM - Control Representation Mode, show all control chars\n[4h = IRM - Insertion/Replacement Mode, set insert mode (VT102)\n[5h = SRTM - Status Report Transfer Mode, report after DCS\n[6h = ERM - ERasure Mode, erase protected and unprotected\n[7h = VEM - Vertical Editing Mode, IL/DL affect previous lines\n[8h, [9h are reserved\n[10h = HEM - Horizontal Editing mode, ICH/DCH/IRM go backwards\n[11h = PUM - Positioning Unit Mode, use decipoints for HVP/etc\n[12h = SRM - Send Receive Mode, transmit without local echo\n[13h = FEAM - Format Effector Action Mode, FE's are stored\n[14h = FETM - Format Effector Transfer Mode, send only if stored\n[15h = MATM - Multiple Area Transfer Mode, send all areas\n[16h = TTM - Transmit Termination Mode, send scrolling region\n[17h = SATM - Send Area Transmit Mode, send entire buffer\n[18h = TSM - Tabulation Stop Mode, lines are independent\n[19h = EBM - Editing Boundary Mode, all of memory affected\n[20h = LNM - Linefeed Newline Mode, LF interpreted as CR LF\n[?1h = DECCKM - Cursor Keys Mode, send ESC O A for cursor up\n[?2h = DECANM - ANSI Mode, use ESC < to switch VT52 to ANSI\n[?3h = DECCOLM - COLumn mode, 132 characters per line\n[?4h = DECSCLM - SCrolL Mode, smooth scrolling\n[?5h = DECSCNM - SCreeN Mode, black on white background\n[?6h = DECOM - Origin Mode, line 1 is relative to scroll region\n[?7h = DECAWM - AutoWrap Mode, start newline after column 80\n[?8h = DECARM - Auto Repeat Mode, key will autorepeat\n[?9h = DECINLM - INterLace Mode, interlaced for taking photos\n[?10h = DECEDM - EDit Mode, VT132 is in EDIT mode\n[?11h = DECLTM - Line Transmit Mode, ignore TTM, send line\n[?12h = ?\n[?13h = DECSCFDM - Space Compression/Field Delimiting on,\n[?14h = DECTEM - Transmit Execution Mode, transmit on ENTER\n[?15h = ?\n[?16h = DECEKEM - Edit Key Execution Mode, EDIT key is local\n[?17h = ?\n[?18h = DECPFF - Print FormFeed mode, send FF after printscreen\n[?19h = DECPEXT - Print Extent mode, print entire screen\n[?20h = OV1 - Overstrike, overlay characters on GIGI\n[?21h = BA1 - Local BASIC, GIGI to keyboard and screen\n[?22h = BA2 - Host BASIC, GIGI to host computer\n[?23h = PK1 - GIGI numeric keypad sends reprogrammable sequences\n[?24h = AH1 - Autohardcopy before erasing or rolling GIGI screen\n[?29h =     - Use only the proper pitch for the LA100 font\n[?38h = DECTEK - TEKtronix mode graphics\n```\n\n----------------------------------------\n\nTITLE: Reset Mode (RM) Escape Sequence Examples\nDESCRIPTION: The RM command resets various terminal modes. The examples show ANSI and DEC-specific modes that can be turned off.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n[1l = GATM - Transmit only unprotected characters (VT132)\n[2l = KAM - Enable input from keyboard\n[3l = CRM - Control characters are not displayable characters\n[4l = IRM - Reset to replacement mode (VT102)\n[5l = SRTM - Report only on command (DSR)\n[6l = ERM - Erase only unprotected fields\n[7l = VEM - IL/DL affect lines after current line\n[8l, [9l are reserved\n[10l = HEM - ICH and IRM shove characters forward, DCH pulls\n[11l = PUM - Use character positions for HPA/HPR/VPA/VPR/HVP\n[12l = SRM - Local echo - input from keyboard sent to screen\n[13l = FEAM - HPA/VPA/SGR/etc are acted upon when received\n[14l = FETM - Format Effectors are sent to the printer\n[15l = MATM - Send only current area if SATM is reset\n[16l = TTM - Transmit partial page, up to cursor position\n[17l = SATM - Transmit areas bounded by SSA/ESA/DAQ\n[18l = TSM - Setting a tab stop on one line affects all lines\n[19l = EBM - Insert does not overflow to next page\n[20l = LNM - Linefeed does not change horizontal position\n[?1l = DECCKM - Cursor keys send ANSI cursor position commands\n[?2l = DECANM - Use VT52 emulation instead of ANSI mode\n[?3l = DECCOLM - 80 characters per line (erases screen)\n[?4l = DECSCLM - Jump scrolling\n[?5l = DECSCNM - Normal screen (white on black background)\n[?6l = DECOM - Line numbers are independent of scrolling region\n[?7l = DECAWM - Cursor remains at end of line after column 80\n[?8l = DECARM - Keys do not repeat when held down\n[?9l = DECINLM - Display is not interlaced to avoid flicker\n[?10l = DECEDM - VT132 transmits all key presses\n[?11l = DECLTM - Send page or partial page depending on TTM\n[?12l = ?\n[?13l = DECSCFDM - Don't suppress trailing spaces on transmit\n[?14l = DECTEM - ENTER sends ESC S (STS) a request to send\n[?15l = ?\n[?16l = DECEKEM - EDIT key transmits either $[10h or $[10l\n[?17l = ?\n[?18l = DECPFF - Don't send a formfeed after printing screen\n[?19l = DECPEXT - Print only the lines within the scroll region\n[?20l = OV0 - Space is destructive, replace not overstrike, GIGI\n[?21l = BA0 - No BASIC, GIGI is On-Line or Local\n[?22l = BA0 - No BASIC, GIGI is On-Line or Local\n[?23l = PK0 - Ignore reprogramming on GIGI keypad and cursors\n[?24l = AH0 - No auto-hardcopy when GIGI screen erased\n[?29l = Allow all character pitches on the LA100\n[?38l = DECTEK - Ignore TEKtronix graphics commands\n```\n\n----------------------------------------\n\nTITLE: ANSI Codes for Keypad Input\nDESCRIPTION: ANSI escape sequences for numeric keypad input. Each code represents a specific key on the numeric keypad and the corresponding escape sequence it sends.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nOs      THREE on keypad  sends ESC O s\nOt      FOUR on keypad   sends ESC O t\nOu      FIVE on keypad   sends ESC O u\nOv      SIX on keypad    sends ESC O v\nOw      SEVEN on keypad  sends ESC O w\nOx      EIGHT on keypad  sends ESC O x\nOy      NINE on keypad   sends ESC O y\n```\n\n----------------------------------------\n\nTITLE: Device Status Report (DSR) Control Sequences\nDESCRIPTION: Control sequences for querying terminal status using Device Status Report. These codes allow checking terminal readiness, malfunction status, and requesting cursor position information.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n[0n = Terminal is ready, no malfunctions detected\n[1n = Terminal is busy, retry later\n[2n = Terminal is busy, it will send DSR when ready\n[3n = Malfunction, please try again\n[4n = Malfunction, terminal will send DSR when ready\n[5n = Command to terminal to report its status\n[6n = Command to terminal requesting cursor position (CPR)\n[?15n = Command to terminal requesting printer status, returns\n        [?10n = OK, [?11n = not OK, [?13n = no printer.\n[?25n = \"Are User Defined Keys Locked?\" (VT220)\n```\n\n----------------------------------------\n\nTITLE: Define Area Qualification (DAQ) Control Sequences\nDESCRIPTION: Control sequences for defining input field properties. These codes set restrictions on input fields including protected areas, field types (numeric, alphabetic), and field formatting options.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n[0o = Accept all input, transmit on request\n[1o = Protected and guarded, accept no input, do not transmit\n[2o = Accept any printing character in this field\n[3o = Numeric only field\n[4o = Alphabetic (A-Z and a-z) only\n[5o = Right justify in area\n[3;6o = Zero fill in area\n[7o = Set horizontal tab stop, this is the start of the field\n[8o = Protected and unguarded, accept no input, do transmit\n[9o = Space fill in area\n```\n\n----------------------------------------\n\nTITLE: Device Attributes (DA) Escape Sequence Examples\nDESCRIPTION: The DA command requests or reports terminal identification. The examples show request and response formats for different terminals.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n[c = Terminal will identify itself\n[?1;2c = Terminal is saying it is a VT100 with AVO\n[>0c = Secondary DA request (distinguishes VT240 from VT220)\n```\n\n----------------------------------------\n\nTITLE: ANSI Codes for Double Width/Height Lines\nDESCRIPTION: ANSI escape sequences for controlling double width and double height lines on capable hardware. These codes allow for creating various line styles and reverting to single-width lines.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\n#3     Top half of a double-width double-height line\n#4     Bottom half of a double-width double-height line\n#5     Make line single-width (lines are set this way when cleared by ESC [ J)\n#6     Make line double-width normal height (40 or 66 characters)\n```\n\n----------------------------------------\n\nTITLE: Control Sequences with Intermediate Characters\nDESCRIPTION: ANSI X3.64-1979 control sequences that include a space character before the terminating alphabetic character. These control advanced functions like scrolling, graphic size modification, and text justification.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nSL  - Scroll Left\n[4 @ = Move everything over 4 columns, 4 new columns at right\nSR  - Scroll Right\n[2 A = Move everything over 2 columns, 2 new columns at left\nGSM - Graphic Size Modification\n[110;50 B = Make 110% high, 50% wide\nGSS - Graphic Size Selection\n[120 C = Make characters 120 decipoints (1/6 inch) high\nFNT - FoNT selection (used by SGR, [10m thru [19m)\n[0;23 D = Make primary font be registered font #23\nTSS - Thin Space Specification\n[36 E = Define a thin space to be 36 decipoints (1/20 inch)\nJFY - JustiFY, done by the terminal/printer\n[0 E = No justification\n[1 E = Fill, bringing words up from next line if necessary\n[2 E = Interword spacing, adjust spaces between words\n[3 E = Letter spacing, adjust width of each letter\n[4 E = Use hyphenation\n[5 E = Flush left margin\n[6 E = Center following text between margins (until [0 E)\n[7 E = Flush right margin\n[8 E = Italian form (underscore instead of hyphen)\nSPI - SPacing Increment (in decipoints)\n[120;72 G = 6 per inch vertical, 10 per inch horizontal\nQUAD- Do quadding on current line of text (typography)\n[0 H = Flush left,  [1 H = Flush left and fill with leader\n[2 H = Center,      [3 H = Center and fill with leader\n[4 H = Flush right, [5 H = Flush right and fill with leader\nReserved for future standardization\nReserved for future standardization\nPrivate use\nMay be defined by the printer manufacturer\nPrivate use\nDELETE is always ignored\n```\n\n----------------------------------------\n\nTITLE: Cursor Position Report (CPR) Escape Sequence\nDESCRIPTION: The CPR sequence reports cursor position from terminal to host. The example shows a report indicating cursor is at line 24, column 80.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[24;80R\n```\n\n----------------------------------------\n\nTITLE: Horizontal and Vertical Position (HVP) Escape Sequence Examples\nDESCRIPTION: The HVP command moves cursor to a specified position. The examples show positioning in decipoints and row/column coordinates.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n[720,1440f = Move to 1 inch down and 2 inches over (decipoints)\n[24;80f = Move to row 24 column 80 if PUM is set to character\n```\n\n----------------------------------------\n\nTITLE: Horizontal Position Absolute (HPA) Escape Sequence Examples\nDESCRIPTION: The HPA command moves cursor to an absolute horizontal position. The examples show positioning in decipoints and columns.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n[720` = Move to 720 decipoints (1 inch) from left margin\n[80` = Move to column 80 on LA120\n```\n\n----------------------------------------\n\nTITLE: Vertical Position Absolute (VPA) Escape Sequence Examples\nDESCRIPTION: The VPA command moves cursor to an absolute vertical position. The examples show positioning in decipoints and lines.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n[90d = Move to 90 decipoints (1/8 inch) from top margin\n[10d = Move to line 10 if before that else line 10 next page\n```\n\n----------------------------------------\n\nTITLE: Vertical Position Relative (VPR) Escape Sequence Examples\nDESCRIPTION: The VPR command moves cursor vertically relative to current position. The examples show movement in decipoints and lines.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n[720e = Move 720 decipoints (1 inch) down from current position\n[6e = Advance 6 lines forward on LA120\n```\n\n----------------------------------------\n\nTITLE: Horizontal Position Relative (HPR) Escape Sequence Examples\nDESCRIPTION: The HPR command moves cursor horizontally relative to current position. The examples show movement in decipoints and columns.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n[360a = Move 360 decipoints (1/2 inch) from current position\n[40a = Move 40 columns to right of current position on LA120\n```\n\n----------------------------------------\n\nTITLE: Scroll Up (SU) Escape Sequence\nDESCRIPTION: The SU command moves the entire display up by a specified number of lines, with new lines appearing at the bottom. The example scrolls up 3 lines.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[3S\n```\n\n----------------------------------------\n\nTITLE: Scroll Down (SD) Escape Sequence\nDESCRIPTION: The SD command scrolls the display down, inserting new lines at the top of the screen. The example scrolls down 4 lines.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[4T\n```\n\n----------------------------------------\n\nTITLE: Cursor Tabulation Control (CTC) Escape Sequence Examples\nDESCRIPTION: The CTC command controls tab stops. The examples show setting/clearing horizontal and vertical tab stops at various positions.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n[0W = Set horizontal tab for current line at current position\n[1W = Set vertical tab stop for current line of current page\n[2W = Clear horiz tab stop at current position of current line\n[3W = Clear vert tab stop at current line of current page\n[4W = Clear all horiz tab stops on current line only\n[5W = Clear all horiz tab stops for the entire terminal\n[6W = Clear all vert tabs stops for the entire terminal\n```\n\n----------------------------------------\n\nTITLE: Tabulation Clear (TBC) Escape Sequence Examples\nDESCRIPTION: The TBC command clears tab stops. The examples show clearing horizontal and vertical tab stops in different scopes.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n[0g = Clear horizontal tab stop at current position\n[1g = Clear vertical tab stop at current line (LA120)\n[2g = Clear all horizontal tab stops on current line only LA120\n[3g = Clear all horizontal tab stops in the terminal\n```\n\n----------------------------------------\n\nTITLE: Erase Character (ECH) Escape Sequence\nDESCRIPTION: The ECH command changes a specified number of characters to an erased state. The example erases 4 characters starting from current position.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[4X\n```\n\n----------------------------------------\n\nTITLE: Repeat Character (REP) Escape Sequence\nDESCRIPTION: The REP command repeats the previous displayable character a specified number of times. The example repeats the character 80 times.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n[80b\n```\n\n----------------------------------------\n\nTITLE: Cursor Vertical Tab (CVT) Escape Sequence\nDESCRIPTION: The CVT command moves the cursor forward to a specified vertical tab stop. The example moves forward to the 2nd following vertical tab stop.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[2Y\n```\n\n----------------------------------------\n\nTITLE: Cursor Back Tab (CBT) Escape Sequence\nDESCRIPTION: The CBT command moves the cursor backward to a previous horizontal tab stop. The example moves back to the 3rd previous tab stop.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[3Z\n```\n\n----------------------------------------\n\nTITLE: Media Copy (MC) Escape Sequence Examples\nDESCRIPTION: The MC command controls media copy operations for devices like printers. The examples show various printer control operations.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n[0i = Send contents of text screen to printer\n[1i = Fill screen from auxiliary input (printer's keyboard)\n[2i = Send screen to secondary output device\n[3i = Fill screen from secondary input device\n[4i = Turn on copying received data to primary output (VT125)\n[4i = Received data goes to VT102 screen, not to its printer\n[5i = Turn off copying received data to primary output (VT125)\n[5i = Received data goes to VT102's printer, not its screen\n[6i = Turn off copying received data to secondary output (VT125)\n[7i = Turn on copying received data to secondary output (VT125)\n[?0i = Graphics screen dump goes to graphics printer VT125,VT240\n[?1i = Print cursor line, terminated by CR LF\n[?2i = Graphics screen dump goes to host computer VT125,VT240\n[?4i = Disable auto print\n[?5i = Auto print, send a line at a time when linefeed received\n```\n\n----------------------------------------\n\nTITLE: Next Page (NP) Escape Sequence\nDESCRIPTION: The NP command scrolls forward by a specified number of pages when a terminal has multiple pages of memory. The example scrolls forward 2 pages.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[2U\n```\n\n----------------------------------------\n\nTITLE: Previous Page (PP) Escape Sequence\nDESCRIPTION: The PP command scrolls backward by a specified number of pages if the terminal remembers lines scrolled off the top. The example scrolls backward 1 page.\nSOURCE: https://github.com/tmux/tmux/blob/master/tools/ansicode.txt#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n[1V\n```"
  }
]